#
# PySNMP MIB module Olicom-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Olicom-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, IpAddress, Integer32, Counter64, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, TimeTicks, ModuleIdentity, Bits, Unsigned32, iso, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Integer32", "Counter64", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "TimeTicks", "ModuleIdentity", "Bits", "Unsigned32", "iso", "ObjectIdentity", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class IPXAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

olicom = MibIdentifier((1, 3, 6, 1, 4, 1, 285))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 1))
ocmibs = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2))
temporary = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 3))
inet = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 4))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 5))
obm = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 6))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 7))
frontpanel = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 8))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9))
errorlog = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 10))
trconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 11))
infoHardwareProductId = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareProductId.setStatus('mandatory')
if mibBuilder.loadTexts: infoHardwareProductId.setDescription('A string containing the hardware product id.')
infoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: infoHardwareVersion.setDescription('A string containing the hardware version.')
infoHardwareECOLevel = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareECOLevel.setStatus('mandatory')
if mibBuilder.loadTexts: infoHardwareECOLevel.setDescription('A string containing the ECO update level.')
infoHardwareSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: infoHardwareSerialNumber.setDescription('A string containing the hardware serial number.')
infoHardwareOptionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 5), )
if mibBuilder.loadTexts: infoHardwareOptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: infoHardwareOptionTable.setDescription('A sequence of hardware options, each a string describing the appropriate option present.')
infoHardwareOptionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 5, 1), ).setIndexNames((0, "Olicom-MIB", "infoHardwareOptionNo"))
if mibBuilder.loadTexts: infoHardwareOptionTableEntry.setStatus('mandatory')
infoHardwareOptionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareOptionNo.setStatus('mandatory')
if mibBuilder.loadTexts: infoHardwareOptionNo.setDescription('The option number for this option.')
infoHardwareOption = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareOption.setStatus('mandatory')
if mibBuilder.loadTexts: infoHardwareOption.setDescription('A string describing this option.')
infoSoftwareProductId = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareProductId.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareProductId.setDescription("A string containing the software product id. Recommended format is as follows: the string consists of fixed and optional part. Fixed part contains device's symbol (eg.'CF8711' for the CrossFire 8711 FE switch). This fixed part cannot contain any whitespace characters. The optional part contains additional description, it must begin with a space character as delimiter.")
infoSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareVersion.setDescription("A string containing the software version. Recommended format is as follows: the string consists of fixed and optional part. Fixed part contains software version as 4 numbers separated by dot characters (eg. '1.0.0.20'). This fixed part must use only digit and dot characters. The optional part contains additional description, it must begin with a space character as delimiter.")
infoSoftwareECOLevel = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareECOLevel.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareECOLevel.setDescription('A string containing the ECO update level.')
infoSoftwareOptionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 9), )
if mibBuilder.loadTexts: infoSoftwareOptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareOptionTable.setDescription('A sequence of software options, each a string describing the appropriate option present.')
infoSoftwareOptionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 9, 1), ).setIndexNames((0, "Olicom-MIB", "infoSoftwareOptionNo"))
if mibBuilder.loadTexts: infoSoftwareOptionTableEntry.setStatus('mandatory')
infoSoftwareOptionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareOptionNo.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareOptionNo.setDescription('The option number for this option.')
infoSoftwareOption = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareOption.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareOption.setDescription('A string describing this option.')
infoSoftwareMIBsTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 10), )
if mibBuilder.loadTexts: infoSoftwareMIBsTable.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareMIBsTable.setDescription('A sequence of MIBs supported by this device.')
infoSoftwareMIBsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 10, 1), ).setIndexNames((0, "Olicom-MIB", "infoSoftwareMIBsNo"))
if mibBuilder.loadTexts: infoSoftwareMIBsTableEntry.setStatus('mandatory')
infoSoftwareMIBsNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareMIBsNo.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareMIBsNo.setDescription('The number for this MIB description entry.')
infoSoftwareMIBsObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 10, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareMIBsObjectID.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareMIBsObjectID.setDescription('The unique OBJECT IDENTIFIER for this MIB description entry. Olicom specific MIBs have OBJECT IDENTIFIERs that are defined as { ocmibs N }. (See ocmibs section).')
infoSoftwareMIBsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareMIBsDescription.setStatus('mandatory')
if mibBuilder.loadTexts: infoSoftwareMIBsDescription.setDescription('A string describing this MIB description entry.')
infoXtraSwTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 11), )
if mibBuilder.loadTexts: infoXtraSwTable.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwTable.setDescription('This table contains the product IDs and addtional information for the additional files included in a multichunk file.')
infoXtraSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 11, 1), ).setIndexNames((0, "Olicom-MIB", "infoXtraSwIndex"))
if mibBuilder.loadTexts: infoXtraSwEntry.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwEntry.setDescription('An entry in the infoXtraSwTable.')
infoXtraSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwIndex.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwIndex.setDescription('The entry number in the infoXtraSwTable.')
infoXtraSwFileUse = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwFileUse.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwFileUse.setDescription('From the file header: The target for the SW image.')
infoXtraSwProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwProductId.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwProductId.setDescription('From the file header: The SW product ID.')
infoXtraSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwVersion.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwVersion.setDescription('From the file header: The SW version.')
infoXtraSwEcoLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwEcoLevel.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwEcoLevel.setDescription('From the file header: The SW ECO level.')
infoXtraSwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwSerialNumber.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwSerialNumber.setDescription('From the file header: The SW serial number.')
infoXtraSwOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwOptions.setStatus('optional')
if mibBuilder.loadTexts: infoXtraSwOptions.setDescription('From the file header: A bitmask of SW options.')
infoModuleTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 12), )
if mibBuilder.loadTexts: infoModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: infoModuleTable.setDescription('This table describes all the HW modules in a system with multiple modules.')
infoModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 12, 1), ).setIndexNames((0, "Olicom-MIB", "infoModuleIndex"))
if mibBuilder.loadTexts: infoModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: infoModuleEntry.setDescription('A list of information objects for a HW module.')
infoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: infoModuleIndex.setDescription('The module index of this module. This is a unique index identifying a hardware module in the switching system. The planar board of a switch box is considered a module. Any expansion boards (slots) are assigned the subsequent moduleIndexes.')
infoModuleHwProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleHwProductId.setStatus('mandatory')
if mibBuilder.loadTexts: infoModuleHwProductId.setDescription('A string containing the modules product id (eg. from EEPROM)')
infoModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: infoModuleHwVersion.setDescription('A string containing the modules version (eg. from EEPROM)')
infoModuleHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleHwSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: infoModuleHwSerialNumber.setDescription('A string containing the modules serial no (eg. from EEPROM)')
infoModuleBootpromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleBootpromVersion.setStatus('mandatory')
if mibBuilder.loadTexts: infoModuleBootpromVersion.setDescription('A string containing the modules bootprom version. An empty string, if no bootprom is present on this module. ')
infoSwImageTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 13), )
if mibBuilder.loadTexts: infoSwImageTable.setStatus('mandatory')
if mibBuilder.loadTexts: infoSwImageTable.setDescription('This table describes all the SW images in the system.')
infoSwImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 13, 1), ).setIndexNames((0, "Olicom-MIB", "infoSwImageModuleIndex"), (0, "Olicom-MIB", "infoSwImageNo"))
if mibBuilder.loadTexts: infoSwImageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: infoSwImageEntry.setDescription('A list of information objects for SW image. ')
infoSwImageModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: infoSwImageModuleIndex.setDescription('The module index of the module on which the SW image reside.')
infoSwImageNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageNo.setStatus('mandatory')
if mibBuilder.loadTexts: infoSwImageNo.setDescription('The SW image number, relative to the HW module.')
infoSwImageProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageProductId.setStatus('mandatory')
if mibBuilder.loadTexts: infoSwImageProductId.setDescription('A string containing the SW images product id. An empty string, if this image is not present or corrupted.')
infoSwImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageVersion.setStatus('mandatory')
if mibBuilder.loadTexts: infoSwImageVersion.setDescription('A string containing the SW images version. An empty string, if this image is not present or corrupted.')
infoSwImageDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageDownloadTime.setStatus('mandatory')
if mibBuilder.loadTexts: infoSwImageDownloadTime.setDescription('The time when the software image was downloaded to the device. This is measured in seconds since 00:00:00 on 1 January 1970 (i.e. UNIX standard time).')
ocmibsBridgeMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 1))
ocmibsCauMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 2))
ocmibsCamMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 3))
ocmibsEhubMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 4))
ocmibsOc8100MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 5))
ocmibsCrossfireAtmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6))
ocmibsOc8200MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 7))
ocmibsOc8600MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 8))
ocmibsOc84x0MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 9))
ocmibsLanSwitchMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 10))
ocmibsVlanMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 11))
ocmibsSmartStatusMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 12))
ocmibsCf871xMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 13))
atmUplinkMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 14))
lmpMib = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 3, 1))
inetMacAddrForm = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("canonical", 1), ("non-canonical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetMacAddrForm.setStatus('mandatory')
if mibBuilder.loadTexts: inetMacAddrForm.setDescription("This variable controls in which form MAC addresses will be represented. The default is canonical form for ethernet products and non-cannonical for tokenring products. Setting this variable controls the representation for syntax's: PhysAddress, MacAddress and MacAddressString. Setting this variable will enforce a reboot.")
inetEnableRwho = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetEnableRwho.setStatus('mandatory')
if mibBuilder.loadTexts: inetEnableRwho.setDescription('This variable controls whether the device will send rhwo packets on UDP port 513. The packets include information about pseudo-users logged in. For the Olicom Bridge products, these are: Olicom Bridge Manager (user: obrimg) or the (IBM) Lan Network Manager (users: control, altern, observ). The tty information describes the management link. If this object it disabled, it overrides the value of inetIPAddressEnableRwho.')
inetEnableRIP = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetEnableRIP.setStatus('mandatory')
if mibBuilder.loadTexts: inetEnableRIP.setDescription('This variable control whether the device will process RIP (Routing Information Protocol) packets on UDP port 520 to update the IP routing table. The device will not announce any routes, it will only participate as a passive host. Refer to Unix documentation of either routed or gated daemons, or Internet RFC document 1058. If this object it disabled, it overrides the value of inetIPAddressEnableRIP.')
inetCommunityMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetCommunityMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityMaxEntries.setDescription('The maximum number of community entries allowed in inetCommunityTable.')
inetCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 285, 4, 5), )
if mibBuilder.loadTexts: inetCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityTable.setDescription('A list of entries for each community which is authorized to access the agent. The maximum number of entries is given by inetCommunityMaxEntries.')
inetCommunityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 4, 5, 1), ).setIndexNames((0, "Olicom-MIB", "inetCommunityNo"))
if mibBuilder.loadTexts: inetCommunityTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityTableEntry.setDescription('A community entry containing objects pertaining to a network manager which is authorized to access the agent.')
inetCommunityNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetCommunityNo.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityNo.setDescription('The entry number in the community table for this community.')
inetCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 2), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityName.setDescription("The community name used by the management station to access the agent. An empty community name means that any request regardless of it's community name will be accepted.")
inetCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 3), IpAddress()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityIPAddress.setDescription('The IP address of the management station authorized to access the agent. A value of 0.0.0.0 allows every IP node to use the community name.')
inetCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityAccess.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityAccess.setDescription('Controls the access rights of the management station.')
inetCommunityDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityDelete.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityDelete.setDescription('Setting this object to a non zero value, deletes the entry for this community entry.')
inetCommunityIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 6), IPXAddress()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityIPXAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityIPXAddress.setDescription('The IPX address of the management station authorized to access the agent. A value of all zeroes allows every IPX node to use the community name.')
inetCommunityTransportProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityTransportProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityTransportProtocols.setDescription('This variable defines which transport protocols should be expected to deliver requests for this community. If the bit-value 0x01 is set, UDP/IP is used and the inetCommunityIPAddress variable contains the source address. If the bit-value 0x02 is set, IPX is used and the inetCommunityIPXAddress variable will be used. If the bit-value 0x04 is set, MAC is used and the inetCommunityMACAddress varial will be used. All three bit-values can be set, in which case all source addresses will be allowed.')
inetCommunityMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 8), MacAddress()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inetCommunityMACAddress.setDescription('The MAC address of the management station authorized to access the agent. A value of 000000000000 allows every MAC node to use the community name.')
inetTrapMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetTrapMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapMaxEntries.setDescription('The maximum number of network manager entries allowed in inetTrapTable.')
inetTrapTable = MibTable((1, 3, 6, 1, 4, 1, 285, 4, 7), )
if mibBuilder.loadTexts: inetTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapTable.setDescription('A list of trap entries for each network manager which receives traps from the agent. The maximum number of entries is given by trapMaxEntries.')
inetTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 4, 7, 1), ).setIndexNames((0, "Olicom-MIB", "inetTrapIndex"))
if mibBuilder.loadTexts: inetTrapTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapTableEntry.setDescription('A trap entry containing objects pertaining to a network manager which receives traps from the agent.')
inetTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapCommunity.setDescription('The community name used in traps sent to the management station.')
inetTrapDestIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapDestIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapDestIPAddress.setDescription('The IP address of the management station to receive traps. Note a value of zero or resetting inetTrapTransportProtocols bit value 0x01 disables IP based traps from the entry However inetTrapDelete should be used to delete entries as it resets all parameters to default settings.')
inetTrapEventDisableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapEventDisableMask.setReference('Olicom Bridge MIB, trap section. Olicom Remote Bridge with CAM MIB, trap section. Olicom Multiport Bridge MIB, trap section. Olicom EHUB MIB, trap section. Olicom CAM MIB, trap section. Olicom CAU MIB, trap section.')
if mibBuilder.loadTexts: inetTrapEventDisableMask.setStatus('deprecated')
if mibBuilder.loadTexts: inetTrapEventDisableMask.setDescription("NOTE: This field has been replaced by the controlTrapTable. Bitmask of disabled traps from product-specific network management agents. Each octet within the value of this object specifies a set of eight traps, with the first octet specifying traps 1 through 8, the second octet specifying traps 9 through 16, etc. Within each octet, the least significant bit represents the lowest numbered trap, and the most significant bit represents the highest numbered trap. Thus, each trap of the device is represented by a single bit within the value of this object. If that bit has a value of `0' then that trap is included in the set of traps; the trap is not included if its bit has a value of `1'. The bits corresponds to the TRAP numbers found in the the product specific MIBs.")
inetTrapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 4), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetTrapDelete.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapDelete.setDescription('Setting this object to a non-zero value, deletes the entry for the trap destination.')
inetTrapDestUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapDestUDPPort.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapDestUDPPort.setDescription('The UDP port on the management station to receive traps. If set to 0 (zero) the default value 162 is used.')
inetTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapIndex.setDescription('All entries in the inetTrapTable have a unique index, denoted by this variable.')
inetTrapDestIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 7), IPXAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapDestIPXAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapDestIPXAddress.setDescription('The IPX address of the management station to receive traps. Note a value of zero or resetting inetTrapTransportProtocols bit value 0x02 disables IPX based traps from the entry However inetTrapDelete should be used to delete entries as it resets all parameters to default settings.')
inetTrapTransportProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapTransportProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapTransportProtocols.setDescription('This variable defines which transport protocols should be used to deliver TRAPs for this trap destination. If the bit-value 0x01 is set, UDP/IP is use and the inetTrapDestIPAddress variable contains the destination address (together with the inetTrapDestUDPPort variable), and if the bit-value 0x02 is set, IPX is used and the inetTrapDestIPXAddress variable will be used. Both bit-values can be set, in which case the traps will be set to both destinations.')
inetTrapIPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapIPEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapIPEncapsulation.setDescription('This variable controls the encapsulation method used when delivering TRAPs via the UDP/IP protocol. NOTE: On TokenRing devices only snap(3) works. ON EtherNet devices only ethernet(1) and snap(3) works.')
inetTrapIPXEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapIPXEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: inetTrapIPXEncapsulation.setDescription('This variable controls the encapsulation method used when delivering TRAPs via the IPX protocol. NOTE: On TokenRing devices only ieee8022(2) and snap(3) works.')
inetDefaultIPEncapsulation = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetDefaultIPEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: inetDefaultIPEncapsulation.setDescription('This variable controls the default encapsulation method used by this device, when transmitting via the UDP/IP protocol. This default encapsulation method is only used when there is no other way to know which encapsulation method the receiving host understands. NOTE: On TokenRing devices only snap(3) works. ON EtherNet devices only ethernet(1) and snap(3) works.')
inetDefaultIPXEncapsulation = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetDefaultIPXEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: inetDefaultIPXEncapsulation.setDescription('This variable controls the default encapsulation method used by this device, when transmitting via the IPX protocol. This default encapsulation method is only used when there is no other way to know which encapsulation method the receiving host understands. NOTE: On TokenRing devices only ieee8022(2) and snap(3) works.')
inetIPAddressTable = MibTable((1, 3, 6, 1, 4, 1, 285, 4, 10), )
if mibBuilder.loadTexts: inetIPAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: inetIPAddressTable.setDescription('This table contains IP addressing information for each interface.')
inetIPAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 4, 10, 1), ).setIndexNames((0, "Olicom-MIB", "inetIPAddressIfNumber"))
if mibBuilder.loadTexts: inetIPAddressEntry.setStatus('mandatory')
inetIPAddressIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetIPAddressIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: inetIPAddressIfNumber.setDescription('This number corresponds to the interface number, ifIndex, in ifTable from MIB-II.')
inetIPAddressIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inetIPAddressIPAddress.setDescription('This is the IP address associated with the interface.')
inetIPAddressNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: inetIPAddressNetmask.setDescription('This is the IP netmask associated with the interface. Note: Setting the netmask for one interface may change the netmask for other interfaces.')
inetIPAddressDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: inetIPAddressDefaultGateway.setDescription('This is the IP default gateway associated with the interface. Note: Setting the default gateway for one interface may change the default gateway for other interfaces.')
inetIPAddressEnableRwho = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressEnableRwho.setStatus('optional')
if mibBuilder.loadTexts: inetIPAddressEnableRwho.setDescription("This variable controls whether the device will send rhwo packets on UDP port 513 on the specified interface. The packets include information about pseudo-users logged in. This object has effect only if inetEnableRwho has the value 'enabled'.")
inetIPAddressEnableRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressEnableRIP.setStatus('optional')
if mibBuilder.loadTexts: inetIPAddressEnableRIP.setDescription("This variable control whether the device will process RIP (Routing Information Protocol) packets on UDP port 520 on the specified interface to update the IP routing table. The device will not announce any routes, it will only participate as a passive host. Refer to Unix documentation of either routed or gated daemons, or Internet RFC document 1058. This object has effect only if inetEnableRIP has the value 'enabled'.")
inetIPAddressIPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 3), ("media-default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressIPEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: inetIPAddressIPEncapsulation.setDescription('This variable controls the IP encapsulation method used on the specified interface. Choosing media-default(4) selects SNAP encapsulation on TokenRing interfaces and Ethernet encapsulation on Ethernet interfaces. NOTE: On TokenRing interfaces only snap(3) and media-default(4) works.')
inetSlipBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("b1200", 1), ("b2400", 2), ("b4800", 3), ("b9600", 4), ("b19200", 5), ("b38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipBaudrate.setStatus('optional')
if mibBuilder.loadTexts: inetSlipBaudrate.setDescription('The baud rate used by a SLIP connection.')
inetSlipParity = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipParity.setStatus('optional')
if mibBuilder.loadTexts: inetSlipParity.setDescription('The transmission parity used by a SLIP connection.')
inetSlipStopbits = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipStopbits.setStatus('optional')
if mibBuilder.loadTexts: inetSlipStopbits.setDescription('The number of stop bits used by a SLIP connection.')
inetSlipModemInit = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipModemInit.setStatus('optional')
if mibBuilder.loadTexts: inetSlipModemInit.setDescription('A string sent to the modem to initialize it prior to establishing a SLIP connection.')
inetSlipHeaderCompressionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipHeaderCompressionEnabled.setStatus('optional')
if mibBuilder.loadTexts: inetSlipHeaderCompressionEnabled.setDescription('Enable or disable compression of the SLIP headers.')
inetSlipMaxMtuSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipMaxMtuSize.setStatus('optional')
if mibBuilder.loadTexts: inetSlipMaxMtuSize.setDescription('Maximum Transmit Unit size, that is, the maximum size of a PDU transmitted on a SLIP connection.')
inetSlipMaxMruSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipMaxMruSize.setStatus('optional')
if mibBuilder.loadTexts: inetSlipMaxMruSize.setDescription('Maximum Receive Unit size, that is, the maximum acceptable size of a PDU received on a SLIP connection.')
sCallbackEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCallbackEnable.setStatus('deprecated')
if mibBuilder.loadTexts: sCallbackEnable.setDescription('This object controls whether the Olicom Out-Of-Band Management Callback sub-system should be active (enabled) or not.')
sCallbackPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCallbackPhoneNumber.setStatus('deprecated')
if mibBuilder.loadTexts: sCallbackPhoneNumber.setDescription("A string containing the telephone number to be used by the callback sub-system. This string will be sent `as is' to the modem connected to the OBM communication port.")
sCalloutEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCalloutEnable.setStatus('deprecated')
if mibBuilder.loadTexts: sCalloutEnable.setDescription('This object controls whether the Olicom Out-Of-Band Management Callout sub-system should be active (enabled) or not.')
sCalloutPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCalloutPhoneNumber.setStatus('deprecated')
if mibBuilder.loadTexts: sCalloutPhoneNumber.setDescription("A string containing the telephone number to be used by the callout sub-system. This string will be sent `as is' to the modem connected to the OBM communication port.")
controlRestart = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: controlRestart.setStatus('mandatory')
if mibBuilder.loadTexts: controlRestart.setDescription('Writing any value other than zero to this variable causes the device program to restart.')
controlConfigChangeCounter = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlConfigChangeCounter.setStatus('mandatory')
if mibBuilder.loadTexts: controlConfigChangeCounter.setDescription('This variable contains the number of times, any part of the configuration has been changed by any of the management systems controlling this device. See the managementTable.')
controlTrapTable = MibTable((1, 3, 6, 1, 4, 1, 285, 5, 3), )
if mibBuilder.loadTexts: controlTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: controlTrapTable.setDescription('This table contains an entry for each enterprise-specific TRAP this device is capable of sending. The only writable field in the table is the controlTrapGeneration field, which controls the generation is that particular TRAP. All other fields are used as indices.')
controlTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 5, 3, 1), ).setIndexNames((0, "Olicom-MIB", "controlTrapIndex"), (0, "Olicom-MIB", "controlTrapMIBIndex"), (0, "Olicom-MIB", "controlTrapNumber"))
if mibBuilder.loadTexts: controlTrapTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: controlTrapTableEntry.setDescription('A controlTrapTableEntry entry contains objects pertaining to one particular enterprise-specific TRAP.')
controlTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: controlTrapIndex.setDescription('This variable corresponds to the inetTrapIndex variable in the inetTrapTable.')
controlTrapMIBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTrapMIBIndex.setStatus('mandatory')
if mibBuilder.loadTexts: controlTrapMIBIndex.setDescription('This variable identifies the MIB in which this TRAP is defined. The variable is the index of the entry in infoSoftwareMIBsTable that defines the MIB in question.')
controlTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: controlTrapNumber.setDescription('This variable describes in which TRAP in the MIB subtree this TRAP is.')
controlTrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: controlTrapDescription.setDescription('This variable describes the TRAP. This corresponds to the description field in the MIB text for this TRAP.')
controlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("never", 1), ("always", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTrapGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: controlTrapGeneration.setDescription('This variable controls whether this TRAP never(1) is generated or is always(2) generated.')
controlLoadProtocol = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ibm-rpl", 1), ("ibm-hlm", 2), ("bootp-tftp", 3), ("olicom-rpl", 4), ("olicom-remote-software-update", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: controlLoadProtocol.setDescription('This variable defines which protocol should be used for downloading configuration and program code. Notice that a specific Olicom product will typically support only one or two of the listed protocols.')
controlLoadFilename = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadFilename.setStatus('mandatory')
if mibBuilder.loadTexts: controlLoadFilename.setDescription('In the Load protocols where it is relevant this variable contains the name of the file to be downloaded.')
controlLoadServerMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadServerMACAddress.setStatus('optional')
if mibBuilder.loadTexts: controlLoadServerMACAddress.setDescription('This object specifies the MAC address of the Load server used for download. Only used if the Load protocol defined by the controlLoadProtocol variable needs the MAC address of the an Load server.')
controlLoadServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadServerIPAddress.setStatus('optional')
if mibBuilder.loadTexts: controlLoadServerIPAddress.setDescription('This object specifies the IP address of the Load server used for download. Only used if the Load protocol defined by the controlLoadProtocol variable needs the IP address of the an Load server.')
controlLoadServerIPXAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 8), IPXAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadServerIPXAddress.setStatus('optional')
if mibBuilder.loadTexts: controlLoadServerIPXAddress.setDescription('This object specifies the IPX address of the Load server used for download. Only used if the Load protocol defined by the controlLoadProtocol variable needs the IPX address of the an Load server.')
controlLoadStart = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInitiated", 1), ("starting", 2), ("inProgress", 3), ("finishing", 4), ("completed", 5), ("protocolFailure", 6), ("flashFailure", 7), ("badFile", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadStart.setStatus('mandatory')
if mibBuilder.loadTexts: controlLoadStart.setDescription('Writing any value other than zero to this variable causes a download to start. While reading, it returns the current status of transmission or last transmission result.')
controlTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTime.setStatus('mandatory')
if mibBuilder.loadTexts: controlTime.setDescription('The internal clock in the device. This is measured in seconds since 00:00:00 on 1 January 1970 (i.e. UNIX standard time).')
controlEnableRmon = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlEnableRmon.setStatus('optional')
if mibBuilder.loadTexts: controlEnableRmon.setDescription('This object specifies whether RMON probe is enabled or disabled. If the device does not support RMON only disabled is allowed. Setting this variable resets the CAU.')
controlAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlAutoRestart.setStatus('optional')
if mibBuilder.loadTexts: controlAutoRestart.setDescription('This object specifies whether changes to certain fundamental configuration parameters (as specified for the corresponding MIB variables) shall cause the device to restart automatically. The auto restart functionality is always enabled after restarting the bridge. NOTICE: In general, disabling this functionality is not recommended, since some changes may cause the device to behave erratically (which may be the reason why the device has to restart). However, for the initial configuration of the device (i.e. before it is operational, it is usually safe to postpone restarting the device until all configuration changes have been made.')
controlSwAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSwAdminStatus.setStatus('optional')
if mibBuilder.loadTexts: controlSwAdminStatus.setDescription("This object controls the state of the SW images in systems where more than one image is present. In the OC-9100 the state of each image may be: empty(1) - no image is present, future1(2) - the image may be used later, futureTest(3) - the image will be used once on the next restart, future2(4) - the image may be used later, current1(5) - the image is in use now, past(6) - the image was previously used, current2(7) - the image is in use now, checksumError(8) - the image is faulty, erased(9) - the image has been erased. Because this information is stored in flash each state cannot be used arbitrarily. For example, the future state can only be used twice, namely as state future1 and future2. Normally, the state of a SW image progresses through numerically increasing states. In the OC-8500 and OC-8700 series the status word is stored in BBS RAM. This releases the constraints to the sequence of states, thus only a subset of the above is needed: empty(1) - no image is present, future1(2) - the image may be used later, futureTest(3) - the image will be used once on the next restart, current1(5) - the image is in use now, past(6) - the image was previously used, checksumError(8) - the image is faulty, erased(9) - the image has been erased. The value actually stored in this object is state1*256+state2, where state1 and state2 are the values of the two SW image states. Note that a number of combinations are illegal. For example, the value 6*256+6 (indicating two 'past' images) may not be written.")
controlFlashConfigSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlFlashConfigSize.setStatus('optional')
if mibBuilder.loadTexts: controlFlashConfigSize.setDescription('The total number of bytes in the configuration FLASH, or rather, in one of the two alternating sections.')
controlFlashConfigFree = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlFlashConfigFree.setStatus('optional')
if mibBuilder.loadTexts: controlFlashConfigFree.setDescription('The number of free bytes in the configuration FLASH.')
controlFlashConfigState = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("normal", 1), ("default", 2), ("corrupted", 3), ("temporary", 4), ("testTemporary", 5), ("acceptTemporary", 6), ("rejectTemporary", 7), ("rewrite", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlFlashConfigState.setStatus('optional')
if mibBuilder.loadTexts: controlFlashConfigState.setDescription("Controls the state of the FLASH configuration. The states are as follows: normal default - The DEFAULT button has been activated. corrupted - The FLASH configuration has been corrupted, default configuration is used. temporary - A temporary update to the configuration has been initiated. testTemporary - A restart has been performed after a 'temporary' update. acceptTemporary - Setting this value in state 'temporary' or 'testTemporary' will force the state to 'normal' and will cause the configuration to be accepted. rejectTemporary - Setting this value in state 'temporary' or 'testTemporary' will cause the temporary configuration update to be aborted. rewrite - Setting this value will cause the FLASH to be rewritten, resulting in maximum free FLASH.")
controlDelayedRestart = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlDelayedRestart.setStatus('mandatory')
if mibBuilder.loadTexts: controlDelayedRestart.setDescription('Writing value n to this variable will cause device to restart after n seconds. Writing zero cancels the reboot. Writing new value when the reboot is already scheduled cancels previously scheduled action and schedules new reboot. While reading this variable shows time remaining to the reboot (0 if reboot is not scheduled).')
controlLoadProggress = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlLoadProggress.setStatus('mandatory')
if mibBuilder.loadTexts: controlLoadProggress.setDescription('Number of bytes transmitted so far. 0 if no transmission is currently in progress.')
controlLoadFileSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlLoadFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: controlLoadFileSize.setDescription('Length of the file being transmitted. 0 if no transmission is currently in progress or if the size is unknown.')
controlTftpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 5, 21))
controlTftpMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpMaxSessions.setStatus('optional')
if mibBuilder.loadTexts: controlTftpMaxSessions.setDescription('The maximum number of simultaneous sessions this device is able to handle.')
controlTftpNextSessionIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpNextSessionIndex.setStatus('optional')
if mibBuilder.loadTexts: controlTftpNextSessionIndex.setDescription('The unique identifier of the next free TFTP session. This index should be used for manipulating rows in controlTftpSessionTable.')
controlTftpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 5, 21, 3), )
if mibBuilder.loadTexts: controlTftpSessionTable.setStatus('optional')
if mibBuilder.loadTexts: controlTftpSessionTable.setDescription('This table makes it possible to control TFTP sessions performed by the built-in device TFTP client.')
controlTftpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1), ).setIndexNames((0, "Olicom-MIB", "controlTftpSessionIndex"))
if mibBuilder.loadTexts: controlTftpSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionEntry.setDescription('A list of configuration objects for the TFTP session.')
controlTftpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionIndex.setDescription('The TFTP session index.')
controlTftpSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionRowStatus.setDescription("The status of this TFTP session entry. The following values are possible: 'active' - TFTP operation is in progress. Setting this object to this value starts the transmission. 'notInService' - The row is created but there is no TFTP transfer in progress. 'createAndWait' - the only way to create the session. If the operation is successful the status of the row should be 'notInService'. 'destroy' - destroys the row and frees the resources. This operation will fail when the row is 'active'. 'createAndGo' is illegal. Setting this object to this value will fail. 'notReady' is not used for this variable.")
controlTftpSessionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionDirection.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionDirection.setDescription("The direction of this session's transfer.")
controlTftpSessionServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionServerAddress.setDescription('The IP address of the TFTP server used for the transmission.')
controlTftpSessionServerFile = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionServerFile.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionServerFile.setDescription('The name of the transferred file on the server side.')
controlTftpSessionLocalFile = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionLocalFile.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionLocalFile.setDescription('The name of the transferred file on the switch side. In case of upload switch may ignore this variable.')
controlTftpSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInitiated", 1), ("starting", 2), ("inProgress", 3), ("finishing", 4), ("completed", 5), ("protocolFailure", 6), ("flashFailure", 7), ("badFile", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpSessionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionStatus.setDescription("The status of the session or transmission result when the session was completed. The following values are possible: notInitiated(1) no transfer since this row creation starting(2) inProgress(3) finishing(4) completed(5) last transfer was completed successfully protocolFailure(6) transmission failed (e.g. TFTP error) flashFailure(7) writing to the flash failed badFile(8) the file transmitted was corrupted The download/upload cycle doesn't have to go through all of the states listed above. ")
controlTftpSessionProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpSessionProgress.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionProgress.setDescription('Number of bytes transmitted so far. 0 if no transmission is currently in progress.')
controlTftpSessionFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpSessionFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: controlTftpSessionFileSize.setDescription('Length of the file being transmitted. 0 if no transmission is currently in progress or if the size is unknown.')
controlRestartType = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("soft", 1), ("default", 2))).clone('soft')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlRestartType.setStatus('mandatory')
if mibBuilder.loadTexts: controlRestartType.setDescription('The type of restart that will be performed after next reboot request. After any kind of reboot the value of this object should be soft(1) regardles of the previous value.')
obmEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: obmEnable.setDescription('This object controls whether the Olicom Out-Of-Band Management system should be active (enabled) or not.')
obmPassword = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmPassword.setStatus('mandatory')
if mibBuilder.loadTexts: obmPassword.setDescription("A string containing the password needed to access the device through the OBM communication port. NOTE: Reading the password will return the string `********' - an attempt to set the password to that value will not modify the password.")
obmBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("b1200", 1), ("b2400", 2), ("b4800", 3), ("b9600", 4), ("b19200", 5), ("b38400", 6), ("b57600", 7), ("b115200", 8), ("b230400", 9), ("b460800", 10), ("b921600", 11), ("auto", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmBaudrate.setStatus('mandatory')
if mibBuilder.loadTexts: obmBaudrate.setDescription("This object controls the baudrate of the communication port used by the Out-of-Band Management system. The 'auto' means automatic UART speed sensing.")
obmParity = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmParity.setStatus('mandatory')
if mibBuilder.loadTexts: obmParity.setDescription('This object controls the parity of the communication port used by the Out-of-Band Management system.')
obmStopbits = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmStopbits.setStatus('mandatory')
if mibBuilder.loadTexts: obmStopbits.setDescription('This object controls the number of stopbits of the communication port used by the Out-of-Band Management system.')
obmModemInit = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmModemInit.setStatus('mandatory')
if mibBuilder.loadTexts: obmModemInit.setDescription("A string containing the initialization string used to initialize the modem connected to the OBM communication port. This string will be sent `as is'.")
obmCallbackEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCallbackEnable.setStatus('mandatory')
if mibBuilder.loadTexts: obmCallbackEnable.setDescription('This object controls whether the Olicom Out-Of-Band Management Callback sub-system should be active (enabled) or not.')
obmCallbackPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCallbackPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: obmCallbackPhoneNumber.setDescription("A string containing the default phone number to be used by the callback sub-system. This string will be sent `as is' to the modem connected to the OBM communication port.")
obmCalloutEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutEnable.setStatus('mandatory')
if mibBuilder.loadTexts: obmCalloutEnable.setDescription('This object controls whether the Olicom Out-Of-Band Management Callout sub-system should be active (enabled) or not.')
obmCalloutPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: obmCalloutPhoneNumber.setDescription("A string containing the telephone number to be used by the callout sub-system. This string will be sent `as is' to the modem connected to the OBM communication port.")
obmCalloutTriggerEvent = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutTriggerEvent.setStatus('mandatory')
if mibBuilder.loadTexts: obmCalloutTriggerEvent.setDescription('This object controls which events will trigger the callout sub-system to try to establish a connection using the obmCalloutPhoneNumber. The value is a bitmask, representing the following possibilities: 0x01 : Fatal Error. (CAU/CAM/BRIDGE) 0x02 : Adapter Failure. (CAU) 0x02 : Start-up Failure. (BRIDGE) 0x04 : Fan Failure. (SWI) 0x04 : LAM Failure. (CAU/CAM) 0x08 : Main ring Wrap due to beacon. (CAU) 0x10 : HLM Connection Lost. (CAU/CAM) 0x10 : Temperature warning (SWI) 0x20 : Power System Failure (CAU) 0x40 : WAN link failure (BRIDGE) 0x40 : Port auto disabled (SWI)')
obmCalloutRetries = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutRetries.setStatus('mandatory')
if mibBuilder.loadTexts: obmCalloutRetries.setDescription('This value denotes the number of times the callout sub-system will try to establish a connection using the obmCallbackPhoneNumber string. Used also for call-back.')
obmCalloutRetryTimer = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutRetryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: obmCalloutRetryTimer.setDescription('This value denotes the number of minutes between unsuccesful attempts to establish a connection using the obmCalloutPhoneNumber string. Used also for call-back.')
obmDelayedRecovery = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmDelayedRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: obmDelayedRecovery.setDescription('This object controls whether the Olicom Out-Of-Band Management delayed Recovery sub-system should be active (enabled) or not. On a bridge this is controlled by the configRestartOnError variable.')
obmEnableTelnet = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmEnableTelnet.setStatus('optional')
if mibBuilder.loadTexts: obmEnableTelnet.setDescription('This object controls whether the Olicom Out-Of-Band Management can be accessed from telnet.')
obmConnectTimeout = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmConnectTimeout.setStatus('optional')
if mibBuilder.loadTexts: obmConnectTimeout.setDescription('This value denotes the number of seconds the user must wait after 3 unsuccesfull attempts to enter the correct password. The default value is 60 sec.')
obmDefaultOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoSense", 1), ("serialConsole", 2), ("asyncPPP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmDefaultOperationalMode.setStatus('optional')
if mibBuilder.loadTexts: obmDefaultOperationalMode.setDescription('This object controls whether the Olicom Out-Of-Band Management can be accessed via serial console or async PPP/SLIP or selected dynamically (serial or async PPP/SLIP) based on the incoming data type.')
obmInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: obmInactivityTimeout.setDescription('This object controls value of inactivity timeout [min] which will be used to disconnect an idle user from the Out-of-Band Management system. The default value is 3 min. Value 0 disables this feature (infinite timeout)')
obmDialType = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pulse", 1), ("tone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmDialType.setStatus('mandatory')
if mibBuilder.loadTexts: obmDialType.setDescription('This object controls if ATDP or ATDT will be sent to a modem while dialing from the Out-of-Band Management system.')
obmPasswordRead = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmPasswordRead.setStatus('mandatory')
if mibBuilder.loadTexts: obmPasswordRead.setDescription("A string containing the password needed to read-access the device through the OBM communication port. NOTE: Reading the password will return the string `********' - an attempt to set the password to that value will not modify the password.")
obmXonXoffHandshake = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmXonXoffHandshake.setStatus('mandatory')
if mibBuilder.loadTexts: obmXonXoffHandshake.setDescription('The status of Xon/Xoff flow control.')
obmRtsCtsHandshake = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmRtsCtsHandshake.setStatus('mandatory')
if mibBuilder.loadTexts: obmRtsCtsHandshake.setDescription('The status of RTS/CTS handshake.')
obmDatabits = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obmDatabits.setStatus('mandatory')
if mibBuilder.loadTexts: obmDatabits.setDescription('Number of databits to be used by serial interface.')
managementTable = MibTable((1, 3, 6, 1, 4, 1, 285, 7, 1), )
if mibBuilder.loadTexts: managementTable.setStatus('mandatory')
if mibBuilder.loadTexts: managementTable.setDescription('A list of entries for each management system the device supports. NOTE: The SNMP management system is always the first entry in the table.')
managementTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 7, 1, 1), ).setIndexNames((0, "Olicom-MIB", "managementNo"))
if mibBuilder.loadTexts: managementTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: managementTableEntry.setDescription('A management entry contains objects pertaining to a network management system which is supported by this device.')
managementNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementNo.setStatus('mandatory')
if mibBuilder.loadTexts: managementNo.setDescription('The entry number in the management table for this management system.')
managementDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDescription.setStatus('mandatory')
if mibBuilder.loadTexts: managementDescription.setDescription('A descriptive text for this management system (protocol).')
managementAssociationState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("not-associated", 2), ("na-association", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementAssociationState.setStatus('mandatory')
if mibBuilder.loadTexts: managementAssociationState.setDescription('This variable describes the current association between this device and this management system. Some systems are association oriented (e.g. CMIP) and can therefore have state associated(1) or not-associated(2), while other management systems are request/reply oriented (e.g. SNMP) and therefore always have the state na-association(3).')
managementPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPriority.setStatus('mandatory')
if mibBuilder.loadTexts: managementPriority.setDescription('This variable describes the relative priority of the management systems supported by this device. The associated management system with the highest managementPriority value (numerically) will be the ONLY system with write access to all management variables.')
managementSnmpAccessLogTable = MibTable((1, 3, 6, 1, 4, 1, 285, 7, 2), )
if mibBuilder.loadTexts: managementSnmpAccessLogTable.setStatus('optional')
if mibBuilder.loadTexts: managementSnmpAccessLogTable.setDescription('This table contains the history log for the last 10 SNMP managers which have accessed this device.')
managementSnmpAccessLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 7, 2, 1), ).setIndexNames((0, "Olicom-MIB", "managementSnmpAccessLogIndex"))
if mibBuilder.loadTexts: managementSnmpAccessLogEntry.setStatus('optional')
if mibBuilder.loadTexts: managementSnmpAccessLogEntry.setDescription('An entry in the managementSnmpAccessLogTable.')
managementSnmpAccessLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogIndex.setStatus('optional')
if mibBuilder.loadTexts: managementSnmpAccessLogIndex.setDescription('The number of this entry in the managementSnmpAccessLogTable.')
managementSnmpAccessLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogTimeStamp.setStatus('optional')
if mibBuilder.loadTexts: managementSnmpAccessLogTimeStamp.setDescription('The time at which the SNMP manager last accessed this device.')
managementSnmpAccessLogIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogIpAddress.setStatus('optional')
if mibBuilder.loadTexts: managementSnmpAccessLogIpAddress.setDescription('The IP Address of the SNMP manager.')
managementSnmpAccessLogAccessRights = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogAccessRights.setStatus('optional')
if mibBuilder.loadTexts: managementSnmpAccessLogAccessRights.setDescription('Specifies the access rights of the SNMP manager.')
managementSnmpAccessLogCount = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogCount.setStatus('optional')
if mibBuilder.loadTexts: managementSnmpAccessLogCount.setDescription('Specifies the number of times the SNMP manager has accessed this device.')
managementSnmpLastErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 285, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpLastErrorReason.setStatus('mandatory')
if mibBuilder.loadTexts: managementSnmpLastErrorReason.setDescription("A detailed explanation of why the last SNMP operation failed. It is used by the management station when the SNMP error-status in the response does not fully explain the reason for the failure. For example, 'badValue' can be returned if the user has entered an improper value or if there are insufficient system resources to perform a requested action. The SNMP agent should return the failure explanation only if it is requested by the station that caused it. If no failure has occurred, the SNMP agent should return an empty string when a request for this object.")
frontpanelDisplay = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelDisplay.setStatus('optional')
if mibBuilder.loadTexts: frontpanelDisplay.setDescription("This variable contains the text that is displayed in the device's frontpanel display.")
frontpanelKeyboardAccess = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("status-only", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelKeyboardAccess.setStatus('optional')
if mibBuilder.loadTexts: frontpanelKeyboardAccess.setDescription("This variable controls whether the keyboard on the device's frontpanel will work. The value enabled(1) means all actions are permitted, status-only(2) means that all keyboard actions that change the device's configuration is denied, while disabled(3) means that all access is denied.")
frontpanelErrorcode = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelErrorcode.setStatus('optional')
if mibBuilder.loadTexts: frontpanelErrorcode.setDescription("This variable contains the errorcode that is displayed in the device's frontpanel display.")
frontpanelErrorLED = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("led-unknown", 1), ("led-off", 2), ("led-on-steady", 3), ("led-flashing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelErrorLED.setStatus('optional')
if mibBuilder.loadTexts: frontpanelErrorLED.setDescription("This variable contains the state of the error LED on this device's frontpanel.")
frontpanelDefaultDisplay = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelDefaultDisplay.setStatus('optional')
if mibBuilder.loadTexts: frontpanelDefaultDisplay.setDescription("The display of the device is capable of showing different status displays with different counters. This variable determines which counter-display should be shown, when no other error-messages need to be displayed. The device may choose to ignore this value. The value 0 (zero) means default display of the device's choice.")
frontpanelKeyPress = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(400, 401, 402, 403, 404))).clone(namedValues=NamedValues(("key-enter", 400), ("key-up", 401), ("key-down", 402), ("key-left", 403), ("key-right", 404)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frontpanelKeyPress.setStatus('optional')
if mibBuilder.loadTexts: frontpanelKeyPress.setDescription('Some devices have a front-panel keyboard. This variable may be used to remotely operate the front-panel keyboard.')
frontpanelDisplayLogTable = MibTable((1, 3, 6, 1, 4, 1, 285, 8, 7), )
if mibBuilder.loadTexts: frontpanelDisplayLogTable.setStatus('optional')
if mibBuilder.loadTexts: frontpanelDisplayLogTable.setDescription('This table is used to store history logs in the form of a number of display texts, including a corresponding time stamp.')
frontpanelDisplayLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 8, 7, 1), ).setIndexNames((0, "Olicom-MIB", "frontpanelDisplayLogIndex"))
if mibBuilder.loadTexts: frontpanelDisplayLogEntry.setStatus('optional')
if mibBuilder.loadTexts: frontpanelDisplayLogEntry.setDescription('This is an entry in the frontpanelDisplayLogTable.')
frontpanelDisplayLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 8, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontpanelDisplayLogIndex.setStatus('optional')
if mibBuilder.loadTexts: frontpanelDisplayLogIndex.setDescription('The entry number in the frontpanelDisplayLogTable. In order to ensure that an SNMP GET-NEXT operation produces consistent results, it is recommended that entries be added to this table starting with a high index value; subsequent addtions to the table should happen with decreasing index values.')
frontpanelDisplayLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 8, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontpanelDisplayLogTimeStamp.setStatus('optional')
if mibBuilder.loadTexts: frontpanelDisplayLogTimeStamp.setDescription('The time at which the entry was made.')
frontpanelDisplayLogDisplayText = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 8, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontpanelDisplayLogDisplayText.setStatus('optional')
if mibBuilder.loadTexts: frontpanelDisplayLogDisplayText.setDescription('The text string from the front panel display.')
tokenRingBridgeSR = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 1))
controlledAccessUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 2))
controlledAttachmentModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 3))
etherNetAttachmentHUB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 4))
tokenRingRemoteBridgeAndCAM = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 5))
tokenRingMultiPortBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 6))
desktopManagementAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 7))
localPCBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 8))
remoteDOSPCBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 9))
remoteOS2PCBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 10))
tokenRingSwitchOc8100 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 11))
crossfireAtmSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 12))
ethernetSwitchOc8200 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 13))
tokenRingSwitchOc8600 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 14))
tokenRingSwitchOc8007 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 15))
crossfireAtmSwitchOc8008 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 16))
fastEthernetSwitchOc8400 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 17))
fastEthernetSwitchOc8420 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 18))
lanscoutOc5020 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 19))
crossfireAtmSwitchCf9200 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 20))
crossfireRouterCf7100 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 21))
tokenRingSwitchCf8500 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 22))
ethernetSwitchCf8711 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 23))
ethernetSwitchCf8720 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 24))
ethernetSwitchCf8810 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 25))
errorlogTable = MibTable((1, 3, 6, 1, 4, 1, 285, 10, 1), )
if mibBuilder.loadTexts: errorlogTable.setStatus('optional')
if mibBuilder.loadTexts: errorlogTable.setDescription('This table contains a number of error log entries from the managed device.')
errorlogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 10, 1, 1), ).setIndexNames((0, "Olicom-MIB", "errorlogNumber"))
if mibBuilder.loadTexts: errorlogEntry.setStatus('optional')
errorlogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogNumber.setStatus('optional')
if mibBuilder.loadTexts: errorlogNumber.setDescription('The number of the entry.')
errorlogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTimeStamp.setStatus('optional')
if mibBuilder.loadTexts: errorlogTimeStamp.setDescription("This variable describes the device's perception of the time when the error occurred.")
errorlogErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogErrorDescription.setStatus('optional')
if mibBuilder.loadTexts: errorlogErrorDescription.setDescription('This variable contains a description of the error that occurred in this device.')
errorlogErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogErrorData.setStatus('optional')
if mibBuilder.loadTexts: errorlogErrorData.setDescription('This variable contains additional information about the error.')
errorlogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTime.setStatus('optional')
if mibBuilder.loadTexts: errorlogTime.setDescription("This variable describes the device's conception of the calendar time when the error occurred. This is measured in seconds since 00:00:00 on 1 January 1970 (i.e. UNIX standard time).")
errorlogTimeRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTimeRemoved.setStatus('optional')
if mibBuilder.loadTexts: errorlogTimeRemoved.setDescription("This variable describes the device's conception of the calendar time when the error condition disappeared. This is measured in seconds since 00:00:00 on 1 January 1970 (i.e. UNIX standard time). A value of 0 (zero) indicates that the error condition has not disappeared.")
errorlogCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bootload", 1), ("startup", 2), ("operational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogCategory.setStatus('optional')
if mibBuilder.loadTexts: errorlogCategory.setDescription('This variable contains the category of the error log')
errorlogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("information", 1), ("notice", 2), ("warning", 3), ("error", 4), ("critical", 5), ("alert", 6), ("panic", 7), ("debug", 8), ("fatal", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogSeverity.setStatus('optional')
if mibBuilder.loadTexts: errorlogSeverity.setDescription('This variable contains the severity of the error log')
errorlogPhysicalIf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogPhysicalIf.setStatus('optional')
if mibBuilder.loadTexts: errorlogPhysicalIf.setDescription('This variable contains the physical interface number of the error log, if the log is related to a certain physical interface. Otherwise it will have the value 0')
errorlogVirtualIf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogVirtualIf.setStatus('optional')
if mibBuilder.loadTexts: errorlogVirtualIf.setDescription('This variable contains the virtual interface number of the error log, if the log is related to a certain virtual interface. Otherwise it will have the value 0')
errorlogTraceControl = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("log-empty", 1), ("log-present", 2), ("save-log", 3), ("erase-log", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceControl.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceControl.setDescription("The current state of device's trace log area.")
errorlogTraceMaskCurrent = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceMaskCurrent.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceMaskCurrent.setDescription('The current trace log mask. The interpretation of this variable is device specific.')
errorlogTraceMaskInitial = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceMaskInitial.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceMaskInitial.setDescription('The current trace log mask. The interpretation of this variable is device specific.')
errorlogTraceMaskOperational = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceMaskOperational.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceMaskOperational.setDescription('The current trace log mask. The interpretation of this variable is device specific.')
errorlogTraceLogSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceLogSize.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceLogSize.setDescription('The size of the trace log area (in bytes).')
errorlogTraceSliceTable = MibTable((1, 3, 6, 1, 4, 1, 285, 10, 7), )
if mibBuilder.loadTexts: errorlogTraceSliceTable.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceSliceTable.setDescription("This table provides access to the device's trace log.")
errorlogTraceSliceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 10, 7, 1), ).setIndexNames((0, "Olicom-MIB", "errorlogTraceSliceNumber"), (0, "Olicom-MIB", "errorlogTraceSliceSize"))
if mibBuilder.loadTexts: errorlogTraceSliceTableEntry.setStatus('optional')
errorlogTraceSliceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTraceSliceNumber.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceSliceNumber.setDescription("The number of this trace log area slice (each of size `errorlogTraceSliceSize').")
errorlogTraceSliceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTraceSliceSize.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceSliceSize.setDescription('The size of this slice of the trace log area.')
errorlogTraceSliceData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTraceSliceData.setStatus('optional')
if mibBuilder.loadTexts: errorlogTraceSliceData.setDescription('The data in this slice of the trace log area.')
errorlogStoredSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogStoredSeverityLevel.setStatus('optional')
if mibBuilder.loadTexts: errorlogStoredSeverityLevel.setDescription('This variable contains the severity level determining which error logs will be written to permanent storage. Any error log with severity higher than or equal to this severity level will be stored for retrieval, even after a reset')
trconfigTable = MibTable((1, 3, 6, 1, 4, 1, 285, 11, 1), )
if mibBuilder.loadTexts: trconfigTable.setStatus('optional')
if mibBuilder.loadTexts: trconfigTable.setDescription('This table contains Token Ring configuration information for each interface.')
trconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 11, 1, 1), ).setIndexNames((0, "Olicom-MIB", "trconfigIfNumber"))
if mibBuilder.loadTexts: trconfigEntry.setStatus('optional')
trconfigIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trconfigIfNumber.setStatus('optional')
if mibBuilder.loadTexts: trconfigIfNumber.setDescription('This number corresponds to the interface number, ifIndex, in ifTable from MIB-II.')
trconfigBurntInAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 11, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trconfigBurntInAddress.setStatus('optional')
if mibBuilder.loadTexts: trconfigBurntInAddress.setDescription('The burnt-in MAC address for this interface.')
trconfigLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 11, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trconfigLocalAddress.setStatus('optional')
if mibBuilder.loadTexts: trconfigLocalAddress.setDescription('The locally administered MAC address for this interface. If locally address MAC addresses are not used, this entry is all zeroes.')
trconfigEarlyTokenRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trconfigEarlyTokenRelease.setStatus('optional')
if mibBuilder.loadTexts: trconfigEarlyTokenRelease.setDescription('Indicates if early token release is used on the interface.')
obmCallback = NotificationType((1, 3, 6, 1, 4, 1, 285) + (0,1)).setObjects(("Olicom-MIB", "obmCallbackPhoneNumber"))
if mibBuilder.loadTexts: obmCallback.setDescription('This trap is sent when the device tries to place a OBM callback phonecall to phone number obmCallbackPhoneNumber. Even though the call might be repeated several times before a connection is established, only one trap is sent.')
obmCallout = NotificationType((1, 3, 6, 1, 4, 1, 285) + (0,2)).setObjects(("Olicom-MIB", "obmCalloutPhoneNumber"), ("Olicom-MIB", "obmCalloutTriggerEvent"))
if mibBuilder.loadTexts: obmCallout.setDescription('This trap is sent when the device tries to place a OBM callout phonecall to phone number obmCalloutPhoneNumber because it was triggered by the event(s) obmCalloutTriggerEvent. Even though the call might be repeated several times before a connection is established, only one trap is sent.')
mibBuilder.exportSymbols("Olicom-MIB", controlTrapNumber=controlTrapNumber, infoHardwareECOLevel=infoHardwareECOLevel, lanscoutOc5020=lanscoutOc5020, sCallbackEnable=sCallbackEnable, infoSwImageProductId=infoSwImageProductId, inetCommunityDelete=inetCommunityDelete, obmDefaultOperationalMode=obmDefaultOperationalMode, ocmibsCrossfireAtmMIB=ocmibsCrossfireAtmMIB, ethernetSwitchCf8810=ethernetSwitchCf8810, obmCallback=obmCallback, controlEnableRmon=controlEnableRmon, inetMacAddrForm=inetMacAddrForm, inetIPAddressTable=inetIPAddressTable, inetIPAddressEnableRwho=inetIPAddressEnableRwho, ocmibsSmartStatusMIB=ocmibsSmartStatusMIB, inetTrapMaxEntries=inetTrapMaxEntries, inetIPAddressIPEncapsulation=inetIPAddressIPEncapsulation, errorlogTraceMaskInitial=errorlogTraceMaskInitial, infoXtraSwEcoLevel=infoXtraSwEcoLevel, control=control, infoSwImageTable=infoSwImageTable, inetIPAddressEntry=inetIPAddressEntry, infoSoftwareProductId=infoSoftwareProductId, inetTrapTableEntry=inetTrapTableEntry, localPCBridge=localPCBridge, errorlogTime=errorlogTime, inetIPAddressIfNumber=inetIPAddressIfNumber, obmCalloutPhoneNumber=obmCalloutPhoneNumber, controlLoadStart=controlLoadStart, managementSnmpAccessLogAccessRights=managementSnmpAccessLogAccessRights, controlTftpSessionStatus=controlTftpSessionStatus, controlTftpSessionEntry=controlTftpSessionEntry, managementPriority=managementPriority, inetTrapEventDisableMask=inetTrapEventDisableMask, infoSoftwareVersion=infoSoftwareVersion, obmCallout=obmCallout, inetEnableRIP=inetEnableRIP, obmCallbackEnable=obmCallbackEnable, obmPasswordRead=obmPasswordRead, temporary=temporary, inetSlipStopbits=inetSlipStopbits, controlConfigChangeCounter=controlConfigChangeCounter, errorlogTraceSliceSize=errorlogTraceSliceSize, ocmibsOc8600MIB=ocmibsOc8600MIB, obmDatabits=obmDatabits, inetIPAddressDefaultGateway=inetIPAddressDefaultGateway, managementSnmpAccessLogEntry=managementSnmpAccessLogEntry, frontpanelErrorLED=frontpanelErrorLED, products=products, managementDescription=managementDescription, inet=inet, errorlogTimeRemoved=errorlogTimeRemoved, inetIPAddressNetmask=inetIPAddressNetmask, obmBaudrate=obmBaudrate, controlTime=controlTime, controlTftpClient=controlTftpClient, errorlogTraceLogSize=errorlogTraceLogSize, controlTftpSessionFileSize=controlTftpSessionFileSize, controlTftpSessionLocalFile=controlTftpSessionLocalFile, inetDefaultIPEncapsulation=inetDefaultIPEncapsulation, tokenRingSwitchOc8007=tokenRingSwitchOc8007, controlLoadProggress=controlLoadProggress, inetCommunityName=inetCommunityName, errorlogTable=errorlogTable, inetSlipParity=inetSlipParity, controlTrapMIBIndex=controlTrapMIBIndex, tokenRingRemoteBridgeAndCAM=tokenRingRemoteBridgeAndCAM, info=info, ocmibsEhubMIB=ocmibsEhubMIB, inetTrapIPEncapsulation=inetTrapIPEncapsulation, infoSwImageModuleIndex=infoSwImageModuleIndex, managementSnmpAccessLogTimeStamp=managementSnmpAccessLogTimeStamp, errorlogErrorDescription=errorlogErrorDescription, infoSwImageNo=infoSwImageNo, infoSoftwareMIBsDescription=infoSoftwareMIBsDescription, infoXtraSwIndex=infoXtraSwIndex, ocmibsCf871xMIB=ocmibsCf871xMIB, inetSlipHeaderCompressionEnabled=inetSlipHeaderCompressionEnabled, trconfigLocalAddress=trconfigLocalAddress, infoXtraSwFileUse=infoXtraSwFileUse, controlFlashConfigState=controlFlashConfigState, obmEnableTelnet=obmEnableTelnet, fastEthernetSwitchOc8420=fastEthernetSwitchOc8420, inetCommunityAccess=inetCommunityAccess, infoSwImageVersion=infoSwImageVersion, MacAddress=MacAddress, ocmibsOc84x0MIB=ocmibsOc84x0MIB, sCalloutEnable=sCalloutEnable, infoSoftwareMIBsTable=infoSoftwareMIBsTable, managementTable=managementTable, inetCommunityIPAddress=inetCommunityIPAddress, controlTrapTableEntry=controlTrapTableEntry, inetTrapIndex=inetTrapIndex, controlTrapIndex=controlTrapIndex, tokenRingBridgeSR=tokenRingBridgeSR, ocmibsCauMIB=ocmibsCauMIB, errorlogEntry=errorlogEntry, trconfigIfNumber=trconfigIfNumber, obmCalloutRetryTimer=obmCalloutRetryTimer, errorlogVirtualIf=errorlogVirtualIf, ethernetSwitchOc8200=ethernetSwitchOc8200, errorlogTraceControl=errorlogTraceControl, inetTrapDelete=inetTrapDelete, inetSlipModemInit=inetSlipModemInit, controlDelayedRestart=controlDelayedRestart, controlLoadServerIPXAddress=controlLoadServerIPXAddress, trconfigTable=trconfigTable, infoSwImageDownloadTime=infoSwImageDownloadTime, tokenRingMultiPortBridge=tokenRingMultiPortBridge, errorlogTraceMaskOperational=errorlogTraceMaskOperational, crossfireAtmSwitchOc8008=crossfireAtmSwitchOc8008, lmpMib=lmpMib, management=management, controlTftpSessionIndex=controlTftpSessionIndex, managementSnmpAccessLogTable=managementSnmpAccessLogTable, infoSoftwareMIBsNo=infoSoftwareMIBsNo, controlRestartType=controlRestartType, obmDialType=obmDialType, errorlogTraceSliceTableEntry=errorlogTraceSliceTableEntry, errorlogPhysicalIf=errorlogPhysicalIf, remoteOS2PCBridge=remoteOS2PCBridge, ocmibsCamMIB=ocmibsCamMIB, ocmibs=ocmibs, errorlogNumber=errorlogNumber, infoSoftwareOptionTable=infoSoftwareOptionTable, infoSoftwareOptionTableEntry=infoSoftwareOptionTableEntry, inetSlipMaxMruSize=inetSlipMaxMruSize, trconfigBurntInAddress=trconfigBurntInAddress, obmConnectTimeout=obmConnectTimeout, controlAutoRestart=controlAutoRestart, atmUplinkMIB=atmUplinkMIB, ocmibsBridgeMIB=ocmibsBridgeMIB, controlTftpNextSessionIndex=controlTftpNextSessionIndex, crossfireAtmSwitch=crossfireAtmSwitch, IPXAddress=IPXAddress, errorlogTraceSliceData=errorlogTraceSliceData, infoSoftwareOption=infoSoftwareOption, controlRestart=controlRestart, controlTftpSessionProgress=controlTftpSessionProgress, obm=obm, frontpanel=frontpanel, controlTftpSessionServerAddress=controlTftpSessionServerAddress, ethernetSwitchCf8720=ethernetSwitchCf8720, infoModuleHwVersion=infoModuleHwVersion, infoSwImageEntry=infoSwImageEntry, sCalloutPhoneNumber=sCalloutPhoneNumber, infoHardwareOptionTable=infoHardwareOptionTable, frontpanelDisplayLogDisplayText=frontpanelDisplayLogDisplayText, inetTrapTransportProtocols=inetTrapTransportProtocols, obmRtsCtsHandshake=obmRtsCtsHandshake, frontpanelDisplayLogTimeStamp=frontpanelDisplayLogTimeStamp, errorlogSeverity=errorlogSeverity, controlFlashConfigSize=controlFlashConfigSize, controlTrapTable=controlTrapTable, infoHardwareOptionNo=infoHardwareOptionNo, ethernetSwitchCf8711=ethernetSwitchCf8711, trconfigEntry=trconfigEntry, frontpanelDisplay=frontpanelDisplay, infoModuleEntry=infoModuleEntry, infoSoftwareMIBsTableEntry=infoSoftwareMIBsTableEntry, obmInactivityTimeout=obmInactivityTimeout, infoXtraSwSerialNumber=infoXtraSwSerialNumber, infoModuleIndex=infoModuleIndex, infoHardwareVersion=infoHardwareVersion, controlLoadFilename=controlLoadFilename, controlLoadProtocol=controlLoadProtocol, controlledAttachmentModule=controlledAttachmentModule, errorlogCategory=errorlogCategory, infoModuleHwSerialNumber=infoModuleHwSerialNumber, trconfig=trconfig, inetCommunityTableEntry=inetCommunityTableEntry, errorlogTraceSliceNumber=errorlogTraceSliceNumber, infoXtraSwEntry=infoXtraSwEntry, controlFlashConfigFree=controlFlashConfigFree, obmPassword=obmPassword, olicom=olicom, controlTftpMaxSessions=controlTftpMaxSessions, inetIPAddressIPAddress=inetIPAddressIPAddress, frontpanelKeyboardAccess=frontpanelKeyboardAccess, infoXtraSwProductId=infoXtraSwProductId, errorlogTraceMaskCurrent=errorlogTraceMaskCurrent, errorlogStoredSeverityLevel=errorlogStoredSeverityLevel, inetSlipMaxMtuSize=inetSlipMaxMtuSize, frontpanelDisplayLogIndex=frontpanelDisplayLogIndex, frontpanelKeyPress=frontpanelKeyPress, inetCommunityNo=inetCommunityNo, inetIPAddressEnableRIP=inetIPAddressEnableRIP, controlLoadServerIPAddress=controlLoadServerIPAddress, controlledAccessUnit=controlledAccessUnit, trconfigEarlyTokenRelease=trconfigEarlyTokenRelease, ocmibsOc8100MIB=ocmibsOc8100MIB, frontpanelDisplayLogTable=frontpanelDisplayLogTable, errorlogErrorData=errorlogErrorData, crossfireAtmSwitchCf9200=crossfireAtmSwitchCf9200, crossfireRouterCf7100=crossfireRouterCf7100, inetTrapCommunity=inetTrapCommunity, managementSnmpAccessLogIndex=managementSnmpAccessLogIndex, infoHardwareProductId=infoHardwareProductId, inetTrapDestIPXAddress=inetTrapDestIPXAddress, inetEnableRwho=inetEnableRwho, frontpanelDefaultDisplay=frontpanelDefaultDisplay, infoModuleTable=infoModuleTable, controlTftpSessionTable=controlTftpSessionTable, obmCalloutEnable=obmCalloutEnable, inetSlipBaudrate=inetSlipBaudrate, obmXonXoffHandshake=obmXonXoffHandshake, infoModuleHwProductId=infoModuleHwProductId, sCallbackPhoneNumber=sCallbackPhoneNumber, inetDefaultIPXEncapsulation=inetDefaultIPXEncapsulation, controlTftpSessionServerFile=controlTftpSessionServerFile, etherNetAttachmentHUB=etherNetAttachmentHUB, infoHardwareSerialNumber=infoHardwareSerialNumber, obmDelayedRecovery=obmDelayedRecovery, managementNo=managementNo, obmCalloutTriggerEvent=obmCalloutTriggerEvent, errorlogTimeStamp=errorlogTimeStamp, inetCommunityMACAddress=inetCommunityMACAddress, inetCommunityIPXAddress=inetCommunityIPXAddress, errorlog=errorlog, RowStatus=RowStatus, infoSoftwareECOLevel=infoSoftwareECOLevel, infoXtraSwTable=infoXtraSwTable, frontpanelDisplayLogEntry=frontpanelDisplayLogEntry, controlLoadFileSize=controlLoadFileSize, controlTrapDescription=controlTrapDescription, infoSoftwareOptionNo=infoSoftwareOptionNo, infoHardwareOption=infoHardwareOption, inetCommunityMaxEntries=inetCommunityMaxEntries, obmModemInit=obmModemInit, errorlogTraceSliceTable=errorlogTraceSliceTable, infoHardwareOptionTableEntry=infoHardwareOptionTableEntry, controlSwAdminStatus=controlSwAdminStatus, managementTableEntry=managementTableEntry, managementAssociationState=managementAssociationState, ocmibsVlanMIB=ocmibsVlanMIB, obmCallbackPhoneNumber=obmCallbackPhoneNumber, tokenRingSwitchOc8600=tokenRingSwitchOc8600, infoSoftwareMIBsObjectID=infoSoftwareMIBsObjectID, infoXtraSwVersion=infoXtraSwVersion, controlLoadServerMACAddress=controlLoadServerMACAddress, ocmibsLanSwitchMIB=ocmibsLanSwitchMIB, inetTrapDestUDPPort=inetTrapDestUDPPort, controlTrapGeneration=controlTrapGeneration, controlTftpSessionDirection=controlTftpSessionDirection, managementSnmpLastErrorReason=managementSnmpLastErrorReason, remoteDOSPCBridge=remoteDOSPCBridge, infoModuleBootpromVersion=infoModuleBootpromVersion, inetTrapDestIPAddress=inetTrapDestIPAddress, obmStopbits=obmStopbits, desktopManagementAgent=desktopManagementAgent, obmCalloutRetries=obmCalloutRetries, infoXtraSwOptions=infoXtraSwOptions, managementSnmpAccessLogCount=managementSnmpAccessLogCount, inetTrapTable=inetTrapTable)
mibBuilder.exportSymbols("Olicom-MIB", inetCommunityTable=inetCommunityTable, obmEnable=obmEnable, frontpanelErrorcode=frontpanelErrorcode, inetTrapIPXEncapsulation=inetTrapIPXEncapsulation, tokenRingSwitchOc8100=tokenRingSwitchOc8100, ocmibsOc8200MIB=ocmibsOc8200MIB, inetCommunityTransportProtocols=inetCommunityTransportProtocols, tokenRingSwitchCf8500=tokenRingSwitchCf8500, obmParity=obmParity, managementSnmpAccessLogIpAddress=managementSnmpAccessLogIpAddress, controlTftpSessionRowStatus=controlTftpSessionRowStatus, fastEthernetSwitchOc8400=fastEthernetSwitchOc8400)
