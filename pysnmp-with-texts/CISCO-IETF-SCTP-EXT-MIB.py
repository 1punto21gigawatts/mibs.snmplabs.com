#
# PySNMP MIB module CISCO-IETF-SCTP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-SCTP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cSctpAssocRemAddressEntry, cSctpAssocRemAddressStatus, cSctpAssocEntry = mibBuilder.importSymbols("CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressEntry", "cSctpAssocRemAddressStatus", "cSctpAssocEntry")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, TimeTicks, Unsigned32, Counter64, ObjectIdentity, NotificationType, iso, Counter32, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "TimeTicks", "Unsigned32", "Counter64", "ObjectIdentity", "NotificationType", "iso", "Counter32", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp")
cSctpExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 76))
cSctpExtMIB.setRevisions(('2001-11-09 00:00', '2001-08-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cSctpExtMIB.setRevisionsDescriptions(('Added support for effective destination address, count of fast retransmission per association and notification when destination address changes states. cSctpAssocExtEffectiveAddrType cSctpAssocExtEffectiveAddress cSctpAssocExtRtxChunksFast cSctpAddressStateNotifEnabled cSctpExtDestAddressStateChange cSctpAssocExtBundleFlag cSctpAssocExtBundleTimeout', 'MIB module developed for the SIGTRAN IETF group. Based on SCTP, RFC2960',))
if mibBuilder.loadTexts: cSctpExtMIB.setLastUpdated('200111090000Z')
if mibBuilder.loadTexts: cSctpExtMIB.setOrganization(' ')
if mibBuilder.loadTexts: cSctpExtMIB.setContactInfo(' Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-sctp@cisco.com')
if mibBuilder.loadTexts: cSctpExtMIB.setDescription('An extension to the CISCO-IETF-SCTP-MIB.my used to provide additional information to manage the Stream Control Transmission Protocol (RFC 2960).')
cSctpExtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 76, 0))
cSctpExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 76, 1))
cSctpScalarsExt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 1))
cSctpExtTables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2))
cSctpStatRtxChucks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 1, 1), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatRtxChucks.setReference('[sctp] section 6.3.3. Handle T3-rtx Expiration')
if mibBuilder.loadTexts: cSctpStatRtxChucks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatRtxChucks.setDescription('Number of SCTP chunks retransmitted due to the T3 timers expiring before the packet is acknowledged. ')
cSctpStatRtxChucksFast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 1, 2), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatRtxChucksFast.setReference('[sctp] section 7.2.4.- Fast Retransmit on Gap Reports.')
if mibBuilder.loadTexts: cSctpStatRtxChucksFast.setStatus('current')
if mibBuilder.loadTexts: cSctpStatRtxChucksFast.setDescription('Number of SCTP chunks retransmitted using the fast-recovery retransmission mechanism specified in [sctp].')
cSctpStatDestAddressFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatDestAddressFailures.setStatus('current')
if mibBuilder.loadTexts: cSctpStatDestAddressFailures.setDescription('The accumulated number of times a destination IP address was marked unavailable since the start of this association. The IP destination address will be marked unavailable when the specified number of retransmissions have failed.')
cSctpCtrlPurgeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3600, 3000000)).clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSctpCtrlPurgeTimeout.setStatus('current')
if mibBuilder.loadTexts: cSctpCtrlPurgeTimeout.setDescription('The amount of time the SCTP protocol software will wait before purging an associations TCB. An association TCB will exist until a management station sets the cSctpAssocState to deleteTCB or is purge by the protocol implementation. The protocol implementation will purge an association TCB using a combination of cSctpCtrlPurgeTimeout and cSctpCtrlMaxHeld. The cSctpCtrlPurgeTimeout ranges from the minimum of one hour to roughly one month. The default value is roughly one day.')
cSctpCtrlMaxHeld = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 10000)).clone(100)).setUnits('association TCBs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSctpCtrlMaxHeld.setStatus('current')
if mibBuilder.loadTexts: cSctpCtrlMaxHeld.setDescription('The maximum number of association TCBS that will be held after they have been marked closed and are no longer providing service. This limit is used to prevent excessive waste of resources.')
cSctpAddressStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSctpAddressStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cSctpAddressStateNotifEnabled.setDescription("This object controls the generation of cSctpExtDestAddressStateChange as follows: 'true' Indicates that an address state change notification is to be generated whenever a IP address used by one or more associations becomes available or unavailable. That is, the notification generation is enabled. 'false' Indicates that an address state change notification generation is disabled.")
cSctpAssocExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1), )
if mibBuilder.loadTexts: cSctpAssocExtTable.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtTable.setDescription('A table containing SCTP association-specific information.')
cSctpAssocExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1), )
cSctpAssocEntry.registerAugmentions(("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtEntry"))
cSctpAssocExtEntry.setIndexNames(*cSctpAssocEntry.getIndexNames())
if mibBuilder.loadTexts: cSctpAssocExtEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtEntry.setDescription('General common variables and statistics for the whole association.')
cSctpAssocExtRtoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 1), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtRtoMin.setReference('[SIGAS] Telephony Signaling Transport over SCTP Applicability Statement')
if mibBuilder.loadTexts: cSctpAssocExtRtoMin.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtRtoMin.setDescription('The minimum value permitted by a SCTP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. Minimum recommended value is 1000 milliseconds. Some telephony applications could require less than 1 second, see [SIGAS] for further information.')
cSctpAssocExtRtoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 2), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtRtoMax.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtRtoMax.setDescription('The maximum value permitted by a SCTP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. Recommended value is 60000 milliseconds.')
cSctpAssocExtRtoInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 3), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtRtoInitial.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtRtoInitial.setDescription('Initial value for the Retransmission timer. Recommended value is 3000 milliseconds.')
cSctpAssocExtValCookieLife = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 4), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtValCookieLife.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtValCookieLife.setDescription('Valid cookie life in the 4-way start-up handshake procedure. Recommended value: 60000 milliseconds.')
cSctpAssocExtMaxInitRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtMaxInitRetr.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtMaxInitRetr.setDescription('The maximum number of retransmissions at the start-up phase (INIT and COOKIE ECHO chunks). Recommended value: 8 attempts.')
cSctpAssocExtMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(37, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtMTU.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtMTU.setDescription('The Maximum Transmission Size to be used by this association. The size will the smallest MTU size supported by any of the IP Addresses used by the association.')
cSctpAssocExtLocRecWnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtLocRecWnd.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtLocRecWnd.setDescription('The current local receive window size for this association.')
cSctpAssocExtLocRecWndLowMark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtLocRecWndLowMark.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtLocRecWndLowMark.setDescription('Low water mark for Local Receive Window Size.')
cSctpAssocExtLocRecWndZeroCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtLocRecWndZeroCnt.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtLocRecWndZeroCnt.setDescription('Number of times the Local Receive window reached zero bytes.')
cSctpAssocExtRemRecWnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtRemRecWnd.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtRemRecWnd.setDescription('The Remote Receive Window Size for this association.')
cSctpAssocExtRemRecWndLowMark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtRemRecWndLowMark.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtRemRecWndLowMark.setDescription('Low water mark for Remote Receive Window Size.')
cSctpAssocExtRemRecWndZeroCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtRemRecWndZeroCnt.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtRemRecWndZeroCnt.setDescription('Number of times the Remote Receive window reached zero bytes.')
cSctpAssocExtUlpQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('datagrams').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtUlpQueued.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtUlpQueued.setDescription('Current number of IP datagrams waiting to be sent.')
cSctpAssocExtUlpQueuedHW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('datagrams').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSctpAssocExtUlpQueuedHW.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtUlpQueuedHW.setDescription('High water mark for data grams waiting to be sent. Resetting this object is achieved by setting this object to 0. Attempting to set this object to any other value will result in a wrongValue error.')
cSctpAssocExtUlpQueuedRT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtUlpQueuedRT.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtUlpQueuedRT.setDescription('The time when cSctpAssocUlpQueuedHW was set to 0.')
cSctpAssocExtChunksRecControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 16), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtChunksRecControl.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtChunksRecControl.setDescription('Number of control Chucks received by this association.')
cSctpAssocExtChunksRecOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 17), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtChunksRecOrdered.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtChunksRecOrdered.setDescription('Number of Chucks received by this association where order is required.')
cSctpAssocExtChunksRecUnOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 18), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtChunksRecUnOrdered.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtChunksRecUnOrdered.setDescription('Number of Chucks received by this association where order is not required.')
cSctpAssocExtChunksSentControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 19), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtChunksSentControl.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtChunksSentControl.setDescription('Number of control Chucks sent by this association.')
cSctpAssocExtChunksSentOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 20), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtChunksSentOrdered.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtChunksSentOrdered.setDescription('Number of Chucks sent by this association where order is required.')
cSctpAssocExtChunksSentUnOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 21), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtChunksSentUnOrdered.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtChunksSentUnOrdered.setDescription('Number of Chucks sent by this association where order is not required.')
cSctpAssocExtDatagramsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 22), Counter32()).setUnits('datagrams').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtDatagramsRec.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtDatagramsRec.setDescription('Number of IP datagrams received by this association.')
cSctpAssocExtDatagramsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 23), Counter32()).setUnits('datagrams').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtDatagramsSent.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtDatagramsSent.setDescription('Number of IP datagrams sent by this association.')
cSctpAssocExtEffectiveAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtEffectiveAddrType.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtEffectiveAddrType.setDescription('Internet type of effective destination IP address. This is the type of IP address to which traffic is currently sent for this association.')
cSctpAssocExtEffectiveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 25), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtEffectiveAddress.setReference('[sctp] RFC2960 section 8.1 Endpoint Failure Detection')
if mibBuilder.loadTexts: cSctpAssocExtEffectiveAddress.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtEffectiveAddress.setDescription('Effective destination IP address. This is the IP address to which traffic is currently sent for this association. This value can be any of the IP addresses defined in the cSctpAssocRemAddressExtTable Table.')
cSctpAssocExtRtxChunksFast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 26), Counter32()).setUnits('chunks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtRtxChunksFast.setReference('RFC 2960 section 7.2.4. - Fast Retransmit on Gap Reports.')
if mibBuilder.loadTexts: cSctpAssocExtRtxChunksFast.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtRtxChunksFast.setDescription('The accumulated number of SCTP chunks retransmitted using the fast-recovery retransmission mechanism specified in [sctp] since the start of this association.')
cSctpAssocExtBundleFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtBundleFlag.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtBundleFlag.setDescription("This objects indicates if the SCTP protocol allows chunks to be bundled into a single datagram as follows: 'true(1)' Indicates that chunks will be bundled. 'false(2)' Indicates that chunks will not be bundled.")
cSctpAssocExtBundleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocExtBundleTimeout.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocExtBundleTimeout.setDescription('The amount time to wait to allow data chunks to accumulate so that they can be transmitted in the same datagram. The arrival of the first data chunk will start a timer that will expire in the specified milliseconds. All later chunks will be delayed until the timer expires. When the timer expires the data chunks will be sent out in one or more datagrams.')
cSctpAssocRemAddressExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 2), )
if mibBuilder.loadTexts: cSctpAssocRemAddressExtTable.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressExtTable.setDescription('Expanded table of cSctpAssocRemAddressExtTable based on the AssocId index.')
cSctpAssocRemAddressExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 2, 1), )
cSctpAssocRemAddressEntry.registerAugmentions(("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocRemAddressExtEntry"))
cSctpAssocRemAddressExtEntry.setIndexNames(*cSctpAssocRemAddressEntry.getIndexNames())
if mibBuilder.loadTexts: cSctpAssocRemAddressExtEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressExtEntry.setDescription('Additional information about destination IP addresses.')
cSctpAssocRemAddressFailedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemAddressFailedCnt.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressFailedCnt.setDescription('Number of times the destination address was marked as failed.')
cSctpAssocRemAddressSRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 76, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemAddressSRTT.setReference('[sctp] section 6.3.1 RTO Calculation')
if mibBuilder.loadTexts: cSctpAssocRemAddressSRTT.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressSRTT.setDescription("The Smoothed Round Trip Time(SRTT) is obtained by averaging the measured Rount trip times(RTT) between the local and remote systems on an IP Network. A value of '0' is reported for SRTT prior to the first successful RTT calculation.")
cSctpExtDestAddressStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 76, 0, 1)).setObjects(("CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressStatus"))
if mibBuilder.loadTexts: cSctpExtDestAddressStateChange.setStatus('current')
if mibBuilder.loadTexts: cSctpExtDestAddressStateChange.setDescription('The notification is generated when the state transition of cSctpAssocRemAddressStatus has occurred.')
cSctpExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 76, 3))
cSctpExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 1))
cSctpExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2))
cSctpExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 1, 1)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtStatGroup"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtCtrlGroup"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtAssocCtrlGroup"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtAssocStatGroup"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtAssocRemAddrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtCompliance = cSctpExtCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cSctpExtCompliance.setDescription('The compliance statement for CISCO-IETF-SCTP-EXT-MIB.my.')
cSctpExtComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 1, 2)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtStatGroup"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtAssocCtrlGroup"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtAssocRemAddrGroup"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtAssocNotificationsGroup"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtCtrlGroupRev1"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtAssocStatGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtComplianceRev1 = cSctpExtComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cSctpExtComplianceRev1.setDescription('The compliance statement for CISCO-IETF-SCTP-EXT-MIB.my.')
cSctpExtStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2, 1)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpStatRtxChucks"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpStatRtxChucksFast"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpStatDestAddressFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtStatGroup = cSctpExtStatGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpExtStatGroup.setDescription('A collection of objects providing SCTP per system basis statistics for all associations.')
cSctpExtCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2, 2)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpCtrlPurgeTimeout"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpCtrlMaxHeld"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtCtrlGroup = cSctpExtCtrlGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cSctpExtCtrlGroup.setDescription('A collection of objects providing SCTP per system basis control behavior for all associations.')
cSctpExtAssocCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2, 3)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRtoMin"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRtoMax"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRtoInitial"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtValCookieLife"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtMaxInitRetr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtAssocCtrlGroup = cSctpExtAssocCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpExtAssocCtrlGroup.setDescription('Objects used to control the behavior each association.')
cSctpExtAssocStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2, 4)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtMTU"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtLocRecWnd"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtLocRecWndLowMark"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtLocRecWndZeroCnt"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRemRecWnd"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRemRecWndLowMark"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRemRecWndZeroCnt"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtUlpQueued"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtUlpQueuedHW"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtUlpQueuedRT"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksRecControl"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksRecOrdered"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksRecUnOrdered"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksSentControl"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksSentOrdered"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksSentUnOrdered"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtDatagramsRec"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtDatagramsSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtAssocStatGroup = cSctpExtAssocStatGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cSctpExtAssocStatGroup.setDescription('Objects used to collect information and statistics on each association.')
cSctpExtAssocRemAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2, 5)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocRemAddressFailedCnt"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocRemAddressSRTT"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtAssocRemAddrGroup = cSctpExtAssocRemAddrGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpExtAssocRemAddrGroup.setDescription('Objects used to collect information and statistics on each destination IP address.')
cSctpExtAssocNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2, 6)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpExtDestAddressStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtAssocNotificationsGroup = cSctpExtAssocNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpExtAssocNotificationsGroup.setDescription('Object used to provide notifications of state changes on destination IP addresses.')
cSctpExtCtrlGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2, 7)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpCtrlPurgeTimeout"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpCtrlMaxHeld"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAddressStateNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtCtrlGroupRev1 = cSctpExtCtrlGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cSctpExtCtrlGroupRev1.setDescription('A collection of objects providing SCTP per system basis control behavior for all associations.')
cSctpExtAssocStatGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 76, 3, 2, 8)).setObjects(("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtMTU"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtLocRecWnd"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtLocRecWndLowMark"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtLocRecWndZeroCnt"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRemRecWnd"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRemRecWndLowMark"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRemRecWndZeroCnt"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtUlpQueued"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtUlpQueuedHW"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtUlpQueuedRT"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksRecControl"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksRecOrdered"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksRecUnOrdered"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksSentControl"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksSentOrdered"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtChunksSentUnOrdered"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtDatagramsRec"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtDatagramsSent"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtEffectiveAddrType"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtEffectiveAddress"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtRtxChunksFast"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtBundleTimeout"), ("CISCO-IETF-SCTP-EXT-MIB", "cSctpAssocExtBundleFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpExtAssocStatGroupRev1 = cSctpExtAssocStatGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cSctpExtAssocStatGroupRev1.setDescription('Objects used to collect information and statistics on each association.')
mibBuilder.exportSymbols("CISCO-IETF-SCTP-EXT-MIB", cSctpAssocExtChunksRecOrdered=cSctpAssocExtChunksRecOrdered, cSctpStatRtxChucks=cSctpStatRtxChucks, cSctpAssocExtMTU=cSctpAssocExtMTU, cSctpAssocExtUlpQueuedRT=cSctpAssocExtUlpQueuedRT, cSctpAssocExtMaxInitRetr=cSctpAssocExtMaxInitRetr, cSctpExtCompliances=cSctpExtCompliances, cSctpExtAssocNotificationsGroup=cSctpExtAssocNotificationsGroup, PYSNMP_MODULE_ID=cSctpExtMIB, cSctpAssocRemAddressFailedCnt=cSctpAssocRemAddressFailedCnt, cSctpAssocExtUlpQueued=cSctpAssocExtUlpQueued, cSctpAssocExtBundleFlag=cSctpAssocExtBundleFlag, cSctpExtAssocStatGroup=cSctpExtAssocStatGroup, cSctpExtMIB=cSctpExtMIB, cSctpScalarsExt=cSctpScalarsExt, cSctpAssocExtChunksRecUnOrdered=cSctpAssocExtChunksRecUnOrdered, cSctpAssocExtLocRecWndZeroCnt=cSctpAssocExtLocRecWndZeroCnt, cSctpAssocExtRtoMin=cSctpAssocExtRtoMin, cSctpStatRtxChucksFast=cSctpStatRtxChucksFast, cSctpAddressStateNotifEnabled=cSctpAddressStateNotifEnabled, cSctpAssocExtTable=cSctpAssocExtTable, cSctpAssocExtLocRecWnd=cSctpAssocExtLocRecWnd, cSctpAssocExtUlpQueuedHW=cSctpAssocExtUlpQueuedHW, cSctpAssocExtDatagramsRec=cSctpAssocExtDatagramsRec, cSctpExtAssocStatGroupRev1=cSctpExtAssocStatGroupRev1, cSctpExtComplianceRev1=cSctpExtComplianceRev1, cSctpAssocExtBundleTimeout=cSctpAssocExtBundleTimeout, cSctpExtCompliance=cSctpExtCompliance, cSctpExtStatGroup=cSctpExtStatGroup, cSctpAssocExtRemRecWnd=cSctpAssocExtRemRecWnd, cSctpAssocExtChunksRecControl=cSctpAssocExtChunksRecControl, cSctpExtCtrlGroup=cSctpExtCtrlGroup, cSctpAssocRemAddressSRTT=cSctpAssocRemAddressSRTT, cSctpAssocExtEffectiveAddrType=cSctpAssocExtEffectiveAddrType, cSctpExtNotifications=cSctpExtNotifications, cSctpAssocExtChunksSentControl=cSctpAssocExtChunksSentControl, cSctpExtGroups=cSctpExtGroups, cSctpAssocExtEffectiveAddress=cSctpAssocExtEffectiveAddress, cSctpExtTables=cSctpExtTables, cSctpAssocExtValCookieLife=cSctpAssocExtValCookieLife, cSctpAssocExtLocRecWndLowMark=cSctpAssocExtLocRecWndLowMark, cSctpAssocExtRtxChunksFast=cSctpAssocExtRtxChunksFast, cSctpStatDestAddressFailures=cSctpStatDestAddressFailures, cSctpAssocExtChunksSentUnOrdered=cSctpAssocExtChunksSentUnOrdered, cSctpCtrlMaxHeld=cSctpCtrlMaxHeld, cSctpAssocRemAddressExtEntry=cSctpAssocRemAddressExtEntry, cSctpAssocExtRtoMax=cSctpAssocExtRtoMax, cSctpAssocExtRemRecWndZeroCnt=cSctpAssocExtRemRecWndZeroCnt, cSctpExtAssocRemAddrGroup=cSctpExtAssocRemAddrGroup, cSctpAssocRemAddressExtTable=cSctpAssocRemAddressExtTable, cSctpAssocExtChunksSentOrdered=cSctpAssocExtChunksSentOrdered, cSctpAssocExtRtoInitial=cSctpAssocExtRtoInitial, cSctpExtCtrlGroupRev1=cSctpExtCtrlGroupRev1, cSctpAssocExtEntry=cSctpAssocExtEntry, cSctpCtrlPurgeTimeout=cSctpCtrlPurgeTimeout, cSctpAssocExtDatagramsSent=cSctpAssocExtDatagramsSent, cSctpExtObjects=cSctpExtObjects, cSctpExtConformance=cSctpExtConformance, cSctpExtAssocCtrlGroup=cSctpExtAssocCtrlGroup, cSctpExtDestAddressStateChange=cSctpExtDestAddressStateChange, cSctpAssocExtRemRecWndLowMark=cSctpAssocExtRemRecWndLowMark)
