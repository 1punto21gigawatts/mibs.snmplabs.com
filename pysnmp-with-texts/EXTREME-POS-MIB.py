#
# PySNMP MIB module EXTREME-POS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, PortList = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
extremePOSMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 20))
if mibBuilder.loadTexts: extremePOSMib.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremePOSMib.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremePOSMib.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremePOSMib.setDescription('Extreme POS objects: objects common to POS MIBs')
extremeAps = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1))
extremeApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1))
extremeApsConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeApsConfigEnabled.setDescription('Global APS enablement')
extremeApsGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2), )
if mibBuilder.loadTexts: extremeApsGroupConfigTable.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigTable.setDescription('This table contains configuration information by defined APS group.')
extremeApsGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1), ).setIndexNames((0, "EXTREME-POS-MIB", "extremeApsGroupConfigGroupNumber"))
if mibBuilder.loadTexts: extremeApsGroupConfigEntry.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigEntry.setDescription('')
extremeApsGroupConfigGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupConfigGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigGroupNumber.setDescription('The group number which uniquely identifies the APS group.')
extremeApsGroupConfigRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonRevertive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupConfigRevertMode.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigRevertMode.setDescription('The revertive mode configured for the APS group. This indicates whether APS will switch-back automatically after the working line error is cleared. In non-revertive mode, manual intervention is required for switch-back.')
extremeApsGroupConfigRevertMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupConfigRevertMinutes.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigRevertMinutes.setDescription('The number of minutes APS will wait after the error has been cleared before switching back to the working line. During this interval, the K1 request will indicate WTR (wait-to-restore). This field is only valid in revertive mode.')
extremeApsGroupConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidirectional", 1), ("unidirectional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupConfigDirection.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigDirection.setDescription('The directional mode configured for the APS group. This indicates whether protection switches are coordinated between both POS equipment and ADM (bidirectional) or not (unidirectional).')
extremeApsGroupConfigTimerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupConfigTimerInterval.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigTimerInterval.setDescription('The number of seconds between APS out-of-band peer protocol hello messages. This value is relevant when the working line and protection line exist is physically different chassis.')
extremeApsGroupConfigTimerMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupConfigTimerMisses.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigTimerMisses.setDescription('The number of APS out-of-band peer protocol messages transmitted without receiving a response before the protection switch declares the working switch inoperable. When this occurs the protection switch initiates a line switch over via APS.')
extremeApsGroupConfigAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupConfigAuthenticate.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigAuthenticate.setDescription('When enabled, the authentication string on both working and protection switches must match.')
extremeApsGroupConfigAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupConfigAuthString.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupConfigAuthString.setDescription('If configured, this is the authentication string that must match between working and protection switches. This field is relevant if the APS group is configured to authenticate.')
extremeApsPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 3), )
if mibBuilder.loadTexts: extremeApsPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: extremeApsPortConfigTable.setDescription('This table contains configuration information for APS ports.')
extremeApsPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 3, 1), ).setIndexNames((0, "EXTREME-POS-MIB", "extremeApsPortConfigGroupNumber"), (0, "EXTREME-POS-MIB", "extremeApsPortConfigPortNumber"))
if mibBuilder.loadTexts: extremeApsPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: extremeApsPortConfigEntry.setDescription('')
extremeApsPortConfigGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsPortConfigGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsPortConfigGroupNumber.setDescription('The group number which uniquely identifies the APS group.')
extremeApsPortConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsPortConfigPortNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsPortConfigPortNumber.setDescription('The value of ifIndex that identifies the port.')
extremeApsPortConfigPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("working", 1), ("protection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsPortConfigPortType.setStatus('current')
if mibBuilder.loadTexts: extremeApsPortConfigPortType.setDescription('The port type designation.')
extremeApsProtectPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 4), )
if mibBuilder.loadTexts: extremeApsProtectPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortConfigTable.setDescription('This table contains configuration information for APS protection ports.')
extremeApsProtectPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 4, 1), ).setIndexNames((0, "EXTREME-POS-MIB", "extremeApsProtectPortConfigGroupNumber"), (0, "EXTREME-POS-MIB", "extremeApsProtectPortConfigPortNumber"))
if mibBuilder.loadTexts: extremeApsProtectPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortConfigEntry.setDescription('')
extremeApsProtectPortConfigGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortConfigGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortConfigGroupNumber.setDescription('The group number which uniquely identifies the APS group.')
extremeApsProtectPortConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortConfigPortNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortConfigPortNumber.setDescription('The value of ifIndex that identifies the protection port.')
extremeApsProtectPortConfigWorkingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortConfigWorkingIpAddr.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortConfigWorkingIpAddr.setDescription('The IP address of the working switch. If the working and protection lines reside on the same chassis, this IP address will be a local address.')
extremeApsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2))
extremeApsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 1), )
if mibBuilder.loadTexts: extremeApsGroupTable.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupTable.setDescription('This table contains run-time information by defined APS group.')
extremeApsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 1, 1), ).setIndexNames((0, "EXTREME-POS-MIB", "extremeApsGroupGroupNumber"))
if mibBuilder.loadTexts: extremeApsGroupEntry.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupEntry.setDescription('')
extremeApsGroupGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupGroupNumber.setDescription('The group number which uniquely identifies the APS group.')
extremeApsGroupActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("working", 1), ("protection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupActivePort.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupActivePort.setDescription('The APS port which is currently carrying the network traffic.')
extremeApsGroupEffectiveDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidirectional", 1), ("unidirectional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupEffectiveDirection.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupEffectiveDirection.setDescription('The effective directional mode for the APS group. When this value differs from the configured directional mode, check the ADM and switch provisioning for a mis- configuration.')
extremeApsGroupPeerProtoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("established", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsGroupPeerProtoStatus.setStatus('current')
if mibBuilder.loadTexts: extremeApsGroupPeerProtoStatus.setDescription('The APS out-of-band peer protocol status for a group.')
extremeApsProtectPortTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2), )
if mibBuilder.loadTexts: extremeApsProtectPortTable.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortTable.setDescription('This table contains run-time information by defined APS protection port.')
extremeApsProtectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1), ).setIndexNames((0, "EXTREME-POS-MIB", "extremeApsProtectPortGroupNumber"), (0, "EXTREME-POS-MIB", "extremeApsProtectPortPortNumber"))
if mibBuilder.loadTexts: extremeApsProtectPortEntry.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortEntry.setDescription('')
extremeApsProtectPortGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortGroupNumber.setDescription('The group number which uniquely identifies the APS group.')
extremeApsProtectPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortPortNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortPortNumber.setDescription('The value of ifIndex that identifies the protection port.')
extremeApsProtectPortTransmitK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortTransmitK1.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortTransmitK1.setDescription('The K1 overhead byte currently being transmitted on the indicated protection port.')
extremeApsProtectPortTransmitK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortTransmitK2.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortTransmitK2.setDescription('The K2 overhead byte currently being transmitted on the indicated protection port.')
extremeApsProtectPortReceiveK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortReceiveK1.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortReceiveK1.setDescription('The K1 overhead byte currently being received on the indicated protection port.')
extremeApsProtectPortReceiveK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortReceiveK2.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortReceiveK2.setDescription('The K2 overhead byte currently being received on the indicated protection port.')
extremeApsProtectPortSwitchInitByWorking = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortSwitchInitByWorking.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortSwitchInitByWorking.setDescription('The number of switches that have been initiated by the working-line router.')
extremeApsProtectPortSwitchInitByProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortSwitchInitByProtect.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortSwitchInitByProtect.setDescription('The number of switches that have been initiated by the protection-line router.')
extremeApsProtectPortSwitchInitByADM = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortSwitchInitByADM.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortSwitchInitByADM.setDescription('The number of switches that have been initiated by the ADM.')
extremeApsProtectPortSwitchInitByCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortSwitchInitByCmd.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortSwitchInitByCmd.setDescription('The number of switches that have been initiated by an external CLI command.')
extremeApsProtectPortSuccessfulSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortSuccessfulSwitches.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortSuccessfulSwitches.setDescription('The number of successful APS line switches.')
extremeApsProtectPortHelloProtFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtectPortHelloProtFails.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtectPortHelloProtFails.setDescription('The number of APS out-of-band peer protocol failures recorded. This situation causes the protection-line router to initiate a line switch.')
extremeApsErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3))
extremeApsLineErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1), )
if mibBuilder.loadTexts: extremeApsLineErrorTable.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorTable.setDescription('This table contains APS line error information.')
extremeApsLineErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1), ).setIndexNames((0, "EXTREME-POS-MIB", "extremeApsLineErrorGroupNumber"), (0, "EXTREME-POS-MIB", "extremeApsLineErrorPortNumber"))
if mibBuilder.loadTexts: extremeApsLineErrorEntry.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorEntry.setDescription('')
extremeApsLineErrorGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorGroupNumber.setDescription('The group number which uniquely identifies the APS group.')
extremeApsLineErrorPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorPortNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorPortNumber.setDescription('The ifIndex value which identifies the APS port.')
extremeApsLineErrorSignalDegradeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorSignalDegradeActive.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorSignalDegradeActive.setDescription('Indicates whether a signal degrade condition currently exists on the line.')
extremeApsLineErrorBERSignalDegradeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorBERSignalDegradeActive.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorBERSignalDegradeActive.setDescription('Indicates whether a signal degrade condition due to excessive Bit-Error-Rate currently exists on the line.')
extremeApsLineErrorSignalFailActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorSignalFailActive.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorSignalFailActive.setDescription('Indicates whether a signal fail condition currently exists on the line.')
extremeApsLineErrorBERSignalFailActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorBERSignalFailActive.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorBERSignalFailActive.setDescription('Indicates whether a signal fail condition due to excessive Bit-Error-Rate currently exists on the line.')
extremeApsLineErrorSignalDegrades = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorSignalDegrades.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorSignalDegrades.setDescription('The number of signal degrades that have been recorded on the line.')
extremeApsLineErrorBERSignalDegrades = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorBERSignalDegrades.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorBERSignalDegrades.setDescription('The number of signal degrades due to excessive Bit-Error-Rate that have been recorded on the line.')
extremeApsLineErrorSignalFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorSignalFails.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorSignalFails.setDescription('The number of signal fails that have been recorded on the line.')
extremeApsLineErrorBERSignalFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsLineErrorBERSignalFails.setStatus('current')
if mibBuilder.loadTexts: extremeApsLineErrorBERSignalFails.setDescription('The number of signal fails due to excessive Bit-Error-Rate that have been recorded on the line.')
extremeApsProtocolErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2), )
if mibBuilder.loadTexts: extremeApsProtocolErrorTable.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorTable.setDescription('This table contains APS protocol error information. These errors are relevant for APS protection ports.')
extremeApsProtocolErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1), ).setIndexNames((0, "EXTREME-POS-MIB", "extremeApsProtocolErrorGroupNumber"), (0, "EXTREME-POS-MIB", "extremeApsProtocolErrorPortNumber"))
if mibBuilder.loadTexts: extremeApsProtocolErrorEntry.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorEntry.setDescription('')
extremeApsProtocolErrorGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorGroupNumber.setDescription('The group number which uniquely identifies the APS group.')
extremeApsProtocolErrorPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorPortNumber.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorPortNumber.setDescription('The ifIndex value which identifies the APS protection port.')
extremeApsProtocolErrorModeMismatchDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorModeMismatchDefect.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorModeMismatchDefect.setDescription('Indicates whether a Mode Mismatch defect currently exists on the port.')
extremeApsProtocolErrorProtSwitchByteDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorProtSwitchByteDefect.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorProtSwitchByteDefect.setDescription('Indicates whether a Protection Switching Byte defect currently exists on the port.')
extremeApsProtocolErrorChannelMismatchDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorChannelMismatchDefect.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorChannelMismatchDefect.setDescription('Indicates whether a Channel Mismatch defect currently exists on the port.')
extremeApsProtocolErrorFarEndProtectDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorFarEndProtectDefect.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorFarEndProtectDefect.setDescription('Indicates whether a Far-End Protection defect currently exists on the port.')
extremeApsProtocolErrorModeMismatchFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorModeMismatchFailure.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorModeMismatchFailure.setDescription('Indicates whether a Mode Mismatch failure currently exists on the port.')
extremeApsProtocolErrorProtSwitchByteFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorProtSwitchByteFailure.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorProtSwitchByteFailure.setDescription('Indicates whether a Protection Switching Byte failure currently exists on the port.')
extremeApsProtocolErrorChannelMismatchFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorChannelMismatchFailure.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorChannelMismatchFailure.setDescription('Indicates whether a Channel Mismatch failure currently exists on the port.')
extremeApsProtocolErrorFarEndProtectFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorFarEndProtectFailure.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorFarEndProtectFailure.setDescription('Indicates whether a Far-End Protection failure currently exists on the port.')
extremeApsProtocolErrorModeMismatchNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorModeMismatchNumFails.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorModeMismatchNumFails.setDescription('The number of Mode Mismatch failures that have been recorded.')
extremeApsProtocolErrorProtSwitchByteNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorProtSwitchByteNumFails.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorProtSwitchByteNumFails.setDescription('The number of Protection Switching Byte failures that have been recorded.')
extremeApsProtocolErrorChannelMismatchNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorChannelMismatchNumFails.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorChannelMismatchNumFails.setDescription('The number of Channel Mismatch failures that have been recorded.')
extremeApsProtocolErrorFarEndProtectNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 20, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeApsProtocolErrorFarEndProtectNumFails.setStatus('current')
if mibBuilder.loadTexts: extremeApsProtocolErrorFarEndProtectNumFails.setDescription('The number of Far-End Protection failures that have been recorded.')
mibBuilder.exportSymbols("EXTREME-POS-MIB", extremeApsStatus=extremeApsStatus, extremeApsProtectPortTransmitK1=extremeApsProtectPortTransmitK1, extremeApsLineErrorSignalDegradeActive=extremeApsLineErrorSignalDegradeActive, extremeApsErrors=extremeApsErrors, extremeApsGroupConfigTable=extremeApsGroupConfigTable, extremeApsPortConfigEntry=extremeApsPortConfigEntry, extremeApsLineErrorSignalFailActive=extremeApsLineErrorSignalFailActive, extremeApsLineErrorBERSignalDegrades=extremeApsLineErrorBERSignalDegrades, extremeApsProtocolErrorTable=extremeApsProtocolErrorTable, extremeApsLineErrorSignalDegrades=extremeApsLineErrorSignalDegrades, extremeApsGroupEntry=extremeApsGroupEntry, extremeApsProtectPortPortNumber=extremeApsProtectPortPortNumber, extremeApsProtectPortSuccessfulSwitches=extremeApsProtectPortSuccessfulSwitches, extremeApsProtocolErrorEntry=extremeApsProtocolErrorEntry, extremeApsProtocolErrorFarEndProtectNumFails=extremeApsProtocolErrorFarEndProtectNumFails, extremeApsGroupConfigTimerInterval=extremeApsGroupConfigTimerInterval, extremeApsProtocolErrorChannelMismatchNumFails=extremeApsProtocolErrorChannelMismatchNumFails, extremeApsProtocolErrorModeMismatchFailure=extremeApsProtocolErrorModeMismatchFailure, extremeApsLineErrorEntry=extremeApsLineErrorEntry, extremeApsPortConfigPortNumber=extremeApsPortConfigPortNumber, extremeApsPortConfigGroupNumber=extremeApsPortConfigGroupNumber, extremeApsProtectPortConfigWorkingIpAddr=extremeApsProtectPortConfigWorkingIpAddr, extremeApsProtectPortTable=extremeApsProtectPortTable, extremeApsProtectPortHelloProtFails=extremeApsProtectPortHelloProtFails, extremeApsPortConfigTable=extremeApsPortConfigTable, extremeApsLineErrorGroupNumber=extremeApsLineErrorGroupNumber, extremeApsProtocolErrorProtSwitchByteDefect=extremeApsProtocolErrorProtSwitchByteDefect, extremeApsProtocolErrorPortNumber=extremeApsProtocolErrorPortNumber, extremeApsProtocolErrorChannelMismatchFailure=extremeApsProtocolErrorChannelMismatchFailure, extremeApsConfig=extremeApsConfig, extremeApsProtectPortConfigGroupNumber=extremeApsProtectPortConfigGroupNumber, extremeApsGroupConfigEntry=extremeApsGroupConfigEntry, extremeApsGroupConfigRevertMinutes=extremeApsGroupConfigRevertMinutes, extremeApsProtectPortReceiveK2=extremeApsProtectPortReceiveK2, extremeApsProtocolErrorChannelMismatchDefect=extremeApsProtocolErrorChannelMismatchDefect, extremeApsLineErrorBERSignalDegradeActive=extremeApsLineErrorBERSignalDegradeActive, extremeApsGroupPeerProtoStatus=extremeApsGroupPeerProtoStatus, extremeApsConfigEnabled=extremeApsConfigEnabled, extremeApsProtectPortTransmitK2=extremeApsProtectPortTransmitK2, extremeApsGroupConfigGroupNumber=extremeApsGroupConfigGroupNumber, extremeApsGroupTable=extremeApsGroupTable, extremeApsProtectPortSwitchInitByCmd=extremeApsProtectPortSwitchInitByCmd, extremeApsLineErrorBERSignalFailActive=extremeApsLineErrorBERSignalFailActive, extremePOSMib=extremePOSMib, extremeApsLineErrorBERSignalFails=extremeApsLineErrorBERSignalFails, extremeApsProtocolErrorGroupNumber=extremeApsProtocolErrorGroupNumber, extremeApsGroupConfigRevertMode=extremeApsGroupConfigRevertMode, extremeApsProtectPortReceiveK1=extremeApsProtectPortReceiveK1, extremeApsProtectPortSwitchInitByADM=extremeApsProtectPortSwitchInitByADM, PYSNMP_MODULE_ID=extremePOSMib, extremeApsLineErrorSignalFails=extremeApsLineErrorSignalFails, extremeApsGroupConfigAuthenticate=extremeApsGroupConfigAuthenticate, extremeApsProtectPortSwitchInitByProtect=extremeApsProtectPortSwitchInitByProtect, extremeApsGroupGroupNumber=extremeApsGroupGroupNumber, extremeApsGroupActivePort=extremeApsGroupActivePort, extremeApsProtectPortSwitchInitByWorking=extremeApsProtectPortSwitchInitByWorking, extremeApsProtectPortGroupNumber=extremeApsProtectPortGroupNumber, extremeApsProtocolErrorProtSwitchByteFailure=extremeApsProtocolErrorProtSwitchByteFailure, extremeApsProtocolErrorModeMismatchNumFails=extremeApsProtocolErrorModeMismatchNumFails, extremeApsLineErrorTable=extremeApsLineErrorTable, extremeApsProtocolErrorFarEndProtectFailure=extremeApsProtocolErrorFarEndProtectFailure, extremeApsPortConfigPortType=extremeApsPortConfigPortType, extremeApsGroupConfigDirection=extremeApsGroupConfigDirection, extremeApsProtectPortConfigTable=extremeApsProtectPortConfigTable, extremeApsProtectPortConfigPortNumber=extremeApsProtectPortConfigPortNumber, extremeApsLineErrorPortNumber=extremeApsLineErrorPortNumber, extremeApsGroupEffectiveDirection=extremeApsGroupEffectiveDirection, extremeApsGroupConfigAuthString=extremeApsGroupConfigAuthString, extremeApsProtocolErrorModeMismatchDefect=extremeApsProtocolErrorModeMismatchDefect, extremeApsProtectPortConfigEntry=extremeApsProtectPortConfigEntry, extremeApsProtocolErrorProtSwitchByteNumFails=extremeApsProtocolErrorProtSwitchByteNumFails, extremeApsGroupConfigTimerMisses=extremeApsGroupConfigTimerMisses, extremeAps=extremeAps, extremeApsProtectPortEntry=extremeApsProtectPortEntry, extremeApsProtocolErrorFarEndProtectDefect=extremeApsProtocolErrorFarEndProtectDefect)
