#
# PySNMP MIB module WWP-LEOS-BROADCAST-CONTAINMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-BROADCAST-CONTAINMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, NotificationType, TimeTicks, ModuleIdentity, Integer32, Unsigned32, Bits, Gauge32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "TimeTicks", "ModuleIdentity", "Integer32", "Unsigned32", "Bits", "Gauge32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Counter32")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosBroadcastContainmentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8))
wwpLeosBroadcastContainmentMIB.setRevisions(('2012-03-08 00:00', '2012-03-02 00:00', '2009-02-05 00:00', '2008-06-25 00:00', '2008-06-18 21:00', '2007-06-02 21:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosBroadcastContainmentMIB.setRevisionsDescriptions(('Added wwpLeosBroadcastContainmentIgnoreRapsMessages', 'Added wwpLeosBroadcastContainmentResourceMode and wwpLeosBroadcastContainmentBytesDroppedStats', 'Added wwpLeosBroadcastContainmentFilterName to the notification for wwpLeosBcastThresholdExceed and wwpLeosBcastThresholdNormal.', 'Defect 25528 - Increase wwpLeosBroadcastContainmentFilterName octet length to 16 characters (15 plus a null byte).', 'Add new objects to support global enable/disable and time setting', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentMIB.setLastUpdated('201203080000Z')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentMIB.setDescription('This MIB module is for the Broadcast containment for WWP Products')
wwpLeosBroadcastContainmentMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1))
wwpLeosBroadcastContainmentMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 2))
wwpLeosBroadcastContainmentMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 2, 1))
wwpLeosBroadcastContainmentMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 3))
wwpLeosBroadcastContainmentMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 3, 1))
wwpLeosBroadcastContainmentMIGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 3, 2))
class WwpLeosBroadcastContainmentCapabilitiesMap(TextualConvention, Bits):
    description = 'This bit mask shows the capability of the device. It shows that which index is valid wwpLeosBroadcastContainmentVlanId or wwpLeosBroadcastContainmentPortId'
    status = 'current'
    namedValues = NamedValues(("wwpLeosBroadcastContainmentVlanId", 0), ("wwpLeosBroadcastContainmentPortId", 1))

wwpLeosBroadcastContainmentCapability = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 1), WwpLeosBroadcastContainmentCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentCapability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentCapability.setDescription('It shows which of the following (wwpLeosBroadcastContainmentPortId or wwpLeosBroadcastContainmentVlanId or both) can be used as an index in wwpLeosBroadcastContainmentFilterMemTable. If bit 0 of the bit mask (starting from right to left) is set to 1 then wwpLeosBroadcastContainmentVlanId can be used as index. If bit 1 of the bit mask is set to 1 then wwpLeosBroadcastContainmentPortId can be used as index. If both bits are set to 1 then both can be used as index.')
wwpLeosBroadcastContainmentPktDroppedStats = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentPktDroppedStats.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentPktDroppedStats.setDescription('Displays the global dropped packets statistics for all VLANs and ports.')
wwpLeosBroadcastContainmentGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentGlobalStatus.setDescription("Setting this object to 'enable' will globally enable broadcast-containment on the device. The default is enabled.")
wwpLeosBroadcastContainmentGlobalTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2560))).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentGlobalTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentGlobalTime.setDescription('The global broadcast containment sample or integration time. The default is 100ms.')
wwpLeosBroadcastContainmentIgnoreRapsMessages = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentIgnoreRapsMessages.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentIgnoreRapsMessages.setDescription('When this object is enabled, all configured broadcast containment filters will ignore R-APS messages when filtering PDUs. The default setting is disabled.')
wwpLeosBroadcastContainmentResourceMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentResourceMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentResourceMode.setDescription('Selects whether broadcast containment uses resource manager resources. The selection of containment classification is more limited when resource mode is disabled.')
wwpLeosBroadcastContainmentBytesDroppedStats = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentBytesDroppedStats.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentBytesDroppedStats.setDescription('Displays the global dropped bytes statistics for all VLANs and ports. Not supported by SAOS 4.x or earlier releases.')
wwpLeosBroadcastContainmentFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4), )
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterTable.setDescription('Table of broadcast containment configuration.')
wwpLeosBroadcastContainmentFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-BROADCAST-CONTAINMENT-MIB", "wwpLeosBroadcastContainmentIndex"))
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterEntry.setDescription('Broadcast containment entry in the Broadcast Containment Table.')
wwpLeosBroadcastContainmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentIndex.setDescription('Unique index into the table.')
wwpLeosBroadcastContainmentFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterName.setDescription('Specifies the name of the filter. If wwpLeosBroadcastContainmentFilterName is not set during filter creation then filter will be created with no name. Filter name can be set later by setting this object.')
wwpLeosBroadcastContainmentPktLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 104856000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentPktLimit.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentPktLimit.setDescription('The maximum number of broadcast packets which can be received by this device. Setting this object to 0 will make the broadcast pkt limit as unlimited.')
wwpLeosBroadcastContainmentPktDropState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentPktDropState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentPktDropState.setDescription('This object if True, specifies that packets were dropped for the given filter since it was last read. If this object reads false then no packet was dropped since it was last read.')
wwpLeosBroadcastContainmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentStatus.setDescription("To create a row in this table, a manager must set this object to 'createAndGo'. To delete the entry set this to destroy. To update this entry this object may not be set.")
wwpLeosBroadcastContainmentKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentKbps.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentKbps.setDescription('The maximum number of broadcast packets which can be received by this device.')
wwpLeosBroadcastContainmentClassifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 4, 1, 7), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentClassifier.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentClassifier.setDescription('The classifier type for the filter. The value of this object could be any of the below or addition of any of the below: ClassifierType_Unknown(0) ClassifierType_Broadcast(1) ClassifierType_UnknownL2Multicast(2) ClassifierType_UnknownUnicast(4) ClassifierType_UnknownIpMulticast(8) ClassifierType_AllMultcast(16) For example, if the user wants to set the classifier type for the filter as broadcast+unknown_unicast, the value of the object should be set as 5 (1 + 4). Similary if the preferred classifier type is All_flooding, the value would be 15 (1+2+4+8). By default, the classifier type is 3 (broadcast + unknownL2Multicast). When resource mode is disabled, the only supported multicast option is ClassifierType_AllMulticast. The L2 and IP multicast options are controlled individually if resource mode is enabled.')
wwpLeosBroadcastContainmentFilterMemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 5), )
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterMemTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterMemTable.setDescription('Table of broadcast containment membership.')
wwpLeosBroadcastContainmentFilterMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-BROADCAST-CONTAINMENT-MIB", "wwpLeosBroadcastContainmentIndex"), (0, "WWP-LEOS-BROADCAST-CONTAINMENT-MIB", "wwpLeosBroadcastContainmentVlanId"), (0, "WWP-LEOS-BROADCAST-CONTAINMENT-MIB", "wwpLeosBroadcastContainmentPortId"))
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterMemEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterMemEntry.setDescription('Broadcast containment entry in the Broadcast Containment Table.')
wwpLeosBroadcastContainmentVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentVlanId.setDescription('Unique index into the table. Depending on the capability of device set this index to valid VLAN id or 0 for all vlans.')
wwpLeosBroadcastContainmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentPortId.setDescription('Unique index into the table. Depending on the capability of device set this index to valid port id or 0 for all ports.')
wwpLeosBroadcastContainmentFilterMemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterMemStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBroadcastContainmentFilterMemStatus.setDescription("To create a row in this table, a manager must set this object to 'createAndGo'. To delete the entry set this to destroy. To update this entry this object may not be set.")
wwpLeosBcastThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 2, 1, 1)).setObjects(("WWP-LEOS-BROADCAST-CONTAINMENT-MIB", "wwpLeosBroadcastContainmentIndex"), ("WWP-LEOS-BROADCAST-CONTAINMENT-MIB", "wwpLeosBroadcastContainmentFilterName"))
if mibBuilder.loadTexts: wwpLeosBcastThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBcastThresholdExceed.setDescription('A wwpLeosBcastThresholdExceed notification is sent when for given filter index, the number of broadcast packet received becomes greater than or equal to the configured packet limit, and the value of broadcast packet received at the last sampling interval was less than the configured packet limit.')
wwpLeosBcastThresholdNormal = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 8, 2, 1, 2)).setObjects(("WWP-LEOS-BROADCAST-CONTAINMENT-MIB", "wwpLeosBroadcastContainmentIndex"), ("WWP-LEOS-BROADCAST-CONTAINMENT-MIB", "wwpLeosBroadcastContainmentFilterName"))
if mibBuilder.loadTexts: wwpLeosBcastThresholdNormal.setStatus('current')
if mibBuilder.loadTexts: wwpLeosBcastThresholdNormal.setDescription('A wwpLeosBcastThresholdNormal notification is sent when for given filter index, the total number of broadcast packet received becomes less than the configured packet limit, and the value of broadcast packet received at the last sampling interval was greater than or equal to the configured packet limit.')
mibBuilder.exportSymbols("WWP-LEOS-BROADCAST-CONTAINMENT-MIB", wwpLeosBroadcastContainmentBytesDroppedStats=wwpLeosBroadcastContainmentBytesDroppedStats, wwpLeosBcastThresholdExceed=wwpLeosBcastThresholdExceed, wwpLeosBroadcastContainmentFilterEntry=wwpLeosBroadcastContainmentFilterEntry, wwpLeosBroadcastContainmentPktDroppedStats=wwpLeosBroadcastContainmentPktDroppedStats, wwpLeosBroadcastContainmentStatus=wwpLeosBroadcastContainmentStatus, wwpLeosBroadcastContainmentFilterMemStatus=wwpLeosBroadcastContainmentFilterMemStatus, wwpLeosBroadcastContainmentFilterTable=wwpLeosBroadcastContainmentFilterTable, WwpLeosBroadcastContainmentCapabilitiesMap=WwpLeosBroadcastContainmentCapabilitiesMap, wwpLeosBroadcastContainmentGlobalTime=wwpLeosBroadcastContainmentGlobalTime, wwpLeosBroadcastContainmentGlobalStatus=wwpLeosBroadcastContainmentGlobalStatus, wwpLeosBroadcastContainmentIndex=wwpLeosBroadcastContainmentIndex, wwpLeosBroadcastContainmentPortId=wwpLeosBroadcastContainmentPortId, wwpLeosBroadcastContainmentKbps=wwpLeosBroadcastContainmentKbps, wwpLeosBroadcastContainmentResourceMode=wwpLeosBroadcastContainmentResourceMode, wwpLeosBroadcastContainmentMIGroups=wwpLeosBroadcastContainmentMIGroups, wwpLeosBroadcastContainmentFilterMemTable=wwpLeosBroadcastContainmentFilterMemTable, wwpLeosBroadcastContainmentClassifier=wwpLeosBroadcastContainmentClassifier, wwpLeosBroadcastContainmentMIBObjects=wwpLeosBroadcastContainmentMIBObjects, wwpLeosBcastThresholdNormal=wwpLeosBcastThresholdNormal, wwpLeosBroadcastContainmentFilterMemEntry=wwpLeosBroadcastContainmentFilterMemEntry, wwpLeosBroadcastContainmentMIBNotificationPrefix=wwpLeosBroadcastContainmentMIBNotificationPrefix, wwpLeosBroadcastContainmentPktDropState=wwpLeosBroadcastContainmentPktDropState, wwpLeosBroadcastContainmentMIBConformance=wwpLeosBroadcastContainmentMIBConformance, wwpLeosBroadcastContainmentMIBCompliances=wwpLeosBroadcastContainmentMIBCompliances, wwpLeosBroadcastContainmentPktLimit=wwpLeosBroadcastContainmentPktLimit, wwpLeosBroadcastContainmentIgnoreRapsMessages=wwpLeosBroadcastContainmentIgnoreRapsMessages, wwpLeosBroadcastContainmentMIB=wwpLeosBroadcastContainmentMIB, wwpLeosBroadcastContainmentVlanId=wwpLeosBroadcastContainmentVlanId, wwpLeosBroadcastContainmentCapability=wwpLeosBroadcastContainmentCapability, wwpLeosBroadcastContainmentMIBNotifications=wwpLeosBroadcastContainmentMIBNotifications, PYSNMP_MODULE_ID=wwpLeosBroadcastContainmentMIB, wwpLeosBroadcastContainmentFilterName=wwpLeosBroadcastContainmentFilterName)
