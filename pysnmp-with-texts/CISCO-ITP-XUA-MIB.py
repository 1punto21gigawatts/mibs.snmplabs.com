#
# PySNMP MIB module CISCO-ITP-XUA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-XUA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
cItpSpCLLICode, = mibBuilder.importSymbols("CISCO-ITP-SP-MIB", "cItpSpCLLICode")
CItpTcServiceIndicator, CItpTcSubSystemNumber, CItpTcXuaName, CItpTcNetworkName, CItpTcPointCode, CItpTcQos = mibBuilder.importSymbols("CISCO-ITP-TC-MIB", "CItpTcServiceIndicator", "CItpTcSubSystemNumber", "CItpTcXuaName", "CItpTcNetworkName", "CItpTcPointCode", "CItpTcQos")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, ObjectIdentity, Integer32, IpAddress, Gauge32, Unsigned32, MibIdentifier, iso, ModuleIdentity, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "ObjectIdentity", "Integer32", "IpAddress", "Gauge32", "Unsigned32", "MibIdentifier", "iso", "ModuleIdentity", "NotificationType", "TimeTicks")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
ciscoItpXuaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 253))
ciscoItpXuaMIB.setRevisions(('2008-06-09 00:00', '2008-05-08 00:00', '2008-01-04 00:00', '2007-09-06 00:00', '2004-06-14 00:00', '2003-08-27 00:00', '2003-02-19 00:00', '2002-04-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoItpXuaMIB.setRevisionsDescriptions(('Added the following objects in cItpXuaAspStatsTable: cItpXuaAspBytesFromAsp, cItpXuaAspBytesToAsp, cItpXuaAspBytesFromMtp3, cItpXuaAspBytesToMtp3 Added the following objects in cItpXuaAsTable: cItpXuaAsPktsToMtp3, cItpXuaAsPktsFromASPsOfAs, cItpXuaAsBytesFromMtp3, cItpXuaAsBytesToASPsOfAs, cItpXuaAsBytesToMtp3, cItpXuaAsBytesFromASPsOfAs.', 'Modified units clause and associated descriptions to indicate MSUs and messages instead of packets for all applicable objects.', 'Added cItpXuaInstOffProcNumber to cItpXuaInstTable to support for SAMI line cards.', 'Added the following textual conventions: CItpXuaAssocState CItpXuaRemoteIpDestState Added the following objects in table cItpXuaSgmTable: cItpXuaSgmAssocState cItpXuaSgmAssocFailedReason Added the following object in table cItpXuaSgmRemoteIpTable: cItpXuaSgmRemoteIpDestState Added the following objects in table cItpXuaAspTable: cItpXuaAspAssocState cItpXuaAspAssocFailedReason Added the following object in table cItpXuaAspRemoteIpTable: cItpXuaAspRemoteIpDestState Added the following notifications: ciscoItpXuaSgmDestAddrStateChange, ciscoItpXuaSgmAssocStateChange, ciscoItpXuaAspDestAddrStateChange, ciscoItpXuaAspAssocStateChange.', 'Added the following textual convention: CItpXuaRouteState Added the following table: cItpXuaASRouteTable cItpXuaASRouteAsTable Added the following objects: cItpXuaAspAsWeight, cItpXuaAsNetworkAppear, cItpXuaAsCongLevel.', 'Deprecated the following object(s): cItpXuaAspAssocId Added the following objects: cItpXuaInstOffload cItpXuaInstOffloadSlot cItpXuaAsNetworkName cItpXuaAspAssocIdU32 Modified the description of cItpXuaAsRkParameters to include TUP Service Indicator.', "Added the following sub-table: cItpXuaSgmRemoteIpTable Added the following objects: cItpXuaSgmCongLevel cItpXuaAspCongLevel Added the following notifications: ciscoItpXuaAspCongChange ciscoItpXuaSgmCongChange. Modified the following Textual Conventions: CItpXuaAsState CItpXuaAspState. Added 'undefined(5)' to CItpXuaTrafMode textual convention.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoItpXuaMIB.setLastUpdated('200806090000Z')
if mibBuilder.loadTexts: ciscoItpXuaMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoItpXuaMIB.setContactInfo('Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7@cisco.com')
if mibBuilder.loadTexts: ciscoItpXuaMIB.setDescription("The MIB for MTP3 User Adaptation (M3UA) and SCCP User Adaptation (SUA) for Cisco's IP Transfer Point (ITP) implementation. The Cisco IP Transfer Point (ITP) is a hardware and software solution that transports SS7 traffic using IP. Each ITP node provides function similar to SS7 signaling point. The relevant ITU documents describing this technology is the ITU Q series, including ITU Q.700: Introduction to CCITT Signaling System No. 7 and ITU Q.701 Functional description of the message transfer part (MTP) of Signaling System No. 7. The relevent information about M3UA and SUA is available at the IETF: http://www.ietf.org/html.charters/sigtran-charter.html This MIB consists of the following tables: M3UA/SUA (XUA) Instance Table M3UA/SUA (XUA) Instance Local IP Table Signaling Gateway Mate Table Signaling Gateway Mate Remote IP Table Application Server Process (ASP) Table Application Server Process (ASP) Remote IP Table Application Server Process (ASP) Statistics Table Application Server (AS) Table ASP-AS Table ASRoute Table ASRouteAs Table Abbreviations: AS - Application Server ASP - Application Server Process ASPAC - ASP ACtive message ASPDN - ASP Down message ASPIA - ASP InActive message ASPUP - ASP UP message CIC - Circuit Identifier Code for ISUP CLLI - Common Language Location Codes DPC - Destination Point Code DAUD - Destination AUDit DAVA - Destination AVAilable DUNA - Destination UNAvailable DUPU - Destination User Part Unavailable ERR - Error message GTT - Global Title Translation HLR - Home Location Registry ISDN - Integrated Services Digital Network ISUP - ISDN User Part M3UA - MTP3 User Adaptation MGC - Media Gateway Controller used in VoIP MSU - Message Signal Unit MTP - Message Transport Protocol MTP2 - Layer 2 of Message Transport Protocol MTP3 - Layer 3 of Message Transport Protocol NMS - Network Management System OPC - Originating Point Code PC - Point Code QOS - Quality Of Service SCCP - Signaling Connection Control Part SCP - Service Control Point (SS7) SCON - Signaling link CONgestion SCON0 - Signaling link CONgestion level 0 (no congestion) SCON1 - Signaling link CONgestion level 1 SCON2 - Signaling link CONgestion level 2 SCON3 - Signaling link CONgestion level 3 SG - Signaling Gateway SGM - Signaling Gateway Mate SGMP - Signaling Gateway Mated Protocol SCTP - Stream Transmission Protocol(RFC 2960) SI - Signaling Indicator SIO - Service Indicator Octet (SS7) SNMM - Signaling Network Management Message SSN - Subsystem Number for SCCP SUA - SCCP User Adaptation TUP - Telephone User Part TT - Title Translation VIP - Versatile Interface Processor XUA - M3UA, SUA or SGMP Brief description: The Signaling Gateway (SG) on the ITP receives the SS7 Message Signal Units(MSUs), converts them to M3UA/SUA messages and routes them to the ASPs over SCTP/IP association. The routing of the message depends on the routing information present in the message and the routing keys configured as part of the ASes. There can be one or more instances of M3UA/SUA at the SG. These instances are identified by a unique port number. Each of these instances can have one or more IP addresses which form 'local' end of the multi-homing SCTP association. The Application Server Process (ASP) is a remote entity which has its own port number and one or more IP addresses to form the 'remote' end of the multi-homing SCTP association. Examples of ASPs are MGCs, IP SCPs or IP HLRs. Application Server (AS), as described in section '1.2 Terminology' of M3UA/SUA draft, is a logical entity serving a specific Routing Key. An example of an AS is a virtual switch element handling all call processing for a unique range of PSTN trunks, identified by an SS7 SIO/DPC/OPC/CIC_range. Another example is a virtual database element, handling all HLR transactions for a particular SS7 DPC/OPC/SCCP_SSN combination. The AS contains a set of one or more unique ASPs of which one or more is normally actively processing traffic. Note that there is a 1:1 relationship between an AS and a Routing Key. An ASP can serve one or more ASes and an AS can have one or more ASPs. An ASP while serving an AS can be active, inactive or down. When one or more ASPs for an AS is active, the AS is active. When all ASPs for an AS are inactive, the AS is inactive. The state of the AS is maintained in one object, whereas, the state of an ASP is maintained for each AS that it serves in ASP-AS table. The SGs are always deployed in mated pairs to provide high availability and redundancy. The SG mates exchange the state of ASes. When an AS is down on one SG, it can route the SS7 message to its mate which can properly route that SS7 message.")
ciscoItpXuaMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 0))
ciscoItpXuaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1))
ciscoItpXuaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 2))
cItpXuaScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 1))
cItpXuaInst = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2))
cItpXuaInstLocalIp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 3))
cItpXuaSgm = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4))
cItpXuaAsp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5))
cItpXuaAspRemoteIp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 6))
cItpXuaAspStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7))
cItpXuaAs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8))
cItpXuaAspAs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 9))
cItpXuaMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 10))
cItpXuaSgmRemoteIp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 11))
cItpXuaASRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12))
cItpXuaASRouteAs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13))
class CItpXuaProtocol(TextualConvention, Integer32):
    description = "The possible protocol types supported by AS or ASP 'm3ua' : The protocol is M3UA. 'sua' : The protocol is SUA. 'sgmp' : The protocol is Signaling Gateway Mated Protocol (SGMP)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("m3ua", 1), ("sua", 2), ("sgmp", 3))

class CItpXuaTrafMode(TextualConvention, Integer32):
    reference = '3.7.1 ASP Active in RFC 3332 and 3.9.11 Traffic Mode Type in SUA draft.'
    description = "The possible traffic modes supported by AS 'overRide' : In override mode, one ASP takes over all traffic for the AS, possibly overriding any currently active ASP in the AS. 'broadcast' : In broadcast mode, every active ASP receives the same message. 'loadBind' : In loadshare bindings mode, an ASP shares in the traffic distribution with any other currently active ASPs based on ASP bindings. 'loadRndRobin' : In loadshare round-robin mode, an ASP shares in the traffic distribution with any other currently active ASPs using a roundrobin algorithm. 'undefined' : The traffic mode is not defined. The first ASP that becomes active will define the traffic mode."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("overRide", 1), ("loadBind", 2), ("loadRndRobin", 3), ("broadcast", 4), ("undefined", 5))

class CItpXuaAsState(TextualConvention, Integer32):
    reference = '4.3.2 AS States in M3UA/SUA draft.'
    description = "The possible AS states 'down' : The AS is unavailable. This state implies that all ASPs that are serving this AS are in the 'down' state. Initially the AS will be in this state. 'inactive' : The AS is available but no application traffic is active (i.e., one or more ASPs are in the inactive state, but none in the active state). 'active' : The AS is available and application traffic is active. This state implies that at least one ASP is in the active state. 'pending' : An active ASP has transitioned to inactive or down and it was the last remaining active ASP serving the AS. Depending on the recovery timer and an ASP becoming active this AS moves to active, inactive, or down state. 'undefined' : The AS state is not known or undefined."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("down", 1), ("inactive", 2), ("active", 3), ("pending", 4), ("undefined", 5))

class CItpXuaAspState(TextualConvention, Integer32):
    reference = '4.3.1 ASP States in M3UA/SUA draft.'
    description = "The possible ASP states 'down' : The remote peer at the ASP is unavailable and/or the related SCTP association is down. Initially all ASPs will be in this state. 'inactive' : The remote peer at the ASP is available (and the related SCTP association is up) but application traffic is stopped. In this state the ASP should not be sent any DATA or SNMM messages for the AS for which the ASP is inactive. 'active' : The remote peer at the ASP is available and application traffic is active. 'undefined' : The state of the remote peer at the ASP is not known or undefined."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("down", 1), ("inactive", 2), ("active", 3), ("undefined", 4))

class CItpXuaRouteState(TextualConvention, Integer32):
    description = "The possible ASRoute states 'unknown' : The state of the ASRoute is unknown. 'avail' : The ASRoute is available for routing data. 'restr' : The ASRoute is restricted due to congestion. 'unavail' : The ASRoute is not available for data. 'deleted' : The ASRoute is deleted."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("avail", 2), ("restr", 3), ("unavail", 4), ("deleted", 5))

class CItpXuaAssocState(TextualConvention, Integer32):
    description = "The possible XUA ASP SCTP Association States 'undefined' : The association state is not known or undefined. 'closed' : The association is closed. 'established' : The association is established with remote end 'failed' : The association has failed. 'termPend' : The association has terminated and waiting pending ack."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 1), ("closed", 2), ("established", 3), ("failed", 4), ("termPend", 5))

class CItpXuaRemoteIpDestState(TextualConvention, Integer32):
    description = "The possible remote IP destination states 'undefined' : The state of the remote ip interface is not known or undefined. 'inactive' : The remote ip address of the ASP is not reachable. 'active' : The remote ip address of the ASP is available."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("undefined", 1), ("inactive", 2), ("active", 3))

cItpXuaInstConfigLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaInstConfigLastChanged.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstConfigLastChanged.setDescription('The value of system timestamp at the time of the last creation or deletion of an entry in the cItpXuaInstTable. This value can be used to prevent unnecessary walks of the XUA Instance Table.')
cItpXuaSgmConfigLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaSgmConfigLastChanged.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmConfigLastChanged.setDescription('The value of system timestamp at the time of the last creation or deletion of an entry in the cItpXuaSgmTable. This value can be used to prevent unnecessary walks of the XUA SG Mate Table.')
cItpXuaAspConfigLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspConfigLastChanged.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspConfigLastChanged.setDescription('The value of system timestamp at the time of the last creation or deletion of an entry in the cItpXuaAspTable. This value can be used to prevent unnecessary walks of the XUA ASP Table.')
cItpXuaAsConfigLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsConfigLastChanged.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsConfigLastChanged.setDescription('The value of system timestamp at the time of the last creation or deletion of an entry in the cItpXuaAsTable. This value can be used to prevent unnecessary walks of the XUA AS Table.')
cItpXuaStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpXuaStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cItpXuaStateChangeNotifEnabled.setDescription("The State notification truth value. 'true' Indicates that the notification generation is enabled for ASP state changes, AS state changes, SG Mate state changes, ASP Congestion Level change and SG Mate Congestion Level change. 'false' Indicates that the notification generation is disabled for ASP state change, AS state, SG Mate state change, ASP Congestion Level change and SG Mate Congestion Level change.")
cItpXuaInstTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1), )
if mibBuilder.loadTexts: cItpXuaInstTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstTable.setDescription('A table of M3UA/SUA/SGMP instances. There can be multiple M3UA or SUA instances on a given Signaling Gateway. Each instance is uniquely identified by the port number. The local port number of the ASP (cItpXuaAspLocalPort) matches with the port number of the instance (cItpXuaInstPort). Also for a given instance, there can be multiple local IP addresses which are used for the multi-homing feature of the SCTP associations. There can only be one instance of SGMP. M3UA or SUA instances can be offloaded to a VIP on a 7500 platform. When an instance is offloaded, all ASPs that belong to that instance are also offloaded. Entries are added to this table via cItpXuaInstRowStatus in accordance with the RowStatus convention.')
cItpXuaInstTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaInstPort"))
if mibBuilder.loadTexts: cItpXuaInstTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstTableEntry.setDescription('A list of XUA instance attributes.')
cItpXuaInstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1, 1), InetPortNumber())
if mibBuilder.loadTexts: cItpXuaInstPort.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstPort.setDescription('The local SCTP port for the XUA instance. The value zero is not allowed.')
cItpXuaInstProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1, 2), CItpXuaProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaInstProtocol.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstProtocol.setDescription('The protocol of the XUA instance.')
cItpXuaInstShut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaInstShut.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstShut.setDescription("The XUA Instance Shut truth value. 'true' Indicates that the XUA Instance has been shutdown by an administrative action. 'false' Indicates that the XUA Instance is not shutdown.")
cItpXuaInstActiveASPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaInstActiveASPs.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstActiveASPs.setDescription('The number of ASPs connected to this instance.')
cItpXuaInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaInstTable following the RowStatus textual convention.')
cItpXuaInstOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaInstOffload.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstOffload.setDescription("The XUA Instance Offload truth value. 'true' Indicates that the XUA Instance has been offloaded to a VIP in the slot specified by cItpXuaInstOffloadSlot object. 'false' Indicates that the XUA Instance is not offloaded.")
cItpXuaInstOffloadSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaInstOffloadSlot.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstOffloadSlot.setDescription('When the XUA instance is offloaded to a VIP (i.e. cItpXuaInstOffload is true), this object specifies the slot number for the VIP. Otherwise, this object is not defined.')
cItpXuaInstOffProcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaInstOffProcNumber.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstOffProcNumber.setDescription('When the XUA instance is offloaded to a SAMI (i.e. cItpXuaInstOffload is true and cItpXuaInstOffloadSlot points to SAMI line card), this object specifies the processor number on SAMI where XUA instance is offloaded. When the XUA instance is offloaded to a Flexwan, this object specifies the bay number where XUA instance is offloaded. Otherwise, when cItpXuaInstOffload is false, this object is not defined.')
cItpXuaInstLocalIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 3, 1), )
if mibBuilder.loadTexts: cItpXuaInstLocalIpTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstLocalIpTable.setDescription('A table of Local IP addresses for the XUA instances. For a given instance, there can be multiple local IP addresses which are used for the multi-homing feature of the SCTP associations. This table lists out the configured local IP addresses. Entries are added to this table via cItpXuaInstLocalIpRowStatus in accordance with the RowStatus convention.')
cItpXuaInstLocalIpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaInstPort"), (0, "CISCO-ITP-XUA-MIB", "cItpXuaInstAddrNum"))
if mibBuilder.loadTexts: cItpXuaInstLocalIpTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstLocalIpTableEntry.setDescription('A list of attributes of the Local IP addresses for the XUA instances.')
cItpXuaInstAddrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cItpXuaInstAddrNum.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstAddrNum.setDescription('This object specifies the index for one of local IP addresses for the XUA instance which is identified by cItpXuaInstPort.')
cItpXuaInstLocalIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 3, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaInstLocalIpType.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstLocalIpType.setDescription('This object contains the type of the local IP address used to create the association for ASPs connecting to the XUA instance specified by the cItpXuaInstPort.')
cItpXuaInstLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 3, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaInstLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstLocalIpAddr.setDescription('This object contains the local IP address used to create the association for ASPs connecting to the XUA instance specified by the cItpXuaInstPort.')
cItpXuaInstLocalIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaInstLocalIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaInstLocalIpRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaInstLocalIpTable following the RowStatus textual convention.')
cItpXuaSgmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1), )
if mibBuilder.loadTexts: cItpXuaSgmTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmTable.setDescription('A table of SG Mate attributes. Entries are added to this table via cItpXuaSgmRowStatus in accordance with the RowStatus convention.')
cItpXuaSgmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaSgmName"))
if mibBuilder.loadTexts: cItpXuaSgmTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmTableEntry.setDescription('A list of SG Mate attributes.')
cItpXuaSgmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 1), CItpTcXuaName())
if mibBuilder.loadTexts: cItpXuaSgmName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmName.setDescription('The name of the SG Mate.')
cItpXuaSgmAssocId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaSgmAssocId.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmAssocId.setDescription('This is the association identifier defined in the Stream Control Transmission Protocol(SCTP) MIB. A value greater than zero indicates a valid association and zero indicates no association.')
cItpXuaSgmLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 3), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmLocalPort.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmLocalPort.setDescription('This object contains the local SCTP port number used to create the association supporting this link. This local port determines the XUA instance that this SG Mate is connected with. The value zero is not allowed.')
cItpXuaSgmRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmRemotePort.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmRemotePort.setDescription('This object contains the remote SCTP port number used to create the association supporting this link. The value zero is not allowed.')
cItpXuaSgmShut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmShut.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmShut.setDescription("The SG Mate shut truth value. 'true' Indicates that the SG Mate has been shutdown by an administrative action. 'false' Indicates that the SG Mate is not shutdown.")
cItpXuaSgmActiveTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaSgmActiveTS.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmActiveTS.setDescription('The value of system timestamp at the time when this SG Mate became active. A value of zero (0) indicates that the SG Mate is not active.')
cItpXuaSgmQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 8), CItpTcQos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmQosClass.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmQosClass.setDescription('This object specifies the QOS class for the SG Mate. The value of 255 is not applicable. A value of zero (0) indicates that QOS class is not defined.')
cItpXuaSgmPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmPassive.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmPassive.setDescription("The SG Mate Passive truth value. 'true' Indicates that the SG Mate is passive, i.e. it waits for the SG Mate to initiate the SCTP association. 'false' Indicates that the SG Mate is not passive, i.e., it initiates the SCTP association with its SG Mate.")
cItpXuaSgmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 11), CItpXuaAspState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaSgmState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmState.setDescription('The state of the SG Mate. Only active and inactive states are applicable.')
cItpXuaSgmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaSgmTable following the RowStatus textual convention.')
cItpXuaSgmCongLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaSgmCongLevel.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmCongLevel.setDescription('The current congestion level for the SG Mate. A zero value indicates that the SG Mate is not congested. The higher numbers indicate the higher levels of congestion. The congestion level is determined from the SCTP congestion indication and the SCON level received from the SG Mate.')
cItpXuaSgmAssocState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 14), CItpXuaAssocState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaSgmAssocState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmAssocState.setDescription('The state of the SG Mate SCTP Association.')
cItpXuaSgmAssocFailedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 4, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaSgmAssocFailedReason.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmAssocFailedReason.setDescription('The SG Mate SCTP Association failure reason.')
cItpXuaSgmRemoteIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 11, 1), )
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpTable.setDescription('A table of Remote IP addresses for the Signaling Gateway Mate (SGM). For a given SGM, there can be multiple remote IP addresses which are used for the multi-homing feature of the SCTP associations. Entries are added to this table via cItpXuaSgmRemoteIpRowStatus in accordance with the RowStatus convention.')
cItpXuaSgmRemoteIpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 11, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaSgmName"), (0, "CISCO-ITP-XUA-MIB", "cItpXuaSgmAddrNum"))
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpTableEntry.setDescription('A list of Remote IP addresses for the Signaling Gateway Mate.')
cItpXuaSgmAddrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 11, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cItpXuaSgmAddrNum.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmAddrNum.setDescription("This object specifies the index for the SGM's remote IP address. The SGM Name in cItpXuaSgmName specifies the SGM.")
cItpXuaSgmRemoteIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 11, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpType.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpType.setDescription('This object contains the type of the remote IP address used to create the association supporting this SGM.')
cItpXuaSgmRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 11, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpAddr.setDescription('This object contains the remote IP address used to create the association supporting this SGM.')
cItpXuaSgmRemoteIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 11, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaSgmRemoteIpTable following the RowStatus textual convention.')
cItpXuaSgmRemoteIpDestState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 11, 1, 1, 5), CItpXuaRemoteIpDestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpDestState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmRemoteIpDestState.setDescription('This object contains the remote IP interface state that is used to create the association supporting this Signalling Gateway Mate.')
cItpXuaAspTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1), )
if mibBuilder.loadTexts: cItpXuaAspTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspTable.setDescription('A table of Application Server Processes (ASP). Entries are added to this table via cItpXuaAspRowStatus in accordance with the RowStatus convention.')
cItpXuaAspTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaAspName"))
if mibBuilder.loadTexts: cItpXuaAspTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspTableEntry.setDescription('A list of Application Server Processes.')
cItpXuaAspName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 1), CItpTcXuaName())
if mibBuilder.loadTexts: cItpXuaAspName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspName.setDescription('The name of the Applicaton Server Process.')
cItpXuaAspAssocId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspAssocId.setStatus('deprecated')
if mibBuilder.loadTexts: cItpXuaAspAssocId.setDescription('Association Identifiers can be greater than 65,535. This object has been replaced by cItpXuaAspAssocIdU32.')
cItpXuaAspLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 3), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspLocalPort.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspLocalPort.setDescription('This object contains the local SCTP port number used to create the association supporting this link. This local port determines the XUA instance that this ASP is connected with. The value zero is not allowed.')
cItpXuaAspRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspRemotePort.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspRemotePort.setDescription('This object contains the configured remote SCTP port number used to create the association supporting this link. The value zero means any non-zero remote port is acceptable. The actual remote port can be determined from SCTP association in cItpXuaAspAssocIdU32.')
cItpXuaAspProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 5), CItpXuaProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspProtocol.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspProtocol.setDescription('The protocol used by this ASP. Only M3UA or SUA are allowed.')
cItpXuaAspShut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspShut.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspShut.setDescription("The ASP Shut truth value. 'true' Indicates that the ASP has been shutdown by an administrative action. 'false' Indicates that the ASP is not shutdown.")
cItpXuaAspBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspBlocked.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspBlocked.setDescription("When an ASP is blocked, it cannot receive normal data traffic, but it can send or receive control messages. The ASP Blocked truth value. 'true' Indicates that the ASP has been blocked by an administrative action. 'false' Indicates that the ASP is not blocked.")
cItpXuaAspQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 9), CItpTcQos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspQosClass.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspQosClass.setDescription('This object specifies the QOS class for the ASP. The value of 255 is not applicable. A value of zero (0) indicates that QOS class is not defined. When QOS class is defined, it overrides the QOS class specified by cItpXuaAsQosClass.')
cItpXuaAspIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspIdentifier.setReference('3.5.1 ASP Up in M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspIdentifier.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspIdentifier.setDescription('A unique value received by the Signaling Gateway from the ASP as part of ASP UP message.')
cItpXuaAspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaAspTable following the RowStatus textual convention.')
cItpXuaAspCongLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspCongLevel.setReference('3.4.4 Signalling Congestion (SCON) in M3UA RFC 3332 and 3.10.24 Congestion Level SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspCongLevel.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspCongLevel.setDescription('The current congestion level for this ASP. A zero value indicates that the ASP is not congested. The higher numbers indicate the higher levels of congestion. The congestion level is determined from the SCTP congestion indication and the SCON level received from the ASP.')
cItpXuaAspAssocIdU32 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspAssocIdU32.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAssocIdU32.setDescription('This is the association identifier defined in the Stream Control Transmission Protocol(SCTP) MIB. A value greater than zero indicates a valid association and zero indicates no association.')
cItpXuaAspAssocState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 14), CItpXuaAssocState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspAssocState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAssocState.setDescription('The state of the ASP SCTP Association.')
cItpXuaAspAssocFailedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 5, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspAssocFailedReason.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAssocFailedReason.setDescription('The ASP SCTP Association failure reason.')
cItpXuaAspRemoteIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 6, 1), )
if mibBuilder.loadTexts: cItpXuaAspRemoteIpTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspRemoteIpTable.setDescription('A table of Remote IP addresses for the Application Server Processes (ASP). For a given ASP, there can be multiple remote IP addresses which are used for the multi-homing feature of the SCTP associations. Entries are added to this table via cItpXuaAspRemoteIpRowStatus in accordance with the RowStatus convention.')
cItpXuaAspRemoteIpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaAspName"), (0, "CISCO-ITP-XUA-MIB", "cItpXuaAspAddrNum"))
if mibBuilder.loadTexts: cItpXuaAspRemoteIpTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspRemoteIpTableEntry.setDescription('A list of Remote IP addresses for the Application Server Processes.')
cItpXuaAspAddrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cItpXuaAspAddrNum.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAddrNum.setDescription("This object specifies the index for the ASP's remote IP address. The ASP Name in cItpXuaAspName specifies the ASP.")
cItpXuaAspRemoteIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 6, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspRemoteIpType.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspRemoteIpType.setDescription('This object contains the type of the remote IP address used to create the association supporting this ASP.')
cItpXuaAspRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 6, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspRemoteIpAddr.setDescription('This object contains the remote IP address used to create the association supporting this ASP.')
cItpXuaAspRemoteIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspRemoteIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspRemoteIpRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaAspRemoteIpTable following the RowStatus textual convention.')
cItpXuaAspRemoteIpDestState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 6, 1, 1, 5), CItpXuaRemoteIpDestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspRemoteIpDestState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspRemoteIpDestState.setDescription('This object contains the remote IP state used to create the association supporting this ASP.')
cItpXuaAspStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1), )
if mibBuilder.loadTexts: cItpXuaAspStatsTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspStatsTable.setDescription('A table of Application Server Processes (ASP) statistics.')
cItpXuaAspStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaAspName"))
if mibBuilder.loadTexts: cItpXuaAspStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspStatsTableEntry.setDescription('A list of ASP statistics.')
cItpXuaAspPktsFromAsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 1), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspPktsFromAsp.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspPktsFromAsp.setDescription('The number of MSUs received from this ASP.')
cItpXuaAspPktsToAsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 2), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspPktsToAsp.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspPktsToAsp.setDescription('The number of MSUs sent to this ASP.')
cItpXuaAspPktsFromMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 3), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspPktsFromMtp3.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspPktsFromMtp3.setDescription('The number of MSUs received from MTP3.')
cItpXuaAspPktsToMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 4), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspPktsToMtp3.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspPktsToMtp3.setDescription('The number of MSUs sent to MTP3.')
cItpXuaAspASPUPsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspASPUPsRcvd.setReference('Section 3.5.1 ASP Up (UP) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspASPUPsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspASPUPsRcvd.setDescription('The number of ASP Up messages received.')
cItpXuaAspASPUPACKsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspASPUPACKsSent.setReference('Section 3.5.2 ASP Up Acknowledgement (ASP Up Ack) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspASPUPACKsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspASPUPACKsSent.setDescription('The number of ASP Up ACK messages sent.')
cItpXuaAspASPDNsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspASPDNsRcvd.setReference('Section 3.5.3 ASP Down of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspASPDNsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspASPDNsRcvd.setDescription('The number of ASP Down messages received.')
cItpXuaAspASPDNACKsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspASPDNACKsSent.setReference('Section 3.5.4 ASP Down Acknowledgement (ASP Down Ack) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspASPDNACKsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspASPDNACKsSent.setDescription('The number of ASP Down ACK messages sent.')
cItpXuaAspASPACsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspASPACsRcvd.setReference('Sections 3.7.1 ASP Active of M3UA draft and 3.6.1 of SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspASPACsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspASPACsRcvd.setDescription('The number of ASP Active messages received.')
cItpXuaAspASPACACKsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspASPACACKsSent.setReference('Sections 3.7.2 ASP Active Acknowledgement (ASP Active Ack) of M3UA draft and 3.6.2 ASP Active (ACTIVE) of SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspASPACACKsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspASPACACKsSent.setDescription('The number of ASP Active ACK messages sent.')
cItpXuaAspASPIAsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspASPIAsRcvd.setReference('Sections 3.7.3 ASP Inactive of M3UA draft and 3.6.3 of SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspASPIAsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspASPIAsRcvd.setDescription('The number of ASP Inactive messages received.')
cItpXuaAspASPIAACKsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 12), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspASPIAACKsSent.setReference('Sections 3.7.4 ASP Inactive Acknowledgement (ASP Inactive Ack) of M3UA draft and 3.6.4 ASP Inactive (INACTIVE) of SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspASPIAACKsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspASPIAACKsSent.setDescription('The number of ASP Inactive ACK messages sent.')
cItpXuaAspErrorsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 13), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspErrorsRcvd.setReference('Sections 3.8.1 Error of M3UA draft and 3.7.1 Error (ERR) of SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspErrorsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspErrorsRcvd.setDescription('The number of ASP Error messages received.')
cItpXuaAspErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 14), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspErrorsSent.setReference('Sections 3.8.1 Error of M3UA draft and 3.7.1 Error (ERR) of SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspErrorsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspErrorsSent.setDescription('The number of ASP Error messages sent.')
cItpXuaAspNotifysSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 15), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspNotifysSent.setReference('Sections 3.8.2 Notify of M3UA draft and 3.7.2 Notify (NTFY) of SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspNotifysSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspNotifysSent.setDescription('The number of ASP Notify messages sent.')
cItpXuaAspDUNAsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 16), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspDUNAsRcvd.setReference('Section 3.4.1 Destination Unavailable (DUNA) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspDUNAsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDUNAsRcvd.setDescription('The number of Destination Unavailable messages received.')
cItpXuaAspDUNAsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 17), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspDUNAsSent.setReference('Section 3.4.1 Destination Unavailable (DUNA) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspDUNAsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDUNAsSent.setDescription('The number of Destination Unavailable messages sent.')
cItpXuaAspDAVAsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 18), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspDAVAsRcvd.setReference('Section 3.4.2 Destination Available (DAVA) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspDAVAsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDAVAsRcvd.setDescription('The number of Destination Available messages received.')
cItpXuaAspDAVAsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 19), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspDAVAsSent.setReference('Section 3.4.2 Destination Available (DAVA) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspDAVAsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDAVAsSent.setDescription('The number of Destination Available messages sent.')
cItpXuaAspDUPUsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 20), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspDUPUsRcvd.setReference('Section 3.4.5 Destination User Part Unavailable (DUPU) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspDUPUsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDUPUsRcvd.setDescription('The number of Destination User Part Unavailable messages received.')
cItpXuaAspDUPUsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 21), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspDUPUsSent.setReference('Section 3.4.5 Destination User Part Unavailable (DUPU) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspDUPUsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDUPUsSent.setDescription('The number of Destination User Part Unavailable messages sent.')
cItpXuaAspDAUDsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 22), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspDAUDsRcvd.setReference('Section 3.4.3 Destination State Audit (DAUD) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspDAUDsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDAUDsRcvd.setDescription('The number of Destination State Audit messages received.')
cItpXuaAspDAUDsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 23), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspDAUDsSent.setReference('Section 3.4.3 Destination State Audit (DAUD) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspDAUDsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDAUDsSent.setDescription('The number of Destination State Audit messages sent.')
cItpXuaAspSCON0sRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 24), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspSCON0sRcvd.setReference('Section 3.4.4 Signalling Congestion (SCON) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspSCON0sRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspSCON0sRcvd.setDescription('The number of Signaling Congestion messages with congestion level 0 (or no congestion) received.')
cItpXuaAspSCON1sRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 25), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspSCON1sRcvd.setReference('Section 3.4.4 Signalling Congestion (SCON) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspSCON1sRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspSCON1sRcvd.setDescription('The number of Signaling Congestion messages with congestion level 1 received.')
cItpXuaAspSCON2sRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 26), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspSCON2sRcvd.setReference('Section 3.4.4 Signalling Congestion (SCON) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspSCON2sRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspSCON2sRcvd.setDescription('The number of Signaling Congestion messages with congestion level 2 received.')
cItpXuaAspSCON3sRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 27), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspSCON3sRcvd.setReference('Section 3.4.4 Signalling Congestion (SCON) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspSCON3sRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspSCON3sRcvd.setDescription('The number of Signaling Congestion messages with congestion level 3 received.')
cItpXuaAspSCON0sSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 28), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspSCON0sSent.setReference('Section 3.4.4 Signalling Congestion (SCON) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspSCON0sSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspSCON0sSent.setDescription('The number of Signaling Congestion messages with congestion level 0 (or no congestion) sent.')
cItpXuaAspSCON1sSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 29), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspSCON1sSent.setReference('Section 3.4.4 Signalling Congestion (SCON) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspSCON1sSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspSCON1sSent.setDescription('The number of Signaling Congestion messages with congestion level 1 sent.')
cItpXuaAspSCON2sSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 30), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspSCON2sSent.setReference('Section 3.4.4 Signalling Congestion (SCON) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspSCON2sSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspSCON2sSent.setDescription('The number of Signaling Congestion messages with congestion level 2 sent.')
cItpXuaAspSCON3sSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 31), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspSCON3sSent.setReference('Section 3.4.4 Signalling Congestion (SCON) of M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspSCON3sSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspSCON3sSent.setDescription('The number of Signaling Congestion messages with congestion level 3 sent.')
cItpXuaAspBytesFromAsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 32), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspBytesFromAsp.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspBytesFromAsp.setDescription('The number of octets received from this ASP.')
cItpXuaAspBytesToAsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 33), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspBytesToAsp.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspBytesToAsp.setDescription('The number of octets sent to this ASP.')
cItpXuaAspBytesFromMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 34), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspBytesFromMtp3.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspBytesFromMtp3.setDescription('The number of octets received from MTP3.')
cItpXuaAspBytesToMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 7, 1, 1, 35), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspBytesToMtp3.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspBytesToMtp3.setDescription('The number of octets sent to MTP3.')
cItpXuaAsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1), )
if mibBuilder.loadTexts: cItpXuaAsTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsTable.setDescription('A table of M3UA/SUA Application Server (AS) entries. Entries are added to this table via cItpXuaAsRowStatus in accordance with the RowStatus convention.')
cItpXuaAsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaAsName"))
if mibBuilder.loadTexts: cItpXuaAsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsTableEntry.setDescription('A list of M3UA/SUA AS attributes.')
cItpXuaAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 1), CItpTcXuaName())
if mibBuilder.loadTexts: cItpXuaAsName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsName.setDescription('The Application Server name. This name has only local significance.')
cItpXuaAsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 2), CItpXuaProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsProtocol.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsProtocol.setDescription('The protocol used by this AS.')
cItpXuaAsShut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsShut.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsShut.setDescription("The AS Shut truth value. 'true' Indicates that the AS has been shutdown by an administrative action. 'false' Indicates that the AS is not shutdown.")
cItpXuaAsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 4), CItpXuaAsState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsState.setReference('4.3.2 AS States in M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAsState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsState.setDescription('The Application Server (AS) state.')
cItpXuaAsStateOnSgMate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 5), CItpXuaAsState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsStateOnSgMate.setReference('4.3.2 AS States in M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAsStateOnSgMate.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsStateOnSgMate.setDescription('The Application Server (AS) state on the mated Signaling Gateway. This object provides the status of an Application Service as provided by the Signaling Gateway Mated Protocol. This object can be used by the NMS to assist in problem determination. Each Signaling Gateway Mated pair should have same definitions. This allows the NMS examine the status Application Service from perspective of each Signalling Gateway. If the definitions are different on the mated pairs the NMS will be unable to determine the relationships between the ASes and mated pairs.')
cItpXuaAsActiveTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsActiveTS.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsActiveTS.setDescription('The value of system uptime at the time when this AS became active. A value of zero (0) indicates that the AS is not active.')
cItpXuaAsQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 7), CItpTcQos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsQosClass.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsQosClass.setDescription('The AS specifies the QOS class for all its ASPs. The value of 255 is not applicable. A value of zero (0) indicates that QOS class is not defined. This value can be overridden by cItpXuaAspQosClass.')
cItpXuaAsTrafMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 8), CItpXuaTrafMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsTrafMode.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsTrafMode.setDescription('The traffic mode for the MSUs received for this AS.')
cItpXuaAsRerouting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsRerouting.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRerouting.setDescription("The AS Rerouting truth value. 'true' Indicates that this SG is rerouting the traffic to the mated SG. 'false' Indicates that this SG is not rerouting the traffic to the mated SG.")
cItpXuaAsRoutingContext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsRoutingContext.setReference('1.4.2 Routing Contexts and Routing Keys in M3UA draft and 3.9.6 Routing Context in SUA draft.')
if mibBuilder.loadTexts: cItpXuaAsRoutingContext.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRoutingContext.setDescription('An ASP may be configured to serve more than one AS. In this case, the Routing Context parameter is exchanged between the SG and the ASP, identifying the relevant AS. The Routing Context uniquely identifies the range of traffic associated with a particular AS, which the ASP is configured to receive. There is a 1:1 relationship between a Routing Context value and a Routing Key within an AS.')
cItpXuaAsRkParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 11), Bits().clone(namedValues=NamedValues(("dpc", 0), ("opc", 1), ("opcMask", 2), ("si", 3), ("ssn", 4), ("gtt", 5), ("cic", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkParameters.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkParameters.setDescription("The cItpXuaAsRkParameters object indicates which Routing Key parameters are valid for this AS. 'dpc' : The cItpXuaAsRkDpc is the relevant column. 'opc' : cItpXuaAsRkOpc and cItpXuaAsRkOpcMask are the relevant columns. 'opcMask' : Indicates that a mask is to be applied when the opc is specified in the routing key. If the mask is not specified then the mask is assumed to be all zeros. 'si' : The cItpXuaAsRkSi is the relevant column. 'ssn' : Indicates that a SSN is to be checked as part of the routing key. 'gtt' : The cItpXuaAsRkGtt is the relevant column. It indicates that routing key for this AS can be the result of Global Title Translation. 'cic' : The cItpXuaAsRkCicMin and cItpXuaAsRkCicMax are the relevant columns. The following combination is allowed for all si's: gtt dpc dpc + opc dpc + opc + opcMask When si equals 3 (SCCP), the following is allowed: dpc + si dpc + si + opc dpc + si + ssn dpc + si + ssn + opc When si equals 4 (TUP) or 5 (ISUP), the following is allowed: dpc + si dpc + si + opc dpc + si + cic dpc + si + cic + opc")
cItpXuaAsRkDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 12), CItpTcPointCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkDpc.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkDpc.setDescription("The Destination Point Code (DPC) in the routing key for the AS. The 'dpc' bit in the cItpXuaAsRkParameters object is used to indicate whether this object's value has any current relevance.")
cItpXuaAsRkOpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 13), CItpTcPointCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkOpc.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkOpc.setDescription("The Origin Point Code (OPC) in the routing key for the AS. The 'opc' bit in the cItpXuaAsRkParameters object is used to indicate whether this object's value has any current relevance.")
cItpXuaAsRkOpcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkOpcMask.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkOpcMask.setDescription("The Origin Point Code (OPC) mask in the routing key for the AS. The 'opcMask' bit in the cItpXuaAsRkParameters object is used to indicate whether this object's value has any current relevance.")
cItpXuaAsRkSi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 15), CItpTcServiceIndicator()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkSi.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkSi.setDescription("The Service Indicator in the routing key for the AS. The 'si' bit in the cItpXuaAsRkParameters object is used to indicate whether this object's value has any current relevance.")
cItpXuaAsRkSsn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 16), CItpTcSubSystemNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkSsn.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkSsn.setDescription("The SubSystem Number (SSN) in routing key for the AS. The 'ssn' bit in the cItpXuaAsRkParameters object is used to indicate whether this object's value has any current relevance.")
cItpXuaAsRkGtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkGtt.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkGtt.setDescription("The Routing key Global Title Translation (GTT) truth value. 'true' Indicates that the GTT is enabled. 'false' Indicates that the GTT is not enabled. The 'gtt' bit in the cItpXuaAsRkParameters object is used to indicate whether this object's value has any current relevance.")
cItpXuaAsRkCicMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkCicMin.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkCicMin.setDescription("The Routing key minimum CIC value. The 'cic' bit in the cItpXuaAsRkParameters object is used to indicate whether this object's value has any current relevance.")
cItpXuaAsRkCicMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRkCicMax.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRkCicMax.setDescription("The Routing key maximum CIC value. The 'cic' bit in the cItpXuaAsRkParameters object is used to indicate whether this object's value has any current relevance.")
cItpXuaAsPktsFromMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 20), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsPktsFromMtp3.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsPktsFromMtp3.setDescription('The number of MSUs received from MTP3.')
cItpXuaAsPktsToASPsOfAs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 21), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsPktsToASPsOfAs.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsPktsToASPsOfAs.setDescription('The number of MSUs sent to all ASPs that are serving this AS.')
cItpXuaAsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaAsTable following the RowStatus textual convention.')
cItpXuaAsNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 23), CItpTcNetworkName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsNetworkName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsNetworkName.setDescription('The network name is used to indicate the network in which this signalling point is participating. One or more instances of signalling points can exist in the same physical device. This identifier will be used to correlate instances of signalling points by network. When multiple instance support is not enabled the network name will default to the null string. An octet string specified by an administrator that must be in human-readable form. The names must conform to the allowed characters that can be specified via Command Line Interface(CLI). The names cannot contain control character and should not contain leading or trailing white space.')
cItpXuaAsNetworkAppear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsNetworkAppear.setReference('1.2 Terminology section in RFC 3332 and SUA draft 16')
if mibBuilder.loadTexts: cItpXuaAsNetworkAppear.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsNetworkAppear.setDescription('The Network Appearance is a local reference shared by SG and AS that together with a point code uniquely identifies an SS7 node by indicating the specific SS7 network it belongs to. It can be used to distinguish between signaling traffic associated with different networks being sent between the SG and the ASP over a common SCTP association. An example scenario is where an SG appears as an element in multiple separate national SS7 networks and the same point code value may be reused in different networks.')
cItpXuaAsCongLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsCongLevel.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsCongLevel.setDescription('The current congestion level for the AS. A zero value indicates that the AS is not congested. The higher numbers indicate the higher levels of congestion. The congestion level is determined from the congestion levels of the ASPs that belong to this AS.')
cItpXuaAsPktsToMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 26), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsPktsToMtp3.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsPktsToMtp3.setDescription('The number of MSUs sent to MTP3.')
cItpXuaAsPktsFromASPsOfAs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 27), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsPktsFromASPsOfAs.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsPktsFromASPsOfAs.setDescription('The number of MSUs received from all ASPs that are serving this AS.')
cItpXuaAsBytesFromMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 28), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsBytesFromMtp3.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsBytesFromMtp3.setDescription('The number of octets received from MTP3.')
cItpXuaAsBytesToASPsOfAs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 29), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsBytesToASPsOfAs.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsBytesToASPsOfAs.setDescription('The number of octets sent to all ASPs that are serving this AS.')
cItpXuaAsBytesToMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 30), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsBytesToMtp3.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsBytesToMtp3.setDescription('The number of octets sent to MTP3.')
cItpXuaAsBytesFromASPsOfAs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 8, 1, 1, 31), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsBytesFromASPsOfAs.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsBytesFromASPsOfAs.setDescription('The number of octets received from all ASPs that are serving this AS.')
cItpXuaAspAsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 9, 1), )
if mibBuilder.loadTexts: cItpXuaAspAsTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAsTable.setDescription('A table of M3UA/SUA ASP-AS entries. An ASP can serve one or more ASes. For each AS that it serves, the ASP maintains the state information. Entries are added to this table via cItpXuaAspAsRowStatus in accordance with the RowStatus convention.')
cItpXuaAspAsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaAspName"), (0, "CISCO-ITP-XUA-MIB", "cItpXuaAspAsName"))
if mibBuilder.loadTexts: cItpXuaAspAsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAsTableEntry.setDescription('A list of M3UA/SUA ASP-AS attributes.')
cItpXuaAspAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 9, 1, 1, 1), CItpTcXuaName())
if mibBuilder.loadTexts: cItpXuaAspAsName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAsName.setDescription('The Application Server name.')
cItpXuaAspAsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 9, 1, 1, 2), CItpXuaAspState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspAsState.setReference('4.3.1 ASP States in M3UA/SUA draft.')
if mibBuilder.loadTexts: cItpXuaAspAsState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAsState.setDescription('The state of the ASP that serves this AS.')
cItpXuaAspAsActiveTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 9, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAspAsActiveTS.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAsActiveTS.setDescription('The value of system timestamp at the time when this ASP became active with respect to the specified AS. If the ASP is not active with respect to the specified AS this object will contain a value of zero.')
cItpXuaAspAsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 9, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspAsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAsRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaAspAsTable following the RowStatus textual convention.')
cItpXuaAspAsWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 9, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAspAsWeight.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspAsWeight.setDescription("When cItpXuaAsTrafMode specifies 'loadRndRobind', this object specifies the weight which is used in Weighted Round Robin algorithm. The default is 1. When the weight is 0, this particular ASP is selected only when there are no other active ASPs with a non-zero weight.")
cItpXuaASRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1), )
if mibBuilder.loadTexts: cItpXuaASRouteTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaASRouteTable.setDescription('A table of routes for remote point-codes using ASs defined on this ITP node. Entries are added to this table via cItpXuaASRouteRowStatus in accordance with the RowStatus convention.')
cItpXuaASRouteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaAsrName"))
if mibBuilder.loadTexts: cItpXuaASRouteTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaASRouteTableEntry.setDescription('A list of routes for remote point-codes using ASs.')
cItpXuaAsrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 1), CItpTcXuaName())
if mibBuilder.loadTexts: cItpXuaAsrName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrName.setDescription('The ASRoute name. This name has only local significance.')
cItpXuaAsrNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 2), CItpTcNetworkName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrNetwork.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrNetwork.setDescription('The network name is used to indicate the network in which this signalling point is participating. One or more instances of signalling points can exist in the same physical device. This identifier will be used to correlate instances of signalling points by network. When multiple instance support is not enabled the network name will default to the null string. An octet string specified by an administrator that must be in human-readable form. The names must conform to the allowed characters that can be specified via Command Line Interface(CLI). The names cannot contain control character and should not contain leading or trailing white space.')
cItpXuaAsrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 3), CItpXuaProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsrProtocol.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrProtocol.setDescription('The protocol used by this ASRoute.')
cItpXuaAsrRoutingContext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrRoutingContext.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrRoutingContext.setDescription('An AS may be configured to serve more than one ASRoute. In this case, the Routing Context parameter is exchanged between the SG and the ASP, identifying the relevant AS. The Routing Context uniquely identifies the range of traffic associated with a particular AS, which the ASP is configured to receive.')
cItpXuaAsrDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 5), CItpTcPointCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsrDpc.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrDpc.setDescription('The Destination Point Code (DPC) in the routing key for the ASRoute.')
cItpXuaAsrShut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsrShut.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrShut.setDescription("The ASRoute Shut truth value. 'true' Indicates that the ASRoute has been shutdown by an administrative action. 'false' Indicates that the ASRoute is not shutdown.")
cItpXuaAsrSgmateState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 7), CItpXuaRouteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrSgmateState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrSgmateState.setDescription('The ASRoute state on the mated Signalling Gateway. This object provides the status of an ASRoute as provided by the Signalling Gateway Mated Protocol. This object can be used by the NMS to assist in problem determination. Each Signaling Gateway Mated pair should have same definitions. This allows the NMS examine the status ASRoute from the perspective of each Signalling Gateway. If the definitions are different on the mated pairs the NMS will be unable to determine the relationships between the ASRoutes and mated pairs.')
cItpXuaAsrSgmatePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrSgmatePriority.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrSgmatePriority.setDescription('The ASRoute priority on the mated Signalling Gateway.')
cItpXuaAsrOutbPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 9), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrOutbPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrOutbPktsRcvd.setDescription('The number of outbound MSUs received from MTP3.')
cItpXuaAsrOutbByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrOutbByteRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrOutbByteRcvd.setDescription('The number of outbound data byte received from MTP3.')
cItpXuaAsrOutbPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 11), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrOutbPktsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrOutbPktsSent.setDescription('The number of outbound MSUs sent to this ASroute.')
cItpXuaAsrOutbByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrOutbByteSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrOutbByteSent.setDescription('The number of outbound data byte sent to this ASRoute.')
cItpXuaAsrSgmateDunaRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 13), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrSgmateDunaRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrSgmateDunaRcvd.setDescription('The number of Destination Unavailable (DUNA) messages received by the SG Mate.')
cItpXuaAsrSgmateDavaRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 14), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrSgmateDavaRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrSgmateDavaRcvd.setDescription('The number of Destination Available (DAVA) messages received by the SG Mate.')
cItpXuaAsrSgmateDrstRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 15), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrSgmateDrstRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrSgmateDrstRcvd.setDescription('The number of Destination Restricted (DRST) messages received by the SG Mate.')
cItpXuaAsrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 12, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaASRouteTable following the RowStatus textual convention.')
cItpXuaASRouteAsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1), )
if mibBuilder.loadTexts: cItpXuaASRouteAsTable.setStatus('current')
if mibBuilder.loadTexts: cItpXuaASRouteAsTable.setDescription('A table of routes for remote point-codes using ASs defined on this ITP node. Entries are added to this table via cItpXuaASRouteRowStatus in accordance with the RowStatus convention.')
cItpXuaASRouteAsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1), ).setIndexNames((0, "CISCO-ITP-XUA-MIB", "cItpXuaAsrName"), (0, "CISCO-ITP-XUA-MIB", "cItpXuaAsrAsName"))
if mibBuilder.loadTexts: cItpXuaASRouteAsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cItpXuaASRouteAsTableEntry.setDescription('A list of ASs for ASRoute.')
cItpXuaAsrAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 1), CItpTcXuaName())
if mibBuilder.loadTexts: cItpXuaAsrAsName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsName.setDescription('The Application Server name.')
cItpXuaAsrAsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsPriority.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsPriority.setDescription('The priority of this AS in the ASRoute.')
cItpXuaAsrAsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 3), CItpXuaRouteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsState.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsState.setDescription('The AS state in the ASRoute.')
cItpXuaAsrAsOutbPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 4), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsOutbPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsOutbPktsRcvd.setDescription('The number of outbound MSUs received from MTP3 for this AS.')
cItpXuaAsrAsOutbByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 5), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsOutbByteRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsOutbByteRcvd.setDescription('The number of outbound data byte received from MTP3 for this AS.')
cItpXuaAsrAsOutbPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 6), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsOutbPktsSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsOutbPktsSent.setDescription('The number of outbound MSUs sent to this AS in the ASroute.')
cItpXuaAsrAsOutbByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 7), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsOutbByteSent.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsOutbByteSent.setDescription('The number of outbound data byte sent to this AS in the ASRoute.')
cItpXuaAsrAsDunaRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsDunaRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsDunaRcvd.setDescription('The number of Destination Unavailable (DUNA) messages received by this AS in the ASRoute.')
cItpXuaAsrAsDavaRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsDavaRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsDavaRcvd.setDescription('The number of Destination Available (DAVA) messages received by this AS in the ASRoute.')
cItpXuaAsrAsDrstRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpXuaAsrAsDrstRcvd.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsDrstRcvd.setDescription('The number of Destination Restricted (DRST) messages received by this AS in the ASRoute.')
cItpXuaAsrAsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 13, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpXuaAsrAsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsrAsRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpXuaASRouteAsTable following the RowStatus textual convention.')
cItpXuaSgmDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 10, 1), CItpTcXuaName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cItpXuaSgmDisplayName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaSgmDisplayName.setDescription('This object identifies the SG Mate name associated with the ciscoItpXuaSgmStateChange notification.')
cItpXuaAspDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 10, 2), CItpTcXuaName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cItpXuaAspDisplayName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAspDisplayName.setDescription('This object identifies the ASP name associated with the ciscoItpXuaAspStateChange notification.')
cItpXuaAsDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 253, 1, 10, 3), CItpTcXuaName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cItpXuaAsDisplayName.setStatus('current')
if mibBuilder.loadTexts: cItpXuaAsDisplayName.setDescription('This object identifies the AS name associated with the ciscoItpXuaAspStateChange and ciscoItpXuaAsStateChange notifications.')
ciscoItpXuaAspStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 1)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAsState"))
if mibBuilder.loadTexts: ciscoItpXuaAspStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspStateChange.setDescription('The notification generated when an ASP changes to a new state. The value of cItpXuaAspAsState indicates the new state for the ASP that is serving the AS specified by cItpXuaAsDisplayName.')
ciscoItpXuaSgmStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 2)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmState"))
if mibBuilder.loadTexts: ciscoItpXuaSgmStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaSgmStateChange.setDescription('The notification generated when an SG Mate changes to a new state. The value of cItpXuaSgmState indicates the new state for the SG Mate.')
ciscoItpXuaAsStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 3)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsState"))
if mibBuilder.loadTexts: ciscoItpXuaAsStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAsStateChange.setDescription('The notification generated when an AS changes to a new state. The value of cItpXuaAsState indicates the new state for the AS.')
ciscoItpXuaAspCongChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 4)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspCongLevel"))
if mibBuilder.loadTexts: ciscoItpXuaAspCongChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspCongChange.setDescription('The notification generated when an ASP changes to a new congestion level. The value of cItpXuaAspCongLevel indicates the new congetion level for the ASP.')
ciscoItpXuaSgmCongChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 5)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmCongLevel"))
if mibBuilder.loadTexts: ciscoItpXuaSgmCongChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaSgmCongChange.setDescription('The notification generated when an SG Mate changes to a new congestion level. The value of cItpXuaSgmCongLevel indicates the new congetion level for the SG Mate.')
ciscoItpXuaSgmDestAddrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 6)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmAssocId"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmRemoteIpAddr"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmRemoteIpDestState"))
if mibBuilder.loadTexts: ciscoItpXuaSgmDestAddrStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaSgmDestAddrStateChange.setDescription('The notification is generated when a destination IP address used by SG Mate changes state.')
ciscoItpXuaAspDestAddrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 7)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocIdU32"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRemoteIpAddr"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRemoteIpDestState"))
if mibBuilder.loadTexts: ciscoItpXuaAspDestAddrStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspDestAddrStateChange.setDescription('The notification is generated when a destination IP address used by ASP changes state.')
ciscoItpXuaAspAssocStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 8)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocIdU32"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocFailedReason"))
if mibBuilder.loadTexts: ciscoItpXuaAspAssocStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspAssocStateChange.setDescription('This notification is generated when the association used to connect to the ASP changes state.')
ciscoItpXuaSgmAssocStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 253, 0, 9)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmAssocId"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmAssocState"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmAssocFailedReason"))
if mibBuilder.loadTexts: ciscoItpXuaSgmAssocStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaSgmAssocStateChange.setDescription('This notification is generated when the association used to connect to the SG Mate changes state.')
ciscoItpXuaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 1))
ciscoItpXuaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2))
ciscoItpXuaSup1Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3))
ciscoItpXuaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 1, 1)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaScalarsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstLocalIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifObjectsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaMIBCompliance = ciscoItpXuaMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco ITP XUA MIB')
ciscoItpXuaMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 1, 2)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaScalarsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstLocalIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifObjectsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaMIBComplianceRev1 = ciscoItpXuaMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco ITP XUA MIB')
ciscoItpXuaMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 1, 3)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaScalarsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstLocalIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifObjectsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaMIBComplianceRev2 = ciscoItpXuaMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco ITP XUA MIB')
ciscoItpXuaMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 1, 4)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaScalarsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstLocalIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspAsGroupRev3"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifObjectsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsGroupRev3"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsrGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsrAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaMIBComplianceRev3 = ciscoItpXuaMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco ITP XUA MIB')
ciscoItpXuaMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 1, 5)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaScalarsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstLocalIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspAsGroupRev3"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifObjectsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsGroupRev3"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsrGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsrAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaMIBComplianceRev4 = ciscoItpXuaMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cisco ITP XUA MIB')
ciscoItpXuaMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 1, 6)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaScalarsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstLocalIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspAsGroupRev3"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifObjectsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsGroupRev3"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsrGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsrAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroupSup1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaMIBComplianceRev5 = ciscoItpXuaMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Cisco ITP XUA MIB')
ciscoItpXuaMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 1, 7)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaScalarsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstLocalIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspAsGroupRev3"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifObjectsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroupRev1"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspGroupRev2"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsGroupRev3"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsrGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsrAsGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmGroupSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmRemoteIpSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspRemoteIpSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaNotifGroup"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaInstGroupSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsSup1Group"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspStatsSup1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaMIBComplianceRev6 = ciscoItpXuaMIBComplianceRev6.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaMIBComplianceRev6.setDescription('The compliance statement for entities which implement the Cisco ITP XUA MIB')
ciscoItpXuaScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 1)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaInstConfigLastChanged"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmConfigLastChanged"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspConfigLastChanged"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsConfigLastChanged"), ("CISCO-ITP-XUA-MIB", "cItpXuaStateChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaScalarsGroup = ciscoItpXuaScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaScalarsGroup.setDescription('M3UA/SUA main objects.')
ciscoItpXuaInstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 2)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaInstProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstActiveASPs"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaInstGroup = ciscoItpXuaInstGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaInstGroup.setDescription('M3UA/SUA Instance objects.')
ciscoItpXuaInstLocalIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 3)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaInstLocalIpType"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstLocalIpAddr"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstLocalIpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaInstLocalIpGroup = ciscoItpXuaInstLocalIpGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaInstLocalIpGroup.setDescription('The Local IP address for M3UA/SUA Instance objects.')
ciscoItpXuaSgmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 4)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaSgmAssocId"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmLocalPort"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmRemotePort"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmActiveTS"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmQosClass"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmPassive"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmState"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaSgmGroup = ciscoItpXuaSgmGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaSgmGroup.setDescription('SG Mate objects.')
ciscoItpXuaAspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 5)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocId"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspLocalPort"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRemotePort"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspBlocked"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspQosClass"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspIdentifier"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspGroup = ciscoItpXuaAspGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaAspGroup.setDescription('M3UA/SUA ASP objects.')
ciscoItpXuaAspRemoteIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 6)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspRemoteIpType"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRemoteIpAddr"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRemoteIpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspRemoteIpGroup = ciscoItpXuaAspRemoteIpGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspRemoteIpGroup.setDescription('Remote IP address for M3UA/SUA ASP objects.')
ciscoItpXuaAspStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 7)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspPktsFromAsp"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspPktsToAsp"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspPktsFromMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspPktsToMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspASPUPsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspASPUPACKsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspASPDNsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspASPDNACKsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspASPACsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspASPACACKsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspASPIAsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspASPIAACKsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspErrorsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspErrorsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspNotifysSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDUNAsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDUNAsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDAVAsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDAVAsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDUPUsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDUPUsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDAUDsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDAUDsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspSCON0sRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspSCON1sRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspSCON2sRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspSCON3sRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspSCON0sSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspSCON1sSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspSCON2sSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspSCON3sSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspStatsGroup = ciscoItpXuaAspStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspStatsGroup.setDescription('M3UA/SUA ASP Statistics objects.')
ciscoItpXuaAsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 8)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAsProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsStateOnSgMate"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsActiveTS"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsQosClass"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsTrafMode"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRerouting"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRoutingContext"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkParameters"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkDpc"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkOpc"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkOpcMask"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkSi"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkSsn"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkGtt"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkCicMin"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkCicMax"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsPktsFromMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsPktsToASPsOfAs"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAsGroup = ciscoItpXuaAsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaAsGroup.setDescription('M3UA/SUA AS objects.')
ciscoItpXuaAspAsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 9)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspAsState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAsActiveTS"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspAsGroup = ciscoItpXuaAspAsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaAspAsGroup.setDescription('M3UA/SUA ASP-AS objects.')
ciscoItpXuaNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 10)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaSgmDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspDisplayName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsDisplayName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaNotifObjectsGroup = ciscoItpXuaNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaNotifObjectsGroup.setDescription('M3UA/SUA notification objects.')
ciscoItpXuaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 11)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspStateChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmStateChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaNotificationsGroup = ciscoItpXuaNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaNotificationsGroup.setDescription('M3UA/SUA notifications.')
ciscoItpXuaSgmGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 12)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaSgmAssocId"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmLocalPort"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmRemotePort"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmActiveTS"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmQosClass"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmPassive"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmState"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmRowStatus"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmCongLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaSgmGroupRev1 = ciscoItpXuaSgmGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaSgmGroupRev1.setDescription('SG Mate objects.')
ciscoItpXuaAspGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 13)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocId"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspLocalPort"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRemotePort"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspBlocked"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspQosClass"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspIdentifier"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRowStatus"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspCongLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspGroupRev1 = ciscoItpXuaAspGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaAspGroupRev1.setDescription('M3UA/SUA ASP objects.')
ciscoItpXuaNotifGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 14)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspStateChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmStateChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAsStateChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspCongChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmCongChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaNotifGroupRev1 = ciscoItpXuaNotifGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaNotifGroupRev1.setDescription('M3UA/SUA notifications.')
ciscoItpXuaSgmRemoteIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 15)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaSgmRemoteIpType"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmRemoteIpAddr"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmRemoteIpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaSgmRemoteIpGroup = ciscoItpXuaSgmRemoteIpGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaSgmRemoteIpGroup.setDescription('Remote IP address for the Signaling Gateway Mate.')
ciscoItpXuaInstGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 16)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaInstProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstActiveASPs"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstRowStatus"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstOffload"), ("CISCO-ITP-XUA-MIB", "cItpXuaInstOffloadSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaInstGroupRev2 = ciscoItpXuaInstGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaInstGroupRev2.setDescription('M3UA/SUA Instance objects.')
ciscoItpXuaAspGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 17)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspLocalPort"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRemotePort"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspBlocked"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspQosClass"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspIdentifier"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspRowStatus"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspCongLevel"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocIdU32"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspGroupRev2 = ciscoItpXuaAspGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspGroupRev2.setDescription('M3UA/SUA ASP objects.')
ciscoItpXuaAsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 18)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAsProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsStateOnSgMate"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsActiveTS"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsQosClass"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsTrafMode"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRerouting"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRoutingContext"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkParameters"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkDpc"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkOpc"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkOpcMask"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkSi"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkSsn"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkGtt"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkCicMin"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkCicMax"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsPktsFromMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsPktsToASPsOfAs"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRowStatus"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsNetworkName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAsGroupRev2 = ciscoItpXuaAsGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpXuaAsGroupRev2.setDescription('M3UA/SUA AS objects.')
ciscoItpXuaAsGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 19)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAsProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsStateOnSgMate"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsActiveTS"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsQosClass"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsTrafMode"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRerouting"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRoutingContext"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkParameters"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkDpc"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkOpc"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkOpcMask"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkSi"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkSsn"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkGtt"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkCicMin"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRkCicMax"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsPktsFromMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsPktsToASPsOfAs"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsRowStatus"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsNetworkName"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsNetworkAppear"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsCongLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAsGroupRev3 = ciscoItpXuaAsGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAsGroupRev3.setDescription('M3UA/SUA AS objects.')
ciscoItpXuaAspAsGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 20)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspAsState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAsActiveTS"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAsRowStatus"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAsWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspAsGroupRev3 = ciscoItpXuaAspAsGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspAsGroupRev3.setDescription('M3UA/SUA ASP-AS objects.')
ciscoItpXuaAsrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 21)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAsrNetwork"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrProtocol"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrRoutingContext"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrDpc"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrShut"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrSgmateState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrSgmatePriority"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrOutbPktsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrOutbByteRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrOutbPktsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrOutbByteSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrSgmateDunaRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrSgmateDavaRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrSgmateDrstRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAsrGroup = ciscoItpXuaAsrGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAsrGroup.setDescription('ASRoute objects.')
ciscoItpXuaAsrAsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 2, 22)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsPriority"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsOutbPktsRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsOutbByteRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsOutbPktsSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsOutbByteSent"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsDunaRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsDavaRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsDrstRcvd"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsrAsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAsrAsGroup = ciscoItpXuaAsrAsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAsrAsGroup.setDescription('ASRoute-AS objects.')
ciscoItpXuaSgmGroupSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3, 1)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaSgmAssocState"), ("CISCO-ITP-XUA-MIB", "cItpXuaSgmAssocFailedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaSgmGroupSup1Group = ciscoItpXuaSgmGroupSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaSgmGroupSup1Group.setDescription('SG Mate Supplemental objects to ciscoItpXuaSgmGroupRev1.')
ciscoItpXuaSgmRemoteIpSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3, 2)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaSgmRemoteIpDestState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaSgmRemoteIpSup1Group = ciscoItpXuaSgmRemoteIpSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaSgmRemoteIpSup1Group.setDescription('SG Mate supplemental object to ciscoItpXuaSgmRemoteIpGroup.')
ciscoItpXuaAspSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3, 3)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocState"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspAssocFailedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspSup1Group = ciscoItpXuaAspSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspSup1Group.setDescription('M3UA/SUA ASP supplemental objects to ciscoItpXuaAspGroupRev2.')
ciscoItpXuaAspRemoteIpSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3, 4)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspRemoteIpDestState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspRemoteIpSup1Group = ciscoItpXuaAspRemoteIpSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspRemoteIpSup1Group.setDescription('M3UA/SUA ASP supplemental objects to ciscoItpXuaAspRemoteIpGroup.')
ciscoItpXuaNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3, 5)).setObjects(("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmDestAddrStateChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspDestAddrStateChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaAspAssocStateChange"), ("CISCO-ITP-XUA-MIB", "ciscoItpXuaSgmAssocStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaNotifGroup = ciscoItpXuaNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaNotifGroup.setDescription('M3UA/SUA state change notifications.')
ciscoItpXuaInstGroupSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3, 6)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaInstOffProcNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaInstGroupSup1Group = ciscoItpXuaInstGroupSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaInstGroupSup1Group.setDescription('M3UA/SUA Instance supplemental objects to ciscoItpXuaInstGroupRev2.')
ciscoItpXuaAsSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3, 7)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAsPktsToMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsPktsFromASPsOfAs"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsBytesFromMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsBytesToASPsOfAs"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsBytesToMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAsBytesFromASPsOfAs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAsSup1Group = ciscoItpXuaAsSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAsSup1Group.setDescription('M3UA/SUA AS supplemental objects to ciscoItpXuaAsGroupRev3.')
ciscoItpXuaAspStatsSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 253, 2, 3, 8)).setObjects(("CISCO-ITP-XUA-MIB", "cItpXuaAspBytesFromAsp"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspBytesToAsp"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspBytesFromMtp3"), ("CISCO-ITP-XUA-MIB", "cItpXuaAspBytesToMtp3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpXuaAspStatsSup1Group = ciscoItpXuaAspStatsSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoItpXuaAspStatsSup1Group.setDescription('M3UA/SUA ASP supplemental objects to ciscoItpXuaAspStatsGroup.')
mibBuilder.exportSymbols("CISCO-ITP-XUA-MIB", ciscoItpXuaAspStatsSup1Group=ciscoItpXuaAspStatsSup1Group, cItpXuaAsNetworkAppear=cItpXuaAsNetworkAppear, cItpXuaAsrAsOutbPktsRcvd=cItpXuaAsrAsOutbPktsRcvd, cItpXuaSgmConfigLastChanged=cItpXuaSgmConfigLastChanged, cItpXuaAsrProtocol=cItpXuaAsrProtocol, cItpXuaSgmTableEntry=cItpXuaSgmTableEntry, cItpXuaAspDUPUsSent=cItpXuaAspDUPUsSent, cItpXuaAspAssocIdU32=cItpXuaAspAssocIdU32, cItpXuaASRouteAsTable=cItpXuaASRouteAsTable, cItpXuaAspShut=cItpXuaAspShut, cItpXuaAspStats=cItpXuaAspStats, cItpXuaAsrRoutingContext=cItpXuaAsrRoutingContext, cItpXuaAsrShut=cItpXuaAsrShut, ciscoItpXuaMIBComplianceRev5=ciscoItpXuaMIBComplianceRev5, cItpXuaAspDAUDsRcvd=cItpXuaAspDAUDsRcvd, cItpXuaAspAsRowStatus=cItpXuaAspAsRowStatus, ciscoItpXuaSgmRemoteIpGroup=ciscoItpXuaSgmRemoteIpGroup, ciscoItpXuaSgmGroupSup1Group=ciscoItpXuaSgmGroupSup1Group, cItpXuaAspRowStatus=cItpXuaAspRowStatus, cItpXuaAspPktsFromAsp=cItpXuaAspPktsFromAsp, cItpXuaAsProtocol=cItpXuaAsProtocol, cItpXuaAsrAsOutbByteSent=cItpXuaAsrAsOutbByteSent, cItpXuaAsTableEntry=cItpXuaAsTableEntry, ciscoItpXuaSgmGroupRev1=ciscoItpXuaSgmGroupRev1, cItpXuaInstConfigLastChanged=cItpXuaInstConfigLastChanged, cItpXuaAspDUNAsRcvd=cItpXuaAspDUNAsRcvd, cItpXuaInstLocalIpAddr=cItpXuaInstLocalIpAddr, cItpXuaAsRkOpc=cItpXuaAsRkOpc, cItpXuaAsBytesToASPsOfAs=cItpXuaAsBytesToASPsOfAs, cItpXuaAsActiveTS=cItpXuaAsActiveTS, ciscoItpXuaAsGroupRev2=ciscoItpXuaAsGroupRev2, ciscoItpXuaMIBCompliances=ciscoItpXuaMIBCompliances, cItpXuaAsrDpc=cItpXuaAsrDpc, cItpXuaSgmAssocId=cItpXuaSgmAssocId, cItpXuaSgmRemoteIpAddr=cItpXuaSgmRemoteIpAddr, ciscoItpXuaInstGroupSup1Group=ciscoItpXuaInstGroupSup1Group, ciscoItpXuaAspAsGroup=ciscoItpXuaAspAsGroup, cItpXuaASRouteAsTableEntry=cItpXuaASRouteAsTableEntry, cItpXuaAspAsActiveTS=cItpXuaAspAsActiveTS, cItpXuaSgmState=cItpXuaSgmState, ciscoItpXuaScalarsGroup=ciscoItpXuaScalarsGroup, cItpXuaAspASPACsRcvd=cItpXuaAspASPACsRcvd, cItpXuaAsRkOpcMask=cItpXuaAsRkOpcMask, cItpXuaAspProtocol=cItpXuaAspProtocol, cItpXuaAsrSgmateState=cItpXuaAsrSgmateState, cItpXuaSgmRemoteIpTableEntry=cItpXuaSgmRemoteIpTableEntry, ciscoItpXuaInstGroupRev2=ciscoItpXuaInstGroupRev2, cItpXuaAspAssocFailedReason=cItpXuaAspAssocFailedReason, cItpXuaAsrSgmateDrstRcvd=cItpXuaAsrSgmateDrstRcvd, cItpXuaAspPktsToAsp=cItpXuaAspPktsToAsp, cItpXuaSgmRemoteIpType=cItpXuaSgmRemoteIpType, cItpXuaAsName=cItpXuaAsName, cItpXuaAsRkParameters=cItpXuaAsRkParameters, cItpXuaAsrAsDrstRcvd=cItpXuaAsrAsDrstRcvd, ciscoItpXuaAspStateChange=ciscoItpXuaAspStateChange, cItpXuaAspSCON3sSent=cItpXuaAspSCON3sSent, cItpXuaAspAsTable=cItpXuaAspAsTable, cItpXuaAsBytesFromMtp3=cItpXuaAsBytesFromMtp3, cItpXuaSgmShut=cItpXuaSgmShut, cItpXuaAspName=cItpXuaAspName, cItpXuaASRouteAs=cItpXuaASRouteAs, cItpXuaAspAsState=cItpXuaAspAsState, cItpXuaInstActiveASPs=cItpXuaInstActiveASPs, cItpXuaInstShut=cItpXuaInstShut, cItpXuaAspPktsFromMtp3=cItpXuaAspPktsFromMtp3, ciscoItpXuaAspAssocStateChange=ciscoItpXuaAspAssocStateChange, ciscoItpXuaAspSup1Group=ciscoItpXuaAspSup1Group, cItpXuaAspASPIAACKsSent=cItpXuaAspASPIAACKsSent, ciscoItpXuaAspGroup=ciscoItpXuaAspGroup, cItpXuaInstLocalIpRowStatus=cItpXuaInstLocalIpRowStatus, cItpXuaSgmTable=cItpXuaSgmTable, cItpXuaAspTable=cItpXuaAspTable, cItpXuaSgmRowStatus=cItpXuaSgmRowStatus, cItpXuaAspASPDNsRcvd=cItpXuaAspASPDNsRcvd, ciscoItpXuaMIBObjects=ciscoItpXuaMIBObjects, cItpXuaAspCongLevel=cItpXuaAspCongLevel, cItpXuaAspSCON0sRcvd=cItpXuaAspSCON0sRcvd, cItpXuaAsrAsDunaRcvd=cItpXuaAsrAsDunaRcvd, cItpXuaInstPort=cItpXuaInstPort, cItpXuaAspSCON0sSent=cItpXuaAspSCON0sSent, cItpXuaAsrRowStatus=cItpXuaAsrRowStatus, cItpXuaAspDisplayName=cItpXuaAspDisplayName, cItpXuaAspAs=cItpXuaAspAs, cItpXuaAsRowStatus=cItpXuaAsRowStatus, cItpXuaAsrOutbByteRcvd=cItpXuaAsrOutbByteRcvd, cItpXuaSgmRemoteIpTable=cItpXuaSgmRemoteIpTable, ciscoItpXuaNotifGroup=ciscoItpXuaNotifGroup, ciscoItpXuaAspDestAddrStateChange=ciscoItpXuaAspDestAddrStateChange, cItpXuaAsNetworkName=cItpXuaAsNetworkName, cItpXuaAsPktsToASPsOfAs=cItpXuaAsPktsToASPsOfAs, cItpXuaSgmCongLevel=cItpXuaSgmCongLevel, ciscoItpXuaAsGroup=ciscoItpXuaAsGroup, cItpXuaAsShut=cItpXuaAsShut, cItpXuaAspSCON2sSent=cItpXuaAspSCON2sSent, cItpXuaInstLocalIpType=cItpXuaInstLocalIpType, ciscoItpXuaMIBCompliance=ciscoItpXuaMIBCompliance, cItpXuaSgmName=cItpXuaSgmName, cItpXuaASRouteTableEntry=cItpXuaASRouteTableEntry, ciscoItpXuaNotificationsGroup=ciscoItpXuaNotificationsGroup, cItpXuaAspBytesFromAsp=cItpXuaAspBytesFromAsp, cItpXuaAspDAVAsSent=cItpXuaAspDAVAsSent, cItpXuaStateChangeNotifEnabled=cItpXuaStateChangeNotifEnabled, ciscoItpXuaSgmAssocStateChange=ciscoItpXuaSgmAssocStateChange, ciscoItpXuaAspCongChange=ciscoItpXuaAspCongChange, ciscoItpXuaAspGroupRev1=ciscoItpXuaAspGroupRev1, ciscoItpXuaConformance=ciscoItpXuaConformance, cItpXuaAsConfigLastChanged=cItpXuaAsConfigLastChanged, ciscoItpXuaMIBComplianceRev6=ciscoItpXuaMIBComplianceRev6, CItpXuaAspState=CItpXuaAspState, cItpXuaAspTableEntry=cItpXuaAspTableEntry, cItpXuaAspBytesFromMtp3=cItpXuaAspBytesFromMtp3, PYSNMP_MODULE_ID=ciscoItpXuaMIB, cItpXuaAspErrorsSent=cItpXuaAspErrorsSent, cItpXuaASRoute=cItpXuaASRoute, ciscoItpXuaMIBComplianceRev2=ciscoItpXuaMIBComplianceRev2, ciscoItpXuaSgmDestAddrStateChange=ciscoItpXuaSgmDestAddrStateChange, cItpXuaInstProtocol=cItpXuaInstProtocol, cItpXuaSgmRemoteIpRowStatus=cItpXuaSgmRemoteIpRowStatus, cItpXuaAsrName=cItpXuaAsrName, ciscoItpXuaAsrAsGroup=ciscoItpXuaAsrAsGroup, ciscoItpXuaSup1Groups=ciscoItpXuaSup1Groups, cItpXuaAspStatsTable=cItpXuaAspStatsTable, cItpXuaSgmQosClass=cItpXuaSgmQosClass, ciscoItpXuaMIBNotifs=ciscoItpXuaMIBNotifs, cItpXuaAsrSgmatePriority=cItpXuaAsrSgmatePriority, cItpXuaAsBytesFromASPsOfAs=cItpXuaAsBytesFromASPsOfAs, cItpXuaAsrAsRowStatus=cItpXuaAsrAsRowStatus, cItpXuaAspASPUPACKsSent=cItpXuaAspASPUPACKsSent, cItpXuaAsDisplayName=cItpXuaAsDisplayName, cItpXuaInstRowStatus=cItpXuaInstRowStatus, ciscoItpXuaAsrGroup=ciscoItpXuaAsrGroup, cItpXuaAsp=cItpXuaAsp, cItpXuaAsTrafMode=cItpXuaAsTrafMode, cItpXuaInstLocalIpTableEntry=cItpXuaInstLocalIpTableEntry, cItpXuaInstTable=cItpXuaInstTable, cItpXuaAsPktsFromASPsOfAs=cItpXuaAsPktsFromASPsOfAs, cItpXuaAsBytesToMtp3=cItpXuaAsBytesToMtp3, ciscoItpXuaMIBComplianceRev3=ciscoItpXuaMIBComplianceRev3, ciscoItpXuaMIBComplianceRev4=ciscoItpXuaMIBComplianceRev4, cItpXuaAsRerouting=cItpXuaAsRerouting, cItpXuaAsrNetwork=cItpXuaAsrNetwork, CItpXuaAsState=CItpXuaAsState, cItpXuaAspASPACACKsSent=cItpXuaAspASPACACKsSent, cItpXuaAsPktsToMtp3=cItpXuaAsPktsToMtp3, cItpXuaAsRoutingContext=cItpXuaAsRoutingContext, ciscoItpXuaSgmRemoteIpSup1Group=ciscoItpXuaSgmRemoteIpSup1Group, cItpXuaAsrAsPriority=cItpXuaAsrAsPriority, cItpXuaAsRkGtt=cItpXuaAsRkGtt, cItpXuaAsrSgmateDunaRcvd=cItpXuaAsrSgmateDunaRcvd, CItpXuaAssocState=CItpXuaAssocState, cItpXuaAspRemoteIp=cItpXuaAspRemoteIp, cItpXuaAspBytesToMtp3=cItpXuaAspBytesToMtp3, cItpXuaAsrAsName=cItpXuaAsrAsName, cItpXuaMIBNotifObjects=cItpXuaMIBNotifObjects, ciscoItpXuaNotifGroupRev1=ciscoItpXuaNotifGroupRev1, cItpXuaAspRemoteIpAddr=cItpXuaAspRemoteIpAddr, cItpXuaAspPktsToMtp3=cItpXuaAspPktsToMtp3, cItpXuaInstOffload=cItpXuaInstOffload, cItpXuaAspStatsTableEntry=cItpXuaAspStatsTableEntry, cItpXuaSgmRemoteIpDestState=cItpXuaSgmRemoteIpDestState, cItpXuaAsrAsOutbPktsSent=cItpXuaAsrAsOutbPktsSent, cItpXuaAsrAsDavaRcvd=cItpXuaAsrAsDavaRcvd, cItpXuaAsPktsFromMtp3=cItpXuaAsPktsFromMtp3, cItpXuaAspBytesToAsp=cItpXuaAspBytesToAsp, cItpXuaAsrSgmateDavaRcvd=cItpXuaAsrSgmateDavaRcvd, cItpXuaAsrAsOutbByteRcvd=cItpXuaAsrAsOutbByteRcvd, cItpXuaAsQosClass=cItpXuaAsQosClass, cItpXuaAspRemoteIpTableEntry=cItpXuaAspRemoteIpTableEntry, cItpXuaAs=cItpXuaAs, ciscoItpXuaAspStatsGroup=ciscoItpXuaAspStatsGroup, cItpXuaAspDUPUsRcvd=cItpXuaAspDUPUsRcvd, cItpXuaAsState=cItpXuaAsState, cItpXuaAspASPDNACKsSent=cItpXuaAspASPDNACKsSent, ciscoItpXuaAsGroupRev3=ciscoItpXuaAsGroupRev3, cItpXuaInstOffloadSlot=cItpXuaInstOffloadSlot, cItpXuaAspQosClass=cItpXuaAspQosClass, cItpXuaInst=cItpXuaInst, cItpXuaAspErrorsRcvd=cItpXuaAspErrorsRcvd, ciscoItpXuaMIBGroups=ciscoItpXuaMIBGroups, ciscoItpXuaAspAsGroupRev3=ciscoItpXuaAspAsGroupRev3, cItpXuaAspSCON1sSent=cItpXuaAspSCON1sSent, cItpXuaSgmPassive=cItpXuaSgmPassive, cItpXuaAspSCON3sRcvd=cItpXuaAspSCON3sRcvd, cItpXuaAsRkDpc=cItpXuaAsRkDpc, cItpXuaInstOffProcNumber=cItpXuaInstOffProcNumber, cItpXuaAspASPUPsRcvd=cItpXuaAspASPUPsRcvd, cItpXuaAspSCON2sRcvd=cItpXuaAspSCON2sRcvd, cItpXuaSgmAssocFailedReason=cItpXuaSgmAssocFailedReason, cItpXuaAspRemoteIpRowStatus=cItpXuaAspRemoteIpRowStatus, ciscoItpXuaInstGroup=ciscoItpXuaInstGroup, ciscoItpXuaAspRemoteIpSup1Group=ciscoItpXuaAspRemoteIpSup1Group, cItpXuaSgmActiveTS=cItpXuaSgmActiveTS, cItpXuaAspAddrNum=cItpXuaAspAddrNum, cItpXuaAspConfigLastChanged=cItpXuaAspConfigLastChanged, cItpXuaAspASPIAsRcvd=cItpXuaAspASPIAsRcvd, cItpXuaAspLocalPort=cItpXuaAspLocalPort, ciscoItpXuaMIB=ciscoItpXuaMIB, cItpXuaAspAsWeight=cItpXuaAspAsWeight, cItpXuaAsRkSi=cItpXuaAsRkSi, ciscoItpXuaAspRemoteIpGroup=ciscoItpXuaAspRemoteIpGroup, cItpXuaSgmLocalPort=cItpXuaSgmLocalPort, ciscoItpXuaSgmCongChange=ciscoItpXuaSgmCongChange, cItpXuaAspBlocked=cItpXuaAspBlocked, cItpXuaAsTable=cItpXuaAsTable, cItpXuaAspAsName=cItpXuaAspAsName, cItpXuaAsrOutbPktsSent=cItpXuaAsrOutbPktsSent, cItpXuaSgmAssocState=cItpXuaSgmAssocState, ciscoItpXuaAsStateChange=ciscoItpXuaAsStateChange, cItpXuaAsrOutbByteSent=cItpXuaAsrOutbByteSent, cItpXuaAspRemoteIpDestState=cItpXuaAspRemoteIpDestState, cItpXuaAsRkCicMin=cItpXuaAsRkCicMin, ciscoItpXuaNotifObjectsGroup=ciscoItpXuaNotifObjectsGroup, cItpXuaInstLocalIpTable=cItpXuaInstLocalIpTable, cItpXuaAspAsTableEntry=cItpXuaAspAsTableEntry, cItpXuaInstTableEntry=cItpXuaInstTableEntry, cItpXuaAspDUNAsSent=cItpXuaAspDUNAsSent, cItpXuaAspDAUDsSent=cItpXuaAspDAUDsSent, cItpXuaAspDAVAsRcvd=cItpXuaAspDAVAsRcvd, cItpXuaAsrOutbPktsRcvd=cItpXuaAsrOutbPktsRcvd, cItpXuaSgm=cItpXuaSgm, CItpXuaProtocol=CItpXuaProtocol, cItpXuaSgmAddrNum=cItpXuaSgmAddrNum, ciscoItpXuaMIBComplianceRev1=ciscoItpXuaMIBComplianceRev1, cItpXuaAspAssocState=cItpXuaAspAssocState, cItpXuaAsrAsState=cItpXuaAsrAsState, cItpXuaInstLocalIp=cItpXuaInstLocalIp, cItpXuaSgmRemoteIp=cItpXuaSgmRemoteIp, CItpXuaRouteState=CItpXuaRouteState, CItpXuaRemoteIpDestState=CItpXuaRemoteIpDestState, cItpXuaAspIdentifier=cItpXuaAspIdentifier, cItpXuaAspRemotePort=cItpXuaAspRemotePort, cItpXuaAsRkSsn=cItpXuaAsRkSsn, cItpXuaAspRemoteIpTable=cItpXuaAspRemoteIpTable, cItpXuaAspRemoteIpType=cItpXuaAspRemoteIpType, ciscoItpXuaSgmStateChange=ciscoItpXuaSgmStateChange, cItpXuaAspSCON1sRcvd=cItpXuaAspSCON1sRcvd, ciscoItpXuaAspGroupRev2=ciscoItpXuaAspGroupRev2, cItpXuaAspAssocId=cItpXuaAspAssocId, cItpXuaAsRkCicMax=cItpXuaAsRkCicMax, cItpXuaASRouteTable=cItpXuaASRouteTable, cItpXuaScalars=cItpXuaScalars, cItpXuaAsStateOnSgMate=cItpXuaAsStateOnSgMate, ciscoItpXuaInstLocalIpGroup=ciscoItpXuaInstLocalIpGroup, cItpXuaAspNotifysSent=cItpXuaAspNotifysSent, ciscoItpXuaSgmGroup=ciscoItpXuaSgmGroup, CItpXuaTrafMode=CItpXuaTrafMode, ciscoItpXuaAsSup1Group=ciscoItpXuaAsSup1Group, cItpXuaInstAddrNum=cItpXuaInstAddrNum, cItpXuaAsCongLevel=cItpXuaAsCongLevel, cItpXuaSgmDisplayName=cItpXuaSgmDisplayName, cItpXuaSgmRemotePort=cItpXuaSgmRemotePort)
