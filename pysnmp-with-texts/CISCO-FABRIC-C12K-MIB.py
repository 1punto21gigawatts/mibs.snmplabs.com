#
# PySNMP MIB module CISCO-FABRIC-C12K-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FABRIC-C12K-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
PhysicalIndex, entPhysicalIndex, entPhysicalName = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex", "entPhysicalName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Unsigned32, ModuleIdentity, IpAddress, MibIdentifier, Counter32, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, ObjectIdentity, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "ModuleIdentity", "IpAddress", "MibIdentifier", "Counter32", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "ObjectIdentity", "iso", "Counter64")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoFabricC12kMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 281))
ciscoFabricC12kMIB.setRevisions(('2002-09-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFabricC12kMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFabricC12kMIB.setLastUpdated('200209200000Z')
if mibBuilder.loadTexts: ciscoFabricC12kMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFabricC12kMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: gsr-netman@cisco.com')
if mibBuilder.loadTexts: ciscoFabricC12kMIB.setDescription('Cisco Fabric MIB module for c12000 series of routers. This MIB module is used for managing/tracking the c12000 fabric entities and fabric related configuration, status and statistics information. C12000 fabric architecture is based on NxN non-blocking crossbar switch fabric, where N stands for the maximum number of LCs that can be supported in the chassis (this includes the RP). The connections through the switch fabric is controlled by a scheduler (CSC), the CSC accepts transmission requests from line cards, issues grants to access the fabric, and provides a reference clock to all the cards in the system to synchronize data transfer across the crossbar. Some of the error status objects in the MIB are read-clear, that is the value of the object is cleared on a query of the object. Details about the various fabric related attributes specified in the MIB could be found at following link, http://www.cisco.com/warp/public/108/hwts_12000_22281.html Acronyms and terms used in the MIB module: GSR - Gigabit Switch Router. RP - Route Processor. LC - Line Card. SFC - Switch Fabric Card. CRC - Cyclic Redundancy Check. CSC - Clock Scheduler Card. CiscoCell - The unit of data that is exchanged between line cards through the switch fabric. FIA - Fabric Interface Asic, this Asic resides on the line card and is used to interface line card and switch fabric. ToFabFIA - Represents the ToFabric FIA, FIA which transmits data from the line card to the fabric. FrFabFIA - Represents the From Fabric FIA, FIA which receives data from the fabric. SCA - Scheduler Control Asic, this Asic resides on each CSC and is used to arbitrate among the line card requests to transmit CiscoCells through the switch fabric. Xbar - Crossbar Switch Asic, this Asic resides on each fabric card and provides the functionality of a crossbar switch. SLI - Serial Link interface block, this block resides on the FIA on the line cards and the Xbar and SCA on the switch fabric. The functionality of SLI is to interface the linecards and fabric cards. BMA - Buffer Manager Asic, this Asic is located on a Pre OC-192 linecard. It provides the packet buffering and buffer queue management. MCC - Memory Communication Controller Asic, this Asic is located on a OC-192 linecard and is an enhanced packet buffer Asic. MCC captures the data and control path information for packets destined to all line cards in the system. On the receive side MCC interfaces with the Rx Asic where the packets are looked up and sent to the MCC for buffering. On the transmit side it interfaces with the ToFabFIA where packets arrived from MCC will be segmented into CiscoCells before being sent across the fabric. CSAR - Cisco Cell Segmentation And Reassembly, The name of an FPGA used on the RP which handles traffic between the processor and switch fabric. Request - A signal sent by a FIA (on a line card) to the SCA (on Master CSC) requesting a switch connection to a output linecard as an intent to transmit CiscoCells across. Grant - A signal sent by the SCA to a FIA (on a line card) granting a switch connection which was requested by the FIA. SRAM - Static Random Access Memory. LOS - Loss Of Signal. FPGA - Field Programmable Gate Array.')
ciscoFabricC12kMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 0))
ciscoFabricC12kMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1))
ciscoFabricC12kMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 2))
cfcGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1))
cfcGenericGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 1))
cfcGenericFab = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2))
cfcGenericSca = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3))
cfcGenericXbar = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 4))
cfcPreOc192 = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2))
cfcPreOc192Fab = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1))
cfcPreOc192Sca = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 2))
cfcPreOc192Xbar = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 3))
cfcOc192 = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3))
cfcOc192Fab = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1))
cfcOc192Sca = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 2))
cfcOc192Xbar = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 3))
cfcNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 4))
class CfcFabricConfigMode(TextualConvention, Integer32):
    description = 'An enumerated value that provides the current bandwidth and redundancy configuration of the fabric. The c12000 can have the following fabric configurations based on the number of fabric cards present in the system. 1) Invalid configuration mode, this mode indicates that the current fabric mode is invalid, this may be due to insufficient number of CSC or SFC cards in the system. 2) Quarter bandwidth non-redundant mode, this mode indicates that the bandwidth supported per slot by the switch is 1/4 th of the full bandwidth and there is no redundancy for the fabric failure. 3) Quarter bandwidth redundant mode, this mode indicates that the bandwidth supported per slot by the switch is 1/4 th of the full bandwidth and there is redundancy for the fabric failure. 4) Full bandwidth non-redundant mode, this mode indicates that the full bandwidth is supported per slot by the switch and there is no redundancy for the fabric failure. 5) Full bandwidth redundant mode, this mode indicates that the full bandwidth is supported per slot by the switch and there is redundancy for the fabric failure. Quarter bandwidth modes are applicable only for the systems with pre-OC192 fabric cards.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalidMode", 1), ("quarterBwNonRedundant", 2), ("quarterBwRedundant", 3), ("fullBwNonRedundant", 4), ("fullBwRedundant", 5))

class CfcFabricFiaState(TextualConvention, Integer32):
    description = 'Provides the current state of the FIA. active - FIA is currently active. halted - On reaching a test point for errors on FIA, the FIA will be moved to halted state. On clearance of the error state the FIA will be moved back to active state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("halted", 2))

class CfcScaInterrupts(TextualConvention, Bits):
    description = 'Indicates different alarm conditions in the SCA. lossOfSync (0) -- Interrupt caused by a loss-of-sync detection by SCA. parityError (1) -- Interrupt caused by a request parity error detection by SCA. overflow (2) -- Interrupt caused by a request overflow detection.'
    status = 'current'
    namedValues = NamedValues(("lossOfSync", 0), ("parityError", 1), ("overflow", 2))

class CfcSlotMask(TextualConvention, OctetString):
    description = 'Each bit in this value is used to represent a module, where the bit position represents the slot number of the module. Ex: To represent a module which is in slot 1, the bit position 1 in the octet string is set.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

cfcGenericGlobalFabConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 1, 1), CfcFabricConfigMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericGlobalFabConfigMode.setStatus('current')
if mibBuilder.loadTexts: cfcGenericGlobalFabConfigMode.setDescription('This object gives the current bandwidth and redundancy configuration of fabric in the system.')
cfcGenericGlobalFabMasterSched = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericGlobalFabMasterSched.setStatus('current')
if mibBuilder.loadTexts: cfcGenericGlobalFabMasterSched.setDescription('This object gives the entPhysicalIndex of the master scheduler fabric card in the system. If there is no master scheduler card then this object will return the value zero.')
cfcGenericFabToFabTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cfcGenericFabToFabTable.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabToFabTable.setDescription('A table providing ToFabFIA statistics and information in the managed system.')
cfcGenericFabToFabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcGenericFabToFabEntry.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabToFabEntry.setDescription('An entry providing various ToFabFIA statistics and information of the associated linecard identified by entPhysicalIndex.')
cfcGenericFabToFabState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 1, 1, 1), CfcFabricFiaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericFabToFabState.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabToFabState.setDescription('Indicates the current state of the ToFabFIA. active - ToFabFIA is currently active. On reaching a test point for the FIA errors, the ToFabFIA will be moved to halted state.')
cfcGenericFabToFabGrantPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericFabToFabGrantPEs.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabToFabGrantPEs.setDescription('Count of parity errors detected by the ToFabFIA on the grant lines to SCA.')
cfcGenericFabToFabRequestPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericFabToFabRequestPEs.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabToFabRequestPEs.setDescription('Count of parity errors detected by the ToFabFIA on the request lines to SCA. These errors are detected by the SCA and fed back to the ToFabFIA.')
cfcGenericFabToFabCellFifoPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericFabToFabCellFifoPEs.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabToFabCellFifoPEs.setDescription('Count of cell parity errors detected by the ToFabFIA while dequeuing cells from the cell fifo.')
cfcGenericFabFrFabTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cfcGenericFabFrFabTable.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabTable.setDescription('A table providing FrFabFIA information in the managed system.')
cfcGenericFabFrFabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcGenericFabFrFabEntry.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabEntry.setDescription('An entry providing FrFabFIA information of the associated linecard identified by entPhysicalIndex.')
cfcGenericFabFrFabState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 2, 1, 1), CfcFabricFiaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericFabFrFabState.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabState.setDescription('Indicates the current state of the FrFabFIA. active - FrFabFIA is currently active. On reaching a test point for the FIA errors, the FrFabFIA will be moved to halted state')
cfcGenericFabFrFabSliTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 3), )
if mibBuilder.loadTexts: cfcGenericFabFrFabSliTable.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabSliTable.setDescription('A table providing per serial link information maintained by the FrFabFIA in the managed system.')
cfcGenericFabFrFabSliEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-FABRIC-C12K-MIB", "cfcGenericFabFrFabSliFabIndex"))
if mibBuilder.loadTexts: cfcGenericFabFrFabSliEntry.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabSliEntry.setDescription('An entry providing per serial link information maintained by the FrFabFIA on an associated linecard.')
cfcGenericFabFrFabSliFabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 3, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: cfcGenericFabFrFabSliFabIndex.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabSliFabIndex.setDescription('The entPhysicalIndex of the switch fabric cards (CSC/SFC) present in the monitored system.')
cfcGenericFabFrFabSliLOSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericFabFrFabSliLOSErrors.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabSliLOSErrors.setDescription('Count of LOS errors detected by the FrFabFIA on the serial link to the fabric card identified by cfcGenericFabFrFabSliFabIndex.')
cfcGenericFabFrFabSliCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericFabFrFabSliCRCErrors.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabSliCRCErrors.setDescription('Count of CRC errors detected by the FrFabFIA on the serial link to the fabric card identified by cfcGenericFabFrFabSliFabIndex.')
cfcGenericFabFrFabSliLOSState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("losOff", 1), ("losOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericFabFrFabSliLOSState.setStatus('current')
if mibBuilder.loadTexts: cfcGenericFabFrFabSliLOSState.setDescription('State of LOS detection as enabled on FrFabFIA (identified by entPhysicalIndex) for the serial link to the switch fabric card identified by cfcGenericFabFrFabSliFabIndex. Value is either, (1) losOff (2) losOn A losOff state normally indicates that the FrFabFIA has detected a state of persisting LOS on the serial link and has disabled LOS detection for that serial link.')
cfcGenericScaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1), )
if mibBuilder.loadTexts: cfcGenericScaTable.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaTable.setDescription('A table providing SCA statistics and information in the managed system.')
cfcGenericScaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcGenericScaEntry.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaEntry.setDescription('An entry providing various statistics and information of SCA on an associated CSC identified by the respective entPhysicalIndex.')
cfcGenericScaIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaIdentifier.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaIdentifier.setDescription('The vendor-specific identifier string of SCA ASIC. This identifier generally includes the revision number and the manufacturing part number of SCA.')
cfcGenericScaIntrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 2), CfcScaInterrupts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaIntrStatus.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaIntrStatus.setDescription('Gives the status/occurrence of different alarm conditions in the SCA. This object is a read-clear object, that is the value of the object is cleared on every read.')
cfcGenericScaIntrsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 3), CfcScaInterrupts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaIntrsEnabled.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaIntrsEnabled.setDescription('Gives the list of different alarm conditions enabled to be generated by the SCA.')
cfcGenericScaConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 4), Bits().clone(namedValues=NamedValues(("quarterBandwidth", 0), ("halfBandwidth", 1), ("fullBandwidth", 2), ("enableParity", 3), ("priMcast", 4), ("priUnicast", 5), ("priAlternating", 6), ("earlyIntrOnLOS", 7), ("noEarlyIntrOnLOS", 8), ("forceXbarParityXer", 9), ("forceGrantParityXer", 10), ("unicastAcceptMode", 11), ("forceXbarCrcOnCtlLink0", 12), ("forceXbarCrcOnCtlLink1", 13), ("forceXbarCrcOnCtlLink2", 14), ("forceXbarCrcOnCtlLink3", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaConfig.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaConfig.setDescription('Gives the current configuration of the SCA ASIC. quarterBandwidth (0) -- 1/4th of the full bandwidth is supported per slot by the switch. halfBandwidth (1) -- 1/2th of the full bandwidth is supported per slot by the switch. fullBandwidth (2) -- Full bandwidth is supported per slot by the switch. enableParity (3) -- Parity handling by SCA is enabled. priMcast (4) -- Priority of Multicast requests is greater then Unicast requests. priUnicast (5) -- Priority of Unicast requests is greater then Multicast requests. priAlternating (6) -- Alternate the priority between pri-mcast and pri-unicast modes every cell clock. earlyIntrOnLOS (7) -- Cause early interrupt on loss-of-sync error. noEarlyIntrOnLOS (8) -- Allow time to resync on loss-of-sync error. forceXbarParityXer (9) -- Force bad parity on xbar on every cell clock. forceGrantParityXer (10) -- Force bad partity on grant to every line card. unicastAcceptMode (11) -- Enable unicast accept pointer updating only on cell periods when Unicast has higher priority over multicast. forceXbarCrcOnCtlLink0 (12)-- Force CRC error on Xbar control link 0. forceXbarCrcOnCtlLink0 (13)-- Force CRC error on Xbar control link 1. forceXbarCrcOnCtlLink0 (14)-- Force CRC error on Xbar control link 2. forceXbarCrcOnCtlLink0 (15)-- Force CRC error on Xbar control link 3.')
cfcGenericScaPELog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 5), CfcSlotMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaPELog.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaPELog.setDescription('Indicates the modules which caused the parity error and resulted in an interrupt. The corresponding bit is set on occurrence of parity error for a module. This object is a read-clear object, that is the value of the object is cleared on every read.')
cfcGenericScaFifoOverflowLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 6), CfcSlotMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaFifoOverflowLog.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaFifoOverflowLog.setDescription('Indicates the modules which caused an overflow at the request fifo and resulted in an interrupt. The corresponding bit is set on occurrence of fifo overflow for a module. This object is a read-clear object, that is the value of the object is cleared on every read.')
cfcGenericScaLCsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 7), CfcSlotMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaLCsEnabled.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaLCsEnabled.setDescription('Indicates the modules which are present and the SCA has been configured to start accepting requests from this module.')
cfcGenericScaForcedBackPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 8), CfcSlotMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaForcedBackPressure.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaForcedBackPressure.setDescription('Indicates the linecards which exerted backpressure. SCA will not grant Xbar connection to these linecards.')
cfcGenericScaOc192LCsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 9), CfcSlotMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaOc192LCsPresent.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaOc192LCsPresent.setDescription('Indicates the OC192 linecards present in the monitored system. The corresponding bit is set for each linecard present, indicating the postion.')
cfcGenericScaPreOc192LCsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 3, 1, 1, 10), CfcSlotMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericScaPreOc192LCsPresent.setStatus('current')
if mibBuilder.loadTexts: cfcGenericScaPreOc192LCsPresent.setDescription('Indicates the Pre-OC192 linecards present in the monitored system. The corresponding bit is set for each linecard present, indicating the position.')
cfcGenericXbarTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cfcGenericXbarTable.setStatus('current')
if mibBuilder.loadTexts: cfcGenericXbarTable.setDescription('A table providing Xbar information in the managed system.')
cfcGenericXbarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcGenericXbarEntry.setStatus('current')
if mibBuilder.loadTexts: cfcGenericXbarEntry.setDescription('An entry providing Xbar information on an associated fabric card identified by entPhysicalIndex.')
cfcGenericXbarIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 1, 4, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcGenericXbarIdentifier.setStatus('current')
if mibBuilder.loadTexts: cfcGenericXbarIdentifier.setDescription('The vendor-specific identifier string of Xbar ASIC. This identifier generally includes the revision number and the manufacturing part number of Xbar.')
cfcPreOc192FabToFabTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1), )
if mibBuilder.loadTexts: cfcPreOc192FabToFabTable.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabTable.setDescription('A table providing pre-OC192 ToFabFIA statistics and information in the managed system.')
cfcPreOc192FabToFabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcPreOc192FabToFabEntry.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabEntry.setDescription('An entry providing various statistics and counters of pre-OC192 ToFabFIA on an associated linecard identified by entPhysicalIndex.')
cfcPreOc192FabToFabScaLosts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabScaLosts.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabScaLosts.setDescription('Indicates the number of times the ToFabFIA lost contact with SCA(scheduler controller Asic) on master CSC.')
cfcPreOc192FabToFabUCFifoOvFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabUCFifoOvFlws.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabUCFifoOvFlws.setDescription('Count of unicast fifo overflow errors on the ToFabFIA. Problems between BMA/CSAR and the ToFabFIA may be one of the reasons for these errors.')
cfcPreOc192FabToFabUCFifoUnFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabUCFifoUnFlws.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabUCFifoUnFlws.setDescription('Count of unicast fifo underflow errors on the ToFabFIA. These errors are caused by the SCA granting without actually getting a request from the ToFabFIA.')
cfcPreOc192FabToFabMCFifoErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabMCFifoErrs.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabMCFifoErrs.setDescription('Count of multicast fifo overflow and underflow errors on the ToFabFIA. Problems between BMA/CSAR and the ToFabFIA may be one of the reasons for multicast fifo overflow errors. Underflow errors are caused by the SCA granting without actually getting a request from the ToFabFIA.')
cfcPreOc192FabToFabBmaPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabBmaPEs.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabBmaPEs.setDescription('Count of parity errors on cells received from BMA by the ToFabFIA.')
cfcPreOc192FabToFabBmaHskErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabBmaHskErrs.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabBmaHskErrs.setDescription('Count of handshake errors between the BMA/CSAR and the ToFabFIA.')
cfcPreOc192FabToFabUniDestMCRqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabUniDestMCRqs.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabUniDestMCRqs.setDescription('Count of requests with single destination in a multicast request detected by ToFabFIA. The FIA will send this cell to the destination.')
cfcPreOc192FabToFabMultiDstUCRqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabMultiDstUCRqs.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabMultiDstUCRqs.setDescription('Count of requests with multiple destinations in a unicast request detected by a ToFabFIA. The FIA will drop this cell.')
cfcPreOc192FabToFabEmptyDestRqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabToFabEmptyDestRqs.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabToFabEmptyDestRqs.setDescription('Count of requests with empty destination detected by ToFabFIA. The FIA will drop this cell.')
cfcPreOc192FabFrFabTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 2), )
if mibBuilder.loadTexts: cfcPreOc192FabFrFabTable.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabFrFabTable.setDescription('A table providing pre-OC192 FrFabFIA statistics and information in the managed system.')
cfcPreOc192FabFrFabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcPreOc192FabFrFabEntry.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabFrFabEntry.setDescription('An entry providing various statistics and information of pre-OC192 FrFabFIA on an associated linecard identified by entPhysicalIndex.')
cfcPreOc192FabFrFabCellFifoPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabFrFabCellFifoPEs.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabFrFabCellFifoPEs.setDescription('Count of cisco cell fifo parity errors detected by the FrFabFIA while dequeuing cells from the cell fifo.')
cfcPreOc192FabFrFabRedFifoPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabFrFabRedFifoPEs.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabFrFabRedFifoPEs.setDescription('Count of redundant data fifo parity errors detected by the FrFabFIA.')
cfcPreOc192FabFrFabRedFifoOvflws = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabFrFabRedFifoOvflws.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabFrFabRedFifoOvflws.setDescription('Count of redundant data fifo overflow errors detected by the FrFabFIA. This is caused if the back pressure is broken (i.e. the FrFabFIA exerts back pressure and the SCA keeps giving more data to it).')
cfcPreOc192FabFrFabCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192FabFrFabCellDrops.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192FabFrFabCellDrops.setDescription('Count of number of cells dropped by the FrFabFIA. In case of non-redundant fabric configuration, cell drops can occur when a parity error is detected on one or more than one serial link. In case of redundant fabric configuration cell drops can occur when a cell gets corrupted on more than one serial link.')
cfcPreOc192ScaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 2, 1), )
if mibBuilder.loadTexts: cfcPreOc192ScaTable.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192ScaTable.setDescription('A table providing pre-OC192 SCA statistics and information in the managed system.')
cfcPreOc192ScaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcPreOc192ScaEntry.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192ScaEntry.setDescription('An entry providing various statistics and information of pre-OC192 SCA on an associated CSC identified by entPhysicalIndex.')
cfcPreOc192ScaReSyncDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192ScaReSyncDelay.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192ScaReSyncDelay.setDescription("The number of cell periods that the SCA will allow the serial links connected to a module and Xbar to be resynced, if a loss-of-sync has occurred on the corresponding module. The value '0' indicates that on occurrence of LOS, the sca will only log the LOS event and do the scheduling for that module as normal.")
cfcPreOc192ScaLOSLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 2, 1, 1, 2), CfcSlotMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192ScaLOSLog.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192ScaLOSLog.setDescription('Indicates the LOS event occurrence on each linecard connected to this CSC. The corresponding bit is set on occurrence of LOS event on a line card. This object is a read-clear object, that is the value of the object is cleared on every read.')
cfcPreOc192XbarTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 3, 1), )
if mibBuilder.loadTexts: cfcPreOc192XbarTable.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192XbarTable.setDescription('A table providing Pre-OC192 Xbar statistics and information in the managed system.')
cfcPreOc192XbarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcPreOc192XbarEntry.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192XbarEntry.setDescription('An entry providing various statistics and information of Pre-OC192 Xbar on an associated fabric card identified by entPhysicalIndex.')
cfcPreOc192XbarIntrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 3, 1, 1, 1), Bits().clone(namedValues=NamedValues(("frameLossOfSync", 0), ("parityErrorFromSca", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192XbarIntrStatus.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192XbarIntrStatus.setDescription('Indicates the occurrence of different alarm conditions in Xbar. This object is a read-clear object, that is the value of the object is cleared on every read.')
cfcPreOc192XbarParityChkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 2, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcPreOc192XbarParityChkStatus.setStatus('current')
if mibBuilder.loadTexts: cfcPreOc192XbarParityChkStatus.setDescription('Indicates the parity check state in control data received from SCA to the Xbar. true(1) indicates that the parity check is enabled. false(2) indicates that the parity check is disabled.')
cfcOc192FabToFabTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1), )
if mibBuilder.loadTexts: cfcOc192FabToFabTable.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabTable.setDescription('A table providing OC192 ToFabFIA statistics and information in the managed system.')
cfcOc192FabToFabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcOc192FabToFabEntry.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabEntry.setDescription('An entry providing various statistics and information of OC192 ToFabFIA on an associated linecard identified by entPhysicalIndex.')
cfcOc192FabToFabMccDataPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabToFabMccDataPEs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabMccDataPEs.setDescription('Count of the parity errors on data lines from MCC to ToFabFIA. This error would cause the ToFabFIA to halt.')
cfcOc192FabToFabMccCmdPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabToFabMccCmdPEs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabMccCmdPEs.setDescription('Count of the parity errors on command lines from MCC to ToFabFIA. This error would cause the ToFabFIA to halt.')
cfcOc192FabToFabBackPressurePEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabToFabBackPressurePEs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabBackPressurePEs.setDescription('Count of the parity errors on back pressure line from FrFabFIA to ToFabFIA. This error would cause the ToFabFIA to halt.')
cfcOc192FabToFabCellFifoOvFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabToFabCellFifoOvFlws.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabCellFifoOvFlws.setDescription('Count of the cell fifo overflow errors detected by the ToFabFIA. This error would cause the ToFabFIA to halt.')
cfcOc192FabToFabCellFifoUnFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabToFabCellFifoUnFlws.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabCellFifoUnFlws.setDescription('Count of the cell fifo underflow errors detected by the ToFabFIA. This error would cause the ToFabFIA to halt.')
cfcOc192FabToFabMccCmdSeqEndErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabToFabMccCmdSeqEndErrs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabMccCmdSeqEndErrs.setDescription('Count of the illegal sequence of command errors where a middle or start command followed by a start command is received from MCC.')
cfcOc192FabToFabMccCmdSeqStrErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabToFabMccCmdSeqStrErrs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabToFabMccCmdSeqStrErrs.setDescription('Count of the illegal sequence of command errors where an end command followed by an end or middle command is received from MCC.')
cfcOc192FabFrFabTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2), )
if mibBuilder.loadTexts: cfcOc192FabFrFabTable.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabTable.setDescription('A table providing FrFabFIA statistics and information in the managed system.')
cfcOc192FabFrFabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcOc192FabFrFabEntry.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabEntry.setDescription('An entry providing various statistics and information of OC192 FrFabFIA on an associated linecard identified by entPhysicalIndex.')
cfcOc192FabFrFabPktLenErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabPktLenErrs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabPktLenErrs.setDescription('Count of the packets (after reassembly from Cisco cells) which exceed the maximum permitted packet length of FrFabFIA. These packets will be dropped.')
cfcOc192FabFrFabExtRamPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabExtRamPEs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabExtRamPEs.setDescription("Count of the parity errors detected in FrFabFIA's external SRAM.")
cfcOc192FabFrFabPktLenPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabPktLenPEs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabPktLenPEs.setDescription("Count of the parity errors detected in payload packet length field of the FrFabFIA's Payload Header SRAM.")
cfcOc192FabFrFabHdrSramPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabHdrSramPEs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabHdrSramPEs.setDescription("Count of the parity errors detected in payload header field of the FrFabFIA's Payload Header SRAM.")
cfcOc192FabFrFabTxCtrlPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabTxCtrlPEs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabTxCtrlPEs.setDescription('Count of the parity errors detected on the Tx control bits of FrFabFIA.')
cfcOc192FabFrFabHdrFifoOvFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabHdrFifoOvFlws.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabHdrFifoOvFlws.setDescription("Count of the overflow errors in the FrFabFIA's reassembly fifos in the on-chip payload header SRAM.")
cfcOc192FabFrFabExtSramOvFlws = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabExtSramOvFlws.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabExtSramOvFlws.setDescription("Count of the overflow errors in the FrFabFIA's reassembly external SRAM's payload fifos.")
cfcOc192FabFrFabFirstLastErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabFirstLastErrs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabFirstLastErrs.setDescription("Count of the First-Last errors detected by FrFabFIA's. If a first cell is received for a reassembly fifo, while an earlier packet in the same reassembly fifo is still waiting for its last cell, then it is called a First-Last Error.")
cfcOc192FabFrFabSeqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabSeqErrs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabSeqErrs.setDescription('Count of the sequence errors detected by FrFabFIA in the cells received for reassembly. If a cell is received whose sequence number is not an unit increment from the previous cell of the same packet then it is a sequence error.')
cfcOc192FabFrFabSliTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 3), )
if mibBuilder.loadTexts: cfcOc192FabFrFabSliTable.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabSliTable.setDescription('A table providing per serial link information maintained by the OC192 FrFabFIA in the managed system.')
cfcOc192FabFrFabSliEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabSliSwitchIndex"))
if mibBuilder.loadTexts: cfcOc192FabFrFabSliEntry.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabSliEntry.setDescription('An entry providing per serial link information maintained by the OC192 FrFabFIA on an associated linecard identified by entPhysicalIndex.')
cfcOc192FabFrFabSliSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 3, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: cfcOc192FabFrFabSliSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabSliSwitchIndex.setDescription('The entPhysicalIndex of the switch fabric cards (CSC/SFC) present in the monitored system.')
cfcOc192FabFrFabSliXorErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabSliXorErrs.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabSliXorErrs.setDescription('Count of the XOR check errors detected by FrFabFIA reassembly. The data paths are horizontally XORed and the result is expected to match the contents of the redundant path else it is counted as XOR error, this error applies only in redundant mode of fabric.')
cfcOc192FabFrFabSliCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabSliCellDrops.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabSliCellDrops.setDescription('Count of the total cells dropped by the FrFabFIA from the fabric card due to uncorrectable errors. Uncorrectable errors are the errors other than CRC, LOS, Horizontal XOR and idle cell which cannot be corrected.')
cfcOc192FabFrFabStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 4), )
if mibBuilder.loadTexts: cfcOc192FabFrFabStatTable.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabStatTable.setDescription('A table providing per module statistics information maintained by the OC192 FrFabFIA in the managed system.')
cfcOc192FabFrFabStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabStatLCIndex"))
if mibBuilder.loadTexts: cfcOc192FabFrFabStatEntry.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabStatEntry.setDescription('An entry providing per module statistics information maintained by the OC192 FrFabFIA on an associated linecard identified by entPhysicalIndex.')
cfcOc192FabFrFabStatLCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 4, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: cfcOc192FabFrFabStatLCIndex.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabStatLCIndex.setDescription('The entPhysicalIndex of the Line card present in the monitored system.')
cfcOc192FabFrFabStatUCHiPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabStatUCHiPktDrops.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabStatUCHiPktDrops.setDescription('Count of Unicast high priority packets dropped, from source module indicated by cfcOc192FabFrFabStatLCIndex.')
cfcOc192FabFrFabStatUCLoPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabStatUCLoPktDrops.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabStatUCLoPktDrops.setDescription('Count of Unicast low priority packets dropped, from source module indicated by cfcOc192FabFrFabStatLCIndex.')
cfcOc192FabFrFabStatMCHiPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabStatMCHiPktDrops.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabStatMCHiPktDrops.setDescription('Count of Multicast high priority packets dropped, from source module indicated by cfcOc192FabFrFabStatLCIndex.')
cfcOc192FabFrFabStatMCLoPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192FabFrFabStatMCLoPktDrops.setStatus('current')
if mibBuilder.loadTexts: cfcOc192FabFrFabStatMCLoPktDrops.setDescription('Count of Multicast low priority packets dropped, from source module indicated by cfcOc192FabFrFabStatLCIndex.')
cfcOc192ScaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 2, 1), )
if mibBuilder.loadTexts: cfcOc192ScaTable.setStatus('current')
if mibBuilder.loadTexts: cfcOc192ScaTable.setDescription('A table providing OC192 SCA statistics and information in the managed system.')
cfcOc192ScaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcOc192ScaEntry.setStatus('current')
if mibBuilder.loadTexts: cfcOc192ScaEntry.setDescription('An entry providing various statistics and information of OC192 SCA on an associated CSC identified by entPhysicalIndex.')
cfcOc192ScaRotationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192ScaRotationPeriod.setStatus('current')
if mibBuilder.loadTexts: cfcOc192ScaRotationPeriod.setDescription('Determines the period of rotating the priority between Unicast and Multicast, in cell periods, when the SCA is configured with alternating priority mode. For example, if the value of this object is 63 then the priority will change every 64 cell periods, if the value is 0 then the priority will change every cell period.')
cfcOc192ScaDisableGrants = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 2, 1, 1, 2), CfcSlotMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192ScaDisableGrants.setStatus('current')
if mibBuilder.loadTexts: cfcOc192ScaDisableGrants.setDescription('Indicates the disable of grants by SCA to any requests coming from a specific module. The corresponding bit is set for each module.')
cfcOc192XbarTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 3, 1), )
if mibBuilder.loadTexts: cfcOc192XbarTable.setStatus('current')
if mibBuilder.loadTexts: cfcOc192XbarTable.setDescription('A table providing OC192 Xbar statistics and information in the managed system.')
cfcOc192XbarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfcOc192XbarEntry.setStatus('current')
if mibBuilder.loadTexts: cfcOc192XbarEntry.setDescription('An entry providing various statistics and information of OC192 Xbar on an associated fabric card identified by entPhysicalIndex.')
cfcOc192XbarCtrlLOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 3, 1, 1, 1), Bits().clone(namedValues=NamedValues(("frameLosErr", 0), ("sliErrorOnControlLink0", 1), ("sliErrorOnControlLink1", 2), ("sliErrorOnControlLink2", 3), ("sliErrorOnControlLink3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192XbarCtrlLOSStatus.setStatus('current')
if mibBuilder.loadTexts: cfcOc192XbarCtrlLOSStatus.setDescription('Indicates the occurrence of LOS errors on the control path of Xbar. frameLosErr (0) -- Frame LOS error. sliErrorOnControlLink0 (1) -- LOS detected on SLI control link 0. sliErrorOnControlLink1 (2) -- LOS detected on SLI control link 1. sliErrorOnControlLink2 (3) -- LOS detected on SLI control link 2. sliErrorOnControlLink3 (4) -- LOS detected on SLI control link 3. This object is a read-clear object, that is the value of the object is cleared on every read.')
cfcOc192XbarCtrlCRCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 3, 3, 1, 1, 2), Bits().clone(namedValues=NamedValues(("ctlCrcErrorLink0", 0), ("ctlCrcErrorLink1", 1), ("ctlCrcErrorLink2", 2), ("ctlCrcErrorLink3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcOc192XbarCtrlCRCErr.setStatus('current')
if mibBuilder.loadTexts: cfcOc192XbarCtrlCRCErr.setDescription('Indicates the occurrence of CRC error on any of the four control links. This object is a read-clear object, that is the value of the object is cleared on every read.')
cfcNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 281, 1, 4, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfcNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cfcNotifEnable.setDescription('This variable indicates whether the system produces the notifications defined in the MIB. A false value will prevent the notifications in the MIB from being generated by the system.')
ciscoFabricC12kMIBFabMasterSchCh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 281, 0, 1)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcGenericGlobalFabMasterSched"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: ciscoFabricC12kMIBFabMasterSchCh.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kMIBFabMasterSchCh.setDescription('This notification is generated when master scheduler on the system changes. It typically indicates the switchover of the scheduler card. cfcGenericGlobalFabMasterSched represents the entPhysicalIndex of the new master scheduler card, while entPhysicalName represents the entity physical name of the card. The case of all scheduler cards going down would be represented by a value 0 for the cfcGenericGlobalFabMasterSched and noSuchInstance for the entPhysicalName.')
ciscoFabricC12kMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 1))
ciscoFabricC12kMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2))
ciscoFabricC12kMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 1, 1)).setObjects(("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kGlobalGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kFiaGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kScaGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kXbarGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kPreOc192FiaGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kNotifEnableGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kNotifGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kPreOc192ScaGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kPreOc192XbarGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kOc192FiaGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kOc192LCGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kOc192ScaGroup"), ("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kOc192XbarGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kMIBCompliance = ciscoFabricC12kMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-FABRIC-C12K-MIB.')
ciscoFabricC12kGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 1)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcGenericGlobalFabConfigMode"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericGlobalFabMasterSched"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kGlobalGroup = ciscoFabricC12kGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kGlobalGroup.setDescription('A collection of Global fabric configuration objects.')
ciscoFabricC12kFiaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 2)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcGenericFabToFabState"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericFabToFabGrantPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericFabToFabRequestPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericFabToFabCellFifoPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericFabFrFabState"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericFabFrFabSliLOSErrors"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericFabFrFabSliCRCErrors"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericFabFrFabSliLOSState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kFiaGroup = ciscoFabricC12kFiaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kFiaGroup.setDescription('A collection of generic FIA status and statistics objects.')
ciscoFabricC12kScaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 3)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcGenericScaIdentifier"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericScaIntrStatus"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericScaIntrsEnabled"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericScaConfig"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericScaPELog"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericScaFifoOverflowLog"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericScaLCsEnabled"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericScaForcedBackPressure"), ("CISCO-FABRIC-C12K-MIB", "cfcGenericScaPreOc192LCsPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kScaGroup = ciscoFabricC12kScaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kScaGroup.setDescription('A collection of generic SCA status objects.')
ciscoFabricC12kXbarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 4)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcGenericXbarIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kXbarGroup = ciscoFabricC12kXbarGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kXbarGroup.setDescription('A collection of generic Xbar status objects.')
ciscoFabricC12kPreOc192FiaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 5)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabScaLosts"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabUCFifoOvFlws"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabUCFifoUnFlws"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabMCFifoErrs"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabBmaPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabBmaHskErrs"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabUniDestMCRqs"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabMultiDstUCRqs"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabToFabEmptyDestRqs"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabFrFabCellFifoPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabFrFabRedFifoPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabFrFabRedFifoOvflws"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192FabFrFabCellDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kPreOc192FiaGroup = ciscoFabricC12kPreOc192FiaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kPreOc192FiaGroup.setDescription('A collection of pre-OC192 FIA status and statistics objects.')
ciscoFabricC12kPreOc192ScaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 6)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcPreOc192ScaReSyncDelay"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192ScaLOSLog"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kPreOc192ScaGroup = ciscoFabricC12kPreOc192ScaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kPreOc192ScaGroup.setDescription('A collection of Pre-OC192 SCA status objects.')
ciscoFabricC12kPreOc192XbarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 7)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcPreOc192XbarIntrStatus"), ("CISCO-FABRIC-C12K-MIB", "cfcPreOc192XbarParityChkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kPreOc192XbarGroup = ciscoFabricC12kPreOc192XbarGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kPreOc192XbarGroup.setDescription('A collection of Pre-Oc192 Xbar status objects.')
ciscoFabricC12kOc192FiaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 8)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcOc192FabToFabMccDataPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabToFabMccCmdPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabToFabBackPressurePEs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabToFabCellFifoOvFlws"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabToFabCellFifoUnFlws"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabToFabMccCmdSeqEndErrs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabToFabMccCmdSeqStrErrs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabPktLenErrs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabExtRamPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabPktLenPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabHdrSramPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabTxCtrlPEs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabHdrFifoOvFlws"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabExtSramOvFlws"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabFirstLastErrs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabSeqErrs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabSliXorErrs"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabSliCellDrops"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabStatUCHiPktDrops"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabStatUCLoPktDrops"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabStatMCHiPktDrops"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192FabFrFabStatMCLoPktDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kOc192FiaGroup = ciscoFabricC12kOc192FiaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kOc192FiaGroup.setDescription('A collection of OC192 FIA status and statistics objects.')
ciscoFabricC12kOc192LCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 9)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcGenericScaOc192LCsPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kOc192LCGroup = ciscoFabricC12kOc192LCGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kOc192LCGroup.setDescription('A collection of OC192 linecard generic objects.')
ciscoFabricC12kOc192ScaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 10)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcOc192ScaRotationPeriod"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192ScaDisableGrants"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kOc192ScaGroup = ciscoFabricC12kOc192ScaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kOc192ScaGroup.setDescription('A collection of OC192 SCA status objects.')
ciscoFabricC12kOc192XbarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 11)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcOc192XbarCtrlLOSStatus"), ("CISCO-FABRIC-C12K-MIB", "cfcOc192XbarCtrlCRCErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kOc192XbarGroup = ciscoFabricC12kOc192XbarGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kOc192XbarGroup.setDescription('A collection of OC192 Xbar status objects.')
ciscoFabricC12kNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 12)).setObjects(("CISCO-FABRIC-C12K-MIB", "cfcNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kNotifEnableGroup = ciscoFabricC12kNotifEnableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kNotifEnableGroup.setDescription('The collection of objects which are used to control generation of notification.')
ciscoFabricC12kNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 281, 2, 2, 13)).setObjects(("CISCO-FABRIC-C12K-MIB", "ciscoFabricC12kMIBFabMasterSchCh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFabricC12kNotifGroup = ciscoFabricC12kNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFabricC12kNotifGroup.setDescription('A collection of notifications generated by the devices supporting this MIB.')
mibBuilder.exportSymbols("CISCO-FABRIC-C12K-MIB", cfcPreOc192FabToFabBmaPEs=cfcPreOc192FabToFabBmaPEs, cfcPreOc192FabToFabScaLosts=cfcPreOc192FabToFabScaLosts, cfcOc192Sca=cfcOc192Sca, cfcGenericFabToFabGrantPEs=cfcGenericFabToFabGrantPEs, cfcGenericFabToFabRequestPEs=cfcGenericFabToFabRequestPEs, cfcOc192FabFrFabPktLenPEs=cfcOc192FabFrFabPktLenPEs, cfcGenericFabFrFabSliLOSErrors=cfcGenericFabFrFabSliLOSErrors, ciscoFabricC12kMIBNotifs=ciscoFabricC12kMIBNotifs, cfcOc192FabToFabMccDataPEs=cfcOc192FabToFabMccDataPEs, cfcOc192ScaEntry=cfcOc192ScaEntry, ciscoFabricC12kOc192FiaGroup=ciscoFabricC12kOc192FiaGroup, cfcOc192XbarCtrlCRCErr=cfcOc192XbarCtrlCRCErr, cfcGenericGlobal=cfcGenericGlobal, cfcPreOc192FabFrFabRedFifoPEs=cfcPreOc192FabFrFabRedFifoPEs, cfcGenericFabFrFabTable=cfcGenericFabFrFabTable, cfcPreOc192XbarIntrStatus=cfcPreOc192XbarIntrStatus, cfcGenericScaPreOc192LCsPresent=cfcGenericScaPreOc192LCsPresent, cfcOc192FabToFabEntry=cfcOc192FabToFabEntry, cfcNotifEnable=cfcNotifEnable, cfcOc192FabToFabTable=cfcOc192FabToFabTable, ciscoFabricC12kPreOc192FiaGroup=ciscoFabricC12kPreOc192FiaGroup, cfcPreOc192Xbar=cfcPreOc192Xbar, cfcOc192FabFrFabSliCellDrops=cfcOc192FabFrFabSliCellDrops, cfcPreOc192FabToFabEntry=cfcPreOc192FabToFabEntry, cfcGenericScaTable=cfcGenericScaTable, cfcOc192FabFrFabSliTable=cfcOc192FabFrFabSliTable, cfcPreOc192Fab=cfcPreOc192Fab, cfcOc192FabFrFabSliXorErrs=cfcOc192FabFrFabSliXorErrs, cfcOc192FabToFabCellFifoUnFlws=cfcOc192FabToFabCellFifoUnFlws, cfcOc192FabFrFabPktLenErrs=cfcOc192FabFrFabPktLenErrs, cfcGenericFabFrFabState=cfcGenericFabFrFabState, cfcPreOc192ScaLOSLog=cfcPreOc192ScaLOSLog, cfcOc192FabToFabBackPressurePEs=cfcOc192FabToFabBackPressurePEs, cfcPreOc192FabToFabUCFifoOvFlws=cfcPreOc192FabToFabUCFifoOvFlws, cfcOc192FabToFabMccCmdPEs=cfcOc192FabToFabMccCmdPEs, cfcPreOc192FabFrFabCellDrops=cfcPreOc192FabFrFabCellDrops, cfcGenericScaIdentifier=cfcGenericScaIdentifier, cfcOc192FabFrFabSliSwitchIndex=cfcOc192FabFrFabSliSwitchIndex, cfcOc192Xbar=cfcOc192Xbar, cfcGenericScaConfig=cfcGenericScaConfig, cfcPreOc192FabFrFabCellFifoPEs=cfcPreOc192FabFrFabCellFifoPEs, cfcGenericGlobalFabMasterSched=cfcGenericGlobalFabMasterSched, cfcOc192FabFrFabExtSramOvFlws=cfcOc192FabFrFabExtSramOvFlws, cfcOc192FabFrFabTxCtrlPEs=cfcOc192FabFrFabTxCtrlPEs, cfcOc192FabFrFabHdrFifoOvFlws=cfcOc192FabFrFabHdrFifoOvFlws, cfcPreOc192FabFrFabTable=cfcPreOc192FabFrFabTable, cfcGenericScaPELog=cfcGenericScaPELog, cfcOc192FabFrFabStatUCLoPktDrops=cfcOc192FabFrFabStatUCLoPktDrops, cfcPreOc192FabToFabTable=cfcPreOc192FabToFabTable, CfcSlotMask=CfcSlotMask, cfcOc192FabFrFabStatMCHiPktDrops=cfcOc192FabFrFabStatMCHiPktDrops, cfcGenericFabFrFabSliEntry=cfcGenericFabFrFabSliEntry, cfcPreOc192FabToFabEmptyDestRqs=cfcPreOc192FabToFabEmptyDestRqs, cfcPreOc192XbarEntry=cfcPreOc192XbarEntry, ciscoFabricC12kPreOc192XbarGroup=ciscoFabricC12kPreOc192XbarGroup, CfcScaInterrupts=CfcScaInterrupts, ciscoFabricC12kMIB=ciscoFabricC12kMIB, cfcPreOc192ScaTable=cfcPreOc192ScaTable, cfcOc192FabFrFabTable=cfcOc192FabFrFabTable, cfcOc192FabFrFabSeqErrs=cfcOc192FabFrFabSeqErrs, ciscoFabricC12kScaGroup=ciscoFabricC12kScaGroup, cfcGenericScaIntrsEnabled=cfcGenericScaIntrsEnabled, cfcPreOc192FabToFabMCFifoErrs=cfcPreOc192FabToFabMCFifoErrs, cfcOc192FabFrFabStatUCHiPktDrops=cfcOc192FabFrFabStatUCHiPktDrops, ciscoFabricC12kMIBCompliances=ciscoFabricC12kMIBCompliances, cfcGenericScaIntrStatus=cfcGenericScaIntrStatus, cfcOc192ScaDisableGrants=cfcOc192ScaDisableGrants, ciscoFabricC12kMIBFabMasterSchCh=ciscoFabricC12kMIBFabMasterSchCh, cfcGenericFabFrFabEntry=cfcGenericFabFrFabEntry, cfcGeneric=cfcGeneric, cfcGenericXbarEntry=cfcGenericXbarEntry, cfcNotif=cfcNotif, cfcPreOc192FabFrFabRedFifoOvflws=cfcPreOc192FabFrFabRedFifoOvflws, cfcGenericScaOc192LCsPresent=cfcGenericScaOc192LCsPresent, cfcPreOc192XbarTable=cfcPreOc192XbarTable, cfcPreOc192XbarParityChkStatus=cfcPreOc192XbarParityChkStatus, cfcGenericFabFrFabSliFabIndex=cfcGenericFabFrFabSliFabIndex, cfcPreOc192Sca=cfcPreOc192Sca, CfcFabricConfigMode=CfcFabricConfigMode, cfcGenericScaFifoOverflowLog=cfcGenericScaFifoOverflowLog, cfcOc192FabFrFabHdrSramPEs=cfcOc192FabFrFabHdrSramPEs, cfcGenericSca=cfcGenericSca, cfcOc192FabFrFabSliEntry=cfcOc192FabFrFabSliEntry, ciscoFabricC12kFiaGroup=ciscoFabricC12kFiaGroup, ciscoFabricC12kNotifEnableGroup=ciscoFabricC12kNotifEnableGroup, cfcOc192FabFrFabFirstLastErrs=cfcOc192FabFrFabFirstLastErrs, cfcOc192FabFrFabStatTable=cfcOc192FabFrFabStatTable, ciscoFabricC12kMIBCompliance=ciscoFabricC12kMIBCompliance, PYSNMP_MODULE_ID=ciscoFabricC12kMIB, cfcOc192FabFrFabStatEntry=cfcOc192FabFrFabStatEntry, cfcGenericScaForcedBackPressure=cfcGenericScaForcedBackPressure, ciscoFabricC12kPreOc192ScaGroup=ciscoFabricC12kPreOc192ScaGroup, cfcPreOc192FabToFabMultiDstUCRqs=cfcPreOc192FabToFabMultiDstUCRqs, cfcPreOc192ScaEntry=cfcPreOc192ScaEntry, cfcOc192FabFrFabStatMCLoPktDrops=cfcOc192FabFrFabStatMCLoPktDrops, cfcOc192Fab=cfcOc192Fab, ciscoFabricC12kGlobalGroup=ciscoFabricC12kGlobalGroup, cfcPreOc192FabFrFabEntry=cfcPreOc192FabFrFabEntry, cfcOc192FabToFabCellFifoOvFlws=cfcOc192FabToFabCellFifoOvFlws, cfcGenericXbarIdentifier=cfcGenericXbarIdentifier, ciscoFabricC12kMIBConform=ciscoFabricC12kMIBConform, cfcPreOc192=cfcPreOc192, cfcGenericXbar=cfcGenericXbar, ciscoFabricC12kMIBGroups=ciscoFabricC12kMIBGroups, cfcOc192=cfcOc192, ciscoFabricC12kMIBObjects=ciscoFabricC12kMIBObjects, cfcGenericFabFrFabSliTable=cfcGenericFabFrFabSliTable, ciscoFabricC12kNotifGroup=ciscoFabricC12kNotifGroup, cfcOc192ScaRotationPeriod=cfcOc192ScaRotationPeriod, cfcGenericFabFrFabSliCRCErrors=cfcGenericFabFrFabSliCRCErrors, cfcGenericFabToFabState=cfcGenericFabToFabState, cfcPreOc192ScaReSyncDelay=cfcPreOc192ScaReSyncDelay, cfcGenericFab=cfcGenericFab, cfcOc192FabToFabMccCmdSeqStrErrs=cfcOc192FabToFabMccCmdSeqStrErrs, cfcGenericFabToFabTable=cfcGenericFabToFabTable, cfcOc192FabFrFabExtRamPEs=cfcOc192FabFrFabExtRamPEs, cfcGenericFabToFabCellFifoPEs=cfcGenericFabToFabCellFifoPEs, cfcOc192XbarCtrlLOSStatus=cfcOc192XbarCtrlLOSStatus, ciscoFabricC12kOc192LCGroup=ciscoFabricC12kOc192LCGroup, cfcOc192XbarEntry=cfcOc192XbarEntry, cfcGenericFabFrFabSliLOSState=cfcGenericFabFrFabSliLOSState, cfcOc192XbarTable=cfcOc192XbarTable, cfcOc192FabFrFabEntry=cfcOc192FabFrFabEntry, cfcOc192FabToFabMccCmdSeqEndErrs=cfcOc192FabToFabMccCmdSeqEndErrs, cfcGenericScaEntry=cfcGenericScaEntry, ciscoFabricC12kXbarGroup=ciscoFabricC12kXbarGroup, ciscoFabricC12kOc192ScaGroup=ciscoFabricC12kOc192ScaGroup, cfcGenericScaLCsEnabled=cfcGenericScaLCsEnabled, cfcPreOc192FabToFabBmaHskErrs=cfcPreOc192FabToFabBmaHskErrs, cfcGenericXbarTable=cfcGenericXbarTable, cfcGenericGlobalFabConfigMode=cfcGenericGlobalFabConfigMode, cfcPreOc192FabToFabUCFifoUnFlws=cfcPreOc192FabToFabUCFifoUnFlws, cfcPreOc192FabToFabUniDestMCRqs=cfcPreOc192FabToFabUniDestMCRqs, cfcOc192FabFrFabStatLCIndex=cfcOc192FabFrFabStatLCIndex, cfcOc192ScaTable=cfcOc192ScaTable, CfcFabricFiaState=CfcFabricFiaState, cfcGenericFabToFabEntry=cfcGenericFabToFabEntry, ciscoFabricC12kOc192XbarGroup=ciscoFabricC12kOc192XbarGroup)
