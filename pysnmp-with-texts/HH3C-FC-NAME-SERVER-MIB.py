#
# PySNMP MIB module HH3C-FC-NAME-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-FC-NAME-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
Hh3cFcNameId, = mibBuilder.importSymbols("HH3C-FC-TC-MIB", "Hh3cFcNameId")
hh3cVsanIndex, hh3cSan = mibBuilder.importSymbols("HH3C-VSAN-MIB", "hh3cVsanIndex", "hh3cSan")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Bits, Integer32, Counter64, ModuleIdentity, Unsigned32, IpAddress, NotificationType, Counter32, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Bits", "Integer32", "Counter64", "ModuleIdentity", "Unsigned32", "IpAddress", "NotificationType", "Counter32", "TimeTicks", "Gauge32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hh3cFcNameServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10))
hh3cFcNameServer.setRevisions(('2014-03-03 10:18',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cFcNameServer.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hh3cFcNameServer.setLastUpdated('201403031018Z')
if mibBuilder.loadTexts: hh3cFcNameServer.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cFcNameServer.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cFcNameServer.setDescription('This MIB module is intended for the management of Fibre Channel (FC) Name Server.')
hh3cFcNameServerMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1))
hh3cFcNsNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1))
hh3cFcNsNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 0))
hh3cFcNsNotificationSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 1))
hh3cFcNsObjsForNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 2))
hh3cFcNsPortLoginNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 0, 1)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-FC-NAME-SERVER-MIB", "hh3cFcNsLocalSwitchWWN"), ("HH3C-FC-NAME-SERVER-MIB", "hh3cFcNsFloginPortWWN"))
if mibBuilder.loadTexts: hh3cFcNsPortLoginNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cFcNsPortLoginNotify.setDescription('This notification will be generated when an entry is added to the Name Server database by Nx_Port locally logging in.')
hh3cFcNsPortLogoutNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 0, 2)).setObjects(("HH3C-VSAN-MIB", "hh3cVsanIndex"), ("HH3C-FC-NAME-SERVER-MIB", "hh3cFcNsLocalSwitchWWN"), ("HH3C-FC-NAME-SERVER-MIB", "hh3cFcNsFloginPortWWN"))
if mibBuilder.loadTexts: hh3cFcNsPortLogoutNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cFcNsPortLogoutNotify.setDescription('This notification will be generated when an entry is deleted from the Name Server database by Nx_Port locally logging out.')
hh3cFcNsPortLoginNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcNsPortLoginNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcNsPortLoginNotifyEnable.setDescription('This object is used to determine whether hh3cFcNsPortLoginNotify will be generated for Nx_Port locally logging in.')
hh3cFcNsPortLogoutNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFcNsPortLogoutNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcNsPortLogoutNotifyEnable.setDescription('This object is used to determine whether hh3cFcNsPortLogoutNotify will be generated for Nx_Port locally logging out.')
hh3cFcNsLocalSwitchWWN = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 2, 1), Hh3cFcNameId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cFcNsLocalSwitchWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cFcNsLocalSwitchWWN.setDescription('The world wide name of the local switch.')
hh3cFcNsFloginPortWWN = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 127, 10, 1, 1, 2, 2), Hh3cFcNameId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cFcNsFloginPortWWN.setStatus('current')
if mibBuilder.loadTexts: hh3cFcNsFloginPortWWN.setDescription('The world wide name of the local logged-in Nx_Port.')
mibBuilder.exportSymbols("HH3C-FC-NAME-SERVER-MIB", PYSNMP_MODULE_ID=hh3cFcNameServer, hh3cFcNsPortLogoutNotifyEnable=hh3cFcNsPortLogoutNotifyEnable, hh3cFcNsLocalSwitchWWN=hh3cFcNsLocalSwitchWWN, hh3cFcNsNotificationPrefix=hh3cFcNsNotificationPrefix, hh3cFcNsPortLoginNotify=hh3cFcNsPortLoginNotify, hh3cFcNsNotification=hh3cFcNsNotification, hh3cFcNsFloginPortWWN=hh3cFcNsFloginPortWWN, hh3cFcNsPortLogoutNotify=hh3cFcNsPortLogoutNotify, hh3cFcNsObjsForNotification=hh3cFcNsObjsForNotification, hh3cFcNsPortLoginNotifyEnable=hh3cFcNsPortLoginNotifyEnable, hh3cFcNameServerMibObjects=hh3cFcNameServerMibObjects, hh3cFcNsNotificationSwitch=hh3cFcNsNotificationSwitch, hh3cFcNameServer=hh3cFcNameServer)
