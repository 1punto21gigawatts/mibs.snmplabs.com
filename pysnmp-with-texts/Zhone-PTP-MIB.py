#
# PySNMP MIB module Zhone-PTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Zhone-PTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:52:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, MibIdentifier, Counter64, Unsigned32, IpAddress, Counter32, NotificationType, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "MibIdentifier", "Counter64", "Unsigned32", "IpAddress", "Counter32", "NotificationType", "Integer32", "Gauge32")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
zhoneGroups, zhonePtp, zhoneShelfSlotGroup, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneGroups", "zhonePtp", "zhoneShelfSlotGroup", "zhoneModules")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhonePtpModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 119))
zhonePtpModule.setRevisions(('2013-05-09 15:15', '2012-01-13 14:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhonePtpModule.setRevisionsDescriptions(('Add ipIfindex & acceptable master fields to ptp', 'Initial Revision.',))
if mibBuilder.loadTexts: zhonePtpModule.setLastUpdated('201205091450Z')
if mibBuilder.loadTexts: zhonePtpModule.setOrganization('Zhone Technologies.')
if mibBuilder.loadTexts: zhonePtpModule.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: zhonePtpModule.setDescription("Managed data objects for Zhone's 1588 Precision Timing Protocol.")
zhonePtpObjectID = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1))
zhonePtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1), )
if mibBuilder.loadTexts: zhonePtpConfigTable.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigTable.setDescription('Table of configuration values for the Precision Timing Protocol.')
zhonePtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1), ).setIndexNames((0, "Zhone-PTP-MIB", "zhonePtpConfigIfIndex"))
if mibBuilder.loadTexts: zhonePtpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigEntry.setDescription('Row in the PtpConfigTable')
zhonePtpConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhonePtpConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigIfIndex.setDescription('Index for this table.')
zhonePtpConfigClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("boundary", 3), ("transparent", 4), ("forward", 5))).clone('slave')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigClockMode.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigClockMode.setDescription('Describes the mode and function of this clock.')
zhonePtpConfigSyncMsgInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127)).clone(-5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigSyncMsgInterval.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigSyncMsgInterval.setDescription('Log of mean time interval between successive Sync messages when transmitted as multicast messages.')
zhonePtpConfigAnnounceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigAnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigAnnounceInterval.setDescription('Log of time, in seconds, to send announce messages.')
zhonePtpConfigDelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigDelayReqInterval.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigDelayReqInterval.setDescription('Log of minimum permitted mean time between successive Delay_Req messages sent by a slave to a specific port on the master.')
zhonePtpConfigDomain1MS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigDomain1MS.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigDomain1MS.setDescription('The domain for this PTP. If clockMode is boundary, then this is the domain for the slave port.')
zhonePtpConfigVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32767)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigVariance.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigVariance.setDescription('Log of variance used in determination of the best master clock.')
zhonePtpConfigPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigPriority1.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigPriority1.setDescription('Precedence value used in best master algorithm, if master.')
zhonePtpConfigPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigPriority2.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigPriority2.setDescription('Precedence used in best master determination, if master')
zhonePtpConfigDomain2M = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigDomain2M.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigDomain2M.setDescription('If clockMode is boundary, then this is the domain for the master port. Otherwise, it is unused.')
zhonePtpConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 11), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigRowStatus.setDescription('Row status for this table.')
zhonePtpConfigIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 12), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigIpIfIndex.setDescription('The management ip index on this system.')
zhonePtpConfigAcceptableMaster1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigAcceptableMaster1.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigAcceptableMaster1.setDescription('First acceptable PTP master.')
zhonePtpConfigAcceptableMaster2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 1, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePtpConfigAcceptableMaster2.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigAcceptableMaster2.setDescription('Second acceptable PTP master.')
zhonePtpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 2), )
if mibBuilder.loadTexts: zhonePtpStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhonePtpStatusTable.setDescription('The read-only attributes associated with the 1588 module.')
zhonePtpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 2, 1), ).setIndexNames((0, "Zhone-PTP-MIB", "zhonePtpConfigIfIndex"))
if mibBuilder.loadTexts: zhonePtpStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhonePtpStatusEntry.setDescription('A row in the zhonePtpStatusTable')
zhonePtpStatusMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePtpStatusMacAddress.setStatus('current')
if mibBuilder.loadTexts: zhonePtpStatusMacAddress.setDescription('The ptpMacAddr is used to set the PTP ClockIdentifier defined in the PTP standard. It identifies the clock in the PTP network and as such should be unique within the PTP network. ')
zhonePtpConfigTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("atom", 1), ("gps", 2), ("radio", 3), ("ptp", 4), ("ntp", 5), ("handSet", 6), ("other", 7), ("internalOscillator", 8))).clone('internalOscillator')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePtpConfigTimeSource.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigTimeSource.setDescription('Time source for the PTP.')
zhonePtpConfigClockStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("force", 1), ("primaryReference", 2), ("secondaryReference", 3), ("bestClockStratumThatCanBeSlave", 4), ("stratum3", 5), ("stratum4", 6), ("defaultStratum", 7))).clone('defaultStratum')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePtpConfigClockStratum.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigClockStratum.setDescription('Indicates the stratum level of the local clock.')
zhonePtpConfigClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("nSec25", 1), ("nSec100", 2), ("nSec250", 3), ("uSec1", 4), ("uSec2point5", 5), ("uSec10", 6), ("uSec25", 7), ("uSec100", 8), ("uSec250", 9), ("mSec1", 10), ("mSec2point5", 11), ("mSec10", 12), ("mSec25", 13), ("mSec100", 14), ("mSec250", 15), ("sec1", 16), ("sec10", 17), ("gT10S", 18), ("accUnknown", 19))).clone('accUnknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePtpConfigClockAccuracy.setStatus('current')
if mibBuilder.loadTexts: zhonePtpConfigClockAccuracy.setDescription('Accuracy of this clock. Used in determining best master clock.')
zhonePtpStatusTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 17, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("uniOnly", 2), ("multiOnly", 3))).clone('standard')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePtpStatusTxMode.setStatus('current')
if mibBuilder.loadTexts: zhonePtpStatusTxMode.setDescription('By default, Semtech sends multicast messages (e.g. Announce Messages) if they are meant for more than one node. Messages destined to a single node are sent as unicast messages. If we want to support Acceptable Master and Slave tables, we need the uniOnly option.')
zhonePtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 52)).setObjects(("Zhone-PTP-MIB", "zhonePtpConfigClockMode"), ("Zhone-PTP-MIB", "zhonePtpConfigIpIfIndex"), ("Zhone-PTP-MIB", "zhonePtpConfigSyncMsgInterval"), ("Zhone-PTP-MIB", "zhonePtpConfigAnnounceInterval"), ("Zhone-PTP-MIB", "zhonePtpConfigDelayReqInterval"), ("Zhone-PTP-MIB", "zhonePtpConfigTimeSource"), ("Zhone-PTP-MIB", "zhonePtpConfigClockStratum"), ("Zhone-PTP-MIB", "zhonePtpConfigClockAccuracy"), ("Zhone-PTP-MIB", "zhonePtpConfigVariance"), ("Zhone-PTP-MIB", "zhonePtpConfigPriority1"), ("Zhone-PTP-MIB", "zhonePtpConfigPriority2"), ("Zhone-PTP-MIB", "zhonePtpConfigRowStatus"), ("Zhone-PTP-MIB", "zhonePtpStatusTxMode"), ("Zhone-PTP-MIB", "zhonePtpStatusMacAddress"), ("Zhone-PTP-MIB", "zhonePtpConfigDomain2M"), ("Zhone-PTP-MIB", "zhonePtpConfigDomain1MS"), ("Zhone-PTP-MIB", "zhonePtpConfigAcceptableMaster1"), ("Zhone-PTP-MIB", "zhonePtpConfigAcceptableMaster2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhonePtpGroup = zhonePtpGroup.setStatus('current')
if mibBuilder.loadTexts: zhonePtpGroup.setDescription('Object groups for ptp objects.')
mibBuilder.exportSymbols("Zhone-PTP-MIB", PYSNMP_MODULE_ID=zhonePtpModule, zhonePtpConfigVariance=zhonePtpConfigVariance, zhonePtpStatusMacAddress=zhonePtpStatusMacAddress, zhonePtpConfigTable=zhonePtpConfigTable, zhonePtpModule=zhonePtpModule, zhonePtpConfigEntry=zhonePtpConfigEntry, zhonePtpConfigDelayReqInterval=zhonePtpConfigDelayReqInterval, zhonePtpConfigSyncMsgInterval=zhonePtpConfigSyncMsgInterval, zhonePtpConfigClockStratum=zhonePtpConfigClockStratum, zhonePtpObjectID=zhonePtpObjectID, zhonePtpConfigClockAccuracy=zhonePtpConfigClockAccuracy, zhonePtpConfigRowStatus=zhonePtpConfigRowStatus, zhonePtpConfigIfIndex=zhonePtpConfigIfIndex, zhonePtpConfigDomain2M=zhonePtpConfigDomain2M, zhonePtpConfigDomain1MS=zhonePtpConfigDomain1MS, zhonePtpConfigAcceptableMaster2=zhonePtpConfigAcceptableMaster2, zhonePtpStatusTable=zhonePtpStatusTable, zhonePtpConfigTimeSource=zhonePtpConfigTimeSource, zhonePtpConfigClockMode=zhonePtpConfigClockMode, zhonePtpConfigAnnounceInterval=zhonePtpConfigAnnounceInterval, zhonePtpConfigPriority2=zhonePtpConfigPriority2, zhonePtpGroup=zhonePtpGroup, zhonePtpConfigAcceptableMaster1=zhonePtpConfigAcceptableMaster1, zhonePtpStatusEntry=zhonePtpStatusEntry, zhonePtpStatusTxMode=zhonePtpStatusTxMode, zhonePtpConfigIpIfIndex=zhonePtpConfigIpIfIndex, zhonePtpConfigPriority1=zhonePtpConfigPriority1)
