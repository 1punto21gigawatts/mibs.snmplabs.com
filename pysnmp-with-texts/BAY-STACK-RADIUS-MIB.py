#
# PySNMP MIB module BAY-STACK-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:36:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
radiusDynAuthClientEntry, = mibBuilder.importSymbols("RADIUS-DYNAUTH-SERVER-MIB", "radiusDynAuthClientEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, TimeTicks, MibIdentifier, ModuleIdentity, NotificationType, iso, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "NotificationType", "iso", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "Gauge32", "Bits")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackRadiusMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 21))
bayStackRadiusMib.setRevisions(('2015-07-23 00:00', '2014-10-20 00:00', '2012-03-15 00:00', '2010-10-15 00:00', '2010-10-14 00:00', '2010-09-07 00:00', '2010-02-10 00:00', '2009-10-13 00:00', '2009-05-28 00:00', '2009-04-16 00:00', '2009-03-30 00:00', '2008-10-30 00:00', '2008-05-29 00:00', '2008-03-25 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackRadiusMib.setRevisionsDescriptions(('Ver 15: Added bsRadiusExtDynAuthClientEntry, bsRadiusDynAuthClientProcessReAuthRequests .', 'Ver 14: Added bsRadiusReachabilityTimeout bsRadiusReachabilityRetry bsRadiusReachabilityBadTimer bsRadiusReachabilityGoodTimer .', 'Ver 13: Added bsRadiusEncapsulationProtocol.', 'Ver 12: Added notification types for reachability up/down.', 'Ver 11: Added additional radius server settings.', 'Ver 10: Added bsRadiusReachabilityUserName and bsRadiusReachabilityPassword.', 'Ver 9: Added bsRadiusReachability.', 'Ver 8: Added bsRadiusDynAuthReplayProtection.', 'Ver 7: Added bsRadiusAccountingInterimUpdatesIntervalSource.', 'Ver 6: Added bsRadiusDynAuthClientReplayProtection Added bsRadiusAccountingInterimUpdates and bsRadiusAccountingInterimUpdatesInterval.', 'Ver 5: Added bsRadiusAccountingEnabled, bsRadiusPasswordFallbackEnabled, bsRadiusAccountingPort', 'Ver 4: Added bsRadiusUseMgmtIp.', 'Ver 3: Changes based on RFC 5176.', 'Ver 2: Added support for RADIUS requests servers.', 'Ver 1: Initial version.',))
if mibBuilder.loadTexts: bayStackRadiusMib.setLastUpdated('201507230000Z')
if mibBuilder.loadTexts: bayStackRadiusMib.setOrganization('Avaya')
if mibBuilder.loadTexts: bayStackRadiusMib.setContactInfo('avaya.com')
if mibBuilder.loadTexts: bayStackRadiusMib.setDescription("This MIB module is used for RADIUS configuration settings in Nortel's software and products.")
bsRadiusNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 21, 0))
bsRadiusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 21, 1))
bsRadiusScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1))
bsRadiusUseMgmtIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusUseMgmtIp.setStatus('current')
if mibBuilder.loadTexts: bsRadiusUseMgmtIp.setDescription("This object controls whether RADIUS uses the system's management IP address as the source address for RADIUS requests.")
bsRadiusAccountingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: bsRadiusAccountingEnabled.setDescription('This object controls whether RADIUS accounting is enabled.')
bsRadiusPasswordFallbackEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusPasswordFallbackEnabled.setStatus('current')
if mibBuilder.loadTexts: bsRadiusPasswordFallbackEnabled.setDescription('This object controls whether RADIUS password fallback is enabled.')
bsRadiusAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 4), InetPortNumber().clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusAccountingPort.setStatus('current')
if mibBuilder.loadTexts: bsRadiusAccountingPort.setDescription('This object controls the port used for RADIUS accounting.')
bsRadiusAccountingInterimUpdates = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusAccountingInterimUpdates.setStatus('current')
if mibBuilder.loadTexts: bsRadiusAccountingInterimUpdates.setDescription('This object controls whether RADIUS interim updates are enabled or disabled.')
bsRadiusAccountingInterimUpdatesInterval = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 3600), )).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusAccountingInterimUpdatesInterval.setStatus('current')
if mibBuilder.loadTexts: bsRadiusAccountingInterimUpdatesInterval.setDescription('This object controls the interval for RADIUS interim updates.')
bsRadiusAccountingInterimUpdatesIntervalSource = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuredValue", 1), ("radiusServer", 2))).clone('configuredValue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusAccountingInterimUpdatesIntervalSource.setStatus('current')
if mibBuilder.loadTexts: bsRadiusAccountingInterimUpdatesIntervalSource.setDescription('This object controls the source for the interval value for RADIUS interim updates. If the value is configuredValue(1), then the value of bsRadiusAccountingInterimUpdatesInterval is used. If the value is radiusServer(2), then a value obtained from the RADIUS server is used.')
bsRadiusDynAuthReplayProtection = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusDynAuthReplayProtection.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthReplayProtection.setDescription('Globally enable or disable RADIUS replay protection.')
bsRadiusReachability = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useRadius", 1), ("useIcmp", 2))).clone('useIcmp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusReachability.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachability.setDescription('Select the method used to test RADIUS server reachablity.')
bsRadiusReachabilityUserName = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('avaya')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusReachabilityUserName.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachabilityUserName.setDescription('The username used for the RADIUS server reachability useRadius option.')
bsRadiusReachabilityPassword = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('avaya')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusReachabilityPassword.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachabilityPassword.setDescription('The password used for the RADIUS server reachability useRadius option.')
bsRadiusEncapsulationProtocol = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("ms-chap-v2", 2))).clone('pap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusEncapsulationProtocol.setStatus('current')
if mibBuilder.loadTexts: bsRadiusEncapsulationProtocol.setDescription('This object specifies the type of encapsulation for RADIUS packets.')
bsRadiusReachabilityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusReachabilityTimeout.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachabilityTimeout.setDescription('This object specifies the time interval to wait before re-sending a message to the RADIUS server .')
bsRadiusReachabilityRetry = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusReachabilityRetry.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachabilityRetry.setDescription('This object specifies the number of retry attempts to reach the RADIUS server.')
bsRadiusReachabilityBadTimer = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusReachabilityBadTimer.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachabilityBadTimer.setDescription('This object specifies the interval between checks when the RADIUS server is unreachable.')
bsRadiusReachabilityGoodTimer = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusReachabilityGoodTimer.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachabilityGoodTimer.setDescription('This object specifies the interval between checks when the RADIUS server is reachable.')
bsRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2), )
if mibBuilder.loadTexts: bsRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerTable.setDescription('This table is used to control RADIUS server settings.')
bsRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-RADIUS-MIB", "bsRadiusServerIndex"))
if mibBuilder.loadTexts: bsRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerEntry.setDescription('An entry containing objects defining how to connect to a RADIUS server.')
bsRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: bsRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerIndex.setDescription('A unique integer value used to identify entries in this table.')
bsRadiusServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusServerPriority.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerPriority.setDescription('This value indicates the order in which entries in this table are used when attempting to contact a RADIUS server. Entries with a lower priority number are tried first. If two entries have the same priority value, the entry with a lower index value is tried first. Also note that entries which contain an invalid internet address will not be used.')
bsRadiusServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusServerAddressType.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerAddressType.setDescription('The type of address contained in the corresponding instance of bsRadiusServerAddress.')
bsRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerAddress.setDescription('The internet address to use when attempting to contact a RADIUS server.')
bsRadiusServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusServerUdpPort.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerUdpPort.setDescription('The UDP port number to use when trying to contact the RADIUS server at the address contained in the corresponding instance of bsRadiusServerAddress.')
bsRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerTimeout.setDescription('The time interval to wait before re-sending a message to this RADIUS server.')
bsRadiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusServerSecret.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerSecret.setDescription('The shared RADIUS secret to use when communicating with the RADIUS server. Note that when this object is retrieved, its value will always by a zero-length octet string.')
bsRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerRowStatus.setDescription('Controls row creation/deletion in this table.')
bsRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 9), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusServerAccountingPort.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerAccountingPort.setDescription('The UDP accounting port number to use when trying to contact the RADIUS server at the address contained in the corresponding instance of bsRadiusServerAddress.')
bsRadiusServerAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusServerAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerAccountingEnabled.setDescription('This object controls whether RADIUS accounting is enabled for this RADIUS server instance.')
bsRadiusServerRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsRadiusServerRetryLimit.setStatus('current')
if mibBuilder.loadTexts: bsRadiusServerRetryLimit.setDescription('This object specifies the number of RADIUS retry attempts, for this RADIUS server instance.')
bsRadiusDynAuthClientTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3), )
if mibBuilder.loadTexts: bsRadiusDynAuthClientTable.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientTable.setDescription('This table is used to configure RADIUS Dynamic Authorization Clients. RADIUS Dynamic Authorization Clients are entities which can send Disconnect and Change Of Authorization requests to a RADIUS Dynamic Authorization Server.')
bsRadiusDynAuthClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1), ).setIndexNames((0, "BAY-STACK-RADIUS-MIB", "bsRadiusDynAuthClientAddressType"), (0, "BAY-STACK-RADIUS-MIB", "bsRadiusDynAuthClientAddress"))
if mibBuilder.loadTexts: bsRadiusDynAuthClientEntry.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientEntry.setDescription('An entry containing objects defining RADIUS Dynamic Authorization Clients which can connect to this RADIUS Dynamic Authorization Server.')
bsRadiusDynAuthClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: bsRadiusDynAuthClientAddressType.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientAddressType.setDescription('The type of address contained in the corresponding instance of bsRadiusDynAuthClientAddress.')
bsRadiusDynAuthClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 113)))
if mibBuilder.loadTexts: bsRadiusDynAuthClientAddress.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientAddress.setDescription('The internet address of a RADIUS Dynamic Authorization Client configured in this entry.')
bsRadiusDynAuthClientUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 3), InetPortNumber().clone(3799)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusDynAuthClientUdpPort.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientUdpPort.setDescription('The UDP port number the server/NAS listens on for requests from the RADIUS Dynamic Authorization Client configured in this entry.')
bsRadiusDynAuthClientSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusDynAuthClientSecret.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientSecret.setDescription('The secret shared between RADIUS Dynamic Authorization Client and Server. Note that when this object is retrieved, its value will always by a zero-length octet string.')
bsRadiusDynAuthClientEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusDynAuthClientEnabled.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientEnabled.setDescription('Enable or disable packet receive from this RADIUS Dynamic Authorization Client. The NAS will not listen for requests from the client unless this object is true(1).')
bsRadiusDynAuthClientProcessDisconnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusDynAuthClientProcessDisconnectRequests.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientProcessDisconnectRequests.setDescription('Enable or disable processing of Disconnect requests from the RADIUS Dynamic Authorization Client.')
bsRadiusDynAuthClientProcessCoARequests = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusDynAuthClientProcessCoARequests.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientProcessCoARequests.setDescription('Enable or disable processing of Change-Of-Authorization requests from the RADIUS Dynamic Authorization Client.')
bsRadiusDynAuthClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusDynAuthClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientRowStatus.setDescription('Controls row creation/deletion in this table.')
bsRadiusDynAuthClientReplayProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusDynAuthClientReplayProtection.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientReplayProtection.setDescription('Enable or disable RADIUS replay protection.')
bsRadiusDynAuthClientProcessReAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsRadiusDynAuthClientProcessReAuthRequests.setStatus('current')
if mibBuilder.loadTexts: bsRadiusDynAuthClientProcessReAuthRequests.setDescription('Enable or disable the processing of Reauthentication requests from the RADIUS Dynamic Authorization Client.')
bsRadiusExtDynAuthClientTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4), )
if mibBuilder.loadTexts: bsRadiusExtDynAuthClientTable.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthClientTable.setDescription('The (conceptual) table listing the RADIUS Dynamic Authorization Clients with which the server shares a secret. This is an extension of radiusDynAuthClientTable.')
bsRadiusExtDynAuthClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1), )
radiusDynAuthClientEntry.registerAugmentions(("BAY-STACK-RADIUS-MIB", "bsRadiusExtDynAuthClientEntry"))
bsRadiusExtDynAuthClientEntry.setIndexNames(*radiusDynAuthClientEntry.getIndexNames())
if mibBuilder.loadTexts: bsRadiusExtDynAuthClientEntry.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthClientEntry.setDescription('An entry (conceptual row) representing one Dynamic Authorization Client with which the server shares a secret.')
bsRadiusExtDynAuthServRcRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 1), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcRequests.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcRequests.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcRequests.setDescription("The number of RADIUS Reauthentication-requests received from this Dynamic Authorization Client. This also includes the Reauthentication requests that have a Service-Type attribute with value 'Authorize Only'. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.")
bsRadiusExtDynAuthServRcAuthOnlyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 2), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcAuthOnlyRequests.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcAuthOnlyRequests.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcAuthOnlyRequests.setDescription("The number of RADIUS Reauthentication-requests that include a Service-Type attribute with value 'Authorize Only' received from this Dynamic Authorization Client. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.")
bsRadiusExtDynAuthServRcDupRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 3), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcDupRequests.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcDupRequests.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcDupRequests.setDescription('The number of duplicate RADIUS Reauthentication-Request packets received from this Dynamic Authorization Client. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.')
bsRadiusExtDynAuthServRcAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 4), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcAcks.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcAcks.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcAcks.setDescription('The number of incoming Reauthentication packets from this Dynamic Authorization Client silently discarded by the server application for some reason other than malformed, bad authenticators, or unknown types. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.')
bsRadiusExtDynAuthServRcNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 5), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacks.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacks.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacks.setDescription("The number of RADIUS Reauthentication-NAK packets sent to this Dynamic Authorization Client. This includes the RADIUS Reauthentication-NAK packets sent with a Service-Type attribute with value 'Authorize Only' and the RADIUS Reauthentication-NAK packets sent because no session context was found. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.")
bsRadiusExtDynAuthServRcNacksAuthOnlyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 6), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacksAuthOnlyRequests.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacksAuthOnlyRequests.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacksAuthOnlyRequests.setDescription("The number of RADIUS Reauthentication-NAK packets that include a Service-Type attribute with value 'Authorize Only' sent to this Dynamic Authorization Client. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.")
bsRadiusExtDynAuthServRcNacksNoSess = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 7), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacksNoSess.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacksNoSess.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcNacksNoSess.setDescription('The number of RADIUS Reauthentication-NAK packets sent to this Dynamic Authorization Client because no session context was found. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.')
bsRadiusExtDynAuthServRcSessReauthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 8), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcSessReauthenticated.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcSessReauthenticated.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcSessReauthenticated.setDescription("The number of user sessions reauthenticated for the Reauthentication-Requests received from this Dynamic Authorization Client. Depending on site- specific policies, a single Reauthentication request can change multiple user sessions' authorization. In cases where this Dynamic Authorization Server has no knowledge of the number of user sessions that are affected by a single request, each such CoA-Request will count as a single affected user session only. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.")
bsRadiusExtDynAuthServRcMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 9), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcMalformed.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcMalformed.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcMalformed.setDescription('The number of malformed RADIUS Reauthentication-Request packets received from this Dynamic Authorization Client. Bad authenticators and unknown types are not included as malformed Reauthentication-Requests. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.')
bsRadiusExtDynAuthServRcDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 10), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcDropped.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcDropped.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcDropped.setDescription('The number of incoming Reauthentication packets from this Dynamic Authorization Client silently discarded by the server application for some reason other than malformed, bad authenticators, or unknown types. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.')
bsRadiusExtDynAuthServRcBadAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 21, 1, 4, 1, 11), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcBadAuths.setReference('Reauthentication extension for RFC3576 .')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcBadAuths.setStatus('current')
if mibBuilder.loadTexts: bsRadiusExtDynAuthServRcBadAuths.setDescription('The number of RADIUS Reauthentication-Request packets that contained an invalid Authenticator field received from this Dynamic Authorization Client. This counter may experience a discontinuity when the DAS module (re)starts, as indicated by the value of radiusDynAuthServerCounterDiscontinuity.')
bsRadiusReachabilityServerDown = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 21, 0, 1)).setObjects(("BAY-STACK-RADIUS-MIB", "bsRadiusServerAddressType"), ("BAY-STACK-RADIUS-MIB", "bsRadiusServerAddress"))
if mibBuilder.loadTexts: bsRadiusReachabilityServerDown.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachabilityServerDown.setDescription('This notification is generated when a Radius server fails to respond to reachability requests.')
bsRadiusReachabilityServerUp = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 21, 0, 2)).setObjects(("BAY-STACK-RADIUS-MIB", "bsRadiusServerAddressType"), ("BAY-STACK-RADIUS-MIB", "bsRadiusServerAddress"))
if mibBuilder.loadTexts: bsRadiusReachabilityServerUp.setStatus('current')
if mibBuilder.loadTexts: bsRadiusReachabilityServerUp.setDescription('This notification is generated when a Radius server, which has previously failed to respond to reachability requests, responds to a reachability request.')
mibBuilder.exportSymbols("BAY-STACK-RADIUS-MIB", bsRadiusDynAuthClientSecret=bsRadiusDynAuthClientSecret, bsRadiusDynAuthClientProcessCoARequests=bsRadiusDynAuthClientProcessCoARequests, bsRadiusDynAuthClientReplayProtection=bsRadiusDynAuthClientReplayProtection, bsRadiusReachabilityRetry=bsRadiusReachabilityRetry, bsRadiusServerSecret=bsRadiusServerSecret, bsRadiusExtDynAuthServRcNacksAuthOnlyRequests=bsRadiusExtDynAuthServRcNacksAuthOnlyRequests, bsRadiusAccountingEnabled=bsRadiusAccountingEnabled, bsRadiusReachabilityPassword=bsRadiusReachabilityPassword, bsRadiusServerEntry=bsRadiusServerEntry, bayStackRadiusMib=bayStackRadiusMib, bsRadiusExtDynAuthServRcNacksNoSess=bsRadiusExtDynAuthServRcNacksNoSess, bsRadiusServerAccountingEnabled=bsRadiusServerAccountingEnabled, bsRadiusDynAuthClientTable=bsRadiusDynAuthClientTable, bsRadiusExtDynAuthServRcRequests=bsRadiusExtDynAuthServRcRequests, bsRadiusReachabilityTimeout=bsRadiusReachabilityTimeout, bsRadiusServerUdpPort=bsRadiusServerUdpPort, bsRadiusReachability=bsRadiusReachability, bsRadiusExtDynAuthServRcAuthOnlyRequests=bsRadiusExtDynAuthServRcAuthOnlyRequests, bsRadiusDynAuthClientEntry=bsRadiusDynAuthClientEntry, bsRadiusReachabilityUserName=bsRadiusReachabilityUserName, bsRadiusReachabilityServerUp=bsRadiusReachabilityServerUp, bsRadiusServerRowStatus=bsRadiusServerRowStatus, bsRadiusDynAuthClientProcessReAuthRequests=bsRadiusDynAuthClientProcessReAuthRequests, bsRadiusExtDynAuthServRcMalformed=bsRadiusExtDynAuthServRcMalformed, bsRadiusExtDynAuthServRcSessReauthenticated=bsRadiusExtDynAuthServRcSessReauthenticated, bsRadiusServerTimeout=bsRadiusServerTimeout, bsRadiusServerRetryLimit=bsRadiusServerRetryLimit, bsRadiusExtDynAuthServRcAcks=bsRadiusExtDynAuthServRcAcks, bsRadiusObjects=bsRadiusObjects, bsRadiusEncapsulationProtocol=bsRadiusEncapsulationProtocol, bsRadiusServerAddress=bsRadiusServerAddress, bsRadiusDynAuthClientProcessDisconnectRequests=bsRadiusDynAuthClientProcessDisconnectRequests, bsRadiusScalars=bsRadiusScalars, bsRadiusExtDynAuthServRcDropped=bsRadiusExtDynAuthServRcDropped, bsRadiusAccountingInterimUpdates=bsRadiusAccountingInterimUpdates, bsRadiusAccountingInterimUpdatesIntervalSource=bsRadiusAccountingInterimUpdatesIntervalSource, bsRadiusExtDynAuthServRcNacks=bsRadiusExtDynAuthServRcNacks, bsRadiusDynAuthReplayProtection=bsRadiusDynAuthReplayProtection, bsRadiusExtDynAuthServRcBadAuths=bsRadiusExtDynAuthServRcBadAuths, bsRadiusDynAuthClientAddressType=bsRadiusDynAuthClientAddressType, bsRadiusReachabilityServerDown=bsRadiusReachabilityServerDown, bsRadiusExtDynAuthServRcDupRequests=bsRadiusExtDynAuthServRcDupRequests, bsRadiusAccountingPort=bsRadiusAccountingPort, bsRadiusPasswordFallbackEnabled=bsRadiusPasswordFallbackEnabled, bsRadiusDynAuthClientEnabled=bsRadiusDynAuthClientEnabled, bsRadiusExtDynAuthClientTable=bsRadiusExtDynAuthClientTable, bsRadiusExtDynAuthClientEntry=bsRadiusExtDynAuthClientEntry, bsRadiusNotifications=bsRadiusNotifications, bsRadiusDynAuthClientUdpPort=bsRadiusDynAuthClientUdpPort, bsRadiusServerTable=bsRadiusServerTable, bsRadiusServerPriority=bsRadiusServerPriority, bsRadiusServerAddressType=bsRadiusServerAddressType, bsRadiusDynAuthClientAddress=bsRadiusDynAuthClientAddress, bsRadiusUseMgmtIp=bsRadiusUseMgmtIp, bsRadiusDynAuthClientRowStatus=bsRadiusDynAuthClientRowStatus, bsRadiusReachabilityBadTimer=bsRadiusReachabilityBadTimer, bsRadiusServerAccountingPort=bsRadiusServerAccountingPort, bsRadiusAccountingInterimUpdatesInterval=bsRadiusAccountingInterimUpdatesInterval, bsRadiusServerIndex=bsRadiusServerIndex, PYSNMP_MODULE_ID=bayStackRadiusMib, bsRadiusReachabilityGoodTimer=bsRadiusReachabilityGoodTimer)
