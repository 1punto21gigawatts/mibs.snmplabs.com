#
# PySNMP MIB module EMPIRE-APACHEMOD (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EMPIRE-APACHEMOD
# Produced by pysmi-0.3.4 at Wed May  1 13:02:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, iso, Integer32, TimeTicks, Counter64, ObjectIdentity, Unsigned32, enterprises, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Bits, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "Integer32", "TimeTicks", "Counter64", "ObjectIdentity", "Unsigned32", "enterprises", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Bits", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
empire = MibIdentifier((1, 3, 6, 1, 4, 1, 546))
applications = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16))
apacheSrv = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 3))
apacheModVersion = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheModVersion.setStatus('mandatory')
if mibBuilder.loadTexts: apacheModVersion.setDescription('Description and version number of this module for licensing.')
apacheModMode = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullMode", 1), ("restrictedMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheModMode.setStatus('mandatory')
if mibBuilder.loadTexts: apacheModMode.setDescription('This object indicates if the Apache Module is in full-mode or restricted-mode. Restricted-mode is entered, when SystemEDGE 4.0 and higher, fails to find a valid license. Once a valid license has been allocated and set, the module will then transition to fullMode(1)')
apacheConfigTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 3, 10), )
if mibBuilder.loadTexts: apacheConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigTable.setDescription('This table describes the configuration settings for each Apache installation.')
apacheConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1), ).setIndexNames((0, "EMPIRE-APACHEMOD", "apacheConfigPort"))
if mibBuilder.loadTexts: apacheConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigEntry.setDescription('An entry in the Apache Configuration table.')
apacheConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigPort.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigPort.setDescription('The TCP port currently used by this Apache configuration. This value serves as the index for this table.')
apacheConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigVersion.setDescription('Apache Web Server version number and description.')
apacheConfigPID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigPID.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigPID.setDescription('The process ID (PID) of the master Apache process. If the server is not running, 0 is returned.')
apacheConfigRunMode = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigRunMode.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigRunMode.setDescription('The current operating mode. (e.g. standalone)')
apacheConfigUser = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigUser.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigUser.setDescription('The user currently running the server processes.')
apacheConfigGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigGroup.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigGroup.setDescription('The group currently running the server processes.')
apacheConfigHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigHostname.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigHostname.setDescription('The hostname used by this Apache configuration.')
apacheConfigStartProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigStartProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigStartProcs.setDescription('The number of server processes started by Apache at startup.')
apacheConfigMinIdleProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigMinIdleProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigMinIdleProcs.setDescription('The minimum number of idle server processes maintained by Apache.')
apacheConfigMaxIdleProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigMaxIdleProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigMaxIdleProcs.setDescription('The maximum number of idle server processes maintained by Apache.')
apacheConfigMaxProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigMaxProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigMaxProcs.setDescription('The maximum total number of server processes allowed by Apache.')
apacheConfigRequestsMaxPerChild = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigRequestsMaxPerChild.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigRequestsMaxPerChild.setDescription('The number of requests handled by a server process before it is recycled by Apache.')
apacheConfigRequestsKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigRequestsKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigRequestsKeepAlive.setDescription('Is keep-alive enabled for persistent connections? disabled(0) or enabled(1)')
apacheConfigRequestsMaxPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigRequestsMaxPerConn.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigRequestsMaxPerConn.setDescription('The number of requests handled in a single connection if keep-alive is on.')
apacheConfigThreadsPerChild = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigThreadsPerChild.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigThreadsPerChild.setDescription('The maximum number of threads per child process.')
apacheConfigConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigConnectionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigConnectionTimeout.setDescription('The timeout value for closing inactive connections.')
apacheConfigKeepAliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigKeepAliveTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigKeepAliveTimeout.setDescription('The keep-alive timeout value for open connections.')
apacheConfigServerRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigServerRoot.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigServerRoot.setDescription('The root directory for this Apache installation.')
apacheConfigConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigConfigFile.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigConfigFile.setDescription('The current configuration file for this Apache installation.')
apacheConfigPIDFile = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigPIDFile.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigPIDFile.setDescription('The current PID file for this Apache installation.')
apacheConfigScoreboardFile = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigScoreboardFile.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigScoreboardFile.setDescription('The current scoreboard file for this Apache installation.')
apacheConfigDocumentRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigDocumentRoot.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigDocumentRoot.setDescription('The current document root directory for this Apache installation.')
apacheConfigAccessLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigAccessLogFile.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigAccessLogFile.setDescription('The current access or transaction log file for this Apache installation.')
apacheConfigErrorLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigErrorLogFile.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigErrorLogFile.setDescription('The current error log file for this Apache installation.')
apacheConfigScriptLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 10, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheConfigScriptLogFile.setStatus('mandatory')
if mibBuilder.loadTexts: apacheConfigScriptLogFile.setDescription('The current script log file for this Apache installation.')
apachePerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 3, 11))
apacheFootprintTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1), )
if mibBuilder.loadTexts: apacheFootprintTable.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintTable.setDescription('This table reports the performance footprint for each Apache service.')
apacheFootprintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1), ).setIndexNames((0, "EMPIRE-APACHEMOD", "apacheFootprintPort"))
if mibBuilder.loadTexts: apacheFootprintEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintEntry.setDescription('An entry in the Apache Performance Footprint table.')
apacheFootprintPort = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintPort.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintPort.setDescription('The TCP port currently used by this Apache configuration. This value serves as the index for this table.')
apacheFootprintCPUTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintCPUTime.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintCPUTime.setDescription('CPU time, in seconds, accumulated by Apache which includes all Apache processes.')
apacheFootprintPercentCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintPercentCPU.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintPercentCPU.setDescription('The percentage of CPU utilization, by Apache, over the last sample interval. Since fractions are not supported by SNMP, the value reported is the percentage multiplied by 100. It is the sum of the CPU utilization of all the Apache processes. Its gives a good indication of the CPU resource consumption by the entire Apache server.')
apacheFootprintTotalMEMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintTotalMEMSize.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintTotalMEMSize.setDescription("The combined size of Apache's text, data, and stack segments in KBytes. It is the summation of the process sizes for all Apache server processes.")
apacheFootprintTotalRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintTotalRSS.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintTotalRSS.setDescription('The real memory (resident set) size of Apache in KBytes. It is the summation of the process RSS for all Apache server processes.')
apacheFootprintPercentMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintPercentMEM.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintPercentMEM.setDescription('The percentage (0-100) of real memory used by Apache which includes all Apache server processes.')
apacheFootprintNumThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintNumThreads.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintNumThreads.setDescription('The number of threads executing within all Apache processes. Note, on some systems, the operating system may be un-aware of user-level threads executing within the process. This object reflects the number of threads executing within the process that the operating system is aware of.')
apacheFootprintInBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintInBlks.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintInBlks.setDescription('The number of blocks of data input by the processes.')
apacheFootprintOutBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintOutBlks.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintOutBlks.setDescription('The number of blocks of data output by the processes.')
apacheFootprintMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintMsgsSent.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintMsgsSent.setDescription('The number of messages sent by the processes.')
apacheFootprintMsgsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintMsgsRecv.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintMsgsRecv.setDescription('The number of messages received by the processes.')
apacheFootprintSysCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintSysCalls.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintSysCalls.setDescription('The number of system calls invoked by the processes.')
apacheFootprintMinorPgFlts = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintMinorPgFlts.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintMinorPgFlts.setDescription('The number of minor page faults incurred by the processes. Minor faults do not require I/O to retrieve the page.')
apacheFootprintMajorPgFlts = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintMajorPgFlts.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintMajorPgFlts.setDescription('The number of major page faults incurred by the processes. Major faults require I/O to retrieve the page.')
apacheFootprintNumSwaps = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintNumSwaps.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintNumSwaps.setDescription('The number of times the processes have been swapped.')
apacheFootprintVolCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintVolCtx.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintVolCtx.setDescription("The number of voluntary context switches incurred by the processes. Voluntary context switches occur when the processor 'voluntary' gives up the CPU (e.g. waiting on I/O.)")
apacheFootprintInvolCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintInvolCtx.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintInvolCtx.setDescription('The number of involuntary context switches incurred by the processes. An involuntary context switch occurs when the process has executed for the duration of its time quantum and is switched out by the process scheduler.')
apacheFootprintTotalLogSize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintTotalLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintTotalLogSize.setDescription('The size, in KBytes of the Apache service logs. This number is the sum of the access and error log file sizes.')
apacheFootprintDocSize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintDocSize.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintDocSize.setDescription('The size, in KBytes of the Apache document root directory and all files beneath it.')
apacheFootprintTotalDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheFootprintTotalDiskSize.setStatus('mandatory')
if mibBuilder.loadTexts: apacheFootprintTotalDiskSize.setDescription('The size, in KBytes, of all the Apache disk storage areas. It is a summation of log sizes, and service directories. Summing these storage components in one location presents an easy and convenient MIB object to poll and self-monitor.')
apacheServerPerfTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2), )
if mibBuilder.loadTexts: apacheServerPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfTable.setDescription('This table reports the performance of each Apache service.')
apacheServerPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1), ).setIndexNames((0, "EMPIRE-APACHEMOD", "apacheServerPerfPort"))
if mibBuilder.loadTexts: apacheServerPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfEntry.setDescription('An entry in the Apache Server Performance table.')
apacheServerPerfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfPort.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfPort.setDescription('The TCP port currently used by this Apache configuration. This value serves as the index for this table.')
apacheServerPerfUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfUptime.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfUptime.setDescription('Number of seconds the Apache server has been up.')
apacheServerPerfTotalAccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfTotalAccesses.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfTotalAccesses.setDescription('Number of accesses (hits) to this server since it was last started.')
apacheServerPerfTotalTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfTotalTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfTotalTraffic.setDescription('Number of KBytes transferred by this server since it was last started.')
apacheServerPerfCurrentUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentUsers.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentUsers.setDescription('Number of current active users (connections) maintained by the Apache server.')
apacheServerPerfCurrentIdleProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentIdleProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentIdleProcs.setDescription('Number of current idle processes available on the Apache server.')
apacheServerPerfCurrentStartupProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentStartupProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentStartupProcs.setDescription('Number of processes currently in startup on the Apache server.')
apacheServerPerfCurrentReadProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentReadProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentReadProcs.setDescription('Number of processes currently reading requests on the Apache server.')
apacheServerPerfCurrentReplyProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentReplyProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentReplyProcs.setDescription('Number of processes currently replying to requests on the Apache server.')
apacheServerPerfCurrentKeepAliveProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentKeepAliveProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentKeepAliveProcs.setDescription('Number of processes currently in keep-alive on the Apache server.')
apacheServerPerfCurrentDNSProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentDNSProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentDNSProcs.setDescription('Number of processes currently doing a DNS lookup on the Apache server.')
apacheServerPerfCurrentLoggingProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentLoggingProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentLoggingProcs.setDescription('Number of processes currently logging transactions on the Apache server.')
apacheServerPerfCurrentFinishingProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentFinishingProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentFinishingProcs.setDescription('Number of processes currently finishing transactions on the Apache server.')
apacheServerPerfCurrentTotalProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentTotalProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentTotalProcs.setDescription('Total number of Apache processes currently running on the Apache server.')
apacheServerPerfCurrentBusyProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 3, 11, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apacheServerPerfCurrentBusyProcs.setStatus('mandatory')
if mibBuilder.loadTexts: apacheServerPerfCurrentBusyProcs.setDescription('Total number of Apache processes currently busy. This is the sum of apacheServerPerfCurrentStartupProcs, apacheServerPerfCurrentReadProcs, apacheServerPerfCurrentReplyProcs, apacheServerPerfCurrentKeepAliveProcs, apacheServerPerfCurrentDNSProcs, apacheServerPerfCurrentLoggingProcs, apacheServerPerfCurrentFinishingProcs')
mibBuilder.exportSymbols("EMPIRE-APACHEMOD", apacheConfigConnectionTimeout=apacheConfigConnectionTimeout, apacheFootprintMajorPgFlts=apacheFootprintMajorPgFlts, apacheConfigMaxIdleProcs=apacheConfigMaxIdleProcs, apacheConfigTable=apacheConfigTable, apacheServerPerfCurrentTotalProcs=apacheServerPerfCurrentTotalProcs, apacheConfigRequestsKeepAlive=apacheConfigRequestsKeepAlive, apacheConfigServerRoot=apacheConfigServerRoot, apacheConfigErrorLogFile=apacheConfigErrorLogFile, apacheConfigMinIdleProcs=apacheConfigMinIdleProcs, apacheFootprintInBlks=apacheFootprintInBlks, apacheFootprintCPUTime=apacheFootprintCPUTime, apacheFootprintTotalLogSize=apacheFootprintTotalLogSize, apacheFootprintTotalDiskSize=apacheFootprintTotalDiskSize, apacheServerPerfTotalAccesses=apacheServerPerfTotalAccesses, apacheServerPerfCurrentFinishingProcs=apacheServerPerfCurrentFinishingProcs, apacheFootprintVolCtx=apacheFootprintVolCtx, apacheModVersion=apacheModVersion, apacheConfigScoreboardFile=apacheConfigScoreboardFile, apacheFootprintPercentMEM=apacheFootprintPercentMEM, apacheFootprintPort=apacheFootprintPort, apacheServerPerfTable=apacheServerPerfTable, apacheConfigPID=apacheConfigPID, apacheConfigPIDFile=apacheConfigPIDFile, apacheFootprintTotalRSS=apacheFootprintTotalRSS, apacheConfigVersion=apacheConfigVersion, apacheFootprintEntry=apacheFootprintEntry, apacheConfigGroup=apacheConfigGroup, apacheFootprintSysCalls=apacheFootprintSysCalls, applications=applications, apacheConfigUser=apacheConfigUser, apacheServerPerfCurrentReplyProcs=apacheServerPerfCurrentReplyProcs, apacheServerPerfCurrentBusyProcs=apacheServerPerfCurrentBusyProcs, apacheConfigRunMode=apacheConfigRunMode, apacheConfigEntry=apacheConfigEntry, apacheConfigConfigFile=apacheConfigConfigFile, apacheFootprintMinorPgFlts=apacheFootprintMinorPgFlts, apacheConfigRequestsMaxPerConn=apacheConfigRequestsMaxPerConn, apacheFootprintTotalMEMSize=apacheFootprintTotalMEMSize, apacheFootprintInvolCtx=apacheFootprintInvolCtx, apacheServerPerfPort=apacheServerPerfPort, apacheFootprintMsgsSent=apacheFootprintMsgsSent, apacheServerPerfCurrentUsers=apacheServerPerfCurrentUsers, apacheFootprintNumSwaps=apacheFootprintNumSwaps, apacheConfigKeepAliveTimeout=apacheConfigKeepAliveTimeout, apacheFootprintTable=apacheFootprintTable, apacheServerPerfUptime=apacheServerPerfUptime, apacheConfigRequestsMaxPerChild=apacheConfigRequestsMaxPerChild, apacheConfigHostname=apacheConfigHostname, apacheSrv=apacheSrv, apacheFootprintPercentCPU=apacheFootprintPercentCPU, apacheServerPerfEntry=apacheServerPerfEntry, apacheServerPerfCurrentIdleProcs=apacheServerPerfCurrentIdleProcs, apacheConfigScriptLogFile=apacheConfigScriptLogFile, apacheConfigPort=apacheConfigPort, empire=empire, apacheServerPerfCurrentLoggingProcs=apacheServerPerfCurrentLoggingProcs, apacheConfigAccessLogFile=apacheConfigAccessLogFile, apacheServerPerfCurrentReadProcs=apacheServerPerfCurrentReadProcs, apacheModMode=apacheModMode, apacheConfigStartProcs=apacheConfigStartProcs, apacheServerPerfCurrentKeepAliveProcs=apacheServerPerfCurrentKeepAliveProcs, apacheFootprintDocSize=apacheFootprintDocSize, apachePerformance=apachePerformance, apacheServerPerfTotalTraffic=apacheServerPerfTotalTraffic, apacheServerPerfCurrentStartupProcs=apacheServerPerfCurrentStartupProcs, apacheServerPerfCurrentDNSProcs=apacheServerPerfCurrentDNSProcs, apacheConfigDocumentRoot=apacheConfigDocumentRoot, apacheFootprintNumThreads=apacheFootprintNumThreads, apacheConfigMaxProcs=apacheConfigMaxProcs, apacheFootprintMsgsRecv=apacheFootprintMsgsRecv, apacheConfigThreadsPerChild=apacheConfigThreadsPerChild, apacheFootprintOutBlks=apacheFootprintOutBlks)
