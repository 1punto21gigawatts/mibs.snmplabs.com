#
# PySNMP MIB module IEEE8021-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:52:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
IEEE8021PbbComponentIdentifierOrZero, IEEE8021PriorityCodePoint, IEEE8021PbbComponentIdentifier, ieee802dot1mibs, IEEE8021PriorityValue, IEEE8021BridgePortNumberOrZero, IEEE8021BridgePortNumber, IEEE8021BridgePortType = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PbbComponentIdentifierOrZero", "IEEE8021PriorityCodePoint", "IEEE8021PbbComponentIdentifier", "ieee802dot1mibs", "IEEE8021PriorityValue", "IEEE8021BridgePortNumberOrZero", "IEEE8021BridgePortNumber", "IEEE8021BridgePortType")
ifGeneralInformationGroup, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifGeneralInformationGroup", "InterfaceIndexOrZero", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
systemGroup, = mibBuilder.importSymbols("SNMPv2-MIB", "systemGroup")
IpAddress, ObjectIdentity, ModuleIdentity, Bits, Counter32, MibIdentifier, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, NotificationType, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Bits", "Counter32", "MibIdentifier", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "NotificationType", "Unsigned32", "TimeTicks")
DisplayString, TimeInterval, MacAddress, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "MacAddress", "TextualConvention", "RowStatus", "TruthValue")
ieee8021BridgeMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 2))
ieee8021BridgeMib.setRevisions(('2014-12-15 00:00', '2012-08-10 00:00', '2012-02-15 00:00', '2011-04-06 00:00', '2011-02-27 00:00', '2008-10-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021BridgeMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q 2014 revision. Cross references updated and corrected.', 'Added an enumeration for tComponent in ieee8021BridgeBaseComponentType as part of IEEE Std 802.1Q Cor-2.', 'Extended ieee8021BridgeBaseComponentType to include erComponent and ieee8021BridgeBasePortTypeCapabilities to include stationFacingBridgePort, uplinkAccessPort and uplinkRelayPort. Added tables ieee8021BridgeBaseIfToPortTable and ieee8021BridgePortTable as part of IEEE Std 802.1Qbg.', 'Modifications to support Remote Customer Service Interfaces.', 'Minor edits to contact information etc. as part of 2011 revision of IEEE Std 802.1Q.', 'Initial revision, derived from RFC 4188.',))
if mibBuilder.loadTexts: ieee8021BridgeMib.setLastUpdated('201412150000Z')
if mibBuilder.loadTexts: ieee8021BridgeMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021BridgeMib.setContactInfo(' WG-URL: http://grouper.ieee.org/groups/802/1/index.html WG-EMail: stds-802-1@ieee.org Contact: IEEE 802.1 Working Group Chair Postal: C/O IEEE 802.1 Working Group IEEE Standards Association 445 Hoes Lane P.O. Box 1331 Piscataway NJ 08855-1331 USA E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021BridgeMib.setDescription('The Bridge MIB module for managing devices that support IEEE Std 802.1Q. This MIB module is derived from the IETF BRIDGE-MIB, RFC 4188. Unless otherwise indicated, the references in this MIB module are to IEEE Std 802.1Q-2014. Copyright (C) IEEE (2014). This version of this MIB module is part of IEEE802.1Q; see the draft itself for full legal notices.')
ieee8021BridgeNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 0))
ieee8021BridgeObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 1))
ieee8021BridgeConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 2))
ieee8021BridgeBase = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 1, 1))
ieee8021BridgeTp = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 1, 2))
ieee8021BridgePriority = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 1, 3))
ieee8021BridgeMrp = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 1, 4))
ieee8021BridgeMmrp = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 1, 5))
ieee8021BridgeInternalLan = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 1, 6))
ieee8021BridgeDot1d = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 1, 7))
ieee8021BridgeBaseTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1), )
if mibBuilder.loadTexts: ieee8021BridgeBaseTable.setReference('12.4.1')
if mibBuilder.loadTexts: ieee8021BridgeBaseTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseTable.setDescription('A table that contains generic information about every Bridge component. All writable objects in this table MUST be persistent over power up restart/reboot.')
ieee8021BridgeBaseEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentId"))
if mibBuilder.loadTexts: ieee8021BridgeBaseEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseEntry.setDescription('A list of objects containing information for each Bridge component.')
ieee8021BridgeBaseComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgeBaseComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021BridgeBaseBridgeAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeBaseBridgeAddress.setReference('12.4.1.1.3 a)')
if mibBuilder.loadTexts: ieee8021BridgeBaseBridgeAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseBridgeAddress.setDescription('The MAC address used by this Bridge when it is referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this Bridge. However, it is only required to be unique. When concatenated with ieee8021SpanningTreePriority, a unique BridgeIdentifier is formed, which is used in the Spanning Tree Protocol. This object may not be modified while the corresponding instance of ieee8021BridgeBaseRowStatus is active(1). The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgeBaseNumPorts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1, 3), Integer32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBaseNumPorts.setReference('12.4.1.1.3 c)')
if mibBuilder.loadTexts: ieee8021BridgeBaseNumPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseNumPorts.setDescription('The number of ports controlled by this bridging entity.')
ieee8021BridgeBaseComponentType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("iComponent", 1), ("bComponent", 2), ("cVlanComponent", 3), ("sVlanComponent", 4), ("dBridgeComponent", 5), ("erComponent", 6), ("tComponent", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeBaseComponentType.setReference('12.3 m)')
if mibBuilder.loadTexts: ieee8021BridgeBaseComponentType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseComponentType.setDescription('Indicates the component type(s) of this Bridge. The following component types are possible: iComponent(1) - An S-VLAN component of a Backbone Edge Bridge which performs encapsulation of customer frames. bComponent(2) - An S-VLAN component of a Backbone Edge Bridge which bundles backbone service instances into B-VLANs. cVlanComponent(3) - A C-VLAN component of an enterprise VLAN Bridge or of a Provider Bridge used to process C-tagged frames. sVlanComponent(4) - An S-VLAN component of a Provider Bridge. dBridgeComponent(5) - A VLAN unaware component of an IEEE 802.1Q Bridge. erComponent (6) - An Edge Relay component of an EVB Station. tComponent (7) - A TPMR component in a Backbone Edge Bridge. This object may not be modified while the corresponding instance of ieee8021BridgeBaseRowStatus is active(1). The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgeBaseDeviceCapabilities = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("dot1dExtendedFilteringServices", 0), ("dot1dTrafficClasses", 1), ("dot1qStaticEntryIndividualPort", 2), ("dot1qIVLCapable", 3), ("dot1qSVLCapable", 4), ("dot1qHybridCapable", 5), ("dot1qConfigurablePvidTagging", 6), ("dot1dLocalVlanCapable", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeBaseDeviceCapabilities.setReference('12.10.1.1.3 b)')
if mibBuilder.loadTexts: ieee8021BridgeBaseDeviceCapabilities.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseDeviceCapabilities.setDescription('Indicates the optional parts of 802.1Q that are implemented by this device and are manageable through this MIB. Capabilities that are allowed on a per-port basis are indicated in ieee8021BridgeBasePortCapabilities. dot1dExtendedFilteringServices(0), -- can perform filtering of -- individual multicast addresses -- controlled by MMRP. dot1dTrafficClasses(1), -- can map priority to -- multiple traffic classes. dot1qStaticEntryIndividualPort(2), -- dot1qStaticUnicastReceivePort & -- dot1qStaticMulticastReceivePort -- can represent non-zero entries. dot1qIVLCapable(3), -- Independent VLAN Learning (IVL). dot1qSVLCapable(4), -- Shared VLAN Learning (SVL). dot1qHybridCapable(5), -- both IVL & SVL simultaneously. dot1qConfigurablePvidTagging(6), -- whether the implementation -- supports the ability to -- override the default PVID -- setting and its egress status -- (VLAN-Tagged or Untagged) on -- each port. dot1dLocalVlanCapable(7) -- can support multiple local -- Bridges, outside of the scope -- of 802.1Q defined VLANs. This object may not be modified while the corresponding instance of ieee8021BridgeBaseRowStatus is active(1). The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgeBaseTrafficClassesEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeBaseTrafficClassesEnabled.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseTrafficClassesEnabled.setDescription('The value true(1) indicates that Traffic Classes are enabled on this Bridge. When false(2), the Bridge operates with a single priority level for all traffic. This object may be modified while the corresponding instance of ieee8021BridgeBaseRowStatus is active(1). The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgeBaseMmrpEnabledStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeBaseMmrpEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseMmrpEnabledStatus.setDescription('The administrative status requested by management for MMRP. The value true(1) indicates that MMRP should be enabled on this device, in all VLANs, on all ports for which it has not been specifically disabled. When false(2), MMRP is disabled, in all VLANs and on all ports, and all MMRP packets will be forwarded transparently. This object affects both Applicant and Registrar state machines. A transition from false(2) to true(1) will cause a reset of all MMRP state machines on all ports. This object may be modified while the corresponding instance of ieee8021BridgeBaseRowStatus is active(1). The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgeBaseRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeBaseRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseRowStatus.setDescription('The object indicates the status of an entry, and is used to create/delete entries. The following objects MUST be set prior to making a new entry active: ieee8021BridgeBaseBridgeAddress ieee8021BridgeBaseComponentType ieee8021BridgeBaseDeviceCapabilities It is recommended that these three objects not be allowed to be modified while the corresponding instance of ieee8021BridgeBaseRowStatus object is active(1). The following objects are not required to be set before making a new entry active (they will take their defaults), and they also may be modified while the corresponding instance of this object is active(1): ieee8021BridgeBaseTrafficClassesEnabled ieee8021BridgeBaseMmrpEnabledStatus The value of this object and all corresponding instances of other objects in this table MUST be retained across reinitializations of the management system.')
ieee8021BridgeBasePortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4), )
if mibBuilder.loadTexts: ieee8021BridgeBasePortTable.setReference('12.4.2')
if mibBuilder.loadTexts: ieee8021BridgeBasePortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortTable.setDescription('A table that contains generic information about every port that is associated with this Bridge. Transparent, and source-route ports are included.')
ieee8021BridgeBasePortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021BridgeBasePortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortEntry.setDescription('A list of objects containing information for each port of the Bridge.')
ieee8021BridgeBasePortComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgeBasePortComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021BridgeBasePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeBasePort.setReference('12.4.2.1')
if mibBuilder.loadTexts: ieee8021BridgeBasePort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePort.setDescription('The port number of the port for which this entry contains Bridge management information.')
ieee8021BridgeBasePortIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeBasePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortIfIndex.setDescription('The value of the instance of the IfIndex object, defined in the IF-MIB, for the interface corresponding to this port, or the value 0 if the port has not been bound to an underlying frame source and sink. It is an implementation specific decision as to whether this object may be modified if it has been created or if 0 is a legal value. The underlying IfEntry indexed by this column MUST be persistent across reinitializations of the management system.')
ieee8021BridgeBasePortDelayExceededDiscards = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 4), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBasePortDelayExceededDiscards.setReference('12.6.1.1.3 f)')
if mibBuilder.loadTexts: ieee8021BridgeBasePortDelayExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortDelayExceededDiscards.setDescription('The number of frames discarded by this port due to excessive transit delay through the Bridge. It is incremented by both transparent and source route Bridges. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
ieee8021BridgeBasePortMtuExceededDiscards = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 5), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBasePortMtuExceededDiscards.setReference('12.6.1.1.3 g)')
if mibBuilder.loadTexts: ieee8021BridgeBasePortMtuExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortMtuExceededDiscards.setDescription('The number of frames discarded by this port due to an excessive size. It is incremented by both transparent and source route Bridges. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
ieee8021BridgeBasePortCapabilities = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 6), Bits().clone(namedValues=NamedValues(("dot1qDot1qTagging", 0), ("dot1qConfigurableAcceptableFrameTypes", 1), ("dot1qIngressFiltering", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBasePortCapabilities.setReference('12.10.1.1.3 c)')
if mibBuilder.loadTexts: ieee8021BridgeBasePortCapabilities.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortCapabilities.setDescription('Indicates the parts of IEEE 802.1Q that are optional on a per-port basis, that are implemented by this device, and that are manageable through this MIB. dot1qDot1qTagging(0), -- supports 802.1Q VLAN tagging of -- frames and MVRP. dot1qConfigurableAcceptableFrameTypes(1), -- allows modified values of -- dot1qPortAcceptableFrameTypes. dot1qIngressFiltering(2) -- supports the discarding of any -- frame received on a Port whose -- VLAN classification does not -- include that Port in its Member -- set.')
ieee8021BridgeBasePortTypeCapabilities = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 7), Bits().clone(namedValues=NamedValues(("customerVlanPort", 0), ("providerNetworkPort", 1), ("customerNetworkPort", 2), ("customerEdgePort", 3), ("customerBackbonePort", 4), ("virtualInstancePort", 5), ("dBridgePort", 6), ("remoteCustomerAccessPort", 7), ("stationFacingBridgePort", 8), ("uplinkAccessPort", 9), ("uplinkRelayPort", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBasePortTypeCapabilities.setReference('40.4, 12.13.1.1, 12.13.1.2, 12.16, 12.16.2.1, 12.26')
if mibBuilder.loadTexts: ieee8021BridgeBasePortTypeCapabilities.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortTypeCapabilities.setDescription("Indicates the capabilities of this port. The corresponding instance of ieee8021BridgeBasePortType can potentially take any of the values for which the corresponding bit in this object is 1. The possible port types are as follows: customerVlanPort(0) - Indicates the port can be a C-TAG aware port of an enterprise VLAN aware Bridge. providerNetworkPort(1) - Indicates the port can be an S-TAG aware port of a Provider Bridge or Backbone Edge Bridge used for connections within a PBN or PBBN. customerNetworkPort(2) - Indicates the port can be an S-TAG aware port of a Provider Bridge or Backbone Edge Bridge used for connections to the exterior of a PBN or PBBN. customerEdgePort(3) - Indicates the port can be a C-TAG aware port of a Provider Bridge used for connections to the exterior of a PBN or PBBN. customerBackbonePort(4) - Indicates the port can be a I-TAG aware port of a Backbone Edge Bridge's B-component. virtualInstancePort(5) - Indicates the port can be a virtual S-TAG aware port within a Backbone Edge Bridge's I-component which is responsible for handling S-tagged traffic for a specific backbone service instance. dBridgePort(6) - Indicates the port can be a VLAN-unaware member of an 802.1Q Bridge. remoteCustomerAccessPort(7) - Indicates the port can be an S-TAG aware port of a Provider Bridge capable of providing Remote Customer Service Interfaces. stationFacingBridgePort(8) - Indicates the station-facing Bridge Port in a EVB Bridge. uplinkAccessPort(9) - Indicates the uplink access port in an EVB Bridge or EVB station. uplinkRelayPort (10) - Indicates the uplink relay port in an EVB station.")
ieee8021BridgeBasePortType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 8), IEEE8021BridgePortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBasePortType.setReference('40.4, 12.13.1.1, 12.13.1.2, 12.16, 12.16.2.1, 12.26')
if mibBuilder.loadTexts: ieee8021BridgeBasePortType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortType.setDescription('The port type. This value MUST be persistent over power up restart/reboot.')
ieee8021BridgeBasePortExternal = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBasePortExternal.setReference('12.4.2.1')
if mibBuilder.loadTexts: ieee8021BridgeBasePortExternal.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortExternal.setDescription('A boolean indicating whether the port is external. A value of true(1) means the port is external. A value of false(2) means the port is internal.')
ieee8021BridgeBasePortAdminPointToPoint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('forceFalse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeBasePortAdminPointToPoint.setReference('IEEE Std 802.1AC, 6.10, 12.8.2.1.3 o), 12.8.2.3.2 f), 26.4.1')
if mibBuilder.loadTexts: ieee8021BridgeBasePortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortAdminPointToPoint.setDescription('For a port running spanning tree, this object represents the administrative point-to-point status of the LAN segment attached to this port, using the enumeration values of IEEE Std 802.1AC. A value of forceTrue(1) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(2) indicates that this port should be treated as having a shared media connection. A value of auto(3) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means. Manipulating this object changes the underlying adminPointToPointMAC. For a VIP, the adminPointToPointMAC parameter controls the mechanism by which the Default Backbone Destination parameter for the VIP is determined. For a backbone service instance that includes only 2 VIPs, the value may be set to forceTrue(1) which permits dynamic learning of the Default Backbone Destination parameter. For a backbone service instance that includes more than 2 VIPs, the value MUST be set to ForceFalse(2) or auto(3). When this object is set to forceTrue(1) for a VIP, the Default Backbone Destination parameter is modified by the subsequent M_UNITDATA.indications as specified in 6.10.1 (and described in 26.4.1). Whenever the parameter is set to forceFalse(2) or auto(3), the value for the Default Backbone Destination parameter is set to the Backbone Service Instance Group Address for the VIP-ISID. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgeBasePortOperPointToPoint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBasePortOperPointToPoint.setReference('IEEE Std 802.1AC, 6.10, 12.8.2.1.3 p), 12.8.2.3.2 f), 26.4.1')
if mibBuilder.loadTexts: ieee8021BridgeBasePortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortOperPointToPoint.setDescription('For a port running spanning tree, this object represents the operational point-to-point status of the LAN segment attached to this port. It indicates whether a port is considered to have a point-to-point connection. If adminPointToPointMAC is set to auto(2), then the value of operPointToPointMAC is determined in accordance with the specific procedures defined for the MAC entity concerned, as defined in IEEE Std 802.1AC. The value is determined dynamically; that is, it is re-evaluated whenever the value of adminPointToPointMAC changes, and whenever the specific procedures defined for the MAC entity evaluate a change in its point-to-point status. For a VIP, this object simply reflects the value of the corresponding instance of ieee8021BridgeBasePortAdminPointToPoint. The value will be true(1) if that object is forceTrue(1), and the value will be false(2) if the value of that object is either forceFalse(2) or auto(3).')
ieee8021BridgeBasePortName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 4, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBasePortName.setReference('12.4.2.1')
if mibBuilder.loadTexts: ieee8021BridgeBasePortName.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortName.setDescription('A text string of up to 32 characters, of locally determined significance.')
ieee8021BridgeBaseIfToPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 5), )
if mibBuilder.loadTexts: ieee8021BridgeBaseIfToPortTable.setReference('17.2.2')
if mibBuilder.loadTexts: ieee8021BridgeBaseIfToPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseIfToPortTable.setDescription('A table that contains generic information about every ifIndex that is associated with this Bridge.')
ieee8021BridgeBaseIfToPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee8021BridgeBaseIfToPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseIfToPortEntry.setDescription('A list of objects containing information for each ifIndex of the Bridge.')
ieee8021BridgeBaseIfIndexComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 5, 1, 1), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBaseIfIndexComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseIfIndexComponentId.setDescription('The component ID for this ifIndex.')
ieee8021BridgeBaseIfIndexPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 5, 1, 2), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeBaseIfIndexPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseIfIndexPort.setDescription('The port for this ifIndex.')
ieee8021BridgePhyPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 6), )
if mibBuilder.loadTexts: ieee8021BridgePhyPortTable.setReference('12.5.1')
if mibBuilder.loadTexts: ieee8021BridgePhyPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePhyPortTable.setDescription('A table that contains ISS port number to Bridge componentID and port number mapping.')
ieee8021BridgePhyPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 6, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyPort"))
if mibBuilder.loadTexts: ieee8021BridgePhyPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePhyPortEntry.setDescription('A list of objects containing mapping for ISS port numbers to Bridge componentID and port numbers ')
ieee8021BridgePhyPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 6, 1, 1), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgePhyPort.setReference('12.26')
if mibBuilder.loadTexts: ieee8021BridgePhyPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePhyPort.setDescription('The ISS port.')
ieee8021BridgePhyPortIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 6, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePhyPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePhyPortIfIndex.setDescription('The value of the instance of the IfIndex object, defined in the IF-MIB, for the interface corresponding to this port, or the value 0 if the port has not been bound to an underlying frame source and sink. The underlying IfEntry indexed by this column MUST be persistent across reinitializations of the management system.')
ieee8021BridgePhyMacAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePhyMacAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePhyMacAddress.setDescription('The MAC address')
ieee8021BridgePhyPortToComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 6, 1, 4), IEEE8021PbbComponentIdentifierOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePhyPortToComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePhyPortToComponentId.setDescription('The component ID that this ISS port belongs to.')
ieee8021BridgePhyPortToInternalPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 1, 6, 1, 5), IEEE8021BridgePortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePhyPortToInternalPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePhyPortToInternalPort.setDescription('The port number to which this ISS port maps to.')
ieee8021BridgeTpPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: ieee8021BridgeTpPortTable.setReference('12.4.2')
if mibBuilder.loadTexts: ieee8021BridgeTpPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPortTable.setDescription('A table that contains information about every port that is associated with this transparent Bridge.')
ieee8021BridgeTpPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeTpPortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeTpPort"))
if mibBuilder.loadTexts: ieee8021BridgeTpPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPortEntry.setDescription('A list of objects containing information for each port of a transparent Bridge.')
ieee8021BridgeTpPortComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 2, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgeTpPortComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPortComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021BridgeTpPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 2, 1, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeTpPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPort.setDescription('The port number of the port for which this entry contains Transparent bridging management information.')
ieee8021BridgeTpPortMaxInfo = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 2, 1, 1, 3), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeTpPortMaxInfo.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPortMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
ieee8021BridgeTpPortInFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 2, 1, 1, 4), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeTpPortInFrames.setReference('12.6.1.1.3 a)')
if mibBuilder.loadTexts: ieee8021BridgeTpPortInFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPortInFrames.setDescription('The number of frames that have been received by this port from its segment. Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including Bridge management frames. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
ieee8021BridgeTpPortOutFrames = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 2, 1, 1, 5), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeTpPortOutFrames.setReference('12.6.1.1.3 d)')
if mibBuilder.loadTexts: ieee8021BridgeTpPortOutFrames.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPortOutFrames.setDescription('The number of frames that have been transmitted by this port to its segment. Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including Bridge management frames. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
ieee8021BridgeTpPortInDiscards = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 2, 1, 1, 6), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeTpPortInDiscards.setReference('12.6.1.1.3 c)')
if mibBuilder.loadTexts: ieee8021BridgeTpPortInDiscards.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPortInDiscards.setDescription('Count of received valid frames that were discarded (i.e., filtered) by the Forwarding Process. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
ieee8021BridgePortPriorityTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: ieee8021BridgePortPriorityTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortPriorityTable.setDescription('A table that contains information about every port that is associated with this transparent Bridge.')
ieee8021BridgePortPriorityEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 1, 1), )
ieee8021BridgeBasePortEntry.registerAugmentions(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortPriorityEntry"))
ieee8021BridgePortPriorityEntry.setIndexNames(*ieee8021BridgeBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021BridgePortPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortPriorityEntry.setDescription('A list of Default User Priorities for each port of a transparent Bridge. This is indexed by ieee8021BridgeBasePortComponentId and ieee8021BridgeBasePort.')
ieee8021BridgePortDefaultUserPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 1, 1, 1), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortDefaultUserPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDefaultUserPriority.setDescription('The default ingress priority for this port. This only has effect on media, such as Ethernet, that do not support native priority. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgePortNumTrafficClasses = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortNumTrafficClasses.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortNumTrafficClasses.setDescription('The number of egress traffic classes supported on this port. This object may optionally be read-only. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgePortPriorityCodePointSelection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 1, 1, 3), IEEE8021PriorityCodePoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortPriorityCodePointSelection.setReference('12.6.2.6, 12.6.2.7')
if mibBuilder.loadTexts: ieee8021BridgePortPriorityCodePointSelection.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortPriorityCodePointSelection.setDescription(' This object identifies the rows in the PCP encoding and decoding tables that are used to remark frames on this port if this remarking is enabled.')
ieee8021BridgePortUseDEI = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortUseDEI.setReference('12.6.2.11, 12.6.2.12')
if mibBuilder.loadTexts: ieee8021BridgePortUseDEI.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortUseDEI.setDescription('If the Use_DEI is set to true(1) for the Port then the drop_eligible parameter is encoded in the DEI of transmitted frames, and the drop_eligible parameter shall be true(1) for a received frame if the DEI is set in the VLAN tag or the Priority Code Point Decoding Table indicates drop_eligible True for the received PCP value. If the Use_DEI parameter is false(2), the DEI shall be transmitted as zero and ignored on receipt. The default value of the Use_DEI parameter is false(2).')
ieee8021BridgePortRequireDropEncoding = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortRequireDropEncoding.setReference('12.6.2.13, 12.6.2.14')
if mibBuilder.loadTexts: ieee8021BridgePortRequireDropEncoding.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortRequireDropEncoding.setDescription('If a Bridge supports encoding or decoding of drop_eligible from the PCP field of a VLAN tag (6.7.3) on any of its Ports, then it shall implement a Boolean parameter Require Drop Encoding on each of its Ports with default value false(2). If Require Drop Encoding is True and the Bridge Port cannot encode particular priorities with drop_eligible, then frames queued with those priorities and drop_eligible true(1) shall be discarded and not transmitted.')
ieee8021BridgePortServiceAccessPrioritySelection = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortServiceAccessPrioritySelection.setReference('12.6.2.15, 12.6.2.16')
if mibBuilder.loadTexts: ieee8021BridgePortServiceAccessPrioritySelection.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortServiceAccessPrioritySelection.setDescription('Indication of whether the Service Access Priority Selection function is supported on the Customer Bridge Port to request priority handling of the frame from a Port-based service interface.')
ieee8021BridgeUserPriorityRegenTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: ieee8021BridgeUserPriorityRegenTable.setReference('6.5.9, 6.9.4')
if mibBuilder.loadTexts: ieee8021BridgeUserPriorityRegenTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeUserPriorityRegenTable.setDescription('A list of Regenerated User Priorities for each received priority on each port of a Bridge. The regenerated priority value may be used to index the Traffic Class Table for each input port. This only has effect on media that support native priority. The default values for Regenerated User Priorities are the same as the User Priorities.')
ieee8021BridgeUserPriorityRegenEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeUserPriority"))
if mibBuilder.loadTexts: ieee8021BridgeUserPriorityRegenEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeUserPriorityRegenEntry.setDescription('A mapping of incoming priority to a regenerated priority.')
ieee8021BridgeUserPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 2, 1, 1), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021BridgeUserPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeUserPriority.setDescription('The priority for a frame received on this port.')
ieee8021BridgeRegenUserPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 2, 1, 2), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeRegenUserPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeRegenUserPriority.setDescription('The regenerated priority that the incoming User Priority is mapped to for this port. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgeTrafficClassTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 3), )
if mibBuilder.loadTexts: ieee8021BridgeTrafficClassTable.setReference('8.6.6, Table 8-4')
if mibBuilder.loadTexts: ieee8021BridgeTrafficClassTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTrafficClassTable.setDescription('A table mapping evaluated priority to Traffic Class, for forwarding by the Bridge. Traffic class is a number in the range (0..(ieee8021BridgePortNumTrafficClasses-1)).')
ieee8021BridgeTrafficClassEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 3, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeTrafficClassPriority"))
if mibBuilder.loadTexts: ieee8021BridgeTrafficClassEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTrafficClassEntry.setDescription('Priority to Traffic Class mapping.')
ieee8021BridgeTrafficClassPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 3, 1, 1), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021BridgeTrafficClassPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTrafficClassPriority.setDescription('The Priority value determined for the received frame. This value is equivalent to the priority indicated in the tagged frame received, or one of the evaluated priorities, determined according to the media-type. For untagged frames received from Ethernet media, this value is equal to the ieee8021BridgePortDefaultUserPriority value for the ingress port. For untagged frames received from non-Ethernet media, this value is equal to the ieee8021BridgeRegenUserPriority value for the ingress port and media-specific priority.')
ieee8021BridgeTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeTrafficClass.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTrafficClass.setDescription('The Traffic Class the received frame is mapped to. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgePortOutboundAccessPriorityTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 4), )
if mibBuilder.loadTexts: ieee8021BridgePortOutboundAccessPriorityTable.setReference('IEEE Std 802.1AC')
if mibBuilder.loadTexts: ieee8021BridgePortOutboundAccessPriorityTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortOutboundAccessPriorityTable.setDescription('A table mapping regenerated priority to Outbound Access Priority. This is a fixed mapping for all port types, with three options for IEEE 802.17 RPR.')
ieee8021BridgePortOutboundAccessPriorityEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 4, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeRegenUserPriority"))
if mibBuilder.loadTexts: ieee8021BridgePortOutboundAccessPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortOutboundAccessPriorityEntry.setDescription('Regenerated priority to Outbound Access Priority mapping.')
ieee8021BridgePortOutboundAccessPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 4, 1, 1), IEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePortOutboundAccessPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortOutboundAccessPriority.setDescription('The Outbound Access Priority the received frame is mapped to.')
ieee8021BridgePortDecodingTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 5), )
if mibBuilder.loadTexts: ieee8021BridgePortDecodingTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingTable.setDescription('A table that contains information about Priority Code Point Decoding Table for a Port of a provider Bridge. Alternative values for each table are specified as rows in Table 6-3 (6.9.3), with each alternative labeled by the number of distinct priorities that can be communicated, and the number of these for which drop precedence can be communicated. All writable objects in this table MUST be persistent over power up restart/reboot.')
ieee8021BridgePortDecodingEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 5, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortDecodingComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortDecodingPortNum"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortDecodingPriorityCodePointRow"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortDecodingPriorityCodePoint"))
if mibBuilder.loadTexts: ieee8021BridgePortDecodingEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingEntry.setDescription('A list of objects containing Priority Code Point Decoding information for a port of a provider Bridge.')
ieee8021BridgePortDecodingComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 5, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgePortDecodingComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021BridgePortDecodingPortNum = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 5, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPortNum.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPortNum.setDescription('A unique identifier of a port controlled by this VLAN bridging entity.')
ieee8021BridgePortDecodingPriorityCodePointRow = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 5, 1, 3), IEEE8021PriorityCodePoint())
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPriorityCodePointRow.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPriorityCodePointRow.setDescription('The specific row in Table 6-2 (6.9.3) indicating the PCP.')
ieee8021BridgePortDecodingPriorityCodePoint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPriorityCodePoint.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPriorityCodePoint.setDescription('The specific PCP value in Table 6-2 (6.9.3).')
ieee8021BridgePortDecodingPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 5, 1, 5), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPriority.setReference('6.9.3, 12.6.2.8, 12.6.2.9')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingPriority.setDescription('The specific priority value in Table 6-2 (6.9.3).')
ieee8021BridgePortDecodingDropEligible = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortDecodingDropEligible.setReference('6.9.3, 12.6.2.8, 12.6.2.9')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingDropEligible.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingDropEligible.setDescription('The drop eligibility value in Table 6-3 (6.7.3).')
ieee8021BridgePortEncodingTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 6), )
if mibBuilder.loadTexts: ieee8021BridgePortEncodingTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingTable.setDescription('A table that contains information about Priority Code Point Decoding Table for a Port of a provider Bridge. Alternative values for each table are specified as rows in Table 6-2 (6.9.3), with each alternative labeled by the number of distinct priorities that can be communicated, and the number of these for which drop precedence can be communicated. All writable objects in this table MUST be persistent over power up restart/reboot.')
ieee8021BridgePortEncodingEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 6, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortEncodingComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortEncodingPortNum"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortEncodingPriorityCodePointRow"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortEncodingPriorityCodePoint"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePortEncodingDropEligible"))
if mibBuilder.loadTexts: ieee8021BridgePortEncodingEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingEntry.setDescription('A list of objects containing Priority Code Point Encoding information for a port of a provider Bridge.')
ieee8021BridgePortEncodingComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 6, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgePortEncodingComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021BridgePortEncodingPortNum = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 6, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPortNum.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPortNum.setDescription('A unique identifier of a port controlled by this VLAN bridging entity.')
ieee8021BridgePortEncodingPriorityCodePointRow = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 6, 1, 3), IEEE8021PriorityCodePoint())
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPriorityCodePointRow.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPriorityCodePointRow.setDescription('The specific row in Table 6-2 (6.9.3) indicating the PCP row. (i.e. 8P0D, 7P1D, 6P2D, 5P3D)')
ieee8021BridgePortEncodingPriorityCodePoint = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPriorityCodePoint.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPriorityCodePoint.setDescription('The specific row in Table 6-2 (6.9.3) indicating the PCP. (i.e., 0,1,2,3,4,5,6,7).')
ieee8021BridgePortEncodingDropEligible = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 6, 1, 5), TruthValue())
if mibBuilder.loadTexts: ieee8021BridgePortEncodingDropEligible.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingDropEligible.setDescription('The specific row in Table 6-2 (6.9.3) indicating the drop eligibility. A value of true(1) means eligible for drop.')
ieee8021BridgePortEncodingPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 6, 1, 6), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPriority.setReference('6.9.3, 12.6.2.9, 12.6.2.10')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingPriority.setDescription('The encoding priority in Table 6-2 (6.9.3).')
ieee8021BridgeServiceAccessPriorityTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 7), )
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityTable.setDescription('A table that contains information about the Service Access Priority Selection function for a provider Bridge. The use of this table enables a mechanism for a Customer Bridge attached to a Provider Bridged Network to request priority handling of frames. All writable objects in this table MUST be persistent over power up restart/reboot.')
ieee8021BridgeServiceAccessPriorityEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 7, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeServiceAccessPriorityComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeServiceAccessPriorityPortNum"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeServiceAccessPriorityReceived"))
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityEntry.setDescription('A list of objects containing information about the Service Access Priority Selection function for a provider Bridge.')
ieee8021BridgeServiceAccessPriorityComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 7, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021BridgeServiceAccessPriorityPortNum = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 7, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityPortNum.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityPortNum.setDescription('A unique identifier of a port controlled by this VLAN bridging entity.')
ieee8021BridgeServiceAccessPriorityReceived = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 7, 1, 3), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityReceived.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityReceived.setDescription('The default received priority value in Table 6-4 (IEEE Std 802.1AC). (i.e., 0,1,2,3,4,5,6,7)')
ieee8021BridgeServiceAccessPriorityValue = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 3, 7, 1, 4), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityValue.setReference('12.6.2.17, 112.6.2.18')
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityValue.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityValue.setDescription('The regenerated priority value in Table 6-4 (IEEE Std 802.1AC). (i.e., 0,1,2,3,4,5,6,7)')
ieee8021BridgePortMrpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 4, 1), )
if mibBuilder.loadTexts: ieee8021BridgePortMrpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMrpTable.setDescription('A table of MRP control information about every Bridge port. This is indexed by ieee8021BridgeBasePortComponentId and ieee8021BridgeBasePort.')
ieee8021BridgePortMrpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 4, 1, 1), )
ieee8021BridgeBasePortEntry.registerAugmentions(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMrpEntry"))
ieee8021BridgePortMrpEntry.setIndexNames(*ieee8021BridgeBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021BridgePortMrpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMrpEntry.setDescription('MRP control information for a Bridge Port.')
ieee8021BridgePortMrpJoinTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 4, 1, 1, 1), TimeInterval().clone(20)).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortMrpJoinTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMrpJoinTime.setDescription('The MRP Join time, in centiseconds. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgePortMrpLeaveTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 4, 1, 1, 2), TimeInterval().clone(60)).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortMrpLeaveTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMrpLeaveTime.setDescription('The MRP Leave time, in centiseconds. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgePortMrpLeaveAllTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 4, 1, 1, 3), TimeInterval().clone(1000)).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortMrpLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMrpLeaveAllTime.setDescription('The MRP LeaveAll time, in centiseconds. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgePortMmrpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 5, 1), )
if mibBuilder.loadTexts: ieee8021BridgePortMmrpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMmrpTable.setDescription('A table of MMRP control and status information about every Bridge Port. Augments the ieee8021BridgeBasePortTable.')
ieee8021BridgePortMmrpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 5, 1, 1), )
ieee8021BridgeBasePortEntry.registerAugmentions(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMmrpEntry"))
ieee8021BridgePortMmrpEntry.setIndexNames(*ieee8021BridgeBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021BridgePortMmrpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMmrpEntry.setDescription('MMRP control and status information for a Bridge Port.')
ieee8021BridgePortMmrpEnabledStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 5, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortMmrpEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMmrpEnabledStatus.setDescription('The administrative state of MMRP operation on this port. The value true(1) indicates that MMRP is enabled on this port in all VLANs as long as ieee8021BridgeMmrpEnabledStatus is also true(1). A value of false(2) indicates that MMRP is disabled on this port in all VLANs: any MMRP packets received will be silently discarded, and no MMRP registrations will be propagated from other ports. Setting this to a value of true(1) will be stored by the agent but will only take effect on the MMRP protocol operation if ieee8021BridgeMmrpEnabledStatus also indicates the value true(1). This object affects all MMRP Applicant and Registrar state machines on this port. A transition from false(2) to true(1) will cause a reset of all MMRP state machines on this port. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgePortMmrpFailedRegistrations = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 5, 1, 1, 2), Counter64()).setUnits('failed MMRP registrations').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePortMmrpFailedRegistrations.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMmrpFailedRegistrations.setDescription('The total number of failed MMRP registrations, for any reason, in all VLANs, on this port.')
ieee8021BridgePortMmrpLastPduOrigin = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 5, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePortMmrpLastPduOrigin.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMmrpLastPduOrigin.setDescription('The Source MAC Address of the last MMRP message received on this port.')
ieee8021BridgePortRestrictedGroupRegistration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 5, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePortRestrictedGroupRegistration.setReference('11.2.3.2.3, 12.11.1.3')
if mibBuilder.loadTexts: ieee8021BridgePortRestrictedGroupRegistration.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortRestrictedGroupRegistration.setDescription('The state of Restricted Group Registration on this port. If the value of this control is true(1), then creation of a new dynamic entry is permitted only if there is a Static Filtering Entry for the VLAN concerned, in which the Registrar Administrative Control value is Normal Registration. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021BridgeILanIfTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 6, 1), )
if mibBuilder.loadTexts: ieee8021BridgeILanIfTable.setReference('17.3.2.2')
if mibBuilder.loadTexts: ieee8021BridgeILanIfTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeILanIfTable.setDescription("This table is a sparse augmentation of ifTable and controls the creation of the I-LAN Interface. An I-LAN Interface is used to create internal connections between Bridge Ports in a 802.1 device. An I-LAN Interfaces can be directly associated with a set of Bridge Ports. An I-LAN Interfaces can also be used as a stacking interface to relate other interfaces before association to Bridge Ports. For example, an I-LAN interface can be created to link traffic between a PIP and a CBP. In this case a CBP is created on the B-Component and the CBP's related IfEntry is stacked upon the IfEntry of the I-LAN. The PIP is stacked upon the I-LAN using the IfStackTable. Finally, a VIP is created on the I-Component and is associated with the PIP, thus completing the path from the I-Component's MAC relay to the CBP on the B-Component. Entries in this table MUST be persistent over power up restart/reboot.")
ieee8021BridgeILanIfEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee8021BridgeILanIfEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeILanIfEntry.setDescription('Each entry consists of a Row Status to control creation.')
ieee8021BridgeILanIfRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 6, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeILanIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeILanIfRowStatus.setDescription('This object is used to create and delete entries in this table and the Interface table.')
ieee8021BridgeDot1dPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 2, 1, 7, 1), )
if mibBuilder.loadTexts: ieee8021BridgeDot1dPortTable.setReference('17.5.3')
if mibBuilder.loadTexts: ieee8021BridgeDot1dPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeDot1dPortTable.setDescription('This table provides the capability to dynamically create and delete MAC Bridge Ports. Each entry in this table MUST have a corresponding entry in the ieee8021BridgeBasePortTable. Entries in this table MUST be persistent over power up restart/reboot.')
ieee8021BridgeDot1dPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 2, 1, 7, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021BridgeDot1dPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeDot1dPortEntry.setDescription('Each entry consists of a Row Status to control creation.')
ieee8021BridgeDot1dPortRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 2, 1, 7, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeDot1dPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeDot1dPortRowStatus.setDescription('This object is used to create and delete entries in this table and the ieee8021BridgeBasePortTable.')
ieee8021BridgeCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 2, 1))
ieee8021BridgeGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 2, 2, 2))
ieee8021BridgeBaseBridgeGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 1)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseBridgeAddress"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseNumPorts"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseComponentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeBaseBridgeGroup = ieee8021BridgeBaseBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseBridgeGroup.setDescription('Bridge level information for this device.')
ieee8021BridgeBasePortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 2)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortIfIndex"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortDelayExceededDiscards"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortMtuExceededDiscards"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortType"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortExternal"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortAdminPointToPoint"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortOperPointToPoint"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeBasePortGroup = ieee8021BridgeBasePortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBasePortGroup.setDescription('Information for each port on this device.')
ieee8021BridgeCapGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 3)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseDeviceCapabilities"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortCapabilities"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortTypeCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeCapGroup = ieee8021BridgeCapGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeCapGroup.setDescription('A collection of objects indicating the optional capabilities of the device.')
ieee8021BridgeDeviceMmrpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 4)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseMmrpEnabledStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeDeviceMmrpGroup = ieee8021BridgeDeviceMmrpGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeDeviceMmrpGroup.setDescription('A collection of objects providing device-level control for the Multicast Filtering extended Bridge services.')
ieee8021BridgeTpPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 6)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeTpPortMaxInfo"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeTpPortInFrames"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeTpPortOutFrames"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeTpPortInDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeTpPortGroup = ieee8021BridgeTpPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeTpPortGroup.setDescription('Dynamic Filtering Database information for each port of the Bridge.')
ieee8021BridgeDevicePriorityGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 7)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseTrafficClassesEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeDevicePriorityGroup = ieee8021BridgeDevicePriorityGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeDevicePriorityGroup.setDescription('A collection of objects providing device-level control for the Priority services.')
ieee8021BridgeDefaultPriorityGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 8)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortDefaultUserPriority"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortPriorityCodePointSelection"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortUseDEI"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortRequireDropEncoding"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortServiceAccessPrioritySelection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeDefaultPriorityGroup = ieee8021BridgeDefaultPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeDefaultPriorityGroup.setDescription('A collection of objects defining the priority applicable to each port for media that do not support native priority.')
ieee8021BridgeRegenPriorityGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 9)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeRegenUserPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeRegenPriorityGroup = ieee8021BridgeRegenPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeRegenPriorityGroup.setDescription('A collection of objects defining the User Priorities applicable to each port for media that support native priority.')
ieee8021BridgePriorityGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 10)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortNumTrafficClasses"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeTrafficClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePriorityGroup = ieee8021BridgePriorityGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePriorityGroup.setDescription('A collection of objects defining the traffic classes within a Bridge for each evaluated priority.')
ieee8021BridgeAccessPriorityGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 11)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortOutboundAccessPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeAccessPriorityGroup = ieee8021BridgeAccessPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeAccessPriorityGroup.setDescription('A collection of objects defining the media-dependent outbound access level for each priority.')
ieee8021BridgePortMrpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 12)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMrpJoinTime"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMrpLeaveTime"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMrpLeaveAllTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePortMrpGroup = ieee8021BridgePortMrpGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortMrpGroup.setDescription('A collection of objects providing port level control and status information for MRP operation.')
ieee8021BridgePortMmrpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 13)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMmrpEnabledStatus"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMmrpFailedRegistrations"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMmrpLastPduOrigin"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortRestrictedGroupRegistration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePortMmrpGroup = ieee8021BridgePortMmrpGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgePortMmrpGroup.setDescription('A collection of objects providing port level control and status information for MMRP operation.')
ieee8021BridgePortDecodingGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 14)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortDecodingPriority"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortDecodingDropEligible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePortDecodingGroup = ieee8021BridgePortDecodingGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortDecodingGroup.setDescription('A collection of objects providing statistics counters for decoding priority and drop eligibility for Bridge Ports.')
ieee8021BridgePortEncodingGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 15)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortEncodingPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePortEncodingGroup = ieee8021BridgePortEncodingGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePortEncodingGroup.setDescription('A collection of objects providing statistics counters for encoding priority and drop eligibility for Bridge Ports.')
ieee8021BridgeServiceAccessPriorityGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 16)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeServiceAccessPriorityValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeServiceAccessPriorityGroup = ieee8021BridgeServiceAccessPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeServiceAccessPriorityGroup.setDescription('A collection of objects providing statistics counters for service access priority.')
ieee8021BridgeInternalLANGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 17)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeILanIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeInternalLANGroup = ieee8021BridgeInternalLANGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeInternalLANGroup.setDescription('A collection of objects providing control of internal LAN configuration.')
ieee8021BridgeCreatableBaseBridgeGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 18)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeCreatableBaseBridgeGroup = ieee8021BridgeCreatableBaseBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeCreatableBaseBridgeGroup.setDescription('Controls the managment system directed creation of Bridge Components.')
ieee8021BridgeDot1dDynamicPortCreationGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 19)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeDot1dPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeDot1dDynamicPortCreationGroup = ieee8021BridgeDot1dDynamicPortCreationGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeDot1dDynamicPortCreationGroup.setDescription('A collection of objects providing dynamic creation and deletion of MAC Bridge Ports.')
ieee8021BridgeBaseIfToPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 20)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseIfIndexComponentId"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseIfIndexPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeBaseIfToPortGroup = ieee8021BridgeBaseIfToPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeBaseIfToPortGroup.setDescription('A collection of objects providing a map between interface index and component ID and Bridge Ports.')
ieee8021BridgePhyPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 2, 2, 2, 21)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyPortIfIndex"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyMacAddress"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyPortToComponentId"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyPortToInternalPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePhyPortGroup = ieee8021BridgePhyPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePhyPortGroup.setDescription('The collection of objects used to represent a ISS port management objects.')
ieee8021BridgeCompliance1 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 2, 2, 1, 3)).setObjects(("SNMPv2-MIB", "systemGroup"), ("IF-MIB", "ifGeneralInformationGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseBridgeGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeCreatableBaseBridgeGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeTpPortGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeInternalLANGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeDot1dDynamicPortCreationGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseIfToPortGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeCompliance1 = ieee8021BridgeCompliance1.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeCompliance1.setDescription('The compliance statement for devices supporting VLAN-unaware bridging services as defined in IEEE Std 802.1Q. Such devices support path cost values of 32-bits, and Bridge and port priority values are more restricted than in 802.1D-1995. Full support for the IEEE 802.1Q management objects requires implementation of the objects listed in the systemGroup from the SNMPv2-MIB [RFC3418], as well as the objects listed in the ifGeneralInformationGroup from the IF-MIB [RFC2863].')
ieee8021BridgeCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 2, 2, 1, 1)).setObjects(("SNMPv2-MIB", "systemGroup"), ("IF-MIB", "ifGeneralInformationGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBaseBridgeGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeCreatableBaseBridgeGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeTpPortGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeInternalLANGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeDot1dDynamicPortCreationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeCompliance = ieee8021BridgeCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeCompliance.setDescription('The compliance statement for devices supporting VLAN-unaware bridging services as defined in IEEE Std 802.1Q. Such devices support path cost values of 32-bits, and Bridge and port priority values are more restricted than in 802.1D-1995. Full support for the IEEE 802.1Q management objects requires implementation of the objects listed in the systemGroup from the SNMPv2-MIB [RFC3418], as well as the objects listed in the ifGeneralInformationGroup from the IF-MIB [RFC2863].')
ieee8021BridgePriorityAndMulticastFilteringCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 2, 2, 1, 2)).setObjects(("IEEE8021-BRIDGE-MIB", "ieee8021BridgeCapGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeDeviceMmrpGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeDevicePriorityGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeDefaultPriorityGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeRegenPriorityGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePriorityGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeAccessPriorityGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMrpGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortMmrpGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortDecodingGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgePortEncodingGroup"), ("IEEE8021-BRIDGE-MIB", "ieee8021BridgeServiceAccessPriorityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePriorityAndMulticastFilteringCompliance = ieee8021BridgePriorityAndMulticastFilteringCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgePriorityAndMulticastFilteringCompliance.setDescription('The compliance statement for device support of Priority and Multicast Filtering extended bridging services.')
mibBuilder.exportSymbols("IEEE8021-BRIDGE-MIB", ieee8021BridgePortEncodingEntry=ieee8021BridgePortEncodingEntry, ieee8021BridgePortDecodingComponentId=ieee8021BridgePortDecodingComponentId, ieee8021BridgeTrafficClassEntry=ieee8021BridgeTrafficClassEntry, ieee8021BridgeCreatableBaseBridgeGroup=ieee8021BridgeCreatableBaseBridgeGroup, ieee8021BridgeBase=ieee8021BridgeBase, ieee8021BridgePortDefaultUserPriority=ieee8021BridgePortDefaultUserPriority, ieee8021BridgePortMmrpLastPduOrigin=ieee8021BridgePortMmrpLastPduOrigin, ieee8021BridgePhyMacAddress=ieee8021BridgePhyMacAddress, ieee8021BridgePortMmrpEnabledStatus=ieee8021BridgePortMmrpEnabledStatus, ieee8021BridgePortMmrpFailedRegistrations=ieee8021BridgePortMmrpFailedRegistrations, ieee8021BridgeMrp=ieee8021BridgeMrp, ieee8021BridgeMib=ieee8021BridgeMib, ieee8021BridgeBaseIfToPortEntry=ieee8021BridgeBaseIfToPortEntry, ieee8021BridgeTpPortOutFrames=ieee8021BridgeTpPortOutFrames, ieee8021BridgeServiceAccessPriorityPortNum=ieee8021BridgeServiceAccessPriorityPortNum, ieee8021BridgeTpPortMaxInfo=ieee8021BridgeTpPortMaxInfo, ieee8021BridgePortEncodingPriorityCodePointRow=ieee8021BridgePortEncodingPriorityCodePointRow, ieee8021BridgePortDecodingPriorityCodePointRow=ieee8021BridgePortDecodingPriorityCodePointRow, ieee8021BridgeServiceAccessPriorityComponentId=ieee8021BridgeServiceAccessPriorityComponentId, ieee8021BridgeBasePortTypeCapabilities=ieee8021BridgeBasePortTypeCapabilities, PYSNMP_MODULE_ID=ieee8021BridgeMib, ieee8021BridgeDot1dDynamicPortCreationGroup=ieee8021BridgeDot1dDynamicPortCreationGroup, ieee8021BridgeBasePortDelayExceededDiscards=ieee8021BridgeBasePortDelayExceededDiscards, ieee8021BridgeTpPortComponentId=ieee8021BridgeTpPortComponentId, ieee8021BridgePortEncodingDropEligible=ieee8021BridgePortEncodingDropEligible, ieee8021BridgePortMmrpEntry=ieee8021BridgePortMmrpEntry, ieee8021BridgeDot1dPortRowStatus=ieee8021BridgeDot1dPortRowStatus, ieee8021BridgeBasePortEntry=ieee8021BridgeBasePortEntry, ieee8021BridgePhyPortEntry=ieee8021BridgePhyPortEntry, ieee8021BridgeBasePortComponentId=ieee8021BridgeBasePortComponentId, ieee8021BridgeBaseComponentType=ieee8021BridgeBaseComponentType, ieee8021BridgeBaseEntry=ieee8021BridgeBaseEntry, ieee8021BridgePortRestrictedGroupRegistration=ieee8021BridgePortRestrictedGroupRegistration, ieee8021BridgePhyPort=ieee8021BridgePhyPort, ieee8021BridgePriority=ieee8021BridgePriority, ieee8021BridgePortNumTrafficClasses=ieee8021BridgePortNumTrafficClasses, ieee8021BridgePortUseDEI=ieee8021BridgePortUseDEI, ieee8021BridgeBaseIfIndexPort=ieee8021BridgeBaseIfIndexPort, ieee8021BridgePortEncodingPriority=ieee8021BridgePortEncodingPriority, ieee8021BridgePortDecodingPriority=ieee8021BridgePortDecodingPriority, ieee8021BridgeTrafficClassTable=ieee8021BridgeTrafficClassTable, ieee8021BridgeNotifications=ieee8021BridgeNotifications, ieee8021BridgePriorityGroup=ieee8021BridgePriorityGroup, ieee8021BridgeILanIfRowStatus=ieee8021BridgeILanIfRowStatus, ieee8021BridgeTpPortTable=ieee8021BridgeTpPortTable, ieee8021BridgePortMrpGroup=ieee8021BridgePortMrpGroup, ieee8021BridgeBaseComponentId=ieee8021BridgeBaseComponentId, ieee8021BridgeDefaultPriorityGroup=ieee8021BridgeDefaultPriorityGroup, ieee8021BridgePortEncodingGroup=ieee8021BridgePortEncodingGroup, ieee8021BridgeTrafficClass=ieee8021BridgeTrafficClass, ieee8021BridgeGroups=ieee8021BridgeGroups, ieee8021BridgeBasePortIfIndex=ieee8021BridgeBasePortIfIndex, ieee8021BridgeBaseMmrpEnabledStatus=ieee8021BridgeBaseMmrpEnabledStatus, ieee8021BridgePriorityAndMulticastFilteringCompliance=ieee8021BridgePriorityAndMulticastFilteringCompliance, ieee8021BridgeBaseBridgeAddress=ieee8021BridgeBaseBridgeAddress, ieee8021BridgeBaseIfToPortGroup=ieee8021BridgeBaseIfToPortGroup, ieee8021BridgePhyPortTable=ieee8021BridgePhyPortTable, ieee8021BridgePortOutboundAccessPriority=ieee8021BridgePortOutboundAccessPriority, ieee8021BridgePortEncodingPortNum=ieee8021BridgePortEncodingPortNum, ieee8021BridgeTpPortInDiscards=ieee8021BridgeTpPortInDiscards, ieee8021BridgeTpPortInFrames=ieee8021BridgeTpPortInFrames, ieee8021BridgeTp=ieee8021BridgeTp, ieee8021BridgeBaseIfToPortTable=ieee8021BridgeBaseIfToPortTable, ieee8021BridgePortPriorityCodePointSelection=ieee8021BridgePortPriorityCodePointSelection, ieee8021BridgePortRequireDropEncoding=ieee8021BridgePortRequireDropEncoding, ieee8021BridgeILanIfTable=ieee8021BridgeILanIfTable, ieee8021BridgePhyPortToInternalPort=ieee8021BridgePhyPortToInternalPort, ieee8021BridgePortServiceAccessPrioritySelection=ieee8021BridgePortServiceAccessPrioritySelection, ieee8021BridgeServiceAccessPriorityValue=ieee8021BridgeServiceAccessPriorityValue, ieee8021BridgeRegenPriorityGroup=ieee8021BridgeRegenPriorityGroup, ieee8021BridgeDot1dPortEntry=ieee8021BridgeDot1dPortEntry, ieee8021BridgeServiceAccessPriorityEntry=ieee8021BridgeServiceAccessPriorityEntry, ieee8021BridgeObjects=ieee8021BridgeObjects, ieee8021BridgeUserPriorityRegenTable=ieee8021BridgeUserPriorityRegenTable, ieee8021BridgeDevicePriorityGroup=ieee8021BridgeDevicePriorityGroup, ieee8021BridgeTpPortEntry=ieee8021BridgeTpPortEntry, ieee8021BridgePortMrpLeaveTime=ieee8021BridgePortMrpLeaveTime, ieee8021BridgePortDecodingDropEligible=ieee8021BridgePortDecodingDropEligible, ieee8021BridgeBasePortName=ieee8021BridgeBasePortName, ieee8021BridgePhyPortToComponentId=ieee8021BridgePhyPortToComponentId, ieee8021BridgePortDecodingPriorityCodePoint=ieee8021BridgePortDecodingPriorityCodePoint, ieee8021BridgePhyPortIfIndex=ieee8021BridgePhyPortIfIndex, ieee8021BridgePortDecodingTable=ieee8021BridgePortDecodingTable, ieee8021BridgePortMmrpTable=ieee8021BridgePortMmrpTable, ieee8021BridgeBasePortMtuExceededDiscards=ieee8021BridgeBasePortMtuExceededDiscards, ieee8021BridgeBasePortOperPointToPoint=ieee8021BridgeBasePortOperPointToPoint, ieee8021BridgePortEncodingTable=ieee8021BridgePortEncodingTable, ieee8021BridgeDeviceMmrpGroup=ieee8021BridgeDeviceMmrpGroup, ieee8021BridgePortMrpLeaveAllTime=ieee8021BridgePortMrpLeaveAllTime, ieee8021BridgePortPriorityTable=ieee8021BridgePortPriorityTable, ieee8021BridgeBaseDeviceCapabilities=ieee8021BridgeBaseDeviceCapabilities, ieee8021BridgePortOutboundAccessPriorityEntry=ieee8021BridgePortOutboundAccessPriorityEntry, ieee8021BridgePortDecodingGroup=ieee8021BridgePortDecodingGroup, ieee8021BridgeBasePortGroup=ieee8021BridgeBasePortGroup, ieee8021BridgeServiceAccessPriorityTable=ieee8021BridgeServiceAccessPriorityTable, ieee8021BridgePortDecodingEntry=ieee8021BridgePortDecodingEntry, ieee8021BridgeUserPriority=ieee8021BridgeUserPriority, ieee8021BridgeServiceAccessPriorityGroup=ieee8021BridgeServiceAccessPriorityGroup, ieee8021BridgeCompliance1=ieee8021BridgeCompliance1, ieee8021BridgeTpPortGroup=ieee8021BridgeTpPortGroup, ieee8021BridgeBasePortCapabilities=ieee8021BridgeBasePortCapabilities, ieee8021BridgePortMrpTable=ieee8021BridgePortMrpTable, ieee8021BridgePortOutboundAccessPriorityTable=ieee8021BridgePortOutboundAccessPriorityTable, ieee8021BridgeDot1d=ieee8021BridgeDot1d, ieee8021BridgeBaseTrafficClassesEnabled=ieee8021BridgeBaseTrafficClassesEnabled, ieee8021BridgeBaseNumPorts=ieee8021BridgeBaseNumPorts, ieee8021BridgeCompliance=ieee8021BridgeCompliance, ieee8021BridgeBasePortTable=ieee8021BridgeBasePortTable, ieee8021BridgeTpPort=ieee8021BridgeTpPort, ieee8021BridgePortMrpEntry=ieee8021BridgePortMrpEntry, ieee8021BridgeConformance=ieee8021BridgeConformance, ieee8021BridgePortEncodingPriorityCodePoint=ieee8021BridgePortEncodingPriorityCodePoint, ieee8021BridgeTrafficClassPriority=ieee8021BridgeTrafficClassPriority, ieee8021BridgeMmrp=ieee8021BridgeMmrp, ieee8021BridgeInternalLan=ieee8021BridgeInternalLan, ieee8021BridgeUserPriorityRegenEntry=ieee8021BridgeUserPriorityRegenEntry, ieee8021BridgeBaseBridgeGroup=ieee8021BridgeBaseBridgeGroup, ieee8021BridgeILanIfEntry=ieee8021BridgeILanIfEntry, ieee8021BridgeDot1dPortTable=ieee8021BridgeDot1dPortTable, ieee8021BridgeBaseRowStatus=ieee8021BridgeBaseRowStatus, ieee8021BridgeBaseIfIndexComponentId=ieee8021BridgeBaseIfIndexComponentId, ieee8021BridgePortEncodingComponentId=ieee8021BridgePortEncodingComponentId, ieee8021BridgeAccessPriorityGroup=ieee8021BridgeAccessPriorityGroup, ieee8021BridgePortPriorityEntry=ieee8021BridgePortPriorityEntry, ieee8021BridgePortMrpJoinTime=ieee8021BridgePortMrpJoinTime, ieee8021BridgePortMmrpGroup=ieee8021BridgePortMmrpGroup, ieee8021BridgeCapGroup=ieee8021BridgeCapGroup, ieee8021BridgeServiceAccessPriorityReceived=ieee8021BridgeServiceAccessPriorityReceived, ieee8021BridgeBasePort=ieee8021BridgeBasePort, ieee8021BridgeRegenUserPriority=ieee8021BridgeRegenUserPriority, ieee8021BridgeBaseTable=ieee8021BridgeBaseTable, ieee8021BridgeBasePortExternal=ieee8021BridgeBasePortExternal, ieee8021BridgeCompliances=ieee8021BridgeCompliances, ieee8021BridgeInternalLANGroup=ieee8021BridgeInternalLANGroup, ieee8021BridgePhyPortGroup=ieee8021BridgePhyPortGroup, ieee8021BridgeBasePortType=ieee8021BridgeBasePortType, ieee8021BridgeBasePortAdminPointToPoint=ieee8021BridgeBasePortAdminPointToPoint, ieee8021BridgePortDecodingPortNum=ieee8021BridgePortDecodingPortNum)
