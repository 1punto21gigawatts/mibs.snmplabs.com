#
# PySNMP MIB module SYSAPPL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYSAPPL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, NotificationType, Bits, Counter64, Integer32, ObjectIdentity, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Gauge32, TimeTicks, Counter32, mib_2 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Bits", "Counter64", "Integer32", "ObjectIdentity", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Gauge32", "TimeTicks", "Counter32", "mib-2")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
sysApplMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 54))
sysApplMIB.setRevisions(('2006-01-06 00:00', '1997-10-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sysApplMIB.setRevisionsDescriptions(('Imported Unsigned32 from SNMPv2-SMI.', 'Initial version of the mib module, published as RFC 2287.',))
if mibBuilder.loadTexts: sysApplMIB.setLastUpdated('200601060000Z')
if mibBuilder.loadTexts: sysApplMIB.setOrganization('IETF Applications MIB Working Group')
if mibBuilder.loadTexts: sysApplMIB.setContactInfo('Cheryl Krupczak (Editor, WG Advisor) Postal: Empire Technologies, Inc. 541 Tenth Street NW Suite 169 Atlanta, GA 30318 USA Phone: (770) 384-0184 Email: cheryl@empiretech.com Jon Saperia (WG Chair) Postal: BGS Systems, Inc. One First Avenue Waltham, MA 02254-9111 USA Phone: (617) 891-0000 Email: saperia@networks.bgs.com')
if mibBuilder.loadTexts: sysApplMIB.setDescription('The MIB module defines management objects that model applications as collections of executables and files installed and executing on a host system. The MIB presents a system-level view of applications; i.e., objects in this MIB are limited to those attributes that can typically be obtained from the system itself without adding special instrumentation to the applications.')
sysApplOBJ = MibIdentifier((1, 3, 6, 1, 2, 1, 54, 1))
sysApplInstalled = MibIdentifier((1, 3, 6, 1, 2, 1, 54, 1, 1))
sysApplRun = MibIdentifier((1, 3, 6, 1, 2, 1, 54, 1, 2))
sysApplMap = MibIdentifier((1, 3, 6, 1, 2, 1, 54, 1, 3))
sysApplNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 54, 2))
sysApplConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 54, 3))
class RunState(TextualConvention, Integer32):
    description = 'This TC describes the current execution state of a running application or process. The possible values are: running(1), runnable(2), - waiting for a resource (CPU, etc.) waiting(3), - waiting for an event exiting(4), other(5) - other invalid state'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("running", 1), ("runnable", 2), ("waiting", 3), ("exiting", 4), ("other", 5))

class LongUtf8String(TextualConvention, OctetString):
    description = 'To facilitate internationalization, this TC represents information taken from the ISO/IEC IS 10646-1 character set, encoded as an octet string using the UTF-8 character encoding scheme described in RFC 2044 [10]. For strings in 7-bit US-ASCII, there is no impact since the UTF-8 representation is identical to the US-ASCII encoding.'
    status = 'current'
    displayHint = '1024a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1024)

class Utf8String(TextualConvention, OctetString):
    description = 'To facilitate internationalization, this TC represents information taken from the ISO/IEC IS 10646-1 character set, encoded as an octet string using the UTF-8 character encoding scheme described in RFC 2044 [10]. For strings in 7-bit US-ASCII, there is no impact since the UTF-8 representation is identical to the US-ASCII encoding.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

sysApplInstallPkgTable = MibTable((1, 3, 6, 1, 2, 1, 54, 1, 1, 1), )
if mibBuilder.loadTexts: sysApplInstallPkgTable.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgTable.setDescription('The table listing the software application packages installed on a host computer. In order to appear in this table, it may be necessary for the application to be installed using some type of software installation mechanism or global registry so that its existence can be detected by the agent implementation.')
sysApplInstallPkgEntry = MibTableRow((1, 3, 6, 1, 2, 1, 54, 1, 1, 1, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplInstallPkgIndex"))
if mibBuilder.loadTexts: sysApplInstallPkgEntry.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgEntry.setDescription('The logical row describing an installed application package.')
sysApplInstallPkgIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: sysApplInstallPkgIndex.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgIndex.setDescription('An integer used only for indexing purposes. Generally monotonically increasing from 1 as new applications are installed. The value for each installed application must remain constant at least from one re-initialization of the network management entity which implements this MIB module to the next re-initialization. The specific value is meaningful only within a given SNMP entity. A sysApplInstallPkgIndex value must not be re-used until the next agent entity restart in the event the installed application entry is deleted.')
sysApplInstallPkgManufacturer = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 1, 1, 2), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallPkgManufacturer.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgManufacturer.setDescription('The Manufacturer of the software application package.')
sysApplInstallPkgProductName = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 1, 1, 3), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallPkgProductName.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgProductName.setDescription('The name assigned to the software application package by the Manufacturer.')
sysApplInstallPkgVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 1, 1, 4), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallPkgVersion.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgVersion.setDescription('The version number assigned to the application package by the manufacturer of the software.')
sysApplInstallPkgSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 1, 1, 5), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallPkgSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgSerialNumber.setDescription('The serial number of the software assigned by the manufacturer.')
sysApplInstallPkgDate = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallPkgDate.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgDate.setDescription('The date and time this software application was installed on the host.')
sysApplInstallPkgLocation = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 1, 1, 7), LongUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallPkgLocation.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallPkgLocation.setDescription("The complete path name where the application package is installed. For example, the value would be '/opt/MyapplDir' if the application package was installed in the /opt/MyapplDir directory.")
sysApplInstallElmtTable = MibTable((1, 3, 6, 1, 2, 1, 54, 1, 1, 2), )
if mibBuilder.loadTexts: sysApplInstallElmtTable.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtTable.setDescription('This table details the individual application package elements (files and executables) which comprise the applications defined in the sysApplInstallPkg Table. Each entry in this table has an index to the sysApplInstallPkg table to identify the application package of which it is a part. As a result, there may be many entries in this table for each instance in the sysApplInstallPkg Table. Table entries are indexed by sysApplInstallPkgIndex, sysApplInstallElmtIndex to facilitate retrieval of all elements associated with a particular installed application package.')
sysApplInstallElmtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplInstallPkgIndex"), (0, "SYSAPPL-MIB", "sysApplInstallElmtIndex"))
if mibBuilder.loadTexts: sysApplInstallElmtEntry.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtEntry.setDescription('The logical row describing an element of an installed application. The element may be an executable or non-executable file.')
sysApplInstallElmtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: sysApplInstallElmtIndex.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtIndex.setDescription('An arbitrary integer used for indexing. The value of this index is unique among all rows in this table that exist or have existed since the last agent restart.')
sysApplInstallElmtName = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 2), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtName.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtName.setDescription('The name of this element which is contained in the application.')
sysApplInstallElmtType = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("nonexecutable", 2), ("operatingSystem", 3), ("deviceDriver", 4), ("application", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtType.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtType.setDescription('The type of element that is part of the installed application.')
sysApplInstallElmtDate = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtDate.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtDate.setDescription('The date and time that this component was installed on the system.')
sysApplInstallElmtPath = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 5), LongUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtPath.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtPath.setDescription("The full directory path where this element is installed. For example, the value would be '/opt/EMPuma/bin' for an element installed in the directory '/opt/EMPuma/bin'. Most application packages include information about the elements contained in the package. In addition, elements are typically installed in sub-directories under the package installation directory. In cases where the element path names are not included in the package information itself, the path can usually be determined by a simple search of the sub-directories. If the element is not installed in that location and there is no other information available to the agent implementation, then the path is unknown and null is returned.")
sysApplInstallElmtSizeHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtSizeHigh.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtSizeHigh.setDescription('The installed file size in 2^32 byte blocks. This is the size of the file on disk immediately after installation. For example, for a file with a total size of 4,294,967,296 bytes, this variable would have a value of 1; for a file with a total size of 4,294,967,295 bytes this variable would be 0.')
sysApplInstallElmtSizeLow = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtSizeLow.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtSizeLow.setDescription('The installed file size modulo 2^32 bytes. This is the size of the file on disk immediately after installation. For example, for a file with a total size of 4,294,967,296 bytes this variable would have a value of 0; for a file with a total size of 4,294,967,295 bytes this variable would be 4,294,967,295.')
sysApplInstallElmtRole = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysApplInstallElmtRole.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtRole.setDescription('An operator assigned value used in the determination of application status. This value is used by the agent to determine both the mapping of started processes to the initiation of an application, as well as to allow for a determination of application health. The default value, unknown(5), is used when an operator has not yet assigned one of the other values. If unknown(5) is set, bits 1 - 4 have no meaning. The possible values are: executable(0), An application may have one or more executable elements. The rest of the bits have no meaning if the element is not executable. exclusive(1), Only one copy of an exclusive element may be running per invocation of the running application. primary(2), The primary executable. An application can have one, and only one element that is designated as the primary executable. The execution of this element constitutes an invocation of the application. This is used by the agent implementation to determine the initiation of an application. The primary executable must remain running long enough for the agent implementation to detect its presence. required(3), An application may have zero or more required elements. All required elements must be running in order for the application to be judged to be running and healthy. dependent(4), An application may have zero or more dependent elements. Dependent elements may not be running unless required elements are. unknown(5) Default value for the case when an operator has not yet assigned one of the other values. When set, bits 1, 2, 3, and 4 have no meaning. sysApplInstallElmtRole is used by the agent implementation in determining the initiation of an application, the current state of a running application (see sysApplRunCurrentState), when an application invocation is no longer running, and the exit status of a terminated application invocation (see sysApplPastRunExitState).')
sysApplInstallElmtModifyDate = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtModifyDate.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtModifyDate.setDescription('The date and time that this element was last modified. Modification of the sysApplInstallElmtRole columnar object does NOT constitute a modification of the element itself and should not affect the value of this object.')
sysApplInstallElmtCurSizeHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtCurSizeHigh.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtCurSizeHigh.setDescription('The current file size in 2^32 byte blocks. For example, for a file with a total size of 4,294,967,296 bytes, this variable would have a value of 1; for a file with a total size of 4,294,967,295 bytes this variable would be 0.')
sysApplInstallElmtCurSizeLow = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplInstallElmtCurSizeLow.setStatus('current')
if mibBuilder.loadTexts: sysApplInstallElmtCurSizeLow.setDescription('The current file size modulo 2^32 bytes. For example, for a file with a total size of 4,294,967,296 bytes this variable would have a value of 0; for a file with a total size of 4,294,967,295 bytes this variable would be 4,294,967,295.')
sysApplRunTable = MibTable((1, 3, 6, 1, 2, 1, 54, 1, 2, 1), )
if mibBuilder.loadTexts: sysApplRunTable.setStatus('current')
if mibBuilder.loadTexts: sysApplRunTable.setDescription("The table describes the applications which are executing on the host. Each time an application is invoked, an entry is created in this table. When an application ends, the entry is removed from this table and a corresponding entry is created in the SysApplPastRunTable. A new entry is created in this table whenever the agent implementation detects a new running process that is an installed application element whose sysApplInstallElmtRole designates it as being the application's primary executable (sysApplInstallElmtRole = primary(2) ). The table is indexed by sysApplInstallPkgIndex, sysApplRunIndex to enable managers to easily locate all invocations of a particular application package.")
sysApplRunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 54, 1, 2, 1, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplInstallPkgIndex"), (0, "SYSAPPL-MIB", "sysApplRunIndex"))
if mibBuilder.loadTexts: sysApplRunEntry.setStatus('current')
if mibBuilder.loadTexts: sysApplRunEntry.setDescription('The logical row describing an application which is currently running on this host.')
sysApplRunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: sysApplRunIndex.setStatus('current')
if mibBuilder.loadTexts: sysApplRunIndex.setDescription('Part of the index for this table. An arbitrary integer used only for indexing purposes. Generally monotonically increasing from 1 as new applications are started on the host, it uniquely identifies application invocations. The numbering for this index increases by 1 for each INVOCATION of an application, regardless of which installed application package this entry represents a running instance of. An example of the indexing for a couple of entries is shown below. : sysApplRunStarted.17.14 sysApplRunStarted.17.63 sysApplRunStarted.18.13 : In this example, the agent has observed 12 application invocations when the application represented by entry 18 in the sysApplInstallPkgTable is invoked. The next invocation detected by the agent is an invocation of installed application package 17. Some time later, installed application 17 is invoked a second time. NOTE: this index is not intended to reflect a real-time (wall clock time) ordering of application invocations; it is merely intended to uniquely identify running instances of applications. Although the sysApplInstallPkgIndex is included in the INDEX clause for this table, it serves only to ease searching of this table by installed application and does not contribute to uniquely identifying table entries.')
sysApplRunStarted = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplRunStarted.setStatus('current')
if mibBuilder.loadTexts: sysApplRunStarted.setDescription('The date and time that the application was started.')
sysApplRunCurrentState = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 1, 1, 3), RunState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplRunCurrentState.setStatus('current')
if mibBuilder.loadTexts: sysApplRunCurrentState.setDescription('The current state of the running application instance. The possible values are running(1), runnable(2) but waiting for a resource such as CPU, waiting(3) for an event, exiting(4), or other(5). This value is based on an evaluation of the running elements of this application instance (see sysApplElmRunState) and their Roles as defined by sysApplInstallElmtRole. An agent implementation may detect that an application instance is in the process of exiting if one or more of its REQUIRED elements are no longer running. Most agent implementations will wait until a second internal poll has been completed to give the system time to start REQUIRED elements before marking the application instance as exiting.')
sysApplPastRunTable = MibTable((1, 3, 6, 1, 2, 1, 54, 1, 2, 2), )
if mibBuilder.loadTexts: sysApplPastRunTable.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunTable.setDescription("A history of the applications that have previously run on the host computer. An entry's information is moved to this table from the sysApplRunTable when the invoked application represented by the entry ceases to be running. An agent implementation can determine that an application invocation is no longer running by evaluating the running elements of the application instance and their Roles as defined by sysApplInstallElmtRole. Obviously, if there are no running elements for the application instance, then the application invocation is no longer running. If any one of the REQUIRED elements is not running, the application instance may be in the process of exiting. Most agent implementations will wait until a second internal poll has been completed to give the system time to either restart partial failures or to give all elements time to exit. If, after the second poll, there are REQUIRED elements that are not running, then the application instance may be considered by the agent implementation to no longer be running. Entries remain in the sysApplPastRunTable until they are aged out when either the table size reaches a maximum as determined by the sysApplPastRunMaxRows, or when an entry has aged to exceed a time limit as set by sysApplPastRunTblTimeLimit. Entries in this table are indexed by sysApplInstallPkgIndex, sysApplPastRunIndex to facilitate retrieval of all past run invocations of a particular installed application.")
sysApplPastRunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 54, 1, 2, 2, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplInstallPkgIndex"), (0, "SYSAPPL-MIB", "sysApplPastRunIndex"))
if mibBuilder.loadTexts: sysApplPastRunEntry.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunEntry.setDescription("The logical row describing an invocation of an application which was previously run and has terminated. The entry is basically copied from the sysApplRunTable when the application instance terminates. Hence, the entry's value for sysApplPastRunIndex is the same as its value was for sysApplRunIndex.")
sysApplPastRunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: sysApplPastRunIndex.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunIndex.setDescription('Part of the index for this table. An integer matching the value of the removed sysApplRunIndex corresponding to this row.')
sysApplPastRunStarted = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplPastRunStarted.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunStarted.setDescription('The date and time that the application was started.')
sysApplPastRunExitState = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("complete", 1), ("failed", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplPastRunExitState.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunExitState.setDescription('The state of the application instance when it terminated. This value is based on an evaluation of the running elements of an application and their Roles as defined by sysApplInstallElmtRole. An application instance is said to have exited in a COMPLETE state and its entry is removed from the sysApplRunTable and added to the sysApplPastRunTable when the agent detects that ALL elements of an application invocation are no longer running. Most agent implementations will wait until a second internal poll has been completed to give the system time to either restart partial failures or to give all elements time to exit. A failed state occurs if, after the second poll, any elements continue to run but one or more of the REQUIRED elements are no longer running. All other combinations MUST be defined as OTHER.')
sysApplPastRunTimeEnded = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplPastRunTimeEnded.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunTimeEnded.setDescription('The DateAndTime the application instance was determined to be no longer running.')
sysApplElmtRunTable = MibTable((1, 3, 6, 1, 2, 1, 54, 1, 2, 3), )
if mibBuilder.loadTexts: sysApplElmtRunTable.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunTable.setDescription("The table describes the processes which are currently executing on the host system. Each entry represents a running process and is associated with the invoked application of which that process is a part, if possible. This table contains an entry for every process currently running on the system, regardless of whether its 'parent' application can be determined. So, for example, processes like 'ps' and 'grep' will have entries though they are not associated with an installed application package. Because a running application may involve more than one executable, it is possible to have multiple entries in this table for each application. Entries are removed from this table when the process terminates. The table is indexed by sysApplElmtRunInstallPkg, sysApplElmtRunInvocID, and sysApplElmtRunIndex to facilitate the retrieval of all running elements of a particular invoked application which has been installed on the system.")
sysApplElmtRunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplElmtRunInstallPkg"), (0, "SYSAPPL-MIB", "sysApplElmtRunInvocID"), (0, "SYSAPPL-MIB", "sysApplElmtRunIndex"))
if mibBuilder.loadTexts: sysApplElmtRunEntry.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunEntry.setDescription('The logical row describing a process currently running on this host. When possible, the entry is associated with the invoked application of which it is a part.')
sysApplElmtRunInstallPkg = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: sysApplElmtRunInstallPkg.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunInstallPkg.setDescription("Part of the index for this table, this value identifies the installed software package for the application of which this process is a part. Provided that the process's 'parent' application can be determined, the value of this object is the same value as the sysApplInstallPkgIndex for the entry in the sysApplInstallPkgTable that corresponds to the installed application of which this process is a part. If, however, the 'parent' application cannot be determined, (for example the process is not part of a particular installed application), the value for this object is then '0', signifying that this process cannot be related back to an application, and in turn, an installed software package.")
sysApplElmtRunInvocID = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: sysApplElmtRunInvocID.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunInvocID.setDescription("Part of the index for this table, this value identifies the invocation of an application of which this process is a part. Provided that the 'parent' application can be determined, the value of this object is the same value as the sysApplRunIndex for the corresponding application invocation in the sysApplRunTable. If, however, the 'parent' application cannot be determined, the value for this object is then '0', signifying that this process cannot be related back to an invocation of an application in the sysApplRunTable.")
sysApplElmtRunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: sysApplElmtRunIndex.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunIndex.setDescription("Part of the index for this table. A unique value for each process running on the host. Wherever possible, this should be the system's native, unique identification number.")
sysApplElmtRunInstallID = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunInstallID.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunInstallID.setDescription("The index into the sysApplInstallElmtTable. The value of this object is the same value as the sysApplInstallElmtIndex for the application element of which this entry represents a running instance. If this process cannot be associated with an installed executable, the value should be '0'.")
sysApplElmtRunTimeStarted = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunTimeStarted.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunTimeStarted.setDescription('The time the process was started.')
sysApplElmtRunState = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 6), RunState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunState.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunState.setDescription('The current state of the running process. The possible values are running(1), runnable(2) but waiting for a resource such as CPU, waiting(3) for an event, exiting(4), or other(5).')
sysApplElmtRunName = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 7), LongUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunName.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunName.setDescription("The full path and filename of the process. For example, '/opt/MYYpkg/bin/myyproc' would be returned for process 'myyproc' whose execution path is '/opt/MYYpkg/bin/myyproc'.")
sysApplElmtRunParameters = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 8), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunParameters.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunParameters.setDescription('The starting parameters for the process.')
sysApplElmtRunCPU = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunCPU.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunCPU.setDescription("The number of centi-seconds of the total system's CPU resources consumed by this process. Note that on a multi-processor system, this value may have been incremented by more than one centi-second in one centi-second of real (wall clock) time.")
sysApplElmtRunMemory = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 10), Gauge32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunMemory.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunMemory.setDescription('The total amount of real system memory measured in Kbytes currently allocated to this process.')
sysApplElmtRunNumFiles = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunNumFiles.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunNumFiles.setDescription('The number of regular files currently open by the process. Transport connections (sockets) should NOT be included in the calculation of this value, nor should operating system specific special file types.')
sysApplElmtRunUser = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 3, 1, 12), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtRunUser.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtRunUser.setDescription("The process owner's login name (e.g. root).")
sysApplElmtPastRunTable = MibTable((1, 3, 6, 1, 2, 1, 54, 1, 2, 4), )
if mibBuilder.loadTexts: sysApplElmtPastRunTable.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunTable.setDescription('The table describes the processes which have previously executed on the host system as part of an application. Each entry represents a process which has previously executed and is associated with the invoked application of which it was a part. Because an invoked application may involve more than one executable, it is possible to have multiple entries in this table for each application invocation. Entries are added to this table when the corresponding process in the sysApplElmtRun Table terminates. Entries remain in this table until they are aged out when either the number of entries in the table reaches a maximum as determined by sysApplElmtPastRunMaxRows, or when an entry has aged to exceed a time limit as set by sysApplElmtPastRunTblTimeLimit. When aging out entries, the oldest entry, as determined by the value of sysApplElmtPastRunTimeEnded, will be removed first. The table is indexed by sysApplInstallPkgIndex (from the sysApplInstallPkgTable), sysApplElmtPastRunInvocID, and sysApplElmtPastRunIndex to make it easy to locate all previously executed processes of a particular invoked application that has been installed on the system.')
sysApplElmtPastRunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplInstallPkgIndex"), (0, "SYSAPPL-MIB", "sysApplElmtPastRunInvocID"), (0, "SYSAPPL-MIB", "sysApplElmtPastRunIndex"))
if mibBuilder.loadTexts: sysApplElmtPastRunEntry.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunEntry.setDescription("The logical row describing a process which was previously executed on this host as part of an installed application. The entry is basically copied from the sysApplElmtRunTable when the process terminates. Hence, the entry's value for sysApplElmtPastRunIndex is the same as its value was for sysApplElmtRunIndex. Note carefully: only those processes which could be associated with an identified application are included in this table.")
sysApplElmtPastRunInvocID = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: sysApplElmtPastRunInvocID.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunInvocID.setDescription('Part of the index for this table, this value identifies the invocation of an application of which the process represented by this entry was a part. The value of this object is the same value as the sysApplRunIndex for the corresponding application invocation in the sysApplRunTable. If the invoked application as a whole has terminated, it will be the same as the sysApplPastRunIndex.')
sysApplElmtPastRunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: sysApplElmtPastRunIndex.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunIndex.setDescription("Part of the index for this table. An integer assigned by the agent equal to the corresponding sysApplElmtRunIndex which was removed from the sysApplElmtRunTable and moved to this table when the element terminated. Note: entries in this table are indexed by sysApplElmtPastRunInvocID, sysApplElmtPastRunIndex. The possibility exists, though unlikely, of a collision occurring by a new entry which was run by the same invoked application (InvocID), and was assigned the same process identification number (ElmtRunIndex) as an element which was previously run by the same invoked application. Should this situation occur, the new entry replaces the old entry. See Section: 'Implementation Issues - sysApplElmtPastRunTable Entry Collisions' for the conditions that would have to occur in order for a collision to occur.")
sysApplElmtPastRunInstallID = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunInstallID.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunInstallID.setDescription('The index into the installed element table. The value of this object is the same value as the sysApplInstallElmtIndex for the application element of which this entry represents a previously executed process.')
sysApplElmtPastRunTimeStarted = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunTimeStarted.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunTimeStarted.setDescription('The time the process was started.')
sysApplElmtPastRunTimeEnded = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunTimeEnded.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunTimeEnded.setDescription('The time the process ended.')
sysApplElmtPastRunName = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 6), LongUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunName.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunName.setDescription("The full path and filename of the process. For example, '/opt/MYYpkg/bin/myyproc' would be returned for process 'myyproc' whose execution path was '/opt/MYYpkg/bin/myyproc'.")
sysApplElmtPastRunParameters = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 7), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunParameters.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunParameters.setDescription('The starting parameters for the process.')
sysApplElmtPastRunCPU = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunCPU.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunCPU.setDescription("The last known number of centi-seconds of the total system's CPU resources consumed by this process. Note that on a multi-processor system, this value may increment by more than one centi-second in one centi-second of real (wall clock) time.")
sysApplElmtPastRunMemory = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunMemory.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunMemory.setDescription('The last known total amount of real system memory measured in Kbytes allocated to this process before it terminated.')
sysApplElmtPastRunNumFiles = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunNumFiles.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunNumFiles.setDescription('The last known number of files open by the process before it terminated. Transport connections (sockets) should NOT be included in the calculation of this value.')
sysApplElmtPastRunUser = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 2, 4, 1, 11), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElmtPastRunUser.setStatus('current')
if mibBuilder.loadTexts: sysApplElmtPastRunUser.setDescription("The process owner's login name (e.g. root).")
sysApplPastRunMaxRows = MibScalar((1, 3, 6, 1, 2, 1, 54, 1, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysApplPastRunMaxRows.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunMaxRows.setDescription('The maximum number of entries allowed in the sysApplPastRunTable. Once the number of rows in the sysApplPastRunTable reaches this value, the management subsystem will remove the oldest entry in the table to make room for the new entry to be added. Entries will be removed on the basis of oldest sysApplPastRunTimeEnded value first. This object may be used to control the amount of system resources that can used for sysApplPastRunTable entries. A conforming implementation should attempt to support the default value, however, a lesser value may be necessary due to implementation-dependent issues and resource availability.')
sysApplPastRunTableRemItems = MibScalar((1, 3, 6, 1, 2, 1, 54, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplPastRunTableRemItems.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunTableRemItems.setDescription('A counter of the number of entries removed from the sysApplPastRunTable because of table size limitations as set in sysApplPastRunMaxRows. This counter is the number of entries the management subsystem has had to remove in order to make room for new entries (so as not to exceed the limit set by sysApplPastRunMaxRows) since the last initialization of the management subsystem.')
sysApplPastRunTblTimeLimit = MibScalar((1, 3, 6, 1, 2, 1, 54, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(7200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysApplPastRunTblTimeLimit.setStatus('current')
if mibBuilder.loadTexts: sysApplPastRunTblTimeLimit.setDescription('The maximum time in seconds which an entry in the sysApplPastRunTable may exist before it is removed. Any entry that is older than this value will be removed (aged out) from the table. Note that an entry may be aged out prior to reaching this time limit if it is the oldest entry in the table and must be removed to make space for a new entry so as to not exceed sysApplPastRunMaxRows.')
sysApplElemPastRunMaxRows = MibScalar((1, 3, 6, 1, 2, 1, 54, 1, 2, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysApplElemPastRunMaxRows.setStatus('current')
if mibBuilder.loadTexts: sysApplElemPastRunMaxRows.setDescription('The maximum number of entries allowed in the sysApplElmtPastRunTable. Once the number of rows in the sysApplElmtPastRunTable reaches this value, the management subsystem will remove the oldest entry to make room for the new entry to be added. Entries will be removed on the basis of oldest sysApplElmtPastRunTimeEnded value first. This object may be used to control the amount of system resources that can used for sysApplElemPastRunTable entries. A conforming implementation should attempt to support the default value, however, a lesser value may be necessary due to implementation-dependent issues and resource availability.')
sysApplElemPastRunTableRemItems = MibScalar((1, 3, 6, 1, 2, 1, 54, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplElemPastRunTableRemItems.setStatus('current')
if mibBuilder.loadTexts: sysApplElemPastRunTableRemItems.setDescription('A counter of the number of entries removed from the sysApplElemPastRunTable because of table size limitations as set in sysApplElemPastRunMaxRows. This counter is the number of entries the management subsystem has had to remove in order to make room for new entries (so as not to exceed the limit set by sysApplElemPastRunMaxRows) since the last initialization of the management subsystem.')
sysApplElemPastRunTblTimeLimit = MibScalar((1, 3, 6, 1, 2, 1, 54, 1, 2, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(7200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysApplElemPastRunTblTimeLimit.setStatus('current')
if mibBuilder.loadTexts: sysApplElemPastRunTblTimeLimit.setDescription('The maximum time in seconds which an entry in the sysApplElemPastRunTable may exist before it is removed. Any entry that is older than this value will be removed (aged out) from the table. Note that an entry may be aged out prior to reaching this time limit if it is the oldest entry in the table and must be removed to make space for a new entry so as to not exceed sysApplElemPastRunMaxRows.')
sysApplAgentPollInterval = MibScalar((1, 3, 6, 1, 2, 1, 54, 1, 2, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysApplAgentPollInterval.setStatus('current')
if mibBuilder.loadTexts: sysApplAgentPollInterval.setDescription('The minimum interval in seconds that the management subsystem implementing this MIB will poll the status of the managed resources. Because of the non-trivial effort involved in polling the managed resources, and because the method for obtaining the status of the managed resources is implementation-dependent, a conformant implementation may chose a lower bound greater than 0. A value of 0 indicates that there is no delay in the passing of information from the managed resources to the agent.')
sysApplMapTable = MibTable((1, 3, 6, 1, 2, 1, 54, 1, 3, 1), )
if mibBuilder.loadTexts: sysApplMapTable.setStatus('current')
if mibBuilder.loadTexts: sysApplMapTable.setDescription("The sole purpose of this table is to provide a 'backwards' mapping so that, given a known sysApplElmtRunIndex (process identification number), the corresponding invoked application (sysApplRunIndex), installed element (sysApplInstallElmtIndex), and installed application package (sysApplInstallPkgIndex) can be quickly determined. This table will contain one entry for each process that is currently executing on the system. It is expected that management applications will use this mapping table by doing a 'GetNext' operation with the known process ID number (sysApplElmtRunIndex) as the partial instance identifier. Assuming that there is an entry for the process, the result should return a single columnar value, the sysApplMapInstallPkgIndex, with the sysApplElmtRunIndex, sysApplRunIndex, and sysApplInstallElmtIndex contained in the instance identifier for the returned MIB object value. NOTE: if the process can not be associated back to an invoked application installed on the system, then the value returned for the columnar value sysApplMapInstallPkgIndex will be '0' and the instance portion of the object-identifier will be the process ID number (sysApplElmtRunIndex) followed by 0.0.")
sysApplMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 54, 1, 3, 1, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplElmtRunIndex"), (0, "SYSAPPL-MIB", "sysApplElmtRunInvocID"), (0, "SYSAPPL-MIB", "sysApplMapInstallElmtIndex"))
if mibBuilder.loadTexts: sysApplMapEntry.setStatus('current')
if mibBuilder.loadTexts: sysApplMapEntry.setDescription('A logical row representing a process currently running on the system. This entry provides the index mapping from process identifier, back to the invoked application, installed element, and finally, the installed application package. The entry includes only one accessible columnar object, the sysApplMapInstallPkgIndex, but the invoked application and installed element can be determined from the instance identifier since they form part of the index clause.')
sysApplMapInstallElmtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: sysApplMapInstallElmtIndex.setStatus('current')
if mibBuilder.loadTexts: sysApplMapInstallElmtIndex.setDescription("The index into the sysApplInstallElmtTable. The value of this object is the same value as the sysApplInstallElmtIndex for the application element of which this entry represents a running instance. If this process cannot be associated to an installed executable, the value should be '0'.")
sysApplMapInstallPkgIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 54, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysApplMapInstallPkgIndex.setStatus('current')
if mibBuilder.loadTexts: sysApplMapInstallPkgIndex.setDescription("The value of this object identifies the installed software package for the application of which this process is a part. Provided that the process's 'parent' application can be determined, the value of this object is the same value as the sysApplInstallPkgIndex for the entry in the sysApplInstallPkgTable that corresponds to the installed application of which this process is a part. If, however, the 'parent' application cannot be determined, (for example the process is not part of a particular installed application), the value for this object is then '0', signifying that this process cannot be related back to an application, and in turn, an installed software package.")
sysApplMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 54, 3, 1))
sysApplMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 54, 3, 2))
sysApplMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 54, 3, 1, 1)).setObjects(("SYSAPPL-MIB", "sysApplInstalledGroup"), ("SYSAPPL-MIB", "sysApplRunGroup"), ("SYSAPPL-MIB", "sysApplMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysApplMIBCompliance = sysApplMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: sysApplMIBCompliance.setDescription('Describes the requirements for conformance to the System Application MIB')
sysApplInstalledGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 54, 3, 2, 1)).setObjects(("SYSAPPL-MIB", "sysApplInstallPkgManufacturer"), ("SYSAPPL-MIB", "sysApplInstallPkgProductName"), ("SYSAPPL-MIB", "sysApplInstallPkgVersion"), ("SYSAPPL-MIB", "sysApplInstallPkgSerialNumber"), ("SYSAPPL-MIB", "sysApplInstallPkgDate"), ("SYSAPPL-MIB", "sysApplInstallPkgLocation"), ("SYSAPPL-MIB", "sysApplInstallElmtName"), ("SYSAPPL-MIB", "sysApplInstallElmtType"), ("SYSAPPL-MIB", "sysApplInstallElmtDate"), ("SYSAPPL-MIB", "sysApplInstallElmtPath"), ("SYSAPPL-MIB", "sysApplInstallElmtSizeHigh"), ("SYSAPPL-MIB", "sysApplInstallElmtSizeLow"), ("SYSAPPL-MIB", "sysApplInstallElmtRole"), ("SYSAPPL-MIB", "sysApplInstallElmtModifyDate"), ("SYSAPPL-MIB", "sysApplInstallElmtCurSizeHigh"), ("SYSAPPL-MIB", "sysApplInstallElmtCurSizeLow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysApplInstalledGroup = sysApplInstalledGroup.setStatus('current')
if mibBuilder.loadTexts: sysApplInstalledGroup.setDescription('The system application installed group contains information about applications and their constituent components which have been installed on the host system.')
sysApplRunGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 54, 3, 2, 2)).setObjects(("SYSAPPL-MIB", "sysApplRunStarted"), ("SYSAPPL-MIB", "sysApplRunCurrentState"), ("SYSAPPL-MIB", "sysApplPastRunStarted"), ("SYSAPPL-MIB", "sysApplPastRunExitState"), ("SYSAPPL-MIB", "sysApplPastRunTimeEnded"), ("SYSAPPL-MIB", "sysApplElmtRunInstallID"), ("SYSAPPL-MIB", "sysApplElmtRunTimeStarted"), ("SYSAPPL-MIB", "sysApplElmtRunState"), ("SYSAPPL-MIB", "sysApplElmtRunName"), ("SYSAPPL-MIB", "sysApplElmtRunParameters"), ("SYSAPPL-MIB", "sysApplElmtRunCPU"), ("SYSAPPL-MIB", "sysApplElmtRunMemory"), ("SYSAPPL-MIB", "sysApplElmtRunNumFiles"), ("SYSAPPL-MIB", "sysApplElmtRunUser"), ("SYSAPPL-MIB", "sysApplElmtPastRunInstallID"), ("SYSAPPL-MIB", "sysApplElmtPastRunTimeStarted"), ("SYSAPPL-MIB", "sysApplElmtPastRunTimeEnded"), ("SYSAPPL-MIB", "sysApplElmtPastRunName"), ("SYSAPPL-MIB", "sysApplElmtPastRunParameters"), ("SYSAPPL-MIB", "sysApplElmtPastRunCPU"), ("SYSAPPL-MIB", "sysApplElmtPastRunMemory"), ("SYSAPPL-MIB", "sysApplElmtPastRunNumFiles"), ("SYSAPPL-MIB", "sysApplElmtPastRunUser"), ("SYSAPPL-MIB", "sysApplPastRunMaxRows"), ("SYSAPPL-MIB", "sysApplPastRunTableRemItems"), ("SYSAPPL-MIB", "sysApplPastRunTblTimeLimit"), ("SYSAPPL-MIB", "sysApplElemPastRunMaxRows"), ("SYSAPPL-MIB", "sysApplElemPastRunTableRemItems"), ("SYSAPPL-MIB", "sysApplElemPastRunTblTimeLimit"), ("SYSAPPL-MIB", "sysApplAgentPollInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysApplRunGroup = sysApplRunGroup.setStatus('current')
if mibBuilder.loadTexts: sysApplRunGroup.setDescription('The system application run group contains information about applications and associated elements which have run or are currently running on the host system.')
sysApplMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 54, 3, 2, 3)).setObjects(("SYSAPPL-MIB", "sysApplMapInstallPkgIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysApplMapGroup = sysApplMapGroup.setStatus('current')
if mibBuilder.loadTexts: sysApplMapGroup.setDescription('The Map Group contains a single table, sysApplMapTable, that provides a backwards mapping for determining the invoked application, installed element, and installed application package given a known process identification number.')
mibBuilder.exportSymbols("SYSAPPL-MIB", sysApplInstallElmtTable=sysApplInstallElmtTable, sysApplElmtRunName=sysApplElmtRunName, sysApplMapGroup=sysApplMapGroup, sysApplRunStarted=sysApplRunStarted, sysApplElmtPastRunTimeEnded=sysApplElmtPastRunTimeEnded, sysApplElmtPastRunInstallID=sysApplElmtPastRunInstallID, sysApplRunIndex=sysApplRunIndex, sysApplNotifications=sysApplNotifications, sysApplInstallElmtName=sysApplInstallElmtName, sysApplRunCurrentState=sysApplRunCurrentState, sysApplPastRunTimeEnded=sysApplPastRunTimeEnded, RunState=RunState, sysApplMap=sysApplMap, sysApplMapTable=sysApplMapTable, sysApplPastRunMaxRows=sysApplPastRunMaxRows, sysApplPastRunEntry=sysApplPastRunEntry, sysApplElmtPastRunMemory=sysApplElmtPastRunMemory, sysApplInstallPkgSerialNumber=sysApplInstallPkgSerialNumber, sysApplMapEntry=sysApplMapEntry, sysApplMIBCompliances=sysApplMIBCompliances, sysApplElmtRunEntry=sysApplElmtRunEntry, sysApplInstallElmtEntry=sysApplInstallElmtEntry, sysApplElmtRunInvocID=sysApplElmtRunInvocID, sysApplInstalledGroup=sysApplInstalledGroup, sysApplInstalled=sysApplInstalled, sysApplMIB=sysApplMIB, LongUtf8String=LongUtf8String, sysApplOBJ=sysApplOBJ, sysApplInstallPkgManufacturer=sysApplInstallPkgManufacturer, sysApplPastRunExitState=sysApplPastRunExitState, sysApplInstallElmtRole=sysApplInstallElmtRole, sysApplPastRunStarted=sysApplPastRunStarted, sysApplElmtRunNumFiles=sysApplElmtRunNumFiles, sysApplPastRunTableRemItems=sysApplPastRunTableRemItems, sysApplElmtPastRunIndex=sysApplElmtPastRunIndex, PYSNMP_MODULE_ID=sysApplMIB, sysApplElmtPastRunEntry=sysApplElmtPastRunEntry, Utf8String=Utf8String, sysApplPastRunIndex=sysApplPastRunIndex, sysApplElmtPastRunInvocID=sysApplElmtPastRunInvocID, sysApplAgentPollInterval=sysApplAgentPollInterval, sysApplRunGroup=sysApplRunGroup, sysApplInstallElmtPath=sysApplInstallElmtPath, sysApplInstallPkgEntry=sysApplInstallPkgEntry, sysApplElmtRunState=sysApplElmtRunState, sysApplInstallPkgLocation=sysApplInstallPkgLocation, sysApplMIBCompliance=sysApplMIBCompliance, sysApplElmtPastRunParameters=sysApplElmtPastRunParameters, sysApplRunEntry=sysApplRunEntry, sysApplElmtRunInstallPkg=sysApplElmtRunInstallPkg, sysApplElmtPastRunTimeStarted=sysApplElmtPastRunTimeStarted, sysApplInstallPkgTable=sysApplInstallPkgTable, sysApplElmtRunTimeStarted=sysApplElmtRunTimeStarted, sysApplInstallElmtDate=sysApplInstallElmtDate, sysApplInstallElmtCurSizeHigh=sysApplInstallElmtCurSizeHigh, sysApplInstallElmtIndex=sysApplInstallElmtIndex, sysApplRunTable=sysApplRunTable, sysApplInstallElmtModifyDate=sysApplInstallElmtModifyDate, sysApplElmtPastRunNumFiles=sysApplElmtPastRunNumFiles, sysApplElmtPastRunName=sysApplElmtPastRunName, sysApplElemPastRunMaxRows=sysApplElemPastRunMaxRows, sysApplPastRunTblTimeLimit=sysApplPastRunTblTimeLimit, sysApplMIBGroups=sysApplMIBGroups, sysApplInstallElmtSizeLow=sysApplInstallElmtSizeLow, sysApplMapInstallPkgIndex=sysApplMapInstallPkgIndex, sysApplElmtRunCPU=sysApplElmtRunCPU, sysApplElemPastRunTableRemItems=sysApplElemPastRunTableRemItems, sysApplRun=sysApplRun, sysApplElmtRunInstallID=sysApplElmtRunInstallID, sysApplInstallPkgProductName=sysApplInstallPkgProductName, sysApplElmtRunIndex=sysApplElmtRunIndex, sysApplInstallElmtCurSizeLow=sysApplInstallElmtCurSizeLow, sysApplInstallPkgDate=sysApplInstallPkgDate, sysApplMapInstallElmtIndex=sysApplMapInstallElmtIndex, sysApplInstallPkgVersion=sysApplInstallPkgVersion, sysApplInstallElmtSizeHigh=sysApplInstallElmtSizeHigh, sysApplElmtPastRunUser=sysApplElmtPastRunUser, sysApplElmtRunMemory=sysApplElmtRunMemory, sysApplConformance=sysApplConformance, sysApplElmtPastRunTable=sysApplElmtPastRunTable, sysApplElmtRunParameters=sysApplElmtRunParameters, sysApplInstallPkgIndex=sysApplInstallPkgIndex, sysApplElmtPastRunCPU=sysApplElmtPastRunCPU, sysApplElemPastRunTblTimeLimit=sysApplElemPastRunTblTimeLimit, sysApplInstallElmtType=sysApplInstallElmtType, sysApplPastRunTable=sysApplPastRunTable, sysApplElmtRunTable=sysApplElmtRunTable, sysApplElmtRunUser=sysApplElmtRunUser)
