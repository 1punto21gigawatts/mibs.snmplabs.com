#
# PySNMP MIB module TFTIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TFTIF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, ModuleIdentity, iso, ObjectIdentity, NotificationType, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Integer32, Gauge32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "ModuleIdentity", "iso", "ObjectIdentity", "NotificationType", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Integer32", "Gauge32", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MemAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

mcmTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3))
mcmTFTPParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1))
mcmTFTPServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPServerIpAddr.setDescription('NAME = ; DESC = The IP Address of the TFTP Server.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPFileName.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPFileName.setDescription('NAME = ; DESC = The Filename with path (ASCII) to be downloaded; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPTimeOut.setDescription('NAME = ; DESC = The TFTP timeout period in seconds.; HELP = Time is doubled for each retransmission.; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPRetransmissions.setDescription('NAME = ; DESC = The number of times the TFTP request \\ will be repeated for un-responsive \\ TFTP servers.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPDownload = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upldDefault", 1), ("upldSpecific", 2), ("dnldDefault", 3), ("dnldSpecific", 4), ("disabled", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmTFTPDownload.setStatus('deprecated')
if mibBuilder.loadTexts: mcmTFTPDownload.setDescription('NAME = ; DESC = This object when enabled results in \\ the unit to attempt code download.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPStart = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upldDefault", 1), ("upldSpecific", 2), ("dnldDefault", 3), ("dnldSpecific", 4), ("disabled", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmTFTPStart.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPStart.setDescription('NAME = ; DESC = initiates TFTP upload or download process\\ based on previously provisioned values \\ (default) or values passed at request \\ time(specific) ; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPPortNumber.setDescription('NAME = ; DESC = This object is used to specify the \\ port <socket> number sent to the TFTP\\ connection. ; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPConfigUploadBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPConfigUploadBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPConfigUploadBank.setDescription('NAME = ; DESC = The configuration bank number which\\ will be uploaded to the TFTP host. ; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmTFTPParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2))
nvmTFTPServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTFTPServerIpAddr.setDescription('NAME = ; DESC = The IP Address of the TFTP Server.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPFileName.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTFTPFileName.setDescription('NAME = ; DESC = The Filename with path (ASCII) to be \\ downloaded or to upload; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmTFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTFTPTimeOut.setDescription('NAME = ; DESC = The TFTP timeout period in seconds.; HELP = Time is doubled for each retransmission; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmTFTPRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTFTPRetransmissions.setDescription('NAME = ; DESC = The number of times the TFTP request \\ will be repeated for un-responsive \\ TFTP servers.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmTFTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTFTPPortNumber.setDescription('NAME = ; DESC = This object is used to specify the \\ port <socket> number sent to the TFTP\\ connection. ; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmTFTPConfigUploadBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPConfigUploadBank.setStatus('mandatory')
if mibBuilder.loadTexts: nvmTFTPConfigUploadBank.setDescription('NAME = ; DESC = The configuration bank number which\\ will be uploaded to the TFTP host. ; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 3))
mcmTFTPCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("retrieving-file", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPCurrentState.setDescription('NAME = ; DESC = This object shows the current status \\ of TFTP interface.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPErrorStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4))
mcmTFTPLastErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("idle", 1), ("download-success", 2), ("out-of-memory", 4), ("flash-error", 5), ("download-failed", 6), ("upload-failed", 7), ("upload-success", 8), ("chksum-error", 11), ("transferring-file", 13), ("protocol-error", 14), ("server-error", 15), ("timeout", 16), ("connection-error", 17), ("bad-file", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPLastErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPLastErrorStatus.setDescription('NAME = ; DESC = This object shows the error status of \\ last TFTP operation.; HELP = Error status values: \\ value meaning \\ --------------------------------------------------\\ idle No download has been done \\ download-success A download completed without error\\ out-of-memory Not enough free memory \\ flash-error Could not write to flash memory \\ download-failed Download failed for an unknown reason \\ chksum-error The file to download has a checksum error \\ retrieving-file The file to download is being retrieved \\ protocol-error TFTP had an error talking to server \\ server-error The TFTP server sent error message, Could be bad file name \\ timeout Could be bad ip address or network errors \\ connection-error Setup of connection failed \\ bad-file The file to be download was rejected; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPLastServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPLastServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPLastServerIpAddr.setDescription('NAME = ; DESC = The IP Address of the last TFTP Server.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPLastFileName = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPLastFileName.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPLastFileName.setDescription('NAME = ; DESC = The Filename path (ASCII) of the previously downloaded file.; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPTransferBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("toboot", 2), ("toBank1", 3), ("toBank2", 4), ("toBank3", 5), ("toBank4", 6), ("fromBank3", 7), ("fromBank4", 8), ("fromDebug", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPTransferBank.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPTransferBank.setDescription('NAME = ; DESC = Specifies which flash bank is currently\\ being uploaded/dwonloaded via the tftp \\ application process ; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPLastPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPLastPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmTFTPLastPortNumber.setDescription('NAME = ; DESC = This object is used to specify the \\ port <socket> number sent to the TFTP\\ connection. ; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmTFTPDownloadFail = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 3) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("TFTIF-MIB", "mcmTFTPServerIpAddr"), ("TFTIF-MIB", "mcmTFTPFileName"))
if mibBuilder.loadTexts: mcmTFTPDownloadFail.setDescription('NAME = ; DESC = A TFTP Code download has failed between the \\ PP4400 and the Server.; HELP = Please check Network cables, Server being alive, and retry \\ again. If problem persists, contact Sys Admin., or Field \\ Personnel.;')
mcmTFTPUploadFail = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 3) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("TFTIF-MIB", "mcmTFTPServerIpAddr"), ("TFTIF-MIB", "mcmTFTPFileName"))
if mibBuilder.loadTexts: mcmTFTPUploadFail.setDescription('NAME = ; DESC = TFTP file upload to server has failed.; HELP = See error status for type of transfer failure.;')
mcmTFTPDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 3) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("TFTIF-MIB", "mcmTFTPServerIpAddr"), ("TFTIF-MIB", "mcmTFTPFileName"))
if mibBuilder.loadTexts: mcmTFTPDownloadSuccess.setDescription('NAME = ; DESC = A TFTP Code download has succeeded between the \\ PP4400 and the Server.; HELP = TFTP Code download was successful. \\ Normal Status Indicator.;')
mcmTFTPUploadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 3) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("TFTIF-MIB", "mcmTFTPServerIpAddr"), ("TFTIF-MIB", "mcmTFTPFileName"))
if mibBuilder.loadTexts: mcmTFTPUploadSuccess.setDescription('NAME = ; DESC = A TFTP file upload has succeeded between the \\ 4400 and the Server.; HELP = TFTP file upload was successful. \\ Normal Status Indicator.;')
mibBuilder.exportSymbols("TFTIF-MIB", mcmTFTPCurrentState=mcmTFTPCurrentState, mcmTFTPLastServerIpAddr=mcmTFTPLastServerIpAddr, mcmTFTPTransferBank=mcmTFTPTransferBank, nvmTFTPPortNumber=nvmTFTPPortNumber, mcmTFTPRetransmissions=mcmTFTPRetransmissions, mcmTFTPLastErrorStatus=mcmTFTPLastErrorStatus, mcmTFTPParamGroup=mcmTFTPParamGroup, mcmTFTPServerIpAddr=mcmTFTPServerIpAddr, mcmTFTPUploadSuccess=mcmTFTPUploadSuccess, nvmTFTPFileName=nvmTFTPFileName, MemAddress=MemAddress, nvmTFTPServerIpAddr=nvmTFTPServerIpAddr, nvmTFTPParamGroup=nvmTFTPParamGroup, mcmTFTPConfigUploadBank=mcmTFTPConfigUploadBank, mcmTFTPFileName=mcmTFTPFileName, mcmTFTPStart=mcmTFTPStart, mcmTFTPTimeOut=mcmTFTPTimeOut, mcmTFTPErrorStatusGroup=mcmTFTPErrorStatusGroup, mcmTFTPUploadFail=mcmTFTPUploadFail, mcmTFTPPortNumber=mcmTFTPPortNumber, mcmTFTP=mcmTFTP, mcmTFTPDownloadFail=mcmTFTPDownloadFail, nvmTFTPConfigUploadBank=nvmTFTPConfigUploadBank, mcmTFTPLastPortNumber=mcmTFTPLastPortNumber, nvmTFTPRetransmissions=nvmTFTPRetransmissions, mcmTFTPStatusGroup=mcmTFTPStatusGroup, mcmTFTPDownload=mcmTFTPDownload, mcmTFTPDownloadSuccess=mcmTFTPDownloadSuccess, mcmTFTPLastFileName=mcmTFTPLastFileName, nvmTFTPTimeOut=nvmTFTPTimeOut)
