#
# PySNMP MIB module HH3C-VXLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-VXLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:30:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, ObjectIdentity, Unsigned32, Integer32, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, IpAddress, iso, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ObjectIdentity", "Unsigned32", "Integer32", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "IpAddress", "iso", "ModuleIdentity", "Counter32")
TextualConvention, RowStatus, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "MacAddress", "TruthValue")
hh3cVxlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 150))
hh3cVxlan.setRevisions(('2013-11-21 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cVxlan.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hh3cVxlan.setLastUpdated('201311210900Z')
if mibBuilder.loadTexts: hh3cVxlan.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cVxlan.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cVxlan.setDescription('The overlay MIB.')
hh3cVxlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1))
hh3cVxlanScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 1))
hh3cVxlanLocalMacNotify = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVxlanLocalMacNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanLocalMacNotify.setDescription('Local MAC(Media Access Control) address report capability.')
hh3cVxlanRemoteMacLearn = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVxlanRemoteMacLearn.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanRemoteMacLearn.setDescription('Remote MAC address self-learning capability.')
hh3cVxlanNextVxlanID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVxlanNextVxlanID.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanNextVxlanID.setDescription('Next available VXLAN ID(identifier), in the range of 0x0 to 0xFFFFFF. The invalid value 0xFFFFFFFF indicates that no ID can be set.')
hh3cVxlanConfigured = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVxlanConfigured.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanConfigured.setDescription('Number of currently configured VXLANs.')
hh3cVxlanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2), )
if mibBuilder.loadTexts: hh3cVxlanTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTable.setDescription('A table for VXLAN parameters.')
hh3cVxlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2, 1), ).setIndexNames((0, "HH3C-VXLAN-MIB", "hh3cVxlanID"))
if mibBuilder.loadTexts: hh3cVxlanEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanEntry.setDescription('Each entry represents the parameters of a VXLAN.')
hh3cVxlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cVxlanID.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanID.setDescription('The VXLAN ID.')
hh3cVxlanAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVxlanAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanAddrType.setDescription('The type of multicast group address.')
hh3cVxlanGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVxlanGroupAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanGroupAddr.setDescription('Group destination address.')
hh3cVxlanSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVxlanSourceAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanSourceAddr.setDescription('Group source address.')
hh3cVxlanVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVxlanVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanVsiIndex.setDescription('VSI index. A unique index for the conceptual row identifying a VSI in the hh3cVsiTable.')
hh3cVxlanRemoteMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVxlanRemoteMacCount.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanRemoteMacCount.setDescription('Remote MAC address count of this VXLAN.')
hh3cVxlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVxlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanRowStatus.setDescription('Operation status of this table entry. When a row in this table is in active state, no objects in that row can be modified by the agent except hh3cVxlanGroupAddr, hh3cVxlanSourceAddr.')
hh3cVxlanTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 3), )
if mibBuilder.loadTexts: hh3cVxlanTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelTable.setDescription('A table for VXLAN tunnel parameters.')
hh3cVxlanTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 3, 1), ).setIndexNames((0, "HH3C-VXLAN-MIB", "hh3cVxlanID"), (0, "HH3C-VXLAN-MIB", "hh3cVxlanTunnelID"))
if mibBuilder.loadTexts: hh3cVxlanTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelEntry.setDescription('Each entry represents the parameters of a VXLAN tunnel.')
hh3cVxlanTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cVxlanTunnelID.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelID.setDescription('A unique index for tunnel.')
hh3cVxlanTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVxlanTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelRowStatus.setDescription('Operation status of this table entry.')
hh3cVxlanTunnelOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVxlanTunnelOctets.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelOctets.setDescription('The number of octets that have been forwarded over the tunnel. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times.')
hh3cVxlanTunnelPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVxlanTunnelPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelPackets.setDescription('The number of packets that have been forwarded over the tunnel. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times.')
hh3cVxlanTunnelBoundTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 4), )
if mibBuilder.loadTexts: hh3cVxlanTunnelBoundTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelBoundTable.setDescription('A table for the number of VXLANs to which the tunnel is bound.')
hh3cVxlanTunnelBoundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 4, 1), ).setIndexNames((0, "HH3C-VXLAN-MIB", "hh3cVxlanTunnelID"))
if mibBuilder.loadTexts: hh3cVxlanTunnelBoundEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelBoundEntry.setDescription('An entry represents the number of VXLANs to which a tunnel is bound.')
hh3cVxlanTunnelBoundVxlanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVxlanTunnelBoundVxlanNum.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanTunnelBoundVxlanNum.setDescription('The number of VXLANs to which this tunnel is bound.')
hh3cVxlanMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 5), )
if mibBuilder.loadTexts: hh3cVxlanMacTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanMacTable.setDescription('A table for VXLAN remote MAC addresses.')
hh3cVxlanMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 5, 1), ).setIndexNames((0, "HH3C-VXLAN-MIB", "hh3cVxlanVsiIndex"), (0, "HH3C-VXLAN-MIB", "hh3cVxlanMacAddr"))
if mibBuilder.loadTexts: hh3cVxlanMacEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanMacEntry.setDescription('A VXLAN remote MAC address.')
hh3cVxlanMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cVxlanMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanMacAddr.setDescription('MAC address.')
hh3cVxlanMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVxlanMacTunnelID.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanMacTunnelID.setDescription('A unique index for tunnel.')
hh3cVxlanMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selfLearned", 1), ("staticConfigured", 2), ("protocolLearned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVxlanMacType.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanMacType.setDescription('The type of an MAC address.')
hh3cVxlanStaticMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 6), )
if mibBuilder.loadTexts: hh3cVxlanStaticMacTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanStaticMacTable.setDescription('A table for VXLAN static remote MAC addresses.')
hh3cVxlanStaticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 6, 1), ).setIndexNames((0, "HH3C-VXLAN-MIB", "hh3cVxlanVsiIndex"), (0, "HH3C-VXLAN-MIB", "hh3cVxlanStaticMacAddr"))
if mibBuilder.loadTexts: hh3cVxlanStaticMacEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanStaticMacEntry.setDescription('A VXLAN static MAC address.')
hh3cVxlanStaticMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cVxlanStaticMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanStaticMacAddr.setDescription('Static MAC address.')
hh3cVxlanStaticMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVxlanStaticMacTunnelID.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanStaticMacTunnelID.setDescription('A unique index for tunnel.')
hh3cVxlanStaticMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 150, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVxlanStaticMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVxlanStaticMacRowStatus.setDescription('Operation status of this table entry. When a row in this table is in active state, no objects in that row can be modified by the agent.')
mibBuilder.exportSymbols("HH3C-VXLAN-MIB", hh3cVxlanMacEntry=hh3cVxlanMacEntry, hh3cVxlanMacTable=hh3cVxlanMacTable, hh3cVxlanStaticMacTunnelID=hh3cVxlanStaticMacTunnelID, hh3cVxlanTunnelBoundVxlanNum=hh3cVxlanTunnelBoundVxlanNum, hh3cVxlanScalarGroup=hh3cVxlanScalarGroup, hh3cVxlanRowStatus=hh3cVxlanRowStatus, hh3cVxlanRemoteMacLearn=hh3cVxlanRemoteMacLearn, hh3cVxlan=hh3cVxlan, hh3cVxlanRemoteMacCount=hh3cVxlanRemoteMacCount, hh3cVxlanTable=hh3cVxlanTable, hh3cVxlanMacType=hh3cVxlanMacType, hh3cVxlanTunnelID=hh3cVxlanTunnelID, hh3cVxlanVsiIndex=hh3cVxlanVsiIndex, hh3cVxlanMacTunnelID=hh3cVxlanMacTunnelID, hh3cVxlanStaticMacEntry=hh3cVxlanStaticMacEntry, hh3cVxlanTunnelRowStatus=hh3cVxlanTunnelRowStatus, hh3cVxlanTunnelBoundTable=hh3cVxlanTunnelBoundTable, hh3cVxlanLocalMacNotify=hh3cVxlanLocalMacNotify, hh3cVxlanID=hh3cVxlanID, hh3cVxlanSourceAddr=hh3cVxlanSourceAddr, hh3cVxlanTunnelOctets=hh3cVxlanTunnelOctets, hh3cVxlanEntry=hh3cVxlanEntry, hh3cVxlanMacAddr=hh3cVxlanMacAddr, hh3cVxlanObjects=hh3cVxlanObjects, hh3cVxlanStaticMacAddr=hh3cVxlanStaticMacAddr, hh3cVxlanConfigured=hh3cVxlanConfigured, hh3cVxlanNextVxlanID=hh3cVxlanNextVxlanID, hh3cVxlanStaticMacRowStatus=hh3cVxlanStaticMacRowStatus, hh3cVxlanTunnelTable=hh3cVxlanTunnelTable, hh3cVxlanAddrType=hh3cVxlanAddrType, hh3cVxlanTunnelEntry=hh3cVxlanTunnelEntry, hh3cVxlanGroupAddr=hh3cVxlanGroupAddr, hh3cVxlanTunnelPackets=hh3cVxlanTunnelPackets, PYSNMP_MODULE_ID=hh3cVxlan, hh3cVxlanStaticMacTable=hh3cVxlanStaticMacTable, hh3cVxlanTunnelBoundEntry=hh3cVxlanTunnelBoundEntry)
