#
# PySNMP MIB module FE-FIREEYE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FE-FIREEYE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, MibIdentifier, enterprises, Gauge32, TimeTicks, Counter32, Integer32, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Bits, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "enterprises", "Gauge32", "TimeTicks", "Counter32", "Integer32", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Bits", "iso", "NotificationType")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
fireeyeMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 25597, 20, 1))
fireeyeMibModule.setRevisions(('2014-04-07 11:20', '2014-04-02 10:40', '2014-03-19 10:40', '2014-03-10 10:00', '2014-01-21 21:00', '2011-09-08 19:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fireeyeMibModule.setRevisionsDescriptions(('Added IPS traps.', 'Enhance feLicenseStateChanged notification.', 'Added MAS specific info and traps.', 'Add interface speed change notification.', 'Updated revision, FireEye 7.1', 'Updated revision, FireEye 3.1',))
if mibBuilder.loadTexts: fireeyeMibModule.setLastUpdated('201404071120Z')
if mibBuilder.loadTexts: fireeyeMibModule.setOrganization('FireEye, Inc.')
if mibBuilder.loadTexts: fireeyeMibModule.setContactInfo('email: support@fireeye.com')
if mibBuilder.loadTexts: fireeyeMibModule.setDescription('FireEye Inc Vendor MIB')
fireeye = MibIdentifier((1, 3, 6, 1, 4, 1, 25597))
variables = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 1))
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 3))
lms = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 1, 1))
lmsVersion = MibScalar((1, 3, 6, 1, 4, 1, 25597, 1, 1, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lmsVersion.setStatus('current')
if mibBuilder.loadTexts: lmsVersion.setDescription('System software version string')
eventTable = MibTable((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2), )
if mibBuilder.loadTexts: eventTable.setStatus('current')
if mibBuilder.loadTexts: eventTable.setDescription('List of events')
eventCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 1, 1, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventCount.setStatus('current')
if mibBuilder.loadTexts: eventCount.setDescription('Number of events')
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1), ).setIndexNames((0, "FE-FIREEYE-MIB", "eventIndex"))
if mibBuilder.loadTexts: eventEntry.setStatus('current')
if mibBuilder.loadTexts: eventEntry.setDescription('Entry for one event')
eventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventIndex.setStatus('current')
if mibBuilder.loadTexts: eventIndex.setDescription('Synthetic numeric unique ID of event')
eventId = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventId.setStatus('current')
if mibBuilder.loadTexts: eventId.setDescription('Id of event')
eventType = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventType.setStatus('current')
if mibBuilder.loadTexts: eventType.setDescription('Type of event')
eventDate = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventDate.setStatus('current')
if mibBuilder.loadTexts: eventDate.setDescription('Date of event')
eventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventTime.setStatus('current')
if mibBuilder.loadTexts: eventTime.setDescription('Time of event')
eventTraceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 6), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventTraceId.setStatus('current')
if mibBuilder.loadTexts: eventTraceId.setDescription('Trace ID of event')
eventSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSrcIp.setStatus('current')
if mibBuilder.loadTexts: eventSrcIp.setDescription('Source IP address of event')
eventDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventDstIp.setStatus('current')
if mibBuilder.loadTexts: eventDstIp.setDescription('Destination IP address of event')
eventSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 9), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSrcMac.setStatus('current')
if mibBuilder.loadTexts: eventSrcMac.setDescription('Source MAC address of event')
eventDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventDstMac.setStatus('current')
if mibBuilder.loadTexts: eventDstMac.setDescription('Destination MAC address of event')
eventDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventDstPort.setStatus('current')
if mibBuilder.loadTexts: eventDstPort.setDescription('Attacked port of event')
eventVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventVlan.setStatus('current')
if mibBuilder.loadTexts: eventVlan.setDescription('VLAN of event')
eventProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventProtocol.setStatus('current')
if mibBuilder.loadTexts: eventProtocol.setDescription('IP protocol of event')
eventProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventProfileId.setStatus('current')
if mibBuilder.loadTexts: eventProfileId.setDescription('Profile ID of event')
eventOsInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 15), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventOsInfo.setStatus('current')
if mibBuilder.loadTexts: eventOsInfo.setDescription('OS info of event')
eventService = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 16), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventService.setStatus('current')
if mibBuilder.loadTexts: eventService.setDescription('Attacked service of event')
eventAttackType = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 17), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventAttackType.setStatus('current')
if mibBuilder.loadTexts: eventAttackType.setDescription('Attack type of event')
eventSignatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 18), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSignatureName.setStatus('current')
if mibBuilder.loadTexts: eventSignatureName.setDescription('Signature name of event')
eventSignatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 19), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSignatureType.setStatus('current')
if mibBuilder.loadTexts: eventSignatureType.setDescription('Signature type of event')
eventSrcHost = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 20), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSrcHost.setStatus('current')
if mibBuilder.loadTexts: eventSrcHost.setDescription('Host name of event')
eventCncNo = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 21), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventCncNo.setStatus('current')
if mibBuilder.loadTexts: eventCncNo.setDescription('Cncno of event')
alertSignatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 22), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertSignatureId.setStatus('current')
if mibBuilder.loadTexts: alertSignatureId.setDescription('Malware Identification')
alertCncHost = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 23), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertCncHost.setStatus('current')
if mibBuilder.loadTexts: alertCncHost.setDescription('Alert CNC host name')
alertCncPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 24), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertCncPort.setStatus('current')
if mibBuilder.loadTexts: alertCncPort.setDescription('Alert CNC Port')
alertChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 25), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertChecksum.setStatus('current')
if mibBuilder.loadTexts: alertChecksum.setDescription('Alert Malware Checksum')
alertAnalysisType = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 26), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertAnalysisType.setStatus('current')
if mibBuilder.loadTexts: alertAnalysisType.setDescription('Alert analysis type')
alertProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 27), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertProfile.setStatus('current')
if mibBuilder.loadTexts: alertProfile.setDescription('Alert analysis profile')
alertAction = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 28), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertAction.setStatus('current')
if mibBuilder.loadTexts: alertAction.setDescription('Alert action taken')
alertInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 29), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertInterface.setStatus('current')
if mibBuilder.loadTexts: alertInterface.setDescription('Appliance interface')
alertSensorIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 30), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertSensorIp.setStatus('current')
if mibBuilder.loadTexts: alertSensorIp.setDescription('Appliance IP address')
alertSensorHost = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 31), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertSensorHost.setStatus('current')
if mibBuilder.loadTexts: alertSensorHost.setDescription('Appliance host name')
alertSensorProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 32), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertSensorProduct.setStatus('current')
if mibBuilder.loadTexts: alertSensorProduct.setDescription('Product Name')
alertSensorRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 33), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertSensorRelease.setStatus('current')
if mibBuilder.loadTexts: alertSensorRelease.setDescription('Alert URL')
alertUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 34), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alertUrl.setStatus('current')
if mibBuilder.loadTexts: alertUrl.setDescription('Alert URL')
eventSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 35), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: eventSrcAddrType.setDescription('Source IP address type')
eventSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 36), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSrcAddr.setStatus('current')
if mibBuilder.loadTexts: eventSrcAddr.setDescription('Source IP address')
eventDstAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 37), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventDstAddrType.setStatus('current')
if mibBuilder.loadTexts: eventDstAddrType.setDescription('Destination IP address type')
eventDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 38), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventDstAddr.setStatus('current')
if mibBuilder.loadTexts: eventDstAddr.setDescription('Destination IP address')
eventSensorAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 39), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSensorAddrType.setStatus('current')
if mibBuilder.loadTexts: eventSensorAddrType.setDescription('Sensor IP address type')
eventSensorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 40), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSensorAddr.setStatus('current')
if mibBuilder.loadTexts: eventSensorAddr.setDescription('Sensor IP address')
eventSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 41), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSrcPort.setStatus('current')
if mibBuilder.loadTexts: eventSrcPort.setDescription('Source port')
eventDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 42), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventDateTime.setStatus('current')
if mibBuilder.loadTexts: eventDateTime.setDescription('Date and time of the event')
ipsSignatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 43), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsSignatureId.setStatus('current')
if mibBuilder.loadTexts: ipsSignatureId.setDescription('IPS signature id')
ipsSignatureRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 44), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsSignatureRevision.setStatus('current')
if mibBuilder.loadTexts: ipsSignatureRevision.setDescription('IPS signature revision')
ipsMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 45), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsMatchCount.setStatus('current')
if mibBuilder.loadTexts: ipsMatchCount.setDescription('Attack count')
ipsSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 46), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsSeverity.setStatus('current')
if mibBuilder.loadTexts: ipsSeverity.setDescription('Severity')
ipsSignatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 47), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsSignatureName.setStatus('current')
if mibBuilder.loadTexts: ipsSignatureName.setDescription('Name of the signature')
ipsReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 48), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsReferenceId.setStatus('current')
if mibBuilder.loadTexts: ipsReferenceId.setDescription('Reference ID')
ipsBlockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 49), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsBlockMode.setStatus('current')
if mibBuilder.loadTexts: ipsBlockMode.setDescription('isBlocked')
ipsAttackTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 1, 1, 2, 1, 50), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsAttackTarget.setStatus('current')
if mibBuilder.loadTexts: ipsAttackTarget.setDescription('Attack target')
notificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 3, 0))
fireeyeAlert = NotificationType((1, 3, 6, 1, 4, 1, 25597, 3, 0, 1)).setObjects(("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventDate"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventTraceId"), ("FE-FIREEYE-MIB", "eventSrcIp"), ("FE-FIREEYE-MIB", "eventDstIp"), ("FE-FIREEYE-MIB", "eventSrcMac"), ("FE-FIREEYE-MIB", "eventDstMac"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventVlan"), ("FE-FIREEYE-MIB", "eventProtocol"), ("FE-FIREEYE-MIB", "eventProfileId"), ("FE-FIREEYE-MIB", "eventOsInfo"), ("FE-FIREEYE-MIB", "eventService"), ("FE-FIREEYE-MIB", "eventAttackType"), ("FE-FIREEYE-MIB", "eventSignatureName"), ("FE-FIREEYE-MIB", "eventSignatureType"), ("FE-FIREEYE-MIB", "eventSrcHost"), ("FE-FIREEYE-MIB", "eventCncNo"), ("FE-FIREEYE-MIB", "alertSignatureId"), ("FE-FIREEYE-MIB", "alertCncHost"), ("FE-FIREEYE-MIB", "alertCncPort"), ("FE-FIREEYE-MIB", "alertChecksum"), ("FE-FIREEYE-MIB", "alertAnalysisType"), ("FE-FIREEYE-MIB", "alertProfile"), ("FE-FIREEYE-MIB", "alertAction"), ("FE-FIREEYE-MIB", "alertInterface"), ("FE-FIREEYE-MIB", "alertSensorIp"), ("FE-FIREEYE-MIB", "alertSensorHost"), ("FE-FIREEYE-MIB", "alertSensorRelease"), ("FE-FIREEYE-MIB", "alertSensorProduct"), ("FE-FIREEYE-MIB", "alertUrl"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"), ("FE-FIREEYE-MIB", "eventSensorAddrType"), ("FE-FIREEYE-MIB", "eventSensorAddr"))
if mibBuilder.loadTexts: fireeyeAlert.setStatus('current')
if mibBuilder.loadTexts: fireeyeAlert.setDescription('Execution anomaly detected')
executionAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 25597, 3, 0, 2)).setObjects(("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventDate"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventTraceId"), ("FE-FIREEYE-MIB", "eventSrcIp"), ("FE-FIREEYE-MIB", "eventDstIp"), ("FE-FIREEYE-MIB", "eventSrcMac"), ("FE-FIREEYE-MIB", "eventDstMac"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventVlan"), ("FE-FIREEYE-MIB", "eventProtocol"), ("FE-FIREEYE-MIB", "eventProfileId"), ("FE-FIREEYE-MIB", "eventOsInfo"), ("FE-FIREEYE-MIB", "eventService"), ("FE-FIREEYE-MIB", "eventAttackType"), ("FE-FIREEYE-MIB", "eventSrcHost"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"))
if mibBuilder.loadTexts: executionAnomaly.setStatus('current')
if mibBuilder.loadTexts: executionAnomaly.setDescription('Execution anomaly detected')
networkAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 25597, 3, 0, 3)).setObjects(("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventDate"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventTraceId"), ("FE-FIREEYE-MIB", "eventSrcIp"), ("FE-FIREEYE-MIB", "eventDstIp"), ("FE-FIREEYE-MIB", "eventSrcMac"), ("FE-FIREEYE-MIB", "eventDstMac"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventVlan"), ("FE-FIREEYE-MIB", "eventProtocol"), ("FE-FIREEYE-MIB", "eventProfileId"), ("FE-FIREEYE-MIB", "eventOsInfo"), ("FE-FIREEYE-MIB", "eventService"), ("FE-FIREEYE-MIB", "eventSrcHost"), ("FE-FIREEYE-MIB", "eventCncNo"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"))
if mibBuilder.loadTexts: networkAnomaly.setStatus('current')
if mibBuilder.loadTexts: networkAnomaly.setDescription('Network anomaly detected')
signatureMatch = NotificationType((1, 3, 6, 1, 4, 1, 25597, 3, 0, 4)).setObjects(("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventDate"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventTraceId"), ("FE-FIREEYE-MIB", "eventSrcIp"), ("FE-FIREEYE-MIB", "eventDstIp"), ("FE-FIREEYE-MIB", "eventSrcMac"), ("FE-FIREEYE-MIB", "eventDstMac"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventVlan"), ("FE-FIREEYE-MIB", "eventProtocol"), ("FE-FIREEYE-MIB", "eventSignatureName"), ("FE-FIREEYE-MIB", "eventSignatureType"), ("FE-FIREEYE-MIB", "eventSrcHost"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"))
if mibBuilder.loadTexts: signatureMatch.setStatus('current')
if mibBuilder.loadTexts: signatureMatch.setDescription('Signature match detected')
ccConnect = NotificationType((1, 3, 6, 1, 4, 1, 25597, 3, 0, 9)).setObjects(("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventDate"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventTraceId"), ("FE-FIREEYE-MIB", "eventSrcIp"), ("FE-FIREEYE-MIB", "eventDstIp"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventVlan"), ("FE-FIREEYE-MIB", "eventProtocol"), ("FE-FIREEYE-MIB", "eventSrcHost"), ("FE-FIREEYE-MIB", "eventCncNo"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"))
if mibBuilder.loadTexts: ccConnect.setStatus('current')
if mibBuilder.loadTexts: ccConnect.setDescription('CC connect detected')
ccSigmatch = NotificationType((1, 3, 6, 1, 4, 1, 25597, 3, 0, 10)).setObjects(("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventDate"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventTraceId"), ("FE-FIREEYE-MIB", "eventSrcIp"), ("FE-FIREEYE-MIB", "eventDstIp"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventVlan"), ("FE-FIREEYE-MIB", "eventProtocol"), ("FE-FIREEYE-MIB", "eventSrcHost"), ("FE-FIREEYE-MIB", "eventCncNo"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"))
if mibBuilder.loadTexts: ccSigmatch.setStatus('current')
if mibBuilder.loadTexts: ccSigmatch.setDescription('CC sigmatch detected')
osChange = NotificationType((1, 3, 6, 1, 4, 1, 25597, 3, 0, 11)).setObjects(("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventDate"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventTraceId"), ("FE-FIREEYE-MIB", "eventSrcIp"), ("FE-FIREEYE-MIB", "eventDstIp"), ("FE-FIREEYE-MIB", "eventSrcMac"), ("FE-FIREEYE-MIB", "eventDstMac"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventVlan"), ("FE-FIREEYE-MIB", "eventProtocol"), ("FE-FIREEYE-MIB", "eventSrcHost"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"))
if mibBuilder.loadTexts: osChange.setStatus('current')
if mibBuilder.loadTexts: osChange.setDescription('OS change anomaly detected')
ipsAlert = NotificationType((1, 3, 6, 1, 4, 1, 25597, 3, 0, 12)).setObjects(("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventSrcPort"), ("FE-FIREEYE-MIB", "eventSrcMac"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventDstMac"), ("FE-FIREEYE-MIB", "ipsSignatureId"), ("FE-FIREEYE-MIB", "ipsSignatureRevision"), ("FE-FIREEYE-MIB", "ipsMatchCount"), ("FE-FIREEYE-MIB", "ipsSeverity"), ("FE-FIREEYE-MIB", "ipsSignatureName"), ("FE-FIREEYE-MIB", "ipsReferenceId"), ("FE-FIREEYE-MIB", "ipsBlockMode"), ("FE-FIREEYE-MIB", "ipsAttackTarget"), ("FE-FIREEYE-MIB", "alertSensorProduct"), ("FE-FIREEYE-MIB", "alertSensorHost"), ("FE-FIREEYE-MIB", "alertSensorRelease"), ("FE-FIREEYE-MIB", "alertUrl"))
if mibBuilder.loadTexts: ipsAlert.setStatus('current')
if mibBuilder.loadTexts: ipsAlert.setDescription('IPS anomaly detected.')
feCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11))
feCMS = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 12))
feEMPS = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 13))
feWMPS = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 14))
feMAS = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 15))
feMibAdminInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 20))
feSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 1))
feStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 2))
fePowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 3))
feFanHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 4))
feApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 5))
feSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1))
feSystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 1, 0))
feSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feSystemStatus.setStatus('current')
if mibBuilder.loadTexts: feSystemStatus.setDescription('Overall system status')
feHardwareModel = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feHardwareModel.setStatus('current')
if mibBuilder.loadTexts: feHardwareModel.setDescription('Hardware model')
feSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feSerialNumber.setStatus('current')
if mibBuilder.loadTexts: feSerialNumber.setDescription('Serial number')
feTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: feTemperatureValue.setDescription('System temperature in Celsius')
feTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: feTemperatureStatus.setDescription('System temperature status')
feTemperatureIsHealthy = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTemperatureIsHealthy.setStatus('current')
if mibBuilder.loadTexts: feTemperatureIsHealthy.setDescription('Whether or not the temperature is normal.')
feIfLinkChangeIfname = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeIfname.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeIfname.setDescription('The name of the interface that has changed its speed.')
feIfLinkChangeOldAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 8), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeOldAdminUp.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeOldAdminUp.setDescription('The old admin up state of the interface.')
feIfLinkChangeNewAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 9), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeNewAdminUp.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeNewAdminUp.setDescription('The new admin up state of the interface.')
feIfLinkChangeOldLinkUp = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 10), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeOldLinkUp.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeOldLinkUp.setDescription('The old link up state of the interface.')
feIfLinkChangeNewLinkUp = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 11), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeNewLinkUp.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeNewLinkUp.setDescription('The new link up state of the interface.')
feIfLinkChangeOldSpeed = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeOldSpeed.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeOldSpeed.setDescription('The old speed of the interface.')
feIfLinkChangeNewSpeed = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeNewSpeed.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeNewSpeed.setDescription('The new speed of the interface.')
feIfLinkChangeOldDuplex = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeOldDuplex.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeOldDuplex.setDescription('The old duplex of the interface.')
feIfLinkChangeNewDuplex = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeNewDuplex.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeNewDuplex.setDescription('The new duplex of the interface.')
feIfLinkChangeOldAutoNeg = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 16), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeOldAutoNeg.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeOldAutoNeg.setDescription('The old auto negotiation of the interface.')
feIfLinkChangeNewAutoNeg = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 1, 1, 17), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feIfLinkChangeNewAutoNeg.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChangeNewAutoNeg.setDescription('The new auto negotiation of the interface.')
feExcessiveTemperature = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 1, 0, 1)).setObjects(("FE-FIREEYE-MIB", "feTemperatureIsHealthy"))
if mibBuilder.loadTexts: feExcessiveTemperature.setStatus('current')
if mibBuilder.loadTexts: feExcessiveTemperature.setDescription('Excessive temperature has reached.')
feNormalTemperature = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 1, 0, 2)).setObjects(("FE-FIREEYE-MIB", "feTemperatureIsHealthy"))
if mibBuilder.loadTexts: feNormalTemperature.setStatus('current')
if mibBuilder.loadTexts: feNormalTemperature.setDescription('Temperature is normal.')
feIfLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 1, 0, 3)).setObjects(("FE-FIREEYE-MIB", "feIfLinkChangeIfname"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldAdminUp"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewAdminUp"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldLinkUp"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewLinkUp"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldSpeed"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewSpeed"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldDuplex"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewDuplex"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldAutoNeg"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewAutoNeg"))
if mibBuilder.loadTexts: feIfLinkChange.setStatus('current')
if mibBuilder.loadTexts: feIfLinkChange.setDescription('The speed of an interface has changed.')
feStorageInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1))
feStorageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 2, 0))
feRaidStatus = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feRaidStatus.setStatus('current')
if mibBuilder.loadTexts: feRaidStatus.setDescription('RAID status')
feRaidIsHealthy = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feRaidIsHealthy.setStatus('current')
if mibBuilder.loadTexts: feRaidIsHealthy.setDescription('Whether or not RAID is healthy overall.')
fePhysicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3), )
if mibBuilder.loadTexts: fePhysicalDiskTable.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskTable.setDescription('The physical disk table')
fePhysicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3, 1), ).setIndexNames((0, "FE-FIREEYE-MIB", "fePhysicalDiskIndex"))
if mibBuilder.loadTexts: fePhysicalDiskEntry.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskEntry.setDescription('An entry for one physical disk')
fePhysicalDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePhysicalDiskIndex.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskIndex.setDescription('A unique value for each disk')
fePhysicalDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePhysicalDiskName.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskName.setDescription('Physical disk name')
fePhysicalDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePhysicalDiskStatus.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskStatus.setDescription('Physical disk status')
fePhysicalDiskIsHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePhysicalDiskIsHealthy.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskIsHealthy.setDescription('Whether a physical disk is healthy.')
fePhysicalDiskDeviceSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePhysicalDiskDeviceSupport.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskDeviceSupport.setDescription('Physical disk configuration, e.g. RAID')
fePhysicalDiskSelfAssess = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePhysicalDiskSelfAssess.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskSelfAssess.setDescription('Self assess of a physical disk')
fePhysicalDiskTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 2, 1, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePhysicalDiskTotalBytes.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskTotalBytes.setDescription('The capacity of a physical disk.')
feRaidFailure = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 2, 0, 1)).setObjects(("FE-FIREEYE-MIB", "feRaidIsHealthy"))
if mibBuilder.loadTexts: feRaidFailure.setStatus('current')
if mibBuilder.loadTexts: feRaidFailure.setDescription('A RAID error has occurred.')
feRaidRecover = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 2, 0, 2)).setObjects(("FE-FIREEYE-MIB", "feRaidIsHealthy"))
if mibBuilder.loadTexts: feRaidRecover.setStatus('current')
if mibBuilder.loadTexts: feRaidRecover.setDescription('RAID has recovered.')
fePhysicalDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 2, 0, 3)).setObjects(("FE-FIREEYE-MIB", "fePhysicalDiskIsHealthy"))
if mibBuilder.loadTexts: fePhysicalDiskFailure.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskFailure.setDescription('A physical disk has failed.')
fePhysicalDiskRecover = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 2, 0, 4)).setObjects(("FE-FIREEYE-MIB", "fePhysicalDiskIsHealthy"))
if mibBuilder.loadTexts: fePhysicalDiskRecover.setStatus('current')
if mibBuilder.loadTexts: fePhysicalDiskRecover.setDescription('A physical disk has recovered.')
fePowerSupplyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 3, 1))
fePowerSupplyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 3, 0))
fePowerSupplyOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePowerSupplyOverallStatus.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyOverallStatus.setDescription('Overall power supply status')
fePowerSupplyOverallIsHealthy = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePowerSupplyOverallIsHealthy.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyOverallIsHealthy.setDescription('Whether or not power supply is healthy overall.')
fePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 25597, 11, 3, 1, 3), )
if mibBuilder.loadTexts: fePowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyTable.setDescription('The power supply table')
fePowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25597, 11, 3, 1, 3, 1), ).setIndexNames((0, "FE-FIREEYE-MIB", "fePowerSupplyIndex"))
if mibBuilder.loadTexts: fePowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyEntry.setDescription('An entry for one physical disk')
fePowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 3, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyIndex.setDescription('A unique value for each power supply')
fePowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 3, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyStatus.setDescription('Power supply status')
fePowerSupplyIsHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 3, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fePowerSupplyIsHealthy.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyIsHealthy.setDescription('Whether a power supply is healthy.')
fePowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 3, 0, 1)).setObjects(("FE-FIREEYE-MIB", "fePowerSupplyOverallIsHealthy"))
if mibBuilder.loadTexts: fePowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyFailure.setDescription('A power supply has failed.')
fePowerSupplyRecover = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 3, 0, 2)).setObjects(("FE-FIREEYE-MIB", "fePowerSupplyOverallIsHealthy"))
if mibBuilder.loadTexts: fePowerSupplyRecover.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyRecover.setDescription('A power supply has recovered.')
feFanHealthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1))
feFanHealthTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 4, 0))
feFanOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feFanOverallStatus.setStatus('current')
if mibBuilder.loadTexts: feFanOverallStatus.setDescription('Overall fan status')
feFanOverallIsHealthy = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feFanOverallIsHealthy.setStatus('current')
if mibBuilder.loadTexts: feFanOverallIsHealthy.setDescription('Whether or not fan is healthy overall.')
feFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1, 3), )
if mibBuilder.loadTexts: feFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: feFanStatusTable.setDescription('The Fan Status table')
feFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1, 3, 1), ).setIndexNames((0, "FE-FIREEYE-MIB", "feFanIndex"))
if mibBuilder.loadTexts: feFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: feFanStatusEntry.setDescription('An entry for one fan')
feFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feFanIndex.setStatus('current')
if mibBuilder.loadTexts: feFanIndex.setDescription('A unique value for each fan status table entry')
feFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feFanStatus.setStatus('current')
if mibBuilder.loadTexts: feFanStatus.setDescription('Fan status')
feFanIsHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feFanIsHealthy.setStatus('current')
if mibBuilder.loadTexts: feFanIsHealthy.setDescription('Whether a fan is healthy.')
feFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 4, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feFanSpeed.setStatus('current')
if mibBuilder.loadTexts: feFanSpeed.setDescription('Fan speed in rpm')
feFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 4, 0, 1)).setObjects(("FE-FIREEYE-MIB", "feFanOverallIsHealthy"))
if mibBuilder.loadTexts: feFanFailure.setStatus('current')
if mibBuilder.loadTexts: feFanFailure.setDescription('A fan has failed.')
feFanRecover = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 4, 0, 2)).setObjects(("FE-FIREEYE-MIB", "feFanOverallIsHealthy"))
if mibBuilder.loadTexts: feFanRecover.setStatus('current')
if mibBuilder.loadTexts: feFanRecover.setDescription('A fan has recovered.')
feApplicationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1))
feApplicationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 11, 5, 0))
feInstalledSystemImage = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInstalledSystemImage.setStatus('current')
if mibBuilder.loadTexts: feInstalledSystemImage.setDescription('Current installed system image')
feSystemImageVersionCurrent = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feSystemImageVersionCurrent.setStatus('current')
if mibBuilder.loadTexts: feSystemImageVersionCurrent.setDescription('Current system image version')
feSystemImageVersionLatest = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feSystemImageVersionLatest.setStatus('current')
if mibBuilder.loadTexts: feSystemImageVersionLatest.setDescription('Latest system image version')
feIsSystemImageLatest = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feIsSystemImageLatest.setStatus('current')
if mibBuilder.loadTexts: feIsSystemImageLatest.setDescription('Whether or not the current system image is the latest.')
feSecurityContentVersion = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feSecurityContentVersion.setStatus('current')
if mibBuilder.loadTexts: feSecurityContentVersion.setDescription('Security content version')
feLastContentUpdatePassed = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feLastContentUpdatePassed.setStatus('current')
if mibBuilder.loadTexts: feLastContentUpdatePassed.setDescription('Whether the last security content updated has passed.')
feLastContentUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feLastContentUpdateTime.setStatus('current')
if mibBuilder.loadTexts: feLastContentUpdateTime.setDescription('The last update time for security contents')
feGIVersionTable = MibTable((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 8), )
if mibBuilder.loadTexts: feGIVersionTable.setStatus('current')
if mibBuilder.loadTexts: feGIVersionTable.setDescription('The guest image version table')
feGIVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 8, 1), ).setIndexNames((0, "FE-FIREEYE-MIB", "feGIIndex"))
if mibBuilder.loadTexts: feGIVersionEntry.setStatus('current')
if mibBuilder.loadTexts: feGIVersionEntry.setDescription('An entry for one guest image')
feGIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feGIIndex.setStatus('current')
if mibBuilder.loadTexts: feGIIndex.setDescription('A unique value for each guest image')
feGIName = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 8, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feGIName.setStatus('current')
if mibBuilder.loadTexts: feGIName.setDescription('Guest image name')
feGIVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feGIVersion.setStatus('current')
if mibBuilder.loadTexts: feGIVersion.setDescription('Guest image version')
feGIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feGIEnabled.setStatus('current')
if mibBuilder.loadTexts: feGIEnabled.setDescription('Whether guest image is enabled.')
feGIInstallDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feGIInstallDateTime.setStatus('current')
if mibBuilder.loadTexts: feGIInstallDateTime.setDescription('Guest image install date and time')
feActiveVMs = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feActiveVMs.setStatus('current')
if mibBuilder.loadTexts: feActiveVMs.setDescription('Number of active VMs')
feProductLicenseActive = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feProductLicenseActive.setStatus('current')
if mibBuilder.loadTexts: feProductLicenseActive.setDescription('Whether the product license is active.')
feContentLicenseActive = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feContentLicenseActive.setStatus('current')
if mibBuilder.loadTexts: feContentLicenseActive.setDescription('Whether the content license is active.')
feSupportLicenseActive = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feSupportLicenseActive.setStatus('current')
if mibBuilder.loadTexts: feSupportLicenseActive.setDescription('Whether the support license is active.')
feLicenseFeatureName = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feLicenseFeatureName.setStatus('current')
if mibBuilder.loadTexts: feLicenseFeatureName.setDescription('License feature name for the feLicenseStateChanged event.')
feLicenseNewActiveState = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 14), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feLicenseNewActiveState.setStatus('current')
if mibBuilder.loadTexts: feLicenseNewActiveState.setDescription('The new license active state for the feLicenseStateChanged event.')
feLicenseOldActiveState = MibScalar((1, 3, 6, 1, 4, 1, 25597, 11, 5, 1, 15), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feLicenseOldActiveState.setStatus('current')
if mibBuilder.loadTexts: feLicenseOldActiveState.setDescription('The old license active state for the feLicenseStateChanged event.')
feLicenseStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 5, 0, 1)).setObjects(("FE-FIREEYE-MIB", "feLicenseFeatureName"), ("FE-FIREEYE-MIB", "feLicenseNewActiveState"), ("FE-FIREEYE-MIB", "feLicenseOldActiveState"))
if mibBuilder.loadTexts: feLicenseStateChanged.setStatus('current')
if mibBuilder.loadTexts: feLicenseStateChanged.setDescription('A license state has changed.')
feSecurityUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 25597, 11, 5, 0, 2))
if mibBuilder.loadTexts: feSecurityUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: feSecurityUpdateFailed.setDescription('Security update has failed.')
feCMSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 12, 1))
feCMSTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 12, 0))
feTotalAppliancesAttached = MibScalar((1, 3, 6, 1, 4, 1, 25597, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalAppliancesAttached.setStatus('current')
if mibBuilder.loadTexts: feTotalAppliancesAttached.setDescription('Total appliances attached')
feTotalWMPSAttached = MibScalar((1, 3, 6, 1, 4, 1, 25597, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalWMPSAttached.setStatus('current')
if mibBuilder.loadTexts: feTotalWMPSAttached.setDescription('Total WMPS attached')
feTotalEMPSAttached = MibScalar((1, 3, 6, 1, 4, 1, 25597, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEMPSAttached.setStatus('current')
if mibBuilder.loadTexts: feTotalEMPSAttached.setDescription('Total EMPS attached')
feTotalFMPSAttached = MibScalar((1, 3, 6, 1, 4, 1, 25597, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalFMPSAttached.setStatus('current')
if mibBuilder.loadTexts: feTotalFMPSAttached.setDescription('Total FMPS attached')
feTotalMASAttached = MibScalar((1, 3, 6, 1, 4, 1, 25597, 12, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMASAttached.setStatus('current')
if mibBuilder.loadTexts: feTotalMASAttached.setDescription('Total MAS attached')
feCMSApplianceTable = MibTable((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6), )
if mibBuilder.loadTexts: feCMSApplianceTable.setStatus('current')
if mibBuilder.loadTexts: feCMSApplianceTable.setDescription('The CMS managed appliance table')
feCMSApplianceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6, 1), ).setIndexNames((0, "FE-FIREEYE-MIB", "feCMSApplianceIndex"))
if mibBuilder.loadTexts: feCMSApplianceEntry.setStatus('current')
if mibBuilder.loadTexts: feCMSApplianceEntry.setDescription('An entry for one CMS managed appliance')
feCMSApplianceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feCMSApplianceIndex.setStatus('current')
if mibBuilder.loadTexts: feCMSApplianceIndex.setDescription('A unique value for each CMS managed appliance')
feCMSApplianceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feCMSApplianceName.setStatus('current')
if mibBuilder.loadTexts: feCMSApplianceName.setDescription('The name of the CMS managed appliance')
feCMSApplianceDiskSpacePassed = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feCMSApplianceDiskSpacePassed.setStatus('current')
if mibBuilder.loadTexts: feCMSApplianceDiskSpacePassed.setDescription('Whether a CMS managed appliance passed disk space check.')
feCMSApplianceFanPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feCMSApplianceFanPassed.setStatus('current')
if mibBuilder.loadTexts: feCMSApplianceFanPassed.setDescription('Whether a CMS managed appliance passed fan check.')
feCMSAppliancePowerSupplyPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feCMSAppliancePowerSupplyPassed.setStatus('current')
if mibBuilder.loadTexts: feCMSAppliancePowerSupplyPassed.setDescription('Whether a CMS managed appliance passed power supply check.')
feCMSApplianceRaidPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feCMSApplianceRaidPassed.setStatus('current')
if mibBuilder.loadTexts: feCMSApplianceRaidPassed.setDescription('Whether a CMS managed appliance passed RAID check.')
feCMSApplianceTemperaturePassed = MibTableColumn((1, 3, 6, 1, 4, 1, 25597, 12, 1, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feCMSApplianceTemperaturePassed.setStatus('current')
if mibBuilder.loadTexts: feCMSApplianceTemperaturePassed.setDescription('Whether a CMS managed appliance passed temperature check.')
feCMSHAUnexpectedFailover = NotificationType((1, 3, 6, 1, 4, 1, 25597, 12, 0, 1))
if mibBuilder.loadTexts: feCMSHAUnexpectedFailover.setStatus('current')
if mibBuilder.loadTexts: feCMSHAUnexpectedFailover.setDescription('An unexpected fail-over on CMS-HA has occurred.')
feCMSHAManualFailover = NotificationType((1, 3, 6, 1, 4, 1, 25597, 12, 0, 2))
if mibBuilder.loadTexts: feCMSHAManualFailover.setStatus('current')
if mibBuilder.loadTexts: feCMSHAManualFailover.setDescription('A manual fail-over on CMS-HA has occurred.')
feEMPSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 13, 1))
feEMPSTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 13, 0))
feTotalEmailCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailCount.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailCount.setDescription('This is a count of all the emails coming into postfix and also includes emails which do not contain any URL or attachment (email on fast path). This will be the cumulative value and maintained across appliance reboots.')
feTotalEmailCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailCountH.setDescription('This is a count of all the emails coming into postfix and also includes emails which do not contain any URL or attachment (email on fast path). This will be the cumulative value and maintained across appliance reboots. feTotalEmailCountH is the high order 32bit of the 64bit counter.')
feTotalEmailCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailCountL.setDescription('This is a count of all the emails coming into postfix and also includes emails which do not contain any URL or attachment (email on fast path). This will be the cumulative value and maintained across appliance reboots. feTotalEmailCountL is the low order 32bit of the 64bit counter.')
feInfectedEmailCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedEmailCount.setStatus('current')
if mibBuilder.loadTexts: feInfectedEmailCount.setDescription("This is a count of all the email which are determined to be malicious. This is the same as 'Total Email Received with Malicious Content' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots.")
feInfectedEmailCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedEmailCountH.setStatus('current')
if mibBuilder.loadTexts: feInfectedEmailCountH.setDescription("This is a count of all the email which are determined to be malicious. This is the same as 'Total Email Received with Malicious Content' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feInfectedEmailCountH is the high order 32bit of the 64bit counter.")
feInfectedEmailCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedEmailCountL.setStatus('current')
if mibBuilder.loadTexts: feInfectedEmailCountL.setDescription("This is a count of all the email which are determined to be malicious. This is the same as 'Total Email Received with Malicious Content' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feInfectedEmailCountL is the low order 32bit of the 64bit counter.")
feAnalyzedEmailCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedEmailCount.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedEmailCount.setDescription("This is cumulative count of all the email which were analyzed. This is the same as 'Total Emails Received and Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots.")
feAnalyzedEmailCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedEmailCountH.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedEmailCountH.setDescription("This is cumulative count of all the email which were analyzed. This is the same as 'Total Emails Received and Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots. feAnalyzedEmailCountH is the high order 32bit of the 64bit counter.")
feAnalyzedEmailCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedEmailCountL.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedEmailCountL.setDescription("This is cumulative count of all the email which were analyzed. This is the same as 'Total Emails Received and Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots. feAnalyzedEmailCountL is the low order 32bit of the 64bit counter.")
feTotalUrlCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalUrlCount.setStatus('current')
if mibBuilder.loadTexts: feTotalUrlCount.setDescription("This is a count of all the URLs received whether they are processed or not. This is the same as 'Total URLs Received' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots.")
feTotalUrlCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalUrlCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalUrlCountH.setDescription("This is a count of all the URLs received whether they are processed or not. This is the same as 'Total URLs Received' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feTotalUrlCountH is the high order 32bit of the 64bit counter.")
feTotalUrlCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalUrlCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalUrlCountL.setDescription("This is a count of all the URLs received whether they are processed or not. This is the same as 'Total URLs Received' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feTotalUrlCountL is the low order 32bit of the 64bit counter.")
feInfectedUrlCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedUrlCount.setStatus('current')
if mibBuilder.loadTexts: feInfectedUrlCount.setDescription("This is a count of all the URLs that are determined to be malicious and is the same as 'Total URLs Considered Malicious' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots.")
feInfectedUrlCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedUrlCountH.setStatus('current')
if mibBuilder.loadTexts: feInfectedUrlCountH.setDescription("This is a count of all the URLs that are determined to be malicious and is the same as 'Total URLs Considered Malicious' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feInfectedUrlCountH is the high order 32bit of the 64bit counter.")
feInfectedUrlCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedUrlCountL.setStatus('current')
if mibBuilder.loadTexts: feInfectedUrlCountL.setDescription("This is a count of all the URLs that are determined to be malicious and is the same as 'Total URLs Considered Malicious' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feInfectedUrlCountH is the low order 32bit of the 64bit counter.")
feAnalyzedUrlCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedUrlCount.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedUrlCount.setDescription("This is the cumulative count of all the URLs that were analyzed and is the same as 'Total URLs Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots.")
feAnalyzedUrlCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedUrlCountH.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedUrlCountH.setDescription("This is the cumulative count of all the URLs that were analyzed and is the same as 'Total URLs Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots. feAnalyzedUrlCountH is the high order 32bit of the 64bit counter.")
feAnalyzedUrlCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedUrlCountL.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedUrlCountL.setDescription("This is the cumulative count of all the URLs that were analyzed and is the same as 'Total URLs Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots. feAnalyzedUrlCountL is the low order 32bit of the 64bit counter.")
feTotalAttachmentCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalAttachmentCount.setStatus('current')
if mibBuilder.loadTexts: feTotalAttachmentCount.setDescription("This is a count of all the attachment received whether they are processed or not. This is the same as 'Total Attachments Received' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots.")
feTotalAttachmentCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalAttachmentCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalAttachmentCountH.setDescription("This is a count of all the attachment received whether they are processed or not. This is the same as 'Total Attachments Received' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feTotalAttachmentCountH is the high order 32bit of the 64bit counter.")
feTotalAttachmentCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalAttachmentCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalAttachmentCountL.setDescription("This is a count of all the attachment received whether they are processed or not. This is the same as 'Total Attachments Received' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feTotalAttachmentCountL is the low order 32bit of the 64bit counter.")
feInfectedAttachmentCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedAttachmentCount.setStatus('current')
if mibBuilder.loadTexts: feInfectedAttachmentCount.setDescription("This is a count of all the attachment that are determined to be malicious and is the same as 'Total Attachments Considered Malicious' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots.")
feInfectedAttachmentCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedAttachmentCountH.setStatus('current')
if mibBuilder.loadTexts: feInfectedAttachmentCountH.setDescription("This is a count of all the attachment that are determined to be malicious and is the same as 'Total Attachments Considered Malicious' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feInfectedAttachmentCountH is the high order 32bit of the 64bit counter.")
feInfectedAttachmentCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feInfectedAttachmentCountL.setStatus('current')
if mibBuilder.loadTexts: feInfectedAttachmentCountL.setDescription("This is a count of all the attachment that are determined to be malicious and is the same as 'Total Attachments Considered Malicious' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feInfectedAttachmentCountL is the low order 32bit of the 64bit counter.")
feAnalyzedAttachmentCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedAttachmentCount.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedAttachmentCount.setDescription("This is the cumulative count of all the attachment that we analyzed for maliciousness. This is the same as 'Total Attachments Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots.")
feAnalyzedAttachmentCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedAttachmentCountH.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedAttachmentCountH.setDescription("This is the cumulative count of all the attachment that we analyzed for maliciousness. This is the same as 'Total Attachments Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots. feAnalyzedAttachmentCountH is the high order 32bit of the 64bit counter.")
feAnalyzedAttachmentCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feAnalyzedAttachmentCountL.setStatus('current')
if mibBuilder.loadTexts: feAnalyzedAttachmentCountL.setDescription("This is the cumulative count of all the attachment that we analyzed for maliciousness. This is the same as 'Total Attachments Analyzed' that we currently show in the output to CLI command 'show email-analysis statistics'. This counter will maintain its value across reboots. feAnalyzedAttachmentCountL is the low order 32bit of the 64bit counter.")
feTotalEmailHasAttachment = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasAttachment.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasAttachment.setDescription('This is a count of all the emails containing at least one attachment. This value will be the cumulative and preserved across appliance reboots.')
feTotalEmailHasAttachmentH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasAttachmentH.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasAttachmentH.setDescription('This is a count of all the emails containing at least one attachment. This value will be the cumulative and preserved across appliance reboots. feTotalEmailHasAttachmentH is the high order 32bit of the 64bit counter.')
feTotalEmailHasAttachmentL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasAttachmentL.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasAttachmentL.setDescription('This is a count of all the emails containing at least one attachment. This value will be the cumulative and preserved across appliance reboots. feTotalEmailHasAttachmentL is the low order 32bit of the 64bit counter.')
feTotalEmailHasUrl = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasUrl.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasUrl.setDescription('This is a count of all the emails containing at least one URL. This value will be the cumulative and preserved across appliance reboots.')
feTotalEmailHasUrlH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasUrlH.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasUrlH.setDescription('This is a count of all the emails containing at least one URL. This value will be the cumulative and preserved across appliance reboots. feTotalEmailHasUrlH is the high order 32bit of the 64bit counter.')
feTotalEmailHasUrlL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasUrlL.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasUrlL.setDescription('This is a count of all the emails containing at least one URL. This value will be the cumulative and preserved across appliance reboots. feTotalEmailHasUrlL is the low order 32bit of the 64bit counter.')
feTotalEmailHasBadAttachment = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasBadAttachment.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasBadAttachment.setDescription('This is a count of all the emails containing at least one attachment determined to be malicious. This value will be the cumulative and preserved across appliance reboots.')
feTotalEmailHasBadAttachmentH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasBadAttachmentH.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasBadAttachmentH.setDescription('This is a count of all the emails containing at least one attachment determined to be malicious. This value will be the cumulative and preserved across appliance reboots. feTotalEmailHasBadAttachmentH is the high order 32bit of the 64bit counter.')
feTotalEmailHasBadAttachmentL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasBadAttachmentL.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasBadAttachmentL.setDescription('This is a count of all the emails containing at least one attachment determined to be malicious. This value will be the cumulative and preserved across appliance reboots. feTotalEmailHasBadAttachmentL is the low order 32bit of the 64bit counter.')
feTotalEmailHasBadUrl = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasBadUrl.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasBadUrl.setDescription('This is a count of all the emails containing at least one URL determined to be malicious. This value will be the cumulative and preserved across appliance reboots.')
feTotalEmailHasBadUrlH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasBadUrlH.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasBadUrlH.setDescription('This is a count of all the emails containing at least one URL determined to be malicious. This value will be the cumulative and preserved across appliance reboots. feTotalEmailHasBadUrlH is the high order 32bit of the 64bit counter.')
feTotalEmailHasBadUrlL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalEmailHasBadUrlL.setStatus('current')
if mibBuilder.loadTexts: feTotalEmailHasBadUrlL.setDescription('This is a count of all the emails containing at least one URL determined to be malicious. This value will be the cumulative and preserved across appliance reboots. feTotalEmailHasBadUrlL is the low order 32bit of the 64bit counter.')
feeQuarantineUsage = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: feeQuarantineUsage.setStatus('current')
if mibBuilder.loadTexts: feeQuarantineUsage.setDescription('This is consumed capacity in term of percentage of max capacity. This is a snapshot value and represents current consumption value.')
feBypassEmailCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feBypassEmailCount.setStatus('current')
if mibBuilder.loadTexts: feBypassEmailCount.setDescription("This is a count of Bypassed Emails and is the same as 'Total Emails Bypassed' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots.")
feBypassEmailCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feBypassEmailCountH.setStatus('current')
if mibBuilder.loadTexts: feBypassEmailCountH.setDescription("This is a count of Bypassed Emails and is the same as 'Total Emails Bypassed' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feBypassEmailCountH is the high order 32bit of the 64bit counter.")
feBypassEmailCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feBypassEmailCountL.setStatus('current')
if mibBuilder.loadTexts: feBypassEmailCountL.setDescription("This is a count of Bypassed Emails and is the same as 'Total Emails Bypassed' that we currently show in the output to CLI command 'show email-analysis statistics'. This will be the cumulative value and is maintained across appliance reboots. feBypassEmailCountL is the low order 32bit of the 64bit counter.")
feDeferredEmailCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feDeferredEmailCount.setStatus('current')
if mibBuilder.loadTexts: feDeferredEmailCount.setDescription('This is a count of deferred emails and will represent snapshot current value.')
feHoldQueueEmailCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feHoldQueueEmailCount.setStatus('current')
if mibBuilder.loadTexts: feHoldQueueEmailCount.setDescription('This is a count of emails in the hold queue and will represent current snapshot value.')
feOpenSmtpConnections = MibScalar((1, 3, 6, 1, 4, 1, 25597, 13, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feOpenSmtpConnections.setStatus('current')
if mibBuilder.loadTexts: feOpenSmtpConnections.setDescription('This is a snapshot value of currently open SMTP connections.')
feDeferredQueueThreshold = NotificationType((1, 3, 6, 1, 4, 1, 25597, 13, 0, 1)).setObjects(("FE-FIREEYE-MIB", "feDeferredEmailCount"))
if mibBuilder.loadTexts: feDeferredQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: feDeferredQueueThreshold.setDescription('Deferred queue email count exceeded a certain threshold.')
feBypassCountThreshold = NotificationType((1, 3, 6, 1, 4, 1, 25597, 13, 0, 2))
if mibBuilder.loadTexts: feBypassCountThreshold.setStatus('current')
if mibBuilder.loadTexts: feBypassCountThreshold.setDescription('Current bypass count exceeded a certain threshold.')
feSmtpInterfaceRefuseConnection = NotificationType((1, 3, 6, 1, 4, 1, 25597, 13, 0, 3))
if mibBuilder.loadTexts: feSmtpInterfaceRefuseConnection.setStatus('current')
if mibBuilder.loadTexts: feSmtpInterfaceRefuseConnection.setDescription('SMTP interface set to refuse connections because of congestion.')
feSmtpInterfaceRecover = NotificationType((1, 3, 6, 1, 4, 1, 25597, 13, 0, 4))
if mibBuilder.loadTexts: feSmtpInterfaceRecover.setStatus('current')
if mibBuilder.loadTexts: feSmtpInterfaceRecover.setDescription('SMTP interface re-enabled after recover.')
feEMPSBypassStateEntered = NotificationType((1, 3, 6, 1, 4, 1, 25597, 13, 0, 5))
if mibBuilder.loadTexts: feEMPSBypassStateEntered.setStatus('current')
if mibBuilder.loadTexts: feEMPSBypassStateEntered.setDescription('Email bypass state entered.')
feEMPSBypassStateExited = NotificationType((1, 3, 6, 1, 4, 1, 25597, 13, 0, 6))
if mibBuilder.loadTexts: feEMPSBypassStateExited.setStatus('current')
if mibBuilder.loadTexts: feEMPSBypassStateExited.setDescription('Email bypass state exited.')
feWMPSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 14, 1))
feWMPSTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 14, 0))
feHttpThroughputNotIncrease = NotificationType((1, 3, 6, 1, 4, 1, 25597, 14, 0, 1))
if mibBuilder.loadTexts: feHttpThroughputNotIncrease.setStatus('current')
if mibBuilder.loadTexts: feHttpThroughputNotIncrease.setDescription('HTTP throughput has not increased for a specified time.')
feHardwareBypassEntered = NotificationType((1, 3, 6, 1, 4, 1, 25597, 14, 0, 2))
if mibBuilder.loadTexts: feHardwareBypassEntered.setStatus('current')
if mibBuilder.loadTexts: feHardwareBypassEntered.setDescription('Permanent hardware bypass mode entered.')
feMASInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 15, 1))
feMASTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 15, 0))
feTotalObjectAnalyzedCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalObjectAnalyzedCount.setStatus('current')
if mibBuilder.loadTexts: feTotalObjectAnalyzedCount.setDescription('This is a count of all the object analyzed, including all children of any samples, including URL.')
feTotalObjectAnalyzedCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalObjectAnalyzedCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalObjectAnalyzedCountH.setDescription('This is a count of all the object analyzed, including all children of any samples, including URL. feTotalObjectAnalyzedCountH is the high order 32bit of the 64bit counter.')
feTotalObjectAnalyzedCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalObjectAnalyzedCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalObjectAnalyzedCountL.setDescription('This is a count of all the object analyzed, including all children of any samples, including URL. feTotalObjectAnalyzedCountL is the low order 32bit of the 64bit counter.')
feTotalMaliciousObjectCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousObjectCount.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousObjectCount.setDescription('This is a count of all malicious samples detected.')
feTotalMaliciousObjectCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousObjectCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousObjectCountH.setDescription('This is a count of all malicious samples detected. feTotalMaliciousObjectCountH is the high order 32bit of the 64bit counter.')
feTotalMaliciousObjectCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousObjectCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousObjectCountL.setDescription('This is a count of all malicious samples detected. feTotalMaliciousObjectCountL is the low order 32bit of the 64bit counter.')
feTotalUrlAnalyzedCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalUrlAnalyzedCount.setStatus('current')
if mibBuilder.loadTexts: feTotalUrlAnalyzedCount.setDescription('This is a count of all samples that has file type: url.')
feTotalUrlAnalyzedCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalUrlAnalyzedCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalUrlAnalyzedCountH.setDescription('This is a count of all samples that has file type: url. feTotalUrlAnalyzedCountH is the high order 32bit of the 64bit counter.')
feTotalUrlAnalyzedCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalUrlAnalyzedCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalUrlAnalyzedCountL.setDescription('This is a count of all samples that has file type: url. feTotalUrlAnalyzedCountL is the low order 32bit of the 64bit counter.')
feTotalMaliciousUrlCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousUrlCount.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousUrlCount.setDescription("This is a count of all samples that has file type 'url' and also are malicious.")
feTotalMaliciousUrlCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousUrlCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousUrlCountH.setDescription("This is a count of all samples that has file type 'url' and also are malicious. feTotalMaliciousUrlCountH is the high order 32bit of the 64bit counter.")
feTotalMaliciousUrlCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousUrlCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousUrlCountL.setDescription("This is a count of all samples that has file type 'url' and also are malicious. feTotalMaliciousUrlCountL is the low order 32bit of the 64bit counter.")
feTotalFileUploadedCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalFileUploadedCount.setStatus('current')
if mibBuilder.loadTexts: feTotalFileUploadedCount.setDescription('This is a count of all object that has no parent (basically, children will not be counted).')
feTotalFileUploadedCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalFileUploadedCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalFileUploadedCountH.setDescription('This is a count of all object that has no parent (basically, children will not be counted). feTotalFileUploadedCountH is the high order 32bit of the 64bit counter.')
feTotalFileUploadedCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalFileUploadedCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalFileUploadedCountL.setDescription('This is a count of all object that has no parent (basically, children will not be counted). feTotalFileUploadedCountL is the low order 32bit of the 64bit counter.')
feTotalMaliciousFileCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousFileCount.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousFileCount.setDescription('This is a count of all object that has no parent (basically children will not be counted), and are not URL.')
feTotalMaliciousFileCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousFileCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousFileCountH.setDescription('This is a count of all object that has no parent (basically children will not be counted), and are not URL. feTotalMaliciousFileCountH is the high order 32bit of the 64bit counter.')
feTotalMaliciousFileCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousFileCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousFileCountL.setDescription('This is a count of all object that has no parent (basically children will not be counted), and are not URL. feTotalMaliciousFileCountL is the low order 32bit of the 64bit counter.')
feTotalLiveModeCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalLiveModeCount.setStatus('current')
if mibBuilder.loadTexts: feTotalLiveModeCount.setDescription('This is a count of all object that are submitted for live mode.')
feTotalLiveModeCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalLiveModeCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalLiveModeCountH.setDescription('This is a count of all object that are submitted for live mode. feTotalLiveModeCountH is the high order 32bit of the 64bit counter.')
feTotalLiveModeCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalLiveModeCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalLiveModeCountL.setDescription('This is a count of all object that are submitted for live mode. feTotalLiveModeCountL is the low order 32bit of the 64bit counter.')
feTotalMaliciousLiveModeCount = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousLiveModeCount.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousLiveModeCount.setDescription('This is a count of all object that are submitted for live mode and are malicious. Live mode object has no children.')
feTotalMaliciousLiveModeCountH = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousLiveModeCountH.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousLiveModeCountH.setDescription('This is a count of all object that are submitted for live mode and are malicious. Live mode object has no children. feTotalMaliciousLiveModeCountH is the high order 32bit of the 64bit counter.')
feTotalMaliciousLiveModeCountL = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feTotalMaliciousLiveModeCountL.setStatus('current')
if mibBuilder.loadTexts: feTotalMaliciousLiveModeCountL.setDescription('This is a count of all object that are submitted for live mode and are malicious. Live mode object has no children. feTotalMaliciousLiveModeCountL is the low order 32bit of the 64bit counter.')
feMaid = MibScalar((1, 3, 6, 1, 4, 1, 25597, 15, 1, 25), CounterBasedGauge64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feMaid.setStatus('current')
if mibBuilder.loadTexts: feMaid.setDescription('ID of the malicious sample/url.')
feMaliciousMaid = NotificationType((1, 3, 6, 1, 4, 1, 25597, 15, 0, 1)).setObjects(("FE-FIREEYE-MIB", "feMaid"))
if mibBuilder.loadTexts: feMaliciousMaid.setStatus('current')
if mibBuilder.loadTexts: feMaliciousMaid.setDescription('A malicious URL or file detected.')
feMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 20, 2))
feMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25597, 20, 3))
feMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25597, 20, 2, 1)).setObjects(("FE-FIREEYE-MIB", "feVariablesGroup"), ("FE-FIREEYE-MIB", "feNotificationsGroup"), ("FE-FIREEYE-MIB", "feSystemInfoGroup"), ("FE-FIREEYE-MIB", "feSystemTrapGroup"), ("FE-FIREEYE-MIB", "feStorageInfoGroup"), ("FE-FIREEYE-MIB", "feStorageTrapGroup"), ("FE-FIREEYE-MIB", "fePowerSupplyInfoGroup"), ("FE-FIREEYE-MIB", "fePowerSupplyTrapGroup"), ("FE-FIREEYE-MIB", "feFanHealthInfoGroup"), ("FE-FIREEYE-MIB", "feFanHealthTrapGroup"), ("FE-FIREEYE-MIB", "feApplicationInfoGroup"), ("FE-FIREEYE-MIB", "feApplicationTrapGroup"), ("FE-FIREEYE-MIB", "feCMSInfoGroup"), ("FE-FIREEYE-MIB", "feCMSTrapGroup"), ("FE-FIREEYE-MIB", "feEMPSInfoGroup"), ("FE-FIREEYE-MIB", "feEMPSTrapGroup"), ("FE-FIREEYE-MIB", "feWMPSTrapGroup"), ("FE-FIREEYE-MIB", "feMASInfoGroup"), ("FE-FIREEYE-MIB", "feMASTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feMibCompliance = feMibCompliance.setStatus('current')
if mibBuilder.loadTexts: feMibCompliance.setDescription('The requirements for conformance to the FireEye MIB.')
feVariablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 1)).setObjects(("FE-FIREEYE-MIB", "lmsVersion"), ("FE-FIREEYE-MIB", "eventCount"), ("FE-FIREEYE-MIB", "eventIndex"), ("FE-FIREEYE-MIB", "eventId"), ("FE-FIREEYE-MIB", "eventType"), ("FE-FIREEYE-MIB", "eventDate"), ("FE-FIREEYE-MIB", "eventTime"), ("FE-FIREEYE-MIB", "eventTraceId"), ("FE-FIREEYE-MIB", "eventSrcIp"), ("FE-FIREEYE-MIB", "eventDstIp"), ("FE-FIREEYE-MIB", "eventSrcMac"), ("FE-FIREEYE-MIB", "eventDstMac"), ("FE-FIREEYE-MIB", "eventDstPort"), ("FE-FIREEYE-MIB", "eventVlan"), ("FE-FIREEYE-MIB", "eventProtocol"), ("FE-FIREEYE-MIB", "eventProfileId"), ("FE-FIREEYE-MIB", "eventOsInfo"), ("FE-FIREEYE-MIB", "eventService"), ("FE-FIREEYE-MIB", "eventAttackType"), ("FE-FIREEYE-MIB", "eventSignatureName"), ("FE-FIREEYE-MIB", "eventSignatureType"), ("FE-FIREEYE-MIB", "eventSrcHost"), ("FE-FIREEYE-MIB", "eventCncNo"), ("FE-FIREEYE-MIB", "alertSignatureId"), ("FE-FIREEYE-MIB", "alertCncHost"), ("FE-FIREEYE-MIB", "alertCncPort"), ("FE-FIREEYE-MIB", "alertChecksum"), ("FE-FIREEYE-MIB", "alertAnalysisType"), ("FE-FIREEYE-MIB", "alertProfile"), ("FE-FIREEYE-MIB", "alertAction"), ("FE-FIREEYE-MIB", "alertInterface"), ("FE-FIREEYE-MIB", "alertSensorIp"), ("FE-FIREEYE-MIB", "alertSensorHost"), ("FE-FIREEYE-MIB", "alertSensorProduct"), ("FE-FIREEYE-MIB", "alertSensorRelease"), ("FE-FIREEYE-MIB", "alertUrl"), ("FE-FIREEYE-MIB", "eventSrcAddrType"), ("FE-FIREEYE-MIB", "eventSrcAddr"), ("FE-FIREEYE-MIB", "eventDstAddrType"), ("FE-FIREEYE-MIB", "eventDstAddr"), ("FE-FIREEYE-MIB", "eventSensorAddrType"), ("FE-FIREEYE-MIB", "eventSensorAddr"), ("FE-FIREEYE-MIB", "eventSrcPort"), ("FE-FIREEYE-MIB", "eventDateTime"), ("FE-FIREEYE-MIB", "ipsSignatureId"), ("FE-FIREEYE-MIB", "ipsSignatureRevision"), ("FE-FIREEYE-MIB", "ipsMatchCount"), ("FE-FIREEYE-MIB", "ipsSeverity"), ("FE-FIREEYE-MIB", "ipsSignatureName"), ("FE-FIREEYE-MIB", "ipsReferenceId"), ("FE-FIREEYE-MIB", "ipsBlockMode"), ("FE-FIREEYE-MIB", "ipsAttackTarget"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feVariablesGroup = feVariablesGroup.setStatus('current')
if mibBuilder.loadTexts: feVariablesGroup.setDescription('This groups contains objects for malware alerts.')
feNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 2)).setObjects(("FE-FIREEYE-MIB", "fireeyeAlert"), ("FE-FIREEYE-MIB", "executionAnomaly"), ("FE-FIREEYE-MIB", "networkAnomaly"), ("FE-FIREEYE-MIB", "signatureMatch"), ("FE-FIREEYE-MIB", "ccConnect"), ("FE-FIREEYE-MIB", "ccSigmatch"), ("FE-FIREEYE-MIB", "osChange"), ("FE-FIREEYE-MIB", "ipsAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feNotificationsGroup = feNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: feNotificationsGroup.setDescription('This groups contains notifications for malware alerts.')
feSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 11)).setObjects(("FE-FIREEYE-MIB", "feSystemStatus"), ("FE-FIREEYE-MIB", "feHardwareModel"), ("FE-FIREEYE-MIB", "feSerialNumber"), ("FE-FIREEYE-MIB", "feTemperatureValue"), ("FE-FIREEYE-MIB", "feTemperatureStatus"), ("FE-FIREEYE-MIB", "feTemperatureIsHealthy"), ("FE-FIREEYE-MIB", "feIfLinkChangeIfname"), ("FE-FIREEYE-MIB", "feIfLinkChangeIfname"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldAdminUp"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewAdminUp"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldLinkUp"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewLinkUp"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldSpeed"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewSpeed"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldDuplex"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewDuplex"), ("FE-FIREEYE-MIB", "feIfLinkChangeOldAutoNeg"), ("FE-FIREEYE-MIB", "feIfLinkChangeNewAutoNeg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feSystemInfoGroup = feSystemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: feSystemInfoGroup.setDescription('FireEye System Info Group.')
feSystemTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 12)).setObjects(("FE-FIREEYE-MIB", "feExcessiveTemperature"), ("FE-FIREEYE-MIB", "feNormalTemperature"), ("FE-FIREEYE-MIB", "feIfLinkChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feSystemTrapGroup = feSystemTrapGroup.setStatus('current')
if mibBuilder.loadTexts: feSystemTrapGroup.setDescription('FireEye System Trap Group.')
feStorageInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 13)).setObjects(("FE-FIREEYE-MIB", "feRaidStatus"), ("FE-FIREEYE-MIB", "feRaidIsHealthy"), ("FE-FIREEYE-MIB", "fePhysicalDiskIndex"), ("FE-FIREEYE-MIB", "fePhysicalDiskName"), ("FE-FIREEYE-MIB", "fePhysicalDiskStatus"), ("FE-FIREEYE-MIB", "fePhysicalDiskIsHealthy"), ("FE-FIREEYE-MIB", "fePhysicalDiskDeviceSupport"), ("FE-FIREEYE-MIB", "fePhysicalDiskSelfAssess"), ("FE-FIREEYE-MIB", "fePhysicalDiskTotalBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feStorageInfoGroup = feStorageInfoGroup.setStatus('current')
if mibBuilder.loadTexts: feStorageInfoGroup.setDescription('FireEye Storage Info Group.')
feStorageTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 14)).setObjects(("FE-FIREEYE-MIB", "feRaidFailure"), ("FE-FIREEYE-MIB", "feRaidRecover"), ("FE-FIREEYE-MIB", "fePhysicalDiskFailure"), ("FE-FIREEYE-MIB", "fePhysicalDiskRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feStorageTrapGroup = feStorageTrapGroup.setStatus('current')
if mibBuilder.loadTexts: feStorageTrapGroup.setDescription('FireEye Storage Trap Group.')
fePowerSupplyInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 15)).setObjects(("FE-FIREEYE-MIB", "fePowerSupplyOverallStatus"), ("FE-FIREEYE-MIB", "fePowerSupplyOverallIsHealthy"), ("FE-FIREEYE-MIB", "fePowerSupplyIndex"), ("FE-FIREEYE-MIB", "fePowerSupplyStatus"), ("FE-FIREEYE-MIB", "fePowerSupplyIsHealthy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fePowerSupplyInfoGroup = fePowerSupplyInfoGroup.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyInfoGroup.setDescription('FireEye Power Supply Info Group.')
fePowerSupplyTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 16)).setObjects(("FE-FIREEYE-MIB", "fePowerSupplyFailure"), ("FE-FIREEYE-MIB", "fePowerSupplyRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fePowerSupplyTrapGroup = fePowerSupplyTrapGroup.setStatus('current')
if mibBuilder.loadTexts: fePowerSupplyTrapGroup.setDescription('FireEye Power Supply Trap Group.')
feFanHealthInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 17)).setObjects(("FE-FIREEYE-MIB", "feFanOverallStatus"), ("FE-FIREEYE-MIB", "feFanOverallIsHealthy"), ("FE-FIREEYE-MIB", "feFanIndex"), ("FE-FIREEYE-MIB", "feFanStatus"), ("FE-FIREEYE-MIB", "feFanIsHealthy"), ("FE-FIREEYE-MIB", "feFanSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feFanHealthInfoGroup = feFanHealthInfoGroup.setStatus('current')
if mibBuilder.loadTexts: feFanHealthInfoGroup.setDescription('FireEye Fan Health Info Group.')
feFanHealthTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 18)).setObjects(("FE-FIREEYE-MIB", "feFanFailure"), ("FE-FIREEYE-MIB", "feFanRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feFanHealthTrapGroup = feFanHealthTrapGroup.setStatus('current')
if mibBuilder.loadTexts: feFanHealthTrapGroup.setDescription('FireEye Fan Health Trap Group.')
feApplicationInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 19)).setObjects(("FE-FIREEYE-MIB", "feInstalledSystemImage"), ("FE-FIREEYE-MIB", "feSystemImageVersionCurrent"), ("FE-FIREEYE-MIB", "feSystemImageVersionLatest"), ("FE-FIREEYE-MIB", "feIsSystemImageLatest"), ("FE-FIREEYE-MIB", "feSecurityContentVersion"), ("FE-FIREEYE-MIB", "feLastContentUpdatePassed"), ("FE-FIREEYE-MIB", "feLastContentUpdateTime"), ("FE-FIREEYE-MIB", "feGIIndex"), ("FE-FIREEYE-MIB", "feGIName"), ("FE-FIREEYE-MIB", "feGIVersion"), ("FE-FIREEYE-MIB", "feGIEnabled"), ("FE-FIREEYE-MIB", "feGIInstallDateTime"), ("FE-FIREEYE-MIB", "feActiveVMs"), ("FE-FIREEYE-MIB", "feProductLicenseActive"), ("FE-FIREEYE-MIB", "feContentLicenseActive"), ("FE-FIREEYE-MIB", "feSupportLicenseActive"), ("FE-FIREEYE-MIB", "feLicenseFeatureName"), ("FE-FIREEYE-MIB", "feLicenseNewActiveState"), ("FE-FIREEYE-MIB", "feLicenseOldActiveState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feApplicationInfoGroup = feApplicationInfoGroup.setStatus('current')
if mibBuilder.loadTexts: feApplicationInfoGroup.setDescription('FireEye Application Info Group.')
feApplicationTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 20)).setObjects(("FE-FIREEYE-MIB", "feLicenseStateChanged"), ("FE-FIREEYE-MIB", "feSecurityUpdateFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feApplicationTrapGroup = feApplicationTrapGroup.setStatus('current')
if mibBuilder.loadTexts: feApplicationTrapGroup.setDescription('FireEye Application Trap Group.')
feCMSInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 21)).setObjects(("FE-FIREEYE-MIB", "feTotalAppliancesAttached"), ("FE-FIREEYE-MIB", "feTotalWMPSAttached"), ("FE-FIREEYE-MIB", "feTotalEMPSAttached"), ("FE-FIREEYE-MIB", "feTotalFMPSAttached"), ("FE-FIREEYE-MIB", "feTotalMASAttached"), ("FE-FIREEYE-MIB", "feCMSApplianceIndex"), ("FE-FIREEYE-MIB", "feCMSApplianceName"), ("FE-FIREEYE-MIB", "feCMSApplianceDiskSpacePassed"), ("FE-FIREEYE-MIB", "feCMSApplianceFanPassed"), ("FE-FIREEYE-MIB", "feCMSAppliancePowerSupplyPassed"), ("FE-FIREEYE-MIB", "feCMSApplianceRaidPassed"), ("FE-FIREEYE-MIB", "feCMSApplianceTemperaturePassed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feCMSInfoGroup = feCMSInfoGroup.setStatus('current')
if mibBuilder.loadTexts: feCMSInfoGroup.setDescription('FireEye CMPS Info Group.')
feCMSTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 22)).setObjects(("FE-FIREEYE-MIB", "feCMSHAUnexpectedFailover"), ("FE-FIREEYE-MIB", "feCMSHAManualFailover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feCMSTrapGroup = feCMSTrapGroup.setStatus('current')
if mibBuilder.loadTexts: feCMSTrapGroup.setDescription('FireEye CMS Trap Group.')
feEMPSInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 23)).setObjects(("FE-FIREEYE-MIB", "feTotalEmailCount"), ("FE-FIREEYE-MIB", "feTotalEmailCountH"), ("FE-FIREEYE-MIB", "feTotalEmailCountL"), ("FE-FIREEYE-MIB", "feInfectedEmailCount"), ("FE-FIREEYE-MIB", "feInfectedEmailCountH"), ("FE-FIREEYE-MIB", "feInfectedEmailCountL"), ("FE-FIREEYE-MIB", "feAnalyzedEmailCount"), ("FE-FIREEYE-MIB", "feAnalyzedEmailCountH"), ("FE-FIREEYE-MIB", "feAnalyzedEmailCountL"), ("FE-FIREEYE-MIB", "feTotalUrlCount"), ("FE-FIREEYE-MIB", "feTotalUrlCountH"), ("FE-FIREEYE-MIB", "feTotalUrlCountL"), ("FE-FIREEYE-MIB", "feInfectedUrlCount"), ("FE-FIREEYE-MIB", "feInfectedUrlCountH"), ("FE-FIREEYE-MIB", "feInfectedUrlCountL"), ("FE-FIREEYE-MIB", "feAnalyzedUrlCount"), ("FE-FIREEYE-MIB", "feAnalyzedUrlCountH"), ("FE-FIREEYE-MIB", "feAnalyzedUrlCountL"), ("FE-FIREEYE-MIB", "feTotalAttachmentCount"), ("FE-FIREEYE-MIB", "feTotalAttachmentCountH"), ("FE-FIREEYE-MIB", "feTotalAttachmentCountL"), ("FE-FIREEYE-MIB", "feInfectedAttachmentCount"), ("FE-FIREEYE-MIB", "feInfectedAttachmentCountH"), ("FE-FIREEYE-MIB", "feInfectedAttachmentCountL"), ("FE-FIREEYE-MIB", "feAnalyzedAttachmentCount"), ("FE-FIREEYE-MIB", "feAnalyzedAttachmentCountH"), ("FE-FIREEYE-MIB", "feAnalyzedAttachmentCountL"), ("FE-FIREEYE-MIB", "feTotalEmailHasAttachment"), ("FE-FIREEYE-MIB", "feTotalEmailHasAttachmentH"), ("FE-FIREEYE-MIB", "feTotalEmailHasAttachmentL"), ("FE-FIREEYE-MIB", "feTotalEmailHasUrl"), ("FE-FIREEYE-MIB", "feTotalEmailHasUrlH"), ("FE-FIREEYE-MIB", "feTotalEmailHasUrlL"), ("FE-FIREEYE-MIB", "feTotalEmailHasBadAttachment"), ("FE-FIREEYE-MIB", "feTotalEmailHasBadAttachmentH"), ("FE-FIREEYE-MIB", "feTotalEmailHasBadAttachmentL"), ("FE-FIREEYE-MIB", "feTotalEmailHasBadUrl"), ("FE-FIREEYE-MIB", "feTotalEmailHasBadUrlH"), ("FE-FIREEYE-MIB", "feTotalEmailHasBadUrlL"), ("FE-FIREEYE-MIB", "feeQuarantineUsage"), ("FE-FIREEYE-MIB", "feBypassEmailCount"), ("FE-FIREEYE-MIB", "feBypassEmailCountH"), ("FE-FIREEYE-MIB", "feBypassEmailCountL"), ("FE-FIREEYE-MIB", "feDeferredEmailCount"), ("FE-FIREEYE-MIB", "feHoldQueueEmailCount"), ("FE-FIREEYE-MIB", "feOpenSmtpConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feEMPSInfoGroup = feEMPSInfoGroup.setStatus('current')
if mibBuilder.loadTexts: feEMPSInfoGroup.setDescription('FireEye Email MPS Group.')
feEMPSTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 24)).setObjects(("FE-FIREEYE-MIB", "feDeferredQueueThreshold"), ("FE-FIREEYE-MIB", "feBypassCountThreshold"), ("FE-FIREEYE-MIB", "feSmtpInterfaceRefuseConnection"), ("FE-FIREEYE-MIB", "feSmtpInterfaceRecover"), ("FE-FIREEYE-MIB", "feEMPSBypassStateEntered"), ("FE-FIREEYE-MIB", "feEMPSBypassStateExited"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feEMPSTrapGroup = feEMPSTrapGroup.setStatus('current')
if mibBuilder.loadTexts: feEMPSTrapGroup.setDescription('FireEye Email MPS Trap Group.')
feWMPSTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 26)).setObjects(("FE-FIREEYE-MIB", "feHttpThroughputNotIncrease"), ("FE-FIREEYE-MIB", "feHardwareBypassEntered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feWMPSTrapGroup = feWMPSTrapGroup.setStatus('current')
if mibBuilder.loadTexts: feWMPSTrapGroup.setDescription('FireEye Web MPS Trap Group.')
feMASInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 27)).setObjects(("FE-FIREEYE-MIB", "feTotalObjectAnalyzedCount"), ("FE-FIREEYE-MIB", "feTotalObjectAnalyzedCountH"), ("FE-FIREEYE-MIB", "feTotalObjectAnalyzedCountL"), ("FE-FIREEYE-MIB", "feTotalMaliciousObjectCount"), ("FE-FIREEYE-MIB", "feTotalMaliciousObjectCountH"), ("FE-FIREEYE-MIB", "feTotalMaliciousObjectCountL"), ("FE-FIREEYE-MIB", "feTotalUrlAnalyzedCount"), ("FE-FIREEYE-MIB", "feTotalUrlAnalyzedCountH"), ("FE-FIREEYE-MIB", "feTotalUrlAnalyzedCountL"), ("FE-FIREEYE-MIB", "feTotalMaliciousUrlCount"), ("FE-FIREEYE-MIB", "feTotalMaliciousUrlCountH"), ("FE-FIREEYE-MIB", "feTotalMaliciousUrlCountL"), ("FE-FIREEYE-MIB", "feTotalFileUploadedCount"), ("FE-FIREEYE-MIB", "feTotalFileUploadedCountH"), ("FE-FIREEYE-MIB", "feTotalFileUploadedCountL"), ("FE-FIREEYE-MIB", "feTotalMaliciousFileCount"), ("FE-FIREEYE-MIB", "feTotalMaliciousFileCountH"), ("FE-FIREEYE-MIB", "feTotalMaliciousFileCountL"), ("FE-FIREEYE-MIB", "feTotalLiveModeCount"), ("FE-FIREEYE-MIB", "feTotalLiveModeCountH"), ("FE-FIREEYE-MIB", "feTotalLiveModeCountL"), ("FE-FIREEYE-MIB", "feTotalMaliciousLiveModeCount"), ("FE-FIREEYE-MIB", "feTotalMaliciousLiveModeCountH"), ("FE-FIREEYE-MIB", "feTotalMaliciousLiveModeCountL"), ("FE-FIREEYE-MIB", "feMaid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feMASInfoGroup = feMASInfoGroup.setStatus('current')
if mibBuilder.loadTexts: feMASInfoGroup.setDescription('FireEye MAS Group.')
feMASTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25597, 20, 3, 28)).setObjects(("FE-FIREEYE-MIB", "feMaliciousMaid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    feMASTrapGroup = feMASTrapGroup.setStatus('current')
if mibBuilder.loadTexts: feMASTrapGroup.setDescription('FireEye MAS Trap Group.')
mibBuilder.exportSymbols("FE-FIREEYE-MIB", feGIVersionEntry=feGIVersionEntry, alertAction=alertAction, fePowerSupplyOverallStatus=fePowerSupplyOverallStatus, feIfLinkChangeNewDuplex=feIfLinkChangeNewDuplex, feRaidStatus=feRaidStatus, feTotalEmailCountL=feTotalEmailCountL, alertSignatureId=alertSignatureId, ipsBlockMode=ipsBlockMode, eventCncNo=eventCncNo, feBypassCountThreshold=feBypassCountThreshold, feEMPSTrapGroup=feEMPSTrapGroup, feSmtpInterfaceRefuseConnection=feSmtpInterfaceRefuseConnection, variables=variables, feGIVersionTable=feGIVersionTable, eventSrcAddr=eventSrcAddr, lmsVersion=lmsVersion, feTemperatureStatus=feTemperatureStatus, feTotalMaliciousFileCountH=feTotalMaliciousFileCountH, alertChecksum=alertChecksum, feFanOverallStatus=feFanOverallStatus, feGIInstallDateTime=feGIInstallDateTime, feTotalEmailCount=feTotalEmailCount, feWMPSTraps=feWMPSTraps, feSystemImageVersionCurrent=feSystemImageVersionCurrent, feApplicationTrapGroup=feApplicationTrapGroup, feIsSystemImageLatest=feIsSystemImageLatest, feTotalEmailHasUrlH=feTotalEmailHasUrlH, eventTime=eventTime, feSerialNumber=feSerialNumber, eventId=eventId, feCMSInfoGroup=feCMSInfoGroup, fePowerSupplyTraps=fePowerSupplyTraps, fePhysicalDiskDeviceSupport=fePhysicalDiskDeviceSupport, feRaidFailure=feRaidFailure, feExcessiveTemperature=feExcessiveTemperature, feFanStatus=feFanStatus, feTotalEMPSAttached=feTotalEMPSAttached, feStorageInfo=feStorageInfo, feVariablesGroup=feVariablesGroup, feMaliciousMaid=feMaliciousMaid, feIfLinkChangeNewAdminUp=feIfLinkChangeNewAdminUp, feLicenseFeatureName=feLicenseFeatureName, feTotalUrlCount=feTotalUrlCount, feCMSInfo=feCMSInfo, fePowerSupplyOverallIsHealthy=fePowerSupplyOverallIsHealthy, feTotalLiveModeCountL=feTotalLiveModeCountL, feIfLinkChangeOldLinkUp=feIfLinkChangeOldLinkUp, feAnalyzedUrlCount=feAnalyzedUrlCount, feFanStatusTable=feFanStatusTable, feLastContentUpdatePassed=feLastContentUpdatePassed, fePhysicalDiskStatus=fePhysicalDiskStatus, feFanHealthInfo=feFanHealthInfo, feTotalMaliciousObjectCountL=feTotalMaliciousObjectCountL, fePhysicalDiskFailure=fePhysicalDiskFailure, feTotalMaliciousUrlCount=feTotalMaliciousUrlCount, feSecurityContentVersion=feSecurityContentVersion, eventService=eventService, eventSignatureName=eventSignatureName, feCMSAppliancePowerSupplyPassed=feCMSAppliancePowerSupplyPassed, fePowerSupplyTrapGroup=fePowerSupplyTrapGroup, alertInterface=alertInterface, feLicenseOldActiveState=feLicenseOldActiveState, feeQuarantineUsage=feeQuarantineUsage, feTotalMaliciousLiveModeCount=feTotalMaliciousLiveModeCount, feIfLinkChangeNewAutoNeg=feIfLinkChangeNewAutoNeg, feIfLinkChange=feIfLinkChange, feMibCompliances=feMibCompliances, feOpenSmtpConnections=feOpenSmtpConnections, fePowerSupplyInfoGroup=fePowerSupplyInfoGroup, feFanHealthTrapGroup=feFanHealthTrapGroup, alertProfile=alertProfile, feApplicationInfo=feApplicationInfo, feTotalMaliciousUrlCountH=feTotalMaliciousUrlCountH, fePowerSupplyFailure=fePowerSupplyFailure, feWMPS=feWMPS, feTotalMASAttached=feTotalMASAttached, feTotalUrlAnalyzedCount=feTotalUrlAnalyzedCount, feCMSApplianceFanPassed=feCMSApplianceFanPassed, feStorage=feStorage, feHardwareModel=feHardwareModel, feFanStatusEntry=feFanStatusEntry, ccSigmatch=ccSigmatch, feTotalEmailHasBadUrlH=feTotalEmailHasBadUrlH, feFanHealthInfoGroup=feFanHealthInfoGroup, ipsSignatureRevision=ipsSignatureRevision, feGIVersion=feGIVersion, feTotalObjectAnalyzedCountH=feTotalObjectAnalyzedCountH, feDeferredEmailCount=feDeferredEmailCount, feTotalMaliciousObjectCount=feTotalMaliciousObjectCount, ccConnect=ccConnect, feSupportLicenseActive=feSupportLicenseActive, eventOsInfo=eventOsInfo, eventIndex=eventIndex, feEMPSTraps=feEMPSTraps, fePowerSupplyStatus=fePowerSupplyStatus, feEMPS=feEMPS, feSystemImageVersionLatest=feSystemImageVersionLatest, feEMPSBypassStateExited=feEMPSBypassStateExited, feInfectedUrlCountL=feInfectedUrlCountL, alertCncHost=alertCncHost, executionAnomaly=executionAnomaly, feFanOverallIsHealthy=feFanOverallIsHealthy, fePhysicalDiskIsHealthy=fePhysicalDiskIsHealthy, feTotalEmailHasBadAttachmentL=feTotalEmailHasBadAttachmentL, feSmtpInterfaceRecover=feSmtpInterfaceRecover, feEMPSInfoGroup=feEMPSInfoGroup, feMASTraps=feMASTraps, feContentLicenseActive=feContentLicenseActive, feWMPSInfo=feWMPSInfo, feCMSApplianceRaidPassed=feCMSApplianceRaidPassed, feStorageTraps=feStorageTraps, feFanFailure=feFanFailure, feGIEnabled=feGIEnabled, feTotalAttachmentCount=feTotalAttachmentCount, fePhysicalDiskTable=fePhysicalDiskTable, feRaidRecover=feRaidRecover, feAnalyzedAttachmentCount=feAnalyzedAttachmentCount, feTotalEmailHasUrlL=feTotalEmailHasUrlL, alertSensorHost=alertSensorHost, feApplication=feApplication, feAnalyzedEmailCount=feAnalyzedEmailCount, alertSensorRelease=alertSensorRelease, feSystemInfoGroup=feSystemInfoGroup, fePowerSupplyEntry=fePowerSupplyEntry, eventSrcHost=eventSrcHost, eventDateTime=eventDateTime, feSystemTraps=feSystemTraps, fePowerSupply=fePowerSupply, fePowerSupplyTable=fePowerSupplyTable, feCMSTrapGroup=feCMSTrapGroup, feBypassEmailCountL=feBypassEmailCountL, feTotalUrlCountH=feTotalUrlCountH, feTotalMaliciousUrlCountL=feTotalMaliciousUrlCountL, fePhysicalDiskName=fePhysicalDiskName, feTotalEmailHasBadAttachment=feTotalEmailHasBadAttachment, feTotalFileUploadedCountH=feTotalFileUploadedCountH, feSecurityUpdateFailed=feSecurityUpdateFailed, eventSrcAddrType=eventSrcAddrType, feIfLinkChangeIfname=feIfLinkChangeIfname, eventVlan=eventVlan, feTemperatureIsHealthy=feTemperatureIsHealthy, feCMSApplianceEntry=feCMSApplianceEntry, feMASInfo=feMASInfo, fireeyeMibModule=fireeyeMibModule, alertCncPort=alertCncPort, feTotalEmailHasUrl=feTotalEmailHasUrl, feAnalyzedEmailCountL=feAnalyzedEmailCountL, eventSrcMac=eventSrcMac, eventAttackType=eventAttackType, eventSrcPort=eventSrcPort, feCommon=feCommon, ipsAlert=ipsAlert, feInfectedAttachmentCountL=feInfectedAttachmentCountL, feApplicationInfoGroup=feApplicationInfoGroup, feCMS=feCMS, feFanHealth=feFanHealth, feMASInfoGroup=feMASInfoGroup, feGIName=feGIName, PYSNMP_MODULE_ID=fireeyeMibModule, fePhysicalDiskTotalBytes=fePhysicalDiskTotalBytes, feTotalUrlCountL=feTotalUrlCountL, feTotalMaliciousLiveModeCountH=feTotalMaliciousLiveModeCountH, notifications=notifications, alertAnalysisType=alertAnalysisType, feTotalEmailHasBadAttachmentH=feTotalEmailHasBadAttachmentH, feSystemTrapGroup=feSystemTrapGroup, feTotalUrlAnalyzedCountH=feTotalUrlAnalyzedCountH, eventCount=eventCount, eventDstIp=eventDstIp, feInfectedEmailCount=feInfectedEmailCount, feMASTrapGroup=feMASTrapGroup, eventProfileId=eventProfileId, feTotalEmailHasAttachment=feTotalEmailHasAttachment, feInfectedAttachmentCount=feInfectedAttachmentCount, feTotalAttachmentCountH=feTotalAttachmentCountH, feNotificationsGroup=feNotificationsGroup, eventDstAddrType=eventDstAddrType, fePowerSupplyInfo=fePowerSupplyInfo, feMAS=feMAS, lms=lms, feLicenseNewActiveState=feLicenseNewActiveState, feFanRecover=feFanRecover, feTotalFileUploadedCount=feTotalFileUploadedCount, eventTraceId=eventTraceId, feHoldQueueEmailCount=feHoldQueueEmailCount, alertSensorProduct=alertSensorProduct, feCMSTraps=feCMSTraps, feTemperatureValue=feTemperatureValue, feIfLinkChangeNewSpeed=feIfLinkChangeNewSpeed, feBypassEmailCountH=feBypassEmailCountH, feTotalLiveModeCount=feTotalLiveModeCount, eventEntry=eventEntry, feIfLinkChangeOldDuplex=feIfLinkChangeOldDuplex, fePowerSupplyIndex=fePowerSupplyIndex, feAnalyzedUrlCountH=feAnalyzedUrlCountH, feEMPSInfo=feEMPSInfo, feHardwareBypassEntered=feHardwareBypassEntered, signatureMatch=signatureMatch, feFanHealthTraps=feFanHealthTraps, feSystemInfo=feSystemInfo, feTotalWMPSAttached=feTotalWMPSAttached, feCMSApplianceName=feCMSApplianceName, feTotalObjectAnalyzedCount=feTotalObjectAnalyzedCount, feTotalMaliciousLiveModeCountL=feTotalMaliciousLiveModeCountL, feLicenseStateChanged=feLicenseStateChanged, feCMSApplianceDiskSpacePassed=feCMSApplianceDiskSpacePassed, feInfectedEmailCountL=feInfectedEmailCountL, feSystemStatus=feSystemStatus, feTotalMaliciousFileCount=feTotalMaliciousFileCount, ipsMatchCount=ipsMatchCount, feFanIsHealthy=feFanIsHealthy, eventDstPort=eventDstPort, feIfLinkChangeNewLinkUp=feIfLinkChangeNewLinkUp, networkAnomaly=networkAnomaly, eventProtocol=eventProtocol, feIfLinkChangeOldAdminUp=feIfLinkChangeOldAdminUp, feInstalledSystemImage=feInstalledSystemImage, ipsSignatureId=ipsSignatureId, feBypassEmailCount=feBypassEmailCount, feIfLinkChangeOldAutoNeg=feIfLinkChangeOldAutoNeg, eventSensorAddr=eventSensorAddr, feActiveVMs=feActiveVMs, feEMPSBypassStateEntered=feEMPSBypassStateEntered, eventType=eventType, eventSignatureType=eventSignatureType, feAnalyzedAttachmentCountL=feAnalyzedAttachmentCountL, feTotalAttachmentCountL=feTotalAttachmentCountL, feMaid=feMaid, feAnalyzedUrlCountL=feAnalyzedUrlCountL, feInfectedUrlCount=feInfectedUrlCount, feProductLicenseActive=feProductLicenseActive, feCMSHAManualFailover=feCMSHAManualFailover, feTotalUrlAnalyzedCountL=feTotalUrlAnalyzedCountL, feInfectedEmailCountH=feInfectedEmailCountH, feWMPSTrapGroup=feWMPSTrapGroup, alertUrl=alertUrl, feCMSApplianceIndex=feCMSApplianceIndex, fePhysicalDiskSelfAssess=fePhysicalDiskSelfAssess, feStorageInfoGroup=feStorageInfoGroup, feStorageTrapGroup=feStorageTrapGroup, feSystem=feSystem, feTotalObjectAnalyzedCountL=feTotalObjectAnalyzedCountL, feTotalMaliciousFileCountL=feTotalMaliciousFileCountL, ipsSeverity=ipsSeverity, fePhysicalDiskEntry=fePhysicalDiskEntry, eventDate=eventDate, feTotalMaliciousObjectCountH=feTotalMaliciousObjectCountH, alertSensorIp=alertSensorIp, fireeye=fireeye, osChange=osChange, fePowerSupplyIsHealthy=fePowerSupplyIsHealthy, fePhysicalDiskRecover=fePhysicalDiskRecover, feRaidIsHealthy=feRaidIsHealthy, ipsSignatureName=ipsSignatureName)
mibBuilder.exportSymbols("FE-FIREEYE-MIB", feTotalFMPSAttached=feTotalFMPSAttached, feTotalEmailCountH=feTotalEmailCountH, ipsAttackTarget=ipsAttackTarget, feFanSpeed=feFanSpeed, eventTable=eventTable, feTotalEmailHasBadUrlL=feTotalEmailHasBadUrlL, feTotalEmailHasBadUrl=feTotalEmailHasBadUrl, notificationPrefix=notificationPrefix, feMibCompliance=feMibCompliance, feCMSApplianceTemperaturePassed=feCMSApplianceTemperaturePassed, feCMSHAUnexpectedFailover=feCMSHAUnexpectedFailover, feMibAdminInfo=feMibAdminInfo, feAnalyzedAttachmentCountH=feAnalyzedAttachmentCountH, fePowerSupplyRecover=fePowerSupplyRecover, feTotalEmailHasAttachmentH=feTotalEmailHasAttachmentH, eventSrcIp=eventSrcIp, feDeferredQueueThreshold=feDeferredQueueThreshold, eventSensorAddrType=eventSensorAddrType, fireeyeAlert=fireeyeAlert, fePhysicalDiskIndex=fePhysicalDiskIndex, ipsReferenceId=ipsReferenceId, feLastContentUpdateTime=feLastContentUpdateTime, feGIIndex=feGIIndex, feTotalLiveModeCountH=feTotalLiveModeCountH, feTotalEmailHasAttachmentL=feTotalEmailHasAttachmentL, feCMSApplianceTable=feCMSApplianceTable, eventDstAddr=eventDstAddr, feTotalAppliancesAttached=feTotalAppliancesAttached, feFanIndex=feFanIndex, feInfectedAttachmentCountH=feInfectedAttachmentCountH, feTotalFileUploadedCountL=feTotalFileUploadedCountL, feMibGroups=feMibGroups, feHttpThroughputNotIncrease=feHttpThroughputNotIncrease, feIfLinkChangeOldSpeed=feIfLinkChangeOldSpeed, eventDstMac=eventDstMac, feInfectedUrlCountH=feInfectedUrlCountH, feNormalTemperature=feNormalTemperature, feApplicationTraps=feApplicationTraps, feAnalyzedEmailCountH=feAnalyzedEmailCountH)
