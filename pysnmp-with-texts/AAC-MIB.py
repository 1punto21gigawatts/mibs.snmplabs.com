#
# PySNMP MIB module AAC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AAC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks, Unsigned32, Gauge32, Counter64, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Unsigned32", "Gauge32", "Counter64", "IpAddress", "Integer32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
swDlinkAACMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 5))
if mibBuilder.loadTexts: swDlinkAACMIB.setLastUpdated('9911220000Z')
if mibBuilder.loadTexts: swDlinkAACMIB.setOrganization('Working Group')
if mibBuilder.loadTexts: swDlinkAACMIB.setContactInfo(' ')
if mibBuilder.loadTexts: swDlinkAACMIB.setDescription('The Link AAC module MIB.')
swAACCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 5, 1))
swAACAuthenAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAuthenAdminState.setStatus('current')
if mibBuilder.loadTexts: swAACAuthenAdminState.setDescription('This object indicates the Access Authentication is enable or disable.')
swAACInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 5, 2))
swAACMaxLoginMethodList = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACMaxLoginMethodList.setStatus('current')
if mibBuilder.loadTexts: swAACMaxLoginMethodList.setDescription('The max number of Login method list supported by the system .')
swAACMaxEnableMethodList = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACMaxEnableMethodList.setStatus('current')
if mibBuilder.loadTexts: swAACMaxEnableMethodList.setDescription('The max number of Enable method list supported by the system .')
swAACMaxServerGroup = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACMaxServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACMaxServerGroup.setDescription('The max number of Server Group supported by the system .')
swAACMaxServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACMaxServer.setStatus('current')
if mibBuilder.loadTexts: swAACMaxServer.setDescription('The max number of AAC server supported by the system .')
swAACLoginMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 5, 3), )
if mibBuilder.loadTexts: swAACLoginMethodListTable.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethodListTable.setDescription('A table that contains information about Login authentication method lists.')
swAACLoginMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1), ).setIndexNames((0, "AAC-MIB", "swAACLoginMethodListName"))
if mibBuilder.loadTexts: swAACLoginMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethodListEntry.setDescription('A list of the Authentication methods.')
swAACLoginMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACLoginMethodListName.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethodListName.setDescription('A human-readable text string of the method list. The string is the same with swAACLoginMethodName.')
swAACLoginMethod1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("server-group", 5), ("local", 6), ("none", 8), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethod1Type.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethod1Type.setDescription('The type of Login method list. The group type includes tacas(1), xtacacs(2), tacacs-plus(3), radius(4) and server-group(5) for user specific. The keyword type includes local(6), local-enable(7), and none(8).')
swAACLoginMethod1ServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethod1ServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethod1ServerGroup.setDescription('A human-readable text string of the server group. It would be null as swAACLoginMethodListType is keyword type. And It is writeable, just as the swAACLoginMethodListType is server_group(3).')
swAACLoginMethod2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("server-group", 5), ("local", 6), ("none", 8), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethod2Type.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethod2Type.setDescription('The type of Login method list. The group type includes tacas(1), xtacacs(2), tacacs-plus(3), radius(4) and server-group(5) for user specific. The keyword type includes local(6), local-enable(7), and none(8).')
swAACLoginMethod2ServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethod2ServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethod2ServerGroup.setDescription('A human-readable text string of the server group. It would be null as swAACLoginMethodListType is keyword type. And It is writeable, just as the swAACLoginMethodListType is server_group(3).')
swAACLoginMethod3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("server-group", 5), ("local", 6), ("none", 8), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethod3Type.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethod3Type.setDescription('The type of Login method list. The group type includes tacas(1), xtacacs(2), tacacs-plus(3), radius(4) and server-group(5) for user specific. The keyword type includes local(6), local-enable(7), and none(8).')
swAACLoginMethod3ServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethod3ServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethod3ServerGroup.setDescription('A human-readable text string of the server group. It would be null as swAACLoginMethodListType is keyword type. And It is writeable, just as the swAACLoginMethodListType is server_group(3).')
swAACLoginMethod4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("server-group", 5), ("local", 6), ("none", 8), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethod4Type.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethod4Type.setDescription('The type of Login method list. The group type includes tacas(1), xtacacs(2), tacacs-plus(3), radius(4) and server-group(5) for user specific. The keyword type includes local(6), local-enable(7), and none(8).')
swAACLoginMethod4ServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethod4ServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethod4ServerGroup.setDescription('A human-readable text string of the server group. It would be null as swAACLoginMethodListType is keyword type. And It is writeable, just as the swAACLoginMethodListType is server_group(3).')
swAACLoginMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACLoginMethodListRowStatus.setStatus('current')
if mibBuilder.loadTexts: swAACLoginMethodListRowStatus.setDescription("This object indicates the status of this entry. A set request with RowStatus is 'CreateAndGo' will be fail while the current entry of the table is equal to the maximum number of swAACLoginMethodListIndex.")
swAACEnableMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 5, 4), )
if mibBuilder.loadTexts: swAACEnableMethodListTable.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethodListTable.setDescription('A table that contains information about Enable authentication method lists.')
swAACEnableMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1), ).setIndexNames((0, "AAC-MIB", "swAACEnableMethodListName"))
if mibBuilder.loadTexts: swAACEnableMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethodListEntry.setDescription('A list of the Authentication methods.')
swAACEnableMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACEnableMethodListName.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethodListName.setDescription('A human-readable text string of the method list. The string is the same with swAACEnableMethodName.')
swAACEnableMethod1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("server-group", 5), ("local-enable", 7), ("none", 8), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethod1Type.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethod1Type.setDescription('The type of Enable method list. The group type includes tacas(1), xtacacs(2), tacacs-plus(3), radius(4) and server-group(5) for user specific. The keyword type includes local(6), local-enable(7), and none(8).')
swAACEnableMethod1ServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethod1ServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethod1ServerGroup.setDescription('A human-readable text string of the server group. It would be null as swAACEnableMethodListType is keyword type. And It is writeable, just as the swAACEnableMethodListType is server_group(3).')
swAACEnableMethod2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("server-group", 5), ("local-enable", 7), ("none", 8), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethod2Type.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethod2Type.setDescription('The type of Enable method list. The group type includes tacas(1), xtacacs(2), tacacs-plus(3), radius(4) and server-group(5) for user specific. The keyword type includes local(6), local-enable(7), and none(8).')
swAACEnableMethod2ServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethod2ServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethod2ServerGroup.setDescription('A human-readable text string of the server group. It would be null as swAACEnableMethodListType is keyword type. And It is writeable, just as the swAACEnableMethodListType is server_group(3).')
swAACEnableMethod3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("server-group", 5), ("local-enable", 7), ("none", 8), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethod3Type.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethod3Type.setDescription('The type of Enable method list. The group type includes tacas(1), xtacacs(2), tacacs-plus(3), radius(4) and server-group(5) for user specific. The keyword type includes local(6), local-enable(7), and none(8).')
swAACEnableMethod3ServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethod3ServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethod3ServerGroup.setDescription('A human-readable text string of the server group. It would be null as swAACEnableMethodListType is keyword type. And It is writeable, just as the swAACEnableMethodListType is server_group(3).')
swAACEnableMethod4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("server-group", 5), ("local-enable", 7), ("none", 8), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethod4Type.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethod4Type.setDescription('The type of Enable method list. The group type includes tacas(1), xtacacs(2), tacacs-plus(3), radius(4) and server-group(5) for user specific. The keyword type includes local(6), local-enable(7), and none(8).')
swAACEnableMethod4ServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethod4ServerGroup.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethod4ServerGroup.setDescription('A human-readable text string of the server group. It would be null as swAACEnableMethodListType is keyword type. And It is writeable, just as the swAACEnableMethodListType is server_group(3).')
swAACEnableMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACEnableMethodListRowStatus.setStatus('current')
if mibBuilder.loadTexts: swAACEnableMethodListRowStatus.setDescription("This object indicates the status of this entry. A set request with RowStatus is 'CreateAndGo' will be fail while the current entry of the table is equal to the maximum number of swAACEnableMethodListIndex.")
swAACAPAuthMethodGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 5, 7))
swAACAPLoginMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 1))
swAACAPEnableMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 2))
swAACAPConsoleLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAPConsoleLoginMethod.setStatus('current')
if mibBuilder.loadTexts: swAACAPConsoleLoginMethod.setDescription('Specify the way which has to execute authentication while login the system and the method for authentication.Access system via local console')
swAACAPTelnetLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAPTelnetLoginMethod.setStatus('current')
if mibBuilder.loadTexts: swAACAPTelnetLoginMethod.setDescription('Specify the way which has to execute authentication while login the system and the method for authentication.Access system via telnet.')
swAACAPSSHLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAPSSHLoginMethod.setStatus('current')
if mibBuilder.loadTexts: swAACAPSSHLoginMethod.setDescription('Specify the way which has to execute authentication while login the system and the method for authentication.Access system via SSH.')
swAACAPHttpLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAPHttpLoginMethod.setStatus('current')
if mibBuilder.loadTexts: swAACAPHttpLoginMethod.setDescription('Specify the way which has to execute authentication while login the system and the method for authentication.Access system via HTTP.')
swAACAPConsoleEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAPConsoleEnableMethod.setStatus('current')
if mibBuilder.loadTexts: swAACAPConsoleEnableMethod.setDescription('Specify the way which has to execute authentication while login the system and the method for authentication.Access system via local console.')
swAACAPTelnetEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAPTelnetEnableMethod.setStatus('current')
if mibBuilder.loadTexts: swAACAPTelnetEnableMethod.setDescription('Specify the way which has to execute authentication while login the system and the method for authentication.Access system via telnet.')
swAACAPSSHEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAPSSHEnableMethod.setStatus('current')
if mibBuilder.loadTexts: swAACAPSSHEnableMethod.setDescription('Specify the way which has to execute authentication while login the system and the method for authentication.Access system via SSH.')
swAACAPHttpEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 7, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAPHttpEnableMethod.setStatus('current')
if mibBuilder.loadTexts: swAACAPHttpEnableMethod.setDescription('Specify the way which has to execute authentication while login the system and the method for authentication.Access system via HTTP.')
swAACAuthParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 5, 8))
swAACAuthParamResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAuthParamResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: swAACAuthParamResponseTimeout.setDescription('Timeout in second for login authentication response.')
swAACAuthParamAttempt = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 5, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACAuthParamAttempt.setStatus('current')
if mibBuilder.loadTexts: swAACAuthParamAttempt.setDescription('The amount for login authentication, if login failure exceed, connection or access would be locked.')
swAACServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 5, 9), )
if mibBuilder.loadTexts: swAACServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupTable.setDescription('A table that contains informations about server group.')
swAACServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1), ).setIndexNames((0, "AAC-MIB", "swAACServerGroupName"))
if mibBuilder.loadTexts: swAACServerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupEntry.setDescription('A list of the group including servers.')
swAACServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupName.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupName.setDescription('A human-readable text string of the method group.')
swAACServerGroupIPAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupIPAddr1.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupIPAddr1.setDescription('The IP address of Server')
swAACServerGroupAuthProtocol1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("none", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol1.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol1.setDescription('The authentication protocol provided by the Server.')
swAACServerGroupIPAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupIPAddr2.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupIPAddr2.setDescription('The IP address of Server')
swAACServerGroupAuthProtocol2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("none", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol2.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol2.setDescription('The authentication protocol provided by the Server.')
swAACServerGroupIPAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupIPAddr3.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupIPAddr3.setDescription('The IP address of Server')
swAACServerGroupAuthProtocol3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("none", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol3.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol3.setDescription('The authentication protocol provided by the Server.')
swAACServerGroupIPAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupIPAddr4.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupIPAddr4.setDescription('The IP address of Server')
swAACServerGroupAuthProtocol4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("none", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol4.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol4.setDescription('The authentication protocol provided by the Server.')
swAACServerGroupIPAddr5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupIPAddr5.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupIPAddr5.setDescription('The IP address of Server')
swAACServerGroupAuthProtocol5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("none", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol5.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol5.setDescription('The authentication protocol provided by the Server.')
swAACServerGroupIPAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupIPAddr6.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupIPAddr6.setDescription('The IP address of Server')
swAACServerGroupAuthProtocol6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("none", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol6.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol6.setDescription('The authentication protocol provided by the Server.')
swAACServerGroupIPAddr7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupIPAddr7.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupIPAddr7.setDescription('The IP address of Server')
swAACServerGroupAuthProtocol7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("none", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol7.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol7.setDescription('The authentication protocol provided by the Server.')
swAACServerGroupIPAddr8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupIPAddr8.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupIPAddr8.setDescription('The IP address of Server')
swAACServerGroupAuthProtocol8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4), ("none", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol8.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupAuthProtocol8.setDescription('The authentication protocol provided by the Server.')
swAACServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 9, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACServerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: swAACServerGroupRowStatus.setDescription("This object indicates the status of this entry. A set request with RowStatus is 'CreateAndGo' will be fail while the current entry of the table is equal to swAACMaxServerGroup. ")
swAACServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 5, 10), )
if mibBuilder.loadTexts: swAACServerInfoTable.setStatus('current')
if mibBuilder.loadTexts: swAACServerInfoTable.setDescription('A table that contains information about severs.')
swAACServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 5, 10, 1), ).setIndexNames((0, "AAC-MIB", "swAACServerIPAddr"), (0, "AAC-MIB", "swAACServerAuthProtocol"))
if mibBuilder.loadTexts: swAACServerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swAACServerInfoEntry.setDescription('A list of the information of server .')
swAACServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: swAACServerIPAddr.setDescription('The IP address of Server')
swAACServerAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAACServerAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: swAACServerAuthProtocol.setDescription('The authentication protocol provide by the Server.')
swAACServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: swAACServerAuthPort.setDescription('The TCP/IP port .The default authentication port is 49 ,and port 5001 to 65535 are valid setting in the system , other value except 49,5001-65535 will work while set this object.')
swAACServerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACServerAuthKey.setStatus('current')
if mibBuilder.loadTexts: swAACServerAuthKey.setDescription('The key used while authentication process .It is write-only.')
swAACServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACServerTimeout.setStatus('current')
if mibBuilder.loadTexts: swAACServerTimeout.setDescription('Server response timeout .')
swAACServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACServerRetryCount.setStatus('current')
if mibBuilder.loadTexts: swAACServerRetryCount.setDescription('The client retry count .')
swAACServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAACServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: swAACServerRowStatus.setDescription("This object indicates the status of this entry. A set request with RowStatus is 'CreateAndGo' will be fail while the current entry of the table is equal to swAACMaxServer. ")
swAACServerCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 5, 12), )
if mibBuilder.loadTexts: swAACServerCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swAACServerCtrlTable.setDescription('A table that use to add/delete server from group.')
swAACServerCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 5, 12, 1), ).setIndexNames((0, "AAC-MIB", "swAACCtrlServerGroupName"), (0, "AAC-MIB", "swAACCtrlServerIPAddr"), (0, "AAC-MIB", "swAACCtrlServerAuthProtocol"))
if mibBuilder.loadTexts: swAACServerCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swAACServerCtrlEntry.setDescription('A table that use to add/delete server from group.')
swAACCtrlServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: swAACCtrlServerGroupName.setStatus('current')
if mibBuilder.loadTexts: swAACCtrlServerGroupName.setDescription('A human-readable text string of the method group.')
swAACCtrlServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 12, 1, 2), IpAddress())
if mibBuilder.loadTexts: swAACCtrlServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: swAACCtrlServerIPAddr.setDescription('The IP address of Server')
swAACCtrlServerAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tacacs", 1), ("xtacacs", 2), ("tacacs-plus", 3), ("radius", 4))))
if mibBuilder.loadTexts: swAACCtrlServerAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: swAACCtrlServerAuthProtocol.setDescription('The authentication protocol provide by the Server.')
swAACCtrlServerRowState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAACCtrlServerRowState.setStatus('current')
if mibBuilder.loadTexts: swAACCtrlServerRowState.setDescription('This object used to add or delete a entry from swAACServerGroupTable.')
mibBuilder.exportSymbols("AAC-MIB", swAACServerCtrlTable=swAACServerCtrlTable, swAACServerGroupEntry=swAACServerGroupEntry, swAACCtrlServerAuthProtocol=swAACCtrlServerAuthProtocol, swAACServerTimeout=swAACServerTimeout, swAACAPTelnetLoginMethod=swAACAPTelnetLoginMethod, swAACEnableMethod4Type=swAACEnableMethod4Type, swAACServerGroupAuthProtocol6=swAACServerGroupAuthProtocol6, swAACServerGroupIPAddr8=swAACServerGroupIPAddr8, swAACInfo=swAACInfo, swAACEnableMethod2ServerGroup=swAACEnableMethod2ServerGroup, swAACAuthParamAttempt=swAACAuthParamAttempt, swAACLoginMethod3ServerGroup=swAACLoginMethod3ServerGroup, swDlinkAACMIB=swDlinkAACMIB, swAACServerGroupAuthProtocol5=swAACServerGroupAuthProtocol5, swAACServerGroupIPAddr1=swAACServerGroupIPAddr1, swAACServerGroupTable=swAACServerGroupTable, swAACMaxEnableMethodList=swAACMaxEnableMethodList, swAACLoginMethod1Type=swAACLoginMethod1Type, swAACAPSSHEnableMethod=swAACAPSSHEnableMethod, swAACServerRowStatus=swAACServerRowStatus, swAACLoginMethod1ServerGroup=swAACLoginMethod1ServerGroup, swAACServerGroupName=swAACServerGroupName, swAACMaxServer=swAACMaxServer, swAACServerIPAddr=swAACServerIPAddr, swAACLoginMethodListTable=swAACLoginMethodListTable, swAACEnableMethod2Type=swAACEnableMethod2Type, swAACServerGroupAuthProtocol4=swAACServerGroupAuthProtocol4, swAACEnableMethod1Type=swAACEnableMethod1Type, swAACEnableMethod1ServerGroup=swAACEnableMethod1ServerGroup, swAACEnableMethodListRowStatus=swAACEnableMethodListRowStatus, PYSNMP_MODULE_ID=swDlinkAACMIB, swAACServerAuthKey=swAACServerAuthKey, swAACEnableMethodListEntry=swAACEnableMethodListEntry, swAACEnableMethodListTable=swAACEnableMethodListTable, swAACCtrlServerRowState=swAACCtrlServerRowState, swAACEnableMethodListName=swAACEnableMethodListName, swAACAuthenAdminState=swAACAuthenAdminState, swAACLoginMethodListName=swAACLoginMethodListName, swAACServerGroupAuthProtocol2=swAACServerGroupAuthProtocol2, swAACLoginMethod2Type=swAACLoginMethod2Type, swAACAuthParamGroup=swAACAuthParamGroup, swAACAPConsoleLoginMethod=swAACAPConsoleLoginMethod, swAACServerInfoEntry=swAACServerInfoEntry, swAACAPSSHLoginMethod=swAACAPSSHLoginMethod, swAACMaxLoginMethodList=swAACMaxLoginMethodList, swAACServerCtrlEntry=swAACServerCtrlEntry, swAACAPHttpLoginMethod=swAACAPHttpLoginMethod, swAACServerAuthPort=swAACServerAuthPort, swAACServerAuthProtocol=swAACServerAuthProtocol, swAACLoginMethod3Type=swAACLoginMethod3Type, swAACServerGroupIPAddr3=swAACServerGroupIPAddr3, swAACLoginMethodListRowStatus=swAACLoginMethodListRowStatus, swAACAuthParamResponseTimeout=swAACAuthParamResponseTimeout, swAACMaxServerGroup=swAACMaxServerGroup, swAACEnableMethod3ServerGroup=swAACEnableMethod3ServerGroup, swAACEnableMethod3Type=swAACEnableMethod3Type, swAACAPLoginMethod=swAACAPLoginMethod, swAACAPConsoleEnableMethod=swAACAPConsoleEnableMethod, swAACCtrlServerIPAddr=swAACCtrlServerIPAddr, swAACServerGroupAuthProtocol7=swAACServerGroupAuthProtocol7, swAACAPAuthMethodGroup=swAACAPAuthMethodGroup, swAACServerGroupAuthProtocol8=swAACServerGroupAuthProtocol8, swAACServerGroupIPAddr4=swAACServerGroupIPAddr4, swAACServerInfoTable=swAACServerInfoTable, swAACAPHttpEnableMethod=swAACAPHttpEnableMethod, swAACServerGroupIPAddr6=swAACServerGroupIPAddr6, swAACServerRetryCount=swAACServerRetryCount, swAACServerGroupIPAddr5=swAACServerGroupIPAddr5, swAACServerGroupAuthProtocol1=swAACServerGroupAuthProtocol1, swAACCtrl=swAACCtrl, swAACLoginMethodListEntry=swAACLoginMethodListEntry, swAACServerGroupIPAddr7=swAACServerGroupIPAddr7, swAACAPTelnetEnableMethod=swAACAPTelnetEnableMethod, swAACLoginMethod4ServerGroup=swAACLoginMethod4ServerGroup, swAACAPEnableMethod=swAACAPEnableMethod, swAACServerGroupAuthProtocol3=swAACServerGroupAuthProtocol3, swAACServerGroupRowStatus=swAACServerGroupRowStatus, swAACServerGroupIPAddr2=swAACServerGroupIPAddr2, swAACLoginMethod2ServerGroup=swAACLoginMethod2ServerGroup, swAACEnableMethod4ServerGroup=swAACEnableMethod4ServerGroup, swAACCtrlServerGroupName=swAACCtrlServerGroupName, swAACLoginMethod4Type=swAACLoginMethod4Type)
