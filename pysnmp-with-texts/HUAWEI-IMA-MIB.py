#
# PySNMP MIB module HUAWEI-IMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-IMA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, TimeTicks, Counter64, Counter32, iso, ObjectIdentity, ModuleIdentity, MibIdentifier, Bits, Unsigned32, NotificationType, enterprises, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Counter64", "Counter32", "iso", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Bits", "Unsigned32", "NotificationType", "enterprises", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "RowStatus")
hwImaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176))
if mibBuilder.loadTexts: hwImaMIB.setLastUpdated('200902101400Z')
if mibBuilder.loadTexts: hwImaMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwImaMIB.setContactInfo('Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwImaMIB.setDescription('The MIB is mainly used to configure Inverse Multiplexing for ATM (IMA) interfaces.')
hwImaMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1))
hwImaMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2))
class MilliSeconds(TextualConvention, Integer32):
    description = 'Time in milliseconds'
    status = 'current'

class ImaGroupState(TextualConvention, Integer32):
    description = 'State of the IMA group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), ("configAbortUnsupportedImaVersion", 10))

class ImaGroupSymmetry(TextualConvention, Integer32):
    description = 'The group symmetry mode adjusted during the group start-up.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetricConfiguration", 3))

class ImaFrameLength(TextualConvention, Integer32):
    description = 'Length of the IMA frames.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))
    namedValues = NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256))

class ImaLinkState(TextualConvention, Integer32):
    description = 'State of a link belonging to an IMA group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))

hwImaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1), )
if mibBuilder.loadTexts: hwImaGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupTable.setDescription('The IMA Group Configuration table.')
hwImaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1), ).setIndexNames((0, "HUAWEI-IMA-MIB", "hwImaGroupIfIndex"))
if mibBuilder.loadTexts: hwImaGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupEntry.setDescription('An entry in the IMA Group table.')
hwImaGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupIfIndex.setDescription("This object identifies the logical interface number ('ifIndex') assigned to this IMA group, and is used to identify corresponding rows in the Interfaces MIB. Note that re-initialization of the management agent may cause a client's 'hwImaGroupIfIndex' to change.")
hwImaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 2), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupNeState.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupNeState.setDescription('The current operational state of the near-end IMA Group State Machine.')
hwImaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 3), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupFeState.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupFeState.setDescription('The current operational state of the far-end IMA Group State Machine.')
hwImaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 4), ImaGroupSymmetry().clone('symmetricOperation')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupSymmetry.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupSymmetry.setDescription('Symmetry of the IMA group.')
hwImaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaGroupMinNumTxLinks.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupMinNumTxLinks.setDescription('Minimum number of transmit links required to be Active for the IMA group to be in the Operational state.')
hwImaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaGroupMinNumRxLinks.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupMinNumRxLinks.setDescription('Minimum number of receive links required to be Active for the IMA group to be in the Operational state.')
hwImaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupTxTimingRefLink.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupTxTimingRefLink.setDescription('The ifIndex of the transmit timing reference link to be used by the near-end for IMA data cell clock recovery from the ATM layer. The distinguished value of zero may be used if no link has been configured in the IMA group, or if the transmit timing reference link has not yet been selected.')
hwImaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupRxTimingRefLink.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupRxTimingRefLink.setDescription('The ifIndex of the receive timing reference link to be used by near-end for IMA data cell clock recovery toward the ATM layer. The distinguished value of zero may be used if no link has been configured in the IMA group, or if the receive timing reference link has not yet been detected.')
hwImaGroupTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupTxImaId.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupTxImaId.setDescription('The IMA ID currently in use by the near-end IMA function.')
hwImaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupRxImaId.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupRxImaId.setDescription('The IMA ID currently in use by the far-end IMA function.')
hwImaGroupTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 11), ImaFrameLength().clone('m128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaGroupTxFrameLength.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupTxFrameLength.setDescription('The frame length to be used by the IMA group in the transmit direction. Can only be set when the IMA group is startup.')
hwImaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 12), ImaFrameLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupRxFrameLength.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupRxFrameLength.setDescription('Value of IMA frame length as received from remote IMA function.')
hwImaGroupDiffDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 13), MilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(25, 100)).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaGroupDiffDelayMax.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupDiffDelayMax.setDescription('The maximum number of milliseconds of differential delay among the links that will be tolerated on this interface.')
hwImaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupAlphaValue.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupAlphaValue.setDescription("This indicates the 'alpha' value used to specify the number of consecutive invalid ICP cells to be detected before moving to the IMA Hunt state from the IMA Sync state.")
hwImaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupBetaValue.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupBetaValue.setDescription("This indicates the 'beta' value used to specify the number of consecutive errored ICP cells to be detected before moving to the IMA Hunt state from the IMA Sync state.")
hwImaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupGammaValue.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupGammaValue.setDescription("This indicates the 'gamma' value used to specify the number of consecutive valid ICP cells to be detected before moving to the IMA Sync state from the IMA PreSync state.")
hwImaGroupNumTxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupNumTxActLinks.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupNumTxActLinks.setDescription('The number of links which are configured to transmit and are currently Active in this IMA group.')
hwImaGroupNumRxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupNumRxActLinks.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupNumRxActLinks.setDescription('The number of links which are configured to receive and are currently Active in this IMA group.')
hwImaGroupTxOamLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupTxOamLabelValue.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupTxOamLabelValue.setDescription('IMA OAM Label value transmitted by the NE IMA unit.')
hwImaGroupRxOamLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupRxOamLabelValue.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupRxOamLabelValue.setDescription('IMA OAM Label value transmitted by the FE IMA unit. The value 0 likely means that the IMA unit has not received an OAM Label from the FE IMA unit at this time.')
hwImaGroupFirstLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 21), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupFirstLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupFirstLinkIfIndex.setDescription('This object identifies the first link of this IMA Group.')
hwImaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2), )
if mibBuilder.loadTexts: hwImaLinkTable.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkTable.setDescription('The IMA group Link Status and Configuration table.')
hwImaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1), ).setIndexNames((0, "HUAWEI-IMA-MIB", "hwImaLinkIfIndex"))
if mibBuilder.loadTexts: hwImaLinkEntry.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkEntry.setDescription('An entry in the IMA Group Link table.')
hwImaLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwImaLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkIfIndex.setDescription("This corresponds to the 'ifIndex' of the MIB-II interface on which this link is established. This object also corresponds to the logical number ('ifIndex') assigned to this IMA link.")
hwImaLinkGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaLinkGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkGroupIfIndex.setDescription("This object identifies the logical interface number ('ifIndex') assigned to this IMA group. The specified link will be bound to this IMA group.")
hwImaLinkNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 3), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaLinkNeTxState.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkNeTxState.setDescription('The current state of the near-end transmit link.')
hwImaLinkNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 4), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaLinkNeRxState.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkNeRxState.setDescription('The current state of the near-end receive link.')
hwImaLinkFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 5), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaLinkFeTxState.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkFeTxState.setDescription('The current state of the far-end transmit link as reported via ICP cells.')
hwImaLinkFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 6), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaLinkFeRxState.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkFeRxState.setDescription('The current state of the far-end receive link as reported via ICP cells.')
hwImaLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkRowStatus.setDescription("The hwImaLinkRowStatus object allows create, change, and delete operations on hwImaLinkTable entries. To create a new conceptual row (or instance) of the hwImaLinkTable, hwImaLinkRowStatus must be set to 'createAndWait' or 'createAndGo'. A successful set of the imaLinkGroupIndex object must be performed before the hwImaLinkRowStatus of a new conceptual row can be set to 'active'. To change (modify) the imaLinkGroupIndex in an hwImaLinkTable entry, the hwImaLinkRowStatus object must first be set to 'notInService'. Only then can this object in the conceptual row be modified. This is due to the fact that the imaLinkGroupIndex object provides the association between a physical IMA link and the IMA group to which it belongs, and setting the imaLinkGroupIndex object to a different value has the effect of changing the association between a physical IMA link and an IMA group. To place the link 'in group', the hwImaLinkRowStatus object is set to 'active'. While the row is not in 'active' state, both the Transmit and Receive IMA link state machines are in the 'Not In Group' state. To remove (delete) an hwImaLinkTable entry from this table, set this object to 'destroy'.")
hwImaMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 1))
hwImaMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 2))
hwImaMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 2, 1)).setObjects(("HUAWEI-IMA-MIB", "hwImaGroupGroup"), ("HUAWEI-IMA-MIB", "hwImaLinkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwImaMibCompliance = hwImaMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hwImaMibCompliance.setDescription('The compliance statement for network elements implementing Inverse Multiplexing for ATM (IMA) interfaces.')
hwImaGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 1, 1)).setObjects(("HUAWEI-IMA-MIB", "hwImaGroupIfIndex"), ("HUAWEI-IMA-MIB", "hwImaGroupNeState"), ("HUAWEI-IMA-MIB", "hwImaGroupFeState"), ("HUAWEI-IMA-MIB", "hwImaGroupSymmetry"), ("HUAWEI-IMA-MIB", "hwImaGroupMinNumTxLinks"), ("HUAWEI-IMA-MIB", "hwImaGroupMinNumRxLinks"), ("HUAWEI-IMA-MIB", "hwImaGroupTxTimingRefLink"), ("HUAWEI-IMA-MIB", "hwImaGroupRxTimingRefLink"), ("HUAWEI-IMA-MIB", "hwImaGroupTxImaId"), ("HUAWEI-IMA-MIB", "hwImaGroupRxImaId"), ("HUAWEI-IMA-MIB", "hwImaGroupTxFrameLength"), ("HUAWEI-IMA-MIB", "hwImaGroupRxFrameLength"), ("HUAWEI-IMA-MIB", "hwImaGroupDiffDelayMax"), ("HUAWEI-IMA-MIB", "hwImaGroupAlphaValue"), ("HUAWEI-IMA-MIB", "hwImaGroupBetaValue"), ("HUAWEI-IMA-MIB", "hwImaGroupGammaValue"), ("HUAWEI-IMA-MIB", "hwImaGroupNumTxActLinks"), ("HUAWEI-IMA-MIB", "hwImaGroupNumRxActLinks"), ("HUAWEI-IMA-MIB", "hwImaGroupTxOamLabelValue"), ("HUAWEI-IMA-MIB", "hwImaGroupRxOamLabelValue"), ("HUAWEI-IMA-MIB", "hwImaGroupFirstLinkIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwImaGroupGroup = hwImaGroupGroup.setStatus('current')
if mibBuilder.loadTexts: hwImaGroupGroup.setDescription('A set of objects providing configuration and status information for an IMA group definition.')
hwImaLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 1, 2)).setObjects(("HUAWEI-IMA-MIB", "hwImaLinkGroupIfIndex"), ("HUAWEI-IMA-MIB", "hwImaLinkNeTxState"), ("HUAWEI-IMA-MIB", "hwImaLinkNeRxState"), ("HUAWEI-IMA-MIB", "hwImaLinkFeTxState"), ("HUAWEI-IMA-MIB", "hwImaLinkFeRxState"), ("HUAWEI-IMA-MIB", "hwImaLinkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwImaLinkGroup = hwImaLinkGroup.setStatus('current')
if mibBuilder.loadTexts: hwImaLinkGroup.setDescription('A set of objects providing status information for an IMA link.')
mibBuilder.exportSymbols("HUAWEI-IMA-MIB", hwImaMibGroups=hwImaMibGroups, hwImaMIB=hwImaMIB, hwImaGroupTxFrameLength=hwImaGroupTxFrameLength, hwImaMibCompliance=hwImaMibCompliance, hwImaGroupGammaValue=hwImaGroupGammaValue, hwImaMibObjects=hwImaMibObjects, hwImaGroupFeState=hwImaGroupFeState, hwImaGroupRxTimingRefLink=hwImaGroupRxTimingRefLink, ImaGroupState=ImaGroupState, hwImaGroupNumTxActLinks=hwImaGroupNumTxActLinks, hwImaGroupMinNumTxLinks=hwImaGroupMinNumTxLinks, hwImaGroupDiffDelayMax=hwImaGroupDiffDelayMax, hwImaGroupRxOamLabelValue=hwImaGroupRxOamLabelValue, hwImaLinkTable=hwImaLinkTable, hwImaLinkFeTxState=hwImaLinkFeTxState, hwImaLinkGroupIfIndex=hwImaLinkGroupIfIndex, hwImaLinkNeRxState=hwImaLinkNeRxState, hwImaGroupEntry=hwImaGroupEntry, hwImaMibConformance=hwImaMibConformance, hwImaGroupTable=hwImaGroupTable, ImaGroupSymmetry=ImaGroupSymmetry, hwImaLinkFeRxState=hwImaLinkFeRxState, hwImaGroupTxOamLabelValue=hwImaGroupTxOamLabelValue, hwImaGroupAlphaValue=hwImaGroupAlphaValue, hwImaLinkNeTxState=hwImaLinkNeTxState, hwImaGroupRxFrameLength=hwImaGroupRxFrameLength, MilliSeconds=MilliSeconds, PYSNMP_MODULE_ID=hwImaMIB, ImaLinkState=ImaLinkState, hwImaGroupIfIndex=hwImaGroupIfIndex, hwImaGroupNeState=hwImaGroupNeState, hwImaLinkEntry=hwImaLinkEntry, hwImaGroupRxImaId=hwImaGroupRxImaId, hwImaMibCompliances=hwImaMibCompliances, hwImaGroupGroup=hwImaGroupGroup, hwImaGroupBetaValue=hwImaGroupBetaValue, hwImaLinkIfIndex=hwImaLinkIfIndex, hwImaGroupMinNumRxLinks=hwImaGroupMinNumRxLinks, hwImaGroupFirstLinkIfIndex=hwImaGroupFirstLinkIfIndex, hwImaGroupSymmetry=hwImaGroupSymmetry, hwImaGroupTxImaId=hwImaGroupTxImaId, hwImaLinkGroup=hwImaLinkGroup, hwImaLinkRowStatus=hwImaLinkRowStatus, hwImaGroupNumRxActLinks=hwImaGroupNumRxActLinks, hwImaGroupTxTimingRefLink=hwImaGroupTxTimingRefLink, ImaFrameLength=ImaFrameLength)
