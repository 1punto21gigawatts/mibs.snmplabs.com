#
# PySNMP MIB module HPN-ICF-DOT11-STATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DOT11-STATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
HpnicfDot11SSIDStringType, HpnicfDot11RadioScopeType, HpnicfDot11AssocFailType, HpnicfDot11CipherType, HpnicfDot11SecIEStatusType, HpnicfDot11AuthorFailType, HpnicfDot11RadioType2, HpnicfDot11RadioType, HpnicfDot11AKMType, HpnicfDot11SSIDEncryptModeType, HpnicfDot11ChannelScopeType, hpnicfDot11, HpnicfDot11ObjectIDType, HpnicfDot11AuthenType = mibBuilder.importSymbols("HPN-ICF-DOT11-REF-MIB", "HpnicfDot11SSIDStringType", "HpnicfDot11RadioScopeType", "HpnicfDot11AssocFailType", "HpnicfDot11CipherType", "HpnicfDot11SecIEStatusType", "HpnicfDot11AuthorFailType", "HpnicfDot11RadioType2", "HpnicfDot11RadioType", "HpnicfDot11AKMType", "HpnicfDot11SSIDEncryptModeType", "HpnicfDot11ChannelScopeType", "hpnicfDot11", "HpnicfDot11ObjectIDType", "HpnicfDot11AuthenType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, NotificationType, ModuleIdentity, IpAddress, Integer32, TimeTicks, MibIdentifier, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "NotificationType", "ModuleIdentity", "IpAddress", "Integer32", "TimeTicks", "MibIdentifier", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "Gauge32")
MacAddress, DateAndTime, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DateAndTime", "TextualConvention", "DisplayString", "TruthValue")
hpnicfDot11STATION = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3))
hpnicfDot11STATION.setRevisions(('2010-09-02 18:00', '2010-02-23 18:00', '2009-12-01 18:00', '2009-08-07 18:00', '2009-07-29 18:00', '2009-05-07 20:00', '2008-11-07 17:30', '2008-02-25 18:00', '2007-12-21 18:00', '2007-06-21 20:00', '2007-04-27 20:00', '2006-05-10 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfDot11STATION.setRevisionsDescriptions(('Modify hpnicfDot11StationDisconnectTrap.', 'Add new node hpnicfDot11StationUpTimeTicks, hpnicfDot11StationSecIEStatus to hpnicfDot11StationAssociateTable.', 'Add new node hpnicfDot11StaRxErrDataFrameCnt and hpnicfDot11StaTxRetryDataFrameCnt to hpnicfDot11StationStatisTable', 'Modify description of hpnicfDot11StationTxSpeed, hpnicfDot11StationRxSpeed', 'Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new trap and add hpnicfDot11StationRxNoise to hpnicfDot11StationAssociateTable.', 'Modified to add new nodes.', 'Changes made for new requirements.', 'Modified to fix some issue.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfDot11STATION.setLastUpdated('201009021800Z')
if mibBuilder.loadTexts: hpnicfDot11STATION.setOrganization('')
if mibBuilder.loadTexts: hpnicfDot11STATION.setContactInfo('')
if mibBuilder.loadTexts: hpnicfDot11STATION.setDescription("This MIB defines the configuration and statistic information of stations. GLOSSARY IEEE 802.11 Standard to encourage interoperability among wireless networking equipment. Access point (AP) Transmitter/receiver (transceiver) device that commonly connects and transports data between a wireless network and a wired network. Access control (AC) To control and manage multi-APs, it will bridge wireless and wired network. Control And Provisioning of Wireless Access Points Protocol The short name of protocol is CAPWAP. AC will control and manage AP by CAPWAP tunnel protocol defined by IETF. Also, a data tunnel will be set up between AC and AP. BSS IEEE 802.11 Basic Service Set (Radio Cell). The BSS of an AP comprises of the stations directly associated with the AP. station (Client Station) A wireless device in a wireless network associated with an access point. MIC Message Integrity Check. A MIC can, optionally, be added to WEP-encrypted 802.11 frames. SSID Radio Service Set ID. It is used for identification during association. STA (WSTA) A non-AP 802.11 wireless station. WEP Wired Equivalent Privacy. 'WEP' is generally used to refer to 802.11 encryption. RSSI It is the received signal strength indication. It suggests the quality of received signal. RTS Request to Send, it is used to gain control of the medium for the transmission of 'large' frames, in which 'large' is defined by the RTS threshold in the network card driver. CTS Clear to Send, it is used to answer RTS frames. AKM The authentication and key management method defined by 802.11i, and which includes 802.1x and pre-shared key.")
hpnicfDot11StationMtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1))
hpnicfDot11StationNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2))
hpnicfDot11StationAssociateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1), )
if mibBuilder.loadTexts: hpnicfDot11StationAssociateTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssociateTable.setDescription('This table contains the information of stations which are associating with the wireless network (current AC).')
hpnicfDot11StationAssociateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationMAC"))
if mibBuilder.loadTexts: hpnicfDot11StationAssociateEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssociateEntry.setDescription('Each entry contains association information of each station.')
hpnicfDot11StationMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfDot11StationMAC.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationMAC.setDescription('Represents the unique MAC Address of station.')
hpnicfDot11StationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationIPAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationIPAddress.setDescription('Represents the IP address of the station.')
hpnicfDot11StationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationUserName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationUserName.setDescription('Represents the user name of the station.')
hpnicfDot11StationTxRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 4), OctetString()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxRateSet.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxRateSet.setDescription('Represents the current transmit data rates for this station. Each byte will represent one rate. If the MSB(Most significant bit) is set, then this rate is a mandantory rate. Otherwise, it is optional.')
hpnicfDot11StationUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 5), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationUpTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationUpTime.setDescription('The time in seconds, how long this station has been associated with this device.')
hpnicfDot11StationSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 6), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSignalStrength.setDescription('Represents a device-dependent measure of the signal strength of latest packet received from this station.')
hpnicfDot11StationRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRSSI.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRSSI.setDescription('Represents a device-dependent measure of the RSSI. It is the received signal strength indication. The maximum value is defined by chip set vendors')
hpnicfDot11StationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 8), HpnicfDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationChannel.setDescription('Represents current radio channel used by station.')
hpnicfDot11StationPowerSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("powersave", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationPowerSaveMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationPowerSaveMode.setDescription('Represents the power management mode of this station. The following values are supported: active - This station is not in power-save mode and it is actively sending or receiving data. powersave - This station is in power-save mode and it wakes up after sometime to check for buffer data.')
hpnicfDot11StationAid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAid.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAid.setDescription('Represents the association identification number of station.')
hpnicfDot11StationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationVlanId.setDescription('Represents Vlan ID to which the station is associated.')
hpnicfDot11StationSSIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 12), HpnicfDot11SSIDStringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSSIDName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSSIDName.setDescription('Represents the ESS name.')
hpnicfDot11StationAuthenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 13), HpnicfDot11AuthenType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAuthenMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAuthenMode.setDescription('Represents the Authentication mode defined by 802.11.')
hpnicfDot11StationAKMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 14), HpnicfDot11AKMType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAKMMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAKMMode.setDescription('Represents the key management mode defined by 802.11i.')
hpnicfDot11StationSecurityCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 15), HpnicfDot11CipherType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSecurityCiphers.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSecurityCiphers.setDescription('Represents the frame encryption cipher type used by station.')
hpnicfDot11StationSSIDEncryptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 16), HpnicfDot11SSIDEncryptModeType().clone('cipher')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSSIDEncryptMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSSIDEncryptMode.setDescription('Represents the encryption mode for this ESS.')
hpnicfDot11StationRxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 17), Integer32()).setUnits('One Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxSNR.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxSNR.setDescription('Represents the signal and noise strength ratio of frame reception.')
hpnicfDot11StationTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 18), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxRate.setDescription('Represents the transmission rate of frame.')
hpnicfDot11StationRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 19), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxRate.setDescription('Represents the reception rate of frame.')
hpnicfDot11StationVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationVendorName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationVendorName.setDescription('Represents the vendor name of the station.')
hpnicfDot11StationRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 21), HpnicfDot11RadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRadioMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRadioMode.setDescription('Represents which radio type supported by the station. The WLAN system support the following possible radio types. dot11a(1), dot11b(2), dot11g(4), dot11n(8) For a station,it could support only one radio type at the same time.')
hpnicfDot11StationRxNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxNoise.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxNoise.setDescription('Represents the received noise of the station.')
hpnicfDot11StationMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 23), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationMACAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationMACAddress.setDescription('Represents MAC Address of station.')
hpnicfDot11StationTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 24), Integer32()).setUnits('byte/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxSpeed.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxSpeed.setDescription('Represents the bytes of transmitted data frames to the station per second in sample interval.')
hpnicfDot11StationRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 25), Integer32()).setUnits('byte/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxSpeed.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxSpeed.setDescription('Represents the bytes of received data frames from the station per second in sample interval.')
hpnicfDot11StationWmmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wmm", 1), ("nonwmm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationWmmMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationWmmMode.setDescription('Represents the QoS mode of station. The following values are supported: wmm - This QoS function is supported by this station. nonwmm - This QoS function is not supported by this station.')
hpnicfDot11StationSecIEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 27), HpnicfDot11SecIEStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSecIEStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSecIEStatus.setDescription('Represents the security Information element for this station.')
hpnicfDot11StationUpTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationUpTimeTicks.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationUpTimeTicks.setDescription('Represents how long this station has been associated with this device.')
hpnicfDot11StationRadioMode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 29), HpnicfDot11RadioType2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRadioMode2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRadioMode2.setDescription('Represents which radio type supported by the station. The WLAN system support the following possible radio types. dot11a(1), dot11b(2), dot11g(4), dot11an(8), dot11gn(16) For a station,it could support only one radio type at the same time.')
hpnicfDot11StationAssTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAssTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssTime.setDescription('Represents the time at which the station connected.')
hpnicfDot11StationUserAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portalAuth", 1), ("authFree", 2), ("associateAuth", 3), ("macAuth", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationUserAuthType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationUserAuthType.setDescription('Represents the type of user authentication with this station. portalAuth - The authentication lunched by portal pop-up program which is need input username and passward,exclude MAC authentication. authFree - There is no need others authentiaction,user will surf internet after association. associateAuth - Include WEP PSK 802.1X authentication. macAuth - MAC Authentication apply with access device, a Remote Authentication Dial-In User Service (RADIUS) server or message netgate to realize fast authentication.')
hpnicfDot11StationRfPingTest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11StationRfPingTest.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingTest.setDescription('This object is used to start rfping test of the station. It will return false for get operation.')
hpnicfDot11StationMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 33), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationMaxRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationMaxRate.setDescription('Represents the max negotiation rate of the station.')
hpnicfDot11StationPowerSaveModeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("powersave", 1))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationPowerSaveModeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationPowerSaveModeCM.setDescription('Represents the power management mode of the client. The following values are supported: active - This client is not in power-save mode and it is actively sending or receiving data. powersave - This client is in power-save mode and it wakes up after some time to check for buffer data.')
hpnicfDot11StationAuthenModeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("opensystem", 0), ("sharedkey", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAuthenModeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAuthenModeCM.setDescription('Represents the authentication mode defined by 802.11. The following values are supported: opensystem - Do not authenticate. sharedkey - System will use challenge message to authenticate the client.')
hpnicfDot11StationAKMModeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("psk", 1), ("radius", 2), ("wlanex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAKMModeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAKMModeCM.setDescription('Represents the key management mode defined by 802.11i. The following values are supported: none - no key management mode configured, psk - pre-shared key authentication, radius - 802.1x authentication, wlanex - wlanex.')
hpnicfDot11StationSecurityCiphersCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("wep40", 1), ("wep104", 2), ("tkip", 3), ("aesccmp", 4), ("wpisms4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSecurityCiphersCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSecurityCiphersCM.setDescription('Represents the frame encryption cipher type used by station. The following values are supported: none - clear text or no cipher method is configure, wep40 - 40-bit WEP key, wep104 - 104-bit WEP key, tkip - WPA Temporal Key encryption, aesccmp - WPA AES CCMP encryption, wpisms4 - ext encryption.')
hpnicfDot11StationSecIEStatusCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("wpa", 1), ("wpa2", 2), ("wlanex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSecIEStatusCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSecIEStatusCM.setDescription('Represents the security Information element for this station. The following values are supported: none - both wpa and wpa2 are disabled, wpa - only enable wpa, wpa2 - only enable wpa2, wlanex - only enable wlanex.')
hpnicfDot11StationAPRelationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 2), )
if mibBuilder.loadTexts: hpnicfDot11StationAPRelationTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAPRelationTable.setDescription('This table contains relation-ship between station, AP, Radio and WLANID, and the detailed information of station is kept in the hpnicfDot11StaAssociateTable table.')
hpnicfDot11StationAPRelationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationMAC"))
if mibBuilder.loadTexts: hpnicfDot11StationAPRelationEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAPRelationEntry.setDescription('Each entry contains relation-ship information with AP, Radio and WLANID of each station.')
hpnicfDot11CurrAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 2, 1, 1), HpnicfDot11ObjectIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPID.setDescription('To uniquely identify each AP, and relation-ship between hpnicfDot11CurrAPID and AP device will be static.')
hpnicfDot11CurrRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 2, 1, 2), HpnicfDot11RadioScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrRadioID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrRadioID.setDescription('Represents each radio.')
hpnicfDot11CurrWlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrWlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrWlanID.setDescription('Represents WLAN ID of the BSS the station associated to.')
hpnicfDot11CurrAntennaID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAntennaID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAntennaID.setDescription('Represents Antenna ID of the station associated to.')
hpnicfDot11StationStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3), )
if mibBuilder.loadTexts: hpnicfDot11StationStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationStatisTable.setDescription('This table contains statistics and status of all stations in the hpnicfDot11StaAssociateTable.')
hpnicfDot11StationStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationMAC"))
if mibBuilder.loadTexts: hpnicfDot11StationStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationStatisEntry.setDescription('This entry contains statistics and status for each station.')
hpnicfDot11StationRxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxFrameCnt.setDescription('Represents the count of frames that are received by AP from station.')
hpnicfDot11StationTxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxFrameCnt.setDescription('Represents the count of frames that are sent to station from AP.')
hpnicfDot11StationDropFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationDropFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationDropFrameCnt.setDescription('Represents the count of frames that are dropped.')
hpnicfDot11StationRxFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxFrameBytes.setDescription('Represents the count of bytes that are received by AP from station.')
hpnicfDot11StationTxFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxFrameBytes.setDescription('Represents the count of bytes that are sent to station from AP.')
hpnicfDot11StationDropFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 6), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationDropFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationDropFrameBytes.setDescription('Represents how many bytes are dropped.')
hpnicfDot11StationRxRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxRetryPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxRetryPkts.setDescription('Represents the count of frames that are retransmitted to AP from station.')
hpnicfDot11StationTxRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxRetryPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxRetryPkts.setDescription('Represents the count of frames that are retransmitted to station from AP.')
hpnicfDot11StationRxRetryBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxRetryBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxRetryBytes.setDescription('Represents the count of bytes that are retransmitted to AP from station.')
hpnicfDot11StationTxRetryBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxRetryBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxRetryBytes.setDescription('Represents the count of bytes that are retransmitted to station from AP.')
hpnicfDot11StationThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 11), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationThroughput.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationThroughput.setDescription('Represents how many payload bytes of data frame are sent and received by station.')
hpnicfDot11StationSuccessTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSuccessTxCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSuccessTxCnt.setDescription('Represents how many frames have been successfully sent to station.')
hpnicfDot11StationSuccessTxDataCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationSuccessTxDataCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSuccessTxDataCnt.setDescription('Represents how many data frames have been successfully sent to station.')
hpnicfDot11StationRxDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxDataFrameCnt.setDescription('Represents how many data frames have been received from station.')
hpnicfDot11StationTxDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxDataFrameCnt.setDescription('Represents how many data frames have been sent to station.')
hpnicfDot11StationRxDataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxDataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxDataFrameBytes.setDescription('Represents how many bytes of data frames have been received from station.')
hpnicfDot11StationTxDataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationTxDataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTxDataFrameBytes.setDescription('Represents how many bytes of data frames have been sent to station.')
hpnicfDot11StationRxFragCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRxFragCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRxFragCnt.setDescription('Represents the number of fragmented data frames that received from station.')
hpnicfDot11StaRxErrDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StaRxErrDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaRxErrDataFrameCnt.setDescription('Represents the count of error data frames that are received by AP from station.')
hpnicfDot11StaTxRetryDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StaTxRetryDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaTxRetryDataFrameCnt.setDescription('Represents the count of data frames that are retransmitted to station from AP.')
hpnicfDot11StaTxDataRatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StaTxDataRatePkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaTxDataRatePkts.setDescription('Represents how many data frames of each rate have been received from station.')
hpnicfDot11StaRxDataRatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StaRxDataRatePkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaRxDataRatePkts.setDescription('Represents how many data frames of each rate have been sent to station.')
hpnicfDot11StaTxSignalStrengthPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 3, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StaTxSignalStrengthPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaTxSignalStrengthPkts.setDescription('Represents how many data frames of different signal strength have been received from station.')
hpnicfDot11StationRfPingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4), )
if mibBuilder.loadTexts: hpnicfDot11StationRfPingTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingTable.setDescription('This table contains statistics of all stations in the hpnicfDot11StationRfPingTable.')
hpnicfDot11StationRfPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationMAC"), (0, "HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationRfPingIndex"))
if mibBuilder.loadTexts: hpnicfDot11StationRfPingEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingEntry.setDescription("This entry contains statistics for each station's RfPing results.")
hpnicfDot11StationRfPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214783647)))
if mibBuilder.loadTexts: hpnicfDot11StationRfPingIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingIndex.setDescription('Represents the rate index for the station.')
hpnicfDot11StationRfPingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4, 1, 2), OctetString()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRate.setDescription('Represents the rate at which the radio interface sends wireless ping frames.')
hpnicfDot11StationRfPingTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRfPingTxCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingTxCnt.setDescription('Represents the number of wireless ping frames that the radio interface sent.')
hpnicfDot11StationRfPingRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRxCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRxCnt.setDescription('Represents the number of wireless ping frames that the radio interface received from the client.')
hpnicfDot11StationRfPingRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRssi.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRssi.setDescription('Represents the client signal strength detected by the AP.')
hpnicfDot11StationRfPingRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRetries.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRetries.setDescription('Represents the total number of retransmitted ping frames.')
hpnicfDot11StationRfPingRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 1, 4, 1, 7), Integer32()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRtt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRfPingRtt.setDescription('Round-trip time (RTT) from the time when the radio interface send a ping packet to the time when it receives a response from the client.')
hpnicfDot11StationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0))
hpnicfDot11StationMICErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 1)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrAPID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrRadioID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapBSSID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSSIDName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"))
if mibBuilder.loadTexts: hpnicfDot11StationMICErrorTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationMICErrorTrap.setDescription('This notification is to indicate the occurrence of a MIC failure in a certain station.')
hpnicfDot11StationAuthenErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 2)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrAPID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrRadioID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapBSSID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSSIDName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAuthenMode"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAKMMode"))
if mibBuilder.loadTexts: hpnicfDot11StationAuthenErrorTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAuthenErrorTrap.setDescription('This notification is to indicate which station happened authentication failure.')
hpnicfDot11StationAuthorFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 3)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationUserName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrRadioID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSSIDName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAuthorFailCause"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationFailCauseDesc"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrAPID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationBSSID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAuthMode"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11StationAuthorFailTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAuthorFailTrap.setDescription('This trap is sent if a station authorization fails.')
hpnicfDot11StationAssocFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 4)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrRadioID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSSIDName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAssocFailCause"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationFailCauseDesc"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrAPID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11StationAssocFailTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssocFailTrap.setDescription('This trap is sent if a station association fails.')
hpnicfDot11StationDeAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 5)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationUserName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationVlanId"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrRadioID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSSIDName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSessionDuration"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrAPID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAPName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationBSSID"))
if mibBuilder.loadTexts: hpnicfDot11StationDeAssocTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationDeAssocTrap.setDescription('This trap is sent if a station de-association occurred.')
hpnicfDot11StationAuthorSuccTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 6)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationUserName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationVlanId"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSessionStartTime"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrRadioID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSSIDName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrAPID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAPName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationBSSID"))
if mibBuilder.loadTexts: hpnicfDot11StationAuthorSuccTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAuthorSuccTrap.setDescription('This trap is sent when a station is authorized successfully.')
hpnicfDot11StationRoamingTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 7)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrAPID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationUserName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationVlanId"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationRoamingTime"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrRadioID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSSIDName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationACIPAddress"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationACIPv6Add"))
if mibBuilder.loadTexts: hpnicfDot11StationRoamingTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRoamingTrap.setDescription('This trap is sent when a station roamed successfully.')
hpnicfDot11StationDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 8)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAPName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationBSSID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSSIDName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationSessionDuration"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationVlanId"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrAPID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11CurrRadioID"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StaDisconnectReason"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"))
if mibBuilder.loadTexts: hpnicfDot11StationDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationDisconnectTrap.setDescription('This notification is sent when station disconnects with AP.')
hpnicfDot11UserDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 0, 9)).setObjects(("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationAPName"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11StationTrapStaMAC"), ("HPN-ICF-DOT11-STATION-MIB", "hpnicfDot11UserName"))
if mibBuilder.loadTexts: hpnicfDot11UserDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11UserDisconnectTrap.setDescription('This notification is sent when user disconnects with AP.')
hpnicfDot11StationTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1))
hpnicfDot11StationTrapBSSID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationTrapBSSID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTrapBSSID.setDescription('Represents on which BSSID of AP the event happened.')
hpnicfDot11StationTrapStaMAC = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationTrapStaMAC.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTrapStaMAC.setDescription('Represents the MAC address of station which happened message integrity check (MIC) errors.')
hpnicfDot11StationSessionStartTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationSessionStartTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSessionStartTime.setDescription('Represents the time at which the station connected.')
hpnicfDot11StationAssocFailCause = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 4), HpnicfDot11AssocFailType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationAssocFailCause.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssocFailCause.setDescription('Represents the cause of the station association failure.')
hpnicfDot11StationAuthorFailCause = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 5), HpnicfDot11AuthorFailType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationAuthorFailCause.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAuthorFailCause.setDescription('Represents the cause of the station authorization failure.')
hpnicfDot11StationFailCauseDesc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationFailCauseDesc.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationFailCauseDesc.setDescription('Represents the failure description of the station.')
hpnicfDot11StationSessionDuration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 7), Unsigned32()).setUnits('second').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationSessionDuration.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationSessionDuration.setDescription('Represents the duration of the station sesssion.')
hpnicfDot11StationRoamingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 8), Unsigned32()).setUnits('second').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationRoamingTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationRoamingTime.setDescription('Represents the time at which the station roamed.')
hpnicfDot11StationACIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationACIPAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationACIPAddress.setDescription('For roam-in station, it represents the ip address of home AC. For roam-out station, it represents the ip address of foreign AC.')
hpnicfDot11StationAPName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationAPName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAPName.setDescription('Name of the AP which the station connects to.')
hpnicfDot11StationBSSID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 11), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationBSSID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationBSSID.setDescription('BSSID which the station connects to.')
hpnicfDot11StaDisconnectReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 12), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StaDisconnectReason.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaDisconnectReason.setDescription('Reason why the station disconnects with the AP.')
hpnicfDot11StationAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationAuthMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAuthMode.setDescription("Represents station's authentication mode.")
hpnicfDot11StationACIPv6Add = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 14), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationACIPv6Add.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationACIPv6Add.setDescription('For roam-in station, it represents the IPv6 address of home AC. For roam-out station, it represents the IPv6 address of foreign AC.')
hpnicfDot11UserName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 15), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11UserName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11UserName.setDescription('Represents the user name.')
hpnicfDot11StationTrapAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 3, 2, 1, 16), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StationTrapAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationTrapAPMacAddress.setDescription('Represents the MAC address of an AP.')
mibBuilder.exportSymbols("HPN-ICF-DOT11-STATION-MIB", hpnicfDot11StationTrapStaMAC=hpnicfDot11StationTrapStaMAC, hpnicfDot11StationRfPingTxCnt=hpnicfDot11StationRfPingTxCnt, hpnicfDot11StationBSSID=hpnicfDot11StationBSSID, hpnicfDot11StationTrapAPMacAddress=hpnicfDot11StationTrapAPMacAddress, hpnicfDot11StationSecurityCiphers=hpnicfDot11StationSecurityCiphers, hpnicfDot11StationAssTime=hpnicfDot11StationAssTime, hpnicfDot11StationSuccessTxCnt=hpnicfDot11StationSuccessTxCnt, hpnicfDot11UserName=hpnicfDot11UserName, hpnicfDot11StationTxFrameCnt=hpnicfDot11StationTxFrameCnt, hpnicfDot11StationRfPingRate=hpnicfDot11StationRfPingRate, hpnicfDot11CurrAPID=hpnicfDot11CurrAPID, hpnicfDot11StationMtGroup=hpnicfDot11StationMtGroup, hpnicfDot11StationStatisTable=hpnicfDot11StationStatisTable, hpnicfDot11StationAPRelationTable=hpnicfDot11StationAPRelationTable, hpnicfDot11StationSuccessTxDataCnt=hpnicfDot11StationSuccessTxDataCnt, hpnicfDot11StationRxFrameBytes=hpnicfDot11StationRxFrameBytes, hpnicfDot11StationRfPingRxCnt=hpnicfDot11StationRfPingRxCnt, hpnicfDot11StationSessionStartTime=hpnicfDot11StationSessionStartTime, hpnicfDot11StaTxSignalStrengthPkts=hpnicfDot11StaTxSignalStrengthPkts, hpnicfDot11StationAuthenErrorTrap=hpnicfDot11StationAuthenErrorTrap, hpnicfDot11StationMaxRate=hpnicfDot11StationMaxRate, hpnicfDot11StationSecIEStatus=hpnicfDot11StationSecIEStatus, hpnicfDot11StationRfPingRtt=hpnicfDot11StationRfPingRtt, hpnicfDot11StationAssocFailTrap=hpnicfDot11StationAssocFailTrap, hpnicfDot11StationAPRelationEntry=hpnicfDot11StationAPRelationEntry, hpnicfDot11StationMAC=hpnicfDot11StationMAC, hpnicfDot11CurrWlanID=hpnicfDot11CurrWlanID, hpnicfDot11StationStatisEntry=hpnicfDot11StationStatisEntry, hpnicfDot11StationRxFrameCnt=hpnicfDot11StationRxFrameCnt, hpnicfDot11StationRxRate=hpnicfDot11StationRxRate, hpnicfDot11StationRxFragCnt=hpnicfDot11StationRxFragCnt, hpnicfDot11StationChannel=hpnicfDot11StationChannel, hpnicfDot11StationTxRateSet=hpnicfDot11StationTxRateSet, hpnicfDot11StaRxErrDataFrameCnt=hpnicfDot11StaRxErrDataFrameCnt, hpnicfDot11StaRxDataRatePkts=hpnicfDot11StaRxDataRatePkts, hpnicfDot11StationThroughput=hpnicfDot11StationThroughput, hpnicfDot11StationRxSNR=hpnicfDot11StationRxSNR, hpnicfDot11StationTxDataFrameBytes=hpnicfDot11StationTxDataFrameBytes, hpnicfDot11StationRadioMode=hpnicfDot11StationRadioMode, hpnicfDot11StationSSIDEncryptMode=hpnicfDot11StationSSIDEncryptMode, hpnicfDot11StationAuthenModeCM=hpnicfDot11StationAuthenModeCM, hpnicfDot11StationSecIEStatusCM=hpnicfDot11StationSecIEStatusCM, hpnicfDot11StationAuthorSuccTrap=hpnicfDot11StationAuthorSuccTrap, hpnicfDot11StationTxDataFrameCnt=hpnicfDot11StationTxDataFrameCnt, hpnicfDot11StationUpTime=hpnicfDot11StationUpTime, hpnicfDot11StationVlanId=hpnicfDot11StationVlanId, hpnicfDot11StationRxDataFrameCnt=hpnicfDot11StationRxDataFrameCnt, hpnicfDot11CurrAntennaID=hpnicfDot11CurrAntennaID, hpnicfDot11UserDisconnectTrap=hpnicfDot11UserDisconnectTrap, hpnicfDot11StationTrapBSSID=hpnicfDot11StationTrapBSSID, hpnicfDot11StationAid=hpnicfDot11StationAid, hpnicfDot11StationAssociateEntry=hpnicfDot11StationAssociateEntry, hpnicfDot11StaTxDataRatePkts=hpnicfDot11StaTxDataRatePkts, hpnicfDot11StaTxRetryDataFrameCnt=hpnicfDot11StaTxRetryDataFrameCnt, hpnicfDot11StationRfPingRssi=hpnicfDot11StationRfPingRssi, hpnicfDot11StationPowerSaveModeCM=hpnicfDot11StationPowerSaveModeCM, hpnicfDot11StationRxDataFrameBytes=hpnicfDot11StationRxDataFrameBytes, hpnicfDot11StationAssocFailCause=hpnicfDot11StationAssocFailCause, hpnicfDot11StationACIPv6Add=hpnicfDot11StationACIPv6Add, hpnicfDot11StationAuthorFailTrap=hpnicfDot11StationAuthorFailTrap, hpnicfDot11StationRoamingTrap=hpnicfDot11StationRoamingTrap, hpnicfDot11StationUpTimeTicks=hpnicfDot11StationUpTimeTicks, hpnicfDot11StationPowerSaveMode=hpnicfDot11StationPowerSaveMode, hpnicfDot11StationAKMMode=hpnicfDot11StationAKMMode, hpnicfDot11CurrRadioID=hpnicfDot11CurrRadioID, hpnicfDot11StationUserName=hpnicfDot11StationUserName, hpnicfDot11StationRadioMode2=hpnicfDot11StationRadioMode2, hpnicfDot11StationAuthorFailCause=hpnicfDot11StationAuthorFailCause, hpnicfDot11StationTrapVarObjects=hpnicfDot11StationTrapVarObjects, hpnicfDot11StationSignalStrength=hpnicfDot11StationSignalStrength, hpnicfDot11StationRfPingTest=hpnicfDot11StationRfPingTest, hpnicfDot11StationDisconnectTrap=hpnicfDot11StationDisconnectTrap, hpnicfDot11StationTxSpeed=hpnicfDot11StationTxSpeed, hpnicfDot11StationSessionDuration=hpnicfDot11StationSessionDuration, hpnicfDot11StationTxRetryBytes=hpnicfDot11StationTxRetryBytes, hpnicfDot11StationRfPingTable=hpnicfDot11StationRfPingTable, hpnicfDot11STATION=hpnicfDot11STATION, hpnicfDot11StaDisconnectReason=hpnicfDot11StaDisconnectReason, hpnicfDot11StationRxRetryBytes=hpnicfDot11StationRxRetryBytes, hpnicfDot11StationAuthMode=hpnicfDot11StationAuthMode, hpnicfDot11StationIPAddress=hpnicfDot11StationIPAddress, hpnicfDot11StationDropFrameBytes=hpnicfDot11StationDropFrameBytes, hpnicfDot11StationRfPingRetries=hpnicfDot11StationRfPingRetries, hpnicfDot11StationRoamingTime=hpnicfDot11StationRoamingTime, hpnicfDot11StationVendorName=hpnicfDot11StationVendorName, hpnicfDot11StationDeAssocTrap=hpnicfDot11StationDeAssocTrap, hpnicfDot11StationRSSI=hpnicfDot11StationRSSI, hpnicfDot11StationTxRate=hpnicfDot11StationTxRate, hpnicfDot11StationFailCauseDesc=hpnicfDot11StationFailCauseDesc, hpnicfDot11StationTraps=hpnicfDot11StationTraps, hpnicfDot11StationRxNoise=hpnicfDot11StationRxNoise, hpnicfDot11StationAPName=hpnicfDot11StationAPName, hpnicfDot11StationRfPingEntry=hpnicfDot11StationRfPingEntry, hpnicfDot11StationMACAddress=hpnicfDot11StationMACAddress, hpnicfDot11StationTxFrameBytes=hpnicfDot11StationTxFrameBytes, hpnicfDot11StationTxRetryPkts=hpnicfDot11StationTxRetryPkts, hpnicfDot11StationWmmMode=hpnicfDot11StationWmmMode, hpnicfDot11StationAuthenMode=hpnicfDot11StationAuthenMode, hpnicfDot11StationAssociateTable=hpnicfDot11StationAssociateTable, hpnicfDot11StationNotifyGroup=hpnicfDot11StationNotifyGroup, hpnicfDot11StationSecurityCiphersCM=hpnicfDot11StationSecurityCiphersCM, hpnicfDot11StationAKMModeCM=hpnicfDot11StationAKMModeCM, hpnicfDot11StationDropFrameCnt=hpnicfDot11StationDropFrameCnt, hpnicfDot11StationRxSpeed=hpnicfDot11StationRxSpeed, hpnicfDot11StationRfPingIndex=hpnicfDot11StationRfPingIndex, hpnicfDot11StationSSIDName=hpnicfDot11StationSSIDName, hpnicfDot11StationUserAuthType=hpnicfDot11StationUserAuthType, hpnicfDot11StationRxRetryPkts=hpnicfDot11StationRxRetryPkts, hpnicfDot11StationACIPAddress=hpnicfDot11StationACIPAddress, PYSNMP_MODULE_ID=hpnicfDot11STATION, hpnicfDot11StationMICErrorTrap=hpnicfDot11StationMICErrorTrap)
