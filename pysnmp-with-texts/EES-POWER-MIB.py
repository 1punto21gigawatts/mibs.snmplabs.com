#
# PySNMP MIB module EES-POWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EES-POWER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, iso, Bits, Counter64, Integer32, MibIdentifier, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, IpAddress, TimeTicks, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "iso", "Bits", "Counter64", "Integer32", "MibIdentifier", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "IpAddress", "TimeTicks", "Unsigned32", "ObjectIdentity")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
ees = MibIdentifier((1, 3, 6, 1, 4, 1, 6302))
pysmi_global = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2)).setLabel("global")
powerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6302, 2, 1))
if mibBuilder.loadTexts: powerMIB.setLastUpdated('200406161934Z')
if mibBuilder.loadTexts: powerMIB.setOrganization(' Emerson Energy Systems (EES)')
if mibBuilder.loadTexts: powerMIB.setContactInfo(' Emerson Energy Systems 141 82 Stockholm Sweden')
if mibBuilder.loadTexts: powerMIB.setDescription(' Emerson Energy Systems (EES) Power MIB, revision B.')
class Status(TextualConvention, Integer32):
    description = " This integer value represents the operational or administrative status of the system. Also used as alarm severity. Depending on situation there may be limits on allowed values. Operational values: (1) unknown - status has not yet been defined (2) normal - there are no activated alarms (3) observation - OA, lowest level of 'abnormal' status (4) warning - A3 (5) minor - MA (6) major - CA, highest level of 'abnormal' status Administrative values: (7) unmanaged (8) restricted (9) testing (10) disabled"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("normal", 2), ("observation", 3), ("warning", 4), ("minor", 5), ("major", 6), ("unmanaged", 7), ("restricted", 8), ("testing", 9), ("disabled", 10))

class StatusChange(TextualConvention, Integer32):
    description = " Indicates 'activated' (1) or 'deactivated' (2) alarm events."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("activated", 1), ("deactivated", 2))

ident = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1))
identManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identManufacturer.setStatus('current')
if mibBuilder.loadTexts: identManufacturer.setDescription(' The name of the equipment manufacturer.')
identModel = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identModel.setStatus('current')
if mibBuilder.loadTexts: identModel.setDescription(' The manufacturers model designation of the power system.')
identControllerFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identControllerFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: identControllerFirmwareVersion.setDescription(' The firmware (software) version of the controller.')
identName = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identName.setStatus('current')
if mibBuilder.loadTexts: identName.setDescription(' The name of the power plant. This object should be set by the administrator.')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2))
systemStatus = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 1), Status()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatus.setStatus('current')
if mibBuilder.loadTexts: systemStatus.setDescription(" Status of the complete plant (highest alarm). One of (1) unknown - status has not yet been defined (2) normal - there are no activated alarms (3) observation - OA, lowest level of 'abnormal' status (4) warning - A3 (5) minor - MA (6) major - CA, highest level of 'abnormal' status (7) unmanaged (8) restricted (9) testing (10) disabled")
systemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVoltage.setStatus('current')
if mibBuilder.loadTexts: systemVoltage.setDescription(' System voltage, stored as mV, including positive or negative sign. The integer 2147483647 represents invalid value.')
systemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCurrent.setStatus('current')
if mibBuilder.loadTexts: systemCurrent.setDescription(' System current, stored as mA, including positive or negative sign. The integer 2147483647 represents invalid value.')
systemUsedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUsedCapacity.setStatus('current')
if mibBuilder.loadTexts: systemUsedCapacity.setDescription(' Used capacity, stored as % of the total capacity. The integer 2147483647 represents invalid value.')
psBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 5))
psBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: psBatteryVoltage.setDescription('Battery voltage, stored as mV, including positive or negative sign. The integer 2147483647 represents invalid value.')
psBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: psBatteryCurrent.setDescription('Battery current, stored as mA, including positive or negative sign. The integer 2147483647 represents invalid value.')
psInput = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 6))
psInputLineAVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psInputLineAVoltage.setStatus('current')
if mibBuilder.loadTexts: psInputLineAVoltage.setDescription('The AC line A voltage, stored as mV. The integer 2147483647 represents invalid value.')
psInputLineBVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psInputLineBVoltage.setStatus('current')
if mibBuilder.loadTexts: psInputLineBVoltage.setDescription('The AC line B voltage, stored as mV. The integer 2147483647 represents invalid value.')
psInputLineCVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psInputLineCVoltage.setStatus('current')
if mibBuilder.loadTexts: psInputLineCVoltage.setDescription('The AC line C voltage, stored as mV. The integer 2147483647 represents invalid value.')
psTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 7))
psTemperature1 = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTemperature1.setStatus('current')
if mibBuilder.loadTexts: psTemperature1.setDescription('The first route temperature, stored as 0.001 Celsius degree. The integer 2147483647 represents invalid value.')
psTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTemperature2.setStatus('current')
if mibBuilder.loadTexts: psTemperature2.setDescription('The second route temperature, stored as 0.001 Celsius degree. The integer 2147483647 represents invalid value..')
psStatusCommunication = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("interrupt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStatusCommunication.setStatus('current')
if mibBuilder.loadTexts: psStatusCommunication.setDescription('The status of communication with the Power System. interrupt(3) indicates some errors occurred between Power System and agent.')
psStatusBatteryMode = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 1), ("FloatCharging", 2), ("ShortTest", 3), ("BCForTest", 4), ("ManualTesting", 5), ("PlanTesting", 6), ("ACFailTesting", 7), ("ACFail", 8), ("ManualBC", 9), ("AutoBC", 10), ("CyclicBC", 11), ("MasterBC", 12), ("MasterBT", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStatusBatteryMode.setStatus('current')
if mibBuilder.loadTexts: psStatusBatteryMode.setDescription('The status of battery modes, FloatCharging(2), ShortTest(3), BoostChargingForTest(4), ManualTesting(5), PlanTesting(6), ACFailTesting(7), ACFail(8), ManualBoostCharging(9), AutoBoostCharging(10), CyclicBoostCharging(11), MasterBoostCharging(12), MasterBateryTesting(13).')
psSMNumber = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 10))
psSMACNumber = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSMACNumber.setStatus('current')
if mibBuilder.loadTexts: psSMACNumber.setDescription('The number of SM AC module.')
psSMBATNumber = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSMBATNumber.setStatus('current')
if mibBuilder.loadTexts: psSMBATNumber.setDescription('The number of SM BAT module.')
psSMIONumber = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 2, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSMIONumber.setStatus('current')
if mibBuilder.loadTexts: psSMIONumber.setDescription('The number of SM IO module.')
alarmLastTrapNo = MibScalar((1, 3, 6, 1, 4, 1, 6302, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLastTrapNo.setStatus('current')
if mibBuilder.loadTexts: alarmLastTrapNo.setDescription(' The sequence number of last submitted alarm trap, also last row in alarmTrapTable.')
alarmTrapTable = MibTable((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4), )
if mibBuilder.loadTexts: alarmTrapTable.setStatus('current')
if mibBuilder.loadTexts: alarmTrapTable.setDescription(' Table holding information about the submitted alarm traps.')
alarmTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1), ).setIndexNames((0, "EES-POWER-MIB", "alarmTrapNo"))
if mibBuilder.loadTexts: alarmTrapEntry.setStatus('current')
if mibBuilder.loadTexts: alarmTrapEntry.setDescription(' An entry (conceptual row) in the alarmTrapTable.')
alarmTrapNo = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTrapNo.setStatus('current')
if mibBuilder.loadTexts: alarmTrapNo.setDescription(' The unique sequence number of this alarm trap.')
alarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTime.setStatus('current')
if mibBuilder.loadTexts: alarmTime.setDescription(' Date and time when event occured (local time), including timezone if supported by controller.')
alarmStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 3), StatusChange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatusChange.setStatus('current')
if mibBuilder.loadTexts: alarmStatusChange.setDescription(' The type of alarm change. One of (1) activated (2) deactivated')
alarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 4), Status()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmSeverity.setDescription(' The severity of the alarm. One of (3) observation - OA, lowest level of alarm severity (4) warning - A3 (5) minor - MA (6) major - CA, highest level of alarm severity')
alarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDescription.setStatus('current')
if mibBuilder.loadTexts: alarmDescription.setDescription(' Free-text description of alarm.')
alarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 6302, 2, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmType.setStatus('current')
if mibBuilder.loadTexts: alarmType.setDescription(' Alarm type, i.e. an integer specifying the type of alarm.')
powerEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 6302, 2, 1, 5))
alarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 6302, 2, 1, 5, 1)).setObjects(("EES-POWER-MIB", "alarmTrapNo"), ("EES-POWER-MIB", "alarmTime"), ("EES-POWER-MIB", "alarmStatusChange"), ("EES-POWER-MIB", "alarmSeverity"), ("EES-POWER-MIB", "alarmDescription"), ("EES-POWER-MIB", "alarmType"))
if mibBuilder.loadTexts: alarmTrap.setStatus('current')
if mibBuilder.loadTexts: alarmTrap.setDescription(' An alarm trap is sent when an alarm occurs (activated) or returns to normal state (deactivated). Alarm traps are logged in alarmTrapTable. Variables in this trap: * alarmTrapNo - The unique sequence number of this alarm trap. * alarmTime - Date and time when event occured (local time), including timezone if supported by controller. * alarmStatusChange - (1) activated or (2) deactivated. * alarmSeverity - Integer describing the severity of the alarm. * alarmDescription - Free-text description of alarm. * alarmType - Integer indicating type of alarm.')
mibBuilder.exportSymbols("EES-POWER-MIB", Status=Status, alarmTrapNo=alarmTrapNo, alarmSeverity=alarmSeverity, identControllerFirmwareVersion=identControllerFirmwareVersion, powerEvents=powerEvents, psBatteryVoltage=psBatteryVoltage, psBatteryCurrent=psBatteryCurrent, alarmTrapTable=alarmTrapTable, alarmTime=alarmTime, powerMIB=powerMIB, psStatusBatteryMode=psStatusBatteryMode, psInputLineCVoltage=psInputLineCVoltage, psTemperature1=psTemperature1, systemUsedCapacity=systemUsedCapacity, psSMNumber=psSMNumber, PYSNMP_MODULE_ID=powerMIB, psInput=psInput, alarmTrapEntry=alarmTrapEntry, alarmStatusChange=alarmStatusChange, pysmi_global=pysmi_global, ees=ees, psTemperature2=psTemperature2, psSMACNumber=psSMACNumber, psTemperature=psTemperature, system=system, StatusChange=StatusChange, systemStatus=systemStatus, alarmType=alarmType, alarmDescription=alarmDescription, identManufacturer=identManufacturer, psSMIONumber=psSMIONumber, systemVoltage=systemVoltage, psStatusCommunication=psStatusCommunication, psSMBATNumber=psSMBATNumber, psBattery=psBattery, identName=identName, psInputLineBVoltage=psInputLineBVoltage, alarmLastTrapNo=alarmLastTrapNo, psInputLineAVoltage=psInputLineAVoltage, ident=ident, alarmTrap=alarmTrap, systemCurrent=systemCurrent, identModel=identModel)
