#
# PySNMP MIB module DX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:55:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, iso, NotificationType, Counter64, Integer32, Gauge32, Unsigned32, TimeTicks, ModuleIdentity, Bits, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "NotificationType", "Counter64", "Integer32", "Gauge32", "Unsigned32", "TimeTicks", "ModuleIdentity", "Bits", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dxMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3327, 21))
dxMIB.setRevisions(('2005-11-08 15:36',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dxMIB.setRevisionsDescriptions(('SNMPv2-compliant release.',))
if mibBuilder.loadTexts: dxMIB.setLastUpdated('200511081536Z')
if mibBuilder.loadTexts: dxMIB.setOrganization('Computer Associates Intl. http://www.ca.com')
if mibBuilder.loadTexts: dxMIB.setContactInfo('ComputerAssociatesCustomerSupport@ca.com')
if mibBuilder.loadTexts: dxMIB.setDescription('This module contains eTrust Directory-specific SNMP information.')
eTrustDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 3327))
dx_MULTIWRITE_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3327, 21, 1)).setLabel("dx-MULTIWRITE-MIB")
dxMWTable = MibTable((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1), )
if mibBuilder.loadTexts: dxMWTable.setStatus('current')
if mibBuilder.loadTexts: dxMWTable.setDescription(' The table holding information relating to the MW status of remote DSAs.')
dxMWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1), ).setIndexNames((0, "DX-MIB", "dxMWIndex"))
if mibBuilder.loadTexts: dxMWEntry.setStatus('current')
if mibBuilder.loadTexts: dxMWEntry.setDescription(' Entry containing information relating to the MW status of remote DSAs.')
dxMWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dxMWIndex.setStatus('current')
if mibBuilder.loadTexts: dxMWIndex.setDescription(' Create a unique key to identify rows of MW information')
dxRemoteDsaName = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxRemoteDsaName.setStatus('current')
if mibBuilder.loadTexts: dxRemoteDsaName.setDescription(' Name of the current Remote DSA')
dxMWQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxMWQueueLength.setStatus('current')
if mibBuilder.loadTexts: dxMWQueueLength.setDescription(' The number of currently MWs outstanding')
dxMWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("internal-error", 0), ("ok", 1), ("failed", 2), ("failed-no-dsa", 3), ("non-existent", 4), ("recovering", 5), ("disp-failed", 6), ("wait-disp", 7), ("q-purged", 8), ("failed-sent", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxMWStatus.setStatus('current')
if mibBuilder.loadTexts: dxMWStatus.setDescription(' Status of MW queue. The meaning of the statuses are as follows: internal-error - An internal error has occurred. ok - MW is functioning correctly. failed - The MW DSA is not contactable. Update will be queued. The uncontactable DSA needs attention. failed-no-dsa - MW Update failed. Knowledge of DSA lost. non-existent - Waiting for DISP but knowledge of DSA lost. recovering - MW DSA has been contacted and being updated. disp-failed - A failure occurred during DISP. The cause of this needs to be resolved before MW will continue. wait-disp - Waiting for DISP to complete before MWing. q-purged - MW queue was purged and MW to the DSA disabled. failed-sent - Have sent an update to a previously uncontactable DSA and waiting on a response.')
dxMWPendingRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxMWPendingRemote.setStatus('current')
if mibBuilder.loadTexts: dxMWPendingRemote.setDescription(' Gauge of pending remote MW operations')
dxMWConfirmedLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 3327, 21, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxMWConfirmedLocal.setStatus('current')
if mibBuilder.loadTexts: dxMWConfirmedLocal.setDescription(' Gauge of queued MW operations that have been applied locally.')
dx_STATISTICS_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3327, 21, 2)).setLabel("dx-STATISTICS-MIB")
dxStatsAssocs = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsAssocs.setStatus('current')
if mibBuilder.loadTexts: dxStatsAssocs.setDescription(' The current number of associations')
dxStatsNilCredit = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsNilCredit.setStatus('current')
if mibBuilder.loadTexts: dxStatsNilCredit.setDescription(' The number of times flow control was applied to any association')
dxStatsNoTicks = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsNoTicks.setStatus('current')
if mibBuilder.loadTexts: dxStatsNoTicks.setDescription(' The number of times in the last minute processing did not occur NOTE: This requires stats logging/tracing to enable')
dxStatsQueue = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsQueue.setStatus('current')
if mibBuilder.loadTexts: dxStatsQueue.setDescription(' The number of outstanding operations')
dxStatsBusy = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsBusy.setStatus('current')
if mibBuilder.loadTexts: dxStatsBusy.setDescription(' The percentage of time in the last minute the DSA was busy NOTE: This requires stats logging/tracing to enable')
dxStatsOps = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsOps.setStatus('current')
if mibBuilder.loadTexts: dxStatsOps.setDescription(' The total number of operations processed since DSA was started')
dxStatsEntries = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsEntries.setStatus('current')
if mibBuilder.loadTexts: dxStatsEntries.setDescription(' The total number of entries returned since DSA was started')
dxStatsMWQ = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxStatsMWQ.setStatus('current')
if mibBuilder.loadTexts: dxStatsMWQ.setDescription(' The number of queued multiwrite operations')
dx_CACHE_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3327, 21, 3)).setLabel("dx-CACHE-MIB")
dxCacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("internal-error", 0), ("cache-disabled", 1), ("cache-building", 2), ("cache-ok", 3), ("cache-dirty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheStatus.setStatus('current')
if mibBuilder.loadTexts: dxCacheStatus.setDescription(' Status of DxCache. The meaning of the statuses are as follows: internal-error - An internal error has occurred. cache-disabled - DxCache is disabled (see trace log if unexpected): - Not turned on - Had a problem loading - Had a problem during an entry update - Has exceeded the maximum configured size - Machine has run out of memory - etc etc cache-building - DxCache is currently loading information from the backend. cache-ok - DxCache is up and running. cache-dirty - The DSA has received a DISP update. DxCache will be refreshed')
dxCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheSize.setStatus('current')
if mibBuilder.loadTexts: dxCacheSize.setDescription(' Memory in (mb) currently being used by DxCache.')
dxCacheSearchHits = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheSearchHits.setStatus('current')
if mibBuilder.loadTexts: dxCacheSearchHits.setDescription(' Number of search requests serviced by DxCache.')
dxCacheSearchMisses = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheSearchMisses.setStatus('current')
if mibBuilder.loadTexts: dxCacheSearchMisses.setDescription(' Number of search requests going through to the backend.')
dxCacheSequentialScans = MibScalar((1, 3, 6, 1, 4, 1, 3327, 21, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dxCacheSequentialScans.setStatus('current')
if mibBuilder.loadTexts: dxCacheSequentialScans.setDescription(' Number of searches requiring a sequential scan of the cache.')
mibBuilder.exportSymbols("DX-MIB", dxMIB=dxMIB, dxMWIndex=dxMWIndex, dxMWTable=dxMWTable, dxCacheStatus=dxCacheStatus, dxMWStatus=dxMWStatus, dxCacheSequentialScans=dxCacheSequentialScans, dxCacheSize=dxCacheSize, dxStatsNilCredit=dxStatsNilCredit, dxStatsQueue=dxStatsQueue, dxMWConfirmedLocal=dxMWConfirmedLocal, dxStatsEntries=dxStatsEntries, dxMWEntry=dxMWEntry, PYSNMP_MODULE_ID=dxMIB, eTrustDirectory=eTrustDirectory, dx_MULTIWRITE_MIB=dx_MULTIWRITE_MIB, dxRemoteDsaName=dxRemoteDsaName, dxStatsOps=dxStatsOps, dx_CACHE_MIB=dx_CACHE_MIB, dxMWPendingRemote=dxMWPendingRemote, dxStatsMWQ=dxStatsMWQ, dxMWQueueLength=dxMWQueueLength, dxStatsAssocs=dxStatsAssocs, dxCacheSearchMisses=dxCacheSearchMisses, dx_STATISTICS_MIB=dx_STATISTICS_MIB, dxStatsNoTicks=dxStatsNoTicks, dxCacheSearchHits=dxCacheSearchHits, dxStatsBusy=dxStatsBusy)
