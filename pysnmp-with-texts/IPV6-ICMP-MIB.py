#
# PySNMP MIB module IPV6-ICMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPV6-ICMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:56:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ipv6IfEntry, = mibBuilder.importSymbols("IPV6-MIB", "ipv6IfEntry")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, ObjectIdentity, TimeTicks, Counter64, mib_2, IpAddress, MibIdentifier, NotificationType, Bits, ModuleIdentity, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "ObjectIdentity", "TimeTicks", "Counter64", "mib-2", "IpAddress", "MibIdentifier", "NotificationType", "Bits", "ModuleIdentity", "Gauge32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ipv6IcmpMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 56))
if mibBuilder.loadTexts: ipv6IcmpMIB.setLastUpdated('9801082155Z')
if mibBuilder.loadTexts: ipv6IcmpMIB.setOrganization('IETF IPv6 Working Group')
if mibBuilder.loadTexts: ipv6IcmpMIB.setContactInfo(' Dimitry Haskin Postal: Bay Networks, Inc. 660 Techology Park Drive. Billerica, MA 01821 US Tel: +1-978-916-8124 E-mail: dhaskin@baynetworks.com Steve Onishi Postal: Bay Networks, Inc. 3 Federal Street Billerica, MA 01821 US Tel: +1-978-916-3816 E-mail: sonishi@baynetworks.com')
if mibBuilder.loadTexts: ipv6IcmpMIB.setDescription('The MIB module for entities implementing the ICMPv6.')
ipv6IcmpMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 56, 1))
ipv6IfIcmpTable = MibTable((1, 3, 6, 1, 2, 1, 56, 1, 1), )
if mibBuilder.loadTexts: ipv6IfIcmpTable.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpTable.setDescription('IPv6 ICMP statistics. This table contains statistics of ICMPv6 messages that are received and sourced by the entity.')
ipv6IfIcmpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 56, 1, 1, 1), )
ipv6IfEntry.registerAugmentions(("IPV6-ICMP-MIB", "ipv6IfIcmpEntry"))
ipv6IfIcmpEntry.setIndexNames(*ipv6IfEntry.getIndexNames())
if mibBuilder.loadTexts: ipv6IfIcmpEntry.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpEntry.setDescription('An ICMPv6 statistics entry containing objects at a particular IPv6 interface. Note that a receiving interface is the interface to which a given ICMPv6 message is addressed which may not be necessarily the input interface for the message. Similarly, the sending interface is the interface that sources a given ICMP message which is usually but not necessarily the output interface for the message.')
ipv6IfIcmpInMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInMsgs.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInMsgs.setDescription('The total number of ICMP messages received by the interface which includes all those counted by ipv6IfIcmpInErrors. Note that this interface is the interface to which the ICMP messages were addressed which may not be necessarily the input interface for the messages.')
ipv6IfIcmpInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInErrors.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInErrors.setDescription('The number of ICMP messages which the interface received but determined as having ICMP-specific errors (bad ICMP checksums, bad length, etc.).')
ipv6IfIcmpInDestUnreachs = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInDestUnreachs.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInDestUnreachs.setDescription('The number of ICMP Destination Unreachable messages received by the interface.')
ipv6IfIcmpInAdminProhibs = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInAdminProhibs.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInAdminProhibs.setDescription('The number of ICMP destination unreachable/communication administratively prohibited messages received by the interface.')
ipv6IfIcmpInTimeExcds = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInTimeExcds.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInTimeExcds.setDescription('The number of ICMP Time Exceeded messages received by the interface.')
ipv6IfIcmpInParmProblems = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInParmProblems.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInParmProblems.setDescription('The number of ICMP Parameter Problem messages received by the interface.')
ipv6IfIcmpInPktTooBigs = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInPktTooBigs.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInPktTooBigs.setDescription('The number of ICMP Packet Too Big messages received by the interface.')
ipv6IfIcmpInEchos = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInEchos.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInEchos.setDescription('The number of ICMP Echo (request) messages received by the interface.')
ipv6IfIcmpInEchoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInEchoReplies.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInEchoReplies.setDescription('The number of ICMP Echo Reply messages received by the interface.')
ipv6IfIcmpInRouterSolicits = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInRouterSolicits.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInRouterSolicits.setDescription('The number of ICMP Router Solicit messages received by the interface.')
ipv6IfIcmpInRouterAdvertisements = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInRouterAdvertisements.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInRouterAdvertisements.setDescription('The number of ICMP Router Advertisement messages received by the interface.')
ipv6IfIcmpInNeighborSolicits = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInNeighborSolicits.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInNeighborSolicits.setDescription('The number of ICMP Neighbor Solicit messages received by the interface.')
ipv6IfIcmpInNeighborAdvertisements = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInNeighborAdvertisements.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInNeighborAdvertisements.setDescription('The number of ICMP Neighbor Advertisement messages received by the interface.')
ipv6IfIcmpInRedirects = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInRedirects.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInRedirects.setDescription('The number of Redirect messages received by the interface.')
ipv6IfIcmpInGroupMembQueries = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInGroupMembQueries.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInGroupMembQueries.setDescription('The number of ICMPv6 Group Membership Query messages received by the interface.')
ipv6IfIcmpInGroupMembResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInGroupMembResponses.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInGroupMembResponses.setDescription('The number of ICMPv6 Group Membership Response messages received by the interface.')
ipv6IfIcmpInGroupMembReductions = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpInGroupMembReductions.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpInGroupMembReductions.setDescription('The number of ICMPv6 Group Membership Reduction messages received by the interface.')
ipv6IfIcmpOutMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutMsgs.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutMsgs.setDescription('The total number of ICMP messages which this interface attempted to send. Note that this counter includes all those counted by icmpOutErrors.')
ipv6IfIcmpOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutErrors.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutErrors.setDescription("The number of ICMP messages which this interface did not send due to problems discovered within ICMP such as a lack of buffers. This value should not include errors discovered outside the ICMP layer such as the inability of IPv6 to route the resultant datagram. In some implementations there may be no types of error which contribute to this counter's value.")
ipv6IfIcmpOutDestUnreachs = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutDestUnreachs.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutDestUnreachs.setDescription('The number of ICMP Destination Unreachable messages sent by the interface.')
ipv6IfIcmpOutAdminProhibs = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutAdminProhibs.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutAdminProhibs.setDescription('Number of ICMP dest unreachable/communication administratively prohibited messages sent.')
ipv6IfIcmpOutTimeExcds = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutTimeExcds.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutTimeExcds.setDescription('The number of ICMP Time Exceeded messages sent by the interface.')
ipv6IfIcmpOutParmProblems = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutParmProblems.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutParmProblems.setDescription('The number of ICMP Parameter Problem messages sent by the interface.')
ipv6IfIcmpOutPktTooBigs = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutPktTooBigs.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutPktTooBigs.setDescription('The number of ICMP Packet Too Big messages sent by the interface.')
ipv6IfIcmpOutEchos = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutEchos.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutEchos.setDescription('The number of ICMP Echo (request) messages sent by the interface.')
ipv6IfIcmpOutEchoReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutEchoReplies.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutEchoReplies.setDescription('The number of ICMP Echo Reply messages sent by the interface.')
ipv6IfIcmpOutRouterSolicits = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutRouterSolicits.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutRouterSolicits.setDescription('The number of ICMP Router Solicitation messages sent by the interface.')
ipv6IfIcmpOutRouterAdvertisements = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutRouterAdvertisements.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutRouterAdvertisements.setDescription('The number of ICMP Router Advertisement messages sent by the interface.')
ipv6IfIcmpOutNeighborSolicits = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutNeighborSolicits.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutNeighborSolicits.setDescription('The number of ICMP Neighbor Solicitation messages sent by the interface.')
ipv6IfIcmpOutNeighborAdvertisements = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutNeighborAdvertisements.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutNeighborAdvertisements.setDescription('The number of ICMP Neighbor Advertisement messages sent by the interface.')
ipv6IfIcmpOutRedirects = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutRedirects.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutRedirects.setDescription('The number of Redirect messages sent. For a host, this object will always be zero, since hosts do not send redirects.')
ipv6IfIcmpOutGroupMembQueries = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutGroupMembQueries.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutGroupMembQueries.setDescription('The number of ICMPv6 Group Membership Query messages sent.')
ipv6IfIcmpOutGroupMembResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutGroupMembResponses.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutGroupMembResponses.setDescription('The number of ICMPv6 Group Membership Response messages sent.')
ipv6IfIcmpOutGroupMembReductions = MibTableColumn((1, 3, 6, 1, 2, 1, 56, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6IfIcmpOutGroupMembReductions.setStatus('current')
if mibBuilder.loadTexts: ipv6IfIcmpOutGroupMembReductions.setDescription('The number of ICMPv6 Group Membership Reduction messages sent.')
ipv6IcmpConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 56, 2))
ipv6IcmpCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 56, 2, 1))
ipv6IcmpGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 56, 2, 2))
ipv6IcmpCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 56, 2, 1, 1)).setObjects(("IPV6-ICMP-MIB", "ipv6IcmpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv6IcmpCompliance = ipv6IcmpCompliance.setStatus('current')
if mibBuilder.loadTexts: ipv6IcmpCompliance.setDescription('The compliance statement for SNMPv2 entities which implement ICMPv6.')
ipv6IcmpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 56, 2, 2, 1)).setObjects(("IPV6-ICMP-MIB", "ipv6IfIcmpInMsgs"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInErrors"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInDestUnreachs"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInAdminProhibs"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInTimeExcds"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInParmProblems"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInPktTooBigs"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInEchos"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInEchoReplies"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInRouterSolicits"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInRouterAdvertisements"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInNeighborSolicits"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInNeighborAdvertisements"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInRedirects"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInGroupMembQueries"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInGroupMembResponses"), ("IPV6-ICMP-MIB", "ipv6IfIcmpInGroupMembReductions"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutMsgs"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutErrors"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutDestUnreachs"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutAdminProhibs"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutTimeExcds"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutParmProblems"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutPktTooBigs"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutEchos"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutEchoReplies"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutRouterSolicits"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutRouterAdvertisements"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutNeighborSolicits"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutNeighborAdvertisements"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutRedirects"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutGroupMembQueries"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutGroupMembResponses"), ("IPV6-ICMP-MIB", "ipv6IfIcmpOutGroupMembReductions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipv6IcmpGroup = ipv6IcmpGroup.setStatus('current')
if mibBuilder.loadTexts: ipv6IcmpGroup.setDescription('The ICMPv6 group of objects providing information specific to ICMPv6.')
mibBuilder.exportSymbols("IPV6-ICMP-MIB", ipv6IcmpGroup=ipv6IcmpGroup, ipv6IfIcmpInEchoReplies=ipv6IfIcmpInEchoReplies, ipv6IfIcmpOutAdminProhibs=ipv6IfIcmpOutAdminProhibs, ipv6IfIcmpInErrors=ipv6IfIcmpInErrors, ipv6IfIcmpInNeighborSolicits=ipv6IfIcmpInNeighborSolicits, ipv6IfIcmpOutGroupMembQueries=ipv6IfIcmpOutGroupMembQueries, ipv6IcmpGroups=ipv6IcmpGroups, PYSNMP_MODULE_ID=ipv6IcmpMIB, ipv6IfIcmpOutMsgs=ipv6IfIcmpOutMsgs, ipv6IfIcmpOutRouterSolicits=ipv6IfIcmpOutRouterSolicits, ipv6IfIcmpInGroupMembReductions=ipv6IfIcmpInGroupMembReductions, ipv6IfIcmpOutRedirects=ipv6IfIcmpOutRedirects, ipv6IfIcmpOutNeighborAdvertisements=ipv6IfIcmpOutNeighborAdvertisements, ipv6IfIcmpOutGroupMembReductions=ipv6IfIcmpOutGroupMembReductions, ipv6IfIcmpInGroupMembQueries=ipv6IfIcmpInGroupMembQueries, ipv6IfIcmpInMsgs=ipv6IfIcmpInMsgs, ipv6IfIcmpOutTimeExcds=ipv6IfIcmpOutTimeExcds, ipv6IfIcmpInRedirects=ipv6IfIcmpInRedirects, ipv6IfIcmpEntry=ipv6IfIcmpEntry, ipv6IcmpMIB=ipv6IcmpMIB, ipv6IfIcmpOutEchos=ipv6IfIcmpOutEchos, ipv6IfIcmpOutNeighborSolicits=ipv6IfIcmpOutNeighborSolicits, ipv6IfIcmpInRouterAdvertisements=ipv6IfIcmpInRouterAdvertisements, ipv6IfIcmpInPktTooBigs=ipv6IfIcmpInPktTooBigs, ipv6IfIcmpOutErrors=ipv6IfIcmpOutErrors, ipv6IcmpConformance=ipv6IcmpConformance, ipv6IfIcmpInTimeExcds=ipv6IfIcmpInTimeExcds, ipv6IfIcmpOutParmProblems=ipv6IfIcmpOutParmProblems, ipv6IcmpCompliances=ipv6IcmpCompliances, ipv6IcmpMIBObjects=ipv6IcmpMIBObjects, ipv6IfIcmpOutPktTooBigs=ipv6IfIcmpOutPktTooBigs, ipv6IfIcmpInAdminProhibs=ipv6IfIcmpInAdminProhibs, ipv6IfIcmpInEchos=ipv6IfIcmpInEchos, ipv6IfIcmpTable=ipv6IfIcmpTable, ipv6IfIcmpInRouterSolicits=ipv6IfIcmpInRouterSolicits, ipv6IfIcmpInNeighborAdvertisements=ipv6IfIcmpInNeighborAdvertisements, ipv6IfIcmpOutDestUnreachs=ipv6IfIcmpOutDestUnreachs, ipv6IfIcmpInParmProblems=ipv6IfIcmpInParmProblems, ipv6IfIcmpOutGroupMembResponses=ipv6IfIcmpOutGroupMembResponses, ipv6IfIcmpInDestUnreachs=ipv6IfIcmpInDestUnreachs, ipv6IfIcmpOutRouterAdvertisements=ipv6IfIcmpOutRouterAdvertisements, ipv6IfIcmpOutEchoReplies=ipv6IfIcmpOutEchoReplies, ipv6IfIcmpInGroupMembResponses=ipv6IfIcmpInGroupMembResponses, ipv6IcmpCompliance=ipv6IcmpCompliance)
