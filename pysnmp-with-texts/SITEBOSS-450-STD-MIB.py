#
# PySNMP MIB module SITEBOSS-450-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SITEBOSS-450-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
asentria, = mibBuilder.importSymbols("ASENTRIA-ROOT-MIB", "asentria")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Bits, NotificationType, Gauge32, ObjectIdentity, Integer32, MibIdentifier, Counter32, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Bits", "NotificationType", "Gauge32", "ObjectIdentity", "Integer32", "MibIdentifier", "Counter32", "iso", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
s450 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3052, 17))
s450.setRevisions(('2013-07-02 04:35', '2013-05-28 04:34', '2013-05-10 04:33', '2013-04-10 04:32', '2013-03-15 04:31', '2013-03-14 04:30', '2013-02-06 04:29', '2013-01-14 04:28', '2012-11-19 04:27', '2012-08-22 04:26', '2012-08-02 04:25', '2012-07-09 04:24', '2012-07-06 04:23', '2012-06-12 04:22', '2012-05-02 04:21', '2012-04-02 04:20', '2012-03-15 04:19', '2012-02-28 04:18', '2012-02-21 04:17', '2012-02-20 04:16', '2012-02-14 04:15', '2012-02-03 09:04', '2012-01-16 09:02', '2011-12-16 09:00', '2011-12-06 09:00', '2011-12-05 09:00', '2011-08-08 09:00', '2011-08-01 09:00', '2011-07-08 09:00', '2011-05-18 09:00', '2011-04-15 09:00', '2011-01-05 09:00', '2010-12-02 09:00', '2010-11-03 09:00', '2010-08-24 09:00', '2010-05-17 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: s450.setRevisionsDescriptions(('-v4.35 -Added snmpPoll objects (OMX-394). -Applicable since unit version 2.09.560.', '-v4.34 -Fixed incorrect SYNTAX for sysCharMask (OMX-328). -Added evGlobal branch (OMX-228). -Applicable since unit version 2.09.500.', '-v4.33 -Fixed incorrect SYNTAX statements for various objects (OMX-314). -Removed references to No Data events. -Applicable since unit version 2.09.380.', '-v4.32 -Added non-weekly job scheduling objects (OMX-252). -Applicable since unit version 2.09.310.', '-v4.31 -Renamed sysLocation branch to sysLoc (OMX-198). -Applicable since unit version 2.09.240.', '-v4.30 -Added snmpProxy branch (OMX-190). -Applicable since unit version 2.09.280.', '-v4.29 -Renamed telnet* objects. -Applicable since unit version 2.09.240.', '-v4.28 -Added evReset branch and associated notification (OMX-83). -Applicable since unit version 2.09.220.', '-v4.27 -Removed notification capture objects. -Added sysFileTransfer and sysUpdate objects. (BN 4632) -Added ethRouting objects. (BN 4620) -Applicable since unit version 2.09.120.', '-v4.26 -Added additional AC power monitor items.', '-v4.25 -Removed non-weekly job schedule objects.', '-v4.24 -Removed wirelessBand object.', '-v4.23 -Added camera notification definition. -Updated comment for secUserConnectVia object.', '-v4.22 -Removed user credentials objects.', '-v4.21 -Added object for location. -Fixed objects for Generator Exercising Non-Start event.', '-v4.20 -Revamped battery monitor objects.', '-v4.19 -Added battery monitor status and config objects. -Added AC power monitor config objects.', '-v4.18 -Fixed acpmsIndex range. -Added various objects for combined sensor status. -Changed meaning of esPointAliasValueStr for relay/power outputs.', '-v4.17 -Removed genRunReqAsm object.', '-v4.16 -Added objects for fuel sensor configuration; removed battery monitor status objects.', '-v4.15 -Added objects for job scheduling, generator exercising, and battery monitor status.', '-v4.14 -Added generatorNonStartTrap notification definition.', '-v4.13 -Jumped to 4.xx Asentria version series. The version 4 series officially may improve compatibility with certain NMS installations by grouping all notifications in a dedicated branch. No functional change from version 1.12.', '-v1.12 -Added s450FuelSensorVolumeSuddenChangeTrap and s450FuelSensorVolumeSlowChangeTrap notification definitions.', '-v1.11 -Moved notification definitions to dedicated branch.', '-v1.10 -Added s450StockScriptTrap notification definition.', '-v1.09 -Added s450StockOutputTrap notification definition.', '-v1.08 -Added evMgmtReprocess object. -Added acPowerMonitorStatus branch.', '-v1.07 -Added wirelessModemStatus branch. -Fixed bug where fuelSensorStatus branch was at the wrong object branch.', '-v1.06 -Added s450FuelSensorVolumeTrap definition. -Added fuel sensor status objects.', '-v1.05 -Removed reference to nonexistent data events.', '-v1.04 -Added espcCCNormalThreshold object.', '-v1.03 -Added esPointAliasValueStr object to simplify getting the current alias value of a CC input according to its current event state. -Added s450FuelSensorDisconnectTrap definition.', '-v1.02 -Changed deadband, threshold, and current values for temperature sensors from integer to floating-point type. This means the SNMP object type for the temperature settings (deadbands and thresholds) changed from Integer32 to DisplayString. -Fixed bug where SNMP integer range defined in the MIB for trapIncludedValue was 16-bit instead of 32-bit.', '-v1.01 -Fixed bug where some stock traps had too few varbinds declared. -Removed useless trap definitions. -Corrected product number in comments for each declared object.', '-v1.00 -Initial version',))
if mibBuilder.loadTexts: s450.setLastUpdated('201307020435Z')
if mibBuilder.loadTexts: s450.setOrganization('Asentria Corporation')
if mibBuilder.loadTexts: s450.setContactInfo('Phone: 206-344-8800 Fax: 206-344-2116 Email: support@asentria.com')
if mibBuilder.loadTexts: s450.setDescription('MIB module for managing Asentria SiteBoss 450')
s450notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 0))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 1))
eventSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1))
dataEventStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 1, 2))
fuelSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6))
wirelessModemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7))
acPowerMonitorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8))
batteryMonitorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2))
eventSensorBasics = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1))
eventSensorPointConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2))
serialPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1))
ethernet1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1))
eth1VLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5))
eth1VLAN1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 1))
eth1VLAN2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 2))
eth1VLAN3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 3))
eth1VLAN4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 4))
eth1VLAN5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 5))
eth1VLAN6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 6))
ethernet2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2))
eth2VLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5))
eth2VLAN1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 1))
eth2VLAN2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 2))
eth2VLAN3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 3))
eth2VLAN4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 4))
eth2VLAN5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 5))
eth2VLAN6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 6))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8))
snmpNotificationTx = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 7))
snmpProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 8))
snmpPoll = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9))
ftpPush = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9))
routing = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 11))
netSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 12))
ipRestriction = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 12, 1))
rts = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13))
rtsAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14))
trapInclude = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14, 1))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 16))
email = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 17))
netAdvanced = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 18))
web = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 19))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 8))
console = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 10))
unitSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11))
secCore = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1))
secFactory = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 3))
event = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12))
evCore = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1))
evLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 3))
evMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 4))
evSched1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5))
evSched2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6))
evNoSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 9))
fuelSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11))
acPowerMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12))
batteryMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14))
evReset = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 16))
evGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 18))
action = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14))
actionSched = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 3))
actionAsentria = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 4))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16))
sysTime = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1))
sysTimeNet = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 4))
sysPT = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 2))
sysTimeStamp = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 8))
sysLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 9))
sysCRDB = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10))
sysLoc = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 14))
sysFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 17))
sysUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 18))
auditLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17))
scripting = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19))
genSet = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1))
genSetRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 2))
genSetCC = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 3))
genRun = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2))
genRunNonstartEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 7))
calendar = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20))
productIds = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 17, 3))
esPointTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1), )
if mibBuilder.loadTexts: esPointTable.setStatus('current')
if mibBuilder.loadTexts: esPointTable.setDescription(" This table organizes 4 basic attributes of points. A point is a particular sensor on an EventSensor (e.g., temperature, humidity, contact closure 2, relay 5, etc.). The 4 point attributes are its name, whether it's in its event state, the point's value as a number and its value as a string. Points are referenced by a point index. The point index is a string of 3 numbers separated by periods. It contains all the information necessary for getting a piece of data off an event sensor; namely, which EventSensor, point class, and which-sensor-of-that-class (a.k.a. point). ")
esPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "esIndexES"), (0, "SITEBOSS-450-STD-MIB", "esIndexPC"), (0, "SITEBOSS-450-STD-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: esPointEntry.setStatus('current')
if mibBuilder.loadTexts: esPointEntry.setDescription('Entry for EventSensor point table')
esIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexES.setStatus('current')
if mibBuilder.loadTexts: esIndexES.setDescription("The part of the point index that refers to an EventSensor. The point index is a string of 3 numbers separated by periods. It contains all the information necessary for getting a piece of data off an event sensor; namely, which EventSensor, point class, and which-sensor-of-that-class (a.k.a. point). This object's allowable values are 1 through 16, and 200. 200 always refers to the EventSensor inside the unit. 1 through 16 refer to additional attached EventSensors. The number corresponding to an EventSensor is determined by the user at the initial configuration time. If there is an internal sensor in the unit, it will always be the first item in the Sensor Events setup menu. For example, if a new EventSensor is configured as the 2nd entry AFTER the internal EventSensor (if one exists) in the Sensor Events Setup Menu, then that EventSensor will be known from then on as EventSensor 2. All point indeces with esIndexES=2 will now refer to that particular EventSensor. ")
esIndexPC = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexPC.setStatus('current')
if mibBuilder.loadTexts: esIndexPC.setDescription('The part of the point index that refers to point class. The point index is a string of 3 numbers separated by periods. It contains all the information necessary for getting a piece of data off an event sensor; namely, which EventSensor, point class, and which-sensor-of-that-class (a.k.a. point). The values for this object are: 1=temperature sensor 2=contact closure 3=humidity sensor 4=noise sensor 5=analog input 6=relay ')
esIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexPoint.setStatus('current')
if mibBuilder.loadTexts: esIndexPoint.setDescription('The part of the point index that delineates which sensor on the EventSensor. So this combined with esIndexPC (Point Class or type) and esIndexES (which EventSensor) uniquely defines each point (sensor or relay) attached to a unit. For example, if esIndexES is 3, esIndexPC is 1 and esIndexPoint is 4 then this is the Fourth Temperature Sensor on EventSensor number 3.')
esPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointName.setStatus('current')
if mibBuilder.loadTexts: esPointName.setDescription("The name of the point on an EventSensor. For example, 'AC temp' (in the case of the temperature sensor on an EventSensor). There can be multiple points of the same point class on an EventSensor (e.g., 8 contact closures) and multiple sensor classes on an EventSensor (e.g., temperature, contact closure, humidity). If the point referenced by a given point index is solitary (e.g., temperature sensor, because there can be only one on an EventSensor), then this object reads as '<EventSensor name>'. Setting this object for solitary point indices sets the EventSensor name only. On the other hand, if a given point is among other points of the same point class on an EventSensor, then this object reads as '<Sensor name>'. Setting this object for these NON- solitary point indices sets the sensor name only - not the EventSensor name.")
esPointInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointInEventState.setStatus('current')
if mibBuilder.loadTexts: esPointInEventState.setDescription('A number referring to the event state of a point on an EventSensor. This number can have different meanings depending on the point class. If the point class is temperature, humidity, or analog input, then the values of this object are: 1=very low 2=low 3=normal 4=high 5=very high For contact closures the values of this object are: 1=point in event state 2=point in normal state For relays the values of this object are: 1=relay energized (active) 2=relay de-energized (inactive) For any point class and any point, if the event state is undefined, then the value of this object is 0. For any point class except relay, this object is read-only. For relays, setting this object to 1 puts the relay into its active (energized) state. Setting it to 2 puts the relay into its inactive (de-energized) state. Setting it to any value greater than 2 puts the relay into its active state for that many seconds (up to 3600), after which time it puts the relay into its inactive state. ')
esPointValueInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointValueInt.setStatus('current')
if mibBuilder.loadTexts: esPointValueInt.setDescription('A read-only number referring to the value of a point on an EventSensor. If the point class is temperature, then this object is the temperature in its configured scale (default is Fahrenheit). If the point class is contact closure or relay, then this object is either 0 (open) or 1 (closed). If the point class is humidity, then this object is the percent relative humidity. If the point class is analog input, then this object is the signed input value in tenths of the configured units. If the point class is relay, then this object is either 1 (active a.k.a. energized) or 0 (inactive a.k.a. de-energized). This object cannot be used to control the relay (use esPointInEventState for that). ')
esPointValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPointValueStr.setStatus('current')
if mibBuilder.loadTexts: esPointValueStr.setDescription("A string referring to the value of a point on an EventSensor. For contact closures this object is either 'Open' or 'Closed'. For relays this object is either 'Active' (energized) or 'Inactive' (de-energized). For temperature and humidity point classes, this object is the string representation of the esPointValueInt object. For temperature, 'C' or 'F' is including in the string to indicate scale. For analog inputs, this object is the string representation of the plus/minus input in the configured units appended with the unit name. ")
esPointTimeLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPointTimeLastChange.setStatus('current')
if mibBuilder.loadTexts: esPointTimeLastChange.setDescription('The time of the last time an event was triggerred for a point on an EventSensor in MM/DD/YY HH:MM:SS format. For contact closures, the possible events are Active and Inactive. For temperature, humidity, and analog inputs, the possible events are Normal, High, Very High, Low, and Very Low. For relays, this object is a null string.')
esPointTimetickLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPointTimetickLastChange.setStatus('current')
if mibBuilder.loadTexts: esPointTimetickLastChange.setDescription('The time of the last time an event was triggerred for a point on an EventSensor in 100ths of seconds since reset. For contact closures, the possible events are Active and Inactive. For temperature, humidity, and analog inputs, the possible events are Normal, High, Very High, Low, and Very Low. For relays, this object is 0.')
esPointAliasValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPointAliasValueStr.setStatus('current')
if mibBuilder.loadTexts: esPointAliasValueStr.setDescription('For CC inputs, this is the CC active/inactive alias setting setting value that currently corresponds to the event state. So if the CC input is in the event state, then this object is the active alias setting value. If the CC input is in the normal state, then this object is the inactive alias setting value. For relay/power outputs, this is the output active/inactive alias setting value that currently corresponds to the output state. So if the output is in the active state, then this object is the active alias setting value. If the output is in hte inactive state, then this object is the inactive alias setting value. For non-CC and non-output sensors, this is the same as the esPointValueStr object.')
deStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 1, 2, 1), )
if mibBuilder.loadTexts: deStatusTable.setStatus('current')
if mibBuilder.loadTexts: deStatusTable.setDescription('Data Event Status Table')
deStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 1, 2, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "deStatusIndex"))
if mibBuilder.loadTexts: deStatusEntry.setStatus('current')
if mibBuilder.loadTexts: deStatusEntry.setDescription('EventSensor status entry')
deStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatusIndex.setStatus('current')
if mibBuilder.loadTexts: deStatusIndex.setDescription('Index for Data Events')
deStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatusName.setStatus('current')
if mibBuilder.loadTexts: deStatusName.setDescription('Data Event name')
deStatusCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatusCounter.setStatus('current')
if mibBuilder.loadTexts: deStatusCounter.setDescription("Number of times a data record has matched this event's equation. Range: 1-999999999")
deStatusThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deStatusThreshold.setStatus('current')
if mibBuilder.loadTexts: deStatusThreshold.setDescription('Number of times the equation is matched before an event is triggered. Range: 1-999999999')
fsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1), )
if mibBuilder.loadTexts: fsStatusTable.setStatus('current')
if mibBuilder.loadTexts: fsStatusTable.setDescription('Fuel sensor status table')
fsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "fsStatusIndex"))
if mibBuilder.loadTexts: fsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: fsStatusEntry.setDescription('Fuel sensor status table entry')
fsStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusIndex.setStatus('current')
if mibBuilder.loadTexts: fsStatusIndex.setDescription('Index for fuel sensors')
fsStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusName.setStatus('current')
if mibBuilder.loadTexts: fsStatusName.setDescription('Fuel sensor name')
fsStatusDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusDeviceState.setStatus('current')
if mibBuilder.loadTexts: fsStatusDeviceState.setDescription('Fuel sensor device state')
fsStatusVolumeValueString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusVolumeValueString.setStatus('current')
if mibBuilder.loadTexts: fsStatusVolumeValueString.setDescription('Fuel volume. Range is -2,147,483,648 to 2,147,483,647. This value reads -999 when the fuel sensor is disconnected')
fsStatusVolumePercentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusVolumePercentLevel.setStatus('current')
if mibBuilder.loadTexts: fsStatusVolumePercentLevel.setDescription('Height of the fluid in the tank expressed as a percentage of the tank height, in hundredths of a percent.')
fsStatusVolumeInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusVolumeInEventState.setStatus('current')
if mibBuilder.loadTexts: fsStatusVolumeInEventState.setDescription('Current event status of the fuel sensor.')
fsStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusCombined.setStatus('current')
if mibBuilder.loadTexts: fsStatusCombined.setDescription('Combined status string intended to be parsed by NMS: deviceState`deviceStateColorCode`percentRounded`valueAsFloat`volumeEventState`volumeEventStateColorCode`capacity`units`name')
wmsStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsStatus.setStatus('current')
if mibBuilder.loadTexts: wmsStatus.setDescription('Wireless modem status')
wmsSignal = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsSignal.setStatus('current')
if mibBuilder.loadTexts: wmsSignal.setDescription('Wireless modem Signal strength')
wmsRSSI = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsRSSI.setStatus('current')
if mibBuilder.loadTexts: wmsRSSI.setDescription('Wireless modem Signal strength (RSSI)')
wmsBER = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsBER.setStatus('current')
if mibBuilder.loadTexts: wmsBER.setDescription('Wireless modem Bit Error Rate')
wmsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsUpdated.setStatus('current')
if mibBuilder.loadTexts: wmsUpdated.setDescription('Wireless modem info last update time')
wmsRegistration = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsRegistration.setStatus('current')
if mibBuilder.loadTexts: wmsRegistration.setDescription('Wireless modem registration status')
wmsLAC = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsLAC.setStatus('current')
if mibBuilder.loadTexts: wmsLAC.setDescription('Wireless modem Location Area Code')
wmsCellID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCellID.setStatus('current')
if mibBuilder.loadTexts: wmsCellID.setDescription('Wireless modem Cell ID')
wmsIMSI = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsIMSI.setStatus('current')
if mibBuilder.loadTexts: wmsIMSI.setDescription('Wireless modem Internation Mobile Subscriber Identity number')
wmsPhnum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPhnum.setStatus('current')
if mibBuilder.loadTexts: wmsPhnum.setDescription('Wireless modem phone number')
wmsLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsLocalIP.setStatus('current')
if mibBuilder.loadTexts: wmsLocalIP.setDescription('Local IP address of modem on wireless network')
wmsMgfID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsMgfID.setStatus('current')
if mibBuilder.loadTexts: wmsMgfID.setDescription('Wireless modem manufacturer ID')
wmsModelID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsModelID.setStatus('current')
if mibBuilder.loadTexts: wmsModelID.setDescription('Wireless modem model ID')
wmsIMEI = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsIMEI.setStatus('current')
if mibBuilder.loadTexts: wmsIMEI.setDescription('Wireless modem International Mobile Equipment Identity number')
wmsRevID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsRevID.setStatus('current')
if mibBuilder.loadTexts: wmsRevID.setDescription('Wireless modem revision ID')
wmsNetName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsNetName.setStatus('current')
if mibBuilder.loadTexts: wmsNetName.setDescription('Wireless modem network name')
wmsGPRSStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsGPRSStatus.setStatus('current')
if mibBuilder.loadTexts: wmsGPRSStatus.setDescription('Wireless modem (E)GPRS status')
wmsBand = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsBand.setStatus('current')
if mibBuilder.loadTexts: wmsBand.setDescription('Wireless modem band')
wmsChannel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsChannel.setStatus('current')
if mibBuilder.loadTexts: wmsChannel.setDescription('Wireless modem channel')
wmsCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsCountryCode.setStatus('current')
if mibBuilder.loadTexts: wmsCountryCode.setDescription('Wireless modem country code')
wmsNetCode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsNetCode.setStatus('current')
if mibBuilder.loadTexts: wmsNetCode.setDescription('Wireless modem network code')
wmsPLMNColor = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsPLMNColor.setStatus('current')
if mibBuilder.loadTexts: wmsPLMNColor.setDescription('Wireless modem PLMN color')
wmsBScolor = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsBScolor.setStatus('current')
if mibBuilder.loadTexts: wmsBScolor.setDescription('Wireless modem BS color')
wmsMpRACH = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsMpRACH.setStatus('current')
if mibBuilder.loadTexts: wmsMpRACH.setDescription('Wireless modem max power RACH')
wmsMinRxLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsMinRxLevel.setStatus('current')
if mibBuilder.loadTexts: wmsMinRxLevel.setDescription('Wireless modem minimum receive level')
wmsBaseCoeff = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsBaseCoeff.setStatus('current')
if mibBuilder.loadTexts: wmsBaseCoeff.setDescription('Wireless modem base coefficient')
wmsSIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsSIMStatus.setStatus('current')
if mibBuilder.loadTexts: wmsSIMStatus.setDescription('WWireless modem SIM status')
wmsICCID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsICCID.setStatus('current')
if mibBuilder.loadTexts: wmsICCID.setDescription('Wireless modem SIM ICCID')
wmsModemType = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 1, 7, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmsModemType.setStatus('current')
if mibBuilder.loadTexts: wmsModemType.setDescription('Wireless modem type')
acpmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1), )
if mibBuilder.loadTexts: acpmStatusTable.setStatus('current')
if mibBuilder.loadTexts: acpmStatusTable.setDescription('AC power monitor status table')
acpmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "acpmsIndex"))
if mibBuilder.loadTexts: acpmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acpmStatusEntry.setDescription('AC power monitor status table entry')
acpmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsIndex.setStatus('current')
if mibBuilder.loadTexts: acpmsIndex.setDescription('Index for AC power monitors')
acpmsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsName.setStatus('current')
if mibBuilder.loadTexts: acpmsName.setDescription('Name for the AC power monitor device.')
acpmsAvgVoltageValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageValueStr.setDescription('Average voltage, in volts. This is calculated using the formula (register * PT ratio * 0.1). This could be either the average of the phase voltages, or the sum of the phase voltages, depending on device configuration.')
acpmsAvgVoltageMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageMinStr.setDescription('Minimum average voltage value since last reset, in volts.')
acpmsAvgVoltageMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageMaxStr.setDescription('Maximum average voltage value since last reset, in volts.')
acpmsAvgVoltageAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageAvgStr.setDescription("Average average voltage value since last reset, in volts. This is the unit's average of its measurements of the average voltage reported by the AC power monitor device.")
acpmsAvgVoltageInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgVoltageInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgVoltageInEventState.setDescription('Event state of this AC power monitor voltage (Low, Normal, High, etc.).')
acpmsVoltagePhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsVoltagePhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsVoltagePhaseAValueStr.setDescription('Phase A voltage, in volts. This is calculated using the formula (register * PT ratio * 0.1).')
acpmsVoltagePhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsVoltagePhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsVoltagePhaseBValueStr.setDescription('Phase B voltage, in volts. This is calculated using the formula (register * PT ratio * 0.1).')
acpmsVoltagePhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsVoltagePhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsVoltagePhaseCValueStr.setDescription('Phase C voltage, in volts. This is calculated using the formula (register * PT ratio * 0.1).')
acpmsAvgCurrentValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentValueStr.setDescription('Average current, in amps. This is calculated using the formula (register * CT ratio * 0.001). This could be either the average of the phase currents, or the sum of the phase currents, depending on device configuration.')
acpmsAvgCurrentMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentMinStr.setDescription('Minimum average current value since last reset, in amps.')
acpmsAvgCurrentMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentMaxStr.setDescription('Maximum average current value since last reset, in amps.')
acpmsAvgCurrentAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentAvgStr.setDescription("Average average current value since last reset, in amps. This is the unit's average of its measurements of the average current reported by the AC power monitor device.")
acpmsAvgCurrentInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgCurrentInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgCurrentInEventState.setDescription('Event state of this AC power monitor current (Low, Normal, High, etc.).')
acpmsCurrentPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsCurrentPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsCurrentPhaseAValueStr.setDescription('Phase A current, in amps. This is calculated using the formula (register * CT ratio * 0.001).')
acpmsCurrentPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsCurrentPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsCurrentPhaseBValueStr.setDescription('Phase B current, in amps. This is calculated using the formula (register * CT ratio * 0.001).')
acpmsCurrentPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsCurrentPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsCurrentPhaseCValueStr.setDescription('Phase C current, in amps. This is calculated using the formula (register * CT ratio * 0.001).')
acpmsAvgFreqValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqValueStr.setDescription('Frequency, in hertz. On the YD2010, this is calculated using the formula (register * 0.00106813). On the WattsOn, this is calculated using the formula (register * 0.1).')
acpmsAvgFreqMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqMinStr.setDescription('Minimum frequency value since last reset, in hertz.')
acpmsAvgFreqMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqMaxStr.setDescription('Maximum frequency value since last reset, in hertz.')
acpmsAvgFreqAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqAvgStr.setDescription("Average frequency value since last reset, in hertz. This is the unit's average of its measurements of the average frequency reported by the AC power monitor device.")
acpmsAvgFreqInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAvgFreqInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsAvgFreqInEventState.setDescription('Event state of this AC power monitor frequency (Low, Normal, High, etc.).')
acpmsTRPValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPValueStr.setDescription('Total real power, in watts. On the YD2010, this is calculated using the formula (register * PT ratio * CT ratio * Urg * 0.4), where Urg is the voltage range taken from register 0x30A. On the WattsOn models, this is calculated using the formula (register * PT * CT).')
acpmsTRPMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPMinStr.setDescription('Minimum total real power value since last reset, in watts.')
acpmsTRPMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPMaxStr.setDescription('Maximum total real power value since last reset, in watts.')
acpmsTRPAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPAvgStr.setDescription("Average total real power value since last reset, in watts. This is the unit's average of its measurements of the average total real power reported by the AC power monitor device.")
acpmsTRPInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRPInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsTRPInEventState.setDescription('Event state of this AC power monitor total real power (Low, Normal, High, etc.).')
acpmsRPPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRPPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRPPhaseAValueStr.setDescription('Phase A real power, in watts. On the YD2010, this is calculated using the formula (register * PT ratio * CT ratio * Urg * 0.4), where Urg is the voltage range taken from register 0x30A. On the WattsOn, this is calculated using the formula (register * PT * CT).')
acpmsRPPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRPPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRPPhaseBValueStr.setDescription('Phase B real power, in watts. On the YD2010, this is calculated using the formula (register * PT ratio * CT ratio * Urg * 0.4), where Urg is the voltage range taken from register 0x30A. On the WattsOn, this is calculated using the formula (register * PT * CT).')
acpmsRPPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRPPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRPPhaseCValueStr.setDescription('Phase C real power, in watts. On the YD2010, this is calculated using the formula (register * PT ratio * CT ratio * Urg * 0.4), where Urg is the voltage range taken from register 0x30A. On the WattsOn, this is calculated using the formula (register * PT * CT).')
acpmsCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsCombined.setStatus('current')
if mibBuilder.loadTexts: acpmsCombined.setDescription('Combined status string intended to be parsed by NMS: name`deviceState`deviceStateColorCode`voltage`current`frequency`power~voltageEventState`voltageColorCode`currentEventState`currentColorCode`frequencyEventState`frequencyColorCode`powerEventState`powerColorCode')
acpmsTPFValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFValueStr.setDescription('Total power factor.')
acpmsTPFMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFMinStr.setDescription('Total power factor minimum value since last reset.')
acpmsTPFMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFMaxStr.setDescription('Total power factor maximum value since last reset.')
acpmsTPFAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFAvgStr.setDescription('Total power factor average value since last reset.')
acpmsTPFInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTPFInEventState.setStatus('current')
if mibBuilder.loadTexts: acpmsTPFInEventState.setDescription('Total power factor event state.')
acpmsPFPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsPFPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsPFPhaseAValueStr.setDescription('Phase A power factor.')
acpmsPFPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsPFPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsPFPhaseBValueStr.setDescription('Phase B power factor.')
acpmsPFPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsPFPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsPFPhaseCValueStr.setDescription('Phase C power factor.')
acpmsTRcPValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRcPValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRcPValueStr.setDescription('Total reactive power, in VAR.')
acpmsTRcPMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRcPMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRcPMinStr.setDescription('Total reactive power minimum value since last reset, in VAR.')
acpmsTRcPMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRcPMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRcPMaxStr.setDescription('Total reactive power maximum value since last reset, in VAR.')
acpmsTRcPAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTRcPAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTRcPAvgStr.setDescription('Total reactive power average value since last reset, in VAR.')
acpmsRcPPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRcPPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRcPPhaseAValueStr.setDescription('Phase A reactive power, in VAR.')
acpmsRcPPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRcPPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRcPPhaseBValueStr.setDescription('Phase B reactive power, in VAR.')
acpmsRcPPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsRcPPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsRcPPhaseCValueStr.setDescription('Phase C reactive power, in VAR.')
acpmsTAPValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTAPValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTAPValueStr.setDescription('Total apparent power, in VA.')
acpmsTAPMinStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTAPMinStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTAPMinStr.setDescription('Total apparent power minimum value since last reset, in VA.')
acpmsTAPMaxStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTAPMaxStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTAPMaxStr.setDescription('Total apparent power maximum value since last reset, in VA.')
acpmsTAPAvgStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTAPAvgStr.setStatus('current')
if mibBuilder.loadTexts: acpmsTAPAvgStr.setDescription('Total apparent power average value since last reset, in VA.')
acpmsAPPhaseAValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAPPhaseAValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAPPhaseAValueStr.setDescription('Phase A apparent power, in VA.')
acpmsAPPhaseBValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAPPhaseBValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAPPhaseBValueStr.setDescription('Phase B apparent power, in VA.')
acpmsAPPhaseCValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsAPPhaseCValueStr.setStatus('current')
if mibBuilder.loadTexts: acpmsAPPhaseCValueStr.setDescription('Phase C apparent power, in VA.')
acpmsTotalEnergyWh = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTotalEnergyWh.setStatus('current')
if mibBuilder.loadTexts: acpmsTotalEnergyWh.setDescription('Total energy, in Wh.')
acpmsTotalEnergyVAR = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTotalEnergyVAR.setStatus('current')
if mibBuilder.loadTexts: acpmsTotalEnergyVAR.setDescription('Total reactive energy, in VAR.')
acpmsTotalEnergyVA = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 8, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmsTotalEnergyVA.setStatus('current')
if mibBuilder.loadTexts: acpmsTotalEnergyVA.setDescription('Total apparent energy, in VA.')
bmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1), )
if mibBuilder.loadTexts: bmStatusTable.setStatus('current')
if mibBuilder.loadTexts: bmStatusTable.setDescription('Battery monitor status table.')
bmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmsIndex"))
if mibBuilder.loadTexts: bmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: bmStatusEntry.setDescription('Battery monitor status table entry.')
bmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsIndex.setStatus('current')
if mibBuilder.loadTexts: bmsIndex.setDescription('Index for battery monitors.')
bmsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsEnable.setStatus('current')
if mibBuilder.loadTexts: bmsEnable.setDescription('ON/OFF enable for this battery monitor.')
bmsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsName.setStatus('current')
if mibBuilder.loadTexts: bmsName.setDescription('Name for this battery monitor.')
bmsState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsState.setStatus('current')
if mibBuilder.loadTexts: bmsState.setDescription('The connected state of the battery monitor. If you unplug the carrier then all three of its battery monitor states will reflect the same state change.')
bmsStringState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsStringState.setStatus('current')
if mibBuilder.loadTexts: bmsStringState.setDescription('State of the string monitored by its battery monitor.')
bmsTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsTempValue.setStatus('current')
if mibBuilder.loadTexts: bmsTempValue.setDescription('Average jar temperature value in C or F, depending on scale setting. Displayed as a floating point value. -999.0 means this is unknown.')
bmsTempValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsTempValueStr.setStatus('current')
if mibBuilder.loadTexts: bmsTempValueStr.setDescription('Average jar temperature with appropriate scale appended. Displayed as a floating point value. -999.0 means this is unknown.')
bmsTempEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsTempEvent.setStatus('current')
if mibBuilder.loadTexts: bmsTempEvent.setDescription('Event state of this battery monitor average jar temperature (Low, Normal, High).')
bmsDiffTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsDiffTempValue.setStatus('current')
if mibBuilder.loadTexts: bmsDiffTempValue.setDescription('Differential temperature in C or F, depending on scale setting. -999 means this is unknown.')
bmsDiffTempValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsDiffTempValueStr.setStatus('current')
if mibBuilder.loadTexts: bmsDiffTempValueStr.setDescription('Differential temperature with appropriate scale (C or F) appended. -999 means this is unknown.')
bmsDiffTempEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsDiffTempEvent.setStatus('current')
if mibBuilder.loadTexts: bmsDiffTempEvent.setDescription('Event state of this battery monitor differential temperature (Very High, High, Normal).')
bmsVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsVoltageValue.setStatus('current')
if mibBuilder.loadTexts: bmsVoltageValue.setDescription('Total battery voltage on the string, in volts. Displayed as a floating point value in format X.X. -999.0 means this is unknown.')
bmsVoltageEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsVoltageEvent.setStatus('current')
if mibBuilder.loadTexts: bmsVoltageEvent.setDescription('Event state of this battery monitor string voltage (Low, Normal, High, etc.).')
bmsDiffVoltValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsDiffVoltValue.setStatus('current')
if mibBuilder.loadTexts: bmsDiffVoltValue.setDescription('Differential voltage in volts. Displayed as a floating point value in format X.X. -999.0 means this is unknown.')
bmsDiffVoltEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsDiffVoltEvent.setStatus('current')
if mibBuilder.loadTexts: bmsDiffVoltEvent.setDescription('Event state of this battery monitor differential voltage (Very High, High, Normal.)')
bmsCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsCurrentValue.setStatus('current')
if mibBuilder.loadTexts: bmsCurrentValue.setDescription('Current flow on the string, in amperes. Displayed as a floating point value in format X.X. A positive value means the battery string is charging, and a negative value means the battery string is discharging. -999.0 means this is unknown.')
bmsChargingCurrentEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsChargingCurrentEvent.setStatus('current')
if mibBuilder.loadTexts: bmsChargingCurrentEvent.setDescription('Event state of this battery monitor charging current (Low, Normal, High, etc.).')
bmsDischargingCurrentEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsDischargingCurrentEvent.setStatus('current')
if mibBuilder.loadTexts: bmsDischargingCurrentEvent.setDescription('Event state of this battery monitor discharging current (Low, Normal, High, etc.).')
bmsChargeLevelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsChargeLevelValue.setStatus('current')
if mibBuilder.loadTexts: bmsChargeLevelValue.setDescription('Charge level of the battery string.')
bmsChargeLevelEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsChargeLevelEvent.setStatus('current')
if mibBuilder.loadTexts: bmsChargeLevelEvent.setDescription('Event state of this battery monitor charge level (Very Low, Low, Normal).')
bmsJarHealthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsJarHealthValue.setStatus('current')
if mibBuilder.loadTexts: bmsJarHealthValue.setDescription('Jar health of the battery string.')
bmsJarHealthEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsJarHealthEvent.setStatus('current')
if mibBuilder.loadTexts: bmsJarHealthEvent.setDescription('Event state of this battery monitor jar health (Very Low, Low, Normal).')
bmsCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmsCombined.setStatus('current')
if mibBuilder.loadTexts: bmsCombined.setDescription('Combined status string intended to be parsed by NMS: name`deviceState`deviceStateColorCode`stringState`charge`voltage`temp`health~chargeEventState`chargeColorCode`voltageEventState`voltageColorCode`tempEventState`tempColorCode`healthEventState`healthColorCode`numActiveEvents')
bmsJarStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 2), )
if mibBuilder.loadTexts: bmsJarStatusTable.setStatus('current')
if mibBuilder.loadTexts: bmsJarStatusTable.setDescription('This table organizes per-jar attributes of a battery monitor: 1. voltage 2. temperature.')
bmJarStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmjsIndexBM"), (0, "SITEBOSS-450-STD-MIB", "bmjsIndexJar"))
if mibBuilder.loadTexts: bmJarStatusEntry.setStatus('current')
if mibBuilder.loadTexts: bmJarStatusEntry.setDescription('Entry for battery monitor jar status table. Note this table uses 2 SNMP indexes: the first for which battery monitor and the second for which jar.')
bmjsIndexBM = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmjsIndexBM.setStatus('current')
if mibBuilder.loadTexts: bmjsIndexBM.setDescription('The part of the index that refers to which battery monitor.')
bmjsIndexJar = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmjsIndexJar.setStatus('current')
if mibBuilder.loadTexts: bmjsIndexJar.setDescription('The part of the index that refers to which jar.')
bmjsVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmjsVoltageValue.setStatus('current')
if mibBuilder.loadTexts: bmjsVoltageValue.setDescription('Voltage of individual battery cell. This is a floating point value in format X.X. -999.0 means this is unknown.')
bmjsTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmjsTempValue.setStatus('current')
if mibBuilder.loadTexts: bmjsTempValue.setDescription('Temperature of individual battery jar. This is a floating point value. -999.0 means unknown.')
bmjsAdmittanceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmjsAdmittanceValue.setStatus('current')
if mibBuilder.loadTexts: bmjsAdmittanceValue.setDescription('Cell admittance of individual jar. This is an integer value. -999 means unknown.')
bmjsAdmittanceChangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmjsAdmittanceChangeValue.setStatus('current')
if mibBuilder.loadTexts: bmjsAdmittanceChangeValue.setDescription('Percent change of cell admittance of individual jar. This is an integer value.')
esNumberEventSensors = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberEventSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberEventSensors.setDescription('The number of EventSensors recognized by the unit, including the internal EventSensor. Range: 1-17')
esTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2), )
if mibBuilder.loadTexts: esTable.setStatus('current')
if mibBuilder.loadTexts: esTable.setDescription('The table of what EventSensors are attached to the unit, including the internal EventSensor')
esEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "esIndex"))
if mibBuilder.loadTexts: esEntry.setStatus('current')
if mibBuilder.loadTexts: esEntry.setDescription('Table entry for EventSensor table')
esIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndex.setStatus('current')
if mibBuilder.loadTexts: esIndex.setDescription("This number refers to an EventSensor; it has the same meaning as the esIndexES object (see above), except that this object is used only within the esTable branch. This object's allowable values are 1 through 16, and 200. 200 always refers to the EventSensor inside the unit. 1 through 16 refer to additional attached EventSensors. The number corresponding to an EventSensor is determined by the user at the initial configuration time. If there is an internal sensor in the unit, it will always be the first item in the Sensor Events setup menu. For example, if a new EventSensor is configured as the 2nd entry AFTER the internal EventSensor (if one exists) in the Sensor Events Setup Menu, then that EventSensor will be known from then on as EventSensor 2. All point indeces with esIndex=2 will now refer to that particular EventSensor. ")
esName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esName.setStatus('current')
if mibBuilder.loadTexts: esName.setDescription('The name of the EventSensor')
esID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esID.setStatus('current')
if mibBuilder.loadTexts: esID.setDescription('The factory-assigned ID of the EventSensor')
esNumberTempSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberTempSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberTempSensors.setDescription('The number of temperature sensors on the EventSensor')
esTempReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esTempReportingMode.setStatus('current')
if mibBuilder.loadTexts: esTempReportingMode.setDescription('Description of how temperature values should be interpreted.')
esNumberCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberCCs.setStatus('current')
if mibBuilder.loadTexts: esNumberCCs.setDescription('The number of contact closures on the EventSensor.')
esCCReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCReportingMode.setStatus('current')
if mibBuilder.loadTexts: esCCReportingMode.setDescription('Description of how CC values should be interpreted.')
esNumberHumidSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberHumidSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberHumidSensors.setDescription('The number of humidity sensors on the EventSensor.')
esHumidReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esHumidReportingMode.setStatus('current')
if mibBuilder.loadTexts: esHumidReportingMode.setDescription('Description of how humidity sensor values should be interpreted.')
esNumberNoiseSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberNoiseSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberNoiseSensors.setDescription('The number of noise sensors on the EventSensor.')
esNoiseReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNoiseReportingMode.setStatus('current')
if mibBuilder.loadTexts: esNoiseReportingMode.setDescription('Description of how noise sensor values should be interpreted.')
esNumberAirflowSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberAirflowSensors.setStatus('current')
if mibBuilder.loadTexts: esNumberAirflowSensors.setDescription('The number of airflow sensors on the EventSensor.')
esAirflowReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAirflowReportingMode.setStatus('current')
if mibBuilder.loadTexts: esAirflowReportingMode.setDescription('Description of how airflow sensor values should be interpreted.')
esNumberAnalog = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberAnalog.setStatus('current')
if mibBuilder.loadTexts: esNumberAnalog.setDescription('The number of analog inputs on the EventSensor.')
esAnalogReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogReportingMode.setStatus('current')
if mibBuilder.loadTexts: esAnalogReportingMode.setDescription('Description of how analog input values should be interpreted.')
esNumberRelayOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberRelayOutputs.setStatus('current')
if mibBuilder.loadTexts: esNumberRelayOutputs.setDescription('The number of relay outputs on the EventSensor')
esRelayReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esRelayReportingMode.setStatus('current')
if mibBuilder.loadTexts: esRelayReportingMode.setDescription('Description of how relay output values should be interpreted.')
esTempCombinedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esTempCombinedStatus.setStatus('current')
if mibBuilder.loadTexts: esTempCombinedStatus.setDescription('Combined status string intended to be parsed by NMS: name`value`scale`eventState`eventColorCode')
esCCCombinedStatusBlock1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock1.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock1.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name1`value1`eventColorCode1`alias1~name2`value2`eventColorCode2`alias2~...name8`value8`eventColorCode8`alias8')
esCCCombinedStatusBlock2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock2.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock2.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name9`value9`eventColorCode9`alias9~name10`value10`eventColorCode10`alias10~...name16`value16`eventColorCode16`alias16')
esCCCombinedStatusBlock3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock3.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock3.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name17`value17`eventColorCode17`alias17~name18`value18`eventColorCode18`alias18~...name24`value24`eventColorCode24`alias24')
esCCCombinedStatusBlock4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock4.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock4.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name25`value25`eventColorCode25`alias25~name26`value26`eventColorCode26`alias26~...name32`value32`eventColorCode32`alias32')
esCCCombinedStatusBlock5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock5.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock5.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name33`value33`eventColorCode33`alias33~name34`value34`eventColorCode34`alias35~...name40`value40`eventColorCode40`alias40')
esCCCombinedStatusBlock6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock6.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock6.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name41`value41`eventColorCode41`alias41~name42`value42`eventColorCode42`alias43~...name48`value48`eventColorCode48`alias48')
esCCCombinedStatusBlock7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock7.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock7.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name49`value49`eventColorCode49`alias49~name50`value50`eventColorCode50`alias50~...name56`value56`eventColorCode56`alias56')
esCCCombinedStatusBlock8 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCCombinedStatusBlock8.setStatus('current')
if mibBuilder.loadTexts: esCCCombinedStatusBlock8.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name57`value57`eventColorCode57`alias57~name57`value57`eventColorCode564`alias57~...name64`value64`eventColorCode64`alias64')
esHumidCombinedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esHumidCombinedStatus.setStatus('current')
if mibBuilder.loadTexts: esHumidCombinedStatus.setDescription('Combined status string intended to be parsed by NMS: name`value`eventState`eventColorCode')
esAnalogCombinedStatusBlock1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock1.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock1.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name1`value1`units1`eventState`eventColorCode1~name2`value2`units2`eventState`eventColorCode2~...')
esAnalogCombinedStatusBlock2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock2.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock2.setDescription('Combined status string intended to be parsed by NMS: numInBlock~name9`value9`units9`eventState9`eventColorCode9~...')
esAnalogCombinedStatusBlock3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock3.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock3.setDescription('Combined status string intended to be parsed by NMS: numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esAnalogCombinedStatusBlock4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock4.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock4.setDescription('Combined status string intended to be parsed by NMS: numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esAnalogCombinedStatusBlock5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock5.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock5.setDescription('Combined status string intended to be parsed by NMS: numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esAnalogCombinedStatusBlock6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock6.setStatus('current')
if mibBuilder.loadTexts: esAnalogCombinedStatusBlock6.setDescription('Combined status string intended to be parsed by NMS: numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esOutputCombinedStatusBlock1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esOutputCombinedStatusBlock1.setStatus('current')
if mibBuilder.loadTexts: esOutputCombinedStatusBlock1.setDescription('Combined status string intended to be parsed by NMS: numInBlock~namex`valuex`unitsx`eventStatex`eventColorCodex~...')
esOutputCombinedStatusBlock2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 2, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esOutputCombinedStatusBlock2.setStatus('current')
if mibBuilder.loadTexts: esOutputCombinedStatusBlock2.setDescription('Combined status string intended to be parsed by NMS: numInBlock`namex`valuex`aliasx~namey`valuey`aliasy~...namez`valuez`aliasz')
esNewSensors = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNewSensors.setStatus('current')
if mibBuilder.loadTexts: esNewSensors.setDescription('String representing the number of new (attached but unconfigured) EventSensors')
esPointConfigTempTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1), )
if mibBuilder.loadTexts: esPointConfigTempTable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigTempTable.setDescription('This table organizes 3 basic attributes of temperature sensor points. A point is a particular sensor on an EventSensor. The 3 point attributes organizes in this table are: 1. the configuration item (e.g., enable, name, etc.) 2. the eventsensor on which this point resides 3. the point number (always 1 for temp sensors) Points are referenced by a point config index. The point config index is a string of 2 numbers separated by periods. It contains all the information necessary for getting a piece of data off an event sensor within the context of this emperature point config table ; namely, which EventSensor, and which sensor (a.k.a. point) (always 1 for temperature sensors). ')
esPointConfigTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "espcTempIndexES"), (0, "SITEBOSS-450-STD-MIB", "espcTempIndexPoint"))
if mibBuilder.loadTexts: esPointConfigTempEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigTempEntry.setDescription('Entry for EventSensor point config temperature table')
espcTempIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcTempIndexES.setStatus('current')
if mibBuilder.loadTexts: espcTempIndexES.setDescription("The part of the point index that refers to an EventSensor. The point config index is a string of 2 numbers separated by a period. It contains all the information necessary for getting a piece of data off an event sensor within the the context of the eventsensor point config temperature table; namely, which EventSensor, and which sensor (a.k.a. point). This object's allowable values are 1 through 16, and 200. 200 always refers to the EventSensor inside the unit. 1 through 16 refer to additional attached EventSensors. The number corresponding to an EventSensor is determined by the user at the initial configuration time. If there is an internal sensor in the unit, it will always be the first item in the Sensor Events setup menu. For example, if a new EventSensor is configured as the 2nd entry AFTER the internal EventSensor (if one exists) in the Sensor Events Setup Menu, then that EventSensor will be known from then on as EventSensor 2. All point indeces with esIndexES=2 will now refer to that particular EventSensor. ")
espcTempIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcTempIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcTempIndexPoint.setDescription('The part of the point index that delineates which sensor on the EventSensor. So this combined with espcTempIndexES (which EventSensor) uniquely defines each point attached to a unit within the context of temperature point configuration.')
espcTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempEnable.setStatus('current')
if mibBuilder.loadTexts: espcTempEnable.setDescription('ON/OFF enable this temperature sensor')
espcTempScale = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempScale.setStatus('current')
if mibBuilder.loadTexts: espcTempScale.setDescription('Scale (C/F) for this temperature sensor')
espcTempDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempDeadband.setStatus('current')
if mibBuilder.loadTexts: espcTempDeadband.setDescription('Deadband for this temperature sensor (in floating-point format)')
espcTempVHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVHighTemp.setStatus('current')
if mibBuilder.loadTexts: espcTempVHighTemp.setDescription('Very high temperature event threshold for this temperature sensor (in floating-point format)')
espcTempVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVHighActions.setStatus('current')
if mibBuilder.loadTexts: espcTempVHighActions.setDescription('Very high temperature event actions for this temperature sensor')
espcTempVHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempVHighTrapnum.setDescription('Very high temperature event trap number for this temperature sensor')
espcTempVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVHighClass.setStatus('current')
if mibBuilder.loadTexts: espcTempVHighClass.setDescription('Very high temperature event class for this temperature sensor')
espcTempHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempHighTemp.setStatus('current')
if mibBuilder.loadTexts: espcTempHighTemp.setDescription('High temperature event threshold for this temperature sensor (in floating-point format)')
espcTempHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempHighActions.setStatus('current')
if mibBuilder.loadTexts: espcTempHighActions.setDescription('High temperature event actions for this temperature sensor')
espcTempHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempHighTrapnum.setDescription('High temperature event trap number for this temperature sensor')
espcTempHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempHighClass.setStatus('current')
if mibBuilder.loadTexts: espcTempHighClass.setDescription('High temperature event class for this temperature sensor')
espcTempNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempNormalActions.setStatus('current')
if mibBuilder.loadTexts: espcTempNormalActions.setDescription('Return-to-normal event actions for this temperature sensor')
espcTempNormalTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempNormalTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempNormalTrapnum.setDescription('Return-to-normal event trap number for this temperature sensor')
espcTempNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempNormalClass.setStatus('current')
if mibBuilder.loadTexts: espcTempNormalClass.setDescription('Return-to-normal event class for this temperature sensor')
espcTempLowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempLowTemp.setStatus('current')
if mibBuilder.loadTexts: espcTempLowTemp.setDescription('Low temperature event threshold for this temperature sensor (in floating-point format)')
espcTempLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempLowActions.setStatus('current')
if mibBuilder.loadTexts: espcTempLowActions.setDescription('Low temperature event actions for this temperature sensor')
espcTempLowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempLowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempLowTrapnum.setDescription('Low temperature event trap number for this temperature sensor')
espcTempLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempLowClass.setStatus('current')
if mibBuilder.loadTexts: espcTempLowClass.setDescription('Low temperature event class for this temperature sensor')
espcTempVLowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVLowTemp.setStatus('current')
if mibBuilder.loadTexts: espcTempVLowTemp.setDescription('Very Low temperature event threshold for this temperature sensor (in floating-point format)')
espcTempVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVLowActions.setStatus('current')
if mibBuilder.loadTexts: espcTempVLowActions.setDescription('Very Low temperature event actions for this temperature sensor')
espcTempVLowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVLowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcTempVLowTrapnum.setDescription('Very Low temperature event trap number for this temperature sensor')
espcTempVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcTempVLowClass.setStatus('current')
if mibBuilder.loadTexts: espcTempVLowClass.setDescription('Very Low temperature event class for this temperature sensor')
esPointConfigCCTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2), )
if mibBuilder.loadTexts: esPointConfigCCTable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigCCTable.setDescription('This table organizes 3 basic attributes of contact closure points. A point is a particular sensor on an EventSensor. The 3 point attributes organizes in this table are: 1. the configuration item (e.g., enable, name, etc.) 2. the eventsensor on which this point resides 3. the point number Points are referenced by a point config index. The point config index is a string of 2 numbers separated by a period. It contains all the information necessary for getting a piece of data off an event sensor within the context of this contact closure point config table ; namely, which EventSensor and which sensor. ')
esPointConfigCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "espcCCIndexES"), (0, "SITEBOSS-450-STD-MIB", "espcCCIndexPoint"))
if mibBuilder.loadTexts: esPointConfigCCEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigCCEntry.setDescription('Entry for EventSensor point config contact closure table')
espcCCIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcCCIndexES.setStatus('current')
if mibBuilder.loadTexts: espcCCIndexES.setDescription("The part of the point index that refers to an EventSensor. The point config index is a string of 2 numbers separated by a period. It contains all the information necessary for getting a piece of data off an event sensor within the the context of the eventsensor point config contact closure table; namely, which EventSensor and which sensor (a.k.a. point). This object's allowable values are 1 through 16, and 200. 200 always refers to the EventSensor inside the unit. 1 through 16 refer to additional attached EventSensors. ")
espcCCIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcCCIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcCCIndexPoint.setDescription('The part of the point index that delineates which sensor on the EventSensor. So this combined with espcCCIndexES (which EventSensor) uniquely defines each point attached to a unit within the context of contact closure point configuration.')
espcCCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEnable.setStatus('current')
if mibBuilder.loadTexts: espcCCEnable.setDescription('ON/OFF enable for this contact closure')
espcCCName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCName.setStatus('current')
if mibBuilder.loadTexts: espcCCName.setDescription('Name for this contact closure')
espcCCEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEventState.setStatus('current')
if mibBuilder.loadTexts: espcCCEventState.setDescription('Event state for this contact closure')
espcCCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCThreshold.setStatus('current')
if mibBuilder.loadTexts: espcCCThreshold.setDescription('Event threshold (seconds) for this contact closure')
espcCCEventActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEventActions.setStatus('current')
if mibBuilder.loadTexts: espcCCEventActions.setDescription('Event actions for this contact closure')
espcCCEventTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEventTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcCCEventTrapnum.setDescription('Event trap number for this contact closure')
espcCCEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCEventClass.setStatus('current')
if mibBuilder.loadTexts: espcCCEventClass.setDescription('Event class for this contact closure')
espcCCNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalActions.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalActions.setDescription('Return-to-normal actions for this contact closure')
espcCCNormalTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalTrapnum.setDescription('Return-to-normal trap number for this contact closure')
espcCCNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalClass.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalClass.setDescription('Return-to-normal class for this contact closure')
espcCCAlarmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCAlarmAlias.setStatus('current')
if mibBuilder.loadTexts: espcCCAlarmAlias.setDescription('Event alias for this contact closure')
espcCCNormalAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalAlias.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalAlias.setDescription('Return-to-normal alias for this contact closure')
espcCCNormalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcCCNormalThreshold.setStatus('current')
if mibBuilder.loadTexts: espcCCNormalThreshold.setDescription('Event threshold (seconds) for this contact closure to return to normal')
esPointConfigHumidTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3), )
if mibBuilder.loadTexts: esPointConfigHumidTable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigHumidTable.setDescription('This table organizes 3 basic attributes of humidity points. A point is a particular sensor on an EventSensor. The 3 point attributes organizes in this table are: 1. the configuration item (e.g., enable, name, etc.) 2. the eventsensor on which this point resides 3. the point number (always 1 for humidity sensors) Points are referenced by a point config index. The point config index is a string of 2 numbers separated by a period. It contains all the information necessary for getting a piece of data off an event sensor within the context of this humidity point config table ; namely, which EventSensor and which sensor. ')
esPointConfigHumidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "espcHumidIndexES"), (0, "SITEBOSS-450-STD-MIB", "espcHumidIndexPoint"))
if mibBuilder.loadTexts: esPointConfigHumidEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigHumidEntry.setDescription('Entry for EventSensor point config humidity table')
espcHumidIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcHumidIndexES.setStatus('current')
if mibBuilder.loadTexts: espcHumidIndexES.setDescription("The part of the point index that refers to an EventSensor. The point config index is a string of 2 numbers separated by a period. It contains all the information necessary for getting a piece of data off an event sensor within the the context of the eventsensor point config contact closure table; namely, which EventSensor and which sensor (a.k.a. point). This object's allowable values are 1 through 16, and 200. 200 always refers to the EventSensor inside the unit. 1 through 16 refer to additional attached EventSensors. ")
espcHumidIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcHumidIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcHumidIndexPoint.setDescription('The part of the point index that delineates which sensor on the EventSensor. So this combined with espcHumidIndexES (which EventSensor) uniquely defines each point attached to a unit within the context of contact closure point configuration.')
espcHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidEnable.setStatus('current')
if mibBuilder.loadTexts: espcHumidEnable.setDescription('ON/OFF enable for this humidity sensor')
espcHumidDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidDeadband.setStatus('current')
if mibBuilder.loadTexts: espcHumidDeadband.setDescription('Deadband for this humidity sensor')
espcHumidVHighHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVHighHumid.setStatus('current')
if mibBuilder.loadTexts: espcHumidVHighHumid.setDescription('Very high event threshold for this humidity sensor')
espcHumidVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVHighActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidVHighActions.setDescription('Very high event actions for this humidity sensor')
espcHumidVHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidVHighTrapnum.setDescription('Very high event trap number for this humidity sensor')
espcHumidVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVHighClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidVHighClass.setDescription('Very high event class for this humidity sensor')
espcHumidHighHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidHighHumid.setStatus('current')
if mibBuilder.loadTexts: espcHumidHighHumid.setDescription('High event threshold for this humidity sensor')
espcHumidHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidHighActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidHighActions.setDescription('High event actions for this humidity sensor')
espcHumidHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidHighTrapnum.setDescription('High event trap number for this humidity sensor')
espcHumidHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidHighClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidHighClass.setDescription('High event class for this humidity sensor')
espcHumidNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidNormalActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidNormalActions.setDescription('Return-to-normal actions for this humidity sensor')
espcHumidNormalTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidNormalTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidNormalTrapnum.setDescription('Return-to-normal trap number for this humidity sensor')
espcHumidNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidNormalClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidNormalClass.setDescription('Return-to-normal class for this humidity sensor')
espcHumidLowHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidLowHumid.setStatus('current')
if mibBuilder.loadTexts: espcHumidLowHumid.setDescription('Low event threshold for this humidity sensor')
espcHumidLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidLowActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidLowActions.setDescription('Low event actions for this humidity sensor')
espcHumidLowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidLowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidLowTrapnum.setDescription('Low event trap number for this humidity sensor')
espcHumidLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidLowClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidLowClass.setDescription('Low event class for this humidity sensor')
espcHumidVLowHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVLowHumid.setStatus('current')
if mibBuilder.loadTexts: espcHumidVLowHumid.setDescription('Very low event threshold for this humidity sensor')
espcHumidVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVLowActions.setStatus('current')
if mibBuilder.loadTexts: espcHumidVLowActions.setDescription('Very low event actions for this humidity sensor')
espcHumidVLowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVLowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcHumidVLowTrapnum.setDescription('Very low event trap number for this humidity sensor')
espcHumidVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 3, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcHumidVLowClass.setStatus('current')
if mibBuilder.loadTexts: espcHumidVLowClass.setDescription('Very low event class for this humidity sensor')
esPointConfigAITable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5), )
if mibBuilder.loadTexts: esPointConfigAITable.setStatus('current')
if mibBuilder.loadTexts: esPointConfigAITable.setDescription('This table organizes 3 basic attributes of analog input points. A point is a particular sensor on an EventSensor. The 3 point attributes organizes in this table are: 1. the configuration item (e.g., enable, name, etc.) 2. the eventsensor on which this point resides 3. the point number Points are referenced by a point config index. The point config index is a string of 2 numbers separated by a period. It contains all the information necessary for getting a piece of data off an event sensor within the context of this analog input point config table ; namely, which EventSensor and which sensor. ')
esPointConfigAIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "espcHumidIndexES"), (0, "SITEBOSS-450-STD-MIB", "espcHumidIndexPoint"))
if mibBuilder.loadTexts: esPointConfigAIEntry.setStatus('current')
if mibBuilder.loadTexts: esPointConfigAIEntry.setDescription('Entry for EventSensor point config analog input table')
espcAIIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcAIIndexES.setStatus('current')
if mibBuilder.loadTexts: espcAIIndexES.setDescription("The part of the point index that refers to an EventSensor. The point config index is a string of 2 numbers separated by a period. It contains all the information necessary for getting a piece of data off an event sensor within the the context of the eventsensor point config contact closure table; namely, which EventSensor and which sensor (a.k.a. point). This object's allowable values are 1 through 16, and 200. 200 always refers to the EventSensor inside the unit. 1 through 16 refer to additional attached EventSensors. ")
espcAIIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: espcAIIndexPoint.setStatus('current')
if mibBuilder.loadTexts: espcAIIndexPoint.setDescription('The part of the point index that delineates which sensor on the EventSensor. So this combined with espcAIIndexES (which EventSensor) uniquely defines each point attached to a unit within the context of contact closure point configuration.')
espcAIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIEnable.setStatus('current')
if mibBuilder.loadTexts: espcAIEnable.setDescription('ON/OFF for this analog input sensor')
espcAIPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIPolarity.setStatus('current')
if mibBuilder.loadTexts: espcAIPolarity.setDescription('Polarity for this analog input sensor')
espcAIDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIDeadband.setStatus('current')
if mibBuilder.loadTexts: espcAIDeadband.setDescription('Deadband for this analog input sensor')
espcAIVhighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVhighValue.setStatus('current')
if mibBuilder.loadTexts: espcAIVhighValue.setDescription('Very high event threshold (decivolts or tenths of milliamps) for this analog input sensor')
espcAIVhighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVhighActions.setStatus('current')
if mibBuilder.loadTexts: espcAIVhighActions.setDescription('Very high event actions for this analog input sensor')
espcAIVhighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVhighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAIVhighTrapnum.setDescription('Very high event trap number for this analog input sensor')
espcAIVhighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVhighClass.setStatus('current')
if mibBuilder.loadTexts: espcAIVhighClass.setDescription('Very high event class for this analog input sensor')
espcAIHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIHighValue.setStatus('current')
if mibBuilder.loadTexts: espcAIHighValue.setDescription('High event threshold (decivolts or tenths of milliamps) for this analog input sensor')
espcAIHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIHighActions.setStatus('current')
if mibBuilder.loadTexts: espcAIHighActions.setDescription('High event actions for this analog input sensor')
espcAIHighTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIHighTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAIHighTrapnum.setDescription('High event trap number for this analog input sensor')
espcAIHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIHighClass.setStatus('current')
if mibBuilder.loadTexts: espcAIHighClass.setDescription('High event class for this analog input sensor')
espcAINormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAINormalActions.setStatus('current')
if mibBuilder.loadTexts: espcAINormalActions.setDescription('Return-to-normal actions for this analog input sensor')
espcAINormalTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAINormalTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAINormalTrapnum.setDescription('Return-to-normal trap number for this analog input sensor')
espcAINormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAINormalClass.setStatus('current')
if mibBuilder.loadTexts: espcAINormalClass.setDescription('Return-to-normal class for this analog input sensor')
espcAILowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAILowValue.setStatus('current')
if mibBuilder.loadTexts: espcAILowValue.setDescription('Low event threshold (decivolts or tenths of milliamps) for this analog input sensor')
espcAILowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAILowActions.setStatus('current')
if mibBuilder.loadTexts: espcAILowActions.setDescription('Low event actions for this analog input sensor')
espcAILowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAILowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAILowTrapnum.setDescription('Low event trap number for this analog input sensor')
espcAILowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAILowClass.setStatus('current')
if mibBuilder.loadTexts: espcAILowClass.setDescription('Low event class for this analog input sensor')
espcAIVlowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVlowValue.setStatus('current')
if mibBuilder.loadTexts: espcAIVlowValue.setDescription('Very low event threshold (decivolts or tenths of milliamps) for this analog input sensor')
espcAIVlowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVlowActions.setStatus('current')
if mibBuilder.loadTexts: espcAIVlowActions.setDescription('Very low event actions for this analog input sensor')
espcAIVlowTrapnum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVlowTrapnum.setStatus('current')
if mibBuilder.loadTexts: espcAIVlowTrapnum.setDescription('Very low event actions for this analog input sensor')
espcAIVlowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIVlowClass.setStatus('current')
if mibBuilder.loadTexts: espcAIVlowClass.setDescription('Very low event class for this analog input sensor')
espcAIConvUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvUnitName.setStatus('current')
if mibBuilder.loadTexts: espcAIConvUnitName.setDescription('Converstion unit name for this analog input sensor')
espcAIConvHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvHighValue.setStatus('current')
if mibBuilder.loadTexts: espcAIConvHighValue.setDescription('Conversion high value for this analog input sensor')
espcAIConvHighUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvHighUnit.setStatus('current')
if mibBuilder.loadTexts: espcAIConvHighUnit.setDescription('Conversion high unit value for this analog input sensor')
espcAIConvHighSign = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvHighSign.setStatus('current')
if mibBuilder.loadTexts: espcAIConvHighSign.setDescription('Conversion high sign for this analog input sensor')
espcAIConvLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvLowValue.setStatus('current')
if mibBuilder.loadTexts: espcAIConvLowValue.setDescription('Conversion low value for this analog input sensor')
espcAIConvLowUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvLowUnit.setStatus('current')
if mibBuilder.loadTexts: espcAIConvLowUnit.setDescription('Conversion unit low unit value for this analog input sensor')
espcAIConvLowSign = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 2, 5, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espcAIConvLowSign.setStatus('current')
if mibBuilder.loadTexts: espcAIConvLowSign.setDescription('Conversion low sign for this analog input sensor')
numberPorts = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberPorts.setStatus('current')
if mibBuilder.loadTexts: numberPorts.setDescription('Number of RS-232 ports found. Range: 2 or 4')
portConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2), )
if mibBuilder.loadTexts: portConfigTable.setStatus('current')
if mibBuilder.loadTexts: portConfigTable.setDescription('Port config table')
portConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "portConfigIndex"))
if mibBuilder.loadTexts: portConfigEntry.setStatus('current')
if mibBuilder.loadTexts: portConfigEntry.setDescription('Port config entry')
portConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfigIndex.setStatus('current')
if mibBuilder.loadTexts: portConfigIndex.setDescription('Index for ports')
portConfigBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigBaud.setStatus('current')
if mibBuilder.loadTexts: portConfigBaud.setDescription('Baud rate, 19200, 9600, etc.')
portConfigDataFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDataFormat.setStatus('current')
if mibBuilder.loadTexts: portConfigDataFormat.setDescription('Value representing word length, parity, and stop bits: 0=8N1, 1=7E1, 2=7O1, 3=7N1, 4=8O2')
portConfigStripPtOutputLfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigStripPtOutputLfs.setStatus('current')
if mibBuilder.loadTexts: portConfigStripPtOutputLfs.setDescription('Strip passthrough LFs sent to device on this port: 1=yes, 0=no.')
portConfigStripPtInputLfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigStripPtInputLfs.setStatus('current')
if mibBuilder.loadTexts: portConfigStripPtInputLfs.setDescription('Strip passthrough LFs received from device on this port: 1=yes, 0=no.')
portConfigMaskEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMaskEnable.setStatus('current')
if mibBuilder.loadTexts: portConfigMaskEnable.setDescription('1=Use the character mask on this port. 0=Do not use the mask. When the mask is enabled, the following ASCII characters are ignored on the port: 0, 1, 4-9, 11, 12, 14-31, 128-255. When the mask is disabled, all characters are accepted on the port.')
portConfigDAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDAEnable.setStatus('current')
if mibBuilder.loadTexts: portConfigDAEnable.setDescription('1=Enable the Data Alarm Evaluator for data on this port. 0=Do not evaluate data on this port.')
portConfigStoreAlarmsDPT = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigStoreAlarmsDPT.setStatus('current')
if mibBuilder.loadTexts: portConfigStoreAlarmsDPT.setDescription('ON/OFF: store alarms received during passthrough')
portConfigRecordTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigRecordTimeout.setStatus('current')
if mibBuilder.loadTexts: portConfigRecordTimeout.setDescription('Timeout after last unterminated data received upon which data collected so far is stored as a record.')
portConfigDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDataType.setStatus('current')
if mibBuilder.loadTexts: portConfigDataType.setDescription('How the port interprets incoming data: ASCII/BINARY')
portConfigEtxToCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigEtxToCRLF.setStatus('current')
if mibBuilder.loadTexts: portConfigEtxToCRLF.setDescription('ON/OFF whether the port translates incoming ETX to CRLF')
portConfigMLREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREnable.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREnable.setDescription('ON/OFF Whether Multiline Records are collected on this port.')
portConfigMLRStartField1Pos = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRStartField1Pos.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRStartField1Pos.setDescription('Position of MLR start field 1')
portConfigMLRStartField1Text = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRStartField1Text.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRStartField1Text.setDescription('Text to match MLR start field 1')
portConfigMLRStartField2Pos = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRStartField2Pos.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRStartField2Pos.setDescription('Position of MLR start field 2')
portConfigMLRStartField2Text = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRStartField2Text.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRStartField2Text.setDescription('Text to match MLR start field 2')
portConfigMLRNumLinesBefore = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRNumLinesBefore.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRNumLinesBefore.setDescription('Number of lines before the starting line which should be included in the MLR')
portConfigMLREndDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndDetection.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndDetection.setDescription('How the MLR parser determines what ends an MLR: by FORMULA, number of lines received so far (COUNT), or number of blank lines received so far (BLANKS)')
portConfigMLRLineCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRLineCount.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRLineCount.setDescription('Number of lines in the MLR (used by the end detection mode)')
portConfigMLREndField1Pos = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndField1Pos.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndField1Pos.setDescription('Position of MLR end field 1')
portConfigMLREndField1Text = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndField1Text.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndField1Text.setDescription('Text to match MLR end field 1')
portConfigMLREndField2Pos = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndField2Pos.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndField2Pos.setDescription('Position of MLR end field 2')
portConfigMLREndField2Text = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLREndField2Text.setStatus('current')
if mibBuilder.loadTexts: portConfigMLREndField2Text.setDescription('Text to match MLR end field 2')
portConfigMLRUseComplexRules = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigMLRUseComplexRules.setStatus('current')
if mibBuilder.loadTexts: portConfigMLRUseComplexRules.setDescription('ON/OFF MLR parser uses complex rules (field possitions/ formulas, etc.)')
portConfigBufferPT = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigBufferPT.setStatus('current')
if mibBuilder.loadTexts: portConfigBufferPT.setDescription('ON/OFF records received during passthrough mode are buffered/stored in the database')
portConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigId.setStatus('current')
if mibBuilder.loadTexts: portConfigId.setDescription('The text identifer for the port')
eth1Mode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1Mode.setStatus('current')
if mibBuilder.loadTexts: eth1Mode.setDescription('Mode of the Ethernet1 interface: STATIC,DHCP,VLAN')
eth1Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1Address.setStatus('current')
if mibBuilder.loadTexts: eth1Address.setDescription('Ethernet1 IP address')
eth1SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1SubnetMask.setDescription('Ethernet1 subnet mask')
eth1Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1Router.setStatus('current')
if mibBuilder.loadTexts: eth1Router.setDescription('Ethernet1 router')
eth1VLAN1ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1ID.setDescription('Ethernet1 VLAN1 ID')
eth1VLAN1Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1Priority.setDescription('Ethernet1 VLAN1 priority')
eth1VLAN1Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1Address.setDescription('Ethernet1 VLAN1 IP address')
eth1VLAN1SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1SubnetMask.setDescription('Ethernet1 VLAN1 subnet mask')
eth1VLAN1Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN1Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN1Router.setDescription('Ethernet1 VLAN1 router')
eth1VLAN2ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2ID.setDescription('Ethernet1 VLAN2 ID')
eth1VLAN2Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2Priority.setDescription('Ethernet1 VLAN2 priority')
eth1VLAN2Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2Address.setDescription('Ethernet1 VLAN2 IP address')
eth1VLAN2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2SubnetMask.setDescription('Ethernet1 VLAN2 subnet mask')
eth1VLAN2Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN2Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN2Router.setDescription('Ethernet1 VLAN2 router')
eth1VLAN3ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3ID.setDescription('Ethernet1 VLAN3 ID')
eth1VLAN3Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3Priority.setDescription('Ethernet1 VLAN3 priority')
eth1VLAN3Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3Address.setDescription('Ethernet1 VLAN3 IP address')
eth1VLAN3SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3SubnetMask.setDescription('Ethernet1 VLAN3 subnet mask')
eth1VLAN3Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN3Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN3Router.setDescription('Ethernet1 VLAN3 router')
eth1VLAN4ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4ID.setDescription('Ethernet1 VLAN4 ID')
eth1VLAN4Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4Priority.setDescription('Ethernet1 VLAN4 priority')
eth1VLAN4Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4Address.setDescription('Ethernet1 VLAN4 IP address')
eth1VLAN4SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4SubnetMask.setDescription('Ethernet1 VLAN4 subnet mask')
eth1VLAN4Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN4Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN4Router.setDescription('Ethernet1 VLAN4 router')
eth1VLAN5ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5ID.setDescription('Ethernet1 VLAN5 ID')
eth1VLAN5Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5Priority.setDescription('Ethernet1 VLAN5 priority')
eth1VLAN5Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5Address.setDescription('Ethernet1 VLAN5 IP address')
eth1VLAN5SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5SubnetMask.setDescription('Ethernet1 VLAN5 subnet mask')
eth1VLAN5Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN5Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN5Router.setDescription('Ethernet1 VLAN5 router')
eth1VLAN6ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6ID.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6ID.setDescription('Ethernet1 VLAN6 ID')
eth1VLAN6Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6Priority.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6Priority.setDescription('Ethernet1 VLAN6 priority')
eth1VLAN6Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6Address.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6Address.setDescription('Ethernet1 VLAN6 IP address')
eth1VLAN6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6SubnetMask.setDescription('Ethernet1 VLAN6 subnet mask')
eth1VLAN6Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 5, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth1VLAN6Router.setStatus('current')
if mibBuilder.loadTexts: eth1VLAN6Router.setDescription('Ethernet1 VLAN6 router')
eth1MAC = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth1MAC.setStatus('current')
if mibBuilder.loadTexts: eth1MAC.setDescription('Ethernet1 MAC')
eth2Mode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2Mode.setStatus('current')
if mibBuilder.loadTexts: eth2Mode.setDescription('Mode of the Ethernet2 interface: STATIC,DHCP,VLAN')
eth2Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2Address.setStatus('current')
if mibBuilder.loadTexts: eth2Address.setDescription('Ethernet2 IP address')
eth2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2SubnetMask.setDescription('Ethernet2 subnet mask')
eth2Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2Router.setStatus('current')
if mibBuilder.loadTexts: eth2Router.setDescription('Ethernet2 router')
eth2VLAN1ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1ID.setDescription('Ethernet2 VLAN1 ID')
eth2VLAN1Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1Priority.setDescription('Ethernet2 VLAN1 priority')
eth2VLAN1Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1Address.setDescription('Ethernet2 VLAN1 IP address')
eth2VLAN1SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1SubnetMask.setDescription('Ethernet2 VLAN1 subnet mask')
eth2VLAN1Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN1Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN1Router.setDescription('Ethernet2 VLAN1 router')
eth2VLAN2ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2ID.setDescription('Ethernet2 VLAN2 ID')
eth2VLAN2Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2Priority.setDescription('Ethernet2 VLAN2 priority')
eth2VLAN2Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2Address.setDescription('Ethernet2 VLAN2 IP address')
eth2VLAN2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2SubnetMask.setDescription('Ethernet2 VLAN2 subnet mask')
eth2VLAN2Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN2Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN2Router.setDescription('Ethernet2 VLAN2 router')
eth2VLAN3ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3ID.setDescription('Ethernet2 VLAN3 ID')
eth2VLAN3Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3Priority.setDescription('Ethernet2 VLAN3 priority')
eth2VLAN3Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3Address.setDescription('Ethernet2 VLAN3 IP address')
eth2VLAN3SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3SubnetMask.setDescription('Ethernet2 VLAN3 subnet mask')
eth2VLAN3Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN3Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN3Router.setDescription('Ethernet2 VLAN3 router')
eth2VLAN4ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4ID.setDescription('Ethernet2 VLAN4 ID')
eth2VLAN4Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4Priority.setDescription('Ethernet2 VLAN4 priority')
eth2VLAN4Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4Address.setDescription('Ethernet2 VLAN4 IP address')
eth2VLAN4SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4SubnetMask.setDescription('Ethernet2 VLAN4 subnet mask')
eth2VLAN4Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN4Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN4Router.setDescription('Ethernet2 VLAN4 router')
eth2VLAN5ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5ID.setDescription('Ethernet2 VLAN5 ID')
eth2VLAN5Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5Priority.setDescription('Ethernet2 VLAN5 priority')
eth2VLAN5Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5Address.setDescription('Ethernet2 VLAN5 IP address')
eth2VLAN5SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5SubnetMask.setDescription('Ethernet2 VLAN5 subnet mask')
eth2VLAN5Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN5Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN5Router.setDescription('Ethernet2 VLAN5 router')
eth2VLAN6ID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6ID.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6ID.setDescription('Ethernet2 VLAN6 ID')
eth2VLAN6Priority = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6Priority.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6Priority.setDescription('Ethernet2 VLAN6 priority')
eth2VLAN6Address = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6Address.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6Address.setDescription('Ethernet2 VLAN6 IP address')
eth2VLAN6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6SubnetMask.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6SubnetMask.setDescription('Ethernet2 VLAN6 subnet mask')
eth2VLAN6Router = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 5, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eth2VLAN6Router.setStatus('current')
if mibBuilder.loadTexts: eth2VLAN6Router.setDescription('Ethernet2 VLAN6 router')
eth2MAC = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 1, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eth2MAC.setStatus('current')
if mibBuilder.loadTexts: eth2MAC.setDescription('Ethernet2 MAC')
defaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultRouter.setStatus('current')
if mibBuilder.loadTexts: defaultRouter.setDescription('The default router/gateway')
dnsTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 3), )
if mibBuilder.loadTexts: dnsTable.setStatus('current')
if mibBuilder.loadTexts: dnsTable.setDescription('DNS server address table')
dnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 3, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "dnsIndex"))
if mibBuilder.loadTexts: dnsEntry.setStatus('current')
if mibBuilder.loadTexts: dnsEntry.setDescription('DNS server address entry')
dnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIndex.setStatus('current')
if mibBuilder.loadTexts: dnsIndex.setDescription('Index for DNS server address')
dnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsAddress.setStatus('current')
if mibBuilder.loadTexts: dnsAddress.setDescription('DNS server address')
hostname = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostname.setStatus('current')
if mibBuilder.loadTexts: hostname.setDescription('The hostname of the unit')
hostTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 5), )
if mibBuilder.loadTexts: hostTable.setStatus('current')
if mibBuilder.loadTexts: hostTable.setDescription('Static host table')
hostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 5, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "hostIndex"))
if mibBuilder.loadTexts: hostEntry.setStatus('current')
if mibBuilder.loadTexts: hostEntry.setDescription('Static host entry')
hostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIndex.setStatus('current')
if mibBuilder.loadTexts: hostIndex.setDescription('Index for static host')
hostDeclaration = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostDeclaration.setStatus('current')
if mibBuilder.loadTexts: hostDeclaration.setDescription("Static host declaration string (i.e. 'address hostname')")
ncpDuplex = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncpDuplex.setStatus('current')
if mibBuilder.loadTexts: ncpDuplex.setDescription('For network command processor: 1=Input characters are echoed; 0=no echo.')
ncpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncpTimeout.setStatus('current')
if mibBuilder.loadTexts: ncpTimeout.setDescription('Network command processor inactivity timeout')
snmpAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentEnable.setStatus('current')
if mibBuilder.loadTexts: snmpAgentEnable.setDescription('ON/OFF for snmp agent')
snmpNtfnAttempts = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNtfnAttempts.setStatus('current')
if mibBuilder.loadTexts: snmpNtfnAttempts.setDescription('Maximum of times the unit attempts to send a notification (trap/inform) in 1 cycle')
snmpNtfnTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNtfnTimeout.setStatus('current')
if mibBuilder.loadTexts: snmpNtfnTimeout.setDescription('Number of seconds between retries of sending a notification')
snmpNtfnCycles = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNtfnCycles.setStatus('current')
if mibBuilder.loadTexts: snmpNtfnCycles.setDescription('Number of times the unit attempts a group of attempts to send a notification (a cycle)')
snmpNtfnSnooze = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNtfnSnooze.setStatus('current')
if mibBuilder.loadTexts: snmpNtfnSnooze.setDescription('Minutes between cycles')
snmpProxyTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 8, 1), )
if mibBuilder.loadTexts: snmpProxyTable.setStatus('current')
if mibBuilder.loadTexts: snmpProxyTable.setDescription('Table of SNMP proxy entries')
snmpProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 8, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "snmpProxyIndex"))
if mibBuilder.loadTexts: snmpProxyEntry.setStatus('current')
if mibBuilder.loadTexts: snmpProxyEntry.setDescription('Entry for SNMP proxy table')
snmpProxyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpProxyIndex.setStatus('current')
if mibBuilder.loadTexts: snmpProxyIndex.setDescription('Index for SNMP proxy table')
snmpProxyOIDBranch = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 8, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProxyOIDBranch.setStatus('current')
if mibBuilder.loadTexts: snmpProxyOIDBranch.setDescription('The OID branch to trigger the proxy function. This should cover the device to proxy.')
snmpProxyIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 8, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProxyIP.setStatus('current')
if mibBuilder.loadTexts: snmpProxyIP.setDescription('The IP address of the device to proxy.')
snmpProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpProxyPort.setStatus('current')
if mibBuilder.loadTexts: snmpProxyPort.setDescription('The UDP port on which the device to proxy listens.')
snmpPMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPMode.setStatus('current')
if mibBuilder.loadTexts: snmpPMode.setDescription('Mode of poll operation: OFF or POLL ONLY (just make the results available to view).')
snmpPRequestTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4), )
if mibBuilder.loadTexts: snmpPRequestTable.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestTable.setDescription('Table of SNMP Poll requests.')
snmpPRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "snmpPRequestIndex"))
if mibBuilder.loadTexts: snmpPRequestEntry.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestEntry.setDescription('Entry for table pf SNMP Poll requests.')
snmpPRequestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestIndex.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestIndex.setDescription('Index for table of SNMP Poll requests.')
snmpPRequestDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestDescription.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestDescription.setDescription('A description for this single telemetry request; no functional effect.')
snmpPRequestAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestAgent.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestAgent.setDescription('SNMP Agent IP address or hostname for this single telemetry request.')
snmpPRequestReadcom = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestReadcom.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestReadcom.setDescription('SNMP read community for this single telemetry request.')
snmpPRequestOID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestOID.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestOID.setDescription('SNMP object identifier for this single telemetry request.')
snmpPRequestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPRequestPeriod.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestPeriod.setDescription('How many seconds between periodic SNMP polls of this single telemetry request.')
snmpPRequestResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestResultStatus.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestResultStatus.setDescription('Status of the last attempt for this telemetry request.')
snmpPRequestResultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestResultValue.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestResultValue.setDescription('The telemetry value if the last request was successful.')
snmpPRequestResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestResultTime.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestResultTime.setDescription('The timestamp of the last telemetry request.')
snmpPRequestResultType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 8, 9, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPRequestResultType.setStatus('current')
if mibBuilder.loadTexts: snmpPRequestResultType.setDescription('The type of the telemetry as reported by the agent.')
ftpPushEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushEnable.setStatus('current')
if mibBuilder.loadTexts: ftpPushEnable.setDescription('Enable FTP push for REGULAR (protocol: FTP) or SECURE (protocol: SFTP) operation, or disable it (OFF)')
ftpPushServer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushServer.setStatus('current')
if mibBuilder.loadTexts: ftpPushServer.setDescription('FTP server to which data should be pushed')
ftpPushAccount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushAccount.setStatus('current')
if mibBuilder.loadTexts: ftpPushAccount.setDescription('FTP push account')
ftpPushDirectory = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushDirectory.setStatus('current')
if mibBuilder.loadTexts: ftpPushDirectory.setDescription('FTP push directory')
ftpPushperiod = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushperiod.setStatus('current')
if mibBuilder.loadTexts: ftpPushperiod.setDescription('Minutes between pushes')
ftpPushPushFileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 8), )
if mibBuilder.loadTexts: ftpPushPushFileTable.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushFileTable.setDescription('Table of files to push')
ftpPushPushFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 8, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "ftpPushPushFileIndex"))
if mibBuilder.loadTexts: ftpPushPushFileEntry.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushFileEntry.setDescription('Entry for table of files to push')
ftpPushPushFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPushPushFileIndex.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushFileIndex.setDescription('Index for table of files to push')
ftpPushPushFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPushFile.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushFile.setDescription('ON/OFF push this local FILEx')
ftpPushPushAudit = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPushAudit.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushAudit.setDescription('ON/OFF push the audit log')
ftpPushPushAlarms = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPushAlarms.setStatus('current')
if mibBuilder.loadTexts: ftpPushPushAlarms.setDescription('ON/OFF push the alarms/events file')
ftpPushRemoteFileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 11), )
if mibBuilder.loadTexts: ftpPushRemoteFileTable.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteFileTable.setDescription('Table of remote names of files to push')
ftpPushRemoteFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 11, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "ftpPushRemoteFileIndex"))
if mibBuilder.loadTexts: ftpPushRemoteFileEntry.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteFileEntry.setDescription('Entry for table of remote names of files to push')
ftpPushRemoteFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPushRemoteFileIndex.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteFileIndex.setDescription('Index for table of remote names of files to push')
ftpPushRemoteFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushRemoteFileName.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteFileName.setDescription('remote name of pushed FILEx (name on server)')
ftpPushRemoteAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushRemoteAlarmName.setStatus('current')
if mibBuilder.loadTexts: ftpPushRemoteAlarmName.setDescription('Filename on server for alarms')
ftpPushPassive = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPassive.setStatus('current')
if mibBuilder.loadTexts: ftpPushPassive.setDescription('ON/OFF use ftp passive mode')
ftpPushIncludeDate = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushIncludeDate.setStatus('current')
if mibBuilder.loadTexts: ftpPushIncludeDate.setDescription('ON/OFF include the date in the name of the pushed file')
ftpPushIncludeTime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushIncludeTime.setStatus('current')
if mibBuilder.loadTexts: ftpPushIncludeTime.setDescription('ON/OFF include the time in the name of the pushed file')
ftpPushIncludeSeq = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 9, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushIncludeSeq.setStatus('current')
if mibBuilder.loadTexts: ftpPushIncludeSeq.setDescription('ON/OFF include a sequence number in the name of the pushed file')
ethRoutingEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethRoutingEnable.setStatus('current')
if mibBuilder.loadTexts: ethRoutingEnable.setDescription('ON/OFF unit routes IP traffic from Ethernet to PPP/Wireless')
ethRoutingNATEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethRoutingNATEnable.setStatus('current')
if mibBuilder.loadTexts: ethRoutingNATEnable.setDescription('ON/OFF unit applies NAT on routed IP frames egressing the unit on its PPP interface')
ipRestrictionTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 12, 1, 1), )
if mibBuilder.loadTexts: ipRestrictionTable.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionTable.setDescription('Table of IP restrictions')
ipRestrictionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 12, 1, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "ipRestrictionIndex"))
if mibBuilder.loadTexts: ipRestrictionEntry.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionEntry.setDescription('Entry for table of IP restrictions')
ipRestrictionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRestrictionIndex.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionIndex.setDescription('Index for table of IP restrictions')
ipRestrictionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 12, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRestrictionEnable.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionEnable.setDescription('ON/OFF enable this IP restriction')
ipRestrictionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 12, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRestrictionMask.setStatus('current')
if mibBuilder.loadTexts: ipRestrictionMask.setDescription('IP restriction mask')
rtsFileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1), )
if mibBuilder.loadTexts: rtsFileTable.setStatus('current')
if mibBuilder.loadTexts: rtsFileTable.setDescription('Table of RTS files')
rtsFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "rtsFileIndex"))
if mibBuilder.loadTexts: rtsFileEntry.setStatus('current')
if mibBuilder.loadTexts: rtsFileEntry.setDescription('Entry for table of RTS files')
rtsFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsFileIndex.setStatus('current')
if mibBuilder.loadTexts: rtsFileIndex.setDescription('Index for table of RTS files')
rtsFileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileMode.setStatus('current')
if mibBuilder.loadTexts: rtsFileMode.setDescription('RTS mode (OFF,LISTEN,PUSH) for FILEx')
rtsFileShowAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileShowAnswer.setStatus('current')
if mibBuilder.loadTexts: rtsFileShowAnswer.setDescription('Show answer string upon RTS connect for FILEx')
rtsFileReqXON = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileReqXON.setStatus('current')
if mibBuilder.loadTexts: rtsFileReqXON.setDescription('ON/OFF require XON to start flow for FILEx')
rtsFileTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileTimeout.setStatus('current')
if mibBuilder.loadTexts: rtsFileTimeout.setDescription('Idle connection close timer (0 means no timeout) for FILEx')
rtsFileEmptyClose = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFileEmptyClose.setStatus('current')
if mibBuilder.loadTexts: rtsFileEmptyClose.setDescription('ON/OFF close the socket when FILEx is empty')
rtsFilePushHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFilePushHost.setStatus('current')
if mibBuilder.loadTexts: rtsFilePushHost.setDescription('Host to which FILEx should be pushed via RTS')
rtsFilePushPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFilePushPort.setStatus('current')
if mibBuilder.loadTexts: rtsFilePushPort.setDescription('TCP port to which FILEx should be pushed via RTS')
rtsFilePushRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsFilePushRetryTimer.setStatus('current')
if mibBuilder.loadTexts: rtsFilePushRetryTimer.setDescription('Retry timer (seconds) for retrying failed RTS push connect attempts')
rtsAlarmsMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsMode.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsMode.setDescription('RTS mode (OFF,LISTEN,PUSH) for alarms file')
rtsAlarmsShowAnswer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsShowAnswer.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsShowAnswer.setDescription('Show answer string upon RTS connect for alarms file')
rtsAlarmsReqXON = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsReqXON.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsReqXON.setDescription('ON/OFF require XON to start flow for alarms file')
rtsAlarmsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsTimeout.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsTimeout.setDescription('Idle connection close timer (0 means no timeout) for alarms file')
rtsAlarmsEmptyClose = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsEmptyClose.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsEmptyClose.setDescription('ON/OFF close the socket when this file is empty for alarms file')
rtsAlarmsPushHost = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsPushHost.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsPushHost.setDescription('Host to which alarms file should be pushed via RTS')
rtsAlarmsPushPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsPushPort.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsPushPort.setDescription('TCP port to which alarms file should be pushed via RTS')
rtsAlarmsPushRetryTimer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 13, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsAlarmsPushRetryTimer.setStatus('current')
if mibBuilder.loadTexts: rtsAlarmsPushRetryTimer.setDescription('Retry timer (seconds) for retrying failed RTS push connect attempts')
trapIncludeDateTime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeDateTime.setStatus('current')
if mibBuilder.loadTexts: trapIncludeDateTime.setDescription('ON/OFF include date and time in stock trap message')
trapIncludeSiteName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeSiteName.setStatus('current')
if mibBuilder.loadTexts: trapIncludeSiteName.setDescription('ON/OFF include site name in stock trap message')
trapIncludeSensorID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeSensorID.setStatus('current')
if mibBuilder.loadTexts: trapIncludeSensorID.setDescription('ON/OFF include sensor ID in stock trap message')
trapIncludeUDName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeUDName.setStatus('current')
if mibBuilder.loadTexts: trapIncludeUDName.setDescription('ON/OFF include user defined name in stock trap message')
trapIncludeUDState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeUDState.setStatus('current')
if mibBuilder.loadTexts: trapIncludeUDState.setDescription('ON/OFF include user defined state in stock trap message')
trapIncludeSourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIncludeSourceAddress.setStatus('current')
if mibBuilder.loadTexts: trapIncludeSourceAddress.setDescription('ON/OFF include source IP address in stock trap message')
trapAuthFailEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 14, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAuthFailEnable.setStatus('current')
if mibBuilder.loadTexts: trapAuthFailEnable.setDescription('ON/OFF enable trap sent upon SNMP authentication failure')
wirelessMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 16, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMode.setStatus('current')
if mibBuilder.loadTexts: wirelessMode.setDescription('Wireless mode (OFF,PERMANENT-EDGE)')
wirelessAPN = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 16, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPN.setStatus('current')
if mibBuilder.loadTexts: wirelessAPN.setDescription('Wireless access point name')
wirelessIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: wirelessIdleTimeout.setDescription('Wireless idle timeout')
wirelessPIN = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 16, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessPIN.setStatus('current')
if mibBuilder.loadTexts: wirelessPIN.setDescription('Wireless modem SIM PIN')
wirelessDRE = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 16, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDRE.setStatus('current')
if mibBuilder.loadTexts: wirelessDRE.setDescription('Default route enable for wireless network interface. When this is ON, the wireless link, if up, becomes the default route, overriding the default route setting (defaultRouter object). When OFF, the default route setting controls the default route and the wireless link does not become the default route.')
emailServer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailServer.setStatus('current')
if mibBuilder.loadTexts: emailServer.setDescription('SMTP server to which the unit sends email')
emailDomain = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 17, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailDomain.setStatus('current')
if mibBuilder.loadTexts: emailDomain.setDescription('Domain to use in recipient address')
emailAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 17, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailAuthEnable.setStatus('current')
if mibBuilder.loadTexts: emailAuthEnable.setDescription('ON/OFF enable SMTP authentication')
arpFilter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpFilter.setStatus('current')
if mibBuilder.loadTexts: arpFilter.setDescription('ARP filter code')
webEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 19, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webEnable.setStatus('current')
if mibBuilder.loadTexts: webEnable.setDescription('ON/OFF for the web interface')
webPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webPort.setStatus('current')
if mibBuilder.loadTexts: webPort.setDescription('TCP port on which web interface listens')
webTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 4, 19, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webTimeout.setStatus('current')
if mibBuilder.loadTexts: webTimeout.setDescription('Web interface session timeout (seconds)')
clock = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clock.setStatus('current')
if mibBuilder.loadTexts: clock.setDescription("Text string for date and time; e.g. 'SUN 01/02/98 12:34:27'. When setting this object, only the date and time are required; the unit will ignore a specified day of week because it is calculated from the date and time. When this object is included in a notification as a varbind, it represents the time that the triggering event occurred.")
consoleDuplex = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 10, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDuplex.setStatus('current')
if mibBuilder.loadTexts: consoleDuplex.setDescription('ON/OFF characters echoed on telnet command session')
consoleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleTimeout.setDescription('Minutes of inactivity after which telnet command session is terminated')
consoleConfirm = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 10, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleConfirm.setStatus('current')
if mibBuilder.loadTexts: consoleConfirm.setDescription('ON/OFF Prompt to confirm certain actions')
scShowPasswordPrompt = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scShowPasswordPrompt.setStatus('current')
if mibBuilder.loadTexts: scShowPasswordPrompt.setDescription('ON/OFF show password prompt upon login')
scConsoleLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scConsoleLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scConsoleLoginRequired.setDescription('ON/OFF login required upon connecting via console')
scModemLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scModemLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scModemLoginRequired.setDescription('ON/OFF login required upon connecting via modem')
scTelnetLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTelnetLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scTelnetLoginRequired.setDescription('ON/OFF login required upon connecting via Telnet')
scTelnetPTLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTelnetPTLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scTelnetPTLoginRequired.setDescription('ON/OFF login required upon connecting via Telnet to pass- through ports (TCP ports 210x)')
scRTSLoginRequired = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scRTSLoginRequired.setStatus('current')
if mibBuilder.loadTexts: scRTSLoginRequired.setDescription('ON/OFF login required upon connecting to RTS (TCP ports 220x)')
scAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scAuthMode.setStatus('current')
if mibBuilder.loadTexts: scAuthMode.setDescription('Authentication mode (USERNAME/PW,PW/USERNAME,PASSWORD ONLY)')
scRightsGroup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scRightsGroup.setStatus('current')
if mibBuilder.loadTexts: scRightsGroup.setDescription('The set of aliases used for the 8 available rights levels')
scSecret = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSecret.setStatus('current')
if mibBuilder.loadTexts: scSecret.setDescription('Shared secret for challenges')
secUserTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2), )
if mibBuilder.loadTexts: secUserTable.setStatus('current')
if mibBuilder.loadTexts: secUserTable.setDescription('Table of users')
secUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "secUserIndex"))
if mibBuilder.loadTexts: secUserEntry.setStatus('current')
if mibBuilder.loadTexts: secUserEntry.setDescription('Entry for table of users')
secUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secUserIndex.setStatus('current')
if mibBuilder.loadTexts: secUserIndex.setDescription('Index for table of users')
secUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserEnable.setStatus('current')
if mibBuilder.loadTexts: secUserEnable.setDescription('ON/OFF enable user')
secUserConnectVia = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserConnectVia.setStatus('current')
if mibBuilder.loadTexts: secUserConnectVia.setDescription('Methods by which user is allowed to connect: L=local (console) T=Telnet F=FTP R=RTS Ss=SSH W=Web ')
secUserLoginTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserLoginTo.setStatus('current')
if mibBuilder.loadTexts: secUserLoginTo.setDescription('The function presented to the user upon login (COMMAND, PASSTHROUGH,MENU)')
secUserAccessFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserAccessFile.setStatus('current')
if mibBuilder.loadTexts: secUserAccessFile.setDescription('The default access file associated with the user')
secUserPTEscapeTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserPTEscapeTo.setStatus('current')
if mibBuilder.loadTexts: secUserPTEscapeTo.setDescription('The function presented to the user upon escaping pass- through: currently only MENU')
secUserPPPType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserPPPType.setStatus('current')
if mibBuilder.loadTexts: secUserPPPType.setDescription('The kind of PPP access allowed to this user cannot connect via PPP (NONE), can connect but only to the unit (LOCAL), or can connect and route to Ethernet (ROUTING)')
secUserRights = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserRights.setStatus('current')
if mibBuilder.loadTexts: secUserRights.setDescription('The rights level granted to this user')
secUserEventsReadAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserEventsReadAccess.setStatus('current')
if mibBuilder.loadTexts: secUserEventsReadAccess.setDescription('DENY/ALLOW user to read the events/alarms file')
secUserAuditReadAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserAuditReadAccess.setStatus('current')
if mibBuilder.loadTexts: secUserAuditReadAccess.setDescription('DENY/ALLOW user to read the audit log')
secUserEventsWriteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserEventsWriteAccess.setStatus('current')
if mibBuilder.loadTexts: secUserEventsWriteAccess.setDescription('DENY/ALLOW user to delete the events file')
secUserAuditWriteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserAuditWriteAccess.setStatus('current')
if mibBuilder.loadTexts: secUserAuditWriteAccess.setDescription('DENY/ALLOW user to write to the audit log')
secUserExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserExpiration.setStatus('current')
if mibBuilder.loadTexts: secUserExpiration.setDescription('Expiration date/time of this user')
secUserCallbackNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserCallbackNumber1.setStatus('current')
if mibBuilder.loadTexts: secUserCallbackNumber1.setDescription('Number slot 1 the unit calls for dialback')
secUserCallbackNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserCallbackNumber2.setStatus('current')
if mibBuilder.loadTexts: secUserCallbackNumber2.setDescription('Number slot 2 the unit calls for dialback')
secUserCallbackNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserCallbackNumber3.setStatus('current')
if mibBuilder.loadTexts: secUserCallbackNumber3.setDescription('Number slot 3 the unit calls for dialback')
secUserChallengeTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeTelnetMode.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeTelnetMode.setDescription('Telnet challenge mode: when user logs in via telnet, unit allows access (OFF), presents a challenge (CHALLENGE), or unit sends a one-time-password (SEND PASSWORD) to a destination configured by secUserChallengeTelnetSendTo')
secUserChallengeModemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeModemMode.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeModemMode.setDescription('Modem challenge mode: when user logs in via modem, unit allows access (OFF), presents a challenge (CHALLENGE), sends a one-time-password (SEND PASSWORD) to a destination configured by secUserChallengeTelnetSendTo, or dials a number (CALLBACK) configured with secUserCallbackNumberx')
secUserChallengeConsoleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeConsoleMode.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeConsoleMode.setDescription('Console challenge mode: when user logs in via console, unit allows access (OFF), or presents a challenge (CHALLENGE)')
secUserChallengeTelnetSendTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeTelnetSendTo.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeTelnetSendTo.setDescription('Email action used as the destination address for one-time- password when a user logs in with a challenge mode of SEND PASSWORD')
secUserChallengeModemSendTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeModemSendTo.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeModemSendTo.setDescription('Modem action used as the destination phone number for one- time-password when a user logs in with a challenge mode of SEND PASSWORD')
secUserChallengeExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserChallengeExpiration.setStatus('current')
if mibBuilder.loadTexts: secUserChallengeExpiration.setDescription('Time (in minutes) after which a one-time-password is sent that it can be used to log in')
sfEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfEnable.setStatus('current')
if mibBuilder.loadTexts: sfEnable.setDescription('ON/OFF enable factory access')
sfSecret = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 11, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfSecret.setStatus('current')
if mibBuilder.loadTexts: sfSecret.setDescription('Secret used for factory access')
evClassNameTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 1), )
if mibBuilder.loadTexts: evClassNameTable.setStatus('current')
if mibBuilder.loadTexts: evClassNameTable.setDescription('Table of classes')
evClassNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "evClassNameIndex"))
if mibBuilder.loadTexts: evClassNameEntry.setStatus('current')
if mibBuilder.loadTexts: evClassNameEntry.setDescription('Entry for table of classes')
evClassNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evClassNameIndex.setStatus('current')
if mibBuilder.loadTexts: evClassNameIndex.setDescription('Index for table of classes')
evClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evClassName.setStatus('current')
if mibBuilder.loadTexts: evClassName.setDescription('Class name for this slot')
evReminderInterval = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evReminderInterval.setStatus('current')
if mibBuilder.loadTexts: evReminderInterval.setDescription('Interval (minutes) between EventSensor reminder events')
evLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogEnable.setStatus('current')
if mibBuilder.loadTexts: evLogEnable.setDescription('ON/OFF enable event log')
evLogStoreAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogStoreAlarm.setStatus('current')
if mibBuilder.loadTexts: evLogStoreAlarm.setDescription('ON/OFF store data alarms in event log')
evLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: evLogMaxSize.setDescription('max size (in KB) of event log')
evLogStoreSensor = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogStoreSensor.setStatus('current')
if mibBuilder.loadTexts: evLogStoreSensor.setDescription('ON/OFF store EventSensor events in event log')
evLogTimeStampAlarms = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogTimeStampAlarms.setStatus('current')
if mibBuilder.loadTexts: evLogTimeStampAlarms.setDescription('ON/OFF put timestamps on event log entries')
evLogPrependName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evLogPrependName.setStatus('current')
if mibBuilder.loadTexts: evLogPrependName.setDescription('ON/OFF prepend data event name to data alarm records in event log')
evMgmtReprocess = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 1, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evMgmtReprocess.setStatus('current')
if mibBuilder.loadTexts: evMgmtReprocess.setDescription("Number of sensors that have generated events since reset. Write this to reprocess each sensor's last generated event since reset. The value to write determines what kind of events should be reprocessed: 'all': all sensor events 'cc': cc events 'temperature': temperature events 'humidity': humidity events 'analog': analog input events 'fuel': fuel sensor events 'acpm': AC power monitor events 'battery': battery monitor events")
evSched1Enable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Enable.setStatus('current')
if mibBuilder.loadTexts: evSched1Enable.setDescription('ON/OFF enable this scheduled event')
evSched1Actions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Actions.setStatus('current')
if mibBuilder.loadTexts: evSched1Actions.setDescription('Actions for this scheduled event')
evSched1Message = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Message.setStatus('current')
if mibBuilder.loadTexts: evSched1Message.setDescription('Message for this scheduled event')
evSched1TrapNum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1TrapNum.setStatus('current')
if mibBuilder.loadTexts: evSched1TrapNum.setDescription('Trap number for this scheduled event')
evSched1Class = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Class.setStatus('current')
if mibBuilder.loadTexts: evSched1Class.setDescription('Class for this scheduled event')
evSched1Sunday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Sunday.setStatus('current')
if mibBuilder.loadTexts: evSched1Sunday.setDescription('Time on Sunday (HH:MM) when this scheduled event triggers')
evSched1Monday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Monday.setStatus('current')
if mibBuilder.loadTexts: evSched1Monday.setDescription('Time on Monday (HH:MM) when this scheduled event triggers')
evSched1Tuesday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Tuesday.setStatus('current')
if mibBuilder.loadTexts: evSched1Tuesday.setDescription('Time on Tuesday (HH:MM) when this scheduled event triggers')
evSched1Wednesday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Wednesday.setStatus('current')
if mibBuilder.loadTexts: evSched1Wednesday.setDescription('Time on Wednesday (HH:MM) when this scheduled event triggers')
evSched1Thursday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Thursday.setStatus('current')
if mibBuilder.loadTexts: evSched1Thursday.setDescription('Time on Thursday (HH:MM) when this scheduled event triggers')
evSched1Friday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Friday.setStatus('current')
if mibBuilder.loadTexts: evSched1Friday.setDescription('Time on Friday (HH:MM) when this scheduled event triggers')
evSched1Saturday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Saturday.setStatus('current')
if mibBuilder.loadTexts: evSched1Saturday.setDescription('Time on Saturday (HH:MM) when this scheduled event triggers')
evSched1Exclusions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 5, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched1Exclusions.setStatus('current')
if mibBuilder.loadTexts: evSched1Exclusions.setDescription('Exclusions (space-separated MM/DD-formatted dates) for this scheduled event')
evSched2Enable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Enable.setStatus('current')
if mibBuilder.loadTexts: evSched2Enable.setDescription('ON/OFF enable this scheduled event')
evSched2Actions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Actions.setStatus('current')
if mibBuilder.loadTexts: evSched2Actions.setDescription('Actions for this scheduled event')
evSched2Message = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Message.setStatus('current')
if mibBuilder.loadTexts: evSched2Message.setDescription('Message for this scheduled event')
evSched2TrapNum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2TrapNum.setStatus('current')
if mibBuilder.loadTexts: evSched2TrapNum.setDescription('Trap number for this scheduled event')
evSched2Class = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Class.setStatus('current')
if mibBuilder.loadTexts: evSched2Class.setDescription('Class for this scheduled event')
evSched2Sunday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Sunday.setStatus('current')
if mibBuilder.loadTexts: evSched2Sunday.setDescription('Time on Sunday (HH:MM) when this scheduled event triggers')
evSched2Monday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Monday.setStatus('current')
if mibBuilder.loadTexts: evSched2Monday.setDescription('Time on Monday (HH:MM) when this scheduled event triggers')
evSched2Tuesday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Tuesday.setStatus('current')
if mibBuilder.loadTexts: evSched2Tuesday.setDescription('Time on Tuesday (HH:MM) when this scheduled event triggers')
evSched2Wednesday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Wednesday.setStatus('current')
if mibBuilder.loadTexts: evSched2Wednesday.setDescription('Time on Wednesday (HH:MM) when this scheduled event triggers')
evSched2Thursday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Thursday.setStatus('current')
if mibBuilder.loadTexts: evSched2Thursday.setDescription('Time on Thursday (HH:MM) when this scheduled event triggers')
evSched2Friday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Friday.setStatus('current')
if mibBuilder.loadTexts: evSched2Friday.setDescription('Time on Friday (HH:MM) when this scheduled event triggers')
evSched2Saturday = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Saturday.setStatus('current')
if mibBuilder.loadTexts: evSched2Saturday.setDescription('Time on Saturday (HH:MM) when this scheduled event triggers')
evSched2Exclusions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 6, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evSched2Exclusions.setStatus('current')
if mibBuilder.loadTexts: evSched2Exclusions.setDescription('Exclusions (space-separated MM/DD-formatted dates) for this scheduled event')
evShskLowTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 7), )
if mibBuilder.loadTexts: evShskLowTable.setStatus('current')
if mibBuilder.loadTexts: evShskLowTable.setDescription('Table of serial handshaking low events')
evShskLowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 7, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "evShskLowIndex"))
if mibBuilder.loadTexts: evShskLowEntry.setStatus('current')
if mibBuilder.loadTexts: evShskLowEntry.setDescription('Entry for table of serial handshaking low events')
evShskLowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evShskLowIndex.setStatus('current')
if mibBuilder.loadTexts: evShskLowIndex.setDescription('Index for table of serial handshaking low events')
evShskLowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowEnable.setStatus('current')
if mibBuilder.loadTexts: evShskLowEnable.setDescription('ON/OFF: enable the serial handshaking low event for this port')
evShskLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowActions.setStatus('current')
if mibBuilder.loadTexts: evShskLowActions.setDescription('Actions for the serial handshaking low event for this port')
evShskLowMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowMessage.setStatus('current')
if mibBuilder.loadTexts: evShskLowMessage.setDescription('Message for the serial handshaking low event for this port')
evShskLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowClass.setStatus('current')
if mibBuilder.loadTexts: evShskLowClass.setDescription('Class for the serial handshaking low event for this port')
evShskLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: evShskLowTrapNum.setDescription('Trap number for the serial handshaking low event for this port')
evShskHighTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 8), )
if mibBuilder.loadTexts: evShskHighTable.setStatus('current')
if mibBuilder.loadTexts: evShskHighTable.setDescription('Table of serial handshaking high events')
evShskHighEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 8, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "evShskHighIndex"))
if mibBuilder.loadTexts: evShskHighEntry.setStatus('current')
if mibBuilder.loadTexts: evShskHighEntry.setDescription('Entry for table of serial handshaking high events')
evShskHighIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evShskHighIndex.setStatus('current')
if mibBuilder.loadTexts: evShskHighIndex.setDescription('Index for table of serial handshaking high events')
evShskHighEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighEnable.setStatus('current')
if mibBuilder.loadTexts: evShskHighEnable.setDescription('ON/OFF: enable the serial handshaking high event for this port')
evShskHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighActions.setStatus('current')
if mibBuilder.loadTexts: evShskHighActions.setDescription('Actions for the serial handshaking high event for this port')
evShskHighMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighMessage.setStatus('current')
if mibBuilder.loadTexts: evShskHighMessage.setDescription('Message for the serial handshaking high event for this port')
evShskHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 8, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighClass.setStatus('current')
if mibBuilder.loadTexts: evShskHighClass.setDescription('Class for the serial handshaking high event for this port')
evShskHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evShskHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: evShskHighTrapNum.setDescription('Trap number for the serial handshaking high event for this port')
evNoSensorTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoSensorTimeout.setStatus('current')
if mibBuilder.loadTexts: evNoSensorTimeout.setDescription('Timeout (seconds) after which an EventSensor becomes unresponsive that this event is triggered')
evNoSensorActions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoSensorActions.setStatus('current')
if mibBuilder.loadTexts: evNoSensorActions.setDescription('Actions for no sensor event')
evNoSensorTrapNum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoSensorTrapNum.setStatus('current')
if mibBuilder.loadTexts: evNoSensorTrapNum.setDescription('Trap number for no sensor event')
evNoSensorClass = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evNoSensorClass.setStatus('current')
if mibBuilder.loadTexts: evNoSensorClass.setDescription('Class for no sensor event')
fuelSensorGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1), )
if mibBuilder.loadTexts: fuelSensorGeneralTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorGeneralTable.setDescription('This table organizes general fuel sensor attributes.')
fsGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "fsGenIndex"))
if mibBuilder.loadTexts: fsGenEntry.setStatus('current')
if mibBuilder.loadTexts: fsGenEntry.setDescription('Entry for fuel sensor general config table.')
fsGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsGenIndex.setStatus('current')
if mibBuilder.loadTexts: fsGenIndex.setDescription('Which fuel sensor in the fuel sensor general config table.')
fsGenName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenName.setStatus('current')
if mibBuilder.loadTexts: fsGenName.setDescription('Fuel sensor name.')
fsGenSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSensorType.setStatus('current')
if mibBuilder.loadTexts: fsGenSensorType.setDescription('Type of fuel sensor in use; NONE disables the fuel sensor.')
fsGenDistanceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenDistanceUnit.setStatus('current')
if mibBuilder.loadTexts: fsGenDistanceUnit.setDescription('Distance units in use when setting and indicating tank dimensions.')
fsGenRawValueTop = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenRawValueTop.setStatus('current')
if mibBuilder.loadTexts: fsGenRawValueTop.setDescription('Analog input reading corresponding to the SENSOR FULL point.')
fsGenTopOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenTopOffset.setStatus('current')
if mibBuilder.loadTexts: fsGenTopOffset.setDescription('Distance, in the specified distance unit, between the SENSOR FULL point and the TANK FULL point. The value is positive if the SENSOR FULL point is above the TANK FULL point, and negative if it is below.')
fsGenRawValueBottom = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenRawValueBottom.setStatus('current')
if mibBuilder.loadTexts: fsGenRawValueBottom.setDescription('Analog input reading corresponding to the minimum fluid height measurable by the fuel sensor.')
fsGenBottomOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenBottomOffset.setStatus('current')
if mibBuilder.loadTexts: fsGenBottomOffset.setDescription('Distance, in the specified distance unit, between the SENSOR EMPTY point and the TANK EMPTY point. The value is positive if the SENSOR EMPTY point is above the TANK EMPTY point, and negative if it is below.')
fsGenInputES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenInputES.setStatus('current')
if mibBuilder.loadTexts: fsGenInputES.setDescription('Which eventsensor contains the analog input associated with this fuel sensor. Allowed values are 200 (for internal ES), or 1-16.')
fsGenInputPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenInputPoint.setStatus('current')
if mibBuilder.loadTexts: fsGenInputPoint.setDescription('Which analog input point, on the specified eventsensor, that is associated with the fuel sensor.')
fsGenFilterAveraging = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenFilterAveraging.setStatus('current')
if mibBuilder.loadTexts: fsGenFilterAveraging.setDescription('Fuel sensor filter averaging factor.')
fsGenSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepEnable.setDescription('Fuel sensor System Reporting enable.')
fsGenSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepThreshold.setDescription('Fuel sensor System Reporting threshold (floating point value).')
fsGenSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepLimit.setDescription('Fuel sensor System Reporting limit.')
fsGenSysrepPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepPackage.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepPackage.setDescription('Fuel sensor System Reporting package number.')
fsGenSysrepType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsGenSysrepType.setStatus('current')
if mibBuilder.loadTexts: fsGenSysrepType.setDescription('Fuel sensor ASM profile type.')
fuelSensorTankTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2), )
if mibBuilder.loadTexts: fuelSensorTankTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorTankTable.setDescription('This table organizes tank-specific fuel sensor attributes.')
fsTankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "fsTankIndex"))
if mibBuilder.loadTexts: fsTankEntry.setStatus('current')
if mibBuilder.loadTexts: fsTankEntry.setDescription('Entry for fuel sensor tank config table.')
fsTankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTankIndex.setStatus('current')
if mibBuilder.loadTexts: fsTankIndex.setDescription('Which fuel sensor in the fuel sensor tank config table.')
fsTankHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankHeight.setStatus('current')
if mibBuilder.loadTexts: fsTankHeight.setDescription('Height of the tank, from the TANK EMPTY point to the TANK FULL point, in the specified distance unit (i.e. TANK HEIGHT). This is a floating point value.')
fsTankDimA = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankDimA.setStatus('current')
if mibBuilder.loadTexts: fsTankDimA.setDescription('Tank dimension measurement A for certain tank profiles. For HORIZ OVAL, this is the length of the straight section. This is a floating point value.')
fsTankDimB = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankDimB.setStatus('current')
if mibBuilder.loadTexts: fsTankDimB.setDescription('Tank dimension measurement B for certain tank profiles. For HORIZ OVAL, this is the radius of the curved section. This is a floating point value.')
fsTankVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankVolume.setStatus('current')
if mibBuilder.loadTexts: fsTankVolume.setDescription('How many volume units the tank contains, when full. This is a floating point value.')
fsTankVolumeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankVolumeUnit.setStatus('current')
if mibBuilder.loadTexts: fsTankVolumeUnit.setDescription('Name of the unit representing fluid volume in the tank. This is only used for display purposes; it does not affect the volume calculation.')
fsTankShape = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTankShape.setStatus('current')
if mibBuilder.loadTexts: fsTankShape.setDescription('The shape of the fuel tank. A value of LINEAR produces a fluid volume reading that is directly proportional to fluid height. The HORIZ CYL and HORIZ OVAL settings use a hard-coded formula to calculate the volume. The CUSTOM setting uses a strapping table that must be configured as well (see fuelSensorCustomTankTable).')
fuelSensorCustomTankTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 3), )
if mibBuilder.loadTexts: fuelSensorCustomTankTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorCustomTankTable.setDescription('This table organizes the custom tank strapping table. Each fuel sensor has a table of height/volume pairs in service only when the tank shape (fsTankShape) in CUSTOM. This allows the unit to calculate volumes for nonstandard tank shapes, to the degree that accurate height/volume measurements can be configured. This SNMP table has two indexes: the first for which fuel sensor and the second for which height/volume pair.')
fsCustomTankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 3, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "fsCustomTankIndexFS"), (0, "SITEBOSS-450-STD-MIB", "fsCustomTankIndexDatum"))
if mibBuilder.loadTexts: fsCustomTankEntry.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankEntry.setDescription('Entry for fuel sensor custom tank config table.')
fsCustomTankIndexFS = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCustomTankIndexFS.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankIndexFS.setDescription('Which fuel sensor in the fuel sensor tank config table. This is the first of two indexes for this SNMP table.')
fsCustomTankIndexDatum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCustomTankIndexDatum.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankIndexDatum.setDescription('Which hight/volume pair: there are 32 pairs per fuel sensor. This is the second of two indexes for this SNMP table.')
fsCustomTankHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsCustomTankHeight.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankHeight.setDescription('Height of custom tank height/volume pair. This is a floating point value.')
fsCustomTankVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsCustomTankVolume.setStatus('current')
if mibBuilder.loadTexts: fsCustomTankVolume.setDescription('Volume of custom tank height/volume pair. This is a floating point value.')
fuelSensorVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4), )
if mibBuilder.loadTexts: fuelSensorVolumeTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorVolumeTable.setDescription('This table organizes volume-event-specific fuel sensor attributes.')
fsVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "fsVolumeIndex"))
if mibBuilder.loadTexts: fsVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: fsVolumeEntry.setDescription('Entry for fuel sensor volume event config table.')
fsVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsVolumeIndex.setStatus('current')
if mibBuilder.loadTexts: fsVolumeIndex.setDescription('Which fuel sensor in the fuel sensor volume event config table.')
fsVolumeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeEnable.setStatus('current')
if mibBuilder.loadTexts: fsVolumeEnable.setDescription('Enable fuel sensor volume events.')
fsVolumeDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeDeadband.setStatus('current')
if mibBuilder.loadTexts: fsVolumeDeadband.setDescription('Fuel sensor deadband (hysteresis). This is a floating point value.')
fsVolumeVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVHighValue.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVHighValue.setDescription('Fuel sensor volume very high event threshold value. This is a floating point value.')
fsVolumeVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVHighActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVHighActions.setDescription('Fuel sensor volume very high event threshold actions.')
fsVolumeVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVHighTrapNum.setDescription('Fuel sensor volume very high event threshold trap number.')
fsVolumeVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVHighClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVHighClass.setDescription('Fuel sensor volume very high event threshold class (severity).')
fsVolumeHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeHighValue.setStatus('current')
if mibBuilder.loadTexts: fsVolumeHighValue.setDescription('Fuel sensor volume high event threshold value. This is a floating point value.')
fsVolumeHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeHighActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeHighActions.setDescription('Fuel sensor volume high event threshold actions.')
fsVolumeHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeHighTrapNum.setDescription('Fuel sensor volume high event threshold trap number.')
fsVolumeHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeHighClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeHighClass.setDescription('Fuel sensor volume high event threshold class (severity).')
fsVolumeNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeNormalActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeNormalActions.setDescription('Fuel sensor volume return to normal actions.')
fsVolumeNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeNormalTrapNum.setDescription('Fuel sensor volume return to normal trap number.')
fsVolumeNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeNormalClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeNormalClass.setDescription('Fuel sensor volume return to normal class (severity).')
fsVolumeLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeLowValue.setStatus('current')
if mibBuilder.loadTexts: fsVolumeLowValue.setDescription('Fuel sensor volume low event threshold value. This is a floating point value.')
fsVolumeLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeLowActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeLowActions.setDescription('Fuel sensor volume low event threshold actions.')
fsVolumeLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeLowTrapNum.setDescription('Fuel sensor volume low event threshold trap number.')
fsVolumeLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeLowClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeLowClass.setDescription('Fuel sensor volume low event threshold class (severity).')
fsVolumeVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVLowValue.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVLowValue.setDescription('Fuel sensor volume very low event threshold value. This is a floating point value.')
fsVolumeVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVLowActions.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVLowActions.setDescription('Fuel sensor volume very low event threshold actions.')
fsVolumeVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(519, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVLowTrapNum.setDescription('Fuel sensor volume very low event threshold trap number.')
fsVolumeVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsVolumeVLowClass.setStatus('current')
if mibBuilder.loadTexts: fsVolumeVLowClass.setDescription('Fuel sensor volume very low event threshold class (severity).')
fuelSensorDisconnectTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5), )
if mibBuilder.loadTexts: fuelSensorDisconnectTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorDisconnectTable.setDescription('This table organizes disconnect-event-specific fuel sensor attributes.')
fsDiscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "fsDiscIndex"))
if mibBuilder.loadTexts: fsDiscEntry.setStatus('current')
if mibBuilder.loadTexts: fsDiscEntry.setDescription('Entry for fuel sensor disconnect event config table.')
fsDiscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsDiscIndex.setStatus('current')
if mibBuilder.loadTexts: fsDiscIndex.setDescription('Which fuel sensor in the fuel sensor disconnect event config table.')
fsDiscEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscEnable.setStatus('current')
if mibBuilder.loadTexts: fsDiscEnable.setDescription('Fuel sensor disconnect event enable.')
fsDiscHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscHighValue.setStatus('current')
if mibBuilder.loadTexts: fsDiscHighValue.setDescription('High end of input value range when fuel sensor is disconnected. This is in the units of the analog input value.')
fsDiscLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscLowValue.setStatus('current')
if mibBuilder.loadTexts: fsDiscLowValue.setDescription('Low end of input value range when fuel sensor is disconnected. This is in the units of the analog input value.')
fsDiscActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscActions.setStatus('current')
if mibBuilder.loadTexts: fsDiscActions.setDescription('Fuel sensor disconnect event actions.')
fsDiscTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(515, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsDiscTrapNum.setDescription('Fuel sensor disconnect event trap number.')
fsDiscClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscClass.setStatus('current')
if mibBuilder.loadTexts: fsDiscClass.setDescription('Fuel sensor disconnect event class (severity).')
fsDiscNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscNormalActions.setStatus('current')
if mibBuilder.loadTexts: fsDiscNormalActions.setDescription('Fuel sensor disconnect return to normal actions.')
fsDiscNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(515, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsDiscNormalTrapNum.setDescription('Fuel sensor disconnect return to normal trap number.')
fsDiscNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 5, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsDiscNormalClass.setStatus('current')
if mibBuilder.loadTexts: fsDiscNormalClass.setDescription('Fuel sensor disconnect return to normal class (severity).')
fuelSensorSuddenChangeTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6), )
if mibBuilder.loadTexts: fuelSensorSuddenChangeTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorSuddenChangeTable.setDescription('This table organizes sudden-change-event-specific fuel sensor attributes.')
fsSuddenChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "fsSuddenChangeIndex"))
if mibBuilder.loadTexts: fsSuddenChangeEntry.setStatus('current')
if mibBuilder.loadTexts: fsSuddenChangeEntry.setDescription('Entry for fuel sensor sudden change event config table.')
fsSuddenChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSuddenChangeIndex.setStatus('current')
if mibBuilder.loadTexts: fsSuddenChangeIndex.setDescription('Which fuel sensor in the fuel sensor disconnect event config table.')
fsSuddenChangeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSuddenChangeEnable.setStatus('current')
if mibBuilder.loadTexts: fsSuddenChangeEnable.setDescription('Fuel volume sudden change event enable.')
fsSuddenChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 360))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSuddenChangeTime.setStatus('current')
if mibBuilder.loadTexts: fsSuddenChangeTime.setDescription("Fuel volume sudden change event time (minutes): what duration defines 'sudden'.")
fsSuddenChangeAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSuddenChangeAmplitude.setStatus('current')
if mibBuilder.loadTexts: fsSuddenChangeAmplitude.setDescription('Fuel volume sudden change event amplitude: what amount (in fuel volume units) over the duration (fsSuddenChangeTime) defines enough change.')
fsSuddenChangeActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSuddenChangeActions.setStatus('current')
if mibBuilder.loadTexts: fsSuddenChangeActions.setDescription('Fuel volume sudden change event actions.')
fsSuddenChangeTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(527, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSuddenChangeTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsSuddenChangeTrapNum.setDescription('Fuel volume sudden change event trap number.')
fsSuddenChangeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 6, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSuddenChangeClass.setStatus('current')
if mibBuilder.loadTexts: fsSuddenChangeClass.setDescription('Fuel volume sudden change event class (severity).')
fuelSensorSlowChangeTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7), )
if mibBuilder.loadTexts: fuelSensorSlowChangeTable.setStatus('current')
if mibBuilder.loadTexts: fuelSensorSlowChangeTable.setDescription('This table organizes slow-change-event-specific fuel sensor attributes.')
fsSlowChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "fsSlowChangeIndex"))
if mibBuilder.loadTexts: fsSlowChangeEntry.setStatus('current')
if mibBuilder.loadTexts: fsSlowChangeEntry.setDescription('Entry for fuel sensor slow change event config table.')
fsSlowChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSlowChangeIndex.setStatus('current')
if mibBuilder.loadTexts: fsSlowChangeIndex.setDescription('Which fuel sensor in the fuel sensor disconnect event config table.')
fsSlowChangeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSlowChangeEnable.setStatus('current')
if mibBuilder.loadTexts: fsSlowChangeEnable.setDescription('Fuel volume slow change event enable.')
fsSlowChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSlowChangeTime.setStatus('current')
if mibBuilder.loadTexts: fsSlowChangeTime.setDescription("Fuel volume slow change event time (minutes): what duration defines 'slow'.")
fsSlowChangeAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSlowChangeAmplitude.setStatus('current')
if mibBuilder.loadTexts: fsSlowChangeAmplitude.setDescription('Fuel volume slow change event amplitude: what amount (in fuel volume units) over the duration (fsSlowChangeTime) defines enough change.')
fsSlowChangeActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSlowChangeActions.setStatus('current')
if mibBuilder.loadTexts: fsSlowChangeActions.setDescription('Fuel volume slow change event actions.')
fsSlowChangeTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(528, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSlowChangeTrapNum.setStatus('current')
if mibBuilder.loadTexts: fsSlowChangeTrapNum.setDescription('Fuel volume slow change event trap number.')
fsSlowChangeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 11, 7, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsSlowChangeClass.setStatus('current')
if mibBuilder.loadTexts: fsSlowChangeClass.setDescription('Fuel volume slow change event class (severity).')
acpmGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1), )
if mibBuilder.loadTexts: acpmGeneralTable.setStatus('current')
if mibBuilder.loadTexts: acpmGeneralTable.setDescription('This table organizes general AC power monitor attributes.')
acpmGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "acpmGenIndex"))
if mibBuilder.loadTexts: acpmGenEntry.setStatus('current')
if mibBuilder.loadTexts: acpmGenEntry.setDescription('Entry for AC power monitor general config table.')
acpmGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmGenIndex.setStatus('current')
if mibBuilder.loadTexts: acpmGenIndex.setDescription('Which AC power monitor in the AC power monitor general config table.')
acpmGenDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenDevice.setStatus('current')
if mibBuilder.loadTexts: acpmGenDevice.setDescription('Model of the AC power monitor device. The unit needs this setting to know which registers to poll for the various data items, among other things.')
acpmGenName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenName.setStatus('current')
if mibBuilder.loadTexts: acpmGenName.setDescription('Name for the AC power monitor device.')
acpmGenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 247))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenAddress.setStatus('current')
if mibBuilder.loadTexts: acpmGenAddress.setDescription('Modbus address of the AC power monitor device.')
acpmGenPtRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenPtRatio.setStatus('current')
if mibBuilder.loadTexts: acpmGenPtRatio.setDescription('Ratio of secondary turns to primary turns on potential transformers (PT).')
acpmGenCtRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenCtRatio.setStatus('current')
if mibBuilder.loadTexts: acpmGenCtRatio.setDescription('Ratio of secondary turns to primary turns on current transformers (CT).')
acpmGenPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenPowerType.setStatus('current')
if mibBuilder.loadTexts: acpmGenPowerType.setDescription('Type of power being monitored.')
acpmGenSysrepPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenSysrepPackage.setStatus('current')
if mibBuilder.loadTexts: acpmGenSysrepPackage.setDescription('System reporting package number.')
acpmGenSysrepType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmGenSysrepType.setStatus('current')
if mibBuilder.loadTexts: acpmGenSysrepType.setDescription('ASM profile type.')
acpmAvgVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2), )
if mibBuilder.loadTexts: acpmAvgVoltageTable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageTable.setDescription('This table organizes AC power monitor average voltage attributes.')
acpmAvgVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "acpmAvgVoltageIndex"))
if mibBuilder.loadTexts: acpmAvgVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageEntry.setDescription('Entry for AC power monitor average voltage config table.')
acpmAvgVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmAvgVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageIndex.setDescription('Which AC power monitor in the AC power monitor average voltage config table.')
acpmAvgVoltageEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageEnable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageEnable.setDescription('Enable AC power monitor average voltage events.')
acpmAvgVoltageDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageDeadband.setDescription('Deadband (hysteresis) for average voltage event. This is a floating point value.')
acpmAvgVoltageVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVHighValue.setDescription('Very high event threshold. This is a floating point value.')
acpmAvgVoltageVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVHighActions.setDescription('Very high event actions.')
acpmAvgVoltageVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVHighTrapNum.setDescription('Very high event trap number.')
acpmAvgVoltageVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVHighClass.setDescription('Very high event class.')
acpmAvgVoltageHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageHighValue.setDescription('High event threshold. This is a floating point value.')
acpmAvgVoltageHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageHighActions.setDescription('High event actions.')
acpmAvgVoltageHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageHighTrapNum.setDescription('High event trap number.')
acpmAvgVoltageHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageHighClass.setDescription('High event class.')
acpmAvgVoltageNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageNormalActions.setDescription('Return to normal actions.')
acpmAvgVoltageNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageNormalTrapNum.setDescription('Return to normal trap number.')
acpmAvgVoltageNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageNormalClass.setDescription('Return to normal class.')
acpmAvgVoltageLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageLowValue.setDescription('Low event threshold. This is a floating point value.')
acpmAvgVoltageLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageLowActions.setDescription('Low event actions.')
acpmAvgVoltageLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageLowTrapNum.setDescription('Low event trap number.')
acpmAvgVoltageLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageLowClass.setDescription('Low event class.')
acpmAvgVoltageVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVLowValue.setDescription('Very low event threshold. This is a floating point value.')
acpmAvgVoltageVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVLowActions.setDescription('Very low event actions.')
acpmAvgVoltageVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(520, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVLowTrapNum.setDescription('Very low event trap number.')
acpmAvgVoltageVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageVLowClass.setDescription('Very low event class.')
acpmAvgVoltageSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageSysrepEnable.setDescription('System reporting enable for average voltage telemetry.')
acpmAvgVoltageSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageSysrepThreshold.setDescription('System reporting threshold for average voltage telemetry. This is a floating point value.')
acpmAvgVoltageSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgVoltageSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmAvgVoltageSysrepLimit.setDescription('System reporting limit for average voltage telemetry.')
acpmAvgCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3), )
if mibBuilder.loadTexts: acpmAvgCurrentTable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentTable.setDescription('This table organizes AC power monitor average current attributes.')
acpmAvgCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "acpmAvgCurrentIndex"))
if mibBuilder.loadTexts: acpmAvgCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentEntry.setDescription('Entry for AC power monitor average current config table.')
acpmAvgCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmAvgCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentIndex.setDescription('Which AC power monitor in the AC power monitor average current config table.')
acpmAvgCurrentEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentEnable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentEnable.setDescription('Enable AC power monitor average current events.')
acpmAvgCurrentDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentDeadband.setDescription('Deadband (hysteresis) for average current event. This is a floating point value.')
acpmAvgCurrentVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVHighValue.setDescription('Very high event threshold. This is a floating point value.')
acpmAvgCurrentVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVHighActions.setDescription('Very high event actions.')
acpmAvgCurrentVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVHighTrapNum.setDescription('Very high event trap number.')
acpmAvgCurrentVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVHighClass.setDescription('Very high event class.')
acpmAvgCurrentHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentHighValue.setDescription('High event threshold. This is a floating point value.')
acpmAvgCurrentHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentHighActions.setDescription('High event actions.')
acpmAvgCurrentHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentHighTrapNum.setDescription('High event trap number.')
acpmAvgCurrentHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentHighClass.setDescription('High event class.')
acpmAvgCurrentNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentNormalActions.setDescription('Return to normal actions.')
acpmAvgCurrentNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentNormalTrapNum.setDescription('Return to normal trap number.')
acpmAvgCurrentNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentNormalClass.setDescription('Return to normal class.')
acpmAvgCurrentLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentLowValue.setDescription('Low event threshold. This is a floating point value.')
acpmAvgCurrentLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentLowActions.setDescription('Low event actions.')
acpmAvgCurrentLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentLowTrapNum.setDescription('Low event trap number.')
acpmAvgCurrentLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentLowClass.setDescription('Low event class.')
acpmAvgCurrentVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVLowValue.setDescription('Very low event threshold. This is a floating point value.')
acpmAvgCurrentVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVLowActions.setDescription('Very low event actions.')
acpmAvgCurrentVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(521, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVLowTrapNum.setDescription('Very low event trap number.')
acpmAvgCurrentVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentVLowClass.setDescription('Very low event class.')
acpmAvgCurrentSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentSysrepEnable.setDescription('System reporting enable for average current telemetry.')
acpmAvgCurrentSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentSysrepThreshold.setDescription('System reporting threshold for average current telemetry. This is a floating point value.')
acpmAvgCurrentSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmAvgCurrentSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmAvgCurrentSysrepLimit.setDescription('System reporting limit for average current telemetry.')
acpmFreqTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4), )
if mibBuilder.loadTexts: acpmFreqTable.setStatus('current')
if mibBuilder.loadTexts: acpmFreqTable.setDescription('This table organizes AC power monitor frequency attributes.')
acpmFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "acpmFreqIndex"))
if mibBuilder.loadTexts: acpmFreqEntry.setStatus('current')
if mibBuilder.loadTexts: acpmFreqEntry.setDescription('Entry for AC power monitor frequency config table.')
acpmFreqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmFreqIndex.setStatus('current')
if mibBuilder.loadTexts: acpmFreqIndex.setDescription('Which AC power monitor in the AC power monitor frequency config table.')
acpmFreqEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqEnable.setStatus('current')
if mibBuilder.loadTexts: acpmFreqEnable.setDescription('Enable AC power monitor frequency events.')
acpmFreqDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmFreqDeadband.setDescription('Deadband (hysteresis) for frequency event. This is a floating point value.')
acpmFreqVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVHighValue.setDescription('Very high event threshold. This is a floating point value.')
acpmFreqVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVHighActions.setDescription('Very high event actions.')
acpmFreqVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVHighTrapNum.setDescription('Very high event trap number.')
acpmFreqVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVHighClass.setDescription('Very high event class.')
acpmFreqHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmFreqHighValue.setDescription('High event threshold. This is a floating point value.')
acpmFreqHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqHighActions.setDescription('High event actions.')
acpmFreqHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqHighTrapNum.setDescription('High event trap number.')
acpmFreqHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqHighClass.setDescription('High event class.')
acpmFreqNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqNormalActions.setDescription('Return to normal actions.')
acpmFreqNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqNormalTrapNum.setDescription('Return to normal trap number.')
acpmFreqNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqNormalClass.setDescription('Return to normal class.')
acpmFreqLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmFreqLowValue.setDescription('Low event threshold. This is a floating point value.')
acpmFreqLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqLowActions.setDescription('Low event actions.')
acpmFreqLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqLowTrapNum.setDescription('Low event trap number.')
acpmFreqLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqLowClass.setDescription('Low event class.')
acpmFreqVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVLowValue.setDescription('Very low event threshold. This is a floating point value.')
acpmFreqVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVLowActions.setDescription('Very low event actions.')
acpmFreqVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(522, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVLowTrapNum.setDescription('Very low event trap number.')
acpmFreqVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmFreqVLowClass.setDescription('Very low event class.')
acpmFreqSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmFreqSysrepEnable.setDescription('System reporting enable for frequency telemetry.')
acpmFreqSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmFreqSysrepThreshold.setDescription('System reporting threshold for frequency telemetry. This is a floating point value.')
acpmFreqSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 4, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmFreqSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmFreqSysrepLimit.setDescription('System reporting limit for frequency telemetry.')
acpmTotalRealPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5), )
if mibBuilder.loadTexts: acpmTotalRealPowerTable.setStatus('current')
if mibBuilder.loadTexts: acpmTotalRealPowerTable.setDescription('This table organizes AC power monitor total real power attributes.')
acpmTRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "acpmTRPIndex"))
if mibBuilder.loadTexts: acpmTRPEntry.setStatus('current')
if mibBuilder.loadTexts: acpmTRPEntry.setDescription('Entry for AC power monitor total real power config table.')
acpmTRPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmTRPIndex.setStatus('current')
if mibBuilder.loadTexts: acpmTRPIndex.setDescription('Which AC power monitor in the AC power monitor total real power config table.')
acpmTRPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPEnable.setStatus('current')
if mibBuilder.loadTexts: acpmTRPEnable.setDescription('Enable AC power monitor total real power events.')
acpmTRPDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmTRPDeadband.setDescription('Deadband (hysteresis) for total real power event. This is a floating point value.')
acpmTRPVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVHighValue.setDescription('Very high event threshold. This is a floating point value.')
acpmTRPVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVHighActions.setDescription('Very high event actions.')
acpmTRPVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVHighTrapNum.setDescription('Very high event trap number.')
acpmTRPVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVHighClass.setDescription('Very high event class.')
acpmTRPHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPHighValue.setStatus('current')
if mibBuilder.loadTexts: acpmTRPHighValue.setDescription('High event threshold. This is a floating point value.')
acpmTRPHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPHighActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPHighActions.setDescription('High event actions.')
acpmTRPHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPHighTrapNum.setDescription('High event trap number.')
acpmTRPHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPHighClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPHighClass.setDescription('High event class.')
acpmTRPNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPNormalActions.setDescription('Return to normal actions.')
acpmTRPNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPNormalTrapNum.setDescription('Return to normal trap number.')
acpmTRPNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPNormalClass.setDescription('Return to normal class.')
acpmTRPLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmTRPLowValue.setDescription('Low event threshold. This is a floating point value.')
acpmTRPLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPLowActions.setDescription('Low event actions.')
acpmTRPLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPLowTrapNum.setDescription('Low event trap number.')
acpmTRPLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPLowClass.setDescription('Low event class.')
acpmTRPVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVLowValue.setDescription('Very low event threshold. This is a floating point value.')
acpmTRPVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVLowActions.setDescription('Very low event actions.')
acpmTRPVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(523, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVLowTrapNum.setDescription('Very low event trap number.')
acpmTRPVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmTRPVLowClass.setDescription('Very low event class.')
acpmTRPSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmTRPSysrepEnable.setDescription('System reporting enable for total real power telemetry.')
acpmTRPSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmTRPSysrepThreshold.setDescription('System reporting threshold for total real power telemetry. This is a floating point value.')
acpmTRPSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 5, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTRPSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmTRPSysrepLimit.setDescription('System reporting limit for total real power telemetry.')
acpmDisconnectTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6), )
if mibBuilder.loadTexts: acpmDisconnectTable.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectTable.setDescription('This table organizes AC power monitor device disconnect event attributes.')
acpmDisconnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "acpmDisconnectIndex"))
if mibBuilder.loadTexts: acpmDisconnectEntry.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectEntry.setDescription('Entry for AC power monitor device disconnect event config table.')
acpmDisconnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmDisconnectIndex.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectIndex.setDescription('Which AC power monitor in the AC power monitor device disconnect event config table.')
acpmDisconnectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectEnable.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectEnable.setDescription('Enable AC power monitor device disconnect event.')
acpmDisconnectActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectActions.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectActions.setDescription('Actions for disconnect event.')
acpmDisconnectTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(524, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectTrapNum.setDescription('Trap number for disconnect event.')
acpmDisconnectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectClass.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectClass.setDescription('Class for disconnect event.')
acpmDisconnectNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectNormalActions.setDescription('Actions for disconnect return to normal event.')
acpmDisconnectNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(524, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectNormalTrapNum.setDescription('Trap number for disconnect return to normal event.')
acpmDisconnectNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 6, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmDisconnectNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmDisconnectNormalClass.setDescription('Class for disconnect return to normal event.')
acpmTotalPowerFactorTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7), )
if mibBuilder.loadTexts: acpmTotalPowerFactorTable.setStatus('current')
if mibBuilder.loadTexts: acpmTotalPowerFactorTable.setDescription('This table organizes AC power monitor device total power factor event attributes.')
acpmTPFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "acpmTPFIndex"))
if mibBuilder.loadTexts: acpmTPFEntry.setStatus('current')
if mibBuilder.loadTexts: acpmTPFEntry.setDescription('Entry for AC power monitor device total power factor event config table.')
acpmTPFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpmTPFIndex.setStatus('current')
if mibBuilder.loadTexts: acpmTPFIndex.setDescription('Which AC power monitor in the AC power monitor device disconnect event config table.')
acpmTPFEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFEnable.setStatus('current')
if mibBuilder.loadTexts: acpmTPFEnable.setDescription('Enable AC power monitor device disconnect event.')
acpmTPFDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFDeadband.setStatus('current')
if mibBuilder.loadTexts: acpmTPFDeadband.setDescription('Deadband (hysteresis).')
acpmTPFNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFNormalActions.setStatus('current')
if mibBuilder.loadTexts: acpmTPFNormalActions.setDescription('Normal actions.')
acpmTPFNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTPFNormalTrapNum.setDescription('Normal trap number.')
acpmTPFNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFNormalClass.setStatus('current')
if mibBuilder.loadTexts: acpmTPFNormalClass.setDescription('Normal class.')
acpmTPFLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmTPFLowValue.setDescription('Low threshold.')
acpmTPFLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmTPFLowActions.setDescription('Low actions.')
acpmTPFLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTPFLowTrapNum.setDescription('Low trap number.')
acpmTPFLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmTPFLowClass.setDescription('Low class.')
acpmTPFVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFVLowValue.setStatus('current')
if mibBuilder.loadTexts: acpmTPFVLowValue.setDescription('Very Low threshold.')
acpmTPFVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFVLowActions.setStatus('current')
if mibBuilder.loadTexts: acpmTPFVLowActions.setDescription('Very Low actions.')
acpmTPFVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: acpmTPFVLowTrapNum.setDescription('Very Low trap number.')
acpmTPFVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFVLowClass.setStatus('current')
if mibBuilder.loadTexts: acpmTPFVLowClass.setDescription('Very Low class.')
acpmTPFSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: acpmTPFSysrepEnable.setDescription('System reporting enable.')
acpmTPFSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: acpmTPFSysrepThreshold.setDescription('System reporting threshold.')
acpmTPFSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 12, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acpmTPFSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: acpmTPFSysrepLimit.setDescription('System reporting limit.')
batteryMonitorGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1), )
if mibBuilder.loadTexts: batteryMonitorGeneralTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorGeneralTable.setDescription('This table organizes general battery monitor attributes.')
bmGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmGenIndex"))
if mibBuilder.loadTexts: bmGenEntry.setStatus('current')
if mibBuilder.loadTexts: bmGenEntry.setDescription('Entry for battery monitor general config table.')
bmGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmGenIndex.setStatus('current')
if mibBuilder.loadTexts: bmGenIndex.setDescription('Which battery monitor in the battery monitor general config table.')
bmGenEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmGenEnable.setStatus('current')
if mibBuilder.loadTexts: bmGenEnable.setDescription('Which battery monitor in the battery monitor general config table.')
bmGenName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmGenName.setStatus('current')
if mibBuilder.loadTexts: bmGenName.setDescription('Name for this battery monitor.')
bmGenBatteryQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmGenBatteryQuantity.setStatus('current')
if mibBuilder.loadTexts: bmGenBatteryQuantity.setDescription('Number of batteries in the string.')
bmGenBatteryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmGenBatteryCapacity.setStatus('current')
if mibBuilder.loadTexts: bmGenBatteryCapacity.setDescription('Capacity of the individual batteries in the string, in amp-hours. A single value applies to all batteries; that is, they are assumed to be all of the same capacity.')
bmGenBatteryNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmGenBatteryNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: bmGenBatteryNominalVoltage.setDescription('Nominal voltage of the individual batteries in the string, in volts. A single value applies to all batteres; that is, they are assumed to be all of the same voltage. This is a floating point value.')
bmGenSysrepPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmGenSysrepPackage.setStatus('current')
if mibBuilder.loadTexts: bmGenSysrepPackage.setDescription('System reporting package number.')
bmGenSysrepType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmGenSysrepType.setStatus('current')
if mibBuilder.loadTexts: bmGenSysrepType.setDescription('System reporting ASM profile type.')
batteryMonitorDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2), )
if mibBuilder.loadTexts: batteryMonitorDeviceTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorDeviceTable.setDescription('This table organizes temperature battery monitor attributes.')
bmDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmDeviceIndex"))
if mibBuilder.loadTexts: bmDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: bmDeviceEntry.setDescription('Entry for battery monitor temperature config table.')
bmDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: bmDeviceIndex.setDescription('Which battery monitor in the battery monitor device config table.')
bmDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDeviceType.setStatus('current')
if mibBuilder.loadTexts: bmDeviceType.setDescription('The type of hardware battery monitor unit associated with this battery monitor.')
bmDeviceES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDeviceES.setStatus('current')
if mibBuilder.loadTexts: bmDeviceES.setDescription('The ES index of the hardware battery monitor unit associated with this battery monitor. This setting only pertains to the ES-BMU.')
bmDeviceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDeviceIP.setStatus('current')
if mibBuilder.loadTexts: bmDeviceIP.setDescription('The IP address of the hardware battery monitor unit associated with this battery monitor.')
bmDeviceReadcom = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDeviceReadcom.setStatus('current')
if mibBuilder.loadTexts: bmDeviceReadcom.setDescription('The SNMP read community of the hardware battery monitor unit associated with this battery monitor.')
bmDeviceInputString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDeviceInputString.setStatus('current')
if mibBuilder.loadTexts: bmDeviceInputString.setDescription('Which string on the hardware battery monitor unit is associated with this battery monitor. ')
bmDeviceCTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDeviceCTSize.setStatus('current')
if mibBuilder.loadTexts: bmDeviceCTSize.setDescription('The rating of the DC current sensor, in amperes. If this value is set to 0, then string current will not be measured. This setting only pertains to the ES-BMU.')
batteryMonitorTempTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3), )
if mibBuilder.loadTexts: batteryMonitorTempTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTempTable.setDescription('This table organizes temperature battery monitor attributes.')
bmTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmTempIndex"))
if mibBuilder.loadTexts: bmTempEntry.setStatus('current')
if mibBuilder.loadTexts: bmTempEntry.setDescription('Entry for battery monitor temperature config table.')
bmTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmTempIndex.setStatus('current')
if mibBuilder.loadTexts: bmTempIndex.setDescription('Which battery monitor in the battery monitor temperature config table.')
bmTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempEnable.setStatus('current')
if mibBuilder.loadTexts: bmTempEnable.setDescription('Enable/disable temperature event. This event is based on the average temperature of the jars in the string.')
bmTempDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempDeadband.setStatus('current')
if mibBuilder.loadTexts: bmTempDeadband.setDescription('Deadband in degrees F or C, depending on scale setting of sensor referenced by bmGenDeviceES. This is a floating point value.')
bmTempScale = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempScale.setStatus('current')
if mibBuilder.loadTexts: bmTempScale.setDescription('Temperature scale; this affects how temperature values are represented, and also how the temperature alarm thresholds and deadbands are interpreted.')
bmTempHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempHighValue.setStatus('current')
if mibBuilder.loadTexts: bmTempHighValue.setDescription('Very high event threshold in degrees F or C, depending on scale setting referenced by bmGenDeviceES. This is a floating point value.')
bmTempHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempHighActions.setStatus('current')
if mibBuilder.loadTexts: bmTempHighActions.setDescription('Actions for very high temperature event.')
bmTempHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(530, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmTempHighTrapNum.setDescription('Trap number for high temperature event.')
bmTempHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempHighClass.setStatus('current')
if mibBuilder.loadTexts: bmTempHighClass.setDescription('Class for high temperature event.')
bmTempNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempNormalActions.setStatus('current')
if mibBuilder.loadTexts: bmTempNormalActions.setDescription('Actions for return to normal temperature event.')
bmTempNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(530, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmTempNormalTrapNum.setDescription('Trap number for return to normal temperature event.')
bmTempNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempNormalClass.setStatus('current')
if mibBuilder.loadTexts: bmTempNormalClass.setDescription('Class for return to normal temperature event.')
bmTempLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempLowValue.setStatus('current')
if mibBuilder.loadTexts: bmTempLowValue.setDescription('Low event threshold in degrees F or C, depending on scale setting. This is a floating point value.')
bmTempLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempLowActions.setStatus('current')
if mibBuilder.loadTexts: bmTempLowActions.setDescription('Actions for low temperature event.')
bmTempLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(530, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmTempLowTrapNum.setDescription('Trap number for low temperature event.')
bmTempLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempLowClass.setStatus('current')
if mibBuilder.loadTexts: bmTempLowClass.setDescription('Trap number for low temperature event.')
bmTempSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: bmTempSysrepEnable.setDescription('System reporting enable for temperature telemetry.')
bmTempSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: bmTempSysrepThreshold.setDescription('System reporting threshold for temperature telemetry. This is a floating point value.')
bmTempSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmTempSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: bmTempSysrepLimit.setDescription('System reporting limit for temperature telemetry.')
batteryMonitorDiffTempTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4), )
if mibBuilder.loadTexts: batteryMonitorDiffTempTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorDiffTempTable.setDescription('This table organizes differential temperature battery monitor attributes.')
bmDiffTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmDiffTempIndex"))
if mibBuilder.loadTexts: bmDiffTempEntry.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempEntry.setDescription('Entry for battery monitor differential temperature config table.')
bmDiffTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmDiffTempIndex.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempIndex.setDescription('Which battery monitor in the battery monitor differential temperature config table.')
bmDiffTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempEnable.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempEnable.setDescription('Enable/disable differential temperature event. This event is based on the differential between the average temperature of the batteries in the string, and ambient temperature (ambient - string temperature).')
bmDiffTempDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempDeadband.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempDeadband.setDescription('Deadband in degrees F or C, depending on scale setting.')
bmDiffTempVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempVHighValue.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempVHighValue.setDescription('Very high event threshold in degrees F or C, depending on scale setting.')
bmDiffTempVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempVHighActions.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempVHighActions.setDescription('Actions for very high differential temperature event.')
bmDiffTempVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempVHighTrapNum.setDescription('Trap number for very high differential temperature event.')
bmDiffTempVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempVHighClass.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempVHighClass.setDescription('Class for very high differential temperature event.')
bmDiffTempHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempHighValue.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempHighValue.setDescription('High event threshold in degrees F or C, depending on scale setting.')
bmDiffTempHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempHighActions.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempHighActions.setDescription('Actions for high differential temperature event.')
bmDiffTempHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempHighTrapNum.setDescription('Trap number for high differential temperature event.')
bmDiffTempHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempHighClass.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempHighClass.setDescription('Class for high differential temperature event.')
bmDiffTempNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempNormalActions.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempNormalActions.setDescription('Actions for return to normal differential temperature event.')
bmDiffTempNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempNormalTrapNum.setDescription('Trap number for return to normal differential temperature event.')
bmDiffTempNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempNormalClass.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempNormalClass.setDescription('Class for return to normal differential temperature event.')
bmDiffTempSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempSysrepEnable.setDescription('System reporting enable for differential temperature telemetry.')
bmDiffTempSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempSysrepThreshold.setDescription('System reporting threshold for differential temperature telemetry.')
bmDiffTempSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffTempSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: bmDiffTempSysrepLimit.setDescription('System reporting limit for differential temperature telemetry.')
batteryMonitorVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5), )
if mibBuilder.loadTexts: batteryMonitorVoltageTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorVoltageTable.setDescription('This table organizes battery monitor voltage attributes.')
bmVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmVoltageIndex"))
if mibBuilder.loadTexts: bmVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: bmVoltageEntry.setDescription('Entry for battery monitor voltage config table.')
bmVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: bmVoltageIndex.setDescription('Which battery monitor in the battery monitor voltage config table.')
bmVoltageEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageEnable.setStatus('current')
if mibBuilder.loadTexts: bmVoltageEnable.setDescription('Enable/disable voltage event. This event is based on the total voltage output of the batteries in the string.')
bmVoltageDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageDeadband.setStatus('current')
if mibBuilder.loadTexts: bmVoltageDeadband.setDescription('Deadband in volts. This is a floating point value.')
bmVoltageVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageVHighValue.setStatus('current')
if mibBuilder.loadTexts: bmVoltageVHighValue.setDescription('Very high event threshold, in volts. This is a floating point value.')
bmVoltageVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageVHighActions.setStatus('current')
if mibBuilder.loadTexts: bmVoltageVHighActions.setDescription('Actions for very high voltage event.')
bmVoltageVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmVoltageVHighTrapNum.setDescription('Trap number for very high voltage event.')
bmVoltageVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageVHighClass.setStatus('current')
if mibBuilder.loadTexts: bmVoltageVHighClass.setDescription('Class for very high voltage event.')
bmVoltageHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageHighValue.setStatus('current')
if mibBuilder.loadTexts: bmVoltageHighValue.setDescription('High event threshold, in volts. This is a floating point value.')
bmVoltageHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageHighActions.setStatus('current')
if mibBuilder.loadTexts: bmVoltageHighActions.setDescription('Actions for high voltage event.')
bmVoltageHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmVoltageHighTrapNum.setDescription('Trap number for high voltage event.')
bmVoltageHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageHighClass.setStatus('current')
if mibBuilder.loadTexts: bmVoltageHighClass.setDescription('Class for high voltage event.')
bmVoltageNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageNormalActions.setStatus('current')
if mibBuilder.loadTexts: bmVoltageNormalActions.setDescription('Actions for return to normal voltage event.')
bmVoltageNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmVoltageNormalTrapNum.setDescription('Trap number for return to normal voltage event.')
bmVoltageNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageNormalClass.setStatus('current')
if mibBuilder.loadTexts: bmVoltageNormalClass.setDescription('Class for return to normal voltage event.')
bmVoltageLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageLowValue.setStatus('current')
if mibBuilder.loadTexts: bmVoltageLowValue.setDescription('Low event threshold, in volts. This is a floating point value.')
bmVoltageLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageLowActions.setStatus('current')
if mibBuilder.loadTexts: bmVoltageLowActions.setDescription('Actions for low voltage event.')
bmVoltageLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmVoltageLowTrapNum.setDescription('Trap number for low voltage event.')
bmVoltageLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageLowClass.setStatus('current')
if mibBuilder.loadTexts: bmVoltageLowClass.setDescription('Class for low voltage event.')
bmVoltageVLowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageVLowValue.setStatus('current')
if mibBuilder.loadTexts: bmVoltageVLowValue.setDescription('Very Low event threshold, in volts. This is a floating point value.')
bmVoltageVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageVLowActions.setStatus('current')
if mibBuilder.loadTexts: bmVoltageVLowActions.setDescription('Actions for very low voltage event.')
bmVoltageVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmVoltageVLowTrapNum.setDescription('Trap number for very low voltage event.')
bmVoltageVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageVLowClass.setStatus('current')
if mibBuilder.loadTexts: bmVoltageVLowClass.setDescription('Class for very low voltage event.')
bmVoltageSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: bmVoltageSysrepEnable.setDescription('System reporting enable for voltage telemetry.')
bmVoltageSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: bmVoltageSysrepThreshold.setDescription('System reporting threshold for voltage telemetry. This is a floating point value.')
bmVoltageSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 5, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmVoltageSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: bmVoltageSysrepLimit.setDescription('System reporting limit for voltage telemetry.')
batteryMonitorDiffVoltTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6), )
if mibBuilder.loadTexts: batteryMonitorDiffVoltTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorDiffVoltTable.setDescription('This table organizes differential voltage battery monitor attributes.')
bmDiffVoltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmDiffVoltIndex"))
if mibBuilder.loadTexts: bmDiffVoltEntry.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltEntry.setDescription('Entry for battery monitor differential voltage config table.')
bmDiffVoltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmDiffVoltIndex.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltIndex.setDescription('Which battery monitor in the battery monitor differential voltage config table.')
bmDiffVoltEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltEnable.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltEnable.setDescription('Enable/disable differential voltage event. This event is based on the differential between the highest and lowest jar voltages within the string.')
bmDiffVoltDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltDeadband.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltDeadband.setDescription('Deadband in volts.')
bmDiffVoltVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltVHighValue.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltVHighValue.setDescription('Very high event threshold in volts. This is a floating point value.')
bmDiffVoltVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltVHighActions.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltVHighActions.setDescription('Actions for very high differential voltage event.')
bmDiffVoltVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltVHighTrapNum.setDescription('Trap number for very high differential voltage event.')
bmDiffVoltVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltVHighClass.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltVHighClass.setDescription('Class for very high differential voltage event.')
bmDiffVoltHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltHighValue.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltHighValue.setDescription('High event threshold in volts. This is a floating point value.')
bmDiffVoltHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltHighActions.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltHighActions.setDescription('Actions for high differential voltage event.')
bmDiffVoltHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltHighTrapNum.setDescription('Trap number for high differential voltage event.')
bmDiffVoltHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltHighClass.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltHighClass.setDescription('Class for high differential voltage event.')
bmDiffVoltNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltNormalActions.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltNormalActions.setDescription('Actions for return to normal differential voltage event.')
bmDiffVoltNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltNormalTrapNum.setDescription('Trap number for return to normal differential voltage event.')
bmDiffVoltNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltNormalClass.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltNormalClass.setDescription('Class for return to normal differential voltage event.')
bmDiffVoltSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltSysrepEnable.setDescription('System reporting enable for differential voltage telemetry.')
bmDiffVoltSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltSysrepThreshold.setDescription('System reporting threshold for differential voltage telemetry.')
bmDiffVoltSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDiffVoltSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: bmDiffVoltSysrepLimit.setDescription('System reporting limit for differential voltage telemetry.')
batteryMonitorChargingCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7), )
if mibBuilder.loadTexts: batteryMonitorChargingCurrentTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorChargingCurrentTable.setDescription('This table organizes battery monitor charging current attributes.')
bmChargingCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmChargingCurrentIndex"))
if mibBuilder.loadTexts: bmChargingCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentEntry.setDescription('Entry for battery monitor differential charging current config table.')
bmChargingCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmChargingCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentIndex.setDescription('Which battery monitor in the battery monitor charging current config table.')
bmChargingCurrentEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentEnable.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentEnable.setDescription('Enable/disable charging current event. This event is based on positive current flow (i.e. current flowing into the battery string).')
bmChargingCurrentDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentDeadband.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentDeadband.setDescription('Deadband in amperes. This is a floating point value.')
bmChargingCurrentVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentVHighValue.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentVHighValue.setDescription('Very high event threshold, in volts. This is a floating point value.')
bmChargingCurrentVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentVHighActions.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentVHighActions.setDescription('Actions for very high charging current event.')
bmChargingCurrentVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentVHighTrapNum.setDescription('Trap number for very high charging current event.')
bmChargingCurrentVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentVHighClass.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentVHighClass.setDescription('Class for very high charging current event.')
bmChargingCurrentHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentHighValue.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentHighValue.setDescription('High event threshold, in volts. This is a floating point value.')
bmChargingCurrentHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentHighActions.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentHighActions.setDescription('Actions for high charging current event.')
bmChargingCurrentHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentHighTrapNum.setDescription('Trap number for high charging current event.')
bmChargingCurrentHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentHighClass.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentHighClass.setDescription('Class for high charging current event.')
bmChargingCurrentNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentNormalActions.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentNormalActions.setDescription('Actions for return to normal charging current event.')
bmChargingCurrentNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentNormalTrapNum.setDescription('Trap number for return to normal charging current event.')
bmChargingCurrentNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentNormalClass.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentNormalClass.setDescription('Class for return to normal charging current event.')
bmChargingCurrentSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentSysrepEnable.setDescription('System reporting enable for charging current telemetry.')
bmChargingCurrentSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentSysrepThreshold.setDescription('System reporting threshold for charging current telemetry. This is a floating point value.')
bmChargingCurrentSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargingCurrentSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: bmChargingCurrentSysrepLimit.setDescription('System reporting limit for charging current telemetry.')
batteryMonitorDischargingCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8), )
if mibBuilder.loadTexts: batteryMonitorDischargingCurrentTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorDischargingCurrentTable.setDescription('This table organizes battery monitor discharging current attributes.')
bmDischargingCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmDischargingCurrentIndex"))
if mibBuilder.loadTexts: bmDischargingCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentEntry.setDescription('Entry for battery monitor differential discharging current config table.')
bmDischargingCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmDischargingCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentIndex.setDescription('Which battery monitor in the battery monitor discharging current config table.')
bmDischargingCurrentEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentEnable.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentEnable.setDescription('Enable/disable discharging current event. This event is based on positive current flow (i.e. current flowing into the battery string).')
bmDischargingCurrentDeadband = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentDeadband.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentDeadband.setDescription('Deadband in amperes. This is a floating point value.')
bmDischargingCurrentVHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentVHighValue.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentVHighValue.setDescription('Very high event threshold, in volts. This is a floating point value.')
bmDischargingCurrentVHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentVHighActions.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentVHighActions.setDescription('Actions for very high discharging current event.')
bmDischargingCurrentVHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentVHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentVHighTrapNum.setDescription('Trap number for very high discharging current event.')
bmDischargingCurrentVHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentVHighClass.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentVHighClass.setDescription('Class for very high discharging current event.')
bmDischargingCurrentHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentHighValue.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentHighValue.setDescription('High event threshold, in volts. This is a floating point value.')
bmDischargingCurrentHighActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentHighActions.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentHighActions.setDescription('Actions for high discharging current event.')
bmDischargingCurrentHighTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentHighTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentHighTrapNum.setDescription('Trap number for high discharging current event.')
bmDischargingCurrentHighClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentHighClass.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentHighClass.setDescription('Class for high discharging current event.')
bmDischargingCurrentNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentNormalActions.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentNormalActions.setDescription('Actions for return to normal discharging current event.')
bmDischargingCurrentNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentNormalTrapNum.setDescription('Trap number for return to normal discharging current event.')
bmDischargingCurrentNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentNormalClass.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentNormalClass.setDescription('Class for return to normal discharging current event.')
bmDischargingCurrentSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentSysrepEnable.setDescription('System reporting enable for discharging current telemetry.')
bmDischargingCurrentSysrepThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentSysrepThreshold.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentSysrepThreshold.setDescription('System reporting threshold for discharging current telemetry. This is a floating point value.')
bmDischargingCurrentSysrepLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 8, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmDischargingCurrentSysrepLimit.setStatus('current')
if mibBuilder.loadTexts: bmDischargingCurrentSysrepLimit.setDescription('System reporting limit for discharging current telemetry.')
batteryMonitorChargeLevelTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9), )
if mibBuilder.loadTexts: batteryMonitorChargeLevelTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorChargeLevelTable.setDescription('This table organizes battery monitor charge level attributes.')
bmChargeLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmChargeLevelIndex"))
if mibBuilder.loadTexts: bmChargeLevelEntry.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelEntry.setDescription('Entry for battery monitor charge level config table.')
bmChargeLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmChargeLevelIndex.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelIndex.setDescription('Which battery monitor in the battery monitor charge level config table.')
bmChargeLevelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelEnable.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelEnable.setDescription('Enable/disable charge level event.')
bmChargeLevelNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelNormalActions.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelNormalActions.setDescription('Actions for return to normal charge level event.')
bmChargeLevelNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelNormalTrapNum.setDescription('Trap number for return to normal charge level event.')
bmChargeLevelNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelNormalClass.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelNormalClass.setDescription('Class for return to normal charge level event.')
bmChargeLevelLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelLowActions.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelLowActions.setDescription('Actions for low charge level event.')
bmChargeLevelLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelLowTrapNum.setDescription('Trap number for low charge level event.')
bmChargeLevelLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelLowClass.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelLowClass.setDescription('Class for low charge level event.')
bmChargeLevelVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelVLowActions.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelVLowActions.setDescription('Actions for very low charge level event.')
bmChargeLevelVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelVLowTrapNum.setDescription('Trap number for very low charge level event.')
bmChargeLevelVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelVLowClass.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelVLowClass.setDescription('Class for very low charge level event.')
bmChargeLevelSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 9, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmChargeLevelSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: bmChargeLevelSysrepEnable.setDescription('System reporting enable for charge level telemetry.')
batteryMonitorJarHealthTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10), )
if mibBuilder.loadTexts: batteryMonitorJarHealthTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorJarHealthTable.setDescription('This table organizes battery monitor jar health attributes.')
bmJarHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "bmJarHealthIndex"))
if mibBuilder.loadTexts: bmJarHealthEntry.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthEntry.setDescription('Entry for battery monitor jar health config table.')
bmJarHealthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmJarHealthIndex.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthIndex.setDescription('Which battery monitor in the battery monitor jar health config table.')
bmJarHealthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthEnable.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthEnable.setDescription('Enable/disable jar health event.')
bmJarHealthNormalActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthNormalActions.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthNormalActions.setDescription('Actions for return to normal jar health event.')
bmJarHealthNormalTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthNormalTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthNormalTrapNum.setDescription('Trap number for return to normal jar health event.')
bmJarHealthNormalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthNormalClass.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthNormalClass.setDescription('Class for return to normal jar health event.')
bmJarHealthLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthLowActions.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthLowActions.setDescription('Actions for low jar health event.')
bmJarHealthLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthLowTrapNum.setDescription('Trap number for low jar health event.')
bmJarHealthLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthLowClass.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthLowClass.setDescription('Class for low jar health event.')
bmJarHealthVLowActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthVLowActions.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthVLowActions.setDescription('Actions for very low jar health event.')
bmJarHealthVLowTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthVLowTrapNum.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthVLowTrapNum.setDescription('Trap number for very low jar health event.')
bmJarHealthVLowClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthVLowClass.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthVLowClass.setDescription('Class for very low jar health event.')
bmJarHealthSysrepEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 14, 10, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmJarHealthSysrepEnable.setStatus('current')
if mibBuilder.loadTexts: bmJarHealthSysrepEnable.setDescription('System reporting enable for jar health telemetry.')
evResetEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 16, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetEnable.setStatus('current')
if mibBuilder.loadTexts: evResetEnable.setDescription('Enable/disable reset event. This event is triggered when the unit finishes booting.')
evResetDelay = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetDelay.setStatus('current')
if mibBuilder.loadTexts: evResetDelay.setDescription('Number of seconds to wait after unit finishes booting before triggering the reset event.')
evResetActions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 16, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetActions.setStatus('current')
if mibBuilder.loadTexts: evResetActions.setDescription('Actions for reset event.')
evResetMessage = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 16, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetMessage.setStatus('current')
if mibBuilder.loadTexts: evResetMessage.setDescription('Message for reset event.')
evResetTrapnum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(543, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetTrapnum.setStatus('current')
if mibBuilder.loadTexts: evResetTrapnum.setDescription('Trap number for reset event.')
evResetClass = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 16, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evResetClass.setStatus('current')
if mibBuilder.loadTexts: evResetClass.setDescription('Class (severity) for reset event.')
evGlobalActions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 18, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evGlobalActions.setStatus('current')
if mibBuilder.loadTexts: evGlobalActions.setDescription('Global event actions.')
evGlobalTrapnum = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 12, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evGlobalTrapnum.setStatus('current')
if mibBuilder.loadTexts: evGlobalTrapnum.setDescription('Global trap number.')
actionSchedEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSchedEnable.setStatus('current')
if mibBuilder.loadTexts: actionSchedEnable.setDescription('ON/OFF enable action schedule')
actionSchedBegin = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSchedBegin.setStatus('current')
if mibBuilder.loadTexts: actionSchedBegin.setDescription('action schedule begin time (HH:MM)')
actionSchedEnd = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSchedEnd.setStatus('current')
if mibBuilder.loadTexts: actionSchedEnd.setDescription('action schedule end time (HH:MM)')
actionSchedWeekdaysOnly = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSchedWeekdaysOnly.setStatus('current')
if mibBuilder.loadTexts: actionSchedWeekdaysOnly.setDescription('ON/OFF whether the action schedule applies to weekdays only (ON) or all days (OFF)')
actionAsentriaRequireAck = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionAsentriaRequireAck.setStatus('current')
if mibBuilder.loadTexts: actionAsentriaRequireAck.setDescription('ON/OFF Asentria action requires an ack from the receiver')
actionAsentriaVersion = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionAsentriaVersion.setStatus('current')
if mibBuilder.loadTexts: actionAsentriaVersion.setDescription('version 1.0 or 1.1')
actionAsentriaTCPPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionAsentriaTCPPort.setStatus('current')
if mibBuilder.loadTexts: actionAsentriaTCPPort.setDescription('TCP port used for TCP-based Asentria alarms')
actionHostTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 6), )
if mibBuilder.loadTexts: actionHostTable.setStatus('current')
if mibBuilder.loadTexts: actionHostTable.setDescription('Table of network hosts to use for network-based actions')
actionHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 6, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "actionHostIndex"))
if mibBuilder.loadTexts: actionHostEntry.setStatus('current')
if mibBuilder.loadTexts: actionHostEntry.setDescription('Entry for table of network hosts to use for network-based actions')
actionHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionHostIndex.setStatus('current')
if mibBuilder.loadTexts: actionHostIndex.setDescription('Index for table of network hosts to use for network-based actions')
actionHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionHost.setStatus('current')
if mibBuilder.loadTexts: actionHost.setDescription('Hostname/IP address used as destination for network-based action (e.g., trap)')
actionEmailTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 7), )
if mibBuilder.loadTexts: actionEmailTable.setStatus('current')
if mibBuilder.loadTexts: actionEmailTable.setDescription('Table of email addresses to use for email actions')
actionEmailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 7, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "actionEmailIndex"))
if mibBuilder.loadTexts: actionEmailEntry.setStatus('current')
if mibBuilder.loadTexts: actionEmailEntry.setDescription('Entry for table of email addresses to use for email actions')
actionEmailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionEmailIndex.setStatus('current')
if mibBuilder.loadTexts: actionEmailIndex.setDescription('Index for table of email addresses to use for email actions')
actionEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionEmail.setStatus('current')
if mibBuilder.loadTexts: actionEmail.setDescription('email address')
actionParseError = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 14, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionParseError.setStatus('current')
if mibBuilder.loadTexts: actionParseError.setDescription('When a user attempts to configure an invalid action setting/ object, this object says why it was invalid.')
sysTimeAutoDST = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeAutoDST.setStatus('current')
if mibBuilder.loadTexts: sysTimeAutoDST.setDescription('ON/OFF automatically adjust for Daylight Savings Time')
sysTimeGMTOffset = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeGMTOffset.setStatus('current')
if mibBuilder.loadTexts: sysTimeGMTOffset.setDescription('Absolute value of offset (hours) from GMT of the timezone')
sysTimeGMTDirection = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeGMTDirection.setStatus('current')
if mibBuilder.loadTexts: sysTimeGMTDirection.setDescription('Direction (AHEAD/BEHIND) of timezone relative to GMT')
sysTimeNetEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeNetEnable.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetEnable.setDescription('Network time mode')
sysTimeNetHostTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 4, 2), )
if mibBuilder.loadTexts: sysTimeNetHostTable.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetHostTable.setDescription('Table of hosts to use for network time services')
sysTimeNetHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 4, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "sysTimeNetHostIndex"))
if mibBuilder.loadTexts: sysTimeNetHostEntry.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetHostEntry.setDescription('Entry for table of hosts to use for network time services')
sysTimeNetHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTimeNetHostIndex.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetHostIndex.setDescription('Index for table of hosts to use for network time services')
sysTimeNetHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeNetHost.setStatus('current')
if mibBuilder.loadTexts: sysTimeNetHost.setDescription('host to use for network time services')
sysPTTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPTTimeout.setStatus('current')
if mibBuilder.loadTexts: sysPTTimeout.setDescription('Timeout (minutes) of inactivity after which a pass-through session is terminated (0 means it never terminates)')
sysPTEndPause = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPTEndPause.setStatus('current')
if mibBuilder.loadTexts: sysPTEndPause.setDescription('number of 16ths of a second between escape characters received on pass-through origin IO handle that are reuired for the escape characters to register as pass-through escape characters in the pass-through escape sequence. Set to 0 to make the escape character register as part of the pass- through escape sequence without requiring a pause.')
sysMTU = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMTU.setStatus('current')
if mibBuilder.loadTexts: sysMTU.setDescription('Maximum transfer unit for ethernet interfaces')
sysAnswerString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAnswerString.setStatus('current')
if mibBuilder.loadTexts: sysAnswerString.setDescription('String displayed upon login')
sysEventFileID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEventFileID.setStatus('current')
if mibBuilder.loadTexts: sysEventFileID.setDescription('ID string for events file')
sysEscapeCharacter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEscapeCharacter.setStatus('current')
if mibBuilder.loadTexts: sysEscapeCharacter.setDescription('Decimal ASCII code of the system escape character')
sysTimeStampTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeStampTimeFormat.setStatus('current')
if mibBuilder.loadTexts: sysTimeStampTimeFormat.setDescription('Format of time stamp: HH:MM,HH:MM:SS,BLANK')
sysTimeStampDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeStampDateFormat.setStatus('current')
if mibBuilder.loadTexts: sysTimeStampDateFormat.setDescription('Format of date stamp: MM/DD,MM/DD/YY,MM/DD/YYYY,BLANK')
sysTimeStampSpaceAfter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeStampSpaceAfter.setStatus('current')
if mibBuilder.loadTexts: sysTimeStampSpaceAfter.setDescription('ON/OFF Inlude a space after timestamp')
sysLogMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogMode.setStatus('current')
if mibBuilder.loadTexts: sysLogMode.setDescription('Syslog mode: disabled, emit UDP (REMOTE), save in a rotating file set (FILE), or emit on a listening socket (SERVER)')
sysLoghost = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoghost.setStatus('current')
if mibBuilder.loadTexts: sysLoghost.setDescription('Syslog host: destination machine when syslog mode is REMOTE')
sysLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFilter.setStatus('current')
if mibBuilder.loadTexts: sysLogFilter.setDescription('String describing what functions place data in the syslog')
sysLogFileSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFileSize.setStatus('current')
if mibBuilder.loadTexts: sysLogFileSize.setDescription('Size (in KB) of syslog files (when syslog mode is SERVER or FILE)')
sysLogFileCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFileCount.setStatus('current')
if mibBuilder.loadTexts: sysLogFileCount.setDescription('Number of files in syslog file set (when syslog mode is SERVER or FILE)')
sysLogListenPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogListenPort.setStatus('current')
if mibBuilder.loadTexts: sysLogListenPort.setDescription('TCP port on which the unit listens for a connection on which syslog data is dumped (when syslog mode is SERVER)')
sysCRDBCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRDBCapacity.setStatus('current')
if mibBuilder.loadTexts: sysCRDBCapacity.setDescription('Capacity of Call Record Database (in KB)')
sysCRDBPercentFull = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRDBPercentFull.setStatus('current')
if mibBuilder.loadTexts: sysCRDBPercentFull.setDescription('Percent of the CRDB used')
sysCRDBFileIDTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 3), )
if mibBuilder.loadTexts: sysCRDBFileIDTable.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileIDTable.setDescription('Table of CRDB file IDs')
sysCRDBFileIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 3, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "sysCRDBFileIDIndex"))
if mibBuilder.loadTexts: sysCRDBFileIDEntry.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileIDEntry.setDescription('Entry for table of CRDB file IDs')
sysCRDBFileIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRDBFileIDIndex.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileIDIndex.setDescription('Index for table of CRDB file IDs')
sysCRDBFileID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRDBFileID.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileID.setDescription('ID of CRDB file for this port-associated file x')
sysCRDBFileEnforceMinTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 4), )
if mibBuilder.loadTexts: sysCRDBFileEnforceMinTable.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileEnforceMinTable.setDescription('Table of CRDB file minimum size enforcement settings')
sysCRDBFileEnforceMinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 4, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "sysCRDBFileEnforceMinIndex"))
if mibBuilder.loadTexts: sysCRDBFileEnforceMinEntry.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileEnforceMinEntry.setDescription('Entry for table of CRDB file minimum size enforcement settings')
sysCRDBFileEnforceMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRDBFileEnforceMinIndex.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileEnforceMinIndex.setDescription('Index for table of CRDB file minimum size enforcement settings')
sysCRDBFileEnforceMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 10, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRDBFileEnforceMin.setStatus('current')
if mibBuilder.loadTexts: sysCRDBFileEnforceMin.setDescription('ON/OFF: enforce minimum size for this CRDB file x')
sysCharMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCharMask.setStatus('current')
if mibBuilder.loadTexts: sysCharMask.setDescription('Character mask used for ignoring certain characters on serial ports when assembling data records (when port mode is ASCII)')
sysPrompt = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPrompt.setStatus('current')
if mibBuilder.loadTexts: sysPrompt.setDescription('Prompt to use in a commnand session')
sysBootStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootStatus.setStatus('current')
if mibBuilder.loadTexts: sysBootStatus.setDescription('String describing the boot status of the unit (Booted OK/ still booting')
sysLocLatitude = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 14, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocLatitude.setStatus('current')
if mibBuilder.loadTexts: sysLocLatitude.setDescription('Latitude portion of geographic coordinates as string')
sysLocLongitude = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 14, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocLongitude.setStatus('current')
if mibBuilder.loadTexts: sysLocLongitude.setDescription('Longitude portion of geographic coordinates as string')
sysLocXOffset = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 14, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocXOffset.setStatus('current')
if mibBuilder.loadTexts: sysLocXOffset.setDescription('X-offset portion of geographic coordinates as string')
sysLocYOffset = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 14, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocYOffset.setStatus('current')
if mibBuilder.loadTexts: sysLocYOffset.setDescription('Y offset portion of geographic coordinates as string')
sysLocAngle = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 14, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocAngle.setStatus('current')
if mibBuilder.loadTexts: sysLocAngle.setDescription('Angle portion of geographic coordinates as string')
sysLocAltitude = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 14, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocAltitude.setStatus('current')
if mibBuilder.loadTexts: sysLocAltitude.setDescription('Altitude as string')
sysFileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileTransferStatus.setStatus('current')
if mibBuilder.loadTexts: sysFileTransferStatus.setDescription("Start/cancel file transfer, or check transfer status. To start, set this object to 'start'. To cancel, set this object to 'cancel'. To check status, get the object")
sysFileTransferURL = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 17, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileTransferURL.setStatus('current')
if mibBuilder.loadTexts: sysFileTransferURL.setDescription('URL (describing protocol, host, directory, and file) on which file transfer function operates.')
sysFileTransferUsername = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 17, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileTransferUsername.setStatus('current')
if mibBuilder.loadTexts: sysFileTransferUsername.setDescription('Username for user account at the resource specified by sysFileTransferURL.')
sysFileTransferPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 17, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysFileTransferPassword.setStatus('current')
if mibBuilder.loadTexts: sysFileTransferPassword.setDescription('Password for user account at the resource specified by sysFileTransferURL.')
sysUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 16, 18, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: sysUpdateStatus.setDescription('Check time/result of last update attempt.')
auditLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogEnable.setStatus('current')
if mibBuilder.loadTexts: auditLogEnable.setDescription('ON/OFF enable audit log')
auditLogStoreResets = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreResets.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreResets.setDescription('ON/OFF audit log stores when the unit resets')
auditLogStoreCommands = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreCommands.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreCommands.setDescription('ON/OFF audit log stores commands entered in a command session')
auditLogStoreRelays = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreRelays.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreRelays.setDescription('ON/OFF audit log stores relay activity')
auditLogStoreAlarmActions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreAlarmActions.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreAlarmActions.setDescription('ON/OFF audit log stores action delivery activity')
auditLogStorePwdFailures = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStorePwdFailures.setStatus('current')
if mibBuilder.loadTexts: auditLogStorePwdFailures.setDescription('ON/OFF audit log stores when user was denied login')
auditLogStoreLogins = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreLogins.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreLogins.setDescription('ON/OFF audit log stores when a user was allowed login')
auditLogStoreSHSK = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreSHSK.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreSHSK.setDescription('ON/OFF audit log stores serial handshaking status (regardless of serial handshaking event)')
auditLogStorePassthrough = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStorePassthrough.setStatus('current')
if mibBuilder.loadTexts: auditLogStorePassthrough.setDescription('ON/OFF audit log stores pass-through activity')
auditLogStoreInactivity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStoreInactivity.setStatus('current')
if mibBuilder.loadTexts: auditLogStoreInactivity.setDescription('ON/OFF audit log stores when sessions expire due to inactivity')
auditLogStorePolling = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStorePolling.setStatus('current')
if mibBuilder.loadTexts: auditLogStorePolling.setDescription('ON/OFF audit log stores CRDB polling activity')
auditLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: auditLogMaxSize.setDescription('Maximum size (in KB) of audit log')
scrGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: scrGlobalEnable.setDescription('ON/OFF enable scripting')
scrDTRCtrlPortEnableTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 2), )
if mibBuilder.loadTexts: scrDTRCtrlPortEnableTable.setStatus('current')
if mibBuilder.loadTexts: scrDTRCtrlPortEnableTable.setDescription('Table of DTR control port enables')
scrDTRCtrlPortEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 2, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "scrDTRCtrlPortEnableIndex"))
if mibBuilder.loadTexts: scrDTRCtrlPortEnableEntry.setStatus('current')
if mibBuilder.loadTexts: scrDTRCtrlPortEnableEntry.setDescription('Entry for table of DTR control port enables')
scrDTRCtrlPortEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrDTRCtrlPortEnableIndex.setStatus('current')
if mibBuilder.loadTexts: scrDTRCtrlPortEnableIndex.setDescription('Index for table of DTR control port enables')
scrDTRCtrlPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrDTRCtrlPortEnable.setStatus('current')
if mibBuilder.loadTexts: scrDTRCtrlPortEnable.setDescription('ON/OFF enable DTR control of scripting for this port')
scrTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3), )
if mibBuilder.loadTexts: scrTable.setStatus('current')
if mibBuilder.loadTexts: scrTable.setDescription('Table of scripts')
scrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "scrIndex"))
if mibBuilder.loadTexts: scrEntry.setStatus('current')
if mibBuilder.loadTexts: scrEntry.setDescription('Entry for table of scripts')
scrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrIndex.setStatus('current')
if mibBuilder.loadTexts: scrIndex.setDescription('Index for table of scripts')
scrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrEnable.setStatus('current')
if mibBuilder.loadTexts: scrEnable.setDescription('ON/OFF enable this script')
scrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrName.setStatus('current')
if mibBuilder.loadTexts: scrName.setDescription('Name of this script')
scrFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrFilename.setStatus('current')
if mibBuilder.loadTexts: scrFilename.setDescription('Filename for this script')
scrRunAlways = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrRunAlways.setStatus('current')
if mibBuilder.loadTexts: scrRunAlways.setDescription('ON/OFF: this script always runs')
scrRunAtStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrRunAtStartup.setStatus('current')
if mibBuilder.loadTexts: scrRunAtStartup.setDescription('ON/OFF: this script runs at startup')
scrRunScheduled = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrRunScheduled.setStatus('current')
if mibBuilder.loadTexts: scrRunScheduled.setDescription('ON/OFF: this script runs at a certain time of day')
scrScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrScheduleTime.setStatus('current')
if mibBuilder.loadTexts: scrScheduleTime.setDescription('Time of day (HH:MM) this script is scheduled to run')
scrArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrArguments.setStatus('current')
if mibBuilder.loadTexts: scrArguments.setDescription('Arguments for this script')
scrRepeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrRepeatInterval.setStatus('current')
if mibBuilder.loadTexts: scrRepeatInterval.setDescription('How often this script runs (minutes)')
scrVolatileStringTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 4), )
if mibBuilder.loadTexts: scrVolatileStringTable.setStatus('current')
if mibBuilder.loadTexts: scrVolatileStringTable.setDescription('Table of volatile string settings for use in scripts.')
scrVolatileStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 4, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "scrVolatileStringIndex"))
if mibBuilder.loadTexts: scrVolatileStringEntry.setStatus('current')
if mibBuilder.loadTexts: scrVolatileStringEntry.setDescription('Entry for table of volatile script string settings')
scrVolatileStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrVolatileStringIndex.setStatus('current')
if mibBuilder.loadTexts: scrVolatileStringIndex.setDescription('Index for table of volatile script string settings')
scrVolatileString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrVolatileString.setStatus('current')
if mibBuilder.loadTexts: scrVolatileString.setDescription('Volatile string for use in scripts. Use this object to cache frequently-changing string values or string values that do not need to persist through reset. This object corresponds to the scripting.vstring[] setting key branch; use those keys in scripts and you can view or change their values with this object.')
scrVolatileIntTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 5), )
if mibBuilder.loadTexts: scrVolatileIntTable.setStatus('current')
if mibBuilder.loadTexts: scrVolatileIntTable.setDescription('Table of volatile integer settings for use in scripts.')
scrVolatileIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 5, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "scrVolatileIntIndex"))
if mibBuilder.loadTexts: scrVolatileIntEntry.setStatus('current')
if mibBuilder.loadTexts: scrVolatileIntEntry.setDescription('Entry for table of volatile script integer settings')
scrVolatileIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrVolatileIntIndex.setStatus('current')
if mibBuilder.loadTexts: scrVolatileIntIndex.setDescription('Index for table of volatile script integer settings')
scrVolatileInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrVolatileInt.setStatus('current')
if mibBuilder.loadTexts: scrVolatileInt.setDescription('Volatile integer for use in scripts. Use this object to cache frequently-changing integer values or integer values that do not need to persist through reset. This object corresponds to the scripting.vint[] setting key branch; use those keys in scripts and you can view or change their values with this object.')
scrNonVolatileStringTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 6), )
if mibBuilder.loadTexts: scrNonVolatileStringTable.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileStringTable.setDescription('Table of non-volatile string settings for use in scripts.')
scrNonVolatileStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 6, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "scrNonVolatileStringIndex"))
if mibBuilder.loadTexts: scrNonVolatileStringEntry.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileStringEntry.setDescription('Entry for table of non-volatile script string settings')
scrNonVolatileStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrNonVolatileStringIndex.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileStringIndex.setDescription('Index for table of non-volatile script string settings')
scrNonVolatileString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrNonVolatileString.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileString.setDescription('Non-volatile string for use in scripts. Use this object to store values that need to persist through reset. This object corresponds to the scripting.nvstring[] setting key branch; use those keys in scripts and you can view or change their values with this object. Note: to store frequently- changing integers, use the scrVolatileString object, otherwise your scripts may cause unnecessary wear of the non-volatile storage medium on the unit.')
scrNonVolatileIntTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 7), )
if mibBuilder.loadTexts: scrNonVolatileIntTable.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileIntTable.setDescription('Table of non-volatile integer settings for use in scripts.')
scrNonVolatileIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 7, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "scrNonVolatileIntIndex"))
if mibBuilder.loadTexts: scrNonVolatileIntEntry.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileIntEntry.setDescription('Entry for table of non-volatile script integer settings')
scrNonVolatileIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scrNonVolatileIntIndex.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileIntIndex.setDescription('Index for table of non-volatile script integer settings')
scrNonVolatileInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 18, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scrNonVolatileInt.setStatus('current')
if mibBuilder.loadTexts: scrNonVolatileInt.setDescription('Non-volatile integer for use in scripts. Use this object to store integer values that need to persist through reset. This object corresponds to the scripting.nvint[] setting key branch; use those keys in scripts and you can view or change their values with this object. Note: to store frequently- changing integers, use the scrVolatileInt object, otherwise your scripts may cause unnecessary wear of the non-volatile storage medium on the unit.')
genSetEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSetEnable.setStatus('current')
if mibBuilder.loadTexts: genSetEnable.setDescription('Enable genset functionality; that is, a generator is in use.')
genSetRelayEs = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSetRelayEs.setStatus('current')
if mibBuilder.loadTexts: genSetRelayEs.setDescription('Which EventSensor has the relay which starts the generator.')
genSetRelayPoint = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSetRelayPoint.setStatus('current')
if mibBuilder.loadTexts: genSetRelayPoint.setDescription('Which relay starts the generator.')
genSetRelayRunningstate = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSetRelayRunningstate.setStatus('current')
if mibBuilder.loadTexts: genSetRelayRunningstate.setDescription('Which relay state corresponds with the generator starting/running.')
genSetCCEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSetCCEnable.setStatus('current')
if mibBuilder.loadTexts: genSetCCEnable.setDescription('Enable generator running detection functionality; that is, the associated CC is valid for determining if generator is running.')
genSetCCEs = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSetCCEs.setStatus('current')
if mibBuilder.loadTexts: genSetCCEs.setDescription('Which CC EventSensor has the CC which is connected to the genertor running detection monitor.')
genSetCCPoint = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSetCCPoint.setStatus('current')
if mibBuilder.loadTexts: genSetCCPoint.setDescription('Which CC is connected to the genertor running detection monitor.')
genSetCCRunningState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSetCCRunningState.setStatus('current')
if mibBuilder.loadTexts: genSetCCRunningState.setDescription('Which CC physical state corresponds with the generator running.')
genRunMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunMode.setStatus('current')
if mibBuilder.loadTexts: genRunMode.setDescription('Generator Exercising function main operating mode; set to INHIBIT to inhibit exercising the generator.')
genRunSched = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunSched.setStatus('current')
if mibBuilder.loadTexts: genRunSched.setDescription('Schedule number(s) which govern(s) when Generator Exercising function runs.')
genRunDuration = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunDuration.setStatus('current')
if mibBuilder.loadTexts: genRunDuration.setDescription('Number of seconds that generator should run, started when the generator needs to start by SCHEDULE or by being forced to start.')
genRunForce = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunForce.setStatus('current')
if mibBuilder.loadTexts: genRunForce.setDescription('Write 1 to this to force the generator exercising to start. Always reads as 0.')
genRunReqasm = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunReqasm.setStatus('current')
if mibBuilder.loadTexts: genRunReqasm.setDescription('Require ASM connectivity before starting the generator from a schedule.')
genRunStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genRunStatus.setStatus('current')
if mibBuilder.loadTexts: genRunStatus.setDescription('Status of Generator Exercising function.')
genRunNonstartEventEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunNonstartEventEnable.setStatus('current')
if mibBuilder.loadTexts: genRunNonstartEventEnable.setDescription('Enable generator non-start event.')
genRunNonstartEventActions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunNonstartEventActions.setStatus('current')
if mibBuilder.loadTexts: genRunNonstartEventActions.setDescription('Actions for generator non-start event.')
genRunNonstartEventTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(536, 1199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunNonstartEventTrap.setStatus('current')
if mibBuilder.loadTexts: genRunNonstartEventTrap.setDescription('Trap number for generator non-start event.')
genRunNonstartEventClass = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 2, 19, 2, 7, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genRunNonstartEventClass.setStatus('current')
if mibBuilder.loadTexts: genRunNonstartEventClass.setDescription('Class (severity) for generator non-start event.')
schedTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1), )
if mibBuilder.loadTexts: schedTable.setStatus('current')
if mibBuilder.loadTexts: schedTable.setDescription('Table of schedules')
schedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1), ).setIndexNames((0, "SITEBOSS-450-STD-MIB", "schedIndex"))
if mibBuilder.loadTexts: schedEntry.setStatus('current')
if mibBuilder.loadTexts: schedEntry.setDescription('Entry for table of schedules.')
schedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedIndex.setStatus('current')
if mibBuilder.loadTexts: schedIndex.setDescription('Index for table of schedules.')
schedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedEnable.setStatus('current')
if mibBuilder.loadTexts: schedEnable.setDescription('Enable this schedule.')
schedStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedStart.setStatus('current')
if mibBuilder.loadTexts: schedStart.setDescription("This is of the form 'mm/dd/yy hh:mm:ss'. This controls on which date/time the schedule starts.")
schedRepeatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatMode.setStatus('current')
if mibBuilder.loadTexts: schedRepeatMode.setDescription('Controls in which way the schedule should repeat.')
schedRepeatFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatFreq.setStatus('current')
if mibBuilder.loadTexts: schedRepeatFreq.setDescription('Controls how often the schedule should repeat: every nth day, week, month, or year.')
schedRepeatEndMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatEndMode.setStatus('current')
if mibBuilder.loadTexts: schedRepeatEndMode.setDescription('Controls how the repeating schedule should end.')
schedRepeatEndAfter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatEndAfter.setStatus('current')
if mibBuilder.loadTexts: schedRepeatEndAfter.setDescription('Number of times this schedule should be repeated; relevant when the repeat end mode is AFTER.')
schedRepeatEndOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatEndOn.setStatus('current')
if mibBuilder.loadTexts: schedRepeatEndOn.setDescription("Date/time (in the form 'mm/yy/dd hh:mm:ss' or blank string) after which repeating should end, relevant when repeat end mode is ON DATE.")
schedRepeatWeeklySun = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatWeeklySun.setStatus('current')
if mibBuilder.loadTexts: schedRepeatWeeklySun.setDescription('Run this schedule on Sunday(s); relevant when repeat mode is weekly.')
schedRepeatWeeklyMon = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatWeeklyMon.setStatus('current')
if mibBuilder.loadTexts: schedRepeatWeeklyMon.setDescription('Run this schedule on Monday(s); relevant when repeat mode is weekly.')
schedRepeatWeeklyTue = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatWeeklyTue.setStatus('current')
if mibBuilder.loadTexts: schedRepeatWeeklyTue.setDescription('Run this schedule on Tuesday(s); relevant when repeat mode is weekly.')
schedRepeatWeeklyWed = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatWeeklyWed.setStatus('current')
if mibBuilder.loadTexts: schedRepeatWeeklyWed.setDescription('Run this schedule on Wednesday(s); relevant when repeat mode is weekly.')
schedRepeatWeeklyThu = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatWeeklyThu.setStatus('current')
if mibBuilder.loadTexts: schedRepeatWeeklyThu.setDescription('Run this schedule on Thursday(s); relevant when repeat mode is weekly.')
schedRepeatWeeklyFri = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatWeeklyFri.setStatus('current')
if mibBuilder.loadTexts: schedRepeatWeeklyFri.setDescription('Run this schedule on Friday(s); relevant when repeat mode is weekly.')
schedRepeatWeeklySat = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatWeeklySat.setStatus('current')
if mibBuilder.loadTexts: schedRepeatWeeklySat.setDescription('Run this schedule on Saturday(s); relevant when repeat mode is weekly.')
schedRepeatMonthlyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatMonthlyMode.setStatus('current')
if mibBuilder.loadTexts: schedRepeatMonthlyMode.setDescription('EACH means the schedule runs on specific dates of the month. ON THE means the schedule runs on calculated dates of the month according to which day that month starts.')
schedRepeatMonthlyDates = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatMonthlyDates.setStatus('current')
if mibBuilder.loadTexts: schedRepeatMonthlyDates.setDescription('Comma-separated list of dates of a month on which this schedule should run, relevant when repeat monthly mode is EACH.')
schedRepeatMonthlyOnThe = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatMonthlyOnThe.setStatus('current')
if mibBuilder.loadTexts: schedRepeatMonthlyOnThe.setDescription('Controls on which day of the month this schedule should run, relevant when repeat monthly mode is ON THE.')
schedRepeatMonthlyOnDay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatMonthlyOnDay.setStatus('current')
if mibBuilder.loadTexts: schedRepeatMonthlyOnDay.setDescription('Controls the day of week on which this schedule is run, relevant when repeat monthly mode is ON THE')
schedRepeatYearlyJan = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyJan.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyJan.setDescription('Run this schedule in January, relevant when repeat mode is YEARLY.')
schedRepeatYearlyFeb = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyFeb.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyFeb.setDescription('Run this schedule in February, relevant when repeat mode is YEARLY.')
schedRepeatYearlyMar = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyMar.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyMar.setDescription('Run this schedule in March, relevant when repeat mode is YEARLY.')
schedRepeatYearlyApr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyApr.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyApr.setDescription('Run this schedule in April, relevant when repeat mode is YEARLY.')
schedRepeatYearlyMay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyMay.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyMay.setDescription('Run this schedule in May, relevant when repeat mode is YEARLY.')
schedRepeatYearlyJun = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyJun.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyJun.setDescription('Run this schedule in June, relevant when repeat mode is YEARLY.')
schedRepeatYearlyJul = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyJul.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyJul.setDescription('Run this schedule in July, relevant when repeat mode is YEARLY.')
schedRepeatYearlyAug = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyAug.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyAug.setDescription('Run this schedule in August, relevant when repeat mode is YEARLY.')
schedRepeatYearlySep = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlySep.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlySep.setDescription('Run this schedule in September, relevant when repeat mode is YEARLY.')
schedRepeatYearlyOct = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyOct.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyOct.setDescription('Run this schedule in October, relevant when repeat mode is YEARLY.')
schedRepeatYearlyNov = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyNov.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyNov.setDescription('Run this schedule in November, relevant when repeat mode is YEARLY.')
schedRepeatYearlyDec = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyDec.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyDec.setDescription('Run this schedule in December, relevant when repeat mode is YEARLY.')
schedRepeatYearlyOnThe = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyOnThe.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyOnThe.setDescription('Controls on which day of the month this schedule should run, relevant when repeat mode is YEARLY.')
schedRepeatYearlyOnDay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedRepeatYearlyOnDay.setStatus('current')
if mibBuilder.loadTexts: schedRepeatYearlyOnDay.setDescription('Controls the day of week on which this schedule is run, relevant when repeat mode is YEARLY.')
schedNextTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 17, 2, 20, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedNextTrigger.setStatus('current')
if mibBuilder.loadTexts: schedNextTrigger.setDescription('When this schedule will next trigger.')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteName.setStatus('current')
if mibBuilder.loadTexts: siteName.setDescription('Site Name string; Max 40 characters.')
thisProduct = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thisProduct.setStatus('current')
if mibBuilder.loadTexts: thisProduct.setDescription('This is a factory configured string for the product name.')
stockTrapString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stockTrapString.setStatus('current')
if mibBuilder.loadTexts: stockTrapString.setDescription('The message defined for the event that triggers a trap.')
trapEventTypeNumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventTypeNumber.setStatus('current')
if mibBuilder.loadTexts: trapEventTypeNumber.setDescription('The user-defined trap variable for the type of event that happened. Here are the definitions: 4 SCHEDULED 7 Serial Handshaking Low 8 Serial Handshaking High 10 Contact Closure Active 11 Contact Closure Inactive 12 Temperature High 13 Temperature Very High 14 Temperature Low 15 Temperature Very Low 16 Temperature Return to Normal 17 Humidity High 18 Humidity Very High 19 Humidity Low 20 Humidity Very Low 21 Humidity Return to Normal 26 Analog High 27 Analog Very High 28 Analog Low 29 Analog Very Low 30 Analog Normal 40 EventSensor Unresponsive 100 Contact Closure Active Reminder 101 Temperature High Reminder 102 Temperature High Very Reminder 103 Temperature Low Reminder 104 Temperature Very Low Reminder 105 Humidity High Reminder 106 Humidity Very High Reminder 107 Humidity Low Reminder 108 Humidity Very Low Reminder 109 Analog High Reminder 110 Analog Very High Reminder 111 Analog Low Reminder 112 Analog Very Low Reminder')
trapEventTypeName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventTypeName.setStatus('current')
if mibBuilder.loadTexts: trapEventTypeName.setDescription('The user-defined trap variable for the string corresponding to the event type.')
trapIncludedValue = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIncludedValue.setStatus('current')
if mibBuilder.loadTexts: trapIncludedValue.setDescription('The user-defined trap variable for the generic included value.')
trapIncludedString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIncludedString.setStatus('current')
if mibBuilder.loadTexts: trapIncludedString.setDescription('The user-defined trap variable for the generic included string.')
trapTypeString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTypeString.setStatus('current')
if mibBuilder.loadTexts: trapTypeString.setDescription('The cause of the trap, added for DL880 compatibility.')
trapEventClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventClassNumber.setStatus('current')
if mibBuilder.loadTexts: trapEventClassNumber.setDescription('The user-defined trap variable for the configurable class number associated with the triggering event.')
trapEventClassName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventClassName.setStatus('current')
if mibBuilder.loadTexts: trapEventClassName.setDescription('The user-defined trap variable for the configurable class name associated with the class number.')
keyInterface = MibScalar((1, 3, 6, 1, 4, 1, 3052, 17, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keyInterface.setStatus('current')
if mibBuilder.loadTexts: keyInterface.setDescription("This object represents a setting key interface. When setting this object, the value to set is the 'sk' command you would enter on the command line (without the 'sk'). To get the result of the operation, read this object after you write it. For example, to configure EventSensor 1 contact closure 34 event actions to be an SNMP InformRequest to host foo, set this object to: 'event.sensor[1].cc[34].eventactions=inform(foo)'. The SNMP response is the result of the operation: if setting that key to that value was a success then the SNMP response will be a success and the response value will be what you had set. If you subsequently read this object then you will see a message 'OK: ...'. If setting that key to that value failed then the SNMP response will be a failure (a badValue response). If you subsequently read this object then the value returned is the reason that setting that key to that value failed. For another example, to read user 3's pass-through access for port 7, set this object to: 'sec.user[3].port[7].ptaccess'. The SNMP response is the result of the operation: if reading that key is a success then the SNMP response will be a success and the response value will be what you had SET (i.e., the opertion of reading a key, which is just the key itself with no '=' operator, and this is not the key value you want to read). If you subsequently read this object then the value returned is the value of the key you want to read. If reading that key failed (e.g., if the key is invalid) then the SNMP response to your SNMP set operation (the value you set being the invalid key to read) will be a failure (a badValue response). If you subsequently read this object then the value returned is the reason that reading that key failed (i.e., 'invalid key').")
s450StockContactClosureTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 110)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockContactClosureTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockContactClosureTrap.setDescription('A stock contact closure trap is issued when a contact closure event happens.')
s450StockTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 120)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockTempTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockTempTrap.setDescription('A stock temperature trap is issued when a temperature event happens.')
s450StockHumidityTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 130)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockHumidityTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockHumidityTrap.setDescription('A stock humidity trap is issued when a humidity event happens.')
s450StockAnalogTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 140)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockAnalogTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockAnalogTrap.setDescription('A stock analog trap is issued when an analog sensor event happens.')
s450StockOutputTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 150)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockOutputTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockOutputTrap.setDescription('A stock output trap is issued when an output event happens. That is, depending on the configuration, when an output changes state for any reason, this trap will be sent.')
s450StockSchedTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 506)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockSchedTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockSchedTrap.setDescription('The stock scheduled alarm trap is issued when the current time reaches the scheduled alarm time.')
s450StockImmediateTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 507)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockImmediateTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockImmediateTrap.setDescription('The stock immediate alarm trap is issued when the user enters the DOTRAP command.')
s450StockCTSTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 510)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockCTSTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockCTSTrap.setDescription('A stock CTS trap is issued when an RS-232 CTS event happens.')
s450CPEDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 511)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450CPEDownTrap.setStatus('current')
if mibBuilder.loadTexts: s450CPEDownTrap.setDescription('A stock CPE Down trap is issued when a CPE Down event happens.')
s450FuelSensorDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 515)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450FuelSensorDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: s450FuelSensorDisconnectTrap.setDescription('A stock Fuel Sensor Disconnect trap is issued when a Fuel Sensor Disconnect or Connect (Return to Normal) event happens.')
s450FuelSensorVolumeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 519)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450FuelSensorVolumeTrap.setStatus('current')
if mibBuilder.loadTexts: s450FuelSensorVolumeTrap.setDescription('A stock Fuel Sensor Volume trap is issued when a Fuel Sensor Volume event happens')
s450ACPowerMonitorAvgVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 520)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450ACPowerMonitorAvgVoltageTrap.setStatus('current')
if mibBuilder.loadTexts: s450ACPowerMonitorAvgVoltageTrap.setDescription('A stock AC power monitor average voltage trap is issued when an AC power monitor average voltage event happens.')
s450ACPowerMonitorAvgCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 521)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450ACPowerMonitorAvgCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: s450ACPowerMonitorAvgCurrentTrap.setDescription('A stock AC power monitor average current trap is issued when an AC power monitor average current event happens.')
s450ACPowerMonitorFrequencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 522)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450ACPowerMonitorFrequencyTrap.setStatus('current')
if mibBuilder.loadTexts: s450ACPowerMonitorFrequencyTrap.setDescription('A stock AC power monitor frequency trap is issued when an AC power monitor frequency event happens.')
s450ACPowerMonitorTRPTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 523)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450ACPowerMonitorTRPTrap.setStatus('current')
if mibBuilder.loadTexts: s450ACPowerMonitorTRPTrap.setDescription('A stock AC power monitor TRP (total real power) trap is issued when an AC power monitor TRP event happens.')
s450ACPowerMonitorDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 524)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450ACPowerMonitorDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: s450ACPowerMonitorDisconnectTrap.setDescription('A stock AC power monitor disconnect trap is issued when an AC power monitor disconnect event happens.')
s450StockScriptTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 526)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450StockScriptTrap.setStatus('current')
if mibBuilder.loadTexts: s450StockScriptTrap.setDescription('A stock script trap is issued when a script triggers an event via a_lib.PostEvent() called with no trap number (or this trap number) specified.')
s450FuelSensorVolumeSuddenChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 527)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450FuelSensorVolumeSuddenChangeTrap.setStatus('current')
if mibBuilder.loadTexts: s450FuelSensorVolumeSuddenChangeTrap.setDescription('A stock Fuel Sensor Volume Sudden Change trap is issued when a Fuel Sensor Volume Sudden Change event happens')
s450FuelSensorVolumeSlowChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 528)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450FuelSensorVolumeSlowChangeTrap.setStatus('current')
if mibBuilder.loadTexts: s450FuelSensorVolumeSlowChangeTrap.setDescription('A stock Fuel Sensor Volume Slow Change trap is issued when a Fuel Sensor Volume Slow Change event happens')
s450BattMonStringTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 530)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450BattMonStringTemperatureTrap.setStatus('current')
if mibBuilder.loadTexts: s450BattMonStringTemperatureTrap.setDescription('A stock Battery Monitor String Temperature trap is issued when a Battery Monitor String Temperature event happens.')
s450BattMonStringDiffTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 531)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450BattMonStringDiffTemperatureTrap.setStatus('current')
if mibBuilder.loadTexts: s450BattMonStringDiffTemperatureTrap.setDescription('A stock Battery Monitor String Differential Temperature trap is issued when a Battery Monitor String Differential Temperature event happens.')
s450BattMonStringVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 532)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450BattMonStringVoltageTrap.setStatus('current')
if mibBuilder.loadTexts: s450BattMonStringVoltageTrap.setDescription('A stock Battery Monitor String Voltage trap is issued when a Battery Monitor String Voltage event happens.')
s450BattMonStringChargeLevelTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 533)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450BattMonStringChargeLevelTrap.setStatus('current')
if mibBuilder.loadTexts: s450BattMonStringChargeLevelTrap.setDescription('A stock Battery Monitor String Charge Level trap is issued when a Battery Monitor String Charge Level event happens.')
s450BattMonStringChargingCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 534)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450BattMonStringChargingCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: s450BattMonStringChargingCurrentTrap.setDescription('A stock Battery Monitor String Charging Current trap is issued when a Battery Monitor String Charging Current event happens.')
s450BattMonStringDischargingCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 535)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450BattMonStringDischargingCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: s450BattMonStringDischargingCurrentTrap.setDescription('A stock Battery Monitor String Discharging Current trap is issued when a Battery Monitor String Discharging Current event happens.')
s450GeneratorNonStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 536)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450GeneratorNonStartTrap.setStatus('current')
if mibBuilder.loadTexts: s450GeneratorNonStartTrap.setDescription('A stock Generator Non-start trap is issued when the unit commands the generator to start as part of the generator exercising feature, and the generator fails to register as started after 30 seconds (as detected by CC generator running detection).')
s450BattMonStringDifferentialVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 537)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450BattMonStringDifferentialVoltageTrap.setStatus('current')
if mibBuilder.loadTexts: s450BattMonStringDifferentialVoltageTrap.setDescription('A stock Battery Monitor String Differential Voltage trap is issued when a Battery Monitor String Differential Voltage event happens.')
s450BattMonStringJarHealthTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 538)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450BattMonStringJarHealthTrap.setStatus('current')
if mibBuilder.loadTexts: s450BattMonStringJarHealthTrap.setDescription('A stock Battery Monitor String Jar Health trap is issued when a Battery Monitor String Jar Health event happens.')
s450CameraTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 539)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450CameraTrap.setStatus('current')
if mibBuilder.loadTexts: s450CameraTrap.setDescription('A stock camera trap is issued when a camera event happens.')
s450ACTotalPowerFactorTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 540)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450ACTotalPowerFactorTrap.setStatus('current')
if mibBuilder.loadTexts: s450ACTotalPowerFactorTrap.setDescription('A stock AC power monitor total power factor trap is issued when an AC power monitor total power factor event happens.')
s450ResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 543)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "stockTrapString"), ("SITEBOSS-450-STD-MIB", "trapTypeString"))
if mibBuilder.loadTexts: s450ResetTrap.setStatus('current')
if mibBuilder.loadTexts: s450ResetTrap.setDescription('A stock reset trap is issued when a reset event happens.')
s450UserTrap1000 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1000)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1000.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1000.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1000.')
s450UserTrap1001 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1001)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1001.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1001.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1001.')
s450UserTrap1002 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1002)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1002.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1002.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1002.')
s450UserTrap1003 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1003)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1003.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1003.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1003.')
s450UserTrap1004 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1004)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1004.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1004.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1004.')
s450UserTrap1005 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1005)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1005.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1005.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1005.')
s450UserTrap1006 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1006)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1006.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1006.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1006.')
s450UserTrap1007 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1007)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1007.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1007.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1007.')
s450UserTrap1008 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1008)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1008.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1008.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1008.')
s450UserTrap1009 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1009)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1009.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1009.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1009.')
s450UserTrap1010 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1010)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1010.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1010.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1010.')
s450UserTrap1011 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1011)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1011.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1011.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1011.')
s450UserTrap1012 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1012)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1012.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1012.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1012.')
s450UserTrap1013 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1013)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1013.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1013.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1013.')
s450UserTrap1014 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1014)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1014.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1014.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1014.')
s450UserTrap1015 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1015)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1015.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1015.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1015.')
s450UserTrap1016 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1016)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1016.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1016.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1016.')
s450UserTrap1017 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1017)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1017.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1017.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1017.')
s450UserTrap1018 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1018)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1018.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1018.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1018.')
s450UserTrap1019 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1019)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1019.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1019.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1019.')
s450UserTrap1020 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1020)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1020.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1020.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1020.')
s450UserTrap1021 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1021)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1021.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1021.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1021.')
s450UserTrap1022 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1022)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1022.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1022.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1022.')
s450UserTrap1023 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1023)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1023.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1023.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1023.')
s450UserTrap1024 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1024)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1024.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1024.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1024.')
s450UserTrap1025 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1025)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1025.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1025.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1025.')
s450UserTrap1026 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1026)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1026.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1026.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1026.')
s450UserTrap1027 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1027)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1027.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1027.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1027.')
s450UserTrap1028 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1028)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1028.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1028.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1028.')
s450UserTrap1029 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1029)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1029.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1029.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1029.')
s450UserTrap1030 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1030)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1030.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1030.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1030.')
s450UserTrap1031 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1031)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1031.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1031.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1031.')
s450UserTrap1032 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1032)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1032.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1032.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1032.')
s450UserTrap1033 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1033)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1033.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1033.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1033.')
s450UserTrap1034 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1034)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1034.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1034.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1034.')
s450UserTrap1035 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1035)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1035.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1035.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1035.')
s450UserTrap1036 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1036)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1036.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1036.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1036.')
s450UserTrap1037 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1037)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1037.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1037.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1037.')
s450UserTrap1038 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1038)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1038.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1038.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1038.')
s450UserTrap1039 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1039)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1039.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1039.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1039.')
s450UserTrap1040 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1040)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1040.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1040.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1040.')
s450UserTrap1041 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1041)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1041.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1041.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1041.')
s450UserTrap1042 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1042)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1042.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1042.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1042.')
s450UserTrap1043 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1043)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1043.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1043.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1043.')
s450UserTrap1044 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1044)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1044.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1044.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1044.')
s450UserTrap1045 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1045)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1045.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1045.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1045.')
s450UserTrap1046 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1046)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1046.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1046.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1046.')
s450UserTrap1047 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1047)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1047.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1047.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1047.')
s450UserTrap1048 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1048)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1048.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1048.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1048.')
s450UserTrap1049 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1049)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1049.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1049.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1049.')
s450UserTrap1050 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1050)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1050.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1050.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1050.')
s450UserTrap1051 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1051)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1051.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1051.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1051.')
s450UserTrap1052 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1052)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1052.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1052.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1052.')
s450UserTrap1053 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1053)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1053.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1053.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1053.')
s450UserTrap1054 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1054)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1054.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1054.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1054.')
s450UserTrap1055 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1055)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1055.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1055.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1055.')
s450UserTrap1056 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1056)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1056.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1056.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1056.')
s450UserTrap1057 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1057)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1057.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1057.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1057.')
s450UserTrap1058 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1058)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1058.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1058.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1058.')
s450UserTrap1059 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1059)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1059.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1059.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1059.')
s450UserTrap1060 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1060)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1060.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1060.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1060.')
s450UserTrap1061 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1061)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1061.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1061.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1061.')
s450UserTrap1062 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1062)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1062.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1062.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1062.')
s450UserTrap1063 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1063)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1063.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1063.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1063.')
s450UserTrap1064 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1064)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1064.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1064.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1064.')
s450UserTrap1065 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1065)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1065.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1065.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1065.')
s450UserTrap1066 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1066)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1066.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1066.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1066.')
s450UserTrap1067 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1067)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1067.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1067.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1067.')
s450UserTrap1068 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1068)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1068.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1068.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1068.')
s450UserTrap1069 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1069)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1069.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1069.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1069.')
s450UserTrap1070 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1070)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1070.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1070.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1070.')
s450UserTrap1071 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1071)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1071.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1071.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1071.')
s450UserTrap1072 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1072)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1072.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1072.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1072.')
s450UserTrap1073 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1073)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1073.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1073.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1073.')
s450UserTrap1074 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1074)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1074.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1074.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1074.')
s450UserTrap1075 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1075)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1075.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1075.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1075.')
s450UserTrap1076 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1076)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1076.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1076.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1076.')
s450UserTrap1077 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1077)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1077.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1077.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1077.')
s450UserTrap1078 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1078)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1078.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1078.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1078.')
s450UserTrap1079 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1079)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1079.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1079.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1079.')
s450UserTrap1080 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1080)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1080.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1080.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1080.')
s450UserTrap1081 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1081)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1081.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1081.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1081.')
s450UserTrap1082 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1082)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1082.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1082.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1082.')
s450UserTrap1083 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1083)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1083.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1083.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1083.')
s450UserTrap1084 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1084)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1084.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1084.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1084.')
s450UserTrap1085 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1085)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1085.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1085.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1085.')
s450UserTrap1086 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1086)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1086.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1086.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1086.')
s450UserTrap1087 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1087)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1087.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1087.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1087.')
s450UserTrap1088 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1088)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1088.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1088.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1088.')
s450UserTrap1089 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1089)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1089.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1089.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1089.')
s450UserTrap1090 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1090)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1090.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1090.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1090.')
s450UserTrap1091 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1091)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1091.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1091.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1091.')
s450UserTrap1092 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1092)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1092.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1092.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1092.')
s450UserTrap1093 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1093)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1093.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1093.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1093.')
s450UserTrap1094 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1094)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1094.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1094.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1094.')
s450UserTrap1095 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1095)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1095.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1095.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1095.')
s450UserTrap1096 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1096)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1096.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1096.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1096.')
s450UserTrap1097 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1097)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1097.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1097.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1097.')
s450UserTrap1098 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1098)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1098.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1098.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1098.')
s450UserTrap1099 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1099)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1099.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1099.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1099.')
s450UserTrap1100 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1100)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1100.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1100.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1100.')
s450UserTrap1101 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1101)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1101.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1101.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1101.')
s450UserTrap1102 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1102)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1102.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1102.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1102.')
s450UserTrap1103 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1103)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1103.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1103.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1103.')
s450UserTrap1104 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1104)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1104.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1104.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1104.')
s450UserTrap1105 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1105)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1105.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1105.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1105.')
s450UserTrap1106 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1106)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1106.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1106.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1106.')
s450UserTrap1107 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1107)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1107.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1107.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1107.')
s450UserTrap1108 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1108)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1108.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1108.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1108.')
s450UserTrap1109 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1109)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1109.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1109.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1109.')
s450UserTrap1110 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1110)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1110.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1110.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1110.')
s450UserTrap1111 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1111)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1111.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1111.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1111.')
s450UserTrap1112 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1112)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1112.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1112.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1112.')
s450UserTrap1113 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1113)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1113.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1113.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1113.')
s450UserTrap1114 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1114)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1114.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1114.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1114.')
s450UserTrap1115 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1115)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1115.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1115.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1115.')
s450UserTrap1116 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1116)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1116.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1116.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1116.')
s450UserTrap1117 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1117)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1117.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1117.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1117.')
s450UserTrap1118 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1118)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1118.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1118.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1118.')
s450UserTrap1119 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1119)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1119.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1119.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1119.')
s450UserTrap1120 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1120)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1120.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1120.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1120.')
s450UserTrap1121 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1121)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1121.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1121.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1121.')
s450UserTrap1122 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1122)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1122.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1122.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1122.')
s450UserTrap1123 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1123)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1123.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1123.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1123.')
s450UserTrap1124 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1124)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1124.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1124.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1124.')
s450UserTrap1125 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1125)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1125.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1125.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1125.')
s450UserTrap1126 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1126)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1126.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1126.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1126.')
s450UserTrap1127 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1127)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1127.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1127.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1127.')
s450UserTrap1128 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1128)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1128.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1128.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1128.')
s450UserTrap1129 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1129)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1129.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1129.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1129.')
s450UserTrap1130 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1130)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1130.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1130.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1130.')
s450UserTrap1131 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1131)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1131.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1131.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1131.')
s450UserTrap1132 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1132)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1132.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1132.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1132.')
s450UserTrap1133 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1133)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1133.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1133.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1133.')
s450UserTrap1134 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1134)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1134.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1134.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1134.')
s450UserTrap1135 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1135)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1135.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1135.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1135.')
s450UserTrap1136 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1136)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1136.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1136.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1136.')
s450UserTrap1137 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1137)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1137.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1137.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1137.')
s450UserTrap1138 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1138)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1138.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1138.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1138.')
s450UserTrap1139 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1139)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1139.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1139.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1139.')
s450UserTrap1140 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1140)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1140.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1140.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1140.')
s450UserTrap1141 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1141)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1141.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1141.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1141.')
s450UserTrap1142 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1142)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1142.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1142.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1142.')
s450UserTrap1143 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1143)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1143.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1143.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1143.')
s450UserTrap1144 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1144)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1144.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1144.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1144.')
s450UserTrap1145 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1145)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1145.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1145.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1145.')
s450UserTrap1146 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1146)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1146.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1146.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1146.')
s450UserTrap1147 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1147)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1147.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1147.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1147.')
s450UserTrap1148 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1148)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1148.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1148.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1148.')
s450UserTrap1149 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1149)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1149.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1149.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1149.')
s450UserTrap1150 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1150)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1150.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1150.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1150.')
s450UserTrap1151 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1151)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1151.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1151.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1151.')
s450UserTrap1152 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1152)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1152.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1152.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1152.')
s450UserTrap1153 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1153)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1153.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1153.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1153.')
s450UserTrap1154 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1154)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1154.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1154.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1154.')
s450UserTrap1155 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1155)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1155.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1155.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1155.')
s450UserTrap1156 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1156)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1156.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1156.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1156.')
s450UserTrap1157 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1157)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1157.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1157.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1157.')
s450UserTrap1158 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1158)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1158.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1158.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1158.')
s450UserTrap1159 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1159)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1159.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1159.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1159.')
s450UserTrap1160 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1160)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1160.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1160.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1160.')
s450UserTrap1161 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1161)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1161.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1161.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1161.')
s450UserTrap1162 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1162)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1162.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1162.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1162.')
s450UserTrap1163 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1163)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1163.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1163.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1163.')
s450UserTrap1164 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1164)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1164.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1164.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1164.')
s450UserTrap1165 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1165)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1165.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1165.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1165.')
s450UserTrap1166 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1166)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1166.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1166.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1166.')
s450UserTrap1167 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1167)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1167.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1167.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1167.')
s450UserTrap1168 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1168)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1168.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1168.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1168.')
s450UserTrap1169 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1169)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1169.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1169.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1169.')
s450UserTrap1170 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1170)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1170.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1170.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1170.')
s450UserTrap1171 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1171)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1171.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1171.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1171.')
s450UserTrap1172 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1172)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1172.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1172.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1172.')
s450UserTrap1173 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1173)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1173.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1173.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1173.')
s450UserTrap1174 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1174)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1174.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1174.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1174.')
s450UserTrap1175 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1175)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1175.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1175.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1175.')
s450UserTrap1176 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1176)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1176.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1176.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1176.')
s450UserTrap1177 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1177)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1177.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1177.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1177.')
s450UserTrap1178 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1178)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1178.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1178.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1178.')
s450UserTrap1179 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1179)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1179.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1179.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1179.')
s450UserTrap1180 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1180)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1180.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1180.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1180.')
s450UserTrap1181 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1181)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1181.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1181.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1181.')
s450UserTrap1182 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1182)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1182.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1182.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1182.')
s450UserTrap1183 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1183)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1183.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1183.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1183.')
s450UserTrap1184 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1184)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1184.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1184.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1184.')
s450UserTrap1185 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1185)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1185.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1185.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1185.')
s450UserTrap1186 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1186)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1186.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1186.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1186.')
s450UserTrap1187 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1187)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1187.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1187.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1187.')
s450UserTrap1188 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1188)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1188.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1188.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1188.')
s450UserTrap1189 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1189)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1189.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1189.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1189.')
s450UserTrap1190 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1190)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1190.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1190.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1190.')
s450UserTrap1191 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1191)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1191.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1191.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1191.')
s450UserTrap1192 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1192)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1192.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1192.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1192.')
s450UserTrap1193 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1193)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1193.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1193.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1193.')
s450UserTrap1194 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1194)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1194.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1194.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1194.')
s450UserTrap1195 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1195)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1195.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1195.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1195.')
s450UserTrap1196 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1196)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1196.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1196.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1196.')
s450UserTrap1197 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1197)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1197.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1197.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1197.')
s450UserTrap1198 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1198)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1198.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1198.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1198.')
s450UserTrap1199 = NotificationType((1, 3, 6, 1, 4, 1, 3052, 17, 0, 1199)).setObjects(("SITEBOSS-450-STD-MIB", "siteName"), ("SITEBOSS-450-STD-MIB", "esIndex"), ("SITEBOSS-450-STD-MIB", "esName"), ("SITEBOSS-450-STD-MIB", "trapEventTypeNumber"), ("SITEBOSS-450-STD-MIB", "trapEventTypeName"), ("SITEBOSS-450-STD-MIB", "esIndexPoint"), ("SITEBOSS-450-STD-MIB", "esPointName"), ("SITEBOSS-450-STD-MIB", "esID"), ("SITEBOSS-450-STD-MIB", "clock"), ("SITEBOSS-450-STD-MIB", "trapIncludedValue"), ("SITEBOSS-450-STD-MIB", "trapIncludedString"), ("SITEBOSS-450-STD-MIB", "trapEventClassNumber"), ("SITEBOSS-450-STD-MIB", "trapEventClassName"))
if mibBuilder.loadTexts: s450UserTrap1199.setStatus('current')
if mibBuilder.loadTexts: s450UserTrap1199.setDescription('This user-defined trap is issued when an event happens that causes a trap with specific trap type 1199.')
mibBuilder.exportSymbols("SITEBOSS-450-STD-MIB", ethRoutingEnable=ethRoutingEnable, scrNonVolatileStringTable=scrNonVolatileStringTable, s450UserTrap1026=s450UserTrap1026, eth1MAC=eth1MAC, schedRepeatYearlyOnDay=schedRepeatYearlyOnDay, acpmsTotalEnergyVA=acpmsTotalEnergyVA, acpmAvgVoltageHighClass=acpmAvgVoltageHighClass, acpmsTPFMaxStr=acpmsTPFMaxStr, bmDiffTempVHighValue=bmDiffTempVHighValue, bmDiffTempHighClass=bmDiffTempHighClass, esID=esID, eth2Address=eth2Address, schedNextTrigger=schedNextTrigger, acpmAvgVoltageVLowTrapNum=acpmAvgVoltageVLowTrapNum, fsGenBottomOffset=fsGenBottomOffset, evNoSensorClass=evNoSensorClass, esCCCombinedStatusBlock6=esCCCombinedStatusBlock6, eth2Mode=eth2Mode, actionSchedEnable=actionSchedEnable, web=web, scrVolatileString=scrVolatileString, fsVolumeIndex=fsVolumeIndex, ethernet2=ethernet2, acpmAvgCurrentEntry=acpmAvgCurrentEntry, fuelSensorDisconnectTable=fuelSensorDisconnectTable, batteryMonitorVoltageTable=batteryMonitorVoltageTable, espcTempEnable=espcTempEnable, acpmsTPFInEventState=acpmsTPFInEventState, esNumberAirflowSensors=esNumberAirflowSensors, sysEventFileID=sysEventFileID, bmDischargingCurrentVHighValue=bmDischargingCurrentVHighValue, ftpPushIncludeSeq=ftpPushIncludeSeq, schedRepeatEndMode=schedRepeatEndMode, wmsSIMStatus=wmsSIMStatus, s450UserTrap1118=s450UserTrap1118, evResetMessage=evResetMessage, s450UserTrap1154=s450UserTrap1154, s450UserTrap1178=s450UserTrap1178, s450UserTrap1111=s450UserTrap1111, s450UserTrap1189=s450UserTrap1189, bmDiffTempIndex=bmDiffTempIndex, acpmFreqNormalTrapNum=acpmFreqNormalTrapNum, bmVoltageEntry=bmVoltageEntry, scrDTRCtrlPortEnableEntry=scrDTRCtrlPortEnableEntry, esAnalogCombinedStatusBlock1=esAnalogCombinedStatusBlock1, espcAIConvHighUnit=espcAIConvHighUnit, schedRepeatYearlyJun=schedRepeatYearlyJun, s450UserTrap1018=s450UserTrap1018, eth2VLAN1SubnetMask=eth2VLAN1SubnetMask, bmChargeLevelVLowTrapNum=bmChargeLevelVLowTrapNum, esOutputCombinedStatusBlock2=esOutputCombinedStatusBlock2, schedRepeatWeeklyMon=schedRepeatWeeklyMon, rtsAlarms=rtsAlarms, acpmTRPHighTrapNum=acpmTRPHighTrapNum, s450UserTrap1051=s450UserTrap1051, acpmsAvgVoltageAvgStr=acpmsAvgVoltageAvgStr, bmChargeLevelIndex=bmChargeLevelIndex, secUserAuditWriteAccess=secUserAuditWriteAccess, sysCRDBFileIDEntry=sysCRDBFileIDEntry, sysLogFilter=sysLogFilter, evResetTrapnum=evResetTrapnum, esPointConfigAITable=esPointConfigAITable, s450UserTrap1011=s450UserTrap1011, ftpPushperiod=ftpPushperiod, esNumberAnalog=esNumberAnalog, acpmDisconnectTable=acpmDisconnectTable, acpmTPFNormalTrapNum=acpmTPFNormalTrapNum, sysCRDBFileEnforceMinIndex=sysCRDBFileEnforceMinIndex, ftpPushIncludeTime=ftpPushIncludeTime, s450UserTrap1137=s450UserTrap1137, wmsSignal=wmsSignal, trapIncludeUDState=trapIncludeUDState, acpmAvgCurrentIndex=acpmAvgCurrentIndex, bmChargeLevelNormalActions=bmChargeLevelNormalActions, s450UserTrap1085=s450UserTrap1085, esPointConfigCCTable=esPointConfigCCTable, s450UserTrap1185=s450UserTrap1185, eth2VLAN3Priority=eth2VLAN3Priority, network=network, acpmTRPLowActions=acpmTRPLowActions, bmsCurrentValue=bmsCurrentValue, evSched1TrapNum=evSched1TrapNum, genRunNonstartEventClass=genRunNonstartEventClass, auditLogStoreCommands=auditLogStoreCommands, s450UserTrap1071=s450UserTrap1071, portConfigBufferPT=portConfigBufferPT, acpmAvgCurrentHighValue=acpmAvgCurrentHighValue, s450UserTrap1005=s450UserTrap1005, acpmTRPEntry=acpmTRPEntry, acpmFreqVHighClass=acpmFreqVHighClass, acpmTRPSysrepThreshold=acpmTRPSysrepThreshold, esPointValueStr=esPointValueStr, espcHumidVHighTrapnum=espcHumidVHighTrapnum, sysCRDBPercentFull=sysCRDBPercentFull, acpmTPFSysrepThreshold=acpmTPFSysrepThreshold, bmChargeLevelEnable=bmChargeLevelEnable, schedRepeatMonthlyOnDay=schedRepeatMonthlyOnDay, esPointConfigCCEntry=esPointConfigCCEntry, portConfigMLRLineCount=portConfigMLRLineCount, esTempReportingMode=esTempReportingMode, espcHumidVHighActions=espcHumidVHighActions, bmDiffTempVHighTrapNum=bmDiffTempVHighTrapNum, genSetRelayEs=genSetRelayEs, ethernet1=ethernet1, espcTempVHighClass=espcTempVHighClass, portConfigMLREndField1Text=portConfigMLREndField1Text, status=status, acpmTPFSysrepLimit=acpmTPFSysrepLimit, config=config, acpmsAPPhaseAValueStr=acpmsAPPhaseAValueStr, s450UserTrap1188=s450UserTrap1188, acpmAvgCurrentVLowValue=acpmAvgCurrentVLowValue, bmDiffVoltHighValue=bmDiffVoltHighValue, wmsBScolor=wmsBScolor, espcCCNormalAlias=espcCCNormalAlias, eventSensorPointConfig=eventSensorPointConfig, schedRepeatWeeklySat=schedRepeatWeeklySat, consoleTimeout=consoleTimeout, bmChargingCurrentSysrepThreshold=bmChargingCurrentSysrepThreshold, bmVoltageNormalTrapNum=bmVoltageNormalTrapNum, s450UserTrap1073=s450UserTrap1073, esIndex=esIndex, ipRestrictionTable=ipRestrictionTable, acpmTPFVLowTrapNum=acpmTPFVLowTrapNum, esPointValueInt=esPointValueInt, s450UserTrap1161=s450UserTrap1161, actionSched=actionSched, acpmAvgCurrentLowValue=acpmAvgCurrentLowValue, portConfigMaskEnable=portConfigMaskEnable, evSched2Tuesday=evSched2Tuesday, s450UserTrap1139=s450UserTrap1139, sysCRDBCapacity=sysCRDBCapacity, espcHumidLowActions=espcHumidLowActions, eth1VLAN3ID=eth1VLAN3ID, s450UserTrap1078=s450UserTrap1078, rtsFileShowAnswer=rtsFileShowAnswer, s450UserTrap1134=s450UserTrap1134, sfEnable=sfEnable, ftpPushPushFileEntry=ftpPushPushFileEntry, acpmFreqVLowClass=acpmFreqVLowClass, evClassNameEntry=evClassNameEntry, secUserEventsReadAccess=secUserEventsReadAccess, espcHumidDeadband=espcHumidDeadband, bmDiffTempNormalClass=bmDiffTempNormalClass, evSched1Monday=evSched1Monday, portConfigMLRNumLinesBefore=portConfigMLRNumLinesBefore, schedRepeatYearlyAug=schedRepeatYearlyAug, acpmsTAPMinStr=acpmsTAPMinStr, eth1VLAN5Priority=eth1VLAN5Priority, scrDTRCtrlPortEnableTable=scrDTRCtrlPortEnableTable, actionHostEntry=actionHostEntry, sysTimeNetHostIndex=sysTimeNetHostIndex, espcHumidLowHumid=espcHumidLowHumid, acpmTPFSysrepEnable=acpmTPFSysrepEnable, secUserTable=secUserTable, wirelessPIN=wirelessPIN, acpmsAvgVoltageValueStr=acpmsAvgVoltageValueStr, s450UserTrap1043=s450UserTrap1043, evSched2Wednesday=evSched2Wednesday, schedRepeatYearlyMay=schedRepeatYearlyMay, espcAIEnable=espcAIEnable, acpmTPFNormalActions=acpmTPFNormalActions, bmChargeLevelEntry=bmChargeLevelEntry, s450UserTrap1174=s450UserTrap1174, espcTempLowTemp=espcTempLowTemp, actionAsentria=actionAsentria, esPointConfigAIEntry=esPointConfigAIEntry, acpmTPFLowActions=acpmTPFLowActions, espcHumidNormalClass=espcHumidNormalClass, acpmTRPLowValue=acpmTRPLowValue, s450UserTrap1024=s450UserTrap1024, wmsRevID=wmsRevID, eth2VLAN6ID=eth2VLAN6ID, s450UserTrap1013=s450UserTrap1013, s450UserTrap1096=s450UserTrap1096, espcCCEventClass=espcCCEventClass, bmChargingCurrentNormalTrapNum=bmChargingCurrentNormalTrapNum, evShskLowEntry=evShskLowEntry, fsTankHeight=fsTankHeight, s450UserTrap1039=s450UserTrap1039, ftpPush=ftpPush, bmTempLowValue=bmTempLowValue, bmsJarHealthValue=bmsJarHealthValue, rtsAlarmsPushRetryTimer=rtsAlarmsPushRetryTimer, espcCCThreshold=espcCCThreshold, genRunMode=genRunMode, evSched2Class=evSched2Class, acpmTPFEntry=acpmTPFEntry, s450UserTrap1056=s450UserTrap1056, fsGenSysrepLimit=fsGenSysrepLimit, sfSecret=sfSecret, fsVolumeDeadband=fsVolumeDeadband, scrIndex=scrIndex, bmDiffTempDeadband=bmDiffTempDeadband, fuelSensorSlowChangeTable=fuelSensorSlowChangeTable, wmsGPRSStatus=wmsGPRSStatus, sysTimeGMTOffset=sysTimeGMTOffset, bmVoltageLowActions=bmVoltageLowActions, acpmsTRPMinStr=acpmsTRPMinStr, dnsTable=dnsTable, acpmsPFPhaseAValueStr=acpmsPFPhaseAValueStr, eth2VLAN2SubnetMask=eth2VLAN2SubnetMask, fsCustomTankIndexDatum=fsCustomTankIndexDatum, bmChargeLevelLowClass=bmChargeLevelLowClass, fsGenDistanceUnit=fsGenDistanceUnit, espcAIConvHighSign=espcAIConvHighSign, secUserEnable=secUserEnable, acpmAvgVoltageVLowValue=acpmAvgVoltageVLowValue, acpmAvgVoltageVHighActions=acpmAvgVoltageVHighActions, fsDiscEntry=fsDiscEntry, bmChargingCurrentVHighActions=bmChargingCurrentVHighActions, fsGenSysrepType=fsGenSysrepType, bmTempIndex=bmTempIndex, fsVolumeVHighActions=fsVolumeVHighActions, evLogMaxSize=evLogMaxSize, eth1VLAN4SubnetMask=eth1VLAN4SubnetMask, serialPorts=serialPorts, bmTempSysrepThreshold=bmTempSysrepThreshold, espcCCNormalThreshold=espcCCNormalThreshold, fsDiscHighValue=fsDiscHighValue, fsStatusVolumeValueString=fsStatusVolumeValueString, sysCRDB=sysCRDB, secUserChallengeExpiration=secUserChallengeExpiration, s450UserTrap1165=s450UserTrap1165, acpmGenIndex=acpmGenIndex, unitSecurity=unitSecurity, s450UserTrap1109=s450UserTrap1109, evResetDelay=evResetDelay, s450UserTrap1138=s450UserTrap1138, snmpPRequestDescription=snmpPRequestDescription, bmDiffTempEnable=bmDiffTempEnable, espcAIHighClass=espcAIHighClass, wirelessDRE=wirelessDRE, bmsChargeLevelValue=bmsChargeLevelValue, acpmFreqVLowTrapNum=acpmFreqVLowTrapNum, eth1VLAN5ID=eth1VLAN5ID, ftpPushPushFileTable=ftpPushPushFileTable, esNumberEventSensors=esNumberEventSensors, evResetActions=evResetActions, esNumberRelayOutputs=esNumberRelayOutputs, snmpPMode=snmpPMode, acpmsTAPValueStr=acpmsTAPValueStr, eth2VLAN5Priority=eth2VLAN5Priority, bmVoltageHighActions=bmVoltageHighActions, acpmStatusEntry=acpmStatusEntry, schedRepeatYearlyJan=schedRepeatYearlyJan, eth2VLAN5Address=eth2VLAN5Address, s450UserTrap1120=s450UserTrap1120, hostDeclaration=hostDeclaration, acpmTRPSysrepEnable=acpmTRPSysrepEnable, acpmAvgVoltageHighValue=acpmAvgVoltageHighValue, bmVoltageVHighTrapNum=bmVoltageVHighTrapNum, dnsIndex=dnsIndex, bmDischargingCurrentVHighClass=bmDischargingCurrentVHighClass)
mibBuilder.exportSymbols("SITEBOSS-450-STD-MIB", scripting=scripting, email=email, scrVolatileIntIndex=scrVolatileIntIndex, espcAIPolarity=espcAIPolarity, portConfigMLRStartField2Text=portConfigMLRStartField2Text, s450UserTrap1021=s450UserTrap1021, esIndexPC=esIndexPC, sysTime=sysTime, sysLogFileCount=sysLogFileCount, evShskHighEntry=evShskHighEntry, acpmsRPPhaseBValueStr=acpmsRPPhaseBValueStr, acpmsCurrentPhaseBValueStr=acpmsCurrentPhaseBValueStr, fsStatusName=fsStatusName, acpmTRPVLowTrapNum=acpmTRPVLowTrapNum, s450UserTrap1046=s450UserTrap1046, genSetCCRunningState=genSetCCRunningState, s450UserTrap1066=s450UserTrap1066, s450UserTrap1095=s450UserTrap1095, scrNonVolatileString=scrNonVolatileString, s450UserTrap1023=s450UserTrap1023, s450UserTrap1124=s450UserTrap1124, s450UserTrap1063=s450UserTrap1063, s450UserTrap1002=s450UserTrap1002, acpmAvgVoltageEnable=acpmAvgVoltageEnable, actionSchedEnd=actionSchedEnd, bmVoltageVHighActions=bmVoltageVHighActions, s450UserTrap1182=s450UserTrap1182, s450UserTrap1067=s450UserTrap1067, esIndexES=esIndexES, espcTempLowActions=espcTempLowActions, bmsChargingCurrentEvent=bmsChargingCurrentEvent, acpmFreqHighClass=acpmFreqHighClass, s450UserTrap1028=s450UserTrap1028, evSched2Saturday=evSched2Saturday, s450UserTrap1087=s450UserTrap1087, schedRepeatWeeklyTue=schedRepeatWeeklyTue, fsVolumeHighValue=fsVolumeHighValue, ipRestrictionIndex=ipRestrictionIndex, eth1VLAN1Priority=eth1VLAN1Priority, s450UserTrap1081=s450UserTrap1081, esAirflowReportingMode=esAirflowReportingMode, s450UserTrap1029=s450UserTrap1029, acpmTRPLowTrapNum=acpmTRPLowTrapNum, bmDiffTempSysrepEnable=bmDiffTempSysrepEnable, acpmAvgCurrentVHighActions=acpmAvgCurrentVHighActions, sysLocLongitude=sysLocLongitude, snmpPRequestEntry=snmpPRequestEntry, fsTankVolume=fsTankVolume, bmTempHighValue=bmTempHighValue, snmpProxyIndex=snmpProxyIndex, acpmAvgVoltageVHighTrapNum=acpmAvgVoltageVHighTrapNum, eth2VLAN1=eth2VLAN1, s450UserTrap1041=s450UserTrap1041, acpmTRPHighActions=acpmTRPHighActions, acpmsVoltagePhaseAValueStr=acpmsVoltagePhaseAValueStr, s450BattMonStringTemperatureTrap=s450BattMonStringTemperatureTrap, schedRepeatYearlyMar=schedRepeatYearlyMar, eth2VLAN5=eth2VLAN5, snmpProxyTable=snmpProxyTable, wirelessMode=wirelessMode, eth2VLAN5SubnetMask=eth2VLAN5SubnetMask, scrVolatileStringTable=scrVolatileStringTable, esCCCombinedStatusBlock4=esCCCombinedStatusBlock4, fsDiscClass=fsDiscClass, s450BattMonStringDiffTemperatureTrap=s450BattMonStringDiffTemperatureTrap, acpmAvgVoltageSysrepThreshold=acpmAvgVoltageSysrepThreshold, acpmFreqNormalActions=acpmFreqNormalActions, bmVoltageLowValue=bmVoltageLowValue, eth1VLAN6SubnetMask=eth1VLAN6SubnetMask, eth2VLAN6Router=eth2VLAN6Router, s450UserTrap1059=s450UserTrap1059, s450UserTrap1140=s450UserTrap1140, evLog=evLog, fsSlowChangeClass=fsSlowChangeClass, fsStatusVolumePercentLevel=fsStatusVolumePercentLevel, s450FuelSensorDisconnectTrap=s450FuelSensorDisconnectTrap, actionSchedBegin=actionSchedBegin, bmVoltageVHighValue=bmVoltageVHighValue, acpmAvgCurrentNormalActions=acpmAvgCurrentNormalActions, eth1Address=eth1Address, netAdvanced=netAdvanced, bmDeviceCTSize=bmDeviceCTSize, sysMTU=sysMTU, eth2VLAN3=eth2VLAN3, fsTankDimB=fsTankDimB, acpmAvgVoltageEntry=acpmAvgVoltageEntry, sysTimeNetHostTable=sysTimeNetHostTable, acpmFreqLowClass=acpmFreqLowClass, acpmAvgCurrentLowActions=acpmAvgCurrentLowActions, s450UserTrap1008=s450UserTrap1008, espcTempVHighTemp=espcTempVHighTemp, fsCustomTankHeight=fsCustomTankHeight, espcHumidLowTrapnum=espcHumidLowTrapnum, bmChargingCurrentHighTrapNum=bmChargingCurrentHighTrapNum, acpmTRPHighValue=acpmTRPHighValue, acpmsVoltagePhaseCValueStr=acpmsVoltagePhaseCValueStr, bmChargeLevelVLowClass=bmChargeLevelVLowClass, bmDiffVoltDeadband=bmDiffVoltDeadband, eth2VLAN2Router=eth2VLAN2Router, acpmAvgVoltageSysrepEnable=acpmAvgVoltageSysrepEnable, rtsFileEntry=rtsFileEntry, deStatusTable=deStatusTable, fsVolumeHighClass=fsVolumeHighClass, acpmsCurrentPhaseCValueStr=acpmsCurrentPhaseCValueStr, batteryMonitorTempTable=batteryMonitorTempTable, eth2VLAN4Priority=eth2VLAN4Priority, esPointInEventState=esPointInEventState, evSched2Monday=evSched2Monday, auditLogStoreResets=auditLogStoreResets, bmsJarHealthEvent=bmsJarHealthEvent, espcHumidVHighClass=espcHumidVHighClass, sysTimeGMTDirection=sysTimeGMTDirection, s450UserTrap1104=s450UserTrap1104, s450UserTrap1037=s450UserTrap1037, eth2VLAN4SubnetMask=eth2VLAN4SubnetMask, acpmFreqHighValue=acpmFreqHighValue, evShskLowTable=evShskLowTable, acpmTRPSysrepLimit=acpmTRPSysrepLimit, sysUpdateStatus=sysUpdateStatus, scrTable=scrTable, esPointConfigHumidTable=esPointConfigHumidTable, evShskLowTrapNum=evShskLowTrapNum, acpmTRPNormalTrapNum=acpmTRPNormalTrapNum, s450UserTrap1164=s450UserTrap1164, wireless=wireless, rts=rts, espcCCEnable=espcCCEnable, fsSuddenChangeAmplitude=fsSuddenChangeAmplitude, sysAnswerString=sysAnswerString, snmpNotificationTx=snmpNotificationTx, acpmAvgCurrentSysrepEnable=acpmAvgCurrentSysrepEnable, bmStatusTable=bmStatusTable, fsGenInputES=fsGenInputES, netSecurity=netSecurity, wmsRegistration=wmsRegistration, eth2VLAN6SubnetMask=eth2VLAN6SubnetMask, espcCCEventState=espcCCEventState, ftpPushRemoteFileIndex=ftpPushRemoteFileIndex, wmsCellID=wmsCellID, trapAuthFailEnable=trapAuthFailEnable, schedRepeatWeeklySun=schedRepeatWeeklySun, secFactory=secFactory, acpmTRPNormalClass=acpmTRPNormalClass, ftpPushPushAudit=ftpPushPushAudit, bmVoltageNormalActions=bmVoltageNormalActions, fsCustomTankIndexFS=fsCustomTankIndexFS, acpmsAvgCurrentAvgStr=acpmsAvgCurrentAvgStr, bmDischargingCurrentSysrepEnable=bmDischargingCurrentSysrepEnable, s450UserTrap1123=s450UserTrap1123, scrRepeatInterval=scrRepeatInterval, esCCCombinedStatusBlock2=esCCCombinedStatusBlock2, s450UserTrap1125=s450UserTrap1125, hostEntry=hostEntry, bmDeviceIndex=bmDeviceIndex, s450UserTrap1151=s450UserTrap1151, bmChargeLevelLowTrapNum=bmChargeLevelLowTrapNum, s450ACPowerMonitorAvgVoltageTrap=s450ACPowerMonitorAvgVoltageTrap, s450UserTrap1077=s450UserTrap1077, schedRepeatMonthlyDates=schedRepeatMonthlyDates, scrArguments=scrArguments, bmDischargingCurrentHighTrapNum=bmDischargingCurrentHighTrapNum, portConfigDataFormat=portConfigDataFormat, eth1VLAN2ID=eth1VLAN2ID, trapIncludeDateTime=trapIncludeDateTime, wmsCountryCode=wmsCountryCode, genRunForce=genRunForce, fsStatusIndex=fsStatusIndex, eth1VLAN3SubnetMask=eth1VLAN3SubnetMask, bmjsTempValue=bmjsTempValue, bmChargingCurrentIndex=bmChargingCurrentIndex, s450UserTrap1117=s450UserTrap1117, acpmsAvgCurrentMaxStr=acpmsAvgCurrentMaxStr, portConfigBaud=portConfigBaud, evReminderInterval=evReminderInterval, s450UserTrap1177=s450UserTrap1177, s450UserTrap1016=s450UserTrap1016, eth2VLAN3SubnetMask=eth2VLAN3SubnetMask, bmDischargingCurrentHighClass=bmDischargingCurrentHighClass, bmsTempValue=bmsTempValue, bmDiffTempVHighClass=bmDiffTempVHighClass, sysLogListenPort=sysLogListenPort, evShskHighTrapNum=evShskHighTrapNum, snmpPRequestTable=snmpPRequestTable, genSet=genSet, esName=esName, s450BattMonStringDischargingCurrentTrap=s450BattMonStringDischargingCurrentTrap, bmVoltageVLowActions=bmVoltageVLowActions, portConfigEtxToCRLF=portConfigEtxToCRLF, s450UserTrap1160=s450UserTrap1160, batteryMonitorChargeLevelTable=batteryMonitorChargeLevelTable, auditLogStorePassthrough=auditLogStorePassthrough, acpmAvgVoltageLowClass=acpmAvgVoltageLowClass, evSched2Enable=evSched2Enable, scrNonVolatileIntEntry=scrNonVolatileIntEntry, deStatusEntry=deStatusEntry, bmDiffTempSysrepLimit=bmDiffTempSysrepLimit, s450UserTrap1004=s450UserTrap1004, snmpPoll=snmpPoll, s450=s450, acpmAvgVoltageVLowActions=acpmAvgVoltageVLowActions, acpmAvgVoltageLowActions=acpmAvgVoltageLowActions, s450UserTrap1017=s450UserTrap1017, eth2VLAN1ID=eth2VLAN1ID, espcTempNormalTrapnum=espcTempNormalTrapnum, eth1VLAN3Address=eth1VLAN3Address, eth1VLAN2Address=eth1VLAN2Address, evClassNameTable=evClassNameTable, sysTimeStampSpaceAfter=sysTimeStampSpaceAfter, sysCRDBFileEnforceMinEntry=sysCRDBFileEnforceMinEntry, esTable=esTable, trapEventClassName=trapEventClassName, bmsVoltageValue=bmsVoltageValue, wmsStatus=wmsStatus, secUserChallengeTelnetSendTo=secUserChallengeTelnetSendTo, s450UserTrap1035=s450UserTrap1035, bmDiffVoltVHighTrapNum=bmDiffVoltVHighTrapNum, acpmsAvgFreqMinStr=acpmsAvgFreqMinStr, secUserRights=secUserRights, acpmsAvgCurrentInEventState=acpmsAvgCurrentInEventState, esPointTimetickLastChange=esPointTimetickLastChange, esPointTimeLastChange=esPointTimeLastChange, bmJarHealthEntry=bmJarHealthEntry, s450UserTrap1072=s450UserTrap1072, acpmAvgVoltageLowValue=acpmAvgVoltageLowValue, dnsEntry=dnsEntry, bmVoltageSysrepEnable=bmVoltageSysrepEnable, scrNonVolatileIntIndex=scrNonVolatileIntIndex, scShowPasswordPrompt=scShowPasswordPrompt, espcHumidVLowActions=espcHumidVLowActions, bmTempHighTrapNum=bmTempHighTrapNum, acpmFreqHighTrapNum=acpmFreqHighTrapNum, snmpNtfnTimeout=snmpNtfnTimeout, bmStatusEntry=bmStatusEntry, espcHumidHighClass=espcHumidHighClass, defaultRouter=defaultRouter, ncpDuplex=ncpDuplex, espcCCNormalActions=espcCCNormalActions, bmDischargingCurrentEnable=bmDischargingCurrentEnable, s450UserTrap1127=s450UserTrap1127, espcAIHighActions=espcAIHighActions, eth2SubnetMask=eth2SubnetMask, eth1VLAN2Router=eth1VLAN2Router, esAnalogReportingMode=esAnalogReportingMode, wmsIMSI=wmsIMSI, esOutputCombinedStatusBlock1=esOutputCombinedStatusBlock1, espcTempIndexES=espcTempIndexES, bmDeviceEntry=bmDeviceEntry, bmChargingCurrentHighClass=bmChargingCurrentHighClass, fsVolumeVLowTrapNum=fsVolumeVLowTrapNum, bmDischargingCurrentSysrepLimit=bmDischargingCurrentSysrepLimit, actionAsentriaRequireAck=actionAsentriaRequireAck, s450UserTrap1086=s450UserTrap1086, ipRestriction=ipRestriction, bmsEnable=bmsEnable)
mibBuilder.exportSymbols("SITEBOSS-450-STD-MIB", esAnalogCombinedStatusBlock6=esAnalogCombinedStatusBlock6, s450UserTrap1191=s450UserTrap1191, acpmTRPHighClass=acpmTRPHighClass, s450UserTrap1006=s450UserTrap1006, wirelessAPN=wirelessAPN, fsVolumeLowTrapNum=fsVolumeLowTrapNum, espcAIConvUnitName=espcAIConvUnitName, bmsDischargingCurrentEvent=bmsDischargingCurrentEvent, secUserChallengeModemSendTo=secUserChallengeModemSendTo, secUserEntry=secUserEntry, evNoSensorTimeout=evNoSensorTimeout, acpmAvgCurrentVHighTrapNum=acpmAvgCurrentVHighTrapNum, acpmFreqHighActions=acpmFreqHighActions, espcHumidVLowClass=espcHumidVLowClass, wmsRSSI=wmsRSSI, espcTempVHighActions=espcTempVHighActions, evShskLowClass=evShskLowClass, s450UserTrap1083=s450UserTrap1083, bmjsAdmittanceChangeValue=bmjsAdmittanceChangeValue, productIds=productIds, evSched1Sunday=evSched1Sunday, espcTempNormalActions=espcTempNormalActions, ipRestrictionMask=ipRestrictionMask, acpmsAvgFreqInEventState=acpmsAvgFreqInEventState, bmChargingCurrentNormalClass=bmChargingCurrentNormalClass, espcTempVLowTrapnum=espcTempVLowTrapnum, s450UserTrap1162=s450UserTrap1162, scTelnetPTLoginRequired=scTelnetPTLoginRequired, s450UserTrap1038=s450UserTrap1038, bmVoltageLowClass=bmVoltageLowClass, s450UserTrap1156=s450UserTrap1156, s450UserTrap1080=s450UserTrap1080, acpmAvgCurrentSysrepLimit=acpmAvgCurrentSysrepLimit, bmTempEnable=bmTempEnable, bmVoltageNormalClass=bmVoltageNormalClass, eth2MAC=eth2MAC, s450UserTrap1054=s450UserTrap1054, s450UserTrap1089=s450UserTrap1089, esNumberCCs=esNumberCCs, snmpAgentEnable=snmpAgentEnable, actionSchedWeekdaysOnly=actionSchedWeekdaysOnly, acpmAvgVoltageHighTrapNum=acpmAvgVoltageHighTrapNum, schedEnable=schedEnable, wmsNetName=wmsNetName, eventSensorBasics=eventSensorBasics, snmpNtfnAttempts=snmpNtfnAttempts, s450UserTrap1113=s450UserTrap1113, esAnalogCombinedStatusBlock2=esAnalogCombinedStatusBlock2, acpmAvgCurrentHighActions=acpmAvgCurrentHighActions, bmDischargingCurrentHighActions=bmDischargingCurrentHighActions, fsSlowChangeTime=fsSlowChangeTime, acpmAvgCurrentNormalTrapNum=acpmAvgCurrentNormalTrapNum, s450UserTrap1163=s450UserTrap1163, s450UserTrap1102=s450UserTrap1102, acpmStatusTable=acpmStatusTable, bmDiffTempVHighActions=bmDiffTempVHighActions, evSched1Enable=evSched1Enable, sysLogMode=sysLogMode, s450UserTrap1119=s450UserTrap1119, scrNonVolatileIntTable=scrNonVolatileIntTable, s450CPEDownTrap=s450CPEDownTrap, portConfigId=portConfigId, eth1VLAN1ID=eth1VLAN1ID, acpmTPFVLowActions=acpmTPFVLowActions, wirelessModemStatus=wirelessModemStatus, bmDeviceInputString=bmDeviceInputString, schedRepeatEndOn=schedRepeatEndOn, s450UserTrap1042=s450UserTrap1042, evSched1Wednesday=evSched1Wednesday, genRunStatus=genRunStatus, dnsAddress=dnsAddress, routing=routing, acpmsTAPAvgStr=acpmsTAPAvgStr, bmChargingCurrentNormalActions=bmChargingCurrentNormalActions, esAnalogCombinedStatusBlock3=esAnalogCombinedStatusBlock3, s450UserTrap1184=s450UserTrap1184, deStatusThreshold=deStatusThreshold, portConfigRecordTimeout=portConfigRecordTimeout, sysFileTransfer=sysFileTransfer, secUserCallbackNumber2=secUserCallbackNumber2, s450UserTrap1052=s450UserTrap1052, wirelessIdleTimeout=wirelessIdleTimeout, espcTempHighActions=espcTempHighActions, s450notifications=s450notifications, bmVoltageVHighClass=bmVoltageVHighClass, eth1Router=eth1Router, eth1VLAN5Address=eth1VLAN5Address, s450UserTrap1132=s450UserTrap1132, bmDiffVoltHighTrapNum=bmDiffVoltHighTrapNum, portConfigMLREndField1Pos=portConfigMLREndField1Pos, webPort=webPort, s450UserTrap1003=s450UserTrap1003, espcAIConvHighValue=espcAIConvHighValue, bmsJarStatusTable=bmsJarStatusTable, bmDiffVoltNormalActions=bmDiffVoltNormalActions, s450UserTrap1167=s450UserTrap1167, eth2VLAN4=eth2VLAN4, evShskHighMessage=evShskHighMessage, sysTimeNet=sysTimeNet, bmjsAdmittanceValue=bmjsAdmittanceValue, genRunNonstartEvent=genRunNonstartEvent, s450StockContactClosureTrap=s450StockContactClosureTrap, consoleConfirm=consoleConfirm, acpmGeneralTable=acpmGeneralTable, fsVolumeLowActions=fsVolumeLowActions, bmDiffTempNormalActions=bmDiffTempNormalActions, bmVoltageVLowClass=bmVoltageVLowClass, snmpProxyPort=snmpProxyPort, secUserIndex=secUserIndex, bmDiffVoltEnable=bmDiffVoltEnable, bmDiffVoltSysrepThreshold=bmDiffVoltSysrepThreshold, consoleDuplex=consoleDuplex, espcTempDeadband=espcTempDeadband, sysLocLatitude=sysLocLatitude, bmChargeLevelLowActions=bmChargeLevelLowActions, evSched2Exclusions=evSched2Exclusions, s450UserTrap1186=s450UserTrap1186, schedRepeatYearlyOct=schedRepeatYearlyOct, s450StockCTSTrap=s450StockCTSTrap, webEnable=webEnable, evShskLowEnable=evShskLowEnable, espcAIVlowClass=espcAIVlowClass, bmJarHealthEnable=bmJarHealthEnable, esCCCombinedStatusBlock3=esCCCombinedStatusBlock3, genSetRelayPoint=genSetRelayPoint, bmDischargingCurrentIndex=bmDischargingCurrentIndex, acpmAvgVoltageNormalActions=acpmAvgVoltageNormalActions, acpmFreqLowValue=acpmFreqLowValue, eth2VLAN2Address=eth2VLAN2Address, espcAIDeadband=espcAIDeadband, evNoSensor=evNoSensor, acpmAvgVoltageTable=acpmAvgVoltageTable, evReset=evReset, espcTempVHighTrapnum=espcTempVHighTrapnum, acpmAvgVoltageLowTrapNum=acpmAvgVoltageLowTrapNum, espcCCNormalTrapnum=espcCCNormalTrapnum, espcAILowValue=espcAILowValue, genRun=genRun, acpmTRPVLowActions=acpmTRPVLowActions, schedRepeatYearlyJul=schedRepeatYearlyJul, scSecret=scSecret, esIndexPoint=esIndexPoint, wmsNetCode=wmsNetCode, acpmGenCtRatio=acpmGenCtRatio, wmsIMEI=wmsIMEI, arpFilter=arpFilter, snmpPRequestResultTime=snmpPRequestResultTime, acpmAvgCurrentSysrepThreshold=acpmAvgCurrentSysrepThreshold, bmDiffTempSysrepThreshold=bmDiffTempSysrepThreshold, s450ACPowerMonitorTRPTrap=s450ACPowerMonitorTRPTrap, scTelnetLoginRequired=scTelnetLoginRequired, evMgmtReprocess=evMgmtReprocess, bmDiffVoltSysrepEnable=bmDiffVoltSysrepEnable, s450StockTempTrap=s450StockTempTrap, s450UserTrap1128=s450UserTrap1128, s450UserTrap1097=s450UserTrap1097, espcHumidHighHumid=espcHumidHighHumid, acpmTRPVHighTrapNum=acpmTRPVHighTrapNum, scrName=scrName, esNoiseReportingMode=esNoiseReportingMode, s450UserTrap1098=s450UserTrap1098, fuelSensorVolumeTable=fuelSensorVolumeTable, fsGenTopOffset=fsGenTopOffset, acPowerMonitor=acPowerMonitor, evSched1Thursday=evSched1Thursday, snmpNtfnCycles=snmpNtfnCycles, acpmAvgCurrentTable=acpmAvgCurrentTable, scrVolatileInt=scrVolatileInt, actionAsentriaTCPPort=actionAsentriaTCPPort, eth2VLAN2ID=eth2VLAN2ID, acpmsTotalEnergyWh=acpmsTotalEnergyWh, bmTempEntry=bmTempEntry, fsDiscNormalActions=fsDiscNormalActions, s450UserTrap1159=s450UserTrap1159, fsStatusTable=fsStatusTable, s450UserTrap1194=s450UserTrap1194, bmGenBatteryCapacity=bmGenBatteryCapacity, acpmFreqVLowActions=acpmFreqVLowActions, portConfigStoreAlarmsDPT=portConfigStoreAlarmsDPT, s450UserTrap1100=s450UserTrap1100, fsVolumeLowValue=fsVolumeLowValue, sysTimeNetHost=sysTimeNetHost, acpmTRPLowClass=acpmTRPLowClass, schedRepeatYearlyDec=schedRepeatYearlyDec, bmDiffVoltNormalClass=bmDiffVoltNormalClass, s450BattMonStringVoltageTrap=s450BattMonStringVoltageTrap, acPowerMonitorStatus=acPowerMonitorStatus, acpmsIndex=acpmsIndex, s450UserTrap1094=s450UserTrap1094, schedEntry=schedEntry, s450UserTrap1069=s450UserTrap1069, s450FuelSensorVolumeTrap=s450FuelSensorVolumeTrap, genRunSched=genRunSched, snmpPRequestResultValue=snmpPRequestResultValue, scrNonVolatileStringEntry=scrNonVolatileStringEntry, esPointTable=esPointTable, bmsName=bmsName, evLogEnable=evLogEnable, esNumberNoiseSensors=esNumberNoiseSensors, acpmTRPVHighActions=acpmTRPVHighActions, acpmsAPPhaseBValueStr=acpmsAPPhaseBValueStr, bmChargingCurrentSysrepEnable=bmChargingCurrentSysrepEnable, batteryMonitorDischargingCurrentTable=batteryMonitorDischargingCurrentTable, schedRepeatWeeklyThu=schedRepeatWeeklyThu, genRunNonstartEventEnable=genRunNonstartEventEnable, portConfigIndex=portConfigIndex, schedRepeatWeeklyFri=schedRepeatWeeklyFri, acpmsAvgCurrentValueStr=acpmsAvgCurrentValueStr, wmsBER=wmsBER, espcCCIndexES=espcCCIndexES, snmpPRequestOID=snmpPRequestOID, acpmsTRcPValueStr=acpmsTRcPValueStr, acpmsRcPPhaseCValueStr=acpmsRcPPhaseCValueStr, eth1VLAN4Priority=eth1VLAN4Priority, evShskHighEnable=evShskHighEnable, fsVolumeVLowActions=fsVolumeVLowActions, s450UserTrap1143=s450UserTrap1143, eth1VLAN4=eth1VLAN4, scrEnable=scrEnable, wmsMinRxLevel=wmsMinRxLevel, s450UserTrap1157=s450UserTrap1157, bmDiffVoltIndex=bmDiffVoltIndex, espcAIVlowValue=espcAIVlowValue, s450UserTrap1170=s450UserTrap1170, acpmGenEntry=acpmGenEntry, s450CameraTrap=s450CameraTrap, s450UserTrap1045=s450UserTrap1045, fsVolumeHighTrapNum=fsVolumeHighTrapNum, emailAuthEnable=emailAuthEnable, s450UserTrap1152=s450UserTrap1152, esPointConfigHumidEntry=esPointConfigHumidEntry, s450UserTrap1103=s450UserTrap1103, bmsStringState=bmsStringState, espcTempHighClass=espcTempHighClass, s450UserTrap1065=s450UserTrap1065, acpmAvgCurrentVLowClass=acpmAvgCurrentVLowClass, espcAINormalTrapnum=espcAINormalTrapnum, schedStart=schedStart, s450UserTrap1144=s450UserTrap1144, bmJarStatusEntry=bmJarStatusEntry, acpmTRPNormalActions=acpmTRPNormalActions, bmVoltageHighClass=bmVoltageHighClass, evSched1Exclusions=evSched1Exclusions, fsSuddenChangeClass=fsSuddenChangeClass, acpmsCombined=acpmsCombined, eth2VLAN4Router=eth2VLAN4Router, fsSuddenChangeIndex=fsSuddenChangeIndex, s450UserTrap1048=s450UserTrap1048, bmJarHealthVLowClass=bmJarHealthVLowClass, evSched1=evSched1, rtsFileMode=rtsFileMode, fsTankEntry=fsTankEntry, s450UserTrap1147=s450UserTrap1147, fsSuddenChangeActions=fsSuddenChangeActions)
mibBuilder.exportSymbols("SITEBOSS-450-STD-MIB", trapIncludeSourceAddress=trapIncludeSourceAddress, actionHostIndex=actionHostIndex, espcAIVhighValue=espcAIVhighValue, bmGenBatteryNominalVoltage=bmGenBatteryNominalVoltage, schedRepeatMonthlyOnThe=schedRepeatMonthlyOnThe, s450UserTrap1110=s450UserTrap1110, snmpProxyIP=snmpProxyIP, PYSNMP_MODULE_ID=s450, acpmsTRPValueStr=acpmsTRPValueStr, generator=generator, evShskLowIndex=evShskLowIndex, sysUpdate=sysUpdate, fsVolumeVHighValue=fsVolumeVHighValue, fuelSensor=fuelSensor, ftpPushRemoteFileName=ftpPushRemoteFileName, acpmAvgVoltageIndex=acpmAvgVoltageIndex, secUserChallengeTelnetMode=secUserChallengeTelnetMode, bmVoltageHighValue=bmVoltageHighValue, acpmAvgCurrentVLowActions=acpmAvgCurrentVLowActions, eth1VLAN=eth1VLAN, acpmFreqLowTrapNum=acpmFreqLowTrapNum, ftpPushRemoteFileTable=ftpPushRemoteFileTable, batteryMonitorDiffTempTable=batteryMonitorDiffTempTable, auditLogStoreInactivity=auditLogStoreInactivity, fsTankShape=fsTankShape, bmChargingCurrentVHighTrapNum=bmChargingCurrentVHighTrapNum, s450UserTrap1146=s450UserTrap1146, eth1Mode=eth1Mode, trapIncludeUDName=trapIncludeUDName, espcTempVLowTemp=espcTempVLowTemp, bmVoltageVLowTrapNum=bmVoltageVLowTrapNum, acpmFreqNormalClass=acpmFreqNormalClass, bmDiffVoltVHighClass=bmDiffVoltVHighClass, clock=clock, fsCustomTankVolume=fsCustomTankVolume, acpmTPFVLowClass=acpmTPFVLowClass, ftpPushPushFileIndex=ftpPushPushFileIndex, acpmAvgVoltageVLowClass=acpmAvgVoltageVLowClass, sysTimeNetHostEntry=sysTimeNetHostEntry, s450UserTrap1032=s450UserTrap1032, auditLogStoreAlarmActions=auditLogStoreAlarmActions, fsStatusEntry=fsStatusEntry, s450UserTrap1176=s450UserTrap1176, eth1VLAN3Router=eth1VLAN3Router, s450UserTrap1064=s450UserTrap1064, ethRoutingNATEnable=ethRoutingNATEnable, batteryMonitorDiffVoltTable=batteryMonitorDiffVoltTable, action=action, snmpProxyEntry=snmpProxyEntry, s450UserTrap1108=s450UserTrap1108, scAuthMode=scAuthMode, evSched2Message=evSched2Message, actionEmailEntry=actionEmailEntry, wmsModelID=wmsModelID, trapIncludeSiteName=trapIncludeSiteName, stockTrapString=stockTrapString, bmDischargingCurrentHighValue=bmDischargingCurrentHighValue, fsGenName=fsGenName, sysLocXOffset=sysLocXOffset, bmDeviceES=bmDeviceES, eth1VLAN2=eth1VLAN2, bmChargingCurrentEnable=bmChargingCurrentEnable, acpmTPFDeadband=acpmTPFDeadband, portConfigStripPtOutputLfs=portConfigStripPtOutputLfs, scrRunAtStartup=scrRunAtStartup, secCore=secCore, fsVolumeNormalClass=fsVolumeNormalClass, s450UserTrap1025=s450UserTrap1025, snmpPRequestResultStatus=snmpPRequestResultStatus, eth2VLAN4ID=eth2VLAN4ID, bmJarHealthVLowActions=bmJarHealthVLowActions, evShskHighClass=evShskHighClass, scrEntry=scrEntry, espcAILowTrapnum=espcAILowTrapnum, portConfigMLREndDetection=portConfigMLREndDetection, trapEventClassNumber=trapEventClassNumber, portConfigMLREndField2Text=portConfigMLREndField2Text, acpmDisconnectEnable=acpmDisconnectEnable, s450UserTrap1070=s450UserTrap1070, s450UserTrap1190=s450UserTrap1190, hostname=hostname, wmsMpRACH=wmsMpRACH, fuelSensorCustomTankTable=fuelSensorCustomTankTable, scrScheduleTime=scrScheduleTime, acpmGenName=acpmGenName, fsGenSysrepThreshold=fsGenSysrepThreshold, event=event, evMgmt=evMgmt, s450UserTrap1057=s450UserTrap1057, eth1SubnetMask=eth1SubnetMask, sysCRDBFileIDIndex=sysCRDBFileIDIndex, s450ACPowerMonitorDisconnectTrap=s450ACPowerMonitorDisconnectTrap, evNoSensorActions=evNoSensorActions, bmGenBatteryQuantity=bmGenBatteryQuantity, eth1VLAN4ID=eth1VLAN4ID, deStatusCounter=deStatusCounter, portConfigMLRStartField1Pos=portConfigMLRStartField1Pos, ftpPushDirectory=ftpPushDirectory, sysEscapeCharacter=sysEscapeCharacter, fsTankVolumeUnit=fsTankVolumeUnit, bmTempSysrepEnable=bmTempSysrepEnable, acpmsPFPhaseCValueStr=acpmsPFPhaseCValueStr, espcAIConvLowValue=espcAIConvLowValue, espcAIVhighTrapnum=espcAIVhighTrapnum, esHumidReportingMode=esHumidReportingMode, acpmFreqSysrepThreshold=acpmFreqSysrepThreshold, s450UserTrap1068=s450UserTrap1068, esPointAliasValueStr=esPointAliasValueStr, evShskHighIndex=evShskHighIndex, eth1VLAN6Router=eth1VLAN6Router, wmsICCID=wmsICCID, acpmTPFLowClass=acpmTPFLowClass, s450UserTrap1179=s450UserTrap1179, secUserPTEscapeTo=secUserPTEscapeTo, eth2VLAN3Router=eth2VLAN3Router, bmJarHealthLowTrapNum=bmJarHealthLowTrapNum, actionEmailTable=actionEmailTable, genRunNonstartEventTrap=genRunNonstartEventTrap, bmChargingCurrentEntry=bmChargingCurrentEntry, bmChargingCurrentHighActions=bmChargingCurrentHighActions, acpmsTRcPAvgStr=acpmsTRcPAvgStr, s450UserTrap1149=s450UserTrap1149, rtsAlarmsReqXON=rtsAlarmsReqXON, rtsAlarmsMode=rtsAlarmsMode, bmChargeLevelVLowActions=bmChargeLevelVLowActions, scrRunScheduled=scrRunScheduled, ipRestrictionEnable=ipRestrictionEnable, acpmTRPVHighClass=acpmTRPVHighClass, espcHumidIndexPoint=espcHumidIndexPoint, s450UserTrap1155=s450UserTrap1155, genSetCC=genSetCC, espcHumidLowClass=espcHumidLowClass, eth1VLAN6Priority=eth1VLAN6Priority, wmsMgfID=wmsMgfID, eth1VLAN4Router=eth1VLAN4Router, fsDiscActions=fsDiscActions, acpmsRPPhaseCValueStr=acpmsRPPhaseCValueStr, schedRepeatMode=schedRepeatMode, schedRepeatEndAfter=schedRepeatEndAfter, auditLogMaxSize=auditLogMaxSize, acpmFreqSysrepEnable=acpmFreqSysrepEnable, thisProduct=thisProduct, scrVolatileIntEntry=scrVolatileIntEntry, eth2VLAN1Priority=eth2VLAN1Priority, acpmGenSysrepType=acpmGenSysrepType, fsGenRawValueBottom=fsGenRawValueBottom, actionAsentriaVersion=actionAsentriaVersion, s450UserTrap1169=s450UserTrap1169, acpmTRPVLowClass=acpmTRPVLowClass, evSched2=evSched2, espcHumidIndexES=espcHumidIndexES, batteryMonitorStatus=batteryMonitorStatus, fsVolumeHighActions=fsVolumeHighActions, s450StockSchedTrap=s450StockSchedTrap, sysPTEndPause=sysPTEndPause, espcCCEventTrapnum=espcCCEventTrapnum, s450StockOutputTrap=s450StockOutputTrap, actionEmail=actionEmail, s450UserTrap1031=s450UserTrap1031, espcCCAlarmAlias=espcCCAlarmAlias, bmGenSysrepType=bmGenSysrepType, schedRepeatYearlyApr=schedRepeatYearlyApr, bmjsVoltageValue=bmjsVoltageValue, eth1VLAN5=eth1VLAN5, eth1VLAN6Address=eth1VLAN6Address, s450UserTrap1049=s450UserTrap1049, acpmTPFLowValue=acpmTPFLowValue, acpmFreqTable=acpmFreqTable, eth2VLAN1Router=eth2VLAN1Router, fsVolumeVLowValue=fsVolumeVLowValue, bmVoltageSysrepLimit=bmVoltageSysrepLimit, secUserEventsWriteAccess=secUserEventsWriteAccess, batteryMonitorGeneralTable=batteryMonitorGeneralTable, s450ACTotalPowerFactorTrap=s450ACTotalPowerFactorTrap, acpmsTotalEnergyVAR=acpmsTotalEnergyVAR, bmVoltageLowTrapNum=bmVoltageLowTrapNum, s450UserTrap1000=s450UserTrap1000, snmpPRequestPeriod=snmpPRequestPeriod, numberPorts=numberPorts, s450UserTrap1093=s450UserTrap1093, portConfigMLRUseComplexRules=portConfigMLRUseComplexRules, trap=trap, acpmsTPFValueStr=acpmsTPFValueStr, bmTempScale=bmTempScale, eth2VLAN=eth2VLAN, acpmsName=acpmsName, s450ACPowerMonitorAvgCurrentTrap=s450ACPowerMonitorAvgCurrentTrap, bmChargeLevelNormalClass=bmChargeLevelNormalClass, acpmDisconnectNormalActions=acpmDisconnectNormalActions, s450UserTrap1112=s450UserTrap1112, wmsChannel=wmsChannel, scrDTRCtrlPortEnableIndex=scrDTRCtrlPortEnableIndex, s450UserTrap1010=s450UserTrap1010, actionParseError=actionParseError, bmGenSysrepPackage=bmGenSysrepPackage, acpmAvgCurrentHighClass=acpmAvgCurrentHighClass, s450UserTrap1181=s450UserTrap1181, acpmAvgVoltageHighActions=acpmAvgVoltageHighActions, eth2VLAN6Priority=eth2VLAN6Priority, bmsDiffTempValueStr=bmsDiffTempValueStr, fsSuddenChangeTrapNum=fsSuddenChangeTrapNum, bmDischargingCurrentDeadband=bmDischargingCurrentDeadband, s450UserTrap1122=s450UserTrap1122, s450UserTrap1196=s450UserTrap1196, scRightsGroup=scRightsGroup, wmsBaseCoeff=wmsBaseCoeff, acpmGenPtRatio=acpmGenPtRatio, s450UserTrap1084=s450UserTrap1084, rtsAlarmsEmptyClose=rtsAlarmsEmptyClose, esHumidCombinedStatus=esHumidCombinedStatus, portConfigMLREndField2Pos=portConfigMLREndField2Pos, acpmTRPDeadband=acpmTRPDeadband, fsDiscNormalClass=fsDiscNormalClass, bmDiffVoltEntry=bmDiffVoltEntry, evShskHighActions=evShskHighActions, acpmAvgVoltageNormalClass=acpmAvgVoltageNormalClass, schedRepeatYearlySep=schedRepeatYearlySep, acpmAvgVoltageVHighClass=acpmAvgVoltageVHighClass, espcAILowClass=espcAILowClass, fuelSensorGeneralTable=fuelSensorGeneralTable, scrRunAlways=scrRunAlways, espcTempVLowActions=espcTempVLowActions, bmDiffTempHighTrapNum=bmDiffTempHighTrapNum, sysFileTransferStatus=sysFileTransferStatus, bmVoltageDeadband=bmVoltageDeadband, secUserAccessFile=secUserAccessFile, rtsAlarmsPushPort=rtsAlarmsPushPort, scConsoleLoginRequired=scConsoleLoginRequired, scrNonVolatileStringIndex=scrNonVolatileStringIndex, acpmsAvgFreqMaxStr=acpmsAvgFreqMaxStr, s450UserTrap1033=s450UserTrap1033, emailDomain=emailDomain, s450UserTrap1090=s450UserTrap1090, s450UserTrap1131=s450UserTrap1131, scrVolatileIntTable=scrVolatileIntTable, trapIncludedValue=trapIncludedValue, esCCCombinedStatusBlock7=esCCCombinedStatusBlock7, acpmAvgCurrentVHighValue=acpmAvgCurrentVHighValue, genRunDuration=genRunDuration, espcHumidHighTrapnum=espcHumidHighTrapnum, esPointConfigTempEntry=esPointConfigTempEntry, espcAIVhighActions=espcAIVhighActions, bmJarHealthVLowTrapNum=bmJarHealthVLowTrapNum, acpmAvgCurrentVHighClass=acpmAvgCurrentVHighClass, fsVolumeEnable=fsVolumeEnable, acpmAvgCurrentEnable=acpmAvgCurrentEnable, fsTankDimA=fsTankDimA, bmTempSysrepLimit=bmTempSysrepLimit, bmDiffVoltHighActions=bmDiffVoltHighActions, evSched2Friday=evSched2Friday, acpmsCurrentPhaseAValueStr=acpmsCurrentPhaseAValueStr, trapInclude=trapInclude, bmDeviceType=bmDeviceType, actionHostTable=actionHostTable)
mibBuilder.exportSymbols("SITEBOSS-450-STD-MIB", sysTimeStampDateFormat=sysTimeStampDateFormat, espcAIIndexPoint=espcAIIndexPoint, espcAIHighValue=espcAIHighValue, rtsFilePushPort=rtsFilePushPort, acpmDisconnectActions=acpmDisconnectActions, s450UserTrap1082=s450UserTrap1082, acpmAvgVoltageNormalTrapNum=acpmAvgVoltageNormalTrapNum, bmVoltageSysrepThreshold=bmVoltageSysrepThreshold, emailServer=emailServer, secUserChallengeModemMode=secUserChallengeModemMode, secUserConnectVia=secUserConnectVia, eth2VLAN5Router=eth2VLAN5Router, s450UserTrap1091=s450UserTrap1091, evGlobalActions=evGlobalActions, rtsAlarmsPushHost=rtsAlarmsPushHost, bmDiffTempNormalTrapNum=bmDiffTempNormalTrapNum, genSetRelayRunningstate=genSetRelayRunningstate, scrDTRCtrlPortEnable=scrDTRCtrlPortEnable, eth1VLAN5SubnetMask=eth1VLAN5SubnetMask, acpmsRcPPhaseBValueStr=acpmsRcPPhaseBValueStr, s450UserTrap1192=s450UserTrap1192, bmsCombined=bmsCombined, acpmsRPPhaseAValueStr=acpmsRPPhaseAValueStr, bmChargingCurrentHighValue=bmChargingCurrentHighValue, bmTempHighClass=bmTempHighClass, eth2Router=eth2Router, evSched2Sunday=evSched2Sunday, acpmsAvgVoltageMinStr=acpmsAvgVoltageMinStr, eth1VLAN6ID=eth1VLAN6ID, eth1VLAN5Router=eth1VLAN5Router, acpmsAPPhaseCValueStr=acpmsAPPhaseCValueStr, acpmsTAPMaxStr=acpmsTAPMaxStr, espcAINormalClass=espcAINormalClass, s450UserTrap1198=s450UserTrap1198, espcHumidNormalTrapnum=espcHumidNormalTrapnum, dataEventStatus=dataEventStatus, acpmsTPFAvgStr=acpmsTPFAvgStr, fsGenIndex=fsGenIndex, esNewSensors=esNewSensors, acpmTRPEnable=acpmTRPEnable, esAnalogCombinedStatusBlock4=esAnalogCombinedStatusBlock4, fsDiscTrapNum=fsDiscTrapNum, sysTimeStamp=sysTimeStamp, evSched1Saturday=evSched1Saturday, bmJarHealthNormalTrapNum=bmJarHealthNormalTrapNum, trapIncludeSensorID=trapIncludeSensorID, wmsUpdated=wmsUpdated, acpmsAvgCurrentMinStr=acpmsAvgCurrentMinStr, evSched1Class=evSched1Class, bmTempLowActions=bmTempLowActions, acpmAvgCurrentLowTrapNum=acpmAvgCurrentLowTrapNum, bmVoltageIndex=bmVoltageIndex, deStatusIndex=deStatusIndex, evLogStoreSensor=evLogStoreSensor, acpmAvgCurrentNormalClass=acpmAvgCurrentNormalClass, ipRestrictionEntry=ipRestrictionEntry, bmVoltageVLowValue=bmVoltageVLowValue, evShskHighTable=evShskHighTable, acpmDisconnectTrapNum=acpmDisconnectTrapNum, rtsFileEmptyClose=rtsFileEmptyClose, s450UserTrap1180=s450UserTrap1180, fsVolumeVHighTrapNum=fsVolumeVHighTrapNum, snmpNtfnSnooze=snmpNtfnSnooze, rtsAlarmsShowAnswer=rtsAlarmsShowAnswer, bmChargingCurrentDeadband=bmChargingCurrentDeadband, sysTimeStampTimeFormat=sysTimeStampTimeFormat, s450UserTrap1074=s450UserTrap1074, espcTempVLowClass=espcTempVLowClass, fsTankIndex=fsTankIndex, bmDiffTempEntry=bmDiffTempEntry, ethernet=ethernet, bmDischargingCurrentNormalClass=bmDischargingCurrentNormalClass, calendar=calendar, s450FuelSensorVolumeSuddenChangeTrap=s450FuelSensorVolumeSuddenChangeTrap, bmGenEntry=bmGenEntry, espcCCNormalClass=espcCCNormalClass, ftpPushEnable=ftpPushEnable, s450ResetTrap=s450ResetTrap, auditLogEnable=auditLogEnable, secUserPPPType=secUserPPPType, fsVolumeLowClass=fsVolumeLowClass, s450ACPowerMonitorFrequencyTrap=s450ACPowerMonitorFrequencyTrap, bmsDiffTempEvent=bmsDiffTempEvent, bmGenIndex=bmGenIndex, espcTempIndexPoint=espcTempIndexPoint, acpmsTRcPMinStr=acpmsTRcPMinStr, s450UserTrap1106=s450UserTrap1106, eth2VLAN2=eth2VLAN2, evSched2TrapNum=evSched2TrapNum, esCCReportingMode=esCCReportingMode, s450UserTrap1148=s450UserTrap1148, esCCCombinedStatusBlock5=esCCCombinedStatusBlock5, fsSlowChangeTrapNum=fsSlowChangeTrapNum, acpmGenDevice=acpmGenDevice, fuelSensorSuddenChangeTable=fuelSensorSuddenChangeTable, sysLog=sysLog, esNumberHumidSensors=esNumberHumidSensors, s450UserTrap1050=s450UserTrap1050, secUserAuditReadAccess=secUserAuditReadAccess, esPointEntry=esPointEntry, bmJarHealthLowActions=bmJarHealthLowActions, s450UserTrap1142=s450UserTrap1142, espcAIHighTrapnum=espcAIHighTrapnum, trapEventTypeNumber=trapEventTypeNumber, fsDiscEnable=fsDiscEnable, schedRepeatYearlyFeb=schedRepeatYearlyFeb, fsStatusCombined=fsStatusCombined, ftpPushRemoteFileEntry=ftpPushRemoteFileEntry, fsVolumeVHighClass=fsVolumeVHighClass, acpmTPFIndex=acpmTPFIndex, bmTempLowTrapNum=bmTempLowTrapNum, s450UserTrap1012=s450UserTrap1012, fsSlowChangeAmplitude=fsSlowChangeAmplitude, evCore=evCore, acpmTPFLowTrapNum=acpmTPFLowTrapNum, acpmTotalRealPowerTable=acpmTotalRealPowerTable, espcTempScale=espcTempScale, ftpPushServer=ftpPushServer, schedRepeatFreq=schedRepeatFreq, s450UserTrap1040=s450UserTrap1040, eth2VLAN1Address=eth2VLAN1Address, bmJarHealthNormalActions=bmJarHealthNormalActions, eth1VLAN3Priority=eth1VLAN3Priority, acpmsTPFMinStr=acpmsTPFMinStr, interface=interface, auditLogStorePwdFailures=auditLogStorePwdFailures, s450UserTrap1022=s450UserTrap1022, portConfigEntry=portConfigEntry, evLogPrependName=evLogPrependName, s450UserTrap1101=s450UserTrap1101, s450UserTrap1153=s450UserTrap1153, eventSensorStatus=eventSensorStatus, esAnalogCombinedStatusBlock5=esAnalogCombinedStatusBlock5, s450UserTrap1092=s450UserTrap1092, genSetRelay=genSetRelay, bmsChargeLevelEvent=bmsChargeLevelEvent, s450StockImmediateTrap=s450StockImmediateTrap, scRTSLoginRequired=scRTSLoginRequired, espcHumidEnable=espcHumidEnable, acpmsTRPAvgStr=acpmsTRPAvgStr, espcTempHighTrapnum=espcTempHighTrapnum, hostTable=hostTable, acpmsAvgFreqAvgStr=acpmsAvgFreqAvgStr, evClassName=evClassName, acpmAvgVoltageVHighValue=acpmAvgVoltageVHighValue, espcTempHighTemp=espcTempHighTemp, fsSlowChangeIndex=fsSlowChangeIndex, bmDischargingCurrentVHighActions=bmDischargingCurrentVHighActions, sysCRDBFileIDTable=sysCRDBFileIDTable, acpmsRcPPhaseAValueStr=acpmsRcPPhaseAValueStr, bmVoltageEnable=bmVoltageEnable, scrNonVolatileInt=scrNonVolatileInt, s450UserTrap1076=s450UserTrap1076, espcAILowActions=espcAILowActions, bmDischargingCurrentNormalTrapNum=bmDischargingCurrentNormalTrapNum, evLogTimeStampAlarms=evLogTimeStampAlarms, acpmGenPowerType=acpmGenPowerType, schedRepeatYearlyOnThe=schedRepeatYearlyOnThe, portConfigStripPtInputLfs=portConfigStripPtInputLfs, portConfigMLRStartField1Text=portConfigMLRStartField1Text, esPointName=esPointName, scrVolatileStringEntry=scrVolatileStringEntry, s450UserTrap1075=s450UserTrap1075, s450GeneratorNonStartTrap=s450GeneratorNonStartTrap, espcCCEventActions=espcCCEventActions, sysFileTransferUsername=sysFileTransferUsername, bmjsIndexBM=bmjsIndexBM, s450UserTrap1114=s450UserTrap1114, s450UserTrap1007=s450UserTrap1007, s450UserTrap1173=s450UserTrap1173, s450UserTrap1183=s450UserTrap1183, acpmTPFNormalClass=acpmTPFNormalClass, s450BattMonStringChargingCurrentTrap=s450BattMonStringChargingCurrentTrap, wmsPLMNColor=wmsPLMNColor, bmVoltageHighTrapNum=bmVoltageHighTrapNum, wmsLAC=wmsLAC, acpmsAvgFreqValueStr=acpmsAvgFreqValueStr, bmsDiffVoltEvent=bmsDiffVoltEvent, evSched1Message=evSched1Message, fsSlowChangeEnable=fsSlowChangeEnable, auditLogStoreRelays=auditLogStoreRelays, snmpProxy=snmpProxy, eth2VLAN6Address=eth2VLAN6Address, evSched1Friday=evSched1Friday, s450UserTrap1121=s450UserTrap1121, webTimeout=webTimeout, espcTempLowTrapnum=espcTempLowTrapnum, fsStatusVolumeInEventState=fsStatusVolumeInEventState, auditLogStoreLogins=auditLogStoreLogins, time=time, fsStatusDeviceState=fsStatusDeviceState, fsGenSysrepEnable=fsGenSysrepEnable, s450UserTrap1199=s450UserTrap1199, batteryMonitorChargingCurrentTable=batteryMonitorChargingCurrentTable, eth2VLAN6=eth2VLAN6, acpmTRPVHighValue=acpmTRPVHighValue, bmChargeLevelNormalTrapNum=bmChargeLevelNormalTrapNum, s450UserTrap1014=s450UserTrap1014, s450BattMonStringJarHealthTrap=s450BattMonStringJarHealthTrap, scrGlobalEnable=scrGlobalEnable, evSched2Actions=evSched2Actions, keyInterface=keyInterface, fsVolumeNormalTrapNum=fsVolumeNormalTrapNum, evLogStoreAlarm=evLogStoreAlarm, ftpPushRemoteAlarmName=ftpPushRemoteAlarmName, acpmFreqVHighTrapNum=acpmFreqVHighTrapNum, evResetEnable=evResetEnable, espcCCIndexPoint=espcCCIndexPoint, s450UserTrap1197=s450UserTrap1197, acpmFreqVHighValue=acpmFreqVHighValue, s450UserTrap1116=s450UserTrap1116, s450UserTrap1129=s450UserTrap1129, schedRepeatMonthlyMode=schedRepeatMonthlyMode, batteryMonitorJarHealthTable=batteryMonitorJarHealthTable, s450UserTrap1053=s450UserTrap1053, snmpProxyOIDBranch=snmpProxyOIDBranch, bmsTempEvent=bmsTempEvent, s450UserTrap1055=s450UserTrap1055, sysFileTransferPassword=sysFileTransferPassword, scModemLoginRequired=scModemLoginRequired, acpmAvgCurrentLowClass=acpmAvgCurrentLowClass, s450UserTrap1193=s450UserTrap1193, espcAIVlowActions=espcAIVlowActions, bmDeviceIP=bmDeviceIP, s450UserTrap1168=s450UserTrap1168, espcTempLowClass=espcTempLowClass, snmpPRequestAgent=snmpPRequestAgent, ftpPushPassive=ftpPushPassive, fsCustomTankEntry=fsCustomTankEntry, acpmFreqIndex=acpmFreqIndex, s450UserTrap1130=s450UserTrap1130, acpmAvgCurrentHighTrapNum=acpmAvgCurrentHighTrapNum, evShskLowActions=evShskLowActions, s450FuelSensorVolumeSlowChangeTrap=s450FuelSensorVolumeSlowChangeTrap, auditLog=auditLog, bmsState=bmsState, espcHumidNormalActions=espcHumidNormalActions, bmsTempValueStr=bmsTempValueStr, bmChargingCurrentVHighValue=bmChargingCurrentVHighValue, fsVolumeNormalActions=fsVolumeNormalActions, espcAIConvLowUnit=espcAIConvLowUnit, s450UserTrap1009=s450UserTrap1009, fsGenInputPoint=fsGenInputPoint, bmsDiffVoltValue=bmsDiffVoltValue, secUserLoginTo=secUserLoginTo, s450UserTrap1019=s450UserTrap1019, acpmFreqSysrepLimit=acpmFreqSysrepLimit, acpmTotalPowerFactorTable=acpmTotalPowerFactorTable, evSched1Actions=evSched1Actions, sysPT=sysPT, genSetCCPoint=genSetCCPoint, esTempCombinedStatus=esTempCombinedStatus, espcHumidVHighHumid=espcHumidVHighHumid, bmJarHealthLowClass=bmJarHealthLowClass)
mibBuilder.exportSymbols("SITEBOSS-450-STD-MIB", sysTimeAutoDST=sysTimeAutoDST, schedRepeatWeeklyWed=schedRepeatWeeklyWed, evClassNameIndex=evClassNameIndex, rtsFileTable=rtsFileTable, fuelSensorTankTable=fuelSensorTankTable, eth1VLAN6=eth1VLAN6, bmDiffTempHighValue=bmDiffTempHighValue, s450UserTrap1115=s450UserTrap1115, sysLocAngle=sysLocAngle, acpmsTRPMaxStr=acpmsTRPMaxStr, esNumberTempSensors=esNumberTempSensors, sysCharMask=sysCharMask, snmpPRequestReadcom=snmpPRequestReadcom, acpmFreqLowActions=acpmFreqLowActions, eth1VLAN2SubnetMask=eth1VLAN2SubnetMask, s450UserTrap1195=s450UserTrap1195, bmsVoltageEvent=bmsVoltageEvent, snmpPRequestIndex=snmpPRequestIndex, fsGenSysrepPackage=fsGenSysrepPackage, s450UserTrap1141=s450UserTrap1141, s450UserTrap1079=s450UserTrap1079, snmpPRequestResultType=snmpPRequestResultType, bmJarHealthSysrepEnable=bmJarHealthSysrepEnable, s450UserTrap1171=s450UserTrap1171, s450UserTrap1099=s450UserTrap1099, trapTypeString=trapTypeString, eth1VLAN1Router=eth1VLAN1Router, acpmAvgCurrentDeadband=acpmAvgCurrentDeadband, genSetEnable=genSetEnable, s450UserTrap1158=s450UserTrap1158, portConfigTable=portConfigTable, sysLocAltitude=sysLocAltitude, rtsFileReqXON=rtsFileReqXON, sysLogFileSize=sysLogFileSize, eth1VLAN1SubnetMask=eth1VLAN1SubnetMask, eth2VLAN3Address=eth2VLAN3Address, acpmDisconnectClass=acpmDisconnectClass, acpmDisconnectNormalClass=acpmDisconnectNormalClass, esCCCombinedStatusBlock8=esCCCombinedStatusBlock8, bmChargingCurrentVHighClass=bmChargingCurrentVHighClass, schedTable=schedTable, acpmTPFEnable=acpmTPFEnable, secUserChallengeConsoleMode=secUserChallengeConsoleMode, s450UserTrap1135=s450UserTrap1135, bmDiffVoltSysrepLimit=bmDiffVoltSysrepLimit, s450UserTrap1058=s450UserTrap1058, wmsModemType=wmsModemType, acpmGenAddress=acpmGenAddress, espcAIVhighClass=espcAIVhighClass, acpmsAvgVoltageInEventState=acpmsAvgVoltageInEventState, fsSuddenChangeEntry=fsSuddenChangeEntry, auditLogStoreSHSK=auditLogStoreSHSK, scrVolatileStringIndex=scrVolatileStringIndex, fsSuddenChangeEnable=fsSuddenChangeEnable, bmGenName=bmGenName, evSched2Thursday=evSched2Thursday, s450StockHumidityTrap=s450StockHumidityTrap, portConfigMLREnable=portConfigMLREnable, batteryMonitor=batteryMonitor, s450UserTrap1036=s450UserTrap1036, fsGenRawValueTop=fsGenRawValueTop, sysPTTimeout=sysPTTimeout, bmDiffVoltVHighValue=bmDiffVoltVHighValue, rtsFilePushHost=rtsFilePushHost, acpmFreqVHighActions=acpmFreqVHighActions, trapEventTypeName=trapEventTypeName, espcCCName=espcCCName, portConfigDataType=portConfigDataType, fsGenFilterAveraging=fsGenFilterAveraging, acpmFreqEntry=acpmFreqEntry, s450UserTrap1136=s450UserTrap1136, genSetCCEs=genSetCCEs, s450UserTrap1020=s450UserTrap1020, siteName=siteName, s450UserTrap1150=s450UserTrap1150, s450StockScriptTrap=s450StockScriptTrap, s450UserTrap1105=s450UserTrap1105, fsSlowChangeActions=fsSlowChangeActions, s450UserTrap1145=s450UserTrap1145, eth2VLAN4Address=eth2VLAN4Address, portConfigMLRStartField2Pos=portConfigMLRStartField2Pos, acpmGenSysrepPackage=acpmGenSysrepPackage, s450UserTrap1061=s450UserTrap1061, esCCCombinedStatusBlock1=esCCCombinedStatusBlock1, espcAINormalActions=espcAINormalActions, s450UserTrap1030=s450UserTrap1030, eth1VLAN3=eth1VLAN3, rtsFileIndex=rtsFileIndex, eth1VLAN4Address=eth1VLAN4Address, fsGenSensorType=fsGenSensorType, acpmTRPIndex=acpmTRPIndex, acpmsTRcPMaxStr=acpmsTRcPMaxStr, espcAIIndexES=espcAIIndexES, snmp=snmp, acpmFreqDeadband=acpmFreqDeadband, acpmAvgVoltageSysrepLimit=acpmAvgVoltageSysrepLimit, bmTempLowClass=bmTempLowClass, fuelSensorStatus=fuelSensorStatus, bmDischargingCurrentVHighTrapNum=bmDischargingCurrentVHighTrapNum, evGlobalTrapnum=evGlobalTrapnum, evGlobal=evGlobal, bmDiffVoltVHighActions=bmDiffVoltVHighActions, s450UserTrap1088=s450UserTrap1088, sysLoghost=sysLoghost, acpmsPFPhaseBValueStr=acpmsPFPhaseBValueStr, esPointConfigTempTable=esPointConfigTempTable, espcTempNormalClass=espcTempNormalClass, eth1VLAN2Priority=eth1VLAN2Priority, ncpTimeout=ncpTimeout, acpmAvgCurrentVLowTrapNum=acpmAvgCurrentVLowTrapNum, acpmTRPVLowValue=acpmTRPVLowValue, bmChargingCurrentSysrepLimit=bmChargingCurrentSysrepLimit, s450UserTrap1107=s450UserTrap1107, bmJarHealthNormalClass=bmJarHealthNormalClass, acpmDisconnectEntry=acpmDisconnectEntry, eth2VLAN5ID=eth2VLAN5ID, espcHumidHighActions=espcHumidHighActions, deStatusName=deStatusName, fsSlowChangeEntry=fsSlowChangeEntry, espcAIVlowTrapnum=espcAIVlowTrapnum, batteryMonitorDeviceTable=batteryMonitorDeviceTable, bmJarHealthIndex=bmJarHealthIndex, espcAIConvLowSign=espcAIConvLowSign, s450UserTrap1027=s450UserTrap1027, sysLoc=sysLoc, sysBootStatus=sysBootStatus, actionHost=actionHost, portConfigDAEnable=portConfigDAEnable, fsDiscNormalTrapNum=fsDiscNormalTrapNum, eth1VLAN1Address=eth1VLAN1Address, eth2VLAN2Priority=eth2VLAN2Priority, genRunReqasm=genRunReqasm, rtsFileTimeout=rtsFileTimeout, sysFileTransferURL=sysFileTransferURL, bmDischargingCurrentSysrepThreshold=bmDischargingCurrentSysrepThreshold, s450BattMonStringDifferentialVoltageTrap=s450BattMonStringDifferentialVoltageTrap, evSched1Tuesday=evSched1Tuesday, bmDeviceReadcom=bmDeviceReadcom, s450UserTrap1044=s450UserTrap1044, genRunNonstartEventActions=genRunNonstartEventActions, acpmDisconnectIndex=acpmDisconnectIndex, bmGenEnable=bmGenEnable, console=console, fsGenEntry=fsGenEntry, fsDiscIndex=fsDiscIndex, bmsIndex=bmsIndex, evResetClass=evResetClass, schedIndex=schedIndex, fsDiscLowValue=fsDiscLowValue, s450UserTrap1060=s450UserTrap1060, acpmTPFVLowValue=acpmTPFVLowValue, bmsDiffTempValue=bmsDiffTempValue, acpmsTRPInEventState=acpmsTRPInEventState, rtsAlarmsTimeout=rtsAlarmsTimeout, acpmDisconnectNormalTrapNum=acpmDisconnectNormalTrapNum, s450UserTrap1166=s450UserTrap1166, bmDischargingCurrentEntry=bmDischargingCurrentEntry, bmTempNormalTrapNum=bmTempNormalTrapNum, s450UserTrap1062=s450UserTrap1062, s450UserTrap1133=s450UserTrap1133, acpmAvgVoltageDeadband=acpmAvgVoltageDeadband, acpmsAvgVoltageMaxStr=acpmsAvgVoltageMaxStr, ftpPushPushFile=ftpPushPushFile, bmDiffTempHighActions=bmDiffTempHighActions, sysTimeNetEnable=sysTimeNetEnable, ftpPushPushAlarms=ftpPushPushAlarms, genSetCCEnable=genSetCCEnable, espcHumidVLowHumid=espcHumidVLowHumid, eth2VLAN3ID=eth2VLAN3ID, bmTempDeadband=bmTempDeadband, bmTempNormalClass=bmTempNormalClass, acpmsVoltagePhaseBValueStr=acpmsVoltagePhaseBValueStr, s450UserTrap1015=s450UserTrap1015, acpmFreqEnable=acpmFreqEnable, sys=sys, bmTempHighActions=bmTempHighActions, espcHumidVLowTrapnum=espcHumidVLowTrapnum, auditLogStorePolling=auditLogStorePolling, s450UserTrap1001=s450UserTrap1001, wmsBand=wmsBand, bmDiffVoltNormalTrapNum=bmDiffVoltNormalTrapNum, secUserExpiration=secUserExpiration, eth1VLAN1=eth1VLAN1, secUserCallbackNumber1=secUserCallbackNumber1, wmsPhnum=wmsPhnum, bmjsIndexJar=bmjsIndexJar, trapIncludedString=trapIncludedString, esRelayReportingMode=esRelayReportingMode, sysPrompt=sysPrompt, acpmFreqVLowValue=acpmFreqVLowValue, s450UserTrap1047=s450UserTrap1047, schedRepeatYearlyNov=schedRepeatYearlyNov, actionEmailIndex=actionEmailIndex, s450StockAnalogTrap=s450StockAnalogTrap, sysLocYOffset=sysLocYOffset, ftpPushAccount=ftpPushAccount, fsVolumeEntry=fsVolumeEntry, esEntry=esEntry, fsSuddenChangeTime=fsSuddenChangeTime, rtsFilePushRetryTimer=rtsFilePushRetryTimer, bmDischargingCurrentNormalActions=bmDischargingCurrentNormalActions, sysCRDBFileEnforceMin=sysCRDBFileEnforceMin, bmChargeLevelSysrepEnable=bmChargeLevelSysrepEnable, s450UserTrap1126=s450UserTrap1126, s450UserTrap1034=s450UserTrap1034, s450BattMonStringChargeLevelTrap=s450BattMonStringChargeLevelTrap, fsVolumeVLowClass=fsVolumeVLowClass, scrFilename=scrFilename, s450UserTrap1172=s450UserTrap1172, hostIndex=hostIndex, s450UserTrap1175=s450UserTrap1175, evShskLowMessage=evShskLowMessage, sysCRDBFileID=sysCRDBFileID, wmsLocalIP=wmsLocalIP, secUserCallbackNumber3=secUserCallbackNumber3, bmDiffVoltHighClass=bmDiffVoltHighClass, bmTempNormalActions=bmTempNormalActions, sysCRDBFileEnforceMinTable=sysCRDBFileEnforceMinTable, ftpPushIncludeDate=ftpPushIncludeDate, s450UserTrap1187=s450UserTrap1187, evNoSensorTrapNum=evNoSensorTrapNum)
