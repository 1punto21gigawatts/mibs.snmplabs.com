#
# PySNMP MIB module Nortel-Magellan-Passport-MgmtInterfacesMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-MgmtInterfacesMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:27:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
DisplayString, RowPointer, RowStatus, Integer32, Unsigned32, StorageType = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "RowPointer", "RowStatus", "Integer32", "Unsigned32", "StorageType")
NonReplicated, AsciiString, AsciiStringIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "AsciiString", "AsciiStringIndex")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, ModuleIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Gauge32, ObjectIdentity, Unsigned32, MibIdentifier, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "ModuleIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Gauge32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "TimeTicks", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mgmtInterfacesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15))
nmis = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17))
nmisRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 1), )
if mibBuilder.loadTexts: nmisRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisRowStatusTable.setDescription('This entry controls the addition and deletion of nmis components.')
nmisRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"))
if mibBuilder.loadTexts: nmisRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisRowStatusEntry.setDescription('A single entry in the table represents a single nmis component.')
nmisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmis components. These components cannot be added nor deleted.')
nmisComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisStorageType.setDescription('This variable represents the storage type value for the nmis tables.')
nmisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: nmisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisIndex.setDescription('This variable represents the index for the nmis tables.')
nmisLocal = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2))
nmisLocalRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 1), )
if mibBuilder.loadTexts: nmisLocalRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalRowStatusTable.setDescription('This entry controls the addition and deletion of nmisLocal components.')
nmisLocalRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisLocalIndex"))
if mibBuilder.loadTexts: nmisLocalRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalRowStatusEntry.setDescription('A single entry in the table represents a single nmisLocal component.')
nmisLocalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisLocal components. These components cannot be added nor deleted.')
nmisLocalComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisLocalStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalStorageType.setDescription('This variable represents the storage type value for the nmisLocal tables.')
nmisLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: nmisLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalIndex.setDescription('This variable represents the index for the nmisLocal tables.')
nmisLocalStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 10), )
if mibBuilder.loadTexts: nmisLocalStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
nmisLocalStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisLocalIndex"))
if mibBuilder.loadTexts: nmisLocalStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalStateEntry.setDescription('An entry in the nmisLocalStateTable.')
nmisLocalAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
nmisLocalOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
nmisLocalUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
nmisLocalOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 11), )
if mibBuilder.loadTexts: nmisLocalOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalOperTable.setDescription('This group contains the operational attributes for an NMIS manager. This group is common to all NMIS managers.')
nmisLocalOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisLocalIndex"))
if mibBuilder.loadTexts: nmisLocalOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalOperEntry.setDescription('An entry in the nmisLocalOperTable.')
nmisLocalMaxAllowedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalMaxAllowedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalMaxAllowedSessions.setDescription('This attribute indicates the maximum number of simultaneous sessions the manager will allow.')
nmisLocalActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalActiveSessions.setDescription('This attribute indicates the number of simultaneous sessions currently active under the manager. Note that there may be fewer Session components than what is shown here, since an active session could be in the midst of logging in and may not yet be fully up.')
nmisLocalSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2))
nmisLocalSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 1), )
if mibBuilder.loadTexts: nmisLocalSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionRowStatusTable.setDescription('This entry controls the addition and deletion of nmisLocalSession components.')
nmisLocalSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisLocalIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisLocalSessionIndex"))
if mibBuilder.loadTexts: nmisLocalSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionRowStatusEntry.setDescription('A single entry in the table represents a single nmisLocalSession component.')
nmisLocalSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisLocalSession components. These components cannot be added nor deleted.')
nmisLocalSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisLocalSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionStorageType.setDescription('This variable represents the storage type value for the nmisLocalSession tables.')
nmisLocalSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: nmisLocalSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionIndex.setDescription('This variable represents the index for the nmisLocalSession tables.')
nmisLocalSessionOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 10), )
if mibBuilder.loadTexts: nmisLocalSessionOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionOperTable.setDescription('This group contains the operational attributes for a Local session.')
nmisLocalSessionOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisLocalIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisLocalSessionIndex"))
if mibBuilder.loadTexts: nmisLocalSessionOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionOperEntry.setDescription('An entry in the nmisLocalSessionOperTable.')
nmisLocalSessionUserid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalSessionUserid.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionUserid.setDescription('This attribute indicates the Userid logged in to the Session.')
nmisLocalSessionDataStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmisLocalSessionDataStreams.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionDataStreams.setDescription('This attribute indicates which data streams will be transmitted back to the operator through this session. Only a userid with a command impact of system administration may register for logs. Description of bits: notused0(0) alarm(1) log(2) debug(3) scn(4)')
nmisLocalSessionHostCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 10, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisLocalSessionHostCard.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionHostCard.setDescription('This attribute holds the component name of the host control processor Card servicing the local operator session.')
nmisLocalSessionScreenWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 2, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(79, 2000)).clone(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmisLocalSessionScreenWidth.setStatus('mandatory')
if mibBuilder.loadTexts: nmisLocalSessionScreenWidth.setDescription('This attribute indicates the maximum width (in characters) of operator command responses. Beyond this maximum, responses are either truncated or wrapped onto the next line, as appropriate. Asynchronous responses, such as alarms, are always displayed using a 79 character width.')
nmisTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3))
nmisTelnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 1), )
if mibBuilder.loadTexts: nmisTelnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetRowStatusTable.setDescription('This entry controls the addition and deletion of nmisTelnet components.')
nmisTelnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetIndex"))
if mibBuilder.loadTexts: nmisTelnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetRowStatusEntry.setDescription('A single entry in the table represents a single nmisTelnet component.')
nmisTelnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisTelnet components. These components cannot be added nor deleted.')
nmisTelnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisTelnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetStorageType.setDescription('This variable represents the storage type value for the nmisTelnet tables.')
nmisTelnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: nmisTelnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetIndex.setDescription('This variable represents the index for the nmisTelnet tables.')
nmisTelnetStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 10), )
if mibBuilder.loadTexts: nmisTelnetStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
nmisTelnetStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetIndex"))
if mibBuilder.loadTexts: nmisTelnetStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetStateEntry.setDescription('An entry in the nmisTelnetStateTable.')
nmisTelnetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
nmisTelnetOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
nmisTelnetUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
nmisTelnetOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 11), )
if mibBuilder.loadTexts: nmisTelnetOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetOperTable.setDescription('This group contains the operational attributes for an NMIS manager. This group is common to all NMIS managers.')
nmisTelnetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetIndex"))
if mibBuilder.loadTexts: nmisTelnetOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetOperEntry.setDescription('An entry in the nmisTelnetOperTable.')
nmisTelnetMaxAllowedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetMaxAllowedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetMaxAllowedSessions.setDescription('This attribute indicates the maximum number of simultaneous sessions the manager will allow.')
nmisTelnetActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetActiveSessions.setDescription('This attribute indicates the number of simultaneous sessions currently active under the manager. Note that there may be fewer Session components than what is shown here, since an active session could be in the midst of logging in and may not yet be fully up.')
nmisTelnetSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2))
nmisTelnetSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 1), )
if mibBuilder.loadTexts: nmisTelnetSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionRowStatusTable.setDescription('This entry controls the addition and deletion of nmisTelnetSession components.')
nmisTelnetSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetSessionIndex"))
if mibBuilder.loadTexts: nmisTelnetSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionRowStatusEntry.setDescription('A single entry in the table represents a single nmisTelnetSession component.')
nmisTelnetSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisTelnetSession components. These components cannot be added nor deleted.')
nmisTelnetSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisTelnetSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionStorageType.setDescription('This variable represents the storage type value for the nmisTelnetSession tables.')
nmisTelnetSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: nmisTelnetSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionIndex.setDescription('This variable represents the index for the nmisTelnetSession tables.')
nmisTelnetSessionOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 10), )
if mibBuilder.loadTexts: nmisTelnetSessionOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionOperTable.setDescription('This group contains the operational attributes for a Telnet session.')
nmisTelnetSessionOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetSessionIndex"))
if mibBuilder.loadTexts: nmisTelnetSessionOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionOperEntry.setDescription('An entry in the nmisTelnetSessionOperTable.')
nmisTelnetSessionUserid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionUserid.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionUserid.setDescription('This attribute indicates the userid logged in to the session.')
nmisTelnetSessionDataStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmisTelnetSessionDataStreams.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionDataStreams.setDescription('This attribute indicates which data streams (alarm, debug, log, scn) will be transmitted back to the operator through this session. Only a userid with a command impact of system administration may register for logs. When a client connection is up through this interface, all of the values are turned off. This means that this data is discarded when the session has a Telnet client connection set up. When the client connection terminates, the data which was being received prior to the client being set up is requested again. Description of bits: notused0(0) alarm(1) log(2) debug(3) scn(4)')
nmisTelnetSessionRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionRemoteIpAddr.setDescription('This attribute indicates the IP address of the remote device connected to the session.')
nmisTelnetSessionRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionRemoteTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionRemoteTcpPort.setDescription('This attribute indicates the TCP port number of the Telnet client being used on the remote device connected to the session.')
nmisTelnetSessionScreenWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(79, 2000)).clone(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmisTelnetSessionScreenWidth.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionScreenWidth.setDescription('This attribute indicates the maximum width (in characters) of operator command responses. Beyond this maximum, responses are either truncated or wrapped onto the next line, as appropriate. Asynchronous responses, such as alarms, are always displayed using a 79 character width.')
nmisTelnetSessionClient = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2))
nmisTelnetSessionClientRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 1), )
if mibBuilder.loadTexts: nmisTelnetSessionClientRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientRowStatusTable.setDescription('This entry controls the addition and deletion of nmisTelnetSessionClient components.')
nmisTelnetSessionClientRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetSessionIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetSessionClientIndex"))
if mibBuilder.loadTexts: nmisTelnetSessionClientRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientRowStatusEntry.setDescription('A single entry in the table represents a single nmisTelnetSessionClient component.')
nmisTelnetSessionClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionClientRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisTelnetSessionClient components. These components cannot be added nor deleted.')
nmisTelnetSessionClientComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionClientComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisTelnetSessionClientStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionClientStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientStorageType.setDescription('This variable represents the storage type value for the nmisTelnetSessionClient tables.')
nmisTelnetSessionClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: nmisTelnetSessionClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientIndex.setDescription('This variable represents the index for the nmisTelnetSessionClient tables.')
nmisTelnetSessionClientOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 10), )
if mibBuilder.loadTexts: nmisTelnetSessionClientOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientOperTable.setDescription('This group contains the operational attributes for a Telnet client.')
nmisTelnetSessionClientOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetSessionIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisTelnetSessionClientIndex"))
if mibBuilder.loadTexts: nmisTelnetSessionClientOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientOperEntry.setDescription('An entry in the nmisTelnetSessionClientOperTable.')
nmisTelnetSessionClientVirtualRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionClientVirtualRouter.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientVirtualRouter.setDescription('This attribute indicates the VR instance that determines which address space the remoteIpAddr belongs to.')
nmisTelnetSessionClientRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionClientRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientRemoteIpAddr.setDescription('This attribute indicates the IP address of the remote side of the client connection.')
nmisTelnetSessionClientRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 3, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisTelnetSessionClientRemoteTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: nmisTelnetSessionClientRemoteTcpPort.setDescription('This attribute indicates the TCP port number of the remote side of the client connection.')
nmisFmip = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4))
nmisFmipRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 1), )
if mibBuilder.loadTexts: nmisFmipRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipRowStatusTable.setDescription('This entry controls the addition and deletion of nmisFmip components.')
nmisFmipRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFmipIndex"))
if mibBuilder.loadTexts: nmisFmipRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipRowStatusEntry.setDescription('A single entry in the table represents a single nmisFmip component.')
nmisFmipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisFmip components. These components cannot be added nor deleted.')
nmisFmipComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisFmipStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipStorageType.setDescription('This variable represents the storage type value for the nmisFmip tables.')
nmisFmipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: nmisFmipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipIndex.setDescription('This variable represents the index for the nmisFmip tables.')
nmisFmipStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 10), )
if mibBuilder.loadTexts: nmisFmipStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
nmisFmipStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFmipIndex"))
if mibBuilder.loadTexts: nmisFmipStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipStateEntry.setDescription('An entry in the nmisFmipStateTable.')
nmisFmipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
nmisFmipOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
nmisFmipUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
nmisFmipOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 11), )
if mibBuilder.loadTexts: nmisFmipOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipOperTable.setDescription('This group contains the operational attributes for an NMIS manager. This group is common to all NMIS managers.')
nmisFmipOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFmipIndex"))
if mibBuilder.loadTexts: nmisFmipOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipOperEntry.setDescription('An entry in the nmisFmipOperTable.')
nmisFmipMaxAllowedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipMaxAllowedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipMaxAllowedSessions.setDescription('This attribute indicates the maximum number of simultaneous sessions the manager will allow.')
nmisFmipActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipActiveSessions.setDescription('This attribute indicates the number of simultaneous sessions currently active under the manager. Note that there may be fewer Session components than what is shown here, since an active session could be in the midst of logging in and may not yet be fully up.')
nmisFmipSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2))
nmisFmipSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 1), )
if mibBuilder.loadTexts: nmisFmipSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionRowStatusTable.setDescription('This entry controls the addition and deletion of nmisFmipSession components.')
nmisFmipSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFmipIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFmipSessionIndex"))
if mibBuilder.loadTexts: nmisFmipSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionRowStatusEntry.setDescription('A single entry in the table represents a single nmisFmipSession component.')
nmisFmipSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisFmipSession components. These components cannot be added nor deleted.')
nmisFmipSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisFmipSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionStorageType.setDescription('This variable represents the storage type value for the nmisFmipSession tables.')
nmisFmipSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 35)))
if mibBuilder.loadTexts: nmisFmipSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionIndex.setDescription('This variable represents the index for the nmisFmipSession tables.')
nmisFmipSessionOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 10), )
if mibBuilder.loadTexts: nmisFmipSessionOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionOperTable.setDescription('This group contains the operational attributes for an FMIP session.')
nmisFmipSessionOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFmipIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFmipSessionIndex"))
if mibBuilder.loadTexts: nmisFmipSessionOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionOperEntry.setDescription('An entry in the nmisFmipSessionOperTable.')
nmisFmipSessionUserid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipSessionUserid.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionUserid.setDescription('This attribute indicates the userid logged in to the session.')
nmisFmipSessionDataStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmisFmipSessionDataStreams.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionDataStreams.setDescription('This attribute indicates which data streams will be transmitted back to the operator through this session. Only a userid with a command impact of system administration may register for logs. Description of bits: notused0(0) alarm(1) log(2) debug(3) scn(4)')
nmisFmipSessionRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipSessionRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionRemoteIpAddr.setDescription('This attribute indicates the IP address of the remote device connected to the session.')
nmisFmipSessionRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFmipSessionRemoteTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionRemoteTcpPort.setDescription('This attribute indicates the TCP port number of the FMIP client being used on the remote device connected to the session.')
nmisFmipSessionScreenWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 4, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(79, 2000)).clone(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmisFmipSessionScreenWidth.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFmipSessionScreenWidth.setDescription('This attribute indicates the maximum width (in characters) of operator command responses. Beyond this maximum, responses are either truncated or wrapped onto the next line, as appropriate. Asynchronous responses, such as alarms, are always displayed using a 79 character width.')
nmisFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5))
nmisFtpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 1), )
if mibBuilder.loadTexts: nmisFtpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpRowStatusTable.setDescription('This entry controls the addition and deletion of nmisFtp components.')
nmisFtpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFtpIndex"))
if mibBuilder.loadTexts: nmisFtpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpRowStatusEntry.setDescription('A single entry in the table represents a single nmisFtp component.')
nmisFtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisFtp components. These components cannot be added nor deleted.')
nmisFtpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisFtpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpStorageType.setDescription('This variable represents the storage type value for the nmisFtp tables.')
nmisFtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: nmisFtpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpIndex.setDescription('This variable represents the index for the nmisFtp tables.')
nmisFtpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 10), )
if mibBuilder.loadTexts: nmisFtpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
nmisFtpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFtpIndex"))
if mibBuilder.loadTexts: nmisFtpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpStateEntry.setDescription('An entry in the nmisFtpStateTable.')
nmisFtpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
nmisFtpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
nmisFtpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
nmisFtpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 11), )
if mibBuilder.loadTexts: nmisFtpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpOperTable.setDescription('This group contains the operational attributes for an NMIS manager. This group is common to all NMIS managers.')
nmisFtpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFtpIndex"))
if mibBuilder.loadTexts: nmisFtpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpOperEntry.setDescription('An entry in the nmisFtpOperTable.')
nmisFtpMaxAllowedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpMaxAllowedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpMaxAllowedSessions.setDescription('This attribute indicates the maximum number of simultaneous sessions the manager will allow.')
nmisFtpActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpActiveSessions.setDescription('This attribute indicates the number of simultaneous sessions currently active under the manager. Note that there may be fewer Session components than what is shown here, since an active session could be in the midst of logging in and may not yet be fully up.')
nmisFtpSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2))
nmisFtpSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 1), )
if mibBuilder.loadTexts: nmisFtpSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionRowStatusTable.setDescription('This entry controls the addition and deletion of nmisFtpSession components.')
nmisFtpSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFtpIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFtpSessionIndex"))
if mibBuilder.loadTexts: nmisFtpSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionRowStatusEntry.setDescription('A single entry in the table represents a single nmisFtpSession component.')
nmisFtpSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of nmisFtpSession components. These components cannot be added nor deleted.')
nmisFtpSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
nmisFtpSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionStorageType.setDescription('This variable represents the storage type value for the nmisFtpSession tables.')
nmisFtpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: nmisFtpSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionIndex.setDescription('This variable represents the index for the nmisFtpSession tables.')
nmisFtpSessionOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 10), )
if mibBuilder.loadTexts: nmisFtpSessionOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionOperTable.setDescription('This group contains the operational attributes for an FTP session.')
nmisFtpSessionOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFtpIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "nmisFtpSessionIndex"))
if mibBuilder.loadTexts: nmisFtpSessionOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionOperEntry.setDescription('An entry in the nmisFtpSessionOperTable.')
nmisFtpSessionUserid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpSessionUserid.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionUserid.setDescription('This attribute indicates the userid logged in to the session.')
nmisFtpSessionRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpSessionRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionRemoteIpAddr.setDescription('This attribute indicates the IP address of the remote device connected to the session.')
nmisFtpSessionRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 17, 5, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmisFtpSessionRemoteTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: nmisFtpSessionRemoteTcpPort.setDescription('This attribute indicates the TCP port number of the FTP control connection being used on the remote device connected to the session.')
ac = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18))
acRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 1), )
if mibBuilder.loadTexts: acRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: acRowStatusTable.setDescription('This entry controls the addition and deletion of ac components.')
acRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acIndex"))
if mibBuilder.loadTexts: acRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acRowStatusEntry.setDescription('A single entry in the table represents a single ac component.')
acRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acRowStatus.setDescription('This variable is used as the basis for SNMP naming of ac components. These components can be added.')
acComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: acComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
acStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: acStorageType.setDescription('This variable represents the storage type value for the ac tables.')
acIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: acIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acIndex.setDescription('This variable represents the index for the ac tables.')
acProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 10), )
if mibBuilder.loadTexts: acProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: acProvTable.setDescription('This group contains the provisionable attributes which apply to the overall access of the the node.')
acProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acIndex"))
if mibBuilder.loadTexts: acProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acProvEntry.setDescription('An entry in the acProvTable.')
acPublicKeyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPublicKeyAuth.setStatus('mandatory')
if mibBuilder.loadTexts: acPublicKeyAuth.setDescription('This attribute indicates whether Telnet sessions require a public key exchange in order to log in to the node. FMIP sessions always require a public key exchange for login authentication. Description of bits: telnet(0)')
acUserid = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2))
acUseridRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 1), )
if mibBuilder.loadTexts: acUseridRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridRowStatusTable.setDescription('This entry controls the addition and deletion of acUserid components.')
acUseridRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acUseridIndex"))
if mibBuilder.loadTexts: acUseridRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridRowStatusEntry.setDescription('A single entry in the table represents a single acUserid component.')
acUseridRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acUseridRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridRowStatus.setDescription('This variable is used as the basis for SNMP naming of acUserid components. These components can be added and deleted.')
acUseridComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acUseridComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
acUseridStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acUseridStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridStorageType.setDescription('This variable represents the storage type value for the acUserid tables.')
acUseridIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: acUseridIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridIndex.setDescription('This variable represents the index for the acUserid tables.')
acUseridProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10), )
if mibBuilder.loadTexts: acUseridProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridProvTable.setDescription('This group contains the provisionable attributes for a userid.')
acUseridProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acUseridIndex"))
if mibBuilder.loadTexts: acUseridProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridProvEntry.setDescription('An entry in the acUseridProvTable.')
acUseridPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: acUseridPassword.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridPassword.setDescription('This attribute holds the password for the userid. This is a write-only attribute to provide additional security for passwords. The password string consists of 5-8 characters, which may be any printable ASCII characters. If the password string includes any non-alphanumeric character, such as $ or *, the entire string must be enclosed in double quotes. Letters in the password string are case-sensitive.')
acUseridCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acUseridCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridCustomerIdentifier.setDescription('This attribute indicates the Customer Identifier (CID) assigned to the userid. The CID is used in Customer Network Management (CNM). A CNM operator may only send commands to components provisioned with the same CID as the operator. A CNM operator will only receive event data, such as alarms, which is generated by components provisioned with the same CID as the operator. The special CID of 0 is reserved for the network owner, known as the Netman. The Passport CID attribute is compatible with DPN-100 Netman and Basic CIDs.')
acUseridCommandScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("network", 1), ("device", 2), ("application", 3))).clone('application')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acUseridCommandScope.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridCommandScope.setDescription('This attribute indicates the command scope assigned to the userid. The scope determines the importance of the components on which the userid will be allowed to execute commands. Scope has three levels: 1) Network scope implies the userid can manage components that affect the operation of the entire network, such as trunks. 2) Device scope implies the userid can manage components that affect the operation of the entire Passport module, such as processors or the file system. 3) Application scope implies the userid can manage components that affect the operation of a single application. Note that scope is hierarchical: A userid provisioned with network scope can also manage components with a scope of device or application.')
acUseridCommandImpact = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("debug", 3), ("systemAdministration", 4), ("configuration", 5), ("service", 6), ("passive", 7))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acUseridCommandImpact.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridCommandImpact.setDescription('This attribute indicates the command impact assigned to the userid. The impact determines the importance of the commands which the userid will be allowed to execute. Impact has five levels: 1) Debug impact implies the userid can issue all debugging commands. Debug is the highest impact level. 2) System Administration impact implies the userid can issue provisioning commands on security components. This means the userid can Add, Delete, Display, or Set the Userid and IpAccess subcomponents of AccessControl. 3) Configuration impact implies the userid can issue provisioning commands to alter the provisioned configuration of the Passport module, such as Start Prov, Add, Delete, and Set. 4) Service impact implies the userid can issue operational commands which may affect the service of running components, such as Lock and Unlock. 5) Passive impact implies the userid can only issue query commands which display unrestricted information but otherwise do not affect the operation or configuration of the Passport module. Commands such as List and Display. Passive is the lowest impact level. Note that impact is hierarchical: A userid provisioned with debug impact can also issue all other commands at lower impact levels.')
acUseridAllowedAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acUseridAllowedAccess.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridAllowedAccess.setDescription('This attribute indicates the set of network management interfaces through which the userid will be allowed incoming access to the Passport. The allowedAccess attribute can be used to restrict a userid to a desired subset of the network management interfaces provided. Description of bits: local(0) telnet(1) fmip(2) ftp(3)')
acUseridLoginDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone(hexValue="2f")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acUseridLoginDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridLoginDirectory.setDescription("This attribute is the login directory for file system commands or FTP commands. The userid will initially be placed in this directory upon logging in to Telnet, FMIP, Local or FTP. The default value of '/' is the root of the /sfs/ shadowed file system.")
acUseridAllowedOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 2, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acUseridAllowedOutAccess.setStatus('mandatory')
if mibBuilder.loadTexts: acUseridAllowedOutAccess.setDescription('This attribute indicates whether or not the userid will be allowed outgoing Telnet access from the Passport. Description of bits: telnet(0)')
acIpAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3))
acIpAccessRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 1), )
if mibBuilder.loadTexts: acIpAccessRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessRowStatusTable.setDescription('This entry controls the addition and deletion of acIpAccess components.')
acIpAccessRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acIpAccessIndex"))
if mibBuilder.loadTexts: acIpAccessRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessRowStatusEntry.setDescription('A single entry in the table represents a single acIpAccess component.')
acIpAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIpAccessRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessRowStatus.setDescription('This variable is used as the basis for SNMP naming of acIpAccess components. These components can be added and deleted.')
acIpAccessComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIpAccessComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
acIpAccessStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIpAccessStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessStorageType.setDescription('This variable represents the storage type value for the acIpAccess tables.')
acIpAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 1, 1, 10), IpAddress())
if mibBuilder.loadTexts: acIpAccessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessIndex.setDescription('This variable represents the index for the acIpAccess tables.')
acIpAccessProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 10), )
if mibBuilder.loadTexts: acIpAccessProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessProvTable.setDescription('This group contains the provisionable attributes for an IpAccess component.')
acIpAccessProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acIndex"), (0, "Nortel-Magellan-Passport-MgmtInterfacesMIB", "acIpAccessIndex"))
if mibBuilder.loadTexts: acIpAccessProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessProvEntry.setDescription('An entry in the acIpAccessProvTable.')
acIpAccessIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 18, 3, 10, 1, 1), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIpAccessIpAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: acIpAccessIpAddressMask.setDescription("This attribute indicates the bit mask indicating the significant bits which are used in the comparison of an incoming IP address against the 'friendly' IP address in the instance value of the IpAccess component. This bit mask is ANDed to the incoming IP address, and ANDed to the instance value, before the comparison. An IP subnetwork address, in combination with this bit mask attribute, may be provisioned to include an entire IP subnetwork into the friendly IP address list with a single IpAccess component.")
mgmtInterfacesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15, 1))
mgmtInterfacesGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15, 1, 5))
mgmtInterfacesGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15, 1, 5, 2))
mgmtInterfacesGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15, 1, 5, 2, 2))
mgmtInterfacesCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15, 3))
mgmtInterfacesCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15, 3, 5))
mgmtInterfacesCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15, 3, 5, 2))
mgmtInterfacesCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 15, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-MgmtInterfacesMIB", nmisFmipAdminState=nmisFmipAdminState, nmisLocalSessionHostCard=nmisLocalSessionHostCard, nmisLocalStateEntry=nmisLocalStateEntry, nmisTelnetSessionRowStatusEntry=nmisTelnetSessionRowStatusEntry, mgmtInterfacesCapabilitiesBE01A=mgmtInterfacesCapabilitiesBE01A, nmisTelnetSessionRemoteIpAddr=nmisTelnetSessionRemoteIpAddr, nmisTelnetMaxAllowedSessions=nmisTelnetMaxAllowedSessions, nmisFmip=nmisFmip, nmisFtpSession=nmisFtpSession, mgmtInterfacesGroup=mgmtInterfacesGroup, nmisTelnetAdminState=nmisTelnetAdminState, nmisFmipSessionRowStatus=nmisFmipSessionRowStatus, nmisLocal=nmisLocal, acIpAccessIpAddressMask=acIpAccessIpAddressMask, acUseridRowStatus=acUseridRowStatus, nmisFtpOperTable=nmisFtpOperTable, nmisLocalSessionStorageType=nmisLocalSessionStorageType, nmisLocalSessionScreenWidth=nmisLocalSessionScreenWidth, nmisTelnetOperTable=nmisTelnetOperTable, nmisFmipOperationalState=nmisFmipOperationalState, nmisFmipMaxAllowedSessions=nmisFmipMaxAllowedSessions, nmisFtpSessionIndex=nmisFtpSessionIndex, nmisFtpStateEntry=nmisFtpStateEntry, acIpAccessRowStatusTable=acIpAccessRowStatusTable, nmisFmipStorageType=nmisFmipStorageType, acIpAccessStorageType=acIpAccessStorageType, nmisLocalRowStatusTable=nmisLocalRowStatusTable, acComponentName=acComponentName, mgmtInterfacesMIB=mgmtInterfacesMIB, nmisFmipSessionOperTable=nmisFmipSessionOperTable, mgmtInterfacesCapabilities=mgmtInterfacesCapabilities, acIpAccessComponentName=acIpAccessComponentName, nmisTelnetSessionClient=nmisTelnetSessionClient, acRowStatusTable=acRowStatusTable, nmisLocalSessionDataStreams=nmisLocalSessionDataStreams, acUseridRowStatusTable=acUseridRowStatusTable, nmisLocalIndex=nmisLocalIndex, acIndex=acIndex, mgmtInterfacesGroupBE01=mgmtInterfacesGroupBE01, nmisLocalSessionOperEntry=nmisLocalSessionOperEntry, nmisFmipSessionRowStatusEntry=nmisFmipSessionRowStatusEntry, acUseridLoginDirectory=acUseridLoginDirectory, nmisLocalUsageState=nmisLocalUsageState, acIpAccessProvTable=acIpAccessProvTable, nmisTelnetSessionDataStreams=nmisTelnetSessionDataStreams, nmisLocalMaxAllowedSessions=nmisLocalMaxAllowedSessions, nmisTelnetSessionClientStorageType=nmisTelnetSessionClientStorageType, nmisLocalStateTable=nmisLocalStateTable, nmisFmipIndex=nmisFmipIndex, acUseridPassword=acUseridPassword, nmisFtpSessionStorageType=nmisFtpSessionStorageType, nmisLocalAdminState=nmisLocalAdminState, nmisLocalSession=nmisLocalSession, nmisTelnetRowStatusEntry=nmisTelnetRowStatusEntry, acUseridProvTable=acUseridProvTable, nmisTelnetStateTable=nmisTelnetStateTable, acUseridAllowedAccess=acUseridAllowedAccess, acUseridCustomerIdentifier=acUseridCustomerIdentifier, nmisFmipStateTable=nmisFmipStateTable, acIpAccess=acIpAccess, nmisFmipSessionUserid=nmisFmipSessionUserid, acPublicKeyAuth=acPublicKeyAuth, nmisLocalSessionRowStatusEntry=nmisLocalSessionRowStatusEntry, nmisLocalComponentName=nmisLocalComponentName, nmisLocalSessionOperTable=nmisLocalSessionOperTable, nmisFtpRowStatus=nmisFtpRowStatus, nmisFmipSessionDataStreams=nmisFmipSessionDataStreams, nmisRowStatusTable=nmisRowStatusTable, nmisTelnetActiveSessions=nmisTelnetActiveSessions, nmisTelnetSessionStorageType=nmisTelnetSessionStorageType, acUserid=acUserid, nmisLocalSessionUserid=nmisLocalSessionUserid, nmisFmipRowStatusTable=nmisFmipRowStatusTable, nmisLocalSessionRowStatusTable=nmisLocalSessionRowStatusTable, nmisTelnetRowStatusTable=nmisTelnetRowStatusTable, acUseridCommandScope=acUseridCommandScope, acIpAccessProvEntry=acIpAccessProvEntry, nmisFtpSessionRowStatusTable=nmisFtpSessionRowStatusTable, nmisTelnetStorageType=nmisTelnetStorageType, nmisTelnetSessionOperTable=nmisTelnetSessionOperTable, acUseridProvEntry=acUseridProvEntry, nmisFtpSessionOperTable=nmisFtpSessionOperTable, nmisLocalSessionRowStatus=nmisLocalSessionRowStatus, nmisTelnetRowStatus=nmisTelnetRowStatus, nmisTelnetUsageState=nmisTelnetUsageState, nmisFtpSessionRemoteIpAddr=nmisFtpSessionRemoteIpAddr, nmisTelnetSession=nmisTelnetSession, mgmtInterfacesGroupBE=mgmtInterfacesGroupBE, nmisFtpComponentName=nmisFtpComponentName, nmisFtpIndex=nmisFtpIndex, acStorageType=acStorageType, nmisFmipOperEntry=nmisFmipOperEntry, nmisTelnetSessionRowStatus=nmisTelnetSessionRowStatus, nmisFtpUsageState=nmisFtpUsageState, nmisLocalRowStatusEntry=nmisLocalRowStatusEntry, nmisFtpOperationalState=nmisFtpOperationalState, nmisTelnetSessionClientRowStatusEntry=nmisTelnetSessionClientRowStatusEntry, nmisTelnet=nmisTelnet, acRowStatusEntry=acRowStatusEntry, acIpAccessRowStatusEntry=acIpAccessRowStatusEntry, nmisFtpStateTable=nmisFtpStateTable, acProvEntry=acProvEntry, nmisFmipSession=nmisFmipSession, acIpAccessIndex=acIpAccessIndex, nmis=nmis, nmisFtpSessionRowStatusEntry=nmisFtpSessionRowStatusEntry, acUseridAllowedOutAccess=acUseridAllowedOutAccess, nmisFmipSessionRowStatusTable=nmisFmipSessionRowStatusTable, nmisTelnetSessionRemoteTcpPort=nmisTelnetSessionRemoteTcpPort, nmisLocalActiveSessions=nmisLocalActiveSessions, acUseridCommandImpact=acUseridCommandImpact, nmisStorageType=nmisStorageType, mgmtInterfacesCapabilitiesBE=mgmtInterfacesCapabilitiesBE, nmisTelnetIndex=nmisTelnetIndex, nmisFtpOperEntry=nmisFtpOperEntry, acRowStatus=acRowStatus, nmisFtp=nmisFtp, nmisTelnetSessionClientRemoteIpAddr=nmisTelnetSessionClientRemoteIpAddr, ac=ac, nmisTelnetSessionIndex=nmisTelnetSessionIndex, nmisFtpRowStatusEntry=nmisFtpRowStatusEntry, nmisTelnetSessionUserid=nmisTelnetSessionUserid, nmisTelnetSessionClientRowStatus=nmisTelnetSessionClientRowStatus, nmisTelnetSessionClientRowStatusTable=nmisTelnetSessionClientRowStatusTable, nmisFmipStateEntry=nmisFmipStateEntry, nmisTelnetComponentName=nmisTelnetComponentName, nmisTelnetSessionComponentName=nmisTelnetSessionComponentName, nmisFtpMaxAllowedSessions=nmisFtpMaxAllowedSessions, acUseridComponentName=acUseridComponentName, acIpAccessRowStatus=acIpAccessRowStatus, nmisFmipOperTable=nmisFmipOperTable, acProvTable=acProvTable, acUseridRowStatusEntry=acUseridRowStatusEntry, nmisFtpSessionRowStatus=nmisFtpSessionRowStatus, nmisIndex=nmisIndex, nmisTelnetSessionOperEntry=nmisTelnetSessionOperEntry, nmisTelnetStateEntry=nmisTelnetStateEntry, nmisTelnetSessionClientVirtualRouter=nmisTelnetSessionClientVirtualRouter, nmisFtpSessionComponentName=nmisFtpSessionComponentName, nmisFtpSessionOperEntry=nmisFtpSessionOperEntry, nmisFmipUsageState=nmisFmipUsageState, nmisTelnetOperationalState=nmisTelnetOperationalState, nmisTelnetSessionClientComponentName=nmisTelnetSessionClientComponentName, nmisFmipSessionOperEntry=nmisFmipSessionOperEntry, acUseridIndex=acUseridIndex, nmisRowStatusEntry=nmisRowStatusEntry, nmisTelnetSessionClientOperTable=nmisTelnetSessionClientOperTable, nmisFtpSessionUserid=nmisFtpSessionUserid, nmisFtpStorageType=nmisFtpStorageType, nmisFmipSessionRemoteIpAddr=nmisFmipSessionRemoteIpAddr, nmisFmipRowStatus=nmisFmipRowStatus, nmisFmipComponentName=nmisFmipComponentName, nmisFmipSessionStorageType=nmisFmipSessionStorageType, nmisFmipSessionIndex=nmisFmipSessionIndex, nmisFmipSessionScreenWidth=nmisFmipSessionScreenWidth, nmisLocalStorageType=nmisLocalStorageType, nmisLocalRowStatus=nmisLocalRowStatus, nmisLocalSessionComponentName=nmisLocalSessionComponentName, nmisLocalSessionIndex=nmisLocalSessionIndex, nmisFtpRowStatusTable=nmisFtpRowStatusTable, mgmtInterfacesGroupBE01A=mgmtInterfacesGroupBE01A, nmisFtpAdminState=nmisFtpAdminState, nmisTelnetOperEntry=nmisTelnetOperEntry, nmisTelnetSessionClientRemoteTcpPort=nmisTelnetSessionClientRemoteTcpPort, nmisComponentName=nmisComponentName, nmisTelnetSessionRowStatusTable=nmisTelnetSessionRowStatusTable, nmisFtpActiveSessions=nmisFtpActiveSessions, acUseridStorageType=acUseridStorageType, nmisTelnetSessionScreenWidth=nmisTelnetSessionScreenWidth, nmisFmipRowStatusEntry=nmisFmipRowStatusEntry, nmisFmipActiveSessions=nmisFmipActiveSessions, nmisFmipSessionComponentName=nmisFmipSessionComponentName, nmisFmipSessionRemoteTcpPort=nmisFmipSessionRemoteTcpPort, mgmtInterfacesCapabilitiesBE01=mgmtInterfacesCapabilitiesBE01, nmisLocalOperationalState=nmisLocalOperationalState, nmisTelnetSessionClientIndex=nmisTelnetSessionClientIndex, nmisFtpSessionRemoteTcpPort=nmisFtpSessionRemoteTcpPort, nmisLocalOperTable=nmisLocalOperTable, nmisTelnetSessionClientOperEntry=nmisTelnetSessionClientOperEntry, nmisRowStatus=nmisRowStatus, nmisLocalOperEntry=nmisLocalOperEntry)
