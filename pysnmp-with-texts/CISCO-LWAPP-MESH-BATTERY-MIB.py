#
# PySNMP MIB module CISCO-LWAPP-MESH-BATTERY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-MESH-BATTERY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
cLApSysMacAddress, cLApName = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress", "cLApName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Gauge32, MibIdentifier, iso, Bits, ObjectIdentity, Unsigned32, Counter64, IpAddress, Integer32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Gauge32", "MibIdentifier", "iso", "Bits", "ObjectIdentity", "Unsigned32", "Counter64", "IpAddress", "Integer32", "ModuleIdentity", "NotificationType")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoLwappMeshBatteryMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 620))
ciscoLwappMeshBatteryMIB.setRevisions(('2010-09-08 00:00', '2007-02-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappMeshBatteryMIB.setRevisionsDescriptions(('Added:- clMeshNodeBatteryCurrentValue, ciscoLwappMeshBatteryMIBComplianceRev2, ciscoLwappMeshBatteryInfoGroupRev1, ciscoLwappMeshBatteryInfoGroupRev2 Deprecated:- clMeshNodeBatteryChargingState, clMeshNodeBatteryRemainingCapacity, clMeshNodeBatteryCurrent.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappMeshBatteryMIB.setLastUpdated('201009080000Z')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol (LWAPP) tunnel from Light-weight Access Points. This MIB represents information about the status of the Multipurpose Power Supply (MPS), used as backup power supply for an Access Point (AP) in the Wireless Mesh Network. The MPS reports status information to the AP periodically. The AP inturn reports the battery status information to the controller periodically as a part of the LWAPP information packet. General Infomation about Cisco Wireless Mesh network: A Mesh AP (MAP) can associate directly with another Root AP (RAP) or with another MAP AP. Each association of AP (MAP-MAP or RAP-MAP) with another AP forms parent-child relationship. The arrangement of the controller (referred to as CC in the diagram) and mesh nodes (RAP and MAP) LWAPP APs ,client(MN) and NMS appear as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs through the tunnel. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point (AP) An entity that contains an 802.11 medium access control (MAC) and physical layer (PHY) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller (CC) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity is also referred to as 'controller'. Mobile Node (MN) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node and client are used interchangeably. Network Management System (NMS) The station from which the administrator manages the wired and wireless networks. Mesh Network A network of APs where the AP are linked to each other through wireless links. These wireless links are also called backhaul links. At least one of these APs must be connected to a controller through a wired link. Mesh Node A mesh node is defined as a physical or logical entity in the mesh network participating in forming the mesh backhaul. There are two types of mesh nodes supported in Cisco mesh network - RAP and MAP. Root AP (RAP) The AP forming the bridge between a wired and a mesh network with an Ethernet interface to the wired network and a 802.11 radio interface to the mesh network. Mesh AP (MAP). The AP extending wireless coverage similar to a repeater in a mesh network and consists of a 802.11 uplink and a 802.11 downlink. On a single-radio backhaul, both uplink and downlink exist on the same radio and are logical links only. On a multi-radio backhaul, they may exist on different radios. REFERENCE [1] Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol.")
ciscoLwappMeshBatteryMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 620, 0))
ciscoLwappMeshBatteryMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 620, 1))
ciscoLwappMeshBatteryMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 620, 2))
ciscoLwappMeshBatteryInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1))
ciscoLwappMeshBatteryNotifControlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 2))
clMeshNodeBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1), )
if mibBuilder.loadTexts: clMeshNodeBatteryTable.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryTable.setDescription('This table represents information about the backup battery in the 802.11 LWAPP Access Points that have joined the controller as part of mesh network.')
clMeshNodeBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: clMeshNodeBatteryEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryEntry.setDescription('An (conceptual) entry in this table is created when an AP, which joins the controller is a Mesh AP and has a battery already installed. The entry gets deleted when the AP loses its association with the controller or when it fails to report the serial number of the battery.')
clMeshNodeBatteryModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryModelName.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryModelName.setDescription('This object represents the model name of the battery.')
clMeshNodeBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("overloaded", 3), ("low", 4), ("acfail", 5), ("replace", 6), ("missing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryStatus.setDescription('This object represents the status of the battery. unknown - Battery status is unknown. normal - Battery is operating normally and is in standby mode ready to takeover if input AC power supply fails. overloaded - Battery is overloaded when more current than the specified rating is drawn. low - Battery has low voltage when the output voltage is less than 11 Volts. acfail - External AC power supply has failed. replace - Battery must be replaced when it does not recharge fully and is at less than 70% capacity. missing - One or more batteries in the battery string is missing. The battery string has normally 4 batteries.')
clMeshNodeBatteryChargingState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("charging", 3), ("discharging", 4), ("charged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryChargingState.setStatus('deprecated')
if mibBuilder.loadTexts: clMeshNodeBatteryChargingState.setDescription('This object represents the charging status of the battery. unknown - Charging state is unknown, disabled - Charging is disabled, charging - Battery is charging, discharging - Battery is discharging, charged - Battery is charged')
clMeshNodeBatteryChargingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 4), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryChargingLevel.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryChargingLevel.setDescription('This object represents the charging level of the battery.')
clMeshNodeBatteryRemainingCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 5), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryRemainingCapacity.setStatus('deprecated')
if mibBuilder.loadTexts: clMeshNodeBatteryRemainingCapacity.setDescription('This object represents the remaining time of the battery capacity.')
clMeshNodeBatterySwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatterySwVersion.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatterySwVersion.setDescription('This object represents the SW version of the battery.')
clMeshNodeBatterySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatterySerialNumber.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatterySerialNumber.setDescription('This object represents the serial number of the battery.')
clMeshNodeBatteryInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 8), Unsigned32()).setUnits('milliVolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryInputVoltage.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryInputVoltage.setDescription('This object represents the AC voltage across the input terminals the battery.')
clMeshNodeBatteryOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 9), Unsigned32()).setUnits('milliVolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryOutputVoltage.setDescription('This object represents the voltage across the output (load) terminals of the battery.')
clMeshNodeBatteryOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 10), Unsigned32()).setUnits('milliWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryOutputPower.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryOutputPower.setDescription('This object represents the output power of the battery.')
clMeshNodeBatteryInternalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 11), Unsigned32()).setUnits('milliVolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryInternalVoltage.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryInternalVoltage.setDescription('This object represents the internal voltage of the battery.')
clMeshNodeBatteryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 12), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryTemperature.setDescription('This object represents the temperature of the battery in Celsius.')
clMeshNodeBatteryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 13), Unsigned32()).setUnits('milliAmps').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: clMeshNodeBatteryCurrent.setDescription('This object represents the current of the battery. Superceded by clMeshNodeBatteryCurrentValue.')
clMeshNodeBatteryCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 1, 1, 1, 14), Integer32()).setUnits('milliAmps').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBatteryCurrentValue.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBatteryCurrentValue.setDescription('This object represents the current of the battery.')
clMeshBatteryAlarmEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 620, 1, 2, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshBatteryAlarmEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshBatteryAlarmEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshBatteryAlarm' notification. A value of 'true' indicates that the notification will be generated for abnormal battery conditions. A value of 'false' indicates that the notification will not be generated.")
ciscoLwappMeshBatteryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 620, 0, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryStatus"))
if mibBuilder.loadTexts: ciscoLwappMeshBatteryAlarm.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryAlarm.setDescription("This notification is sent by the agent when the value of clMeshNodeBatteryStatus has been changed from 'normal' to one of the abnormal values ('overloaded', 'low', 'acfail', 'replace', 'missing').")
ciscoLwappMeshBatteryMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 1))
ciscoLwappMeshBatteryMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 2))
ciscoLwappMeshBatteryMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 1, 1)).setObjects(("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryInfoGroup"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryNotifsConfigGroup"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshBatteryMIBCompliance = ciscoLwappMeshBatteryMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshBatteryMIB module.')
ciscoLwappMeshBatteryMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 1, 2)).setObjects(("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryNotifsConfigGroup"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryNotifsGroup"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryInfoGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshBatteryMIBComplianceRev1 = ciscoLwappMeshBatteryMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshBatteryMIB module.')
ciscoLwappMeshBatteryMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 1, 3)).setObjects(("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryNotifsConfigGroup"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryNotifsGroup"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryInfoGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshBatteryMIBComplianceRev2 = ciscoLwappMeshBatteryMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryMIBComplianceRev2.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshBatteryMIB module.')
ciscoLwappMeshBatteryInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 2, 1)).setObjects(("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryModelName"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryStatus"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryChargingState"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryChargingLevel"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryRemainingCapacity"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatterySwVersion"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatterySerialNumber"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryInputVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryOutputVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryOutputPower"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryInternalVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryTemperature"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshBatteryInfoGroup = ciscoLwappMeshBatteryInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryInfoGroup.setDescription('This collection of objects represent the battery specific configuration.')
ciscoLwappMeshBatteryNotifsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 2, 2)).setObjects(("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshBatteryAlarmEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshBatteryNotifsConfigGroup = ciscoLwappMeshBatteryNotifsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryNotifsConfigGroup.setDescription('This collection of objects represent the objects related to enabling/disabling battery related notifications sent by the agent to a network management station.')
ciscoLwappMeshBatteryNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 2, 3)).setObjects(("CISCO-LWAPP-MESH-BATTERY-MIB", "ciscoLwappMeshBatteryAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshBatteryNotifsGroup = ciscoLwappMeshBatteryNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryNotifsGroup.setDescription('This collection of objects represent the battery related notifications sent by the agent to a network management station.')
ciscoLwappMeshBatteryInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 2, 4)).setObjects(("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryModelName"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryStatus"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryChargingState"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryChargingLevel"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryRemainingCapacity"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatterySwVersion"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatterySerialNumber"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryInputVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryOutputVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryOutputPower"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryInternalVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryTemperature"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryCurrentValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshBatteryInfoGroupRev1 = ciscoLwappMeshBatteryInfoGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryInfoGroupRev1.setDescription('This collection of objects represent the battery specific configuration.')
ciscoLwappMeshBatteryInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 620, 2, 2, 5)).setObjects(("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryModelName"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryStatus"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryChargingLevel"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatterySwVersion"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatterySerialNumber"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryInputVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryOutputVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryOutputPower"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryInternalVoltage"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryTemperature"), ("CISCO-LWAPP-MESH-BATTERY-MIB", "clMeshNodeBatteryCurrentValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshBatteryInfoGroupRev2 = ciscoLwappMeshBatteryInfoGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshBatteryInfoGroupRev2.setDescription('This collection of objects represent the battery specific configuration.')
mibBuilder.exportSymbols("CISCO-LWAPP-MESH-BATTERY-MIB", ciscoLwappMeshBatteryMIBNotifs=ciscoLwappMeshBatteryMIBNotifs, ciscoLwappMeshBatteryMIB=ciscoLwappMeshBatteryMIB, clMeshNodeBatteryCurrentValue=clMeshNodeBatteryCurrentValue, clMeshNodeBatteryChargingState=clMeshNodeBatteryChargingState, PYSNMP_MODULE_ID=ciscoLwappMeshBatteryMIB, ciscoLwappMeshBatteryInfoGroup=ciscoLwappMeshBatteryInfoGroup, clMeshNodeBatteryStatus=clMeshNodeBatteryStatus, clMeshNodeBatterySwVersion=clMeshNodeBatterySwVersion, ciscoLwappMeshBatteryNotifsGroup=ciscoLwappMeshBatteryNotifsGroup, clMeshNodeBatteryTemperature=clMeshNodeBatteryTemperature, ciscoLwappMeshBatteryMIBComplianceRev1=ciscoLwappMeshBatteryMIBComplianceRev1, clMeshNodeBatterySerialNumber=clMeshNodeBatterySerialNumber, ciscoLwappMeshBatteryNotifControlConfig=ciscoLwappMeshBatteryNotifControlConfig, clMeshNodeBatteryCurrent=clMeshNodeBatteryCurrent, ciscoLwappMeshBatteryInfoGroupRev1=ciscoLwappMeshBatteryInfoGroupRev1, ciscoLwappMeshBatteryNotifsConfigGroup=ciscoLwappMeshBatteryNotifsConfigGroup, clMeshNodeBatteryOutputPower=clMeshNodeBatteryOutputPower, ciscoLwappMeshBatteryInfo=ciscoLwappMeshBatteryInfo, clMeshNodeBatteryChargingLevel=clMeshNodeBatteryChargingLevel, clMeshNodeBatteryRemainingCapacity=clMeshNodeBatteryRemainingCapacity, clMeshNodeBatteryInputVoltage=clMeshNodeBatteryInputVoltage, ciscoLwappMeshBatteryMIBCompliances=ciscoLwappMeshBatteryMIBCompliances, ciscoLwappMeshBatteryInfoGroupRev2=ciscoLwappMeshBatteryInfoGroupRev2, ciscoLwappMeshBatteryAlarm=ciscoLwappMeshBatteryAlarm, ciscoLwappMeshBatteryMIBObjects=ciscoLwappMeshBatteryMIBObjects, clMeshNodeBatteryOutputVoltage=clMeshNodeBatteryOutputVoltage, clMeshNodeBatteryInternalVoltage=clMeshNodeBatteryInternalVoltage, clMeshNodeBatteryEntry=clMeshNodeBatteryEntry, clMeshBatteryAlarmEnabled=clMeshBatteryAlarmEnabled, ciscoLwappMeshBatteryMIBConform=ciscoLwappMeshBatteryMIBConform, ciscoLwappMeshBatteryMIBCompliance=ciscoLwappMeshBatteryMIBCompliance, ciscoLwappMeshBatteryMIBGroups=ciscoLwappMeshBatteryMIBGroups, clMeshNodeBatteryTable=clMeshNodeBatteryTable, ciscoLwappMeshBatteryMIBComplianceRev2=ciscoLwappMeshBatteryMIBComplianceRev2, clMeshNodeBatteryModelName=clMeshNodeBatteryModelName)
