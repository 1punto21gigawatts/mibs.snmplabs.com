#
# PySNMP MIB module BAS-ALIAS-CABLE-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-ALIAS-CABLE-DEVICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
BasChassisId, BasSlotId, basAliasDocsCd, BasInterfaceId, BasLogicalPortId = mibBuilder.importSymbols("BAS-MIB", "BasChassisId", "BasSlotId", "basAliasDocsCd", "BasInterfaceId", "BasLogicalPortId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, Integer32, TimeTicks, NotificationType, ModuleIdentity, Counter32, iso, MibIdentifier, Counter64, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "Integer32", "TimeTicks", "NotificationType", "ModuleIdentity", "Counter32", "iso", "MibIdentifier", "Counter64", "Unsigned32", "IpAddress")
TruthValue, DateAndTime, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "TextualConvention", "RowStatus", "DisplayString")
basAliasDocsCdMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1))
if mibBuilder.loadTexts: basAliasDocsCdMib.setLastUpdated('9810081200Z')
if mibBuilder.loadTexts: basAliasDocsCdMib.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basAliasDocsCdMib.setContactInfo(' Tech Support Broadband Access Systems 201 Forest Street Marlboro, MA 01752 U.S.A. 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basAliasDocsCdMib.setDescription('This MIB module defines the Alias DocsCd MIB objects for a Broadband Access System Cluster.')
class InterfaceIndexOrZero(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the InterfaceIndex convention. The latter defines a greater than zero value used to identify an interface or interface sub-layer in the managed system. This extension permits the additional value of zero. the value zero is object-specific and must therefore be defined as part of the description of any object which uses this syntax. Examples of the usage of zero might include situations where interface was unknown, or when none or all interfaces need to be referenced.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

basDocsDevMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1))
basDocsDevBase = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1))
basDocsDevBaseTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1), )
if mibBuilder.loadTexts: basDocsDevBaseTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevBaseTable.setDescription('')
basDocsDevBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevLPort"))
if mibBuilder.loadTexts: basDocsDevBaseEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevBaseEntry.setDescription('')
basDocsDevRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cm", 1), ("cmtsActive", 2), ("cmtsBackup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevRole.setStatus('current')
if mibBuilder.loadTexts: basDocsDevRole.setDescription('Defines the current role of this device.')
basDocsDevDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevDateTime.setStatus('current')
if mibBuilder.loadTexts: basDocsDevDateTime.setDescription('The date and time, with optional timezone information.')
basDocsDevResetNow = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevResetNow.setStatus('current')
if mibBuilder.loadTexts: basDocsDevResetNow.setDescription('Setting this object to true(1) causes the device to reset. Reading this object always returns false(2).')
basDocsDevSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevSerialNumber.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSerialNumber.setDescription("The manufacturer's serial number for this device.")
basDocsDevSTPControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stEnabled", 1), ("noStFilterBpdu", 2), ("noStPassBpdu", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevSTPControl.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSTPControl.setDescription('This object controls operation of the spanning tree protocol (as distinguished from transparent bridging). If set to stEnabled(1) then the spanning tree protocol is enabled, subject to bridging constraints. If noStFilterBpdu(2), then spanning tree is not active, and Bridge PDUs received are discarded. If noStPassBpdu(3) then spanning tree is not active and Bridge PDUs are transparently forwarded. Note that a device need not implement all of these options, but that noStFilterBpdu(2) is required.')
basDocsDevChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basDocsDevChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basDocsDevSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevIf.setDescription('The BAS interface ID of this card.')
basDocsDevLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 1, 1, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevNmAccessTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2), )
if mibBuilder.loadTexts: basDocsDevNmAccessTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessTable.setDescription('This table controls access to SNMP objects by network management stations. If the table is empty, access to SNMP objects is unrestricted.')
basDocsDevNmAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevNmAccessIndex"))
if mibBuilder.loadTexts: basDocsDevNmAccessEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessEntry.setDescription('Controls access to SNMP objects by a particular network management station. For each entry in this table, the contents are not readable unless the management station has read-write permission.')
basDocsDevNmAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsDevNmAccessIndex.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessIndex.setDescription('Index used to order the application of access entries.')
basDocsDevNmAccessIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 2), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessIp.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessIp.setDescription('The IP address (or subnet) of the network management station. The address 255.255.255.255 is defined to mean any NMS. If traps are enabled for this entry, then the value must be the address of a specific device.')
basDocsDevNmAccessIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 3), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessIpMask.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessIpMask.setDescription('The IP subnet mask of the network management stations. If traps are enabled for this entry, then the value must be 255.255.255.255.')
basDocsDevNmAccessCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 4), DisplayString().clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessCommunity.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessCommunity.setDescription('The community string to be matched for access by this entry. If set to the null string then any community string will match.')
basDocsDevNmAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("read", 2), ("readWrite", 3), ("roWithTraps", 4), ("rwWithTraps", 5), ("trapsOnly", 6))).clone('read')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessControl.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessControl.setDescription("Specifies the type of access allowed to this NMS. Setting this object to none(1) causes the table entry to be destroyed. Read(2) allows access by 'get' and 'get-next' PDUs. ReadWrite(3) allows access by 'set' as well. RoWithtraps(4), rwWithTraps(5), and trapsOnly(6) control distribution of Trap PDUs transmitted by this device.")
basDocsDevNmAccessInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessInterfaces.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessInterfaces.setDescription("Specifies the set of interfaces from which requests from this NMS will be accepted. Each octet within the value of this object specifies a set of eight interfaces, with the first octet specifying ports 1 through 8, the second octet specifying interfaces 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered interface, and the least significant bit represents the highest numbered interface. Thus, each interface is represented by a single bit within the value of this object. If that bit has a value of '1' then that interface is included in the set. Note that entries in this table apply only to link-layer interfaces (e.g., Ethernet and CATV MAC). Upstream and downstream channel interfaces must not be specified.")
basDocsDevNmAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevNmAccessStatus.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessStatus.setDescription('Controls and reflects the status of rows in this table.')
basDocsDevNmAccessChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 8), BasChassisId())
if mibBuilder.loadTexts: basDocsDevNmAccessChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevNmAccessSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 9), BasSlotId())
if mibBuilder.loadTexts: basDocsDevNmAccessSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevNmAccessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 10), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevNmAccessIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessIf.setDescription('The BAS interface ID of this card.')
basDocsDevNmAccessLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 2, 1, 11), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevNmAccessLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevNmAccessLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3))
basDocsDevSwTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1), )
if mibBuilder.loadTexts: basDocsDevSwTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwTable.setDescription('')
basDocsDevSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSwChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSwSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSwIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevSwLPort"))
if mibBuilder.loadTexts: basDocsDevSwEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwEntry.setDescription('')
basDocsDevSwServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevSwServer.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwServer.setDescription('The address of the TFTP server used for software upgrades.')
basDocsDevSwFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevSwFilename.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwFilename.setDescription("The file name of the software image to be loaded into this device. Unless set via SNMP, this is the file name specified by the provisioning server that corresponds to the software version that is desired for this device. If unknown, the string '(unknown)' is returned.")
basDocsDevSwAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upgradeFromMgt", 1), ("allowProvisioningUpgrade", 2), ("ignoreProvisioningUpgrade", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevSwAdminStatus.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwAdminStatus.setDescription('If set to upgradeFromMgt(1), the device will initiate a TFTP software image download using docsDevSwFilename. After successfully receiving an image, the device will set its state to ignoreProvisioningUpgrade(3) and reboot. If the download process is interrupted by a reset or power failure, the device will load the previous image and, after re-initialization, continue to attempt loading the image specified in docsDevSwFilename. If set to allowProvisioningUpgrade(2), the device will use the software version information supplied by the provisioning server when next rebooting (this does not cause a reboot). When set to ignoreProvisioningUpgrade(3), the device will disregard software image upgrade information from the provisioning server. Note that reading this object can return upgradeFromMgt(1). This indicates that a software download is currently in progress, and that the device will reboot after successfully receiving an image.')
basDocsDevSwOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inProgress", 1), ("completeFromProvisioning", 2), ("completeFromMgt", 3), ("failed", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevSwOperStatus.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwOperStatus.setDescription('InProgress(1) indicates that a TFTP download is underway, either as a result of a version mismatch at provisioning or as a result of a upgradeFromMgt request. CompleteFromProvisioning(2) indicates that the last software upgrade was a result of version mismatch at provisioning. CompleteFromMgt(3) indicates that the last software upgrade was a result of setting docsDevSwAdminStatus to upgradeFromMgt. Failed(4) indicates that the last attempted download failed, ordinarily due to TFTP timeout.')
basDocsDevSwChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basDocsDevSwChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevSwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 6), BasSlotId())
if mibBuilder.loadTexts: basDocsDevSwSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevSwIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 7), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevSwIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwIf.setDescription('The BAS interface ID of this card.')
basDocsDevSwLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 3, 1, 1, 8), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevSwLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevSwLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4))
basDocsDevServerTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1), )
if mibBuilder.loadTexts: basDocsDevServerTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerTable.setDescription('')
basDocsDevServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevServerChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevServerSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevServerIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevServerLPort"))
if mibBuilder.loadTexts: basDocsDevServerEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerEntry.setDescription('')
basDocsDevServerBootState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("operational", 1), ("disabled", 2), ("waitingForDhcpOffer", 3), ("waitingForDhcpResponse", 4), ("waitingForTimeServer", 5), ("waitingForTftp", 6), ("refusedByCmts", 7), ("forwardingDenied", 8), ("other", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerBootState.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerBootState.setDescription('If operational(1), the device has completed loading and processing of configuration parameters and the CMTS has completed the Registration exchange. If disabled(2) then the device was administratively disabled, possibly by being refused network access in the configuration file. If waitingForDhcpOffer(3) then a DHCP Discover has been transmitted and no offer has yet been received. If waitingForDhcpResponse(4) then a DHCP Request has been transmitted and no response has yet been received. If waitingForTimeServer(5) then a Time Request has been transmitted and no response has yet been received. If waitingForTftp(6) then a request to the TFTP parameter server has been made and no response received. If refusedByCmts(7) then the Registration Request/Response exchange with the CMTS failed. If forwardingDenied(8) then the registration process completed, but the network access option in the received configuration file prohibits forwarding. ')
basDocsDevServerDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerDhcp.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerDhcp.setDescription('The IP address of the DHCP server that assigned an IP address to this device. Returns 0.0.0.0 if DHCP was not used for IP address assignment.')
basDocsDevServerTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerTime.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerTime.setDescription('The IP address of the Time server (RFC-868).')
basDocsDevServerTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerTftp.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerTftp.setDescription('The IP address of the TFTP server responsible for downloading provisioning and configuration parameters to this device.')
basDocsDevServerConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevServerConfigFile.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerConfigFile.setDescription('The name of the device configuration file read from the TFTP server.')
basDocsDevServerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basDocsDevServerChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevServerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basDocsDevServerSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevServerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevServerIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerIf.setDescription('The BAS interface ID of this card.')
basDocsDevServerLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 4, 1, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevServerLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevServerLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5))
basDocsDevEvTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1), )
if mibBuilder.loadTexts: basDocsDevEvTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvTable.setDescription('')
basDocsDevEvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvLPort"))
if mibBuilder.loadTexts: basDocsDevEvEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvEntry.setDescription('')
basDocsDevEvControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetLog", 1), ("useDefaultReporting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvControl.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvControl.setDescription('Setting this object to resetLog(1) empties the event log. All data is deleted. Setting it to useDefaultReporting(2) returns all event priorities to their factory-default reporting. Reading this object always returns useDefaultReporting(2).')
basDocsDevEvSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvSyslog.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvSyslog.setDescription('The IP address of the Syslog server. If 0.0.0.0, syslog transmission is inhibited.')
basDocsDevEvThrottleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unconstrained", 1), ("maintainBelowThreshold", 2), ("stopAtThreshold", 3), ("inhibited", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvThrottleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvThrottleAdminStatus.setDescription('Controls the transmission of traps and syslog messages with respect to the trap pacing threshold. unconstrained(1) causes traps and syslog messages to be transmitted without regard to the threshold settings. maintainBelowThreshold(2) causes trap transmission and syslog messages to be suppressed if the number of traps would otherwise exceed the threshold. stopAtThreshold(3) causes trap transmission to cease at the threshold, and not resume until directed to do so. inhibited(4) causes all trap transmission and syslog messages to be suppressed. A single event is always treated as a single event for threshold counting. That is, an event causing both a trap and a syslog message is still treated as a single event. Writing to this object resets the thresholding state.')
basDocsDevEvThrottleInhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvThrottleInhibited.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvThrottleInhibited.setDescription('If true(1), trap and syslog transmission is currently inhibited due to thresholds and/or the current setting of docsDevEvThrottleAdminStatus.')
basDocsDevEvThrottleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvThrottleThreshold.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvThrottleThreshold.setDescription('Number of trap/syslog events per docsDevEvThrottleInterval to be transmitted before throttling. A single event is always treated as a single event for threshold counting. That is, an event causing both a trap and a syslog message is still treated as a single event.')
basDocsDevEvThrottleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvThrottleInterval.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvThrottleInterval.setDescription('The interval over which the trap threshold applies.')
basDocsDevEvChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 7), BasChassisId())
if mibBuilder.loadTexts: basDocsDevEvChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevEvSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 8), BasSlotId())
if mibBuilder.loadTexts: basDocsDevEvSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevEvIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 9), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevEvIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvIf.setDescription('The BAS interface ID of this card.')
basDocsDevEvLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 1, 1, 10), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevEvLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevEvControlTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7), )
if mibBuilder.loadTexts: basDocsDevEvControlTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvControlTable.setDescription('Allows control of the reporting of event classes.')
basDocsDevEvControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvControlChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvControlSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvControlIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvControlLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvPriority"))
if mibBuilder.loadTexts: basDocsDevEvControlEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvControlEntry.setDescription('Allows configuration of the reporting mechanisms for a particular event priority.')
basDocsDevEvPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8))))
if mibBuilder.loadTexts: basDocsDevEvPriority.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvPriority.setDescription('The priority level that is controlled by this entry.')
basDocsDevEvReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 2), Bits().clone(namedValues=NamedValues(("local", 0), ("traps", 1), ("syslog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevEvReporting.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvReporting.setDescription('Defines the action to be taken on occurrence of this event class. Implementations may not necessarily support all options for all event classes, but at minimum must allow traps and syslogging to be disabled.')
basDocsDevEvControlChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 3), BasChassisId())
if mibBuilder.loadTexts: basDocsDevEvControlChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvControlChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevEvControlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 4), BasSlotId())
if mibBuilder.loadTexts: basDocsDevEvControlSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvControlSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevEvControlIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 5), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevEvControlIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvControlIf.setDescription('The BAS interface ID of this card.')
basDocsDevEvControlLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 7, 1, 6), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevEvControlLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvControlLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevEventTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8), )
if mibBuilder.loadTexts: basDocsDevEventTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEventTable.setDescription('Contains a log of network and device events that may be of interest in fault isolation and troubleshooting.')
basDocsDevEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvEventChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvEventSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvEventIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvEventLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevEvIndex"))
if mibBuilder.loadTexts: basDocsDevEventEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEventEntry.setDescription('Describes a network or device event that may be of interest in fault isolation and troubleshooting.')
basDocsDevEvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsDevEvIndex.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvIndex.setDescription('Provides relative ordering of the objects in the event log. This object will always increase except when (a) the log is reset via docsDevEvControl, (b) the device reboots and does not implement nonvolatile storage for this log, or (c) it reaches the value 2^31. The next entry for all the above cases is 1.')
basDocsDevEvFirstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvFirstTime.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvFirstTime.setDescription('The time that this entry was created.')
basDocsDevEvLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvLastTime.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvLastTime.setDescription('If multiple events are reported via the same entry, the time that the last event for this entry occurred.')
basDocsDevEvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvCount.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvCount.setDescription('The number of consecutive event instances reported by this entry.')
basDocsDevEvLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvLevel.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvLevel.setDescription('The priority level of this event.')
basDocsDevEvId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvId.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvId.setDescription('For this product, uniquely identifies the type of event that is reported by this entry.')
basDocsDevEvText = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevEvText.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvText.setDescription('Provides a human-readable description of the event, including all relevant context (interface numbers, etc.).')
basDocsDevEvEventChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 8), BasChassisId())
if mibBuilder.loadTexts: basDocsDevEvEventChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvEventChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevEvEventSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 9), BasSlotId())
if mibBuilder.loadTexts: basDocsDevEvEventSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvEventSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevEvEventIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 10), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevEvEventIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvEventIf.setDescription('The BAS interface ID of this card.')
basDocsDevEvEventLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 5, 8, 1, 11), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevEvEventLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevEvEventLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6))
basDocsDevFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1), )
if mibBuilder.loadTexts: basDocsDevFilterTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterTable.setDescription('Contains a log of network and device events that may be of interest in fault isolation and troubleshooting.')
basDocsDevFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLPort"))
if mibBuilder.loadTexts: basDocsDevFilterEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterEntry.setDescription('Describes a network or device event that may be of interest in fault isolation and troubleshooting.')
basDocsDevFilterLLCDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevFilterLLCDefault.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCDefault.setDescription('If set to discard(1), all packets not matching an LLC filter will be discarded. If set to accept(2), all packets not matching an LLC filter will be accepted for further processing (e.g., bridging).')
basDocsDevFilterChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 2), BasChassisId())
if mibBuilder.loadTexts: basDocsDevFilterChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevFilterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 3), BasSlotId())
if mibBuilder.loadTexts: basDocsDevFilterSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevFilterIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 4), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevFilterIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIf.setDescription('The BAS interface ID of this card.')
basDocsDevFilterLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 1, 1, 5), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevFilterLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevFilterLLCTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2), )
if mibBuilder.loadTexts: basDocsDevFilterLLCTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCTable.setDescription('A list of filters to apply to (bridged) LLC traffic, which forwards or drops packets on the basis of the layer three protocol type.')
basDocsDevFilterLLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterLLCIndex"))
if mibBuilder.loadTexts: basDocsDevFilterLLCEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCEntry.setDescription('Describes a single filter to apply to (bridged) LLC traffic received on a specified interface. ')
basDocsDevFilterLLCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsDevFilterLLCIndex.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCIndex.setDescription('Index used for the identification of filters (note that LLC filter order is irrelevant).')
basDocsDevFilterLLCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterLLCStatus.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCStatus.setDescription('Controls and reflects the status of rows in this table.')
basDocsDevFilterLLCIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterLLCIfIndex.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCIfIndex.setDescription('The entry interface to which this filter applies. The value corresponds to ifIndex for either a CATV MAC or another network interface. If the value is zero, the filter applies to all interfaces. In Cable Modems, the default value is the customer side interface. In Cable Modem Termination Systems, this object has to be specified to create a row in this table.')
basDocsDevFilterLLCProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethertype", 1), ("dsap", 2))).clone('ethertype')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterLLCProtocolType.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCProtocolType.setDescription('The format of the value in docsDevFilterLLCProtocol: either a two-byte Ethernet Ethertype, or a one-byte 802.2 SAP value. EtherType(1) also applies to SNAP- encapsulated frames.')
basDocsDevFilterLLCProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterLLCProtocol.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCProtocol.setDescription('The layer three protocol for which this filter applies. The protocol value format depends on docsDevFilterLLCProtocolType. Note that for SNAP frames, etherType filtering is performed rather than DSAP=0xAA.')
basDocsDevFilterLLCMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevFilterLLCMatches.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCMatches.setDescription('Counts the number of times this filter was matched.')
basDocsDevFilterLLCChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 7), BasChassisId())
if mibBuilder.loadTexts: basDocsDevFilterLLCChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevFilterLLCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 8), BasSlotId())
if mibBuilder.loadTexts: basDocsDevFilterLLCSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevFilterLLCIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 9), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevFilterLLCIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCIf.setDescription('The BAS interface ID of this card.')
basDocsDevFilterLLCLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 2, 1, 10), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevFilterLLCLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterLLCLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevFilterIpDefTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3), )
if mibBuilder.loadTexts: basDocsDevFilterIpDefTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDefTable.setDescription('Contains a log of network and device events that may be of interest in fault isolation and troubleshooting.')
basDocsDevFilterIpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpDefChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpDefSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpDefIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpDefLPort"))
if mibBuilder.loadTexts: basDocsDevFilterIpDefEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDefEntry.setDescription('Describes a network or device event that may be of interest in fault isolation and troubleshooting.')
basDocsDevFilterIpDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsDevFilterIpDefault.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDefault.setDescription('If set to discard(1), all packets not matching an IP filter will be discarded. If set to accept(2), all packets not matching an IP filter will be accepted for further processing (e.g., bridging).')
basDocsDevFilterIpDefChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 2), BasChassisId())
if mibBuilder.loadTexts: basDocsDevFilterIpDefChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDefChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevFilterIpDefSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 3), BasSlotId())
if mibBuilder.loadTexts: basDocsDevFilterIpDefSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDefSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevFilterIpDefIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 4), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevFilterIpDefIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDefIf.setDescription('The BAS interface ID of this card.')
basDocsDevFilterIpDefLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 3, 1, 5), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevFilterIpDefLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDefLPort.setDescription('The BAS logical port ID of this card.')
basDocsDevFilterIpTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4), )
if mibBuilder.loadTexts: basDocsDevFilterIpTable.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpTable.setDescription('An ordered list of filters to apply to IP traffic. Filter application is ordered by the filter index, rather than by a best match algorithm. Packets which match no filters are discarded or forwarded according to the setting of docsDevFilterIpDefault.')
basDocsDevFilterIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1), ).setIndexNames((0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpChassis"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpSlot"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpIf"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpLPort"), (0, "BAS-ALIAS-CABLE-DEVICE-MIB", "basDocsDevFilterIpIndex"))
if mibBuilder.loadTexts: basDocsDevFilterIpEntry.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpEntry.setDescription('Describes a filter to apply to IP traffic received on a specified interface. Both source and destination addresses must match for the filter to apply.')
basDocsDevFilterIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsDevFilterIpIndex.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpIndex.setDescription('Index used to order the application of filters. The filter with the lowest index is always applied first.')
basDocsDevFilterIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpStatus.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpStatus.setDescription('Controls and reflects the status of rows in this table.')
basDocsDevFilterIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpControl.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpControl.setDescription('If set to discard(1), all packets matching this filter will be discarded and scanning of the remainder of the filter list will be aborted. If set to accept(2), all packets matching this filter will be accepted for further processing (e.g., bridging) and scanning of the remainder of the filter list will be aborted. ')
basDocsDevFilterIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpIfIndex.setDescription('The entry interface to which this filter applies. The value corresponds to ifIndex for either a CATV MAC or another network interface. If the value is zero, the filter applies to all interfaces. Default value in Cable Modems is the customer-side interface. In Cable Modem Termination Systems, this object has to be specified to create a row in this table.')
basDocsDevFilterIpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3))).clone('inbound')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDirection.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDirection.setDescription('Determines whether the filter is applied to inbound(1) traffic, outbound(2) traffic, or traffic in both(3) directions.')
basDocsDevFilterIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpBroadcast.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpBroadcast.setDescription('If set to true(1), the filter only applies to multicast and broadcast traffic. If set to false(2), the filter applies to all traffic.')
basDocsDevFilterIpSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpSaddr.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpSaddr.setDescription('The source IP address, or portion thereof, that is to be matched for this filter.')
basDocsDevFilterIpSmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpSmask.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpSmask.setDescription("A bit mask that is to be applied to the source address prior to matching. This mask is not necessarily the same as a subnet mask, but 1's bits must be leftmost and contiguous.")
basDocsDevFilterIpDaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDaddr.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDaddr.setDescription('The destination IP address, or portion thereof, that is to be matched for this filter ')
basDocsDevFilterIpDmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 10), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDmask.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDmask.setDescription("A bit mask that is to be applied to the destination address prior to matching. This mask is not necessarily the same as a subnet mask, but 1's bits must be leftmost and contiguous ")
basDocsDevFilterIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 256))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("any", 256))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpProtocol.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpProtocol.setDescription('The IP protocol value that is to be matched.')
basDocsDevFilterIpSourcePortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpSourcePortLow.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpSourcePortLow.setDescription('If docsDevFilterIpProtocol is udp or tcp, this is the inclusive lower bound of the transport-layer source port range that is to be matched.')
basDocsDevFilterIpSourcePortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpSourcePortHigh.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpSourcePortHigh.setDescription('If docsDevFilterIpProtocol is udp or tcp, this is the inclusive upper bound of the transport-layer source port range that is to be matched.')
basDocsDevFilterIpDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDestPortLow.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDestPortLow.setDescription('If docsDevFilterIpProtocol is udp or tcp, this is the inclusive lower bound of the transport-layer destination port range that is to be matched.')
basDocsDevFilterIpDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsDevFilterIpDestPortHigh.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpDestPortHigh.setDescription('If docsDevFilterIpProtocol is udp or tcp, this is the inclusive upper bound of the transport-layer destination port range that is to be matched.')
basDocsDevFilterIpMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsDevFilterIpMatches.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpMatches.setDescription('Counts the number of times this filter was matched.')
basDocsDevFilterIpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 17), BasChassisId())
if mibBuilder.loadTexts: basDocsDevFilterIpChassis.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpChassis.setDescription('The BAS Chassis ID of this card.')
basDocsDevFilterIpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 18), BasSlotId())
if mibBuilder.loadTexts: basDocsDevFilterIpSlot.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpSlot.setDescription('The BAS Slot ID of this card.')
basDocsDevFilterIpIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 19), BasInterfaceId())
if mibBuilder.loadTexts: basDocsDevFilterIpIf.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpIf.setDescription('The BAS interface ID of this card.')
basDocsDevFilterIpLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 9, 1, 1, 6, 4, 1, 20), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsDevFilterIpLPort.setStatus('current')
if mibBuilder.loadTexts: basDocsDevFilterIpLPort.setDescription('The BAS logical port ID of this card.')
mibBuilder.exportSymbols("BAS-ALIAS-CABLE-DEVICE-MIB", basDocsDevMIBObjects=basDocsDevMIBObjects, basDocsDevFilterIpDefIf=basDocsDevFilterIpDefIf, basDocsDevServerTftp=basDocsDevServerTftp, basDocsDevSwServer=basDocsDevSwServer, basDocsDevServerLPort=basDocsDevServerLPort, basDocsDevEvCount=basDocsDevEvCount, basDocsDevEvChassis=basDocsDevEvChassis, basDocsDevFilterIpStatus=basDocsDevFilterIpStatus, InterfaceIndexOrZero=InterfaceIndexOrZero, basDocsDevFilterIpDmask=basDocsDevFilterIpDmask, basDocsDevFilterIpDefTable=basDocsDevFilterIpDefTable, basDocsDevResetNow=basDocsDevResetNow, basDocsDevFilterIpSlot=basDocsDevFilterIpSlot, basDocsDevNmAccessEntry=basDocsDevNmAccessEntry, basDocsDevEvEventLPort=basDocsDevEvEventLPort, basDocsDevNmAccessLPort=basDocsDevNmAccessLPort, basDocsDevServerChassis=basDocsDevServerChassis, basDocsDevFilterLLCLPort=basDocsDevFilterLLCLPort, basDocsDevDateTime=basDocsDevDateTime, basDocsDevEvEventSlot=basDocsDevEvEventSlot, basDocsDevFilterIpMatches=basDocsDevFilterIpMatches, basDocsDevNmAccessChassis=basDocsDevNmAccessChassis, basDocsDevFilterLLCSlot=basDocsDevFilterLLCSlot, basDocsDevFilterIpDestPortHigh=basDocsDevFilterIpDestPortHigh, basDocsDevBaseEntry=basDocsDevBaseEntry, basDocsDevEvIf=basDocsDevEvIf, basDocsDevSwFilename=basDocsDevSwFilename, basDocsDevServerDhcp=basDocsDevServerDhcp, basDocsDevEvThrottleInhibited=basDocsDevEvThrottleInhibited, basDocsDevServerTable=basDocsDevServerTable, basDocsDevFilterIpDefChassis=basDocsDevFilterIpDefChassis, basDocsDevNmAccessStatus=basDocsDevNmAccessStatus, basDocsDevNmAccessTable=basDocsDevNmAccessTable, basDocsDevSoftware=basDocsDevSoftware, basDocsDevEvent=basDocsDevEvent, basDocsDevFilterLLCEntry=basDocsDevFilterLLCEntry, basDocsDevSerialNumber=basDocsDevSerialNumber, basDocsDevBaseTable=basDocsDevBaseTable, basDocsDevFilterLLCIf=basDocsDevFilterLLCIf, basDocsDevSwSlot=basDocsDevSwSlot, basDocsDevNmAccessSlot=basDocsDevNmAccessSlot, basDocsDevServer=basDocsDevServer, basDocsDevEvEntry=basDocsDevEvEntry, basDocsDevEvThrottleThreshold=basDocsDevEvThrottleThreshold, basDocsDevFilterIpDaddr=basDocsDevFilterIpDaddr, basDocsDevFilterLLCProtocolType=basDocsDevFilterLLCProtocolType, basAliasDocsCdMib=basAliasDocsCdMib, basDocsDevFilterIpDirection=basDocsDevFilterIpDirection, basDocsDevFilterTable=basDocsDevFilterTable, basDocsDevFilterIpProtocol=basDocsDevFilterIpProtocol, basDocsDevFilterLPort=basDocsDevFilterLPort, basDocsDevServerEntry=basDocsDevServerEntry, basDocsDevFilterIpDefSlot=basDocsDevFilterIpDefSlot, basDocsDevFilterIpSaddr=basDocsDevFilterIpSaddr, basDocsDevEvControl=basDocsDevEvControl, basDocsDevEvId=basDocsDevEvId, basDocsDevNmAccessCommunity=basDocsDevNmAccessCommunity, basDocsDevFilterIpControl=basDocsDevFilterIpControl, basDocsDevFilterLLCTable=basDocsDevFilterLLCTable, basDocsDevFilterLLCChassis=basDocsDevFilterLLCChassis, basDocsDevNmAccessInterfaces=basDocsDevNmAccessInterfaces, basDocsDevFilterIpIf=basDocsDevFilterIpIf, basDocsDevNmAccessIf=basDocsDevNmAccessIf, basDocsDevEvReporting=basDocsDevEvReporting, basDocsDevServerConfigFile=basDocsDevServerConfigFile, basDocsDevFilterLLCDefault=basDocsDevFilterLLCDefault, basDocsDevEvControlLPort=basDocsDevEvControlLPort, basDocsDevFilterLLCIndex=basDocsDevFilterLLCIndex, basDocsDevEvPriority=basDocsDevEvPriority, basDocsDevFilterIpSourcePortLow=basDocsDevFilterIpSourcePortLow, basDocsDevSwChassis=basDocsDevSwChassis, basDocsDevFilterIpEntry=basDocsDevFilterIpEntry, basDocsDevFilterLLCProtocol=basDocsDevFilterLLCProtocol, basDocsDevNmAccessIp=basDocsDevNmAccessIp, basDocsDevNmAccessIndex=basDocsDevNmAccessIndex, PYSNMP_MODULE_ID=basAliasDocsCdMib, basDocsDevFilterChassis=basDocsDevFilterChassis, basDocsDevEvControlTable=basDocsDevEvControlTable, basDocsDevEvLastTime=basDocsDevEvLastTime, basDocsDevFilterIpTable=basDocsDevFilterIpTable, basDocsDevServerBootState=basDocsDevServerBootState, basDocsDevEvSlot=basDocsDevEvSlot, basDocsDevFilterIpIfIndex=basDocsDevFilterIpIfIndex, basDocsDevServerSlot=basDocsDevServerSlot, basDocsDevSlot=basDocsDevSlot, basDocsDevFilterIpLPort=basDocsDevFilterIpLPort, basDocsDevIf=basDocsDevIf, basDocsDevFilterIpSmask=basDocsDevFilterIpSmask, basDocsDevRole=basDocsDevRole, basDocsDevFilterIpDefLPort=basDocsDevFilterIpDefLPort, basDocsDevFilter=basDocsDevFilter, basDocsDevEvControlSlot=basDocsDevEvControlSlot, basDocsDevEventTable=basDocsDevEventTable, basDocsDevFilterIpChassis=basDocsDevFilterIpChassis, basDocsDevFilterSlot=basDocsDevFilterSlot, basDocsDevSTPControl=basDocsDevSTPControl, basDocsDevEvEventChassis=basDocsDevEvEventChassis, basDocsDevSwTable=basDocsDevSwTable, basDocsDevSwIf=basDocsDevSwIf, basDocsDevEvControlChassis=basDocsDevEvControlChassis, basDocsDevServerTime=basDocsDevServerTime, basDocsDevEvTable=basDocsDevEvTable, basDocsDevSwOperStatus=basDocsDevSwOperStatus, basDocsDevLPort=basDocsDevLPort, basDocsDevEvLevel=basDocsDevEvLevel, basDocsDevNmAccessControl=basDocsDevNmAccessControl, basDocsDevFilterLLCMatches=basDocsDevFilterLLCMatches, basDocsDevEvLPort=basDocsDevEvLPort, basDocsDevChassis=basDocsDevChassis, basDocsDevBase=basDocsDevBase, basDocsDevSwLPort=basDocsDevSwLPort, basDocsDevFilterIpSourcePortHigh=basDocsDevFilterIpSourcePortHigh, basDocsDevFilterIpDestPortLow=basDocsDevFilterIpDestPortLow, basDocsDevEvControlIf=basDocsDevEvControlIf, basDocsDevSwEntry=basDocsDevSwEntry, basDocsDevEvText=basDocsDevEvText, basDocsDevFilterIf=basDocsDevFilterIf, basDocsDevEventEntry=basDocsDevEventEntry, basDocsDevServerIf=basDocsDevServerIf, basDocsDevNmAccessIpMask=basDocsDevNmAccessIpMask, basDocsDevSwAdminStatus=basDocsDevSwAdminStatus, basDocsDevFilterLLCStatus=basDocsDevFilterLLCStatus, basDocsDevEvIndex=basDocsDevEvIndex, basDocsDevFilterEntry=basDocsDevFilterEntry, basDocsDevFilterIpDefault=basDocsDevFilterIpDefault, basDocsDevEvFirstTime=basDocsDevEvFirstTime, basDocsDevEvControlEntry=basDocsDevEvControlEntry, basDocsDevEvThrottleAdminStatus=basDocsDevEvThrottleAdminStatus, basDocsDevFilterLLCIfIndex=basDocsDevFilterLLCIfIndex, basDocsDevFilterIpIndex=basDocsDevFilterIpIndex, basDocsDevFilterIpBroadcast=basDocsDevFilterIpBroadcast, basDocsDevEvEventIf=basDocsDevEvEventIf, basDocsDevEvSyslog=basDocsDevEvSyslog, basDocsDevEvThrottleInterval=basDocsDevEvThrottleInterval, basDocsDevFilterIpDefEntry=basDocsDevFilterIpDefEntry)
