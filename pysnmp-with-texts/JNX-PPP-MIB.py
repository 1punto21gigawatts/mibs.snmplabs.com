#
# PySNMP MIB module JNX-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JNX-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "InterfaceIndexOrZero")
Ipv6AddressIfIdentifier, = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressIfIdentifier")
jnxPppMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxPppMibRoot")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Integer32, iso, Unsigned32, Counter32, TimeTicks, ObjectIdentity, MibIdentifier, NotificationType, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "iso", "Unsigned32", "Counter32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "NotificationType", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
jnxPppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1))
jnxPppMIB.setRevisions(('2013-09-19 00:00', '2013-06-13 00:00', '2012-06-08 00:00', '2011-11-29 00:00', '2010-07-22 09:42',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxPppMIB.setRevisionsDescriptions(('Updated the revision history and LAST-UPDATED field.', 'Deprecated InterfaceIndex type and added InterfaceIndexOrZero type for jnxPppNextIfIndex, jnxPppMlPppNextLinkIfIndex and jnxPppMlPppNextNetworkIfIndex.', 'Changes are done to change all Data packet/octet counters from 32 to 64 bit counter. 32 bit counters were too small for data packets/octects and were consumed too early. All old counters are deprecated and new counters are added.', 'Deprecated Integer32 type jnxPppLinkStatusLocalMagicNumber, jnxPppLinkStatusRemoteMagicNumber and added Unsigned32 type jnxPppLinkStatusLocalMagicNumber1, jnxPppLinkStatusLocalMagicNumber1 under jnxPppLinkStatusTable', 'Initial version.',))
if mibBuilder.loadTexts: jnxPppMIB.setLastUpdated('201309190942Z')
if mibBuilder.loadTexts: jnxPppMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxPppMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: jnxPppMIB.setDescription('The Point-to-Point Protocol (PPP) MIB for the Juniper enterprise.')
class JnxPppAuthentication(TextualConvention, Integer32):
    description = 'Specifies the type(s) of PPP authentication used, if any: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("pap", 1), ("chap", 2), ("papChap", 3), ("chapPap", 4))

class JnxPppMlPppBundleName(TextualConvention, OctetString):
    description = 'MLPPP Bundle name. The bundle name is a characteristic of a MLPPP network interface.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 60)

class JnxPppAuthentication2(TextualConvention, Integer32):
    description = 'Specifies the type(s) of PPP authentication used, if any: none No authentication is negotiated. pap PAP negotiation. chap CHAP negotiation. eap EAP negotiation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("pap", 1), ("chap", 2), ("eap", 3))

class JnxNibbleConfig(TextualConvention, Integer32):
    description = 'A configuration variable comprised of nibbles i.e. 4 bits, such that a client can supply a list of 0 to 8 selections. The least significant nibble is the first value of the list, and the most significant nibble is the last value. The value in each field ranges from 0 to 15, however the first nibble with value 0 indicates the end of the list. Repetition of values is not allowed. Segregation of values in not allowed. Example valid encoding: 0x00000321 0x00083E12 Not a valid encoding: 0x00000121 will return an error 0x01002001 will return an error.'
    status = 'current'

jnxPPPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1))
jnxPppLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1))
jnxPppSec = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 2))
jnxPppIp = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3))
jnxPppOsi = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4))
jnxPppSession = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5))
jnxPppMlPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6))
jnxPppSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7))
jnxPppIpv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8))
jnxPppGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 9))
jnxPppLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxPppLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusTable.setDescription('This table contains entries for PPP interfaces present in the system.')
jnxPppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusEntry.setDescription('Each entry describes the characteristics of a PPP interface.')
jnxPppLinkStatusTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("adminDisable", 2), ("lowerLayerDown", 3), ("noUpperInterface", 4), ("authenticationFailure", 5), ("peerTerminated", 6), ("peerRenegotiated", 7), ("maxRetriesExceeded", 8), ("negotiationFailure", 9), ("keepaliveFailure", 10), ("sessionTimeout", 11), ("inactivityTimeout", 12), ("addressLeaseExpired", 13), ("adminLogout", 14), ("tunnelFailed", 15), ("tunnelDisconnected", 16), ("loopback", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusTerminateReason.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusTerminateReason.setDescription('Reason the PPP link was terminated: none None. other Not specified. adminDisable Interface administratively disabled. lowerLayerDown Underlying interface is down. noUpperInterface No interface above PPP. authenticationFailure Authentication failed. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate LCP option. keepaliveFailure Keepalive failed. sessionTimeout Maximum session period expired. inactivityTimeout Maximum inactivity period expired. addressLeaseExpired Lease for network address expired. adminLogout Session administratively terminated. tunnelFailed Associated tunnel failed. tunnelDisconnected Associated tunnel disconnected. loopback Loopback detected.')
jnxPppLinkStatusTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localMru", 2), ("remoteMru", 3), ("localMagicNumber", 4), ("remoteMagicNumber", 5), ("localAuthentication", 6), ("localToRemoteProtocolCompression", 7), ("localToRemoteACCompression", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusTerminateNegFailOption.setDescription('Reports the PPP LCP option for which negotiation failed, when jnxPppLinkStatusTerminateReason has the value negotiationFailure.')
jnxPppLinkStatusInKeepaliveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusInKeepaliveRequests.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusInKeepaliveRequests.setDescription('Number of keepalive requests received.')
jnxPppLinkStatusOutKeepaliveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusOutKeepaliveRequests.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusOutKeepaliveRequests.setDescription('Number of keepalive requests transmitted.')
jnxPppLinkStatusInKeepaliveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusInKeepaliveReplies.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusInKeepaliveReplies.setDescription('Number of keepalive replies received.')
jnxPppLinkStatusOutKeepaliveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusOutKeepaliveReplies.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusOutKeepaliveReplies.setDescription('Number of keepalive replies transmitted.')
jnxPppLinkStatusKeepaliveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusKeepaliveFailures.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusKeepaliveFailures.setDescription('Number of keepalive failures detected.')
jnxPppLinkStatusLocalMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusLocalMagicNumber.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPppLinkStatusLocalMagicNumber.setDescription('Magic number negotiated for the local side. This has been deprecated and replaced by jnxPppLinkStatusLocalMagicNumber1')
jnxPppLinkStatusRemoteMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusRemoteMagicNumber.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPppLinkStatusRemoteMagicNumber.setDescription('Magic number negotiated for the remote side. This has been deprecated and replaced by jnxPppLinkStatusRemoteMagicNumber1')
jnxPppLinkStatusLocalAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 10), JnxPppAuthentication2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusLocalAuthentication.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusLocalAuthentication.setDescription('Authentication protocol negotiated for the local side.')
jnxPppLinkStatusTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusTunnelIfIndex.setDescription('The ifIndex of an associated interface pertaining to a tunneling protocol, or zero if no such interface exists.The type of tunneling interface can be identified from information in the entries in ifTable and jnxIfTable for this tunnel interface.')
jnxPppLinkStatuslcpRenegoTerminates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatuslcpRenegoTerminates.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatuslcpRenegoTerminates.setDescription('Number of times lcp terminated due to peer exceeding max renegotiation attempts.')
jnxPppLinkStatusLocalMagicNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusLocalMagicNumber1.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusLocalMagicNumber1.setDescription('Magic number negotiated for the local side.')
jnxPppLinkStatusRemoteMagicNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusRemoteMagicNumber1.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkStatusRemoteMagicNumber1.setDescription('Magic number negotiated for the remote side.')
jnxPppLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2), )
if mibBuilder.loadTexts: jnxPppLinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigTable.setDescription('This table contains entries for PPP interfaces present in the system.')
jnxPppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppLinkConfigIfIndex"))
if mibBuilder.loadTexts: jnxPppLinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigEntry.setDescription('Each entry describes the characteristics of a PPP interface. Creating or deleting entries in this table causes corresponding entries for be created or deleted in ifTable,ifXTable,jnxIfTable.')
jnxPppLinkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppLinkConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigIfIndex.setDescription('The ifIndex of the PPP interface. When creating entries in this table, suitable values for this object are determined by reading jnxPppNextIfIndex.')
jnxPppLinkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigRowStatus.setDescription('Controls creation or deletion of entries in this table with READ-CREATE maximum access according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: jnxPppLinkConfigRowStatus jnxPppLinkConfigLowerIfIndex In addition, when creating an entry the following conditions must hold: A value for jnxPppLinkConfigIndex must have been determined previously, by reading jnxPppNextIfIndex.The interface identified by jnxPppLinkConfigLowerIfIndex must exist. A corresponding entry in Table or ifXTable or jnxIfTable is created or destroyed as a result of creating or destroying an entry in this table. The following values can be read from this object: active(1)')
jnxPppLinkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigLowerIfIndex.setDescription('The ifIndex of an interface over which this PPP interface is to be layered.A value of zero indicates no layering. An implementation may choose to require that a non-zero value be configured at entry creation.')
jnxPppLinkConfigKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64800)).clone(30)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigKeepalive.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigKeepalive.setDescription('Keepalive interval in seconds. A value of zero disables keepalive. Keepalive is performed using LCP Echo.')
jnxPppLinkConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 5), JnxPppAuthentication().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAuthentication.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPppLinkConfigAuthentication.setDescription('Specifies the type(s) of authentication, if any, to be negotiated with the peer: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP. If authentication negotiation is not supported for this PPP interface, then any attempt to explicitely set this object if READ-CREATE maximum access is supported will result in a notWritable error and it will be implicitily set to the DEFVAL on row creation. Setting this object to none(0) will set jnxPppLinkConfigAuthenticatorRouting Instance object to an empty string. This object returns a null(0) value on the get operation. New object jnxPppLinkConfigAuthentication2 will reflect the configured values. Setting this object along with the jnxPppLinkConfigAuthentication2 object will return an inconsistentValue error.')
jnxPppLinkConfigMaxAuthenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigMaxAuthenRetries.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigMaxAuthenRetries.setDescription('The number of authentication retries permitted, in addition to a failed initial attempt. If all retries fail, the link is reset. If authentication negotiation is not supported for this PPP interface, then any attempt to explicitely set this object if READ-CREATE maximum access is supported will result in a notWritable error and it will be implicitily set to the DEFVAL on row creation.')
jnxPppLinkConfigStandardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 7), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigStandardIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigStandardIfIndex.setDescription('The ifIndex value for this interface in the standard PPP MIBs. The ifIndex value for PPP interfaces is not the same for both proprietary and standard MIB tables pertaining to PPP interface. Therefore this value is provide to simply cross referencing standard PPP and proprietary PPP MIB information.')
jnxPppLinkConfigChapMinChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigChapMinChallengeLength.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigChapMinChallengeLength.setDescription('Minimum value of the CHAP authenticator challenge length value. This value is never greater than jnxPppLinkConfigChapMaxChallengeLength.')
jnxPppLinkConfigChapMaxChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigChapMaxChallengeLength.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigChapMaxChallengeLength.setDescription('Maximum value of the CHAP authenticator challenge length value. This value is never less than jnxPppLinkConfigChapMinChallengeLength.')
jnxPppLinkConfigPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigPassiveMode.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigPassiveMode.setDescription('When enabled, LCP state machine is forced into passive mode on lower layer UP message. It adds compatibility with slow and buggy clients.')
jnxPppLinkConfigAuthenticatorLogicalSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAuthenticatorLogicalSystem.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigAuthenticatorLogicalSystem.setDescription('The name of the logical system to be used for authentication on the PPP interface.With READ-CREATE maximum access , setting this object statically binds the authenticating logical system with the PPP interface. If this object is not explicitly set or it is set to null string, then this object is ignored and the virtual router used for authentication is determined by other means. On a Set operation, if the value of this object is not null and does not correspond to an existing virtual router, then an inconsistentValue error is returned. Setting this object to a non-null string returns inconsistentValue error if jnxPppLinkConfigAuthentication object is none(0) or not configured.')
jnxPppLinkConfigAuthenticatorRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAuthenticatorRoutingInstance.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigAuthenticatorRoutingInstance.setDescription('The name of the routing instancebe used for authentication on the PPP interface. With READ-CREATE maximum access, setting this object statically binds the authenticating routing instance with the PPP interface.If this object is not explicitly set or it is set to null string, then this object is ignored and the virtual router used for authentication is determined by other means. On a Set operation, if the value of this object is not null and does not correspond to an existing virtual router, then an inconsistentValue error is returned. Setting this object to a non-null string returns inconsistentValue error if jnxPppLinkConfigAuthentication object is none(0) or not configured.')
jnxPppLinkConfigAaaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAaaProfile.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigAaaProfile.setDescription('The name of the AAA profile to be used for authentication on the PPP interface. With READ-CREATE maximum access, setting this object statically binds the AAA profile with the PPP interface. If this object is not explicitly set or it is set to null string, then this object is ignored. On a Set operation, if the value of this object is not null and does not correspond to an existing AAA profile, then an inconsistentValue error is returned.')
jnxPppLinkConfigAuthentication2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 14), JnxNibbleConfig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAuthentication2.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigAuthentication2.setDescription('A configuration variable comprised of nibbles i.e. 4 bits, such that a client can supply a list of 0 to 8 selections. The least significant nibble is the first value of the list, and the most significant nibble is the last value. The value in each field ranges from 0 to 15, however the first nibble with value 0 indicates the end of the list. Repetition of values is not allowed. Segregation of values is not allowed. Valid Values are: none - 0 pap - 1 chap - 2 eap - 3 Example valid encoding: 0x00000321 0x00000012 Not a valid encoding: 0x00000121 0x01002001 If authentication negotiation is not supported for this PPP interface and with READ-CREATE maximum access ,any attempt to explicitly set this object will result in a notWritable error and it will be implicitly set to the DEFVAL on row creation. Setting this object to null will set jnxPppLinkConfigAuthenticatorRoutingInstance object to an empty string. Setting this object along with the jnxPppLinkConfigAuthentication object will return an inconsistentValue error.')
jnxPppLinkConfigIgnoreMagicNumberMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigIgnoreMagicNumberMismatch.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigIgnoreMagicNumberMismatch.setDescription('The ignore magic number mismatch option of the PPP interface determines the action to be taken, when the peer has not negotiated any value yet sent null or invalid magic number in the LCP echo packets. The two actions that can be configured are: 1) Ignore the mismatch and retain connection 2) Disallow the mismatch and terminate connection')
jnxPppLinkConfigMaxLcpRenegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigMaxLcpRenegotiation.setStatus('current')
if mibBuilder.loadTexts: jnxPppLinkConfigMaxLcpRenegotiation.setDescription('Maximum number of allowed lcp renegotiation attempts from peer.')
jnxPppNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in the jnxPppLinkConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available.This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
jnxPppIpTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1), )
if mibBuilder.loadTexts: jnxPppIpTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpTable.setDescription('Table containing the IP parameters for the local PPP entity.')
jnxPppIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppIpEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpEntry.setDescription('IPCP status information for a particular PPP link.')
jnxPppIpServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpServiceStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpServiceStatus.setDescription('Indicates whether IP protocol service is operating over this PPP link. Service is established on this link through means outside this MIB.')
jnxPppIpTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpTerminateReason.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpTerminateReason.setDescription('Reason the IPCP link was terminated: none None. other Not specified. noService No IP service configured on this PPP link. admin Administratively disabled. linkDown Underlying link is down. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate IPCP option. See jnxPppIpTerminateNegFailOption.')
jnxPppIpTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localIpAddress", 2), ("remoteIpAddress", 3), ("remotePrimaryDnsAddress", 4), ("remoteSecondaryDnsAddress", 5), ("remotePrimaryWinsAddress", 6), ("remoteSecondaryWinsAddress", 7), ("localIpAddressMask", 8), ("remoteIpAddressMask", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpTerminateNegFailOption.setDescription("Reports the PPP IPCP option for which negotiation failed, when jnxPppIpTerminateReason has the value 'negotiationFailure'.")
jnxPppIpLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpLocalIpAddress.setDescription('IP Address used by the local side.')
jnxPppIpRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpRemoteIpAddress.setDescription('IP Address used by the remote side.')
jnxPppIpRemotePrimaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemotePrimaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpRemotePrimaryDnsAddress.setDescription('Primary DNS server used by the remote side.')
jnxPppIpRemoteSecondaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemoteSecondaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpRemoteSecondaryDnsAddress.setDescription('Secondary DNS server used by the remote side.')
jnxPppIpRemotePrimaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemotePrimaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpRemotePrimaryWinsAddress.setDescription('Primary WINS server used by the remote side.')
jnxPppIpRemoteSecondaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemoteSecondaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpRemoteSecondaryWinsAddress.setDescription('Secondary WINS server used by the remote side.')
jnxPppIpNetworkStatusIpcpRenegoTerminates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpNetworkStatusIpcpRenegoTerminates.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpNetworkStatusIpcpRenegoTerminates.setDescription('Number of times ipcp terminated due to peer exceeding max renegotiation attempts.')
jnxPppIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2), )
if mibBuilder.loadTexts: jnxPppIpConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigTable.setDescription('Table containing the IP parameters for the local PPP entity.')
jnxPppIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppIpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigEntry.setDescription('IPCP configuration information for a particular PPP link.')
jnxPppIpConfigPeerDnsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigPeerDnsPriority.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigPeerDnsPriority.setDescription("When enabled, allows peer's DNS address to prevail in the event of a negotiation conflict; when disabled, the local PPP interface's DNS address prevails.")
jnxPppIpConfigPeerWinsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigPeerWinsPriority.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigPeerWinsPriority.setDescription("When enabled, allows peer's WINS address to prevail in the event of a negotiation conflict; when disabled, the local PPP interface's WINS address prevails.")
jnxPppIpConfigIpcpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigIpcpNetmask.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigIpcpNetmask.setDescription('Enables the negotiation of the IPCP option netmask (0x90) during IPCP negotiation.')
jnxPppIpConfigInitiateIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigInitiateIp.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigInitiateIp.setDescription('Enables the initiation of negotiation of the IPCP.')
jnxPppIpConfigMaxIpcpRenegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigMaxIpcpRenegotiation.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigMaxIpcpRenegotiation.setDescription('Maximum number of allowed ipcp renegotiation attempts from peer.')
jnxPppIpConfigPromptIpcpDnsOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigPromptIpcpDnsOption.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigPromptIpcpDnsOption.setDescription('Control prompting of IPCP DNS option to remote peer.')
jnxPppIpConfigIpcpLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigIpcpLockout.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpConfigIpcpLockout.setDescription('Enables IPCP lockout. It determines whether this NCP can be negotiated when the interface is already running a different NCP. On enabling this option, the IPCP negotiation will be blocked after a different NCP service is up and waited for 10 seconds for IPCP initiation from peer.')
jnxPppOsiTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1), )
if mibBuilder.loadTexts: jnxPppOsiTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiTable.setDescription('Table containing the OSI parameters for the local PPP entity.')
jnxPppOsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppOsiEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiEntry.setDescription('OSICP status information for a particular PPP link.')
jnxPppOsiServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiServiceStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiServiceStatus.setDescription('Indicates whether OSI protocol service is operating over this PPP link. Service is established on this link through means outside this MIB.')
jnxPppOsiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("notOpened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiOperStatus.setDescription('The operational status of the OSI network protocol. If the value of this object is up then the finite state machine for the OSI network protocol has reached the Opened state.')
jnxPppOsiTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiTerminateReason.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiTerminateReason.setDescription('Reason the OSICP link was terminated: none None. other Not specified. noService No OSI service configured on this PPP link. admin Administratively disabled. linkDown Underlying link is down. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate IPCP option. See jnxPppOsiTerminateNegFailOption.')
jnxPppOsiTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localAlignNpdu", 2), ("remoteAlignNpdu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiTerminateNegFailOption.setDescription("Reports the PPP OSICP option for which negotiation failed, when jnxPppOsiTerminateReason has the value 'negotiationFailure'.")
jnxPppOsiLocalAlignNpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("oneModulo4", 1), ("twoModulo4", 2), ("threeModulo4", 3), ("fourModulo4", 4), ("even", 254), ("odd", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiLocalAlignNpdu.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiLocalAlignNpdu.setDescription('Local alignment of network PDU: none No alignment specified. oneModulo4 Alignment on first octet (out of four). twoModulo4 Alignment on second octet (out of four). threeModulo4 Alignment on third octet (out of four). fourModulo4 Alignment on fourth octet (out of four). even Alignment on even-octet boundary. odd Alignment on odd-octet boundary.')
jnxPppOsiRemoteAlignNpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("oneModulo4", 1), ("twoModulo4", 2), ("threeModulo4", 3), ("fourModulo4", 4), ("even", 254), ("odd", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiRemoteAlignNpdu.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiRemoteAlignNpdu.setDescription('Remote alignment of network PDU. none No alignment specified. oneModulo4 Alignment on first octet (out of four). twoModulo4 Alignment on second octet (out of four). threeModulo4 Alignment on third octet (out of four). fourModulo4 Alignment on fourth octet (out of four). even Alignment on even-octet boundary. odd Alignment on odd-octet boundary.')
jnxPppOsiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 2), )
if mibBuilder.loadTexts: jnxPppOsiConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiConfigTable.setDescription('Table containing configuration variables for the OSICP for the local PPP entity.')
jnxPppOsiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppOsiConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiConfigEntry.setDescription('OSICP information for a particular PPP link.')
jnxPppOsiConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppOsiConfigAdminStatus.setDescription("The immediate desired status of the OSI network protocol. Setting this object to open will inject an administrative open event into the OSI network protocol's finite state machine. Setting this object to close will inject an administrative close event into the OSI network protocol's finite state machine.")
jnxPppSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1), )
if mibBuilder.loadTexts: jnxPppSessionTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionTable.setDescription('This table contains entries for PPP interfaces present in the system.')
jnxPppSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppSessionEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionEntry.setDescription('Each entry describes the characteristics of a PPP interface.')
jnxPppSessionGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionGrant.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionGrant.setDescription('Indicates whether a session has been granted via the authentication mechanism.')
jnxPppSessionTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("userRequest", 2), ("keepaliveFailure", 3), ("sessionTimeout", 4), ("inactivityTimeout", 5), ("adminDisable", 6), ("lowerLayerDown", 7), ("noUpperInterface", 8), ("deny", 9), ("noHardware", 10), ("noResources", 11), ("noInterface", 12), ("challengeTimeout", 13), ("requestTimeout", 14), ("authenticatorTimeout", 15), ("addressLeaseExpired", 16), ("adminLogout", 17), ("tunnelFailed", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionTerminateReason.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionTerminateReason.setDescription('The reason the session was terminated.')
jnxPppSessionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionStartTime.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionStartTime.setDescription('The value of sysUpTime when this session last became active.')
jnxPppSessionInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 4), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInOctets.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPppSessionInOctets.setDescription('Number of octets received since this session last became active, as denoted by jnxPppSessionStartTime. This has been deprecated and replaced by jnxPppSessionInOctets64')
jnxPppSessionOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionOutOctets.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPppSessionOutOctets.setDescription('Number of octets sent since this session last became active, as denoted by jnxPppSessionStartTime. This has been deprecated and replaced by jnxPppSessionOutOctets64')
jnxPppSessionInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInPackets.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPppSessionInPackets.setDescription('Number of packets received since this session last became active, as denoted by jnxPppSessionStartTime. This has been deprecated and replaced by jnxPppSessionInPackets64')
jnxPppSessionOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionOutPackets.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPppSessionOutPackets.setDescription('Number of packets sent since this session last became active, as denoted by jnxPppSessionStartTime. This has been deprecated and replaced by jnxPppSessionOutPackets64')
jnxPppSessionSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionSessionTimeout.setDescription('Maximum duration for the session, after which the session terminates automatically.')
jnxPppSessionInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionInactivityTimeout.setDescription('Maximum inactivity duration for the session, after which the session terminates automatically.')
jnxPppSessionAccountingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionAccountingInterval.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionAccountingInterval.setDescription('Interval that must elapse between generation of accounting records for this session.')
jnxPppSessionRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionRemoteIpAddress.setDescription('Remote IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
jnxPppSessionRemotePrimaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemotePrimaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionRemotePrimaryDnsAddress.setDescription('Remote primary DNS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
jnxPppSessionRemoteSecondaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemoteSecondaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionRemoteSecondaryDnsAddress.setDescription('Remote secondary DNS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
jnxPppSessionRemotePrimaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemotePrimaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionRemotePrimaryWinsAddress.setDescription('Remote primary WINS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
jnxPppSessionRemoteSecondaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemoteSecondaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionRemoteSecondaryWinsAddress.setDescription('Remote secondary WINS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
jnxPppSessionRemoteIpv6AddressIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 16), Ipv6AddressIfIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemoteIpv6AddressIfIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionRemoteIpv6AddressIfIdentifier.setDescription('IPV6 Address Interface Identifier obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
jnxPppSessionInhibitIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInhibitIp.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionInhibitIp.setDescription('Indicates whether a session has had its IP service inhibited by the authentication mechanism.')
jnxPppSessionInhibitIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInhibitIpv6.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionInhibitIpv6.setDescription('Indicates whether a session has had its IPv6 service inhibited by the authentication mechanism.')
jnxPppSessionInOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 19), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInOctets64.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionInOctets64.setDescription('Number of octets received since this session last became active, as denoted by jnxPppSessionStartTime.')
jnxPppSessionOutOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 20), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionOutOctets64.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionOutOctets64.setDescription('Number of octets sent since this session last became active, as denoted by jnxPppSessionStartTime.')
jnxPppSessionInPackets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 21), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInPackets64.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionInPackets64.setDescription('Number of packets received since this session last became active, as denoted by jnxPppSessionStartTime.')
jnxPppSessionOutPackets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 22), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionOutPackets64.setStatus('current')
if mibBuilder.loadTexts: jnxPppSessionOutPackets64.setDescription('Number of packets sent since this session last became active, as denoted by jnxPppSessionStartTime.')
jnxPppMlPppBundleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1), )
if mibBuilder.loadTexts: jnxPppMlPppBundleTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppBundleTable.setDescription('This table contains entries for MLPPP bundles present in the system.')
jnxPppMlPppBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppMlPppBundleName"))
if mibBuilder.loadTexts: jnxPppMlPppBundleEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppBundleEntry.setDescription('Each entry describes the characteristics of a MLPPP bundle.')
jnxPppMlPppBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1, 1, 1), JnxPppMlPppBundleName())
if mibBuilder.loadTexts: jnxPppMlPppBundleName.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppBundleName.setDescription('The administrative name of the MLPPP bundle associated with this MLPPP network interface.')
jnxPppMlPppBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppBundleRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppBundleRowStatus.setDescription('The rowStatus for this entry. The following sets are supported with read-create maximum access: createAndGo(4), destroy(6) The following values can be read from this object: active(1) ')
jnxPppMlPppBundleNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppBundleNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppBundleNetworkIfIndex.setDescription('The ifIndex of this MLPPP network interface. It is a valid ifIndex even if there is no corresponding network interface instance in the jnxPppMlPppLinkConfigTable.')
jnxPppMlPppNextLinkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNextLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppNextLinkIfIndex.setDescription('Coordinate ifIndex value allocation for entries in jnxPppMlPppLinkConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
jnxPppMlPppLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3), )
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigTable.setDescription('This table contains entries for MLPPP interfaces present in the system.')
jnxPppMlPppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppMlPppLinkConfigIfIndex"))
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigEntry.setDescription('Each entry describes the characteristics of MLPPP interface. With read-create maximum access,creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/jnxIfTable.')
jnxPppMlPppLinkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigIfIndex.setDescription('The ifIndex of the MLPPP interface. When creating entries in this table, suitable values for this object are determined by reading jnxPppMlPppNextLinkIfIndex.')
jnxPppMlPppLinkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigLowerIfIndex.setDescription('The ifIndex of an interface over which this PPP interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a non-zero value be configured at entry creation.')
jnxPppMlPppLinkConfigKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 64800), )).clone(30)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigKeepalive.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigKeepalive.setDescription('Keepalive interval in seconds. A value of zero disables keepalive. Keepalive is performed using LCP Echo.')
jnxPppMlPppLinkConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 5), JnxPppAuthentication().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthentication.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthentication.setDescription('Specifies the type(s) of authentication, if any, to be negotiated with the peer: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP. If authentication negotiation is not supported for this MLPPP interface, then any attempt to explicitely set this object will result in a notWritable error and it will be implicitily set to the DEFVAL on row creation. This object returns a none (0) value on the get operation. New object jnxPppMlPppLinkConfigAuthentication2 will reflect the configured values. Setting this object along with the jnxPppMlPppLinkConfigAuthentication2 object will return an inconsistentValue error.')
jnxPppMlPppLinkConfigMaxAuthenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMaxAuthenRetries.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMaxAuthenRetries.setDescription('The number of authentication retries permitted, in addition to a failed initial attempt. If all retries fail, the link is reset.')
jnxPppMlPppLinkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 7), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigRowStatus.setDescription('Controls creation/deletion of entries in this table with read-carete maximum access,according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: jnxPppMlPppLinkConfigRowStatus jnxPppMlPppLinkConfigLowerIfIndex In addition, when creating an entry the following conditions must hold: A value for jnxPppMlPppLinkConfigIndex must have been determined previously, by reading jnxPppMlPppNextIfIndex. The interface identified by jnxPppMlPppLinkConfigLowerIfIndex must exist. A corresponding entry in ifTable/ifXTable/jnxIfTable is created/destroyed as a result of creating/destroying an entry in this table. The following values can be read from this object: active(1) ')
jnxPppMlPppLinkConfigAaaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAaaProfile.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAaaProfile.setDescription('The name of the AAA profile to be used for authentication on the PPP interface.Setting this object statically binds the AAA profile with the PPP interface. If this object is not explicitly set or it is set to null string, then this object is ignored. On a Set operation, if the value of this object is not null and does not correspond to an existin AAA profile, then an inconsistentValue error is returned.')
jnxPppMlPppLinkConfigChapMinChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigChapMinChallengeLength.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigChapMinChallengeLength.setDescription('Minimum value of the CHAP authenticator challenge length value. This value is never allowed to be set to a value greater than jnxPppMlPppLinkConfigChapMaxChallengeLength.')
jnxPppMlPppLinkConfigChapMaxChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigChapMaxChallengeLength.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigChapMaxChallengeLength.setDescription('Maximum value of the CHAP authenticator challenge length value.')
jnxPppMlPppLinkConfigPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigPassiveMode.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigPassiveMode.setDescription('When enabled, LCP state machine is forced into passive mode on lower layer UP message. It adds compatibility with slow and buggy clients.')
jnxPppMlPppLinkConfigAuthenticatorLogicalSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthenticatorLogicalSystem.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthenticatorLogicalSystem.setDescription('The name of the Logical System (Jnxper-ROUTER-MIB.jnxRouterName) to be used for authentication on the PPP interface. Setting this object statically binds the authenticating virtual router with the link interface. With read-create maximum access, if this object is not explicitly set or it is set to null string, then this object is ignored and the virtual router used for authentication is determined by other means. On a Set operation, if the value of this object is not null and does not correspond to an existing virtual router, then an inconsistentValue error is returned.')
jnxPppMlPppLinkConfigAuthenticatorRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthenticatorRoutingInstance.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthenticatorRoutingInstance.setDescription('The name of the Routing Instance (Jnxper-ROUTER-MIB.jnxRouterName) to be used for authentication on the PPP interface. Setting this object statically binds the authenticating virtual router with the link interface. With read-create maximum access, if this object is not explicitly set or it is set to null string, then this object is ignored and the virtual router used for authentication is determined by other means. On a Set operation, if the value of this object is not null and does not correspond to an existing virtual router, then an inconsistentValue error is returned.')
jnxPppMlPppLinkConfigFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigFragmentation.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigFragmentation.setDescription('Enables MLPPP fragmentation.With read-create maximum access, changing this object has an effect when the link is next restarted.')
jnxPppMlPppLinkConfigReassembly = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigReassembly.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigReassembly.setDescription('Enables MLPPP reassembly. With read-create maximum access, changing this object has an effect when the link is next restarted.')
jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(64, 65535), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit.setDescription('The Maximum Receive Reconstructed Unit (MRRU) that the local PPP entity will advertise to the remote entity. If the value of this variable is 1, then the MRRU is set to the local MRU value. With read-create maximum access, changing this object has an effect when the link is next restarted.')
jnxPppMlPppLinkConfigFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(128, 65535), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigFragmentSize.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigFragmentSize.setDescription("The size of fragments transmitted by the local PPP entity. If the value of this variable is 1, then the fragment size is set to the link's MTU value. With read-create maximum access, changing this object has an effect when the link is next restarted.")
jnxPppMlPppLinkConfigHashLinkSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigHashLinkSelection.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigHashLinkSelection.setDescription('Enables MLPPP hash-based link selection for non-best-effort traffic. With read-create maximum access,changing this object has an effect when the link is next restarted.')
jnxPppMlPppLinkConfigAuthentication2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 19), JnxNibbleConfig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthentication2.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthentication2.setDescription('A configuration variable comprised of nibbles i.e. 4 bits, such that a client can supply a list of 0 to 8 selections. The least significant nibble is the first value of the list, and the most significant nibble is the last value. The value in each field ranges from 0 to 15, however the first nibble with value 0 indicates the end of the list. Repetition of values is not allowed. Segregation of values is not allowed. Valid Values are: none - 0 pap - 1 chap - 2 eap - 3 Example valid encoding: 0x00000321 0x00000012 Not a valid encoding: 0x00000121 0x01002001 If authentication negotiation is not supported for this PPP interface and With read-create maximum access, then any attempt to explicitly set this object will result in a notWritable error and it will be implicitly set to the DEFVAL on row creation. Setting this object to null will set jnxPppMlPppLinkConfigAuthenticatorVirtualRouter object to an empty string.Setting this object along with the jnxPppMlPppLinkConfigAuthentication object will return an i nconsistentValue error.')
jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch.setDescription('The ignore magic number mismatch option of the PPP interface determines the action to be taken, when the peer has not negotiated any value yet sent null or invalid magic number in the LCP echo packets. The two actions that can be configured are: 1) Ignore the mismatch and retain connection 2) Disallow the mismatch and terminate connection')
jnxPppMlPppLinkConfigMultilinkMulticlass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMultilinkMulticlass.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMultilinkMulticlass.setDescription('Enables Multiclass Multilink PPP (MCML). With read-create maximum access,changing this object has an effect when the link is next restarted.')
jnxPppMlPppLinkConfigMultilinkMaxMultiClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMultilinkMaxMultiClasses.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMultilinkMaxMultiClasses.setDescription('Maximum number of MCML classes to be negotiated.With read-create maximum access,changing this object has an effect when the link is next restarted.')
jnxPppMlPppNextNetworkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNextNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppNextNetworkIfIndex.setDescription('Coordinate ifIndex value allocation for entries in jnxPppMlPppNetworkConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
jnxPppMlPppNetworkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5), )
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigTable.setDescription('This table contains entries for MLPPP network interfaces present in the system.')
jnxPppMlPppNetworkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppMlPppNetworkConfigIfIndex"))
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigEntry.setDescription('Each entry describes the characteristics of MLPPP interface. With read-create maximum access,creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/jnxIfTable.')
jnxPppMlPppNetworkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigIfIndex.setDescription('The ifIndex of the MLPPP network interface. When creating entries in this table, suitable values for this object are determined by reading jnxPppMlPppNextNetworkIfIndex.')
jnxPppMlPppNetworkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigLowerIfIndex.setDescription('The ifIndex of a PPP link interface over which this PPP network interface is to be layered. On sets, the value of this object must equal on of the previously created PPP link interfaces created in the jnxPppMlPppLinkConfigTable. On gets, the value of this object is the lexicographically least PPP link interface in a potential bundle of PPP link interfaces.')
jnxPppMlPppNetworkBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1, 3), JnxPppMlPppBundleName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNetworkBundleName.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppNetworkBundleName.setDescription('The MLPPP bundle name administratively assigned.')
jnxPppMlPppNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNetworkRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppNetworkRowStatus.setDescription('Controls creation/deletion of entries in this table with read-create maximum access , according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: jnxPppMlPppNetworkConfigLowerIfIndex jnxPppMlPppNetworkBundleName jnxPppMlPppNetworkConfigRowStatus In addition, when creating an entry the following conditions must hold: A value for jnxPppMlPppNetworkConfigIndex must have been determined previously, by reading jnxPppMlPppNextNetworkIfIndex. The interface identified by jnxPppMlPppNetworkConfigLowerIfInde must exist by a creation request to the jnxPppMlPppLinkConfigTable. The bundleName specified in jnxPppMlPppNetworkBundleName must have been created first in the jnxPppMlPppBundleTable. A corresponding entry in ifTable/ifXTable/jnxIfTable is created/destroyed as a result of creating/destroying an entry in this table. The following values can be read from this object: active(1) ')
jnxPppMlPppLinkBindTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6), )
if mibBuilder.loadTexts: jnxPppMlPppLinkBindTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkBindTable.setDescription('This table contains entries for MLPPP Link interface to MLPPP network interfaces bindings.')
jnxPppMlPppLinkBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppMlPppBindNetworkIfIndex"), (0, "JNX-PPP-MIB", "jnxPppMlPppBindLinkIfIndex"))
if mibBuilder.loadTexts: jnxPppMlPppLinkBindEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppLinkBindEntry.setDescription('Each entry describes the MLPPP link interface to MLPPP network interface bindings.')
jnxPppMlPppBindNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppMlPppBindNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppBindNetworkIfIndex.setDescription('The ifIndex of the MLPPP network interface.')
jnxPppMlPppBindLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppMlPppBindLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppBindLinkIfIndex.setDescription('The ifIndex of a MLPPP link interface bound by the MLPPP network interface defined by jnxPppMlPppBindNetworkIfIndex.')
jnxPppMlPppBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppMlPppBindRowStatus.setDescription('Controls creation/deletion of entries in this table with read-create maximum access, according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: jnxPppMlPppBindRowStatus In addition, when creating an entry the following conditions must hold: The interfaces identified by jnxPppMlPppBindNetworkIfIndex and jnxPppMlPppBindLinkIfIndex must be created in the jnxPppMlPppNetworkConfigTable and jnxPppMlPppLinkConfigTable respectively. A MLPPP bundle must be associated with the jnxPppMlPppNetworkIfIndex and exist in the jnxPppMibPppBundleTable. A corresponding entry in ifStackTable is created/destroyed as a result of creating/destroying an entry in this table. The following values can be read from this object: active(1) ')
jnxPppSummaryPppInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppInterfaceCount.setDescription('The total number of PPP interfaces configured in the system.')
jnxPppSummaryPppIpNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNCPs.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNCPs.setDescription('The total number IP NCPs configured in the system.')
jnxPppSummaryPppOsiNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNCPs.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNCPs.setDescription('The total number of OSI NCPs configured in the system.')
jnxPppSummaryPppIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfAdminUp.setReference('IF-MIB.ifAdminStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIfAdminUp.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIfAdminUp.setDescription('The total number of PPP interfaces in the system that are administratively configured to up(1).')
jnxPppSummaryPppIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfAdminDown.setReference('IF-MIB.ifAdminStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIfAdminDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIfAdminDown.setDescription('The total number of PPP interfaces in the system that are administrateively configued to down(2).')
jnxPppSummaryPppIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperUp.setReference('IF-MIB.ifOperstatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperUp.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperUp.setDescription('The total number of PPP interfaces in the system with an operational state of up(1).')
jnxPppSummaryPppIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperDown.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperDown.setDescription('The total number of PPP interfaces in the system with an operational state of down(2).')
jnxPppSummaryPppIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperDormant.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperDormant.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperDormant.setDescription('The total number of PPP interfaces in the system with an operational state of dormant(5).')
jnxPppSummaryPppIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfNotPresent.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIfNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIfNotPresent.setDescription('The total number of PPP interfaces in the system with an operational state of notPresent(6).')
jnxPppSummaryPppIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfLowerLayerDown.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIfLowerLayerDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIfLowerLayerDown.setDescription('The total number of PPP interfaces in the system with an operational state of lowerLayerDown(7).')
jnxPppSummaryPppIpNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpOpened.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpOpened.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpOpened.setDescription('The total number of PPP IP NCPs in the system with an operational state of opened(1).')
jnxPppSummaryPppIpNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpClosed.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpClosed.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpClosed.setDescription('The total number of PPP IP NCPs in the system with an operational state of not-opened(2).')
jnxPppSummaryPppOsiNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpOpened.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpOpened.setDescription('The total number of PPP OSI NCPs in the system with an operational state of opened.')
jnxPppSummaryPppOsiNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpClosed.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpClosed.setDescription('The total number of PPP OSI NCPs in the system with an operational state of closed.')
jnxPppSummaryPppIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIfLastChangeTime.setDescription('The value of the sysUpTime at the time of the last PPP interface creation or deletion in the system. If the number of PPP interfaces has been unchanged since the last re-initialization of the system, then this object contains a zero value. ')
jnxPppSummaryPppLinkInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkInterfaceCount.setDescription('The total number of PPP Link interfaces configured in the system.')
jnxPppSummaryPppLinkIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfAdminUp.setReference('IF-MIB.ifAdminStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfAdminUp.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfAdminUp.setDescription('The total number of PPP Link interfaces in the system that are administratively configured to up(1).')
jnxPppSummaryPppLinkIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfAdminDown.setReference('IF-MIB.ifAdminStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfAdminDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfAdminDown.setDescription('The total number of PPP Link interfaces in the system that are administrateively configued to down(2).')
jnxPppSummaryPppLinkIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperUp.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperUp.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperUp.setDescription('The total number of PPP Link interfaces in the system with an operational state of up(1).')
jnxPppSummaryPppLinkIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperDown.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperDown.setDescription('The total number of PPP Link interfaces in the system with an operational state of down(2).')
jnxPppSummaryPppLinkIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperDormant.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperDormant.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperDormant.setDescription('The total number of PPP Link interfaces in the system with an operational state of dormant(5).')
jnxPppSummaryPppLinkIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfNotPresent.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfNotPresent.setDescription('The total number of PPP link interfaces in the system with an operational state of notPresent(6).')
jnxPppSummaryPppLinkIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfLowerLayerDown.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfLowerLayerDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfLowerLayerDown.setDescription('The total number of PPP Link interfaces in the system with an operational state of lowerLayerDown(7).')
jnxPppSummaryPppLinkIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfLastChangeTime.setDescription('The value of the sysUpTime at the time of the last PPP Link interface creation or deletion in the system. If the number of PPP interfaces has been unchanged since the last re-initialization of the system, then this object contains a zero value. ')
jnxPppSummaryPppNetworkInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkInterfaceCount.setDescription('The total number of PPP network interfaces configured in the system.')
jnxPppSummaryPppNetworkIpNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNCPs.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNCPs.setDescription('The total number IP NCPs in the system configured on PPP network interfaces.')
jnxPppSummaryPppNetworkOsiNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNCPs.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNCPs.setDescription('The total number of OSI NCPs in the system configured on PPP network interfaces.')
jnxPppSummaryPppNetworkIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfAdminUp.setReference('IF-MIB.ifAdminStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfAdminUp.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfAdminUp.setDescription('The total number of PPP network interfaces in the system that are administratively configured to up(1).')
jnxPppSummaryPppNetworkIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfAdminDown.setReference('IF-MIB.ifAdminStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfAdminDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfAdminDown.setDescription('The total number of PPP network interfaces in the system that are administrateively configued to down(2).')
jnxPppSummaryPppNetworkIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperUp.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperUp.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperUp.setDescription('The total number of PPP network interfaces in the system with an operational state of up(1).')
jnxPppSummaryPppNetworkIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperDown.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperDown.setDescription('The total number of PPP network interfaces in the system with an operational state of down(2).')
jnxPppSummaryPppNetworkIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperDormant.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperDormant.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperDormant.setDescription('The total number of PPP network interfaces in the system with an operational state of dormant(5).')
jnxPppSummaryPppNetworkIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfNotPresent.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfNotPresent.setDescription('The total number of PPP network interfaces in the system with an operational state of notPresent(6).')
jnxPppSummaryPppNetworkIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfLowerLayerDown.setReference('IF-MIB.ifOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfLowerLayerDown.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfLowerLayerDown.setDescription('The total number of PPP network interfaces in the system with an operational state of lowerLayerDown(7).')
jnxPppSummaryPppNetworkIpNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpOpened.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpOpened.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpOpened.setDescription('The total number of PPP IP NCPs in the system with an operational state of opened(1).')
jnxPppSummaryPppNetworkIpNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpClosed.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpClosed.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpClosed.setDescription('The total number of PPP IP NCPs in the system with an operational state of not-opened(2).')
jnxPppSummaryPppNetworkOsiNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpOpened.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpOpened.setDescription('The total number of PPP OSI NCPs in the system with an operational state of opened.')
jnxPppSummaryPppNetworkOsiNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpClosed.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpClosed.setDescription('The total number of PPP OSI NCPs in the system with an operational state of closed.')
jnxPppSummaryPppNetworkIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 40), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfLastChangeTime.setDescription('The value of the sysUpTime at the time of the last PPP network interface creation or deletion in the system. If the number of PPP network interfaces has been unchanged since the last re-initialization of the system, then this object contains a zero value. ')
jnxPppSummaryPppIpv6NCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NCPs.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NCPs.setDescription('The total number IPv6 NCPs configured in the system.')
jnxPppSummaryPppIpv6NcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpOpened.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpOpened.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpOpened.setDescription('The total number of PPP IPv6 NCPs in the system with an operational state of opened(1).')
jnxPppSummaryPppIpv6NcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpClosed.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpClosed.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpClosed.setDescription('The total number of PPP IPv6 NCPs in the system with an operational state of not-opened(2).')
jnxPppSummaryPppNetworkIpv6NCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NCPs.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NCPs.setDescription('The total number IPv6 NCPs configured in the system.')
jnxPppSummaryPppNetworkIpv6NcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpOpened.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpOpened.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpOpened.setDescription('The total number of PPP IPv6 NCPs in the system with an operational state of opened(1).')
jnxPppSummaryPppNetworkIpv6NcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpClosed.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpClosed.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpClosed.setDescription('The total number of PPP IPv6 NCPs in the system with an operational state of not-opened(2).')
jnxPppSummaryPppStaticInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppStaticInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppStaticInterfaceCount.setDescription('The total number of static PPP interfaces configured in the system.')
jnxPppSummaryPppMplsNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNCPs.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNCPs.setDescription('The total number MPLS NCPs configured in the system.')
jnxPppSummaryPppIpAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpAdminOpen.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpAdminOpen.setDescription('The total number of IP NCPs in the system that are administratively configured to open(1).')
jnxPppSummaryPppIpAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpAdminClose.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpAdminClose.setDescription('The total number of IP NCPs in the system that are administratively configured to close(2).')
jnxPppSummaryPppIpv6AdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6AdminOpen.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6AdminOpen.setDescription('The total number of IPV6 NCPs in the system that are administratively configured to open(1).')
jnxPppSummaryPppIpv6AdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6AdminClose.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6AdminClose.setDescription('The total number of IPV6 NCPs in the system that are administratively configured to close(2).')
jnxPppSummaryPppOsiAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiAdminOpen.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppOsiAdminOpen.setDescription('The total number of OSI NCPs in the system that are administratively configured to open(1).')
jnxPppSummaryPppOsiAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiAdminClose.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppOsiAdminClose.setDescription('The total number of OSI NCPs in the system that are administratively configured to close(2).')
jnxPppSummaryPppMplsAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsAdminOpen.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppMplsAdminOpen.setDescription('The total number of MPLS NCPs in the system that are administratively configured to open(1).')
jnxPppSummaryPppMplsAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsAdminClose.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppMplsAdminClose.setDescription('The total number of MPLS NCPs in the system that are administratively configured to close(2).')
jnxPppSummaryPppIpNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpNotPresent.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpNotPresent.setDescription('The total number of PPP IP NCPs in the system with an operational state of notPresent(3).')
jnxPppSummaryPppIpNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpNoResources.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpNoResources.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpNoResources.setDescription('The total number of PPP IP NCPs in the system with an operational state of noResources(4).')
jnxPppSummaryPppIpv6NcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpNotPresent.setDescription('The total number of PPP IPV6 NCPs in the system with an operational state of notPresent(3).')
jnxPppSummaryPppIpv6NcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpNoResources.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpNoResources.setDescription('The total number of PPP IPV6 NCPs in the system with an operational state of noResources(4).')
jnxPppSummaryPppOsiNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpNotPresent.setDescription('The total number of PPP OSI NCPs in the system with an operational state of notPresent(3).')
jnxPppSummaryPppOsiNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpNoResources.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpNoResources.setDescription('The total number of PPP OSI NCPs in the system with an operational state of noResources(4).')
jnxPppSummaryPppMplsNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpOpened.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpOpened.setDescription('The total number of PPP MPLS NCPs in the system with an operational state of opened(1).')
jnxPppSummaryPppMplsNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpClosed.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpClosed.setDescription('The total number of PPP MPLS NCPs in the system with an operational state of not-opened(2).')
jnxPppSummaryPppMplsNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpNotPresent.setDescription('The total number of PPP MPLS NCPs in the system with an operational state of notPresent(3).')
jnxPppSummaryPppMplsNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpNoResources.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpNoResources.setDescription('The total number of PPP MPLS NCPs in the system with an operational state of noResources(4).')
jnxPppSummaryPppLinkStaticInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkStaticInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppLinkStaticInterfaceCount.setDescription('The total number of static PPP Link interfaces configured in the system.')
jnxPppSummaryPppNetworkStaticInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkStaticInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkStaticInterfaceCount.setDescription('The total number of static PPP network interfaces configured in the system.')
jnxPppSummaryPppNetworkMplsNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNCPs.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNCPs.setDescription('The total number of MPLS NCPs in the system configured on PPP network interfaces.')
jnxPppSummaryPppNetworkIpAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpAdminOpen.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpAdminOpen.setDescription('The total number of IP NCPs in the system configured on PPP network interfaces that are administratively configured to open(1).')
jnxPppSummaryPppNetworkIpAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpAdminClose.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpAdminClose.setDescription('The total number of IP NCPs in the system configured on PPP network interfaces that are administratively configured to close(2).')
jnxPppSummaryPppNetworkIpv6AdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6AdminOpen.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6AdminOpen.setDescription('The total number of IPV6 NCPs in the system configured on PPP network interfaces that are administratively configured to open(1).')
jnxPppSummaryPppNetworkIpv6AdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6AdminClose.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6AdminClose.setDescription('The total number of IPV6 NCPs in the system configured on PPP network interfaces that are administratively configured to close(2).')
jnxPppSummaryPppNetworkOsiAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiAdminOpen.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiAdminOpen.setDescription('The total number of OSI NCPs in the system configured on PPP network interfaces that are administratively configured to open(1).')
jnxPppSummaryPppNetworkOsiAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiAdminClose.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiAdminClose.setDescription('The total number of OSI NCPs in the system configured on PPP network interfaces that are administratively configured to close(2).')
jnxPppSummaryPppNetworkMplsAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsAdminOpen.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsAdminOpen.setDescription('The total number of MPLS NCPs in the system configured on PPP network interfaces that are administratively configured to open(1).')
jnxPppSummaryPppNetworkMplsAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsAdminClose.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsAdminClose.setDescription('The total number of MPLS NCPs in the system configured on PPP network interfaces that are administratively configured to close(2).')
jnxPppSummaryPppNetworkIpNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpNotPresent.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpNotPresent.setDescription('The total number of IP NCPs in the system configured on PPP network interfaces with an operational state of notPresent(3).')
jnxPppSummaryPppNetworkIpNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpNoResources.setReference('PPP-IP-NCP-MIB.pppIpOperStatus')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpNoResources.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpNoResources.setDescription('The total number of IP NCPs in the system configured on PPP network interfaces with an operational state of noResources(4).')
jnxPppSummaryPppNetworkIpv6NcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpNotPresent.setDescription('The total number of IPV6 NCPs in the system configured on PPP network interfaces with an operational state of notPresent(3).')
jnxPppSummaryPppNetworkIpv6NcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpNoResources.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpNoResources.setDescription('The total number of IPV6 NCPs in the system configured on PPP network interfaces with an operational state of noResources(4).')
jnxPppSummaryPppNetworkOsiNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpNotPresent.setDescription('The total number of OSI NCPs in the system configured on PPP network interfaces with an operational state of notPresent(3).')
jnxPppSummaryPppNetworkOsiNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpNoResources.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpNoResources.setDescription('The total number of OSI NCPs in the system configured on PPP network interfaces with an operational state of noResources(4).')
jnxPppSummaryPppNetworkMplsNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpOpened.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpOpened.setDescription('The total number of MPLS NCPs in the system configured on PPP network interfaces with an operational state of opened(1).')
jnxPppSummaryPppNetworkMplsNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpClosed.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpClosed.setDescription('The total number of MPLS NCPs in the system configured on PPP network interfaces with an operational state of not-opened(2).')
jnxPppSummaryPppNetworkMplsNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpNotPresent.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpNotPresent.setDescription('The total number of MPLS NCPs in the system configured on PPP network interfaces with an operational state of notPresent(3).')
jnxPppSummaryPppNetworkMplsNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpNoResources.setStatus('current')
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpNoResources.setDescription('The total number of MPLS NCPs in the system configured on PPP network interfaces with an operational state of noResources(4).')
jnxPppIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1), )
if mibBuilder.loadTexts: jnxPppIpv6Table.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6Table.setDescription('Table containing the IPv6 parameters for the local PPP entity.')
jnxPppIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppIpv6Entry.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6Entry.setDescription('IPV6CP status information for a particular PPP link.')
jnxPppIpv6ServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6ServiceStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6ServiceStatus.setDescription('Indicates whether IPv6 protocol service is operating over this PPP link. Service is established on this link through means outside this MIB.')
jnxPppIpv6OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("notOpened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6OperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6OperStatus.setDescription('The operational status of the IPv6 network protocol. If the value of this object is up then the finite state machine for the IPv6 network protocol has reached the Opened state.')
jnxPppIpv6TerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6TerminateReason.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6TerminateReason.setDescription('Reason the IPV6CP link was terminated: none None. other Not specified. noService No IPv6 service configured on this PPP link. admin Administratively disabled. linkDown Underlying link is down. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate IPV6CP option. See jnxPppIpv6TerminateNegFailOption.')
jnxPppIpv6TerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localIpv6AddressIfIdentifier", 2), ("remoteIpv6AddressIfIdentifier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6TerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6TerminateNegFailOption.setDescription("Reports the PPP IPV6CP option for which negotiation failed, when jnxPppIpv6TerminateReason has the value 'negotiationFailure'.")
jnxPppIpv6LocalIpv6AddressIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 5), Ipv6AddressIfIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6LocalIpv6AddressIfIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6LocalIpv6AddressIfIdentifier.setDescription('IPv6 Address Interface Identifier used by the local side.')
jnxPppIpv6RemoteIpv6AddressIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 6), Ipv6AddressIfIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6RemoteIpv6AddressIfIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6RemoteIpv6AddressIfIdentifier.setDescription('IPv6 Address Interface Identifier used by the remote side.')
jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates.setDescription('Number of times ipv6cp terminated due to peer exceeding max renegotiation attempts.')
jnxPppIpv6ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2), )
if mibBuilder.loadTexts: jnxPppIpv6ConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6ConfigTable.setDescription('Table containing the IPv6 parameters for the local PPP entity.')
jnxPppIpv6ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppIpv6ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6ConfigEntry.setDescription('IPV6CP configuration information for a particular PPP link.')
jnxPppIpv6ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6ConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6ConfigAdminStatus.setDescription("The immediate desired status of the IPv6 network protocol. Setting this object to open will inject an administrative open event into the IPv6 network protocol's finite state machine. Setting this object to close will inject an administrative close event into the IPv6 network protocol's finite state machine.")
jnxPppIpv6ConfigInitiateIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6ConfigInitiateIpv6.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6ConfigInitiateIpv6.setDescription('Enables the initiation of negotiation of the IPv6CP.')
jnxPppIpv6ConfigMaxIpv6cpRenegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6ConfigMaxIpv6cpRenegotiation.setStatus('current')
if mibBuilder.loadTexts: jnxPppIpv6ConfigMaxIpv6cpRenegotiation.setDescription('Maximum number of allowed ipv6cp renegotiation attempts from peer.')
jnxPppPeerIpAddressOptional = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppPeerIpAddressOptional.setStatus('current')
if mibBuilder.loadTexts: jnxPppPeerIpAddressOptional.setDescription("This option is used to ignore the conflicts between ppp client's requested IP address and radius/local pool returned address in server during IPNCP negotiation. Enabling this will ensure the IPNCP negotiation to succeed even though the client does not include IP address option in the IPNCP configure request.")
mibBuilder.exportSymbols("JNX-PPP-MIB", jnxPppIpv6RemoteIpv6AddressIfIdentifier=jnxPppIpv6RemoteIpv6AddressIfIdentifier, jnxPppSummaryPppNetworkOsiNcpClosed=jnxPppSummaryPppNetworkOsiNcpClosed, jnxPppSummaryPppStaticInterfaceCount=jnxPppSummaryPppStaticInterfaceCount, jnxPppMlPppNextNetworkIfIndex=jnxPppMlPppNextNetworkIfIndex, jnxPppMlPppNetworkConfigTable=jnxPppMlPppNetworkConfigTable, jnxPppSummaryPppIpAdminOpen=jnxPppSummaryPppIpAdminOpen, jnxPppSummaryPppNetworkOsiNcpNotPresent=jnxPppSummaryPppNetworkOsiNcpNotPresent, jnxPppSummaryPppIpNCPs=jnxPppSummaryPppIpNCPs, jnxPppSummaryPppIfLastChangeTime=jnxPppSummaryPppIfLastChangeTime, jnxPppMlPppBindNetworkIfIndex=jnxPppMlPppBindNetworkIfIndex, jnxPppMlPppLinkConfigMultilinkMulticlass=jnxPppMlPppLinkConfigMultilinkMulticlass, jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit=jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit, jnxPppSessionRemoteSecondaryDnsAddress=jnxPppSessionRemoteSecondaryDnsAddress, jnxPppSummaryPppIpv6AdminClose=jnxPppSummaryPppIpv6AdminClose, jnxPppIpTable=jnxPppIpTable, jnxPppSessionRemotePrimaryWinsAddress=jnxPppSessionRemotePrimaryWinsAddress, jnxPppMlPppLinkConfigKeepalive=jnxPppMlPppLinkConfigKeepalive, jnxPppSummaryPppIfAdminUp=jnxPppSummaryPppIfAdminUp, jnxPppMlPppNetworkRowStatus=jnxPppMlPppNetworkRowStatus, jnxPppLinkConfigChapMaxChallengeLength=jnxPppLinkConfigChapMaxChallengeLength, jnxPppSummaryPppIpNcpNotPresent=jnxPppSummaryPppIpNcpNotPresent, jnxPppSummaryPppNetworkStaticInterfaceCount=jnxPppSummaryPppNetworkStaticInterfaceCount, jnxPppMlPppLinkConfigPassiveMode=jnxPppMlPppLinkConfigPassiveMode, jnxPppOsi=jnxPppOsi, jnxPppMlPppLinkConfigChapMinChallengeLength=jnxPppMlPppLinkConfigChapMinChallengeLength, jnxPppLinkConfigKeepalive=jnxPppLinkConfigKeepalive, jnxPppSummaryPppNetworkIpNCPs=jnxPppSummaryPppNetworkIpNCPs, jnxPppSummaryPppNetworkMplsNcpClosed=jnxPppSummaryPppNetworkMplsNcpClosed, jnxPppIpv6OperStatus=jnxPppIpv6OperStatus, jnxPppSessionGrant=jnxPppSessionGrant, jnxPppMlPppNetworkBundleName=jnxPppMlPppNetworkBundleName, jnxPppIpTerminateNegFailOption=jnxPppIpTerminateNegFailOption, jnxPppSummaryPppNetworkIpNcpClosed=jnxPppSummaryPppNetworkIpNcpClosed, jnxPppIpServiceStatus=jnxPppIpServiceStatus, jnxPppSummaryPppNetworkMplsNcpNotPresent=jnxPppSummaryPppNetworkMplsNcpNotPresent, jnxPppSummaryPppMplsNcpNotPresent=jnxPppSummaryPppMplsNcpNotPresent, jnxPppLinkStatusInKeepaliveRequests=jnxPppLinkStatusInKeepaliveRequests, jnxPppSummaryPppNetworkIfLastChangeTime=jnxPppSummaryPppNetworkIfLastChangeTime, jnxPppSummaryPppLinkIfAdminDown=jnxPppSummaryPppLinkIfAdminDown, jnxPppSummary=jnxPppSummary, jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch=jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch, jnxPppLinkConfigLowerIfIndex=jnxPppLinkConfigLowerIfIndex, jnxPppLinkConfigChapMinChallengeLength=jnxPppLinkConfigChapMinChallengeLength, jnxPppIpv6ServiceStatus=jnxPppIpv6ServiceStatus, jnxPppIpNetworkStatusIpcpRenegoTerminates=jnxPppIpNetworkStatusIpcpRenegoTerminates, jnxPppSummaryPppNetworkOsiAdminClose=jnxPppSummaryPppNetworkOsiAdminClose, jnxPppSummaryPppNetworkIpv6AdminClose=jnxPppSummaryPppNetworkIpv6AdminClose, jnxPppMlPpp=jnxPppMlPpp, jnxPppLinkConfigIfIndex=jnxPppLinkConfigIfIndex, jnxPppSessionInPackets64=jnxPppSessionInPackets64, jnxPppSessionAccountingInterval=jnxPppSessionAccountingInterval, jnxPppSummaryPppIfOperUp=jnxPppSummaryPppIfOperUp, jnxPppLinkStatusOutKeepaliveReplies=jnxPppLinkStatusOutKeepaliveReplies, jnxPppSummaryPppLinkIfLastChangeTime=jnxPppSummaryPppLinkIfLastChangeTime, jnxPppLinkConfigTable=jnxPppLinkConfigTable, jnxPppMlPppBindRowStatus=jnxPppMlPppBindRowStatus, jnxPppSummaryPppNetworkOsiNcpOpened=jnxPppSummaryPppNetworkOsiNcpOpened, jnxPppSessionRemoteSecondaryWinsAddress=jnxPppSessionRemoteSecondaryWinsAddress, jnxPppMlPppLinkConfigIfIndex=jnxPppMlPppLinkConfigIfIndex, jnxPppSummaryPppNetworkIfOperDown=jnxPppSummaryPppNetworkIfOperDown, jnxPppMlPppLinkBindTable=jnxPppMlPppLinkBindTable, jnxPppIpConfigIpcpNetmask=jnxPppIpConfigIpcpNetmask, jnxPppSummaryPppNetworkIfAdminDown=jnxPppSummaryPppNetworkIfAdminDown, jnxPppIpConfigInitiateIp=jnxPppIpConfigInitiateIp, jnxPppOsiLocalAlignNpdu=jnxPppOsiLocalAlignNpdu, jnxPPPObjects=jnxPPPObjects, jnxPppLinkStatusOutKeepaliveRequests=jnxPppLinkStatusOutKeepaliveRequests, JnxPppAuthentication=JnxPppAuthentication, jnxPppOsiOperStatus=jnxPppOsiOperStatus, JnxNibbleConfig=JnxNibbleConfig, jnxPppLinkStatusRemoteMagicNumber=jnxPppLinkStatusRemoteMagicNumber, jnxPppLinkConfigPassiveMode=jnxPppLinkConfigPassiveMode, jnxPppIpRemoteSecondaryWinsAddress=jnxPppIpRemoteSecondaryWinsAddress, jnxPppSessionStartTime=jnxPppSessionStartTime, jnxPppSummaryPppIpNcpOpened=jnxPppSummaryPppIpNcpOpened, jnxPppSummaryPppNetworkIfOperUp=jnxPppSummaryPppNetworkIfOperUp, jnxPppMlPppLinkConfigAuthenticatorLogicalSystem=jnxPppMlPppLinkConfigAuthenticatorLogicalSystem, jnxPppSummaryPppMplsAdminOpen=jnxPppSummaryPppMplsAdminOpen, jnxPppSummaryPppOsiNcpNoResources=jnxPppSummaryPppOsiNcpNoResources, jnxPppIpv6TerminateNegFailOption=jnxPppIpv6TerminateNegFailOption, jnxPppSummaryPppIpv6NCPs=jnxPppSummaryPppIpv6NCPs, jnxPppLinkStatusTerminateReason=jnxPppLinkStatusTerminateReason, jnxPppSummaryPppNetworkIpNcpNoResources=jnxPppSummaryPppNetworkIpNcpNoResources, jnxPppSummaryPppIpNcpClosed=jnxPppSummaryPppIpNcpClosed, jnxPppMlPppBundleNetworkIfIndex=jnxPppMlPppBundleNetworkIfIndex, jnxPppSessionEntry=jnxPppSessionEntry, jnxPppMlPppBundleName=jnxPppMlPppBundleName, jnxPppMlPppLinkConfigFragmentSize=jnxPppMlPppLinkConfigFragmentSize, jnxPppLinkConfigMaxLcpRenegotiation=jnxPppLinkConfigMaxLcpRenegotiation, jnxPppSec=jnxPppSec, jnxPppLinkConfigMaxAuthenRetries=jnxPppLinkConfigMaxAuthenRetries, jnxPppIpConfigPromptIpcpDnsOption=jnxPppIpConfigPromptIpcpDnsOption, jnxPppSessionTerminateReason=jnxPppSessionTerminateReason, jnxPppLinkConfigEntry=jnxPppLinkConfigEntry, jnxPppLinkConfigAuthentication2=jnxPppLinkConfigAuthentication2, jnxPppMlPppLinkConfigAuthenticatorRoutingInstance=jnxPppMlPppLinkConfigAuthenticatorRoutingInstance, jnxPppSummaryPppNetworkIpAdminOpen=jnxPppSummaryPppNetworkIpAdminOpen, jnxPppIpRemoteSecondaryDnsAddress=jnxPppIpRemoteSecondaryDnsAddress, jnxPppSummaryPppNetworkIpv6NcpOpened=jnxPppSummaryPppNetworkIpv6NcpOpened, jnxPppSummaryPppOsiAdminClose=jnxPppSummaryPppOsiAdminClose, JnxPppAuthentication2=JnxPppAuthentication2, jnxPppLcp=jnxPppLcp, PYSNMP_MODULE_ID=jnxPppMIB, jnxPppLinkStatusTerminateNegFailOption=jnxPppLinkStatusTerminateNegFailOption, jnxPppIpTerminateReason=jnxPppIpTerminateReason, jnxPppSummaryPppLinkIfLowerLayerDown=jnxPppSummaryPppLinkIfLowerLayerDown, jnxPppLinkConfigIgnoreMagicNumberMismatch=jnxPppLinkConfigIgnoreMagicNumberMismatch, jnxPppSessionTable=jnxPppSessionTable, jnxPppIp=jnxPppIp, jnxPppMlPppLinkConfigLowerIfIndex=jnxPppMlPppLinkConfigLowerIfIndex, jnxPppMlPppLinkConfigMaxAuthenRetries=jnxPppMlPppLinkConfigMaxAuthenRetries, jnxPppOsiConfigEntry=jnxPppOsiConfigEntry, jnxPppIpv6ConfigInitiateIpv6=jnxPppIpv6ConfigInitiateIpv6, jnxPppSummaryPppNetworkOsiAdminOpen=jnxPppSummaryPppNetworkOsiAdminOpen, jnxPppMlPppBundleEntry=jnxPppMlPppBundleEntry, jnxPppMlPppLinkBindEntry=jnxPppMlPppLinkBindEntry, jnxPppIpEntry=jnxPppIpEntry, jnxPppLinkStatusRemoteMagicNumber1=jnxPppLinkStatusRemoteMagicNumber1, jnxPppSummaryPppMplsAdminClose=jnxPppSummaryPppMplsAdminClose, jnxPppSummaryPppIpNcpNoResources=jnxPppSummaryPppIpNcpNoResources, jnxPppSummaryPppOsiNcpNotPresent=jnxPppSummaryPppOsiNcpNotPresent, jnxPppIpv6Entry=jnxPppIpv6Entry, jnxPppSummaryPppLinkIfOperDormant=jnxPppSummaryPppLinkIfOperDormant, jnxPppSummaryPppMplsNcpClosed=jnxPppSummaryPppMplsNcpClosed, jnxPppIpv6ConfigTable=jnxPppIpv6ConfigTable, jnxPppIpRemotePrimaryDnsAddress=jnxPppIpRemotePrimaryDnsAddress, jnxPppSummaryPppNetworkIpv6NcpNotPresent=jnxPppSummaryPppNetworkIpv6NcpNotPresent, jnxPppSummaryPppLinkIfAdminUp=jnxPppSummaryPppLinkIfAdminUp, jnxPppIpRemoteIpAddress=jnxPppIpRemoteIpAddress, jnxPppSummaryPppNetworkInterfaceCount=jnxPppSummaryPppNetworkInterfaceCount, jnxPppLinkConfigRowStatus=jnxPppLinkConfigRowStatus, jnxPppMlPppLinkConfigRowStatus=jnxPppMlPppLinkConfigRowStatus, jnxPppLinkConfigAuthentication=jnxPppLinkConfigAuthentication, jnxPppSessionRemoteIpAddress=jnxPppSessionRemoteIpAddress, jnxPppPeerIpAddressOptional=jnxPppPeerIpAddressOptional, jnxPppIpConfigTable=jnxPppIpConfigTable, jnxPppLinkConfigAuthenticatorRoutingInstance=jnxPppLinkConfigAuthenticatorRoutingInstance, jnxPppIpv6LocalIpv6AddressIfIdentifier=jnxPppIpv6LocalIpv6AddressIfIdentifier, jnxPppSummaryPppInterfaceCount=jnxPppSummaryPppInterfaceCount, jnxPppLinkStatusEntry=jnxPppLinkStatusEntry, jnxPppSummaryPppNetworkIfOperDormant=jnxPppSummaryPppNetworkIfOperDormant, jnxPppSummaryPppNetworkIpv6NcpNoResources=jnxPppSummaryPppNetworkIpv6NcpNoResources, jnxPppSummaryPppIfAdminDown=jnxPppSummaryPppIfAdminDown, jnxPppSummaryPppLinkIfNotPresent=jnxPppSummaryPppLinkIfNotPresent, jnxPppSummaryPppNetworkIpv6AdminOpen=jnxPppSummaryPppNetworkIpv6AdminOpen, jnxPppIpConfigMaxIpcpRenegotiation=jnxPppIpConfigMaxIpcpRenegotiation, jnxPppSummaryPppLinkIfOperDown=jnxPppSummaryPppLinkIfOperDown, jnxPppIpv6Table=jnxPppIpv6Table, jnxPppMIB=jnxPppMIB, jnxPppIpConfigIpcpLockout=jnxPppIpConfigIpcpLockout, jnxPppSession=jnxPppSession, jnxPppMlPppNextLinkIfIndex=jnxPppMlPppNextLinkIfIndex, jnxPppOsiConfigTable=jnxPppOsiConfigTable, jnxPppSummaryPppLinkIfOperUp=jnxPppSummaryPppLinkIfOperUp, jnxPppSessionInactivityTimeout=jnxPppSessionInactivityTimeout, jnxPppMlPppLinkConfigAuthentication=jnxPppMlPppLinkConfigAuthentication, jnxPppMlPppNetworkConfigLowerIfIndex=jnxPppMlPppNetworkConfigLowerIfIndex, jnxPppIpv6ConfigMaxIpv6cpRenegotiation=jnxPppIpv6ConfigMaxIpv6cpRenegotiation, jnxPppMlPppBundleTable=jnxPppMlPppBundleTable, jnxPppMlPppLinkConfigReassembly=jnxPppMlPppLinkConfigReassembly, jnxPppMlPppBundleRowStatus=jnxPppMlPppBundleRowStatus, jnxPppSummaryPppNetworkIfLowerLayerDown=jnxPppSummaryPppNetworkIfLowerLayerDown, jnxPppLinkStatusTunnelIfIndex=jnxPppLinkStatusTunnelIfIndex, jnxPppSessionOutPackets64=jnxPppSessionOutPackets64, jnxPppSummaryPppNetworkIfAdminUp=jnxPppSummaryPppNetworkIfAdminUp, jnxPppSummaryPppMplsNcpOpened=jnxPppSummaryPppMplsNcpOpened, jnxPppGlobalConfig=jnxPppGlobalConfig, jnxPppSummaryPppLinkStaticInterfaceCount=jnxPppSummaryPppLinkStaticInterfaceCount, jnxPppIpv6=jnxPppIpv6, jnxPppLinkStatuslcpRenegoTerminates=jnxPppLinkStatuslcpRenegoTerminates, jnxPppIpv6ConfigEntry=jnxPppIpv6ConfigEntry, jnxPppLinkStatusTable=jnxPppLinkStatusTable, jnxPppLinkStatusLocalAuthentication=jnxPppLinkStatusLocalAuthentication, jnxPppOsiTerminateReason=jnxPppOsiTerminateReason, jnxPppSessionRemotePrimaryDnsAddress=jnxPppSessionRemotePrimaryDnsAddress, jnxPppSummaryPppNetworkMplsAdminOpen=jnxPppSummaryPppNetworkMplsAdminOpen, jnxPppSummaryPppNetworkMplsNcpOpened=jnxPppSummaryPppNetworkMplsNcpOpened, jnxPppSummaryPppIpv6NcpClosed=jnxPppSummaryPppIpv6NcpClosed, jnxPppIpRemotePrimaryWinsAddress=jnxPppIpRemotePrimaryWinsAddress, jnxPppSessionInOctets64=jnxPppSessionInOctets64, jnxPppSessionInhibitIpv6=jnxPppSessionInhibitIpv6, jnxPppLinkStatusLocalMagicNumber=jnxPppLinkStatusLocalMagicNumber, jnxPppSummaryPppNetworkIfNotPresent=jnxPppSummaryPppNetworkIfNotPresent, jnxPppMlPppBindLinkIfIndex=jnxPppMlPppBindLinkIfIndex, jnxPppMlPppLinkConfigAaaProfile=jnxPppMlPppLinkConfigAaaProfile, jnxPppSummaryPppIfOperDown=jnxPppSummaryPppIfOperDown, jnxPppSessionRemoteIpv6AddressIfIdentifier=jnxPppSessionRemoteIpv6AddressIfIdentifier, jnxPppSummaryPppMplsNCPs=jnxPppSummaryPppMplsNCPs, jnxPppSummaryPppIfNotPresent=jnxPppSummaryPppIfNotPresent, jnxPppIpConfigPeerDnsPriority=jnxPppIpConfigPeerDnsPriority, jnxPppSummaryPppNetworkIpNcpNotPresent=jnxPppSummaryPppNetworkIpNcpNotPresent, jnxPppIpv6ConfigAdminStatus=jnxPppIpv6ConfigAdminStatus, jnxPppSummaryPppOsiAdminOpen=jnxPppSummaryPppOsiAdminOpen, jnxPppLinkConfigAuthenticatorLogicalSystem=jnxPppLinkConfigAuthenticatorLogicalSystem, jnxPppSummaryPppNetworkIpAdminClose=jnxPppSummaryPppNetworkIpAdminClose, jnxPppSummaryPppNetworkMplsAdminClose=jnxPppSummaryPppNetworkMplsAdminClose, jnxPppOsiTable=jnxPppOsiTable, jnxPppIpConfigPeerWinsPriority=jnxPppIpConfigPeerWinsPriority, JnxPppMlPppBundleName=JnxPppMlPppBundleName, jnxPppSummaryPppMplsNcpNoResources=jnxPppSummaryPppMplsNcpNoResources, jnxPppSessionInPackets=jnxPppSessionInPackets, jnxPppMlPppLinkConfigAuthentication2=jnxPppMlPppLinkConfigAuthentication2, jnxPppSummaryPppIfOperDormant=jnxPppSummaryPppIfOperDormant, jnxPppSummaryPppOsiNcpOpened=jnxPppSummaryPppOsiNcpOpened, jnxPppLinkStatusLocalMagicNumber1=jnxPppLinkStatusLocalMagicNumber1, jnxPppIpConfigEntry=jnxPppIpConfigEntry, jnxPppLinkConfigAaaProfile=jnxPppLinkConfigAaaProfile, jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates=jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates, jnxPppSummaryPppNetworkMplsNCPs=jnxPppSummaryPppNetworkMplsNCPs, jnxPppOsiEntry=jnxPppOsiEntry, jnxPppMlPppLinkConfigEntry=jnxPppMlPppLinkConfigEntry, jnxPppMlPppLinkConfigMultilinkMaxMultiClasses=jnxPppMlPppLinkConfigMultilinkMaxMultiClasses, jnxPppSummaryPppOsiNcpClosed=jnxPppSummaryPppOsiNcpClosed, jnxPppSummaryPppIpv6NcpOpened=jnxPppSummaryPppIpv6NcpOpened, jnxPppSummaryPppNetworkIpv6NcpClosed=jnxPppSummaryPppNetworkIpv6NcpClosed, jnxPppSessionOutOctets64=jnxPppSessionOutOctets64, jnxPppSummaryPppNetworkIpNcpOpened=jnxPppSummaryPppNetworkIpNcpOpened, jnxPppMlPppLinkConfigHashLinkSelection=jnxPppMlPppLinkConfigHashLinkSelection, jnxPppSessionOutPackets=jnxPppSessionOutPackets, jnxPppSummaryPppNetworkOsiNCPs=jnxPppSummaryPppNetworkOsiNCPs, jnxPppIpLocalIpAddress=jnxPppIpLocalIpAddress, jnxPppSummaryPppIpAdminClose=jnxPppSummaryPppIpAdminClose, jnxPppSummaryPppIpv6AdminOpen=jnxPppSummaryPppIpv6AdminOpen, jnxPppSummaryPppNetworkOsiNcpNoResources=jnxPppSummaryPppNetworkOsiNcpNoResources, jnxPppSummaryPppIpv6NcpNotPresent=jnxPppSummaryPppIpv6NcpNotPresent, jnxPppSummaryPppIfLowerLayerDown=jnxPppSummaryPppIfLowerLayerDown, jnxPppLinkConfigStandardIfIndex=jnxPppLinkConfigStandardIfIndex, jnxPppMlPppNetworkConfigEntry=jnxPppMlPppNetworkConfigEntry, jnxPppMlPppLinkConfigFragmentation=jnxPppMlPppLinkConfigFragmentation, jnxPppSummaryPppIpv6NcpNoResources=jnxPppSummaryPppIpv6NcpNoResources, jnxPppLinkStatusKeepaliveFailures=jnxPppLinkStatusKeepaliveFailures, jnxPppOsiRemoteAlignNpdu=jnxPppOsiRemoteAlignNpdu, jnxPppMlPppLinkConfigTable=jnxPppMlPppLinkConfigTable, jnxPppSummaryPppLinkInterfaceCount=jnxPppSummaryPppLinkInterfaceCount, jnxPppNextIfIndex=jnxPppNextIfIndex, jnxPppSessionInhibitIp=jnxPppSessionInhibitIp, jnxPppSummaryPppOsiNCPs=jnxPppSummaryPppOsiNCPs, jnxPppLinkStatusInKeepaliveReplies=jnxPppLinkStatusInKeepaliveReplies, jnxPppOsiTerminateNegFailOption=jnxPppOsiTerminateNegFailOption, jnxPppIpv6TerminateReason=jnxPppIpv6TerminateReason, jnxPppSessionSessionTimeout=jnxPppSessionSessionTimeout, jnxPppMlPppLinkConfigChapMaxChallengeLength=jnxPppMlPppLinkConfigChapMaxChallengeLength, jnxPppOsiServiceStatus=jnxPppOsiServiceStatus, jnxPppSummaryPppNetworkIpv6NCPs=jnxPppSummaryPppNetworkIpv6NCPs, jnxPppSummaryPppNetworkMplsNcpNoResources=jnxPppSummaryPppNetworkMplsNcpNoResources, jnxPppSessionInOctets=jnxPppSessionInOctets, jnxPppMlPppNetworkConfigIfIndex=jnxPppMlPppNetworkConfigIfIndex, jnxPppSessionOutOctets=jnxPppSessionOutOctets, jnxPppOsiConfigAdminStatus=jnxPppOsiConfigAdminStatus)
