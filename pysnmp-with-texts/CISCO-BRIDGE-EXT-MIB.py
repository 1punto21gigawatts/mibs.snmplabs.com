#
# PySNMP MIB module CISCO-BRIDGE-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-BRIDGE-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPortList, CiscoPortListRange = mibBuilder.importSymbols("CISCO-TC", "CiscoPortList", "CiscoPortListRange")
VlanIndex, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex", "VlanId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, Counter32, NotificationType, Unsigned32, iso, ObjectIdentity, ModuleIdentity, Integer32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Counter32", "NotificationType", "Unsigned32", "iso", "ObjectIdentity", "ModuleIdentity", "Integer32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32")
MacAddress, RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
ciscoBridgeExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 401))
ciscoBridgeExtMIB.setRevisions(('2008-05-22 00:00', '2005-04-07 00:00', '2004-12-03 00:00', '2004-08-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoBridgeExtMIB.setRevisionsDescriptions(('Added cbeDot1dOperVlanGroup.', 'Fixed a typo in cbeDot1dTpVlanAgingFromGlobal object description.', 'Added cbeDot1dStaticGroup.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoBridgeExtMIB.setLastUpdated('200805220000Z')
if mibBuilder.loadTexts: ciscoBridgeExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoBridgeExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoBridgeExtMIB.setDescription('A MIB module for extending BRIDGE-MIB specified in RFC 1493.')
cbExtMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 401, 0))
cbExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 401, 1))
cbExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 401, 2))
cbeDot1dTp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 1))
cbeDot1dStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2))
cbeDot1dVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 3))
cbeDot1dTpGlobalAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000000), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbeDot1dTpGlobalAgingTime.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpGlobalAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information at the device level. Setting this object value to zero will disable the aging out action globally except at the VLANs where cbeDot1dTpVlanAgingTime is configured. 802.1D-1990 recommends a default of 300 seconds.')
cbeDot1dTpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 1, 2), )
if mibBuilder.loadTexts: cbeDot1dTpVlanTable.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpVlanTable.setDescription('This table provides the configuration for aging out dynamically learned forwarding information at each VLAN. This table is populated for each existing VLAN in the device as well as non-existing VLANs which have the aging out value configured.')
cbeDot1dTpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpVlanIndex"))
if mibBuilder.loadTexts: cbeDot1dTpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpVlanEntry.setDescription('Each entry contains the aging out configuration and the configuration source of the aging out value applied at each VLAN.')
cbeDot1dTpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 1, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cbeDot1dTpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpVlanIndex.setDescription('Indicates the VLAN number.')
cbeDot1dTpVlanAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000000), )).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbeDot1dTpVlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpVlanAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information at this VLAN. Setting this object value to zero will disable the aging out action for this VLAN. 802.1D-1990 recommends a default of 300 seconds. This object provides the same functionality as dot1dTpAgingTime object in BRIDGE-MIB with one exception that setting this object value to zero will disable the aging out action for this VLAN.')
cbeDot1dTpVlanAgingFromGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbeDot1dTpVlanAgingFromGlobal.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpVlanAgingFromGlobal.setDescription('Indicates whether the aging time applied at this VLAN is from cbeDot1dTpGlobalAgingTime object or not. true(1) indicates the aging time applied at this VLAN is from cbeDot1dTpGlobalAgingTime object. When true(1) is configured, value of cbeDot1dTpVlanAgingTime object in the same row will have the same value as cbeDot1dTpGlobalAgingTime object. false(2) indicates the aging time applied at this VLAN is from cbeDot1dTpVlanAgingTime object. If users configure cbeDot1dTpVlanAgingTime object in the same row while this object value is true(1), this object value will be changed to false(2) to reflect that the aging time applied at this VLAN is not from cbeDot1dTpGlobalAgingTime object.')
cbeDot1dTpVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbeDot1dTpVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpVlanRowStatus.setDescription('The status of this conceptual row entry. This object is used to manage creation and deletion of rows in this table. To create an entry, users set the value of this object to createAndGo(4). To delete an entry, users set the value of this object to destroy(6). Deletion of an entry in this table is only allowed if the VLAN indicated by its row index object does not exist in the device. cbeDot1dTpVlanAgingTime and cbeDot1dTpVlanAgingFromGlobal can be modified at any time (even while the row is active). If users set the value of cbeDot1dTpVlanAgingFromGlobal object to true(1) and the VLAN indicated by cbeDot1dTpVlanIndex object in the same row does not exist, the entry will be removed from this table.')
cbeDot1dStaticTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2, 1), )
if mibBuilder.loadTexts: cbeDot1dStaticTable.setReference('IEEE 802.1D-1990: Section 6.7.2. RFC 1493: dot1dStaticTable.')
if mibBuilder.loadTexts: cbeDot1dStaticTable.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dStaticTable.setDescription('A table containing filtering information configured into the device by (local or network) management to specify the set of bridge ports within a specific range of bridge port number for a specific VLAN, to which frames received from specific ports and containing specific destination addresses are allowed to be forwarded. The value of zero in this table as the port number from which frames with a specific destination address are received, is used to specify all ports for which there is no specific entry in this table for that particular destination address. Entries are valid for unicast and for group/broadcast addresses.')
cbeDot1dStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-BRIDGE-EXT-MIB", "cbeDot1dVlanIndex"), (0, "CISCO-BRIDGE-EXT-MIB", "cbeDot1dStaticAddress"), (0, "CISCO-BRIDGE-EXT-MIB", "cbeDot1dStaticReceivePort"), (0, "CISCO-BRIDGE-EXT-MIB", "cbeDot1dStaticPortRangeIndex"))
if mibBuilder.loadTexts: cbeDot1dStaticEntry.setReference('IEEE 802.1D-1990: Section 6.7.2.')
if mibBuilder.loadTexts: cbeDot1dStaticEntry.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dStaticEntry.setDescription('Each entry represents filtering information configured into the device by (local or network) management specifying the set of bridge ports within a specific range of bridge port number for a specific VLAN, to which frames received from a specific port and containing a specific destination address are allowed to be forwarded.')
cbeDot1dVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cbeDot1dVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dVlanIndex.setDescription('The VLAN ID of a specific VLAN.')
cbeDot1dStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: cbeDot1dStaticAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2.')
if mibBuilder.loadTexts: cbeDot1dStaticAddress.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dStaticAddress.setDescription("The destination MAC address in a frame to which this entry's filtering information applies. This object can take the value of a unicast address, a group address or the broadcast address.")
cbeDot1dStaticReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cbeDot1dStaticReceivePort.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dStaticReceivePort.setDescription("Either the value '0', or the port number of the port from which a frame must be received in order for this entry's filtering information to apply. A value of zero indicates that this entry applies on all ports of the bridge for which there is no other applicable entry.")
cbeDot1dStaticPortRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2, 1, 1, 4), CiscoPortListRange())
if mibBuilder.loadTexts: cbeDot1dStaticPortRangeIndex.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dStaticPortRangeIndex.setDescription('The index that uniquely identifies a particular range of bridge port number.')
cbeDot1dStaticAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2, 1, 1, 5), CiscoPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbeDot1dStaticAllowedToGoTo.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dStaticAllowedToGoTo.setDescription("A set of ports in a specific VLAN, in a specific range of bridge port number, to which frames received from a specific port, destined for a specific MAC address are allowed to be forwarded. An entry in this table with the index value of cbeDot1dStaticPortRangeIndex being 'oneto2K' and instance value of the corresponding cbeDot1dStaticAllowedToGoTo being zero-length octet string indicates that frames received in the VLAN as specified by this entry's cbeDot1dVlanIndex, from a port as specified by this entry's cbeDot1dStaticReceivePort, and destined to the MAC address as specified by this entry's cbeDot1dStaticAddress, are not allowed to be forwarded to any of the ports in this VLAN.")
cbeDot1dStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5))).clone('permanent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbeDot1dStaticStatus.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dStaticStatus.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so differ from the following values. invalid(2) - writing this value to the object removes the corresponding entry. permanent(3) - this entry is currently in use and will remain so after the next reset of the bridge. deleteOnReset(4) - this entry is currently in use and will remain so until the next reset of the bridge. deleteOnTimeout(5) - this entry is currently in use and will remain so until it is aged out.')
cbeDot1dVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 3, 1), )
if mibBuilder.loadTexts: cbeDot1dVlanTable.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dVlanTable.setDescription('A list of 802.1D access ports. Every access port that is currently associated with a bridge has a corresponding entry in this table.')
cbeDot1dVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 3, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: cbeDot1dVlanEntry.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dVlanEntry.setDescription('An entry containing VLAN information for a particular 802.1D access port.')
cbeDot1dVlanOperVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 401, 1, 3, 1, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbeDot1dVlanOperVlan.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dVlanOperVlan.setDescription('The VLAN-ID of the VLAN with which the access port is currently associated.')
cbExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 1))
cbExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 2))
cbExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 1, 1)).setObjects(("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpGroup"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbExtMIBCompliance = cbExtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cbExtMIBCompliance.setDescription('The compliance statement for CISCO-BRIDGE-EXT-MIB.')
cbExtMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 1, 2)).setObjects(("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpGroup"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpVlanGroup"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dStaticGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbExtMIBCompliance2 = cbExtMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cbExtMIBCompliance2.setDescription('The compliance statement for CISCO-BRIDGE-EXT-MIB.')
cbExtMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 1, 3)).setObjects(("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpGroup"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpVlanGroup"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dStaticGroup"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dOperVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbExtMIBCompliance3 = cbExtMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: cbExtMIBCompliance3.setDescription('The compliance statement for CISCO-BRIDGE-EXT-MIB.')
cbeDot1dTpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 2, 1)).setObjects(("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpGlobalAgingTime"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpVlanAgingFromGlobal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbeDot1dTpGroup = cbeDot1dTpGroup.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpGroup.setDescription('A collection of objects providing timeout period for aging out of dynamically learned forwarding information at the device level.')
cbeDot1dTpVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 2, 2)).setObjects(("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpVlanAgingTime"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dTpVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbeDot1dTpVlanGroup = cbeDot1dTpVlanGroup.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dTpVlanGroup.setDescription('A collection of objects providing timeout period for aging out of dynamically learned forwarding information at each VLAN.')
cbeDot1dStaticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 2, 3)).setObjects(("CISCO-BRIDGE-EXT-MIB", "cbeDot1dStaticAllowedToGoTo"), ("CISCO-BRIDGE-EXT-MIB", "cbeDot1dStaticStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbeDot1dStaticGroup = cbeDot1dStaticGroup.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dStaticGroup.setDescription('A collection of objects for configuration of static filtering information.')
cbeDot1dOperVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 401, 2, 2, 4)).setObjects(("CISCO-BRIDGE-EXT-MIB", "cbeDot1dVlanOperVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbeDot1dOperVlanGroup = cbeDot1dOperVlanGroup.setStatus('current')
if mibBuilder.loadTexts: cbeDot1dOperVlanGroup.setDescription('A collection of objects to show the operational VLAN information on bridge ports.')
mibBuilder.exportSymbols("CISCO-BRIDGE-EXT-MIB", cbExtMIBCompliance2=cbExtMIBCompliance2, cbeDot1dTpVlanAgingTime=cbeDot1dTpVlanAgingTime, cbeDot1dTp=cbeDot1dTp, cbeDot1dTpGlobalAgingTime=cbeDot1dTpGlobalAgingTime, cbeDot1dStatic=cbeDot1dStatic, cbeDot1dStaticStatus=cbeDot1dStaticStatus, cbeDot1dTpVlanTable=cbeDot1dTpVlanTable, cbeDot1dStaticTable=cbeDot1dStaticTable, cbeDot1dTpVlanEntry=cbeDot1dTpVlanEntry, cbeDot1dStaticReceivePort=cbeDot1dStaticReceivePort, cbeDot1dStaticPortRangeIndex=cbeDot1dStaticPortRangeIndex, cbExtMIBObjects=cbExtMIBObjects, cbExtMIBConformance=cbExtMIBConformance, cbeDot1dVlanTable=cbeDot1dVlanTable, cbeDot1dVlanEntry=cbeDot1dVlanEntry, cbExtMIBCompliance3=cbExtMIBCompliance3, cbeDot1dVlanIndex=cbeDot1dVlanIndex, cbeDot1dStaticEntry=cbeDot1dStaticEntry, cbeDot1dVlanOperVlan=cbeDot1dVlanOperVlan, cbeDot1dTpVlanGroup=cbeDot1dTpVlanGroup, cbeDot1dTpVlanAgingFromGlobal=cbeDot1dTpVlanAgingFromGlobal, cbeDot1dTpGroup=cbeDot1dTpGroup, cbeDot1dStaticAllowedToGoTo=cbeDot1dStaticAllowedToGoTo, cbeDot1dStaticGroup=cbeDot1dStaticGroup, cbeDot1dStaticAddress=cbeDot1dStaticAddress, PYSNMP_MODULE_ID=ciscoBridgeExtMIB, cbExtMIBCompliances=cbExtMIBCompliances, cbExtMIBNotifications=cbExtMIBNotifications, cbExtMIBCompliance=cbExtMIBCompliance, cbeDot1dOperVlanGroup=cbeDot1dOperVlanGroup, cbExtMIBGroups=cbExtMIBGroups, ciscoBridgeExtMIB=ciscoBridgeExtMIB, cbeDot1dVlan=cbeDot1dVlan, cbeDot1dTpVlanIndex=cbeDot1dTpVlanIndex, cbeDot1dTpVlanRowStatus=cbeDot1dTpVlanRowStatus)
