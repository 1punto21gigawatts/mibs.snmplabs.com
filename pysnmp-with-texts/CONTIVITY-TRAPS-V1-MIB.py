#
# PySNMP MIB module CONTIVITY-TRAPS-V1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CONTIVITY-TRAPS-V1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ifDescr, ifIndex, ifOperStatus, ifAdminStatus, ifType = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex", "ifOperStatus", "ifAdminStatus", "ifType")
contivity, = mibBuilder.importSymbols("NEWOAK-MIB", "contivity")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, sysObjectID, snmp = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysObjectID", "snmp")
MibIdentifier, TimeTicks, Integer32, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Counter32, NotificationType, ObjectIdentity, Unsigned32, Gauge32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Integer32", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Counter32", "NotificationType", "ObjectIdentity", "Unsigned32", "Gauge32", "IpAddress", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
contivityTrapsV1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2505, 1, 0))
contivityTrapsV1.setRevisions(('1900-05-12 20:00', '1900-06-28 18:00', '1900-06-28 21:00', '1900-08-10 15:00', '1900-06-18 22:00', '1901-02-27 23:00', '1901-03-26 23:00', '1901-05-10 23:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: contivityTrapsV1.setRevisionsDescriptions(('Add ifIndex, ifDescr, ifType to the following traps: lanCardStatusTrap, t1WANStatusTrap, t3WANStatusTrap Add ifReasonForStatus-ces, ifPhysLocation-ces, ifPhysRelPos-ces, ifIpAddr-ces, ifTunnelName-ces, ifTunnelRemoteIpAddr-ces to Link Up and Link Down traps. .', 'Added Possible Values: clauses to most of the traps. Change ifTunnelName-ces to ifName-ces. Using ifName-ces instead of ifXName so that this mib will compile with only V1 mibs. ', 'Added Possible Values: to all but: load balancing, firewall, failed login attempt, security intrusion ', 'Added Possible Values: to: load balancing, firewall, failed login attempt, security intrusion ', 'Add firewallPolicyType-ces, firewallRuleType-ces, firewallRuleIntfName-ces, firewallRuleNumber-ces, firewallSrcAddr-ces, firewallSrcPort-ces, firewallDestAddr-ces, firewallDestPort-ces, firewallProtocolID-ces, firewallRuleAction-ces, firewallIpHdr-ces, firewallUdpTcpHdr-ces, firewallRuleTriggeredTrap. Change ifTunnelName-ces to ifName-ces. Using ifName-ces instead of ifXName so that this mib will compile with only V1 mibs. ', 'Changed severityLevel to reflect the actual health of the object the trap is describing. ', 'Changed softwareCESTrapInfo to serviceCESTrapInfo. ', 'Added licensingStatus trap. ',))
if mibBuilder.loadTexts: contivityTrapsV1.setLastUpdated('0604062300Z')
if mibBuilder.loadTexts: contivityTrapsV1.setOrganization('Nortel')
if mibBuilder.loadTexts: contivityTrapsV1.setContactInfo('support@nortel.com Postal: Nortel 600 Technology Park Drive Billerica, MA 01821 Tel: +1 978 670 8888 E-Mail: support@nortel.com')
if mibBuilder.loadTexts: contivityTrapsV1.setDescription('This MIB defines the traps, and bind objects used in the traps, that are sent by the VPN Router.')
class PortLocation_ces(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("motherBoardOrSlot0", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6))

class IfReasonForStatus_ces(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unknown", 1), ("idle-time-out", 2), ("ip-addr-chg", 3), ("no-response", 4), ("user-interaction", 5), ("time-limit", 6), ("testing", 7), ("test-complete-success", 8), ("test-complete-failure", 9), ("link-down", 10), ("link-up", 11))

class FirewallPolicyType_ces(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("firewall", 1), ("nat", 2))

class FirewallRuleType_ces(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("over-ride", 1), ("sourceInterface", 2), ("destinationInterface", 3), ("default", 4))

class FirewallRuleAction_ces(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("allow", 2), ("reject", 3), ("drop", 4))

severityLevel = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("alert", 1), ("warning", 2), ("disabled", 3), ("healthy", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: severityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: severityLevel.setDescription('Severity of specific trap.')
systemName = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemName.setStatus('mandatory')
if mibBuilder.loadTexts: systemName.setDescription('System Name.')
systemDate = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDate.setStatus('mandatory')
if mibBuilder.loadTexts: systemDate.setDescription('System Date.')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('mandatory')
if mibBuilder.loadTexts: systemTime.setDescription('System Time.')
systemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: systemUpTime.setDescription('System Up Time.')
hardwareCESTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 1))
hardDisk1Status = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardDisk1Status.setStatus('mandatory')
if mibBuilder.loadTexts: hardDisk1Status.setDescription('Hard Disk Number 1 Status. Possible Values: Warning: Hard Disk 1 : Device /ide1/ not available Warning: Hard Disk 1 : Utilization exceeds 75%% on /ide1/ Alert: Hard Disk 1 : Utilization exceeds 87.5%% on /ide1/ ')
hardDisk1StatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1001)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "hardDisk1Status"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: hardDisk1StatusTrap.setDescription('Hard Disk Number 1 Status')
hardDisk0Status = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardDisk0Status.setStatus('mandatory')
if mibBuilder.loadTexts: hardDisk0Status.setDescription('Hard Disk Number 0 Status. Possible Values: Warning: Hard Disk 0 : Device /ide0/ not available Warning: Hard Disk 0 : Utilization exceeds 75%% on /ide0/ Alert: Hard Disk 0 : Utilization exceeds 87.5%% on /ide0/ ')
hardDisk0StatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1002)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "hardDisk0Status"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: hardDisk0StatusTrap.setDescription('Hard Disk Number 0 Status')
memoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryUsage.setStatus('mandatory')
if mibBuilder.loadTexts: memoryUsage.setDescription('Memory Usage Status. Possible Values: Warning: Memory Usage : Utilization exceeds 75% Alert: Memory Usage : Utilization exceeds 87.5% ')
memoryUsageTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1003)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "memoryUsage"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: memoryUsageTrap.setDescription('Memory Usage Status')
lanCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lanCardStatus.setDescription('Status of any LAN cards on the system. Possible Values: Please note that X corresponds to the Xth slot in the system. Please note that Y corresponds to the relative position of the port on the card in the Xth slot in the system. Warning: LAN on Slot X Interface Y: Device feiX has no IP address; Warning: LAN on Slot X Interface Y: Device feiX disabled; Alert: LAN on Slot X Interface Y: Device feiX down; Alert: LAN on Slot X Interface Y: Device feiX Invalid Device X The Alert status above indicates that the interface has no link when it should. Possible causes are improper connection speeds and duplex, improper cabling or a configuration issue.')
lanCardStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1004)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "lanCardStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"))
if mibBuilder.loadTexts: lanCardStatusTrap.setDescription('Status of any LAN cards on the system')
cpuTwoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTwoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpuTwoStatus.setDescription('Status of second CPU. Possible Values: Alert: CPU 2: Program load failed; Alert: CPU 2: Bootup did not complete; Alert: CPU 2: Communication lost; Alert: CPU 2: Failed. Reason unknown; Each of these indicates that the application CPU is not functioning correctly. The system will continue to function without the application processor. This can only be sent from a system with multiple CPUs. See the Admin Guide for a list of systems that contain multiple CPUs. The CES will emit an audible alarm and the networking performance will be degraded. A Nortel support representative should be contacted if rese ing the CES does not correct the problem. The effect is the same in each case. The system will be running with only one CPU.')
cpuTwoStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1005)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "cpuTwoStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: cpuTwoStatusTrap.setDescription('Status of second CPU. ')
fanOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanOneStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fanOneStatus.setDescription('Status of the first CPU fan. Possible Values: Alert: CPU One Fan: Fan not functioning; This indicates that the fan on the primary processor is running either below the specified speed or not running at all. If a fan is not working correctly, it must be fixed as soon as possible or damage may result. This is a high priority event which can prove catastrophic to the processor as well as the system. This trap can only be sent by systems which contain an actual fan on the primary CPU.')
fanOneStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1006)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "fanOneStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: fanOneStatusTrap.setDescription('Status of the first CPU fan')
fanTwoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanTwoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fanTwoStatus.setDescription('Status of the second CPU fan Possible Values: Alert: CPU Two Fan: Fan not functioning; This indicates that the fan on the auxiliary processor is running either below the specified speed or not running at all. If a fan is not working correctly, it must be fixed as soon as possible or damage may result. This is a high priority event which can prove catastrophic to the processor as well as the system. This trap can only be sent by systems which contain an actual fan on the auxiliary CPU.')
fanTwoStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1007)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "fanTwoStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: fanTwoStatusTrap.setDescription('Status of the second CPU fan')
chassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chassisFanStatus.setDescription('Status of the chassis fan. Possible Values: Alert: Chassis Fan: Fan not functioning; Alert: Chassis Fan 2: Fan not functioning; This indicates that one of the chassis fans is running either below the specified range of speed or not running at all. If a fan is not working correctly, it must be fixed as soon as possible or damage may result. If either of the fans are not working properly, the box must be looked at by a service technician as soon as possible. Not doing so will result in overheating of the system, improper system operation, and possible component failure.')
chassisFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1008)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "chassisFanStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: chassisFanStatusTrap.setDescription('Status of the chassis fan.')
fiveVoltsPositive = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiveVoltsPositive.setStatus('mandatory')
if mibBuilder.loadTexts: fiveVoltsPositive.setDescription('Status of +5 Volt power. Possible Values: Alert: Voltage 5 V Plus: Voltage out of range; The supplied voltage to the system is not within the the specified range for that particular voltage. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages. This is a major problem and the box should be looked at by a qualified Nortel representative as soon as possible. Correct operation of the system is not guaranteed while in this state. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages.')
fiveVoltsPosStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,1009)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "fiveVoltsPositive"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: fiveVoltsPosStatusTrap.setDescription('Status of the +5 Volt power')
fiveVoltsMinus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiveVoltsMinus.setStatus('mandatory')
if mibBuilder.loadTexts: fiveVoltsMinus.setDescription('Status of -5 Volt power. Possible Values: Alert: Voltage 5 V Minus: Voltage out of range; The supplied voltage to the system is not within the the specified range for that particular voltage. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages. This is a major problem and the box should be looked at by a qualified Nortel representative as soon as possible. Correct operation of the system is not guaranteed while in this state. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages.')
fiveVoltsMinusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10010)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "fiveVoltsMinus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: fiveVoltsMinusTrap.setDescription('Status of -5 Volt power')
threeVoltsPositive = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: threeVoltsPositive.setStatus('mandatory')
if mibBuilder.loadTexts: threeVoltsPositive.setDescription('Status of +3 Volt power. Possible Values: Alert: Voltage 3.3 V Plus: Voltage out of range; The supplied voltage to the system is not within the the specified range for that particular voltage. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages. This is a major problem and the box should be looked at by a qualified Nortel representative as soon as possible. Correct operation of the system is not guaranteed while in this state. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages.')
threeVoltsPositiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10011)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "threeVoltsPositive"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: threeVoltsPositiveTrap.setDescription('Status of +3 Volt power')
twoDotFiveVA = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoDotFiveVA.setStatus('mandatory')
if mibBuilder.loadTexts: twoDotFiveVA.setDescription('Status of 2.5VA power. Possible Values: Alert: Voltage 2.5 VA: Voltage out of range; This is the voltage supplied to the primary processor. The supplied voltage to the system is not within the the specified range for that particular voltage. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages. This is a major problem and the box should be looked at by a qualified Nortel representative as soon as possible. Correct operation of the system is not guaranteed while in this state. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages.')
twoDotFiveVATrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10012)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "twoDotFiveVA"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: twoDotFiveVATrap.setDescription('Status of 2.5VA power')
twoDotFiveVB = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoDotFiveVB.setStatus('mandatory')
if mibBuilder.loadTexts: twoDotFiveVB.setDescription('Status of 2.5VB power. Possible Values: Alert: Voltage 2.5 VB: Voltage out of range; This is the voltage supplied to the seconary processor. The supplied voltage to the system is not within the the specified range for that particular voltage. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages. This is a major problem and the box should be looked at by a qualified Nortel representative as soon as possible. Correct operation of the system is not guaranteed while in this state. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages.')
twoDotFiveVBTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10013)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "twoDotFiveVB"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: twoDotFiveVBTrap.setDescription('Status of 2.5VB power')
twelveVoltsPositive = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: twelveVoltsPositive.setStatus('mandatory')
if mibBuilder.loadTexts: twelveVoltsPositive.setDescription('Status of +12 Volt power. Possible Values: Alert: Voltage 12 V Plus: Voltage out of range; The supplied voltage to the system is not within the the specified range for that particular voltage. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages. This is a major problem and the box should be looked at by a qualified Nortel representative as soon as possible. Correct operation of the system is not guaranteed while in this state. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages.')
twelveVoltsPositveTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10014)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "twelveVoltsPositive"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: twelveVoltsPositveTrap.setDescription('Status of +12 Volt power')
twelveVoltsMinus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: twelveVoltsMinus.setStatus('mandatory')
if mibBuilder.loadTexts: twelveVoltsMinus.setDescription('Status of -12 Volt power. Possible Values: Alert: Voltage 12 V Minus: Voltage out of range; The supplied voltage to the system is not within the the specified range for that particular voltage. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages. This is a major problem and the box should be looked at by a qualified Nortel representative as soon as possible. Correct operation of the system is not guaranteed while in this state. Certain platforms do not supply or monitor some of these voltages. See the Health Check section of the Admin Guide for a description of which platforms monitor which voltages.')
twelveVoltsMinsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10015)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "twelveVoltsMinus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: twelveVoltsMinsTrap.setDescription('Status of -12 Volt power')
normalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: normalTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: normalTemperature.setDescription('Status of normal temperature reading. Possible Values: Alert: Normal Temperature: Normal temperature out of range; This indicates that the box is running above its rated normal operating temperature. This may be the result of an improperly working fan or a high ambient temperature. The box is not guaranteed to run properly while running above the normal operating temperature range. Performance will be degraded. Not taking action to correct this situation can result in component failure. Do not rely on waiting for the criticalTemperatureTrap as that is only supported by certain platforms.')
normalTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10016)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "normalTemperature"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: normalTemperatureTrap.setDescription('Status of the normal temperature reading')
criticalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: criticalTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: criticalTemperature.setDescription('Status of critical temperature reading. Possible Values: Alert: Critical Temperature: Critial temperature out of range; This indicates that the box is running at a critically high temperature above the normal operating range. This is only supported on certain platforms. See the Admin Guide for a list of platforms which support this. The box must be shut down immediately. Component failure may already have occurred. If the reason for such a high operating temperature cannot be determined, contact a qualified Nortel representative.')
criticalTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10017)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "criticalTemperature"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: criticalTemperatureTrap.setDescription('Status of the critical temperature reading')
chassisIntrusion = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIntrusion.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIntrusion.setDescription('The chassis intrusion sensor indicates that the unit has been opened. Possible Values: Alert: Intrusion: Box has been opened; The cover to the CES has been opened or is in the process of being opened. This indicates a possible physical security intrusion. The system will continue to operate while the box is opened. Check to insure that no unauthorized persons have opened the unit.')
chassisIntrusionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10018)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "chassisIntrusion"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: chassisIntrusionTrap.setDescription('The chassis intrusion sensor indicates that the unit has been physically opened')
dualPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: dualPowerSupply.setDescription('Status of the redundant power supplies. Possible Values: Alert: Dual Power Supply: Redundant supply faulted This indicates that, on systems with redundant power supplies, one of the power supplies is not working. This trap can only be sent from systems which have redundant power supplies. The system will continue to run with only one power supply working. A new power supply must be obtained via an authorized Nortel representative as quickly as possible. This will help reduce the risk window of system failure in the event that the working power supply ceases to function.')
dualPowerSupplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10019)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "dualPowerSupply"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: dualPowerSupplyTrap.setDescription('Status of the redundant power supplies')
t1WANStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1WANStatus.setStatus('mandatory')
if mibBuilder.loadTexts: t1WANStatus.setDescription('Status of T1 WAN card(s). Possible Values: For Wanic support: Alert: Invalid Device X Warning: Device WanicX disabled Alert: Device WanicX down Warning: Device WanicX not initialized Warning: Device WanicX PPP negotiating Alert: Device WanicX PPP down Alert: Device WanicX FR no support Alert: Device WanicX Unknown DL For T1: Alert: Invalid Device X Warning: Device LMCDTEX disabled Alert: Device LMCDTEX down Warning: Device LMCDTEX not initialized For CSU/DSU: Alert: Invalid Device X Warning: Device LMCCDX disabled Alert: Device LMCCDX down Warning: Device LMCCDX not initialized')
t1WANStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10020)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "t1WANStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"))
if mibBuilder.loadTexts: t1WANStatusTrap.setDescription('Status of T1 WAN card(s). Possible Values: For Wanic support: Alert: Invalid Device X Warning: Device WanicX disabled Alert: Device WanicX down Warning: Device WanicX not initialized Warning: Device WanicX PPP negotiating Alert: Device WanicX PPP down Alert: Device WanicX FR no support Alert: Device WanicX Unknown DL For T1: Alert: Invalid Device X Warning: Device LMCDTEX disabled Alert: Device LMCDTEX down Warning: Device LMCDTEX not initialized For CSU/DSU: Alert: Invalid Device X Warning: Device LMCCDX disabled Alert: Device LMCCDX down Warning: Device LMCCDX not initialized')
t3WANStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3WANStatus.setStatus('mandatory')
if mibBuilder.loadTexts: t3WANStatus.setDescription('Status of T3 WAN card Possible Values: Alert: Invalid Index X Warning: Device HSSIX disabled Alert: Device HSSIX down Warning: Device HSSIX not initialized Alert: Device HSSIX PPP down Warning: Device HSSIX PP initializing')
t3WANStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10021)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "t3WANStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"))
if mibBuilder.loadTexts: t3WANStatusTrap.setDescription('Status of T3 WAN card Possible Values: Alert: Invalid Index X Warning: Device HSSIX disabled Alert: Device HSSIX down Warning: Device HSSIX not initialized Alert: Device HSSIX PPP down Warning: Device HSSIX PP initializing')
hwAccelStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAccelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwAccelStatus.setDescription('Status of hardware accelerator card.')
hwAccelTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10022)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "hwAccelStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: hwAccelTrap.setDescription('Status of hardware accelerator card. Possible Values: Invalid hardware accelerator unit %d; Unknown hardware accelerator unit %d; Healthy: Bulk Accelerator in slot %d: Unit %d Status 1 - ATTACHED; Warning: Bulk Accelerator in slot %d: Unit %d Status 2 - DISABLED; Healthy: Bulk Accelerator in slot %d: Unit %d Status 3 - ACTIVE; Warning: Bulk Accelerator in slot %d: Unit %d Status 4 - RECOVERING; Warning: Bulk Accelerator in slot %d: Unit %d Status 5 - SHUTDOWN; Alert: Bulk Accelerator in slot %d: Unit %d Status 6 - FAILED; ')
v90WANStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v90WANStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v90WANStatus.setDescription('Status of V.90 Interface card Possible Values: Please note that X corresponds to the unit number of the card. Alert: V.90 Invalid index X Disabled: Device IntModem-X disabled Healthy: Device IntModem-X: PPP is UP. Alert: Device IntModem-X down Warning: Device IntModem-X not initialized Alert: Device IntModem-X: Call is UP. Internal Error. Warning: Device IntModem-X is Down. Last dial-out attempt FAILED. Healthy: Device IntModem-X is Down (No Active calls) Warning: Device IntModem-X is in an UNKNOWN state')
v90WANStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10024)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "v90WANStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: v90WANStatusTrap.setDescription('Status of V.90 Interface card Possible Values: Please note that X corresponds to the unit number of the card. Alert: V.90 Invalid index X Disabled: Device IntModem-X disabled Healthy: Device IntModem-X: PPP is UP. Alert: Device IntModem-X down Warning: Device IntModem-X not initialized Alert: Device IntModem-X: Call is UP. Internal Error. Warning: Device IntModem-X is Down. Last dial-out attempt FAILED. Healthy: Device IntModem-X is Down (No Active calls) Warning: Device IntModem-X is in an UNKNOWN state ')
briWANStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briWANStatus.setStatus('mandatory')
if mibBuilder.loadTexts: briWANStatus.setDescription('Status of ISDN BRI Interface card Possible Values: Please note that X corresponds to the unit number of the card. Alert: BRI Invalid index X Alert: Device BRI-X not Responding. Needs Host Reboot. Disabled: Device BRI-X disabled Alert: Device BRI-X down Warning: Device BRI-X not initialized Healthy: Device BRI-X: PPP is UP. Alert: Device BRI-X: Call is UP. Internal Error. Warning: Device BRI-X is Down. Last dial-out attempt FAILED. Healthy: Device BRI-X is Down (No Active calls) Alert: Device BRI-X is in an UNKNOWN state')
briWANStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10025)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "briWANStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: briWANStatusTrap.setDescription('Status of V.90 Interface card Possible Values: Please note that X corresponds to the unit number of the card. Alert: BRI Invalid index X Alert: Device BRI-X not Responding. Needs Host Reboot. Disabled: Device BRI-X disabled Alert: Device BRI-X down Warning: Device BRI-X not initialized Healthy: Device BRI-X: PPP is UP. Alert: Device BRI-X: Call is UP. Internal Error. Warning: Device BRI-X is Down. Last dial-out attempt FAILED. Healthy: Device BRI-X is Down (No Active calls) Alert: Device BRI-X is in an UNKNOWN state ')
serUartStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serUartStatus.setStatus('mandatory')
if mibBuilder.loadTexts: serUartStatus.setDescription('Status of Serial (COM) port/interface Possible Values: Please note that X corresponds to the unit number of the serial interface Alert: COM port Invalid index X Healthy: Device COMX is set for Serial Menu. Disabled: Device COMX disabled Warning: Device COMX not initialized Healthy: Device COMX: PPP is UP. Alert: Device COMX: Call is UP. Internal Error. Warning: Device COMX is Down. Last dial-out attempt FAILED. Healthy: Device COMX is Down (No Active calls) Alert: Device COMX is in an UNKNOWN state')
serUartStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10026)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "serUartStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: serUartStatusTrap.setDescription('Status of Serial (COM) port/interface Possible Values: Please note that X corresponds to the unit number of the serial interface Alert: COM port Invalid index X Healthy: Device COMX is set for Serial Menu. Disabled: Device COMX disabled Warning: Device COMX not initialized Healthy: Device COMX: PPP is UP. Alert: Device COMX: Call is UP. Internal Error. Warning: Device COMX is Down. Last dial-out attempt FAILED. Healthy: Device COMX is Down (No Active calls) Alert: Device COMX is in an UNKNOWN state ')
adslWANStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslWANStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adslWANStatus.setDescription('Status of ADI ADSL card Possible Values: Please note that X corresponds to the unit number of the serial interface Alert: Invalid index X Alert: Device ADIADSLX off line Disabled: Device ADIADSLX disabled Alert: Device ADIADSLX down Warning: Device ADIADSLX not initialized Healthy: Device ADIADSLX up')
adslWANStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 1) + (0,10027)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "adslWANStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: adslWANStatusTrap.setDescription('Status of ADI ADSL card Possible Values: Please note that X corresponds to the unit number of the serial interface Alert: Invalid index X Alert: Device ADIADSLX off line Disabled: Device ADIADSLX disabled Alert: Device ADIADSLX down Warning: Device ADIADSLX not initialized Healthy: Device ADIADSLX up ')
serverCESTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 2))
radiusAcctServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctServer.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAcctServer.setDescription('Status of External Radius Accounting Server. Possible Values: Warning: RADIUS Accounting Server: Server not configured Alert: RADIUS Accounting Server: Error Alert: RADIUS Accounting Server: Not Configured ')
radiusAcctServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3001)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "radiusAcctServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: radiusAcctServerTrap.setDescription('Status of External Radius Accounting Server')
backupServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupServer.setStatus('mandatory')
if mibBuilder.loadTexts: backupServer.setDescription("Status of External Disk Backup Server. Possible Values: Warning: Auto Backup Servers: Server not configured. Warning: Auto Backup Servers: Can't backup to xxx yyy zzz Alert: Auto Backup Servers: Can't backup to xxx yyy zzz Can't backup to xxx yyy zzz is issued as an alert when none of the servers can be reached. ")
backupServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3002)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "backupServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: backupServerTrap.setDescription('Status of External Disk Backup Server')
diskRedundency = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskRedundency.setStatus('mandatory')
if mibBuilder.loadTexts: diskRedundency.setDescription('Status of Local Disk Redundency. Possible Values: Alert: Disk Redundancy: Not Configured Alert: Disk Redundancy: Error ')
diskRedundencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3003)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "diskRedundency"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: diskRedundencyTrap.setDescription('Status of Local Disk Redundency')
intLDAPServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intLDAPServer.setStatus('mandatory')
if mibBuilder.loadTexts: intLDAPServer.setDescription('Status of Internal LDAP Server. Possible Values: Warning : Internal LDAP Server : Restore in progress Alert : Internal LDAP Server : Server is down ')
intLDAPServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3004)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "intLDAPServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: intLDAPServerTrap.setDescription('Status of Internal LDAP Server')
loadBalancingServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadBalancingServer.setStatus('mandatory')
if mibBuilder.loadTexts: loadBalancingServer.setDescription('Status of Load Balancing Server. Possible Values: Disabled: Load Balancing Service: Server not enabled; Warning: Load Balancing Service: Timed out waiting for response from server; ')
loadBalancingServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3005)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "loadBalancingServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: loadBalancingServerTrap.setDescription('Status of Load Balancing Server')
dnsServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServer.setStatus('mandatory')
if mibBuilder.loadTexts: dnsServer.setDescription('Status of DNS Server. Possible Values: Warning: DNS Servers : Error Warning: DNS Servers : Operational Alert: DNS Servers : Configured Alert: DNS Servers : Error The values have the following meaning: Warning: DNS Servers : Error -- SysInitCls::InitComplete failed Warning: DNS Servers : Operational -- At least one of the servers is reachable Alert: DNS Servers : Configured -- All servers configured, but none are reachable. Alert: DNS Servers : Error -- ')
dnsServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3006)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "dnsServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: dnsServerTrap.setDescription('Status of DNS Server')
snmpServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpServer.setStatus('mandatory')
if mibBuilder.loadTexts: snmpServer.setDescription("Status of SNMP Server. Possible Values: Warning: SNMP Servers : Error Warning: SNMP Servers : Can't reach xxx.xxx.xxx.xxx or yyy.yyy.yyy.yyy Alert: SNMP Servers : Error The values have the following meaning: Warning: SNMP Servers : Error -- SysInitCls::InitComplete failed Alert: SNMP Servers : Error -- AT least one server configured, but none are reachable. ")
snmpServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3007)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "snmpServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: snmpServerTrap.setDescription('Status of SNMP Server')
ipAddressPool = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressPool.setStatus('mandatory')
if mibBuilder.loadTexts: ipAddressPool.setDescription("Status of the IP address pool. Possible Values: Warning: IP Address Pool : Reserved address count is low. Warning: IP Address Pool : DHCP server(s) unavailable Alert: IP Address Pool : Server is down Alert: IP Address Pool : Not Configured Alert: IP Address Pool : No IP address available. Alert: IP Address Pool : Reserved address count is low. Alert: IP Address Pool : Associated system task failed. Alert: IP Address Pool : Server not configured Alert: IP Address Pool : Error The values have the following meaning: Warning: IP Address Pool : Reserved address count is low. -- Haven't hit desired cache size yet. Alert: IP Address Pool : Server is down -- SysInitCls::InitComplete failed Alert: IP Address Pool : Not Configured -- Task failed sanity check. Alert: IP Address Pool : No IP address available. -- No addresses in BOUND state. Alert: IP Address Pool : Associated system task failed. Alert: IP Address Pool : Server not configured Alert: IP Address Pool : Error ")
ipAddressPoolTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3008)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "ipAddressPool"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: ipAddressPoolTrap.setDescription('Status of the IP address pool')
extLDAPServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extLDAPServer.setStatus('mandatory')
if mibBuilder.loadTexts: extLDAPServer.setDescription('Status of External LDAP Server. Possible Values: Warning: External LDAP Servers : Server is down Alert: External LDAP Servers : Server is down The values have the following meaning: Warning: External LDAP Servers : Server is down -- One server is down Alert: External LDAP Servers : Server is down -- All servers are down ')
extLDAPServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,3009)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "extLDAPServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: extLDAPServerTrap.setDescription('Status of External LDAP Server')
radiusAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServer.setStatus('mandatory')
if mibBuilder.loadTexts: radiusAuthServer.setDescription('Status of Radius Authentication Server. Possible Values: Warning: RADIUS Authentication Servers : Error Alert: RADIUS Authentication Servers : Error The values have the following meaning: Warning: RADIUS Authentication Servers : Error -- At least one server is available Alert: RADIUS Authentication Servers : Error -- No servers are available ')
radiusAuthServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30010)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "radiusAuthServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: radiusAuthServerTrap.setDescription('Status of Radius Authentication Server')
certificateServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certificateServer.setStatus('mandatory')
if mibBuilder.loadTexts: certificateServer.setDescription('Status of Certificates Validity. Possible Values: Alert: Certificates Validity: All certificates are going to expire/expired; Warning: Certificates Validity: One/more certificate is invalid; Disabled: Certificates Validity: No certificate defined; ')
certificateServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30011)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "certificateServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: certificateServerTrap.setDescription('Status of Certificates Validity Possible Values: Healthy: Certificates Validity: Operational; Alert: Certificates Validity: All certificates are going to expire/expired; Warning: Certificates Validity: One/more certificate is invalid; Disabled: Certificates Validity: No certificate defined; ')
extLDAPAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extLDAPAuthServer.setStatus('mandatory')
if mibBuilder.loadTexts: extLDAPAuthServer.setDescription('Status of External LDAP Authentication Server. Possible Values: Warning: External LDAP Authentication Server: Server is down(indicates at least one server is not reachable and at least one server is reachable); Alert: External LDAP Authentication Server: Server is down(indicates all servers are not reachable); ')
extLDAPAuthServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30012)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "certificateServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: extLDAPAuthServerTrap.setDescription('Status of External LDAP Authentication Server. Possible Values: Warning: External LDAP Authentication Server: Server is down(indicates at least one server is not reachable and at least one server is reachable); Alert: External LDAP Authentication Server: Server is down(indicates all servers are not reachable); ')
cmpServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpServer.setStatus('mandatory')
if mibBuilder.loadTexts: cmpServer.setDescription('Status of CMP Server. Possible Values: One/more Certificate Requests error: there is at least one request error; One/more Certificate Requests processing: there is at least one request in processing; No Certificate Requests submitted: there is no request sent; ')
cmpServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30013)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "cmpServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: cmpServerTrap.setDescription('Status of CMP Server. Possible Values: One/more Certificate Requests error: there is at least one request error; One/more Certificate Requests processing: there is at least one request in processing; No Certificate Requests submitted: there is no request sent; ')
dhcpServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServer.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpServer.setDescription('Status of DHCP Server. Possible Values: Disabled: DHCP Server is Disabled Alert: DHCP Server is NOT configured Alert: DHCP Server is configured and operational, Using backup config Alert: No IP Address available for subnet Alert: DHCP Server is configured and server is DOWN Healthy: DHCP Server is Operational Warning: Subnet low on IP Addresses Warning: DHCP Server Initializing Warning: DHCP Server is Enabled, but status Unknown cannot be determined ')
dhcpServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30014)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "dhcpServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: dhcpServerTrap.setDescription('Status of DHCP Server Possible Values: Disabled: DHCP Server is Disabled Alert: DHCP Server is NOT configured Alert: DHCP Server is configured and operational, Using backup config Alert: No IP Address available for subnet Alert: DHCP Server is configured and server is DOWN Healthy: DHCP Server is Operational Warning: Subnet low on IP Addresses Warning: DHCP Server Initializing Warning: DHCP Server is Enabled, but status Unknown cannot be determined ')
sshServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServer.setStatus('mandatory')
if mibBuilder.loadTexts: sshServer.setDescription(' Status of SSH Server. Possible Values: Disabled : -- SSH Server is Disabled Healthy : -- SSH Server is Operational Warning : -- SSH Server is Restarting Warning : -- SSH Server is Initializing Warning : -- SSH Server is Unknown Alert : -- SSH Server is Down ')
sshServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30015)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "sshServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: sshServerTrap.setDescription('Status of SSH Server. ')
ntpServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServer.setStatus('mandatory')
if mibBuilder.loadTexts: ntpServer.setDescription('Status of NTP Server. Possible Values: Disabled : -- NTP server is globally disabled. Healthy : -- NTP server operational. Warning : -- Frequency correction. Warning : -- Frenquncy set. Warning : -- Time set. Warning : -- Spike detected. Warning : -- Clock synchronized. Warning : -- NTP initialized - not synchronized. Warning : -- Clock never set. ')
ntpServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30016)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "ntpServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: ntpServerTrap.setDescription('Status of NTP Server. ')
ospfServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfServer.setStatus('mandatory')
if mibBuilder.loadTexts: ospfServer.setDescription('Status of OSPF Server. Possible Values: Disabled : -- OSPF is globally disabled Warning : -- OSPF tunnel local addr A.B.C.D remote addr A.B.C.D is DOWN Warning : -- OSPF interface A.B.C.D is DOWN Alert : -- No connection to Routing Table Manager Alert : -- No connection to Routing Policy Service Healthy : -- Operational ')
ospfServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30017)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "ospfServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: ospfServerTrap.setDescription('Status of OSPF Server. ')
clipServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clipServer.setStatus('mandatory')
if mibBuilder.loadTexts: clipServer.setDescription('Status of Circuitless IP. Possible Values: Disabled : -- CLIP is Disabled Healthy : -- CLIP is operational ')
clipServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30018)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "clipServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: clipServerTrap.setDescription('Status of Circuitless IP. ')
dhcprelayServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcprelayServer.setStatus('mandatory')
if mibBuilder.loadTexts: dhcprelayServer.setDescription('Status of DHCP Relay Server. Possible Values: Alert : -- DHCP Relay requires reboot to start Alert : -- DHCP Relay task does not exist Alert : -- DHCP Relay task is suspended Healthy : -- DHCP Relay is up ')
dhcprelayServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30019)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "dhcprelayServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: dhcprelayServerTrap.setDescription('Status of DHCP Relay Server. ')
gdsServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdsServer.setStatus('mandatory')
if mibBuilder.loadTexts: gdsServer.setDescription('Status of Global Demand Services Services. Possible Values: Healthy : -- Global Demand Services operational. Disabled : -- Global Demand Services disabled. ')
gdsServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30020)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "gdsServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: gdsServerTrap.setDescription('Status of Global Demand Services Services. ')
demandintfServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandintfServer.setStatus('mandatory')
if mibBuilder.loadTexts: demandintfServer.setDescription('Status of Demand Interface. Possible Values: Healthy : -- Demand Interface Connected. Healthy : -- Demand Interface Connecting. Healthy : -- Demand Interface Activated. Healthy : -- Demand Interface Idle. Disabled : -- Demand Interface Disabled. ')
demandintfServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30021)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "demandintfServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: demandintfServerTrap.setDescription('Status of Demand Interface. ')
crlServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crlServer.setStatus('mandatory')
if mibBuilder.loadTexts: crlServer.setDescription('Status of CRL Server. Possible Values: Healthy : -- All Certificates are Valid Alert : -- One/more certificate is expired Warning : -- One/more certificate is going to expire Warning : -- Duplicate CA certs detected on the switch. Disabled : -- No certificate defined ')
crlServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30022)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "crlServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: crlServerTrap.setDescription('Status of CRL Server. ')
ocspServer = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 2, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocspServer.setStatus('mandatory')
if mibBuilder.loadTexts: ocspServer.setDescription('Status of OCSP Server. Possible Values: Disabled : -- No OCSP server configured Alert : -- All OCSP servers are down. Cert:%s Warning : -- At least one server is down. Cert:%s Warning : -- OCSP is enabled but not configured. Cert:%s Healthy : -- All servers are up ')
ocspServerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 2) + (0,30023)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "ocspServer"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: ocspServerTrap.setDescription('Status of OCSP Server. ')
serviceCESTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 3))
netBuffers = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: netBuffers.setDescription('Network buffer usage. Possible Values: Warning: Buffer Usage : Utilization exceeds 75% Alert: Buffer Usage : Utilization exceeds 87.5% ')
netBuffersTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5001)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "netBuffers"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: netBuffersTrap.setDescription('Network buffer usage')
fireWall = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fireWall.setStatus('mandatory')
if mibBuilder.loadTexts: fireWall.setDescription("Status of internal firewall. Possible Values: Disabled: Firewall: Firewall disabled; Disabled: Firewall: Firewall stopped; Warning: Firewall: Current Firewall is %s. Reboot is required to start %s; Warning: Firewall: Firewall state is not known!; Warning: Firewall: Daemon loading policy; Alert: Firewall: Firewall requires reboot to start; Alert: Firewall: Daemon task does not exist; Alert: Firewall: Daemon task is suspended; The values have the following meaning: -- The first two possible values are common to all firewalls. Disabled: Firewall: Firewall disabled; Warning: Firewall: Current Firewall is %s. Reboot is required to start %s; -- The firewall type (Contivity / CheckPoint) has been changed, but for it -- to take effect, the VPN Router must be restarted. -- Contivity Firewall specific values. Warning: Firewall: Firewall state is not known!; -- The Contivity firewall's -- state cannot be determined. -- CheckPoint Firewall specific values. Disabled: Firewall: Firewall stopped; Warning: Firewall: Daemon loading policy; Alert: Firewall: Firewall requires reboot to start; Alert: Firewall: Daemon task does not exist; Alert: Firewall: Daemon task is suspended; ")
fireWallTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5002)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "fireWall"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: fireWallTrap.setDescription('Status of internal firewall')
fipsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fipsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fipsStatus.setDescription('Status of FIPS. Possible Values: Warning: FIPS: Random generator test failed; Warning: FIPS: DESMAC check on executables Failed; Warning: FIPS: DES KAT Test Failed; Warning: FIPS: SHA1 Self Test Failed; Alert: FIPS: status not known;')
fipsStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5003)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "fipsStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: fipsStatusTrap.setDescription('Status of FIPS')
licensingStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: licensingStatus.setDescription('Status of temporary SW Licenses. Possible Values: Warning: Licensing: Temporary key will expire within 5 days; Alert: Licensing: Temporary key has expired;')
licensingStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5004)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "licensingStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: licensingStatusTrap.setDescription('Status temporary SW Licenses')
natStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natStatus.setStatus('mandatory')
if mibBuilder.loadTexts: natStatus.setDescription('Status of Network Address Translator. Possible Values: Disabled: NAT: NAT disabled; Warning: NAT: Reboot is required to start Interface NAT; Warning: NAT: NAT state is not known!; Alert: NAT: All Addresses in the Address Translation pool are used; Alert: NAT: LDAP policy parse failed - Using system default policy; The values have the following meaning: -- The first two possible values are common to all firewalls. Disabled: NAT: NAT disabled; Existing NAT sessions are not deleted, but -- no new address bindings are created for Interface NAT. Branch Office NAT -- is not affected. Warning: NAT: Reboot is required to start Interface NAT; -- To take effect, the VPN Router must be restarted. ')
natStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5005)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "natStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: natStatusTrap.setDescription('Status of Network Address Translator')
antiSpoofingStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antiSpoofingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: antiSpoofingStatus.setDescription('Status of Anti Spoofing Feature. Possible Values: Disabled: Anti-Spoofing is Disabled; Warning: Anti-Spoofing : Packets Dropped; Alert: Anti-Spoofing state not known!; The values have the following meaning: -- The first means the feature is disabled -- The second means packets were dropped due to a detected spoofed address -- The third should never happen, but means the status has been set to a bogus value. ')
antiSpoofingStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5006)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "antiSpoofingStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: antiSpoofingStatusTrap.setDescription('Status of Anti Spoofing Feature')
sslVpnStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslVpnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sslVpnStatus.setDescription('Status of SSL-VPN Accelerator. Possible Values: Disabled: Disabled -- The unit is administrativley disabled. Disabled: HW not installed -- There is no SSL-VPN Accelerator installed. Warning: Initialization in progress. -- The unit is being Initialized. Warning: Configuration Errors - see eventlog for details. Healthy: Operational -- The unit is Operational. Alert: Unreachable: Error Comminicating with SSL-VPN ')
sslVpnStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5007)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "sslVpnStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: sslVpnStatusTrap.setDescription('Status of SSL-VPN Accelerator')
usrIpAddrStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrIpAddrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: usrIpAddrStatus.setDescription('Status of User Ip Address Pool server. Possible Values: Alert : -- Server is down. Alert : -- Object not found. Alert : -- Server Not Configured. Alert : -- No IP address available. Warning : -- Reserved address count is low. Healthy : -- User Ip Address Pool operational. Alert : -- Associated system task failed. Warning : -- No DHCP Pool selected for any group/subgroup. Warning : -- DHCP server(s) unavailable. Healthy : -- Local pool: %s; Healthy : -- DHCP pool: %s; Healthy : -- All User IP Pools are under quota exhausted. Alert : -- At least one User IP Pool exceeds %d percent ')
usrIpAddrStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5008)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "usrIpAddrStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: usrIpAddrStatusTrap.setDescription('Status of User Ip Address Pool server')
vrrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpStatus.setDescription('Status of VRRP Server. Possible Values: Disabled : -- VRRP is globally disabled Alert : -- Configuration errors -- see syslog for details Warning : -- LDAP has changed -- see syslog for details Healthy : -- VRRP is operational ')
vrrpStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,5009)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "vrrpStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: vrrpStatusTrap.setDescription('Status of VRRP Server')
mcastRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcastRelayStatus.setDescription('Status of Multicast Relay. Possible Values: Warning : -- Multicast Relay Not Initialized Disabled : -- Multicast Relay is Globally Disabled Alert : -- RPS Reg Blocked Healthy : -- Multicast Relay is operational ')
mcastRelayStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,50010)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "mcastRelayStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: mcastRelayStatusTrap.setDescription('Status of Multicast Relay')
dlswStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlswStatus.setDescription('Status of DLSW Server. Possible Values: Healthy : -- DLSw local peer enabled Disabled : -- DLSw local peer disabled Disabled : -- DLSw feature disabled Disabled : -- No DLSw local peer defined ')
dlswStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,50011)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "dlswStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: dlswStatusTrap.setDescription('Status of DLSW Server')
ipsecFailoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecFailoverStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipsecFailoverStatus.setDescription('Status of IPsec Failover service. Possible Values: Disabled : -- Failover service disabled Healthy : -- Failover service operational Alert : -- Failover service not initialized ')
ipsecFailoverStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,50012)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "ipsecFailoverStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: ipsecFailoverStatusTrap.setDescription('Status of IPsec Failover service')
tunnelGuardStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelGuardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tunnelGuardStatus.setDescription('Status of TunnelGuard. Possible Values: Disabled : -- Tunnelguard Disabled Healthy : -- Tunnelguard Operational Alert : -- Fatal error encountered during tunnelguard processing Warning : -- Tunnelguard state unknown! ')
tunnelGuardStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,50013)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "tunnelGuardStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: tunnelGuardStatusTrap.setDescription('Status of TunnelGuard')
ripStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatus.setDescription('Status of RIP Server. Possible Values: Warning : -- Rip Not Initalized Disabled : -- Rip is Globally Disabled Alert : -- RTM Open Blocked Alert : -- RPS Reg Blocked Healthy : -- RIP is operational ')
ripStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,50014)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "ripStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: ripStatusTrap.setDescription('Status of RIP Server')
routePolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routePolicyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: routePolicyStatus.setDescription('Status of Route Policy. Possible Values: Disable : -- Routing Policy Server disabled. Alert : -- Routing Policy Server requires reboot to start. Alert : -- Routing Policy Server task does not exist. Alert : -- Routing Policy Server task is suspended. Healthy : -- Routing Policy Server is up. ')
routePolicyStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,50015)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "routePolicyStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: routePolicyStatusTrap.setDescription('Status of Route Policy')
cRoutesMStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRoutesMStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cRoutesMStatus.setDescription("Status of Client Routes Marshaler. Possible Values: Alert : -- ClientRoutesMarshaler does not exist!!! Warning : -- ClientRoutesMarshaler's task cannot be verified! Disabled: -- ClientRoutesMarshaler is disabled. Healthy : -- ClientRoutesMarshaler is UP. ")
cRoutesMStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,50016)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "cRoutesMStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: cRoutesMStatusTrap.setDescription('Status of Client Routes Marshaler')
igmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 3, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: igmpStatus.setDescription('Status of IGMP Server. Possible Values: Disabled : -- IGMP is not initialized Warning : -- IGMP(CMS) is not initialized Warning : -- No Upstream interface is up Alert : -- No downstream interface is up Healthy : -- IGMP is operational ')
igmpStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 3) + (0,50017)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "igmpStatus"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: igmpStatusTrap.setDescription('Status of IGMP Server')
loginCESTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 4))
failedLogin = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failedLogin.setStatus('mandatory')
if mibBuilder.loadTexts: failedLogin.setDescription('Failed Login Attempt. Possible Values: Failed Login Attempt: Username=IPSEC Encrypted: Date/Time=(xx) ; Failed Login Attempt: Username=(userid): Date/Time=(xx) ; Failed Login Attempt. Invalid Account: Username=(userid): Date/Time=(xx) ; Failed Remote Network Login: Username=(userid): Date/Time=(xx) ; Failed Remote Application Login: Username=(userid): Date/Time=(xx) ; The values have the following meaning: --(userid) is a place holder for the actual userid of the person or branch office --trying to login. --(xx) is a place holder for the date and time string. ')
failedLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 4) + (0,101)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "failedLogin"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: failedLoginTrap.setDescription('Failed Login Attempt')
intrusionCESTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 5))
securityIntrusion = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityIntrusion.setStatus('mandatory')
if mibBuilder.loadTexts: securityIntrusion.setDescription('Security Intrusion. Possible Values: Intruder: : Source: %s, Destination: %s; ')
securityIntrusionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 5) + (0,201)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "securityIntrusion"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: securityIntrusionTrap.setDescription('Security Intrusion')
powerUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUpTrap.setStatus('deprecated')
if mibBuilder.loadTexts: powerUpTrap.setDescription('Power Up. Possible Values: Cold Start ')
powerUpTrapEntry = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1) + (0,401)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "powerUpTrap"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: powerUpTrapEntry.setDescription('Power Up')
periodicHeartbeat = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: periodicHeartbeat.setStatus('mandatory')
if mibBuilder.loadTexts: periodicHeartbeat.setDescription('Periodic Heartbeat. Possible Values: Has been executed n times ')
periodicHeartbeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1) + (0,601)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "severityLevel"), ("CONTIVITY-TRAPS-V1-MIB", "periodicHeartbeat"), ("CONTIVITY-TRAPS-V1-MIB", "systemName"), ("CONTIVITY-TRAPS-V1-MIB", "systemDate"), ("CONTIVITY-TRAPS-V1-MIB", "systemTime"), ("CONTIVITY-TRAPS-V1-MIB", "systemUpTime"))
if mibBuilder.loadTexts: periodicHeartbeatTrap.setDescription('Periodic Heartbeat')
snmpAgentTrapInfo_ces = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 14)).setLabel("snmpAgentTrapInfo-ces")
coldStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,0))
if mibBuilder.loadTexts: coldStart.setDescription('A coldStart trap signifies that the SNMPv2 entity, acting in an agent role, is reinitializing itself and that its configuration may have been altered.')
snmpAgentInterfaceInfo_ces = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 14, 2)).setLabel("snmpAgentInterfaceInfo-ces")
ifReasonForStatus_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 2, 1), IfReasonForStatus_ces()).setLabel("ifReasonForStatus-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: ifReasonForStatus_ces.setStatus('mandatory')
if mibBuilder.loadTexts: ifReasonForStatus_ces.setDescription('The reason for the status change. These include: unknown(1) -- the reason could not be determined. timed-out(2) -- connection(tunnel) timed out. ')
ifPhysLocation_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 2, 2), PortLocation_ces()).setLabel("ifPhysLocation-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPhysLocation_ces.setStatus('mandatory')
if mibBuilder.loadTexts: ifPhysLocation_ces.setDescription('The physical location of the port. This has the values of motherBoardOrSlot0, slot1, slot2, slot3, slot4, slot5.')
ifPhysRelPos_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 2, 3), Integer32()).setLabel("ifPhysRelPos-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPhysRelPos_ces.setStatus('mandatory')
if mibBuilder.loadTexts: ifPhysRelPos_ces.setDescription('The relative position of the physical port at the location defined by interfacePhysLocation.')
ifIpAddr_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 2, 4), IpAddress()).setLabel("ifIpAddr-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIpAddr_ces.setStatus('mandatory')
if mibBuilder.loadTexts: ifIpAddr_ces.setDescription('For physical ports this is the associated IP address. For a tunnel connection it is the local IP address.')
ifName_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 2, 5), DisplayString()).setLabel("ifName-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: ifName_ces.setStatus('mandatory')
if mibBuilder.loadTexts: ifName_ces.setDescription('The name of the interface, same as ifName.')
ifTunnelRemoteIpAddr_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 2, 6), IpAddress()).setLabel("ifTunnelRemoteIpAddr-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTunnelRemoteIpAddr_ces.setStatus('mandatory')
if mibBuilder.loadTexts: ifTunnelRemoteIpAddr_ces.setDescription('The remote IP address of a tunnel connection.')
linkDown = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"), ("CONTIVITY-TRAPS-V1-MIB", "ifReasonForStatus_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifPhysLocation_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifPhysRelPos_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifIpAddr_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifName_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifTunnelRemoteIpAddr_ces"), ("SNMPv2-MIB", "sysObjectID"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: linkDown.setDescription("A linkDown trap signifies that the sending protocol entity recognizes a failure in one of the communication links represented in the agent's configuration. Varbind list: ifIndex -- ifIndex of the interface. ifAdminStatus -- ifAdminStatus of the interface. ifOperStatus -- ifOperStatus of the interface. ifDescr -- ifDescr of the interface. ifType -- ifType, this provides descrimination of interfaces that are tunnels. ifReasonForStatus-ces -- reason for the change in status. ifPhysLocation-ces -- this is the slot number. ifPhysRelPos-ces -- the port number on the board defined in interfacePhysLocation. ifIpAddr-ces -- IP address assigned to the phys port or the local IP address of a tunnel. ifName-ces -- Name of the tunnel or physical interface. ifTunnelRemoteIpAddr-ces -- for non-tunnel interfaces it is zero. sysObjectID -- sysObjectID of the unit. sysName -- sysName of the unit. ")
linkUp = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"), ("CONTIVITY-TRAPS-V1-MIB", "ifReasonForStatus_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifPhysLocation_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifPhysRelPos_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifIpAddr_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifName_ces"), ("CONTIVITY-TRAPS-V1-MIB", "ifTunnelRemoteIpAddr_ces"), ("SNMPv2-MIB", "sysObjectID"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: linkUp.setDescription("A linkUp trap signifies that the sending protocol entity recognizes that one of the communication links represented in the agent's configuration has come up. Varbind list: ifIndex -- ifIndex of the interface. ifAdminStatus -- ifAdminStatus of the interface. ifOperStatus -- ifOperStatus of the interface. ifDescr -- ifDescr of the interface. ifType -- ifType, this provides descrimination of interfaces that are tunnels. ifReasonForStatus-ces -- reason for the change in status ifPhysLocation-ces -- this is the slot number. ifPhysRelPos-ces -- the port number on the board defined in interfacePhysLocation. ifIpAddr-ces -- IP address assigned to the phys port or the local IP address of a tunnel. ifName-ces -- Name of the tunnel or physical interface. ifTunnelRemoteIpAddr-ces -- for non-tunnel interfaces it is zero. sysObjectID -- sysObjectID of the unit. sysName -- sysName of the unit. ")
snmpAgentAuthTrapInfo_ces = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 14, 1)).setLabel("snmpAgentAuthTrapInfo-ces")
snmpAuthenOperation_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(160, 161, 163, 165))).clone(namedValues=NamedValues(("getRequest", 160), ("getNextRequest", 161), ("setRequest", 163), ("getBulkRequest", 165)))).setLabel("snmpAuthenOperation-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAuthenOperation_ces.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAuthenOperation_ces.setDescription('SNMP operation attempted.')
snmpAuthenIpAddress_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 1, 2), IpAddress()).setLabel("snmpAuthenIpAddress-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAuthenIpAddress_ces.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAuthenIpAddress_ces.setDescription('IP address of host trying to access the CES.')
snmpAuthenCommString_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 1, 3), DisplayString()).setLabel("snmpAuthenCommString-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAuthenCommString_ces.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAuthenCommString_ces.setDescription('Community string used to access the CES.')
authenticationFailure = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,5)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "snmpAuthenOperation_ces"), ("CONTIVITY-TRAPS-V1-MIB", "snmpAuthenIpAddress_ces"), ("CONTIVITY-TRAPS-V1-MIB", "snmpAuthenCommString_ces"), ("SNMPv2-MIB", "sysObjectID"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: authenticationFailure.setDescription('An authenticationFailure trap signifies that the SNMPv2 entity, acting in an agent role, has received a protocol message that is not properly authenticated. The snmpEnableAuthenTraps object indicates whether this trap will be generated. snmpAuthenOperation-ces identifies the operation( ie. GetRequest, GetNextRequest,... ) was being attempted. snmpAuthenIpAddress-ces identifies the source IP address of the operation. snmpAuthenCommString-ces identifies the community string that was used in the operation.')
snmpAgentFirewallInfo_ces = MibIdentifier((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3)).setLabel("snmpAgentFirewallInfo-ces")
firewallPolicyType_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 1), FirewallPolicyType_ces()).setLabel("firewallPolicyType-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallPolicyType_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallPolicyType_ces.setDescription('Policy type.')
firewallRuleType_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 2), FirewallRuleType_ces()).setLabel("firewallRuleType-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallRuleType_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallRuleType_ces.setDescription('Type of rule that triggered this event.')
firewallRuleNumber_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 3), Integer32()).setLabel("firewallRuleNumber-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallRuleNumber_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallRuleNumber_ces.setDescription('Number of the rule that triggered this event.')
firewallSrcAddr_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 6), IpAddress()).setLabel("firewallSrcAddr-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallSrcAddr_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallSrcAddr_ces.setDescription('Source IP address of the packet.')
firewallSrcPort_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 7), Integer32()).setLabel("firewallSrcPort-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallSrcPort_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallSrcPort_ces.setDescription('Source port address of the packet.')
firewallDestAddr_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 8), IpAddress()).setLabel("firewallDestAddr-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallDestAddr_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallDestAddr_ces.setDescription('Destination IP address of the packet.')
firewallDestPort_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 9), Integer32()).setLabel("firewallDestPort-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallDestPort_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallDestPort_ces.setDescription('Destination port of the packet.')
firewallProtocolID_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 10), Integer32()).setLabel("firewallProtocolID-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallProtocolID_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallProtocolID_ces.setDescription('The value of the protocol field in the IP header.')
firewallRuleAction_ces = MibScalar((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3, 11), FirewallRuleAction_ces()).setLabel("firewallRuleAction-ces").setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallRuleAction_ces.setStatus('mandatory')
if mibBuilder.loadTexts: firewallRuleAction_ces.setDescription('Action defined for the triggered rule.')
firewallRuleTriggeredTrap = NotificationType((1, 3, 6, 1, 4, 1, 2505, 1, 14, 3) + (0,1)).setObjects(("CONTIVITY-TRAPS-V1-MIB", "firewallPolicyType_ces"), ("CONTIVITY-TRAPS-V1-MIB", "firewallRuleType_ces"), ("CONTIVITY-TRAPS-V1-MIB", "firewallRuleNumber_ces"), ("IF-MIB", "ifIndex"), ("CONTIVITY-TRAPS-V1-MIB", "ifName_ces"), ("CONTIVITY-TRAPS-V1-MIB", "firewallSrcAddr_ces"), ("CONTIVITY-TRAPS-V1-MIB", "firewallSrcPort_ces"), ("CONTIVITY-TRAPS-V1-MIB", "firewallDestAddr_ces"), ("CONTIVITY-TRAPS-V1-MIB", "firewallDestPort_ces"), ("CONTIVITY-TRAPS-V1-MIB", "firewallProtocolID_ces"), ("CONTIVITY-TRAPS-V1-MIB", "firewallRuleAction_ces"), ("SNMPv2-MIB", "sysObjectID"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: firewallRuleTriggeredTrap.setDescription("An event sent at the user's request to signal that a rule has been matched. firewallPolicyType-ces -- Policy type. firewallRuleType-ces -- Type of rule that triggered this event. firewallRuleNumber-ces -- Number of the rule that triggered this event. ifIndex -- ifIndex is the index into the ifTable for port that received the packet. ifName-ces -- The name of the interface, same as ifName. firewallSrcAddr-ces -- Source IP address of the packet. firewallSrcPort-ces -- Source port address of the packet. firewallDestAddr-ces -- Destination IP address of the packet. firewallDestPort-ces -- Destination port of the packet. firewallProtocolID-ces -- The value of the protocol field in the IP header. firewallRuleAction-ces -- Action defined for the triggered rule. ")
mibBuilder.exportSymbols("CONTIVITY-TRAPS-V1-MIB", ipsecFailoverStatusTrap=ipsecFailoverStatusTrap, failedLogin=failedLogin, powerUpTrap=powerUpTrap, antiSpoofingStatus=antiSpoofingStatus, ocspServer=ocspServer, PYSNMP_MODULE_ID=contivityTrapsV1, intLDAPServer=intLDAPServer, ifTunnelRemoteIpAddr_ces=ifTunnelRemoteIpAddr_ces, ripStatusTrap=ripStatusTrap, firewallPolicyType_ces=firewallPolicyType_ces, snmpServerTrap=snmpServerTrap, clipServer=clipServer, cpuTwoStatusTrap=cpuTwoStatusTrap, dnsServer=dnsServer, vrrpStatus=vrrpStatus, twelveVoltsPositveTrap=twelveVoltsPositveTrap, tunnelGuardStatusTrap=tunnelGuardStatusTrap, IfReasonForStatus_ces=IfReasonForStatus_ces, twoDotFiveVBTrap=twoDotFiveVBTrap, crlServer=crlServer, powerUpTrapEntry=powerUpTrapEntry, intLDAPServerTrap=intLDAPServerTrap, ipsecFailoverStatus=ipsecFailoverStatus, lanCardStatusTrap=lanCardStatusTrap, crlServerTrap=crlServerTrap, sshServerTrap=sshServerTrap, extLDAPAuthServerTrap=extLDAPAuthServerTrap, usrIpAddrStatus=usrIpAddrStatus, twoDotFiveVB=twoDotFiveVB, dlswStatus=dlswStatus, ipAddressPool=ipAddressPool, loadBalancingServerTrap=loadBalancingServerTrap, hardDisk0Status=hardDisk0Status, dhcprelayServerTrap=dhcprelayServerTrap, criticalTemperatureTrap=criticalTemperatureTrap, dnsServerTrap=dnsServerTrap, adslWANStatus=adslWANStatus, cpuTwoStatus=cpuTwoStatus, lanCardStatus=lanCardStatus, firewallDestPort_ces=firewallDestPort_ces, demandintfServer=demandintfServer, securityIntrusionTrap=securityIntrusionTrap, linkUp=linkUp, firewallRuleAction_ces=firewallRuleAction_ces, systemTime=systemTime, radiusAuthServer=radiusAuthServer, fiveVoltsPosStatusTrap=fiveVoltsPosStatusTrap, backupServerTrap=backupServerTrap, radiusAcctServer=radiusAcctServer, backupServer=backupServer, ripStatus=ripStatus, PortLocation_ces=PortLocation_ces, ifPhysRelPos_ces=ifPhysRelPos_ces, snmpAuthenIpAddress_ces=snmpAuthenIpAddress_ces, t1WANStatusTrap=t1WANStatusTrap, hardDisk0StatusTrap=hardDisk0StatusTrap, certificateServer=certificateServer, hardDisk1StatusTrap=hardDisk1StatusTrap, adslWANStatusTrap=adslWANStatusTrap, igmpStatus=igmpStatus, dualPowerSupplyTrap=dualPowerSupplyTrap, hwAccelStatus=hwAccelStatus, gdsServer=gdsServer, firewallProtocolID_ces=firewallProtocolID_ces, snmpAuthenOperation_ces=snmpAuthenOperation_ces, radiusAcctServerTrap=radiusAcctServerTrap, ifIpAddr_ces=ifIpAddr_ces, extLDAPServerTrap=extLDAPServerTrap, dhcprelayServer=dhcprelayServer, netBuffersTrap=netBuffersTrap, loadBalancingServer=loadBalancingServer, snmpServer=snmpServer, routePolicyStatusTrap=routePolicyStatusTrap, cmpServerTrap=cmpServerTrap, vrrpStatusTrap=vrrpStatusTrap, firewallDestAddr_ces=firewallDestAddr_ces, ntpServerTrap=ntpServerTrap, coldStart=coldStart, snmpAgentAuthTrapInfo_ces=snmpAgentAuthTrapInfo_ces, t3WANStatus=t3WANStatus, briWANStatus=briWANStatus, fiveVoltsMinus=fiveVoltsMinus, cRoutesMStatusTrap=cRoutesMStatusTrap, clipServerTrap=clipServerTrap, snmpAgentTrapInfo_ces=snmpAgentTrapInfo_ces, systemDate=systemDate, diskRedundency=diskRedundency, twoDotFiveVATrap=twoDotFiveVATrap, ntpServer=ntpServer, igmpStatusTrap=igmpStatusTrap, ospfServerTrap=ospfServerTrap, natStatusTrap=natStatusTrap, firewallSrcAddr_ces=firewallSrcAddr_ces, firewallRuleTriggeredTrap=firewallRuleTriggeredTrap, normalTemperatureTrap=normalTemperatureTrap, fireWall=fireWall, ifPhysLocation_ces=ifPhysLocation_ces, ocspServerTrap=ocspServerTrap, hardDisk1Status=hardDisk1Status, cRoutesMStatus=cRoutesMStatus, threeVoltsPositiveTrap=threeVoltsPositiveTrap, firewallRuleNumber_ces=firewallRuleNumber_ces, diskRedundencyTrap=diskRedundencyTrap, dualPowerSupply=dualPowerSupply, contivityTrapsV1=contivityTrapsV1, fanOneStatus=fanOneStatus, linkDown=linkDown, severityLevel=severityLevel, failedLoginTrap=failedLoginTrap, extLDAPAuthServer=extLDAPAuthServer, dlswStatusTrap=dlswStatusTrap, certificateServerTrap=certificateServerTrap, tunnelGuardStatus=tunnelGuardStatus, loginCESTrapInfo=loginCESTrapInfo, ifReasonForStatus_ces=ifReasonForStatus_ces, authenticationFailure=authenticationFailure, netBuffers=netBuffers, dhcpServerTrap=dhcpServerTrap, mcastRelayStatusTrap=mcastRelayStatusTrap, licensingStatusTrap=licensingStatusTrap, chassisFanStatus=chassisFanStatus, systemName=systemName, hwAccelTrap=hwAccelTrap, FirewallPolicyType_ces=FirewallPolicyType_ces, memoryUsage=memoryUsage, snmpAuthenCommString_ces=snmpAuthenCommString_ces, demandintfServerTrap=demandintfServerTrap, periodicHeartbeat=periodicHeartbeat, ipAddressPoolTrap=ipAddressPoolTrap, serviceCESTrapInfo=serviceCESTrapInfo, firewallSrcPort_ces=firewallSrcPort_ces, mcastRelayStatus=mcastRelayStatus, t3WANStatusTrap=t3WANStatusTrap, briWANStatusTrap=briWANStatusTrap, sshServer=sshServer, FirewallRuleType_ces=FirewallRuleType_ces, licensingStatus=licensingStatus, fiveVoltsPositive=fiveVoltsPositive, firewallRuleType_ces=firewallRuleType_ces, cmpServer=cmpServer, t1WANStatus=t1WANStatus, v90WANStatusTrap=v90WANStatusTrap, twelveVoltsMinsTrap=twelveVoltsMinsTrap, twoDotFiveVA=twoDotFiveVA, serUartStatus=serUartStatus, natStatus=natStatus, ifName_ces=ifName_ces, threeVoltsPositive=threeVoltsPositive, snmpAgentFirewallInfo_ces=snmpAgentFirewallInfo_ces, criticalTemperature=criticalTemperature, intrusionCESTrapInfo=intrusionCESTrapInfo, sslVpnStatus=sslVpnStatus, chassisFanStatusTrap=chassisFanStatusTrap, securityIntrusion=securityIntrusion, fiveVoltsMinusTrap=fiveVoltsMinusTrap, dhcpServer=dhcpServer, fipsStatus=fipsStatus, fipsStatusTrap=fipsStatusTrap, fanOneStatusTrap=fanOneStatusTrap, extLDAPServer=extLDAPServer, chassisIntrusionTrap=chassisIntrusionTrap, ospfServer=ospfServer, usrIpAddrStatusTrap=usrIpAddrStatusTrap, radiusAuthServerTrap=radiusAuthServerTrap, routePolicyStatus=routePolicyStatus, v90WANStatus=v90WANStatus, hardwareCESTrapInfo=hardwareCESTrapInfo, chassisIntrusion=chassisIntrusion, memoryUsageTrap=memoryUsageTrap, periodicHeartbeatTrap=periodicHeartbeatTrap, fanTwoStatus=fanTwoStatus, gdsServerTrap=gdsServerTrap, serverCESTrapInfo=serverCESTrapInfo, antiSpoofingStatusTrap=antiSpoofingStatusTrap, twelveVoltsPositive=twelveVoltsPositive, normalTemperature=normalTemperature, snmpAgentInterfaceInfo_ces=snmpAgentInterfaceInfo_ces, twelveVoltsMinus=twelveVoltsMinus, serUartStatusTrap=serUartStatusTrap, sslVpnStatusTrap=sslVpnStatusTrap, fanTwoStatusTrap=fanTwoStatusTrap, FirewallRuleAction_ces=FirewallRuleAction_ces, systemUpTime=systemUpTime, fireWallTrap=fireWallTrap)
