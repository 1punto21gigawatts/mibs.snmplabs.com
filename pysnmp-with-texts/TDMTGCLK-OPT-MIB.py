#
# PySNMP MIB module TDMTGCLK-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TDMTGCLK-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Bits, ObjectIdentity, Counter64, iso, NotificationType, IpAddress, enterprises, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Gauge32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "ObjectIdentity", "Counter64", "iso", "NotificationType", "IpAddress", "enterprises", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Gauge32", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
cdx6500STTdmtgClkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17))
class DisplayString(OctetString):
    pass

cdx6500TdmtgClkTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29), )
if mibBuilder.loadTexts: cdx6500TdmtgClkTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgClkTable.setDescription('A list of Configuration parameters that makeup the TDMTG Clock Table.')
cdx6500TdmtgClkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1), ).setIndexNames((0, "TDMTGCLK-OPT-MIB", "cdx6500TdmtgClkEntryNumber"))
if mibBuilder.loadTexts: cdx6500TdmtgClkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgClkCfgEntry.setDescription('Each entry contains the Configuration parameters for each Tdmtg clock table.')
cdx6500TdmtgClkEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgClkEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgClkEntryNumber.setDescription('This identifies the particular TDMTG Network Clock Table entry being configured. The number of instances defined by this entry depends on the configured value of the Maximum TDMTG Network Clock Entry parameter in the Node record . ')
cdx6500TdmtgCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgCardNumber.setDescription('Specifies the slot number in which the card resides. Should be Entry No + 1.')
cdx6500TdmtgCardClkParticipation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("system-clock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgCardClkParticipation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgCardClkParticipation.setDescription('Specifies whether the card participates in System clock none : Card does not participate in System clock system-clock : Card participates in System clock.')
cdx6500TdmtgGroup1ClkParticipation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group-clock", 1), ("card-clock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgGroup1ClkParticipation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgGroup1ClkParticipation.setDescription('Specifies whether this group participates in Card Clock group-clock : Group does not participate in Card clock card-clock : Group participates in Card clock.')
cdx6500TdmtgGroup2ClkParticipation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group-clock", 1), ("card-clock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgGroup2ClkParticipation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgGroup2ClkParticipation.setDescription('Specifies whether this group participates in Card Clock group-clock : Group does not participate in Card clock card-clock : Group participates in Card clock.')
cdx6500TdmtgGroup3ClkParticipation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group-clock", 1), ("card-clock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgGroup3ClkParticipation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgGroup3ClkParticipation.setDescription('Specifies whether this group participates in Card Clock group-clock : Group does not participate in Card clock card-clock : Group participates in Card clock.')
cdx6500TdmtgStatSystemClkStatus = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatSystemClkStatus.setStatus('optional')
if mibBuilder.loadTexts: cdx6500TdmtgStatSystemClkStatus.setDescription('The Status of Current System Clock.')
cdx6500TdmtgStatCardClkRegisteredTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 2), )
if mibBuilder.loadTexts: cdx6500TdmtgStatCardClkRegisteredTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgStatCardClkRegisteredTable.setDescription('The Table of registered Card Clock Number.')
cdx6500TdmtgStatClkRegisteredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 2, 1), ).setIndexNames((0, "TDMTGCLK-OPT-MIB", "cdx6500TdmtgStatClkRegisteredEntryNumber"))
if mibBuilder.loadTexts: cdx6500TdmtgStatClkRegisteredEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgStatClkRegisteredEntry.setDescription('Each entry contains the Registered Card Clock.')
cdx6500TdmtgStatClkRegisteredEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatClkRegisteredEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgStatClkRegisteredEntryNumber.setDescription('This identifies the particular cdx6500TdmtgStatCardClkRegisteredTable.')
cdx6500TdmtgStatCardClkRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatCardClkRegistered.setStatus('optional')
if mibBuilder.loadTexts: cdx6500TdmtgStatCardClkRegistered.setDescription('The status of current Registered Card Clock.')
cdx6500TdmtgStatGroupCardClkRegisteredTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3), )
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupCardClkRegisteredTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupCardClkRegisteredTable.setDescription('The Table of registered Group Card Number.')
cdx6500TdmtgStatGroupClkRegisteredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3, 1), ).setIndexNames((0, "TDMTGCLK-OPT-MIB", "cdx6500TdmtgStatClkEntryNumber"), (0, "TDMTGCLK-OPT-MIB", "cdx6500TdmtgStatGroupClkRegisteredEntryNumber"))
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupClkRegisteredEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupClkRegisteredEntry.setDescription('Each entry contains the Registered Group Card Clock.')
cdx6500TdmtgStatClkEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatClkEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgStatClkEntryNumber.setDescription('This identifies the particular cdx6500TdmtgStatGroupCardClkRegisteredTable.')
cdx6500TdmtgStatGroupClkRegisteredEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupClkRegisteredEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupClkRegisteredEntryNumber.setDescription('This identifies the particular cdx6500TdmtgStatGroupCardClkRegisteredTable.')
cdx6500TdmtgStatGroupCardClkRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 17, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupCardClkRegistered.setStatus('optional')
if mibBuilder.loadTexts: cdx6500TdmtgStatGroupCardClkRegistered.setDescription('The status of current Registered Group Card Clock.')
mibBuilder.exportSymbols("TDMTGCLK-OPT-MIB", DisplayString=DisplayString, cdx6500TdmtgClkEntryNumber=cdx6500TdmtgClkEntryNumber, codex=codex, cdx6500Configuration=cdx6500Configuration, cdx6500TdmtgStatClkRegisteredEntryNumber=cdx6500TdmtgStatClkRegisteredEntryNumber, cdx6500TdmtgStatSystemClkStatus=cdx6500TdmtgStatSystemClkStatus, cdx6500TdmtgStatCardClkRegistered=cdx6500TdmtgStatCardClkRegistered, cdx6500TdmtgStatCardClkRegisteredTable=cdx6500TdmtgStatCardClkRegisteredTable, cdx6500Statistics=cdx6500Statistics, cdx6500TdmtgStatGroupCardClkRegisteredTable=cdx6500TdmtgStatGroupCardClkRegisteredTable, cdxProductSpecific=cdxProductSpecific, cdx6500TdmtgCardClkParticipation=cdx6500TdmtgCardClkParticipation, cdx6500TdmtgGroup1ClkParticipation=cdx6500TdmtgGroup1ClkParticipation, cdx6500TdmtgStatClkEntryNumber=cdx6500TdmtgStatClkEntryNumber, cdx6500STTdmtgClkGroup=cdx6500STTdmtgClkGroup, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, cdx6500TdmtgGroup3ClkParticipation=cdx6500TdmtgGroup3ClkParticipation, cdx6500TdmtgClkCfgEntry=cdx6500TdmtgClkCfgEntry, cdx6500TdmtgGroup2ClkParticipation=cdx6500TdmtgGroup2ClkParticipation, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdx6500=cdx6500, cdx6500TdmtgStatGroupClkRegisteredEntryNumber=cdx6500TdmtgStatGroupClkRegisteredEntryNumber, cdx6500TdmtgStatGroupCardClkRegistered=cdx6500TdmtgStatGroupCardClkRegistered, cdx6500TdmtgClkTable=cdx6500TdmtgClkTable, cdx6500TdmtgStatGroupClkRegisteredEntry=cdx6500TdmtgStatGroupClkRegisteredEntry, cdx6500TdmtgStatClkRegisteredEntry=cdx6500TdmtgStatClkRegisteredEntry, cdx6500TdmtgCardNumber=cdx6500TdmtgCardNumber)
