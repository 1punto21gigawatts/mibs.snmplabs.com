#
# PySNMP MIB module CISCO-SDSL-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SDSL-LINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adslLineAlarmConfProfileName, AdslLineProfileName, adslLineConfProfileName = mibBuilder.importSymbols("ADSL-LINE-MIB", "adslLineAlarmConfProfileName", "AdslLineProfileName", "adslLineConfProfileName")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, TimeTicks, NotificationType, ModuleIdentity, iso, Bits, Counter32, IpAddress, MibIdentifier, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "TimeTicks", "NotificationType", "ModuleIdentity", "iso", "Bits", "Counter32", "IpAddress", "MibIdentifier", "Integer32", "Gauge32")
DisplayString, TextualConvention, VariablePointer, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "VariablePointer", "TruthValue")
ciscoSdslLineMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 155))
ciscoSdslLineMIB.setRevisions(('2001-08-20 10:00', '2001-04-09 10:13', '2001-01-30 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSdslLineMIB.setRevisionsDescriptions(('The object cSdslStucCurrGain and cSdslSturCurrGain are deprecated to remove the range. The new objects added are cSdslStucCurrGainRev and cSdslSturCurrGainRev.', 'Added cSdslSturAnnex for G.shdsl CPE device. Also updated description for cSdslStucAnnex. ', 'Added cSdslLineEquipmentType, cSdslLineAutoRateEnable. cSdslShdslLineMaxRate, cSdslStucPsdMaskType, cSdslStucAnnex, and cSdslStucThresholdSnrMgn. Changed default for cSdslLineMaxRate. Updated description for SNR and output pwr profile settings.',))
if mibBuilder.loadTexts: ciscoSdslLineMIB.setLastUpdated('200108201000Z')
if mibBuilder.loadTexts: ciscoSdslLineMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSdslLineMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-dslam@cisco.com')
if mibBuilder.loadTexts: ciscoSdslLineMIB.setDescription("This MIB module describes all variations of the symmetric DSL line interfaces. The structure of this module resembles and maintains consistency with the ADSL-LINE-MIB, ADSL-DMT-LINE-MIB, CISCO-ADSL-DMT-LINE-MIB, and CISCO-ADSL-CAP-LINE-MIB. Observe that the tables in this module do not necessarily extend the tables defined by the these mibs. Currently, only those tables that contain configuration information extend the profile tables defined by the above modules. This allows the management client to define DSL configuration profiles that apply across all DSL modems, independent of the technology being utilized by the modem. *** DEFINITIONS *** ATTENUATION Attenuation is a decrease in the strength of a signal over the length of a cable. CODING VIOLATION A coding violation occurs when the incoming signal exhibits a CRC anomaly. DOWNSTREAM The flow of data in the direction from the ATU-C to ATU-R. ERRORED SECOND A second with one or more coding violations or one or more incoming defects (e.g., LOS or LOSQ). LINE RATE The total data rate supported by a line. Observe that the payload rate is equal the line rate for the earliest implementations of SDSL. However, the payload rate maybe less than the line rate for future implementations. LOSS OF SYNC DEFECT A Loss of Sync Defect is defined as 3 consecutive received frames which contain one or more errors in the framing bits. A Loss of Sync Defect shall be cleared when at least 2 consecutive received frames contain no errors in the framing bits. LOSS OF SYNC FAILURE A LOSW Failure is defined as at least 2 consecutive seconds of LOSW Defect. The LOSW Failure should be cleared when the LOSW defect is absent for 20 seconds or less. (i.e. clear within 20 seconds ). MARGIN (also referred to as 'SNR margin') The difference between the SNR of the received signal and the SNR required to provide a BER of 10E-7. SEVERELY ERRORED SECOND A one second interval during which or more LOSW or CV defects are declared. UNAVAILABLE SECOND A Unavailable Second is defined as a one second interval during which LOSW Failure ( at least 2 seconds of LOSW Defect ). UPSTREAM The flow of data in the direction from the ATU-R to ATU-C. *** ABBREVIATIONS, ACRONYMS, AND SYMBOLS *** ADSL - Asymmetric Digital Subscriber Line. ATM - Asynchronous Transfer Mode. BER - Bit Error Ratio. CV - Coding Violation. DSL - Digital Subscriber Line. ES - Errored Second. LOS - Loss Of Sync. LOSQ - Loss Of Signal Quality. LOSW - Loss of Sync Word Failure PSD - Power Spectral Density. SES - Severely Errored Second. SNR - Signal-to-Noise Ratio. STM - Synchronous Transfer Mode. STU-C - SDSL Transceiver Unit, Central Office end. STU-R - ADSL Transceiver Unit, Remote terminal end. UAS - UnAvailable Second.")
class SdslPerfTimeElapsed(TextualConvention, Gauge32):
    description = "The number of seconds that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value."
    status = 'current'

class SdslPerfCurrDayCount(TextualConvention, Gauge32):
    description = "A counter associated with interval performance measurements in a current 1-day (24 hour) measurement interval. The value of this counter starts at zero at the beginning of an interval and increases when associated events occur, until the end of the 1-day interval. At that time, the agent stores the value of the counter in the previous 1-day history interval, if available, and resets the value of the counter to zero. In the case where the agent has no valid data available for this interval, the corresponding object instance is not available. In this case, the agent will respond with the appropriate error indicating that the instance does not exist; that is, 'noSuchName' in response to a SNMPv1 get request, and 'noSuchInstance' in response to a SNMPv2 get request."
    status = 'current'

class SdslPerfPrevDayCount(TextualConvention, Gauge32):
    description = "A counter associated with interval performance measurements during the most previous 1-day (24 hour) measurement interval. The value of this counter is equal to the current day counter at the end of its most recent interval. In the case where the agent has no valid data available for this interval, the corresponding object instance is not available. In this case, the agent will respond with the appropriate error indicating that the instance does not exist; that is, 'noSuchName' in response to a SNMPv1 get request, and 'noSuchInstance' in response to a SNMPv2 get request."
    status = 'current'

class SdslStuxDefect(TextualConvention, Bits):
    description = 'This object specifies any possible defects currently being exhibited by the STU-x. The value of this object is a bitmap of possible defects. The following list summarizes the meaning of each bit in the bitmap 0 lossOfSignal The STU-x is not receiving signal. 1 lossOfSignalQuality The upstream SNR margin has fallen below the SNR margin required to maintain a minimum BER of 10^-7. 2 noPeerStuPresent The STU-x can not initialize due to the absence of a peer STU-x. 3 lossOfSyncFailure The STU-x has suffered from at least 2 consecutive seconds of LOSW defect.'
    status = 'current'
    namedValues = NamedValues(("lossOfSignal", 0), ("lossOfSignalQuality", 1), ("noPeerStuPresent", 2), ("lossOfSyncFailure", 3))

ciscoSdslLineMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 155, 1))
cSdslLineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 1), )
if mibBuilder.loadTexts: cSdslLineTable.setStatus('current')
if mibBuilder.loadTexts: cSdslLineTable.setDescription('This table contains the enterprise-specific common attributes describing both ends of SDSL lines supported by the system.')
cSdslLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cSdslLineEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslLineEntry.setDescription('A set of enterprise-specific common attributes describing both ends of an SDSL line supported by the system. There exists an entry for each ifEntry with an ifType of sdsl(96).')
cSdslLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("base2b1q", 2), ("tcPam", 3), ("optis", 4), ("cap", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslLineCoding.setReference('ITU Draft G.Shdsl, Single-Pair High Speed Digital Subscriber Line(SHDSL) Transceivers, T1E1.4, Draft for HDSL2 Standard, Default Letter Ballot, ITU-T G991.1, High-Bit-Rate Digital Subscriber Transceivers(HDSL)')
if mibBuilder.loadTexts: cSdslLineCoding.setStatus('current')
if mibBuilder.loadTexts: cSdslLineCoding.setDescription('Specifies encoding of signal used by this line. Other types may be added in the future.')
cSdslLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("hdsl", 3), ("gShdsl", 4), ("hdsl2", 5), ("ds1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslLineFraming.setReference('ITU Draft G.Shdsl, Single-Pair High Speed Digital Subscriber Line(SHDSL) Transceivers, T1E1.4, Draft for HDSL2 Standard, Default Letter Ballot, ITU-T G991.1, High-Bit-Rate Digital Subscriber Transceivers(HDSL)')
if mibBuilder.loadTexts: cSdslLineFraming.setStatus('current')
if mibBuilder.loadTexts: cSdslLineFraming.setDescription('This object specifies the current Transmission Convergence framing structure being used by the interface.')
cSdslLineSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 1, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslLineSpecific.setStatus('current')
if mibBuilder.loadTexts: cSdslLineSpecific.setDescription('This object specifies an object identifier of an instance of an object in the MIB. The implementation determines the application of this object. For example, an implementation may use this object to provide a reference to the port-class physical entity (see the ENTITY-MIB for further details) corresponding to the SDSL line.')
cSdslLineConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 1, 1, 4), AdslLineProfileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSdslLineConfProfile.setStatus('current')
if mibBuilder.loadTexts: cSdslLineConfProfile.setDescription("This object specifies the row in the adslLineConfProfileTable (see the ADSL-LINE-MIB for further details), which applies for this SDSL line interface. In the case the implementation utilizes 'dynamic mode' (see the ADSL-LINE-MIB for further details), then the value of this object defaults to the name of a configuration profile designated by the implementation as the default configuration profile. In the case the implementation utilizes 'static mode', then the the value of this object is read-only.")
cSdslLineAlarmConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 1, 1, 5), AdslLineProfileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSdslLineAlarmConfProfile.setStatus('current')
if mibBuilder.loadTexts: cSdslLineAlarmConfProfile.setDescription("This object specifies the row in the adslLineAlarmConfProfileTable (see the ADSL-LINE-MIB for further details), which applies for this SDSL line interface. In the case the implementation utilizes 'dynamic mode' (see the ADSL-LINE-MIB for further details), then the value of this object defaults to the name of an alarm configuration profile designated by the implementation as the default alarm configuration profile. In the case the implementation utilizes 'static mode', then the the value of this object is read-only.")
cSdslStucPhysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2), )
if mibBuilder.loadTexts: cSdslStucPhysTable.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPhysTable.setDescription('This table contains enterprise-specific physical layer parameters for STU-C class devices supported by the system.')
cSdslStucPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cSdslStucPhysEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPhysEntry.setDescription('A set of enterprise-specific physical-layer parameters for an STU-C class device supported by the system. There exists an entry for each ifEntry with an ifType of sdsl(96).')
cSdslStucInvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cSdslStucInvSerialNumber.setDescription('This object specifies the vendor specific string that identifies the vendor STU-C.')
cSdslStucInvVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucInvVendorId.setReference('ANSI T1.220-1991 Coded Representation of the North American Telecommunication Industry Manufacturers, Suppliers, and Related Service Companies')
if mibBuilder.loadTexts: cSdslStucInvVendorId.setStatus('current')
if mibBuilder.loadTexts: cSdslStucInvVendorId.setDescription('This object specifies the vendor identifier assigned according to T1.220')
cSdslStucInvVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: cSdslStucInvVersionNumber.setDescription('This object specifies the vendor specific version number of the STU-C.')
cSdslStucState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("training", 3), ("steadyState", 4), ("testing", 5), ("downloading", 6), ("downloadFailed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucState.setStatus('current')
if mibBuilder.loadTexts: cSdslStucState.setDescription('This object specifies the state of the STU-C transceiver.')
cSdslStucDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 5), SdslStuxDefect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucDefect.setStatus('current')
if mibBuilder.loadTexts: cSdslStucDefect.setDescription('This object specifies any possible defects currently being exhibited by the STU-C. This object has the intention of supplementing ifOperStatus.')
cSdslStucCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2320000))).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucCurrRate.setStatus('current')
if mibBuilder.loadTexts: cSdslStucCurrRate.setDescription('This object specifies the rate the STU-C transceiver was able to obtain following training.')
cSdslStucCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 7), Gauge32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucCurrSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cSdslStucCurrSnrMgn.setDescription('This object specifies the SNR margin as seen by this STU-C with respect to its received signal.')
cSdslStucCurrGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 200))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucCurrGain.setStatus('deprecated')
if mibBuilder.loadTexts: cSdslStucCurrGain.setDescription("This object specifies gain applied to this STU-C's receiver. This object is deprecated by cSdslStucCurrGainRev which has no specified range.")
cSdslStucCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 9), Gauge32()).setUnits('tenth dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucCurrOutputPwr.setStatus('current')
if mibBuilder.loadTexts: cSdslStucCurrOutputPwr.setDescription('This object specifies the measured total output power transmitted by this STU-C. This is the measurement that was reported during the last activation sequence.')
cSdslStucCurrAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 10), Gauge32()).setUnits('tenth dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucCurrAtn.setStatus('current')
if mibBuilder.loadTexts: cSdslStucCurrAtn.setDescription('Measured difference in the total power transmitted by the peer STU-R and the total power received by this STU-C.')
cSdslStucCurrGainRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 2, 1, 11), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucCurrGainRev.setStatus('current')
if mibBuilder.loadTexts: cSdslStucCurrGainRev.setDescription("This object specifies gain applied to this STU-C's receiver. This object deprecates cSdslStucCurrGainRev and has no specified range.")
cSdslSturPhysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3), )
if mibBuilder.loadTexts: cSdslSturPhysTable.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPhysTable.setDescription("This table contains enterprise-specific physical layer parameters for STU-R class devices supported by the system. -- Note to implementor: -- If the implementation does not support remote management -- of STU-R class devices, then the agent must respond with -- the appropriate error indicating that the instance does not -- exist; that is, 'noSuchName' in response to a SNMPv1 get -- request, 'noSuchInstance' in response to a SNMPv2 get -- request or a null string for string types.")
cSdslSturPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cSdslSturPhysEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPhysEntry.setDescription('A set of enterprise-specific physical-layer parameters for an STU-R class device supported by the system. There exists an entry for each ifEntry with an ifType of sdsl(96).')
cSdslSturInvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cSdslSturInvSerialNumber.setDescription('This object specifies the vendor specific string that identifies the vendor STU-R.')
cSdslSturInvVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturInvVendorId.setReference('ANSI T1.220-1991 Coded Representation of the North American Telecommunication Industry Manufacturers, Suppliers, and Related Service Companies')
if mibBuilder.loadTexts: cSdslSturInvVendorId.setStatus('current')
if mibBuilder.loadTexts: cSdslSturInvVendorId.setDescription('This object specifies the vendor identifier assigned according to T1.220')
cSdslSturInvVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: cSdslSturInvVersionNumber.setDescription('This object specifies the vendor specific version number of the STU-R.')
cSdslSturState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("training", 2), ("steadyState", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturState.setStatus('current')
if mibBuilder.loadTexts: cSdslSturState.setDescription('This object specifies the state of the STU-R transceiver.')
cSdslSturDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 5), SdslStuxDefect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturDefect.setStatus('current')
if mibBuilder.loadTexts: cSdslSturDefect.setDescription('This object specifies any possible defects currently being exhibited by the STU-R. This object has the intention of supplementing ifOperStatus.')
cSdslSturCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2320000))).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturCurrRate.setStatus('current')
if mibBuilder.loadTexts: cSdslSturCurrRate.setDescription('This object specifies the rate the STU-R transceiver was able to obtain following training.')
cSdslSturCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 7), Gauge32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturCurrSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cSdslSturCurrSnrMgn.setDescription('This object specifies the SNR margin as seen by this STU-R with respect to its received signal.')
cSdslSturCurrGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 200))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturCurrGain.setStatus('deprecated')
if mibBuilder.loadTexts: cSdslSturCurrGain.setDescription("This object specifies gain applied to this STU-R's receiver. This object is deprecated by cSdslSturCurrGainRev which has no specified range.")
cSdslSturCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturCurrOutputPwr.setStatus('current')
if mibBuilder.loadTexts: cSdslSturCurrOutputPwr.setDescription('This object specifies the measured total output power transmitted by this STU-R. This is the measurement that was reported during the last activation sequence.')
cSdslSturCurrAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 10), Gauge32()).setUnits('tenth dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturCurrAtn.setStatus('current')
if mibBuilder.loadTexts: cSdslSturCurrAtn.setDescription('Measured difference in the total power transmitted by the peer STU-C and the total power received by this STU-R')
cSdslSturCurrGainRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 3, 1, 11), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturCurrGainRev.setStatus('current')
if mibBuilder.loadTexts: cSdslSturCurrGainRev.setDescription("This object specifies gain applied to this STU-R's receiver. This object deprecates by cSdslSturCurrGain and has no specified range.")
cSdslStucPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6), )
if mibBuilder.loadTexts: cSdslStucPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfDataTable.setDescription('This table contains physical-layer statistics for STU-C class devices supported by the system.')
cSdslStucPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cSdslStucPerfDataEntry.setReference('ITU Draft G.Shdsl, Single-Pair High Speed Digital Subscriber Line(SHDSL) Transceivers, T1E1.4, Draft for HDSL2 Standard, Default Letter Ballot, ITU-T G991.1, High-Bit-Rate Digital Subscriber Transceivers(HDSL), Tesink, K., Textual Conventions for MIB Modules Using Performance History Based on 15 Minute Intervals, RFC 2493, January 1999.')
if mibBuilder.loadTexts: cSdslStucPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfDataEntry.setDescription('A set of physical-layer statistics for an STU-C class device supported by the system. There exists an entry for each ifEntry with an ifType of sdsl(96).')
cSdslStucPerfLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfLOSs.setDescription('This object specifies the number of LOS failures experienced by the STU-C since agent reset.')
cSdslStucPerfLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfLOSQs.setDescription('This object specifies the number of LOSQ failures experienced by the STU-C since agent reset.')
cSdslStucPerfCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCVs.setDescription('This object specifies the number of coding violations experienced by the STU-C since agent reset.')
cSdslStucPerfESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfESs.setDescription('This object specifies the number of errored seconds experienced by the STU-C since agent reset.')
cSdslStucPerfSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfSESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfSESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-C since agent reset.')
cSdslStucPerfUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-C since agent reset.')
cSdslStucPerfInits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfInits.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfInits.setDescription('This object specifies the number of line initializations attempted by the STU-C since agent reset. This value includes both successful and failed attempts.')
cSdslStucUnavailRsrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucUnavailRsrcs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucUnavailRsrcs.setDescription('This object specifies the number of packets discarded on the STU-C due to unavailable resources, such as lack of buffer space.')
cSdslStucPerfValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfValidIntervals.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfValidIntervals.setDescription('The number of previous near end intervals for which valid data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online.')
cSdslStucPerfInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfInvalidIntervals.setDescription('The number of near-end performance data 15-minute intervals in the range from 0 to cSdslStucPerfValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
cSdslStucPerfCurr15MinTimeElapse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 11), SdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinTimeElapse.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinTimeElapse.setDescription("The number of seconds that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
cSdslStucPerfCurr15MinLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 12), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinLOSs.setDescription('This object specifies the number of seconds in the current 15-minute interval when the STU-C experienced LOS.')
cSdslStucPerfCurr15MinLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 13), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinLOSQs.setDescription('This object specifies the number of seconds in the current 15-minute interval when the STU-C experienced LOSQ.')
cSdslStucPerfCurr15MinCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinCVs.setDescription('This object specifies the number of coding violations experienced by the STU-C in the current 15-minute interval.')
cSdslStucPerfCurr15MinESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 15), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinESs.setDescription('This object specifies the number of errored seconds experienced by the STU-C in the current 15-minute interval.')
cSdslStucPerfCurr15MinSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 16), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinSESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinSESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-C in the current 15-minute interval.')
cSdslStucPerfCurr15MinUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 17), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-C in the current 15-minute interval.')
cSdslStucPerfCurr15MinInits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinInits.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinInits.setDescription('This object specifies the number of line initializations attempted by the STU-C in the current 15-minute interval.')
cSdslStucPerfCurr15MinUnavlRsrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 19), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinUnavlRsrcs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr15MinUnavlRsrcs.setDescription('This object specifies the number of packets discarded on the STU-C due to unavailable resources, such as lack of buffer space, in the current 15 minute interval.')
cSdslStucPerfCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 20), SdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayTimeElapsed.setDescription("The number of seconds that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
cSdslStucPerfCurr1DayLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 21), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayLOSs.setDescription('This object specifies the number of seconds experienced by the STU-C in the current 1-day interval when there was LOS.')
cSdslStucPerfCurr1DayLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 22), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayLOSQs.setDescription('This object specifies the number of seconds experienced by the STU-C in the current 1-day interval when there was LOSQ.')
cSdslStucPerfCurr1DayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 23), SdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayCVs.setDescription('This object specifies the number of coding violations experienced by the STU-C in the current 1-day interval.')
cSdslStucPerfCurr1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 24), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayESs.setDescription('This object specifies the number of errored seconds experienced by the STU-C in the current 1-day interval.')
cSdslStucPerfCurr1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 25), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DaySESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DaySESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-C in the current 1-day interval.')
cSdslStucPerfCurr1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 26), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-C in the current 1-day interval.')
cSdslStucPerfCurr1DayInits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 27), SdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayInits.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayInits.setDescription('This object specifies the number of line initializations attempted by the STU-C in the current 1-day interval.')
cSdslStucPerfCurr1DayUnavlRsrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 28), SdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayUnavlRsrcs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfCurr1DayUnavlRsrcs.setDescription('This object specifies the number of packets discarded on the STU-C due to unavailable resources, such as lack of buffer space, in the current 1-day interval.')
cSdslStucPerfPrev1DayMoniSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayMoniSecs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayMoniSecs.setDescription('The amount of time in the previous 1-day interval over which the performance monitoring information is actually counted. This value will be the same as the interval duration except in a situation where performance monitoring data could not be collected for any reason.')
cSdslStucPerfPrev1DayLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 30), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayLOSs.setDescription('This object specifies the number of seconds in the current 1-day interval when the STU-C experienced LOS.')
cSdslStucPerfPrev1DayLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 31), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayLOSQs.setDescription('This object specifies the number of seconds in the previous 1-day interval when the STU-C experienced LOSQ.')
cSdslStucPerfPrev1DayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 32), SdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayCVs.setDescription('This object specifies the number of coding violations experienced by the STU-C in the previous 1-day interval.')
cSdslStucPerfPrev1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 33), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayESs.setDescription('This object specifies the number of errored seconds experienced by the STU-C in the previous 1-day interval.')
cSdslStucPerfPrev1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 34), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DaySESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DaySESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-C in the previous 1-day interval.')
cSdslStucPerfPrev1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 35), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-C in the previous 1-day interval.')
cSdslStucPerfPrev1DayInits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 36), SdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayInits.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayInits.setDescription('This object specifies the number of line initializations attempted by the STU-C in the previous 1-day interval.')
cSdslStucPerfPrev1DayUnavlRsrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 6, 1, 37), SdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayUnavlRsrcs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPerfPrev1DayUnavlRsrcs.setDescription('This object specifies the number of packets discarded on the STU-C due to unavailable resources, such as lack of buffer space, in the previous 1-day interval.')
cSdslSturPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7), )
if mibBuilder.loadTexts: cSdslSturPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfDataTable.setDescription("This table contains physical-layer statistics for STU-R class devices supported by the system. -- Note to implementor: -- If the implementation does not support remote management -- of STU-R class devices, then the agent must respond with -- the appropriate error indicating that the instance does not -- exist; that is, 'noSuchName' in response to a SNMPv1 get -- request, and 'noSuchInstance' in response to a SNMPv2 get -- request.")
cSdslSturPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cSdslSturPerfDataEntry.setReference('ITU Draft G.Shdsl, Single-Pair High Speed Digital Subscriber Line(SHDSL) Transceivers, T1E1.4, Draft for HDSL2 Standard, Default Letter Ballot, ITU-T G991.1, High-Bit-Rate Digital Subscriber Transceivers(HDSL)')
if mibBuilder.loadTexts: cSdslSturPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfDataEntry.setDescription('A set of physical-layer statistics for an STU-R class device supported by the system. There exists an entry for each ifEntry with an ifType of sdsl(96).')
cSdslSturPerfLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfLOSs.setDescription('This object specifies the number of LOS failures experienced by the STU-R since agent reset.')
cSdslSturPerfLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfLOSQs.setDescription('This object specifies the number of LOSQ failures experienced by the STU-R since agent reset.')
cSdslSturPerfCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCVs.setDescription('This object specifies the number of coding violations experienced by the STU-R since agent reset.')
cSdslSturPerfESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfESs.setDescription('This object specifies the number of errored seconds experienced by the STU-R since agent reset.')
cSdslSturPerfSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfSESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfSESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-R since agent reset.')
cSdslSturPerfUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-R since agent reset.')
cSdslSturPerfValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfValidIntervals.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfValidIntervals.setDescription('The number of previous far end intervals for which valid data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute far end intervals since the interface has been online.')
cSdslSturPerfInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfInvalidIntervals.setDescription('The number of far-end performance data 15-minute intervals in the range from 0 to cSdslSturPerfValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
cSdslSturPerfCurr15MinTimeElapse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 9), SdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinTimeElapse.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinTimeElapse.setDescription("The number of seconds that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
cSdslSturPerfCurr15MinLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 10), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinLOSs.setDescription('This object specifies the number of seconds in the current 15-minute interval when the STU-R experienced LOS.')
cSdslSturPerfCurr15MinLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 11), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinLOSQs.setDescription('This object specifies the number of seconds in the current 15-minute interval when the STU-R experienced LOSQ.')
cSdslSturPerfCurr15MinCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinCVs.setDescription('This object specifies the number of coding violations experienced by the STU-R in the current 15-minute interval.')
cSdslSturPerfCurr15MinESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 13), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinESs.setDescription('This object specifies the number of errored seconds experienced by the STU-R in the current 15-minute interval.')
cSdslSturPerfCurr15MinSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 14), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinSESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinSESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-R in the current 15-minute interval.')
cSdslSturPerfCurr15MinUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 15), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr15MinUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-R in the current 15-minute interval.')
cSdslSturPerfCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 16), SdslPerfTimeElapsed().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayTimeElapsed.setDescription("The number of seconds that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
cSdslSturPerfCurr1DayLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 17), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayLOSs.setDescription('This object specifies the number of seconds experienced by the STU-R in the current 1-day interval when there was LOS.')
cSdslSturPerfCurr1DayLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 18), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayLOSQs.setDescription('This object specifies the number of seconds experienced by the STU-R in the current 1-day interval when there was LOSQ.')
cSdslSturPerfCurr1DayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 19), SdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayCVs.setDescription('This object specifies the number of coding violations experienced by the STU-R in the current 1-day interval.')
cSdslSturPerfCurr1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 20), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayESs.setDescription('This object specifies the number of errored seconds experienced by the STU-R in the current 1-day interval.')
cSdslSturPerfCurr1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 21), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr1DaySESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr1DaySESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-R in the current 1-day interval.')
cSdslSturPerfCurr1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 22), SdslPerfCurrDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfCurr1DayUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-R in the current 1-day interval.')
cSdslSturPerfPrev1DayMoniSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayMoniSecs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayMoniSecs.setDescription('The amount of time in the previous 1-day interval over which the performance monitoring information is actually counted. This value will be the same as the interval duration except in a situation where performance monitoring data could not be collected for any reason.')
cSdslSturPerfPrev1DayLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 24), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayLOSs.setDescription('This object specifies the number of seconds in the current 1-day interval when the STU-R experienced LOS.')
cSdslSturPerfPrev1DayLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 25), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayLOSQs.setDescription('This object specifies the number of seconds in the previous 1-day interval when the STU-R experienced LOSQ.')
cSdslSturPerfPrev1DayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 26), SdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayCVs.setDescription('This object specifies the number of coding violations experienced by the STU-R in the previous 1-day interval.')
cSdslSturPerfPrev1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 27), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayESs.setDescription('This object specifies the number of errored seconds experienced by the STU-R in the previous 1-day interval.')
cSdslSturPerfPrev1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 28), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfPrev1DaySESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfPrev1DaySESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-R in the previous 1-day interval.')
cSdslSturPerfPrev1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 7, 1, 29), SdslPerfPrevDayCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPerfPrev1DayUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-R in the previous 1-day interval.')
cSdslStucIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8), )
if mibBuilder.loadTexts: cSdslStucIntervalTable.setReference('Tesink, K., Textual Conventions for MIB Modules Using Performance History Based on 15 Minute Intervals, RFC 2493, January 1999.')
if mibBuilder.loadTexts: cSdslStucIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalTable.setDescription('This table contains physical-layer statistics intervals for STU-C class devices supported by the system. The interval tables are modeled after RFC 2493, Textual Conventions for MIB Modules Using Performance History Based on 15 Minute Intervals, RFC 2493')
cSdslStucIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SDSL-LINE-MIB", "cSdslStucIntervalNumber"))
if mibBuilder.loadTexts: cSdslStucIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalEntry.setDescription('A 15-miute interval of physical-layer statistics for a STU-C class device supported by the system. There exists up to 96 entries for each ifEntry with an ifType of sdsl(96).')
cSdslStucIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cSdslStucIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalNumber.setDescription('The interval in which the statistics were collected, where the value of 1 represents the most recent interval, and the value of 96 represents the interval collected 24 hours ago. Intervals 2..96 are optional.')
cSdslStucIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalValidData.setDescription('This object specifies whether the data for this interval is valid.')
cSdslStucIntervalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 3), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalLOSs.setDescription('This object specifies the number of seconds in the interval when the STU-C experienced LOS.')
cSdslStucIntervalLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 4), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalLOSQs.setDescription('This object specifies the number of seconds in the interval when the STU-C experienced LOSQ.')
cSdslStucIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalCVs.setDescription('This object specifies the number of coding violations experienced by the STU-C in the interval.')
cSdslStucIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 6), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalESs.setDescription('This object specifies the number of errored seconds experienced by the STU-C in the interval.')
cSdslStucIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 7), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalSESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-C in the interval.')
cSdslStucIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 8), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-C in the interval.')
cSdslStucIntervalInits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalInits.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalInits.setDescription('This object specifies the number of line initializations attempted by the STU-C in the interval.')
cSdslStucIntervalUnavlRsrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 8, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslStucIntervalUnavlRsrcs.setStatus('current')
if mibBuilder.loadTexts: cSdslStucIntervalUnavlRsrcs.setDescription('This object specifies the number of packets discarded on the STU-C due to unavailable resources, such as lack of buffer space in the interval.')
cSdslSturIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9), )
if mibBuilder.loadTexts: cSdslSturIntervalTable.setReference('Tesink, K., Textual Conventions for MIB Modules Using Performance History Based on 15 Minute Intervals, RFC 2493, January 1999.')
if mibBuilder.loadTexts: cSdslSturIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalTable.setDescription('This table contains physical-layer statistics intervals for STU-R class devices supported by the system. The interval tables are modeled after RFC 2493, Textual Conventions for MIB Modules Using Performance History Based on 15 Minute Intervals, RFC 2493')
cSdslSturIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SDSL-LINE-MIB", "cSdslSturIntervalNumber"))
if mibBuilder.loadTexts: cSdslSturIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalEntry.setDescription('A 15-miute interval of physical-layer statistics for a STU-R class device supported by the system. There exists up to 96 entries for each ifEntry with an ifType of sdsl(96).')
cSdslSturIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cSdslSturIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalNumber.setDescription('The interval in which the statistics were collected, where the value of 1 represents the most recent interval, and the value of 96 represents the interval collected 24 hours ago. Intervals 2..96 are optional.')
cSdslSturIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalValidData.setDescription('This object specifies whether the data for this interval is valid.')
cSdslSturIntervalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1, 3), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturIntervalLOSs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalLOSs.setDescription('This object specifies the number of seconds in the interval when the STU-R experienced LOS.')
cSdslSturIntervalLOSQs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1, 4), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturIntervalLOSQs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalLOSQs.setDescription('This object specifies the number of seconds in the interval when the STU-R experienced LOSQ.')
cSdslSturIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalCVs.setDescription('This object specifies the number of coding violations experienced by the STU-R in the interval.')
cSdslSturIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1, 6), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturIntervalESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalESs.setDescription('This object specifies the number of errored seconds experienced by the STU-R in the interval.')
cSdslSturIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1, 7), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalSESs.setDescription('This object specifies the number of severely errored seconds experienced by the STU-R in the interval.')
cSdslSturIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 9, 1, 8), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSdslSturIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: cSdslSturIntervalUASs.setDescription('This object specifies the number of unavailable seconds experienced by the STU-R in the interval.')
cSdslLineConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14), )
if mibBuilder.loadTexts: cSdslLineConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cSdslLineConfProfileTable.setDescription('This table extends the adslLineConfProfileTable and contains enterprise-specific SDSL line configuration information.')
cSdslLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1), ).setIndexNames((1, "ADSL-LINE-MIB", "adslLineConfProfileName"))
if mibBuilder.loadTexts: cSdslLineConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslLineConfProfileEntry.setDescription('A configuration profile containing enterprise-specific SDSL line configuration information.')
cSdslLineMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(144000, 144000), ValueRangeConstraint(272000, 272000), ValueRangeConstraint(400000, 400000), ValueRangeConstraint(528000, 528000), ValueRangeConstraint(784000, 784000), ValueRangeConstraint(1040000, 1040000), ValueRangeConstraint(1168000, 1168000), ValueRangeConstraint(1552000, 1552000), ValueRangeConstraint(2064000, 2064000), ValueRangeConstraint(2320000, 2320000), )).clone(784000)).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslLineMaxRate.setStatus('current')
if mibBuilder.loadTexts: cSdslLineMaxRate.setDescription('This object specifies the desired line rate which the STU-C will attempt to train at.')
cSdslLineFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("hdsl", 3), ("gShdsl", 4), ("hdsl2", 5), ("ds1", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslLineFramingMode.setStatus('current')
if mibBuilder.loadTexts: cSdslLineFramingMode.setDescription('This object specifies the desired Transmission Convergence framing structure being used by the interface.')
cSdslStucTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucTargetSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cSdslStucTargetSnrMgn.setDescription('This object specifies the target SNR margin. This is the desired noise margin the STU-C must achieve with a BER of 10-7 or better to successfully complete training. The value for this object must be in multiples of 10. The specified value will be rounded down to the nearest valid tenth dB level if the value is not in multiples of 10.')
cSdslStucMaxSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(90)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucMaxSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cSdslStucMaxSnrMgn.setDescription('This object specifies the maximum acceptable SNR margin. If the noise margin exceeds this level, then the STU-C should attempt to reduce its power output to optimize its operation. The value for this object must be in multiples of 10. The specified value will be rounded down to the nearest valid tenth dB level if the value is not in multiples of 10.')
cSdslStucMinSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucMinSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cSdslStucMinSnrMgn.setDescription('This object specifies the minimum acceptable SNR margin. If the noise margin falls below this level, the STU-C will retrain. The value for this object must be in multiples of 10. The specified value will be rounded down to the nearest valid tenth dB level if the value is not in multiples of 10.')
cSdslStucOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(130)).setUnits('tenth dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucOutputPwr.setStatus('current')
if mibBuilder.loadTexts: cSdslStucOutputPwr.setDescription('This object specifies the transmit power level used by the STU-C. The value for this object must be in multiples of 10. The specified value will be rounded down to the nearest valid tenth dB level if the value is not in multiples of 10.')
cSdslShdslLineMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2376000, 2312000, 2056000, 1552000, 1544000, 1160000, 1032000, 784000, 776000, 520000, 392000, 264000, 200000, 136000, 72000))).clone(namedValues=NamedValues(("r2376000", 2376000), ("r2312000", 2312000), ("r2056000", 2056000), ("r1552000", 1552000), ("r1544000", 1544000), ("r1160000", 1160000), ("r1032000", 1032000), ("r784000", 784000), ("r776000", 776000), ("r520000", 520000), ("r392000", 392000), ("r264000", 264000), ("r200000", 200000), ("r136000", 136000), ("r72000", 72000))).clone('r776000')).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslShdslLineMaxRate.setReference('ITU Draft G.Shdsl, Single-Pair High Speed Digital Subscriber Line(SHDSL) Transceivers')
if mibBuilder.loadTexts: cSdslShdslLineMaxRate.setStatus('current')
if mibBuilder.loadTexts: cSdslShdslLineMaxRate.setDescription('This object specifies the desired line rate at which the G.shdsl STU-C will attempt to train.')
cSdslStucPsdMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("symmetric", 1), ("asymmetric", 2))).clone('symmetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucPsdMaskType.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPsdMaskType.setDescription('This object specifies the PSD mask type for the transceiver. For all values of the cSdslShdslLineMaxRate, the symmetric PSD masktype is selectable. Asymmetric mask is only selectable for the following rates: 776000, 784000, 1552000, 2056000, 2312000.')
cSdslStucAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexA", 1), ("annexB", 2))).clone('annexA')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucAnnex.setStatus('current')
if mibBuilder.loadTexts: cSdslStucAnnex.setDescription('This object specifies the operating conditions for the port of G.shdsl CO equipment . Annex A is optimized for conditions typically encountered within the North American network,whereas Annex B is optimized for conditions typically encountered within the European network.')
cSdslLineEquipmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stuR", 1), ("stuC", 2))).clone('stuR')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslLineEquipmentType.setStatus('current')
if mibBuilder.loadTexts: cSdslLineEquipmentType.setDescription('This object specifies the type of the STU device ,either STU-C or STU-R')
cSdslLineAutoRateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslLineAutoRateEnable.setStatus('current')
if mibBuilder.loadTexts: cSdslLineAutoRateEnable.setDescription('This object specifies whether the device uses the rate adaptive training mode.')
cSdslStucThresholdSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(30)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucThresholdSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cSdslStucThresholdSnrMgn.setDescription("This object specifies the SNR margin threshold. An appropriate alarm should be generated when the difference between the actual SNR and the SNR required to maintain BER of 10E-7 is less than this value. The value for this object must be in multiples of 10. The specified value will be rounded down to the nearest valid tenth dB level if the value is not in multiples of 10. If the agent implements the CISCO-ENTITY-ALARM-MIB, the alarm generated should be through the mechanism defined by the CISCO-ENTITY-ALARM-MIB. Furthermore, the default severity of this alarm should be 'minor'.")
cSdslSturAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexA", 1), ("annexB", 2))).clone('annexA')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslSturAnnex.setStatus('current')
if mibBuilder.loadTexts: cSdslSturAnnex.setDescription('This object specifies the operating conditions for the port of G.shdsl CPE equipment. Annex A is optimized for conditions typically encountered within the North American network,whereas Annex B is optimized for conditions typically encountered within the European network.')
cSdslLineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 15), )
if mibBuilder.loadTexts: cSdslLineAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cSdslLineAlarmConfProfileTable.setDescription('This table extends the adslLineAlarmConfProfileTable and contains enterprise-specific SDSL line configuration information pertaining to alarms.')
cSdslLineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 15, 1), ).setIndexNames((1, "ADSL-LINE-MIB", "adslLineAlarmConfProfileName"))
if mibBuilder.loadTexts: cSdslLineAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cSdslLineAlarmConfProfileEntry.setDescription('A configuration profile containing enterprise-specific SDSL line configuration information pertaining to alarms')
cSdslStucThreshMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucThreshMinRate.setStatus('current')
if mibBuilder.loadTexts: cSdslStucThreshMinRate.setDescription("This object specifies the line rate threshold. When the agent observes the line rate fall below this value, an appropriate alarm should be generated. The default value for this object should be the value of the cSdslLineMaxRate object. If the agent implements the CISCO-ENTITY-ALARM-MIB, the alarm generated should be through the mechanism defined by the CISCO-ENTITY-ALARM-MIB. Furthermore, the default severity of this alarm should be 'minor'.")
cSdslStucThreshMinSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 155, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(30)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSdslStucThreshMinSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cSdslStucThreshMinSnrMgn.setDescription("This object specifies the SNR margin threshold. When the agent observes the received SNR margin fall below this value, an appropriate alarm should be generated. If the agent implements the CISCO-ENTITY-ALARM-MIB, the alarm generated should be through the mechanism defined by the CISCO-ENTITY-ALARM-MIB. Furthermore, the default severity of this alarm should be 'minor'.")
ciscoSdslLineMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 155, 2))
ciscoSdslLineMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 155, 2, 0))
ciscoSdslLineMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 155, 3))
ciscoSdslLineMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 1))
ciscoSdslLineMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2))
ciscoSdslLineMIBStucCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 1, 1)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslStucBasicGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPMCounterGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucRateAdaptiveGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPM15MinIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPM1DayIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPMCounterGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPM15MinIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPM1DayIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucAlarmConfProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSdslLineMIBStucCompliance = ciscoSdslLineMIBStucCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSdslLineMIBStucCompliance.setDescription('The compliance statement for entities that implement the CISCO-SDSL-LINE-MIB. Implementation of this MIB is mandatory for any platform that supports one or more SDSL line interfaces. This specification is replaced by ciscoSdslLineMIBStucComplianceRev1')
ciscoSdslLineMIBSturCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 1, 2)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslSturBasicGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPMCounterGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPM15MinIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPM1DayIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSdslLineMIBSturCompliance = ciscoSdslLineMIBSturCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSdslLineMIBSturCompliance.setDescription('The compliance statement for entities that implement the CISCO-SDSL-LINE-MIB and manage SDSL STU-R class devices. Implementation of this MIB is mandatory for any platform that supports one or more SDSL line interfaces. This specification is replaced by ciscoSdslLineMIBSturComplianceRev1.')
ciscoSdslLineMIBStucComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 1, 3)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslStucBasicGroupRev1"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPMCounterGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucRateAdaptiveGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPM15MinIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPM1DayIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPMCounterGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPM15MinIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPM1DayIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslStucAlarmConfProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSdslLineMIBStucComplianceRev1 = ciscoSdslLineMIBStucComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoSdslLineMIBStucComplianceRev1.setDescription('The compliance statement for entities that implement the CISCO-SDSL-LINE-MIB. Implementation of this MIB is mandatory for any platform that supports one or more SDSL line interfaces.')
ciscoSdslLineMIBSturComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 1, 4)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslSturBasicGroupRev1"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPMCounterGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPM15MinIntervalGroup"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPM1DayIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSdslLineMIBSturComplianceRev1 = ciscoSdslLineMIBSturComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoSdslLineMIBSturComplianceRev1.setDescription('The compliance statement for entities that implement the CISCO-SDSL-LINE-MIB and manage SDSL STU-R class devices. Implementation of this MIB is mandatory for any platform that supports one or more SDSL line interfaces.')
cSdslStucBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 1)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslLineCoding"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFraming"), ("CISCO-SDSL-LINE-MIB", "cSdslLineSpecific"), ("CISCO-SDSL-LINE-MIB", "cSdslLineConfProfile"), ("CISCO-SDSL-LINE-MIB", "cSdslLineAlarmConfProfile"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvSerialNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvVendorId"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvVersionNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslStucState"), ("CISCO-SDSL-LINE-MIB", "cSdslStucDefect"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrGain"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrOutputPwr"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrAtn"), ("CISCO-SDSL-LINE-MIB", "cSdslLineMaxRate"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFramingMode"), ("CISCO-SDSL-LINE-MIB", "cSdslStucTargetSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucOutputPwr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslStucBasicGroup = cSdslStucBasicGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cSdslStucBasicGroup.setDescription('A collection of managed objects defining the basic operation of an STU-C (i.e., no rate adaptation). This specification is replaced by cSdslStucBasicGroupRev1.')
cSdslSturBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 2)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslLineCoding"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFraming"), ("CISCO-SDSL-LINE-MIB", "cSdslLineSpecific"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvSerialNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVendorId"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVersionNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturState"), ("CISCO-SDSL-LINE-MIB", "cSdslSturDefect"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrGain"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrOutputPwr"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrAtn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslSturBasicGroup = cSdslSturBasicGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cSdslSturBasicGroup.setDescription('A collection of managed objects defining the basic operation of an STU-R.This specification is replaced by cSdslSturBasicGroupRev1')
cSdslSturGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 3)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslSturInvSerialNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVendorId"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVersionNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturState"), ("CISCO-SDSL-LINE-MIB", "cSdslSturDefect"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrGain"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrOutputPwr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslSturGroup = cSdslSturGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cSdslSturGroup.setDescription('A collection of managed objects defining the capability to remotely manage a STU-R. This is replaced by cSdslSturGroupRev1.')
cSdslStucPMCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 4)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslStucPerfLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfSESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfUASs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfInits"), ("CISCO-SDSL-LINE-MIB", "cSdslStucUnavailRsrcs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslStucPMCounterGroup = cSdslStucPMCounterGroup.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPMCounterGroup.setDescription('A collection of managed objects defining basic near-end performance monitoring capability.')
cSdslStucPM15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 5)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslStucPerfValidIntervals"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfInvalidIntervals"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinTimeElapse"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinSESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinUASs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinInits"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr15MinUnavlRsrcs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalValidData"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalSESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalUASs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalInits"), ("CISCO-SDSL-LINE-MIB", "cSdslStucIntervalUnavlRsrcs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslStucPM15MinIntervalGroup = cSdslStucPM15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPM15MinIntervalGroup.setDescription('A collection of managed objects defining near-end performance data collection capability using 15-minute intervals.')
cSdslStucPM1DayIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 6)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DayTimeElapsed"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DayLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DayLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DayCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DayESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DaySESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DayUASs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DayInits"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfCurr1DayUnavlRsrcs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DayMoniSecs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DayLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DayLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DayCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DayESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DaySESs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DayUASs"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DayInits"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPerfPrev1DayUnavlRsrcs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslStucPM1DayIntervalGroup = cSdslStucPM1DayIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cSdslStucPM1DayIntervalGroup.setDescription('A collection of managed objects defining near-end performance data collection capability using 1-day intervals.')
cSdslSturPMCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 7)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslSturPerfLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfSESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslSturPMCounterGroup = cSdslSturPMCounterGroup.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPMCounterGroup.setDescription('A collection of managed objects defining basic far-end performance monitoring capability.')
cSdslSturPM15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 8)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslSturPerfValidIntervals"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfInvalidIntervals"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr15MinTimeElapse"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr15MinLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr15MinLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr15MinCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr15MinESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr15MinSESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr15MinUASs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturIntervalLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturIntervalLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturIntervalCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturIntervalESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturIntervalSESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturIntervalUASs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslSturPM15MinIntervalGroup = cSdslSturPM15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPM15MinIntervalGroup.setDescription('A collection of managed objects defining far-end performance data collection capability using 15-minute intervals.')
cSdslSturPM1DayIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 9)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr1DayTimeElapsed"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr1DayLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr1DayLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr1DayCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr1DayESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr1DaySESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfCurr1DayUASs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfPrev1DayMoniSecs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfPrev1DayLOSs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfPrev1DayLOSQs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfPrev1DayCVs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfPrev1DayESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfPrev1DaySESs"), ("CISCO-SDSL-LINE-MIB", "cSdslSturPerfPrev1DayUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslSturPM1DayIntervalGroup = cSdslSturPM1DayIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cSdslSturPM1DayIntervalGroup.setDescription('A collection of managed objects defining far-end performance data collection capability using 1-day intervals.')
cSdslStucRateAdaptiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 10)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslStucCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslStucMaxSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucMinSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucThreshMinRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslStucRateAdaptiveGroup = cSdslStucRateAdaptiveGroup.setStatus('current')
if mibBuilder.loadTexts: cSdslStucRateAdaptiveGroup.setDescription('A collection of managed objects defining rate adaptive operation of an STU-C.')
cSdslStucAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 11)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslStucThreshMinRate"), ("CISCO-SDSL-LINE-MIB", "cSdslStucThreshMinSnrMgn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslStucAlarmConfProfileGroup = cSdslStucAlarmConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: cSdslStucAlarmConfProfileGroup.setDescription('A collection of traps generated by the agent to signal threshold alarms.')
cSdslStucBasicGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 12)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslLineCoding"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFraming"), ("CISCO-SDSL-LINE-MIB", "cSdslLineSpecific"), ("CISCO-SDSL-LINE-MIB", "cSdslLineConfProfile"), ("CISCO-SDSL-LINE-MIB", "cSdslLineAlarmConfProfile"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvSerialNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvVendorId"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvVersionNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslStucState"), ("CISCO-SDSL-LINE-MIB", "cSdslStucDefect"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrGain"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrOutputPwr"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrAtn"), ("CISCO-SDSL-LINE-MIB", "cSdslLineMaxRate"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFramingMode"), ("CISCO-SDSL-LINE-MIB", "cSdslStucTargetSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucMaxSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucMinSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucOutputPwr"), ("CISCO-SDSL-LINE-MIB", "cSdslShdslLineMaxRate"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPsdMaskType"), ("CISCO-SDSL-LINE-MIB", "cSdslStucAnnex"), ("CISCO-SDSL-LINE-MIB", "cSdslLineEquipmentType"), ("CISCO-SDSL-LINE-MIB", "cSdslLineAutoRateEnable"), ("CISCO-SDSL-LINE-MIB", "cSdslStucThresholdSnrMgn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslStucBasicGroupRev1 = cSdslStucBasicGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cSdslStucBasicGroupRev1.setDescription('A collection of managed objects defining the basic operation of an STU-C. This specification is replaced by cSdslStucBasicGroupRev2.')
cSdslSturBasicGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 13)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslLineCoding"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFraming"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvSerialNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVendorId"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVersionNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturState"), ("CISCO-SDSL-LINE-MIB", "cSdslSturDefect"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrGain"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrOutputPwr"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrAtn"), ("CISCO-SDSL-LINE-MIB", "cSdslShdslLineMaxRate"), ("CISCO-SDSL-LINE-MIB", "cSdslLineEquipmentType"), ("CISCO-SDSL-LINE-MIB", "cSdslLineAutoRateEnable"), ("CISCO-SDSL-LINE-MIB", "cSdslSturAnnex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslSturBasicGroupRev1 = cSdslSturBasicGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cSdslSturBasicGroupRev1.setDescription('A collection of managed objects defining the basic operation of an STU-R. This specification is replaced by cSdslSturBasicGroupRev2')
cSdslStucBasicGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 14)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslLineCoding"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFraming"), ("CISCO-SDSL-LINE-MIB", "cSdslLineSpecific"), ("CISCO-SDSL-LINE-MIB", "cSdslLineConfProfile"), ("CISCO-SDSL-LINE-MIB", "cSdslLineAlarmConfProfile"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvSerialNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvVendorId"), ("CISCO-SDSL-LINE-MIB", "cSdslStucInvVersionNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslStucState"), ("CISCO-SDSL-LINE-MIB", "cSdslStucDefect"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrGainRev"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrOutputPwr"), ("CISCO-SDSL-LINE-MIB", "cSdslStucCurrAtn"), ("CISCO-SDSL-LINE-MIB", "cSdslLineMaxRate"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFramingMode"), ("CISCO-SDSL-LINE-MIB", "cSdslStucTargetSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucMaxSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucMinSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslStucOutputPwr"), ("CISCO-SDSL-LINE-MIB", "cSdslShdslLineMaxRate"), ("CISCO-SDSL-LINE-MIB", "cSdslStucPsdMaskType"), ("CISCO-SDSL-LINE-MIB", "cSdslStucAnnex"), ("CISCO-SDSL-LINE-MIB", "cSdslLineEquipmentType"), ("CISCO-SDSL-LINE-MIB", "cSdslLineAutoRateEnable"), ("CISCO-SDSL-LINE-MIB", "cSdslStucThresholdSnrMgn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslStucBasicGroupRev2 = cSdslStucBasicGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cSdslStucBasicGroupRev2.setDescription('A collection of managed objects defining the basic operation of an STU-C.')
cSdslSturBasicGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 15)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslLineCoding"), ("CISCO-SDSL-LINE-MIB", "cSdslLineFraming"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvSerialNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVendorId"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVersionNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturState"), ("CISCO-SDSL-LINE-MIB", "cSdslSturDefect"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrGainRev"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrOutputPwr"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrAtn"), ("CISCO-SDSL-LINE-MIB", "cSdslShdslLineMaxRate"), ("CISCO-SDSL-LINE-MIB", "cSdslLineEquipmentType"), ("CISCO-SDSL-LINE-MIB", "cSdslLineAutoRateEnable"), ("CISCO-SDSL-LINE-MIB", "cSdslSturAnnex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslSturBasicGroupRev2 = cSdslSturBasicGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cSdslSturBasicGroupRev2.setDescription('A collection of managed objects defining the basic operation of an STU-R.')
cSdslSturGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 155, 3, 2, 16)).setObjects(("CISCO-SDSL-LINE-MIB", "cSdslSturInvSerialNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVendorId"), ("CISCO-SDSL-LINE-MIB", "cSdslSturInvVersionNumber"), ("CISCO-SDSL-LINE-MIB", "cSdslSturState"), ("CISCO-SDSL-LINE-MIB", "cSdslSturDefect"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrRate"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrSnrMgn"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrGainRev"), ("CISCO-SDSL-LINE-MIB", "cSdslSturCurrOutputPwr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSdslSturGroupRev1 = cSdslSturGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cSdslSturGroupRev1.setDescription('A collection of managed objects defining the capability to remotely manage a STU-R.')
mibBuilder.exportSymbols("CISCO-SDSL-LINE-MIB", cSdslLineConfProfile=cSdslLineConfProfile, cSdslSturInvVersionNumber=cSdslSturInvVersionNumber, cSdslStucCurrGain=cSdslStucCurrGain, ciscoSdslLineMIBCompliances=ciscoSdslLineMIBCompliances, cSdslStucIntervalTable=cSdslStucIntervalTable, cSdslLineAlarmConfProfileEntry=cSdslLineAlarmConfProfileEntry, cSdslSturBasicGroupRev1=cSdslSturBasicGroupRev1, cSdslStucInvVersionNumber=cSdslStucInvVersionNumber, cSdslSturDefect=cSdslSturDefect, cSdslSturPerfPrev1DayLOSQs=cSdslSturPerfPrev1DayLOSQs, cSdslStucRateAdaptiveGroup=cSdslStucRateAdaptiveGroup, cSdslStucPerfCurr15MinUASs=cSdslStucPerfCurr15MinUASs, cSdslSturIntervalESs=cSdslSturIntervalESs, cSdslSturIntervalLOSs=cSdslSturIntervalLOSs, cSdslLineSpecific=cSdslLineSpecific, cSdslSturPerfCurr15MinCVs=cSdslSturPerfCurr15MinCVs, cSdslStucInvSerialNumber=cSdslStucInvSerialNumber, PYSNMP_MODULE_ID=ciscoSdslLineMIB, cSdslStucPM15MinIntervalGroup=cSdslStucPM15MinIntervalGroup, cSdslStucPerfCurr15MinCVs=cSdslStucPerfCurr15MinCVs, cSdslSturPerfSESs=cSdslSturPerfSESs, cSdslSturInvSerialNumber=cSdslSturInvSerialNumber, cSdslStucPerfCurr1DayTimeElapsed=cSdslStucPerfCurr1DayTimeElapsed, cSdslStucOutputPwr=cSdslStucOutputPwr, cSdslStucPerfCurr1DayUnavlRsrcs=cSdslStucPerfCurr1DayUnavlRsrcs, cSdslStucPerfCurr1DayUASs=cSdslStucPerfCurr1DayUASs, cSdslStucPerfCurr1DayInits=cSdslStucPerfCurr1DayInits, cSdslSturPerfCurr1DayUASs=cSdslSturPerfCurr1DayUASs, cSdslStucPerfUASs=cSdslStucPerfUASs, cSdslStucPerfCurr1DayLOSQs=cSdslStucPerfCurr1DayLOSQs, cSdslSturPerfInvalidIntervals=cSdslSturPerfInvalidIntervals, cSdslLineEntry=cSdslLineEntry, cSdslStucDefect=cSdslStucDefect, cSdslSturGroupRev1=cSdslSturGroupRev1, cSdslStucPerfCVs=cSdslStucPerfCVs, cSdslStucInvVendorId=cSdslStucInvVendorId, cSdslStucPerfCurr15MinLOSQs=cSdslStucPerfCurr15MinLOSQs, ciscoSdslLineMIBSturCompliance=ciscoSdslLineMIBSturCompliance, SdslPerfPrevDayCount=SdslPerfPrevDayCount, cSdslStucIntervalLOSQs=cSdslStucIntervalLOSQs, cSdslSturState=cSdslSturState, cSdslSturPMCounterGroup=cSdslSturPMCounterGroup, cSdslSturBasicGroup=cSdslSturBasicGroup, cSdslStucPerfPrev1DayInits=cSdslStucPerfPrev1DayInits, cSdslStucPerfPrev1DayESs=cSdslStucPerfPrev1DayESs, cSdslSturPerfPrev1DayMoniSecs=cSdslSturPerfPrev1DayMoniSecs, cSdslLineFramingMode=cSdslLineFramingMode, cSdslStucCurrAtn=cSdslStucCurrAtn, cSdslSturCurrAtn=cSdslSturCurrAtn, cSdslStucPerfCurr1DayLOSs=cSdslStucPerfCurr1DayLOSs, cSdslStucIntervalEntry=cSdslStucIntervalEntry, cSdslStucPerfPrev1DayLOSs=cSdslStucPerfPrev1DayLOSs, cSdslStucPerfLOSQs=cSdslStucPerfLOSQs, cSdslStucPerfCurr15MinLOSs=cSdslStucPerfCurr15MinLOSs, cSdslSturIntervalTable=cSdslSturIntervalTable, cSdslSturCurrOutputPwr=cSdslSturCurrOutputPwr, cSdslStucBasicGroup=cSdslStucBasicGroup, cSdslShdslLineMaxRate=cSdslShdslLineMaxRate, cSdslLineAlarmConfProfileTable=cSdslLineAlarmConfProfileTable, ciscoSdslLineMIBNotificationsPrefix=ciscoSdslLineMIBNotificationsPrefix, cSdslSturPerfDataEntry=cSdslSturPerfDataEntry, ciscoSdslLineMIBSturComplianceRev1=ciscoSdslLineMIBSturComplianceRev1, cSdslStucPerfCurr15MinTimeElapse=cSdslStucPerfCurr15MinTimeElapse, cSdslStucPerfPrev1DayLOSQs=cSdslStucPerfPrev1DayLOSQs, cSdslSturIntervalCVs=cSdslSturIntervalCVs, cSdslSturPerfPrev1DayCVs=cSdslSturPerfPrev1DayCVs, cSdslSturPerfCurr1DayESs=cSdslSturPerfCurr1DayESs, cSdslSturCurrSnrMgn=cSdslSturCurrSnrMgn, cSdslSturPerfPrev1DaySESs=cSdslSturPerfPrev1DaySESs, cSdslSturBasicGroupRev2=cSdslSturBasicGroupRev2, cSdslSturPerfUASs=cSdslSturPerfUASs, cSdslStucPhysEntry=cSdslStucPhysEntry, cSdslSturInvVendorId=cSdslSturInvVendorId, cSdslStucPhysTable=cSdslStucPhysTable, cSdslSturIntervalEntry=cSdslSturIntervalEntry, cSdslSturIntervalUASs=cSdslSturIntervalUASs, cSdslLineAlarmConfProfile=cSdslLineAlarmConfProfile, cSdslSturPhysTable=cSdslSturPhysTable, cSdslSturPerfCurr1DayLOSs=cSdslSturPerfCurr1DayLOSs, cSdslStucBasicGroupRev2=cSdslStucBasicGroupRev2, cSdslStucIntervalUASs=cSdslStucIntervalUASs, cSdslLineConfProfileEntry=cSdslLineConfProfileEntry, cSdslSturPerfLOSs=cSdslSturPerfLOSs, cSdslStucPerfPrev1DayUASs=cSdslStucPerfPrev1DayUASs, cSdslStucThreshMinRate=cSdslStucThreshMinRate, cSdslSturPM15MinIntervalGroup=cSdslSturPM15MinIntervalGroup, cSdslStucAnnex=cSdslStucAnnex, cSdslStucThreshMinSnrMgn=cSdslStucThreshMinSnrMgn, cSdslLineAutoRateEnable=cSdslLineAutoRateEnable, cSdslSturPerfCVs=cSdslSturPerfCVs, cSdslSturPerfPrev1DayESs=cSdslSturPerfPrev1DayESs, cSdslSturPerfCurr15MinLOSs=cSdslSturPerfCurr15MinLOSs, cSdslStucUnavailRsrcs=cSdslStucUnavailRsrcs, ciscoSdslLineMIB=ciscoSdslLineMIB, ciscoSdslLineMIBObjects=ciscoSdslLineMIBObjects, cSdslSturPerfCurr1DaySESs=cSdslSturPerfCurr1DaySESs, cSdslStucState=cSdslStucState, cSdslSturPhysEntry=cSdslSturPhysEntry, cSdslSturPerfCurr15MinTimeElapse=cSdslSturPerfCurr15MinTimeElapse, cSdslStucIntervalLOSs=cSdslStucIntervalLOSs, cSdslLineMaxRate=cSdslLineMaxRate, cSdslSturPerfLOSQs=cSdslSturPerfLOSQs, cSdslLineCoding=cSdslLineCoding, cSdslSturCurrGainRev=cSdslSturCurrGainRev, cSdslSturAnnex=cSdslSturAnnex, ciscoSdslLineMIBConformance=ciscoSdslLineMIBConformance, cSdslSturPerfDataTable=cSdslSturPerfDataTable, cSdslStucMinSnrMgn=cSdslStucMinSnrMgn, cSdslStucThresholdSnrMgn=cSdslStucThresholdSnrMgn, cSdslStucBasicGroupRev1=cSdslStucBasicGroupRev1, cSdslStucPerfPrev1DayMoniSecs=cSdslStucPerfPrev1DayMoniSecs, cSdslLineTable=cSdslLineTable, cSdslStucIntervalInits=cSdslStucIntervalInits, cSdslStucPerfPrev1DaySESs=cSdslStucPerfPrev1DaySESs, cSdslStucPMCounterGroup=cSdslStucPMCounterGroup, cSdslStucPerfCurr15MinUnavlRsrcs=cSdslStucPerfCurr15MinUnavlRsrcs, cSdslSturPM1DayIntervalGroup=cSdslSturPM1DayIntervalGroup, cSdslStucIntervalUnavlRsrcs=cSdslStucIntervalUnavlRsrcs, cSdslStucPerfCurr1DayCVs=cSdslStucPerfCurr1DayCVs, cSdslStucPerfCurr1DaySESs=cSdslStucPerfCurr1DaySESs, cSdslStucPerfValidIntervals=cSdslStucPerfValidIntervals, cSdslStucPerfCurr1DayESs=cSdslStucPerfCurr1DayESs, cSdslStucAlarmConfProfileGroup=cSdslStucAlarmConfProfileGroup, cSdslSturPerfPrev1DayUASs=cSdslSturPerfPrev1DayUASs, cSdslStucPM1DayIntervalGroup=cSdslStucPM1DayIntervalGroup, cSdslStucMaxSnrMgn=cSdslStucMaxSnrMgn, cSdslStucCurrSnrMgn=cSdslStucCurrSnrMgn, SdslPerfTimeElapsed=SdslPerfTimeElapsed, cSdslStucIntervalESs=cSdslStucIntervalESs, cSdslSturCurrRate=cSdslSturCurrRate, cSdslStucPerfInvalidIntervals=cSdslStucPerfInvalidIntervals, cSdslStucCurrGainRev=cSdslStucCurrGainRev, cSdslStucPerfCurr15MinInits=cSdslStucPerfCurr15MinInits, cSdslSturPerfValidIntervals=cSdslSturPerfValidIntervals, cSdslStucPerfDataEntry=cSdslStucPerfDataEntry, cSdslSturCurrGain=cSdslSturCurrGain, cSdslStucIntervalNumber=cSdslStucIntervalNumber, cSdslStucPerfInits=cSdslStucPerfInits, cSdslSturPerfCurr15MinESs=cSdslSturPerfCurr15MinESs, cSdslLineFraming=cSdslLineFraming, cSdslStucPerfPrev1DayCVs=cSdslStucPerfPrev1DayCVs, cSdslLineConfProfileTable=cSdslLineConfProfileTable, cSdslStucPerfCurr15MinSESs=cSdslStucPerfCurr15MinSESs, cSdslStucPerfLOSs=cSdslStucPerfLOSs, cSdslSturIntervalValidData=cSdslSturIntervalValidData, cSdslStucIntervalCVs=cSdslStucIntervalCVs, cSdslStucCurrRate=cSdslStucCurrRate, cSdslStucPerfPrev1DayUnavlRsrcs=cSdslStucPerfPrev1DayUnavlRsrcs, cSdslSturPerfCurr1DayLOSQs=cSdslSturPerfCurr1DayLOSQs, cSdslStucPerfDataTable=cSdslStucPerfDataTable, ciscoSdslLineMIBStucComplianceRev1=ciscoSdslLineMIBStucComplianceRev1, cSdslSturPerfPrev1DayLOSs=cSdslSturPerfPrev1DayLOSs, ciscoSdslLineMIBNotifications=ciscoSdslLineMIBNotifications, cSdslSturPerfCurr1DayCVs=cSdslSturPerfCurr1DayCVs, cSdslSturPerfESs=cSdslSturPerfESs, SdslStuxDefect=SdslStuxDefect, cSdslSturIntervalNumber=cSdslSturIntervalNumber, cSdslStucPerfCurr15MinESs=cSdslStucPerfCurr15MinESs, cSdslSturPerfCurr1DayTimeElapsed=cSdslSturPerfCurr1DayTimeElapsed, cSdslStucTargetSnrMgn=cSdslStucTargetSnrMgn, ciscoSdslLineMIBStucCompliance=ciscoSdslLineMIBStucCompliance, cSdslStucPsdMaskType=cSdslStucPsdMaskType, cSdslLineEquipmentType=cSdslLineEquipmentType, cSdslStucPerfSESs=cSdslStucPerfSESs, cSdslStucIntervalSESs=cSdslStucIntervalSESs, cSdslSturPerfCurr15MinSESs=cSdslSturPerfCurr15MinSESs, SdslPerfCurrDayCount=SdslPerfCurrDayCount, cSdslSturIntervalSESs=cSdslSturIntervalSESs, cSdslSturPerfCurr15MinLOSQs=cSdslSturPerfCurr15MinLOSQs, cSdslSturGroup=cSdslSturGroup, cSdslStucIntervalValidData=cSdslStucIntervalValidData, cSdslStucCurrOutputPwr=cSdslStucCurrOutputPwr, cSdslSturPerfCurr15MinUASs=cSdslSturPerfCurr15MinUASs, cSdslSturIntervalLOSQs=cSdslSturIntervalLOSQs, cSdslStucPerfESs=cSdslStucPerfESs, ciscoSdslLineMIBGroups=ciscoSdslLineMIBGroups)
