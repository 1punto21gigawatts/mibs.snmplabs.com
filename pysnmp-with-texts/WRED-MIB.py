#
# PySNMP MIB module WRED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WRED-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, Unsigned32, Integer32, NotificationType, Counter32, Counter64, iso, Bits, TimeTicks, ObjectIdentity, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Unsigned32", "Integer32", "NotificationType", "Counter32", "Counter64", "iso", "Bits", "TimeTicks", "ObjectIdentity", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
swWredMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 31))
if mibBuilder.loadTexts: swWredMIB.setLastUpdated('1109300000Z')
if mibBuilder.loadTexts: swWredMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swWredMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swWredMIB.setDescription('.')
swWredCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 31, 1))
swWredInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 31, 2))
swWredMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 31, 3))
swWredGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredGlobalState.setStatus('current')
if mibBuilder.loadTexts: swWredGlobalState.setDescription('This object enable\\disable the WRED state of the device.')
swWredAverageTimeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 1), )
if mibBuilder.loadTexts: swWredAverageTimeTable.setStatus('current')
if mibBuilder.loadTexts: swWredAverageTimeTable.setDescription('A table that contains WRED average time for each port.')
swWredAverageTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 1, 1), ).setIndexNames((0, "WRED-MIB", "swWredPortIndex"))
if mibBuilder.loadTexts: swWredAverageTimeEntry.setStatus('current')
if mibBuilder.loadTexts: swWredAverageTimeEntry.setDescription('A list that contains WRED average time per port.')
swWredPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredPortIndex.setStatus('current')
if mibBuilder.loadTexts: swWredPortIndex.setDescription('This object indicates the port number.')
swWredAverageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredAverageTime.setStatus('current')
if mibBuilder.loadTexts: swWredAverageTime.setDescription('This object indicates the time in microseconds used in average queue depth calculation (1-32768).')
swWredCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 2), )
if mibBuilder.loadTexts: swWredCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swWredCtrlTable.setDescription('A table that contains WRED drop setting for each port.')
swWredCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 2, 1), ).setIndexNames((0, "WRED-MIB", "swWredCtrlPortIndex"), (0, "WRED-MIB", "swWredCtrlClassIndex"))
if mibBuilder.loadTexts: swWredCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swWredCtrlEntry.setDescription('A list that contains WRED drop setting per port.')
swWredCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swWredCtrlPortIndex.setDescription('This object indicates the port number.')
swWredCtrlClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredCtrlClassIndex.setStatus('current')
if mibBuilder.loadTexts: swWredCtrlClassIndex.setDescription('This object indicates the cos queue number (0-7).')
swWredCtrlDropStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredCtrlDropStart.setStatus('current')
if mibBuilder.loadTexts: swWredCtrlDropStart.setDescription('This object indicates the percentage of queue size to start dropping (0-100).')
swWredCtrlDropSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredCtrlDropSlope.setStatus('current')
if mibBuilder.loadTexts: swWredCtrlDropSlope.setDescription('This object indicates the Degrees (0..90) describing the drop probability slope (0-90). When set the slope zero, it like disable the wred of the cos queue.')
swWredProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 4), )
if mibBuilder.loadTexts: swWredProfileTable.setStatus('current')
if mibBuilder.loadTexts: swWredProfileTable.setDescription('A table that contains WRED Profile Entrys.')
swWredProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 4, 1), ).setIndexNames((0, "WRED-MIB", "swWredProfileIndex"))
if mibBuilder.loadTexts: swWredProfileEntry.setStatus('current')
if mibBuilder.loadTexts: swWredProfileEntry.setDescription('A list that contains WRED profile entrys.')
swWredProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredProfileIndex.setStatus('current')
if mibBuilder.loadTexts: swWredProfileIndex.setDescription('This object indicates the profile number,the minimum value should be 2 and the maximum value is depended on project.')
swWredProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 4, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swWredProfileName.setStatus('current')
if mibBuilder.loadTexts: swWredProfileName.setDescription('This object indicates the profile name,The profile name can not be same.')
swWredProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swWredProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: swWredProfileRowStatus.setDescription('This object indicates the status of this entry.')
swWredProfileCfgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 5), )
if mibBuilder.loadTexts: swWredProfileCfgTable.setStatus('current')
if mibBuilder.loadTexts: swWredProfileCfgTable.setDescription('A table that contains WRED profile every parameter.')
swWredProfileCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 5, 1), ).setIndexNames((0, "WRED-MIB", "swWredProfileCfgIndex"), (0, "WRED-MIB", "swWredProfileCfgPacketType"), (0, "WRED-MIB", "swWredProfileCfgPacketColor"))
if mibBuilder.loadTexts: swWredProfileCfgEntry.setStatus('current')
if mibBuilder.loadTexts: swWredProfileCfgEntry.setDescription('A list that contains WRED profile parameter for each profile.')
swWredProfileCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredProfileCfgIndex.setStatus('current')
if mibBuilder.loadTexts: swWredProfileCfgIndex.setDescription('This object indicates the profile number.')
swWredProfileCfgPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("nonTcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredProfileCfgPacketType.setStatus('current')
if mibBuilder.loadTexts: swWredProfileCfgPacketType.setDescription('This object indicates the profile packet type.')
swWredProfileCfgPacketColor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredProfileCfgPacketColor.setStatus('current')
if mibBuilder.loadTexts: swWredProfileCfgPacketColor.setDescription('This object indicates the profile packet color.')
swWredProfileCfgMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredProfileCfgMinThreshold.setStatus('current')
if mibBuilder.loadTexts: swWredProfileCfgMinThreshold.setDescription('This object indicates the percentage of queue size to start dropping (0-100).')
swWredProfileCfgMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredProfileCfgMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: swWredProfileCfgMaxThreshold.setDescription('This object indicates the percentage of queue size over which WRED will drop all packets (0-100).')
swWredProfileCfgMaxDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredProfileCfgMaxDropRate.setStatus('current')
if mibBuilder.loadTexts: swWredProfileCfgMaxDropRate.setDescription('This object indicates the drop probability that the percentage of queue size reaches max threshold.')
swWredPortProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 6), )
if mibBuilder.loadTexts: swWredPortProfileTable.setStatus('current')
if mibBuilder.loadTexts: swWredPortProfileTable.setDescription('A table that contains ports WRED profile binded.')
swWredPortProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 6, 1), ).setIndexNames((0, "WRED-MIB", "swWredPortProfilePortIndex"), (0, "WRED-MIB", "swWredPortProfileClassIndex"))
if mibBuilder.loadTexts: swWredPortProfileEntry.setStatus('current')
if mibBuilder.loadTexts: swWredPortProfileEntry.setDescription('A list that contains port and WRED profile id.')
swWredPortProfilePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredPortProfilePortIndex.setStatus('current')
if mibBuilder.loadTexts: swWredPortProfilePortIndex.setDescription('This object indicates the port number.')
swWredPortProfileClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWredPortProfileClassIndex.setStatus('current')
if mibBuilder.loadTexts: swWredPortProfileClassIndex.setDescription('This object indicates the hardware priority queue number (0-7).')
swWredPortProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredPortProfileId.setStatus('current')
if mibBuilder.loadTexts: swWredPortProfileId.setDescription('This object indicates profile ID that port and queue binded, the minimum value should be 1 and the maximum is depended on project.')
swWredPortWeightNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredPortWeightNum.setStatus('current')
if mibBuilder.loadTexts: swWredPortWeightNum.setDescription('This object indicates weight number that port and queue set, the minimum value should be 1 and the maximum is depended on project.')
swWredAllPortAverageTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 31, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swWredAllPortAverageTime.setStatus('current')
if mibBuilder.loadTexts: swWredAllPortAverageTime.setDescription('This object configure the time in microseconds used in average queue depth calculation (1-32768) to all port. This return value while read request will be always 0.')
mibBuilder.exportSymbols("WRED-MIB", PYSNMP_MODULE_ID=swWredMIB, swWredProfileRowStatus=swWredProfileRowStatus, swWredCtrlClassIndex=swWredCtrlClassIndex, swWredProfileEntry=swWredProfileEntry, swWredPortProfileTable=swWredPortProfileTable, swWredPortProfileClassIndex=swWredPortProfileClassIndex, swWredCtrlEntry=swWredCtrlEntry, swWredProfileName=swWredProfileName, swWredGlobalState=swWredGlobalState, swWredProfileCfgIndex=swWredProfileCfgIndex, swWredPortProfilePortIndex=swWredPortProfilePortIndex, swWredAllPortAverageTime=swWredAllPortAverageTime, swWredProfileCfgMaxDropRate=swWredProfileCfgMaxDropRate, swWredCtrlTable=swWredCtrlTable, swWredPortProfileEntry=swWredPortProfileEntry, swWredProfileCfgTable=swWredProfileCfgTable, swWredAverageTime=swWredAverageTime, swWredProfileCfgPacketColor=swWredProfileCfgPacketColor, swWredProfileIndex=swWredProfileIndex, swWredProfileCfgPacketType=swWredProfileCfgPacketType, swWredProfileCfgMaxThreshold=swWredProfileCfgMaxThreshold, swWredProfileCfgEntry=swWredProfileCfgEntry, swWredPortProfileId=swWredPortProfileId, swWredInfo=swWredInfo, swWredPortWeightNum=swWredPortWeightNum, swWredCtrlDropSlope=swWredCtrlDropSlope, swWredAverageTimeTable=swWredAverageTimeTable, swWredCtrl=swWredCtrl, swWredCtrlPortIndex=swWredCtrlPortIndex, swWredAverageTimeEntry=swWredAverageTimeEntry, swWredProfileTable=swWredProfileTable, swWredProfileCfgMinThreshold=swWredProfileCfgMinThreshold, swWredMIB=swWredMIB, swWredPortIndex=swWredPortIndex, swWredCtrlDropStart=swWredCtrlDropStart, swWredMgmt=swWredMgmt)
