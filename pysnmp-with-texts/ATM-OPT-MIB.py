#
# PySNMP MIB module ATM-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, ModuleIdentity, Counter32, Unsigned32, IpAddress, Bits, iso, Counter64, Gauge32, Integer32, ObjectIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "ModuleIdentity", "Counter32", "Unsigned32", "IpAddress", "Bits", "iso", "Counter64", "Gauge32", "Integer32", "ObjectIdentity", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTATMPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35), )
if mibBuilder.loadTexts: cdx6500PPCTATMPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTATMPortTable.setDescription('This table contains ATM Port configuration parameters.')
cdx6500PPCTATMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTATMPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTATMPortEntry.setDescription('Entries in the ATM Port Configuration Table.')
atmPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmPCfgPortNumber.setDescription('Port number of this port.')
atmPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57))).clone(namedValues=NamedValues(("atm", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: atmPCfgPortType.setDescription('Port type of the Port.')
atmPCfgMaxVPIRange = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgMaxVPIRange.setStatus('deprecated')
if mibBuilder.loadTexts: atmPCfgMaxVPIRange.setDescription('This parameter specifies the maximum VPI value that any station on this port can operate with. Increasing this value has the effect of decreasing the maximum VPI that can be specified .')
atmPCfgMaxVCIRange = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgMaxVCIRange.setStatus('deprecated')
if mibBuilder.loadTexts: atmPCfgMaxVCIRange.setDescription('This parameter specifies the maximum VCI value that any station on this port can operate with. Increasing this value has the effect of decreasing the maximum VCI that can be specified .')
atmPCfgLinkAssuranceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgLinkAssuranceTimer.setStatus('deprecated')
if mibBuilder.loadTexts: atmPCfgLinkAssuranceTimer.setDescription('If PVC Link Assurance Method is set to LOOPBACK, this is the amount of time in seconds between sending F5 loopback cells .')
atmPCfgLinkAssuranceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgLinkAssuranceCount.setStatus('deprecated')
if mibBuilder.loadTexts: atmPCfgLinkAssuranceCount.setDescription('If PVC Link Assurance Method is set to LOOPBACK, this is the number of retries sent before declaring that the link is down .')
atmPCfgCCActDeactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgCCActDeactTimer.setStatus('deprecated')
if mibBuilder.loadTexts: atmPCfgCCActDeactTimer.setDescription('If PVC Link Assurance Method is set to NEGOTIATE CC cells this is the amount of time in seconds between retransmissions of Activate or Deactivate cells.')
atmPCfgCCActDeactCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgCCActDeactCount.setStatus('deprecated')
if mibBuilder.loadTexts: atmPCfgCCActDeactCount.setDescription('If PVC Link Assurance Method is set to NEGOTIATE CC cells this is the number of times to send an Activate or Deactivate cell before declaring that the negotiation procedure has failed .')
atmPCfgVCCTrafficPrioritization = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("sequence", 2), ("priority", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgVCCTrafficPrioritization.setStatus('mandatory')
if mibBuilder.loadTexts: atmPCfgVCCTrafficPrioritization.setDescription('All station VCCs that operate on the port must run with the same traffic prioritization dicipline. This port parameter specifies the priorization as follows: DISABLE - There is no prioritization of traffic within a VCC. SEQUENCE - High priority and normal priority traffic are placed in separate queues which are serviced in sequential round robin order. PRIORITY - High priority and normal priority traffic are placed in separate queues. The high priority queue is serviced completely before the low priority queue.')
cdx6500SPCTATMStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10), )
if mibBuilder.loadTexts: cdx6500SPCTATMStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTATMStationTable.setDescription('This table contains ATM Station configuration parameters.')
cdx6500SPCTATMStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmSCfgPortNumber"), (0, "ATM-OPT-MIB", "atmSCfgStnNumber"))
if mibBuilder.loadTexts: cdx6500SPCTATMStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTATMStationEntry.setDescription('Entries in the ATM Station Configuration Table.')
atmSCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgPortNumber.setDescription('The ATM port number corresponding to this station.')
atmSCfgStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgStnNumber.setDescription('The number of the configured ATM Station.')
atmSCfgVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgVPI.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgVPI.setDescription('The Virtual Path Identifier (VPI) is the provisioned virtual path number for the station of circuit type PVC on the ATM port.')
atmSCfgVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgVCI.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgVCI.setDescription('The Virtual Circuit Identifier (VCI) is the provisioned virtual circuit number for the station of circuit type PVC on the ATM port.')
atmSCfgLinkAssuranceMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("loopback", 2), ("enabled", 3), ("nogotiate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgLinkAssuranceMethod.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgLinkAssuranceMethod.setDescription('PVC link assurance method to use: DISABLED - No checking is performed LOOPBACK - Periodically send a loopback cell NEGOTIATE - Negotiate use of CC cells ENABLED - Always use CC cells .')
atmSCfgTrafficServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ubr", 1), ("cbr", 2), ("vbr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgTrafficServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgTrafficServiceCategory.setDescription('The service category is the traffic type for the operation of the station. The traffic types are: UBR - Unspecified Bit Rate CBR - Constant Bit Rate VBR - Variable Bit Rate.')
atmSCfgPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgPeakCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgPeakCellRate.setDescription('This parameter (PCR) specifies the rate (cells per second) the network agrees to receive cells from the station PCR is configuredin multiples of 20 cells per second.')
atmSCfgVBRTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("single", 2), ("dual", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgVBRTrafficShaping.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgVBRTrafficShaping.setDescription('Specifies whether a station configured for VBR traffic category conforms to single or dual leaky bucket traffic shaping. Single leaky bucket means the traffic is shaped to only a PCR. Dual bucket shaping means traffic is shaped to PCR as well as SCR and MBS. SINGLE - Single Bucket VBR DUAL - Dual Bucket VBR.')
atmSCfgVCCPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgVCCPriorityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: atmSCfgVCCPriorityLevel.setDescription('This parameter controls the priority of the station VCC in comparison to other stations within the same service category (either UBR or VBR). For VBR traffic category, setting this parameter to HIGH classifies a VCC as VBRrt (VBR real time). For VBRnrt (non-real time) select NORMAL. NORMAL - Normal priority HIGH - High priority.')
atmSCfgSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 30000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgSustainableCellRate.setStatus('deprecated')
if mibBuilder.loadTexts: atmSCfgSustainableCellRate.setDescription('This parameter (SCR) specifies the rate (cells per second) the network agrees to receive cells from the station. This parameter characterizes the amount of sustainable bandwidth for VBR traffic class. The SCR cannot be greater than the link speed: 3620 for T1, 4800 for E1, 105500 for T3 (96000 for PLCP), 81040 for E3.')
atmSCfgMaximumBustSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgMaximumBustSize.setStatus('deprecated')
if mibBuilder.loadTexts: atmSCfgMaximumBustSize.setDescription('Maximum burst size for VBR traffic in cells')
cdx6500PPSTATMPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36))
cdx6500PPSTATMPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1), )
if mibBuilder.loadTexts: cdx6500PPSTATMPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTATMPortTable.setDescription('This table contains ATM Port Statistics parameters.')
cdx6500PPSTATMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmPStatsPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTATMPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTATMPortEntry.setDescription('Entries in the ATM Port Statistics Table.')
atmPStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsPortNumber.setDescription('The port number of the ATM port.')
atmPStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57))).clone(namedValues=NamedValues(("atm", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsPortType.setDescription('Port type of this port.')
atmPStatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsPortStatus.setDescription('Specifies the current port status.')
cdx6500PPSTATMDataSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2), )
if mibBuilder.loadTexts: cdx6500PPSTATMDataSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTATMDataSummaryTable.setDescription('This table contains ATM Port Data Summary Statistics parameters.')
cdx6500PPSTATMDataSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmDataSummPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTATMDataSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTATMDataSummaryEntry.setDescription('Entries in the ATM Port Data Summary Statistics Table.')
atmDataSummPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDataSummPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmDataSummPortNumber.setDescription('The port number of the ATM port.')
atmPStatsOctetsInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOctetsInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsOctetsInTotal.setDescription('Number of characters received since last boot or statistics reset.')
atmPStatsOctetsOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOctetsOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsOctetsOutTotal.setDescription('Number of characters transmitted since last boot or statistics reset.')
atmPStatsOctetsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOctetsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsOctetsInPerSec.setDescription('Average number of characters received per second.')
atmPStatsOctetsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOctetsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsOctetsOutPerSec.setDescription('Average number of characters transmitted per second.')
atmPStatsFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsFramesInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsFramesInTotal.setDescription('Number of frames received since last boot or statistics reset.')
atmPStatsFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsFramesOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsFramesOutTotal.setDescription('Number of frames transmitted since last boot or statistics reset.')
atmPStatsFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsFramesInPerSec.setDescription('Average number of frames received per second.')
atmPStatsFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsFramesOutPerSec.setDescription('Average number of frames transmitted per second.')
atmPStatsOAMCellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOAMCellInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsOAMCellInTotal.setDescription('Number of OAM Cells received since last boot or statistics.')
atmPStatsOAMCellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOAMCellOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsOAMCellOutTotal.setDescription('Number of OAM Cells transmitted since last boot or statistics.')
atmPStatsATMCellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsATMCellInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsATMCellInTotal.setDescription('Number of ATM Cells received since last boot or statistics.')
atmPStatsATMCellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsATMCellOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsATMCellOutTotal.setDescription('Number of ATM Cells transmitted since last boot or statistics.')
atmPStatsErrorCellCor = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsErrorCellCor.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsErrorCellCor.setDescription('HEC(Cor) errors in Physical Layer.')
atmPStatsErrorCellDis = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsErrorCellDis.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsErrorCellDis.setDescription('HEC(Dis) errors in Physical Layer.')
atmPStatsCellDelineateState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsCellDelineateState.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsCellDelineateState.setDescription('ATM Physical Layer state.')
atmPStatsCellStateChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsCellStateChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsCellStateChangeTime.setDescription('The state change time in ATM Physical Layer.')
atmPStatsDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsDiscardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atmPStatsDiscardedFrames.setDescription('The total number of dicarded frames.')
cdx6500SPSTATMSStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11))
atmSGenStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1), )
if mibBuilder.loadTexts: atmSGenStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmSGenStatsTable.setDescription('This table contains ATM Station Statistics parameters.')
cdx6500atmSGenStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmSGenStatsPortNumber"), (0, "ATM-OPT-MIB", "atmSGenStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500atmSGenStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500atmSGenStatsEntry.setDescription('Entries in the ATM Station Statistics Table.')
atmSGenStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSGenStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmSGenStatsPortNumber.setDescription('The ATM port number corresponding to this station.')
atmSGenStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSGenStatsStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmSGenStatsStnNumber.setDescription('The number of the ATM Station.')
atmSStatsStnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsStnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsStnStatus.setDescription('Status of the station.')
atmSStatsVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsVPI.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsVPI.setDescription('The VPI of ATM Station.')
atmSStatsVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsVCI.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsVCI.setDescription('The VCI of the ATM Station.')
atmSStatsAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsAdmState.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsAdmState.setDescription('The VCI of the ATM Station.')
atmSStatsPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsPeer.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsPeer.setDescription('The Peer state of the ATM Station.')
atmSStatsAdjacent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsAdjacent.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsAdjacent.setDescription('The Adjacent state of the ATM Station.')
atmSDataSummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2), )
if mibBuilder.loadTexts: atmSDataSummaryStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmSDataSummaryStatsTable.setDescription('This table contains ATM Station Data Summary Statistics parameters.')
cdx6500atmSDataSummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmSDataSummStatsPortNumber"), (0, "ATM-OPT-MIB", "atmSDataSummStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500atmSDataSummaryStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500atmSDataSummaryStatsEntry.setDescription('Entries in the ATM Station Data Summary Statistics Table.')
atmSDataSummStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSDataSummStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmSDataSummStatsPortNumber.setDescription('The ATM port number corresponding to this station.')
atmSDataSummStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSDataSummStatsStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmSDataSummStatsStnNumber.setDescription('The number of the ATM station.')
atmSStatsOctetsInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsOctetsInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsOctetsInTotal.setDescription('Number of characters received since last node boot or statistics reset.')
atmSStatsOctetsOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsOctetsOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsOctetsOutTotal.setDescription('Number of characters transmitted since last node boot or statistics reset.')
atmSStatsFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsFrameInTotal.setDescription('Number of frames transmitted since last node boot or statistics reset.')
atmSStatsFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsFrameOutTotal.setDescription('Number of frames transmitted since last node boot or statistics reset.')
atmSStatsF5CellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsF5CellInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsF5CellInTotal.setDescription('Number of F5 Cells received since last node boot or statistics reset.')
atmSStatsF5CellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsF5CellOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsF5CellOutTotal.setDescription('Number of F5 Cells transmitted since last node boot or statistics reset.')
atmSStatsAISCellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsAISCellInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsAISCellInTotal.setDescription('Number of AIS Cells received since last node boot or statistics reset.')
atmSStatsRDICellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsRDICellInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsRDICellInTotal.setDescription('Number of RDI Cells received since last node boot or statistics reset.')
atmSStatsRDICellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsRDICellOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsRDICellOutTotal.setDescription('Number of RDI Cells transmitted since last node boot or statistics reset.')
atmSStatsCCCellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCCCellInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsCCCellInTotal.setDescription('Number of CC Cells received since last node boot or statistics reset.')
atmSStatsCCCellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCCCellOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsCCCellOutTotal.setDescription('Number of CC Cells transmitted since last node boot or statistics reset.')
atmSStatsVCFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsVCFailure.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsVCFailure.setDescription('The state of VC Failures.')
atmSStatsVCAssuranceState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsVCAssuranceState.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsVCAssuranceState.setDescription('The state of VC AssuranceState.')
atmSStatsOctetsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsOctetsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsOctetsInPerSec.setDescription('The number of Octests in per second.')
atmSStatsOctetsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsOctetsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsOctetsOutPerSec.setDescription('The number of Octests out per second.')
atmSStatsFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsFramesInPerSec.setDescription('The number of frames in per second.')
atmSStatsFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsFramesOutPerSec.setDescription('The number of frames out per second.')
atmSStatsDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsDiscardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsDiscardedFrames.setDescription('The total number of frames discarded.')
atmSStatsCIBitInForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCIBitInForIWF.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsCIBitInForIWF.setDescription('The total number of CI Bit in.')
atmSStatsCIBitOutForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCIBitOutForIWF.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsCIBitOutForIWF.setDescription('The total number of CI Bit out.')
atmSStatsCLPBitInForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCLPBitInForIWF.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsCLPBitInForIWF.setDescription('The total number of CLP Bit in.')
atmSStatsCLPBitOutForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCLPBitOutForIWF.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsCLPBitOutForIWF.setDescription('The total number of CLP Bit out.')
atmSStatsUUBitInForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsUUBitInForIWF.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsUUBitInForIWF.setDescription('The total number of UU Bit in.')
atmSStatsUUBitOutForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsUUBitOutForIWF.setStatus('mandatory')
if mibBuilder.loadTexts: atmSStatsUUBitOutForIWF.setDescription('The total number of UU Bit out.')
cdx6500ContATMTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24))
cdx6500ATMPContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 1), )
if mibBuilder.loadTexts: cdx6500ATMPContTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ATMPContTable.setDescription('Control parameters for ATM ports.')
cdx6500ATMPContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 1, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmPContPortNumber"))
if mibBuilder.loadTexts: cdx6500ATMPContEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ATMPContEntry.setDescription('Each control applies to a single ATM port.')
atmPContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: atmPContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmPContPortNumber.setDescription('Port number of the ATM port.')
atmPContPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("resetstats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmPContPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: atmPContPortControl.setDescription('Control operations for the specified ATM port. boot - Boots the ATM port resetstats - Resets the ATM port statistics.')
cdx6500ATMSContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2), )
if mibBuilder.loadTexts: cdx6500ATMSContTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ATMSContTable.setDescription('Control parameters for ATM stations.')
cdx6500ATMSContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmSContPortNumber"), (0, "ATM-OPT-MIB", "atmSContStnNumber"))
if mibBuilder.loadTexts: cdx6500ATMSContEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ATMSContEntry.setDescription('Each control applies to a single ATM station.')
atmSContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: atmSContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmSContPortNumber.setDescription('The ATM port number corresponding to this station.')
atmSContStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: atmSContStnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atmSContStnNumber.setDescription('ATM station number.')
atmSContStnControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("resetstats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmSContStnControl.setStatus('mandatory')
if mibBuilder.loadTexts: atmSContStnControl.setDescription('Control operations for the specified ATM station. boot - Boots the ATM station resetstats - Resets the ATM station statistics.')
mibBuilder.exportSymbols("ATM-OPT-MIB", cdxProductSpecific=cdxProductSpecific, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500PPSTATMPortTable=cdx6500PPSTATMPortTable, cdx6500ATMPContEntry=cdx6500ATMPContEntry, atmSCfgVPI=atmSCfgVPI, cdx6500Statistics=cdx6500Statistics, atmPCfgCCActDeactTimer=atmPCfgCCActDeactTimer, atmPStatsErrorCellDis=atmPStatsErrorCellDis, atmPStatsCellStateChangeTime=atmPStatsCellStateChangeTime, atmPStatsDiscardedFrames=atmPStatsDiscardedFrames, atmSGenStatsStnNumber=atmSGenStatsStnNumber, atmSStatsVCFailure=atmSStatsVCFailure, atmSStatsFramesInPerSec=atmSStatsFramesInPerSec, cdx6500ContATMTable=cdx6500ContATMTable, atmPStatsFramesOutTotal=atmPStatsFramesOutTotal, codex=codex, atmPCfgMaxVCIRange=atmPCfgMaxVCIRange, atmSStatsPeer=atmSStatsPeer, cdx6500SPSTATMSStatsTable=cdx6500SPSTATMSStatsTable, atmSCfgVBRTrafficShaping=atmSCfgVBRTrafficShaping, atmSCfgSustainableCellRate=atmSCfgSustainableCellRate, cdx6500SPCTATMStationTable=cdx6500SPCTATMStationTable, cdx6500PPSTATMDataSummaryTable=cdx6500PPSTATMDataSummaryTable, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500PPCTATMPortEntry=cdx6500PPCTATMPortEntry, atmSStatsOctetsInTotal=atmSStatsOctetsInTotal, atmSContStnNumber=atmSContStnNumber, atmSCfgPeakCellRate=atmSCfgPeakCellRate, atmPStatsPortStatus=atmPStatsPortStatus, atmSStatsVPI=atmSStatsVPI, atmSStatsFrameOutTotal=atmSStatsFrameOutTotal, atmSGenStatsTable=atmSGenStatsTable, atmSStatsRDICellInTotal=atmSStatsRDICellInTotal, atmPCfgPortType=atmPCfgPortType, atmSCfgVCCPriorityLevel=atmSCfgVCCPriorityLevel, atmSStatsAISCellInTotal=atmSStatsAISCellInTotal, atmPCfgPortNumber=atmPCfgPortNumber, cdx6500SPCTATMStationEntry=cdx6500SPCTATMStationEntry, atmSStatsUUBitOutForIWF=atmSStatsUUBitOutForIWF, atmPStatsFramesInTotal=atmPStatsFramesInTotal, atmSStatsDiscardedFrames=atmSStatsDiscardedFrames, atmSStatsFrameInTotal=atmSStatsFrameInTotal, atmPStatsErrorCellCor=atmPStatsErrorCellCor, cdx6500atmSDataSummaryStatsEntry=cdx6500atmSDataSummaryStatsEntry, cdx6500PPSTATMPortEntry=cdx6500PPSTATMPortEntry, atmSStatsCIBitOutForIWF=atmSStatsCIBitOutForIWF, atmSStatsAdmState=atmSStatsAdmState, atmSStatsOctetsOutTotal=atmSStatsOctetsOutTotal, atmPStatsPortType=atmPStatsPortType, cdx6500PPSTATMDataSummaryEntry=cdx6500PPSTATMDataSummaryEntry, atmSContPortNumber=atmSContPortNumber, atmSStatsCCCellInTotal=atmSStatsCCCellInTotal, atmPStatsPortNumber=atmPStatsPortNumber, cdx6500atmSGenStatsEntry=cdx6500atmSGenStatsEntry, atmPCfgCCActDeactCount=atmPCfgCCActDeactCount, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, atmPCfgLinkAssuranceTimer=atmPCfgLinkAssuranceTimer, DisplayString=DisplayString, atmPStatsOctetsOutPerSec=atmPStatsOctetsOutPerSec, cdx6500Configuration=cdx6500Configuration, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, atmSCfgMaximumBustSize=atmSCfgMaximumBustSize, atmSCfgLinkAssuranceMethod=atmSCfgLinkAssuranceMethod, atmSDataSummStatsStnNumber=atmSDataSummStatsStnNumber, atmSStatsVCAssuranceState=atmSStatsVCAssuranceState, cdx6500ATMSContTable=cdx6500ATMSContTable, atmSCfgStnNumber=atmSCfgStnNumber, atmSContStnControl=atmSContStnControl, atmSStatsOctetsOutPerSec=atmSStatsOctetsOutPerSec, cdx6500PPCTATMPortTable=cdx6500PPCTATMPortTable, atmPStatsOctetsInTotal=atmPStatsOctetsInTotal, cdx6500=cdx6500, atmSStatsAdjacent=atmSStatsAdjacent, atmSStatsCIBitInForIWF=atmSStatsCIBitInForIWF, atmSStatsCCCellOutTotal=atmSStatsCCCellOutTotal, atmSStatsVCI=atmSStatsVCI, atmPContPortNumber=atmPContPortNumber, atmPCfgVCCTrafficPrioritization=atmPCfgVCCTrafficPrioritization, atmPStatsOctetsOutTotal=atmPStatsOctetsOutTotal, cdx6500ATMPContTable=cdx6500ATMPContTable, atmSStatsF5CellOutTotal=atmSStatsF5CellOutTotal, atmPStatsOAMCellOutTotal=atmPStatsOAMCellOutTotal, atmSStatsOctetsInPerSec=atmSStatsOctetsInPerSec, atmSStatsCLPBitInForIWF=atmSStatsCLPBitInForIWF, atmSCfgPortNumber=atmSCfgPortNumber, cdx6500ATMSContEntry=cdx6500ATMSContEntry, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, atmSStatsRDICellOutTotal=atmSStatsRDICellOutTotal, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, atmPStatsFramesInPerSec=atmPStatsFramesInPerSec, atmDataSummPortNumber=atmDataSummPortNumber, atmSGenStatsPortNumber=atmSGenStatsPortNumber, atmPStatsATMCellOutTotal=atmPStatsATMCellOutTotal, atmSDataSummStatsPortNumber=atmSDataSummStatsPortNumber, atmPStatsATMCellInTotal=atmPStatsATMCellInTotal, atmPStatsFramesOutPerSec=atmPStatsFramesOutPerSec, atmSCfgTrafficServiceCategory=atmSCfgTrafficServiceCategory, atmPCfgMaxVPIRange=atmPCfgMaxVPIRange, atmPStatsOctetsInPerSec=atmPStatsOctetsInPerSec, atmSDataSummaryStatsTable=atmSDataSummaryStatsTable, atmSStatsF5CellInTotal=atmSStatsF5CellInTotal, cdx6500Controls=cdx6500Controls, atmSStatsCLPBitOutForIWF=atmSStatsCLPBitOutForIWF, atmPCfgLinkAssuranceCount=atmPCfgLinkAssuranceCount, atmPStatsCellDelineateState=atmPStatsCellDelineateState, atmSStatsStnStatus=atmSStatsStnStatus, cdx6500PPSTATMPStatsTable=cdx6500PPSTATMPStatsTable, atmSStatsFramesOutPerSec=atmSStatsFramesOutPerSec, atmSCfgVCI=atmSCfgVCI, atmPContPortControl=atmPContPortControl, atmPStatsOAMCellInTotal=atmPStatsOAMCellInTotal, atmSStatsUUBitInForIWF=atmSStatsUUBitInForIWF)
