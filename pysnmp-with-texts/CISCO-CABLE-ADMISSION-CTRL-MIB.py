#
# PySNMP MIB module CISCO-CABLE-ADMISSION-CTRL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CABLE-ADMISSION-CTRL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, TimeTicks, NotificationType, Bits, MibIdentifier, ObjectIdentity, IpAddress, iso, Counter64, Counter32, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "NotificationType", "Bits", "MibIdentifier", "ObjectIdentity", "IpAddress", "iso", "Counter64", "Counter32", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TimeStamp, DisplayString, RowStatus, TruthValue, VariablePointer, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowStatus", "TruthValue", "VariablePointer", "TextualConvention", "StorageType")
ciscoCableAdmCtrlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 450))
ciscoCableAdmCtrlMIB.setRevisions(('2006-10-25 00:00', '2005-05-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCableAdmCtrlMIB.setRevisionsDescriptions(('The current cable admission control feature has been changed to perform bandwidth allocation based on the application types rather than scheduling types. The following tables are based on scheduling types, hence deprecated: ccacUsConfigTable, ccacDsConfigTable, ccacUsTable and ccacDsTable. New tables that are based on application types are defined instead: ccacUsConfigRevTable, ccacDsConfigRevTable, ccacUsRevTable, ccacDsRevTable. Removed reference to SchedulingType from DOCS-QOS-MIB, instead created CcacSchedulingType because DOCS-QOS-MIB is no longer maintained by IETF.', 'This is the initial version.',))
if mibBuilder.loadTexts: ciscoCableAdmCtrlMIB.setLastUpdated('200610250000Z')
if mibBuilder.loadTexts: ciscoCableAdmCtrlMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCableAdmCtrlMIB.setContactInfo(' Cisco Systems Customer Service Postal: Cisco Systems 170 West Tasman Drive San Jose, CA 95134 U.S.A. Phone: +1 800 553-NETS E-mail: cs-ubr@cisco.com')
if mibBuilder.loadTexts: ciscoCableAdmCtrlMIB.setDescription('This MIB module defines the managed objects enabling the management of Cable Modem Termination System (CMTS) admission control. CMTS admission control refers to the rules that the CMTS will follow when allocating resources such as CPU, memory or bandwidth with respect to monitored events. The monitored events include: 1. Dynamic service flow creation requests Dynamic service flow allows on-demand reservation on Layer 2 bandwidth resources. CMTS can provide special QoS to the cable modem dynamically for the duration of a voice call or video session which provides a more efficient use of the available bandwidth. 2. Resource requests during cable modem (CM) registration. CMTS resources are required during CM registration. CMTS resources will be checked when it receives a CM registration request. The resources being monitored include: 1. The CMTS CPU and memory utilization data and thresholds setting on the physical entity, like main processor or linecard when a monitoring event happens. 2. The upstream (US) channel bandwidth utilization based on scheduling types or service classes. 3. The downstream (DS) channel bandwidth utilization based on voice or data.')
ciscoCableAdmCtrlMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 0))
ciscoCableAdmCtrlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 1))
ciscoCableAdmCtrlMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 2))
ccacObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 1))
ccacConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2))
ccacStatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3))
ccacEventHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4))
class Percent(TextualConvention, Unsigned32):
    description = 'An integer that is in the range of a percent value.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class NonZeroPercent(TextualConvention, Unsigned32):
    description = 'An integer that is in the range of a non-zero percent value.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

class TenthPercent(TextualConvention, Unsigned32):
    description = 'An integer that is in the range of tenths of a percent value.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 1000)

class CcacSchedulingType(TextualConvention, Integer32):
    description = 'This type is deprecated because all the objects of this type have been deprecated. The scheduling service provided by a CMTS for an upstream service flow. If the parameter is omitted from an upstream QOS Parameter Set, this object takes the value of bestEffort (2). This parameter must be reported as undefined (1) for downstream QOS Parameter Sets.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 1), ("bestEffort", 2), ("nonRealTimePollingService", 3), ("realTimePollingService", 4), ("unsolictedGrantServiceWithAD", 5), ("unsolictedGrantService", 6))

class CcacApplicationBucketType(TextualConvention, Unsigned32):
    description = 'A unique value, greater than zero, for each application bucket being defined for uniquely identifying application types for cable admission control feature.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 64)

class QoSServiceClassNameOrNull(TextualConvention, OctetString):
    reference = 'SP-RFIv1.1-I05-000714, Appendix C.2.2.3.4'
    description = 'A null string or a string that represents QoS service class name.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 15)

class CcacMonitoredEvent(TextualConvention, Bits):
    reference = 'SP-RFIv1.1-I05-000714, Appendix C.2.2.3.3 SP-RFIv2.0-IO2-020617, Section 11.2.'
    description = "The types of event being monitored by CMTS admission control. 'dynamicSvcFlow' : Dynamic service flow allows on-demand reservation on Layer 2 bandwidth resources. 'cmRegistration' : CM sends registration request to CMTS."
    status = 'current'
    namedValues = NamedValues(("dynamicSvcFlow", 0), ("cmRegistration", 1))

class CcacSysRscMonitoredType(TextualConvention, Integer32):
    description = "The type of system resource being monitored by the CMTS admission control. 'cpu5Sec' : The overall CPU busy percentage in the last 5 seconds period. 'cpu1Min' : The overall CPU busy percentage in the last 1 minute period. 'procMem' : The percentage of process memory which is in 'ioMem' : The percentage of I/O memory which is in used. used. 'totalMem' : The percentage of memory which is in used by I/O memory and process memory."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("cpu5Sec", 1), ("cpu1Min", 2), ("procMem", 3), ("ioMem", 4), ("totalMem", 5))

class CcacDSTrafficMonitoredType(TextualConvention, Integer32):
    description = "The downstream traffic type being monitored by the CMTS admission control. 'voice' : The downstream voice traffic. 'data' : The downstream data traffic."
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("voice", 1), ("data", 2))

ccacNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ccacNotifyEnable.setDescription("This object controls generation of notifications in the MIB. When the object is 'true', the agent will generate notification defined by this MIB. When the object is 'false', the agent will not generate notification defined by this MIB.")
ccacEventMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 1, 2), CcacMonitoredEvent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacEventMonitoring.setStatus('current')
if mibBuilder.loadTexts: ccacEventMonitoring.setDescription('This object specifies the events being monitored by the CMTS admission control.')
ccacSysRscConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 1), )
if mibBuilder.loadTexts: ccacSysRscConfigTable.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscConfigTable.setDescription("This table abstracts a sparse matrix of system resource utilization thresholds to be monitored by Cable Admission Control. The entPhysicalIndex uniquely identifies the physical entity with a set of system resource utilization thresholds being associated. The ccacSysRscConfigResourceType identifies the system resource to be monitored. The physical entities, for example, processors or linecards, are being expanded upon, and the expansion entails zero or more sets of system resource utilization thresholds. The agent creates/destroys/modifies an entry whenever the local console affects this configuration. The management application may create/destroy/modify an entry. When an entry is created and ccacSysRscConfigStatus is equal to 'active', CMTS monitors the system resources based on the configurable thresholds, minor, major and critical for different monitoring system resources type and the main processor or a linecard.")
ccacSysRscConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigResourceType"))
if mibBuilder.loadTexts: ccacSysRscConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscConfigEntry.setDescription('Each entry defines a set of configurable thresholds, for each monitoring system resources type and the main processor or a linecard.')
ccacSysRscConfigResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 1, 1, 1), CcacSysRscMonitoredType())
if mibBuilder.loadTexts: ccacSysRscConfigResourceType.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscConfigResourceType.setDescription('This object specifies the type of system resource being monitored.')
ccacSysRscConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacSysRscConfigStatus.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscConfigStatus.setDescription('This object facilitates the creation, modification, and destruction of a conceptual row in this table.')
ccacSysRscConfigMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 1, 1, 3), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacSysRscConfigMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscConfigMinorThreshold.setDescription('This object specifies minor threshold related to the utilization of the resource being monitored.')
ccacSysRscConfigMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 1, 1, 4), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacSysRscConfigMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscConfigMajorThreshold.setDescription('This object specifies major threshold related to the utilization of the resource being monitored. The major threshold must be greater than minor threshold.')
ccacSysRscConfigCritThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 1, 1, 5), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacSysRscConfigCritThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscConfigCritThreshold.setDescription('This object specifies critical threshold related to the utilization of the resource being monitored. The critical threshold must be greater than major threshold. The CMTS will reject requests corresponding to monitored events if the monitored system resource exceeds the critical threshold.')
ccacUsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2), )
if mibBuilder.loadTexts: ccacUsConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigTable.setDescription("This table is deprecated by ccacUsConfigRevTable. This table abstracts a sparse matrix of upstream channel utilization thresholds to be monitored by Cable Admission Control. The ifIndex uniquely identifies all upstream channels, upstream channels associated with an interface or an upstream channel with a set of upstream channel utilization thresholds being associated. The ccacUsConfigSchedType identifies the scheduling type to be monitored. The ccacUsConfigServiceClassName identifies the cable service class to be monitored. The agent creates/destroys/modifies an entry whenever the local console affects this configuration. The management application may create/destroy/modify an entry. When an entry is created and ccacUsConfigStatus is equal to 'active', CMTS monitors the upstream channel bandwidth utilization based on the configurable thresholds, minor, major and exclusive percentage, for different scheduling type or service class for an upstream channel.")
ccacUsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigIfIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigSchedType"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigServiceClassName"))
if mibBuilder.loadTexts: ccacUsConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigEntry.setDescription("Each entry defines a set of configurable thresholds and parameters for each monitored scheduling service for an upstream channel. Scheduling service can be specified by a scheduling type or QoS Service class name. A set of thresholds applied by cable admission control in the process of monitoring upstream channel bandwidth. The following classes of upstream policies can be configured: 1. Global An entry with a ccacUsConfigIfIndex of '0' identifies a global policy. 2. Per Interface An entry with a ccacUsConfigIfIndex with an ifType of 'docsCableMaclayer' identifies an interface policy. Interface level thresholds supersedes global level thresholds. 3. Per Upstream Channel An entry with a ccacUsConfigIfIndex with an ifType of 'docsCableUpstream' identifies an upstream channel policy. Upstream level thresholds supersedes both global and interface level thresholds.")
ccacUsConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: ccacUsConfigIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigIfIndex.setDescription("The object identities the interface to which the upstream channel thresholds applies: 1. If '0', then the policy applies to all upstream channels being monitored. 2. If the corresponding ifType is 'docsCableMacLayer', then the policy applies to all upstream channels being carried by the physical interface. 3. If the corresponding ifType is 'docsCableUpstream', then the policy applies to that upstream channel.")
ccacUsConfigSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1, 2), CcacSchedulingType())
if mibBuilder.loadTexts: ccacUsConfigSchedType.setReference('SP-RFIv1.1-I05-000714, Appendix C.2.2.6.2')
if mibBuilder.loadTexts: ccacUsConfigSchedType.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigSchedType.setDescription("This object specifies the scheduling type used in classifying an upstream channel. When the service class name is specified the value of this object is equal to 'undefined'.")
ccacUsConfigServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1, 3), QoSServiceClassNameOrNull())
if mibBuilder.loadTexts: ccacUsConfigServiceClassName.setReference('SP-RFIv1.1-I05-000714, Appendix C.2.2.3.4')
if mibBuilder.loadTexts: ccacUsConfigServiceClassName.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigServiceClassName.setDescription('This object specifies the QoS service class name. Service class name is a null string when scheduling type is specified.')
ccacUsConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigStatus.setDescription('This object facilitates the creation, modification, or deletion of a conceptual row in this table.')
ccacUsConfigMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1, 5), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigMinorThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigMinorThreshold.setDescription('This object specifies the minor threshold related to the utilization of upstream bandwidth.')
ccacUsConfigMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1, 6), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigMajorThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigMajorThreshold.setDescription('This object specifies the major threshold related to the utilization of upstream bandwidth. The major threshold must be greater than minor threshold.')
ccacUsConfigExclusivePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1, 7), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigExclusivePercent.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigExclusivePercent.setDescription("This object specifies the reserved bandwidth exclusively related to the utilization of upstream bandwidth. The exclusive percent must be greater than major threshold. The sum of exclusive percent for all different scheduling services on this upstream channel cannot be greater than '100'.")
ccacUsConfigNonExclusivePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 2, 1, 8), Percent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigNonExclusivePercent.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsConfigNonExclusivePercent.setDescription("This object specifies the percentage of bandwidth, over and above the exclusive share, which can be used by scheduling service after the exclusive bandwidth has been used up. Since the bandwidth is non-exclusive, it has the potential to be shared by other classes depending on the configuration. The sum of exclusive and non-exclusive percent in the same entry cannot be greater than '100'.")
ccacDsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3), )
if mibBuilder.loadTexts: ccacDsConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigTable.setDescription("This table is deprecated by ccacDsConfigRevTable. This table abstracts a sparse matrix of downstream channel utilization thresholds to be monitored by Cable Admission Control. The ifIndex uniquely identifies all downstream channels, or a downstream channel with a set of upstream channel utilization thresholds being associated. The ccacDsConfigTrafficType identifies the downstream traffic type to be monitored. The agent creates/destroys/modifies an entry whenever the local console affects this configuration. The management application may create/destroy/modify an entry. When an entry is created and ccacDsConfigStatus is equal to 'active', CMTS monitors the downstream bandwidth utilization based on the configurable thresholds, minor, major and exclusive percentage, for different traffic type for a downstream.")
ccacDsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigIfIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigTrafficType"))
if mibBuilder.loadTexts: ccacDsConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigEntry.setDescription("Each entry defines a set of configurable thresholds and parameters for each monitoring traffic type for a downstream. A set of thresholds applied by cable admission control in the process of monitoring downstream bandwidth. The following classes of downstream policy can be configured: 1. Global An entry with a ccacDsConfigIfIndex of '0' identifies a global policy. 2. Per Downstream Channel An entry with a ccacDsConfigIfIndex with an ifType of 'docsCableDownstream' identifies a downstream channel policy. Downstream level thresholds supersedes global level thresholds.")
ccacDsConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: ccacDsConfigIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigIfIndex.setDescription("The object identities the interface to which the downstream thresholds applies: 1. If '0', then the policy applies to all downstream channels being monitored. 2. If the corresponding ifType is 'docsCableDownstream', then the policy applies to that downstream.")
ccacDsConfigTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3, 1, 2), CcacDSTrafficMonitoredType())
if mibBuilder.loadTexts: ccacDsConfigTrafficType.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigTrafficType.setDescription('This object specifies the traffic type for which this policy applies.')
ccacDsConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigStatus.setDescription('This object facilitates the creation, modification, or deletion of a conceptual row in this table.')
ccacDsConfigMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3, 1, 4), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigMinorThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigMinorThreshold.setDescription('This object specifies the minor threshold related to the utilization of downstream bandwidth.')
ccacDsConfigMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3, 1, 5), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigMajorThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigMajorThreshold.setDescription('This object specifies the major threshold related to the utilization of downstream bandwidth. The major threshold must be greater than minor threshold.')
ccacDsConfigExclusivePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3, 1, 6), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigExclusivePercent.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigExclusivePercent.setDescription("This object specifies the reserved bandwidth exclusively related to the utilization of downstream bandwidth. The exclusive percent must be greater than major threshold. The sum of exclusive percent for all different traffic type on this downstream cannot be greater than '100'.")
ccacDsConfigNonExclusivePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 3, 1, 7), Percent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigNonExclusivePercent.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsConfigNonExclusivePercent.setDescription("This object specifies the percentage of bandwidth, over and above the exclusive share, which can be used by this traffic type after the exclusive bandwidth has been used up. Since the bandwidth is non-exclusive, it can be used by other traffic type as specified. The sum of exclusive and non-exclusive percent in the same entry cannot be greater than '100'.")
ccacUsConfigRevTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4), )
if mibBuilder.loadTexts: ccacUsConfigRevTable.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevTable.setDescription("This table abstracts a sparse matrix of upstream channel utilization thresholds to be monitored by Cable Admission Control. The ifIndex uniquely identifies all upstream channels, upstream channels associated with an interface or an upstream channel with a set of upstream channel utilization thresholds being associated. The ccacUsConfigRevAppBucketIndex identifies the application bucket number being configured. The agent creates/destroys/modifies an entry whenever the local console affects this configuration. The management application may create/destroy/modify an entry. When an entry is created and ccacUsConfigRevStatus is equal to 'active', CMTS monitors the upstream channel bandwidth utilization based on the configurable thresholds, minor, major and exclusive percentage, for different scheduling type or service class for an upstream channel.")
ccacUsConfigRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevIfIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevAppBucketIndex"))
if mibBuilder.loadTexts: ccacUsConfigRevEntry.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevEntry.setDescription("Each entry defines a set of configurable thresholds and parameters for each monitored scheduling service for an upstream channel. A set of thresholds applied by cable admission control in the process of monitoring upstream channel bandwidth. The following classes of upstream policies can be configured: 1. Global An entry with a ccacUsConfigRevIfIndex of '0' identifies a global policy. 2. Per Interface An entry with a ccacUsConfigRevIfIndex with an ifType of 'docsCableMaclayer' identifies an interface policy. Interface level thresholds supersedes global level thresholds. 3. Per Upstream Channel An entry with a ccacUsConfigRevIfIndex with an ifType of 'docsCableUpstream' identifies an upstream channel policy. Upstream level thresholds supersedes both global and interface level thresholds.")
ccacUsConfigRevIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: ccacUsConfigRevIfIndex.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevIfIndex.setDescription("The object identities the interface to which the upstream channel thresholds applies: 1. If '0', then the policy applies to all upstream channels being monitored. 2. If the corresponding ifType is 'docsCableMacLayer', then the policy applies to all upstream channels being carried by the physical interface. 3. If the corresponding ifType is 'docsCableUpstream', then the policy applies to that upstream channel.")
ccacUsConfigRevAppBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 2), CcacApplicationBucketType())
if mibBuilder.loadTexts: ccacUsConfigRevAppBucketIndex.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevAppBucketIndex.setDescription('This object identifies the application bucket number in defining the parameters for bandwidth management.')
ccacUsConfigRevAppBucketName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigRevAppBucketName.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevAppBucketName.setDescription('This object specifies the application bucket name. Application name can be used to label each application bucket and give descriptive information on the type of application. Application bucket name may be a null string if it is not defined.')
ccacUsConfigRevMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 4), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigRevMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevMinorThreshold.setDescription('This object specifies the minor threshold related to the utilization of upstream bandwidth.')
ccacUsConfigRevMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 5), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigRevMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevMajorThreshold.setDescription('This object specifies the major threshold related to the utilization of upstream bandwidth. The major threshold must be greater than minor threshold.')
ccacUsConfigRevExclusivePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 6), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigRevExclusivePercent.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevExclusivePercent.setDescription("This object specifies the reserved bandwidth exclusively related to the utilization of upstream bandwidth. The exclusive percent must be greater than major threshold. The sum of exclusive percent for all different scheduling services on this upstream channel cannot be greater than '100'.")
ccacUsConfigRevNonExclusivePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 7), Percent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigRevNonExclusivePercent.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevNonExclusivePercent.setDescription("This object specifies the percentage of bandwidth, over and above the exclusive share, which can be used by scheduling service after the exclusive bandwidth has been used up. Since the bandwidth is non-exclusive, it has the potential to be shared by other classes depending on the configuration. The sum of exclusive and non-exclusive percent in the same entry cannot be greater than '100'.")
ccacUsConfigRevStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigRevStorageType.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevStorageType.setDescription("The storage type for this conceptual row. If the value of this object is 'volatile', then this entry only exists in RAM and the this row would be lost on system reload. If the value of this object is 'nonVolatile' then this entry has been saved to NVRAM and will persist across system reload.")
ccacUsConfigRevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacUsConfigRevStatus.setStatus('current')
if mibBuilder.loadTexts: ccacUsConfigRevStatus.setDescription('This object facilitates the creation, modification, or deletion of a conceptual row in this table. For row creation, ccacUsConfigRevMinorThreshold, ccacUsConfigRevMajorThreshold, ccacUsConfigRevExclusivePercen and ccacUsConfigRevNonExclusivePercent are mandatory.')
ccacDsConfigRevTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5), )
if mibBuilder.loadTexts: ccacDsConfigRevTable.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevTable.setDescription("This table abstracts a sparse matrix of downstream channel utilization thresholds to be monitored by Cable Admission Control. The ifIndex uniquely identifies all downstream channels, or a downstream channel with a set of upstream channel utilization thresholds being associated. The ccacDsConfigRevAppBucketIndex identifies the application bucket number being configured. The agent creates/destroys/modifies an entry whenever the local console affects this configuration. The management application may create/destroy/modify an entry. When an entry is created and ccacDsConfigRevStatus is equal to 'active', CMTS monitors the downstream bandwidth utilization based on the configurable thresholds, minor, major and exclusive percentage, for different traffic type for a downstream.")
ccacDsConfigRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevIfIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevAppBucketIndex"))
if mibBuilder.loadTexts: ccacDsConfigRevEntry.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevEntry.setDescription("Each entry defines a set of configurable thresholds and parameters for each monitoring traffic type for a downstream. A set of thresholds applied by cable admission control in the process of monitoring downstream bandwidth. The following classes of downstream policy can be configured: 1. Global An entry with a ccacDsConfigRevIfIndex of '0' identifies a global policy. 2. Per Downstream Channel An entry with a ccacDsConfigRevIfIndex with an ifType of 'docsCableDownstream' identifies a downstream channel policy. Downstream level thresholds supersedes global level thresholds.")
ccacDsConfigRevIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: ccacDsConfigRevIfIndex.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevIfIndex.setDescription("The object identities the interface to which the downstream thresholds applies: 1. If '0', then the policy applies to all downstream channels being monitored. 2. If the corresponding ifType is 'docsCableDownstream', then the policy applies to that downstream.")
ccacDsConfigRevAppBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 2), CcacApplicationBucketType())
if mibBuilder.loadTexts: ccacDsConfigRevAppBucketIndex.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevAppBucketIndex.setDescription('This object identifies the application bucket number in defining the parameters for policy applies.')
ccacDsConfigRevAppBucketName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigRevAppBucketName.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevAppBucketName.setDescription('This object identifies the application bucket name corresponding to the application bucket number. Application bucket name can be used to label each application bucket and give descriptive information on the type of application. Application bucket name may be a null string if it is not defined.')
ccacDsConfigRevMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 4), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigRevMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevMinorThreshold.setDescription('This object specifies the minor threshold related to the utilization of downstream bandwidth.')
ccacDsConfigRevMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 5), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigRevMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevMajorThreshold.setDescription('This object specifies the major threshold related to the utilization of downstream bandwidth. The major threshold must be greater than minor threshold.')
ccacDsConfigRevExclusivePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 6), NonZeroPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigRevExclusivePercent.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevExclusivePercent.setDescription("This object specifies the reserved bandwidth exclusively related to the utilization of downstream bandwidth. The exclusive percent must be greater than major threshold. The sum of exclusive percent for all different traffic type on this downstream cannot be greater than '100'.")
ccacDsConfigRevNonExclusivePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 7), Percent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigRevNonExclusivePercent.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevNonExclusivePercent.setDescription("This object specifies the percentage of bandwidth, over and above the exclusive share, which can be used by this traffic type after the exclusive bandwidth has been used up. Since the bandwidth is non-exclusive, it can be used by other traffic type as specified. The sum of exclusive and non-exclusive percent in the same entry cannot be greater than '100'.")
ccacDsConfigRevStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigRevStorageType.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevStorageType.setDescription("The storage type for this conceptual row. If the value of this object is 'volatile', then this entry only exists in RAM and the this row would be lost on system reload. If the value of this object is 'nonVolatile' then this entry has been saved to NVRAM and will persist across system reload.")
ccacDsConfigRevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 2, 5, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccacDsConfigRevStatus.setStatus('current')
if mibBuilder.loadTexts: ccacDsConfigRevStatus.setDescription('This object facilitates the creation, modification, or deletion of a conceptual row in this table. For row creation, ccacUsConfigRevMinorThreshold, ccacUsConfigRevMajorThreshold, ccacUsConfigRevExclusivePercent and ccacUsConfigRevNonExclusivePercent are mandatory.')
ccacSysRscTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 1), )
if mibBuilder.loadTexts: ccacSysRscTable.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscTable.setDescription('This table contains statistical data relating to system resource utilization for all configured physical entities and resource types.')
ccacSysRscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscType"))
if mibBuilder.loadTexts: ccacSysRscEntry.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscEntry.setDescription('Each entry contains objects that support monitoring of statistical data based on system resources utilization for a physical entity.')
ccacSysRscType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 1, 1, 1), CcacSysRscMonitoredType())
if mibBuilder.loadTexts: ccacSysRscType.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscType.setDescription('This object indicates the type of system resource being monitored.')
ccacSysRscUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 1, 1, 2), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRscUtilization.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscUtilization.setDescription('This object indicates the utilization of the system resource on the physical entity.')
ccacSysRscMinorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRscMinorCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscMinorCrosses.setDescription('This object indicates the number of times system resource utilization on the physical entity has crossed minor threshold specified by ccacSysRscConfigMinorThreshold.')
ccacSysRscMajorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRscMajorCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscMajorCrosses.setDescription('This object indicates the number of times system resource utilization on the physical entity has crossed major threshold specified by ccacSysRscConfigMajorThreshold.')
ccacSysRscCriticalCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRscCriticalCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscCriticalCrosses.setDescription('This object indicates the number of times system resource utilization on the physical entity has crossed critical threshold specified by ccacSysRscConfigCritThreshold.')
ccacSysRscCountersDscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRscCountersDscTime.setStatus('current')
if mibBuilder.loadTexts: ccacSysRscCountersDscTime.setDescription('The value of sysUpTime on the most recent occasion at which all counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains the creation time of the corresponding counters.')
ccacUsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2), )
if mibBuilder.loadTexts: ccacUsTable.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsTable.setDescription('This table is deprecated by ccacUsRevTable. This table contains statistical data relating to an upstream channel bandwidth utilization for every monitored upstream channel. There will be an entry in this table for each scheduling service per upstream channel being monitored.')
ccacUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsSchedType"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsServiceClassName"))
if mibBuilder.loadTexts: ccacUsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsEntry.setDescription('Each entry contains statistical data relating to an upstream channel bandwidth utilization, for a scheduling service and upstream channel.')
ccacUsSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2, 1, 1), CcacSchedulingType())
if mibBuilder.loadTexts: ccacUsSchedType.setReference('SP-RFIv1.1-I05-000714, Appendix C.2.2.6.2')
if mibBuilder.loadTexts: ccacUsSchedType.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsSchedType.setDescription("This object indicates the scheduling type of an upstream channel. When the service class name is referred the value of this object is equal to 'undefined'.")
ccacUsServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2, 1, 2), QoSServiceClassNameOrNull())
if mibBuilder.loadTexts: ccacUsServiceClassName.setReference('SP-RFIv1.1-I05-000714, Appendix C.2.2.3.4')
if mibBuilder.loadTexts: ccacUsServiceClassName.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsServiceClassName.setDescription('This object indicates the QoS service class name. Service class name is a null string when scheduling type is referred.')
ccacUsUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2, 1, 3), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsUtilization.setDescription('This object indicates the upstream channel bandwidth utilized by the scheduling service.')
ccacUsMinorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsMinorCrosses.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsMinorCrosses.setDescription('The value of the statistic during the last sampling period. This object indicates the number of times upstream channel bandwidth utilization has crossed minor threshold specified by ccacUsConfigMinorThreshold.')
ccacUsMajorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsMajorCrosses.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsMajorCrosses.setDescription('This object indicates the number of times upstream channel bandwidth utilization has crossed major threshold specified by ccacUsConfigMajorThreshold.')
ccacUsExclusiveCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsExclusiveCrosses.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsExclusiveCrosses.setDescription('This object indicates the number of times upstream channel bandwidth utilization has crossed exclusive percentage specified by ccacUsConfigExclusivePercent.')
ccacUsCountersDscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsCountersDscTime.setStatus('deprecated')
if mibBuilder.loadTexts: ccacUsCountersDscTime.setDescription('The value of sysUpTime on the most recent occasion at which all counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains the creation time of the corresponding counters.')
ccacDsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 3), )
if mibBuilder.loadTexts: ccacDsTable.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsTable.setDescription('This table is deprecated by ccacDsRevTable. This table contains the statistical data relating to downstream bandwidth utilization for every monitored downstream. There will be an entry in this table for each traffic type per downstream being monitored.')
ccacDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsTrafficType"))
if mibBuilder.loadTexts: ccacDsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsEntry.setDescription('Each entry contains statistical data on the bandwidth utilization, per traffic type and downstream.')
ccacDsTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 3, 1, 1), CcacDSTrafficMonitoredType())
if mibBuilder.loadTexts: ccacDsTrafficType.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsTrafficType.setDescription('This object indicates the traffic type used in classifying a downstream.')
ccacDsUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 3, 1, 2), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsUtilization.setDescription('This object indicates the downstream bandwidth utilization for the traffic type on the downstream.')
ccacDsMinorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsMinorCrosses.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsMinorCrosses.setDescription('This object indicates the number of times the minor downstream bandwidth threshold, ccacDsConfigMinorThreshold, is crossed.')
ccacDsMajorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsMajorCrosses.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsMajorCrosses.setDescription('This object indicates the number of times the major downstream bandwidth threshold, ccacDsConfigMajorThreshold, is crossed.')
ccacDsExclusiveCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsExclusiveCrosses.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsExclusiveCrosses.setDescription('This object indicates the number of times the exclusive percentage, ccacDsConfigExclusivePercent, is crossed.')
ccacDsCountersDscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsCountersDscTime.setStatus('deprecated')
if mibBuilder.loadTexts: ccacDsCountersDscTime.setDescription('The value of sysUpTime on the most recent occasion at which all counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains the creation time of the corresponding counters.')
ccacUsRevTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 4), )
if mibBuilder.loadTexts: ccacUsRevTable.setStatus('current')
if mibBuilder.loadTexts: ccacUsRevTable.setDescription('This table contains statistical data related to upstream channel bandwidth utilization for every monitored upstream channel and application bucket. For every upstream channel that is being monitored, if an application bucket has been configured in ccacUsConfigRevTable for that upstream channel, there will be one entry in this table.')
ccacUsRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsRevAppBucketIndex"))
if mibBuilder.loadTexts: ccacUsRevEntry.setStatus('current')
if mibBuilder.loadTexts: ccacUsRevEntry.setDescription('Each entry contains statistical data on the bandwidth utilization of a upstream channel with a specific application bucket number.')
ccacUsRevAppBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 4, 1, 1), CcacApplicationBucketType())
if mibBuilder.loadTexts: ccacUsRevAppBucketIndex.setStatus('current')
if mibBuilder.loadTexts: ccacUsRevAppBucketIndex.setDescription('This object identifies the application bucket number that is being monitored.')
ccacUsRevUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 4, 1, 2), TenthPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsRevUtilization.setStatus('current')
if mibBuilder.loadTexts: ccacUsRevUtilization.setDescription('This object indicates the upstream channel bandwidth utilized by the scheduling service.')
ccacUsRevMinorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsRevMinorCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacUsRevMinorCrosses.setDescription('This object indicates the number of times upstream channel bandwidth utilization has crossed minor threshold specified by ccacUsConfigRevMinorThreshold.')
ccacUsRevMajorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsRevMajorCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacUsRevMajorCrosses.setDescription('This object indicates the number of times upstream channel bandwidth utilization has crossed major threshold specified by ccacUsConfigRevMajorThreshold.')
ccacUsRevExclusiveCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsRevExclusiveCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacUsRevExclusiveCrosses.setDescription('This object indicates the number of times upstream channel bandwidth utilization has crossed exclusive percentage specified by ccacUsConfigRevExclusivePercent.')
ccacUsRevCountersDscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 4, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacUsRevCountersDscTime.setStatus('current')
if mibBuilder.loadTexts: ccacUsRevCountersDscTime.setDescription('The value of sysUpTime on the most recent occasion at which all counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains the creation time of the corresponding counters.')
ccacDsRevTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 5), )
if mibBuilder.loadTexts: ccacDsRevTable.setStatus('current')
if mibBuilder.loadTexts: ccacDsRevTable.setDescription('This table contains the statistical data related to downstream bandwidth utilization for every monitored downstream channel and application bucket. For every downstream channel that is being monitored, if an application bucket has been configured in ccacDsConfigRevTable for that downstream channel, there will be one entry in this table.')
ccacDsRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsRevAppBucketIndex"))
if mibBuilder.loadTexts: ccacDsRevEntry.setStatus('current')
if mibBuilder.loadTexts: ccacDsRevEntry.setDescription('Each entry contains statistical data on the bandwidth utilization of a downstream channel with a specific application bucket number.')
ccacDsRevAppBucketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 5, 1, 1), CcacApplicationBucketType())
if mibBuilder.loadTexts: ccacDsRevAppBucketIndex.setStatus('current')
if mibBuilder.loadTexts: ccacDsRevAppBucketIndex.setDescription('This object identifies the application bucket number that is being monitored.')
ccacDsRevUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 5, 1, 2), TenthPercent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsRevUtilization.setStatus('current')
if mibBuilder.loadTexts: ccacDsRevUtilization.setDescription('This object indicates the downstream bandwidth utilization.')
ccacDsRevMinorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsRevMinorCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacDsRevMinorCrosses.setDescription('This object indicates the number of times the minor downstream bandwidth threshold, ccacDsConfigRevMinorThreshold, is crossed.')
ccacDsRevMajorCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsRevMajorCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacDsRevMajorCrosses.setDescription('This object indicates the number of times the major downstream bandwidth threshold, ccacDsConfigRevMajorThreshold, is crossed.')
ccacDsRevExclusiveCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsRevExclusiveCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacDsRevExclusiveCrosses.setDescription('This object indicates the number of times the exclusive percentage, ccacDsConfigRevExclusivePercent, is crossed.')
ccacDsRevCountersDscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 3, 5, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacDsRevCountersDscTime.setStatus('current')
if mibBuilder.loadTexts: ccacDsRevCountersDscTime.setDescription('The value of sysUpTime on the most recent occasion at which all counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains the creation time of the corresponding counters.')
ccacEventHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 1), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacEventHistTableSize.setStatus('current')
if mibBuilder.loadTexts: ccacEventHistTableSize.setDescription("This object specifies the number of entries that the ccacEventHistTable can contain. When the capacity of the ccacEventHistTable has reached the value specified by this object, then the agent deletes the oldest entity in order to accommodate the new entry. A value of '0' prevents any history from being retained.")
ccacEventHistLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacEventHistLastIndex.setStatus('current')
if mibBuilder.loadTexts: ccacEventHistLastIndex.setDescription('This object specifies the value of the ccacEventHistIndex object corresponding to the last entry added to the table by the agent. If the management client uses the notifications defined by this module, then it can poll this object to determine whether it has missed a notification sent by the agent.')
ccacEventHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 3), )
if mibBuilder.loadTexts: ccacEventHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ccacEventHistoryTable.setDescription('This table contains a history of the monitored event in which the configured threshold is crossed. The number of most recent notifications will be saved based on the table size.')
ccacEventHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventHistoryIndex"))
if mibBuilder.loadTexts: ccacEventHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ccacEventHistoryEntry.setDescription('The data corresponding to a monitored event in which the configured threshold is crossed.')
ccacEventHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ccacEventHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: ccacEventHistoryIndex.setDescription("An integer value uniquely identifying the entry in the table. The value of this object starts at '1' and monotonically increases for each condition transition monitored by the agent. If the value of this object is '4294967295', the agent will reset it to '1' upon monitoring the next condition transition.")
ccacEventThreshObjectInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 3, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacEventThreshObjectInstance.setStatus('current')
if mibBuilder.loadTexts: ccacEventThreshObjectInstance.setDescription('The object specifies the instance identifier of a threshold object which was crossed.')
ccacEventTypeChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 3, 1, 3), CcacMonitoredEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacEventTypeChecked.setStatus('current')
if mibBuilder.loadTexts: ccacEventTypeChecked.setDescription('The object specifies the monitored event type when the threshold was crossed.')
ccacEventResourceUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacEventResourceUtilization.setStatus('current')
if mibBuilder.loadTexts: ccacEventResourceUtilization.setDescription('This object specifies the resource utilization when the threshold was crossed.')
ccacEventThreshCrosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacEventThreshCrosses.setStatus('current')
if mibBuilder.loadTexts: ccacEventThreshCrosses.setDescription('This object specifies the number of times that the threshold was crossed.')
ccacEventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 450, 1, 4, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacEventTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ccacEventTimeStamp.setDescription('This object specifies the value of the sysUpTime object at the time the notification was generated.')
ccacNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 450, 0, 1)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventThreshObjectInstance"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventTypeChecked"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventResourceUtilization"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventThreshCrosses"))
if mibBuilder.loadTexts: ccacNotification.setStatus('current')
if mibBuilder.loadTexts: ccacNotification.setDescription('This notification is sent when the monitoring threshold value is crossed.')
ciscoCableAdmCtrlCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 1))
ciscoCableAdmCtrlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 2))
ciscoCableAdmCtrlCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 1, 1)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ciscoCableAdmCtrlConfigGroup"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ciscoCableAdmCtrlStatGroup"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ciscoCableAdmCtrlEventHistGroup"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ciscoCableAdmCtrlNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableAdmCtrlCompliance = ciscoCableAdmCtrlCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCableAdmCtrlCompliance.setDescription('The compliance statement for entities which implement the Cisco Cable Admission Control MIB. This statement is deprecated by ciscoCableAdmCtrlComplianceRev.')
ciscoCableAdmCtrlComplianceRev = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 1, 2)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ciscoCableAdmCtrlConfigGroupRev1"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ciscoCableAdmCtrlStatGroupRev1"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ciscoCableAdmCtrlEventHistGroup"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ciscoCableAdmCtrlNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableAdmCtrlComplianceRev = ciscoCableAdmCtrlComplianceRev.setStatus('current')
if mibBuilder.loadTexts: ciscoCableAdmCtrlComplianceRev.setDescription('The compliance statement for entities which implement the Cisco Cable Admission Control MIB. This compliance module deprecates ciscoCableAdmCtrlCompliance.')
ciscoCableAdmCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 2, 1)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacNotifyEnable"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventMonitoring"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigStatus"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigMinorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigMajorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigCritThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigStatus"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigMinorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigMajorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigExclusivePercent"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigNonExclusivePercent"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigStatus"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigMinorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigMajorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigExclusivePercent"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigNonExclusivePercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableAdmCtrlConfigGroup = ciscoCableAdmCtrlConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCableAdmCtrlConfigGroup.setDescription('A collection of objects providing the event monitoring and notification configuration. This group is deprecated by ciscoCableAdmCtrlConfigGroupRev1.')
ciscoCableAdmCtrlStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 2, 2)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscUtilization"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscMinorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscMajorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscCountersDscTime"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscCriticalCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsUtilization"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsMinorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsMajorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsExclusiveCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsCountersDscTime"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsUtilization"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsMinorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsMajorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsExclusiveCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsCountersDscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableAdmCtrlStatGroup = ciscoCableAdmCtrlStatGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCableAdmCtrlStatGroup.setDescription('A collection of objects providing admission control data based on resources. This group is deprecated by ciscoCableAdmCtrlStatGroupRev1.')
ciscoCableAdmCtrlEventHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 2, 3)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventHistTableSize"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventHistLastIndex"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventThreshObjectInstance"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventTypeChecked"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventResourceUtilization"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventThreshCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableAdmCtrlEventHistGroup = ciscoCableAdmCtrlEventHistGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCableAdmCtrlEventHistGroup.setDescription('A collection of objects defining event logging.')
ciscoCableAdmCtrlNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 2, 4)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableAdmCtrlNotifGroup = ciscoCableAdmCtrlNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCableAdmCtrlNotifGroup.setDescription('Notification implemented in CMTS for managing and monitoring CMTS system resources, upstream channel bandwidth, downstream bandwidth.')
ciscoCableAdmCtrlConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 2, 5)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacNotifyEnable"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacEventMonitoring"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigStatus"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigMinorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigMajorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscConfigCritThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevAppBucketName"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevStatus"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevMinorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevMajorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevExclusivePercent"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevNonExclusivePercent"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsConfigRevStorageType"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevStatus"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevMinorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevMajorThreshold"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevExclusivePercent"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevNonExclusivePercent"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevAppBucketName"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsConfigRevStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableAdmCtrlConfigGroupRev1 = ciscoCableAdmCtrlConfigGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCableAdmCtrlConfigGroupRev1.setDescription('A collection of objects providing the event monitoring and notification configuration. This group deprecates ciscoCableAdmCtrlConfigGroup.')
ciscoCableAdmCtrlStatGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 450, 2, 2, 6)).setObjects(("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscUtilization"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscMinorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscMajorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscCountersDscTime"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacSysRscCriticalCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsRevUtilization"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsRevMinorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsRevMajorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsRevExclusiveCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacUsRevCountersDscTime"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsRevUtilization"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsRevMinorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsRevMajorCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsRevExclusiveCrosses"), ("CISCO-CABLE-ADMISSION-CTRL-MIB", "ccacDsRevCountersDscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCableAdmCtrlStatGroupRev1 = ciscoCableAdmCtrlStatGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCableAdmCtrlStatGroupRev1.setDescription('A collection of objects providing admission control data based on resources. This group deprecates ciscoCableAdmCtrlStatGroup.')
mibBuilder.exportSymbols("CISCO-CABLE-ADMISSION-CTRL-MIB", ccacDsRevExclusiveCrosses=ccacDsRevExclusiveCrosses, ccacConfigObjects=ccacConfigObjects, ccacEventThreshCrosses=ccacEventThreshCrosses, ccacDsConfigMajorThreshold=ccacDsConfigMajorThreshold, ccacSysRscConfigStatus=ccacSysRscConfigStatus, ccacUsConfigRevExclusivePercent=ccacUsConfigRevExclusivePercent, ccacUsEntry=ccacUsEntry, ccacUsCountersDscTime=ccacUsCountersDscTime, ccacNotifyEnable=ccacNotifyEnable, ccacDsConfigRevStorageType=ccacDsConfigRevStorageType, ciscoCableAdmCtrlConfigGroupRev1=ciscoCableAdmCtrlConfigGroupRev1, ccacDsCountersDscTime=ccacDsCountersDscTime, ccacUsRevMajorCrosses=ccacUsRevMajorCrosses, ccacUsUtilization=ccacUsUtilization, ciscoCableAdmCtrlMIBObjects=ciscoCableAdmCtrlMIBObjects, ciscoCableAdmCtrlEventHistGroup=ciscoCableAdmCtrlEventHistGroup, ccacEventMonitoring=ccacEventMonitoring, ccacUsRevTable=ccacUsRevTable, ccacDsRevMajorCrosses=ccacDsRevMajorCrosses, ccacEventHistoryTable=ccacEventHistoryTable, ccacDsConfigMinorThreshold=ccacDsConfigMinorThreshold, ccacUsConfigRevTable=ccacUsConfigRevTable, ccacDsConfigRevIfIndex=ccacDsConfigRevIfIndex, ccacUsServiceClassName=ccacUsServiceClassName, ccacEventThreshObjectInstance=ccacEventThreshObjectInstance, ccacUsConfigRevAppBucketIndex=ccacUsConfigRevAppBucketIndex, ccacSysRscCountersDscTime=ccacSysRscCountersDscTime, ccacUsMajorCrosses=ccacUsMajorCrosses, ciscoCableAdmCtrlMIB=ciscoCableAdmCtrlMIB, ccacDsConfigExclusivePercent=ccacDsConfigExclusivePercent, ciscoCableAdmCtrlMIBGroups=ciscoCableAdmCtrlMIBGroups, ccacUsConfigRevStorageType=ccacUsConfigRevStorageType, ccacDsRevTable=ccacDsRevTable, ccacUsRevCountersDscTime=ccacUsRevCountersDscTime, ccacEventHistoryIndex=ccacEventHistoryIndex, ccacDsConfigRevStatus=ccacDsConfigRevStatus, ccacDsRevCountersDscTime=ccacDsRevCountersDscTime, ccacSysRscUtilization=ccacSysRscUtilization, ccacDsConfigEntry=ccacDsConfigEntry, ccacDsConfigStatus=ccacDsConfigStatus, ccacSysRscTable=ccacSysRscTable, ccacSysRscConfigCritThreshold=ccacSysRscConfigCritThreshold, ciscoCableAdmCtrlStatGroupRev1=ciscoCableAdmCtrlStatGroupRev1, ccacDsConfigIfIndex=ccacDsConfigIfIndex, ccacSysRscType=ccacSysRscType, ccacUsConfigSchedType=ccacUsConfigSchedType, ccacDsRevUtilization=ccacDsRevUtilization, ccacDsConfigRevEntry=ccacDsConfigRevEntry, ciscoCableAdmCtrlConfigGroup=ciscoCableAdmCtrlConfigGroup, ccacEventHistLastIndex=ccacEventHistLastIndex, ccacSysRscCriticalCrosses=ccacSysRscCriticalCrosses, ccacDsMajorCrosses=ccacDsMajorCrosses, ccacEventTypeChecked=ccacEventTypeChecked, ccacUsTable=ccacUsTable, ccacDsConfigRevTable=ccacDsConfigRevTable, ciscoCableAdmCtrlStatGroup=ciscoCableAdmCtrlStatGroup, ccacDsConfigNonExclusivePercent=ccacDsConfigNonExclusivePercent, ccacUsExclusiveCrosses=ccacUsExclusiveCrosses, ccacDsConfigRevMajorThreshold=ccacDsConfigRevMajorThreshold, ccacDsConfigRevNonExclusivePercent=ccacDsConfigRevNonExclusivePercent, ccacDsConfigTable=ccacDsConfigTable, ccacUsConfigRevEntry=ccacUsConfigRevEntry, ccacDsConfigRevExclusivePercent=ccacDsConfigRevExclusivePercent, ccacUsSchedType=ccacUsSchedType, ccacSysRscConfigEntry=ccacSysRscConfigEntry, ccacDsTrafficType=ccacDsTrafficType, ccacSysRscConfigTable=ccacSysRscConfigTable, ciscoCableAdmCtrlNotifGroup=ciscoCableAdmCtrlNotifGroup, Percent=Percent, ciscoCableAdmCtrlMIBConform=ciscoCableAdmCtrlMIBConform, ccacUsRevExclusiveCrosses=ccacUsRevExclusiveCrosses, ccacUsConfigEntry=ccacUsConfigEntry, ccacNotification=ccacNotification, ccacDsExclusiveCrosses=ccacDsExclusiveCrosses, ccacUsConfigTable=ccacUsConfigTable, ccacObjects=ccacObjects, ccacDsConfigRevAppBucketIndex=ccacDsConfigRevAppBucketIndex, ccacUsConfigRevMinorThreshold=ccacUsConfigRevMinorThreshold, ccacUsConfigMajorThreshold=ccacUsConfigMajorThreshold, ccacUsRevAppBucketIndex=ccacUsRevAppBucketIndex, CcacDSTrafficMonitoredType=CcacDSTrafficMonitoredType, ccacDsRevEntry=ccacDsRevEntry, CcacSysRscMonitoredType=CcacSysRscMonitoredType, ccacUsConfigNonExclusivePercent=ccacUsConfigNonExclusivePercent, ccacDsConfigRevAppBucketName=ccacDsConfigRevAppBucketName, ccacEventTimeStamp=ccacEventTimeStamp, ccacUsConfigRevNonExclusivePercent=ccacUsConfigRevNonExclusivePercent, ciscoCableAdmCtrlCompliance=ciscoCableAdmCtrlCompliance, ccacStatObjects=ccacStatObjects, NonZeroPercent=NonZeroPercent, ccacUsRevMinorCrosses=ccacUsRevMinorCrosses, ccacDsUtilization=ccacDsUtilization, ccacUsConfigStatus=ccacUsConfigStatus, ccacEventHistoryEntry=ccacEventHistoryEntry, QoSServiceClassNameOrNull=QoSServiceClassNameOrNull, ccacSysRscConfigResourceType=ccacSysRscConfigResourceType, ccacDsConfigTrafficType=ccacDsConfigTrafficType, ccacUsConfigRevMajorThreshold=ccacUsConfigRevMajorThreshold, ccacEventHistory=ccacEventHistory, ccacEventHistTableSize=ccacEventHistTableSize, ciscoCableAdmCtrlMIBNotifs=ciscoCableAdmCtrlMIBNotifs, ccacDsRevAppBucketIndex=ccacDsRevAppBucketIndex, PYSNMP_MODULE_ID=ciscoCableAdmCtrlMIB, ccacUsConfigRevIfIndex=ccacUsConfigRevIfIndex, CcacMonitoredEvent=CcacMonitoredEvent, ccacDsConfigRevMinorThreshold=ccacDsConfigRevMinorThreshold, ccacDsEntry=ccacDsEntry, ccacDsRevMinorCrosses=ccacDsRevMinorCrosses, ccacUsConfigExclusivePercent=ccacUsConfigExclusivePercent, ccacSysRscMinorCrosses=ccacSysRscMinorCrosses, ccacUsConfigMinorThreshold=ccacUsConfigMinorThreshold, ccacUsConfigServiceClassName=ccacUsConfigServiceClassName, ciscoCableAdmCtrlCompliances=ciscoCableAdmCtrlCompliances, ccacDsTable=ccacDsTable, ccacDsMinorCrosses=ccacDsMinorCrosses, ccacSysRscEntry=ccacSysRscEntry, ccacSysRscMajorCrosses=ccacSysRscMajorCrosses, ccacUsRevUtilization=ccacUsRevUtilization, ciscoCableAdmCtrlComplianceRev=ciscoCableAdmCtrlComplianceRev, ccacUsConfigRevStatus=ccacUsConfigRevStatus, ccacSysRscConfigMajorThreshold=ccacSysRscConfigMajorThreshold, ccacUsConfigIfIndex=ccacUsConfigIfIndex, ccacUsRevEntry=ccacUsRevEntry, ccacEventResourceUtilization=ccacEventResourceUtilization, TenthPercent=TenthPercent, CcacSchedulingType=CcacSchedulingType, ccacSysRscConfigMinorThreshold=ccacSysRscConfigMinorThreshold, ccacUsMinorCrosses=ccacUsMinorCrosses, CcacApplicationBucketType=CcacApplicationBucketType, ccacUsConfigRevAppBucketName=ccacUsConfigRevAppBucketName)
