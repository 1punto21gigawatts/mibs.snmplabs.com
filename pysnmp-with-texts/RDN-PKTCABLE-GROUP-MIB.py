#
# PySNMP MIB module RDN-PKTCABLE-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-PKTCABLE-GROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:54:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Unsigned32, Counter64, ObjectIdentity, Bits, NotificationType, iso, Counter32, MibIdentifier, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Counter64", "ObjectIdentity", "Bits", "NotificationType", "iso", "Counter32", "MibIdentifier", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity")
TextualConvention, MacAddress, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "TruthValue")
rdnPacketCableGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 7))
rdnPacketCableGroup.setRevisions(('2008-10-06 00:00', '2008-08-08 00:00', '2007-10-22 00:00', '2006-05-24 00:00', '2006-05-24 00:00', '2006-02-15 00:00', '2006-01-24 00:00', '2003-11-05 00:00', '2003-10-24 00:00', '2003-05-12 00:00', '2002-09-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rdnPacketCableGroup.setRevisionsDescriptions(('Added Differentiated Services Code Point(DSCP) to Motorola PacketCable. Added rdnPktDQoSDscp, rdnPktMMDscp, rdnPktEMDscp and rdnPktESCccDscp.', "Fixed this MIB MODULE'S description and its revison history. Added Copyright Statement into MIB modules's description.", 'Added rdnPktDQoSGateResReassign to rdnPktDQoSStatsEntry.', 'Added RKS trap support to Motorola PacketCable. Added rdnPktEMRKSFailureTrapEnable.', 'Corrected the comments for rdnPktDQoSEmergencyPreemptTrap mib object.', 'Added rdnPktDQoSEmergencyPreemptTrap mib object.', 'Add Preemption mib object to Motorola PacketCable.', 'Updated the CONTACT-INFO.', 'Changed MAX-ACCESS of the following objects from read-only to not-accessible: rdnGateId, rdnGateDirection, rdnPktDQosCopsHandle. Removed object rdnGateID and replaced with rdnGateId. Value of rdnGateDirection downstream(2) added.', 'Imported NOTIFICATION-TYPE from SNMPv2-SMI.', 'Initial Version. ',))
if mibBuilder.loadTexts: rdnPacketCableGroup.setLastUpdated('200810060000Z')
if mibBuilder.loadTexts: rdnPacketCableGroup.setOrganization('Motorola')
if mibBuilder.loadTexts: rdnPacketCableGroup.setContactInfo('Motorola Customer Service 101 Tournament Drive Horsham, PA 19044 US Tel: +1 888 944 4357 Int Tel: +1 215 323 0044 Fax: +1 215 323 1502 Email: CPSSupport@Motorola.com')
if mibBuilder.loadTexts: rdnPacketCableGroup.setDescription('MIB module for Motorola PacketCable. Copyright (C) 2002, 2008 by Motorola, Inc. All rights reserved.')
class BcidDataArray(TextualConvention, OctetString):
    description = 'An array holds the Billing Correlation ID.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 24)

rdnPktDQoSConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 1))
rdnPktDQoSCOPSStatus = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSCOPSStatus.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCOPSStatus.setDescription('This object is used to enable/disable PacketCable DQoS feature. When this object is set to FALSE(2), DQoS will be disabled.')
rdnPktDQoSCMTSIp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSCMTSIp.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCMTSIp.setDescription('An IP address can be configured for the CMTS. If that IP address is configured, BSR will only accept a COPS connection destined to that IP address. Example, loop back, HFC or network IP address.')
rdnPktDQoSPEPID = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSPEPID.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSPEPID.setDescription('An ASCII string to identify the CMTS. Default - Motorola CMTS.')
rdnPktDQoSClientAccpTimer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSClientAccpTimer.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSClientAccpTimer.setDescription('This object specifies the Time that limits the CMTS to wait for the Client Accept from the CMS/GC in milliseconds.')
rdnPktDQoST0Timer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoST0Timer.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoST0Timer.setDescription('This object specifies the period of time in seconds that a Gate may be allocated without being authorized.')
rdnPktDQoST1Timer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoST1Timer.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoST1Timer.setDescription('This object specifies the time in seconds that may elapse between the authorization and commit. This provisioned value is only used if the T1 value is not provided by the GC/CMS.')
rdnPktDQoST3Timer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoST3Timer.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoST3Timer.setDescription('Place holder')
rdnPktDQoST6Timer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoST6Timer.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoST6Timer.setDescription('Place holder.')
rdnPktDQoSCopsTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSCopsTrapEnable.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsTrapEnable.setDescription('Indicates whether the PacketCable COPS connection trap should be generated. If its value is set to enabled(1), then traps are generated. If the value is disabled(2), then traps are not generated. By default, this object has the value disabled(2). ')
rdnPktDQoSResReqTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSResReqTrapEnable.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSResReqTrapEnable.setDescription('Indicates whether the PacketCable Resource Request trap should be generated. If its value is set to enabled(1), then traps are generated. If the value is disabled(2), then traps are not generated. By default, this object has the value disabled(2). ')
rdnPktESTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktESTrapEnable.setStatus('current')
if mibBuilder.loadTexts: rdnPktESTrapEnable.setDescription('Indicates whether the PacketCable ES status trap should be generated. If its value is set to enabled(1), then traps are generated. If the value is disabled(2), then traps are not generated. By default, this object has the value disabled(2). ')
rdnPktESEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktESEnable.setStatus('current')
if mibBuilder.loadTexts: rdnPktESEnable.setDescription('Indicates whether the PacketCable ES feature is enabled. If its value is set to enabled(1), then Packet Cable ES functionality will operate based on the information received in the Gate-Set message from the CMS. If the value is disabled(2), then the Packet Cable ES functionality will not function according to the information received in the Gate-Set message from the CMS. By default, this object has the value enabled(1). ')
rdnPktDQoSEmergencyTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSEmergencyTrapEnable.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSEmergencyTrapEnable.setDescription('Indicates whether the PacketCable Emergency Call trap should be generated. If its value is set to enabled(1), then traps are generated. If the value is disabled(2), then traps are not generated. By default, this object has the value disabled(2). ')
rdnPktDQoSEmergencyPreemption = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("most-recent", 1), ("oldest", 2), ("random", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemption.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemption.setDescription("Indicates whether the PacketCable Emergency Preemption is disabled or set to a specific option of dropping a normal dqos voice call. If its value is set to most-recent(1), the most-recent normal dqos voice call of that Service Class is dropped when the bandwidth of the Emergency Service Class has maxed out. The Preemption can only occur if that Service Class has 'allowShared' turned on. Otherwise, Preemption can not occur and thus, the high priority call can not be completed. If the value is oldest(2), the oldest normal dqos voice call is dropped. If the value is random, random normal dqos voice call is dropped. By default, this object has the value disabled(0). ")
rdnPktEMRKSFailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktEMRKSFailureTrapEnable.setStatus('current')
if mibBuilder.loadTexts: rdnPktEMRKSFailureTrapEnable.setDescription('Indicates whether the PacketCable EM RKS Failure trap should be generated. If its value is set to enabled(1), then the trap is generated. If the value is disabled(2), then the trap is not generated. By default, this object has the value disabled(2). ')
rdnPktDQoSDscp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSDscp.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSDscp.setDescription('The contents of the Differentiated Services Code Point(DSCP) for DQoS. DSCP is intended to supersede the existing definitions of the IPv4 TOS octet and the IPv6 Traffic Class octet. By setting this value, DSCP will apply to all the DQoS traffic IP header. ')
rdnPktMMDscp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktMMDscp.setStatus('current')
if mibBuilder.loadTexts: rdnPktMMDscp.setDescription('The contents of the Differentiated Services Code Point(DSCP) for Multimedia. DSCP is intended to supersede the exsiting definitions of the IPv4 TOS octet and the IPv6 Traffic Class octet. By setting this value, DSCP will apply to all the Multimedia traffic IP header. ')
rdnPktEMDscp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktEMDscp.setStatus('current')
if mibBuilder.loadTexts: rdnPktEMDscp.setDescription('The contents of the Differentiated Services Code Point(DSCP) for Event Message and Electronic Surveillance Call Data Connection(CDC). DSCP is intended to supersede the existing definitions of the IPv4 TOS octet and the IPv6 Traffic Class octet. By setting this value, DSCP will apply to all the Event Message traffic IP header and Electronic Surveillance Call Data Connection traffic IP header. ')
rdnPktESCccDscp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktESCccDscp.setStatus('current')
if mibBuilder.loadTexts: rdnPktESCccDscp.setDescription('The contents of the Differentiated Services Code Point(DSCP) for Electronic Surveillance Call Content Connection(CCC). DSCP is intended to supersede the existing definitions of the IPv4 TOS octet and the IPv6 Traffic Class octet. By setting this value, DSCP will apply to all the Electronic Surveillance Call Content Connection traffic IP header. ')
rdnGateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 7, 2), )
if mibBuilder.loadTexts: rdnGateStatsTable.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsTable.setDescription('This table provide PacketCable statistics of DQoS gate.')
rdnGateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1), ).setIndexNames((0, "RDN-PKTCABLE-GROUP-MIB", "rdnGateId"))
if mibBuilder.loadTexts: rdnGateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsEntry.setDescription('Each entry provides a set of statistics objects for DQoS gate.')
rdnGateId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rdnGateId.setStatus('current')
if mibBuilder.loadTexts: rdnGateId.setDescription('This attribute is the identifier for allocated gate.')
rdnGateStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7, 8, 9))).clone(namedValues=NamedValues(("idle", 0), ("start", 1), ("allocated", 2), ("authorized", 3), ("reserved", 4), ("committed", 7), ("committedRecovery", 8), ("numOfStates", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsState.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsState.setDescription('This attribute describes current state Idle(0), Start(1), Allocated(2), Authorized(3), Reserved(4), RemoteCommitted(5), LocalCommitted(6), Committed(7).')
rdnGateStatsSubscriberIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsSubscriberIP.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsSubscriberIP.setDescription('This attribute describes the IP address of MTA requesting the gate. Issue:(IPV4 ONLY)')
rdnGateStatsRKSPrimaryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsRKSPrimaryAddr.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsRKSPrimaryAddr.setDescription("This attribute describes Primary Record Keeping Server's IP address, the record keeper to whom event records are sent.")
rdnGateStatsRKSPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsRKSPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsRKSPrimaryPort.setDescription('This attribute describes Primary Record Keeping Server Port, the port number for event records to be sent.')
rdnGateStatsRKSSecondaryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsRKSSecondaryAddr.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsRKSSecondaryAddr.setDescription("This attribute describes Secondary Record Keeping Server's IP address, the record keeper to whom event records are sent.")
rdnGateStatsRKSSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsRKSSecondaryPort.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsRKSSecondaryPort.setDescription('This attribute describes Secondary Record Keeping Server Port, the port number for event records to be sent.')
rdnGateStatsEventFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsEventFlag.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsEventFlag.setDescription('0x01 - Batch Processing. If set the CMTS MUST accumulate event records as part of a batch file and send to the Record Keeping Server at periodic intervals. If clear the CMTS MUST send the event records to the Record Keeping Serverin real-time.')
rdnGateStatsBillingCorrelationID = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 9), BcidDataArray()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsBillingCorrelationID.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsBillingCorrelationID.setDescription('This attribute is the identifier assigned by the CMS for all records related to the session.')
rdnGateStatsDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsDurationTime.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsDurationTime.setDescription('This attribute describes the time that gate was commited.')
rdnGateStatsSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsSlotNum.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsSlotNum.setDescription('This attribute describes the CMTS slot number.')
rdnGateStatsUpSfid = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsUpSfid.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsUpSfid.setDescription('This attribute describes the upstream SFID.')
rdnGateStatsDnSfid = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsDnSfid.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsDnSfid.setDescription('This attribute describes the downstream SFID.')
rdnGateStatsResourceID = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsResourceID.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsResourceID.setDescription("This attribute is an RSVP object that's used as an identifier for future resource changes.")
rdnGateStatsESCDCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCDCAddr.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsESCDCAddr.setDescription("This attribute describes the DF's IP address, the DF to whom duplicated event messages are sent.")
rdnGateStatsESCDCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCDCPort.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsESCDCPort.setDescription("This attribute describes the DF's Port for CDC, the port number for duplicated event messages to be sent.")
rdnGateStatsESFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESFlag.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsESFlag.setDescription('If bit 0 is set - DUP-Event. If set the CMTS MUST send a duplicate copy of all event messages relate to this gate to the DF-IP-Address for CDC (rdnGateStatsESCDCAddr). If bit 1 is set the CMTS MUST send a duplicate copy of all packets matching the classifier(s) fo this gate to the DF-IP-Address-for-CCC (rdnGateStatsESCCCAddr).')
rdnGateStatsESCCCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCCCAddr.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsESCCCAddr.setDescription("This attribute describes the DF's IP address for CCC, the DF to whom duplicated classifier matched packets are sent.")
rdnGateStatsESCCCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCCCPort.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsESCCCPort.setDescription("This attribute describes the DF's Port for CCC, the port number for duplicated classifier matched packets to be sent.")
rdnGateStatsESCCCId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCCCId.setStatus('current')
if mibBuilder.loadTexts: rdnGateStatsESCCCId.setDescription('An Identifier used to identify the intercept order to the Law Enforcement Agency.')
rdnGateSpecTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 7, 3), )
if mibBuilder.loadTexts: rdnGateSpecTable.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecTable.setDescription('This table contains DQoS Gate Specification statistics of upstream and downstream.')
rdnGateSpecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1), ).setIndexNames((0, "RDN-PKTCABLE-GROUP-MIB", "rdnGateId"), (0, "RDN-PKTCABLE-GROUP-MIB", "rdnGateDirection"))
if mibBuilder.loadTexts: rdnGateSpecEntry.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecEntry.setDescription('Each entry contain DQoS Gate Specification statistics of the upstream or downstream.')
rdnGateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2))))
if mibBuilder.loadTexts: rdnGateDirection.setStatus('current')
if mibBuilder.loadTexts: rdnGateDirection.setDescription('This attribute describes the direction of the gate specification.')
rdnGateSpecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecProtocol.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecProtocol.setDescription('This attribute describes the Protocol to match in the IP header.')
rdnGateSpecSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecSourceIP.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecSourceIP.setDescription('This attribute describes the source IP V4 address, zero for no match.')
rdnGateSpecSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecSourcePort.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecSourcePort.setDescription('This attribute describes source port. Zero for no match.')
rdnGateSpecDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecDestIP.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecDestIP.setDescription('This attribute describes the destination IP V4 address, zero for no match.')
rdnGateSpecDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecDestPort.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecDestPort.setDescription('This attribute describes destination port. Zero for no match.')
rdnGateSpecServiceFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecServiceFlowID.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecServiceFlowID.setDescription('This attribute describes the service flow ID that maps to the Gate. This value could be zero if a Gate is viewed prior to a SFID being assigned to the Gate.')
rdnGateSpecFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoCommit", 1), ("commitNotAllowed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecFlags.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecFlags.setDescription('autoCommit(1), resources Commit immediately upon reservation. commitNotAllowed(2), CMTS ignores any COMMIT messages for the gate.')
rdnGateSpecSessionClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 1, 2))).clone(namedValues=NamedValues(("unspecified", 255), ("normalPriority", 1), ("highPriority", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecSessionClass.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecSessionClass.setDescription('This attribute identifies the proper admission control policy or parameters to be applied for the gate. unspecified (255), normalPriority (1), highPriority (2).')
rdnGateSpecDiffServCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecDiffServCode.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecDiffServCode.setDescription('This attribute describes Differentiated Services Code Point.')
rdnGateSpecT1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecT1Timer.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecT1Timer.setDescription('This attribute describes Gate Transition timer in seconds, the time limit between authorization and a commit.')
rdnGateSpecTokenBuckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecTokenBuckRate.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecTokenBuckRate.setDescription('Token Bucket Rate, (r) 32 bit IEEE floating point number used in Bandwidth Calculations. Specifies the token bucket that the traffic conforms to. Part of TSpec.')
rdnGateSpecBuckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecBuckSize.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecBuckSize.setDescription('Token Bucket Size (b) 32 bit IEEE floating point number used in Bandwidth Calculations. Specifies the token bucket that the traffic conforms ot. Part of TSpec.')
rdnGateSpecPeakDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecPeakDataRate.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecPeakDataRate.setDescription('Peak Data Rate (p) 32 bit IEEE floating point number used in Bandwidth Calculations. Specifies the Peak Data Rate at which the source sends traffic. Part of TSpec.')
rdnGateSpecMinPoliceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecMinPoliceUnit.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecMinPoliceUnit.setDescription('Minimum Policed Unit (m) 32 bit integer. The smallest packet size that the source generates, if asmaller packet is sent, it will count as a packet of size m for the purpose fo policing. Part of TSpec.')
rdnGateSpecMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecMaxPacketSize.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecMaxPacketSize.setDescription('Maximum Packet Size (M) 32 bit integer. Maximum packet size (including IP and higher layer headers) that are generated by the source. Part of TSpec.')
rdnGateSpecReserveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecReserveRate.setStatus('current')
if mibBuilder.loadTexts: rdnGateSpecReserveRate.setDescription('Rate (R) 32 bit IEEE floating point integer. The amount of bandwidth allocated to the flow. Must be greater than or equal to (r) from the TSpec. Part of RSpec.')
rdnGateSlackTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSlackTerm.setStatus('current')
if mibBuilder.loadTexts: rdnGateSlackTerm.setDescription('Slack Term (S) 32 bit integer. Delay Bound part of RSpec.')
rdnPktCMSIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 7, 4), )
if mibBuilder.loadTexts: rdnPktCMSIpConfigTable.setStatus('current')
if mibBuilder.loadTexts: rdnPktCMSIpConfigTable.setDescription('This table contain the IP address list of CMS/GC configuration.')
rdnPktCMSIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 7, 4, 1), ).setIndexNames((0, "RDN-PKTCABLE-GROUP-MIB", "rdnPktCMSIpAddressIndex"))
if mibBuilder.loadTexts: rdnPktCMSIpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: rdnPktCMSIpConfigEntry.setDescription('List of IP addresses for CMS/GC.')
rdnPktCMSIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rdnPktCMSIpAddressIndex.setStatus('current')
if mibBuilder.loadTexts: rdnPktCMSIpAddressIndex.setDescription('Index to access rdnPktCMSIpAddress.')
rdnPktCMSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktCMSIpAddress.setStatus('current')
if mibBuilder.loadTexts: rdnPktCMSIpAddress.setDescription('Specifies an IP address of a CMS/GC: If not configured, CMTS accepts any CMS IP Address. NOTE: it is necessary to accept the TCP connection, and then determine if the IP address can be used. If not the connection is closed.')
rdnPktDQoSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 7, 6), )
if mibBuilder.loadTexts: rdnPktDQoSStatsTable.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSStatsTable.setDescription('This table contains DQoS Gate statistics. Note: Index is equal to COPS Handle plus one.')
rdnPktDQoSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1), ).setIndexNames((0, "RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCopsHandle"))
if mibBuilder.loadTexts: rdnPktDQoSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSStatsEntry.setDescription('Each entry contains DQoS Gate statistic data. Note: Index is equal to COPS Handle plus one.')
rdnPktDQoSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSIpAddress.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSIpAddress.setDescription('This entry contains IP address of cms - used for debugging stats')
rdnPktDQoSCopsHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: rdnPktDQoSCopsHandle.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsHandle.setDescription('This entry contains cms handle id.')
rdnPktDQoSCopsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("closed", 0), ("opening", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsStatus.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsStatus.setDescription('This entry contains cm state.')
rdnPktDQoSCopsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsConnected.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsConnected.setDescription('This entry contains statistics of CMS connections.')
rdnPktDQoSCopsTerminated = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsTerminated.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsTerminated.setDescription('This entry contains statistics of the statistics of the CMS-CMTS session close.')
rdnPktDQoSCopsKASent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsKASent.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsKASent.setDescription('This entry contains the statistics of KA sending to the CMS.')
rdnPktDQoSCopsKARcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsKARcvd.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsKARcvd.setDescription('This entry contains the statistics of KA received .')
rdnPktDQoSKATimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSKATimeout.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSKATimeout.setDescription('This entry contains the statistics of the expiration of the KA timer.')
rdnPktDQoST0Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoST0Timeout.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoST0Timeout.setDescription('This entry contains the statistics of the expiration of T0 timer.')
rdnPktDQoST1Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoST1Timeout.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoST1Timeout.setDescription('This entry contains the statistics of the expiration of T1 timer.')
rdnPktDQoSGateAllocCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateAllocCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateAllocCount.setDescription('This entry contains the statistics of DGM_CCM_GATE_ALLOC_CMD message received.')
rdnPktDQoSGateAllocAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateAllocAckCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateAllocAckCount.setDescription('This entry contains the statistics of DGM_CCM_GATE_ALLOC_ACK_CMD message sent.')
rdnPktDQoSGateAllocErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateAllocErrCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateAllocErrCount.setDescription('This entry contains the statistics of gate allocation error message sent.')
rdnPktDQoSGateSetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateSetCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateSetCount.setDescription('This entry contains the statistics of DGM_CCM_GATE_SET_CMD message received.')
rdnPktDQoSGateSetAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateSetAckCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateSetAckCount.setDescription('This entry contains the statistics of DGM_CCM_GATE_SET_ACK_CMD message sent.')
rdnPktDQoSGateSetErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateSetErrCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateSetErrCount.setDescription('This entry contains the statistics of gate set error message sent.')
rdnPktDQoSGateDeleteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteCount.setDescription('This entry contains the statistics of DGM_CCM_GATE_DELETE_CMD message received.')
rdnPktDQoSGateDeleteAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteAckCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteAckCount.setDescription('This entry contains the statistics of DGM_CCM_GATE_DELETE_ACK_CMD message sent.')
rdnPktDQoSGateDeleteErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteErrCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteErrCount.setDescription('This entry contains the statistics of gate delete error message sent.')
rdnPktDQoSGateInfoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateInfoCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateInfoCount.setDescription('This entry contains the statistics of DGM_CCM_GATE_INFO_CMD message received.')
rdnPktDQoSGateInfoAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateInfoAckCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateInfoAckCount.setDescription('This entry contains the statistics of DGM_CCM_GATE_INFO_ACK_CMD message sent.')
rdnPktDQoSGateInfoErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateInfoErrCount.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateInfoErrCount.setDescription('This entry contains the statistics of gate info error message sent.')
rdnPktDQoSGateOpenRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenRcvd.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateOpenRcvd.setDescription('This entry contains the statistics of DGM_GSM_GATE_OPEN_MSG_TYPE message received.')
rdnPktDQoSGateOpenAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenAckSent.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateOpenAckSent.setDescription('This entry contains the statistics of DGM_GSM_GATE_OPEN_ACK_MSG message sent.')
rdnPktDQoSGateOpenErrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenErrSent.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateOpenErrSent.setDescription('This entry contains the statistics of gate open error message message sent.')
rdnPktDQoSGateCloseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseRcvd.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateCloseRcvd.setDescription('This entry contains the statistics of DGM_GSM_GATE_CLOSE_MSG received.')
rdnPktDQoSGateCloseAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseAckSent.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateCloseAckSent.setDescription('This entry contains the statistics of DGM_GSM_GATE_CLOSE_ACK_MSG sent.')
rdnPktDQoSGateCloseErrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseErrSent.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateCloseErrSent.setDescription('This entry contains the statistics of Gate Close Error message sent.')
rdnPktDQoSGateOpenSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenSent.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateOpenSent.setDescription('This entry contains the statistics of DGM_GSM_GATE_OPEN_MSG sent.')
rdnPktDQoSGateOpenAckRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenAckRcvd.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateOpenAckRcvd.setDescription('This entry contains the statistics of DGM_GSM_GATE_OPEN_ACK_MSG received.')
rdnPktDQoSGateOpenErrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenErrRcvd.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateOpenErrRcvd.setDescription('This entry contains the statistics of Gate Open Error message received.')
rdnPktDQoSGateCloseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseSent.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateCloseSent.setDescription('This entry contains the statistics of DGM_GSM_GATE_CLOSE_MSG sent.')
rdnPktDQoSGateCloseAckRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseAckRcvd.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateCloseAckRcvd.setDescription('This entry contains the statistics of DGM_GSM_GATE_CLOSE_ACK_MSG received.')
rdnPktDQoSGateCloseErrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseErrRcvd.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateCloseErrRcvd.setDescription('This entry contains the statistics of Gate Close Error message received.')
rdnPktDQoSGateOpenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenRetries.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateOpenRetries.setDescription('This entry contains the statistics of DGM_GSM_GATE_OPEN_MSG_TYPE sent when T5 expires.')
rdnPktDQoSGateCloseRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseRetries.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateCloseRetries.setDescription('This entry contains the statistics of DGM_GSM_GATE_CLOSE_MSG sent when T5 expires. ')
rdnPktDQoSGateOpenExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenExhausted.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateOpenExhausted.setDescription('This entry contains the statistics of gate message retry exhausted with DGM_GSM_GATE_OPEN_MSG_TYPE.')
rdnPktDQoSGateCloseExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseExhausted.setStatus('obsolete')
if mibBuilder.loadTexts: rdnPktDQoSGateCloseExhausted.setDescription('This entry contains the statistics of gate message retry exhausted with DGM_GSM_GATE_CLOSE_MSG. ')
rdnPktDQoSCliOpenSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCliOpenSent.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCliOpenSent.setDescription('This entry contains the statistic for Client Opens sent.')
rdnPktDQoSCliAcceptReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCliAcceptReceived.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCliAcceptReceived.setDescription('This entry contains the statistic for Client Accepts received.')
rdnPktDQoSRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSRequestSent.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSRequestSent.setDescription('This entry contains the statistic for Requests sent.')
rdnPktDQoSCliCloseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCliCloseReceived.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCliCloseReceived.setDescription('This entry contains the statistic for Client Close received.')
rdnPktDQoSCliCloseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCliCloseSent.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCliCloseSent.setDescription('This entry contains the statistic for Client Close sent.')
rdnPktDQoSSsqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSSsqReceived.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSSsqReceived.setDescription('This entry contains the statistic for SSQs received.')
rdnPktDQoSSscSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSSscSent.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSSscSent.setDescription('This entry contains the statistic for SSCs sent.')
rdnPktDQoSDrqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSDrqSent.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSDrqSent.setDescription('This entry contains the statistic for DRQs sent.')
rdnPktDQoST7Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoST7Timeout.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoST7Timeout.setDescription('This entry contains the statistics of the expiration of T7 timer.')
rdnPktDQoST8Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoST8Timeout.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoST8Timeout.setDescription('This entry contains the statistics of the expiration of T8 timer.')
rdnPktDQoSGateCmDel = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCmDel.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateCmDel.setDescription('This entry contains the statistic for Gate CM deleted.')
rdnPktDQoSGateCmDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCmDereg.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateCmDereg.setDescription('This entry contains the statistic Gate CM de-registered.')
rdnPktDQoSGateAdminDel = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateAdminDel.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateAdminDel.setDescription('This entry contains the statistic for Gate Administrator Delete.')
rdnPktDQoSGateResReassign = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateResReassign.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateResReassign.setDescription('This entry contains the statistic for Gate Reservation Reassignment.')
rdnPktDQoSNotificationObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 7))
rdnPktDQoSCopsReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("copsConnectionEstablished", 1), ("cantEstablishCopsConnection", 2), ("unauthorizedCms", 3), ("copsConnectionClosed", 4), ("copsConnectionDisconnected", 5), ("keepAliveFailure", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCopsReason.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsReason.setDescription("This entry contains the rdnPktDQoSCopsTrap reason code 1 = The CMTS COPS connection to the CMS/GC is established. specified in the rdnPktDQoSCopsCmsIpAddr field. 2 = Can't establish the COPS connection with the IP address specified in the rdnPktDQoSCopsCmsIpAddr field. 3 = The CMS attempting to make the COPS connection is not authorized to make the connection. The IP address is specified in the rdnPktDQoSCopsCmsIpAddr field. 4 = The CMTS COPS connection to the CMS/GC is closed. The CMTS has received a ClientClose from the CMS/GC. The IP address of the CMS/GC is specified in the rdnPktDQoSCopsCmsIpAddr field. 5 = The CMTS COPS connection to the CMS/GC is disconnected. The connection was administratively closed via a command from the console of the CMTS. The IP address of the CMS/GC is specified in the rdnPktDQoSCopsCmsIpAddr field. 6 = The CMTS has not received a Keep-Alive message from the CMS/GC within the specified KA timer interval. The IP address of the CMS/GC is specified in the rdnPktDQoSCopsCmsIpAddr field.")
rdnPktDQoSCopsCmsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsIpAddr.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsIpAddr.setDescription('This entry contains the IP address of the CMS/GC associated with the reason code for the rdnPktDQoSCopsTrap.')
rdnPktDQoSCopsCmsPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsPortNum.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsPortNum.setDescription('This entry contains the TCP port number that the CMS/GC is connected on. This is additional information associated with the reason code for the rdnPktDQoSCopsTrap.')
rdnPktDQoSCopsCmsHandleId = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsHandleId.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsHandleId.setDescription('This entry contains the COPS handle ID associated with the connection to the CMS/GC. This is additional information associated with the reason code for the rdnPktDQoSCopsTrap.')
rdnPktDQoSResReqReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsaReqResourceGreaterThanAuth", 1), ("dsaResReqWithoutGateId", 2), ("dsaResReqWithInvalidGateId", 3), ("dscReqResourceGreaterThanAuth", 4), ("dscResReqWithoutGateId", 5), ("dscResReqWithInvalidGateId", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSResReqReason.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSResReqReason.setDescription("This entry contains the rdnPktDQoSResReqTrap reason code 1 = The MTA DSA-REQ has requested more resource than it has been authorized. The MTA is identified by the CM's Mac address as specified in the rdnPktDQoSResReqCmMacAddr field. 2 = The MTA DSA-REQ is requesting resource with an unknown Gate ID. 3 = The MTA DSA-REA is requesting resource without including a Gate ID. 4 = The MTA DSC-REQ has requested more resource than it has been authorized. The MTA is identified by the CM's Mac address as specified in the rdnPktDQoSResReqCmMacAddr field. 5 = The MTA DSC-REQ is requesting resource with an unknown Gate ID. 6 = The MTA DSC-REA is requesting resource without including a Gate ID.")
rdnPktDQoSCmMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 6), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCmMacAddr.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCmMacAddr.setDescription("This entry contains the CM's Mac address for the MTA it is associated with. The reason code and this Mac address provide the detailed information for the rdnPktDQoSResReqTrap.")
rdnPktDQoSEmergencyReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("emergencyCallBeingRejected", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSEmergencyReason.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSEmergencyReason.setDescription('This entry contains the rdnPktDQoSEmergencyTrap reason code 1 = Emergency Call is rejected due to insufficient bandwidth.')
rdnPktDQoSClassName = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSClassName.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSClassName.setDescription('An ASCII string to identify the Class Name')
rdnPktDQoSGateId = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSGateId.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSGateId.setDescription('This attribute is the identifier for allocated gate. Refer to rdnGateId.')
rdnPktDQoSEmergencyPreemptReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emergencyPreemptedMostRecentCall", 1), ("emergencyPreemptedOldestCall", 2), ("emergencyPreemptedRandomCall", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemptReason.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemptReason.setDescription('This entry contains the rdnPktDQoSEmergencyPreempTrap reason code 1 = Emergency call preempted the most recent DQoS call. 2 = Emergency call preempted the oldest DQoS call. 3 = Emergency call preempted a random DQoS call.')
rdnPktDQoSNotificationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 8))
rdnPktDQoSNotificationTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0))
rdnPktDQoSCopsTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0, 1)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCopsReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCopsCmsIpAddr"))
if mibBuilder.loadTexts: rdnPktDQoSCopsTrap.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSCopsTrap.setDescription('A PacketCable COPS connection status change to the CMS/GC has occurred. The reason code and CMS/GC IP address provide the detailed information regarding this trap.')
rdnPktDQoSResReqTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0, 2)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSResReqReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCmMacAddr"))
if mibBuilder.loadTexts: rdnPktDQoSResReqTrap.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSResReqTrap.setDescription('A PacketCable MTA resource request problem has occurred (e.g., a problem while processing the DSA-REQ or DSC-REQ was detected). The reason code, the Gate ID, and the CM Mac address, provide detailed information regarding this trap.')
rdnPktDQoSEmergencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0, 3)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSEmergencyReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCmMacAddr"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSClassName"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSGateId"))
if mibBuilder.loadTexts: rdnPktDQoSEmergencyTrap.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSEmergencyTrap.setDescription('A PacketCable Emergency call is rejected. The reason code, and the CM Mac address, the gate direction, the Channel ID, and the Gate Id provide detailed information regarding this trap.')
rdnPktDQoSEmergencyPreemptTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0, 4)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSEmergencyPreemptReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCmMacAddr"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSClassName"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSGateId"))
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemptTrap.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemptTrap.setDescription('A PacketCable Emergency call is preempted successfully. The reason code, and the CM Mac address, the Service Class Name and the Gate Id provide detailed information regarding this trap.')
rdnPktESNotificationObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 9))
rdnPktESReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cdcFailure", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktESReason.setStatus('current')
if mibBuilder.loadTexts: rdnPktESReason.setDescription('This entry contains the rdnPktESTrap reason code 1 = Their was no reply from the DF when attempting to send Duplicated Event messages.')
rdnPktESDFIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 9, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktESDFIpAddr.setStatus('current')
if mibBuilder.loadTexts: rdnPktESDFIpAddr.setDescription('This entry contains the IP address of the DF associated with the reason code for the rdnPktESTrap.')
rdnPktESDFPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 9, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktESDFPortNum.setStatus('current')
if mibBuilder.loadTexts: rdnPktESDFPortNum.setDescription('This entry contains the port number that the DF is connected on. This is additional information associated with the reason code for the rdnPktESTrap.')
rdnPktESNotificationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 10))
rdnPktESNotificationTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 10, 0))
rdnPktESTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 10, 0, 1)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktESReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktESDFIpAddr"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktESDFPortNum"))
if mibBuilder.loadTexts: rdnPktESTrap.setStatus('current')
if mibBuilder.loadTexts: rdnPktESTrap.setDescription('A PacketCable ES failure has occurred. The reason code, DF IP address and port provide the detailed information regarding this trap.')
rdnPktRKSNotificationObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 11))
rdnPktRKSReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("retriesExhausted", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSReason.setStatus('current')
if mibBuilder.loadTexts: rdnPktRKSReason.setDescription('This entry contains the rdnPktRKSTrap reason code 1 = RKS communications failure. Primary and secondary RKS retries exhausted.')
rdnPktRKSTransID = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSTransID.setStatus('current')
if mibBuilder.loadTexts: rdnPktRKSTransID.setDescription('This entry contains the event message Transaction ID. This is additional information associated with the reason code for the rdnPktRKSTrap.')
rdnPktRKSIPPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSIPPrimary.setStatus('current')
if mibBuilder.loadTexts: rdnPktRKSIPPrimary.setDescription('This entry contains the IP address of the primary RKS. This is additional information associated with the reason code for the rdnPktRKSTrap.')
rdnPktRKSPortPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSPortPrimary.setStatus('current')
if mibBuilder.loadTexts: rdnPktRKSPortPrimary.setDescription('This entry contains the TCP port number of the primary RKS. This is additional information associated with the reason code for the rdnPktRKSTrap.')
rdnPktRKSIPSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSIPSecondary.setStatus('current')
if mibBuilder.loadTexts: rdnPktRKSIPSecondary.setDescription('This entry contains the IP address of the secondary RKS. This is additional information associated with the reason code for the rdnPktRKSTrap.')
rdnPktRKSPortSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSPortSecondary.setStatus('current')
if mibBuilder.loadTexts: rdnPktRKSPortSecondary.setDescription('This entry contains the TCP port number of the secondary RKS. This is additional information associated with the reason code for the rdnPktRKSTrap.')
rdnPktRKSVersionID = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("packetCable10", 1), ("packetCable11", 2), ("packetCableMultiMedia", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSVersionID.setStatus('current')
if mibBuilder.loadTexts: rdnPktRKSVersionID.setDescription('This entry contains the version ID of the RKS associated with the rdnPktRKSTrap. 1 = Packet Cable 1.0 2 = Packet Cable 1.1 3 = Packet Cable MultiMedia')
rdnPktRKSNotificationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 12))
rdnPktRKSNotificationTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 12, 0))
rdnPktDQoSRKSTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 12, 0, 1)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSTransID"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSIPPrimary"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSPortPrimary"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSIPSecondary"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSPortSecondary"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSVersionID"))
if mibBuilder.loadTexts: rdnPktDQoSRKSTrap.setStatus('current')
if mibBuilder.loadTexts: rdnPktDQoSRKSTrap.setDescription('There has been a communication failure to both the primary and secondary Record Keeping Servers. The reason code, the ID of the failed Transaction, primary and secondary RKS IP address and port number, and the RKS version type is provided.')
mibBuilder.exportSymbols("RDN-PKTCABLE-GROUP-MIB", rdnPktRKSPortPrimary=rdnPktRKSPortPrimary, rdnPktDQoSGateCloseRetries=rdnPktDQoSGateCloseRetries, rdnPktDQoSRequestSent=rdnPktDQoSRequestSent, rdnPktDQoSGateSetCount=rdnPktDQoSGateSetCount, rdnPktRKSTransID=rdnPktRKSTransID, rdnPktDQoST0Timer=rdnPktDQoST0Timer, rdnGateSpecDestIP=rdnGateSpecDestIP, rdnPktDQoSCopsHandle=rdnPktDQoSCopsHandle, rdnPktRKSNotificationObject=rdnPktRKSNotificationObject, rdnPktDQoSDscp=rdnPktDQoSDscp, rdnPktDQoSCliCloseReceived=rdnPktDQoSCliCloseReceived, rdnPktEMDscp=rdnPktEMDscp, rdnGateStatsESCCCAddr=rdnGateStatsESCCCAddr, rdnPktDQoSEmergencyPreemption=rdnPktDQoSEmergencyPreemption, rdnGateSpecReserveRate=rdnGateSpecReserveRate, rdnGateStatsRKSPrimaryAddr=rdnGateStatsRKSPrimaryAddr, rdnPktDQoSGateCloseAckRcvd=rdnPktDQoSGateCloseAckRcvd, rdnPktDQoSEmergencyPreemptTrap=rdnPktDQoSEmergencyPreemptTrap, rdnGateStatsSlotNum=rdnGateStatsSlotNum, rdnPktDQoSRKSTrap=rdnPktDQoSRKSTrap, rdnGateSpecTable=rdnGateSpecTable, rdnGateSpecSourceIP=rdnGateSpecSourceIP, rdnPktDQoSCliAcceptReceived=rdnPktDQoSCliAcceptReceived, rdnPktDQoST1Timer=rdnPktDQoST1Timer, rdnPktDQoSCopsTrap=rdnPktDQoSCopsTrap, rdnPktDQoSEmergencyTrap=rdnPktDQoSEmergencyTrap, rdnGateSpecSourcePort=rdnGateSpecSourcePort, rdnGateSpecMinPoliceUnit=rdnGateSpecMinPoliceUnit, rdnPktDQoSCliOpenSent=rdnPktDQoSCliOpenSent, rdnPktDQoSGateOpenRetries=rdnPktDQoSGateOpenRetries, rdnPktDQoSGateOpenRcvd=rdnPktDQoSGateOpenRcvd, rdnGateStatsRKSPrimaryPort=rdnGateStatsRKSPrimaryPort, rdnPktDQoST6Timer=rdnPktDQoST6Timer, rdnPktRKSNotificationTraps=rdnPktRKSNotificationTraps, rdnPktDQoSCopsTerminated=rdnPktDQoSCopsTerminated, rdnGateId=rdnGateId, rdnPktDQoSGateAllocErrCount=rdnPktDQoSGateAllocErrCount, rdnGateStatsResourceID=rdnGateStatsResourceID, rdnPktDQoSGateDeleteAckCount=rdnPktDQoSGateDeleteAckCount, rdnPktDQoSGateAllocCount=rdnPktDQoSGateAllocCount, rdnGateStatsESCDCPort=rdnGateStatsESCDCPort, rdnGateStatsEntry=rdnGateStatsEntry, rdnGateStatsState=rdnGateStatsState, rdnPktDQoSCopsReason=rdnPktDQoSCopsReason, rdnGateSpecBuckSize=rdnGateSpecBuckSize, rdnPktESTrap=rdnPktESTrap, rdnPktDQoSGateId=rdnPktDQoSGateId, rdnGateStatsEventFlag=rdnGateStatsEventFlag, rdnPktDQoSClassName=rdnPktDQoSClassName, rdnPktDQoST8Timeout=rdnPktDQoST8Timeout, rdnPktDQoSEmergencyPreemptReason=rdnPktDQoSEmergencyPreemptReason, rdnPktDQoSResReqReason=rdnPktDQoSResReqReason, rdnPktDQoSGateSetErrCount=rdnPktDQoSGateSetErrCount, rdnPktDQoSCopsKARcvd=rdnPktDQoSCopsKARcvd, rdnPktRKSPortSecondary=rdnPktRKSPortSecondary, rdnPktESEnable=rdnPktESEnable, rdnPktCMSIpAddressIndex=rdnPktCMSIpAddressIndex, rdnPktESCccDscp=rdnPktESCccDscp, rdnPktDQoSEmergencyTrapEnable=rdnPktDQoSEmergencyTrapEnable, rdnPktDQoSStatsEntry=rdnPktDQoSStatsEntry, rdnPktDQoSGateOpenSent=rdnPktDQoSGateOpenSent, rdnPktDQoSSsqReceived=rdnPktDQoSSsqReceived, rdnPktDQoSCOPSStatus=rdnPktDQoSCOPSStatus, rdnGateSpecProtocol=rdnGateSpecProtocol, rdnPktDQoSCopsCmsPortNum=rdnPktDQoSCopsCmsPortNum, rdnGateStatsDnSfid=rdnGateStatsDnSfid, rdnGateStatsESCDCAddr=rdnGateStatsESCDCAddr, rdnPktDQoSCopsConnected=rdnPktDQoSCopsConnected, rdnPacketCableGroup=rdnPacketCableGroup, rdnGateStatsSubscriberIP=rdnGateStatsSubscriberIP, rdnGateStatsESFlag=rdnGateStatsESFlag, rdnPktDQoSCopsTrapEnable=rdnPktDQoSCopsTrapEnable, rdnPktESDFIpAddr=rdnPktESDFIpAddr, rdnPktCMSIpAddress=rdnPktCMSIpAddress, rdnPktRKSIPSecondary=rdnPktRKSIPSecondary, rdnGateStatsUpSfid=rdnGateStatsUpSfid, rdnPktDQoSGateCloseRcvd=rdnPktDQoSGateCloseRcvd, rdnPktDQoSClientAccpTimer=rdnPktDQoSClientAccpTimer, rdnPktDQoSResReqTrapEnable=rdnPktDQoSResReqTrapEnable, rdnGateStatsESCCCPort=rdnGateStatsESCCCPort, rdnPktESDFPortNum=rdnPktESDFPortNum, rdnPktDQoSSscSent=rdnPktDQoSSscSent, rdnPktRKSVersionID=rdnPktRKSVersionID, rdnGateDirection=rdnGateDirection, rdnGateSpecDestPort=rdnGateSpecDestPort, rdnPktDQoSGateCloseSent=rdnPktDQoSGateCloseSent, rdnPktDQoSGateAllocAckCount=rdnPktDQoSGateAllocAckCount, rdnPktDQoST7Timeout=rdnPktDQoST7Timeout, rdnPktDQoSCopsCmsHandleId=rdnPktDQoSCopsCmsHandleId, rdnPktDQoSConfigGroup=rdnPktDQoSConfigGroup, rdnPktDQoSGateOpenExhausted=rdnPktDQoSGateOpenExhausted, rdnPktDQoSNotificationTraps=rdnPktDQoSNotificationTraps, rdnPktDQoSKATimeout=rdnPktDQoSKATimeout, rdnPktRKSIPPrimary=rdnPktRKSIPPrimary, rdnGateSpecEntry=rdnGateSpecEntry, rdnPktDQoSGateInfoCount=rdnPktDQoSGateInfoCount, rdnPktCMSIpConfigTable=rdnPktCMSIpConfigTable, rdnGateStatsESCCCId=rdnGateStatsESCCCId, rdnPktDQoSCmMacAddr=rdnPktDQoSCmMacAddr, rdnPktDQoSGateAdminDel=rdnPktDQoSGateAdminDel, rdnPktDQoSCopsStatus=rdnPktDQoSCopsStatus, rdnGateSpecMaxPacketSize=rdnGateSpecMaxPacketSize, rdnPktDQoST0Timeout=rdnPktDQoST0Timeout, rdnPktDQoSCopsCmsIpAddr=rdnPktDQoSCopsCmsIpAddr, rdnPktRKSNotificationTrapsPrefix=rdnPktRKSNotificationTrapsPrefix, rdnPktDQoSGateInfoAckCount=rdnPktDQoSGateInfoAckCount, rdnPktDQoSGateOpenErrSent=rdnPktDQoSGateOpenErrSent, rdnPktDQoSGateDeleteErrCount=rdnPktDQoSGateDeleteErrCount, rdnPktDQoSIpAddress=rdnPktDQoSIpAddress, rdnGateStatsRKSSecondaryAddr=rdnGateStatsRKSSecondaryAddr, rdnPktCMSIpConfigEntry=rdnPktCMSIpConfigEntry, rdnPktESNotificationTraps=rdnPktESNotificationTraps, rdnPktDQoSPEPID=rdnPktDQoSPEPID, rdnPktDQoST3Timer=rdnPktDQoST3Timer, rdnGateSpecServiceFlowID=rdnGateSpecServiceFlowID, rdnPktDQoSGateInfoErrCount=rdnPktDQoSGateInfoErrCount, rdnPktDQoSResReqTrap=rdnPktDQoSResReqTrap, rdnPktDQoSGateOpenAckRcvd=rdnPktDQoSGateOpenAckRcvd, rdnPktDQoSGateCmDel=rdnPktDQoSGateCmDel, rdnPktDQoSGateDeleteCount=rdnPktDQoSGateDeleteCount, BcidDataArray=BcidDataArray, rdnPktDQoSEmergencyReason=rdnPktDQoSEmergencyReason, rdnPktDQoSGateSetAckCount=rdnPktDQoSGateSetAckCount, rdnPktESTrapEnable=rdnPktESTrapEnable, rdnPktMMDscp=rdnPktMMDscp, rdnGateSpecSessionClass=rdnGateSpecSessionClass, rdnPktDQoSNotificationObject=rdnPktDQoSNotificationObject, rdnPktDQoSGateCloseAckSent=rdnPktDQoSGateCloseAckSent, rdnPktDQoSGateCloseExhausted=rdnPktDQoSGateCloseExhausted, rdnPktDQoSStatsTable=rdnPktDQoSStatsTable, rdnPktDQoSCliCloseSent=rdnPktDQoSCliCloseSent, rdnPktDQoSDrqSent=rdnPktDQoSDrqSent, rdnPktDQoSGateCloseErrSent=rdnPktDQoSGateCloseErrSent, rdnGateSpecFlags=rdnGateSpecFlags, rdnPktDQoSGateCmDereg=rdnPktDQoSGateCmDereg, rdnPktDQoSGateCloseErrRcvd=rdnPktDQoSGateCloseErrRcvd, rdnPktRKSReason=rdnPktRKSReason, rdnGateStatsBillingCorrelationID=rdnGateStatsBillingCorrelationID, rdnPktDQoSCopsKASent=rdnPktDQoSCopsKASent, rdnPktDQoST1Timeout=rdnPktDQoST1Timeout, rdnPktDQoSCMTSIp=rdnPktDQoSCMTSIp, rdnGateStatsRKSSecondaryPort=rdnGateStatsRKSSecondaryPort, rdnPktDQoSNotificationTrapsPrefix=rdnPktDQoSNotificationTrapsPrefix, rdnGateSpecPeakDataRate=rdnGateSpecPeakDataRate, rdnGateSlackTerm=rdnGateSlackTerm, PYSNMP_MODULE_ID=rdnPacketCableGroup, rdnPktESReason=rdnPktESReason, rdnGateSpecT1Timer=rdnGateSpecT1Timer, rdnPktDQoSGateOpenAckSent=rdnPktDQoSGateOpenAckSent, rdnPktDQoSGateOpenErrRcvd=rdnPktDQoSGateOpenErrRcvd, rdnPktDQoSGateResReassign=rdnPktDQoSGateResReassign, rdnGateSpecDiffServCode=rdnGateSpecDiffServCode, rdnPktESNotificationObject=rdnPktESNotificationObject, rdnGateSpecTokenBuckRate=rdnGateSpecTokenBuckRate, rdnPktEMRKSFailureTrapEnable=rdnPktEMRKSFailureTrapEnable, rdnGateStatsDurationTime=rdnGateStatsDurationTime, rdnGateStatsTable=rdnGateStatsTable, rdnPktESNotificationTrapsPrefix=rdnPktESNotificationTrapsPrefix)
