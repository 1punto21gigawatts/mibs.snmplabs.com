#
# PySNMP MIB module HP-ICF-DHCP-SNOOP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-DHCP-SNOOP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Unsigned32, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Gauge32, ObjectIdentity, MibIdentifier, Counter32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Unsigned32", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "MibIdentifier", "Counter32", "TimeTicks", "iso")
DisplayString, RowStatus, TextualConvention, DateAndTime, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "DateAndTime", "MacAddress", "TruthValue")
hpicfIpDhcpSnoop = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34))
hpicfIpDhcpSnoop.setRevisions(('2016-06-01 00:00', '2016-01-29 00:00', '2015-06-12 00:00', '2013-06-12 00:00', '2013-05-02 00:00', '2013-02-10 00:00', '2007-08-24 00:00', '2006-07-06 00:38', '2006-03-18 00:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfIpDhcpSnoop.setRevisionsDescriptions(('Added objects hpicfDhcpSnoopClearBindings, hpicfDhcpSnoopClearBindingsIpType, hpicfDhcpSnoopClearBindingsIpAddr, hpicfDhcpSnoopClearBindingsPort, hpicfDhcpSnoopClearBindingsVlan. Also added group hpicfDhcpSnoopClearBindingsOptionsGroup and compliance hpicfDhcpSnoopCompliance10.', 'Added object hpicfDhcpSnoopAllowOverwriteBinding. Added group hpicfDhcpSnoopAllowOverwriteBindingGroup and compliance hpicfDhcpSnoopCompliance9.', 'Added object hpicfDhcpSnoopBindingsSecVlan.', 'Added object hpicfDhcpSnoopClearStats.Added group hpicfDhcpSnoopClearStatsOptionsGroup and compliance hpicfDhcpSnoopClearStatsCompliance.', 'Added MIB objects hpicfDhcpSnoopPortMaxbind, hpicfDhcpSnoopPortStaticBinding, hpicfDhcpSnoopPortDynamicBinding and hpicfDhcpSnoopMaxbindPktsDropped for Max-Bindings , Created groups hpicfDhcpSnoopPktsGroup1 and hpicfDhcpSnoopMaxbindingGroup and Compliances hpicfDhcpSnoopCompliance6 and hpicfDhcpSnoopCompliance7 added.', 'Added hpicfDhcpSnoopPktsSent, hpicfDhcpSnoopPktsReceived, hpicfDhcpSnoopPktsDropped, Group hpicfDhcpSnoopPktsGroup and Compliance hpicfDhcpSnoopCompliance4.', 'Added hpicfDhcpSnoopErrantReply notification.', 'Add support for static IP address bindings.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfIpDhcpSnoop.setLastUpdated('201606010000Z')
if mibBuilder.loadTexts: hpicfIpDhcpSnoop.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfIpDhcpSnoop.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfIpDhcpSnoop.setDescription('This MIB module contains HP proprietary objects for managing DHCP Snooping.')
hpicfDhcpSnoopNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 0))
hpicfDhcpSnoopErrantReply = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 0, 1)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopNotifyCount"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopErrantSrcMAC"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopErrantSrcIPType"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopErrantSrcIP"))
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantReply.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantReply.setDescription('An hpicfDhcpSnoopErrantReply notification signifies that the DHCP snooping entity has detected and dropped an errant DHCP response packet.')
hpicfIpDhcpSnoopObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1))
hpicfIpDhcpSnoopConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1))
hpicfDhcpSnoopGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1))
hpicfDhcpSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopEnable.setDescription('The administrative status of the DHCP Snooping feature.')
hpicfDhcpSnoopVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopVlanEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopVlanEnable.setDescription("The administrative status for DHCP Snooping on each VLAN. There will be one bit in this string for each possible VLAN ID. Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLAN IDs 1 through 8, the second octet specifying VLAN IDs 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered VLAN ID, and the least significant bit represents the highest numbered VLAN ID. Thus, each possible VLAN ID of the bridge is represented by a single bit within the value of this object. If a bit at position 'n' has a value of '1', then DHCP Snooping is enabled on VLAN 'n'. If this bit has a value of '0',DHCP Snooping is not enabled on the VLAN 'n',")
hpicfDhcpSnoopVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopVerifyMac.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopVerifyMac.setDescription("When this variable is set to 'true', DHCP Snooping will verify that the MAC address in the chaddr field of the DHCP header matches the source MAC address in all DHCP packets received on untrusted ports. When this variable is set to 'false', DHCP Snooping will omit this check. The value of this variable is ignored when DHCP Snooping is disabled.")
hpicfDhcpSnoopDatabaseFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseFile.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseFile.setDescription('A location to store the lease database, or to retrieve it after a reboot. The location must be given in the form of a Uniform Resource Locator (URL) as defined in RFC 2396. The allowed character sets and the encoding rules defined in RFC 2396 section 2 apply.')
hpicfDhcpSnoopDatabaseWriteDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseWriteDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseWriteDelay.setDescription('The number of seconds to delay writing the DHCP lease database file after a database change. This potentially allows grouping multiple database changes into a single write. The default is 300 seconds.')
hpicfDhcpSnoopDatabaseWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseWriteTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseWriteTimeout.setDescription('The number of seconds to wait for the database file transfer to finish before giving up and declaring a failure. A value of 0 means continue retrying indefinitely. The default is 300 seconds.')
hpicfDhcpSnoopOpt82Insert = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopOpt82Insert.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopOpt82Insert.setDescription('When this object is set to true, DHCP snooping will add a DHCP relay information option to DHCP client packets that it forwards on trusted ports, and will examine and strip DHCP relay information options that were inserted by this switch on DHCP server packets that it forwards to untrusted ports. Note that when DHCP relay and DHCP snooping are both enabled, and this object is set to true, relay information option processing will be handled by DHCP snooping, and any DHCP relay settings for relay information option processing will be ignored. This object defaults to true.')
hpicfDhcpSnoopOpt82Policy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keep", 1), ("replace", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopOpt82Policy.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopOpt82Policy.setDescription('This object configures the behavior of DHCP snooping when forwarding a DHCP packet from an untrusted port that already has a DHCP relay information option present. The policies supported are: keep - forward the packet without updating the existing option replace - replace the existing option with one generated by this switch drop - drop the packet This policy is only applied if DHCP snooping is enabled and hpicfDhcpSnoopOpt82Insert is true. In all cases where this policy is applied, if there is no relay information option present in the received packet, DHCP snooping will add one. The default policy is drop.')
hpicfDhcpSnoopOpt82RemoteId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("subnetIP", 2), ("mgmtIP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopOpt82RemoteId.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopOpt82RemoteId.setDescription('This object configures the value that will be used for the remote ID sub-option of the relay information that will be inserted by DHCP snooping. The possible values are: mac - switch MAC address, subnetIP - switch IP address on the VLAN on which the DHCP packet was received, mgmtIP - switch IP address on the management VLAN. The value of this object is ignored unless DHCP snooping is enabled and hpicfDhcpSnoopOpt82Insert is true. The default value is mac.')
hpicfDhcpSnoopErrantReplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantReplyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantReplyEnable.setDescription('The operational status of hpicfDhcpSnoopErrantReply notifications. The default value is 1 (Enabled). A value of 2 represents Disabled. Writing this object requires authentication, such as provided by SNMPv3.')
hpicfDhcpSnoopDatabaseFTPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseFTPort.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseFTPort.setDescription('A location to store the port value of the FT Server. The default port value will be 69 for TFTP and 22 for SFTP.')
hpicfDhcpSnoopDatabaseSFTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseSFTPUsername.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseSFTPUsername.setDescription('A location to store the Username of the SFTP Server. The default value of username is root.')
hpicfDhcpSnoopDatabaseSFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 13), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseSFTPPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseSFTPPassword.setDescription('A location to store the Password of the SFTP Server')
hpicfDhcpSnoopDatabaseValidateSFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseValidateSFTPServer.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDatabaseValidateSFTPServer.setDescription('This object sets the validate-sftp-server flag. When enabled, the user must login to the SFTP server to verify and accept the public key of the server. When disabled, the public key is accepted automatically.')
hpicfDhcpSnoopAllowOverwriteBinding = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopAllowOverwriteBinding.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopAllowOverwriteBinding.setDescription('When set to true, allows DHCP Snooping binding to be overwritten for the same IP address. When a DHCP server offers a host an IP address and if this address is already bound to an existing host in the binding table, the existing binding is overwritten for the new host if the new host is successfully able to acquire the same IP address. When false, the DHCP offer packet will be dropped.')
hpicfDhcpSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfDhcpSnoopPortTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPortTable.setDescription('Per-interface configuration for DHCP Snooping.')
hpicfDhcpSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfDhcpSnoopPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPortEntry.setDescription('DHCP snooping configuration information for a single port.')
hpicfDhcpSnoopPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopPortTrust.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPortTrust.setDescription('This object indicates whether this port is trusted for DHCP snooping.')
hpicfDhcpSnoopPortMaxbind = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopPortMaxbind.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPortMaxbind.setDescription('This object indicates the maximum number of bindings allowed on a port.')
hpicfDhcpSnoopPortStaticBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopPortStaticBinding.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPortStaticBinding.setDescription('This object indicates the static bindings present on a port.')
hpicfDhcpSnoopPortDynamicBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopPortDynamicBinding.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPortDynamicBinding.setDescription('This object indicates the Dynamic bindings present on a port.')
hpicfDhcpSnoopServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 3), )
if mibBuilder.loadTexts: hpicfDhcpSnoopServerTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopServerTable.setDescription('Table of authorized DHCP server addresses.')
hpicfDhcpSnoopServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 3, 1), ).setIndexNames((0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopServerAddrType"), (0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopServerAddress"))
if mibBuilder.loadTexts: hpicfDhcpSnoopServerEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopServerEntry.setDescription('A row in the table, containing the address of a single authorized DHCP server.')
hpicfDhcpSnoopServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfDhcpSnoopServerAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopServerAddrType.setDescription('The type of address in hpicfDhcpSnoopServerAddress.')
hpicfDhcpSnoopServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpicfDhcpSnoopServerAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopServerAddress.setDescription('The address of a known valid DHCP server. The type of address contained in this object is indicated by hpicfDhcpSnoopServerAddrType. For DHCP snooping to allow a server to client packet to be forwarded, it must be received on a trusted port from a server address in this table. If this table is empty, all addresses are trusted. Note that this feature compares the source address of the received DHCP server packet against the addresses in this table. This means that this table needs to contain trusted server addresses as well as trusted DHCP relays that a server packet may be relayed through.')
hpicfDhcpSnoopServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpSnoopServerStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopServerStatus.setDescription("The status of this DHCP server address entry. Only 'active' entries are used when validating DHCP server packets.")
hpicfIpStaticBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 4), )
if mibBuilder.loadTexts: hpicfIpStaticBindingsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticBindingsTable.setDescription("A table of configured static IP address bindings for this device. Active rows in this table will also be reported in the hpicfDhcpSnoopBindingsTable as entries with an hpicfDhcpSnoopBindingsLeaseTime of 0xffffffff and an hpicfDhcpSnoopBindingsType of 'static'.")
hpicfIpStaticBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 4, 1), ).setIndexNames((0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfIpStaticBindingsVlan"), (0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfIpStaticBindingsAddrType"), (0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfIpStaticBindingsAddress"))
if mibBuilder.loadTexts: hpicfIpStaticBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticBindingsEntry.setDescription('A row in the table, containing a single static IP address binding.')
hpicfIpStaticBindingsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 4, 1, 1), VlanIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hpicfIpStaticBindingsVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticBindingsVlan.setDescription('The VLAN ID on which this static address binding is valid.')
hpicfIpStaticBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfIpStaticBindingsAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticBindingsAddrType.setDescription('The type of IP address contained in hpicfIpStaticBindingsAddress. The only values expected are ipv4 or ipv6.')
hpicfIpStaticBindingsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 4, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfIpStaticBindingsAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticBindingsAddress.setDescription('The static IP address of this binding. The type of address contained in this object is indicated by hpicfIpStaticBindingsAddrType.')
hpicfIpStaticBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 4, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticBindingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticBindingsMacAddress.setDescription('The MAC address associated with this static binding on this VLAN.')
hpicfIpStaticBindingsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 4, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticBindingsInterface.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticBindingsInterface.setDescription('The interface that this static IP address binding is valid on in this VLAN.')
hpicfIpStaticBindingsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticBindingsStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpStaticBindingsStatus.setDescription("The status of this static IP address binding. This object cannot be set to 'active' until valid value has been configured for hpicfIpStaticBindingsMacAddress and hpicfIpStaticBindingsInterface.")
hpicfIpDhcpSnoopStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2))
hpicfDhcpSnoopGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1))
hpicfDhcpSnoopCSForwards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopCSForwards.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCSForwards.setDescription('Number of snooped DHCP packets that were successfully forwarded from untrusted client ports towards trusted DHCP server ports.')
hpicfDhcpSnoopCSMACMismatches = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopCSMACMismatches.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCSMACMismatches.setDescription('Number of snooped DHCP client packets that were discarded because the MAC source address of the packet did not match the chaddr.')
hpicfDhcpSnoopCSUntrustedOpt82s = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopCSUntrustedOpt82s.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCSUntrustedOpt82s.setDescription('Number of snooped DHCP client packets that were discarded because they were received on an untrusted port and contained a relay information option.')
hpicfDhcpSnoopCSBadReleases = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopCSBadReleases.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCSBadReleases.setDescription('Number of snooped DHCP client packets that were discarded because they were DHCPRELEASE or DHCPDECLINE packets received on a port different from the port that the address was leased to.')
hpicfDhcpSnoopCSUntrustedDestPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopCSUntrustedDestPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCSUntrustedDestPorts.setDescription('Number of snooped DHCP client unicast packets that were dropped because they were destined to untrusted ports.')
hpicfDhcpSnoopSCForwards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopSCForwards.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopSCForwards.setDescription('Number of snooped DHCP packets that were successfully forwarded from trusted DHCP server ports to untrusted client ports.')
hpicfDhcpSnoopSCUntrustedPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopSCUntrustedPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopSCUntrustedPorts.setDescription('Number of snooped DHCP server packets that were dropped because they were received from untrusted ports.')
hpicfDhcpSnoopSCUntrustedServers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopSCUntrustedServers.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopSCUntrustedServers.setDescription('Number of snooped DHCP server packets that were dropped because they were received from unauthorized DHCP server addresses.')
hpicfDhcpSnoopSCOpt82Failures = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopSCOpt82Failures.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopSCOpt82Failures.setDescription('Number of snooped DHCP server packets that were dropped because they did not contain a valid relay information option.')
hpicfDhcpSnoopDBFileWriteAttempts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileWriteAttempts.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileWriteAttempts.setDescription('Number of attempts that have been made to write the DHCP lease database to a configured file location.')
hpicfDhcpSnoopDBFileWriteFailures = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileWriteFailures.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileWriteFailures.setDescription('Number of times that an attempt to write the DHCP lease database to a configured file location has failed.')
hpicfDhcpSnoopDBFileReadStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", 1), ("inProgress", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileReadStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileReadStatus.setDescription('This object indicates whether we were able to successfully load the DHCP lease database from the configured location after the last reboot.')
hpicfDhcpSnoopDBFileWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("delaying", 2), ("inProgress", 3), ("succeeded", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileWriteStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileWriteStatus.setDescription("This object indicates whether the DHCP lease database is currently synchronized with the the configured file server. 'notConfigured' means that we have not been configured with a server location. 'delaying' means that we are waiting for the write delay to expire before writing the current database. 'inProgress' means that a lease database transfer is active. 'succeeded' means that all leases in our database have been written to the server. 'failed' means that the last attempt to write our lease database failed.")
hpicfDhcpSnoopDBFileLastWriteTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileLastWriteTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDBFileLastWriteTime.setDescription('The time that we last successfully wrote our lease database to the server. This object will contain a value of all zeroes if we have not written our lease database since the last reboot.')
hpicfDhcpSnoopPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopPktsSent.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPktsSent.setDescription('Total number of snooped DHCP packets that were successfully sent.')
hpicfDhcpSnoopPktsReceived = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopPktsReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPktsReceived.setDescription('Total number of snooped DHCP packets that were received.')
hpicfDhcpSnoopPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopPktsDropped.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPktsDropped.setDescription('Total number of snooped DHCP packets that were dropped.')
hpicfDhcpSnoopMaxbindPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopMaxbindPktsDropped.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopMaxbindPktsDropped.setDescription('Total number of snooped DHCP packets that were dropped due to max-binding configuration.')
hpicfDhcpSnoopBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2), )
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsTable.setDescription('A table of DHCP bindings that have been learned by this device.')
hpicfDhcpSnoopBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1), ).setIndexNames((0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsVlan"), (0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsMacAddress"), (0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsAddrType"), (0, "HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsAddress"))
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsEntry.setDescription('A row in the table, containing a single DHCP binding.')
hpicfDhcpSnoopBindingsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1, 1), VlanIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsVlan.setDescription('The VLAN ID on which this client binding was learned.')
hpicfDhcpSnoopBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsMacAddress.setDescription('The MAC address of the DHCP client that this binding applies to.')
hpicfDhcpSnoopBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1, 3), InetAddressType())
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsAddrType.setDescription('The type of IP address contained in hpicfDhcpSnoopBindingsAddress. The only values expected are ipv4 or ipv6.')
hpicfDhcpSnoopBindingsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1, 4), InetAddress())
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsAddress.setDescription('An IP address that has been leased to this client. The type of address contained in this object is indicated by hpicfDhcpSnoopBindingsAddrType.')
hpicfDhcpSnoopBindingsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsInterface.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsInterface.setDescription('The interface that this DHCP client is connected to.')
hpicfDhcpSnoopBindingsLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsLeaseTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsLeaseTime.setDescription('The number of seconds remaining until this DHCP lease times out. A value of 0xffffffff indicates an infinite lease.')
hpicfDhcpSnoopBindingsType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsType.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsType.setDescription("This object indicates how this binding was learned. A value of 'dhcp' indicates that this binding was learned by snooping a DHCP lease. A value of 'static' indicates that this binding was statically configured via the hpicfIpStaticBindingsTable.")
hpicfDhcpSnoopBindingsSecVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsSecVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsSecVlan.setDescription('The secondary VLAN on which this client binding was learned. If binding is learned on primary or normal VLAN, this object will be zero.')
hpicfDhcpSnoopNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 3))
hpicfDhcpSnoopNotifyCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 3, 1), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpSnoopNotifyCount.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopNotifyCount.setDescription('A count of the DHCP snooping notification sent from the DHCP snooping entity to the SNMP entity. This count may be greater than the count of notifications actually transmitted by the SNMP entity due to rate limiting or configuration.')
hpicfDhcpSnoopErrantSrcMAC = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 3, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantSrcMAC.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantSrcMAC.setDescription('The MAC address received in the errant DHCP/BootP reply packet.')
hpicfDhcpSnoopErrantSrcIPType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 3, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantSrcIPType.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantSrcIPType.setDescription('InetAddressType of the address reported in hpicfDhcpSnoopErrantSrcIP.')
hpicfDhcpSnoopErrantSrcIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 3, 4), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantSrcIP.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopErrantSrcIP.setDescription('The IP address received in the errant DHCP/BootP reply packet.')
hpicfDhcpSnoopClearStatsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 4))
hpicfDhcpSnoopClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopClearStats.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearStats.setDescription('When the value of this object is set to TRUE, all the dhcp-snoop statistics will be cleared. When the value of this object is set to FALSE, the operation is ignored. A get request for this object always returns FALSE.')
hpicfDhcpSnoopClearBindingsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 5))
hpicfDhcpSnoopClearBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindings.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindings.setDescription('When the value of this object is set to TRUE, all the dynamic DHCP Snooping binding entries will be cleared. A write operation of FALSE leads to no operation and a get request for this object will always return FALSE.')
hpicfDhcpSnoopClearBindingsIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 5, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsIpType.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsIpType.setDescription('This object indicates the type of the IP address of the DHCP Snooping binding entry.')
hpicfDhcpSnoopClearBindingsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 5, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsIpAddr.setDescription('Clears the dynamic DHCP Snooping binding entry that matches with the given IP address. This object will always return 0.')
hpicfDhcpSnoopClearBindingsPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 5, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsPort.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsPort.setDescription('Clears all the dynamic DHCP Snooping binding entries that are associated with the given port. This object will always return 0.')
hpicfDhcpSnoopClearBindingsVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 1, 5, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsVlan.setDescription('Clears all the dynamic DHCP Snooping binding entries that match with the given VLAN. This object will always return 0.')
hpicfDhcpSnoopConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2))
hpicfIpDhcpSnoopGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1))
hpicfDhcpSnoopBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 1)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopEnable"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopVlanEnable"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopVerifyMac"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPortTrust"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopCSForwards"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopCSMACMismatches"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopCSBadReleases"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopCSUntrustedDestPorts"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopSCForwards"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopSCUntrustedPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopBaseGroup = hpicfDhcpSnoopBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBaseGroup.setDescription('A collection of objects for configuring and monitoring the base DHCP snooping functionality.')
hpicfDhcpSnoopOpt82Group = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 2)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopOpt82Insert"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopOpt82Policy"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopOpt82RemoteId"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopCSUntrustedOpt82s"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopSCOpt82Failures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopOpt82Group = hpicfDhcpSnoopOpt82Group.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopOpt82Group.setDescription('A collection of objects for configuring and monitoring DHCP snooping relay information option behavior.')
hpicfDhcpSnoopServersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 3)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopServerStatus"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopSCUntrustedServers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopServersGroup = hpicfDhcpSnoopServersGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopServersGroup.setDescription('A collection of objects for configuring and monitoring DHCP snooping trusted servers.')
hpicfDhcpSnoopDbaseFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 4)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseFile"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseWriteDelay"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseWriteTimeout"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileWriteAttempts"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileWriteFailures"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileReadStatus"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileWriteStatus"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileLastWriteTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopDbaseFileGroup = hpicfDhcpSnoopDbaseFileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDhcpSnoopDbaseFileGroup.setDescription('A collection of objects for configuring and monitoring DHCP snooping database file management.')
hpicfDhcpSnoopBindingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 5)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsInterface"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsLeaseTime"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsType"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsSecVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopBindingsGroup = hpicfDhcpSnoopBindingsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopBindingsGroup.setDescription('A collection of objects for accessing the DHCP snooping lease database.')
hpicfDhcpSnoopStaticBindingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 6)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfIpStaticBindingsMacAddress"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfIpStaticBindingsInterface"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfIpStaticBindingsStatus"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopStaticBindingsGroup = hpicfDhcpSnoopStaticBindingsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopStaticBindingsGroup.setDescription('A collection of objects for managing static configuration of IP source address bindings.')
hpicfDhcpSnoopNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 7)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopNotifyCount"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopErrantSrcMAC"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopErrantSrcIPType"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopErrantSrcIP"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopErrantReplyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopNotifyObjsGroup = hpicfDhcpSnoopNotifyObjsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopNotifyObjsGroup.setDescription('Group of objects used in DHCP Snooping notifications.')
hpicfDhcpSnoopNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 8)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopErrantReply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopNotificationGroup = hpicfDhcpSnoopNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopNotificationGroup.setDescription('Description.')
hpicfDhcpSnoopPktsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 9)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPktsSent"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPktsReceived"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPktsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopPktsGroup = hpicfDhcpSnoopPktsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPktsGroup.setDescription('A collection of objects for monitoring the base DHCP snooping functionality.')
hpicfDhcpSnoopClearStatsOptionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 10)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopClearStatsOptionsGroup = hpicfDhcpSnoopClearStatsOptionsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearStatsOptionsGroup.setDescription('The MIB object represents the clear dhcp-snoop statistics information.')
hpicfDhcpSnoopMaxbindingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 11)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPortMaxbind"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPortStaticBinding"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPortDynamicBinding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopMaxbindingGroup = hpicfDhcpSnoopMaxbindingGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopMaxbindingGroup.setDescription('A collection of objects for configuring and monitoring DHCP snooping maxbinding.')
hpicfDhcpSnoopPktsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 12)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPktsSent"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPktsReceived"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPktsDropped"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopMaxbindPktsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopPktsGroup1 = hpicfDhcpSnoopPktsGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopPktsGroup1.setDescription('A collection of objects for monitoring the base DHCP snooping functionality.')
hpicfDhcpSnoopDbaseFileGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 13)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseFile"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseWriteDelay"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseWriteTimeout"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileWriteAttempts"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileWriteFailures"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileReadStatus"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileWriteStatus"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDBFileLastWriteTime"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseFTPort"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseSFTPUsername"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseSFTPPassword"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDatabaseValidateSFTPServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopDbaseFileGroup1 = hpicfDhcpSnoopDbaseFileGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopDbaseFileGroup1.setDescription('A collection of objects for configuring and monitoring DHCP snooping database file management.')
hpicfDhcpSnoopAllowOverwriteBindingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 14)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopAllowOverwriteBinding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopAllowOverwriteBindingGroup = hpicfDhcpSnoopAllowOverwriteBindingGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopAllowOverwriteBindingGroup.setDescription('The MIB object represents the DHCP Snooping allow-overwrite-binding information.')
hpicfDhcpSnoopClearBindingsOptionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 1, 15)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopClearBindings"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopClearBindingsIpType"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopClearBindingsIpAddr"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopClearBindingsPort"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopClearBindingsVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopClearBindingsOptionsGroup = hpicfDhcpSnoopClearBindingsOptionsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearBindingsOptionsGroup.setDescription('A collection of objects for clearing all the dynamic DHCP Snooping binding entries or selectively clearing entries based on the IP address, port or VLAN.')
hpicfDhcpSnoopCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2))
hpicfDhcpSnoopCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 1)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBaseGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopOpt82Group"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopServersGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDbaseFileGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance = hpicfDhcpSnoopCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance.setDescription('The compliance statement for HP Routing switches that support DHCP Snooping.')
hpicfDhcpSnoopCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 2)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBaseGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopOpt82Group"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopServersGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDbaseFileGroup1"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopStaticBindingsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance2 = hpicfDhcpSnoopCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance2.setDescription('The compliance statement for HP Routing switches that support DHCP Snooping.')
hpicfDhcpSnoopCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 3)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopNotifyObjsGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance3 = hpicfDhcpSnoopCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance3.setDescription('The compliance statement for HP Routing switches that support DHCP Snooping.')
hpicfDhcpSnoopCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 4)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPktsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance4 = hpicfDhcpSnoopCompliance4.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance4.setDescription('The compliance statement for HP switches that support DHCP Snooping.')
hpicfDhcpSnoopClearStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 5)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopClearStatsOptionsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopClearStatsCompliance = hpicfDhcpSnoopClearStatsCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopClearStatsCompliance.setDescription('The compliance statement for clearing the dhcp-snooping Statistics implementation.')
hpicfDhcpSnoopCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 6)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBaseGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopOpt82Group"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopServersGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDbaseFileGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopStaticBindingsGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopMaxbindingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance6 = hpicfDhcpSnoopCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance6.setDescription('The compliance statement for HP Routing switches that support DHCP Snooping.')
hpicfDhcpSnoopCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 7)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopPktsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance7 = hpicfDhcpSnoopCompliance7.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance7.setDescription('The compliance statement for HP switches that support DHCP Snooping.')
hpicfDhcpSnoopCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 8)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBaseGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopOpt82Group"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopServersGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopDbaseFileGroup1"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopBindingsGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopStaticBindingsGroup"), ("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopMaxbindingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance8 = hpicfDhcpSnoopCompliance8.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance8.setDescription('The compliance statement for HP Routing switches that support DHCP Snooping.')
hpicfDhcpSnoopCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 9)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopAllowOverwriteBindingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance9 = hpicfDhcpSnoopCompliance9.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance9.setDescription('The compliance statement for HP switches that support DHCP Snooping.')
hpicfDhcpSnoopCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 34, 2, 2, 10)).setObjects(("HP-ICF-DHCP-SNOOP-MIB", "hpicfDhcpSnoopClearBindingsOptionsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpSnoopCompliance10 = hpicfDhcpSnoopCompliance10.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpSnoopCompliance10.setDescription('The compliance statement for HP switches that support DHCP Snooping.')
mibBuilder.exportSymbols("HP-ICF-DHCP-SNOOP-MIB", hpicfDhcpSnoopConformance=hpicfDhcpSnoopConformance, hpicfDhcpSnoopCompliance=hpicfDhcpSnoopCompliance, hpicfDhcpSnoopErrantReply=hpicfDhcpSnoopErrantReply, hpicfDhcpSnoopCompliance7=hpicfDhcpSnoopCompliance7, hpicfDhcpSnoopGlobalStats=hpicfDhcpSnoopGlobalStats, hpicfIpDhcpSnoop=hpicfIpDhcpSnoop, hpicfDhcpSnoopGlobalCfg=hpicfDhcpSnoopGlobalCfg, hpicfDhcpSnoopBindingsGroup=hpicfDhcpSnoopBindingsGroup, hpicfDhcpSnoopPortMaxbind=hpicfDhcpSnoopPortMaxbind, hpicfDhcpSnoopPktsDropped=hpicfDhcpSnoopPktsDropped, hpicfIpStaticBindingsVlan=hpicfIpStaticBindingsVlan, hpicfDhcpSnoopBindingsType=hpicfDhcpSnoopBindingsType, hpicfDhcpSnoopClearBindingsIpType=hpicfDhcpSnoopClearBindingsIpType, hpicfDhcpSnoopNotificationGroup=hpicfDhcpSnoopNotificationGroup, hpicfDhcpSnoopClearBindingsPort=hpicfDhcpSnoopClearBindingsPort, hpicfDhcpSnoopCompliance3=hpicfDhcpSnoopCompliance3, hpicfIpStaticBindingsEntry=hpicfIpStaticBindingsEntry, hpicfDhcpSnoopPktsGroup1=hpicfDhcpSnoopPktsGroup1, hpicfDhcpSnoopBindingsMacAddress=hpicfDhcpSnoopBindingsMacAddress, hpicfDhcpSnoopOpt82RemoteId=hpicfDhcpSnoopOpt82RemoteId, hpicfIpStaticBindingsMacAddress=hpicfIpStaticBindingsMacAddress, hpicfDhcpSnoopServerAddress=hpicfDhcpSnoopServerAddress, hpicfDhcpSnoopDatabaseSFTPUsername=hpicfDhcpSnoopDatabaseSFTPUsername, hpicfDhcpSnoopVerifyMac=hpicfDhcpSnoopVerifyMac, hpicfDhcpSnoopClearStatsOptionsGroup=hpicfDhcpSnoopClearStatsOptionsGroup, hpicfIpDhcpSnoopGroups=hpicfIpDhcpSnoopGroups, hpicfDhcpSnoopPortTable=hpicfDhcpSnoopPortTable, hpicfDhcpSnoopAllowOverwriteBinding=hpicfDhcpSnoopAllowOverwriteBinding, hpicfDhcpSnoopClearStatsCompliance=hpicfDhcpSnoopClearStatsCompliance, hpicfDhcpSnoopCSUntrustedOpt82s=hpicfDhcpSnoopCSUntrustedOpt82s, hpicfDhcpSnoopCSBadReleases=hpicfDhcpSnoopCSBadReleases, hpicfDhcpSnoopCompliance10=hpicfDhcpSnoopCompliance10, hpicfDhcpSnoopBindingsEntry=hpicfDhcpSnoopBindingsEntry, hpicfDhcpSnoopBindingsVlan=hpicfDhcpSnoopBindingsVlan, hpicfDhcpSnoopClearBindingsVlan=hpicfDhcpSnoopClearBindingsVlan, hpicfDhcpSnoopDatabaseWriteDelay=hpicfDhcpSnoopDatabaseWriteDelay, hpicfDhcpSnoopErrantSrcIPType=hpicfDhcpSnoopErrantSrcIPType, hpicfDhcpSnoopDatabaseFTPort=hpicfDhcpSnoopDatabaseFTPort, hpicfDhcpSnoopServerTable=hpicfDhcpSnoopServerTable, hpicfDhcpSnoopPktsGroup=hpicfDhcpSnoopPktsGroup, hpicfDhcpSnoopClearStatsOptions=hpicfDhcpSnoopClearStatsOptions, hpicfDhcpSnoopDatabaseValidateSFTPServer=hpicfDhcpSnoopDatabaseValidateSFTPServer, hpicfDhcpSnoopDBFileWriteFailures=hpicfDhcpSnoopDBFileWriteFailures, hpicfDhcpSnoopNotifications=hpicfDhcpSnoopNotifications, hpicfDhcpSnoopOpt82Policy=hpicfDhcpSnoopOpt82Policy, hpicfDhcpSnoopNotifyCount=hpicfDhcpSnoopNotifyCount, hpicfDhcpSnoopNotifyObjsGroup=hpicfDhcpSnoopNotifyObjsGroup, hpicfDhcpSnoopServerAddrType=hpicfDhcpSnoopServerAddrType, hpicfIpStaticBindingsTable=hpicfIpStaticBindingsTable, hpicfDhcpSnoopCompliance9=hpicfDhcpSnoopCompliance9, hpicfDhcpSnoopEnable=hpicfDhcpSnoopEnable, hpicfDhcpSnoopServersGroup=hpicfDhcpSnoopServersGroup, hpicfDhcpSnoopPortTrust=hpicfDhcpSnoopPortTrust, hpicfDhcpSnoopSCForwards=hpicfDhcpSnoopSCForwards, hpicfDhcpSnoopAllowOverwriteBindingGroup=hpicfDhcpSnoopAllowOverwriteBindingGroup, hpicfDhcpSnoopClearBindingsOptionsGroup=hpicfDhcpSnoopClearBindingsOptionsGroup, hpicfDhcpSnoopPortEntry=hpicfDhcpSnoopPortEntry, hpicfDhcpSnoopDBFileLastWriteTime=hpicfDhcpSnoopDBFileLastWriteTime, hpicfIpStaticBindingsStatus=hpicfIpStaticBindingsStatus, hpicfDhcpSnoopSCUntrustedPorts=hpicfDhcpSnoopSCUntrustedPorts, hpicfDhcpSnoopDBFileReadStatus=hpicfDhcpSnoopDBFileReadStatus, hpicfDhcpSnoopDbaseFileGroup=hpicfDhcpSnoopDbaseFileGroup, hpicfIpDhcpSnoopObjects=hpicfIpDhcpSnoopObjects, hpicfDhcpSnoopMaxbindingGroup=hpicfDhcpSnoopMaxbindingGroup, hpicfIpDhcpSnoopConfig=hpicfIpDhcpSnoopConfig, hpicfDhcpSnoopCompliances=hpicfDhcpSnoopCompliances, hpicfDhcpSnoopSCUntrustedServers=hpicfDhcpSnoopSCUntrustedServers, hpicfDhcpSnoopDatabaseWriteTimeout=hpicfDhcpSnoopDatabaseWriteTimeout, hpicfDhcpSnoopBindingsTable=hpicfDhcpSnoopBindingsTable, hpicfDhcpSnoopPortDynamicBinding=hpicfDhcpSnoopPortDynamicBinding, hpicfDhcpSnoopBindingsLeaseTime=hpicfDhcpSnoopBindingsLeaseTime, hpicfDhcpSnoopOpt82Insert=hpicfDhcpSnoopOpt82Insert, hpicfIpStaticBindingsInterface=hpicfIpStaticBindingsInterface, hpicfDhcpSnoopErrantSrcIP=hpicfDhcpSnoopErrantSrcIP, PYSNMP_MODULE_ID=hpicfIpDhcpSnoop, hpicfIpStaticBindingsAddrType=hpicfIpStaticBindingsAddrType, hpicfDhcpSnoopDatabaseFile=hpicfDhcpSnoopDatabaseFile, hpicfDhcpSnoopSCOpt82Failures=hpicfDhcpSnoopSCOpt82Failures, hpicfDhcpSnoopBindingsInterface=hpicfDhcpSnoopBindingsInterface, hpicfIpDhcpSnoopStatus=hpicfIpDhcpSnoopStatus, hpicfDhcpSnoopPktsReceived=hpicfDhcpSnoopPktsReceived, hpicfDhcpSnoopBindingsAddress=hpicfDhcpSnoopBindingsAddress, hpicfDhcpSnoopCSForwards=hpicfDhcpSnoopCSForwards, hpicfDhcpSnoopMaxbindPktsDropped=hpicfDhcpSnoopMaxbindPktsDropped, hpicfDhcpSnoopNotifyObjects=hpicfDhcpSnoopNotifyObjects, hpicfDhcpSnoopClearBindingsOptions=hpicfDhcpSnoopClearBindingsOptions, hpicfDhcpSnoopClearStats=hpicfDhcpSnoopClearStats, hpicfDhcpSnoopClearBindings=hpicfDhcpSnoopClearBindings, hpicfDhcpSnoopBindingsSecVlan=hpicfDhcpSnoopBindingsSecVlan, hpicfDhcpSnoopDbaseFileGroup1=hpicfDhcpSnoopDbaseFileGroup1, hpicfDhcpSnoopCompliance6=hpicfDhcpSnoopCompliance6, hpicfDhcpSnoopDBFileWriteStatus=hpicfDhcpSnoopDBFileWriteStatus, hpicfDhcpSnoopErrantReplyEnable=hpicfDhcpSnoopErrantReplyEnable, hpicfDhcpSnoopCSMACMismatches=hpicfDhcpSnoopCSMACMismatches, hpicfDhcpSnoopPktsSent=hpicfDhcpSnoopPktsSent, hpicfDhcpSnoopClearBindingsIpAddr=hpicfDhcpSnoopClearBindingsIpAddr, hpicfDhcpSnoopCompliance2=hpicfDhcpSnoopCompliance2, hpicfDhcpSnoopStaticBindingsGroup=hpicfDhcpSnoopStaticBindingsGroup, hpicfIpStaticBindingsAddress=hpicfIpStaticBindingsAddress, hpicfDhcpSnoopErrantSrcMAC=hpicfDhcpSnoopErrantSrcMAC, hpicfDhcpSnoopVlanEnable=hpicfDhcpSnoopVlanEnable, hpicfDhcpSnoopServerEntry=hpicfDhcpSnoopServerEntry, hpicfDhcpSnoopCSUntrustedDestPorts=hpicfDhcpSnoopCSUntrustedDestPorts, hpicfDhcpSnoopDBFileWriteAttempts=hpicfDhcpSnoopDBFileWriteAttempts, hpicfDhcpSnoopBaseGroup=hpicfDhcpSnoopBaseGroup, hpicfDhcpSnoopCompliance4=hpicfDhcpSnoopCompliance4, hpicfDhcpSnoopDatabaseSFTPPassword=hpicfDhcpSnoopDatabaseSFTPPassword, hpicfDhcpSnoopBindingsAddrType=hpicfDhcpSnoopBindingsAddrType, hpicfDhcpSnoopOpt82Group=hpicfDhcpSnoopOpt82Group, hpicfDhcpSnoopServerStatus=hpicfDhcpSnoopServerStatus, hpicfDhcpSnoopPortStaticBinding=hpicfDhcpSnoopPortStaticBinding, hpicfDhcpSnoopCompliance8=hpicfDhcpSnoopCompliance8)
