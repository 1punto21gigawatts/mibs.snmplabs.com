#
# PySNMP MIB module MP-NETWATCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MP-NETWATCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, IpAddress, iso, ModuleIdentity, Integer32, NotificationType, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Counter64, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "IpAddress", "iso", "ModuleIdentity", "Integer32", "NotificationType", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Counter64", "Unsigned32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
datax_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3)).setLabel("datax-mib")
mmpf_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13)).setLabel("mmpf-mib")
mpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 103))
mpNetwatch = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132))
mpNetping = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133))
mpNetWatchTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1), )
if mibBuilder.loadTexts: mpNetWatchTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchTable.setDescription('This is the table type object of NetWatch infomation')
mpNetWatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1), ).setIndexNames((0, "MP-NETWATCH-MIB", "mpNetWatchID"))
if mibBuilder.loadTexts: mpNetWatchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchEntry.setDescription('This is the table entry of mpNetWatchTable.')
mpNetWatchID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchID.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchID.setDescription('A unique value to identify a net-watch(Net-watch ID).')
mpNetWatchVPNID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchVPNID.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchVPNID.setDescription('A unique value to identify a VPN(VPN-ID).')
mpNetWatchEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("retry", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchEntryStatus.setDescription('A unique value to identify a net-watch Status.')
mpNetWatchAction = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchAction.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchAction.setDescription('A unique value to identify a Port Admin Contorol Type, when watched all network address is failured.')
mpNetWatchNetworkAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchNetworkAddr1.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchNetworkAddr1.setDescription('ipv4 Address of watched Network Address. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchSubNetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchSubNetMask1.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchSubNetMask1.setDescription('ipv4 Address of watched Subnet Mask. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchNetworkAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchNetworkAddr2.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchNetworkAddr2.setDescription('ipv4 Address of watched Network Address. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchSubNetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchSubNetMask2.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchSubNetMask2.setDescription('ipv4 Address of watched Subnet Mask. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchNetworkAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchNetworkAddr3.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchNetworkAddr3.setDescription('ipv4 Address of watched Network Address. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchSubNetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchSubNetMask3.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchSubNetMask3.setDescription('ipv4 Address of watched Subnet Mask. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchNetworkAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchNetworkAddr4.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchNetworkAddr4.setDescription('ipv4 Address of watched Network Address. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchSubNetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchSubNetMask4.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchSubNetMask4.setDescription('ipv4 Address of watched Subnet Mask. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchNetworkAddr5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchNetworkAddr5.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchNetworkAddr5.setDescription('ipv4 Address of watched Network Address. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchSubNetMask5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchSubNetMask5.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchSubNetMask5.setDescription('ipv4 Address of watched Subnet Mask. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchNetworkAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchNetworkAddr6.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchNetworkAddr6.setDescription('ipv4 Address of watched Network Address. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchSubNetMask6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchSubNetMask6.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchSubNetMask6.setDescription('ipv4 Address of watched Subnet Mask. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchNetworkAddr7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchNetworkAddr7.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchNetworkAddr7.setDescription('ipv4 Address of watched Network Address. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchSubNetMask7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchSubNetMask7.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchSubNetMask7.setDescription('ipv4 Address of watched Subnet Mask. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchNetworkAddr8 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchNetworkAddr8.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchNetworkAddr8.setDescription('ipv4 Address of watched Network Address. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchSubNetMask8 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchSubNetMask8.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchSubNetMask8.setDescription('ipv4 Address of watched Subnet Mask. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetWatchifIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex1.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex2.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex3.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex3.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex4.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex4.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex5.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex5.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex6.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex6.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex7.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex7.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex8 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex8.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex8.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex9 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex9.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex9.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex10 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex10.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex10.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex11 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex11.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex11.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex12 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex12.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex12.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex13 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex13.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex13.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex14 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex14.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex14.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex15 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex15.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex15.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchifIndex16 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchifIndex16.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchifIndex16.setDescription('A unique value to identify a object of Port Admin change, when watched all network address is failured.')
mpNetWatchStatusTimeStamp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 2))
mpNetWatchStatusLastChange = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 132, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetWatchStatusLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetWatchStatusLastChange.setDescription('This object indicates the the time which configuration of NetWatch ID status is changed.')
mpNetPingTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1), )
if mibBuilder.loadTexts: mpNetPingTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingTable.setDescription('This is the table type object of NetPing infomation.')
mpNetPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1), ).setIndexNames((0, "MP-NETWATCH-MIB", "mpNetPingID"))
if mibBuilder.loadTexts: mpNetPingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingEntry.setDescription('This is the table entry of mpNetPingTable.')
mpNetPingID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingID.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingID.setDescription('A unique value to identify a net-Ping(Net-Ping ID).')
mpNetPingVPNID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingVPNID.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingVPNID.setDescription('A unique value to identify a VPN(VPN-ID).')
mpNetPingEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("retry", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingEntryStatus.setDescription('A unique value to identify a net-Ping Status.')
mpNetPingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingAction.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingAction.setDescription('A unique value to identify a Port Admin Contorol Type, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingDestIPAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingDestIPAddr1.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingDestIPAddr1.setDescription('ipv4 Address of watched Destination IP Address by ping send. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetPingDestIPAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingDestIPAddr2.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingDestIPAddr2.setDescription('ipv4 Address of watched Destination IP Address by ping send. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetPingDestIPAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingDestIPAddr3.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingDestIPAddr3.setDescription('ipv4 Address of watched Destination IP Address by ping send. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetPingDestIPAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingDestIPAddr4.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingDestIPAddr4.setDescription('ipv4 Address of watched Destination IP Address by ping send. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetPingDestIPAddr5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingDestIPAddr5.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingDestIPAddr5.setDescription('ipv4 Address of watched Destination IP Address by ping send. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetPingDestIPAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingDestIPAddr6.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingDestIPAddr6.setDescription('ipv4 Address of watched Destination IP Address by ping send. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetPingDestIPAddr7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingDestIPAddr7.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingDestIPAddr7.setDescription('ipv4 Address of watched Destination IP Address by ping send. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetPingDestIPAddr8 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingDestIPAddr8.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingDestIPAddr8.setDescription('ipv4 Address of watched Destination IP Address by ping send. Its value is significant only when be indicated subject to watch, otherwise it should return a value of 0.')
mpNetPingifIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex1.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex2.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex3.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex3.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex4.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex4.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex5.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex5.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex6.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex6.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex7.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex7.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex8 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex8.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex8.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex9 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex9.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex9.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex10 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex10.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex10.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex11 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex11.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex11.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex12 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex12.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex12.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex13 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex13.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex13.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex14 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex14.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex14.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex15 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex15.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex15.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingifIndex16 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingifIndex16.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingifIndex16.setDescription('A unique value to identify a object of Port Admin change, when it is failured in ping for all destination IP Address of ping Entry.')
mpNetPingStatusTimeStamp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 2))
mpNetPingStatusLastChange = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 133, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpNetPingStatusLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: mpNetPingStatusLastChange.setDescription('This object indicates the the time which configuration of NetPing ID status is changed.')
mibBuilder.exportSymbols("MP-NETWATCH-MIB", mpNetWatchifIndex11=mpNetWatchifIndex11, mpNetWatchifIndex9=mpNetWatchifIndex9, mpNetWatchNetworkAddr2=mpNetWatchNetworkAddr2, datax_mib=datax_mib, mpNetWatchifIndex6=mpNetWatchifIndex6, mpNetPingEntry=mpNetPingEntry, mpNetPingifIndex2=mpNetPingifIndex2, mmpf_mib=mmpf_mib, mpNetWatchSubNetMask3=mpNetWatchSubNetMask3, mpNetWatchAction=mpNetWatchAction, mpNetPingifIndex11=mpNetPingifIndex11, mpNetWatchNetworkAddr3=mpNetWatchNetworkAddr3, mpNetPingDestIPAddr4=mpNetPingDestIPAddr4, mpNetPingifIndex16=mpNetPingifIndex16, mpNetPingifIndex12=mpNetPingifIndex12, mpNetPingStatusLastChange=mpNetPingStatusLastChange, nec=nec, mpNetWatchNetworkAddr6=mpNetWatchNetworkAddr6, mpNetPingifIndex10=mpNetPingifIndex10, mpNetWatchifIndex8=mpNetWatchifIndex8, mpNetPingAction=mpNetPingAction, mpNetPingifIndex4=mpNetPingifIndex4, mpNetPingifIndex14=mpNetPingifIndex14, mpNetPingStatusTimeStamp=mpNetPingStatusTimeStamp, mpNetPingTable=mpNetPingTable, mpNetPingDestIPAddr1=mpNetPingDestIPAddr1, mpNetPingEntryStatus=mpNetPingEntryStatus, mpNetPingifIndex3=mpNetPingifIndex3, mpNetPingVPNID=mpNetPingVPNID, mpNetWatchifIndex14=mpNetWatchifIndex14, mpNetPingifIndex8=mpNetPingifIndex8, mpNetWatchifIndex13=mpNetWatchifIndex13, necProductDepend=necProductDepend, mpNetWatchifIndex3=mpNetWatchifIndex3, mpNetPingifIndex7=mpNetPingifIndex7, mpNetPingifIndex1=mpNetPingifIndex1, mpNetWatchNetworkAddr1=mpNetWatchNetworkAddr1, mpNetWatchifIndex15=mpNetWatchifIndex15, mpNetWatchSubNetMask4=mpNetWatchSubNetMask4, mpNetWatchNetworkAddr4=mpNetWatchNetworkAddr4, mpNetWatchNetworkAddr8=mpNetWatchNetworkAddr8, mpInterface=mpInterface, mpNetWatchifIndex16=mpNetWatchifIndex16, mpNetWatchEntryStatus=mpNetWatchEntryStatus, mpNetWatchifIndex12=mpNetWatchifIndex12, mpNetPingifIndex13=mpNetPingifIndex13, mpNetPingDestIPAddr8=mpNetPingDestIPAddr8, mpNetWatchifIndex5=mpNetWatchifIndex5, mpNetPingDestIPAddr6=mpNetPingDestIPAddr6, mpNetWatchSubNetMask2=mpNetWatchSubNetMask2, mpNetWatchVPNID=mpNetWatchVPNID, private=private, mpNetPingDestIPAddr2=mpNetPingDestIPAddr2, mpNetWatchStatusTimeStamp=mpNetWatchStatusTimeStamp, mpNetPingDestIPAddr5=mpNetPingDestIPAddr5, mpNetPingDestIPAddr3=mpNetPingDestIPAddr3, mpNetPingifIndex6=mpNetPingifIndex6, mpNetWatchSubNetMask5=mpNetWatchSubNetMask5, mpNetWatchifIndex7=mpNetWatchifIndex7, mpNetWatchSubNetMask1=mpNetWatchSubNetMask1, mpNetPingifIndex5=mpNetPingifIndex5, mpNetWatchNetworkAddr7=mpNetWatchNetworkAddr7, mpNetWatchSubNetMask7=mpNetWatchSubNetMask7, mpNetWatchNetworkAddr5=mpNetWatchNetworkAddr5, mpNetWatchifIndex10=mpNetWatchifIndex10, mpNetPingDestIPAddr7=mpNetPingDestIPAddr7, mpNetWatchTable=mpNetWatchTable, mpNetWatchifIndex1=mpNetWatchifIndex1, mpNetWatchifIndex4=mpNetWatchifIndex4, mpNetWatchSubNetMask8=mpNetWatchSubNetMask8, mpNetPingifIndex15=mpNetPingifIndex15, mpNetWatchStatusLastChange=mpNetWatchStatusLastChange, nec_mib=nec_mib, mpNetPingID=mpNetPingID, mpNetWatchifIndex2=mpNetWatchifIndex2, mpNetWatchEntry=mpNetWatchEntry, mpNetping=mpNetping, dod=dod, enterprises=enterprises, mpNetWatchSubNetMask6=mpNetWatchSubNetMask6, org=org, internet=internet, mpNetwatch=mpNetwatch, mpNetPingifIndex9=mpNetPingifIndex9, mpNetWatchID=mpNetWatchID)
