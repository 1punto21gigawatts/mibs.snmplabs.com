#
# PySNMP MIB module Fore-Redundancy-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-Redundancy-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
hardware, atmSwitch = mibBuilder.importSymbols("Fore-Common-MIB", "hardware", "atmSwitch")
trapLogIndex, = mibBuilder.importSymbols("Fore-TrapLog-MIB", "trapLogIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, ModuleIdentity, Gauge32, ObjectIdentity, Counter64, Counter32, Unsigned32, TimeTicks, IpAddress, MibIdentifier, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter64", "Counter32", "Unsigned32", "TimeTicks", "IpAddress", "MibIdentifier", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
asx4000RedundancyModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9))
if mibBuilder.loadTexts: asx4000RedundancyModule.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: asx4000RedundancyModule.setOrganization('FORE')
if mibBuilder.loadTexts: asx4000RedundancyModule.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: asx4000RedundancyModule.setDescription('The Fore ASX-4000 redundancy mib.')
asx4000RedFabricGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1))
asx4000RedPortCardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 2))
asx4000RedundancyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 3))
asx4000RedNetmodGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 4))
class Asx4000RedundancyState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("initializing", 1), ("cloning", 2), ("testing", 3), ("unprotected", 4), ("passive", 5), ("errored-detected", 6), ("armed", 7), ("requalifying", 8))

asx4000RedFabricTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: asx4000RedFabricTable.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricTable.setDescription('A table of fabric entries.')
asx4000RedFabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "Fore-Redundancy-MIB", "asx4000RedFabricIndex"))
if mibBuilder.loadTexts: asx4000RedFabricEntry.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricEntry.setDescription('A table entry containing fabric information.')
asx4000RedFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedFabricIndex.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricIndex.setDescription('The index of this fabric')
asx4000RedFabricAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("unprotected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedFabricAdminMode.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricAdminMode.setDescription('The admin mode for this fabric')
asx4000RedFabricOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("unprotected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedFabricOperState.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricOperState.setDescription('The oper state for this fabric')
asx4000RedFabricPendingAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("unprotected", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asx4000RedFabricPendingAdminMode.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricPendingAdminMode.setDescription('This variable is used to set the value for admin mode for this fabric.The asx4000RedFabricAdminMode variable is set to this value on setting the asx4000RedFabricCommit variable')
asx4000RedFabricCommittedState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedFabricCommittedState.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricCommittedState.setDescription('This variable indicates if a command has been committed for this particular fabric.')
asx4000RedFabricCloningState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("done", 1), ("inprogress", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedFabricCloningState.setStatus('deprecated')
if mibBuilder.loadTexts: asx4000RedFabricCloningState.setDescription('The cloning state of this fabric')
asx4000RedFabricSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asx4000RedFabricSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricSwitchCommand.setDescription('User initiated command at fabric level switchovers. Setting this variable with the following values causes the switchover to happen as explained. active - causes a switchover to active for this fabric standy - causes a switchover to standby for this fabric Note this object is write-only and reading it will result in implementation-specific results.')
asx4000RedFabricRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 1, 1, 8), Asx4000RedundancyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedFabricRedundancyState.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricRedundancyState.setDescription('This is the current redundancy state of th efabric. The possible values for this variable are dependent upon whether the fabric is protected or not, and whether it supports passive or active redundancy.')
asx4000RedFabricGroupCommit = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("commit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asx4000RedFabricGroupCommit.setStatus('current')
if mibBuilder.loadTexts: asx4000RedFabricGroupCommit.setDescription(' A command to commit a fabric group configuration Note this object is write-only and reading it will result in implementation-specific results.')
asx4000RedPortCardTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 2, 1), )
if mibBuilder.loadTexts: asx4000RedPortCardTable.setStatus('current')
if mibBuilder.loadTexts: asx4000RedPortCardTable.setDescription('A table of 4000Red Portcard information.')
asx4000RedPortCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 2, 1, 1), ).setIndexNames((0, "Fore-Redundancy-MIB", "asx4000RedPortCardFabIndex"), (0, "Fore-Redundancy-MIB", "asx4000RedPortCardIndex"))
if mibBuilder.loadTexts: asx4000RedPortCardEntry.setStatus('current')
if mibBuilder.loadTexts: asx4000RedPortCardEntry.setDescription('A table entry containing portcard information.')
asx4000RedPortCardFabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedPortCardFabIndex.setStatus('current')
if mibBuilder.loadTexts: asx4000RedPortCardFabIndex.setDescription('The fabric index this portcard is connected to')
asx4000RedPortCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ab", 1), ("cd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedPortCardIndex.setStatus('current')
if mibBuilder.loadTexts: asx4000RedPortCardIndex.setDescription('The netmod pair index of this portcard')
asx4000RedPortCardCloningState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("done", 1), ("inprogress", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedPortCardCloningState.setStatus('current')
if mibBuilder.loadTexts: asx4000RedPortCardCloningState.setDescription('The netmod pair index of this portcard')
asx4000RedundancyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 3, 1), )
if mibBuilder.loadTexts: asx4000RedundancyGroupTable.setStatus('current')
if mibBuilder.loadTexts: asx4000RedundancyGroupTable.setDescription('This is the Redundancy Group table.')
asx4000RedundancyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 3, 1, 1), ).setIndexNames((0, "Fore-Redundancy-MIB", "asx4000RedGroupName"))
if mibBuilder.loadTexts: asx4000RedundancyGroupEntry.setStatus('current')
if mibBuilder.loadTexts: asx4000RedundancyGroupEntry.setDescription('This is a Redundancy Group entry, which represents the configuration of a working and protection fabric and their associated portcards.')
asx4000RedGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("r12", 1), ("r34", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedGroupName.setStatus('current')
if mibBuilder.loadTexts: asx4000RedGroupName.setDescription('This is the redundancy group name. A redundancy group name identifies a working and protection fabric and their associated portcards are a single unit.')
asx4000RedGroupRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asx4000RedGroupRevertMode.setStatus('current')
if mibBuilder.loadTexts: asx4000RedGroupRevertMode.setDescription('This is the revert mode for this redundancy group. If the revert mode is on(1), automatic switchover from the protection fabric to the working fabric will occur if the working fabric becomes available. Setting the revert mode to off(2) disables this behavior.')
asx4000RedGroupQualifyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 3, 1, 1, 3), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asx4000RedGroupQualifyTimer.setStatus('current')
if mibBuilder.loadTexts: asx4000RedGroupQualifyTimer.setDescription('This is the qualification timer in minutes for this redundancy group. For fabric and portcards that support active redundancy, asx4000RedGroupQualifyTimer is the number of minutes that an errored fabric or portcard must undergo error-free loopback testing before being declared as an available fabric or portcard. This timer has no effect for fabrics and portcards that do not support active redundancy.')
asx4000RedGroupErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 3, 1, 1, 4), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asx4000RedGroupErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: asx4000RedGroupErrorThreshold.setDescription('This is the loopback error threshold in cells for this redundancy group. For fabrics and portcards that support active redundancy, if the number of loopback cell errors equals or exceeds asx4000RedGroupErrorThreshold during the past asx4000RedGroupErrorBlockSize loopback cells, then an error condition is declared for the loopback components. Setting this error threshold to zero (0) disables error checking. The maximum value is the error block size asx4000RedGroupErrorBlockSize.')
asx4000RedGroupErrorBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedGroupErrorBlockSize.setStatus('current')
if mibBuilder.loadTexts: asx4000RedGroupErrorBlockSize.setDescription('This is the loopback error block size in cells for this redundancy group. For fabrics and portcards that support active redundancy, this is the number of consecutive loopback cells over which the error threshold asx4000RedGroupErrorThreshold will be applied.')
asx4000RedNetmodTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 4, 1), )
if mibBuilder.loadTexts: asx4000RedNetmodTable.setStatus('current')
if mibBuilder.loadTexts: asx4000RedNetmodTable.setDescription('A table of 4000Red Netmod information.')
asx4000RedNetmodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 4, 1, 1), ).setIndexNames((0, "Fore-Redundancy-MIB", "asx4000RedNetmodFabIndex"), (0, "Fore-Redundancy-MIB", "asx4000RedNetmodIndex"))
if mibBuilder.loadTexts: asx4000RedNetmodEntry.setStatus('current')
if mibBuilder.loadTexts: asx4000RedNetmodEntry.setDescription('A table entry containing netmod information.')
asx4000RedNetmodFabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedNetmodFabIndex.setStatus('current')
if mibBuilder.loadTexts: asx4000RedNetmodFabIndex.setDescription('The fabric index this netmod is connected to')
asx4000RedNetmodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedNetmodIndex.setStatus('current')
if mibBuilder.loadTexts: asx4000RedNetmodIndex.setDescription('The netmod index of this netmod')
asx4000RedNetmodRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 4, 1, 1, 3), Asx4000RedundancyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asx4000RedNetmodRedundancyState.setStatus('current')
if mibBuilder.loadTexts: asx4000RedNetmodRedundancyState.setDescription('This is the current redundancy state of the netmod. The possible values for this variable are dependent upon whether the fabric to which this netmod is connection to is protected or not, and whether it supports passive or active redundancy.')
redundancyFabricSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2018)).setObjects(("Fore-Redundancy-MIB", "asx4000RedFabricIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: redundancyFabricSwitchover.setStatus('current')
if mibBuilder.loadTexts: redundancyFabricSwitchover.setDescription('This trap reports the change of active fabric due to an automatic or revertive switchover. The fabric identified by the trap variable asx4000RedFabricIndex is the newly active fabric.')
redundancyFabricErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 0, 2)).setObjects(("Fore-Redundancy-MIB", "asx4000RedFabricIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: redundancyFabricErrorCleared.setStatus('current')
if mibBuilder.loadTexts: redundancyFabricErrorCleared.setDescription('This trap reports the clearing of the active redundancy fabric error for the fabric identified by the trap variable asx4000RedFabricIndex.')
redundancyFabricErrorDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 0, 3)).setObjects(("Fore-Redundancy-MIB", "asx4000RedFabricIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: redundancyFabricErrorDetected.setStatus('current')
if mibBuilder.loadTexts: redundancyFabricErrorDetected.setDescription('This trap reports the declaration of the active redundancy fabric error for the fabric identified by the trap variable asx4000RedFabricIndex.')
redundancyNetmodErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 0, 4)).setObjects(("Fore-Redundancy-MIB", "asx4000RedNetmodFabIndex"), ("Fore-Redundancy-MIB", "asx4000RedNetmodIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: redundancyNetmodErrorCleared.setStatus('current')
if mibBuilder.loadTexts: redundancyNetmodErrorCleared.setDescription('This trap reports the clearing of the active redundancy netmod error for the netmod identified by the trap variables asx4000RedNetmodFabIndex and asx4000RedNetmodIndex.')
redundancyNetmodErrorDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 9, 0, 5)).setObjects(("Fore-Redundancy-MIB", "asx4000RedNetmodFabIndex"), ("Fore-Redundancy-MIB", "asx4000RedNetmodIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: redundancyNetmodErrorDetected.setStatus('current')
if mibBuilder.loadTexts: redundancyNetmodErrorDetected.setDescription('This trap reports the declaration of the active redundancy netmod error for the netmod identified by the trap variables asx4000RedNetmodFabIndex and asx4000RedNetmodIndex.')
mibBuilder.exportSymbols("Fore-Redundancy-MIB", asx4000RedNetmodEntry=asx4000RedNetmodEntry, PYSNMP_MODULE_ID=asx4000RedundancyModule, redundancyFabricSwitchover=redundancyFabricSwitchover, asx4000RedPortCardFabIndex=asx4000RedPortCardFabIndex, redundancyNetmodErrorDetected=redundancyNetmodErrorDetected, asx4000RedFabricCommittedState=asx4000RedFabricCommittedState, asx4000RedGroupErrorBlockSize=asx4000RedGroupErrorBlockSize, asx4000RedFabricIndex=asx4000RedFabricIndex, asx4000RedPortCardGroup=asx4000RedPortCardGroup, asx4000RedFabricEntry=asx4000RedFabricEntry, asx4000RedFabricAdminMode=asx4000RedFabricAdminMode, asx4000RedPortCardTable=asx4000RedPortCardTable, asx4000RedPortCardEntry=asx4000RedPortCardEntry, asx4000RedFabricPendingAdminMode=asx4000RedFabricPendingAdminMode, redundancyNetmodErrorCleared=redundancyNetmodErrorCleared, asx4000RedundancyGroupTable=asx4000RedundancyGroupTable, asx4000RedFabricOperState=asx4000RedFabricOperState, asx4000RedFabricTable=asx4000RedFabricTable, asx4000RedNetmodGroup=asx4000RedNetmodGroup, asx4000RedGroupRevertMode=asx4000RedGroupRevertMode, asx4000RedGroupErrorThreshold=asx4000RedGroupErrorThreshold, asx4000RedFabricGroupCommit=asx4000RedFabricGroupCommit, asx4000RedFabricCloningState=asx4000RedFabricCloningState, redundancyFabricErrorDetected=redundancyFabricErrorDetected, asx4000RedFabricSwitchCommand=asx4000RedFabricSwitchCommand, asx4000RedGroupQualifyTimer=asx4000RedGroupQualifyTimer, Asx4000RedundancyState=Asx4000RedundancyState, asx4000RedundancyModule=asx4000RedundancyModule, asx4000RedNetmodTable=asx4000RedNetmodTable, asx4000RedNetmodRedundancyState=asx4000RedNetmodRedundancyState, asx4000RedNetmodIndex=asx4000RedNetmodIndex, asx4000RedPortCardCloningState=asx4000RedPortCardCloningState, redundancyFabricErrorCleared=redundancyFabricErrorCleared, asx4000RedundancyGroupEntry=asx4000RedundancyGroupEntry, asx4000RedPortCardIndex=asx4000RedPortCardIndex, asx4000RedNetmodFabIndex=asx4000RedNetmodFabIndex, asx4000RedFabricRedundancyState=asx4000RedFabricRedundancyState, asx4000RedundancyGroup=asx4000RedundancyGroup, asx4000RedGroupName=asx4000RedGroupName, asx4000RedFabricGroup=asx4000RedFabricGroup)
