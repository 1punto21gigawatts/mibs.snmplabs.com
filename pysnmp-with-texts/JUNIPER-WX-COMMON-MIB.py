#
# PySNMP MIB module JUNIPER-WX-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-WX-GLOBAL-REG
# Produced by pysmi-0.3.4 at Wed May  1 14:01:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
jnxWxModules, jnxWxCommonMib = mibBuilder.importSymbols("JUNIPER-WX-GLOBAL-REG", "jnxWxModules", "jnxWxCommonMib")
TcChassisType, = mibBuilder.importSymbols("JUNIPER-WX-GLOBAL-TC", "TcChassisType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, NotificationType, ModuleIdentity, Counter64, TimeTicks, Unsigned32, Gauge32, MibIdentifier, Integer32, Bits, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "NotificationType", "ModuleIdentity", "Counter64", "TimeTicks", "Unsigned32", "Gauge32", "MibIdentifier", "Integer32", "Bits", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
jnxWxCommonMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 1, 3))
jnxWxCommonMibModule.setRevisions(('2003-09-30 08:45', '2003-04-01 00:00', '2003-03-10 00:00', '2002-06-03 00:00', '2002-03-27 00:00', '2002-02-22 00:00', '2002-01-23 00:00', '2002-01-17 00:00', '2001-08-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxWxCommonMibModule.setRevisionsDescriptions((' Fix minor error in description of jnxWxSysDaylightSaving.', ' Add interface duplex mismatch notification.', ' Add interface speed mismatch notifications.', ' Add Fan notifications.', ' Add FaultTolerantPassthrough notification.', ' Add LoginFailure notification.', ' Add LicenseWillExpire notification.', ' Add ThruputLimitExceeded notification.', ' Rev 1.0 Initial version of MIB module JUNIPER-WX-COMMON-MIB.',))
if mibBuilder.loadTexts: jnxWxCommonMibModule.setLastUpdated('200206030000Z')
if mibBuilder.loadTexts: jnxWxCommonMibModule.setOrganization('Juniper Networks, Inc')
if mibBuilder.loadTexts: jnxWxCommonMibModule.setContactInfo(' Customer Support Juniper Networks, Inc. 1194 North Mathilda Avenue Sunnyvale, CA 94089 +1 888-314-JTAC support@juniper.net')
if mibBuilder.loadTexts: jnxWxCommonMibModule.setDescription(" A MIB module containing definitions of managed objects implemented by all Juniper Networks' products.")
jnxWxCommonConfMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 1))
if mibBuilder.loadTexts: jnxWxCommonConfMib.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonConfMib.setDescription(' Sub-tree for WAN Acceleration MIB conformance statements.')
jnxWxCommonObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2))
if mibBuilder.loadTexts: jnxWxCommonObjs.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonObjs.setDescription(' Sub-tree for common MIB objects.')
jnxWxCommonEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3))
if mibBuilder.loadTexts: jnxWxCommonEvents.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEvents.setDescription(' Sub-tree for common MIB events.')
jnxWxSys = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1))
if mibBuilder.loadTexts: jnxWxSys.setStatus('current')
if mibBuilder.loadTexts: jnxWxSys.setDescription(' Sub-tree for common system objects.')
jnxWxChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 2))
if mibBuilder.loadTexts: jnxWxChassis.setStatus('current')
if mibBuilder.loadTexts: jnxWxChassis.setDescription(' Sub-tree for common chassis information.')
jnxWxSysSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysSwVersion.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysSwVersion.setDescription('Full software version. The first two components of the full version are the major and minor versions. The third component indicates the maintenance release number and the fourth, the build number.')
jnxWxSysHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysHwVersion.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysHwVersion.setDescription('Hardware version of the unit.')
jnxWxSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysSerialNumber.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysSerialNumber.setDescription('The serial number of the unit. If not available, an empty string is returned.')
jnxWxSysTimeZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysTimeZoneOffset.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysTimeZoneOffset.setDescription("The offset in seconds from UTC of the system's time zone. Values are negative for locations west of UTC and positive for locations east of UTC.")
jnxWxSysDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysDaylightSaving.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysDaylightSaving.setDescription("Whether daylight savings are currently in effect for the system's time zone.")
jnxWxChassisType = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 2, 2, 1), TcChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxChassisType.setStatus('current')
if mibBuilder.loadTexts: jnxWxChassisType.setDescription('Chassis type for this WX device.')
jnxWxCommonEventObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 1))
if mibBuilder.loadTexts: jnxWxCommonEventObjs.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventObjs.setDescription(' Branch for objects meant only to be sent in event varbinds.')
jnxWxCommonEventEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2))
if mibBuilder.loadTexts: jnxWxCommonEventEvents.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventEvents.setDescription(' Branch for the events themselves.')
jnxWxCommonEventEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0))
if mibBuilder.loadTexts: jnxWxCommonEventEventsV2.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventEventsV2.setDescription(' Branch for SNMPv2 events. The OIDs for SNMPv2 events should have a zero as the next-to-last sub-identifier (as specified in RFC1902).')
jnxWxCommonEventDescr = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxWxCommonEventDescr.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventDescr.setDescription('String that provides a textual description of the event.')
jnxWxCommonEventInFailSafeMode = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 1))
if mibBuilder.loadTexts: jnxWxCommonEventInFailSafeMode.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventInFailSafeMode.setDescription('This trap is sent when the device boots up in fail-safe mode. This can happen for one of the following reasons: o Fail-safe reboot was explicitly initiated by the user. o The device rebooted automatically too many times because of the failure of internal consistency checks or the failure of tests that verify proper operation of the device.')
jnxWxCommonEventPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 2))
if mibBuilder.loadTexts: jnxWxCommonEventPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventPowerSupplyFailure.setDescription('One or more sources of power to the system has failed. A redundant power-supply has presumably taken over. NOTE: This trap is for future use. WX devices currently do not generate this trap.')
jnxWxCommonEventPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 3))
if mibBuilder.loadTexts: jnxWxCommonEventPowerSupplyOk.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventPowerSupplyOk.setDescription('One or more previously failed sources of power is now working normally. The transition to normal condition happened without the system having to be restarted. NOTE: This trap is for future use. WX devices currently do not generate this trap.')
jnxWxCommonEventLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 4)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventLicenseExpired.setDescription('The license for the system expired. As a result, the system will switch over to and stay in pass-through mode.')
jnxWxCommonEventThruputLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 5)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventThruputLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventThruputLimitExceeded.setDescription('The throughput of traffic through the device has exceeded the limit for which it has been licensed.')
jnxWxCommonEventLicenseWillExpire = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 6)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventLicenseWillExpire.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventLicenseWillExpire.setDescription('The license for the system is about to expire shortly. When it eventually does expire, the system will switch over to and stay in pass-through mode.')
jnxWxCommonEventLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 7)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventLoginFailure.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventLoginFailure.setDescription("A user's login attempt via the console/ssh/web server failed due to incorrect username or password.")
jnxWxCommonEventFaultTolerantPassThrough = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 8)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventFaultTolerantPassThrough.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventFaultTolerantPassThrough.setDescription('An anomalous health condition was detected. It would have subsequently triggered hardware pass through mode followed by a reboot.')
jnxWxCommonEventFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 9)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventFanFailure.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventFanFailure.setDescription("A cooling fan inside the device has failed. The 'jnxWxCommonEventDescr' object has the name of the fan that failed. This trap is currently unused")
jnxWxCommonEventFanSpeedVariation = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 10)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventFanSpeedVariation.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventFanSpeedVariation.setDescription("The speed of a cooling fan inside the device is either too low or too high. The 'jnxWxCommonEventDescr' object has the name of the fan that has the problem. This trap is currently unused.")
jnxWxCommonEventFanOk = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 11)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventFanOk.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventFanOk.setDescription("A cooling fan inside the device that had previously failed or whose speed variation was high is now working properly. The 'jnxWxCommonEventDescr' object has the name of the fan that has recovered. This trap is currently unused.")
jnxWxCommonEventInterfaceSpeedMismatch = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 12)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceSpeedMismatch.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceSpeedMismatch.setDescription('A mismatch is detected between the local and remote interface settings. This can happen due to a mismatch in the local and remote interface speed or mode. ')
jnxWxCommonEventInterfaceSpeedOk = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 13)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceSpeedOk.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceSpeedOk.setDescription('A mismatch previously detected between the local and remote interface settings is now resolved. The local and remote interface speed and mode are matched. ')
jnxWxCommonEventInterfaceDuplexMismatch = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 14)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceDuplexMismatch.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventInterfaceDuplexMismatch.setDescription("A possible mismatch was detected between the duplex setting of either the local or remote interface and that of the device attached to that interface. The interface (local or remote) is identified by the 'jnxWxCommonEventDescr' object. Note that this notification is quite different from jnxWxCommonEventInterfaceSpeedMismatch, which compares the local and remote interfaces on the same WX device.")
jnxWxCommonEventIpsecSecurityAssociationAdded = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 15)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationAdded.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationAdded.setDescription('An IPSec security association has been negotiated and added to security association database.')
jnxWxCommonEventIpsecSecurityAssociationExpired = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 16)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationExpired.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationExpired.setDescription('An IPSec security association has been deleted from the security association database.')
jnxWxCommonEventIpsecSecurityAssociationDeleted = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 1, 3, 2, 0, 17)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationDeleted.setStatus('current')
if mibBuilder.loadTexts: jnxWxCommonEventIpsecSecurityAssociationDeleted.setDescription('An IPSec security association has been deleted from the security association database.')
mibBuilder.exportSymbols("JUNIPER-WX-COMMON-MIB", jnxWxSysSerialNumber=jnxWxSysSerialNumber, jnxWxCommonEventIpsecSecurityAssociationExpired=jnxWxCommonEventIpsecSecurityAssociationExpired, jnxWxCommonObjs=jnxWxCommonObjs, jnxWxCommonEventLoginFailure=jnxWxCommonEventLoginFailure, jnxWxCommonEventLicenseExpired=jnxWxCommonEventLicenseExpired, jnxWxCommonEventInterfaceDuplexMismatch=jnxWxCommonEventInterfaceDuplexMismatch, jnxWxCommonEventThruputLimitExceeded=jnxWxCommonEventThruputLimitExceeded, jnxWxSysSwVersion=jnxWxSysSwVersion, jnxWxSys=jnxWxSys, jnxWxCommonEventFanSpeedVariation=jnxWxCommonEventFanSpeedVariation, jnxWxCommonEventIpsecSecurityAssociationAdded=jnxWxCommonEventIpsecSecurityAssociationAdded, jnxWxCommonEventInterfaceSpeedOk=jnxWxCommonEventInterfaceSpeedOk, PYSNMP_MODULE_ID=jnxWxCommonMibModule, jnxWxCommonEventDescr=jnxWxCommonEventDescr, jnxWxCommonEventIpsecSecurityAssociationDeleted=jnxWxCommonEventIpsecSecurityAssociationDeleted, jnxWxChassis=jnxWxChassis, jnxWxCommonEventFanOk=jnxWxCommonEventFanOk, jnxWxCommonMibModule=jnxWxCommonMibModule, jnxWxCommonEventPowerSupplyOk=jnxWxCommonEventPowerSupplyOk, jnxWxSysTimeZoneOffset=jnxWxSysTimeZoneOffset, jnxWxCommonEventEvents=jnxWxCommonEventEvents, jnxWxCommonEventPowerSupplyFailure=jnxWxCommonEventPowerSupplyFailure, jnxWxCommonEventLicenseWillExpire=jnxWxCommonEventLicenseWillExpire, jnxWxCommonEventEventsV2=jnxWxCommonEventEventsV2, jnxWxSysDaylightSaving=jnxWxSysDaylightSaving, jnxWxSysHwVersion=jnxWxSysHwVersion, jnxWxCommonEventFanFailure=jnxWxCommonEventFanFailure, jnxWxChassisType=jnxWxChassisType, jnxWxCommonEvents=jnxWxCommonEvents, jnxWxCommonEventObjs=jnxWxCommonEventObjs, jnxWxCommonEventInterfaceSpeedMismatch=jnxWxCommonEventInterfaceSpeedMismatch, jnxWxCommonEventFaultTolerantPassThrough=jnxWxCommonEventFaultTolerantPassThrough, jnxWxCommonEventInFailSafeMode=jnxWxCommonEventInFailSafeMode, jnxWxCommonConfMib=jnxWxCommonConfMib)
