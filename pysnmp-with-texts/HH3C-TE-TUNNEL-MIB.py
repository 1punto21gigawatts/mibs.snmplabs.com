#
# PySNMP MIB module HH3C-TE-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-TE-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:30:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
MplsTunnelIndex, MplsLabel, MplsExtendedTunnelId, MplsTunnelInstanceIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelIndex", "MplsLabel", "MplsExtendedTunnelId", "MplsTunnelInstanceIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, NotificationType, Counter64, Unsigned32, Bits, Counter32, TimeTicks, iso, MibIdentifier, ModuleIdentity, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Counter64", "Unsigned32", "Bits", "Counter32", "TimeTicks", "iso", "MibIdentifier", "ModuleIdentity", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowPointer")
hh3cTeTunnel = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 115))
if mibBuilder.loadTexts: hh3cTeTunnel.setLastUpdated('201103240948Z')
if mibBuilder.loadTexts: hh3cTeTunnel.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cTeTunnel.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cTeTunnel.setDescription('This MIB contains managed object definitions for the Multiprotocol Label Switching (MPLS) Te Tunnel.')
hh3cTeTunnelScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 1))
hh3cTeTunnelMaxTunnelIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 115, 1, 1), MplsTunnelIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelMaxTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelMaxTunnelIndex.setDescription('The max value of tunnel id is permitted configure on the device.')
hh3cTeTunnelObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2))
hh3cTeTunnelStaticCrlspTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1), )
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspTable.setDescription('This table contains information for static-crlsp, and through this to get detail information about this static-crlsp. Only support transit LSR and egress LSR.')
hh3cTeTunnelStaticCrlspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1), ).setIndexNames((0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspInLabel"))
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspEntry.setDescription('The entry in this table describes static-crlsp information.')
hh3cTeTunnelStaticCrlspInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 1), MplsLabel())
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspInLabel.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspInLabel.setDescription('This is unique label value that manualy assigned. Uniquely identifies a static-crlsp. Managers should use this to obtain detail static-crlsp information.')
hh3cTeTunnelStaticCrlspName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspName.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspName.setDescription('The unique name assigned to the static-crlsp.')
hh3cTeTunnelStaticCrlspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspStatus.setDescription('Indicates the actual status of this static-crlsp, The value must be up when the static-crlsp status is up and the value must be down when the static-crlsp status is down.')
hh3cTeTunnelStaticCrlspRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transit", 1), ("tail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspRole.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspRole.setDescription('This value indicate the role of this static-crlsp. This value must be transit at transit point of the tunnel, and tail at terminating point of the tunnel.')
hh3cTeTunnelStaticCrlspXCPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspXCPointer.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspXCPointer.setDescription('This pointer unique identify a row of mplsXCTable. This value should be zeroDotZero when the static-crlsp is down. The mplsXCTable identifies the segments that compose this tunnel, their characteristics, and relationships to each other.')
hh3cTeTunnelCoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2), )
if mibBuilder.loadTexts: hh3cTeTunnelCoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoTable.setDescription('This table contains information for Co-routed reverse crlsp and infomation of Co-routed bidirectional Tunnel Interface. If hh3cCorouteTunnelLspInstance is zero, to obtain infomation of Co-routed bidirectional Tunnel Interface, otherwise to obtain Co-routed reverse crlsp infomation.')
hh3cTeTunnelCoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1), ).setIndexNames((0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoIndex"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoLspInstance"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoIngressLSRId"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoEgressLSRId"))
if mibBuilder.loadTexts: hh3cTeTunnelCoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoEntry.setDescription('The entry in this table describes Co-routed infomation of bidirectional Tunnel Interface and reserver lsp information.')
hh3cTeTunnelCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: hh3cTeTunnelCoIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs that specified at originating point. This value should be equal to the value signaled in the Tunnel Id of the Session object.')
hh3cTeTunnelCoLspInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: hh3cTeTunnelCoLspInstance.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoLspInstance.setDescription('When obtain infomation of Co-routed bidirectional Tunnel Interface, this vlaue should be zero. And this value must be LspID to obtain reverse crlsp information. Values greater than 0, but less than or equal to 65535, should be useless.')
hh3cTeTunnelCoIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 3), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hh3cTeTunnelCoIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoIngressLSRId.setDescription('Identity the ingress LSR associated with this tunnel instance. This vlaue is equal to the LsrID of originating endpoint.')
hh3cTeTunnelCoEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 4), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hh3cTeTunnelCoEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoEgressLSRId.setDescription('Identity of the egress LSR associated with this tunnel instance. This vlaue is equal to the LsrID of terminating point.')
hh3cTeTunnelCoBiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coroutedActive", 1), ("coroutedPassive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelCoBiMode.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoBiMode.setDescription('This vlaue indicated the bidirection mode of tunnel interface. The valuemust be coroutedActive at the originating point of the tunnel and coroutedPassive at the terminating point.')
hh3cTeTunnelCoReverseLspInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 6), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelCoReverseLspInstance.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoReverseLspInstance.setDescription('This value indicated the reverse lsp instance, and should be equal to obverse lsp instance.')
hh3cTeTunnelCoReverseLspXCPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelCoReverseLspXCPointer.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCoReverseLspXCPointer.setDescription('This pointer unique index to mplsXCTable of the reverse lsp. The mplsXCTable identifies the segments that compose this tunnel, their characteristics, and relationships to each other. A value of zeroDotZero indicate that there is no crlsp assigned to this.')
hh3cTeTunnelPsTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3), )
if mibBuilder.loadTexts: hh3cTeTunnelPsTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsTable.setDescription('This table defines some objects for managers to obtain TE tunnel Protection Switching group current status information.')
hh3cTeTunnelPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1), ).setIndexNames((0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsIndex"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsIngressLSRId"), (0, "HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsEgressLSRId"))
if mibBuilder.loadTexts: hh3cTeTunnelPsEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsEntry.setDescription('The entry in this table describes TE tunnel Protection Switching group infromation.')
hh3cTeTunnelPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: hh3cTeTunnelPsIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsIndex.setDescription('Uniquely identifies a TE tunnel Protection Switching group instance. This value must be equal to the tunnel id of work tunnel instance.')
hh3cTeTunnelPsIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 2), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hh3cTeTunnelPsIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsIngressLSRId.setDescription('Identity the ingress LSR associated with work tunnel instance.')
hh3cTeTunnelPsEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 3), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hh3cTeTunnelPsEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsEgressLSRId.setDescription('Identity of the egress LSR associated with work tunnel instance.')
hh3cTeTunnelPsProtectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 4), MplsTunnelIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectIndex.setDescription('Uniquely identifies a TE tunnel Protection Switching group instance. This value must be equal to the tunnel id of TE tunnel Protection Switching group instance.')
hh3cTeTunnelPsProtectIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 5), MplsExtendedTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectIngressLSRId.setDescription('Identity the ingress LSR associated with TE tunnel Protection Switching group instance.')
hh3cTeTunnelPsProtectEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 6), MplsExtendedTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectEgressLSRId.setDescription('Identity of the egress LSR associated with TE tunnel Protection Switching group instance.')
hh3cTeTunnelPsProtectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneToOne", 1), ("onePlusOne", 2))).clone('oneToOne')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectType.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectType.setDescription('This value indicated TE tunnel Protection Switching group type. The default value is oneToOne.')
hh3cTeTunnelPsRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("noRevertive", 2))).clone('revertive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsRevertiveMode.setDescription('This value indicated protect switch mode. The value must be revertive or nonRevertive, default value is revertive. ')
hh3cTeTunnelPsWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(24)).setUnits('30 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsWtrTime.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsWtrTime.setDescription('The cycle time that switch to protect tunnel.')
hh3cTeTunnelPsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('500ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsHoldOffTime.setDescription('This value is switchback delay time. When detected the work path fault, switch to protect path after this time.')
hh3cTeTunnelPsSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2))).clone('uniDirectional')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchMode.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchMode.setDescription('This value indicated TE tunnel Protection Switching group switch mode.')
hh3cTeTunnelPsWorkPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("noDefect", 2), ("inDefect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsWorkPathStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsWorkPathStatus.setDescription('This value indicates work path status. none, noDefect, inDefect will be used.')
hh3cTeTunnelPsProtectPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("noDefect", 2), ("inDefect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectPathStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsProtectPathStatus.setDescription('This value indicates protect path status. none, noDefect, inDefect(3) will be used.')
hh3cTeTunnelPsSwitchResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 115, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("workPath", 1), ("protectPath", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchResult.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchResult.setDescription('This value indicated current using path is work path or protect path.')
hh3cTeTunnelNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 3))
hh3cTeTunnelNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 3, 0))
hh3cTeTunnelPsSwitchWtoP = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 115, 3, 0, 1)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsWorkPathStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectPathStatus"))
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchWtoP.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchWtoP.setDescription('This notification is generated when protect workgroup switch from work tunnel to protect tunnel.')
hh3cTeTunnelPsSwitchPtoW = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 115, 3, 0, 2)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsWorkPathStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectPathStatus"))
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchPtoW.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsSwitchPtoW.setDescription('This notification is generated when protect workgroup switch from protect tunnel to work tunnel.')
hh3cTeTunnelConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4))
hh3cTeTunnelCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 1))
hh3cTeTunnelCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 1, 1)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelNotificationsGroup"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelScalarsGroup"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspGroup"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCorouteGroup"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelCompliance = hh3cTeTunnelCompliance.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCompliance.setDescription('The compliance statement for SNMP.')
hh3cTeTunnelGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2))
hh3cTeTunnelNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 1)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsSwitchPtoW"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsSwitchWtoP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelNotificationsGroup = hh3cTeTunnelNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelNotificationsGroup.setDescription('This group contains MPLS Te Tunnel traps.')
hh3cTeTunnelScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 2)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelMaxTunnelIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelScalarsGroup = hh3cTeTunnelScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelScalarsGroup.setDescription('Scalar object needed to implement MPLS te tunnels.')
hh3cTeTunnelStaticCrlspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 3)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspName"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspRole"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelStaticCrlspXCPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelStaticCrlspGroup = hh3cTeTunnelStaticCrlspGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelStaticCrlspGroup.setDescription('Objects for quering static-crlsp information.')
hh3cTeTunnelCorouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 4)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoBiMode"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoReverseLspInstance"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelCoReverseLspXCPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelCorouteGroup = hh3cTeTunnelCorouteGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelCorouteGroup.setDescription('Objects for quering Co-routed reverse crlsp information.')
hh3cTeTunnelPsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 115, 4, 2, 5)).setObjects(("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectIndex"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectIngressLSRId"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectEgressLSRId"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectType"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsRevertiveMode"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsWtrTime"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsHoldOffTime"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsSwitchMode"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsWorkPathStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsProtectPathStatus"), ("HH3C-TE-TUNNEL-MIB", "hh3cTeTunnelPsSwitchResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cTeTunnelPsGroup = hh3cTeTunnelPsGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cTeTunnelPsGroup.setDescription('Objects for quering protect workgroup information.')
mibBuilder.exportSymbols("HH3C-TE-TUNNEL-MIB", hh3cTeTunnelPsProtectIndex=hh3cTeTunnelPsProtectIndex, hh3cTeTunnelPsGroup=hh3cTeTunnelPsGroup, hh3cTeTunnelPsSwitchResult=hh3cTeTunnelPsSwitchResult, hh3cTeTunnelPsSwitchWtoP=hh3cTeTunnelPsSwitchWtoP, hh3cTeTunnelPsProtectType=hh3cTeTunnelPsProtectType, PYSNMP_MODULE_ID=hh3cTeTunnel, hh3cTeTunnelStaticCrlspGroup=hh3cTeTunnelStaticCrlspGroup, hh3cTeTunnelPsProtectEgressLSRId=hh3cTeTunnelPsProtectEgressLSRId, hh3cTeTunnelCoIndex=hh3cTeTunnelCoIndex, hh3cTeTunnelCoTable=hh3cTeTunnelCoTable, hh3cTeTunnelPsProtectIngressLSRId=hh3cTeTunnelPsProtectIngressLSRId, hh3cTeTunnelPsSwitchPtoW=hh3cTeTunnelPsSwitchPtoW, hh3cTeTunnelPsIndex=hh3cTeTunnelPsIndex, hh3cTeTunnelPsProtectPathStatus=hh3cTeTunnelPsProtectPathStatus, hh3cTeTunnelMaxTunnelIndex=hh3cTeTunnelMaxTunnelIndex, hh3cTeTunnel=hh3cTeTunnel, hh3cTeTunnelStaticCrlspInLabel=hh3cTeTunnelStaticCrlspInLabel, hh3cTeTunnelNotifications=hh3cTeTunnelNotifications, hh3cTeTunnelCoIngressLSRId=hh3cTeTunnelCoIngressLSRId, hh3cTeTunnelObjects=hh3cTeTunnelObjects, hh3cTeTunnelNotificationsGroup=hh3cTeTunnelNotificationsGroup, hh3cTeTunnelScalars=hh3cTeTunnelScalars, hh3cTeTunnelCompliance=hh3cTeTunnelCompliance, hh3cTeTunnelPsSwitchMode=hh3cTeTunnelPsSwitchMode, hh3cTeTunnelConformance=hh3cTeTunnelConformance, hh3cTeTunnelStaticCrlspRole=hh3cTeTunnelStaticCrlspRole, hh3cTeTunnelCoBiMode=hh3cTeTunnelCoBiMode, hh3cTeTunnelPsIngressLSRId=hh3cTeTunnelPsIngressLSRId, hh3cTeTunnelGroups=hh3cTeTunnelGroups, hh3cTeTunnelPsRevertiveMode=hh3cTeTunnelPsRevertiveMode, hh3cTeTunnelNotificationsPrefix=hh3cTeTunnelNotificationsPrefix, hh3cTeTunnelCoEgressLSRId=hh3cTeTunnelCoEgressLSRId, hh3cTeTunnelPsEgressLSRId=hh3cTeTunnelPsEgressLSRId, hh3cTeTunnelScalarsGroup=hh3cTeTunnelScalarsGroup, hh3cTeTunnelCorouteGroup=hh3cTeTunnelCorouteGroup, hh3cTeTunnelPsTable=hh3cTeTunnelPsTable, hh3cTeTunnelStaticCrlspTable=hh3cTeTunnelStaticCrlspTable, hh3cTeTunnelCoLspInstance=hh3cTeTunnelCoLspInstance, hh3cTeTunnelStaticCrlspEntry=hh3cTeTunnelStaticCrlspEntry, hh3cTeTunnelCompliances=hh3cTeTunnelCompliances, hh3cTeTunnelPsEntry=hh3cTeTunnelPsEntry, hh3cTeTunnelStaticCrlspStatus=hh3cTeTunnelStaticCrlspStatus, hh3cTeTunnelPsWtrTime=hh3cTeTunnelPsWtrTime, hh3cTeTunnelCoEntry=hh3cTeTunnelCoEntry, hh3cTeTunnelPsWorkPathStatus=hh3cTeTunnelPsWorkPathStatus, hh3cTeTunnelCoReverseLspInstance=hh3cTeTunnelCoReverseLspInstance, hh3cTeTunnelStaticCrlspXCPointer=hh3cTeTunnelStaticCrlspXCPointer, hh3cTeTunnelStaticCrlspName=hh3cTeTunnelStaticCrlspName, hh3cTeTunnelPsHoldOffTime=hh3cTeTunnelPsHoldOffTime, hh3cTeTunnelCoReverseLspXCPointer=hh3cTeTunnelCoReverseLspXCPointer)
