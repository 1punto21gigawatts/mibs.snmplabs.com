#
# PySNMP MIB module ERI-DNX-STM1-OC3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-STM1-OC3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
devices, trapSequence, PortStatus, LinkPortAddress, OneByteField, NestSlotAddress, LinkCmdStatus = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "devices", "trapSequence", "PortStatus", "LinkPortAddress", "OneByteField", "NestSlotAddress", "LinkCmdStatus")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, iso, MibIdentifier, ModuleIdentity, Counter32, Integer32, Counter64, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "iso", "MibIdentifier", "ModuleIdentity", "Counter32", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eriDNXStm1Oc3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 9))
eriDNXStm1Oc3MIB.setRevisions(('2003-05-05 00:00', '2003-02-27 00:00', '2002-04-19 00:00', '2002-04-12 00:00', '2002-03-01 00:00', '2002-01-04 00:00', '2001-11-12 00:00', '2001-08-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eriDNXStm1Oc3MIB.setRevisionsDescriptions(('Nevio Poljak - eri_DnxNest MIB Rev 01.3 (SW Rel. 15.2) Added sts-3c(3) and au4-vc3-Seq(4) selections to optDevMultiplexMode field from the Optical Device Config table to support new Link numbering scheme. Added new error code 402 in optDevCmdStatus to support new validation for au4-vc3-Seq Mode.', 'Nevio Poljak - eri_DnxNest MIB Rev 01.2 (SW Rel. 15.1) Removed Reinitialize(15) command from opticalTransportStatusTable. Renamed branch and enterprise names from Optical to Stm1Oc3. Converted history comments to MODULE-IDENTITY REVISION format.', 'Nevio Poljak - Software Release 14.2 Converted to SMIv2 format.', 'Nevio Poljak - Software Release 14.1 Added New Table for Optical Transport Diagnostics.', 'Nevio Poljak - Software Release 14.1 Added new enumerations to optDevType field for STM1X & OC3X. Also added new error code to optDevCmdStatus field.', 'Nevio Poljak - Software Release 14.1 Added new E1 InterNational Bit field to T1/E1 link Table. Added New Tables for Mapper and TU Diagnostics & Statistics. Added X-Link Pair and Ts Allocation fields to STM1/OC3 Device Config Table.', 'Nevio Poljak - Software Release 13.1 Added new E1 National Bit field.', 'Initial Release of this MIB. - Nevio Poljak',))
if mibBuilder.loadTexts: eriDNXStm1Oc3MIB.setLastUpdated('200305050000Z')
if mibBuilder.loadTexts: eriDNXStm1Oc3MIB.setOrganization('Eastern Research, Inc.')
if mibBuilder.loadTexts: eriDNXStm1Oc3MIB.setContactInfo('Customer Service Postal: Eastern Research, Inc. 225 Executive Drive Moorestown, NJ 08057 Phone: +1-800-337-4374 Email: support@erinc.com')
if mibBuilder.loadTexts: eriDNXStm1Oc3MIB.setDescription('The ERI Enterprise MIB Module for the DNX STM1 and OC3 devices.')
dnxStm1Oc3 = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7))
opticalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1))
opticalDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2))
class PayLoadGroupType(TextualConvention, Integer32):
    description = 'Indicates the type of framing to use within a Synchronous Payload Envelope (SPE) Group. Using the E1, link numbers divisible by 4 are skipped over and not used. (1) t1 - configures all 28 links within the same Payload for VC-11 framing (0) e1 - configures all 21 links within the same Payload for VC-12 framing'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("e1", 0), ("t1", 1))

opticalDevConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1), )
if mibBuilder.loadTexts: opticalDevConfigTable.setStatus('current')
if mibBuilder.loadTexts: opticalDevConfigTable.setDescription('This is the STM1/OC3 Device Configuration table which consists of an entry for each of the STM1/OC3 cards. The total number of entries depends on the number of STM1/OC3 cards in the Node.')
opticalDevConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optDevCfgAddr"))
if mibBuilder.loadTexts: opticalDevConfigEntry.setStatus('current')
if mibBuilder.loadTexts: opticalDevConfigEntry.setDescription('The conceptual row of the STM1/OC3 Device Configuration table. A row in this table cannot be added or deleted, only modified.')
optDevCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 1), NestSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optDevCfgAddr.setStatus('current')
if mibBuilder.loadTexts: optDevCfgAddr.setDescription('This number uniquely identifies a STM1/OC3 Device resource. This number will be used throughout the system to identify a unique resource.')
optDevCfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optDevCfgResource.setStatus('current')
if mibBuilder.loadTexts: optDevCfgResource.setDescription('Uniquely identifies an STM1/OC3 Device in the system. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table entry.')
optDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("stm1", 0), ("oc3", 1), ("stm1X", 2), ("oc3X", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optDevType.setStatus('current')
if mibBuilder.loadTexts: optDevType.setDescription('Identifies the Device as an STM1, OC3, STM1X, or OC3X module.')
optDevMultiplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("au3", 0), ("au4", 1), ("sts-3", 2), ("sts-3c", 3), ("au4-vc3-Seq", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevMultiplexMode.setStatus('current')
if mibBuilder.loadTexts: optDevMultiplexMode.setDescription('Determines the Stm1Oc3 Multiplexing Map Structure to be used: For STM1 SDH Device choose au3, au4, or au4-g707: ------------------------------------------------- (0) au3 - Maps the AUG (Administrative Unit Group) to an AU-3: C-12<-->VC-12<-->TU-12<-->TUG-2<-->VC-3<-->AU-3<-->AUG<-->STM-1 (1) au4 - Maps the AUG (Administrative Unit Group) to an AU-4: C-12<-->VC-12<-->TU-12<-->TUG-2<-->TUG-3<-->VC-4<-->AU-4<-->AUG<-->STM-1 (4) au4-vc3-Seq - Same format as AU-4 but uses sequential link numbering scheme For OC3 SONET Device sts-3 or sts-3c: ------------------------------------- (2) sts-3 - Maps the STS-3 (Synchronous Transport Signal 3) to an SPE: VT-1.5<-->VT-G<-->SPE<-->STS-3<-->OC-3 (3) sts-3c - Maps the STS-3 (Synchronous Transport Signal 3) to an SPE 3c: SPE3c<-->STS-3<-->OC-3 ')
optLineTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("loop", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optLineTiming.setStatus('current')
if mibBuilder.loadTexts: optLineTiming.setDescription('Identifies the type of Clock Transmit Timing to use for the STM-1 or OC-3 module.')
optDevPayload1 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 6), PayLoadGroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevPayload1.setStatus('current')
if mibBuilder.loadTexts: optDevPayload1.setDescription('Indicates the group framing type to be used for links 1 through 28. Using E1, links 22 through 28 are not used.')
optDevPayload2 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 7), PayLoadGroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevPayload2.setStatus('current')
if mibBuilder.loadTexts: optDevPayload2.setDescription('Indicates the tgroup framing type to be used for links 29 through 56. Using E1, links 50 through 56 are not used.')
optDevPayload3 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 8), PayLoadGroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevPayload3.setStatus('current')
if mibBuilder.loadTexts: optDevPayload3.setDescription('Indicates the group framing type to be used for links 57 through 84. Using E1, links 78 through 84 are not used.')
optDevCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 400, 402, 403, 414, 415, 416, 419, 421, 424, 427, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-config", 1), ("update-successful", 101), ("err-general-opt-config-error", 400), ("err-au4Seq-cannot-be-mixed-framing", 402), ("err-invalid-opt-dev-command", 403), ("err-device-is-protection-module", 414), ("err-invalid-multiplex-map", 415), ("err-invalid-payload-framing", 416), ("err-invalid-xlink-nest-num", 419), ("err-invalid-line-timing", 421), ("err-ts-alloc-not-applicable", 424), ("err-xlink-pair-not-applicable", 427), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevCmdStatus.setStatus('current')
if mibBuilder.loadTexts: optDevCmdStatus.setDescription("The command status for this link configuration row/record. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row Stm1Oc3 Device Cfg Commands used in SET Command (1..99) update-config(1), Change existing Stm1Oc3 Device Configuration Response States used in GET RESPONSE Command (100..199) update-successful (101) Device data has been successfully changed Stm1Oc3 Device Config Error Codes used in GET RESPONSE Command (400..799) err-general-opt-config-error (400) Unknown Device configuration error occurred err-au4Seq-cannot-be-mixed-framing (402) Au4 sequential mode supports only all-E1 or all-T1 Payloads err-invalid-opt-dev-command (403) Unrecognized device command-action err-device-is-protection-module (414) Can't configure Device designated as Protection (odd # slot) err-invalid-multiplex-map (415) Configured multiplexing structure not valid for device type err-invalid-payload-framing (416) Unrecognized payload group type err-invalid-xlink-nest-num (419) X-Link cannot be assigned to selected Nest err-invalid-line-timing (421) Unrecognized clock setting err-ts-alloc-not-applicable (424) Timeslot Alloc can only be configured for STM1 or OC3 cards in Standalone DNX systems err-xlink-pair-not-applicable (427) X-Link assignement can only be changed for STM1X or OC3X cards in DNX88 systems. err-data-locked-by-another-user (450) Another administrative user is making changes to this part of the system via a terminal session. Check Event Log for user name. err-snmp-parse-failed (500) Agent could not parse variable err-invalid-snmp-type (501) Variable ASN type does not match Agent defined type err-invalid-snmp-var-size (502) Variable size is too big")
optDevTsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alternate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevTsAlloc.setStatus('current')
if mibBuilder.loadTexts: optDevTsAlloc.setDescription('Identifies the Timeslot allocation method to use for the STM-1 or OC-3 module. Only applies for stand-alone DNX-11 or DNX-4 systems. DNX-88 systems always use NORMAL.')
optDevAssignedToNest = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optDevAssignedToNest.setStatus('current')
if mibBuilder.loadTexts: optDevAssignedToNest.setDescription('Identifies the virtual Nest to use for the STM1-X or OC3-X modules. Only applicable in DNX-88 systems and can only be SET for cards configured in even numbered DNX slots.')
optT1E1LinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2), )
if mibBuilder.loadTexts: optT1E1LinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: optT1E1LinkConfigTable.setDescription("This is the Stm1Oc3 T1/E1 Link Configuration table which consists of an entry for each of the card's 84 links. The total number of entries depends on the number of STM1 and/or OC3 cards in the Node.")
optT1E1LinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optT1E1CfgLinkAddr"))
if mibBuilder.loadTexts: optT1E1LinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optT1E1LinkConfigEntry.setDescription('The conceptual row of the Stm1Oc3 T1/E1 Link Configuration table. A row in this table cannot be added or deleted, only modified.')
optT1E1CfgLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optT1E1CfgLinkAddr.setStatus('current')
if mibBuilder.loadTexts: optT1E1CfgLinkAddr.setDescription('This number uniquely identifies a Stm1Oc3 T1/E1 Link resource. This number will be used throughout the system to identify a unique resource.')
optT1E1CfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optT1E1CfgResource.setStatus('current')
if mibBuilder.loadTexts: optT1E1CfgResource.setDescription('Uniquely identifies an Stm1Oc3 T1/E1 Link in the system. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table entry.')
optT1E1CfgLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1CfgLinkName.setStatus('current')
if mibBuilder.loadTexts: optT1E1CfgLinkName.setDescription('This is the user friendly text name to identify the link.')
optT1E1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 4), PortStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1Status.setStatus('current')
if mibBuilder.loadTexts: optT1E1Status.setDescription('Dictates the current status of the link, in-service or out-of-service.')
optT1E1Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("framed", 1), ("unframed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1Clear.setStatus('current')
if mibBuilder.loadTexts: optT1E1Clear.setDescription('Determines if the port supports T1 or E1 unframed clear mode or framed clear mode.')
optT1E1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e1", 0), ("e1Crc", 1), ("e1Cas", 2), ("e1CasCrc", 3), ("e1Unframed", 4), ("t1Esf", 5), ("t1D4", 6), ("t1Unframed", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1Framing.setStatus('current')
if mibBuilder.loadTexts: optT1E1Framing.setDescription("Determines the type of framing used on the line. Choose between T1 SuperFrame 'D4', Extended SuperFrame (ESF), or T1 Unframed. When value of optT1E1Clear is set to unframed (2), the only valid framing options are: e1Unframed(4) or t1Unframed(7).")
optT1E1RecoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 10, 15))).clone(namedValues=NamedValues(("timeout-3-secs", 3), ("timeout-10-secs", 10), ("timeout-15-secs", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1RecoverTime.setStatus('current')
if mibBuilder.loadTexts: optT1E1RecoverTime.setDescription('This is the red alarm timeout value. Determines the amount of seconds the port will wait to stop sending the yellow alarm when coming out of a red alarm condition.')
optT1E1EsfFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("att-54016", 0), ("ansi-t1-403", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1EsfFormat.setStatus('current')
if mibBuilder.loadTexts: optT1E1EsfFormat.setDescription('Determines the type of ESF network commands the T-1 link will respond to. It has no meaning for D4 or E1 networks. With ESF networks, this information must be obtained from the network supplier.')
optT1E1UnusedTSs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("busy", 0), ("idle", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1UnusedTSs.setStatus('current')
if mibBuilder.loadTexts: optT1E1UnusedTSs.setDescription("Determines the whether the code that will be transmitted over the unused timeslots will be 'idle' or 'busy' (all 1's).")
optT1E1CfgCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 10), LinkCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1CfgCmdStatus.setStatus('current')
if mibBuilder.loadTexts: optT1E1CfgCmdStatus.setDescription("The command status for this link configuration row/record. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row optical T1E1 Link Commands used in SET Command (1..199) update(1) Change existing Link Configuration inServiceAll (7) Change Link Status to in-service for all links within the same payload. copyToAll (9) Copy T1/E1 Link configuration to all other links within the same payload outOfServiceAll (12) Change Link Status to out-of-service for all links within the same payload. Response States used in GET RESPONSE Command (100..199) update-successful (101) Link data has been successfully changed insvc-successful (107) All Payload Links have been successfully placed In Service copy-successful (109) Link data has been successfully copied to other links oos-successful (112) All Payload Links have been successfully placed Out of Service optical T1E1 Link Config Error Codes used in GET RESPONSE Command (400..699) err-general-link-config-error (400) Unknown link configuration error occurred err-invalid-link-status (401) Unrecognized link status setting err-invalid-link-framing (402) Line framing type not valid for link type err-invalid-link-command (403) Unrecognized link command-action err-invalid-esf-format (405) ESF type not applicable to link type err-invalid-red-timeout (412) Unrecognized red alarm timeout err-invalid-idle-code (413) Unrecognized unused TSs code err-device-in-standby (414) Can't change config for designated Standby device err-data-locked-by-another-user (450) Another administrative user is making changes to this part of the system via a terminal session. Check Event Log for user name err-snmp-parse-failed (500) Agent could not parse variable err-invalid-snmp-type (501) Variable ASN type does not match Agent defined type err-invalid-snmp-var-size (502) Variable size is too big")
optT1E1NationalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 11), OneByteField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1NationalBits.setStatus('current')
if mibBuilder.loadTexts: optT1E1NationalBits.setDescription('Enables E1 National S-bits to be set to zero or one. This single byte field can be changed to set the values of the E1 NFA byte in odd frames as depicted below: sa8 sa7 sa6 sa5 sa4 reserved bits --- --- --- --- --- ------------- 1 1 1 1 1 0 0 0 = F8 (default) Values should be entered in Hex. If reserved bits are changed, an error code (427) will be returned in the command status. ')
optT1E1InterNational = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 1, 2, 1, 12), OneByteField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optT1E1InterNational.setStatus('current')
if mibBuilder.loadTexts: optT1E1InterNational.setDescription('Enables InterNational S(i) Spare bit to be set to zero or one. This single byte field can be changed to set the values of the Bit 1 of TS0 G.704 frame as depicted below: reserved bits S(i) -------------------------- ----- 0 0 0 0 0 0 0 1 = 01 (default) Values should be entered in Hex. If reserved bits are changed, an error code (427) will be returned in the command status. ')
opticalTUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1), )
if mibBuilder.loadTexts: opticalTUStatusTable.setStatus('current')
if mibBuilder.loadTexts: opticalTUStatusTable.setDescription("This is the Stm1Oc3 Tributary Unit Status table which consists of an entry for each of the card's 84 links. The total number of entries depends on the number of STM1/OC3 cards in the Node.")
opticalTUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optTUStatusAddr"))
if mibBuilder.loadTexts: opticalTUStatusEntry.setStatus('current')
if mibBuilder.loadTexts: opticalTUStatusEntry.setDescription('The conceptual row of the Stm1Oc3 Tributary Unit Status table. A row in this table cannot be added or deleted, only modified.')
optTUStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusAddr.setStatus('current')
if mibBuilder.loadTexts: optTUStatusAddr.setDescription('This number uniquely identifies a Stm1Oc3 TU link. This number will be used throughout the system to identify a unique resource.')
optTUStatusResrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusResrcId.setStatus('current')
if mibBuilder.loadTexts: optTUStatusResrcId.setDescription('This number uniquely identifies a Stm1Oc3 TU resource. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table entry.')
optTUStatusLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 8, 32, 64, 2048, 4096, 65535, 2097152, 4194304, 8388608, 6291456, 1073741824, 2147483647))).clone(namedValues=NamedValues(("ok", 0), ("yel", 2), ("ais", 8), ("lof", 32), ("los", 64), ("red", 2048), ("cfa", 4096), ("oos", 65535), ("txSlip", 2097152), ("rxSlip", 4194304), ("sef", 8388608), ("slip", 6291456), ("underTest", 1073741824), ("errors", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusLinkState.setStatus('current')
if mibBuilder.loadTexts: optTUStatusLinkState.setDescription('Determines the current STM1/OC3 Tributary Unit status of the link. ok (0) - In Sync yel (2) - Yellow Alarm ais (8) - Sending All Ones lof (32) - Loss of Frame los (64) - Loss of Signal red (2048) - Red Alarm cfa (4096) - Carrier Frame Alignment oos (65535) - Out of Service txSlip (2097152) - Transmit Slip rxSlip (4194304) - Receive Slip sef (8388608) - Severely Errored Frames slip (6291456) - Transmit/Receive Slip underTest(1073741824) - Running Bit Error Test (BERT) errors (2147483647) - Multiple Errors displays raw bit field value ')
optTUStatusErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusErrSecs.setStatus('current')
if mibBuilder.loadTexts: optTUStatusErrSecs.setDescription('This is the total number of Errored Seconds for the Tributary Unit.')
optTUStatusAisErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusAisErrs.setStatus('current')
if mibBuilder.loadTexts: optTUStatusAisErrs.setDescription('This is the total number of TU Alarm Indication Signal Errored Seconds.')
optTUStatusLopErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusLopErrs.setStatus('current')
if mibBuilder.loadTexts: optTUStatusLopErrs.setDescription('This is the total number of TU Loss of Pointer Errored Seconds.')
optTUStatusRdiTUErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusRdiTUErrs.setStatus('current')
if mibBuilder.loadTexts: optTUStatusRdiTUErrs.setDescription('This is the total number of TU Remote Defect Indication Errored Seconds.')
optTUStatusRfiTUErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusRfiTUErrs.setStatus('current')
if mibBuilder.loadTexts: optTUStatusRfiTUErrs.setDescription('This is the total number of TU Remote Failure Indication Errored Seconds.')
optTUStatusPSLMErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusPSLMErrs.setStatus('current')
if mibBuilder.loadTexts: optTUStatusPSLMErrs.setDescription('This is the total number of TU Path Signal Label Mismatch Errored Seconds.')
optTUStatusPSLUErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusPSLUErrs.setStatus('current')
if mibBuilder.loadTexts: optTUStatusPSLUErrs.setDescription('This is the total number of TU Path Signal Label Unstable Errored Seconds.')
optTUStatusErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTUStatusErrFreeSecs.setStatus('current')
if mibBuilder.loadTexts: optTUStatusErrFreeSecs.setDescription('This is the total number of Error-Free seconds for the Tributary Unit.')
opticalMapperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2), )
if mibBuilder.loadTexts: opticalMapperStatusTable.setStatus('current')
if mibBuilder.loadTexts: opticalMapperStatusTable.setDescription('This is the Stm1Oc3 Mapper Status table which consists of an entry for each of the 3 STM1/OC3 Mapper Payloads. The total number of entries depends on the number of STM1/OC3 cards in the Node.')
opticalMapperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optMapperStatusAddr"))
if mibBuilder.loadTexts: opticalMapperStatusEntry.setStatus('current')
if mibBuilder.loadTexts: opticalMapperStatusEntry.setDescription('The conceptual row of the Stm1Oc3 Mapper Status table. A row in this table cannot be added or deleted, only modified.')
optMapperStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperStatusAddr.setStatus('current')
if mibBuilder.loadTexts: optMapperStatusAddr.setDescription('This number uniquely identifies a STM1/OC3 Mapper Payload. This number will be used throughout the system to identify a unique resource.')
optMapperStatusResrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperStatusResrcId.setStatus('current')
if mibBuilder.loadTexts: optMapperStatusResrcId.setDescription('This number uniquely identifies a STM1/OC3 Mapper resource. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table entry.')
optMapperState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 8, 16, 32, 64, 128, 2048, 4096, 65535, 2097152, 4194304, 8388608, 6291456, 1073741824, 2147483647))).clone(namedValues=NamedValues(("ok", 0), ("yel", 2), ("ais", 8), ("lop", 16), ("lof", 32), ("los", 64), ("rdi", 128), ("red", 2048), ("cfa", 4096), ("oos", 65535), ("txSlip", 2097152), ("rxSlip", 4194304), ("sef", 8388608), ("slip", 6291456), ("underTest", 1073741824), ("errors", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperState.setStatus('current')
if mibBuilder.loadTexts: optMapperState.setDescription('This number uniquely identifies the Mapper Payload State. ok (0) - In Sync yel (2) - Yellow Alarm ais (8) - Sending All Ones lop (16) - Loss of Ptr lof (32) - Loss of Frame los (64) - Loss of Signal rdi (128) - Receive Defect Indicator red (2048) - Red Alarm cfa (4096) - Carrier Frame Alignment oos (65535) - Out of Service txSlip (2097152) - Transmit Slip rxSlip (4194304) - Receive Slip sef (8388608) - Severely Errored Frames slip (6291456) - Transmit/Receive Slip underTest(1073741824) - Running Bit Error Test (BERT) errors (2147483647) - Multiple Errors displays raw bit field value ')
optMapperErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperErrSecs.setStatus('current')
if mibBuilder.loadTexts: optMapperErrSecs.setDescription('This is the total number of Errored Seconds for this Mapper Payload.')
optMapperErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperErrFreeSecs.setStatus('current')
if mibBuilder.loadTexts: optMapperErrFreeSecs.setDescription('This is the total number of Mapper Error Free Seconds.')
optMapperLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("off", 0), ("local", 1), ("line", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optMapperLoop.setStatus('current')
if mibBuilder.loadTexts: optMapperLoop.setDescription('Indicates the loopback status of the Stm1Oc3 Mapper for this device.. off (0) - indicates loopback is disabled local (1) - indicates Mapper local data is looped back to itself line (3) - entire Mapper Frame is looped, framing is not regenerated ')
optMapperPathLOPErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperPathLOPErrs.setStatus('current')
if mibBuilder.loadTexts: optMapperPathLOPErrs.setDescription('This is the total number of Mapper Path Loss of Pointer Errored Seconds.')
optMapperPathAISErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperPathAISErrs.setStatus('current')
if mibBuilder.loadTexts: optMapperPathAISErrs.setDescription('This is the total number of Mapper Path Alarm Indication Signal Errored Seconds.')
optMapperPathRDIErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optMapperPathRDIErrs.setStatus('current')
if mibBuilder.loadTexts: optMapperPathRDIErrs.setDescription('This is the total number of Mapper Path Remote Defect Indication Errored Seconds.')
optMapperCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 101, 114, 200, 202, 206, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("updateTest", 1), ("clearErrors", 14), ("update-successful", 101), ("clear-successful", 114), ("err-general-test-error", 200), ("err-invalid-loop-type", 202), ("err-field-cannot-be-set", 206), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optMapperCmdStatus.setStatus('current')
if mibBuilder.loadTexts: optMapperCmdStatus.setDescription('This is the command status for the Framer Row. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row Mapper Action Commands used in SET Command (1..99) updateTest (1) Can be used optionally when activating loops and berts in order to get status code back in response clearErrors (14) Resets all error counters and bert test time to zero Response States used in GET RESPONSE Command (100..199) update-successful (101) Test action has been successfully performed clear-successful (114) Error counts have been successfully cleared The Error Codes used in GET RESPONSE Command (200..799) err-general-test-error (200) Unknown Test request error occurred. err-invalid-loop-type (202) Unrecognized loop selection err-field-cannot-be-set (206) Read-only field was included in SET request err-snmp-parse-failed (500) Agent could not parse variable err-invalid-snmp-type (501) Variable ASN type does not match Agent defined type err-invalid-snmp-var-size (502) Variable size is too big')
opticalTransportStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3), )
if mibBuilder.loadTexts: opticalTransportStatusTable.setStatus('current')
if mibBuilder.loadTexts: opticalTransportStatusTable.setDescription('This is the Stm1Oc3 Transport Status table which consists of an entry for each of the STM1/OC3 Transport Overhead. The total number of entries depends on the number of Stm1Oc3 cards in the Node.')
opticalTransportStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1), ).setIndexNames((0, "ERI-DNX-STM1-OC3-MIB", "optTransportStatusAddr"))
if mibBuilder.loadTexts: opticalTransportStatusEntry.setStatus('current')
if mibBuilder.loadTexts: opticalTransportStatusEntry.setDescription('The conceptual row of the Stm1Oc3 Transport Status table. A row in this table cannot be added or deleted, only modified.')
optTransportStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 1), NestSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportStatusAddr.setStatus('current')
if mibBuilder.loadTexts: optTransportStatusAddr.setDescription('This number uniquely identifies a STM1/OC3 Transport Overhead Nest and Slot number. This number format will be used throughout the system to identify a resource.')
optTransportStatusResrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportStatusResrcId.setStatus('current')
if mibBuilder.loadTexts: optTransportStatusResrcId.setDescription('This number uniquely identifies a STM1/OC3 Transport resource. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table entry.')
optTransportLaserState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optTransportLaserState.setStatus('current')
if mibBuilder.loadTexts: optTransportLaserState.setDescription('This specifies the State of the Laser Interface.')
optTransportErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportErrSecs.setStatus('current')
if mibBuilder.loadTexts: optTransportErrSecs.setDescription('This is the total number of Errored Seconds for this Transport Overhead.')
optTransportErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportErrFreeSecs.setStatus('current')
if mibBuilder.loadTexts: optTransportErrFreeSecs.setDescription('This is the total number of Transport Error Free Seconds.')
optTransportLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("terminal", 1), ("facility", 2), ("pathFacility", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optTransportLoop.setStatus('current')
if mibBuilder.loadTexts: optTransportLoop.setDescription('Indicates the loopback status of the Stm1Oc3 Transport for this device. off (0) - indicates Transport loopback is disabled terminal (1) - The optical line interface transmit driver is looped back to the optical receiver. Ultimately the payload is reflected back to the Switch Fabric and the PCM Highway of the DNX Backplane. facility (2) - The Fiber Optic path is looped back to the facility. pathFacility (3) - The Stm1Oc3 incoming data (Rx) is transmitted back to its source via the Tx path. The bus that interfaces to the mappers is in loopback, and the entire payload is returned to its source with a refreshed frame structure. ')
optTransportLineAISErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineAISErrs.setStatus('current')
if mibBuilder.loadTexts: optTransportLineAISErrs.setDescription('This is the total number of Transport Line Alarm Indication Signal Errored Seconds.')
optTransportLineRDIErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineRDIErrs.setStatus('current')
if mibBuilder.loadTexts: optTransportLineRDIErrs.setDescription('This is the total number of Transport Line Remote Defect Indication Errored Seconds.')
optTransportLineOOFErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineOOFErrs.setStatus('current')
if mibBuilder.loadTexts: optTransportLineOOFErrs.setDescription('This is the total number of Transport Line Out of Frame Errored Seconds.')
optTransportLineLOFErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineLOFErrs.setStatus('current')
if mibBuilder.loadTexts: optTransportLineLOFErrs.setDescription('This is the total number of Transport Line Loss of Frame Errored Seconds.')
optTransportLineLOSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optTransportLineLOSErrs.setStatus('current')
if mibBuilder.loadTexts: optTransportLineLOSErrs.setDescription('This is the total number of Transport Line Loss of Signal Errored Seconds.')
optTransportCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 101, 114, 400, 402, 406, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("updateTest", 1), ("clearErrors", 14), ("update-successful", 101), ("clear-successful", 114), ("err-general-test-error", 400), ("err-invalid-loop-type", 402), ("err-field-cannot-be-set", 406), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optTransportCmdStatus.setStatus('current')
if mibBuilder.loadTexts: optTransportCmdStatus.setDescription('This is the command status for the Framer Row. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row Transport Action Commands used in SET Command (1..99) updateTest (1) Can be used optionally when activating loops and berts in order to get status code back in response clearErrors (14) Resets all error counters and bert test time to zero Response States used in GET RESPONSE Command (100..199) update-successful (101) Test action has been successfully performed clear-successful (114) Error counts have been successfully cleared The Error Codes used in GET RESPONSE Command (400..799) err-general-test-error (400) Unknown Test request error occurred. err-invalid-loop-type (402) Unrecognized loop selection err-field-cannot-be-set (406) Read-only field was included in SET request err-snmp-parse-failed (500) Agent could not parse variable err-invalid-snmp-type (501) Variable ASN type does not match Agent defined type err-invalid-snmp-var-size (502) Variable size is too big')
dnxStm1Oc3Enterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 0))
if mibBuilder.loadTexts: dnxStm1Oc3Enterprise.setStatus('current')
if mibBuilder.loadTexts: dnxStm1Oc3Enterprise.setDescription('ERI DNX Stm1Oc3 Device Enterprise for Alarms/Events')
optDevConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 0, 1)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-STM1-OC3-MIB", "optDevCfgAddr"), ("ERI-DNX-STM1-OC3-MIB", "optDevCmdStatus"))
if mibBuilder.loadTexts: optDevConfigTrap.setStatus('current')
if mibBuilder.loadTexts: optDevConfigTrap.setDescription('This trap is used to notify a NMS that a user has updated the configuration for a given Stm1Oc3 Device entry.')
optT1E1ConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 7, 0, 2)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-STM1-OC3-MIB", "optT1E1CfgLinkAddr"), ("ERI-DNX-STM1-OC3-MIB", "optT1E1CfgCmdStatus"))
if mibBuilder.loadTexts: optT1E1ConfigTrap.setStatus('current')
if mibBuilder.loadTexts: optT1E1ConfigTrap.setDescription('This trap is used to notify a NMS that a user has updated the configuration for a given Stm1Oc3 T1/E1 Link entry.')
mibBuilder.exportSymbols("ERI-DNX-STM1-OC3-MIB", optMapperStatusAddr=optMapperStatusAddr, optT1E1UnusedTSs=optT1E1UnusedTSs, opticalTUStatusEntry=opticalTUStatusEntry, optTUStatusLopErrs=optTUStatusLopErrs, optT1E1Status=optT1E1Status, PYSNMP_MODULE_ID=eriDNXStm1Oc3MIB, optTUStatusRdiTUErrs=optTUStatusRdiTUErrs, optTransportStatusResrcId=optTransportStatusResrcId, optTransportLineRDIErrs=optTransportLineRDIErrs, opticalMapperStatusTable=opticalMapperStatusTable, optTUStatusAisErrs=optTUStatusAisErrs, optTUStatusRfiTUErrs=optTUStatusRfiTUErrs, optMapperCmdStatus=optMapperCmdStatus, optDevCfgAddr=optDevCfgAddr, optTransportErrSecs=optTransportErrSecs, optT1E1Clear=optT1E1Clear, optDevPayload2=optDevPayload2, optTUStatusErrFreeSecs=optTUStatusErrFreeSecs, optMapperState=optMapperState, optTransportLineAISErrs=optTransportLineAISErrs, optT1E1NationalBits=optT1E1NationalBits, dnxStm1Oc3Enterprise=dnxStm1Oc3Enterprise, optMapperErrFreeSecs=optMapperErrFreeSecs, optMapperPathLOPErrs=optMapperPathLOPErrs, optTransportStatusAddr=optTransportStatusAddr, opticalTransportStatusTable=opticalTransportStatusTable, optT1E1CfgLinkName=optT1E1CfgLinkName, opticalTransportStatusEntry=opticalTransportStatusEntry, opticalConfig=opticalConfig, optT1E1InterNational=optT1E1InterNational, optDevPayload3=optDevPayload3, opticalTUStatusTable=opticalTUStatusTable, optTUStatusAddr=optTUStatusAddr, optDevAssignedToNest=optDevAssignedToNest, optT1E1LinkConfigTable=optT1E1LinkConfigTable, optDevMultiplexMode=optDevMultiplexMode, optDevCfgResource=optDevCfgResource, PayLoadGroupType=PayLoadGroupType, optT1E1Framing=optT1E1Framing, optDevPayload1=optDevPayload1, opticalDiag=opticalDiag, optDevCmdStatus=optDevCmdStatus, optT1E1CfgCmdStatus=optT1E1CfgCmdStatus, optTUStatusErrSecs=optTUStatusErrSecs, opticalDevConfigTable=opticalDevConfigTable, optMapperLoop=optMapperLoop, optT1E1EsfFormat=optT1E1EsfFormat, optTUStatusPSLUErrs=optTUStatusPSLUErrs, opticalDevConfigEntry=opticalDevConfigEntry, dnxStm1Oc3=dnxStm1Oc3, optT1E1RecoverTime=optT1E1RecoverTime, optDevType=optDevType, optMapperStatusResrcId=optMapperStatusResrcId, optMapperErrSecs=optMapperErrSecs, optT1E1CfgLinkAddr=optT1E1CfgLinkAddr, optTUStatusResrcId=optTUStatusResrcId, optTransportLineLOSErrs=optTransportLineLOSErrs, optLineTiming=optLineTiming, optTransportLaserState=optTransportLaserState, optTransportLineOOFErrs=optTransportLineOOFErrs, optMapperPathAISErrs=optMapperPathAISErrs, optTransportLoop=optTransportLoop, optT1E1CfgResource=optT1E1CfgResource, eriDNXStm1Oc3MIB=eriDNXStm1Oc3MIB, optTransportCmdStatus=optTransportCmdStatus, optDevConfigTrap=optDevConfigTrap, optT1E1ConfigTrap=optT1E1ConfigTrap, optTUStatusPSLMErrs=optTUStatusPSLMErrs, optT1E1LinkConfigEntry=optT1E1LinkConfigEntry, optTransportLineLOFErrs=optTransportLineLOFErrs, optTUStatusLinkState=optTUStatusLinkState, optTransportErrFreeSecs=optTransportErrFreeSecs, optDevTsAlloc=optDevTsAlloc, opticalMapperStatusEntry=opticalMapperStatusEntry, optMapperPathRDIErrs=optMapperPathRDIErrs)
