#
# PySNMP MIB module HUAWEI-SEP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SEP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
Unsigned32, Integer32, ObjectIdentity, InterfaceIndex, MibScalar, MibTable, MibTableRow, MibTableColumn, ifName, ModuleIdentity = mibBuilder.importSymbols("IF-MIB", "Unsigned32", "Integer32", "ObjectIdentity", "InterfaceIndex", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ifName", "ModuleIdentity")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Integer32, Counter32, ObjectIdentity, iso, MibIdentifier, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Bits, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "Counter32", "ObjectIdentity", "iso", "MibIdentifier", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Bits", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hwSepMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223))
if mibBuilder.loadTexts: hwSepMIB.setLastUpdated('200911171530Z')
if mibBuilder.loadTexts: hwSepMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwSepMIB.setContactInfo('8090 Team Huawei Technologies Co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwSepMIB.setDescription('The private mib file includes the general extent information of the device.hwDatacomm(165).hwSepMIB. ')
hwSepObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1))
hwSepResetPktCnt = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSepResetPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepResetPktCnt.setDescription('Reset the packet counter of all running SEP ports. The value of hwSepResetPktCnt is unused(65535) when it is read. The value of hwSepResetPktCnt must be clear(1) when it is set.')
hwSepSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2), )
if mibBuilder.loadTexts: hwSepSegmentTable.setStatus('current')
if mibBuilder.loadTexts: hwSepSegmentTable.setDescription('The table includes the information of SEP segments.')
hwSepSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1), ).setIndexNames((0, "HUAWEI-SEP-MIB", "hwSepSegmentId"))
if mibBuilder.loadTexts: hwSepSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: hwSepSegmentEntry.setDescription('The table includes the information of SEP segments. The index of the table is SEP segment id.')
hwSepSegmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hwSepSegmentId.setStatus('current')
if mibBuilder.loadTexts: hwSepSegmentId.setDescription('SEP segment Identifier.')
hwSepControlVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepControlVlanId.setStatus('current')
if mibBuilder.loadTexts: hwSepControlVlanId.setDescription('The control VLAN identifier of the SEP segment. If the value of the object is set 0, the operation is delete configuration.')
hwSepPreemptManual = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepPreemptManual.setStatus('current')
if mibBuilder.loadTexts: hwSepPreemptManual.setDescription('Trigger the manual preemption by setting the object to be 1. When getting the object it will always be 0.')
hwSepPreemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(15, 600), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepPreemptDelay.setStatus('current')
if mibBuilder.loadTexts: hwSepPreemptDelay.setDescription('The preemption delay timer of the SEP segment. If the value of the object is set 0, the operation is delete configuration.')
hwSepBlockPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("optimal", 1), ("middle", 2), ("hop", 3), ("name", 4), ("null", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepBlockPortMode.setStatus('current')
if mibBuilder.loadTexts: hwSepBlockPortMode.setDescription('The way to choose the port to be blocked. if the value of the object is set 1, the optimal port. if the value of the object is set 2, the middle port. if the value of the object is set 3, the port with the designated hop(hwSepBlockPortHop). if the value of the object is set 4, the port with the designated system name(hwSepBlockPortSysname) and port name(hwSepBlockPortIfname). if the value of the object is set 5, the operation is delete configuration of the block port. BlockPortMode | BlockPortValue | active inactive -----------------------|------------------------------------------------------------------------------ optimal(1) | (1) (2/3/4) middle(2) | (2) (1/3/4) hop(3) | (3)(hwSepBlockPortHop) (1/2/4) name(4) | (4)(hwSepBlockPortSysname & hwSepBlockPortIfname) (1/2/3) ')
hwSepBlockPortHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 512), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepBlockPortHop.setStatus('current')
if mibBuilder.loadTexts: hwSepBlockPortHop.setDescription('The hop count of the preffered blocking port. If the value of the object is set 0, the operation is delete configuration. If the mode of block port is not hop(3), the value is not have effect.')
hwSepBlockPortSysname = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepBlockPortSysname.setStatus('current')
if mibBuilder.loadTexts: hwSepBlockPortSysname.setDescription('The system name of the preffered blocking port. if not set the value of hwSepBlockPortIfname, this configuration is not take effect. if the mode of block port is not name(4), this configuration is not task effect.')
hwSepBlockPortIfname = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepBlockPortIfname.setStatus('current')
if mibBuilder.loadTexts: hwSepBlockPortIfname.setDescription('The interface name of the preffered blocking port. if not set the value of hwSepBlockPortSysname, this configuration is not take effect. if the mode of block port is not name(4), this configuration is not take effect.')
hwSepTcNotifySep = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepTcNotifySep.setStatus('current')
if mibBuilder.loadTexts: hwSepTcNotifySep.setDescription('The bitmap of the SEP segments to which the topology change event will be notified ')
hwSepTcNotifyRrpp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 10), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepTcNotifyRrpp.setStatus('current')
if mibBuilder.loadTexts: hwSepTcNotifyRrpp.setDescription('If set 1, the topology change event of the SEP segment will be notified to RRPP')
hwSepTcNotifyStp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 11), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepTcNotifyStp.setStatus('current')
if mibBuilder.loadTexts: hwSepTcNotifyStp.setDescription('If set 1, the topology change event of the SEP segment will be notified to STP')
hwSepTcNotifyVpls = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 12), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepTcNotifyVpls.setStatus('current')
if mibBuilder.loadTexts: hwSepTcNotifyVpls.setDescription('If set 1, the topology change event of the SEP segment will be notified to VPLS')
hwSepTcNotifyVll = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 13), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepTcNotifyVll.setStatus('current')
if mibBuilder.loadTexts: hwSepTcNotifyVll.setDescription('If set 1, the topology change event of the SEP segment will be notified to VLL')
hwSepTcNotifySmartLinkCtrlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepTcNotifySmartLinkCtrlVlan.setStatus('current')
if mibBuilder.loadTexts: hwSepTcNotifySmartLinkCtrlVlan.setDescription('If set control vlan, the topology change event of the SEP segment will be notified to Smart-Link. If the value of the object is set 0, the operation is delete configuration.')
hwSepDealSmartLinkFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 15), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepDealSmartLinkFlush.setStatus('current')
if mibBuilder.loadTexts: hwSepDealSmartLinkFlush.setDescription('If set 1, the SEP segment will deal the smart link flush-FDB packet')
hwSepProtectedInstanceList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepProtectedInstanceList.setStatus('current')
if mibBuilder.loadTexts: hwSepProtectedInstanceList.setDescription(' The protected instance list of the SEP segment')
hwSepTcProtectionInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepTcProtectionInterval.setStatus('current')
if mibBuilder.loadTexts: hwSepTcProtectionInterval.setDescription('The interval of tc-protection, the default value is 2.')
hwSepSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 2, 1, 128), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepSegmentRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSepSegmentRowStatus.setDescription('Operation of CreateAndGo can be used to create a new SEP segment, and operation of Destroy be used to destroy an existent SEP segment.')
hwSepTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3), )
if mibBuilder.loadTexts: hwSepTopologyTable.setStatus('current')
if mibBuilder.loadTexts: hwSepTopologyTable.setDescription('The table includes the information of the topology of the SEP segment.')
hwSepTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1), ).setIndexNames((0, "HUAWEI-SEP-MIB", "hwSepSegmentId"), (0, "HUAWEI-SEP-MIB", "hwSepHop"))
if mibBuilder.loadTexts: hwSepTopologyEntry.setStatus('current')
if mibBuilder.loadTexts: hwSepTopologyEntry.setDescription('The table includes the information of the topology of the SEP segment. The index of the table is the segment identifier and the hop count of the port.')
hwSepHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwSepHop.setStatus('current')
if mibBuilder.loadTexts: hwSepHop.setDescription('The hop count of the port.')
hwSepPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepPortId.setStatus('current')
if mibBuilder.loadTexts: hwSepPortId.setDescription('The port identifier. For example: 00.E0.6E.70.23.00.00.00 (hex). The first 6 bytes is the mac address of the device')
hwSepTopoSysname = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoSysname.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoSysname.setDescription('The system name.')
hwSepTopoPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoPortname.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoPortname.setDescription('The port name.')
hwSepTopoPortConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoPortConfigPriority.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoPortConfigPriority.setDescription('The configured port priority.The default value is 64.')
hwSepTopoPortActivePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoPortActivePriority.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoPortActivePriority.setDescription('The active port priority.')
hwSepTopoConfigPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoConfigPortRole.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoConfigPortRole.setDescription('The configued port role: role value common 0x10 edge secondary 0x21 edge primary 0x22 no neighbor edge secondary 0x31 no neighbor edge primary 0x32')
hwSepTopoActivePortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoActivePortRole.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoActivePortRole.setDescription('The active port role: role value common 0x10 edge secondary 0x21 edge primary 0x22 no neighbor edge secondary 0x31 no neighbor edge primary 0x32')
hwSepTopoPortNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("preup", 3), ("up", 4), ("conflict", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoPortNbrState.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoPortNbrState.setDescription('The state of the neighbor state machine: state value down 1 init 2 preup 3 up 4 conflict 5')
hwSepTopoBrotherPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoBrotherPortId.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoBrotherPortId.setDescription('The brother port identifier. For example: 00.E0.6E.70.23.00.00.00 (hex). The first 6 bytes is the mac address of the device')
hwSepTopoNbrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoNbrPortId.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoNbrPortId.setDescription('The neighbor port identifier. For example: 00.E0.6E.70.23.00.00.00 (hex). The first 6 bytes is the mac address of the device')
hwSepTopoPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoPortLinkState.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoPortLinkState.setDescription('The link state of the port: state value link down 1 link up 2')
hwSepTopoPortFwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discarding", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTopoPortFwdState.setStatus('current')
if mibBuilder.loadTexts: hwSepTopoPortFwdState.setDescription('The forwarding state of the port: state value discarding 1 forwarding 2')
hwSepPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4), )
if mibBuilder.loadTexts: hwSepPortTable.setStatus('current')
if mibBuilder.loadTexts: hwSepPortTable.setDescription('The table includes the information of SEP ports')
hwSepPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1), ).setIndexNames((0, "HUAWEI-SEP-MIB", "hwSepSegmentId"), (0, "HUAWEI-SEP-MIB", "hwSepPortType"), (0, "HUAWEI-SEP-MIB", "hwSepPortId1"), (0, "HUAWEI-SEP-MIB", "hwSepPortId2"), (0, "HUAWEI-SEP-MIB", "hwSepPortId3"), (0, "HUAWEI-SEP-MIB", "hwSepPortId4"))
if mibBuilder.loadTexts: hwSepPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwSepPortEntry.setDescription('The table includes the information of SEP ports. The index of the table is SEP segment identifier, port type, port identifier1, port identifier2, port identifier3, port identifier4. If it is an ethernet port including fast ethernet/gigabit ethernet/eth-trunk, the port type is 1, the port identifier1 is the IfIndex of the ethernet port. the other port identifier is for extension and not used currently, should be set 0.')
hwSepPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: hwSepPortType.setStatus('current')
if mibBuilder.loadTexts: hwSepPortType.setDescription('The port type.Currently SEP just support ethernet port and the value is 1.')
hwSepPortId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwSepPortId1.setStatus('current')
if mibBuilder.loadTexts: hwSepPortId1.setDescription('The port identifier1, when the hwSepPortType is 1, the value of the object is the IfIndex of the port.')
hwSepPortId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwSepPortId2.setStatus('current')
if mibBuilder.loadTexts: hwSepPortId2.setDescription('The port identifier2, Currently it is not used and only for extension, should be set 0.')
hwSepPortId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwSepPortId3.setStatus('current')
if mibBuilder.loadTexts: hwSepPortId3.setDescription('The port identifier3, Currently it is not used and only for extension, should be set 0.')
hwSepPortId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwSepPortId4.setStatus('current')
if mibBuilder.loadTexts: hwSepPortId4.setDescription('The port identifier4, Currently it is not used and only for extension, should be set 0.')
hwSepSysname = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepSysname.setStatus('current')
if mibBuilder.loadTexts: hwSepSysname.setDescription('The system name.')
hwSepPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepPortname.setStatus('current')
if mibBuilder.loadTexts: hwSepPortname.setDescription('The port name')
hwSepPortConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepPortConfigPriority.setStatus('current')
if mibBuilder.loadTexts: hwSepPortConfigPriority.setDescription('The configured port priority.The default value is 64.')
hwSepPortActivePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepPortActivePriority.setStatus('current')
if mibBuilder.loadTexts: hwSepPortActivePriority.setDescription('The active port priority.')
hwSepConfigPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepConfigPortRole.setStatus('current')
if mibBuilder.loadTexts: hwSepConfigPortRole.setDescription('The configued port role: role value common 0x10 edge secondary 0x21 edge primary 0x22 no neighbor edge secondary 0x31 no neighbor edge primary 0x32')
hwSepActivePortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepActivePortRole.setStatus('current')
if mibBuilder.loadTexts: hwSepActivePortRole.setDescription('The active port role: role value common 0x10 edge secondary 0x21 edge primary 0x22 no neighbor edge secondary 0x31 no neighbor edge primary 0x32')
hwSepPortNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("preup", 3), ("up", 4), ("conflict", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepPortNbrState.setStatus('current')
if mibBuilder.loadTexts: hwSepPortNbrState.setDescription('The state of the neighbor state machine: state value down 1 init 2 preup 3 up 4 conflict 5')
hwSepNbrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepNbrPortId.setStatus('current')
if mibBuilder.loadTexts: hwSepNbrPortId.setDescription('The identifier of the neighbor port. For example: 00.E0.6E.70.23.00.00.00 (hex) ')
hwSepPortFwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discarding", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepPortFwdState.setStatus('current')
if mibBuilder.loadTexts: hwSepPortFwdState.setDescription('The forwarding state of the port: state value discarding 1 forwarding 2')
hwSepRxNbrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepRxNbrPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepRxNbrPktCnt.setDescription('The number of received neighbor packets.')
hwSepTxNbrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTxNbrPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepTxNbrPktCnt.setDescription('The number of transmited neighbor packets.')
hwSepRxLsaInfoPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepRxLsaInfoPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepRxLsaInfoPktCnt.setDescription('The number of received LSA information packets.')
hwSepTxLsaInfoPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTxLsaInfoPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepTxLsaInfoPktCnt.setDescription('The number of transmitted LSA information packets.')
hwSepRxLsaAckPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepRxLsaAckPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepRxLsaAckPktCnt.setDescription('The number of received LSA acknowledgement packets.')
hwSepTxLsaAckPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTxLsaAckPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepTxLsaAckPktCnt.setDescription('The number of transmitted LSA acknowledgement packets.')
hwSepRxPreemptReqPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepRxPreemptReqPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepRxPreemptReqPktCnt.setDescription('The number of received preemption request packets.')
hwSepTxPreemptReqPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTxPreemptReqPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepTxPreemptReqPktCnt.setDescription('The number of transmitted preemption request packets.')
hwSepRxPreemptAckPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepRxPreemptAckPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepRxPreemptAckPktCnt.setDescription('The number of received preemption acknowledgement packets.')
hwSepTxPreemptAckPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTxPreemptAckPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepTxPreemptAckPktCnt.setDescription('The number of transmitted preemption acknowledgement packets.')
hwSepRxTcPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepRxTcPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepRxTcPktCnt.setDescription('The number of received topology change packets.')
hwSepTxTcPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTxTcPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepTxTcPktCnt.setDescription('The number of transmitted topology change packets.')
hwSepRxEpaPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepRxEpaPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepRxEpaPktCnt.setDescription('The number of received topology change packets.')
hwSepTxEpaPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSepTxEpaPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepTxEpaPktCnt.setDescription('The number of transmitted topology change packets.')
hwSepResetPortPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSepResetPortPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwSepResetPortPktCnt.setDescription('Reset the packet counter of the port in the SEP segment. The value of hwSepResetPktCnt is unused(65535) when it is read. The value of hwSepResetPktCnt must be clear(1) when it is set.')
hwSepPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 1, 4, 1, 128), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSepPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSepPortRowStatus.setDescription('Operation of CreateAndGo can be used to have a port join the SEP segment. and operation of Destroy be used to have a port leave the SEP segment.')
hwSepGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 2))
hwSepGlobalInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 2, 1)).setObjects(("HUAWEI-SEP-MIB", "hwSepResetPktCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSepGlobalInfoGroup = hwSepGlobalInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwSepGlobalInfoGroup.setDescription('The group of global information.')
hwSepSegmentInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 2, 2)).setObjects(("HUAWEI-SEP-MIB", "hwSepSegmentId"), ("HUAWEI-SEP-MIB", "hwSepControlVlanId"), ("HUAWEI-SEP-MIB", "hwSepPreemptManual"), ("HUAWEI-SEP-MIB", "hwSepPreemptDelay"), ("HUAWEI-SEP-MIB", "hwSepBlockPortMode"), ("HUAWEI-SEP-MIB", "hwSepBlockPortHop"), ("HUAWEI-SEP-MIB", "hwSepBlockPortSysname"), ("HUAWEI-SEP-MIB", "hwSepBlockPortIfname"), ("HUAWEI-SEP-MIB", "hwSepTcNotifySep"), ("HUAWEI-SEP-MIB", "hwSepTcNotifyRrpp"), ("HUAWEI-SEP-MIB", "hwSepTcNotifyStp"), ("HUAWEI-SEP-MIB", "hwSepTcNotifyVpls"), ("HUAWEI-SEP-MIB", "hwSepTcNotifyVll"), ("HUAWEI-SEP-MIB", "hwSepTcNotifySmartLinkCtrlVlan"), ("HUAWEI-SEP-MIB", "hwSepDealSmartLinkFlush"), ("HUAWEI-SEP-MIB", "hwSepProtectedInstanceList"), ("HUAWEI-SEP-MIB", "hwSepTcProtectionInterval"), ("HUAWEI-SEP-MIB", "hwSepSegmentRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSepSegmentInfoGroup = hwSepSegmentInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwSepSegmentInfoGroup.setDescription('The group of segment information.')
hwSepPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 2, 3)).setObjects(("HUAWEI-SEP-MIB", "hwSepPortType"), ("HUAWEI-SEP-MIB", "hwSepPortId1"), ("HUAWEI-SEP-MIB", "hwSepPortId2"), ("HUAWEI-SEP-MIB", "hwSepPortId3"), ("HUAWEI-SEP-MIB", "hwSepPortId4"), ("HUAWEI-SEP-MIB", "hwSepSysname"), ("HUAWEI-SEP-MIB", "hwSepPortname"), ("HUAWEI-SEP-MIB", "hwSepPortConfigPriority"), ("HUAWEI-SEP-MIB", "hwSepPortActivePriority"), ("HUAWEI-SEP-MIB", "hwSepConfigPortRole"), ("HUAWEI-SEP-MIB", "hwSepActivePortRole"), ("HUAWEI-SEP-MIB", "hwSepPortNbrState"), ("HUAWEI-SEP-MIB", "hwSepNbrPortId"), ("HUAWEI-SEP-MIB", "hwSepPortFwdState"), ("HUAWEI-SEP-MIB", "hwSepRxNbrPktCnt"), ("HUAWEI-SEP-MIB", "hwSepTxNbrPktCnt"), ("HUAWEI-SEP-MIB", "hwSepRxLsaInfoPktCnt"), ("HUAWEI-SEP-MIB", "hwSepTxLsaInfoPktCnt"), ("HUAWEI-SEP-MIB", "hwSepRxLsaAckPktCnt"), ("HUAWEI-SEP-MIB", "hwSepTxLsaAckPktCnt"), ("HUAWEI-SEP-MIB", "hwSepRxPreemptReqPktCnt"), ("HUAWEI-SEP-MIB", "hwSepTxPreemptReqPktCnt"), ("HUAWEI-SEP-MIB", "hwSepRxPreemptAckPktCnt"), ("HUAWEI-SEP-MIB", "hwSepTxPreemptAckPktCnt"), ("HUAWEI-SEP-MIB", "hwSepRxTcPktCnt"), ("HUAWEI-SEP-MIB", "hwSepTxTcPktCnt"), ("HUAWEI-SEP-MIB", "hwSepRxEpaPktCnt"), ("HUAWEI-SEP-MIB", "hwSepTxEpaPktCnt"), ("HUAWEI-SEP-MIB", "hwSepResetPortPktCnt"), ("HUAWEI-SEP-MIB", "hwSepPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSepPortInfoGroup = hwSepPortInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwSepPortInfoGroup.setDescription('The group of port information.')
hwSepTopologyInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 223, 2, 4)).setObjects(("HUAWEI-SEP-MIB", "hwSepHop"), ("HUAWEI-SEP-MIB", "hwSepPortId"), ("HUAWEI-SEP-MIB", "hwSepTopoSysname"), ("HUAWEI-SEP-MIB", "hwSepTopoPortname"), ("HUAWEI-SEP-MIB", "hwSepTopoPortConfigPriority"), ("HUAWEI-SEP-MIB", "hwSepTopoPortActivePriority"), ("HUAWEI-SEP-MIB", "hwSepTopoConfigPortRole"), ("HUAWEI-SEP-MIB", "hwSepTopoActivePortRole"), ("HUAWEI-SEP-MIB", "hwSepTopoPortNbrState"), ("HUAWEI-SEP-MIB", "hwSepTopoNbrPortId"), ("HUAWEI-SEP-MIB", "hwSepTopoPortLinkState"), ("HUAWEI-SEP-MIB", "hwSepTopoPortFwdState"), ("HUAWEI-SEP-MIB", "hwSepTopoBrotherPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSepTopologyInfoGroup = hwSepTopologyInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwSepTopologyInfoGroup.setDescription('The group of topology information.')
mibBuilder.exportSymbols("HUAWEI-SEP-MIB", hwSepRxPreemptReqPktCnt=hwSepRxPreemptReqPktCnt, hwSepResetPortPktCnt=hwSepResetPortPktCnt, hwSepTopologyTable=hwSepTopologyTable, hwSepTopoPortLinkState=hwSepTopoPortLinkState, hwSepPortId2=hwSepPortId2, hwSepPortFwdState=hwSepPortFwdState, hwSepTcNotifyStp=hwSepTcNotifyStp, hwSepPreemptManual=hwSepPreemptManual, hwSepTopoPortConfigPriority=hwSepTopoPortConfigPriority, hwSepPortEntry=hwSepPortEntry, hwSepTcNotifySep=hwSepTcNotifySep, hwSepTopoNbrPortId=hwSepTopoNbrPortId, PYSNMP_MODULE_ID=hwSepMIB, hwSepTopoActivePortRole=hwSepTopoActivePortRole, hwSepControlVlanId=hwSepControlVlanId, hwSepTopoBrotherPortId=hwSepTopoBrotherPortId, hwSepTxLsaAckPktCnt=hwSepTxLsaAckPktCnt, hwSepTxEpaPktCnt=hwSepTxEpaPktCnt, hwSepTcNotifyVll=hwSepTcNotifyVll, hwSepRxPreemptAckPktCnt=hwSepRxPreemptAckPktCnt, hwSepPortActivePriority=hwSepPortActivePriority, hwSepTxLsaInfoPktCnt=hwSepTxLsaInfoPktCnt, hwSepRxTcPktCnt=hwSepRxTcPktCnt, hwSepTcNotifyRrpp=hwSepTcNotifyRrpp, hwSepRxLsaInfoPktCnt=hwSepRxLsaInfoPktCnt, hwSepTopoPortActivePriority=hwSepTopoPortActivePriority, hwSepPortId=hwSepPortId, hwSepPortId3=hwSepPortId3, hwSepTxPreemptReqPktCnt=hwSepTxPreemptReqPktCnt, hwSepPortId4=hwSepPortId4, hwSepRxLsaAckPktCnt=hwSepRxLsaAckPktCnt, hwSepBlockPortSysname=hwSepBlockPortSysname, hwSepProtectedInstanceList=hwSepProtectedInstanceList, hwSepSegmentEntry=hwSepSegmentEntry, hwSepTopoSysname=hwSepTopoSysname, hwSepBlockPortIfname=hwSepBlockPortIfname, hwSepPortTable=hwSepPortTable, hwSepPortInfoGroup=hwSepPortInfoGroup, hwSepTcProtectionInterval=hwSepTcProtectionInterval, hwSepTopoPortNbrState=hwSepTopoPortNbrState, hwSepObjects=hwSepObjects, hwSepNbrPortId=hwSepNbrPortId, hwSepGroups=hwSepGroups, hwSepTopologyInfoGroup=hwSepTopologyInfoGroup, hwSepConfigPortRole=hwSepConfigPortRole, hwSepBlockPortHop=hwSepBlockPortHop, hwSepTxNbrPktCnt=hwSepTxNbrPktCnt, hwSepSegmentTable=hwSepSegmentTable, hwSepPortId1=hwSepPortId1, hwSepSysname=hwSepSysname, hwSepPortConfigPriority=hwSepPortConfigPriority, hwSepTxTcPktCnt=hwSepTxTcPktCnt, hwSepSegmentId=hwSepSegmentId, hwSepRxEpaPktCnt=hwSepRxEpaPktCnt, hwSepBlockPortMode=hwSepBlockPortMode, hwSepTopologyEntry=hwSepTopologyEntry, hwSepHop=hwSepHop, hwSepTopoPortFwdState=hwSepTopoPortFwdState, hwSepGlobalInfoGroup=hwSepGlobalInfoGroup, hwSepActivePortRole=hwSepActivePortRole, hwSepTxPreemptAckPktCnt=hwSepTxPreemptAckPktCnt, hwSepPortRowStatus=hwSepPortRowStatus, hwSepPreemptDelay=hwSepPreemptDelay, hwSepPortname=hwSepPortname, hwSepTcNotifySmartLinkCtrlVlan=hwSepTcNotifySmartLinkCtrlVlan, hwSepDealSmartLinkFlush=hwSepDealSmartLinkFlush, hwSepResetPktCnt=hwSepResetPktCnt, hwSepTopoConfigPortRole=hwSepTopoConfigPortRole, hwSepRxNbrPktCnt=hwSepRxNbrPktCnt, hwSepSegmentInfoGroup=hwSepSegmentInfoGroup, hwSepTopoPortname=hwSepTopoPortname, hwSepPortNbrState=hwSepPortNbrState, hwSepMIB=hwSepMIB, hwSepPortType=hwSepPortType, hwSepSegmentRowStatus=hwSepSegmentRowStatus, hwSepTcNotifyVpls=hwSepTcNotifyVpls)
