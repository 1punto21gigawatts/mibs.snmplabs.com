#
# PySNMP MIB module CISCO-XDSL-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-XDSL-LINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adslLineConfProfileEntry, = mibBuilder.importSymbols("ADSL-LINE-MIB", "adslLineConfProfileEntry")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Counter64, ObjectIdentity, MibIdentifier, Integer32, ModuleIdentity, iso, Gauge32, IpAddress, NotificationType, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Counter64", "ObjectIdentity", "MibIdentifier", "Integer32", "ModuleIdentity", "iso", "Gauge32", "IpAddress", "NotificationType", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoXdslLineMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 204))
ciscoXdslLineMIB.setRevisions(('2001-02-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoXdslLineMIB.setRevisionsDescriptions(('Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoXdslLineMIB.setLastUpdated('200102100000Z')
if mibBuilder.loadTexts: ciscoXdslLineMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoXdslLineMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-dslam@cisco.com')
if mibBuilder.loadTexts: ciscoXdslLineMIB.setDescription('The tables defined by this MIB module contain a collection of managed objects that are general in nature and apply to different types of modems. The structure of this module resembles the ADSL-LINE-MIB, CISCO-SDSL-LINE-MIB, ADSL-DMT-LINE-MIB, CISCO-ADSL-DMT-LINE-MIB, etc. Observe that the tables in this module do not necessarily extend the tables defined by the these mibs. Currently, only the table that contains the configuration information extends the profile tables defined by the above modules. Mib objects must fulfill the following criteria to be contained in this mib module: 1) The ADSL-LINE-MIB or the modem specific mibs such as CISCO-SDSL-LINE-MIB, CISCO-ADSL-DMT-LINE-MIB, etc. does not already contain a managed object representing the same information. 2) The mibs object must NOT be technology dependent, they must apply to various types of DSL modems, e.g. IDSL, SDSL, ADSL, etc. *** ABBREVIATIONS, ACRONYMS, AND SYMBOLS *** ADSL - Asymmetric Digital Subscriber Line. ATM - Asynchronous Transfer Mode. XTU-C - xDSL Transceiver Unit, Central Office end. XTU-R - xDSL Transceiver Unit, Remote terminal end. BER - Bit Error Ratio. BERT - Bit Error Ratio Test. DSP - Digital Signal Processor. DSL - Digital Subscriber Line. IDSL - IDSN Digital Subscriber Line. SDSL - Symetric Digital Subscriber Line. xDSL - Group term used to refer to ADSL, HDSL, SDSL, VDSL, IDSL, etc. All are digital technologies using existing copper lines provided by the thelephone companies.')
ciscoXdslLineMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 204, 1))
cXdslLineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 1), )
if mibBuilder.loadTexts: cXdslLineTable.setStatus('current')
if mibBuilder.loadTexts: cXdslLineTable.setDescription('This table contains enterprise-specific line parameters for XTU-C class xDSL devices supported by the system.')
cXdslLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cXdslLineEntry.setStatus('current')
if mibBuilder.loadTexts: cXdslLineEntry.setDescription('A set of enterprise-specific xDSL line parameters for an XTU-C class device. There exists an entry for each ifEntry with an ifType of xDSL such as adsl, sdsl, idsl, etc. that are supported by the system.')
cXdslLineTimeSinceLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslLineTimeSinceLastChange.setStatus('current')
if mibBuilder.loadTexts: cXdslLineTimeSinceLastChange.setDescription('Represents the time elapsed since the status of this interface was last changed.')
cXdslLineNoOfChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslLineNoOfChanges.setStatus('current')
if mibBuilder.loadTexts: cXdslLineNoOfChanges.setDescription('Represents the number of changes of the interface status since last reset of the agent or since a XTU-C modem was installed.')
cXdslTestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2), )
if mibBuilder.loadTexts: cXdslTestTable.setStatus('current')
if mibBuilder.loadTexts: cXdslTestTable.setDescription('This table contains enterprise-specific test parameters initiated by the XTU-C class devices supported by the system.')
cXdslTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cXdslTestEntry.setStatus('current')
if mibBuilder.loadTexts: cXdslTestEntry.setDescription('A set of enterprise-specific test parameters for an XTU-C class xDSL device. There exists an entry for each ifEntry with an ifType of xDSL such as adsl, sdsl, idsl, etc. that are supported by the system.')
cXdslTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("passed", 3), ("failed", 4), ("aborted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestStatus.setStatus('current')
if mibBuilder.loadTexts: cXdslTestStatus.setDescription("Represents status of the test per port. Once a test is completed or aborted, the status remains at passed, failed, or aborted until user clears it by setting cXdslTestTrigger to clear or starts a new test. This object will return 'passed' if there are no cXdslTestBertErrors and no cXdslTestBertBitErrors")
cXdslTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("bertDigitalLocal", 2), ("bertAnalogLocal", 3), ("bertDigitalRemote", 4), ("bertAnalogRemote", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslTestType.setStatus('current')
if mibBuilder.loadTexts: cXdslTestType.setDescription("The type of test to be performed. The test duration is determined by cXdslTestTime. All the test types inhibit the service on that line. The agent will only change cXdslTestType, if no test is active on the targeted port. The XTU-C may support other test types that are not defined in this mib, if such test is running this object will have a value of 'other'. cXdslTestTrigger will start the test when set to start.")
cXdslTestTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stop", 1), ("start", 2), ("clear", 3), ("ready", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslTestTrigger.setStatus('current')
if mibBuilder.loadTexts: cXdslTestTrigger.setDescription("Starts, stops (aborts) a test in progress or clears the test results. The agent will only start a new test, if no test is active on the targeted port. The value of this object returns 'ready' when read, the value cannot be set to 'ready'. The cXdslTestTrigger value affects cXdslTestStatus as following: value current TestStatus --> new TestStatus ----- ------------------ -------------- start inactive/pass/fail/ active aborted stop active aborted clear pass/fail/aborted inactive All other combinations will result in error, for instance, starting a test may fail due to a test already in progress. Likewise, stopping a test NOT in progress will result in an error. The value of cXdslTestType, cXdslTestStatus and cXdslTestTime will remain in the system until cleared or until the the agent is reset. When this object is set to 'clear' the test results are cleared, cXdslTestType is set to none and cXdslTestStatus is set to inactive. The 'old' test results will remain until completion of a 'new' test if test results are not cleared ")
cXdslTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslTestTime.setStatus('current')
if mibBuilder.loadTexts: cXdslTestTime.setDescription('Test duration. Time interval between 1 - 30 minutes. ')
cXdslTestBertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("noError", 0), ("cpeBertAborted", 1), ("lostCpeSync", 2), ("noCpeSync", 3), ("noCpeResults", 4), ("coBertAborted", 5), ("lostCoSync", 6), ("noCoSync", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestBertErrors.setStatus('current')
if mibBuilder.loadTexts: cXdslTestBertErrors.setDescription('Errors during BERT test. The test will abort if any BERT errors occur. Note: that even if there are no BERT errors the test can still fail due to BertBitErrors. Bit Description --- ----------- 0 No BERT errors 1 XTU-R BERT aborted 2 XTU-R lost sync during BERT 3 XTU-R never got in sync 4 No XTU-R BERT results 5 XTU-C BERT aborted 6 XTU-C lost sync during BERT 7 XTU-C never got in sync')
cXdslTestBertBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestBertBitErrors.setStatus('current')
if mibBuilder.loadTexts: cXdslTestBertBitErrors.setDescription('This value represents the number of BERT bit errors accumulated during the test duration, the value may not be available until completion of the test. The test will fail if this value is greater than 0.')
cXdslTestBertRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestBertRunTime.setStatus('current')
if mibBuilder.loadTexts: cXdslTestBertRunTime.setDescription('This value represents the BERT run time in seconds, the value may not be available until completion of the test.')
cXdslTestBertBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000000))).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cXdslTestBertBitRate.setStatus('current')
if mibBuilder.loadTexts: cXdslTestBertBitRate.setDescription('This value represents the BERT bitrate in bps that was detected during the BERT test, the value may not be available until completion of the test.')
cXdslModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 3), )
if mibBuilder.loadTexts: cXdslModeTable.setStatus('current')
if mibBuilder.loadTexts: cXdslModeTable.setDescription('This table contains enterprise-specific mode parameters initiated by the XTU-C class devices supported by the system.')
cXdslModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cXdslModeEntry.setStatus('current')
if mibBuilder.loadTexts: cXdslModeEntry.setDescription('A set of enterprise-specific mode parameters for an XTU-C class xDSL device. There exists an entry for each ifEntry with an ifType of xDSL such as adsl, sdsl, idsl, etc. that are supported by the system.')
cXdslModeLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("loopbackAnalogLocal", 2), ("loopbackDigitalLocal", 3), ("loopbackAnalogRemote", 4), ("loopbackDigitalRemote", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslModeLoopback.setStatus('current')
if mibBuilder.loadTexts: cXdslModeLoopback.setDescription("The value of this object specifies the loopback mode of this interface. The interface will stay in loopback mode until this object is set to disabled. The XTU-C may support other mode types that are not defined in this mib, if such mode is running, this object will have a value of 'other'. The loopback modes will inhibit the service on that line.")
cXdslModeSpectrum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("spectrum1", 2), ("spectrum2", 3), ("spectrum3", 4), ("spectrum4", 5), ("spectrum5", 6), ("spectrum6", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cXdslModeSpectrum.setStatus('current')
if mibBuilder.loadTexts: cXdslModeSpectrum.setDescription('The value of this object specifies the spectrum mode of this interface. The interface will stay in spectrum mode until this object is set to disabled. The modes will inhibit the service on that line. Not all spectrum modes are avaiable for all types of modems. The modes translate as follows: sdsl & shdsl ------------ spectrum1 = tx-1 spectrum2 = tx-3 spectrum3 = tx+1 spectrum4 = tx+3 spectrum5 = spec2PT spectrum6 = spec4PT dmt --- spectrum1 = reverb spectrum2 = medley spectrum3 = pilot spectrum4 = not supported spectrum5 = not supported spectrum6 = not supported cap --- spectrum1 = 136k spectrum2 = 340k spectrum3 = 680k spectrum4 = 952k spectrum5 = not supported spectrum6 = not supported ')
cXdslLineConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4), )
if mibBuilder.loadTexts: cXdslLineConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cXdslLineConfProfileTable.setDescription('This table extends the adslLineConfProfileTable and contains enterprise-specific xDSL configuration information. Entries in this table apply to more than one type of DSL modems')
cXdslLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4, 1), )
adslLineConfProfileEntry.registerAugmentions(("CISCO-XDSL-LINE-MIB", "cXdslLineConfProfileEntry"))
cXdslLineConfProfileEntry.setIndexNames(*adslLineConfProfileEntry.getIndexNames())
if mibBuilder.loadTexts: cXdslLineConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cXdslLineConfProfileEntry.setDescription('A configuration profile containing enterprise-specific xDSL line configuration information. An entry exist in this table for every profile created by adslLineConfProfileRowStatus which will also modify or delete an existing row in this table.')
cXdslLineConfPayloadScrambled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cXdslLineConfPayloadScrambled.setStatus('current')
if mibBuilder.loadTexts: cXdslLineConfPayloadScrambled.setDescription('This object specifies whether ATM Payload Scrambling is enabled for this profile.')
cXdslLineConfAlarmsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cXdslLineConfAlarmsEnabled.setStatus('current')
if mibBuilder.loadTexts: cXdslLineConfAlarmsEnabled.setDescription('This object specifies whether Alarms are enabled for this profile.')
cXdslLineConfLinkUpDownTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 204, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cXdslLineConfLinkUpDownTrap.setStatus('current')
if mibBuilder.loadTexts: cXdslLineConfLinkUpDownTrap.setDescription('This object specifies whether Link Up/Down traps are enabled for this profile.')
ciscoXdslLineMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 204, 3))
ciscoXdslLineMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 1))
ciscoXdslLineMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2))
ciscoXdslLineMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 1, 1)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslLineGroup"), ("CISCO-XDSL-LINE-MIB", "cXdslLineConfProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoXdslLineMIBCompliance = ciscoXdslLineMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoXdslLineMIBCompliance.setDescription('The compliance statement for entities that implement the CISCO-XDSL-LINE-MIB. Implementation of this MIB is mandatory for any platform that supports one or more xDSL type interfaces.')
cXdslLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2, 1)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslLineTimeSinceLastChange"), ("CISCO-XDSL-LINE-MIB", "cXdslLineNoOfChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cXdslLineGroup = cXdslLineGroup.setStatus('current')
if mibBuilder.loadTexts: cXdslLineGroup.setDescription('A collection of managed objects defining the enterprise- specific attributes of a xDSL line.')
cXdslLineConfProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2, 2)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslLineConfPayloadScrambled"), ("CISCO-XDSL-LINE-MIB", "cXdslLineConfAlarmsEnabled"), ("CISCO-XDSL-LINE-MIB", "cXdslLineConfLinkUpDownTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cXdslLineConfProfileGroup = cXdslLineConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: cXdslLineConfProfileGroup.setDescription('A collection of managed objects defining the enterprise-specific line configuration information associated with one or more xDSL XTU-C class devices.')
cXdslTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2, 3)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslTestStatus"), ("CISCO-XDSL-LINE-MIB", "cXdslTestType"), ("CISCO-XDSL-LINE-MIB", "cXdslTestTrigger"), ("CISCO-XDSL-LINE-MIB", "cXdslTestTime"), ("CISCO-XDSL-LINE-MIB", "cXdslTestBertErrors"), ("CISCO-XDSL-LINE-MIB", "cXdslTestBertBitErrors"), ("CISCO-XDSL-LINE-MIB", "cXdslTestBertRunTime"), ("CISCO-XDSL-LINE-MIB", "cXdslTestBertBitRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cXdslTestGroup = cXdslTestGroup.setStatus('current')
if mibBuilder.loadTexts: cXdslTestGroup.setDescription('A collection of managed objects defining the enterprise-specific test options associated with one or more xDSL XTU-C class devices. Implemention of this group is optional.')
cXdslModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 204, 3, 2, 4)).setObjects(("CISCO-XDSL-LINE-MIB", "cXdslModeLoopback"), ("CISCO-XDSL-LINE-MIB", "cXdslModeSpectrum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cXdslModeGroup = cXdslModeGroup.setStatus('current')
if mibBuilder.loadTexts: cXdslModeGroup.setDescription('A collection of managed objects defining the enterprise-specific line mode options associated with one or more xDSL XTU-C class devices. Implemention of this group is optional.')
mibBuilder.exportSymbols("CISCO-XDSL-LINE-MIB", ciscoXdslLineMIBCompliance=ciscoXdslLineMIBCompliance, cXdslTestEntry=cXdslTestEntry, cXdslTestTrigger=cXdslTestTrigger, cXdslTestBertBitRate=cXdslTestBertBitRate, cXdslTestTime=cXdslTestTime, ciscoXdslLineMIB=ciscoXdslLineMIB, cXdslTestStatus=cXdslTestStatus, cXdslLineConfPayloadScrambled=cXdslLineConfPayloadScrambled, cXdslModeEntry=cXdslModeEntry, cXdslTestBertRunTime=cXdslTestBertRunTime, cXdslTestTable=cXdslTestTable, cXdslTestBertBitErrors=cXdslTestBertBitErrors, cXdslLineConfProfileEntry=cXdslLineConfProfileEntry, cXdslLineConfLinkUpDownTrap=cXdslLineConfLinkUpDownTrap, cXdslLineNoOfChanges=cXdslLineNoOfChanges, cXdslLineTable=cXdslLineTable, cXdslLineEntry=cXdslLineEntry, cXdslModeGroup=cXdslModeGroup, cXdslLineTimeSinceLastChange=cXdslLineTimeSinceLastChange, cXdslLineGroup=cXdslLineGroup, cXdslModeLoopback=cXdslModeLoopback, cXdslLineConfProfileTable=cXdslLineConfProfileTable, cXdslLineConfProfileGroup=cXdslLineConfProfileGroup, cXdslTestGroup=cXdslTestGroup, cXdslModeTable=cXdslModeTable, cXdslModeSpectrum=cXdslModeSpectrum, ciscoXdslLineMIBGroups=ciscoXdslLineMIBGroups, cXdslTestType=cXdslTestType, ciscoXdslLineMIBConformance=ciscoXdslLineMIBConformance, ciscoXdslLineMIBObjects=ciscoXdslLineMIBObjects, cXdslLineConfAlarmsEnabled=cXdslLineConfAlarmsEnabled, PYSNMP_MODULE_ID=ciscoXdslLineMIB, ciscoXdslLineMIBCompliances=ciscoXdslLineMIBCompliances, cXdslTestBertErrors=cXdslTestBertErrors)
