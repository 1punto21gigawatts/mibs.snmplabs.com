#
# PySNMP MIB module BLACKBERRYSERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLACKBERRYSERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, MibIdentifier, iso, Bits, Unsigned32, Integer32, Counter32, NotificationType, enterprises, Gauge32, IpAddress, ObjectIdentity, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "MibIdentifier", "iso", "Bits", "Unsigned32", "Integer32", "Counter32", "NotificationType", "enterprises", "Gauge32", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rim = MibIdentifier((1, 3, 6, 1, 4, 1, 3530))
blackBerryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3530, 5))
besTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 3530, 5, 9))
version = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('mandatory')
if mibBuilder.loadTexts: version.setDescription('Version number of the BlackBerryServer MIB.')
besTotMsgsPending = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besTotMsgsPending.setStatus('mandatory')
if mibBuilder.loadTexts: besTotMsgsPending.setDescription('Total number of messages queued for delivery to handhelds.')
besTotMsgsSent = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besTotMsgsSent.setStatus('mandatory')
if mibBuilder.loadTexts: besTotMsgsSent.setDescription('Total number of messages sent from handhelds.')
besTotMsgsRecvd = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besTotMsgsRecvd.setStatus('mandatory')
if mibBuilder.loadTexts: besTotMsgsRecvd.setDescription('Total number of messages delivered to handhelds.')
besTotMsgsXpired = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besTotMsgsXpired.setStatus('mandatory')
if mibBuilder.loadTexts: besTotMsgsXpired.setDescription('Total number of messages that have expired.')
besTotMsgsFiltered = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besTotMsgsFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: besTotMsgsFiltered.setDescription('Total number of messages that have been filtered.')
besTotMsgsSentPerMin = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besTotMsgsSentPerMin.setStatus('mandatory')
if mibBuilder.loadTexts: besTotMsgsSentPerMin.setDescription('Total number of messages sent from handhelds per min.')
besTotMsgsRecvdPerMin = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besTotMsgsRecvdPerMin.setStatus('mandatory')
if mibBuilder.loadTexts: besTotMsgsRecvdPerMin.setDescription('Total number of messages delivered to handhelds per min.')
besNumServerInfoAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besNumServerInfoAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: besNumServerInfoAvailable.setDescription('The number of BlackBerry Servers installed on this system, information for which is exposed and currently available via SNMP.')
besConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3530, 5, 20), )
if mibBuilder.loadTexts: besConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigTable.setDescription('This table represents Configuration container for BlackBerry Servers running on the system.')
besConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1), ).setIndexNames((0, "BLACKBERRYSERVER-MIB", "besConfigServerInstance"))
if mibBuilder.loadTexts: besConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigEntry.setDescription('besSrvConfigTable entries.')
besConfigServerInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigServerInstance.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigServerInstance.setDescription('BlackBerry Server instance number (1..n).')
besConfigServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigServerName.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigServerName.setDescription('BlackBerry Server name.')
besConfigVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigVersionString.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigVersionString.setDescription('BlackBerry Server version information.')
besConfigReleaseMaj = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigReleaseMaj.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigReleaseMaj.setDescription('Major release.')
besConfigReleaseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigReleaseMin.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigReleaseMin.setDescription('Minor release.')
besConfigReleaseServicePack = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigReleaseServicePack.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigReleaseServicePack.setDescription('Service Pack release.')
besConfigReleaseBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigReleaseBuild.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigReleaseBuild.setDescription('Build number.')
besConfigLicenceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigLicenceTotal.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigLicenceTotal.setDescription('Total number of licences installed on the server.')
besConfigLicenceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigLicenceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigLicenceUsed.setDescription('Total number of licences in use currently.')
besConfigLicenceRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigLicenceRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigLicenceRemaining.setDescription('Total number of licences remaining for use.')
besConfigServerUID = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigServerUID.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigServerUID.setDescription('UID of this BlackBerry Server instance.')
besConfigSystemAttendant = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigSystemAttendant.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigSystemAttendant.setDescription('System Attendant configured.')
besConfigSRPHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigSRPHost.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigSRPHost.setDescription('SRP Host configured.')
besConfigSRPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigSRPPort.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigSRPPort.setDescription('SRP Port configured.')
besConfigAutoBCCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigAutoBCCEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigAutoBCCEnabled.setDescription('Is the AutoBCC function enabled? 1 - yes, 0 - no.')
besConfigAutoBCCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigAutoBCCAddress.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigAutoBCCAddress.setDescription('If AutoBCC function enabled, address it is configured to send to. Empty if not enabled.')
besConfigForceSaveInSentEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigForceSaveInSentEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigForceSaveInSentEnabled.setDescription('Is the Force Save in Sent function enabled? Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besConfigWirelessEmailRecoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 20, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besConfigWirelessEmailRecoEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: besConfigWirelessEmailRecoEnabled.setDescription('Is the Wireless Email Reco enabled?')
besSysHealthTable = MibTable((1, 3, 6, 1, 4, 1, 3530, 5, 25), )
if mibBuilder.loadTexts: besSysHealthTable.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthTable.setDescription('This table represents System Health container for BlackBerry Servers running on the system.')
besSysHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1), ).setIndexNames((0, "BLACKBERRYSERVER-MIB", "besSysHealthServerInstance"))
if mibBuilder.loadTexts: besSysHealthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthEntry.setDescription('besSysHealthTable entries.')
besSysHealthServerInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthServerInstance.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthServerInstance.setDescription('BlackBerry Server instance number (1..n).')
besSysHealthSrpConnectedState = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthSrpConnectedState.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthSrpConnectedState.setDescription('Is the BlackBerry Server connected to the SRP Host?')
besSysHealthSrpLastConnectDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthSrpLastConnectDate.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthSrpLastConnectDate.setDescription('Datetime of last successful connection to the SRP Host.')
besSysHealthSrpReconnectSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthSrpReconnectSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthSrpReconnectSuccess.setDescription('Number of times the BlackBerry Server has successfully reconnected to SRP Host since it was started.')
besSysHealthSrpReconnectsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthSrpReconnectsFail.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthSrpReconnectsFail.setDescription('Number of times the BlackBerry Server has tried, but failed, to connect to SRP Host since it was started.')
besSysHealthSrpTotalSecNotConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthSrpTotalSecNotConnected.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthSrpTotalSecNotConnected.setDescription('Total number of seconds the BlackBerry Server has NOT been connected to SRP Host since startup.')
besSysHealthSrpLastErrorText = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthSrpLastErrorText.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthSrpLastErrorText.setDescription('Error text about the last failed connection attempt.')
besSysHealthSrpLastErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthSrpLastErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthSrpLastErrorTime.setDescription('Datetime of the last connection error.')
besSysHealthMsgTotalProc = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgTotalProc.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgTotalProc.setDescription('Total number of messages processed by the BlackBerry server since startup. Includes to handheld, from handheld and filtered messages.')
besSysHealthMsgToHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgToHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgToHandheld.setDescription('Total number of messages that passed the filter criteria and were sent out to handhelds.')
besSysHealthMsgFromHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgFromHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgFromHandheld.setDescription('Total number of messages sent from handhelds.')
besSysHealthMsgFilteredByUser = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgFilteredByUser.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgFilteredByUser.setDescription('Total number of messages filtered out by user filter settings.')
besSysHealthMsgFilteredByGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgFilteredByGlobal.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgFilteredByGlobal.setDescription('Total number of messages filtered out by the global filter settings.')
besSysHealthMsgPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgPending.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgPending.setDescription('Total number of messages pending delivery.')
besSysHealthMsgExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgExpired.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgExpired.setDescription('Total number of messages expired.')
besSysHealthMsgErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgErrors.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgErrors.setDescription('Total number of messages that were non-deliverable due to error.')
besSysHealthMsgMoreRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMsgMoreRequests.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMsgMoreRequests.setDescription('Total number of MORE requests issued from devices.')
besSysHealthCalUsersOTACEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthCalUsersOTACEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthCalUsersOTACEnabled.setDescription('Total number of users enabled for OTA Calendar.')
besSysHealthCalEventToHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthCalEventToHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthCalEventToHandheld.setDescription('Total number of calendar events sent to handhelds.')
besSysHealthCalEventFromHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthCalEventFromHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthCalEventFromHandheld.setDescription('Total number of calendar events sent by handhelds.')
besSysHealthWERUsersEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthWERUsersEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthWERUsersEnabled.setDescription('Total number of users enabled for Wireless Email Reco.')
besSysHealthWERRequestsToHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthWERRequestsToHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthWERRequestsToHandheld.setDescription('Total number of Wireless Email Reco events sent to handhelds.')
besSysHealthWERRequestsFromHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthWERRequestsFromHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthWERRequestsFromHandheld.setDescription('Total number of Wireless Email Reco events sent from handhelds.')
besSysHealthMdsDeviceConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsDeviceConnections.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsDeviceConnections.setDescription('Number of handheld-initiated connections.')
besSysHealthMdsPushConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsPushConnections.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsPushConnections.setDescription('Number of push server connections.')
besSysHealthMdsTotalBytesFromDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsTotalBytesFromDevices.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsTotalBytesFromDevices.setDescription('Total data size (in bytes) from device.')
besSysHealthMdsMaxPacketSizeFromDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsMaxPacketSizeFromDevice.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsMaxPacketSizeFromDevice.setDescription('Maximum packet data size (in bytes) from device.')
besSysHealthMdsAvgPacketSizeFromDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsAvgPacketSizeFromDevice.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsAvgPacketSizeFromDevice.setDescription('Average packet data size (in bytes) from device.')
besSysHealthMdsTotalBytesToDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsTotalBytesToDevice.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsTotalBytesToDevice.setDescription('Total data size (in bytes) from push.')
besSysHealthMdsMaxPacketSizeToDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsMaxPacketSizeToDevice.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsMaxPacketSizeToDevice.setDescription('Maximum packet data size (in bytes) from push.')
besSysHealthMdsAvgPacketSizeToDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsAvgPacketSizeToDevice.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsAvgPacketSizeToDevice.setDescription('Average packet data size (in bytes) from push.')
besSysHealthMdsRefusedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsRefusedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsRefusedPackets.setDescription('Number of packets refused by SRP Host.')
besSysHealthMdsInvalidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsInvalidPackets.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsInvalidPackets.setDescription('Number of invalid packets received by MDS.')
besSysHealthMdsConnectionSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsConnectionSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsConnectionSuccess.setDescription('Number of successful connections initiated by MDS to another address/service.')
besSysHealthMdsConnectionFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsConnectionFailure.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsConnectionFailure.setDescription('Number of failed connections initiated by MDS to another address/service.')
besSysHealthMdsConnectionTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthMdsConnectionTruncated.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthMdsConnectionTruncated.setDescription('Number of truncated connections encountered by MDS.')
besSysHealthV1MsgsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthV1MsgsPending.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthV1MsgsPending.setDescription('Total number of messages queued for delivery to handhelds.')
besSysHealthV1TotalMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 203), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthV1TotalMsgsSent.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthV1TotalMsgsSent.setDescription('Total number of messages sent from handhelds.')
besSysHealthV1TotalMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 204), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthV1TotalMsgsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthV1TotalMsgsReceived.setDescription('Total number of messages delivered to handhelds.')
besSysHealthV1TotalMsgsExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 205), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthV1TotalMsgsExpired.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthV1TotalMsgsExpired.setDescription('Total number of messages that have expired.')
besSysHealthV1TotalMsgsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 206), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthV1TotalMsgsFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthV1TotalMsgsFiltered.setDescription('Total number of messages that have been filtered.')
besSysHealthV1MsgsSentPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 207), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthV1MsgsSentPerMin.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthV1MsgsSentPerMin.setDescription('Total number of messages sent from handhelds per min.')
besSysHealthV1MsgsRecvdPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthV1MsgsRecvdPerMin.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthV1MsgsRecvdPerMin.setDescription('Total number of messages delivered to handhelds per min.')
besSysHealthV1SRPConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 25, 1, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSysHealthV1SRPConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: besSysHealthV1SRPConnectState.setDescription('Indication of the state of the SRP connection.')
besMailServerHealthTable = MibTable((1, 3, 6, 1, 4, 1, 3530, 5, 26), )
if mibBuilder.loadTexts: besMailServerHealthTable.setStatus('mandatory')
if mibBuilder.loadTexts: besMailServerHealthTable.setDescription('This table contains the list of mail servers as well as statistics and performance values related to each particular mail server. Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besMailServerHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3530, 5, 26, 1), ).setIndexNames((0, "BLACKBERRYSERVER-MIB", "besMailServerHealthServerInstance"), (0, "BLACKBERRYSERVER-MIB", "besMailServerHealthServerId"))
if mibBuilder.loadTexts: besMailServerHealthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: besMailServerHealthEntry.setDescription('Mail Server entries. The BlackBerry Server instance and Server Health user ID are used as the index value associated with each row. Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besMailServerHealthServerInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besMailServerHealthServerInstance.setStatus('mandatory')
if mibBuilder.loadTexts: besMailServerHealthServerInstance.setDescription('Instance id of the BlackBerry Server associated with this row. Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besMailServerHealthServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besMailServerHealthServerId.setStatus('mandatory')
if mibBuilder.loadTexts: besMailServerHealthServerId.setDescription('Instance id of the Mail Server associated with this row. Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besMailServerHealthServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 26, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besMailServerHealthServerName.setStatus('mandatory')
if mibBuilder.loadTexts: besMailServerHealthServerName.setDescription('Name of the Mail Server associated with this row. Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besMailServerHealthTotalUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besMailServerHealthTotalUsers.setStatus('mandatory')
if mibBuilder.loadTexts: besMailServerHealthTotalUsers.setDescription('Number of users who are homed on this mail server. Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besMailServerHealthAvgResponceTime10min = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 26, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besMailServerHealthAvgResponceTime10min.setStatus('mandatory')
if mibBuilder.loadTexts: besMailServerHealthAvgResponceTime10min.setDescription('Average responce time (in milliseconds) for operations for users on this mail server in the last 10 minutes. Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besMailServerHealthFailedConn10min = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 26, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besMailServerHealthFailedConn10min.setStatus('mandatory')
if mibBuilder.loadTexts: besMailServerHealthFailedConn10min.setDescription('Number of failed connection attempts to this mail server in the last 10 minutes. Applies to BlackBerry Enterprise Server for Lotus Domino only.')
besUserHealthTable = MibTable((1, 3, 6, 1, 4, 1, 3530, 5, 30), )
if mibBuilder.loadTexts: besUserHealthTable.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthTable.setDescription('This table contains the list of user configuration, statistics and performance values related to each particular user and device which are exist for a given BES.')
besUserHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1), ).setIndexNames((0, "BLACKBERRYSERVER-MIB", "besUserHealthServerInstance"), (0, "BLACKBERRYSERVER-MIB", "besUserHealthUserId"))
if mibBuilder.loadTexts: besUserHealthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthEntry.setDescription('mssqlDbOptionTable entries. The BlackBerry Server instance and User Health user ID are used as the index value associated with each row.')
besUserHealthServerInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthServerInstance.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthServerInstance.setDescription('Instance id of the BlackBerry Server associated with this row.')
besUserHealthUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthUserId.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthUserId.setDescription('Instance id of the user associated with this row.')
besUserHealthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthUserName.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthUserName.setDescription('User name of the user associated with this row.')
besUserHealthLastErrorText = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthLastErrorText.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthLastErrorText.setDescription('The last time an operation for this user failed, this is the error text we got back.')
besUserHealthLastErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthLastErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthLastErrorTime.setDescription('The datetime of the last error for the user associated with this row.')
besUserHealthDeviceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthDeviceNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthDeviceNetwork.setDescription('Network the device is on for the user associated with this row.')
besUserHealthDevicePIN = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthDevicePIN.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthDevicePIN.setDescription('PIN number of the device for the user associated with this row.')
besUserHealthDeviceInCradle = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthDeviceInCradle.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthDeviceInCradle.setDescription('Is the device in cradle?')
besUserHealthNumRedirectedFolders = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthNumRedirectedFolders.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthNumRedirectedFolders.setDescription('Number of redirected folders the user has configed.')
besUserHealthSaveInSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthSaveInSent.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthSaveInSent.setDescription("Is 'save in sent' enabled for the user associated with this row?")
besUserHealthRedirectEnabledOnDesktop = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthRedirectEnabledOnDesktop.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthRedirectEnabledOnDesktop.setDescription('Is redirection enabled in Desktop Manager for the user associated with this row?')
besUserHealthDisableWhileInCradle = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthDisableWhileInCradle.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthDisableWhileInCradle.setDescription('Is the option in Desktop Manager to disable redirection while in the cradle?')
besUserHealthFullyConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthFullyConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthFullyConfigured.setDescription('Is the Is the device fully configured with PIN & encryption key?')
besUserHealthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthEnabled.setDescription('Is the user currently enabled?')
besUserHealthMsgTotalProc = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgTotalProc.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgTotalProc.setDescription('Total number of Messages processed by the BES since startup for this user. Includes to handheld, from handheld and filtered.')
besUserHealthMsgToHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgToHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgToHandheld.setDescription('Total number of messages that passed the filter criteria and were sent out to the handheld. Messaging only (no calendar).')
besUserHealthMsgFromHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgFromHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgFromHandheld.setDescription('Total number of messages sent from handheld. Messaging only (no calendar).')
besUserHealthMsgFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgFiltered.setDescription('Total number of messages filtered out by user filter settings.')
besUserHealthMsgPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgPending.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgPending.setDescription('Total number of messages pending delivery.')
besUserHealthMsgExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgExpired.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgExpired.setDescription('Total number of messages expired.')
besUserHealthMsgErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgErrors.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgErrors.setDescription('Total number of messages that were non-deliverable due to error.')
besUserHealthMsgMoreRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgMoreRequests.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgMoreRequests.setDescription('Total number of MORE requests issued from device.')
besUserHealthMsgForwardedFromDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgForwardedFromDevice.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgForwardedFromDevice.setDescription('Total number of messages the user has forwarded from the device.')
besUserHealthMsgRepliedToWithText = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthMsgRepliedToWithText.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthMsgRepliedToWithText.setDescription('Total number of messages that were replies-with-text from the device.')
besUserHealthLastTimeInCradle = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthLastTimeInCradle.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthLastTimeInCradle.setDescription('Datetime of the last time the user had the device in the cradle.')
besUserHealthLastInteractionWithDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthLastInteractionWithDevice.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthLastInteractionWithDevice.setDescription('Datetime of the last interaction the BES had with the device.')
besUserHealthLastMessageForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthLastMessageForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthLastMessageForwarded.setDescription('Datetime of the last message (mail or calendar) that was sent to the device.')
besUserHealthLastKeyDateGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 63), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthLastKeyDateGenerated.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthLastKeyDateGenerated.setDescription('Datetime of the last time the user generated an encryption key.')
besUserHealthAvgKBForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthAvgKBForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthAvgKBForwarded.setDescription('Average size of messages forwarded from the device (in kb). I.e. if I receive a message with a 5mb attachment and forward it from my handheld to another user, this value would be 5120kb.')
besUserHealthAvgKBReplyWithText = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthAvgKBReplyWithText.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthAvgKBReplyWithText.setDescription('Similar to besUserHealthAvgKBForwarded, but for messages that are replies-with-text.')
besUserHealthAvgLatencyInSecLast10Msg = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthAvgLatencyInSecLast10Msg.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthAvgLatencyInSecLast10Msg.setDescription('For the last 10 messages sent to the handheld, the average length of time (in sec) between the message arriving in the mail system and a DELIVERED on the device.')
besUserHealthCalOTAEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthCalOTAEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthCalOTAEnabled.setDescription('Is the user OTAC enabled?')
besUserHealthCalEventToHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthCalEventToHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthCalEventToHandheld.setDescription('Total number of calendar events sent to the device.')
besUserHealthCalEventFromHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthCalEventFromHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthCalEventFromHandheld.setDescription('Total number of calendar events sent from the device.')
besUserHealthWirelessEmailRecoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthWirelessEmailRecoEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthWirelessEmailRecoEnabled.setDescription('Is the user enabled for Wireless Email Reco?')
besUserHealthWERRequestsToHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthWERRequestsToHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthWERRequestsToHandheld.setDescription('Total number of Wireless Email Reco events sent to handhelds')
besUserHealthWERRequestsFromHandheld = MibTableColumn((1, 3, 6, 1, 4, 1, 3530, 5, 30, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: besUserHealthWERRequestsFromHandheld.setStatus('mandatory')
if mibBuilder.loadTexts: besUserHealthWERRequestsFromHandheld.setDescription('Total number of Wireless Email Reco events sent from handhelds')
besSRPConnectState = MibScalar((1, 3, 6, 1, 4, 1, 3530, 5, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: besSRPConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: besSRPConnectState.setDescription('Indication of the state of the SRP connection.')
besSRPConnectEvent = NotificationType((1, 3, 6, 1, 4, 1, 3530, 5) + (0,1)).setObjects(("BLACKBERRYSERVER-MIB", "besSRPConnectState"))
if mibBuilder.loadTexts: besSRPConnectEvent.setDescription('SRPConnect state.')
besHungThreadEvent = NotificationType((1, 3, 6, 1, 4, 1, 3530, 5) + (0,3))
if mibBuilder.loadTexts: besHungThreadEvent.setDescription('Event related to detection of hung threads in Exchange BES.')
besMailServerDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 3530, 5) + (0,5))
if mibBuilder.loadTexts: besMailServerDownEvent.setDescription('Event is generated when more than one user (or one user if there is only one) gets more than one error connecting to a particular mail server, and those errors are not Access Control related.')
besMDStoBESConnectionEvent = NotificationType((1, 3, 6, 1, 4, 1, 3530, 5) + (0,7))
if mibBuilder.loadTexts: besMDStoBESConnectionEvent.setDescription('MDS to BES connection state has changed.')
besMDSStartStopEvent = NotificationType((1, 3, 6, 1, 4, 1, 3530, 5) + (0,11))
if mibBuilder.loadTexts: besMDSStartStopEvent.setDescription('MDS has started or stopped.')
besMDStoDBConnectionEvent = NotificationType((1, 3, 6, 1, 4, 1, 3530, 5) + (0,13))
if mibBuilder.loadTexts: besMDStoDBConnectionEvent.setDescription('MDS to database connection state has changed.')
besCriticalEvent = NotificationType((1, 3, 6, 1, 4, 1, 3530, 5) + (0,21))
if mibBuilder.loadTexts: besCriticalEvent.setDescription('Critical event has happened. These are the events normally logged with 1xxxx and 5xxxx event IDs.')
mibBuilder.exportSymbols("BLACKBERRYSERVER-MIB", besSysHealthWERRequestsToHandheld=besSysHealthWERRequestsToHandheld, besTrapVariables=besTrapVariables, besConfigAutoBCCAddress=besConfigAutoBCCAddress, besSysHealthV1TotalMsgsSent=besSysHealthV1TotalMsgsSent, besUserHealthMsgFiltered=besUserHealthMsgFiltered, besSysHealthMdsConnectionTruncated=besSysHealthMdsConnectionTruncated, besSysHealthTable=besSysHealthTable, besConfigSystemAttendant=besConfigSystemAttendant, besTotMsgsSentPerMin=besTotMsgsSentPerMin, besSysHealthMdsMaxPacketSizeFromDevice=besSysHealthMdsMaxPacketSizeFromDevice, besSysHealthMsgToHandheld=besSysHealthMsgToHandheld, besConfigLicenceUsed=besConfigLicenceUsed, besSysHealthSrpLastErrorText=besSysHealthSrpLastErrorText, besMailServerHealthAvgResponceTime10min=besMailServerHealthAvgResponceTime10min, besUserHealthLastInteractionWithDevice=besUserHealthLastInteractionWithDevice, besSysHealthSrpReconnectsFail=besSysHealthSrpReconnectsFail, besNumServerInfoAvailable=besNumServerInfoAvailable, besSysHealthMsgErrors=besSysHealthMsgErrors, besMailServerHealthServerInstance=besMailServerHealthServerInstance, besUserHealthLastTimeInCradle=besUserHealthLastTimeInCradle, besTotMsgsPending=besTotMsgsPending, besUserHealthWERRequestsToHandheld=besUserHealthWERRequestsToHandheld, besUserHealthMsgPending=besUserHealthMsgPending, besSysHealthMdsConnectionFailure=besSysHealthMdsConnectionFailure, besConfigWirelessEmailRecoEnabled=besConfigWirelessEmailRecoEnabled, besSysHealthEntry=besSysHealthEntry, besUserHealthEntry=besUserHealthEntry, besSysHealthMsgFilteredByGlobal=besSysHealthMsgFilteredByGlobal, besSysHealthMdsAvgPacketSizeToDevice=besSysHealthMdsAvgPacketSizeToDevice, besConfigReleaseBuild=besConfigReleaseBuild, besMailServerHealthTotalUsers=besMailServerHealthTotalUsers, besUserHealthDeviceInCradle=besUserHealthDeviceInCradle, besUserHealthAvgKBForwarded=besUserHealthAvgKBForwarded, besSysHealthCalEventToHandheld=besSysHealthCalEventToHandheld, besSysHealthV1TotalMsgsExpired=besSysHealthV1TotalMsgsExpired, version=version, besConfigVersionString=besConfigVersionString, besUserHealthCalOTAEnabled=besUserHealthCalOTAEnabled, besUserHealthServerInstance=besUserHealthServerInstance, besSRPConnectState=besSRPConnectState, besSysHealthWERUsersEnabled=besSysHealthWERUsersEnabled, besConfigServerUID=besConfigServerUID, besSysHealthMsgFilteredByUser=besSysHealthMsgFilteredByUser, besConfigReleaseMaj=besConfigReleaseMaj, besSysHealthSrpLastConnectDate=besSysHealthSrpLastConnectDate, besUserHealthNumRedirectedFolders=besUserHealthNumRedirectedFolders, besSysHealthSrpReconnectSuccess=besSysHealthSrpReconnectSuccess, besUserHealthFullyConfigured=besUserHealthFullyConfigured, besTotMsgsXpired=besTotMsgsXpired, besSysHealthV1MsgsRecvdPerMin=besSysHealthV1MsgsRecvdPerMin, besUserHealthLastKeyDateGenerated=besUserHealthLastKeyDateGenerated, besUserHealthMsgToHandheld=besUserHealthMsgToHandheld, besUserHealthMsgTotalProc=besUserHealthMsgTotalProc, besUserHealthRedirectEnabledOnDesktop=besUserHealthRedirectEnabledOnDesktop, besSysHealthCalEventFromHandheld=besSysHealthCalEventFromHandheld, besConfigAutoBCCEnabled=besConfigAutoBCCEnabled, besConfigServerName=besConfigServerName, besSysHealthMsgExpired=besSysHealthMsgExpired, besSysHealthMdsPushConnections=besSysHealthMdsPushConnections, besSysHealthMsgMoreRequests=besSysHealthMsgMoreRequests, besConfigEntry=besConfigEntry, besSysHealthSrpConnectedState=besSysHealthSrpConnectedState, besSysHealthMdsTotalBytesToDevice=besSysHealthMdsTotalBytesToDevice, besUserHealthMsgExpired=besUserHealthMsgExpired, besUserHealthTable=besUserHealthTable, besConfigSRPHost=besConfigSRPHost, besConfigServerInstance=besConfigServerInstance, besSysHealthMdsTotalBytesFromDevices=besSysHealthMdsTotalBytesFromDevices, besSysHealthMdsRefusedPackets=besSysHealthMdsRefusedPackets, besUserHealthLastErrorText=besUserHealthLastErrorText, besUserHealthCalEventFromHandheld=besUserHealthCalEventFromHandheld, besUserHealthMsgFromHandheld=besUserHealthMsgFromHandheld, blackBerryServer=blackBerryServer, besHungThreadEvent=besHungThreadEvent, besConfigTable=besConfigTable, besConfigSRPPort=besConfigSRPPort, besSysHealthMsgTotalProc=besSysHealthMsgTotalProc, besSysHealthMdsDeviceConnections=besSysHealthMdsDeviceConnections, besSysHealthV1MsgsPending=besSysHealthV1MsgsPending, besUserHealthMsgErrors=besUserHealthMsgErrors, besUserHealthCalEventToHandheld=besUserHealthCalEventToHandheld, besUserHealthWirelessEmailRecoEnabled=besUserHealthWirelessEmailRecoEnabled, besTotMsgsRecvd=besTotMsgsRecvd, besSysHealthSrpTotalSecNotConnected=besSysHealthSrpTotalSecNotConnected, besTotMsgsFiltered=besTotMsgsFiltered, besMailServerHealthServerName=besMailServerHealthServerName, besSysHealthCalUsersOTACEnabled=besSysHealthCalUsersOTACEnabled, besSRPConnectEvent=besSRPConnectEvent, besMailServerHealthFailedConn10min=besMailServerHealthFailedConn10min, besSysHealthV1MsgsSentPerMin=besSysHealthV1MsgsSentPerMin, besSysHealthMsgPending=besSysHealthMsgPending, besUserHealthDevicePIN=besUserHealthDevicePIN, besSysHealthMdsMaxPacketSizeToDevice=besSysHealthMdsMaxPacketSizeToDevice, besUserHealthUserId=besUserHealthUserId, besSysHealthMdsInvalidPackets=besSysHealthMdsInvalidPackets, besSysHealthV1TotalMsgsReceived=besSysHealthV1TotalMsgsReceived, besUserHealthSaveInSent=besUserHealthSaveInSent, besConfigReleaseServicePack=besConfigReleaseServicePack, besSysHealthV1SRPConnectState=besSysHealthV1SRPConnectState, besConfigLicenceTotal=besConfigLicenceTotal, besSysHealthWERRequestsFromHandheld=besSysHealthWERRequestsFromHandheld, besMDSStartStopEvent=besMDSStartStopEvent, besMDStoDBConnectionEvent=besMDStoDBConnectionEvent, besConfigForceSaveInSentEnabled=besConfigForceSaveInSentEnabled, besConfigLicenceRemaining=besConfigLicenceRemaining, rim=rim, besSysHealthMdsAvgPacketSizeFromDevice=besSysHealthMdsAvgPacketSizeFromDevice, besTotMsgsSent=besTotMsgsSent, besUserHealthDisableWhileInCradle=besUserHealthDisableWhileInCradle, besUserHealthAvgKBReplyWithText=besUserHealthAvgKBReplyWithText, besSysHealthMsgFromHandheld=besSysHealthMsgFromHandheld, besUserHealthAvgLatencyInSecLast10Msg=besUserHealthAvgLatencyInSecLast10Msg, besMailServerHealthServerId=besMailServerHealthServerId, besUserHealthWERRequestsFromHandheld=besUserHealthWERRequestsFromHandheld, besMailServerHealthEntry=besMailServerHealthEntry, besSysHealthServerInstance=besSysHealthServerInstance, besTotMsgsRecvdPerMin=besTotMsgsRecvdPerMin, besUserHealthMsgForwardedFromDevice=besUserHealthMsgForwardedFromDevice, besUserHealthLastErrorTime=besUserHealthLastErrorTime, besMDStoBESConnectionEvent=besMDStoBESConnectionEvent, besConfigReleaseMin=besConfigReleaseMin, besSysHealthV1TotalMsgsFiltered=besSysHealthV1TotalMsgsFiltered, besMailServerHealthTable=besMailServerHealthTable, besUserHealthUserName=besUserHealthUserName, besSysHealthSrpLastErrorTime=besSysHealthSrpLastErrorTime, besCriticalEvent=besCriticalEvent, besUserHealthMsgRepliedToWithText=besUserHealthMsgRepliedToWithText, besMailServerDownEvent=besMailServerDownEvent, besSysHealthMdsConnectionSuccess=besSysHealthMdsConnectionSuccess, besUserHealthDeviceNetwork=besUserHealthDeviceNetwork, besUserHealthLastMessageForwarded=besUserHealthLastMessageForwarded, besUserHealthEnabled=besUserHealthEnabled, besUserHealthMsgMoreRequests=besUserHealthMsgMoreRequests)
