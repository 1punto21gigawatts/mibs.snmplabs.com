#
# PySNMP MIB module CISCO-VISM-HDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VISM-HDLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
voice, = mibBuilder.importSymbols("BASIS-MIB", "voice")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, ModuleIdentity, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, MibIdentifier, NotificationType, Bits, Gauge32, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "ModuleIdentity", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "MibIdentifier", "NotificationType", "Bits", "Gauge32", "IpAddress", "ObjectIdentity")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
ciscoVismHdlcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 91))
ciscoVismHdlcMIB.setRevisions(('2003-10-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVismHdlcMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in SMIv1 version. The MIB has been converted to SMIv2 version and descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoVismHdlcMIB.setLastUpdated('200310090000Z')
if mibBuilder.loadTexts: ciscoVismHdlcMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVismHdlcMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoVismHdlcMIB.setDescription('The MIB module containing table for configurating and maintaining counters for the HDLC channel on VISM service module.')
vismSigGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6))
vismHdlcChanTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1), )
if mibBuilder.loadTexts: vismHdlcChanTable.setStatus('current')
if mibBuilder.loadTexts: vismHdlcChanTable.setDescription('This table is used for maintaining the statistics info for the HDLC channels on VISM. It also keeps track of some configurable parameters required for proper operation of HDLC driver in VISM. ')
vismHdlcChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1), ).setIndexNames((0, "CISCO-VISM-HDLC-MIB", "vismHdlcChanNum"))
if mibBuilder.loadTexts: vismHdlcChanEntry.setStatus('current')
if mibBuilder.loadTexts: vismHdlcChanEntry.setDescription('An entry for each HDLC channel.')
vismHdlcChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcChanNum.setStatus('current')
if mibBuilder.loadTexts: vismHdlcChanNum.setDescription('This object is the index of this table. It refers to the ds0IfIndex in the dsx0VismCnfTable (defined in CISCO-VISM-DSX0-MIB MIB). ')
vismHdlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismHdlcRowStatus.setStatus('current')
if mibBuilder.loadTexts: vismHdlcRowStatus.setDescription("This variable allows to add, delete or modify the entry. 'createAndGo': Use this to add an entry in this table. There are two case of creating a entry: 1) a CCS (Common Channel Signaling) channel is explicitly created for AAL2 Trunking. In this case, if the DS0 already created for PRI(Primary Rate Interface) or GR-303 the request of creation should be rejected. 2) A HDLC entry will be implicitly created before creating a LAPD(D channel Data Link) entry. In this case if the DS0 is already used for AAL2 trunking the request should be rejected. No entry in LAPD shall be created. 'active': This values is returned, once the row is created 'destroy': Use this to delete an entry from this table. According to the creation, an entry can be explicitly destroyed or implicitly removed. ")
vismHdlcMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcMaxFrameSize.setStatus('deprecated')
if mibBuilder.loadTexts: vismHdlcMaxFrameSize.setDescription('This object describes the maximum frame size that is allowed on this HDLC channel. This value is not configurable. The value for this object is 264. ')
vismHdlcLcnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismHdlcLcnNum.setStatus('current')
if mibBuilder.loadTexts: vismHdlcLcnNum.setDescription('This object describes LCN(Logical Channel Number) or the PVC(Permanent Virtual Circuit) channel number with which the HDLC channel is associated with. It is applicable only for trunking applications where the CCS frames are transmitted to the other end point over an AAL5 PVC. For PRI or GR-303 applications, this is not applicable since the CCS frames in that case are backhauled to the call agent. ')
vismHdlcXmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcXmtFrames.setStatus('current')
if mibBuilder.loadTexts: vismHdlcXmtFrames.setDescription('This object maintains the count of HDLC frames transmitted to the HDLC channel on VISM. ')
vismHdlcRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcRcvFrames.setStatus('current')
if mibBuilder.loadTexts: vismHdlcRcvFrames.setDescription('This object maintains the count of HDLC frames received from the HDLC channel on VISM. ')
vismHdlcRcvCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcRcvCrcErrors.setStatus('current')
if mibBuilder.loadTexts: vismHdlcRcvCrcErrors.setDescription('This object describes the count of HDLC frames dropped due to CRC(Cyclic Redundancy Check) errors in the frames received from the HDLC channel. ')
vismHdlcRcvBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcRcvBufOverflows.setStatus('current')
if mibBuilder.loadTexts: vismHdlcRcvBufOverflows.setDescription('This object describes the count of HDLC receiver buffer overflow condition. This can occur if the rate of arrival of HDLC frames from the line is more than the processing rate by the CPU. ')
vismHdlcTxUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcTxUnderflows.setStatus('current')
if mibBuilder.loadTexts: vismHdlcTxUnderflows.setDescription('This object describes the count of HDLC Tx underflow condition. ')
vismHdlcTxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcTxAbortFrames.setStatus('current')
if mibBuilder.loadTexts: vismHdlcTxAbortFrames.setDescription('This object describes the count of HDLC Abort frames transmitted. ')
vismHdlcRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcRxAbortFrames.setStatus('current')
if mibBuilder.loadTexts: vismHdlcRxAbortFrames.setDescription('This object describes the count of HDLC Abort frames received. ')
ciscoVismHdlcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 91, 2))
ciscoVismHdlcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 91, 2, 1))
ciscoVismHdlcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 91, 2, 2))
ciscoVismHdlcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 91, 2, 2, 1)).setObjects(("CISCO-VISM-HDLC-MIB", "ciscoVismHdlcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismHdlcCompliance = ciscoVismHdlcCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoVismHdlcCompliance.setDescription('The compliance statement for objects related to VISM HDLC module.')
ciscoVismHdlcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 91, 2, 1, 1)).setObjects(("CISCO-VISM-HDLC-MIB", "vismHdlcChanNum"), ("CISCO-VISM-HDLC-MIB", "vismHdlcRowStatus"), ("CISCO-VISM-HDLC-MIB", "vismHdlcLcnNum"), ("CISCO-VISM-HDLC-MIB", "vismHdlcXmtFrames"), ("CISCO-VISM-HDLC-MIB", "vismHdlcRcvFrames"), ("CISCO-VISM-HDLC-MIB", "vismHdlcRcvCrcErrors"), ("CISCO-VISM-HDLC-MIB", "vismHdlcRcvBufOverflows"), ("CISCO-VISM-HDLC-MIB", "vismHdlcTxUnderflows"), ("CISCO-VISM-HDLC-MIB", "vismHdlcTxAbortFrames"), ("CISCO-VISM-HDLC-MIB", "vismHdlcRxAbortFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismHdlcGroup = ciscoVismHdlcGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVismHdlcGroup.setDescription('The collection of objects which are used to represent VISM HDLC module.')
ciscoVismHdlcDeprecateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 91, 2, 1, 2)).setObjects(("CISCO-VISM-HDLC-MIB", "vismHdlcMaxFrameSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismHdlcDeprecateGroup = ciscoVismHdlcDeprecateGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismHdlcDeprecateGroup.setDescription('The collection of objects that were supported earlier but deprecated now.')
mibBuilder.exportSymbols("CISCO-VISM-HDLC-MIB", vismHdlcTxUnderflows=vismHdlcTxUnderflows, vismHdlcLcnNum=vismHdlcLcnNum, vismHdlcChanNum=vismHdlcChanNum, ciscoVismHdlcMIBConformance=ciscoVismHdlcMIBConformance, vismHdlcRcvBufOverflows=vismHdlcRcvBufOverflows, ciscoVismHdlcDeprecateGroup=ciscoVismHdlcDeprecateGroup, ciscoVismHdlcMIBGroups=ciscoVismHdlcMIBGroups, ciscoVismHdlcMIBCompliances=ciscoVismHdlcMIBCompliances, vismHdlcRcvCrcErrors=vismHdlcRcvCrcErrors, vismHdlcMaxFrameSize=vismHdlcMaxFrameSize, vismHdlcChanEntry=vismHdlcChanEntry, vismSigGrp=vismSigGrp, vismHdlcTxAbortFrames=vismHdlcTxAbortFrames, ciscoVismHdlcMIB=ciscoVismHdlcMIB, PYSNMP_MODULE_ID=ciscoVismHdlcMIB, ciscoVismHdlcGroup=ciscoVismHdlcGroup, vismHdlcXmtFrames=vismHdlcXmtFrames, vismHdlcChanTable=vismHdlcChanTable, vismHdlcRxAbortFrames=vismHdlcRxAbortFrames, vismHdlcRcvFrames=vismHdlcRcvFrames, ciscoVismHdlcCompliance=ciscoVismHdlcCompliance, vismHdlcRowStatus=vismHdlcRowStatus)
