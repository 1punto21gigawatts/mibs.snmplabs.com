#
# PySNMP MIB module EXALINK-FUSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXALINK-FUSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, MibIdentifier, Bits, Counter64, ObjectIdentity, NotificationType, Unsigned32, ModuleIdentity, iso, TimeTicks, enterprises, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibIdentifier", "Bits", "Counter64", "ObjectIdentity", "NotificationType", "Unsigned32", "ModuleIdentity", "iso", "TimeTicks", "enterprises", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
exaFusion = ModuleIdentity((1, 3, 6, 1, 4, 1, 43296, 3))
exaFusion.setRevisions(('2015-10-20 00:00', '2015-07-30 00:00', '2015-04-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: exaFusion.setRevisionsDescriptions(('MIB for the Exalink-FUSION.', 'Added initial traps.', 'Initial version.',))
if mibBuilder.loadTexts: exaFusion.setLastUpdated('201510200000Z')
if mibBuilder.loadTexts: exaFusion.setOrganization('Exablaze')
if mibBuilder.loadTexts: exaFusion.setContactInfo('email: info@exablaze.com')
if mibBuilder.loadTexts: exaFusion.setDescription('Added fusion sysinfo')
fusionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43296, 3, 1))
fusionInfoSerial = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionInfoSerial.setStatus('current')
if mibBuilder.loadTexts: fusionInfoSerial.setDescription('Serial number')
fusionInfoVersion = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionInfoVersion.setStatus('current')
if mibBuilder.loadTexts: fusionInfoVersion.setDescription('Software version number')
fusionInfoBoard = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionInfoBoard.setStatus('current')
if mibBuilder.loadTexts: fusionInfoBoard.setDescription('Hardware type')
fusionInfoSoftware = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionInfoSoftware.setStatus('current')
if mibBuilder.loadTexts: fusionInfoSoftware.setDescription('Software date stamp')
fusionLineCardTable = MibTable((1, 3, 6, 1, 4, 1, 43296, 3, 1, 5), )
if mibBuilder.loadTexts: fusionLineCardTable.setStatus('current')
if mibBuilder.loadTexts: fusionLineCardTable.setDescription('Table of line card information')
fusionLineCard = MibTableRow((1, 3, 6, 1, 4, 1, 43296, 3, 1, 5, 1), ).setIndexNames((0, "EXALINK-FUSION-MIB", "fusionLineCardIndex"))
if mibBuilder.loadTexts: fusionLineCard.setStatus('current')
if mibBuilder.loadTexts: fusionLineCard.setDescription('Line card information')
fusionLineCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionLineCardIndex.setStatus('current')
if mibBuilder.loadTexts: fusionLineCardIndex.setDescription('Line card index')
fusionLineCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 1, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionLineCardName.setStatus('current')
if mibBuilder.loadTexts: fusionLineCardName.setDescription('Line card name')
fusionLineCardBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 1, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionLineCardBoard.setStatus('current')
if mibBuilder.loadTexts: fusionLineCardBoard.setDescription('Line card hardware type')
fusionModuleTable = MibTable((1, 3, 6, 1, 4, 1, 43296, 3, 1, 6), )
if mibBuilder.loadTexts: fusionModuleTable.setStatus('current')
if mibBuilder.loadTexts: fusionModuleTable.setDescription('Table of internal modules')
fusionModule = MibTableRow((1, 3, 6, 1, 4, 1, 43296, 3, 1, 6, 1), ).setIndexNames((0, "EXALINK-FUSION-MIB", "fusionModuleIndex"))
if mibBuilder.loadTexts: fusionModule.setStatus('current')
if mibBuilder.loadTexts: fusionModule.setDescription('Internal module information')
fusionModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionModuleIndex.setStatus('current')
if mibBuilder.loadTexts: fusionModuleIndex.setDescription('Internal module index')
fusionModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 1, 6, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionModuleName.setStatus('current')
if mibBuilder.loadTexts: fusionModuleName.setDescription('Internal module name')
fusionModuleBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 1, 6, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionModuleBoard.setStatus('current')
if mibBuilder.loadTexts: fusionModuleBoard.setDescription('Internal module hardware type')
fusionModuleFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 1, 6, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionModuleFunction.setStatus('current')
if mibBuilder.loadTexts: fusionModuleFunction.setDescription('Current internal module firmware')
fusionSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43296, 3, 1, 7))
fusionSysInfoLoadAverage = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionSysInfoLoadAverage.setStatus('current')
if mibBuilder.loadTexts: fusionSysInfoLoadAverage.setDescription('The 1, 5 and 15 minute load averages multipled by 100')
fusionSysInfoAvailMem = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionSysInfoAvailMem.setStatus('current')
if mibBuilder.loadTexts: fusionSysInfoAvailMem.setDescription('System available memory in bytes')
fusionSysInfoNumProcesses = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionSysInfoNumProcesses.setStatus('current')
if mibBuilder.loadTexts: fusionSysInfoNumProcesses.setDescription('The number of current processes')
fusionSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 43296, 3, 2))
fusionTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 43296, 3, 2, 1), )
if mibBuilder.loadTexts: fusionTempSensorTable.setStatus('current')
if mibBuilder.loadTexts: fusionTempSensorTable.setDescription('Table of temperature sensors')
fusionTempSensor = MibTableRow((1, 3, 6, 1, 4, 1, 43296, 3, 2, 1, 1), ).setIndexNames((0, "EXALINK-FUSION-MIB", "fusionTempSensorIndex"))
if mibBuilder.loadTexts: fusionTempSensor.setStatus('current')
if mibBuilder.loadTexts: fusionTempSensor.setDescription('Temperature sensor')
fusionTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionTempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: fusionTempSensorIndex.setDescription('Temperature sensor index')
fusionTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionTempSensorName.setStatus('current')
if mibBuilder.loadTexts: fusionTempSensorName.setDescription('Temperature sensor name')
fusionTempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 2, 1, 1, 3), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionTempSensorValue.setStatus('current')
if mibBuilder.loadTexts: fusionTempSensorValue.setDescription('Current reading of temperature sensor')
fusionFanSensorTable = MibTable((1, 3, 6, 1, 4, 1, 43296, 3, 2, 2), )
if mibBuilder.loadTexts: fusionFanSensorTable.setStatus('current')
if mibBuilder.loadTexts: fusionFanSensorTable.setDescription('Table of fan sensors')
fusionFanSensor = MibTableRow((1, 3, 6, 1, 4, 1, 43296, 3, 2, 2, 1), ).setIndexNames((0, "EXALINK-FUSION-MIB", "fusionFanSensorIndex"))
if mibBuilder.loadTexts: fusionFanSensor.setStatus('current')
if mibBuilder.loadTexts: fusionFanSensor.setDescription('Fan sensor')
fusionFanSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionFanSensorIndex.setStatus('current')
if mibBuilder.loadTexts: fusionFanSensorIndex.setDescription('Fan sensor index')
fusionFanSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 2, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionFanSensorName.setStatus('current')
if mibBuilder.loadTexts: fusionFanSensorName.setDescription('Fan sensor name')
fusionFanSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 2, 2, 1, 3), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionFanSensorValue.setStatus('current')
if mibBuilder.loadTexts: fusionFanSensorValue.setDescription('Current reading of fan sensor')
fusionPsuTable = MibTable((1, 3, 6, 1, 4, 1, 43296, 3, 3), )
if mibBuilder.loadTexts: fusionPsuTable.setStatus('current')
if mibBuilder.loadTexts: fusionPsuTable.setDescription('Table of power supplies')
fusionPsu = MibTableRow((1, 3, 6, 1, 4, 1, 43296, 3, 3, 1), ).setIndexNames((0, "EXALINK-FUSION-MIB", "fusionPsuIndex"))
if mibBuilder.loadTexts: fusionPsu.setStatus('current')
if mibBuilder.loadTexts: fusionPsu.setDescription('Power supply information')
fusionPsuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPsuIndex.setStatus('current')
if mibBuilder.loadTexts: fusionPsuIndex.setDescription('Power supply index')
fusionPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPsuType.setStatus('current')
if mibBuilder.loadTexts: fusionPsuType.setDescription('Power supply manufacturer and model number')
fusionPsuPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPsuPresent.setStatus('current')
if mibBuilder.loadTexts: fusionPsuPresent.setDescription('True if power supply is present')
fusionPsuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 3, 1, 4), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPsuTemperature.setStatus('current')
if mibBuilder.loadTexts: fusionPsuTemperature.setDescription('Average of current power supply temperature readings')
fusionPsuPowerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 3, 1, 5), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPsuPowerIn.setStatus('current')
if mibBuilder.loadTexts: fusionPsuPowerIn.setDescription('Current power supply input power')
fusionPsuPowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 3, 1, 6), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPsuPowerOut.setStatus('current')
if mibBuilder.loadTexts: fusionPsuPowerOut.setDescription('Current power supply output power')
fusionPortTable = MibTable((1, 3, 6, 1, 4, 1, 43296, 3, 4), )
if mibBuilder.loadTexts: fusionPortTable.setStatus('current')
if mibBuilder.loadTexts: fusionPortTable.setDescription('Table of ports')
fusionPort = MibTableRow((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1), ).setIndexNames((0, "EXALINK-FUSION-MIB", "fusionPortLineCard"), (0, "EXALINK-FUSION-MIB", "fusionPortIndex"))
if mibBuilder.loadTexts: fusionPort.setStatus('current')
if mibBuilder.loadTexts: fusionPort.setDescription('Port information')
fusionPortLineCard = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPortLineCard.setStatus('current')
if mibBuilder.loadTexts: fusionPortLineCard.setDescription('Line card index')
fusionPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPortIndex.setStatus('current')
if mibBuilder.loadTexts: fusionPortIndex.setDescription('Port index')
fusionPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPortName.setStatus('current')
if mibBuilder.loadTexts: fusionPortName.setDescription('Port name')
fusionPortPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPortPresent.setStatus('current')
if mibBuilder.loadTexts: fusionPortPresent.setDescription('True if a SFP is present in the port')
fusionPortHasSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPortHasSignal.setStatus('current')
if mibBuilder.loadTexts: fusionPortHasSignal.setDescription('True if signal has been detected on the port')
fusionPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPortEnabled.setStatus('current')
if mibBuilder.loadTexts: fusionPortEnabled.setDescription('True if the port is currently enabled')
fusionPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fusionPortAlias.setStatus('current')
if mibBuilder.loadTexts: fusionPortAlias.setDescription('Port alias')
fusionPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 43296, 3, 4, 1, 8), Integer32()).setUnits('Mbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fusionPortSpeed.setStatus('current')
if mibBuilder.loadTexts: fusionPortSpeed.setDescription('Currently configured port speed')
fusionTrapValues = MibIdentifier((1, 3, 6, 1, 4, 1, 43296, 3, 5))
fusionLidOpenStatus = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 5, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionLidOpenStatus.setStatus('current')
if mibBuilder.loadTexts: fusionLidOpenStatus.setDescription('True if the lid is currently open')
fusionFanFaultStatus = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 5, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionFanFaultStatus.setStatus('current')
if mibBuilder.loadTexts: fusionFanFaultStatus.setDescription('True if there is a fan fault')
fusionHighTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 5, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionHighTempStatus.setStatus('current')
if mibBuilder.loadTexts: fusionHighTempStatus.setDescription('True if there is a fan fault')
fusionPortUsageStatus = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("error", 1), ("unused", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPortUsageStatus.setStatus('current')
if mibBuilder.loadTexts: fusionPortUsageStatus.setDescription('Port usage status, corresponds to right hand LED for port')
fusionPortLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("error", 1), ("unused", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: fusionPortLinkStatus.setDescription('Port link status, corresponds to left hand LED for port')
fusionPsuFaultStatus = MibScalar((1, 3, 6, 1, 4, 1, 43296, 3, 5, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fusionPsuFaultStatus.setStatus('current')
if mibBuilder.loadTexts: fusionPsuFaultStatus.setDescription('True if there is a PSU fault')
fusionTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 43296, 3, 6))
fusionPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 43296, 3, 6, 1))
if mibBuilder.loadTexts: fusionPowerFail.setStatus('current')
if mibBuilder.loadTexts: fusionPowerFail.setDescription('System is shutting down because of power loss')
fusionTamperAlert = NotificationType((1, 3, 6, 1, 4, 1, 43296, 3, 6, 2)).setObjects(("EXALINK-FUSION-MIB", "fusionLidOpenStatus"))
if mibBuilder.loadTexts: fusionTamperAlert.setStatus('current')
if mibBuilder.loadTexts: fusionTamperAlert.setDescription('The lid of the device has been opened or closed')
fusionTempAlert = NotificationType((1, 3, 6, 1, 4, 1, 43296, 3, 6, 3)).setObjects(("EXALINK-FUSION-MIB", "fusionTempSensorName"), ("EXALINK-FUSION-MIB", "fusionHighTempStatus"))
if mibBuilder.loadTexts: fusionTempAlert.setStatus('current')
if mibBuilder.loadTexts: fusionTempAlert.setDescription('Temperature has gone above or below a threshold')
fusionPsuAlert = NotificationType((1, 3, 6, 1, 4, 1, 43296, 3, 6, 4)).setObjects(("EXALINK-FUSION-MIB", "fusionPsuFaultStatus"))
if mibBuilder.loadTexts: fusionPsuAlert.setStatus('current')
if mibBuilder.loadTexts: fusionPsuAlert.setDescription('Power supply has been added or removed, become faulty or returned to normal')
fusionSystemAlert = NotificationType((1, 3, 6, 1, 4, 1, 43296, 3, 6, 5))
if mibBuilder.loadTexts: fusionSystemAlert.setStatus('current')
if mibBuilder.loadTexts: fusionSystemAlert.setDescription('The system service has restarted')
fusionFanAlert = NotificationType((1, 3, 6, 1, 4, 1, 43296, 3, 6, 6)).setObjects(("EXALINK-FUSION-MIB", "fusionFanFaultStatus"))
if mibBuilder.loadTexts: fusionFanAlert.setStatus('current')
if mibBuilder.loadTexts: fusionFanAlert.setDescription('A fan has become faulty or returned to normal')
fusionPortAlert = NotificationType((1, 3, 6, 1, 4, 1, 43296, 3, 6, 7)).setObjects(("EXALINK-FUSION-MIB", "fusionPortName"), ("EXALINK-FUSION-MIB", "fusionPortLinkStatus"), ("EXALINK-FUSION-MIB", "fusionPortUsageStatus"))
if mibBuilder.loadTexts: fusionPortAlert.setStatus('current')
if mibBuilder.loadTexts: fusionPortAlert.setDescription('Port link status or usage has changed, corresponds to changes in LEDs')
fusionConfigUpdateAlert = NotificationType((1, 3, 6, 1, 4, 1, 43296, 3, 6, 8))
if mibBuilder.loadTexts: fusionConfigUpdateAlert.setStatus('current')
if mibBuilder.loadTexts: fusionConfigUpdateAlert.setDescription("The device's configuration has been changed")
mibBuilder.exportSymbols("EXALINK-FUSION-MIB", fusionPortHasSignal=fusionPortHasSignal, fusionModule=fusionModule, fusionSysInfoLoadAverage=fusionSysInfoLoadAverage, fusionInfoVersion=fusionInfoVersion, fusionPsuAlert=fusionPsuAlert, fusionLineCard=fusionLineCard, fusionPsuPresent=fusionPsuPresent, PYSNMP_MODULE_ID=exaFusion, fusionTraps=fusionTraps, fusionPowerFail=fusionPowerFail, fusionTempSensorTable=fusionTempSensorTable, fusionFanSensorValue=fusionFanSensorValue, fusionFanSensorName=fusionFanSensorName, fusionPortAlias=fusionPortAlias, fusionLidOpenStatus=fusionLidOpenStatus, fusionPsuTable=fusionPsuTable, fusionPsuTemperature=fusionPsuTemperature, fusionTrapValues=fusionTrapValues, fusionTempSensorIndex=fusionTempSensorIndex, fusionHighTempStatus=fusionHighTempStatus, fusionModuleTable=fusionModuleTable, fusionTempSensorName=fusionTempSensorName, fusionFanSensor=fusionFanSensor, fusionPortAlert=fusionPortAlert, fusionTempSensorValue=fusionTempSensorValue, fusionFanSensorIndex=fusionFanSensorIndex, fusionPsuIndex=fusionPsuIndex, fusionPortPresent=fusionPortPresent, fusionInfoSoftware=fusionInfoSoftware, fusionSysInfoAvailMem=fusionSysInfoAvailMem, fusionPortEnabled=fusionPortEnabled, fusionPsu=fusionPsu, fusionPortName=fusionPortName, fusionFanFaultStatus=fusionFanFaultStatus, fusionLineCardIndex=fusionLineCardIndex, fusionLineCardName=fusionLineCardName, fusionInfoBoard=fusionInfoBoard, fusionModuleFunction=fusionModuleFunction, fusionSysInfoNumProcesses=fusionSysInfoNumProcesses, fusionModuleBoard=fusionModuleBoard, fusionTempSensor=fusionTempSensor, fusionFanSensorTable=fusionFanSensorTable, fusionPsuType=fusionPsuType, fusionPortLineCard=fusionPortLineCard, fusionSensor=fusionSensor, fusionPortTable=fusionPortTable, fusionPortSpeed=fusionPortSpeed, fusionPsuPowerOut=fusionPsuPowerOut, fusionModuleIndex=fusionModuleIndex, fusionPortLinkStatus=fusionPortLinkStatus, fusionModuleName=fusionModuleName, fusionTamperAlert=fusionTamperAlert, fusionTempAlert=fusionTempAlert, fusionSysInfo=fusionSysInfo, fusionPort=fusionPort, fusionPsuFaultStatus=fusionPsuFaultStatus, fusionLineCardTable=fusionLineCardTable, fusionSystemAlert=fusionSystemAlert, fusionFanAlert=fusionFanAlert, fusionInfo=fusionInfo, fusionPsuPowerIn=fusionPsuPowerIn, fusionLineCardBoard=fusionLineCardBoard, exaFusion=exaFusion, fusionPortUsageStatus=fusionPortUsageStatus, fusionPortIndex=fusionPortIndex, fusionConfigUpdateAlert=fusionConfigUpdateAlert, fusionInfoSerial=fusionInfoSerial)
