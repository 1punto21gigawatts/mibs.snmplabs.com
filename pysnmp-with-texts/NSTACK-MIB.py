#
# PySNMP MIB module NSTACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSTACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, ObjectIdentity, Integer32, Bits, TimeTicks, MibIdentifier, enterprises, Counter32, Unsigned32, iso, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Integer32", "Bits", "TimeTicks", "MibIdentifier", "enterprises", "Counter32", "Unsigned32", "iso", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class PortsBitmap(OctetString):
    pass

nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbSwitchG1Il = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50))
nbsStackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 4))
nbsStackSlotCapacity = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotCapacity.setDescription('Max quantity of Slots possible in the Stack.')
nbsStackSlotsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotsTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotsTableSize.setDescription('Real size of Slots Table in the Stack.')
nbsStackPortsCapacity = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackPortsCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackPortsCapacity.setDescription('Max quantity of Ports possible in the Stack .')
nbsStackSlotPortsCapacity = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotPortsCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotPortsCapacity.setDescription('Max quantity of Ports possible in the Slot .')
nbsStackSlotTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5), )
if mibBuilder.loadTexts: nbsStackSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotTable.setDescription('Table of descriptive and status information about the Slots.')
nbsStackSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1), ).setIndexNames((0, "NSTACK-MIB", "nbsStackSlotIndex"))
if mibBuilder.loadTexts: nbsStackSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotEntry.setDescription('An entry in the table, containing information about a single Slot.')
nbsStackSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotIndex.setDescription('This object identifies the Slot# for which this entry contains information.')
nbsStackSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("empty", 1), ("unknown", 2), ("standAlone", 3), ("universal", 4), ("eth20Ports10or100TP", 5), ("eth40Ports10TP", 6), ("eth10Ports100FO", 7), ("eth16Ports10or100TP", 8), ("eth4Ports1000FO", 9), ("agentSlot", 10), ("routingEngine", 11), ("eth8Ports10or100TP", 12), ("eth2Ports100FOMM", 13), ("eth2Ports100FOSM", 14), ("eth1Ports1000FOMM", 15), ("eth1Ports1000FOSM", 16), ("eth2Ports1000FOMM", 17), ("eth2Ports1000FOSM", 18), ("stackableSlotNoLink", 19), ("stackableSlotNH2025", 20), ("stackableSlotReserve1", 21), ("stackableSlotReserve2", 22), ("eth2Ports100FO", 23), ("eth2Ports1000FO", 24), ("eth4Ports100FOMM", 25), ("eth4Ports100FOSM", 26), ("eth4Ports100FO", 27), ("eth4Ports10or100TP", 28), ("eth4Ports100MTRJ", 29), ("eth8Ports100MTRJ", 30), ("eth4Ports100VF", 31), ("eth8Ports100VF", 32), ("ethGigaBitService", 33), ("eth4Ports100LC", 34), ("eth8Ports100LC", 35), ("eth2Ports10FL", 36), ("eth4Ports10FL", 37), ("eth1Port100or1000TP", 38), ("eth1Port1000FORED", 39), ("eth4Ports100TPand2Ports100FO", 40), ("eth4Ports100TPand1Port100FO", 41), ("eth0Ports100TPand2Ports100FO", 42), ("eth4Ports100TPand0Ports100FO", 43), ("eth1Ports1000MTRJ", 44), ("eth1StackPorts100or1000TP", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotType.setDescription('Slot Types: empty - Slot is Empty; unknown - Slot is of the Unknown type; standAlone - Stand Alone Device; universal - Slot including Uplink Modules of the different types; eth20Ports10or100TP- Slot including 20 fast copper 10/100 MBps Ports; eth40Ports10TP - Slot including 40 normal copper 10 MBps Ports; eth10Ports100FO - Slot including 10 fast fibre optic 100 MBps Ports(Multi Mode); eth16Ports10or100TP- Slot including 16 fast copper 10/100 MBps Ports; eth4Ports1000FO - Slot including 4 GigaBit 1000 MBps Ports(Multi Mode); agentSlot - Slot including CPU Card; routingEngine - Slot including Routing Engine Card; eth8Ports10or100TP - Slot including 8 fast copper 10/100 MBps Ports; eth2Ports100FOMM - Slot including 2 fast fibre optic 100 MBps Ports(MM=Multi Mode); eth2Ports100FOSM - Slot including 2 fast fibre optic 100 MBps Ports(SM=Single Mode); eth1Ports1000FOMM - Slot including 1 GigaBit 1000 MBps Ports(MM=Multi Mode); eth1Ports1000FOSM - Slot including 1 GigaBit 1000 MBps Ports(SM=Single Mode); eth2Ports1000FOMM - Slot including 2 GigaBit 1000 MBps Ports(MM=Multi Mode); eth2Ports1000FOSM - Slot including 2 GigaBit 1000 MBps Ports(SM=Single Mode); stackableSlotNoLink- Slot including special Stackable Card with no Link; stackableSlotNH2025- Slot including special Stackable Card Linked with the NH2025 Device; stackableSlotReserve1- Slot including special Stackable Card (Reserve1 for the future purposes); -- ykfix30 - 14.07.99 - begin stackableSlotReserve2- Slot including special Stackable Card (Reserve2 for the future purposes); eth2Ports100FO - Slot including 2 fast fibre optic 100 MBps Ports(different configuration of the Multi Mode and/or Single Mode Ports); eth2Ports1000FO - Slot including 2 GigaBit 1000 MBps Ports(different configuration of the Multi Mode and/or Single Mode Ports); eth4Ports100FOMM - Slot including 4 fast fibre optic 100 MBps Ports(MM=Multi Mode); eth4Ports100FOSM - Slot including 4 fast fibre optic 100 MBps Ports(SS=Single Mode); eth4Ports100FO - Slot including 4 fast fibre optic 100 MBps Ports(different configuration of the Multi Mode and/or Single Mode Ports); -- ykfix31 - 9.08.99 - begin eth4Ports10or100TP - Slot including 4 fast copper 10/100 MBps Ports; eth4Ports100MTRJ - Slot including 4 fast fibre optic 100 MBps MTRJ Ports; eth8Ports100MTRJ - Slot including 8 fast fibre optic 100 MBps MTRJ Ports; eth4Ports100VF - Slot including 4 fast fibre optic 100 MBps VF Ports; eth8Ports100VF - Slot including 8 fast fibre optic 100 MBps VF Ports; -- ykfix33 - 1.03.00 - begin ethGigaBitService - Slot including special Giga Bit Service Card (for using Modules with >= 2 GigaBit Ports); eth4Ports100LC - Slot including 4 fast fibre optic 100 MBps LC Ports; eth8Ports100LC - Slot including 8 fast fibre optic 100 MBps LC Ports; eth2Ports10FL - Slot including 2 slow fibre optic 10 MBps FL Ports; eth4Ports10FL - Slot including 4 slow fibre optic 10 MBps FL Ports; -- ykfix39 - 21.09.00 - begin eth1Port100or1000TP- Slot including 1 GigaBit copper 100/1000 MBps TP Ports; eth1Port1000FORED - Slot including 1 GigaBit fibre optic Redundant Port; eth4Ports100TPand2Ports100FO - Slot including 4 copper 100/1000 MBps TP + 2 fast FO 100 MBps Ports; eth4Ports100TPand1Port100FO - Slot including 4 copper 100/1000 MBps TP + 1 fast FO 100 MBps Ports; eth0Ports100TPand2Ports100FO - Slot including 0 copper 100/1000 MBps TP + 2 fast FO 100 MBps Ports; eth4Ports100TPand0Ports100FO - Slot including 4 copper 100/1000 MBps TP + 0 fast FO 100 MBps Ports; eth1Ports1000MTRJ - Slot including 1 GigaBit MTRJ fibre optic 1000 MBps Port; eth1StackPorts100or1000TP - Slot including 1 GigaBit TP copper 100/1000 MBps Port for Low Distances(<= 5m);')
nbsStackSlotMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotMgmtStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotMgmtStatus.setDescription('Slot Module Management Status: master - Master Slot Module; slave - Slave Slot Module.')
nbsStackSlotPortsMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotPortsMaxNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotPortsMaxNumber.setDescription('This object identifies the Maximum possible Ports Number in the Slot.')
nbsStackSlotPortsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotPortsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotPortsNumber.setDescription('This object identifies the Real Ports Number in the Slot.')
nbsStackSlotFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotFirstPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotFirstPort.setDescription('This object identifies the number of the First Port in the Slot, according to the Stack Ports Numeration.')
nbsStackSlotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("switchedOff", 1), ("enabled", 2), ("disabled", 3), ("changing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotOperStatus.setDescription('Slot Oper Status: switchedOff - Slot is Switched-off; enabled - Slot is enabled; disabled - Slot is disabled; changing - Slot is changing.')
nbsStackSlotAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsStackSlotAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotAdminStatus.setDescription('Slot Admin Status: enabled - Slot is enabled; disabled - Slot is disabled.')
nbsStackSlotRedundantPSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotRedundantPSMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotRedundantPSMode.setDescription('Slot Redundant Power Supply Module Status: notConnected - Redundant Power Supply is not Existing; connected - Redundant Power Supply is Existing.')
nbsStackSlotUplinkModulesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplinkModulesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplinkModulesNumber.setDescription('This object identifies the number of the Uplink Modules in the Slot.')
nbsStackSlotReset = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsStackSlotReset.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotReset.setDescription('This object is used to reset the corresponding Slot Module.')
nbsStackSlotIp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotIp.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotIp.setDescription("Ip address of the slot (if it has it; if it hasn't - 0.0.0.0).")
nbsStackSlotHwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotHwVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotHwVers.setDescription('This object holds the Software Version of the Slot Module.')
nbsStackSlotSwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSwVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotSwVers.setDescription('This object holds the Hardware Version of the Slot Module.')
nbsStackSlotUplTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6), )
if mibBuilder.loadTexts: nbsStackSlotUplTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplTable.setDescription('A table of Uplink Modules mounted on the corresponding Slot of the Switch.')
nbsStackSlotUplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1), ).setIndexNames((0, "NSTACK-MIB", "nbsStackSlotNumber"), (0, "NSTACK-MIB", "nbsStackSlotUplNumber"))
if mibBuilder.loadTexts: nbsStackSlotUplEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplEntry.setDescription('Contains the information needed to identify the Uplink Module of the Slot.')
nbsStackSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotNumber.setDescription('The Slot # in the Device.')
nbsStackSlotUplNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplNumber.setDescription('The Uplink Module # in the corresponding Slot in the Device.')
nbsStackSlotUplType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("uplAbsent", 1), ("uplUnknown", 2), ("upl1GigaMM", 3), ("upl1GigaSM", 4), ("upl2GigaMM", 5), ("upl2GigaSM", 6), ("upl1FO", 7), ("upl1TP", 8), ("upl2FOMM", 9), ("upl2FOSM", 10), ("upl4FOMM", 11), ("upl4FOSM", 12), ("upl8TP", 13), ("upl1ATM", 14), ("upl1FDDI", 15), ("uplStackModuleNoLink", 16), ("uplStackModuleNH2025", 17), ("uplStackModuleReserve1", 18), ("uplStackModuleReserve2", 19), ("upl4TP", 20), ("upl2FO", 21), ("upl2Giga", 22), ("upl4FO", 23), ("upl4MTRJ", 24), ("upl8MTRJ", 25), ("upl4VF", 26), ("upl8VF", 27), ("upl4LC", 28), ("upl8LC", 29), ("upl2FL", 30), ("upl4FL", 31), ("upl1GigaTP", 32), ("upl1GER", 33), ("upl4TP2FO", 34), ("upl4TP1FO", 35), ("upl0TP2FO", 36), ("upl4TP0FO", 37), ("upl1GigaMTRJ", 38), ("upl1GigaStackTP", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplType.setDescription('Uplink Module Types: uplAbsent - Uplink Module is Absent; uplUnknown - Uplink Module of the Unknown type; upl1GigaMM - Uplink Module including 1 GigaBit 1000 MBps Ports(MM=Multi Mode); upl1GigaSM - Uplink Module including 1 GigaBit 1000 MBps Ports(SM=Single Mode); upl2GigaMM - Uplink Module including 2 GigaBit 1000 MBps Ports(MM=Multi Mode); upl2GigaSM - Uplink Module including 2 GigaBit 1000 MBps Ports(SM=Single Mode); upl1FO - Uplink Module including 1 fast fibre optic 100 MBps Ports; upl1TP - Uplink Module including 1 fast copper 10/100 MBps Ports; upl2FOMM - Uplink Module including 2 fast fibre optic 100 MBps Ports(MM=Multi Mode); upl2FOSM - Uplink Module including 2 fast fibre optic 100 MBps Ports(SM=Single Mode); upl4FOMM - Uplink Module including 4 fast fibre optic 100 MBps Ports(MM=Multi Mode); upl4FOSM - Uplink Module including 4 fast fibre optic 100 MBps Ports(SM=Single Mode); upl8TP - Uplink Module including 8 fast copper 10/100 MBps Ports; upl1ATM - Uplink Module including 1 ATM Port; upl1FDDI - Uplink Module including 1 FDDI Port; uplStackModuleNoLink - special Stacking Module with no Link; uplStackModuleNH2025 - special Stacking Module Linked with the NH2025 Device; uplStackModuleReserve1 - special Stacking Module (Reserve1 for the future purposes); -- ykfix30 - 14.07.99 - begin uplStackModuleReserve2 - special Stacking Module (Reserve2 for the future purposes); upl4TP - Uplink Module including 4 fast copper 10/100 MBps Ports; upl2FO - Uplink Module including 2 fast fibre optic 100 MBps Ports(different configuration of the Multi Mode and/or Single Mode Ports); upl2Giga - Uplink Module including 2 GigaBit 1000 MBps Ports(different configuration of the Multi Mode and/or Single Mode Ports); -- ykfix31 - 9.08.99 - begin upl4FO - Uplink Module including 4 fast fibre optic 100 MBps Ports(different configuration of the Multi Mode and/or Single Mode Ports); upl4MTRJ - Uplink Module including 4 fast fibre optic 100 MBps MTRJ Ports; upl8MTRJ - Uplink Module including 8 fast fibre optic 100 MBps MTRJ Ports; upl4VF - Uplink Module including 4 fast fibre optic 100 MBps VF Ports; -- ykfix33 - 1.03.00 - begin upl8VF - Uplink Module including 8 fast fibre optic 100 MBps VF Ports; upl4LC - Uplink Module including 4 fast fibre optic 100 MBps LC Ports; upl8LC - Uplink Module including 8 fast fibre optic 100 MBps LC Ports; upl2FL - Uplink Module including 2 slow fibre optic 10 MBps FL Ports; upl4FL - Uplink Module including 4 slow fibre optic 10 MBps FL Ports; -- ykfix39 - 21.09.00 - begin upl1GigaTP - Uplink Module including 1 GigaBit copper 100/1000 MBps TP Ports; upl1GER - Uplink Module including 1 GigaBit fibre optic Redundant Port; upl4TP2FO - Uplink Module including 4 copper 10/100 MBps TP + 2 fast FO 100 MBps Ports; upl4TP1FO - Uplink Module including 4 copper 10/100 MBps TP + 1 fast FO 100 MBps Ports; upl0TP2FO - Uplink Module including 0 copper 10/100 MBps TP + 2 fast FO 100 MBps Ports; upl4TP0FO - Uplink Module including 4 copper 10/100 MBps TP + 0 fast FO 100 MBps Ports; upl1GigaMTRJ- Uplink Module including 1 GigaBit MTRJ fibre optic 1000 MBps Port; upl1GigaStackTP- Uplink Module including 1 GigaBit TP copper 1000 MBps Port for Low Distances(<= 5m);')
nbsStackSlotUplSwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplSwVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplSwVers.setDescription('This object holds the Software Version of the Uplink Module.')
nbsStackSlotUplHwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplHwVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplHwVers.setDescription('This object holds the Hardware Version of the Uplink Module.')
nbsStackSlotUplNPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplNPorts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplNPorts.setDescription('Number of Ports in the current UpLink Module.')
nbsStackSlotUplFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplFirstPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplFirstPort.setDescription('This object identifies the number of the First Port in the Uplink Module, according to the Stack Ports Numeration.')
nbsStackSlotUplPortsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 8), PortsBitmap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplPortsMask.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplPortsMask.setDescription('Contains the list of the ports in the Uplink Module. The representation is a bit map. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the least significant bit represents the lowest numbered port, and the most significant bit represents the highest numbered port. Thus, each port of the Uplink Module is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is exists in the Uplink Module. The port is not exists if its bit has a value of <0>.')
nbsStackSlotUplStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplStatus.setDescription('Current status of the Uplink Module')
nbsStackSlotUplHwDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplHwDescr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplHwDescr.setDescription('A description of the Hardware Version of the Uplink Module.')
nbsStackSlotUplSwDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotUplSwDescr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotUplSwDescr.setDescription('A description of the Software Version of the Uplink Module.')
nbsStackSpecSlotTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7), )
if mibBuilder.loadTexts: nbsStackSpecSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSpecSlotTable.setDescription('Table of descriptive and status information about the Special Slots.')
nbsStackSpecSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1), ).setIndexNames((0, "NSTACK-MIB", "nbsStackSlotSpecNumber"), (0, "NSTACK-MIB", "nbsStackSlotSpecUplNumber"))
if mibBuilder.loadTexts: nbsStackSpecSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSpecSlotEntry.setDescription('An entry in the table, containing information about a single Special Slot.')
nbsStackSlotSpecNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotSpecNumber.setDescription('The Special Slot # in the Device.')
nbsStackSlotSpecUplNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotSpecUplNumber.setDescription('The Uplink Module # in the corresponding Special Slot in the Device.')
nbsStackSlotSpecUplRedundantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("specialRedundant", 2), ("autoRedundant", 3), ("manualLeftRedundant", 4), ("manualRightRedundant", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsStackSlotSpecUplRedundantMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotSpecUplRedundantMode.setDescription('Special Slot Additional Status: other=(1) - unknown Status or Module is not Valid; specialRedundant=(2) - Both connectors of the GigaBit Redundant Module are connected to the same 2 connectors of the other GigaBit Redundant Module. Module provides automatic quick Redundancy; autoRedundant=(3) - Each connector of the GigaBit Redundant Module is connected to the Single GigaBit Ethernet Module. Module provides automatic quick Redundancy; manualLeftRedundant =(4), manualRightRedundant=(5) - Each connector of the GigaBit Redundant Module is connected to the Single GigaBit Ethernet Module. Module will force the Link in its Left Connector as a primary Link, in case of (4). Module will force the Link in its Right Connector as a primary Link, in case of (5)')
nbsStackSlotSpecUplLeftLinkLed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplLeftLinkLed.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotSpecUplLeftLinkLed.setDescription('Rx Activity ower Left Connector in the Module.')
nbsStackSlotSpecUplLeftActivityLed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplLeftActivityLed.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotSpecUplLeftActivityLed.setDescription('Tx Activity ower Left Connector in the Module.')
nbsStackSlotSpecUplRightLinkLed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplRightLinkLed.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotSpecUplRightLinkLed.setDescription('Rx Activity ower Right Connector in the Module.')
nbsStackSlotSpecUplRightActivityLed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsStackSlotSpecUplRightActivityLed.setStatus('mandatory')
if mibBuilder.loadTexts: nbsStackSlotSpecUplRightActivityLed.setDescription('Tx Activity ower Right Connector in the Module.')
mibBuilder.exportSymbols("NSTACK-MIB", nbsStackSlotUplPortsMask=nbsStackSlotUplPortsMask, nbsStackPortsCapacity=nbsStackPortsCapacity, nbsStackSlotFirstPort=nbsStackSlotFirstPort, nbsStackSlotSpecUplRightActivityLed=nbsStackSlotSpecUplRightActivityLed, nbSwitchG1=nbSwitchG1, nbsStackSlotsTableSize=nbsStackSlotsTableSize, nbsStackSlotPortsMaxNumber=nbsStackSlotPortsMaxNumber, nbsStackSpecSlotTable=nbsStackSpecSlotTable, nbsStackSlotSwVers=nbsStackSlotSwVers, nbsStackSlotSpecUplLeftLinkLed=nbsStackSlotSpecUplLeftLinkLed, nbSwitchG1Il=nbSwitchG1Il, nbsStackSlotUplFirstPort=nbsStackSlotUplFirstPort, nbsStackSlotTable=nbsStackSlotTable, nbase=nbase, nbsStackSlotUplStatus=nbsStackSlotUplStatus, nbsStackSlotIp=nbsStackSlotIp, nbsStackSpecSlotEntry=nbsStackSpecSlotEntry, nbsStackSlotUplSwVers=nbsStackSlotUplSwVers, nbsStackSlotReset=nbsStackSlotReset, nbsStackSlotUplHwVers=nbsStackSlotUplHwVers, nbsStackSlotPortsNumber=nbsStackSlotPortsNumber, nbsStackSlotUplHwDescr=nbsStackSlotUplHwDescr, nbsStackSlotUplNumber=nbsStackSlotUplNumber, nbsStackSlotSpecUplRightLinkLed=nbsStackSlotSpecUplRightLinkLed, nbsStackSlotUplinkModulesNumber=nbsStackSlotUplinkModulesNumber, nbsStackSlotSpecUplRedundantMode=nbsStackSlotSpecUplRedundantMode, nbsStackSlotUplNPorts=nbsStackSlotUplNPorts, nbsStackSlotAdminStatus=nbsStackSlotAdminStatus, nbsStackSlotUplEntry=nbsStackSlotUplEntry, nbsStackSlotIndex=nbsStackSlotIndex, nbsStackSlotMgmtStatus=nbsStackSlotMgmtStatus, nbsStackSlotRedundantPSMode=nbsStackSlotRedundantPSMode, nbsStackSlotEntry=nbsStackSlotEntry, nbsStackSlotNumber=nbsStackSlotNumber, nbsStackSlotSpecNumber=nbsStackSlotSpecNumber, nbsStackSlotSpecUplLeftActivityLed=nbsStackSlotSpecUplLeftActivityLed, nbsStackSlotCapacity=nbsStackSlotCapacity, nbsStackSlotUplTable=nbsStackSlotUplTable, nbsStackSlotUplSwDescr=nbsStackSlotUplSwDescr, nbsStackSlotSpecUplNumber=nbsStackSlotSpecUplNumber, nbsStackSlotPortsCapacity=nbsStackSlotPortsCapacity, nbsStackInfo=nbsStackInfo, PortsBitmap=PortsBitmap, nbsStackSlotType=nbsStackSlotType, nbsStackSlotHwVers=nbsStackSlotHwVers, nbsStackSlotUplType=nbsStackSlotUplType, nbsStackSlotOperStatus=nbsStackSlotOperStatus)
