#
# PySNMP MIB module INTEL-ES480-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-ES480-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
es480tAgent, = mibBuilder.importSymbols("INTEL-ES480-MIB", "es480tAgent")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibIdentifier, TimeTicks, ModuleIdentity, Integer32, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Counter64, IpAddress, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Integer32", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Counter64", "IpAddress", "Counter32", "ObjectIdentity")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
es480tVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 6, 60, 2))
if mibBuilder.loadTexts: es480tVlan.setLastUpdated('0003170000Z')
if mibBuilder.loadTexts: es480tVlan.setOrganization('Intel Corp.')
if mibBuilder.loadTexts: es480tVlan.setContactInfo('www.intel.com')
if mibBuilder.loadTexts: es480tVlan.setDescription('Intel ES480T Virtual LAN objects')
es480tVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 1))
es480tVirtualGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 2))
es480tEncapsulationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 3))
es480tProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5))
class Es480tSwitchVlanType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("vlanLayer2", 1))

es480tVlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 1, 2), )
if mibBuilder.loadTexts: es480tVlanIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanIfTable.setDescription('This table lists VLAN interfaces that exist within a device. A single entry exists in this list for each VLAN interface in the system. A VLAN interface may be created, destroyed and/or mapped to a globally identified vlan.')
es480tVlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 1, 2, 1), ).setIndexNames((0, "INTEL-ES480-VLAN-MIB", "es480tVlanIfIndex"))
if mibBuilder.loadTexts: es480tVlanIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanIfEntry.setDescription('An individual VLAN interface entry. When an NMS wishes to create a new entry in this table, it must obtain a non-zero index from the es480tNextAvailableVirtIfIndex object. Row creation in this table will fail if the chosen index value does not match the current value returned from the es480tNextAvailableVirtIfIndex object.')
es480tVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanIfIndex.setDescription("The index value of this row and the vlan's ifIndex in the ifTable. The NMS obtains the index value for this row by reading the es480tNextAvailableVirtIfIndex object.")
es480tVlanIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanIfDescr.setDescription('This is a description of the VLAN interface.')
es480tVlanIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 1, 2, 1, 3), Es480tSwitchVlanType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanIfType.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanIfType.setDescription('The VLAN interface type.')
es480tVlanIfGlobalIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanIfGlobalIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanIfGlobalIdentifier.setDescription('An administratively assigned global VLAN identifier. The binding between a global identifier and a VLAN interface can be created or removed. To create a binding an NMS must write a non-zero value to this object. To delete a binding, the NMS must write a zero to this object. The value 1 is reserved for the default VLAN and this cannot be deleted or re-assigned.')
es480tVlanIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 1, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanIfStatus.setDescription('The status column for this VLAN interface. This OBJECT can be set to: active(1) createAndGo(4) createAndWait(5) destroy(6) The following values may be read: active(1) notInService(2) notReady(3). Setting this object to createAndGo(4) causes the agent to attempt to create and commit the row based on the contents of the objects in the row. If all necessary information is present in the row and the values are acceptible to the agent, the agent will change the status to active(1). If any of the necessary objects are not available, the agent will reject the creation request. Setting this object to createAndWait(5) causes a row in this table to be created. The agent sets the status to notInService(2) if all of the information is present in the row and the values are acceptable to the agent; otherwise, the agent sets the status to notReady(3). Setting this object to active(1) is only valid when the current status is active(1) or notInService(2). When the state of the row transitions is set to active(1), the agent creates the corresponding row in the ifTable.. Setting this object to destroy(6) will remove the corresponding VLAN interface, remove the entry in this table, and the corresponding entries in the ifTable. In order for a set of this object to destroy(6) to succeed, all dependencies on this row must have been removed. These will include any stacking dependencies in the ifStackTable and any protocol specific tables dependencies.')
class Es480tSwitchVlanEncapsType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2))
    namedValues = NamedValues(("vlanEncaps8021q", 2))

es480tVlanEncapsIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 3, 1), )
if mibBuilder.loadTexts: es480tVlanEncapsIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanEncapsIfTable.setDescription('This table lists VLAN encapsulation interfaces that exist within a device. A single entry exists in this list for each VLAN encapsulation interface in the system. A VLAN encapsulation interface may be created or destroyed.')
es480tVlanEncapsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 3, 1, 1), ).setIndexNames((0, "INTEL-ES480-VLAN-MIB", "es480tVlanEncapsIfIndex"))
if mibBuilder.loadTexts: es480tVlanEncapsIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanEncapsIfEntry.setDescription('An individual VLAN encapsulation interface entry. When an NMS wishes to create a new entry in this table, it must obtain a non-zero index from the es480tNextAvailableVirtIfIndex object. Row creation in this table will fail if the chosen index value does not match the current value returned from the es480tNextAvailableVirtIfIndex object.')
es480tVlanEncapsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanEncapsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanEncapsIfIndex.setDescription("The index value of this row and the encapsulation interface's ifIndex in the ifTable. The NMS obtains the index value used for creating a row in this table by reading the es480tNextAvailableVirtIfIndex object.")
es480tVlanEncapsIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 3, 1, 1, 2), Es480tSwitchVlanEncapsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanEncapsIfType.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanEncapsIfType.setDescription('The encapsulation algorithm used when encapsulating packets transmitted, or de-encapsulating packets received through this interface.')
es480tVlanEncapsIfTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanEncapsIfTag.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanEncapsIfTag.setDescription('The tag used when encapsulating packets transmitted, or de-encapsulating packets received through this interface.')
es480tVlanEncapsIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 3, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanEncapsIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanEncapsIfStatus.setDescription('The row status for this VLAN encapsulation interface. This OBJECT can be set to: active(1) createAndGo(4) createAndWait(5) destroy(6) The following values may be read: active(1) notReady(3). In order for a row to become active, the NMS must set es480tVlanEncapsIfTagType and es480tVlanEncapsIfTag to some valid and consistent values. Setting this object to createAndGo(4) causes the agent to attempt to create and commit the row based on the contents of the objects in the row. If all necessary information is present in the row, the agent will create the row and change the status to active(1). If any of the necessary objects are not available, or specify an invalid configuration, the row will not be created and the agent will return an appropriate error. Setting this object to createAndWait(5) causes a row in in this table to be created. If all necessary objects in the row have been assigned values and specify a valid configuration, the status of the row will be set to notInService(2); otherwise, the status will be set to notReady(3). This object may only be set to createAndGo(4) or createAndWait(5) if it does not exist. Setting this object to active(1) when the status is notInService(2) causes the agent to commit the row. Setting this object to active(1) when its value is already active(1) is a no-op. Setting this object to destroy(6) will remove the corresponding VLAN encapsulation interface, remove the entry in this table, and remove the corresponding entry in the ifTable. In order for a set of this object to destroy(6) to succeed, all dependencies on this row must have been removed. These will include any references to this interface in the ifStackTable.')
es480tNextAvailableVirtIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es480tNextAvailableVirtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es480tNextAvailableVirtIfIndex.setDescription("The value of the next available virtual ifIndex. This object is used by an NMS to select an index value for row-creation in tables indexed by ifIndex. The current value of this object is changed to a new value when the current value is written to an agent's table, that is indexed by ifIndex. Row creation using the current value of this object, allocates a virtual ifIndex. Note the following: 1. A newly created row does not have to be active(1) for the agent to allocate the virtual ifIndex. 2. Race conditions between multiple NMS's end when a row is created. Rows are deemed created when a setRequest is successfully committed (i.e. the errorStats is noError(0)). 3. An agent that exhausts its supply of virual ifIndex values returns zero as the value of this object. This can be used by an NMS as an indication to deleted unused rows and reboot the device.")
es480tVlanProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 1), )
if mibBuilder.loadTexts: es480tVlanProtocolTable.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolTable.setDescription('Table of defined combinations of protocol IDs that make up one protocol definition name. All members of one protocol definition share the same es480tVlanProtocolIndex. A given protocol ID may appear in the definition of just one protocol definition. This table will typically contain some default entries for popular protocols.')
es480tVlanProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 1, 1), ).setIndexNames((0, "INTEL-ES480-VLAN-MIB", "es480tVlanProtocolIndex"), (0, "INTEL-ES480-VLAN-MIB", "es480tVlanProtocolIdIndex"))
if mibBuilder.loadTexts: es480tVlanProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolEntry.setDescription('One member protocol ID of a protocol definition.')
es480tVlanProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolIndex.setDescription('An index representing a protocol grouping of protocol ID values. A limited number of protocol groupings may be defined (up to 7).')
es480tVlanProtocolIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolIdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolIdIndex.setDescription('An index representing a particular protocol ID within a protocol grouping. A limited number of protocol IDs may be defined per es480tVlanProtocolIndex (up to 6).')
es480tVlanProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolName.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolName.setDescription('A human-readable string representing this protocol. This string should be the same for all entries sharing a given es480tVlanProtocolIndex. A es480tVlanProtocolEntry with es480tVlanProtocolName of ANY represents a match on all protocols: this entry may not be modified.')
es480tVlanProtocolDllEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 1), ("ethertype", 2), ("llc", 3), ("llcSnapEthertype", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolDllEncapsType.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolDllEncapsType.setDescription('Represents the type of data-link encapsulation in which the es480tVlanProtocolId protocol ID is carried. The value any(1) is used to indicate a wildcard and matches all encapsulations and protocol IDs that are not explicitly mentioned in this table. Entries of type any(1) may not be created. The value none(5) is used to indicate that no protocol IDs match this entry. A value of none(5) may not be set by a manager.')
es480tVlanProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolId.setDescription('The protocol ID: for entries of type ethertype(2) or llcSnapEthertype(4) this represents a 16-bit protocol ID. For entries of type llc(3) it represents a concatenation of LLC DSAP+SSAP in network byte order. This value is not valid for es480tVlanProtocolDllEncapsType values of any(1) or none(5).')
es480tVlanProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
es480tVlanProtocolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 2), )
if mibBuilder.loadTexts: es480tVlanProtocolVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolVlanTable.setDescription('Table to apply one of the protocol definitions in es480tVlanProtocolTable to a given VLAN This applies to all ports that are untagged in this VLAN). A limited number of protocols may be applied simultaneously in one device (up to 8).')
es480tVlanProtocolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 2, 1), ).setIndexNames((0, "INTEL-ES480-VLAN-MIB", "es480tVlanProtocolVlanIfIndex"), (0, "INTEL-ES480-VLAN-MIB", "es480tVlanProtocolVlanProtocolIndex"))
if mibBuilder.loadTexts: es480tVlanProtocolVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolVlanEntry.setDescription('A mapping of untagged packets of one protocol onto a particular VLAN.')
es480tVlanProtocolVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolVlanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolVlanIfIndex.setDescription("The index value of this row and the vlan's ifIndex in the ifTable. The NMS obtains the index value for this row by reading the es480tNextAvailableVirtIfIndex object.")
es480tVlanProtocolVlanProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolVlanProtocolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolVlanProtocolIndex.setDescription('An index representing a protocol grouping of protocol ID values. A limited number of protocol groupings may be defined (up to 7).')
es480tVlanProtocolVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 60, 2, 5, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es480tVlanProtocolVlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es480tVlanProtocolVlanStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
mibBuilder.exportSymbols("INTEL-ES480-VLAN-MIB", es480tVlanProtocolVlanProtocolIndex=es480tVlanProtocolVlanProtocolIndex, es480tVlanEncapsIfTable=es480tVlanEncapsIfTable, es480tVlanIfGlobalIdentifier=es480tVlanIfGlobalIdentifier, es480tVlanIfType=es480tVlanIfType, es480tVlanProtocolEntry=es480tVlanProtocolEntry, es480tVlanProtocolStatus=es480tVlanProtocolStatus, es480tNextAvailableVirtIfIndex=es480tNextAvailableVirtIfIndex, es480tVlanProtocolVlanTable=es480tVlanProtocolVlanTable, Es480tSwitchVlanType=Es480tSwitchVlanType, es480tVlanIfDescr=es480tVlanIfDescr, es480tVlanProtocolIdIndex=es480tVlanProtocolIdIndex, es480tVirtualGroup=es480tVirtualGroup, es480tVlanProtocolVlanEntry=es480tVlanProtocolVlanEntry, es480tVlanEncapsIfStatus=es480tVlanEncapsIfStatus, es480tVlanEncapsIfTag=es480tVlanEncapsIfTag, PYSNMP_MODULE_ID=es480tVlan, es480tEncapsulationGroup=es480tEncapsulationGroup, es480tVlanProtocolId=es480tVlanProtocolId, es480tVlanGroup=es480tVlanGroup, es480tProtocolGroup=es480tProtocolGroup, es480tVlanIfTable=es480tVlanIfTable, es480tVlanProtocolDllEncapsType=es480tVlanProtocolDllEncapsType, es480tVlanIfEntry=es480tVlanIfEntry, es480tVlanProtocolTable=es480tVlanProtocolTable, es480tVlanProtocolIndex=es480tVlanProtocolIndex, es480tVlanEncapsIfType=es480tVlanEncapsIfType, es480tVlanIfStatus=es480tVlanIfStatus, es480tVlanProtocolVlanIfIndex=es480tVlanProtocolVlanIfIndex, Es480tSwitchVlanEncapsType=Es480tSwitchVlanEncapsType, es480tVlanIfIndex=es480tVlanIfIndex, es480tVlanProtocolVlanStatus=es480tVlanProtocolVlanStatus, es480tVlan=es480tVlan, es480tVlanEncapsIfEntry=es480tVlanEncapsIfEntry, es480tVlanProtocolName=es480tVlanProtocolName, es480tVlanEncapsIfIndex=es480tVlanEncapsIfIndex)
