#
# PySNMP MIB module JUNIPER-LDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-LDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
jnxMplsLdpSesState, = mibBuilder.importSymbols("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState")
jnxLdpTraps, jnxMibs = mibBuilder.importSymbols("JUNIPER-SMI", "jnxLdpTraps", "jnxMibs")
MplsVpnName, = mibBuilder.importSymbols("MPLS-VPN-MIB", "MplsVpnName")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, NotificationType, Bits, MibIdentifier, TimeTicks, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Gauge32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "NotificationType", "Bits", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Gauge32", "Counter64", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxLdp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 14))
jnxLdp.setRevisions(('2004-08-10 00:00', '2004-06-23 00:00', '2004-06-22 00:00', '2002-01-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxLdp.setRevisionsDescriptions(("Added 'jnxLdpInstanceName' to the jnxLdpLspUp and jnxLdpLspDown trap.", 'Modified description of jnxLdpSesDownIf and jnxLdpSesDown.', "Added 'jnxLdpSesUpIf' to the jnxLdpSesUp trap.", 'Initial revision.',))
if mibBuilder.loadTexts: jnxLdp.setLastUpdated('200307182153Z')
if mibBuilder.loadTexts: jnxLdp.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxLdp.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxLdp.setDescription('The MIB modules extends the LDP mib draft.')
jnxLdpTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1))
jnxLdpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0))
jnxLdpLspFec = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxLdpLspFec.setStatus('current')
if mibBuilder.loadTexts: jnxLdpLspFec.setDescription('The LSP FEC in IP address format.')
jnxLdpRtrid = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxLdpRtrid.setStatus('current')
if mibBuilder.loadTexts: jnxLdpRtrid.setDescription('The router id of the sending router.')
jnxLdpLspDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("topologyChanged", 1), ("receivedWithdrawl", 2), ("neighborDown", 3), ("filterChanged", 4), ("bfdSessionDown", 5), ("unknown", 6), ("lspingDown", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxLdpLspDownReason.setStatus('current')
if mibBuilder.loadTexts: jnxLdpLspDownReason.setDescription('The reason why the LSP went down. Can be one of the following: the topology changed, the neighbor withdrew the label, the neighbor went down, the filter changed, the BFD session went down, lsping down, or the reason is unknown.')
jnxLdpSesDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 0), ("holdExpired", 1), ("connectionExpired", 2), ("allAdjacenciesDown", 3), ("badTLV", 4), ("badPDU", 5), ("connectionError", 6), ("connectionReset", 7), ("peerSentNotification", 8), ("unexpectedEOF", 9), ("authenticationChanged", 10), ("initError", 11), ("gracefulRestartAbort", 12), ("cliCommand", 13), ("gracefulRestartChanged", 14)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxLdpSesDownReason.setStatus('current')
if mibBuilder.loadTexts: jnxLdpSesDownReason.setDescription('The reason why the session transitioned to nonexistent state. Can be one of the following: unknown reason, hold time expired, connection time expired, all adjacencies down, received bad tlv, received bad pdu, connectionn error, connection reset, received notification from peer, received unexpected end-of-file, authentication key was changed, error during initialization, graceful restart was aborted or cli command.')
jnxLdpSesDownIf = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 5), InterfaceIndexOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxLdpSesDownIf.setStatus('current')
if mibBuilder.loadTexts: jnxLdpSesDownIf.setDescription('This variable is the snmp index of the interface relevant to the session-down event. If no interface can be correlated to the session-down, then it is the interface associated with one of the neighbors.')
jnxLdpLspFecLen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxLdpLspFecLen.setStatus('current')
if mibBuilder.loadTexts: jnxLdpLspFecLen.setDescription('The length in bits of the LSP FEC prefix.')
jnxLdpSesUpIf = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 7), InterfaceIndexOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxLdpSesUpIf.setStatus('current')
if mibBuilder.loadTexts: jnxLdpSesUpIf.setDescription('This variable is the interface index of one of the neighbors associated with this session.')
jnxLdpInstanceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 14, 1, 8), MplsVpnName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxLdpInstanceName.setStatus('current')
if mibBuilder.loadTexts: jnxLdpInstanceName.setDescription('Name of the VPN instance.')
jnxLdpLspUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0, 1)).setObjects(("JUNIPER-LDP-MIB", "jnxLdpLspFec"), ("JUNIPER-LDP-MIB", "jnxLdpRtrid"), ("JUNIPER-LDP-MIB", "jnxLdpLspFecLen"), ("JUNIPER-LDP-MIB", "jnxLdpInstanceName"))
if mibBuilder.loadTexts: jnxLdpLspUp.setStatus('current')
if mibBuilder.loadTexts: jnxLdpLspUp.setDescription('The SNMP trap that is generated when an LSP comes up.')
jnxLdpLspDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0, 2)).setObjects(("JUNIPER-LDP-MIB", "jnxLdpLspFec"), ("JUNIPER-LDP-MIB", "jnxLdpRtrid"), ("JUNIPER-LDP-MIB", "jnxLdpLspDownReason"), ("JUNIPER-LDP-MIB", "jnxLdpLspFecLen"), ("JUNIPER-LDP-MIB", "jnxLdpInstanceName"))
if mibBuilder.loadTexts: jnxLdpLspDown.setStatus('current')
if mibBuilder.loadTexts: jnxLdpLspDown.setDescription('The SNMP trap that is generated when the LSP goes down.')
jnxLdpSesUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0, 3)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState"), ("JUNIPER-LDP-MIB", "jnxLdpSesUpIf"))
if mibBuilder.loadTexts: jnxLdpSesUp.setStatus('current')
if mibBuilder.loadTexts: jnxLdpSesUp.setDescription("The SNMP trap that is generated when the value of 'jnxMplsLdpSesState' enters the 'operational(5) state.")
jnxLdpSesDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 4, 0, 4)).setObjects(("JUNIPER-MPLS-LDP-MIB", "jnxMplsLdpSesState"), ("JUNIPER-LDP-MIB", "jnxLdpSesDownReason"), ("JUNIPER-LDP-MIB", "jnxLdpSesDownIf"))
if mibBuilder.loadTexts: jnxLdpSesDown.setStatus('current')
if mibBuilder.loadTexts: jnxLdpSesDown.setDescription("The SNMP trap that is generated when the value of 'jnxMplsLdpSesState' leaves the 'operational(5) state. The value of jnxLdpSesDownIf is one of the neighbor's interface. It is the interface associated with the last neighbor when jnxLdpSesDownReason is allAdjacenciesDown (3).")
jnxLdpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2), )
if mibBuilder.loadTexts: jnxLdpStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxLdpStatsTable.setDescription('Table of statistics of Ldp FECs.')
jnxLdpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1), ).setIndexNames((0, "JUNIPER-LDP-MIB", "jnxLdpInstanceId"), (0, "JUNIPER-LDP-MIB", "jnxLdpFecType"), (0, "JUNIPER-LDP-MIB", "jnxLdpFec"), (0, "JUNIPER-LDP-MIB", "jnxLdpFecLength"))
if mibBuilder.loadTexts: jnxLdpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxLdpStatsEntry.setDescription('Entry containing statistics information about a particular LDP FEC.')
jnxLdpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: jnxLdpInstanceId.setStatus('current')
if mibBuilder.loadTexts: jnxLdpInstanceId.setDescription('LDP instance.')
jnxLdpFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: jnxLdpFecType.setStatus('current')
if mibBuilder.loadTexts: jnxLdpFecType.setDescription('Type of this LDP FEC.')
jnxLdpFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: jnxLdpFec.setStatus('current')
if mibBuilder.loadTexts: jnxLdpFec.setDescription('LDP FEC.')
jnxLdpFecLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 4), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: jnxLdpFecLength.setStatus('current')
if mibBuilder.loadTexts: jnxLdpFecLength.setDescription('LDP FEC length (in bits).')
jnxLdpFecStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("disabled", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpFecStatisticsStatus.setStatus('current')
if mibBuilder.loadTexts: jnxLdpFecStatisticsStatus.setDescription("Indicates the status of traffic statistics for this FEC. For penultimate hop FECs traffic statistics can be disabled. For such FECs, the following objects will have the value '0'.")
jnxLdpIngressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpIngressOctets.setStatus('current')
if mibBuilder.loadTexts: jnxLdpIngressOctets.setDescription('The number of octets of traffic originated on this box, forwarded over the current LDP FEC. The number reported is not realtime and may be subject to several minutes delay. The delay is controllable by ldp statistics gathering interval, which by default is 5 minutes.')
jnxLdpIngressPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpIngressPackets.setStatus('current')
if mibBuilder.loadTexts: jnxLdpIngressPackets.setDescription('The number of packets of traffic originated on this box, forwarded over the current LDP FEC. The number reported is not realtime and may be subject to several minutes delay. The delay is controllable by ldp statistics gathering interval, which by default is 5 minutes.')
jnxLdpTransitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpTransitOctets.setStatus('current')
if mibBuilder.loadTexts: jnxLdpTransitOctets.setDescription('The number of octets of traffic destined to this FEC, originated on a different box, forwarded over the current LDP FEC. The number reported is not realtime and may be subject to several minutes delay. The delay is controllable by ldp statistics gathering interval, which by default is 5 minutes.')
jnxLdpTransitPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 14, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLdpTransitPackets.setStatus('current')
if mibBuilder.loadTexts: jnxLdpTransitPackets.setDescription('The number of packets of traffic destined to this FEC, originated on a different box, forwarded over the current LDP FEC. The number reported is not realtime and may be subject to several minutes delay. The delay is controllable by ldp statistics gathering interval, which by default is 5 minutes.')
mibBuilder.exportSymbols("JUNIPER-LDP-MIB", jnxLdpSesUpIf=jnxLdpSesUpIf, jnxLdpSesDownIf=jnxLdpSesDownIf, jnxLdpSesDownReason=jnxLdpSesDownReason, jnxLdpLspFec=jnxLdpLspFec, jnxLdpIngressOctets=jnxLdpIngressOctets, jnxLdpSesUp=jnxLdpSesUp, jnxLdpTransitOctets=jnxLdpTransitOctets, jnxLdpTrapVars=jnxLdpTrapVars, jnxLdpStatsEntry=jnxLdpStatsEntry, jnxLdpFecType=jnxLdpFecType, jnxLdpRtrid=jnxLdpRtrid, PYSNMP_MODULE_ID=jnxLdp, jnxLdpFec=jnxLdpFec, jnxLdpLspUp=jnxLdpLspUp, jnxLdpLspDownReason=jnxLdpLspDownReason, jnxLdpInstanceName=jnxLdpInstanceName, jnxLdpFecStatisticsStatus=jnxLdpFecStatisticsStatus, jnxLdpTrapPrefix=jnxLdpTrapPrefix, jnxLdpIngressPackets=jnxLdpIngressPackets, jnxLdpTransitPackets=jnxLdpTransitPackets, jnxLdpStatsTable=jnxLdpStatsTable, jnxLdpInstanceId=jnxLdpInstanceId, jnxLdpLspFecLen=jnxLdpLspFecLen, jnxLdpSesDown=jnxLdpSesDown, jnxLdpFecLength=jnxLdpFecLength, jnxLdpLspDown=jnxLdpLspDown, jnxLdp=jnxLdp)
