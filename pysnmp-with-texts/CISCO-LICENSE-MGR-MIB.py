#
# PySNMP MIB module CISCO-LICENSE-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LICENSE-MGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Integer32, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Gauge32, Counter32, Counter64, MibIdentifier, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Integer32", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Gauge32", "Counter32", "Counter64", "MibIdentifier", "NotificationType", "iso")
DateAndTime, TextualConvention, TestAndIncr, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "TestAndIncr", "DisplayString", "TruthValue")
ciscoLicenseMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 369))
ciscoLicenseMgrMIB.setRevisions(('2004-07-20 00:00', '2003-11-27 00:00', '2003-10-30 00:00', '2003-09-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLicenseMgrMIB.setRevisionsDescriptions(('Added a new object for detecting the license violation in the system.', "Updated the description of 'clmLicenseFileURI', 'clmLicenseFileTargetName' and 'clmLicenseConfigCommand' to include the 'update' license operation. Added one more new error code 'invalidPlatform' into the 'clmLicenseConfigCommandStatus' object.", "New objects for checkin/checkout a licensed feature have been added. New table 'clmFeatureUsageDetailsTable' has been added to show the list of applications, which are checked out the licensed features.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLicenseMgrMIB.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: ciscoLicenseMgrMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLicenseMgrMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoLicenseMgrMIB.setDescription('The MIB module for a method of managing license files on the system. Licensing mechanism provides more flexibility in supporting various features in the system. Feature License is the specification of the permission to use a particular feature, indicated through license file. The permissions can also specify the limit on the number of concurrent usages of the feature, the limit on time period of the feature usage and the device where the feature has to be used. License files will be given to customers when they buy the licenses. User should copy the license file to some location on the system, for installing.')
ciscoLicenseMgrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 1))
ciscoLicenseMgrMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 2))
ciscoLicenseMgrMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 3))
ciscoLicenseMgrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 1))
clmLicenseConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2))
clmLicenseInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3))
ciscoLicenseMgrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0))
clmHostId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmHostId.setStatus('current')
if mibBuilder.loadTexts: clmHostId.setDescription("This object contains the 'License hostid' of the local system. Its value is an opaque string, and is used to identify the local system when requesting license(s) for this system.")
clmLicenseConfigSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseConfigSpinLock.setStatus('current')
if mibBuilder.loadTexts: clmLicenseConfigSpinLock.setDescription("This object is used to facilitate modification of clmLicenseFileURI,clmLicenseFileTargetName and clmLicenseConfigCommand objects by multiple managers. The procedure for modifying the above three objects are as follows: 1. Determine new values for clmLicenseFileURI, clmLicenseFileTargetName and clmLicenseConfigCommand. 2. Retrieve the value of clmLicenseConfigSpinLock. 3. Set the value of clmLicenseConfigSpinLock to the retrieved value, and (in the same PDU) the value of clmLicenseFileURI to the new value. If the set fails for the clmLicenseConfigSpinLock object, go back to step 2. 4. Set the value of clmLicenseConfigSpinLock to the retrieved value incremented by one, and (in the same PDU) the value of clmLicenseFileTargetName to its new value. If the set fails for clmLicenseConfigSpinLock, go back to step 2. 5. Set the value of clmLicenseConfigSpinLock to the retrieved value incremented by two, and (in the same PDU) the value of clmLicenseConfigCommand to 'install' or 'uninstall' or 'update'. If the set fails for clmLicenseConfigSpinLock, go back to step 2. Note that if it's possible to include clmLicenseFileTargetName and/or clmLicenseConfigCommand in the (Set Request) PDU of an earlier step, then step 4 and/or 5, can be eliminated.")
clmLicenseFileURI = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseFileURI.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileURI.setDescription("This object represents the location on the local system, from which the license file will be picked for installation or updating. User should have copied the license file provided by CISCO-CCO , by some other means ( for example, thru CLI) to this location. For example, the value of this object could be 'bootflash:licfile1.lic'. This object MUST be set to a valid value before or concurrently with setting the value of the clmLicenseConfigCommand object to 'install' or 'update'. For uninstall operation the value of this object is not considered, it is irrelevant.")
clmLicenseFileTargetName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseFileTargetName.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileTargetName.setDescription("This object represents the name with which the license file will be installed, or the name of the license file for uninstall, or the name of the license file to be updated. For 'uninstall' operation, this object must be set to the appropriate value, i.e., a non-zero length string, before or concurrently with setting the value of clmLicenseConfigCommand object to 'uninstall'. For 'install' operation, this object is set either to the file name with which the license will be installed, or to the zero-length string. In the latter case, the filename specified through clmLicenseFileURI will be used for installing the license. For example, if the value of clmLicenseFileURI object is set to 'bootflash:licfile1.lic' and this object is set to 'target1.lic', then the license will be installed with the filename 'target1.lic'. If this object contains zero length string then license will be installed with the filename 'licfile1.lic'. For 'update' operation, this object is set either to the file name which is to be updated (overwritten), or to the zero-length string. In the latter case, the filename specified through clmLicenseFileURI, will be updated. For example, if the value of clmLicenseFileURI object is set to 'bootflash:licfile2.lic' and this object is set to 'target2.lic', then the already installed license file 'target2.lic' will be updated by the contents of 'bootflash:licfile2.lic'. If this object contains zero length string then the already installed license file 'licfile2.lic' will be updated with the contents of 'bootflash:licfile2.lic'.")
clmLicenseConfigCommand = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("install", 1), ("uninstall", 2), ("noOp", 3), ("update", 4))).clone('noOp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseConfigCommand.setStatus('current')
if mibBuilder.loadTexts: clmLicenseConfigCommand.setDescription("The command to be executed. Command Remarks install Installs the license file specified thru the clmLicenseFileURI on the system, also performs some verification on the license file before installing. uninstall Uninstalls the license file specified in the clmLicenseFileTargetName object. noOp no operation will be performed. update Updates (Overwrites) an already installed license file. The value of this object when read is always 'noOp'.")
clmLicenseConfigCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("success", 1), ("inProgress", 2), ("corruptedLicenseFile", 3), ("targetLicenseFileAlreadyExist", 4), ("invalidLicenseFileName", 5), ("duplicateLicense", 6), ("licenseInUse", 7), ("generalLicensingFailure", 8), ("none", 9), ("licenseExpiryConflict", 10), ("invalidLicenseCount", 11), ("notThisHost", 12), ("licenseInGraceMore", 13), ("licenseFileNotFound", 14), ("licenseFileMissing", 15), ("invalidLicenseFileExtension", 16), ("invalidURI", 17), ("noDemoLicenseSupport", 18), ("invalidPlatform", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseConfigCommandStatus.setStatus('current')
if mibBuilder.loadTexts: clmLicenseConfigCommandStatus.setDescription("The status of the license install / uninstall / update operation. success (1) - install/uninstall/update operation completed successfully. inProgress (2) - License install/uninstall/update operation is in progress. corruptedLicenseFile (3) - License file content is Invalid/Corrupted. targetLicenseFileAlreadyExist (4) - Target license file name already exist. invalidLicenseFileName (5) - Invalid license file target name for install / uninstall operation. duplicateLicense (6) - License file is already installed. licenseInUse (7) - Can't uninstall a license file which is in use. generalLicensingFailure (8) - General error from license Manager. none (9) - no install/uninstall/update operation is performed. licenseExpiryConflict(10) - License exist with a different expiry date for the feature. invalidLicenseCount(11) - License count is invalid for the feature. notThisHost (12) - License host-id in the license file doesn't match. licenseInGraceMore (13) - Number of licenses in grace period is more than the number in install license file. licenseFileNotFound (14) - License file not found, for install / uninstall / update operation. licenseFileMissing (15) - A previously installed license file is found missing. invalidLicenseFileExtension (16) - License file does not have a .lic extension. invalidURI (17) - Invalid license file URI, specified for install operation. noDemoLicenseSupport (18) - Demo License Not Supported. invalidPlatform (19) - Invalid Platform.")
clmLicenseRequestSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 6), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseRequestSpinLock.setStatus('current')
if mibBuilder.loadTexts: clmLicenseRequestSpinLock.setDescription("This object is used to facilitate modification of clmLicenseRequestFeatureName , clmLicenseRequestAppName and clmLicenseRequestCommand objects by multiple managers. The procedure for modifying the above three objects are as follows: 1. Determine new values for clmLicenseRequestFeatureName, clmLicenseRequestAppName and clmLicenseConfigCommand. 2. Retrieve the value of clmLicenseRequestSpinLock. 3. Set the value of clmLicenseRequestSpinLock to the retrieved value, and (in the same PDU) the value of clmLicenseRequestFeatureName to the new value. If the set fails for the clmLicenseRequestSpinLock object, go back to step 2. 4. Set the value of clmLicenseRequestSpinLock to the retrieved value incremented by one, and (in the same PDU) the value of clmLicenseRequestAppName to its new value. If the set fails for clmLicenseRequestSpinLock, go back to step 2. 5. Set the value of clmLicenseRequestSpinLock to the retrieved value incremented by two, and (in the same PDU) the value of clmLicenseRequestCommand to 'checkIn' or 'checkOut'. If the set fails for clmLicenseRequestSpinLock, go back to step 2. Note that if it's possible to include clmLicenseRequestAppName and/or clmLicenseRequestCommand in the (Set Request) PDU of an earlier step, then step 4 and/or 5, can be eliminated.")
clmLicenseRequestFeatureName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseRequestFeatureName.setStatus('current')
if mibBuilder.loadTexts: clmLicenseRequestFeatureName.setDescription("This object represents the licensed feature name, requested for checkin / checkout a license. This object MUST be set to a valid value before or concurrently with setting the value of the clmLicenseRequestCommand object to 'checkIn' or 'checkOut'.")
clmLicenseRequestAppName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseRequestAppName.setStatus('current')
if mibBuilder.loadTexts: clmLicenseRequestAppName.setDescription("This object is used to optionally associate an id with a license checkin/checkout request for the feature name specified in the 'clmLicenseRequestFeatureName' object. The application can choose to set a meaningful name for this object. If 2 requests have the same value for appName then they are treated as same requests. If this object is not set or contains zero length string then each checkin/checkout request is treated as a distinct request.")
clmLicenseRequestCommand = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checkIn", 1), ("checkOut", 2), ("noOp", 3))).clone('noOp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseRequestCommand.setStatus('current')
if mibBuilder.loadTexts: clmLicenseRequestCommand.setDescription("The command to be executed. Command Remarks checkIn checkin a license for the feature name specified thru 'clmLicenseRequestFeatureName' object. checkOut checkout a license for the feature name specified thru 'clmLicenseRequestFeatureName' object. noOp no operation will be performed. The value of this object when read is always 'noOp'.")
clmLicenseRequestCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("success", 1), ("none", 2), ("licenseDenied", 3), ("licenseTooMany", 4), ("generalLicensingFailure", 5), ("invalidFeature", 6), ("licenseExpired", 7), ("licenseServerDown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseRequestCommandStatus.setStatus('current')
if mibBuilder.loadTexts: clmLicenseRequestCommandStatus.setDescription('The status of the license checkin/checkout operation. success (1) - license checkin/checkout operation completed successfully. none (2) - no license checkin/checkout operation is performed. licenseDenied (3) - No license available for the requested feature. licenseTooMany (4) - license count exceed for counted license. generalLicensingFailure (5) - General error from license Manager. invalidFeature (6) - Invalid license feature. licenseExpired (7) - License expired. licenseServerDown (8) - License server down. .')
clmNoOfLicenseFilesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfLicenseFilesInstalled.setStatus('current')
if mibBuilder.loadTexts: clmNoOfLicenseFilesInstalled.setDescription('This object represents the number of license files currently installed on this system.')
clmLicenseFileContentsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2), )
if mibBuilder.loadTexts: clmLicenseFileContentsTable.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileContentsTable.setDescription("Contains information about all the license files installed on the system. License file is a 'textual file' provided by the CISCO-CCO, when the user buys the license. This file contains licensing details for one or more 'Feature License'. 'Feature License' is the specification of the permission to use a particular feature. The following attributes are specified in the 'Feature License' FEATURE - specifies the license feature name. HOSTID - specifies the hostid of the system, where the feature has to be used. For Demo license, 'HOSTID' is specified as 'HOSTID=DEMO'. permanent - specifies permanent license. uncounted- specifies the uncounted license for this feature. For counted license, instead of the attribute 'uncounted' , a number indicating the 'maximum number of concurrent usages' of this license feature is specified. The date specified in the 'Feature License', indicates the expiry date of this license feature. Other attributes in the license file are irrelevant to the user. Example: 1 - A Demo license file contents # An example ficon license FEATURE ficon cisco 1.00 31-aug-2003 uncounted HOSTID=DEMO\\ SIGN=95D7C8860EE0 Example: 2 - A Permanent license file contents SERVER this_host ANY VENDOR cisco # An example fcports license FEATURE fcports cisco 1.00 permanent 30 HOSTID=VDH=4C0A3364\\ SIGN=C3ACA6D831D6 .")
clmLicenseFileContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LICENSE-MGR-MIB", "clmLicenseFileName"), (0, "CISCO-LICENSE-MGR-MIB", "clmLicenseFileRowNumber"))
if mibBuilder.loadTexts: clmLicenseFileContentsEntry.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileContentsEntry.setDescription("A license file contains one or more 'rows' containing ASCII character strings, where each occurrence of an LF character terminates the 'row' containing it. A string of 255 characters after one LF character (or at the beginning of the file) which does not contain another LF character is also treated as a 'row' of the license file. This object represents information about a particular 'row' in the license file contents.")
clmLicenseFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: clmLicenseFileName.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileName.setDescription('Specifies the the installed License file name.')
clmLicenseFileRowNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: clmLicenseFileRowNumber.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileRowNumber.setDescription('Represents the row number. For example, 1 for the first row, two for the second, ..., N for the last (N-th) row.')
clmLicenseFileTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseFileTimeStamp.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileTimeStamp.setDescription('Represents the time when the license file contents was last modified.')
clmLicenseFileNoOfRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseFileNoOfRows.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileNoOfRows.setDescription("This object represents the number of 'rows' in the license file named by the the value of the corresponding instance of 'clmLicenseFileName'.")
clmLicenseFileRowContents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseFileRowContents.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileRowContents.setDescription("This object represents the contents of the 'row' for which the row number is given by the value of the corresponding instance of 'clmLicenseFileRowNumber' in the license file named by the the value of the corresponding instance of 'clmLicenseFileName'.")
clmNoOfLicensedFeatures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfLicensedFeatures.setStatus('current')
if mibBuilder.loadTexts: clmNoOfLicensedFeatures.setDescription('This object represents the current number of entries in the clmLicenseFeatureUsageTable. Indicates the number of licensed features in the local system.')
clmLicenseFeatureUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4), )
if mibBuilder.loadTexts: clmLicenseFeatureUsageTable.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFeatureUsageTable.setDescription('Represents the current license usage on the system. Contains one entry for each licensed feature in system.')
clmLicenseFeatureUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-LICENSE-MGR-MIB", "clmLicenseFeatureName"))
if mibBuilder.loadTexts: clmLicenseFeatureUsageEntry.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFeatureUsageEntry.setDescription('Licensing information for a particular feature can appear in multiple license files. This object contains the consolidated licensing information for the particular feature from all the installed license files.')
clmLicenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: clmLicenseFeatureName.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFeatureName.setDescription('This object represents the name of the licensed feature.')
clmLicenseFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 2), Bits().clone(namedValues=NamedValues(("demo", 0), ("permanent", 1), ("counted", 2), ("unlicensed", 3), ("inGracePeriod", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseFlag.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFlag.setDescription("Information about the license type. bit positions, 0 - demo license, if bit is set. 1 - permanent license, if bit is set. permanent means, the license for the feature has no expiry date. if bit is reset, then the license for the feature has expiry date. 2 - counted license, if bit is set. uncounted license, if bit is reset. 3 - unlicensed, if bit is set, means no license for this feature is installed. 4 - feature is in grace period, if bit is set. This means that applications are allowed to to use this feature license till the expiry of the grace period, mentioned in the corresponding instance of 'clmLicenseGracePeriod' object. Feature is not in grace period, if bit is reset. when 'unlicensed' (ie.) bit '3' is set, then the value of bit 0,1 and 2 are irrelevant. Whether or not this value can have 'demo' and 'permanent' set at the same time is a policy issue, and some implementations will prohibit such usage.")
clmNoOfLicenseMaxUsages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfLicenseMaxUsages.setStatus('current')
if mibBuilder.loadTexts: clmNoOfLicenseMaxUsages.setDescription("Maximum number of concurrent usages of this license feature. This is the cumulative license usage count for this feature from all the installed license files, containing this feature's license information. If the clmLicenseFlag object has value of bit 2 'reset', ( means uncounted license), then the value of this object is irrelevant.")
clmNoOfMissingUsageLicenses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfMissingUsageLicenses.setStatus('current')
if mibBuilder.loadTexts: clmNoOfMissingUsageLicenses.setDescription("This object represents the number of missing usage licenses of this feature, when one or more installed license files containing this feature's license, are missing in the local system. Under normal condition, the value of this object is '0'.")
clmNoOfLicenseCurrentUsages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfLicenseCurrentUsages.setStatus('current')
if mibBuilder.loadTexts: clmNoOfLicenseCurrentUsages.setDescription('Represents the number of current usages of this licensed feature.')
clmLicenseExpiryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseExpiryDate.setStatus('current')
if mibBuilder.loadTexts: clmLicenseExpiryDate.setDescription("Expiry date of the licensed feature. If the corresponding instances of clmLicenseFlag indicates 'permanent' or 'unlicensed' , then the value of this object is irrelevant.")
clmLicenseGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5184000))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseGracePeriod.setStatus('current')
if mibBuilder.loadTexts: clmLicenseGracePeriod.setDescription("This object represents the grace period left for this feature, in seconds. Grace period is the no.of seconds either an unlicensed feature or a feature whose license has expired is allowed to run. The value of this object is relevant only when the corresponding instances of clmLicenseFlag indicates 'ingraceperiod'.")
clmFeatureUsageDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 5), )
if mibBuilder.loadTexts: clmFeatureUsageDetailsTable.setStatus('current')
if mibBuilder.loadTexts: clmFeatureUsageDetailsTable.setDescription('Represents the list of applications which have checked out the licensed features.')
clmFeatureUsageDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-LICENSE-MGR-MIB", "clmLicenseFeatureName"), (0, "CISCO-LICENSE-MGR-MIB", "clmLicensedAppIndex"))
if mibBuilder.loadTexts: clmFeatureUsageDetailsEntry.setStatus('current')
if mibBuilder.loadTexts: clmFeatureUsageDetailsEntry.setDescription('An Entry represents an application instance which has checked out a license for the feature.')
clmLicensedAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clmLicensedAppIndex.setStatus('current')
if mibBuilder.loadTexts: clmLicensedAppIndex.setDescription('This is an index to the applications for a licensed feature.')
clmLicensedAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicensedAppName.setStatus('current')
if mibBuilder.loadTexts: clmLicensedAppName.setDescription("Represents the name of the application instance, which has checked out the feature. It is the value of 'clmLicenseRequestAppName' object set while checking out the license.")
clmLicenseViolationWarnFlag = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseViolationWarnFlag.setStatus('current')
if mibBuilder.loadTexts: clmLicenseViolationWarnFlag.setDescription("If one or more application instance has checked out any feature, without a valid license file installed for that feature in the system, is termed as 'License Violation'. This object indicates whether any license violation has been detected in the system and the grace period left for the corresponding feature is less than '30' days. The value of this object set to 'true' indicates a 'License Violation' detected in the system , and the grace period left for the corresponding feature is less than 30 days. The value of this object set to 'false' indicates eithor there is 'NO License Violation' detected in the system, or a 'License Violation' is detected, but the grace period left for the corresponding feature is more than 30 days.")
clmNotificationsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmNotificationsEnable.setStatus('current')
if mibBuilder.loadTexts: clmNotificationsEnable.setDescription("This object indicates whether the system should generate notifications specified in 'clmNotificationGroup' or not.")
clmLicenseExpiryNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0, 1)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"))
if mibBuilder.loadTexts: clmLicenseExpiryNotify.setStatus('current')
if mibBuilder.loadTexts: clmLicenseExpiryNotify.setDescription('A clmLicenseCountExpiryNotify is sent, when a feature license expires.')
clmNoLicenseForFeatureNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0, 2)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseGracePeriod"))
if mibBuilder.loadTexts: clmNoLicenseForFeatureNotify.setStatus('current')
if mibBuilder.loadTexts: clmNoLicenseForFeatureNotify.setDescription("A 'clmNoLicenseForFeatureNotify' is sent, when an license is issued for a feature which does not have license. The license will expire after a grace period, which is mentioned in the 'clmLicenseGracePeriod' object of this notification. This notification is also sent once every 24 hours from the start of the grace period. In the last 7 days before grace period expiry this notification is sent once every hour.")
clmLicenseFileMissingNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0, 3)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmNoOfMissingUsageLicenses"))
if mibBuilder.loadTexts: clmLicenseFileMissingNotify.setStatus('current')
if mibBuilder.loadTexts: clmLicenseFileMissingNotify.setDescription("A clmLicenseFileMissingNotify is generated when the system detects that one or more installed license files are missing. To correct this fault, any files which might be missing should be reinstalled, e.g., if it's unknown which ones are missing, then all files can be re-installed, ignoring any 'duplicate license' messages.")
clmLicenseExpiryWarningNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0, 4)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"))
if mibBuilder.loadTexts: clmLicenseExpiryWarningNotify.setStatus('current')
if mibBuilder.loadTexts: clmLicenseExpiryWarningNotify.setDescription("A 'clmLicenseExpiryWarningNotify' is sent, when an license issued for a feature is going to expire, and the feature is use. This notification is sent once in a day starting 30 days before license expiry. In the last 7 days before expiry this notification is sent once every hour. The license will expire on the date and time, mentioned in the 'clmLicenseExpiryDate' object of this notification.")
ciscoLicenseMgrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 1))
ciscoLicenseMgrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2))
ciscoLicenseMgrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 1, 1)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseInstallGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfInstalledLicensesGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseInformationGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationsEnableGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLicenseMgrCompliance = ciscoLicenseMgrCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLicenseMgrCompliance.setDescription('Compliance statement for License Mgr MIB.')
ciscoLicenseMgrCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 1, 2)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseInstallGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfInstalledLicensesGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseInformationGroup1"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationsEnableGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLicenseMgrCompliance1 = ciscoLicenseMgrCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLicenseMgrCompliance1.setDescription('Compliance statement for License Mgr MIB.')
ciscoLicenseMgrCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 1, 3)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseInstallGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfInstalledLicensesGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseInformationGroup2"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationsEnableGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLicenseMgrCompliance2 = ciscoLicenseMgrCompliance2.setStatus('current')
if mibBuilder.loadTexts: ciscoLicenseMgrCompliance2.setDescription('Compliance statement for License Mgr MIB.')
clmLicenseInstallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 1)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmHostId"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseConfigSpinLock"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileURI"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileTargetName"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseConfigCommand"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseConfigCommandStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseInstallGroup = clmLicenseInstallGroup.setStatus('current')
if mibBuilder.loadTexts: clmLicenseInstallGroup.setDescription('A collection of objects for license file installation or uninstallation or updating.')
clmNoOfInstalledLicensesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 2)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseFilesInstalled"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicensedFeatures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmNoOfInstalledLicensesGroup = clmNoOfInstalledLicensesGroup.setStatus('current')
if mibBuilder.loadTexts: clmNoOfInstalledLicensesGroup.setDescription('Objects indicating the number of licenses files & the number of licensed features installed on the system.')
clmLicenseInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 3)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseFileTimeStamp"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileNoOfRows"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileRowContents"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFlag"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseMaxUsages"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfMissingUsageLicenses"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseCurrentUsages"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseGracePeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseInformationGroup = clmLicenseInformationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: clmLicenseInformationGroup.setDescription('A group containing objects providing information about the license file contents and the licensed features on the system.')
clmNotificationsEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 4)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmNotificationsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmNotificationsEnableGroup = clmNotificationsEnableGroup.setStatus('current')
if mibBuilder.loadTexts: clmNotificationsEnableGroup.setDescription('Object for enabling the notifications specified in clmNotificationGroup. ')
clmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 5)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryNotify"), ("CISCO-LICENSE-MGR-MIB", "clmNoLicenseForFeatureNotify"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileMissingNotify"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryWarningNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmNotificationGroup = clmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: clmNotificationGroup.setDescription('A collection of notifications for license manager.')
clmLicenseRequestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 6)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestSpinLock"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestFeatureName"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestAppName"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestCommand"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestCommandStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseRequestGroup = clmLicenseRequestGroup.setStatus('current')
if mibBuilder.loadTexts: clmLicenseRequestGroup.setDescription('A collection of objects for the license checkin (or) checkout for the licensed feature.')
clmLicenseInformationGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 7)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseFileTimeStamp"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileNoOfRows"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileRowContents"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFlag"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseMaxUsages"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfMissingUsageLicenses"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseCurrentUsages"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseGracePeriod"), ("CISCO-LICENSE-MGR-MIB", "clmLicensedAppName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseInformationGroup1 = clmLicenseInformationGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: clmLicenseInformationGroup1.setDescription('A group containing objects providing information about the license file contents and the licensed features on the system.')
clmLicenseInformationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 8)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseFileTimeStamp"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileNoOfRows"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileRowContents"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFlag"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseMaxUsages"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfMissingUsageLicenses"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseCurrentUsages"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseGracePeriod"), ("CISCO-LICENSE-MGR-MIB", "clmLicensedAppName"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseViolationWarnFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseInformationGroup2 = clmLicenseInformationGroup2.setStatus('current')
if mibBuilder.loadTexts: clmLicenseInformationGroup2.setDescription('A group containing objects providing information about the license file contents and the licensed features on the system.')
mibBuilder.exportSymbols("CISCO-LICENSE-MGR-MIB", clmLicenseFeatureUsageEntry=clmLicenseFeatureUsageEntry, clmNoOfLicensedFeatures=clmNoOfLicensedFeatures, ciscoLicenseMgrCompliances=ciscoLicenseMgrCompliances, clmNotificationGroup=clmNotificationGroup, clmLicenseFileRowNumber=clmLicenseFileRowNumber, ciscoLicenseMgrConfig=ciscoLicenseMgrConfig, clmLicensedAppIndex=clmLicensedAppIndex, clmLicenseFeatureUsageTable=clmLicenseFeatureUsageTable, clmLicenseFileNoOfRows=clmLicenseFileNoOfRows, clmLicenseConfigCommand=clmLicenseConfigCommand, clmLicenseFlag=clmLicenseFlag, clmLicenseViolationWarnFlag=clmLicenseViolationWarnFlag, clmLicenseFileURI=clmLicenseFileURI, clmLicenseInformation=clmLicenseInformation, ciscoLicenseMgrNotifications=ciscoLicenseMgrNotifications, clmNoLicenseForFeatureNotify=clmNoLicenseForFeatureNotify, clmLicenseFileMissingNotify=clmLicenseFileMissingNotify, clmLicenseExpiryWarningNotify=clmLicenseExpiryWarningNotify, clmHostId=clmHostId, clmLicenseFileContentsEntry=clmLicenseFileContentsEntry, clmLicenseRequestCommandStatus=clmLicenseRequestCommandStatus, clmNotificationsEnable=clmNotificationsEnable, ciscoLicenseMgrCompliance2=ciscoLicenseMgrCompliance2, ciscoLicenseMgrMIBNotifs=ciscoLicenseMgrMIBNotifs, clmNoOfInstalledLicensesGroup=clmNoOfInstalledLicensesGroup, ciscoLicenseMgrMIBObjects=ciscoLicenseMgrMIBObjects, clmLicenseRequestCommand=clmLicenseRequestCommand, clmLicenseExpiryNotify=clmLicenseExpiryNotify, clmFeatureUsageDetailsEntry=clmFeatureUsageDetailsEntry, clmNoOfLicenseCurrentUsages=clmNoOfLicenseCurrentUsages, clmLicenseFileTimeStamp=clmLicenseFileTimeStamp, clmLicenseRequestSpinLock=clmLicenseRequestSpinLock, clmLicenseFileContentsTable=clmLicenseFileContentsTable, clmNotificationsEnableGroup=clmNotificationsEnableGroup, clmLicenseFileName=clmLicenseFileName, clmNoOfLicenseMaxUsages=clmNoOfLicenseMaxUsages, clmFeatureUsageDetailsTable=clmFeatureUsageDetailsTable, PYSNMP_MODULE_ID=ciscoLicenseMgrMIB, clmLicensedAppName=clmLicensedAppName, ciscoLicenseMgrGroups=ciscoLicenseMgrGroups, clmLicenseInformationGroup=clmLicenseInformationGroup, clmNoOfMissingUsageLicenses=clmNoOfMissingUsageLicenses, clmLicenseConfigCommandStatus=clmLicenseConfigCommandStatus, clmLicenseRequestGroup=clmLicenseRequestGroup, clmLicenseInstallGroup=clmLicenseInstallGroup, clmLicenseRequestAppName=clmLicenseRequestAppName, ciscoLicenseMgrCompliance=ciscoLicenseMgrCompliance, clmNoOfLicenseFilesInstalled=clmNoOfLicenseFilesInstalled, clmLicenseInformationGroup2=clmLicenseInformationGroup2, clmLicenseExpiryDate=clmLicenseExpiryDate, clmLicenseInformationGroup1=clmLicenseInformationGroup1, clmLicenseFeatureName=clmLicenseFeatureName, ciscoLicenseMgrMIBConform=ciscoLicenseMgrMIBConform, clmLicenseRequestFeatureName=clmLicenseRequestFeatureName, clmLicenseFileRowContents=clmLicenseFileRowContents, ciscoLicenseMgrCompliance1=ciscoLicenseMgrCompliance1, clmLicenseConfiguration=clmLicenseConfiguration, clmLicenseGracePeriod=clmLicenseGracePeriod, clmLicenseConfigSpinLock=clmLicenseConfigSpinLock, ciscoLicenseMgrMIB=ciscoLicenseMgrMIB, clmLicenseFileTargetName=clmLicenseFileTargetName)
