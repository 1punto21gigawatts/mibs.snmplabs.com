#
# PySNMP MIB module ZHONE-COM-IP-DHCP-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-IP-DHCP-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:46:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, ModuleIdentity, Bits, TimeTicks, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, ObjectIdentity, iso, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "ModuleIdentity", "Bits", "TimeTicks", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "ObjectIdentity", "iso", "Integer32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipInterfaceEntry, = mibBuilder.importSymbols("ZHONE-COM-IP-REC-MIB", "ipInterfaceEntry")
zhoneSlotIndex, zhoneModules, zhoneShelfIndex, zhoneIp = mibBuilder.importSymbols("Zhone", "zhoneSlotIndex", "zhoneModules", "zhoneShelfIndex", "zhoneIp")
ZhoneAdminString, = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString")
comIpDhcpClient = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 51))
comIpDhcpClient.setRevisions(('2001-06-28 11:14', '2000-09-28 17:00', '2000-09-11 15:01',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: comIpDhcpClient.setRevisionsDescriptions(('V01.00.02 - fix 17 slot limit problem', 'V01.00.01 - Updated markup', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: comIpDhcpClient.setLastUpdated('200106281700Z')
if mibBuilder.loadTexts: comIpDhcpClient.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: comIpDhcpClient.setContactInfo('Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: comIpDhcpClient.setDescription('DHCP Client MIB using SNMPv2 SMI. IP Software Minneapolis, MN')
dhcpClient = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1))
if mibBuilder.loadTexts: dhcpClient.setStatus('current')
if mibBuilder.loadTexts: dhcpClient.setDescription('DHCP Client Resource.')
dhcpClientResourceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1), )
if mibBuilder.loadTexts: dhcpClientResourceTable.setStatus('current')
if mibBuilder.loadTexts: dhcpClientResourceTable.setDescription('This table contains the configuration information for the DHCP clients on this system.')
dhcpClientResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: dhcpClientResourceEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpClientResourceEntry.setDescription('A row in the DHCP Client Table. This table is indexed by the shelf and card on which the client runs. These indices are external to this MIB module.')
dhcpOfferTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOfferTimeout.setStatus('current')
if mibBuilder.loadTexts: dhcpOfferTimeout.setDescription('Interval to get additional DHCP offers.')
dhcpDefaultLease = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 604800)).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDefaultLease.setStatus('current')
if mibBuilder.loadTexts: dhcpDefaultLease.setDescription('Default value for requested lease length. This value should not be less than dhcpMinLease. Maximum allowed value is one week (604800 seconds).')
dhcpMinLease = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpMinLease.setStatus('current')
if mibBuilder.loadTexts: dhcpMinLease.setDescription('Minimum accepted lease length. This value should not be greater than dhcpDefaultLease. Maximum allowed value is 1 week (604,800 seconds).')
dhcpClientErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientErrors.setStatus('current')
if mibBuilder.loadTexts: dhcpClientErrors.setDescription('Number of errors that DHCP client has encountered.')
dhcpAvgTimeForLease = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 5), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAvgTimeForLease.setStatus('current')
if mibBuilder.loadTexts: dhcpAvgTimeForLease.setDescription('Average time to obtain a lease.')
dhcpInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2), )
if mibBuilder.loadTexts: dhcpInterfacesTable.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfacesTable.setDescription('Interface-specific DHCP configuration and state. This table augments the IpInterfaceTable in comIpRec.mib.')
dhcpInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1), )
ipInterfaceEntry.registerAugmentions(("ZHONE-COM-IP-DHCP-CLIENT-MIB", "dhcpInterfacesEntry"))
dhcpInterfacesEntry.setIndexNames(*ipInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: dhcpInterfacesEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfacesEntry.setDescription('Rows will be added as network interfaces are added.')
dhcpInterfaceServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceServerName.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceServerName.setDescription('Name of the DHCP offering server.')
dhcpInterfaceRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceRenew.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceRenew.setDescription('Seconds until DHCP renewal occurs')
dhcpInterfaceRebind = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceRebind.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceRebind.setDescription('Seconds until DHCP rebind occurs')
dhcpInterfaceBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceBootFile.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceBootFile.setDescription('Name of the bootfile.')
dhcpInterfaceTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceTftp.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceTftp.setDescription('Tftp address for the current interface.')
dhcpInterfaceHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 6), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceHostname.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceHostname.setDescription('Name of the host. This will not be a fully-qualified hostname.')
dhcpInterfaceDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceDomainName.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceDomainName.setDescription('Name of the domain.')
dhcpInterfaceVendorClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceVendorClassId.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceVendorClassId.setDescription('Vendor Class ID.')
dhcpInterfaceDhcpClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpInterfaceDhcpClientId.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceDhcpClientId.setDescription('DHCP Client Id.')
dhcpInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("reboot", 2), ("bound", 3), ("verify", 4), ("release", 5), ("invalid", 6), ("bind", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpInterfaceState.setStatus('current')
if mibBuilder.loadTexts: dhcpInterfaceState.setDescription('Current state of the lease. The user can only set init, verify and release.')
dnsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 3), )
if mibBuilder.loadTexts: dnsTable.setStatus('current')
if mibBuilder.loadTexts: dnsTable.setDescription('list of dns servers for the current interface')
dnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-IP-DHCP-CLIENT-MIB", "dnsIpAddress"))
if mibBuilder.loadTexts: dnsEntry.setStatus('current')
if mibBuilder.loadTexts: dnsEntry.setDescription('list of dns servers for the current interface')
dnsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dnsIpAddress.setDescription('IP Address of DNS server')
routersTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 4), )
if mibBuilder.loadTexts: routersTable.setStatus('current')
if mibBuilder.loadTexts: routersTable.setDescription('list of routers servers for the current interface')
routersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-IP-DHCP-CLIENT-MIB", "routersIpAddress"))
if mibBuilder.loadTexts: routersEntry.setStatus('current')
if mibBuilder.loadTexts: routersEntry.setDescription('list of routers server for the current interface')
routersIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routersIpAddress.setStatus('current')
if mibBuilder.loadTexts: routersIpAddress.setDescription('IP Address of routers')
mibBuilder.exportSymbols("ZHONE-COM-IP-DHCP-CLIENT-MIB", PYSNMP_MODULE_ID=comIpDhcpClient, dhcpOfferTimeout=dhcpOfferTimeout, dhcpClientResourceEntry=dhcpClientResourceEntry, dhcpInterfaceState=dhcpInterfaceState, dnsTable=dnsTable, dhcpInterfaceHostname=dhcpInterfaceHostname, routersIpAddress=routersIpAddress, dhcpDefaultLease=dhcpDefaultLease, dhcpInterfaceVendorClassId=dhcpInterfaceVendorClassId, dhcpInterfaceTftp=dhcpInterfaceTftp, dnsEntry=dnsEntry, dnsIpAddress=dnsIpAddress, dhcpInterfaceServerName=dhcpInterfaceServerName, dhcpInterfaceBootFile=dhcpInterfaceBootFile, dhcpAvgTimeForLease=dhcpAvgTimeForLease, dhcpInterfacesTable=dhcpInterfacesTable, dhcpInterfaceRebind=dhcpInterfaceRebind, dhcpClient=dhcpClient, dhcpClientErrors=dhcpClientErrors, dhcpInterfacesEntry=dhcpInterfacesEntry, dhcpInterfaceDhcpClientId=dhcpInterfaceDhcpClientId, dhcpInterfaceDomainName=dhcpInterfaceDomainName, comIpDhcpClient=comIpDhcpClient, dhcpInterfaceRenew=dhcpInterfaceRenew, routersTable=routersTable, dhcpClientResourceTable=dhcpClientResourceTable, routersEntry=routersEntry, dhcpMinLease=dhcpMinLease)
