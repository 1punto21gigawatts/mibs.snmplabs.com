#
# PySNMP MIB module HH3C-LswMAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LswMAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:28:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
hh3cdot1qVlanIndex, = mibBuilder.importSymbols("HH3C-LswVLAN-MIB", "hh3cdot1qVlanIndex")
hh3clswCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3clswCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, ObjectIdentity, IpAddress, NotificationType, TimeTicks, iso, Counter64, Unsigned32, MibIdentifier, Integer32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "ObjectIdentity", "IpAddress", "NotificationType", "TimeTicks", "iso", "Counter64", "Unsigned32", "MibIdentifier", "Integer32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
hh3cLswMacPort = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3))
hh3cLswMacPort.setRevisions(('2001-06-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cLswMacPort.setRevisionsDescriptions((' ',))
if mibBuilder.loadTexts: hh3cLswMacPort.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hh3cLswMacPort.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cLswMacPort.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cLswMacPort.setDescription(' ')
class InterfaceIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero, for each interface or interface sub-layer in the managed system. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub- layer must remain constant at least from one re- initialization of the entity's network management system to the next re-initialization."
    status = 'current'
    displayHint = 'd'

class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

hh3cdot1qMacSearchTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 1), )
if mibBuilder.loadTexts: hh3cdot1qMacSearchTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qMacSearchTable.setDescription('Information table for searching port with mac address ')
hh3cdot1qMacSearchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 1, 1), ).setIndexNames((0, "HH3C-LswMAM-MIB", "hh3cdot1qMacSearchAddress"), (0, "HH3C-LswMAM-MIB", "hh3cdot1qMacSearchVlanID"))
if mibBuilder.loadTexts: hh3cdot1qMacSearchEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qMacSearchEntry.setDescription(' Information table for searching port with mac address entry ')
hh3cdot1qMacSearchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qMacSearchAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qMacSearchAddress.setDescription('MAC address')
hh3cdot1qMacSearchVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4096), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qMacSearchVlanID.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qMacSearchVlanID.setDescription(' VLANID of the native VLAN of the MAC address to be searched for ')
hh3cdot1qMacSearchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qMacSearchPort.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qMacSearchPort.setDescription('Interface index corresponding to the MAC address')
hh3cdot1qMacSearchAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1qMacSearchAgeTime.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qMacSearchAgeTime.setDescription(' Address aging time')
hh3cdot1qTpFdbSetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 2), )
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetTable.setDescription('Unicast address setting table ')
hh3cdot1qTpFdbSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 2, 1), ).setIndexNames((0, "HH3C-LswVLAN-MIB", "hh3cdot1qVlanIndex"), (0, "HH3C-LswMAM-MIB", "hh3cdot1qTpFdbSetAddress"))
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetEntry.setDescription(' Unicast address setting table entry ')
hh3cdot1qTpFdbSetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetAddress.setDescription('Unicast MAC address ')
hh3cdot1qTpFdbSetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 2, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetPort.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetPort.setDescription('Interface index corresponding to the MAC address ')
hh3cdot1qTpFdbSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 7, 9, 11))).clone(namedValues=NamedValues(("other", 1), ("learned", 3), ("static", 6), ("dynamic", 7), ("blackhole", 9), ("security", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetStatus.setDescription('State corresponding to the MAC address')
hh3cdot1qTpFdbSetOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetOperate.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbSetOperate.setDescription('Add or delete an MAC address. Read operation not supported.')
hh3cdot1qTpFdbGroupSetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 3), )
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetTable.setDescription('Multistcast address setting table, whose maximal row number is dynamically changed by the influence of IGSP. When reaching the upper limit of the table, no more row could be added, then an error will be returned.')
hh3cdot1qTpFdbGroupSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 3, 1), ).setIndexNames((0, "HH3C-LswVLAN-MIB", "hh3cdot1qVlanIndex"), (0, "HH3C-LswMAM-MIB", "hh3cdot1qTpFdbGroupSetAddress"))
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetEntry.setDescription('Multicast address setting table entry.')
hh3cdot1qTpFdbGroupSetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetAddress.setDescription('Multicast MAC address.')
hh3cdot1qTpFdbGroupSetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetPort.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetPort.setDescription('The complete set of ports, in this VLAN, to which frames destined to this Multicast MAC address are currently being explicitly forwarded. This does not include ports for which this address is only implicitly forwarded.')
hh3cdot1qTpFdbGroupSetOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetOperate.setStatus('current')
if mibBuilder.loadTexts: hh3cdot1qTpFdbGroupSetOperate.setDescription('Add or delete a Multicast MAC address. Read operation is meaningless. When adding a Multicast MAC address, it is required to provide MacAddress, VLAN and PortList all. For deleting operation, MacAddress and VLAN must be provided, but hh3cdot1qTpFdbGroupSetPort is optional.')
mibBuilder.exportSymbols("HH3C-LswMAM-MIB", hh3cdot1qTpFdbSetPort=hh3cdot1qTpFdbSetPort, hh3cdot1qTpFdbSetAddress=hh3cdot1qTpFdbSetAddress, hh3cdot1qTpFdbSetStatus=hh3cdot1qTpFdbSetStatus, hh3cdot1qMacSearchTable=hh3cdot1qMacSearchTable, hh3cdot1qTpFdbGroupSetTable=hh3cdot1qTpFdbGroupSetTable, hh3cdot1qTpFdbGroupSetPort=hh3cdot1qTpFdbGroupSetPort, PYSNMP_MODULE_ID=hh3cLswMacPort, hh3cdot1qMacSearchPort=hh3cdot1qMacSearchPort, hh3cdot1qMacSearchVlanID=hh3cdot1qMacSearchVlanID, hh3cdot1qMacSearchEntry=hh3cdot1qMacSearchEntry, hh3cdot1qMacSearchAddress=hh3cdot1qMacSearchAddress, hh3cdot1qTpFdbGroupSetAddress=hh3cdot1qTpFdbGroupSetAddress, hh3cdot1qTpFdbGroupSetOperate=hh3cdot1qTpFdbGroupSetOperate, hh3cLswMacPort=hh3cLswMacPort, hh3cdot1qTpFdbGroupSetEntry=hh3cdot1qTpFdbGroupSetEntry, hh3cdot1qTpFdbSetEntry=hh3cdot1qTpFdbSetEntry, hh3cdot1qTpFdbSetOperate=hh3cdot1qTpFdbSetOperate, hh3cdot1qTpFdbSetTable=hh3cdot1qTpFdbSetTable, hh3cdot1qMacSearchAgeTime=hh3cdot1qMacSearchAgeTime, PortList=PortList, InterfaceIndex=InterfaceIndex)
