#
# PySNMP MIB module CISCO-FICON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FICON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcAddressId, = mibBuilder.importSymbols("CISCO-ST-TC", "FcAddressId")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Gauge32, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, Unsigned32, ModuleIdentity, NotificationType, IpAddress, MibIdentifier, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "Unsigned32", "ModuleIdentity", "NotificationType", "IpAddress", "MibIdentifier", "iso", "Integer32")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
ciscoFiconMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 375))
ciscoFiconMIB.setRevisions(('2006-04-07 00:00', '2006-03-14 00:00', '2005-10-21 00:00', '2005-10-06 00:00', '2005-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFiconMIB.setRevisionsDescriptions(('Changed DESCRIPTION of cficonDefaultPortBlock.', 'Added cficonDefaultPortBlock. Added cficonDefaultPortBlockGroup. Added ciscoFiconComplianceRev3. Added ciscoFiconGlobal.', 'Added cficonInterfaceSwapTable.', 'Added cficonPortMapTable, cficonPortMapMax, cficonSlotPortNumTable and cficonLogicReservedPN for FICON port-numbering scheme. Added cficonRlirErlTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFiconMIB.setLastUpdated('200604070000Z')
if mibBuilder.loadTexts: ciscoFiconMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFiconMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoFiconMIB.setDescription('This is the FICON (FIber CONnection) MIB module. FICON is an IBM standard of transport mechanism for communication between the mainframes and devices and is a major consideration for enterprise data centers. The Cisco MDS Storage Area Network (SAN) switches provide the functionality of a FICON Director to the customers. ')
ciscoFiconMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 375, 0))
ciscoFiconMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 375, 1))
ciscoFiconMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 375, 2))
ciscoFiconConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1))
ciscoFiconGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 2))
class CficonPortNumOrAddr(TextualConvention, Integer32):
    description = 'The port number or port address.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

cficonDefaultPortBlock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonDefaultPortBlock.setStatus('current')
if mibBuilder.loadTexts: cficonDefaultPortBlock.setDescription("This object indicates the default state which whether to prohibit traffic or allow traffic among all External Ports of a new FICON VSAN. If 'true' the default state is prohibit all traffic, else the default state is allow all traffic. The default values of the cficonProhibitPortNumbers and the cficonRunCfgProhibitPrtNums in a newly created FICON VSAN are consistent with the state of this object.")
cficonPortSwapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 1), )
if mibBuilder.loadTexts: cficonPortSwapTable.setStatus('current')
if mibBuilder.loadTexts: cficonPortSwapTable.setDescription('A table to issue the port swap command. In FICON, lots of configuration in the host is associated with a port-address. If the FICON port connecting the host to the switch has some problem and the user wants to connect the host to a different port in the switch, one needs to swap the configuration of the two ports. This command transparently swaps the configuration of two ports without affecting the host.')
cficonPortSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-FICON-MIB", "cficonPortSwapIndex"))
if mibBuilder.loadTexts: cficonPortSwapEntry.setStatus('current')
if mibBuilder.loadTexts: cficonPortSwapEntry.setDescription('A cficonPortSwapTable entry. A management station wishing to create an entry should first generate a pseudo-random serial number to be used as the index to this sparse table. The station should then create the associated instance of the row status object. It must also, in the same PDU create the associated instance of the cficonSwapPortNumberFirst and cficonSwapPortNumberSecond objects. Note that when creating a row in this table, the cficonSwapPortEntryStatus, cficonSwapPortNumberFirst and cficonSwapPortNumberSecond are all required. Once the operation completes, the management station should delete the entry. ')
cficonPortSwapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cficonPortSwapIndex.setStatus('current')
if mibBuilder.loadTexts: cficonPortSwapIndex.setDescription('An arbitrary index for the swap command.')
cficonSwapPortNumberFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 1, 1, 2), CficonPortNumOrAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonSwapPortNumberFirst.setStatus('current')
if mibBuilder.loadTexts: cficonSwapPortNumberFirst.setDescription('The first port number that needs to be swapped .')
cficonSwapPortNumberSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 1, 1, 3), CficonPortNumOrAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonSwapPortNumberSecond.setStatus('current')
if mibBuilder.loadTexts: cficonSwapPortNumberSecond.setDescription('The second port number that needs to be swapped.')
cficonSwapPortEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonSwapPortEntryStatus.setStatus('current')
if mibBuilder.loadTexts: cficonSwapPortEntryStatus.setDescription("If this object is set to 'createAndGo(4)' then the port configurations of the ports specified by objects cficonSwapPortNumberFirst and cficonSwapPortNumberSecond will be swapped.")
cficonVsanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2), )
if mibBuilder.loadTexts: cficonVsanTable.setStatus('current')
if mibBuilder.loadTexts: cficonVsanTable.setDescription('A table containing the objects to manage FICON functionality in a VSAN. ')
cficonVsanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: cficonVsanEntry.setStatus('current')
if mibBuilder.loadTexts: cficonVsanEntry.setDescription('A cficonVsanTable entry. Each entry, identified by vsanIndex, provides the objects to manage FICON functionality in this VSAN, identified by vsanIndex. To create a vsan, only the cficonVsanEntryStatus needs to be set in the PDU. A vsan will be created with default values for all the objects in the entry. Once the vsan is created, the values of all the writable objects within a row can be modified. ')
cficonVsanHostControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanHostControl.setStatus('current')
if mibBuilder.loadTexts: cficonVsanHostControl.setDescription("The object indicates whether the host is allowed to alter FICON Director connectivity parameters. If 'true' the host is allowed to alter the parameters, else it cannot.")
cficonVsanHostControlSwOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanHostControlSwOffline.setStatus('current')
if mibBuilder.loadTexts: cficonVsanHostControlSwOffline.setDescription("The object specifying whether the host can put the VSAN offline. If 'true' it allows the host to put the VSAN offline, else it cannot.")
cficonVsanHostControlClkAlrtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanHostControlClkAlrtMode.setStatus('current')
if mibBuilder.loadTexts: cficonVsanHostControlClkAlrtMode.setDescription("The object indicates whether director clock alert mode is enabled or disabled. If 'true', the mode is enabled, else it is disabled.")
cficonVsanSnmpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanSnmpControl.setStatus('current')
if mibBuilder.loadTexts: cficonVsanSnmpControl.setDescription("The object indicates whether network management system is allowed to alter FICON director connectivity parameters. If 'true', the network management system is allowed to alter FICON director connectivity parameters, else, it cannot.")
cficonVsanAutoSavePortAddrCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanAutoSavePortAddrCfg.setStatus('current')
if mibBuilder.loadTexts: cficonVsanAutoSavePortAddrCfg.setDescription("The object indicating whether the configuration will be saved in the configuration file for this VSAN. When an operator modifies a configuration, the running configuration is modified. If this object is 'true', then the configuration is saved in the configuration file as well. If this object is 'false', then the running configuration is not saved in the configuration file.")
cficonVsanEnableCup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanEnableCup.setStatus('current')
if mibBuilder.loadTexts: cficonVsanEnableCup.setDescription("The object indicating Control Unit Port (CUP) is enabled. If 'true', CUP is enabled, else it is disabled.")
cficonVsanCodePage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(37, 273, 275, 280, 281, 284, 285, 297, 500))).clone(namedValues=NamedValues(("usa", 37), ("germany", 273), ("brazil", 275), ("italy", 280), ("japan", 281), ("spain", 284), ("uk", 285), ("france", 297), ("interNational", 500))).clone('usa')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanCodePage.setStatus('current')
if mibBuilder.loadTexts: cficonVsanCodePage.setDescription('The EBCDIC Code page used for the exchange of information with the host in this VSAN.')
cficonVsanCharSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("charSet697", 1))).clone('charSet697')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanCharSet.setStatus('current')
if mibBuilder.loadTexts: cficonVsanCharSet.setDescription('The Character Set used for the exchange of of information with the host in this VSAN. ')
cficonVsanKeyCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonVsanKeyCounter.setStatus('current')
if mibBuilder.loadTexts: cficonVsanKeyCounter.setDescription('A counter that is incremented every time there is a configuration change. This counter is used by the Host to keep track of the number of configuration changes that have taken place.')
cficonVsanUserAlertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanUserAlertMode.setStatus('current')
if mibBuilder.loadTexts: cficonVsanUserAlertMode.setDescription("The object indicating whether director user alert mode is enabled or disabled. If 'true', the mode is enabled. else it is disabled.")
cficonVsanDeviceAllegience = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lockedByCLI", 1), ("lockedBySnmp", 2), ("lockedByHost", 3), ("unlocked", 4))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonVsanDeviceAllegience.setStatus('current')
if mibBuilder.loadTexts: cficonVsanDeviceAllegience.setDescription("The object indicating whether CUP is in a allegiance state. If it is in allegiance state with a channel, it cannot accept any commands from any logical paths. A CUP goes in an allegiance state when it accepts command from a channel and forms 'an allegiance' with it until the successful completion of the channel program, at which point the CUP goes in a an 'unlocked' mode.")
cficonVsanTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonVsanTime.setStatus('current')
if mibBuilder.loadTexts: cficonVsanTime.setDescription('The system time in the VSAN. This could be set either by the host or be the default global time in the FICON Director. The default global time is the local time in the FICON Director. The format is as follows - Wed Nov 5 18:53:52.172485 2003 ')
cficonVsanHostOrDefaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonVsanHostOrDefaultTime.setStatus('current')
if mibBuilder.loadTexts: cficonVsanHostOrDefaultTime.setDescription("The object indicating whether VSAN time is set by the host or the time is global time within a FICON Director. If 'true', the time was set by the host, else it is same as the FICON Director's global time.")
cficonVsanCupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanCupName.setStatus('current')
if mibBuilder.loadTexts: cficonVsanCupName.setDescription('The name of CUP.')
cficonSetHostTimeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonSetHostTimeControl.setStatus('current')
if mibBuilder.loadTexts: cficonSetHostTimeControl.setDescription("The object indicating whether VSAN time can be set by the host. If 'true', the host can set the time, else it can not.")
cficonVsanClearAllegience = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanClearAllegience.setStatus('current')
if mibBuilder.loadTexts: cficonVsanClearAllegience.setDescription("The object used to clear a CUP allegiance. If this object is set with value, 'clear(1)' the CUP goes in a 'non-allegiance' or 'unlocked' mode as described in the description of cficonVsanDeviceAllegience object above.")
cficonVsanEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanEntryStatus.setStatus('current')
if mibBuilder.loadTexts: cficonVsanEntryStatus.setDescription('The status of this table entry.')
cficonVsanFiconState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2))).clone('online')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonVsanFiconState.setStatus('current')
if mibBuilder.loadTexts: cficonVsanFiconState.setDescription("The object used to control the state of the ports belonging to a vsan in the context of the FICON functionality. If this object is set to 'offline(1)' all the ports belonging to the vsan, specified by the vsanIndex are put in the suspended state. If this object is set to 'online(2)' all the ports belonging to the vsan, specified by the vsanIndex are put in the operational state.")
cficonVsanSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 2, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonVsanSerialNum.setStatus('current')
if mibBuilder.loadTexts: cficonVsanSerialNum.setDescription('The serial number of the FICON director.')
cficonPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 3), )
if mibBuilder.loadTexts: cficonPortTable.setStatus('current')
if mibBuilder.loadTexts: cficonPortTable.setDescription('A table listing the port information as stored in the configuration file. ')
cficonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FICON-MIB", "cficonCfgFilename"), (0, "CISCO-FICON-MIB", "cficonPortAddr"))
if mibBuilder.loadTexts: cficonPortEntry.setStatus('current')
if mibBuilder.loadTexts: cficonPortEntry.setDescription('A cficonPortTable entry. Each entry provides the information about a port, identified by cficonPortAddr, in the configuration file, identified by cficonPortFilename, on this VSAN, identified by vsanIndex.')
cficonPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 3, 1, 1), CficonPortNumOrAddr())
if mibBuilder.loadTexts: cficonPortAddr.setStatus('current')
if mibBuilder.loadTexts: cficonPortAddr.setDescription('The Port Address of this port.')
cficonPortBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonPortBlock.setStatus('current')
if mibBuilder.loadTexts: cficonPortBlock.setDescription("The object indicates whether to block or unblock this port. This is one of the port-connectivity parameters. If 'true' this port is blocked, else it is unblocked.")
cficonPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonPortName.setStatus('current')
if mibBuilder.loadTexts: cficonPortName.setDescription('The name of this port.')
cficonProhibitPortNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonProhibitPortNumbers.setStatus('current')
if mibBuilder.loadTexts: cficonProhibitPortNumbers.setDescription('The list of ports that will be prohibited from communication. Each octet within the value of an object of this type, specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port and the least significant bit represents the highest numbered port.')
cficonPortRunCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4), )
if mibBuilder.loadTexts: cficonPortRunCfgTable.setStatus('current')
if mibBuilder.loadTexts: cficonPortRunCfgTable.setDescription('A table listing the port information as stored in the running configuration. Each port is identified by the port address in the context of its vsan Index.')
cficonPortRunCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FICON-MIB", "cficonPortRunCfgAddr"))
if mibBuilder.loadTexts: cficonPortRunCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cficonPortRunCfgEntry.setDescription('A cficonPortRunCfgTable entry. Each entry provides the information about a port (identified by cficonPortAddr), on this VSAN (identified by vsanIndex), for the running configuration.')
cficonPortRunCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 1), CficonPortNumOrAddr())
if mibBuilder.loadTexts: cficonPortRunCfgAddr.setStatus('current')
if mibBuilder.loadTexts: cficonPortRunCfgAddr.setDescription('The address of this port.')
cficonPortRunCfgBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonPortRunCfgBlock.setStatus('current')
if mibBuilder.loadTexts: cficonPortRunCfgBlock.setDescription("The object indicating whether to block or unblock this port. If 'true' this port is blocked, else it is unblocked.")
cficonPortRunCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonPortRunCfgName.setStatus('current')
if mibBuilder.loadTexts: cficonPortRunCfgName.setDescription('The port name of this port.')
cficonRunCfgProhibitPrtNums = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonRunCfgProhibitPrtNums.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgProhibitPrtNums.setDescription('The list of ports that will be prohibited. Each octet within the value of an object of this type specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port and the least significant bit represents the highest numbered port.')
cficonRunCfgTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonRunCfgTypeNumber.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgTypeNumber.setDescription('The type number for this FICON Director.')
cficonRunCfgModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonRunCfgModelNumber.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgModelNumber.setDescription('The model number for this FICON Director. It is in the form of ASCII characters. ')
cficonRunCfgManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonRunCfgManufacturer.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgManufacturer.setDescription('The name of the the company that manufactured this FICON Director. ')
cficonRunCfgPlantOfMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonRunCfgPlantOfMfg.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgPlantOfMfg.setDescription('The plant code that identifies the plant of manufacture of this FICON Director. ')
cficonRunCfgSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonRunCfgSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgSerialNumber.setDescription('The sequence number assigned to this FICON Director during manufacturing.')
cficonRunCfgUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channel", 1), ("controlUnit", 2), ("fabric", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonRunCfgUnitType.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgUnitType.setDescription('The peer type of the port that this port is communicating. channel - Host controlUnit - Disk fabric - Another SAN switch')
cficonRunCfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonRunCfgPortId.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgPortId.setDescription('This is the identifier of the peer port. If the peer port is channel, as described by the instance of cficonRunCfgUnitType, then cficonRunCfgPortId will be the CHPID (Channel Path Identifier) of the channel path that contains this peer port. If the peer port is controlUnit, then cficonRunCfgPortId will be 0. If the peer port is fabric, then cficonRunCfgPortId will be port address of the interface on the peer switch.')
cficonRunCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("old", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonRunCfgStatus.setStatus('current')
if mibBuilder.loadTexts: cficonRunCfgStatus.setDescription("This object specifies the status of the row, whether some specific columns in this row are valid, invalid or old. These specific columns are - cficonRunCfgProhibitPrtNums, cficonRunCfgTypeNumber, cficonRunCfgModelNumber, cficonRunCfgManufacturer, cficonRunCfgPlantOfMfg, cficonRunCfgSerialNumber and cficonRunCfgUnitType. The only value that can be assigned by the Network Management System(NMS) is 'invalid'. The NMS cannot set this object to any other value (i.e 'valid' or 'old'). valid - The information ( values of the other columns) is guaranteed to be correct. old - The information was valid before the port went down. Although the information has not vanished, it cannot be guaranteed. invalid - When the port does not have the information at all. (i.e. when the port comes up for the first time or the NMS clears the information. ")
cficonCfgFileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5), )
if mibBuilder.loadTexts: cficonCfgFileTable.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileTable.setDescription('A table listing the configuration files for each vsan.')
cficonCfgFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FICON-MIB", "cficonCfgFilename"))
if mibBuilder.loadTexts: cficonCfgFileEntry.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileEntry.setDescription("A cficonCfgFileTable entry. Each entry provides the configuration file for a vsan (identified by vsanIndex) and a file (identified by cficonCfgFilename). Each entry lists the file status, the time the file was last updated etc. The cficonCfgFileRowStatus object is used to create or delete a configuration file. For creation or deletion, only the cficonCfgFileRowStatus object needs to be set in the PDU. cficonCfgFileCmd object is used to apply this configuration file to the vsan specified by the vsanIndex. For example, To create a configuration file 'cfg' for vsan 1, the management application must do the following - cficonCfgFileRowStatus.1.cfg = createAndGo; To delete the configuration file, cficonCfgFileRowStatus.1.cfg = destroy; To apply this configuration file, cficonCfgFileCmd.1.cfg = apply; ")
cficonCfgFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cficonCfgFilename.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFilename.setDescription('The name of the configuration file.')
cficonCfgFileDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonCfgFileDescr.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileDescr.setDescription('The description of the configuration file.')
cficonCfgFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonCfgFileStatus.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileStatus.setDescription("The status of filename containing these ports. Network Management station must check this object before it can read the contents of the configuration file. If it is 'locked', it means that the host or the CLI or the network management station is in the process of writing the contents of this file. If it is 'locked' the the file cannot be read. If it is 'unlocked', then the file is ready to be read.")
cficonCfgFileLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonCfgFileLastUpdated.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileLastUpdated.setDescription('The time this file was last updated. The format is as follows - Wed Nov 5 18:53:52.172485 2003 ')
cficonCfgFileCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("apply", 1), ("noOp", 2), ("open", 3), ("close", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonCfgFileCmd.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileCmd.setDescription('The object to apply this configuration file to the VSAN identified by the vsanIndex. When reading this object, a noOp(2) is returned. open(3) opens this file for modifying. close(4) closes this file.')
cficonCfgFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonCfgFileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileRowStatus.setDescription('The rowStatus of this row.')
cficonCfgFileCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("inProgress", 2), ("failed", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonCfgFileCmdStatus.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileCmdStatus.setDescription("The object to describe the status of the last 'apply' command. success - The last apply command was successful. inProgress - The last apply command is still in the process of execution. failed - The last apply command failed. notApplicable - The last apply command status is not available.")
cficonCfgFileCmdErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 5, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonCfgFileCmdErrorString.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileCmdErrorString.setDescription("The string describing the reason the the last 'apply' command failed. This string needs to be polled only in the case when the value of the cficonCfgFileCmdStatus is 'failed'. ")
cficonPortNumIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 6), )
if mibBuilder.loadTexts: cficonPortNumIfTable.setStatus('current')
if mibBuilder.loadTexts: cficonPortNumIfTable.setDescription('A table listing the association of Port number to its interface index. ')
cficonPortNumIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-FICON-MIB", "cficonPortNumber"))
if mibBuilder.loadTexts: cficonPortNumIfEntry.setStatus('current')
if mibBuilder.loadTexts: cficonPortNumIfEntry.setDescription('A cficonPortNumIfTable entry. Each entry provides a mapping between the port number and its interface index.')
cficonPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 6, 1, 1), CficonPortNumOrAddr())
if mibBuilder.loadTexts: cficonPortNumber.setStatus('current')
if mibBuilder.loadTexts: cficonPortNumber.setDescription('The port number of this port.')
cficonPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 6, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: cficonPortIfIndex.setDescription('The interface index of this port. For ports that are not installed, this object would be zero.')
cficonPortAddrNumTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 7), )
if mibBuilder.loadTexts: cficonPortAddrNumTable.setStatus('current')
if mibBuilder.loadTexts: cficonPortAddrNumTable.setDescription('A table listing the association of Port address to port number. ')
cficonPortAddrNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-FICON-MIB", "cficonPortAddrPortAddr"))
if mibBuilder.loadTexts: cficonPortAddrNumEntry.setStatus('current')
if mibBuilder.loadTexts: cficonPortAddrNumEntry.setDescription('A cficonPortAddrNumTable entry. Each entry provides the port address to port number mapping. ')
cficonPortAddrPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 7, 1, 1), CficonPortNumOrAddr())
if mibBuilder.loadTexts: cficonPortAddrPortAddr.setStatus('current')
if mibBuilder.loadTexts: cficonPortAddrPortAddr.setDescription('The port address of this port.')
cficonPortAddrPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 7, 1, 2), CficonPortNumOrAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortAddrPortNumber.setStatus('current')
if mibBuilder.loadTexts: cficonPortAddrPortNumber.setDescription('The port number of this port.')
cficonPortNumAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 8), )
if mibBuilder.loadTexts: cficonPortNumAddrTable.setStatus('current')
if mibBuilder.loadTexts: cficonPortNumAddrTable.setDescription('A table listing the association of Port number to its port number. ')
cficonPortNumAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 8, 1), ).setIndexNames((0, "CISCO-FICON-MIB", "portAddrPortNumber"))
if mibBuilder.loadTexts: cficonPortNumAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cficonPortNumAddrEntry.setDescription('A cficonPortNumAddrTable entry. Each entry provides a mapping between the port number and its port number.')
portAddrPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 8, 1, 1), CficonPortNumOrAddr())
if mibBuilder.loadTexts: portAddrPortNumber.setStatus('current')
if mibBuilder.loadTexts: portAddrPortNumber.setDescription('The port number of this port.')
portAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 8, 1, 2), CficonPortNumOrAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAddress.setStatus('current')
if mibBuilder.loadTexts: portAddress.setDescription('The port address of this port.')
cficonDirHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 9), )
if mibBuilder.loadTexts: cficonDirHistTable.setStatus('current')
if mibBuilder.loadTexts: cficonDirHistTable.setDescription('A table listing the director history buffer. Director History Buffer is a mechanism to determine those ports that have changed their configuration for a particular value of a key counter. The FICON Director maintains a change vector of 256 bits (32 bytes) and an associated key counter. This table lists this vector for a given key counter. ')
cficonDirHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FICON-MIB", "cficonDirHistKeyCounter"))
if mibBuilder.loadTexts: cficonDirHistEntry.setStatus('current')
if mibBuilder.loadTexts: cficonDirHistEntry.setDescription('A row in the cficonDirHistTable, identified by the vsanIndex and the key counter. ')
cficonDirHistKeyCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cficonDirHistKeyCounter.setStatus('current')
if mibBuilder.loadTexts: cficonDirHistKeyCounter.setDescription('The key counter.')
cficonDirHistPortNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonDirHistPortNumbers.setStatus('current')
if mibBuilder.loadTexts: cficonDirHistPortNumbers.setDescription('The list of ports that have configuration change for a value of cficonDirHistKeyCounter. If a port has configuration change, its bit position will be 1. Each octet within the value of an object of this type, specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port and the least significant bit represents the highest numbered port.')
cficonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 10), )
if mibBuilder.loadTexts: cficonStatsTable.setStatus('current')
if mibBuilder.loadTexts: cficonStatsTable.setDescription('A table listing the FICON Statistics .')
cficonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cficonStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cficonStatsEntry.setDescription('An entry listing the FICON statistics for FICON port.')
cfStatsFramePacingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfStatsFramePacingTime.setStatus('current')
if mibBuilder.loadTexts: cfStatsFramePacingTime.setDescription('Number of 2.5 microsecond units that frame transmission is blocked due to zero credit.')
cfStatsDispErrorsInFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfStatsDispErrorsInFrame.setStatus('current')
if mibBuilder.loadTexts: cfStatsDispErrorsInFrame.setDescription('Number of frames with disparity errors.')
cfStatsEOFErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfStatsEOFErrs.setStatus('current')
if mibBuilder.loadTexts: cfStatsEOFErrs.setDescription('Number of frames with EOF errors.')
cfStatsDispErrsOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfStatsDispErrsOutOfFrame.setStatus('current')
if mibBuilder.loadTexts: cfStatsDispErrsOutOfFrame.setDescription('Number of frames with OOF errors.')
cfStatsInvalidOrderSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfStatsInvalidOrderSets.setStatus('current')
if mibBuilder.loadTexts: cfStatsInvalidOrderSets.setDescription('Number of invalid or unrecognizable Order Sets outside of frames.')
cfStatsErrorSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfStatsErrorSummary.setStatus('current')
if mibBuilder.loadTexts: cfStatsErrorSummary.setDescription('This counter contains a sum of the errors counted by a set of the other defined error counters.')
cficonShowPorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("installed", 2))).clone('installed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonShowPorts.setStatus('current')
if mibBuilder.loadTexts: cficonShowPorts.setDescription("An object to control which ports are displayed. If set to all(1), all the ports, regardless whether they are installed or not are displayed in the cficonPortTable and cificonPortRunCfgTable. If set to 'installed', only the ports that are installed ports are displayed in the cficonPortTable and cificonPortRunCfgTable. ")
cficonLinkIncidentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 12), )
if mibBuilder.loadTexts: cficonLinkIncidentTable.setStatus('current')
if mibBuilder.loadTexts: cficonLinkIncidentTable.setDescription('A table listing the link incidents in a FICON interface. A Link incident is an event when the interface experiences the conditions described in the cficonLinkIncident object.')
cficonLinkIncidentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cficonLinkIncidentEntry.setStatus('current')
if mibBuilder.loadTexts: cficonLinkIncidentEntry.setDescription('An entry listing the cficonLinkIncidentTable.')
cficonLinkIncident = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("bitErrThreshExceeded", 2), ("lossOfSignalOrSync", 3), ("nosReceived", 4), ("primitiveSeqTimeOut", 5), ("invalidPrimitiveSeq", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonLinkIncident.setStatus('current')
if mibBuilder.loadTexts: cficonLinkIncident.setDescription('The type of link incident that occurred on an interface. bitErrThreshExceeded - Bit Error Threshold exceeded. lossOfSignalOrSync - Loss of Signal or Sync message. nosReceived - NOS msg Received NOS - Non Operational State primitiveSeqTimeOut - Primitive Timeout invalidPrimitiveSeq - Invalid Primitive sequence ')
cficonLinkIncidentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonLinkIncidentTime.setStatus('current')
if mibBuilder.loadTexts: cficonLinkIncidentTime.setDescription('The time at which the link incident happened. The format is as follows - Wed Nov 5 18:53:52.172485 2003 ')
cficonLinkIncidentClear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonLinkIncidentClear.setStatus('current')
if mibBuilder.loadTexts: cficonLinkIncidentClear.setDescription('The object used to clear the link incident for an interface.')
cficonCfgFileCupNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 13), )
if mibBuilder.loadTexts: cficonCfgFileCupNameTable.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileCupNameTable.setDescription('A table listing the CUP names for each vsan in a configuration file.')
cficonCfgFileCupNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 13, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FICON-MIB", "cficonCfgFilename"))
if mibBuilder.loadTexts: cficonCfgFileCupNameEntry.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileCupNameEntry.setDescription('A cficonCfgFileCupNameTable entry. Each entry provides the CUP name for a VSAN (identified by vsanIndex) and a file (identified by cficonCfgFilename). ')
cficonCfgFileCupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 13, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonCfgFileCupName.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileCupName.setDescription('The name of CUP.')
cficonConfigCopyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 14), )
if mibBuilder.loadTexts: cficonConfigCopyTable.setStatus('current')
if mibBuilder.loadTexts: cficonConfigCopyTable.setDescription('A table of config-copy requests.')
cficonConfigCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 14, 1), ).setIndexNames((0, "CISCO-FICON-MIB", "cficonConfigCopyIndex"))
if mibBuilder.loadTexts: cficonConfigCopyEntry.setStatus('current')
if mibBuilder.loadTexts: cficonConfigCopyEntry.setDescription('A config-copy request. A management station wishing to create an entry should first generate a random serial number to be used as the index to this sparse table. The station should then create the associated instance of the row status object. This config-copy operation is only to copy the running configuration to startup configuration for FICON. Once the appropriate instance of all the configuration objects have been created, either by an explicit SNMP set request or by default, the row status should be set to active to initiate the request. Note that this entire procedure may be initiated via a single set request which specifies a row status of createAndGo. Once the config-copy request has been created (i.e. the cfCopyEntryRowStatus has been made active), the entry cannot be modified - the only operation possible after this is to delete the row. Once the request completes, the management station should retrieve the value of the status object and should then delete the entry. In order to prevent old entries from clogging the table, entries will be aged out, but an entry will never be deleted within 5 minutes of completing.')
cficonConfigCopyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cficonConfigCopyIndex.setStatus('current')
if mibBuilder.loadTexts: cficonConfigCopyIndex.setDescription('Object which specifies a unique entry in the cficonConfigCopyTable. A management station wishing to initiate a config-copy operation should use a random value for this object when creating an instance of a cficonConfigCopyEntry.')
cficonCopyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProgress", 1), ("success", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonCopyState.setStatus('current')
if mibBuilder.loadTexts: cficonCopyState.setDescription('Specifies the result of this config-copy request. This value of this object is instantiated only after the row has been instantiated, i.e. after the cficonCopyEntryRowStatus has been made active.')
cficonCopyFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 14, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonCopyFailReason.setStatus('current')
if mibBuilder.loadTexts: cficonCopyFailReason.setDescription('An error string describing the reason the copy failed.')
cficonCopyEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonCopyEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: cficonCopyEntryRowStatus.setDescription('The status of this table entry. Once the entry status is set to active, the associated entry cannot be modified until the request completes (cficonCopyState transitions to successful or failed state).')
cficonAutoSaveState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonAutoSaveState.setStatus('current')
if mibBuilder.loadTexts: cficonAutoSaveState.setDescription('The object indicates whether auto save state is enabled or disabled. Enabling the auto save state, saves the configuration to the configuration file whenever a configuration change is made. If the cficonAutoSaveState is disabled (false), the configuration change is not saved to the configuration file.')
ciscoFiconPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16))
cficonPortMap1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortMap1.setStatus('deprecated')
if mibBuilder.loadTexts: cficonPortMap1.setDescription('The port map1. This object contains information specific to third party vendor and the usage is vendor specific. Each record is 6 bytes long and there can be up to 42 records in this object. Each record consists of the following - 0-3 bytes - IfIndex byte 4 - Port Address byte 5 - Unit Type ')
cficonPortMap2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortMap2.setStatus('deprecated')
if mibBuilder.loadTexts: cficonPortMap2.setDescription('The port map2. This object contains information specific to third party vendor and the usage is vendor specific. Each record is 6 bytes long and there can be up to 42 records in this object. Each record consists of the following - 0-3 bytes - IfIndex byte 4 - Port Address byte 5 - Unit Type ')
cficonPortMap3 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortMap3.setStatus('deprecated')
if mibBuilder.loadTexts: cficonPortMap3.setDescription('The port map3. This object contains information specific to third party vendor and the usage is vendor specific. Each record is 6 bytes long and there can be up to 42 records in this object. Each record consists of the following - 0-3 bytes - IfIndex byte 4 - Port Address byte 5 - Unit Type ')
cficonPortMap4 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortMap4.setStatus('deprecated')
if mibBuilder.loadTexts: cficonPortMap4.setDescription('The port map4. This object contains information specific to third party vendor and the usage is vendor specific. Each record is 6 bytes long and there can be up to 42 records in this object. Each record consists of the following - 0-3 bytes - IfIndex byte 4 - Port Address byte 5 - Unit Type ')
cficonPortMap5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortMap5.setStatus('deprecated')
if mibBuilder.loadTexts: cficonPortMap5.setDescription('The port map5. This object contains information specific to third party vendor and the usage is vendor specific. Each record is 6 bytes long and there can be up to 42 records in this object. Each record consists of the following - 0-3 bytes - IfIndex byte 4 - Port Address byte 5 - Unit Type ')
cficonPortMap6 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortMap6.setStatus('deprecated')
if mibBuilder.loadTexts: cficonPortMap6.setDescription('The port map6. This object contains information specific to third party vendor and the usage is vendor specific. Each record is 6 bytes long and there can be up to 42 records in this object. Each record consists of the following - 0-3 bytes - IfIndex byte 4 - Port Address byte 5 - Unit Type ')
cficonPortMapMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortMapMax.setStatus('current')
if mibBuilder.loadTexts: cficonPortMapMax.setDescription('Number of port map objects.')
cficonPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 8), )
if mibBuilder.loadTexts: cficonPortMapTable.setStatus('current')
if mibBuilder.loadTexts: cficonPortMapTable.setDescription('The port map table. This table contains the list of port map objects to carry the information of IfIndex, port Address, unit Type and Port Number for all ports. ')
cficonPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 8, 1), ).setIndexNames((0, "CISCO-FICON-MIB", "cficonPortMapIndex"))
if mibBuilder.loadTexts: cficonPortMapEntry.setStatus('current')
if mibBuilder.loadTexts: cficonPortMapEntry.setDescription('The port map entry. This entry consists of a index number indicating a set of ports and a port map object carrying certain port attributes for these ports. ')
cficonPortMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cficonPortMapIndex.setStatus('current')
if mibBuilder.loadTexts: cficonPortMapIndex.setDescription('The port map index. This number indicates the group of ports described by the port map object. ')
cficonPortMapObj = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 16, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonPortMapObj.setStatus('current')
if mibBuilder.loadTexts: cficonPortMapObj.setDescription('The port map object. This object contains information specific to third party vendor and the usage is vendor specific. Each record is 7 bytes long and there can be up to 36 records in this object. Each record consists of the following - 0-3 bytes - IfIndex byte 4 - Port Address byte 5 - Unit Type byte 6 - Port Number ')
cficonSlotPortNumTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 17), )
if mibBuilder.loadTexts: cficonSlotPortNumTable.setStatus('current')
if mibBuilder.loadTexts: cficonSlotPortNumTable.setDescription('Chassis slot port number table. This table contains the list of all reserved port numbers for all slots of the chassis. ')
cficonSlotPortNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 17, 1), ).setIndexNames((0, "CISCO-FICON-MIB", "cficonSlotIndex"))
if mibBuilder.loadTexts: cficonSlotPortNumEntry.setStatus('current')
if mibBuilder.loadTexts: cficonSlotPortNumEntry.setDescription('Chassis slot port number entry. This entry has the slot number and reserved port numbers for this slot. ')
cficonSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cficonSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cficonSlotIndex.setDescription('The chassis slot number.')
cficonSlotReservedPN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonSlotReservedPN.setStatus('current')
if mibBuilder.loadTexts: cficonSlotReservedPN.setDescription('Chassis slot port numbers. Reserved port numbers for one chassis slot. There can be up to 64 port numbers reserved for each slot in the chassis. ')
cficonLogicReservedPN = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cficonLogicReservedPN.setStatus('current')
if mibBuilder.loadTexts: cficonLogicReservedPN.setDescription('Reserved port numbers for logical ports. There can be up to 256 port numbers reserved for logical ports. ')
cficonRlirErlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 19), )
if mibBuilder.loadTexts: cficonRlirErlTable.setStatus('current')
if mibBuilder.loadTexts: cficonRlirErlTable.setDescription('A table of Nx_Ports that have registered to receive RLIRs on all VSANs on the local switch.')
cficonRlirErlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 19, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FICON-MIB", "cficonRlirErlFcId"), (0, "CISCO-FICON-MIB", "cficonRlirErlFormat"))
if mibBuilder.loadTexts: cficonRlirErlEntry.setStatus('current')
if mibBuilder.loadTexts: cficonRlirErlEntry.setDescription('An entry (conceptual row) containing information about an Nx_Port which has registered to receive RLIRs on the VSAN indicated by vsanIndex.')
cficonRlirErlFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 19, 1, 1), FcAddressId())
if mibBuilder.loadTexts: cficonRlirErlFcId.setStatus('current')
if mibBuilder.loadTexts: cficonRlirErlFcId.setDescription('The Fibre Channel Identifier (FC-ID) of the subscribing Nx_Port.')
cficonRlirErlFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cficonRlirErlFormat.setStatus('current')
if mibBuilder.loadTexts: cficonRlirErlFormat.setDescription('Indicates the device type for which the Nx_Port is interested in receiving RLIR ELS.')
cficonRlirErlRegType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("conditionalRx", 1), ("alwaysRx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonRlirErlRegType.setReference('Fibre Channel Framing and Signaling (FC-FS), Rev 1.70, Section 12.3.2.32')
if mibBuilder.loadTexts: cficonRlirErlRegType.setStatus('current')
if mibBuilder.loadTexts: cficonRlirErlRegType.setDescription('This object indicates the type of registration desired by the subscriber. conditionalRx(1) - the Nx_Port is registered as a valid recipient of subsequent RLIRs. But such an Nx_Port is chosen as the recipient of a link incident record only if no other recipients from the ERL on this VSAN have been chosen. alwaysRx(2) - the Nx_Port is registered as a valid recipient of subsequent RLIRs. Such an Nx_Port is always chosen as a recipient of a link incident record.')
cficonInterfaceSwapNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonInterfaceSwapNextIndex.setStatus('current')
if mibBuilder.loadTexts: cficonInterfaceSwapNextIndex.setDescription('Next unique index available for creating new entry in the FICON interface swap table.')
cficonInterfaceSwapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20), )
if mibBuilder.loadTexts: cficonInterfaceSwapTable.setStatus('current')
if mibBuilder.loadTexts: cficonInterfaceSwapTable.setDescription('This table provides a management application with the capability to swap the configuration of two specified interfaces. In FICON, a host associates a great deal of configuration data with a port-address. If the FICON port connecting the host to the switch has some problem and the user wants to connect the host to a different port in the switch, one needs to swap the configuration of the two ports. This command transparently swaps the configuration of two ports without affecting the host. ')
cficonInterfaceSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20, 1), ).setIndexNames((0, "CISCO-FICON-MIB", "cficonInterfaceSwapIndex"))
if mibBuilder.loadTexts: cficonInterfaceSwapEntry.setStatus('current')
if mibBuilder.loadTexts: cficonInterfaceSwapEntry.setDescription('A cficonInterfaceSwapTable entry contains 2 interface indices to be swapped among other objects. A management station wishing to create an entry should first obtain a unique serial number, e.g. get the cficonInterfaceSwapNextIndex scalar as the index to this sparse table. The station should then create the associated instance of the row status object. Note that when creating a row in this table, the cficonSwapPortEntryStatus, cficonSwapInterfaceIndexFirst and cficonSwapInterfaceIndexSecond are all required. The values of cficonSwapInterfaceIndexFirst and cficonSwapInterfaceIndexSecond should be different. If for any reason the new row can not be created, no swap action will be performed. If the table entry creation is successful, the value of cficonSwapInterfaceActionStatus will be pending(1) first and the SNMP response will be returned as success. When the swap starts, the value will be executing(2). After the swap action is done, the value will be either success(3) or failure(4). cficonSwapInterfaceFailReason contains the failure reason to indicate where the failure is from. cficonSwapInterfaceSystemError is a user readable description given by the failure causing sub-module. The management station should delete the entry after the value of cficonSwapInterfaceActionStatus being either success(3) or failure(4). ')
cficonInterfaceSwapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cficonInterfaceSwapIndex.setStatus('current')
if mibBuilder.loadTexts: cficonInterfaceSwapIndex.setDescription('An arbitrary index for the swap command.')
cficonSwapInterfaceIndexFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonSwapInterfaceIndexFirst.setStatus('current')
if mibBuilder.loadTexts: cficonSwapInterfaceIndexFirst.setDescription('The first port number that needs to be swapped .')
cficonSwapInterfaceIndexSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonSwapInterfaceIndexSecond.setStatus('current')
if mibBuilder.loadTexts: cficonSwapInterfaceIndexSecond.setDescription('The second port number that needs to be swapped.')
cficonSwapInterfaceActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pending", 1), ("executing", 2), ("success", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonSwapInterfaceActionStatus.setStatus('current')
if mibBuilder.loadTexts: cficonSwapInterfaceActionStatus.setDescription('The status of the port swap request. pending - the request is waiting to be processed by the device. executing - the request is currently being processed by the device. success - the request has been completed successfully by the device. failure - the request failed.')
cficonSwapInterfaceFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("dmFailure", 3), ("ficonFailure", 4), ("pmFailure", 5), ("psmFailure", 6), ("qosFailure", 7), ("spanFailure", 8), ("zsFailure", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonSwapInterfaceFailReason.setStatus('current')
if mibBuilder.loadTexts: cficonSwapInterfaceFailReason.setDescription('The reason of failed port swap request other - the failure is caused by other sub-module. none - no failure. dmFailure - the failure is caused by Domain Manager. ficonFailure - the failure is caused by FICON Manager. pmFailure - the failure is caused by Port Manager. psmFailure - the failure is caused by Port Security Manager. qosFailure - the failure is caused by QOS sub-module. spanFailure - the failure is caused by SPAN sub-module. zsFailure - the failure is caused by Zone Server. ')
cficonSwapInterfaceSystemError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cficonSwapInterfaceSystemError.setStatus('current')
if mibBuilder.loadTexts: cficonSwapInterfaceSystemError.setDescription('A system error string readable by user for the failed swap action.')
cficonSwapInterfaceEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 375, 1, 1, 20, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cficonSwapInterfaceEntryStatus.setStatus('current')
if mibBuilder.loadTexts: cficonSwapInterfaceEntryStatus.setDescription("If this object is set to 'active(1)' then the port configurations of the ports specified by objects cficonSwapInterfaceIndexFirst and cficonSwapInterfaceIndexSecond will be swapped.")
cficonPortInfoChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 375, 0, 1)).setObjects(("CISCO-FICON-MIB", "cficonRunCfgUnitType"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cficonPortInfoChange.setStatus('current')
if mibBuilder.loadTexts: cficonPortInfoChange.setDescription('A FICON Port Change notification is generated whenever the unit type of the port changes.')
ciscoFiconCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 1))
ciscoFiconGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2))
ciscoFiconCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 1, 1)).setObjects(("CISCO-FICON-MIB", "cficonPortSwapGroup"), ("CISCO-FICON-MIB", "cficonVsanGroup"), ("CISCO-FICON-MIB", "cficonPortGroup"), ("CISCO-FICON-MIB", "cficonPortRunCfgGroup"), ("CISCO-FICON-MIB", "cficonCfgFileGroup"), ("CISCO-FICON-MIB", "cficonPortNumIfGroup"), ("CISCO-FICON-MIB", "cficonPortAddrNumGroup"), ("CISCO-FICON-MIB", "cficonPortNumAddrGroup"), ("CISCO-FICON-MIB", "cficonDirHistGroup"), ("CISCO-FICON-MIB", "cficonStatsGroup"), ("CISCO-FICON-MIB", "cifconShowPortGroup"), ("CISCO-FICON-MIB", "cficonLinkIncidentGroup"), ("CISCO-FICON-MIB", "cficonCfgFileCupNameGroup"), ("CISCO-FICON-MIB", "cficonConfigCopyGroup"), ("CISCO-FICON-MIB", "cficonAutoSaveStateGroup"), ("CISCO-FICON-MIB", "cficonPortMapGroup"), ("CISCO-FICON-MIB", "cficonNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFiconCompliance = ciscoFiconCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoFiconCompliance.setDescription('Compliance statement for FICON MIB. ')
ciscoFiconComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 1, 2)).setObjects(("CISCO-FICON-MIB", "cficonPortSwapGroup"), ("CISCO-FICON-MIB", "cficonVsanGroup"), ("CISCO-FICON-MIB", "cficonPortGroup"), ("CISCO-FICON-MIB", "cficonPortRunCfgGroup"), ("CISCO-FICON-MIB", "cficonCfgFileGroup"), ("CISCO-FICON-MIB", "cficonPortNumIfGroup"), ("CISCO-FICON-MIB", "cficonPortAddrNumGroup"), ("CISCO-FICON-MIB", "cficonPortNumAddrGroup"), ("CISCO-FICON-MIB", "cficonDirHistGroup"), ("CISCO-FICON-MIB", "cficonStatsGroup"), ("CISCO-FICON-MIB", "cifconShowPortGroup"), ("CISCO-FICON-MIB", "cficonLinkIncidentGroup"), ("CISCO-FICON-MIB", "cficonCfgFileCupNameGroup"), ("CISCO-FICON-MIB", "cficonConfigCopyGroup"), ("CISCO-FICON-MIB", "cficonAutoSaveStateGroup"), ("CISCO-FICON-MIB", "cficonNotificationGroup"), ("CISCO-FICON-MIB", "cficonPortMapGroupRev1"), ("CISCO-FICON-MIB", "cficonReservedPortNumGroup"), ("CISCO-FICON-MIB", "cficonRlirErlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFiconComplianceRev1 = ciscoFiconComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoFiconComplianceRev1.setDescription('Compliance statement for FICON MIB. ')
ciscoFiconComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 1, 3)).setObjects(("CISCO-FICON-MIB", "cficonPortSwapGroup"), ("CISCO-FICON-MIB", "cficonVsanGroup"), ("CISCO-FICON-MIB", "cficonPortGroup"), ("CISCO-FICON-MIB", "cficonPortRunCfgGroup"), ("CISCO-FICON-MIB", "cficonCfgFileGroup"), ("CISCO-FICON-MIB", "cficonPortNumIfGroup"), ("CISCO-FICON-MIB", "cficonPortAddrNumGroup"), ("CISCO-FICON-MIB", "cficonPortNumAddrGroup"), ("CISCO-FICON-MIB", "cficonDirHistGroup"), ("CISCO-FICON-MIB", "cficonStatsGroup"), ("CISCO-FICON-MIB", "cifconShowPortGroup"), ("CISCO-FICON-MIB", "cficonLinkIncidentGroup"), ("CISCO-FICON-MIB", "cficonCfgFileCupNameGroup"), ("CISCO-FICON-MIB", "cficonConfigCopyGroup"), ("CISCO-FICON-MIB", "cficonAutoSaveStateGroup"), ("CISCO-FICON-MIB", "cficonNotificationGroup"), ("CISCO-FICON-MIB", "cficonPortMapGroupRev1"), ("CISCO-FICON-MIB", "cficonReservedPortNumGroup"), ("CISCO-FICON-MIB", "cficonRlirErlGroup"), ("CISCO-FICON-MIB", "cficonInterfaceSwapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFiconComplianceRev2 = ciscoFiconComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoFiconComplianceRev2.setDescription('Compliance statement for FICON MIB. ')
ciscoFiconComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 1, 4)).setObjects(("CISCO-FICON-MIB", "cficonPortSwapGroup"), ("CISCO-FICON-MIB", "cficonVsanGroup"), ("CISCO-FICON-MIB", "cficonPortGroup"), ("CISCO-FICON-MIB", "cficonPortRunCfgGroup"), ("CISCO-FICON-MIB", "cficonCfgFileGroup"), ("CISCO-FICON-MIB", "cficonPortNumIfGroup"), ("CISCO-FICON-MIB", "cficonPortAddrNumGroup"), ("CISCO-FICON-MIB", "cficonPortNumAddrGroup"), ("CISCO-FICON-MIB", "cficonDirHistGroup"), ("CISCO-FICON-MIB", "cficonStatsGroup"), ("CISCO-FICON-MIB", "cifconShowPortGroup"), ("CISCO-FICON-MIB", "cficonLinkIncidentGroup"), ("CISCO-FICON-MIB", "cficonCfgFileCupNameGroup"), ("CISCO-FICON-MIB", "cficonConfigCopyGroup"), ("CISCO-FICON-MIB", "cficonAutoSaveStateGroup"), ("CISCO-FICON-MIB", "cficonNotificationGroup"), ("CISCO-FICON-MIB", "cficonPortMapGroupRev1"), ("CISCO-FICON-MIB", "cficonReservedPortNumGroup"), ("CISCO-FICON-MIB", "cficonRlirErlGroup"), ("CISCO-FICON-MIB", "cficonInterfaceSwapGroup"), ("CISCO-FICON-MIB", "cficonDefaultPortBlockGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFiconComplianceRev3 = ciscoFiconComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoFiconComplianceRev3.setDescription('Compliance statement for FICON MIB. ')
cficonPortSwapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 1)).setObjects(("CISCO-FICON-MIB", "cficonSwapPortNumberFirst"), ("CISCO-FICON-MIB", "cficonSwapPortNumberSecond"), ("CISCO-FICON-MIB", "cficonSwapPortEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonPortSwapGroup = cficonPortSwapGroup.setStatus('current')
if mibBuilder.loadTexts: cficonPortSwapGroup.setDescription('A collection of objects providing port swap functionality.')
cficonVsanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 2)).setObjects(("CISCO-FICON-MIB", "cficonVsanHostControl"), ("CISCO-FICON-MIB", "cficonVsanHostControlSwOffline"), ("CISCO-FICON-MIB", "cficonVsanHostControlClkAlrtMode"), ("CISCO-FICON-MIB", "cficonVsanSnmpControl"), ("CISCO-FICON-MIB", "cficonVsanAutoSavePortAddrCfg"), ("CISCO-FICON-MIB", "cficonVsanEnableCup"), ("CISCO-FICON-MIB", "cficonVsanCodePage"), ("CISCO-FICON-MIB", "cficonVsanCharSet"), ("CISCO-FICON-MIB", "cficonVsanKeyCounter"), ("CISCO-FICON-MIB", "cficonVsanUserAlertMode"), ("CISCO-FICON-MIB", "cficonVsanDeviceAllegience"), ("CISCO-FICON-MIB", "cficonVsanTime"), ("CISCO-FICON-MIB", "cficonVsanHostOrDefaultTime"), ("CISCO-FICON-MIB", "cficonVsanCupName"), ("CISCO-FICON-MIB", "cficonSetHostTimeControl"), ("CISCO-FICON-MIB", "cficonVsanClearAllegience"), ("CISCO-FICON-MIB", "cficonVsanEntryStatus"), ("CISCO-FICON-MIB", "cficonVsanFiconState"), ("CISCO-FICON-MIB", "cficonVsanSerialNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonVsanGroup = cficonVsanGroup.setStatus('current')
if mibBuilder.loadTexts: cficonVsanGroup.setDescription('A group containing objects providing ficon information in a vsan.')
cficonPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 3)).setObjects(("CISCO-FICON-MIB", "cficonPortBlock"), ("CISCO-FICON-MIB", "cficonPortName"), ("CISCO-FICON-MIB", "cficonProhibitPortNumbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonPortGroup = cficonPortGroup.setStatus('current')
if mibBuilder.loadTexts: cficonPortGroup.setDescription('A group containing an object providing ficon port information.')
cficonPortRunCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 4)).setObjects(("CISCO-FICON-MIB", "cficonPortRunCfgBlock"), ("CISCO-FICON-MIB", "cficonPortRunCfgName"), ("CISCO-FICON-MIB", "cficonRunCfgProhibitPrtNums"), ("CISCO-FICON-MIB", "cficonRunCfgTypeNumber"), ("CISCO-FICON-MIB", "cficonRunCfgModelNumber"), ("CISCO-FICON-MIB", "cficonRunCfgManufacturer"), ("CISCO-FICON-MIB", "cficonRunCfgPlantOfMfg"), ("CISCO-FICON-MIB", "cficonRunCfgSerialNumber"), ("CISCO-FICON-MIB", "cficonRunCfgUnitType"), ("CISCO-FICON-MIB", "cficonRunCfgPortId"), ("CISCO-FICON-MIB", "cficonRunCfgStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonPortRunCfgGroup = cficonPortRunCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cficonPortRunCfgGroup.setDescription('A group containing an object providing ficon port information.')
cficonCfgFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 5)).setObjects(("CISCO-FICON-MIB", "cficonCfgFileDescr"), ("CISCO-FICON-MIB", "cficonCfgFileStatus"), ("CISCO-FICON-MIB", "cficonCfgFileLastUpdated"), ("CISCO-FICON-MIB", "cficonCfgFileCmd"), ("CISCO-FICON-MIB", "cficonCfgFileRowStatus"), ("CISCO-FICON-MIB", "cficonCfgFileCmdStatus"), ("CISCO-FICON-MIB", "cficonCfgFileCmdErrorString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonCfgFileGroup = cficonCfgFileGroup.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileGroup.setDescription('A collection of objects for the per VSAN config file table.')
cficonPortNumIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 6)).setObjects(("CISCO-FICON-MIB", "cficonPortIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonPortNumIfGroup = cficonPortNumIfGroup.setStatus('current')
if mibBuilder.loadTexts: cficonPortNumIfGroup.setDescription('A collection of objects giving association of a Port Number to Interface Index of the Port.')
cficonPortAddrNumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 7)).setObjects(("CISCO-FICON-MIB", "cficonPortAddrPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonPortAddrNumGroup = cficonPortAddrNumGroup.setStatus('current')
if mibBuilder.loadTexts: cficonPortAddrNumGroup.setDescription('A collection of objects giving association of a port address to port number and interface index of the port.')
cficonPortNumAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 8)).setObjects(("CISCO-FICON-MIB", "portAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonPortNumAddrGroup = cficonPortNumAddrGroup.setStatus('current')
if mibBuilder.loadTexts: cficonPortNumAddrGroup.setDescription('A collection of objects for the port number to port Address translation table.')
cficonDirHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 9)).setObjects(("CISCO-FICON-MIB", "cficonDirHistPortNumbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonDirHistGroup = cficonDirHistGroup.setStatus('current')
if mibBuilder.loadTexts: cficonDirHistGroup.setDescription('A collection of objects for the Director History table.')
cficonStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 10)).setObjects(("CISCO-FICON-MIB", "cfStatsFramePacingTime"), ("CISCO-FICON-MIB", "cfStatsDispErrorsInFrame"), ("CISCO-FICON-MIB", "cfStatsEOFErrs"), ("CISCO-FICON-MIB", "cfStatsDispErrsOutOfFrame"), ("CISCO-FICON-MIB", "cfStatsInvalidOrderSets"), ("CISCO-FICON-MIB", "cfStatsErrorSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonStatsGroup = cficonStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cficonStatsGroup.setDescription('A collection of objects for the FICON statistics table.')
cifconShowPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 11)).setObjects(("CISCO-FICON-MIB", "cficonShowPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifconShowPortGroup = cifconShowPortGroup.setStatus('current')
if mibBuilder.loadTexts: cifconShowPortGroup.setDescription('A collection of objects for the FICON statistics table.')
cficonLinkIncidentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 12)).setObjects(("CISCO-FICON-MIB", "cficonLinkIncident"), ("CISCO-FICON-MIB", "cficonLinkIncidentTime"), ("CISCO-FICON-MIB", "cficonLinkIncidentClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonLinkIncidentGroup = cficonLinkIncidentGroup.setStatus('current')
if mibBuilder.loadTexts: cficonLinkIncidentGroup.setDescription('A collection of objects for the FICON incidents table.')
cficonCfgFileCupNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 13)).setObjects(("CISCO-FICON-MIB", "cficonCfgFileCupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonCfgFileCupNameGroup = cficonCfgFileCupNameGroup.setStatus('current')
if mibBuilder.loadTexts: cficonCfgFileCupNameGroup.setDescription('A collection of objects for the FICON CUP name for the vsan in the configuration files.')
cficonConfigCopyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 14)).setObjects(("CISCO-FICON-MIB", "cficonCopyState"), ("CISCO-FICON-MIB", "cficonCopyFailReason"), ("CISCO-FICON-MIB", "cficonCopyEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonConfigCopyGroup = cficonConfigCopyGroup.setStatus('current')
if mibBuilder.loadTexts: cficonConfigCopyGroup.setDescription('A collection of objects for the FICON configuration copy operation.')
cficonAutoSaveStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 15)).setObjects(("CISCO-FICON-MIB", "cficonAutoSaveState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonAutoSaveStateGroup = cficonAutoSaveStateGroup.setStatus('current')
if mibBuilder.loadTexts: cficonAutoSaveStateGroup.setDescription('A collection of objects for the FICON configuration copy auto save operation.')
cficonPortMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 16)).setObjects(("CISCO-FICON-MIB", "cficonPortMap1"), ("CISCO-FICON-MIB", "cficonPortMap2"), ("CISCO-FICON-MIB", "cficonPortMap3"), ("CISCO-FICON-MIB", "cficonPortMap4"), ("CISCO-FICON-MIB", "cficonPortMap5"), ("CISCO-FICON-MIB", "cficonPortMap6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonPortMapGroup = cficonPortMapGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cficonPortMapGroup.setDescription('A collection of objects for the FICON port maps.')
cficonNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 17)).setObjects(("CISCO-FICON-MIB", "cficonPortInfoChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonNotificationGroup = cficonNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cficonNotificationGroup.setDescription('A collection of FICON notifications.')
cficonPortMapGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 18)).setObjects(("CISCO-FICON-MIB", "cficonPortMapMax"), ("CISCO-FICON-MIB", "cficonPortMapObj"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonPortMapGroupRev1 = cficonPortMapGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cficonPortMapGroupRev1.setDescription('A collection of objects for the FICON port maps.')
cficonReservedPortNumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 19)).setObjects(("CISCO-FICON-MIB", "cficonSlotReservedPN"), ("CISCO-FICON-MIB", "cficonLogicReservedPN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonReservedPortNumGroup = cficonReservedPortNumGroup.setStatus('current')
if mibBuilder.loadTexts: cficonReservedPortNumGroup.setDescription('A collection of objects for the reserved FICON port numbers.')
cficonRlirErlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 20)).setObjects(("CISCO-FICON-MIB", "cficonRlirErlRegType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonRlirErlGroup = cficonRlirErlGroup.setStatus('current')
if mibBuilder.loadTexts: cficonRlirErlGroup.setDescription('A collection of objects for displaying RLIR ERL.')
cficonInterfaceSwapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 21)).setObjects(("CISCO-FICON-MIB", "cficonSwapInterfaceIndexFirst"), ("CISCO-FICON-MIB", "cficonSwapInterfaceIndexSecond"), ("CISCO-FICON-MIB", "cficonSwapInterfaceActionStatus"), ("CISCO-FICON-MIB", "cficonSwapInterfaceFailReason"), ("CISCO-FICON-MIB", "cficonSwapInterfaceSystemError"), ("CISCO-FICON-MIB", "cficonSwapInterfaceEntryStatus"), ("CISCO-FICON-MIB", "cficonInterfaceSwapNextIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonInterfaceSwapGroup = cficonInterfaceSwapGroup.setStatus('current')
if mibBuilder.loadTexts: cficonInterfaceSwapGroup.setDescription('A collection of objects providing port swap functionality.')
cficonDefaultPortBlockGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 375, 2, 2, 22)).setObjects(("CISCO-FICON-MIB", "cficonDefaultPortBlock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cficonDefaultPortBlockGroup = cficonDefaultPortBlockGroup.setStatus('current')
if mibBuilder.loadTexts: cficonDefaultPortBlockGroup.setDescription('A collection of objects providing default port block state.')
mibBuilder.exportSymbols("CISCO-FICON-MIB", cficonPortTable=cficonPortTable, ciscoFiconMIBObjects=ciscoFiconMIBObjects, cficonVsanHostControlSwOffline=cficonVsanHostControlSwOffline, cficonVsanCharSet=cficonVsanCharSet, cficonPortNumAddrGroup=cficonPortNumAddrGroup, cfStatsInvalidOrderSets=cfStatsInvalidOrderSets, cficonStatsEntry=cficonStatsEntry, cficonConfigCopyIndex=cficonConfigCopyIndex, cficonPortAddrNumGroup=cficonPortAddrNumGroup, cficonVsanUserAlertMode=cficonVsanUserAlertMode, cficonRunCfgSerialNumber=cficonRunCfgSerialNumber, cficonVsanEnableCup=cficonVsanEnableCup, cficonPortMap3=cficonPortMap3, cficonPortRunCfgAddr=cficonPortRunCfgAddr, CficonPortNumOrAddr=CficonPortNumOrAddr, cficonPortAddrPortNumber=cficonPortAddrPortNumber, cficonLinkIncidentEntry=cficonLinkIncidentEntry, cficonPortMap1=cficonPortMap1, cficonPortName=cficonPortName, cficonPortNumber=cficonPortNumber, cfStatsFramePacingTime=cfStatsFramePacingTime, cficonSlotReservedPN=cficonSlotReservedPN, cficonInterfaceSwapNextIndex=cficonInterfaceSwapNextIndex, cficonVsanHostControlClkAlrtMode=cficonVsanHostControlClkAlrtMode, cficonPortMapEntry=cficonPortMapEntry, ciscoFiconMIB=ciscoFiconMIB, cficonRunCfgPlantOfMfg=cficonRunCfgPlantOfMfg, cficonRunCfgModelNumber=cficonRunCfgModelNumber, cficonPortMap2=cficonPortMap2, cficonProhibitPortNumbers=cficonProhibitPortNumbers, cficonConfigCopyTable=cficonConfigCopyTable, cficonPortNumIfGroup=cficonPortNumIfGroup, cficonSwapPortNumberFirst=cficonSwapPortNumberFirst, cficonPortRunCfgGroup=cficonPortRunCfgGroup, cficonVsanKeyCounter=cficonVsanKeyCounter, cficonCfgFilename=cficonCfgFilename, cficonCfgFileStatus=cficonCfgFileStatus, cficonPortAddrNumTable=cficonPortAddrNumTable, cficonVsanClearAllegience=cficonVsanClearAllegience, cficonRlirErlTable=cficonRlirErlTable, cficonDirHistTable=cficonDirHistTable, cfStatsErrorSummary=cfStatsErrorSummary, cficonRlirErlEntry=cficonRlirErlEntry, cficonVsanEntryStatus=cficonVsanEntryStatus, cficonLinkIncidentClear=cficonLinkIncidentClear, cficonCfgFileGroup=cficonCfgFileGroup, cficonCfgFileCupNameTable=cficonCfgFileCupNameTable, cficonVsanGroup=cficonVsanGroup, cficonVsanTime=cficonVsanTime, ciscoFiconMIBConform=ciscoFiconMIBConform, cficonPortRunCfgBlock=cficonPortRunCfgBlock, cficonLinkIncident=cficonLinkIncident, cficonDirHistGroup=cficonDirHistGroup, cfStatsEOFErrs=cfStatsEOFErrs, cficonRlirErlRegType=cficonRlirErlRegType, cficonLinkIncidentTime=cficonLinkIncidentTime, cficonCopyState=cficonCopyState, cficonRunCfgProhibitPrtNums=cficonRunCfgProhibitPrtNums, cficonSlotIndex=cficonSlotIndex, cficonShowPorts=cficonShowPorts, cficonCfgFileCupNameEntry=cficonCfgFileCupNameEntry, cficonVsanCupName=cficonVsanCupName, cficonVsanFiconState=cficonVsanFiconState, cficonCfgFileTable=cficonCfgFileTable, cficonPortNumIfEntry=cficonPortNumIfEntry, cficonPortIfIndex=cficonPortIfIndex, cficonDirHistKeyCounter=cficonDirHistKeyCounter, cficonCopyFailReason=cficonCopyFailReason, cficonPortRunCfgEntry=cficonPortRunCfgEntry, cficonPortMap5=cficonPortMap5, cficonPortMap4=cficonPortMap4, cficonInterfaceSwapTable=cficonInterfaceSwapTable, cficonDirHistPortNumbers=cficonDirHistPortNumbers, cficonPortMapGroup=cficonPortMapGroup, cficonReservedPortNumGroup=cficonReservedPortNumGroup, ciscoFiconComplianceRev1=ciscoFiconComplianceRev1, cficonCopyEntryRowStatus=cficonCopyEntryRowStatus, ciscoFiconConfig=ciscoFiconConfig, cfStatsDispErrsOutOfFrame=cfStatsDispErrsOutOfFrame, cficonPortMapMax=cficonPortMapMax, cficonConfigCopyEntry=cficonConfigCopyEntry, cficonPortAddrNumEntry=cficonPortAddrNumEntry, cficonVsanSnmpControl=cficonVsanSnmpControl, cficonStatsGroup=cficonStatsGroup, cficonLogicReservedPN=cficonLogicReservedPN, cficonConfigCopyGroup=cficonConfigCopyGroup, ciscoFiconPortMap=ciscoFiconPortMap, cficonVsanHostOrDefaultTime=cficonVsanHostOrDefaultTime, cficonCfgFileRowStatus=cficonCfgFileRowStatus, cficonPortMap6=cficonPortMap6, cficonPortMapObj=cficonPortMapObj, cficonCfgFileCupNameGroup=cficonCfgFileCupNameGroup, cficonCfgFileCmdStatus=cficonCfgFileCmdStatus, cficonAutoSaveState=cficonAutoSaveState, cficonSwapInterfaceSystemError=cficonSwapInterfaceSystemError, cficonRunCfgUnitType=cficonRunCfgUnitType, cficonPortNumAddrEntry=cficonPortNumAddrEntry, cficonSlotPortNumTable=cficonSlotPortNumTable, cficonPortAddr=cficonPortAddr, cficonPortEntry=cficonPortEntry, cficonSwapInterfaceFailReason=cficonSwapInterfaceFailReason, cficonSwapInterfaceIndexSecond=cficonSwapInterfaceIndexSecond, cficonLinkIncidentGroup=cficonLinkIncidentGroup, cficonPortMapTable=cficonPortMapTable, cficonPortMapGroupRev1=cficonPortMapGroupRev1, cficonCfgFileEntry=cficonCfgFileEntry, cficonVsanSerialNum=cficonVsanSerialNum, cficonAutoSaveStateGroup=cficonAutoSaveStateGroup, cficonRlirErlFcId=cficonRlirErlFcId, PYSNMP_MODULE_ID=ciscoFiconMIB, cficonSwapPortEntryStatus=cficonSwapPortEntryStatus, cficonPortNumIfTable=cficonPortNumIfTable, cficonPortRunCfgName=cficonPortRunCfgName, cficonRunCfgManufacturer=cficonRunCfgManufacturer, cficonDirHistEntry=cficonDirHistEntry, cficonInterfaceSwapEntry=cficonInterfaceSwapEntry, cficonCfgFileDescr=cficonCfgFileDescr, cficonPortInfoChange=cficonPortInfoChange, cficonSlotPortNumEntry=cficonSlotPortNumEntry, cficonPortSwapEntry=cficonPortSwapEntry, ciscoFiconGlobal=ciscoFiconGlobal, cficonPortNumAddrTable=cficonPortNumAddrTable, cficonPortSwapGroup=cficonPortSwapGroup, cficonPortSwapTable=cficonPortSwapTable, cficonPortMapIndex=cficonPortMapIndex, cficonInterfaceSwapGroup=cficonInterfaceSwapGroup, cficonPortGroup=cficonPortGroup, ciscoFiconMIBNotifications=ciscoFiconMIBNotifications, cficonVsanEntry=cficonVsanEntry, cficonPortAddrPortAddr=cficonPortAddrPortAddr, ciscoFiconCompliance=ciscoFiconCompliance, cficonPortSwapIndex=cficonPortSwapIndex, cficonVsanDeviceAllegience=cficonVsanDeviceAllegience, cficonVsanCodePage=cficonVsanCodePage, cficonRlirErlGroup=cficonRlirErlGroup, cficonVsanAutoSavePortAddrCfg=cficonVsanAutoSavePortAddrCfg, cficonDefaultPortBlockGroup=cficonDefaultPortBlockGroup, cficonCfgFileCmd=cficonCfgFileCmd, cficonSwapPortNumberSecond=cficonSwapPortNumberSecond, cficonRunCfgTypeNumber=cficonRunCfgTypeNumber, ciscoFiconComplianceRev2=ciscoFiconComplianceRev2, cfStatsDispErrorsInFrame=cfStatsDispErrorsInFrame, cficonSwapInterfaceIndexFirst=cficonSwapInterfaceIndexFirst, cficonCfgFileCupName=cficonCfgFileCupName, ciscoFiconCompliances=ciscoFiconCompliances, portAddress=portAddress, ciscoFiconComplianceRev3=ciscoFiconComplianceRev3, cficonVsanTable=cficonVsanTable, cficonSetHostTimeControl=cficonSetHostTimeControl, cficonCfgFileLastUpdated=cficonCfgFileLastUpdated, cficonInterfaceSwapIndex=cficonInterfaceSwapIndex, cficonPortRunCfgTable=cficonPortRunCfgTable, cficonNotificationGroup=cficonNotificationGroup, cficonCfgFileCmdErrorString=cficonCfgFileCmdErrorString, ciscoFiconGroups=ciscoFiconGroups, cifconShowPortGroup=cifconShowPortGroup, cficonRunCfgPortId=cficonRunCfgPortId, cficonSwapInterfaceEntryStatus=cficonSwapInterfaceEntryStatus, cficonSwapInterfaceActionStatus=cficonSwapInterfaceActionStatus, cficonLinkIncidentTable=cficonLinkIncidentTable, cficonDefaultPortBlock=cficonDefaultPortBlock, cficonStatsTable=cficonStatsTable, cficonRunCfgStatus=cficonRunCfgStatus, portAddrPortNumber=portAddrPortNumber, cficonPortBlock=cficonPortBlock, cficonVsanHostControl=cficonVsanHostControl, cficonRlirErlFormat=cficonRlirErlFormat)
