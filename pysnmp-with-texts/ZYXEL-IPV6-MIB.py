#
# PySNMP MIB module ZYXEL-IPV6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-IPV6-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, NotificationType, ObjectIdentity, TimeTicks, ModuleIdentity, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "NotificationType", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "IpAddress", "Integer32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelIpv6 = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34))
if mibBuilder.loadTexts: zyxelIpv6.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelIpv6.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelIpv6.setContactInfo('')
if mibBuilder.loadTexts: zyxelIpv6.setDescription('The subtree for Internet Protocol version 6 (IPv6)')
zyxelIpv6Setup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1))
zyIpv6HopLimit = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyIpv6HopLimit.setStatus('current')
if mibBuilder.loadTexts: zyIpv6HopLimit.setDescription('Enter the number of the IPv6 hop limit (from 1 to 255).')
zyIpv6IcmpRateLimitErrorInterval = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyIpv6IcmpRateLimitErrorInterval.setStatus('current')
if mibBuilder.loadTexts: zyIpv6IcmpRateLimitErrorInterval.setDescription('Enter a value of error interval to control the sending rate of error messages, and the minimum accuracy is 10 milliseconds.')
zyIpv6IcmpRateLimitBucketSize = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyIpv6IcmpRateLimitBucketSize.setStatus('current')
if mibBuilder.loadTexts: zyIpv6IcmpRateLimitBucketSize.setDescription('Enter a value of bucket size to control the number of ICMPv6 message allowed per error interval.')
zyIpv6MaxNumberOfGlobalAddrresses = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyIpv6MaxNumberOfGlobalAddrresses.setStatus('current')
if mibBuilder.loadTexts: zyIpv6MaxNumberOfGlobalAddrresses.setDescription('The maximum number of IPv6 Global Address entries that can be created.')
zyxelIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5), )
if mibBuilder.loadTexts: zyxelIpv6Table.setStatus('current')
if mibBuilder.loadTexts: zyxelIpv6Table.setDescription('The table contains IPv6 configuration.')
zyxelIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5, 1), ).setIndexNames((0, "ZYXEL-IPV6-MIB", "zyIpv6IfIndex"))
if mibBuilder.loadTexts: zyxelIpv6Entry.setStatus('current')
if mibBuilder.loadTexts: zyxelIpv6Entry.setDescription('An entry contains IPv6 configuration. ')
zyIpv6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: zyIpv6IfIndex.setStatus('current')
if mibBuilder.loadTexts: zyIpv6IfIndex.setDescription('The index of IPv6 Interface.')
zyIpv6State = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyIpv6State.setStatus('current')
if mibBuilder.loadTexts: zyIpv6State.setDescription('Enable/Disable IPv6 on the interface.')
zyIpv6AddressAutoConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5, 1, 3), EnabledStatus().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stateless", 1), ("stateful", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyIpv6AddressAutoConfigState.setStatus('current')
if mibBuilder.loadTexts: zyIpv6AddressAutoConfigState.setDescription('Enable/Disable stateless address auto-configuration.')
zyIpv6LinkLocalIpAddrressType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyIpv6LinkLocalIpAddrressType.setStatus('current')
if mibBuilder.loadTexts: zyIpv6LinkLocalIpAddrressType.setDescription('This type of the link local address.')
zyIpv6LinkLocalIpAddrress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyIpv6LinkLocalIpAddrress.setStatus('current')
if mibBuilder.loadTexts: zyIpv6LinkLocalIpAddrress.setDescription('The IPv6 link local address. Each interface has only one IPv6 link local address.')
zyIpv6DefaultGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyIpv6DefaultGatewayType.setStatus('current')
if mibBuilder.loadTexts: zyIpv6DefaultGatewayType.setDescription('This type of default gateway address.')
zyIpv6DefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 5, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyIpv6DefaultGateway.setStatus('current')
if mibBuilder.loadTexts: zyIpv6DefaultGateway.setDescription('The IPv6 default gateway.')
zyxelIpv6GlobalAddressTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6), )
if mibBuilder.loadTexts: zyxelIpv6GlobalAddressTable.setStatus('current')
if mibBuilder.loadTexts: zyxelIpv6GlobalAddressTable.setDescription('The table contains IPv6 global address configuration. ')
zyxelIpv6GlobalAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6, 1), ).setIndexNames((0, "ZYXEL-IPV6-MIB", "zyIpv6GlobalAddressIfIndex"), (0, "ZYXEL-IPV6-MIB", "zyIpv6GlobalAddressIpAddressType"), (0, "ZYXEL-IPV6-MIB", "zyIpv6GlobalAddressIpAddress"), (0, "ZYXEL-IPV6-MIB", "zyIpv6GlobalAddressPrefixLength"), (0, "ZYXEL-IPV6-MIB", "zyIpv6GlobalAddressEUI64State"))
if mibBuilder.loadTexts: zyxelIpv6GlobalAddressEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelIpv6GlobalAddressEntry.setDescription('An entry contains IPv6 global address configuration. ')
zyIpv6GlobalAddressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: zyIpv6GlobalAddressIfIndex.setStatus('current')
if mibBuilder.loadTexts: zyIpv6GlobalAddressIfIndex.setDescription('The index of IPv6 global address interface.')
zyIpv6GlobalAddressIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6, 1, 2), InetAddressType())
if mibBuilder.loadTexts: zyIpv6GlobalAddressIpAddressType.setStatus('current')
if mibBuilder.loadTexts: zyIpv6GlobalAddressIpAddressType.setDescription('The type of IPv6 global address.')
zyIpv6GlobalAddressIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6, 1, 3), InetAddress())
if mibBuilder.loadTexts: zyIpv6GlobalAddressIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyIpv6GlobalAddressIpAddress.setDescription('The IPv6 global address. Each interface can be multiple IPv6 global addresses.')
zyIpv6GlobalAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6, 1, 4), Integer32())
if mibBuilder.loadTexts: zyIpv6GlobalAddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: zyIpv6GlobalAddressPrefixLength.setDescription('The IPv6 global address prefix length.')
zyIpv6GlobalAddressEUI64State = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6, 1, 5), EnabledStatus())
if mibBuilder.loadTexts: zyIpv6GlobalAddressEUI64State.setStatus('current')
if mibBuilder.loadTexts: zyIpv6GlobalAddressEUI64State.setDescription('Enable/Disable EUI-64 and enable it will replace the IPv6 address from the post-64 bit to EUI-64 MAC address.')
zyIpv6GlobalAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("preferred", 1), ("deprecated", 2), ("invalid", 3), ("inaccessible", 4), ("unknown", 5), ("tentative", 6), ("duplicate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyIpv6GlobalAddressStatus.setStatus('current')
if mibBuilder.loadTexts: zyIpv6GlobalAddressStatus.setDescription('The status of IPv6 global address.')
zyIpv6GlobalAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 34, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyIpv6GlobalAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyIpv6GlobalAddressRowStatus.setDescription('This object allows entry to be created and deleted an IPv6 global address entry.')
mibBuilder.exportSymbols("ZYXEL-IPV6-MIB", zyIpv6IfIndex=zyIpv6IfIndex, zyxelIpv6Table=zyxelIpv6Table, zyIpv6GlobalAddressRowStatus=zyIpv6GlobalAddressRowStatus, zyIpv6DefaultGatewayType=zyIpv6DefaultGatewayType, zyIpv6GlobalAddressIfIndex=zyIpv6GlobalAddressIfIndex, zyIpv6MaxNumberOfGlobalAddrresses=zyIpv6MaxNumberOfGlobalAddrresses, zyIpv6AddressAutoConfigState=zyIpv6AddressAutoConfigState, zyIpv6HopLimit=zyIpv6HopLimit, zyIpv6GlobalAddressStatus=zyIpv6GlobalAddressStatus, zyIpv6GlobalAddressEUI64State=zyIpv6GlobalAddressEUI64State, zyxelIpv6Setup=zyxelIpv6Setup, zyxelIpv6GlobalAddressTable=zyxelIpv6GlobalAddressTable, PYSNMP_MODULE_ID=zyxelIpv6, zyIpv6LinkLocalIpAddrressType=zyIpv6LinkLocalIpAddrressType, zyIpv6GlobalAddressPrefixLength=zyIpv6GlobalAddressPrefixLength, zyIpv6GlobalAddressIpAddressType=zyIpv6GlobalAddressIpAddressType, zyxelIpv6=zyxelIpv6, zyIpv6IcmpRateLimitBucketSize=zyIpv6IcmpRateLimitBucketSize, zyIpv6State=zyIpv6State, zyIpv6DefaultGateway=zyIpv6DefaultGateway, zyIpv6GlobalAddressIpAddress=zyIpv6GlobalAddressIpAddress, zyIpv6LinkLocalIpAddrress=zyIpv6LinkLocalIpAddrress, zyxelIpv6GlobalAddressEntry=zyxelIpv6GlobalAddressEntry, zyIpv6IcmpRateLimitErrorInterval=zyIpv6IcmpRateLimitErrorInterval, zyxelIpv6Entry=zyxelIpv6Entry)
