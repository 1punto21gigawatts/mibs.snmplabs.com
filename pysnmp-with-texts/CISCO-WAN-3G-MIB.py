#
# PySNMP MIB module CISCO-WAN-3G-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-3G-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalName, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, Counter64, Gauge32, iso, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, ObjectIdentity, Bits, MibIdentifier, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Gauge32", "iso", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "ObjectIdentity", "Bits", "MibIdentifier", "NotificationType", "Counter32")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
ciscoWan3gMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 661))
ciscoWan3gMIB.setRevisions(('2013-08-12 00:00', '2012-07-25 00:00', '2012-07-10 00:00', '2010-08-11 00:00', '2010-08-04 00:00', '2009-02-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWan3gMIB.setRevisionsDescriptions(('Added new notifications c3gModemTemperOnsetRecoveryNotif, c3gModemTemperAbateRecoveryNotif.', 'Modified Description of the ciscoWan3gMIB module. Modified the description of c3gWanCommonTable, c3gWanLbsCommonTable, c3gSmsCommonTable and all its objects to emphazise that it is technology independent. Added enumerated value lte to objects C3gServiceCapability, c3gCurrentIdleDigitalMode, c3gGsmPacketService. Modified the descriptions of c3gGsmIdentityTable, and all its objects to emphazise that these objects are applicable to both 3G and 4G-LTE Technology. Added new object c3gGpsState to the table c3gWanCommonTable. Added enumerated value lteBand for c3gGsmCurrentBand. Modified ciscoWan3gMIBGsmObjectGroup, ciscoWan3gMIBSmsObjectGroup, ciscoWan3gMIBLbsObjectGroup, ciscoWan3gMIBGsmObjectGroup description in Module ciscoWan3gMIBCompliance, ciscoWan3gMIBCompliance1. Added c3gGpsState to the group ciscoWan3gMIBCommonObjectGroup.', 'Added enumerated values rate56kbps(12) to rate8dot4mbps(18) for C3gUmtsQosLinkBitRate.', 'Fixed spelling errors.', 'Added c3gWanLbs and c3gWanSms. Added ciscoWan3gMIBSmsObjectGroup and ciscoWan3gMIBSmsObjectGroup. Deprecated ciscoWan3gMIBCompliance and replaced by ciscoWan3gMIBCompliance1.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWan3gMIB.setLastUpdated('201308120000Z')
if mibBuilder.loadTexts: ciscoWan3gMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWan3gMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-3g@cisco.com cs-4g@cisco.com')
if mibBuilder.loadTexts: ciscoWan3gMIB.setDescription('This MIB module provides network management support for Cisco cellular 3G and 4G LTE WAN products. *** ABBREVIATIONS, ACRONYMS, AND SYMBOLS *** 1xRTT - 1 times Radio Transmission Technology. 3G - Third generation of mobile phones standards and technologies. 4G - Fourth generation of mobile phones standards and technologies Azimuth - Angle of rotation of a satellite Dish. BER - Bit Error Ratio. BS - Base Station. CDMA - Code Division Multiple Access. dB - decibel. dBm - power ratio in decibels (dB) of the measured power referenced to one milliwatt (mW). CnS - Control and Status proprietary protocol for managing the control and status of the modem. Ec/Io - ratio of received pilot energy, Ec, to total received energy or the total power spectral density, Io. EDGE - Enhanced Data rate for GSM Evolution. EPS - Evolved Packet System EVDO - EVolution Data Optimized. FDD - Frequency Division Duplexing GPRS - General Packet Radio Service. GSM - Global System for Mobile communications. GPS - Global Positioning System. HSDPA - High Speed Downlink Packet Access. HSPA - High Speed Packet Access. HSUPA - High Speed Uplink Packet Access. LBS - Location Based Service. LTE - Long Term Evolution MT - Mobile Termination. PDP - Packet Data Protocol. PLMN - Public Land Mobile Network. QoS - Quality of Service. RSSI - Received Signal Strength Indication. SDU - Service Data Unit. SER - SDU Error Ratio. SIM - Subscriber Identity Module. SMS - Short Messaging Service. SNR - Signal to Noise Ratio. TDD - Time Division Duplexing UMTS - Universal Mobile Telecommunication System. WCDMA - Wideband Code Division Multiple Access.')
class C3gServiceCapability(TextualConvention, Bits):
    description = '3G service capability: oneXRtt(0) - 1xRTT evDoRel0(1) - EVDO Revision 0 evDoRelA(2) - EVDO Revision A evDoRelB(3) - EVDO Revision B gprs(4) - GPRS edge(5) - EDGE umtsWcdma(6) - UMTS/WCDMA hsdpa(7) - HSDPA hsupa(8) - HSUPA hspa(9) - HSPA hspaPlus(10) - HSPA Plus lteTdd(11) - LTE TDD lteFdd (12) - LTE FDD'
    status = 'current'
    namedValues = NamedValues(("oneXRtt", 0), ("evDoRel0", 1), ("evDoRelA", 2), ("evDoRelB", 3), ("gprs", 4), ("edge", 5), ("umtsWcdma", 6), ("hsdpa", 7), ("hsupa", 8), ("hspa", 9), ("hspaPlus", 10), ("lteTdd", 11), ("lteFdd", 12))

class C3gRssi(TextualConvention, Integer32):
    description = 'Generic RSSI range.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-150, 0)

class C3gEcIo(TextualConvention, Integer32):
    description = 'Generic EcIo range.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-150, 0)

class C3gTemperature(TextualConvention, Integer32):
    description = 'Generic temperature range.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-50, 100)

class C3gPdpType(TextualConvention, Integer32):
    description = 'Generic PDP type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("ipV4", 2), ("ppp", 3), ("ipV6", 4), ("ipV4V6", 5))

class C3gUmtsQosTrafficClass(TextualConvention, Integer32):
    description = "UMTS QoS traffic classes: subscription(1) - based on user's subscription conversational(2) - conversational streaming(3) - streaming interactive(4) - interactive background(5) - background"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("subscription", 1), ("conversational", 2), ("streaming", 3), ("interactive", 4), ("background", 5))

class C3gUmtsQosLinkBitRate(TextualConvention, Integer32):
    description = "UMTS QoS link bit rate: subscription(1) - based on user's subscription rate16kbps(2) - 16 Kbps rate32kbps(3) - 32 Kbps rate64kbps(4) - 64 Kbps rate128kbps(5) - 128 Kbps rate256kbps(6) - 256 Kbps rate384kbps(7) - 384 Kbps rate1dot8mbps(8) - 1.8 Mbps rate3dot6mbps(9) - 3.6 Mbps rate7dot2mbps(10) - 7.2 Mbps rate14dot4mbps(11) - 14.4 Mbps rate56kbps(12) - 56 Kbps rate1dot15mbps(13) - 1.15 Mbps rate1dot6mbps(14) - 1.6 Mbps rate2dot1mbps(15) - 2.1 Mbps rate2dot8mbps(16) - 2.8 Mbps rate4dot2mbps(17) - 4.2 Mbps rate8dot4mbps(18) - 8.4 Mbps"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("subscription", 1), ("rate16kbps", 2), ("rate32kbps", 3), ("rate64kbps", 4), ("rate128kbps", 5), ("rate256kbps", 6), ("rate384kbps", 7), ("rate1dot8mbps", 8), ("rate3dot6mbps", 9), ("rate7dot2mbps", 10), ("rate14dot4mbps", 11), ("rate56kbps", 12), ("rate1dot15mbps", 13), ("rate1dot6mbps", 14), ("rate2dot1mbps", 15), ("rate2dot8mbps", 16), ("rate4dot2mbps", 17), ("rate8dot4mbps", 18))

class C3gUmtsQosOrder(TextualConvention, Integer32):
    description = "UMTS QoS delivery order: subscription(1) - based on user's subscription withDeliverOrder(2) - with delivery order withoutDeliverOrder(3) - without delivery order"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("subscription", 1), ("withDeliverOrder", 2), ("withoutDeliverOrder", 3))

class C3gUmtsQosErroneousSdu(TextualConvention, Integer32):
    description = "UMTS QoS Delivery of Erroneous Service Data Unit(SDU): subscription(1) - based on user's subscription noDetect(2) - no detect errSduDeliver(3) - erroneous SDUs are delivered errSduNotDeliver(4) - erroneous SDUs are not delivered"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("subscription", 1), ("noDetect", 2), ("errSduDeliver", 3), ("errSduNotDeliver", 4))

class C3gUmtsQosSer(TextualConvention, Integer32):
    description = "UMTS QoS SDU error ratio: subscription(1) - based on user's subscription oneExpMinus2(2) - 1E-2 sevenExpMinus3(3) - 7E-3 oneExpMinus3(4) - 1E-3 oneExpMinus4(5) - 1E-4 oneExpMinus5(6) - 1E-5 oneExpMinus6(7) - 1E-6 oneExpMinus1(8) - 1E-1"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("subscription", 1), ("oneExpMinus2", 2), ("sevenExpMinus3", 3), ("oneExpMinus3", 4), ("oneExpMinus4", 5), ("oneExpMinus5", 6), ("oneExpMinus6", 7), ("oneExpMinus1", 8))

class C3gUmtsQosBer(TextualConvention, Integer32):
    description = "UMTS QoS residual bit error ratio (BER): subscription(1) - based on user's subscription fiveExpMinus2(2) - 5E-2 oneExpMinus2(3) - 1E-2 fiveExpMinus3(4) - 5E-3 fourExpMinus3(5) - 4E-3 oneExpMinus3(6) - 1E-3 oneExpMinus4(7) - 1E-4 oneExpMinus5(8) - 1E-5 oneExpMinus6(9) - 1E-6 sixExpMinus8(10) - 6E-8"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("subscription", 1), ("fiveExpMinus2", 2), ("oneExpMinus2", 3), ("fiveExpMinus3", 4), ("fourExpMinus3", 5), ("oneExpMinus3", 6), ("oneExpMinus4", 7), ("oneExpMinus5", 8), ("oneExpMinus6", 9), ("sixExpMinus8", 10))

class C3gUmtsQosPriority(TextualConvention, Integer32):
    description = "UMTS QoS traffic handling priority: subscription(1) - based on user's subscription level1(2) - priority level 1 level2(3) - priority level 2 level3(4) - priority level 3"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("subscription", 1), ("level1", 2), ("level2", 3), ("level3", 4))

class C3gUmtsQosSrcStatDescriptor(TextualConvention, Integer32):
    description = 'UMTS QoS source statistics descriptor: unknown(1) - unknown speech(2) - speech'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("speech", 2))

class C3gUmtsQosSignalIndication(TextualConvention, Integer32):
    description = 'UMTS QoS signalling indication: notOptimized(1) - not optimized for signalling traffic optimized(2) - optimized for signalling traffic'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("notOptimized", 1), ("optimized", 2))

class C3gGprsQosPrecedence(TextualConvention, Integer32):
    description = "GPRS QoS precedence: subscription(1) - based on user's subscription highPriority(2) - high priority normalPriority(3) - normal priority lowPriority(4) - low priority"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("subscription", 1), ("highPriority", 2), ("normalPriority", 3), ("lowPriority", 4))

class C3gGprsQosDelay(TextualConvention, Integer32):
    description = "GPRS QoS delay classes: subscription(1) - based on user's subscription delayClass1(2) - delay class 1 delayClass2(3) - delay class 2 delayClass3(4) - delay class 3 delayClass4(5) - delay class 4"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("subscription", 1), ("delayClass1", 2), ("delayClass2", 3), ("delayClass3", 4), ("delayClass4", 5))

class C3gGprsQosReliability(TextualConvention, Integer32):
    description = "GPRS QoS reliability: subscription(1) - based on user's subscription ackGtpLlcRlcProtData(2) - acknowledged GTP, LLC, and RLC; protected data unAckGtpAckLlcRlcProtData(3) - unacknowledged GTP, acknowledged LLC and RLC; protected data unAckGtpLlcAckRlcProtData(4) - unacknowledged GTP and LLC, acknowledged RLC; protected data unAckGtpLlcRlcProtData(5) - unacknowledged GTP, LLC, and RLC; protected data unAckGtpLlcRlcUnProtData(6) - unacknowledged GTP, LLC, and RLC; unprotected data"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("subscription", 1), ("ackGtpLlcRlcProtData", 2), ("unAckGtpAckLlcRlcProtData", 3), ("unAckGtpLlcAckRlcProtData", 4), ("unAckGtpLlcRlcProtData", 5), ("unAckGtpLlcRlcUnProtData", 6))

class C3gGprsQosPeakRate(TextualConvention, Integer32):
    description = "GPRS QoS peak rate: subscription(1) - based on user's subscription upTo1kops(2) - up to 1000 octet/second upTo2kops(3) - up to 2000 octet/second upTo4kops(4) - up to 4000 octet/second upTo8kops(5) - up to 8000 octet/second upTo16kops(6) - up to 16000 octet/second upTo32kops(7) - up to 32000 octet/second upTo64kops(8) - up to 64000 octet/second upTo128kops(9) - up to 128000 octet/second upTo256kops(10) - up to 256000 octet/second"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("subscription", 1), ("upTo1kops", 2), ("upTo2kops", 3), ("upTo4kops", 4), ("upTo8kops", 5), ("upTo16kops", 6), ("upTo32kops", 7), ("upTo64kops", 8), ("upTo128kops", 9), ("upTo256kops", 10))

class C3gGprsQosMeanRate(TextualConvention, Integer32):
    description = "GPRS QoS mean rate: subscription(1) - based on user's subscription rate100(2) - 100 octet/hour rate200(3) - 200 octet/hour rate500(4) - 500 octet/hour rate1k(5) - 1000 octet/hour rate2k(6) - 2000 octet/hour rate5k(7) - 5000 octet/hour rate10k(8) - 10000 octet/hour rate20k(9) - 20000 octet/hour rate50k(10) - 50000 octet/hour rate100k(11) - 100000 octet/hour rate200k(12) - 200000 octet/hour rate500k(13) - 500000 octet/hour rate1m(14) - 1000000 octet/hour rate2m(15) - 2000000 octet/hour rate5m(16) - 5000000 octet/hour rate10m(17) - 10000000 octet/hour rate20m(18) - 20000000 octet/hour rate50m(19) - 50000000 octet/hour resv1(20) - reserved 1 (for future use) resv2(21) - reserved 2 (for future use) resv3(22) - reserved 3 (for future use) resv4(23) - reserved 4 (for future use) resv5(24) - reserved 5 (for future use) resv6(25) - reserved 6 (for future use) resv7(26) - reserved 7 (for future use) resv8(27) - reserved 8 (for future use) resv9(28) - reserved 9 (for future use) resv10(29) - reserved 10 (for future use) resv11(30) - reserved 11 (for future use) resv12(31) - reserved 12 (for future use) bestEffort(32) - best effort"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))
    namedValues = NamedValues(("subscription", 1), ("rate100", 2), ("rate200", 3), ("rate500", 4), ("rate1k", 5), ("rate2k", 6), ("rate5k", 7), ("rate10k", 8), ("rate20k", 9), ("rate50k", 10), ("rate100k", 11), ("rate200k", 12), ("rate500k", 13), ("rate1m", 14), ("rate2m", 15), ("rate5m", 16), ("rate10m", 17), ("rate20m", 18), ("rate50m", 19), ("resv1", 20), ("resv2", 21), ("resv3", 22), ("resv4", 23), ("resv5", 24), ("resv6", 25), ("resv7", 26), ("resv8", 27), ("resv9", 28), ("resv10", 29), ("resv11", 30), ("resv12", 31), ("bestEffort", 32))

ciscoWan3gMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 0))
ciscoWan3gMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1))
ciscoWan3gMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 2))
c3gWanCommonTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1), )
if mibBuilder.loadTexts: c3gWanCommonTable.setStatus('current')
if mibBuilder.loadTexts: c3gWanCommonTable.setDescription('Cellular common objects table which is technology independent.')
c3gWanCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gWanCommonEntry.setStatus('current')
if mibBuilder.loadTexts: c3gWanCommonEntry.setDescription('An entry (conceptual row) in the c3gWanCommonTable.')
c3gStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cdma", 1), ("gsm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gStandard.setStatus('current')
if mibBuilder.loadTexts: c3gStandard.setDescription('Cellular Standard: GSM (Global System for Mobile communications, 3GPP), CDMA (Code Division Multiple Access, 3GPP-2). GSM standard also include 4G-LTE technology mode')
c3gCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 2), C3gServiceCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCapability.setStatus('current')
if mibBuilder.loadTexts: c3gCapability.setDescription('Cellular service capability. It currently includes the 2G, 3G and 4G-LTE standard.')
c3gModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gModemState.setStatus('current')
if mibBuilder.loadTexts: c3gModemState.setDescription('Cellular modem state, up(2) indicates modem can be detected and down(3) indicates modem can not be detected.')
c3gPreviousServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 4), C3gServiceCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gPreviousServiceType.setStatus('current')
if mibBuilder.loadTexts: c3gPreviousServiceType.setDescription('This object indicates the previous service type when service type changes.')
c3gCurrentServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 5), C3gServiceCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrentServiceType.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentServiceType.setDescription('This object indicates the current service type when service type changes.')
c3gRoamingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("roaming", 2), ("home", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gRoamingStatus.setStatus('current')
if mibBuilder.loadTexts: c3gRoamingStatus.setDescription('Cellular current roaming status.')
c3gCurrentSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrentSystemTime.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentSystemTime.setDescription('Cellular current system time received from base station.')
c3gConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("error", 2), ("connecting", 3), ("dormant", 4), ("connected", 5), ("disconnected", 6), ("idle", 7), ("active", 8), ("inactive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: c3gConnectionStatus.setDescription('Indicates the current connection status.')
c3gNotifRadioService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 9), C3gServiceCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gNotifRadioService.setStatus('current')
if mibBuilder.loadTexts: c3gNotifRadioService.setDescription('This object is used as one of the var-bind object when notification for RSSI or Ec/Io is generated. This object indicates which service generates the notification.')
c3gNotifRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 10), C3gRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gNotifRssi.setStatus('current')
if mibBuilder.loadTexts: c3gNotifRssi.setDescription('This object is used as one of the var-bind object when notification for RSSI is generated. The relevant RSSI will be copied into c3gNotifRssi which corresponds to the service indicated in c3gNotifRadioService object. This object will reflect the value of one of the following objects: c3gCurrent1xRttRssi, c3gCurrentEvDoRssi and c3gCurrentGsmRssi. User should not use this object to get the current RSSI value as this object is used to indicate the RSSI value that triggers c3gRssiOnsetNotif or c3gRssiAbateNotif notification.')
c3gNotifEcIo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 11), C3gEcIo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gNotifEcIo.setStatus('current')
if mibBuilder.loadTexts: c3gNotifEcIo.setDescription('This object is used as one of the var-bind object when notification for Ec/Io is generated. The relevant Ec/Io will be copied into c3gNotifEcIo which corresponds to the service indicated in c3gNotifRadioService object. This object will reflect the value of one of the following objects: c3gCurrent1xRttEcIo, c3gCurrentEvDoEcIo and c3gCurrentGsmEcIo. User should not use this object to get the current Ec/Io value as this object is used to indicate the Ec/Io value that triggers c3gEcIoOnsetNotif or c3gEcIoAbateNotif notification.')
c3gModemTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 12), C3gTemperature()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gModemTemperature.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperature.setDescription('The modem temperature.')
c3gRssiOnsetNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 13), C3gRssi().clone(-150)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gRssiOnsetNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: c3gRssiOnsetNotifThreshold.setDescription('The RSSI onset threshold value. If RSSI goes below the threshold and the service bit in c3gRssiOnsetNotifFlag is set, the c3gRssiOnsetNotif notification for that service will be sent. The absolute value of c3gRssiAbateNotifThreshold should be less than or equal to the absolute value of c3gRssiOnsetNotifThreshold (|c3gRssiAbateNotifThreshold| <= |c3gRssiOnsetNotifThreshold|). e.g. setting c3gRssiAbateNotifThreshold to -115 dBm and then setting c3gRssiOnsetNotifThreshold to -110 dBm is not allowed and will be rejected.')
c3gRssiAbateNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 14), C3gRssi()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gRssiAbateNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: c3gRssiAbateNotifThreshold.setDescription('The RSSI abate threshold value. If RSSI goes above the threshold and the service bit in c3gRssiAbateNotifFlag is set, the c3gRssiAbateNotif notification for that service will be sent. The absolute value of c3gRssiAbateNotifThreshold should be less than or equal to the absolute value of c3gRssiOnsetNotifThreshold (|c3gRssiAbateNotifThreshold| <= |c3gRssiOnsetNotifThreshold|). e.g. setting c3gRssiAbateNotifThreshold to -115 dBm and then setting c3gRssiOnsetNotifThreshold to -110 dBm is not allowed and will be rejected.')
c3gEcIoOnsetNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 15), C3gEcIo().clone(-150)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gEcIoOnsetNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: c3gEcIoOnsetNotifThreshold.setDescription('The EcIo onset threshold value. If EcIo goes below the threshold and the service bit in c3gEcIoOnsetNotifFlag is set, the c3gEcIoOnsetNotif notification for that service will be sent. The absolute value of c3gEcIoAbateNotifThreshold should be less than or equal to the absolute value of c3gEcIoOnsetNotifThreshold (|c3gEcIoAbateNotifThreshold| <= |c3gEcIoOnsetNotifThreshold|). e.g. setting c3gEcIoAbateNotifThreshold to -15 dB and then setting c3gEcIoOnsetNotifThreshold to -10 dB is not allowed and will be rejected.')
c3gEcIoAbateNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 16), C3gEcIo()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gEcIoAbateNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: c3gEcIoAbateNotifThreshold.setDescription('The threshold value that if EcIo goes above the threshold and the service bit in c3gEcIoAbateNotifFlag is set, the c3gEcIoAbateNotif notification for that service will be sent. The absolute value of c3gEcIoAbateNotifThreshold should be less than or equal to the absolute value of c3gEcIoOnsetNotifThreshold (|c3gEcIoAbateNotifThreshold| <= |c3gEcIoOnsetNotifThreshold|). e.g. setting c3gEcIoOnsetNotifThreshold to -15 dB and then setting c3gEcIoAbateNotifThreshold to -10 dB is not allowed and will be rejected.')
c3gModemTemperOnsetNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 17), C3gTemperature().clone(100)).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gModemTemperOnsetNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperOnsetNotifThreshold.setDescription("The modem temperature onset threshold value. If modem temperature goes above the threshold and the value of c3gModemTemperOnsetNotifEnabled is 'true', the c3gModemTemperOnsetNotif notification will be sent. The value of c3gModemTemperAbateNotifThreshold should be less than or equal to the value of c3gModemTemperOnsetNotifThreshold. e.g. setting c3gModemTemperAbateNotifThreshold to 50 degree Celsius and then setting c3gModemTemperOnsetNotifThreshold to 40 degree Celsius is not allowed and will be rejected.")
c3gModemTemperAbateNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 18), C3gTemperature().clone(-50)).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gModemTemperAbateNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperAbateNotifThreshold.setDescription("The modem temperature abate threshold value. If modem temperature goes below the threshold and the value of c3gModemTemperAbateNotifEnabled is 'true', the c3gModemTemperAbateNotif notification will be sent. The value of c3gModemTemperAbateNotifThreshold should be less than or equal to the value of c3gModemTemperOnsetNotifThreshold. e.g. setting c3gModemTemperAbateNotifThreshold to 50 degree Celsius and then setting c3gModemTemperOnsetNotifThreshold to 40 degree Celsius is not allowed and will be rejected.")
c3gModemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("powerCycle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gModemReset.setStatus('current')
if mibBuilder.loadTexts: c3gModemReset.setDescription('This object is used to reset or power-cycle the modem.')
c3gModemUpNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gModemUpNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: c3gModemUpNotifEnabled.setDescription('This object is used to enable/disable the generation of modem up notification c3gModemUpNotif.')
c3gModemDownNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gModemDownNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: c3gModemDownNotifEnabled.setDescription('This object is used to enable/disable the generation of modem down notification c3gModemDownNotif.')
c3gServiceChangedNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gServiceChangedNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: c3gServiceChangedNotifEnabled.setDescription('This object is used to enable/disable the generation of service changed notification c3gServiceChangedNotif.')
c3gNetworkChangedNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gNetworkChangedNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: c3gNetworkChangedNotifEnabled.setDescription('This object is used to enable/disable the generation of network changed notification c3gNetworkChangedNotif.')
c3gConnectionStatusChangedNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 24), Bits().clone(namedValues=NamedValues(("unknown", 0), ("error", 1), ("connecting", 2), ("dormant", 3), ("connected", 4), ("disconnected", 5), ("idle", 6), ("active", 7), ("inactive", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gConnectionStatusChangedNotifFlag.setStatus('current')
if mibBuilder.loadTexts: c3gConnectionStatusChangedNotifFlag.setDescription("This object is the flag bitmap to control the generation of notification c3gConnectionStatusChangedNotif. e.g. setting bit 0 (error(0)) to 1 and bit 4 (disconnected(4)) to 1 will cause the notification c3gConnectionStatusChangedNotif to be generated when object c3gConnetionStatus changes the status to error or disconnected. The default value of this object is '00'H.")
c3gRssiOnsetNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 25), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gRssiOnsetNotifFlag.setStatus('current')
if mibBuilder.loadTexts: c3gRssiOnsetNotifFlag.setDescription('This object is the flag bitmap to control the generation of notification c3gRssiOnsetNotif. Each bit represents a service as defined in C3gServiceCapability, set the bit value to 1 to enable (and 0 to disable) the generation of notification c3gRssiOnsetNotif for that service. The default value of this object is all bits are 0.')
c3gRssiAbateNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 26), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gRssiAbateNotifFlag.setStatus('current')
if mibBuilder.loadTexts: c3gRssiAbateNotifFlag.setDescription('This object is the flag bitmap to control the generation of notification c3gRssiAbateNotif. Each bit represents a service as defined in C3gServiceCapability, set the bit value to 1 to enable (and 0 to disable) the generation of notification c3gRssiAbateNotif for that service. The default value of this object is all bits are 0.')
c3gEcIoOnsetNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 27), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gEcIoOnsetNotifFlag.setStatus('current')
if mibBuilder.loadTexts: c3gEcIoOnsetNotifFlag.setDescription('This object is the flag bitmap to control the generation of notification c3gEcIoOnsetNotif. Each bit represents a service as defined in C3gServiceCapability, set the bit value to 1 to enable (and 0 to disable) the generation of notification c3gEcIoOnsetNotif for that service. The default value of this object is all bits are 0.')
c3gEcIoAbateNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 28), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gEcIoAbateNotifFlag.setStatus('current')
if mibBuilder.loadTexts: c3gEcIoAbateNotifFlag.setDescription('This object is the flag bitmap to control the generation of notification c3gEcIoAbateNotif. Each bit represents a service as defined in C3gServiceCapability, set the bit value to 1 to enable (and 0 to disable) the generation of notification c3gEcIoAbateNotif for that service. The default value of this object is all bits are 0.')
c3gModemTemperOnsetNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gModemTemperOnsetNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperOnsetNotifEnabled.setDescription('This object is used to enable/disable the generation of c3gModemTemperOnsetNotif notification.')
c3gModemTemperAbateNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gModemTemperAbateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperAbateNotifEnabled.setDescription('This object is used to enable/disable the generation of c3gModemTemperAbateNotif notification.')
c3gGpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 1, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gGpsState.setStatus('current')
if mibBuilder.loadTexts: c3gGpsState.setDescription('This object is used to determine or enable/disable the GPS state.')
c3gWanCdma = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2))
c3gWanGsm = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3))
c3gWanLbs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4))
c3gWanSmsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5))
c3gCdmaSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 1), )
if mibBuilder.loadTexts: c3gCdmaSessionTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaSessionTable.setDescription('This table describes wireless session (link) created when a modem connects to a particular cellular network. One or more logical calls can be placed over wireless session(link). These logical calls are represented in the c3gCdmaConnectionTable.')
c3gCdmaSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gCdmaSessionEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaSessionEntry.setDescription('An entry (conceptual row) in the c3gCdmaSessionTable.')
c3gCdmaTotalCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 1, 1, 1), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaTotalCallDuration.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaTotalCallDuration.setDescription('Total duration of all calls.')
c3gCdmaTotalTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 1, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaTotalTransmitted.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaTotalTransmitted.setDescription('Total data transmitted for all calls. It is the total amount of data transmitted by modem, not to be confused with the number of bytes transmitted through the interface.')
c3gCdmaTotalReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 1, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaTotalReceived.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaTotalReceived.setDescription('Total data received for all calls. It is the total amount of data received by modem, not to be confused with the number of bytes received from the interface.')
c3gHdrDdtmPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("on", 3), ("noChange", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gHdrDdtmPreference.setStatus('current')
if mibBuilder.loadTexts: c3gHdrDdtmPreference.setDescription('HDR Data Dedicated Transmission Mode (DDTM) preference: unknown(1) - DDTM preference is unknown off(2) - DDTM preference set to OFF on(3) - DDTM preference set to ON noChange(4) - DDTM preference is no change')
c3gCdmaConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2), )
if mibBuilder.loadTexts: c3gCdmaConnectionTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaConnectionTable.setDescription('Cellular 3G CDMA connection table. This table describes logical connections/calls over wireless link, the wireless link is described in c3gCdmaSessionTable.')
c3gCdmaConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: c3gCdmaConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaConnectionEntry.setDescription('An entry (conceptual row) in the c3gCdmaConnectionTable.')
c3gOutgoingCallNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gOutgoingCallNumber.setStatus('current')
if mibBuilder.loadTexts: c3gOutgoingCallNumber.setDescription('Phone number of outgoing call.')
c3gHdrAtState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("acquisition", 3), ("sync", 4), ("idle", 5), ("access", 6), ("connected", 7))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrAtState.setStatus('current')
if mibBuilder.loadTexts: c3gHdrAtState.setDescription('High Data Rate (HDR) Access Terminal (AT) state.')
c3gHdrSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("close", 3), ("addressManagementProtocolSetup", 4), ("atInitiated", 5), ("anInitiated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrSessionState.setStatus('current')
if mibBuilder.loadTexts: c3gHdrSessionState.setDescription('High Data Rate (HDR) session state.')
c3gUati = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gUati.setStatus('current')
if mibBuilder.loadTexts: c3gUati.setDescription('Unicast Access Terminal Identifier (UATI), AT seeking access to the 1 times EV-DO system receives a UATI allocated from the system after setting up a radio traffic channel with a base station.')
c3gColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gColorCode.setStatus('current')
if mibBuilder.loadTexts: c3gColorCode.setDescription('Color code. A sync channel may be used by the base station to communicate administrative information to a mobile station. For example, a base station may transmit a base station ID to a user, a color code and administrative information identifying system status.')
c3gRati = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gRati.setStatus('current')
if mibBuilder.loadTexts: c3gRati.setDescription('Random Access Terminal Identifier (RATI). AT transmits a UATI request message to the ANC using the RATI to make a UATI allocation request.')
c3gHdrSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrSessionDuration.setStatus('current')
if mibBuilder.loadTexts: c3gHdrSessionDuration.setDescription('HDR connection session duration. It is the duration between c3gHdrSessionStart and c3gHdrSessionEnd.')
c3gHdrSessionStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrSessionStart.setStatus('current')
if mibBuilder.loadTexts: c3gHdrSessionStart.setDescription('HDR connection session starting time.')
c3gHdrSessionEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrSessionEnd.setStatus('current')
if mibBuilder.loadTexts: c3gHdrSessionEnd.setDescription('HDR connection session ending time.')
c3gAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("notAuthenticated", 2), ("authenticated", 3), ("failed", 4), ("authenticationDisabled", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gAuthStatus.setStatus('current')
if mibBuilder.loadTexts: c3gAuthStatus.setDescription('Connection authentication status: unknown(1) - authentication status is unknown notAuthenticated(2) - not yet authenticated. authenticated(3) - authenticated. failed(4) - authentication failed. authenticationDisabled(5) - authentication disabled')
c3gHdrDrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrDrc.setStatus('current')
if mibBuilder.loadTexts: c3gHdrDrc.setDescription('High Data Rate (HDR) Data Rate Control (DRC). AT provides requests for data transmissions by sending a Data Rate Control, DRC, message via a specific channel referred to as the DRC channel.')
c3gHdrDrcCover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrDrcCover.setStatus('current')
if mibBuilder.loadTexts: c3gHdrDrcCover.setDescription('HDR DRC cover. The DRC cover is a coding applied to identify the sector from which the data is to be transmitted. In one embodiment, the DRC cover is a Walsh code applied to the DRC value, wherein a unique code corresponds to each sector in the Active Set of the AT.')
c3gHdrRri = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("pilotOnly", 2), ("rri9dot6kbps", 3), ("rri19dot2kbps", 4), ("rri38dot4kbps", 5), ("rri76dot8kbps", 6), ("rri153dot6kbps", 7))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrRri.setStatus('current')
if mibBuilder.loadTexts: c3gHdrRri.setDescription('HDR Rate Request Indicator (RRI). RRI provides the structure of a frame currently being transmitted when frames are transmitted at different rates. Services at different rates are reliably provided by the RRI: unknown(1) - RRI unknown pilotOnly(2) - pilot channel only rri9dot6kbps(3) - RRI is 9.6 Kbit/s rri19dot2kbps(4) - RRI is 19.2 Kbit/s rri38dot4kbps(5) - RRI is 38.4 Kbit/s rri76dot8kbps(6) - RRI is 76.8 Kbit/s rri153dot6kbps(7) - RRI is 153.6 Kbit/s')
c3gMobileIpErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gMobileIpErrorCode.setStatus('current')
if mibBuilder.loadTexts: c3gMobileIpErrorCode.setDescription('Mobile IP error code (please refer to RFC 2002).')
c3gCdmaCurrentTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 15), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaCurrentTransmitted.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaCurrentTransmitted.setDescription('Current number of bytes transmitted by modem for current connection.')
c3gCdmaCurrentReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 16), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaCurrentReceived.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaCurrentReceived.setDescription('Current number of bytes received by modem for current connection.')
c3gCdmaCurrentCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("error", 2), ("connecting", 3), ("dormant", 4), ("connected", 5), ("disconnected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaCurrentCallStatus.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaCurrentCallStatus.setDescription('Current call status.')
c3gCdmaCurrentCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 18), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaCurrentCallDuration.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaCurrentCallDuration.setDescription('Current call duration.')
c3gCdmaCurrentCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("asyncData", 2), ("voiceCall", 3), ("packet1xRttCall", 4), ("atAsyncDataCall", 5), ("atVoiceCall", 6), ("atPacketCall", 7), ("faxCall", 8), ("smsCall", 9), ("otaCall", 10), ("testCall", 11), ("callWaiting", 12), ("positionDetermination", 13), ("dormant", 14), ("e911Call", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaCurrentCallType.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaCurrentCallType.setDescription('Current call type.')
c3gCdmaLastCallDisconnReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("unknown", 1), ("modemOffline", 2), ("modemCdmaLocTilPowCyc", 3), ("noService", 4), ("abnormalCallEnd", 5), ("baseStatIntercept", 6), ("baseStatRelease", 7), ("baseStatReleaseNoReas", 8), ("baseStatReleaseSoRej", 9), ("incomingCall", 10), ("baseStatAlertStop", 11), ("clientEndedCall", 12), ("activationEndedOtasp", 13), ("ndssFailure", 14), ("maxAccesProbTransmit", 15), ("persistTestFailure", 16), ("ruimNotPresent", 17), ("accessAttemptInProg", 18), ("reasonUnspecified", 19), ("recdRetryOrder", 20), ("modemLocked", 21), ("gpsCallEnded", 22), ("smsCallEnded", 23), ("noConcurrentService", 24), ("noResponseFromBs", 25), ("rejectedByBs", 26), ("notCompatConcurServ", 27), ("accessBlockedByBs", 28), ("alreadyOnTraffChann", 29), ("emergencyCall", 30), ("dataCallEnded", 31), ("busyHdr", 32), ("billingOrAuthErrHdr", 33), ("sysChangeDueToPrlHdr", 34), ("hdrExitDueToPrl", 35), ("noSessionHdr", 36), ("callEndedHdr", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaLastCallDisconnReason.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaLastCallDisconnReason.setDescription('Last call disconnect reason: unknown(1) - Unknown modemOffline(2) - Modem offline modemCdmaLocTilPowCyc(3) - Modem CDMA locked till power cycle noService(4) - No service abnormalCallEnd(5) - Abnormal call end baseStatIntercept(6) - Base station intercept baseStatRelease(7) - Base station release baseStatReleaseNoReas(8) - Base station release (No reason) baseStatReleaseSoRej(9) - Base station release (SO reject) incomingCall(10) - Incoming call baseStatAlertStop(11) - Base station alert stop clientEndedCall(12) - Client ended call activationEndedOtasp(13) - Activation ended OTASP (Over- The-Air Service Provisioning) ndssFailure(14) - NDSS (Network and Distributed System Security) failure maxAccesProbTransmit(15) - Max access probes transmitted persistTestFailure(16) - Persistence test failure ruimNotPresent(17) - RUIM (Removable User Identity Module) not present accessAttemptInProg(18) - Access attempt in progress reasonUnspecified(19) - Reason unspecified recdRetryOrder(20) - Recd retry order modemLocked(21) - Modem Locked gpsCallEnded(22) - GPS call ended smsCallEnded(23) - SMS (Short Message Service) call ended noConcurrentService(24) - No concurrent service noResponseFromBs(25) - No response from BS (Base station) rejectedByBs(26) - Rejected by BS notCompatConcurServ(27) - Not compatible concurrent service accessBlockedByBs(28) - Access blocked by BS alreadyOnTraffChann(29) - Already on Traffic channel emergencyCall(30) - Emergency call dataCallEnded(31) - Data call ended busyHdr(32) - Busy (HDR) billingOrAuthErrHdr(33) - Billing or Auth error (HDR) sysChangeDueToPrlHdr(34) - System change due to PRL (HDR) hdrExitDueToPrl(35) - HDR exit due to PRL (HDR) noSessionHdr(36) - No Session (HDR) callEndedHdr(37) - Call ended (HDR)')
c3gCdmaLastConnError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("none", 1), ("invalidClientId", 2), ("badCallType", 3), ("badServiceType", 4), ("expectingNumber", 5), ("nullNumberBuffer", 6), ("invalidDigits", 7), ("outOfRangeNumber", 8), ("nullAalphaBuffer", 9), ("outOfRangeAlphaNumber", 10), ("invalidOtaspActivatCode", 11), ("modemOffline", 12), ("modemLocked", 13), ("unsupportedFlash", 14), ("dialedNumberProhibited", 15), ("onlyE911Calls", 16), ("modemInUse", 17), ("unsupportedServiceType", 18), ("wrongCallType", 19), ("invalidCommandCallState", 20), ("invalidCommandModemState", 21), ("noValidService", 22), ("cannotAnswerIncomingCall", 23), ("badPrivacySetting", 24), ("noCommandBuffers", 25), ("communicationProblem", 26), ("unspecifiedError", 27), ("invalidLastActiveNetwork", 28), ("noCollocatedHdr", 29), ("uimNotPresent", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaLastConnError.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaLastConnError.setDescription('Last connect error: none(1) - None invalidClientId(2) - Invalid client ID badCallType(3) - Bad call type badServiceType(4) - Bad service type expectingNumber(5) - Expecting number nullNumberBuffer(6) - Null number buffer invalidDigits(7) - Invalid digits outOfRangeNumber(8) - Out of range number nullAalphaBuffer(9) - Null alpha buffer outOfRangeAlphaNumber(10) - Out of range alpha number invalidOtaspActivatCode(11) - Invalid OTASP activation code modemOffline(12) - Modem offline modemLocked(13) - Modem locked unsupportedFlash(14) - Unsupported flash dialedNumberProhibited(15) - Dialed number prohibited onlyE911Calls(16) - Only E911 calls modemInUse(17) - Modem in use unsupportedServiceType(18) - Unsupported service type wrongCallType(19) - Wrong call type invalidCommandCallState(20) - Invalid command (call state) invalidCommandModemState(21) - Invalid command (modem state) noValidService(22) - No valid service cannotAnswerIncomingCall(23) - Cannot answer incoming call badPrivacySetting(24) - Bad privacy setting noCommandBuffers(25) - No command buffers communicationProblem(26) - Communication problem unspecifiedError(27) - Unspecified error invalidLastActiveNetwork(28) - Invalid last active network noCollocatedHdr(29) - No collocated HDR uimNotPresent(30) - UIM (User Identity Module) not present')
c3gCdmaIdentityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3), )
if mibBuilder.loadTexts: c3gCdmaIdentityTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaIdentityTable.setDescription('Cellular 3G CDMA identity table.')
c3gCdmaIdentityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gCdmaIdentityEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaIdentityEntry.setDescription('An entry (conceptual row) in the c3gCdmaIdentityTable.')
c3gEsn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gEsn.setStatus('current')
if mibBuilder.loadTexts: c3gEsn.setDescription('This object indicates Electronic Serial Number (ESN).')
c3gModemActivationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("activated", 2), ("notActivated", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gModemActivationStatus.setStatus('current')
if mibBuilder.loadTexts: c3gModemActivationStatus.setDescription('Modem activation status.')
c3gAccountActivationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gAccountActivationDate.setStatus('current')
if mibBuilder.loadTexts: c3gAccountActivationDate.setDescription('Modem account activation date.')
c3gCdmaRoamingPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("home", 2), ("affiliated", 3), ("any", 4))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gCdmaRoamingPreference.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaRoamingPreference.setDescription('This object indicates the roaming preference: unknown(1) - preference unknown home(2) - home networks only affiliated(3) - roaming on affiliated networks any(4) - roaming on any network')
c3gPrlVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gPrlVersion.setStatus('current')
if mibBuilder.loadTexts: c3gPrlVersion.setDescription('Preferred Roaming List (PRL) version.')
c3gMdn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gMdn.setStatus('current')
if mibBuilder.loadTexts: c3gMdn.setDescription('Mobile Directory Number (MDN), a dialable number assigned to a wireless phone.')
c3gMsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gMsid.setStatus('current')
if mibBuilder.loadTexts: c3gMsid.setDescription('Mobile Station Identifier (MSID), MSID is utilized to distinguish the mobile station being programmed from other mobile stations during messaging and paging processes, including the downloading of programming information to the mobile station.')
c3gMsl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gMsl.setStatus('current')
if mibBuilder.loadTexts: c3gMsl.setDescription('Mobile Subscriber Lock (MSL).')
c3gCdmaNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4), )
if mibBuilder.loadTexts: c3gCdmaNetworkTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaNetworkTable.setDescription('Cellular 3G CDMA network table.')
c3gCdmaNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gCdmaNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaNetworkEntry.setDescription('An entry (conceptual row) in the c3gCdmaNetworkTable.')
c3gCdmaCurrentServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaCurrentServiceStatus.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaCurrentServiceStatus.setDescription('Current service status.')
c3gCdmaHybridModePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("hybrid", 2), ("evDoOnly", 3), ("oneXRttOnly", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gCdmaHybridModePreference.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHybridModePreference.setDescription('This object indicates the hybrid mode preference: unknown(1) - preference unknown hybrid(2) - connect to EV-DO/1xRTT services evDoOnly(3) - connect to only EV-DO service oneXRttOnly(4) - connect to only 1xRTT service')
c3gCdmaCurrentRoamingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("home", 2), ("roamingWithSid", 3), ("roamingWithoutSid", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaCurrentRoamingStatus.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaCurrentRoamingStatus.setDescription('Current 1xRTT roaming status, roaming is a general term in wireless telecommunications that refers to the extending of connectivity service in a location that is different from the home location where the service was registered: unknown(1) - roaming status is unknown. home(2) - connectivity service in home location. roamingWithSid(3) - roaming with SID. roamingWithoutSid(4) - roaming without SID')
c3gCurrentIdleDigitalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("noService", 2), ("amps", 3), ("cdma", 4), ("gsm", 5), ("hdr", 6), ("wcdma", 7), ("gps", 8), ("lte", 9))).clone('noService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrentIdleDigitalMode.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentIdleDigitalMode.setDescription('Current idle digital mode: unknown(1) - service is unknown noService(2) - no service amps(3) - Advanced Mobile Phone Service (AMPS) cdma(4) - Code Division Multiple Access (CDMA) gsm(5) - Global System for Mobile communications (GSM) hdr(6) - High Data Rate (HDR) wcdma(7) - Wideband Code-Division Multiple-Access (WCDMA) gps(8) - Global Positioning System (GPS) lte(9) - Long Term Evolution (LTE)')
c3gCurrentSid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gCurrentSid.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentSid.setDescription("Current System Identifier (SID), SID is a 15-bit numeric identifiers used by cellular systems to identify the home system of a cellular telephone and by the cellular telephone to determine its roaming status. Value of '-1' indicates SID is 'Not Applicable'.")
c3gCurrentNid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gCurrentNid.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentNid.setDescription("Current Network Identification (NID), NID is a 16-bit numeric identifiers used by cellular systems. Value of '-1' indicates NID is 'Not Applicable'.")
c3gCurrentCallSetupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("simpleIpOnly", 2), ("mobileIpPreferWithSipFallback", 3), ("mobileIpOnly", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gCurrentCallSetupMode.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentCallSetupMode.setDescription('Current call setup mode. The 1xEV-DO system supports packet data connections to a public or private data network using either mobile IP or simple IP protocol. For simple IP protocol, moving from the coverage area of one PDSN to another PDSN constitutes a change in packet data session. For mobile IP protocol, a packet data session can span several PDSNs as long as the user continuously maintains mobility bindings at the Home Agent (the IP address is persistent). The modes are: unknown(1) - mode is unknown simpleIpOnly(2) - simple IP only mobileIpPreferWithSipFallback(3) - prefer mobile IP with simple IP as fallback mode mobileIpOnly(4) - mobile IP only')
c3gSipUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gSipUsername.setStatus('current')
if mibBuilder.loadTexts: c3gSipUsername.setDescription('Simple IP (SIP) user name.')
c3gSipPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gSipPassword.setStatus('current')
if mibBuilder.loadTexts: c3gSipPassword.setDescription('Simple IP (SIP) password.')
c3gServingBaseStationLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gServingBaseStationLongitude.setStatus('current')
if mibBuilder.loadTexts: c3gServingBaseStationLongitude.setDescription('Longitude of the serving base station.')
c3gServingBaseStationLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gServingBaseStationLatitude.setStatus('current')
if mibBuilder.loadTexts: c3gServingBaseStationLatitude.setDescription('Latitude of the serving base station.')
c3gCdmaProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5))
c3gCdmaProfileCommonTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 1), )
if mibBuilder.loadTexts: c3gCdmaProfileCommonTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaProfileCommonTable.setDescription('Cellular 3G CDMA profile common table.')
c3gCdmaProfileCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gCdmaProfileCommonEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaProfileCommonEntry.setDescription('An entry (conceptual row) in the c3gCdmaProfileCommonTable.')
c3gNumberOfDataProfileConfigurable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gNumberOfDataProfileConfigurable.setStatus('current')
if mibBuilder.loadTexts: c3gNumberOfDataProfileConfigurable.setDescription('The number of data profiles configurable.')
c3gCurrentActiveDataProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gCurrentActiveDataProfile.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentActiveDataProfile.setDescription('The current active data profile.')
c3gCdmaProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2), )
if mibBuilder.loadTexts: c3gCdmaProfileTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaProfileTable.setDescription('Cellular 3G CDMA profile table.')
c3gCdmaProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gCdmaProfileIndex"))
if mibBuilder.loadTexts: c3gCdmaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaProfileEntry.setDescription('An entry (conceptual row) in the c3gCdmaProfileTable.')
c3gCdmaProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: c3gCdmaProfileIndex.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaProfileIndex.setDescription('Profile index, combined with entPhysicalIndex to access the profile table c3gCdmaProfileTable.')
c3gNai = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gNai.setStatus('current')
if mibBuilder.loadTexts: c3gNai.setDescription('Network Access Identifier (NAI). NAI is required to identify the mobile user and the network the mobile user intended to access. The NAI is provided by the mobile node to the dialed ISP during PPP authentication.')
c3gAaaPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gAaaPassword.setStatus('current')
if mibBuilder.loadTexts: c3gAaaPassword.setDescription('This object indicates the password for AAA.')
c3gMnHaSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2))).clone('notSet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gMnHaSs.setStatus('current')
if mibBuilder.loadTexts: c3gMnHaSs.setDescription('Mobile Node (MN) Home Agent (HA) Shared Secret (SS) setting: set(1) - shared secret is set notSet(2) - shared secret is not set')
c3gMnHaSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gMnHaSpi.setStatus('current')
if mibBuilder.loadTexts: c3gMnHaSpi.setDescription('Mobile Node (MN) Home Agent (HA) Security Parameter Index (SPI).')
c3gMnAaaSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2))).clone('notSet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gMnAaaSs.setStatus('current')
if mibBuilder.loadTexts: c3gMnAaaSs.setDescription('Mobile Node (MN) Authentication Authorization Accounting (AAA) Shared Secret (SS) setting: set(1) - shared secret is set notSet(2) - shared secret is not set')
c3gMnAaaSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gMnAaaSpi.setStatus('current')
if mibBuilder.loadTexts: c3gMnAaaSpi.setDescription('Mobile Node (MN) Authentication Authorization Accounting (AAA) Security Parameter Index (SPI).')
c3gReverseTunnelPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("notSet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gReverseTunnelPreference.setStatus('current')
if mibBuilder.loadTexts: c3gReverseTunnelPreference.setDescription('Reverse tunnel preference.')
c3gHomeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 9), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gHomeAddrType.setStatus('current')
if mibBuilder.loadTexts: c3gHomeAddrType.setDescription('A value that represents the type of the IP Address stored in the object c3gHomeAddr.')
c3gHomeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gHomeAddr.setStatus('current')
if mibBuilder.loadTexts: c3gHomeAddr.setDescription('A unicast routable address assigned to a Mobile Node, used as the permanent address of the Mobile Node.')
c3gPriHaAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 11), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gPriHaAddrType.setStatus('current')
if mibBuilder.loadTexts: c3gPriHaAddrType.setDescription('A value that represents the type of the IP Address stored in the object c3gPriHaAddr.')
c3gPriHaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 12), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gPriHaAddr.setStatus('current')
if mibBuilder.loadTexts: c3gPriHaAddr.setDescription('The primary home agent address.')
c3gSecHaAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 13), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gSecHaAddrType.setStatus('current')
if mibBuilder.loadTexts: c3gSecHaAddrType.setDescription('A value that represents the type of the IP Address stored in the object c3gSecHaAddr.')
c3gSecHaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 5, 2, 1, 14), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gSecHaAddr.setStatus('current')
if mibBuilder.loadTexts: c3gSecHaAddr.setDescription('The secondary home agent address.')
c3gCdmaRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6))
c3gCdma1xRttRadioTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 1), )
if mibBuilder.loadTexts: c3gCdma1xRttRadioTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdma1xRttRadioTable.setDescription('Cellular 3G CDMA 1xRTT radio table.')
c3gCdma1xRttRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gCdma1xRttRadioEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdma1xRttRadioEntry.setDescription('An entry (conceptual row) in the c3gCdma1xRttRadioTable.')
c3gCurrent1xRttRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 1, 1, 1), C3gRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrent1xRttRssi.setStatus('current')
if mibBuilder.loadTexts: c3gCurrent1xRttRssi.setDescription('Current 1xRTT RSSI value.')
c3gCurrent1xRttEcIo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 1, 1, 2), C3gEcIo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrent1xRttEcIo.setStatus('current')
if mibBuilder.loadTexts: c3gCurrent1xRttEcIo.setDescription('Current 1xRTT Ec/Io value.')
c3gCurrent1xRttChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrent1xRttChannelNumber.setStatus('current')
if mibBuilder.loadTexts: c3gCurrent1xRttChannelNumber.setDescription("Current 1xRTT channel number. Current channel number to which the modem is attached to the base station. Value of '-1' indicates 'No Service'.")
c3gCurrent1xRttChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notAcquired", 2), ("acquired", 3), ("scanning", 4))).clone('notAcquired')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrent1xRttChannelState.setStatus('current')
if mibBuilder.loadTexts: c3gCurrent1xRttChannelState.setDescription('Current 1xRTT channel state. Indicates whether the modem is scanning or has acquired the channel.')
c3gCdma1xRttBandClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 2), )
if mibBuilder.loadTexts: c3gCdma1xRttBandClassTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdma1xRttBandClassTable.setDescription('Cellular 3G CDMA 1xRTT band class table. This table contains band class information for each available band.')
c3gCdma1xRttBandClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gBandClassIndex"))
if mibBuilder.loadTexts: c3gCdma1xRttBandClassEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdma1xRttBandClassEntry.setDescription('An entry (conceptual row) in the c3gCdma1xRttBandClassTable.')
c3gBandClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: c3gBandClassIndex.setStatus('current')
if mibBuilder.loadTexts: c3gBandClassIndex.setDescription('Band class index, combined with entPhysicalIndex to access the band class table.')
c3g1xRttBandClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3g1xRttBandClass.setStatus('current')
if mibBuilder.loadTexts: c3g1xRttBandClass.setDescription('This object contains 1xRTT band class.')
c3gCdmaEvDoRadioTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3), )
if mibBuilder.loadTexts: c3gCdmaEvDoRadioTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaEvDoRadioTable.setDescription('Cellular 3G CDMA EV-DO radio table.')
c3gCdmaEvDoRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gCdmaEvDoRadioEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaEvDoRadioEntry.setDescription('An entry (conceptual row) in the c3gCdmaEvDoRadioTable.')
c3gCurrentEvDoRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 1), C3gRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrentEvDoRssi.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentEvDoRssi.setDescription('Current EV-DO RSSI value.')
c3gCurrentEvDoEcIo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 2), C3gEcIo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrentEvDoEcIo.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentEvDoEcIo.setDescription('Current EV-DO Ec/Io value.')
c3gCurrentEvDoChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrentEvDoChannelNumber.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentEvDoChannelNumber.setDescription("Current EV-DO channel number. Current channel number to which the modem is attached to the base station. Value of '-1' indicates 'No Service'.")
c3gSectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSectorId.setStatus('current')
if mibBuilder.loadTexts: c3gSectorId.setDescription('Sector ID of the base station to which the modem is attached.')
c3gSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSubnetMask.setReference('3GPP2 C.S0024-B v1.0')
if mibBuilder.loadTexts: c3gSubnetMask.setStatus('current')
if mibBuilder.loadTexts: c3gSubnetMask.setDescription('Subnet mask of the sector, not to be confused with the IP subnet mask.')
c3gHdrColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gHdrColorCode.setReference('3GPP2 C.S0024-B v1.0')
if mibBuilder.loadTexts: c3gHdrColorCode.setStatus('current')
if mibBuilder.loadTexts: c3gHdrColorCode.setDescription('Color code of the sector.')
c3gPnOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gPnOffset.setReference('3GPP2 C.S0024-B v1.0')
if mibBuilder.loadTexts: c3gPnOffset.setStatus('current')
if mibBuilder.loadTexts: c3gPnOffset.setDescription('PN offset. PN offset is a time offset from the beginning of the well-known pseudo-random noise sequence that is used to spread the signal from the base station.')
c3gRxMainGainControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 8), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gRxMainGainControl.setStatus('current')
if mibBuilder.loadTexts: c3gRxMainGainControl.setDescription("Received main gain control for the modem. value of '-1' indicates the received main gain control is unavailable.")
c3gRxDiversityGainControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gRxDiversityGainControl.setStatus('current')
if mibBuilder.loadTexts: c3gRxDiversityGainControl.setDescription("Received diversity for the modem. value of '-1' indicates the received diversity is unavailable.")
c3gTxTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gTxTotalPower.setStatus('current')
if mibBuilder.loadTexts: c3gTxTotalPower.setDescription('Transmit total power.')
c3gTxGainAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gTxGainAdjust.setStatus('current')
if mibBuilder.loadTexts: c3gTxGainAdjust.setDescription('Transmit gain adjust.')
c3gCarrierToInterferenceRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCarrierToInterferenceRatio.setStatus('current')
if mibBuilder.loadTexts: c3gCarrierToInterferenceRatio.setDescription('Carrier to interference ratio. Carrier-to-Interference ratio (C/I) is the ratio of power in an RF carrier to the interference power in the channel.')
c3gCdmaEvDoBandClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 4), )
if mibBuilder.loadTexts: c3gCdmaEvDoBandClassTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaEvDoBandClassTable.setDescription('Cellular 3G CDMA EV-DO band class table. This table contains band class information for each available band.')
c3gCdmaEvDoBandClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gBandClassIndex"))
if mibBuilder.loadTexts: c3gCdmaEvDoBandClassEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaEvDoBandClassEntry.setDescription('An entry (conceptual row) in the c3gCdmaEvDoBandClassTable.')
c3gEvDoBandClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gEvDoBandClass.setStatus('current')
if mibBuilder.loadTexts: c3gEvDoBandClass.setDescription('This object contains EV-DO band class.')
c3gCdmaHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 5), )
if mibBuilder.loadTexts: c3gCdmaHistoryTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHistoryTable.setDescription('Cellular 3G CDMA history table. The history of RSSI are carried in an octet of string. Each octet in the octet string has a value from 0 to 150 and the 255 value is reserved to indicate an uninitialized (Invalid) value. The format of the octet string with n octets is as following: [ octet 0 is latest, octet 1 is latest-1, . . octet n-2 is oldest-1, octet n-1 is oldest ] To convert the provided value into dBm the following formula should be used: dBm = (-1)*value;')
c3gCdmaHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gCdmaHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHistoryEntry.setDescription('An entry (conceptual row) in the c3gCdmaHistoryTable.')
c3gCdmaHistory1xRttRssiPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaHistory1xRttRssiPerSecond.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHistory1xRttRssiPerSecond.setDescription('Per-second 1xRTT RSSI history. This object contains a per-second history of 1xRTT RSSI values for the last 60 seconds.')
c3gCdmaHistory1xRttRssiPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaHistory1xRttRssiPerMinute.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHistory1xRttRssiPerMinute.setDescription('Per-minute 1xRTT weakest RSSI value history. This object contains a per-minute history of 1xRTT weakest RSSI values for the last 60 minutes. The octet in the string is the weakest RSSI value measured in a minute interval.')
c3gCdmaHistory1xRttRssiPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(72, 72)).setFixedLength(72)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaHistory1xRttRssiPerHour.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHistory1xRttRssiPerHour.setDescription('Per-hour 1xRTT weakest RSSI value history. This object contains a per-hour history of 1xRTT weakest RSSI values for the last 72 hours. The octet in the string is the weakest RSSI value measured in an hour interval.')
c3gCdmaHistoryEvDoRssiPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaHistoryEvDoRssiPerSecond.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHistoryEvDoRssiPerSecond.setDescription('Per-second EV-DO RSSI history. This object contains a per-second history of EV-DO RSSI values for the last 60 seconds.')
c3gCdmaHistoryEvDoRssiPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaHistoryEvDoRssiPerMinute.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHistoryEvDoRssiPerMinute.setDescription('Per-minute EV-DO weakest RSSI value history. This object contains a per-minute history of EV-DO weakest RSSI values for the last 60 minutes. The octet in the string is the weakest RSSI value measured in a minute interval.')
c3gCdmaHistoryEvDoRssiPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 6, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(72, 72)).setFixedLength(72)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCdmaHistoryEvDoRssiPerHour.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaHistoryEvDoRssiPerHour.setDescription('Per-hour EV-DO weakest RSSI value history. This object contains a per-hour history of EV-DO weakest RSSI values for the last 72 hours. The octet in the string is the weakest RSSI value measured in an hour interval.')
c3gCdmaSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 7))
c3gCdmaSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 7, 1), )
if mibBuilder.loadTexts: c3gCdmaSecurityTable.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaSecurityTable.setDescription('Cellular 3G CDMA security table.')
c3gCdmaSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 7, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gCdmaSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaSecurityEntry.setDescription('An entry (conceptual row) in the c3gCdmaSecurityTable.')
c3gCdmaPinSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("locked", 2), ("unlocked", 3))).clone('unlocked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gCdmaPinSecurityStatus.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaPinSecurityStatus.setDescription('CDMA Personal Identification Number (PIN) security: unknown(1) - PIN security unknown locked(2) - PIN security is locked unlocked(3) - PIN security is unlocked')
c3gCdmaPowerUpLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gCdmaPowerUpLockStatus.setStatus('current')
if mibBuilder.loadTexts: c3gCdmaPowerUpLockStatus.setDescription('CDMA power up lock: unknown(1) - power up lock unknown enabled(2) - power up lock enabled disabled(3) - power up lock disabled')
c3gGsmIdentityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1), )
if mibBuilder.loadTexts: c3gGsmIdentityTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmIdentityTable.setDescription('.')
c3gGsmIdentityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gGsmIdentityEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmIdentityEntry.setDescription('An entry (conceptual row) in the c3gGsmIdentityTable.')
c3gImsi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gImsi.setStatus('current')
if mibBuilder.loadTexts: c3gImsi.setDescription('International Mobile Subscriber Identifier (IMSI), a unique 15-digit code used to identify an individual user on a GSM/LTE network.')
c3gImei = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gImei.setStatus('current')
if mibBuilder.loadTexts: c3gImei.setDescription('International Mobile Equipment Identifier (IMEI), a unique 15 or 17 digit code used to identify an individual mobile station to a GSM, UMTS or LTE network.')
c3gIccId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gIccId.setStatus('current')
if mibBuilder.loadTexts: c3gIccId.setDescription('This object indicates the Integrated Circuit Card ID (ICCID). The ICCID is defined by the ITU-T recommendation E.118. ICCIDs are stored in the SIM cards and are also engraved or printed on the SIM card body during a process called personalization.')
c3gMsisdn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gMsisdn.setStatus('current')
if mibBuilder.loadTexts: c3gMsisdn.setDescription('This object indicates the Mobile Subscriber Integrated Services Digital Network Number (MSISDN). It is a number uniquely identifying a subscription in a GSM, UMTS or LTE mobile network. It represents the telephone number to the SIM card in a mobile/cellular phone.')
c3gFsn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gFsn.setStatus('current')
if mibBuilder.loadTexts: c3gFsn.setDescription('Forward Sequence Number (FSN), a message acknowledgement method using sequence number in the forward direction.')
c3gModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("offLine", 2), ("onLine", 3), ("lowPowerMode", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gModemStatus.setStatus('current')
if mibBuilder.loadTexts: c3gModemStatus.setDescription('Modem status: unknown(1) - modem status is unknown offLine(2) - modem is off line onLine(3) - modem is on line lowPowerMode(4) - modem is in the low power mode')
c3gGsmRoamingPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("home", 2), ("roaming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gGsmRoamingPreference.setStatus('current')
if mibBuilder.loadTexts: c3gGsmRoamingPreference.setDescription('This object indicates the roaming preference.')
c3gGsmNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2), )
if mibBuilder.loadTexts: c3gGsmNetworkTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNetworkTable.setDescription('Cellular GSM Network table. This table is applicable in both 3G and 4G-LTE technology mode')
c3gGsmNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gGsmNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNetworkEntry.setDescription('An entry (conceptual row) in the c3gGsmNetworkTable.')
c3gGsmLac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmLac.setStatus('current')
if mibBuilder.loadTexts: c3gGsmLac.setDescription('Location Area Code (LAC), also called as Tracking Area Code (TAC) in LTE standard. LAC/TAC is given by the base station.')
c3gGsmCurrentServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("noService", 2), ("normal", 3), ("emergencyOnly", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmCurrentServiceStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmCurrentServiceStatus.setDescription('Current Service Status: unknown(1) - current service status is unknown noService(2) - no service normal(3) - service status is normal emergencyOnly(4) - emergency service only')
c3gGsmCurrentServiceError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("imsiUnknownInHlr", 3), ("illegalMs", 4), ("imsiUnknownInVlr", 5), ("imeiNotAccepted", 6), ("illegalMe", 7), ("gprsServNotAllowed", 8), ("gprsNonGprsServNotAllow", 9), ("msIdentUnknown", 10), ("implicitlyDetached", 11), ("plmnNotAllowed", 12), ("lacNotAllowed", 13), ("roamingNotAllowed", 14), ("gprsServNotAllowInPlmn", 15), ("noSuitableCellInLa", 16), ("mscTempNotReachable", 17), ("networkFailure", 18), ("macFailure", 19), ("synchFailure", 20), ("congestion", 21), ("gsmAuthenNotAccept", 22), ("servOptionNotSupport", 23), ("reqServOptionNotSub", 24), ("servOptionOutOfOrder", 25), ("callCannotIdentified", 26), ("noPdpContextActivated", 27), ("invalidMandatInfo", 28), ("unpsecProtErr", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmCurrentServiceError.setStatus('current')
if mibBuilder.loadTexts: c3gGsmCurrentServiceError.setDescription('Current service error: unknown(1) - Unknown none(2) - None imsiUnknownInHlr(3) - IMSI unknown in HLR (Home Location Register) illegalMs(4) - Illegal MS (Mobile Station) imsiUnknownInVlr(5) - IMSI unknown in VLR (Visitor Location Register) imeiNotAccepted(6) - IMEI not accepted illegalMe(7) - Illegal ME (Mobile Entity) gprsServNotAllowed(8) - GPRS services not allowed gprsNonGprsServNotAllow(9) - GPRS and non-GPRS services not allowed msIdentUnknown(10) - MS identity unknown implicitlyDetached(11) - Implicitly detached plmnNotAllowed(12) - PLMN not allowed lacNotAllowed(13) - LAC not allowed roamingNotAllowed(14) - Roaming not allowed gprsServNotAllowInPlmn(15) - GPRS services not allowed in this PLMN noSuitableCellInLa(16) - No suitable cells in LA (Location Area) mscTempNotReachable(17) - MSC (Mobile Switching Center) temporarily not reachable networkFailure(18) - Network failure macFailure(19) - MAC failure synchFailure(20) - Synch failure congestion(21) - Congestion gsmAuthenNotAccept(22) - GSM/LTE Authentication not accepted servOptionNotSupport(23) - Service option not supported reqServOptionNotSub(24) - Requested service option not subscribed servOptionOutOfOrder(25) - Service option out of order callCannotIdentified(26) - Call cannot be identified noPdpContextActivated(27) - No PDP context activated invalidMandatInfo(28) - Invalid mandatory info unpsecProtErr(29) - Unspecified protocol error')
c3gGsmCurrentService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("circuitSwitched", 3), ("packetSwitched", 4), ("combined", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmCurrentService.setStatus('current')
if mibBuilder.loadTexts: c3gGsmCurrentService.setDescription('Current service type: unknown(1) - service type is unknown invalid(2) - no service circuitSwitched(3) - circuit switched service packetSwitched(4) - packet switched service combined(5) - combination of circuit and packet switched service')
c3gGsmPacketService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("gprs", 3), ("edge", 4), ("umtsWcdma", 5), ("hsdpa", 6), ("hsupa", 7), ("hspa", 8), ("hspaPlus", 9), ("lte", 10))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmPacketService.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPacketService.setDescription('Packet Service type: unknown(1) - service type is unknown. none(2) - no service. gprs(3) - General Packet Radio Service (GPRS). edge(4) - Enhanced Data rates for GSM Evolution (EDGE). umtsWcdma(5) - Universal Mobile Telecommunications System (UMTS) / Wideband Code-Division Multiple-Access (W-CDMA). hsdpa(6) - High-Speed Downlink Packet Access (HSDPA) hsdpa(7) - High-Speed Uplink Packet Access (HSUPA) hspa(8) - High-Speed Packet Access (HSPA) hspaPlus(9) - High-Speed Packet Access (HSPA) Plus lte(10) - Long Term Evolution')
c3gGsmCurrentRoamingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("roaming", 2), ("home", 3))).clone('home')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmCurrentRoamingStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmCurrentRoamingStatus.setDescription('This object indicates whether the modem is in the home network or is roaming.')
c3gGsmNetworkSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("automatic", 2), ("manual", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gGsmNetworkSelectionMode.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNetworkSelectionMode.setDescription('Network selection mode. Can be manual selection mode or automatic selection mode. Set to automatic by default.')
c3gGsmCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmCountry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmCountry.setDescription('Country code. Country code string is given by the base station.')
c3gGsmNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNetwork.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNetwork.setDescription('Network code. Network Code string is given by the base station.')
c3gGsmMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gGsmMcc.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMcc.setDescription("Mobile Country Code (MCC). Value of '-1' indicates MCC is 'Not Applicable'.")
c3gGsmMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gGsmMnc.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMnc.setDescription("Mobile Network Code (MNC). Value of '-1' indicates MNC is 'Not Applicable'.")
c3gGsmRac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmRac.setStatus('current')
if mibBuilder.loadTexts: c3gGsmRac.setDescription('Routing Area Code (RAC). RAC is given by the base station.')
c3gGsmCurrentCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmCurrentCellId.setStatus('current')
if mibBuilder.loadTexts: c3gGsmCurrentCellId.setDescription('Cell Identifier of current cell. Cell ID is given by the base station.')
c3gGsmCurrentPrimaryScramblingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmCurrentPrimaryScramblingCode.setStatus('current')
if mibBuilder.loadTexts: c3gGsmCurrentPrimaryScramblingCode.setDescription('Primary scrambling code of current cell. The primary scrambling code is typically identified through symbol-by-symbol correlation over the CPICH (Common Pilot Channel) with all codes within the code group, after the primary scrambling code has been identified, the Primary CCPCH can be detected and the system and cell specific BCH information can be read.')
c3gGsmPlmnSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("manual", 2), ("automatic", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gGsmPlmnSelection.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPlmnSelection.setDescription('Public Land Mobile Network (PLMN) selection. Can be manual selection mode or automatic selection mode. Set to automatic by default.')
c3gGsmRegPlmn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmRegPlmn.setStatus('current')
if mibBuilder.loadTexts: c3gGsmRegPlmn.setDescription('Registered PLMN.')
c3gGsmPlmnAbbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmPlmnAbbr.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPlmnAbbr.setDescription('PLMN abbreviated number.')
c3gGsmServiceProvider = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmServiceProvider.setStatus('current')
if mibBuilder.loadTexts: c3gGsmServiceProvider.setDescription('Service provider.')
c3gGsmTotalByteTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 19), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmTotalByteTransmitted.setStatus('current')
if mibBuilder.loadTexts: c3gGsmTotalByteTransmitted.setDescription('Total number of bytes transmitted for all calls. It is the total number of bytes transmitted by modem, not to be confused with the number of bytes transmitted through the interface.')
c3gGsmTotalByteReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 2, 1, 20), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmTotalByteReceived.setStatus('current')
if mibBuilder.loadTexts: c3gGsmTotalByteReceived.setDescription('Total number of bytes received for all calls. It is the total number of bytes received by modem, not to be confused with the number of bytes received from the interface.')
c3gGsmPdpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3))
c3gGsmPdpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1), )
if mibBuilder.loadTexts: c3gGsmPdpProfileTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileTable.setDescription('Cellular GSM PDP profiles table. Cellular device contains multiple profile entries which can be used to establish cellular data connections (PDP contexts). Users can choose any of available PDP profiles to establish data connections. Data connections are described in c3gGsmPacketSessionTable. This table is applicable in only 3G technology mode. Refer CISCO-WAN-CELL-EXT-MIB when in 4G-LTE mode.')
c3gGsmPdpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmPdpProfileIndex"))
if mibBuilder.loadTexts: c3gGsmPdpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileEntry.setDescription('An entry (conceptual row) in the c3gGsmPdpProfileTable.')
c3gGsmPdpProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: c3gGsmPdpProfileIndex.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileIndex.setDescription('Profile index, combined with entPhysicalIndex to access profile table.')
c3gGsmPdpProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1, 2), C3gPdpType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmPdpProfileType.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileType.setDescription('This object indicates configured Packet Data Protocol (PDP) type.')
c3gGsmPdpProfileAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmPdpProfileAddr.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileAddr.setDescription('Configured PDP/EPS Bearer address. PDP type is defined in c3gGsmPdpProfileType.')
c3gGsmPdpProfileApn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmPdpProfileApn.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileApn.setDescription('This object indicates profile Access Point Name (APN). This information is provided by the service provider.')
c3gGsmPdpProfileAuthenType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("chap", 3), ("pap", 4))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmPdpProfileAuthenType.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileAuthenType.setDescription('This object indicates PDP authentication type supported. CHAP and PAP are supported in GSM. The type of authentication to be used is provided by the service provider.')
c3gGsmPdpProfileUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmPdpProfileUsername.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileUsername.setDescription('This object indicates the username to be used for PDP authentication. This information is provided by the service provider.')
c3gGsmPdpProfilePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmPdpProfilePassword.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfilePassword.setDescription('This object indicates the password to be used for PDP authentication. This information is provided by the service provider.')
c3gGsmPdpProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmPdpProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpProfileRowStatus.setDescription('The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table.')
c3gGsmPacketSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 2), )
if mibBuilder.loadTexts: c3gGsmPacketSessionTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPacketSessionTable.setDescription('Cellular 3G GSM packet session table. This table is applicable in only 3G technology mode. Refer CISCO-WAN-CELL-EXT-MIB when in 4G-LTE mode.')
c3gGsmPacketSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmPdpProfileIndex"))
if mibBuilder.loadTexts: c3gGsmPacketSessionEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPacketSessionEntry.setDescription('An entry (conceptual row) in the c3gGsmPacketSessionTable.')
c3gGsmPacketSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmPacketSessionStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPacketSessionStatus.setDescription('This object indicates PDP session status of the profile. This is active when the call is established and PDP contextr has become active.')
c3gGsmPdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 2, 1, 2), C3gPdpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmPdpType.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpType.setDescription('This object indicates current session PDP type.')
c3gGsmPdpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmPdpAddress.setStatus('current')
if mibBuilder.loadTexts: c3gGsmPdpAddress.setDescription('Current session PDP context/EPS Bearer address. PDP type is obtained from c3gGsmPdpType.')
c3gGsmReqUmtsQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3), )
if mibBuilder.loadTexts: c3gGsmReqUmtsQosTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosTable.setDescription('Requested UMTS QoS parameters table. This table contains UMTS QoS parameters requested by modem to the cellular network via PDP Context Activation Request message. The requested UMTS QoS profile is optional. This table is applicable only in 3G technology mode.')
c3gGsmReqUmtsQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmPdpProfileIndex"))
if mibBuilder.loadTexts: c3gGsmReqUmtsQosEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosEntry.setDescription('An entry (conceptual row) in the c3gGsmReqUmtsQosTable.')
c3gGsmReqUmtsQosTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 2), C3gUmtsQosTrafficClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosTrafficClass.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosTrafficClass.setDescription('Request UMTS QoS traffic classes.')
c3gGsmReqUmtsQosMaxUpLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 3), C3gUmtsQosLinkBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosMaxUpLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosMaxUpLinkBitRate.setDescription('Request UMTS QoS maximum uplink bit rate.')
c3gGsmReqUmtsQosMaxDownLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 4), C3gUmtsQosLinkBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosMaxDownLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosMaxDownLinkBitRate.setDescription('Request UMTS QoS maximum downlink bit rate.')
c3gGsmReqUmtsQosGuaUpLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 5), C3gUmtsQosLinkBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosGuaUpLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosGuaUpLinkBitRate.setDescription('Request UMTS QoS guaranteed uplink bit rate.')
c3gGsmReqUmtsQosGuaDownLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 6), C3gUmtsQosLinkBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosGuaDownLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosGuaDownLinkBitRate.setDescription('Request UMTS QoS guaranteed downlink bit rate.')
c3gGsmReqUmtsQosOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 7), C3gUmtsQosOrder()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosOrder.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosOrder.setDescription('Request UMTS QoS deliver order.')
c3gGsmReqUmtsQosErroneousSdu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 8), C3gUmtsQosErroneousSdu()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosErroneousSdu.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosErroneousSdu.setDescription('Request UMTS QoS Delivery of Erroneous SDU.')
c3gGsmReqUmtsQosMaxSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1520))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosMaxSduSize.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosMaxSduSize.setDescription("Request UMTS QoS maximum SDU size, the valid range is between 1 and 1520 bytes. Value of '0' indicates the maximum SDU size is unspecified.")
c3gGsmReqUmtsQosSer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 10), C3gUmtsQosSer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosSer.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosSer.setDescription('Request UMTS QoS SDU error ratio.')
c3gGsmReqUmtsQosBer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 11), C3gUmtsQosBer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosBer.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosBer.setDescription('Request UMTS QoS residual bit error ratio.')
c3gGsmReqUmtsQosDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosDelay.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosDelay.setDescription("Request UMTS QoS transfer delay in ms, the valid range is between 1 and 4000 ms. Value of '0' indicates the QoS delay is unspecified.")
c3gGsmReqUmtsQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 13), C3gUmtsQosPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosPriority.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosPriority.setDescription('Request UMTS QoS traffic handling priority.')
c3gGsmReqUmtsQosSrcStatDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 14), C3gUmtsQosSrcStatDescriptor()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosSrcStatDescriptor.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosSrcStatDescriptor.setDescription('Request UMTS QoS source statistics descriptor.')
c3gGsmReqUmtsQosSignalIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 15), C3gUmtsQosSignalIndication()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosSignalIndication.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosSignalIndication.setDescription('Request UMTS QoS signalling indication.')
c3gGsmReqUmtsQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqUmtsQosRowStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqUmtsQosRowStatus.setDescription('The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table.')
c3gGsmMinUmtsQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4), )
if mibBuilder.loadTexts: c3gGsmMinUmtsQosTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosTable.setDescription('Minimum acceptable UMTS QoS table. This table contains minimum acceptable UMTS QoS parameters which is checked by the MT (Mobile Termination) against the negotiated profile returned in the Activate PDP Context Accept message. The minimum acceptable UMTS QoS profile is optional. This table is applicable only in 3G technology mode.')
c3gGsmMinUmtsQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmPdpProfileIndex"))
if mibBuilder.loadTexts: c3gGsmMinUmtsQosEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosEntry.setDescription('An entry (conceptual row) in the c3gGsmMinUmtsQosTable.')
c3gGsmMinUmtsQosTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 1), C3gUmtsQosTrafficClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosTrafficClass.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosTrafficClass.setDescription('Minimum UMTS QoS traffic classes.')
c3gGsmMinUmtsQosMaxUpLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 2), C3gUmtsQosLinkBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosMaxUpLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosMaxUpLinkBitRate.setDescription('Minimum UMTS QoS maximum uplink bit rate.')
c3gGsmMinUmtsQosMaxDownLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 3), C3gUmtsQosLinkBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosMaxDownLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosMaxDownLinkBitRate.setDescription('Minimum UMTS QoS maximum downlink bit rate.')
c3gGsmMinUmtsQosGuaUpLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 4), C3gUmtsQosLinkBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosGuaUpLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosGuaUpLinkBitRate.setDescription('Minimum UMTS QoS guaranteed uplink bit rate.')
c3gGsmMinUmtsQosGuaDownLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 5), C3gUmtsQosLinkBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosGuaDownLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosGuaDownLinkBitRate.setDescription('Minimum UMTS QoS guaranteed downlink bit rate.')
c3gGsmMinUmtsQosOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 6), C3gUmtsQosOrder()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosOrder.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosOrder.setDescription('Minimum UMTS QoS deliver order.')
c3gGsmMinUmtsQosErroneousSdu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 7), C3gUmtsQosErroneousSdu()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosErroneousSdu.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosErroneousSdu.setDescription('Minimum UMTS QoS Delivery of Erroneous SDU.')
c3gGsmMinUmtsQosMaxSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1520))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosMaxSduSize.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosMaxSduSize.setDescription("Minimum UMTS maximum SDU size, the valid range is between 1 and 1520 bytes. Value of '0' indicates the maximum SDU size is unspecified.")
c3gGsmMinUmtsQosSer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 9), C3gUmtsQosSer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosSer.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosSer.setDescription('Minimum UMTS QoS SDU error ratio.')
c3gGsmMinUmtsQosBer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 10), C3gUmtsQosBer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosBer.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosBer.setDescription('Minimum UMTS residual bit error ratio.')
c3gGsmMinUmtsQosDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosDelay.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosDelay.setDescription("Minimum UMTS transfer delay in ms, the valid range is between 1 and 4000 ms. Value of '0' indicates the QoS delay is unspecified.")
c3gGsmMinUmtsQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 12), C3gUmtsQosPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosPriority.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosPriority.setDescription('Minimum UMTS QoS traffic handling priority.')
c3gGsmMinUmtsQosSrcStatDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 13), C3gUmtsQosSrcStatDescriptor()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosSrcStatDescriptor.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosSrcStatDescriptor.setDescription('Minimum UMTS QoS source statistics descriptor.')
c3gGsmMinUmtsQosSignalIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 14), C3gUmtsQosSignalIndication()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosSignalIndication.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosSignalIndication.setDescription('Minimum UMTS QoS signalling indication.')
c3gGsmMinUmtsQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 4, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinUmtsQosRowStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinUmtsQosRowStatus.setDescription('The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table.')
c3gGsmNegoUmtsQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5), )
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosTable.setDescription("Negotiated UMTS QoS table. This table contains negotiated UMTS QoS parameters returned in the Activate PDP Context Accept message. The objects in this table are valid only if the value of object c3gGsmPacketSessionStatus defined in c3gGsmPacketSessionTable is 'active'. This table is applicable only in 3G technology mode.")
c3gGsmNegoUmtsQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmPdpProfileIndex"))
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosEntry.setDescription('An entry (conceptual row) in the c3gGsmNegoUmtsQosTable.')
c3gGsmNegoUmtsQosTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 1), C3gUmtsQosTrafficClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosTrafficClass.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosTrafficClass.setDescription('Negotiated UMTS QoS traffic classes.')
c3gGsmNegoUmtsQosMaxUpLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 2), C3gUmtsQosLinkBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosMaxUpLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosMaxUpLinkBitRate.setDescription('Negotiated UMTS QoS maximum uplink bit rate.')
c3gGsmNegoUmtsQosMaxDownLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 3), C3gUmtsQosLinkBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosMaxDownLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosMaxDownLinkBitRate.setDescription('Negotiated UMTS QoS maximum downlink bit rate.')
c3gGsmNegoUmtsQosGuaUpLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 4), C3gUmtsQosLinkBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosGuaUpLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosGuaUpLinkBitRate.setDescription('Negotiated UMTS QoS guaranteed uplink bit rate.')
c3gGsmNegoUmtsQosGuaDownLinkBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 5), C3gUmtsQosLinkBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosGuaDownLinkBitRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosGuaDownLinkBitRate.setDescription('Negotiated UMTS QoS guaranteed downlink bit rate.')
c3gGsmNegoUmtsQosOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 6), C3gUmtsQosOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosOrder.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosOrder.setDescription('Negotiated UMTS QoS deliver order.')
c3gGsmNegoUmtsQosErroneousSdu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 7), C3gUmtsQosErroneousSdu()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosErroneousSdu.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosErroneousSdu.setDescription('Negotiated UMTS QoS Delivery of Erroneous SDU.')
c3gGsmNegoUmtsQosMaxSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1520))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosMaxSduSize.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosMaxSduSize.setDescription("Negotiated UMTS QoS maximum SDU size, the valid range is between 1 and 1520 bytes. Value of '0' indicates the maximum SDU size is subscribed.")
c3gGsmNegoUmtsQosSer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 9), C3gUmtsQosSer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosSer.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosSer.setDescription('Negotiated UMTS QoS SDU error ratio.')
c3gGsmNegoUmtsQosBer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 10), C3gUmtsQosBer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosBer.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosBer.setDescription('Negotiated UMTS QoS residual bit error ratio.')
c3gGsmNegoUmtsQosDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosDelay.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosDelay.setDescription("Negotiated UMTS QoS transfer delay in ms, the valid range is between 1 and 4000 ms. Value of '0' indicates the QoS delay is subscribed.")
c3gGsmNegoUmtsQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 12), C3gUmtsQosPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosPriority.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosPriority.setDescription('Negotiated UMTS QoS traffic handling priority.')
c3gGsmNegoUmtsQosSrcStatDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 13), C3gUmtsQosSrcStatDescriptor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosSrcStatDescriptor.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosSrcStatDescriptor.setDescription('Negotiated UMTS QoS source statistics descriptor.')
c3gGsmNegoUmtsQosSignalIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 5, 1, 14), C3gUmtsQosSignalIndication()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosSignalIndication.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoUmtsQosSignalIndication.setDescription('Negotiated UMTS QoS signalling indication.')
c3gGsmReqGprsQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 6), )
if mibBuilder.loadTexts: c3gGsmReqGprsQosTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqGprsQosTable.setDescription('Requested GPRS QoS parameters table. This table contains GPRS QoS parameters requested by modem to the cellular network via PDP Context Request message. The requested GPRS QoS profile is optional. This table is applicable only in 3G technology mode.')
c3gGsmReqGprsQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmPdpProfileIndex"))
if mibBuilder.loadTexts: c3gGsmReqGprsQosEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqGprsQosEntry.setDescription('An entry (conceptual row) in the c3gGsmReqGprsQosTable.')
c3gGsmReqGprsQosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 6, 1, 1), C3gGprsQosPrecedence()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqGprsQosPrecedence.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqGprsQosPrecedence.setDescription('Request GPRS QoS precedence.')
c3gGsmReqGprsQosDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 6, 1, 2), C3gGprsQosDelay()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqGprsQosDelay.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqGprsQosDelay.setDescription('Request GPRS QoS delay classes.')
c3gGsmReqGprsQosReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 6, 1, 3), C3gGprsQosReliability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqGprsQosReliability.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqGprsQosReliability.setDescription('Request GPRS QoS reliability.')
c3gGsmReqGprsQosPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 6, 1, 4), C3gGprsQosPeakRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqGprsQosPeakRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqGprsQosPeakRate.setDescription('Request GPRS QoS peak rate.')
c3gGsmReqGprsQosMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 6, 1, 5), C3gGprsQosMeanRate()).setUnits('octet-per-hour').setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqGprsQosMeanRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqGprsQosMeanRate.setDescription('Request GPRS QoS mean rate.')
c3gGsmReqGprsQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmReqGprsQosRowStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmReqGprsQosRowStatus.setDescription('The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table.')
c3gGsmMinGprsQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 7), )
if mibBuilder.loadTexts: c3gGsmMinGprsQosTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinGprsQosTable.setDescription('Minimum acceptable GPRS QoS table. This table contains minimum acceptable GPRS QoS parameters which is checked by the MT (Mobile Termination) against the negotiated profile returned in the Activate PDP Context Accept message. The minimum acceptable GPRS QoS profile is optional. This table is applicable only in 3G technology mode.')
c3gGsmMinGprsQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmPdpProfileIndex"))
if mibBuilder.loadTexts: c3gGsmMinGprsQosEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinGprsQosEntry.setDescription('An entry (conceptual row) in the c3gGsmMinGprsQosTable.')
c3gGsmMinGprsQosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 7, 1, 1), C3gGprsQosPrecedence()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinGprsQosPrecedence.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinGprsQosPrecedence.setDescription('Minimum GPRS QoS precedence.')
c3gGsmMinGprsQosDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 7, 1, 2), C3gGprsQosDelay()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinGprsQosDelay.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinGprsQosDelay.setDescription('Minimum GPRS QoS delay classes.')
c3gGsmMinGprsQosReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 7, 1, 3), C3gGprsQosReliability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinGprsQosReliability.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinGprsQosReliability.setDescription('Minimum GPRS QoS reliability.')
c3gGsmMinGprsQosPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 7, 1, 4), C3gGprsQosPeakRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinGprsQosPeakRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinGprsQosPeakRate.setDescription('Minimum GPRS QoS peak rate.')
c3gGsmMinGprsQosMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 7, 1, 5), C3gGprsQosMeanRate()).setUnits('octet-per-hour').setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinGprsQosMeanRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinGprsQosMeanRate.setDescription('Minimum GPRS QoS mean rate.')
c3gGsmMinGprsQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gGsmMinGprsQosRowStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmMinGprsQosRowStatus.setDescription('The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table.')
c3gGsmNegoGprsQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 8), )
if mibBuilder.loadTexts: c3gGsmNegoGprsQosTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoGprsQosTable.setDescription("Negotiated GPRS QoS table. This table contains negotiated GPRS QoS parameters returned in the Activate PDP Context Accept message. The objects in this table are valid only if the value of object c3gGsmPacketSessionStatus defined in c3gGsmPacketSessionTable is 'active'. This table is applicable only in 3G technology mode.")
c3gGsmNegoGprsQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 8, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmPdpProfileIndex"))
if mibBuilder.loadTexts: c3gGsmNegoGprsQosEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoGprsQosEntry.setDescription('An entry (conceptual row) in the c3gGsmNegoGprsQosTable.')
c3gGsmNegoGprsQosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 8, 1, 1), C3gGprsQosPrecedence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoGprsQosPrecedence.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoGprsQosPrecedence.setDescription('Negotiated GPRS QoS precedence.')
c3gGsmNegoGprsQosDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 8, 1, 2), C3gGprsQosDelay()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoGprsQosDelay.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoGprsQosDelay.setDescription('Negotiated GPRS QoS delay classes.')
c3gGsmNegoGprsQosReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 8, 1, 3), C3gGprsQosReliability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoGprsQosReliability.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoGprsQosReliability.setDescription('Negotiated GPRS QoS reliability.')
c3gGsmNegoGprsQosPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 8, 1, 4), C3gGprsQosPeakRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoGprsQosPeakRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoGprsQosPeakRate.setDescription('Negotiated GPRS QoS peak rate.')
c3gGsmNegoGprsQosMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 3, 8, 1, 5), C3gGprsQosMeanRate()).setUnits('octet-per-hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNegoGprsQosMeanRate.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNegoGprsQosMeanRate.setDescription('Negotiated GPRS QoS mean rate.')
c3gGsmRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4))
c3gGsmRadioTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 1), )
if mibBuilder.loadTexts: c3gGsmRadioTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmRadioTable.setDescription('Cellular 3G GSM/4G-LTE radio table.')
c3gGsmRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gGsmRadioEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmRadioEntry.setDescription('An entry (conceptual row) in the c3gGsmRadioTable.')
c3gCurrentGsmRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 1, 1, 1), C3gRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrentGsmRssi.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentGsmRssi.setDescription('The GPRS/UMTS/LTE RSSI value.')
c3gCurrentGsmEcIo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 1, 1, 2), C3gEcIo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gCurrentGsmEcIo.setStatus('current')
if mibBuilder.loadTexts: c3gCurrentGsmEcIo.setDescription('The GPRS, UMTS or LTE Ec/Io value.')
c3gGsmCurrentBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("none", 3), ("gsm850", 4), ("gsm900", 5), ("gsm1800", 6), ("gsm1900", 7), ("wcdma800", 8), ("wcdma850", 9), ("wcdma1900", 10), ("wcdma2100", 11), ("lteBand", 12))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmCurrentBand.setStatus('current')
if mibBuilder.loadTexts: c3gGsmCurrentBand.setDescription('GPRS/UMTS/LTE band to which the modem is attached. Refer CISCO-WAN-CELL-EXT-MIB for LTE band number when in LTE mode.')
c3gGsmChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmChannelNumber.setStatus('current')
if mibBuilder.loadTexts: c3gGsmChannelNumber.setDescription('Channel number to which the modem is attached. This is only applicable in 3G technology mode. Refer CISCO-WAN-CELL-EXT-MIB for the LTE uplink and downlink channel values')
c3gGsmNumberOfNearbyCell = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNumberOfNearbyCell.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNumberOfNearbyCell.setDescription('This object indicates the current total number of nearby cell in the c3gGsmNearbyCellTable. User can poll this object to get the total number of nearby cell before polling c3gGsmNearbyCellTable.')
c3gGsmNearbyCellTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 2), )
if mibBuilder.loadTexts: c3gGsmNearbyCellTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNearbyCellTable.setDescription('Cellular GSM/4G-LTE nearby cell table. Object c3gGsmNumberOfNearbyCell indicates the total number of nearby cell in this table.')
c3gGsmNearbyCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gGsmNearbyCellIndex"))
if mibBuilder.loadTexts: c3gGsmNearbyCellEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNearbyCellEntry.setDescription('An entry (conceptual row) in the c3gGsmNearbyCellTable.')
c3gGsmNearbyCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: c3gGsmNearbyCellIndex.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNearbyCellIndex.setDescription('Nearby cell index, combined with entPhysicalIndex to access the Nearby cell table c3gGsmNearbyCellTable.')
c3gGsmNearbyCellPrimaryScramblingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNearbyCellPrimaryScramblingCode.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNearbyCellPrimaryScramblingCode.setDescription('Nearby cell primary scrambling code.')
c3gGsmNearbyCellRscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNearbyCellRscp.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNearbyCellRscp.setDescription('Nearby cell Received Signal Code Power (RSCP).')
c3gGsmNearbyCellEcIoMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 2, 1, 4), C3gEcIo()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNearbyCellEcIoMeasurement.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNearbyCellEcIoMeasurement.setDescription('Nearby cell Ec/Io measurement.')
c3gGsmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 3), )
if mibBuilder.loadTexts: c3gGsmHistoryTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmHistoryTable.setDescription('Cellular 3G GSM/4G-LTE RSSI history table. The history of RSSI are carried in an octet of string. Each octet in the octet string has a value from 0 to 150 and the 255 value is reserved to indicate an uninitialized (Invalid) value. The format of the octet string with n octets is as following: [ octet 0 is latest, octet 1 is latest-1, . . octet n-2 is oldest-1, octet n-1 is oldest ] To convert the provided value into dBm the following formula should be used: dBm = (-1)*value;')
c3gGsmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gGsmHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmHistoryEntry.setDescription('An entry (conceptual row) in the c3gGsmHistoryTable.')
c3gGsmHistoryRssiPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmHistoryRssiPerSecond.setStatus('current')
if mibBuilder.loadTexts: c3gGsmHistoryRssiPerSecond.setDescription('Per-second RSSI history. This object contains a per-second history of RSSI values for the last 60 seconds.')
c3gGsmHistoryRssiPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmHistoryRssiPerMinute.setStatus('current')
if mibBuilder.loadTexts: c3gGsmHistoryRssiPerMinute.setDescription('Per-minute weakest RSSI value history. This object contains a per-minute history of weakest RSSI values for the last 60 minutes. The octet in the string is the weakest RSSI value measured in a minute interval.')
c3gGsmHistoryRssiPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(72, 72)).setFixedLength(72)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmHistoryRssiPerHour.setStatus('current')
if mibBuilder.loadTexts: c3gGsmHistoryRssiPerHour.setDescription('Per-hour weakest RSSI value history. This object contains a per-hour history of weakest RSSI values for the last 72 hours. The octet in the string is the weakest RSSI value measured in an hour interval.')
c3gGsmSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 5))
c3gGsmSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 5, 1), )
if mibBuilder.loadTexts: c3gGsmSecurityTable.setStatus('current')
if mibBuilder.loadTexts: c3gGsmSecurityTable.setDescription('Cellular 3G GSM/4G-LTE security table.')
c3gGsmSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gGsmSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: c3gGsmSecurityEntry.setDescription('An entry (conceptual row) in the c3gGsmSecurityTable.')
c3gGsmChv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c3gGsmChv1.setStatus('current')
if mibBuilder.loadTexts: c3gGsmChv1.setDescription('Card Holder Verification 1 (CHV1), if enabled, the PIN will be verified, if disabled, the PIN will not be verified.')
c3gGsmSimStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("notInserted", 3), ("removed", 4), ("initFailure", 5), ("generalFailure", 6), ("locked", 7), ("chv1Blocked", 8), ("chv2Blocked", 9), ("chv1Rejected", 10), ("chv2Rejected", 11), ("mepLocked", 12), ("networkRejected", 13))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmSimStatus.setStatus('current')
if mibBuilder.loadTexts: c3gGsmSimStatus.setDescription('SIM status. Indicates whether the SIM is present or removed from the SIM socket, and its current status.')
c3gGsmSimUserOperationRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("enterChv1", 3), ("enterChv2", 4), ("enterUnblockChv1", 5), ("enterUnblockChv2", 6), ("enterMepCode", 7))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmSimUserOperationRequired.setStatus('current')
if mibBuilder.loadTexts: c3gGsmSimUserOperationRequired.setDescription('If the SIM is protected (for example, because of CHV1 enabled), it will indicate the type of user operation required.')
c3gGsmNumberOfRetriesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 3, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gGsmNumberOfRetriesRemaining.setStatus('current')
if mibBuilder.loadTexts: c3gGsmNumberOfRetriesRemaining.setDescription('Indicates the number of attempts remaining in case the SIM is locked. If the number of retries becomes zero, the SIM is blocked and becomes unusable.')
c3gWanLbsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1))
c3gWanLbsCommonTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1), )
if mibBuilder.loadTexts: c3gWanLbsCommonTable.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsCommonTable.setDescription('This table contains information about the Cellular Location Based service feature. This GPS data is provided by the wireless modem upon GPS configuration.')
c3gWanLbsCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gWanLbsCommonEntry.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsCommonEntry.setDescription('This entry contains information about the Cellular Location Based service variables returned by the wireless modem.')
c3gLbsModeSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unKnown", 1), ("standAlone", 2), ("msBased", 3), ("msAssist", 4), ("reserved", 5))).clone('unKnown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsModeSelected.setStatus('current')
if mibBuilder.loadTexts: c3gLbsModeSelected.setDescription('Mode of Location base service selected. unKnown - mode selection unkown standAlone - Standalone mode msBased - MS-Based mode msAssist - MS-Assist mode reserved - reserved for future use')
c3gLbsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gpsDisabled", 1), ("gpsAcquiring", 2), ("gpsEnabled", 3), ("gpsLocError", 4))).clone('gpsDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsState.setStatus('current')
if mibBuilder.loadTexts: c3gLbsState.setDescription('Location base service state. gpsDisabled - GPS is disabled gpsEnabled - GPS is enabled gpsLocError - GPS encounters error gpsAcquiring - GPS is acquiring fix')
c3gLbsLocFixError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("offline", 1), ("noService", 2), ("noConnection", 3), ("noData", 4), ("sessionBusy", 5), ("reserved", 6), ("gpsDisabled", 7), ("connectionFailed", 8), ("errorState", 9), ("clientEnded", 10), ("uiEnded", 11), ("networkEnded", 12), ("timeout", 13), ("privacyLevel", 14), ("networkAccessError", 15), ("fixError", 16), ("pdeRejected", 17), ("trafficChannelExited", 18), ("e911", 19), ("serverError", 20), ("staleBSinformation", 21), ("resourceContention", 22), ("authenticationParameterFailed", 23), ("authenticationFailedLocal", 24), ("authenticationFailedNetwork", 25), ("vxLcsAgentAuthFail", 26), ("unknownSystemError", 27), ("unsupportedService", 28), ("subscriptionViolation", 29), ("desiredFixMethodFailed", 30), ("antennaSwitch", 31), ("noTxConfirmationReceived", 32), ("normalEndOfSession", 33), ("noErrorFromNetwork", 34), ("noResourcesLeftOnNetwork", 35), ("positionServerNotAvailable", 36), ("unsupportedProtocolVersion", 37), ("ssmolrErrorSystemFailure", 38), ("ssmolrErrorUnexpectedDataValue", 39), ("ssmolrErrorDataMissing", 40), ("ssmolrErrorFacilityNotSupported", 41), ("ssmolrErrorSsSubscriptionViolation", 42), ("ssmolrErrorPositionMethodFailure", 43), ("ssmolrErrorUndefined", 44), ("smlcTimeout", 45), ("mtGguardTimeExpired", 46), ("additionalAssistanceNeeded", 47), ("noFixError", 48))).clone('noFixError')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsLocFixError.setReference("Refer to the following documents for the error code's full definitions. Sierra Wireless CDMA EVDO CnS Reference_1.2.pdf under Location Based Services section.")
if mibBuilder.loadTexts: c3gLbsLocFixError.setStatus('current')
if mibBuilder.loadTexts: c3gLbsLocFixError.setDescription('Location base service fix error code.')
c3gLbsLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsLatitude.setStatus('current')
if mibBuilder.loadTexts: c3gLbsLatitude.setDescription('Location base service Latitude.')
c3gLbsLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsLongitude.setStatus('current')
if mibBuilder.loadTexts: c3gLbsLongitude.setDescription('Location base service longitude.')
c3gLbsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: c3gLbsTimeStamp.setDescription('Location base service timestamp.')
c3gLbsLocUncertaintyAngle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 7), Unsigned32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsLocUncertaintyAngle.setStatus('current')
if mibBuilder.loadTexts: c3gLbsLocUncertaintyAngle.setDescription('GPS Uncertainty parameter Angle, in degrees for the Uncertainty info returned by the GPS device while doing a location fix.')
c3gLbsLocUncertaintyA = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 8), Unsigned32()).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsLocUncertaintyA.setStatus('current')
if mibBuilder.loadTexts: c3gLbsLocUncertaintyA.setDescription('GPS Uncertainty parameter A, value in meters for the Uncertainty info returned by the GPS device while doing a location fix.')
c3gLbsLocUncertaintyPos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 9), Unsigned32()).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsLocUncertaintyPos.setStatus('current')
if mibBuilder.loadTexts: c3gLbsLocUncertaintyPos.setDescription('GPS Uncertainty parameter position, value in meters for the Uncertainty info returned by the GPS device while doing a location fix.')
c3gLbsFixtype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("twoDimension", 2), ("threeDimension", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsFixtype.setStatus('current')
if mibBuilder.loadTexts: c3gLbsFixtype.setDescription('The type of location fix in Location Base service. none - default case, while LBS is not enabled. twoDimension - 2D location fix. threeDimension - 3D location fix.')
c3gLbsHeightValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsHeightValid.setStatus('current')
if mibBuilder.loadTexts: c3gLbsHeightValid.setDescription('This object indicates whether the height returned by the GPS device is valid during location fix.')
c3gLbsHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsHeight.setStatus('current')
if mibBuilder.loadTexts: c3gLbsHeight.setDescription('This object indicates the GPS height parameter returned by the GPS device while performing location fix.')
c3gLbsLocUncertaintyVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 13), Unsigned32()).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsLocUncertaintyVertical.setStatus('current')
if mibBuilder.loadTexts: c3gLbsLocUncertaintyVertical.setDescription('GPS parameter vertical velocity parameter returned by the GPS device while performing location fix.')
c3gLbsVelocityValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsVelocityValid.setStatus('current')
if mibBuilder.loadTexts: c3gLbsVelocityValid.setDescription('This object indicates whether the Velocity value returned by the GPS device is valid.')
c3gLbsHeading = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 15), Unsigned32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsHeading.setStatus('current')
if mibBuilder.loadTexts: c3gLbsHeading.setDescription('The compass direction toward which the GPS receiver is (or should be) moving.')
c3gLbsVelocityHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 16), Unsigned32()).setUnits('meters per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsVelocityHorizontal.setStatus('current')
if mibBuilder.loadTexts: c3gLbsVelocityHorizontal.setDescription('Horizontal Velocity in meters per second the GPS device is heading. This is the value returned by the GPS satellite relative to the last horizontal location of the GPS device. If at Time X satellite sees the location of GPS device is L1 and then at Time Y satellite sees the location is L2 then speed is (L2 - L1) / ( Y - X).')
c3gLbsVelocityVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 17), Unsigned32()).setUnits('meters per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsVelocityVertical.setStatus('current')
if mibBuilder.loadTexts: c3gLbsVelocityVertical.setDescription('Vertical Velocity in meters per second the GPS device is heading. This is the value returned by the GPS satellite relative to the last vertical location of the GPS device. If at Time X satellite sees the location of GPS device is L1 and then at Time Y satellite sees the location is L2 then speed is (L2 - L1) / ( Y - X).')
c3gLbsHepe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 18), Unsigned32()).setUnits('centimeters').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsHepe.setStatus('current')
if mibBuilder.loadTexts: c3gLbsHepe.setDescription('Horizontal Estimated Position Error returned by the GPS satellite for current position of the GPS device.')
c3gLbsNumSatellites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 1, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gLbsNumSatellites.setStatus('current')
if mibBuilder.loadTexts: c3gLbsNumSatellites.setDescription('Number of GPS satellites in vision to the modem while GPS tracking is on.')
c3gWanLbsSatelliteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2))
c3gWanLbsSatelliteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1), )
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoTable.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoTable.setDescription('This table provides information on each satellite that is visible to the modem during the location fix. These satellites guide the device to acquire a 2D or 3D location fix.')
c3gWanLbsSatelliteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-3G-MIB", "c3gWanLbsSatelliteInfoIndex"))
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoEntry.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoEntry.setDescription("This table provides information about each satellite's elevation, azimuth, Signal to Noise ratio (SNR) and its reference number local to the router.")
c3gWanLbsSatelliteInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoIndex.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoIndex.setDescription('An index that is assigned to each satellite under a modem and in combination with entPhysicalIndex uniquely identify it. This index is assigned arbitrarily by the engine and is not saved over reboots.')
c3gWanLbsSatelliteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gWanLbsSatelliteNumber.setReference('Refer to the following documents for detailed information of Satellites. Sierra Wireless CDMA EVDO CnS Reference_1.2.pdf under Location Based Services section')
if mibBuilder.loadTexts: c3gWanLbsSatelliteNumber.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteNumber.setDescription('Each Satellite is assigned a unique number within this device.This object can be used to locate a particular satellite under a modem.')
c3gWanLbsSatelliteElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1, 1, 3), Integer32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gWanLbsSatelliteElevation.setReference('Refer to the following documents for detailed information of Satellites elevation. Sierra Wireless CDMA EVDO CnS Reference_1.2.pdf under Location Based Services section')
if mibBuilder.loadTexts: c3gWanLbsSatelliteElevation.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteElevation.setDescription('Angle of Elevation between the GPS antenna pointing direction, directly towards the satellite, and the local horizontal plane. It is the up-down angle')
c3gWanLbsSatelliteAzimuth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1, 1, 4), Integer32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gWanLbsSatelliteAzimuth.setReference('Refer to the following documents for detailed information of Satellites Azimuth. Sierra Wireless CDMA EVDO CnS Reference_1.2.pdf under Location Based Services section')
if mibBuilder.loadTexts: c3gWanLbsSatelliteAzimuth.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteAzimuth.setDescription('Azimuth of the current satellite in context referenced by the Satellite InfoIndex. Azimuth is the degree of rotation of the satellites dish on its vertical plane.')
c3gWanLbsSatelliteInfoSignalNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1, 1, 5), Integer32()).setUnits('db').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoSignalNoiseRatio.setReference('Refer to the following documents for detailed information of signal to noise ration in LBS. Sierra Wireless CDMA EVDO CnS Reference_1.2.pdf under Location Based Services section')
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoSignalNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoSignalNoiseRatio.setDescription('Signal to Noise Ratio(SNR) of received GPS signal. SNR is refered to as the signal strength in GPS standards.')
c3gWanLbsSatelliteUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gWanLbsSatelliteUsed.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteUsed.setDescription('Is this satellite in line of sight to the modem used in calculating the GPS location?')
c3gWanLbsSatelliteInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 4, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoRowStatus.setStatus('current')
if mibBuilder.loadTexts: c3gWanLbsSatelliteInfoRowStatus.setDescription('The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table.')
c3gWanSms = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1))
c3gSmsCommonTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1), )
if mibBuilder.loadTexts: c3gSmsCommonTable.setStatus('current')
if mibBuilder.loadTexts: c3gSmsCommonTable.setDescription('This table contains Cellular SMS management MIB objects.')
c3gSmsCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: c3gSmsCommonEntry.setStatus('current')
if mibBuilder.loadTexts: c3gSmsCommonEntry.setDescription('An entry contains counters for the SMS messages received, placed, errored and archived on CDMA, GSM or LTE based modems.')
c3gSmsServiceAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsServiceAvailable.setStatus('current')
if mibBuilder.loadTexts: c3gSmsServiceAvailable.setDescription('This object indicates the availability of SMS Service.')
c3gSmsOutSmsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 2), Counter32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsOutSmsCount.setStatus('current')
if mibBuilder.loadTexts: c3gSmsOutSmsCount.setDescription('Number of SMS messages which have been sent successfully.')
c3gSmsOutSmsErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 3), Counter32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsOutSmsErrorCount.setStatus('current')
if mibBuilder.loadTexts: c3gSmsOutSmsErrorCount.setDescription('Number of SMS message that could not be sent.')
c3gSmsInSmsStorageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 4), Gauge32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsStorageUsed.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsStorageUsed.setDescription("Number of SMS message records space used in the Incoming SMS message storage. One standard SMS message (cdma or gsm) occupies 1 unit of record storage space. A big SMS message can span 'n' sms record space but still be called as 1 SMS message. Storage used can be greater than or equal to total number of Incoming SMS received.")
c3gSmsInSmsStorageUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 5), Gauge32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsStorageUnused.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsStorageUnused.setDescription('The number of SMS messages record space left unused in the Incoming SMS message storage. This is equal to c3gSmsInSmsStorageMax - c3gSmsInSmsStorageUsed.')
c3gSmsInSmsArchiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 6), Gauge32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsArchiveCount.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsArchiveCount.setDescription('Number of successful archive of Incoming SMS messages since router reload. Each SMS message occupies x bytes of space. So if the incoming message is huge, then it is archived as multiple of x bytes but still called as one SMS message. This is the difference between c3gSmsInSmsArchiveCount and c3gSmsInSmsArchived.')
c3gSmsInSmsArchiveErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 7), Gauge32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsArchiveErrorCount.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsArchiveErrorCount.setDescription('The number of Incoming SMS messages that could not be archived since device was reloaded.')
c3gSmsArchiveUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsArchiveUrl.setStatus('current')
if mibBuilder.loadTexts: c3gSmsArchiveUrl.setDescription('URL of the sms archive directory on the ftp server. The url will be of this format ftp://x.y.z.k/user/dirname')
c3gSmsOutSmsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("copySmsHeader", 3), ("copySmsBody", 4), ("sent", 5), ("receivedSentNotification", 6), ("receivedOutMsgNumber", 7), ("receivedOutMsgStatus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsOutSmsStatus.setStatus('current')
if mibBuilder.loadTexts: c3gSmsOutSmsStatus.setDescription('Status of the last send operation of outgoing SMS message to the network.')
c3gSmsInSmsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsCount.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsCount.setDescription("Number of SMS messages which have been received successfully and stored in router. These SMS's are a mirror copy of SMS stored in Modem or SIM")
c3gSmsInSmsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsDeleted.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsDeleted.setDescription('Number of SMS messages which have been deleted since router boot up. This does not include SMS messages that are already archived.')
c3gSmsInSmsStorageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 12), Counter64()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsStorageMax.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsStorageMax.setDescription("Number of SMS message records space allocated in the router's DRAM to store Incoming SMS messages.")
c3gSmsInSmsCallBack = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 13), Counter32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsCallBack.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsCallBack.setDescription('Number of incoming SMS messages that triggered callback.')
c3gSmsOutSmsPendingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 14), Gauge32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsOutSmsPendingCount.setStatus('current')
if mibBuilder.loadTexts: c3gSmsOutSmsPendingCount.setDescription('Number of outgoing SMS messages that are in pending queue of the router.')
c3gSmsOutSmsArchiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 15), Gauge32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsOutSmsArchiveCount.setStatus('current')
if mibBuilder.loadTexts: c3gSmsOutSmsArchiveCount.setDescription('Number of successfull archive of outgoing SMS messages since router reload.')
c3gSmsOutSmsArchiveErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 16), Gauge32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsOutSmsArchiveErrorCount.setStatus('current')
if mibBuilder.loadTexts: c3gSmsOutSmsArchiveErrorCount.setDescription('Number of failed archive of outgoing SMS messages since router reload.')
c3gSmsInSmsArchived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 661, 1, 5, 1, 1, 1, 17), Gauge32()).setUnits('msgs').setMaxAccess("readonly")
if mibBuilder.loadTexts: c3gSmsInSmsArchived.setStatus('current')
if mibBuilder.loadTexts: c3gSmsInSmsArchived.setDescription('Number of Incoming SMS messages that are successfully archived since router reload.')
c3gModemUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 1)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: c3gModemUpNotif.setStatus('current')
if mibBuilder.loadTexts: c3gModemUpNotif.setDescription('This is the notification that the modem has been detected by host interface. Users can enable or disable the generation of this notification by using object c3gModemUpNotifEnabled.')
c3gModemDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: c3gModemDownNotif.setStatus('current')
if mibBuilder.loadTexts: c3gModemDownNotif.setDescription('This is the notification that the modem has not been detected by host interface, or has been disconnected from host interface. Users can enable or disable the generation of this notification by using object c3gModemDownNotifEnabled.')
c3gServiceChangedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 3)).setObjects(("CISCO-WAN-3G-MIB", "c3gPreviousServiceType"), ("CISCO-WAN-3G-MIB", "c3gCurrentServiceType"))
if mibBuilder.loadTexts: c3gServiceChangedNotif.setStatus('current')
if mibBuilder.loadTexts: c3gServiceChangedNotif.setDescription('Notification for service change event. Objects c3gPreviousServiceType and c3gCurrentServiceType will be included in the notification. Users can enable or disable the generation of this notification by using object c3gServiceChangedNotifEnabled.')
c3gNetworkChangedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 4)).setObjects(("CISCO-WAN-3G-MIB", "c3gCurrentSid"), ("CISCO-WAN-3G-MIB", "c3gCurrentNid"), ("CISCO-WAN-3G-MIB", "c3gGsmMcc"), ("CISCO-WAN-3G-MIB", "c3gGsmMnc"), ("CISCO-WAN-3G-MIB", "c3gRoamingStatus"))
if mibBuilder.loadTexts: c3gNetworkChangedNotif.setStatus('current')
if mibBuilder.loadTexts: c3gNetworkChangedNotif.setDescription('Notification for network change event. Objects c3gCurrentSid, c3gCurrentNid, c3gGsmMcc, c3gGsmMnc and c3gRoamingStatus will be included in the notification. Users can enable or disable the generation of this notification by using object c3gNetworkChangedNotifEnabled.')
c3gConnectionStatusChangedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 5)).setObjects(("CISCO-WAN-3G-MIB", "c3gConnectionStatus"), ("CISCO-WAN-3G-MIB", "c3gCurrentServiceType"))
if mibBuilder.loadTexts: c3gConnectionStatusChangedNotif.setStatus('current')
if mibBuilder.loadTexts: c3gConnectionStatusChangedNotif.setDescription('Notification for connection status change event. Objects c3gConnectionStatus and c3gCurrentServiceType will be included in the notification. Users can use object c3gConnectionStatusChangedNotifFlag to control what connection status changes will cause the generation of this notification.')
c3gRssiOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 6)).setObjects(("CISCO-WAN-3G-MIB", "c3gNotifRadioService"), ("CISCO-WAN-3G-MIB", "c3gNotifRssi"))
if mibBuilder.loadTexts: c3gRssiOnsetNotif.setStatus('current')
if mibBuilder.loadTexts: c3gRssiOnsetNotif.setDescription('If RSSI goes below c3gRssiOnsetNotifThreshold and the service bit in c3gRssiOnsetNotifFlag is set, this notification will be generated. Object c3gNotifRadioService will indicate which service generates this notification and the associated RSSI will be reported in c3gNotifRssi. Please note that c3gNotifRssi is used to indicate the RSSI value that triggers the notification, user should go to the corresponding radio table to get the current RSSI value.')
c3gRssiAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 7)).setObjects(("CISCO-WAN-3G-MIB", "c3gNotifRadioService"), ("CISCO-WAN-3G-MIB", "c3gNotifRssi"))
if mibBuilder.loadTexts: c3gRssiAbateNotif.setStatus('current')
if mibBuilder.loadTexts: c3gRssiAbateNotif.setDescription('If RSSI goes above c3gRssiAbateNotifThreshold and the service bit in c3gRssiAbateNotifFlag is set, this notification will be generated. Object c3gNotifRadioService will indicate which service generates this notification and the associated RSSI will be reported in c3gNotifRssi. Please note that c3gNotifRssi is used to indicate the RSSI value that triggers the notification, user should go to the corresponding radio table to get the current RSSI value.')
c3gEcIoOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 8)).setObjects(("CISCO-WAN-3G-MIB", "c3gNotifRadioService"), ("CISCO-WAN-3G-MIB", "c3gNotifEcIo"))
if mibBuilder.loadTexts: c3gEcIoOnsetNotif.setStatus('current')
if mibBuilder.loadTexts: c3gEcIoOnsetNotif.setDescription('If Ec/Io goes below c3gEcIoOnsetNotifThreshold and the service bit in c3gEcIoOnsetNotifFlag is set, this notification will be generated. Object c3gNotifRadioService will indicate which service generates this notification and the associated Ec/Io will be reported in c3gNotifEcIo. Please note that c3gNotifEcIo is used to indicate the Ec/Io value that triggers the notification, user should go to the corresponding radio table to get the current Ec/Io value.')
c3gEcIoAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 9)).setObjects(("CISCO-WAN-3G-MIB", "c3gNotifRadioService"), ("CISCO-WAN-3G-MIB", "c3gNotifEcIo"))
if mibBuilder.loadTexts: c3gEcIoAbateNotif.setStatus('current')
if mibBuilder.loadTexts: c3gEcIoAbateNotif.setDescription('If Ec/Io goes above c3gEcIoAbateNotifThreshold and the service bit in c3gEcIoAbateNotifFlag is set, this notification will be generated. Object c3gNotifRadioService will indicate which service generates this notification and the associated Ec/Io will be reported in c3gNotifEcIo. Please note that c3gNotifEcIo is used to indicate the Ec/Io value that triggers the notification, user should go to the corresponding radio table to get the current Ec/Io value.')
c3gModemTemperOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 10)).setObjects(("CISCO-WAN-3G-MIB", "c3gModemTemperature"))
if mibBuilder.loadTexts: c3gModemTemperOnsetNotif.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperOnsetNotif.setDescription("If modem temperature goes above c3gModemTemperOnsetNotifThreshold and the value of c3gModemTemperOnsetNotifEnabled is 'true', this notification will be generated and the current value of c3gModemTemperature will be included in this notification.")
c3gModemTemperAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 11)).setObjects(("CISCO-WAN-3G-MIB", "c3gModemTemperature"))
if mibBuilder.loadTexts: c3gModemTemperAbateNotif.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperAbateNotif.setDescription("If modem temperature goes below c3gModemTemperAbateNotifThreshold and the value of c3gModemTemperAbateNotifEnabled is 'true', this notification will be generated and the current value of c3gModemTemperature will be included in this notification.")
c3gModemTemperOnsetRecoveryNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 12)).setObjects(("CISCO-WAN-3G-MIB", "c3gModemTemperature"))
if mibBuilder.loadTexts: c3gModemTemperOnsetRecoveryNotif.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperOnsetRecoveryNotif.setDescription("This trap is generated as a recovery notification for c3gModemTemperOnsetNotif.This trap is generated when the current value of c3gModemTemperature goes below c3gModemTemperOnsetNotifThreshold once it has generated the c3gModemTemperOnsetNotif and the value of c3gModemTemperOnsetNotifEnabled is 'true'. c3gModemTemperature contains the current value of modem temperature.")
c3gModemTemperAbateRecoveryNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 661, 0, 13)).setObjects(("CISCO-WAN-3G-MIB", "c3gModemTemperature"))
if mibBuilder.loadTexts: c3gModemTemperAbateRecoveryNotif.setStatus('current')
if mibBuilder.loadTexts: c3gModemTemperAbateRecoveryNotif.setDescription("This trap is generated as a recovery notification for c3gModemTemperAbateNotif.This trap is generated when the current value of c3gModemTemperature goes above c3gModemTemperAbateNotifThreshold once it has generated the c3gModemTemperAbateNotif and the value of c3gModemTemperAbateNotifEnabled is 'true' c3gModemTemperature contains the current value of modem temperature")
ciscoWan3gMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 1))
ciscoWan3gMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 2))
ciscoWan3gMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 1, 1)).setObjects(("CISCO-WAN-3G-MIB", "ciscoWan3gMIBNotificationGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBCommonObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBCdmaObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBGsmObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBSmsObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBLbsObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBCompliance = ciscoWan3gMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWan3gMIBCompliance.setDescription('This is a default module-compliance containing default object groups.')
ciscoWan3gMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 1, 2)).setObjects(("CISCO-WAN-3G-MIB", "ciscoWan3gMIBNotificationGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBCommonObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBCdmaObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBGsmObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBSmsObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBLbsObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBCompliance1 = ciscoWan3gMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWan3gMIBCompliance1.setDescription('The compliance statement for the CISCO-WAN-3G-MIB.')
ciscoWan3gMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 1, 3)).setObjects(("CISCO-WAN-3G-MIB", "ciscoWan3gMIBNotificationGroupRev1"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBCommonObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBCdmaObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBGsmObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBSmsObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBLbsObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBComplianceRev1 = ciscoWan3gMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoWan3gMIBComplianceRev1.setDescription('This is a default module-compliance containing default object groups.')
ciscoWan3gMIBCompliance1Rev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 1, 4)).setObjects(("CISCO-WAN-3G-MIB", "ciscoWan3gMIBNotificationGroupRev1"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBCommonObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBCdmaObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBGsmObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBSmsObjectGroup"), ("CISCO-WAN-3G-MIB", "ciscoWan3gMIBLbsObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBCompliance1Rev1 = ciscoWan3gMIBCompliance1Rev1.setStatus('current')
if mibBuilder.loadTexts: ciscoWan3gMIBCompliance1Rev1.setDescription('The compliance statement for the CISCO-WAN-3G-MIB.')
ciscoWan3gMIBCommonObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 2, 1)).setObjects(("CISCO-WAN-3G-MIB", "c3gStandard"), ("CISCO-WAN-3G-MIB", "c3gCapability"), ("CISCO-WAN-3G-MIB", "c3gModemState"), ("CISCO-WAN-3G-MIB", "c3gPreviousServiceType"), ("CISCO-WAN-3G-MIB", "c3gCurrentServiceType"), ("CISCO-WAN-3G-MIB", "c3gRoamingStatus"), ("CISCO-WAN-3G-MIB", "c3gCurrentSystemTime"), ("CISCO-WAN-3G-MIB", "c3gConnectionStatus"), ("CISCO-WAN-3G-MIB", "c3gNotifRadioService"), ("CISCO-WAN-3G-MIB", "c3gNotifRssi"), ("CISCO-WAN-3G-MIB", "c3gNotifEcIo"), ("CISCO-WAN-3G-MIB", "c3gModemTemperature"), ("CISCO-WAN-3G-MIB", "c3gRssiOnsetNotifThreshold"), ("CISCO-WAN-3G-MIB", "c3gRssiAbateNotifThreshold"), ("CISCO-WAN-3G-MIB", "c3gEcIoOnsetNotifThreshold"), ("CISCO-WAN-3G-MIB", "c3gEcIoAbateNotifThreshold"), ("CISCO-WAN-3G-MIB", "c3gModemTemperOnsetNotifThreshold"), ("CISCO-WAN-3G-MIB", "c3gModemTemperAbateNotifThreshold"), ("CISCO-WAN-3G-MIB", "c3gModemReset"), ("CISCO-WAN-3G-MIB", "c3gModemUpNotifEnabled"), ("CISCO-WAN-3G-MIB", "c3gModemDownNotifEnabled"), ("CISCO-WAN-3G-MIB", "c3gServiceChangedNotifEnabled"), ("CISCO-WAN-3G-MIB", "c3gNetworkChangedNotifEnabled"), ("CISCO-WAN-3G-MIB", "c3gConnectionStatusChangedNotifFlag"), ("CISCO-WAN-3G-MIB", "c3gRssiOnsetNotifFlag"), ("CISCO-WAN-3G-MIB", "c3gRssiAbateNotifFlag"), ("CISCO-WAN-3G-MIB", "c3gEcIoOnsetNotifFlag"), ("CISCO-WAN-3G-MIB", "c3gEcIoAbateNotifFlag"), ("CISCO-WAN-3G-MIB", "c3gModemTemperOnsetNotifEnabled"), ("CISCO-WAN-3G-MIB", "c3gModemTemperAbateNotifEnabled"), ("CISCO-WAN-3G-MIB", "c3gGpsState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBCommonObjectGroup = ciscoWan3gMIBCommonObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWan3gMIBCommonObjectGroup.setDescription('A collection of common objects for Cellular interface.')
ciscoWan3gMIBCdmaObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 2, 2)).setObjects(("CISCO-WAN-3G-MIB", "c3gCdmaTotalCallDuration"), ("CISCO-WAN-3G-MIB", "c3gCdmaTotalTransmitted"), ("CISCO-WAN-3G-MIB", "c3gCdmaTotalReceived"), ("CISCO-WAN-3G-MIB", "c3gHdrDdtmPreference"), ("CISCO-WAN-3G-MIB", "c3gOutgoingCallNumber"), ("CISCO-WAN-3G-MIB", "c3gHdrAtState"), ("CISCO-WAN-3G-MIB", "c3gHdrSessionState"), ("CISCO-WAN-3G-MIB", "c3gUati"), ("CISCO-WAN-3G-MIB", "c3gColorCode"), ("CISCO-WAN-3G-MIB", "c3gRati"), ("CISCO-WAN-3G-MIB", "c3gHdrSessionDuration"), ("CISCO-WAN-3G-MIB", "c3gHdrSessionStart"), ("CISCO-WAN-3G-MIB", "c3gHdrSessionEnd"), ("CISCO-WAN-3G-MIB", "c3gAuthStatus"), ("CISCO-WAN-3G-MIB", "c3gHdrDrc"), ("CISCO-WAN-3G-MIB", "c3gHdrDrcCover"), ("CISCO-WAN-3G-MIB", "c3gHdrRri"), ("CISCO-WAN-3G-MIB", "c3gCdmaCurrentTransmitted"), ("CISCO-WAN-3G-MIB", "c3gCdmaCurrentReceived"), ("CISCO-WAN-3G-MIB", "c3gCdmaCurrentCallStatus"), ("CISCO-WAN-3G-MIB", "c3gCdmaCurrentCallDuration"), ("CISCO-WAN-3G-MIB", "c3gCdmaCurrentCallType"), ("CISCO-WAN-3G-MIB", "c3gCdmaLastCallDisconnReason"), ("CISCO-WAN-3G-MIB", "c3gCdmaLastConnError"), ("CISCO-WAN-3G-MIB", "c3gMobileIpErrorCode"), ("CISCO-WAN-3G-MIB", "c3gEsn"), ("CISCO-WAN-3G-MIB", "c3gModemActivationStatus"), ("CISCO-WAN-3G-MIB", "c3gAccountActivationDate"), ("CISCO-WAN-3G-MIB", "c3gCdmaRoamingPreference"), ("CISCO-WAN-3G-MIB", "c3gPrlVersion"), ("CISCO-WAN-3G-MIB", "c3gMdn"), ("CISCO-WAN-3G-MIB", "c3gMsid"), ("CISCO-WAN-3G-MIB", "c3gMsl"), ("CISCO-WAN-3G-MIB", "c3gCdmaCurrentServiceStatus"), ("CISCO-WAN-3G-MIB", "c3gCdmaHybridModePreference"), ("CISCO-WAN-3G-MIB", "c3gCdmaCurrentRoamingStatus"), ("CISCO-WAN-3G-MIB", "c3gCurrentIdleDigitalMode"), ("CISCO-WAN-3G-MIB", "c3gCurrentSid"), ("CISCO-WAN-3G-MIB", "c3gCurrentNid"), ("CISCO-WAN-3G-MIB", "c3gCurrentCallSetupMode"), ("CISCO-WAN-3G-MIB", "c3gSipUsername"), ("CISCO-WAN-3G-MIB", "c3gSipPassword"), ("CISCO-WAN-3G-MIB", "c3gServingBaseStationLongitude"), ("CISCO-WAN-3G-MIB", "c3gServingBaseStationLatitude"), ("CISCO-WAN-3G-MIB", "c3gNumberOfDataProfileConfigurable"), ("CISCO-WAN-3G-MIB", "c3gCurrentActiveDataProfile"), ("CISCO-WAN-3G-MIB", "c3gNai"), ("CISCO-WAN-3G-MIB", "c3gAaaPassword"), ("CISCO-WAN-3G-MIB", "c3gMnHaSs"), ("CISCO-WAN-3G-MIB", "c3gMnHaSpi"), ("CISCO-WAN-3G-MIB", "c3gMnAaaSs"), ("CISCO-WAN-3G-MIB", "c3gMnAaaSpi"), ("CISCO-WAN-3G-MIB", "c3gReverseTunnelPreference"), ("CISCO-WAN-3G-MIB", "c3gHomeAddrType"), ("CISCO-WAN-3G-MIB", "c3gHomeAddr"), ("CISCO-WAN-3G-MIB", "c3gPriHaAddrType"), ("CISCO-WAN-3G-MIB", "c3gPriHaAddr"), ("CISCO-WAN-3G-MIB", "c3gSecHaAddrType"), ("CISCO-WAN-3G-MIB", "c3gSecHaAddr"), ("CISCO-WAN-3G-MIB", "c3gCurrent1xRttRssi"), ("CISCO-WAN-3G-MIB", "c3gCurrent1xRttEcIo"), ("CISCO-WAN-3G-MIB", "c3gCurrent1xRttChannelNumber"), ("CISCO-WAN-3G-MIB", "c3gCurrent1xRttChannelState"), ("CISCO-WAN-3G-MIB", "c3gCurrentEvDoRssi"), ("CISCO-WAN-3G-MIB", "c3gCurrentEvDoEcIo"), ("CISCO-WAN-3G-MIB", "c3gCurrentEvDoChannelNumber"), ("CISCO-WAN-3G-MIB", "c3gSectorId"), ("CISCO-WAN-3G-MIB", "c3gSubnetMask"), ("CISCO-WAN-3G-MIB", "c3gHdrColorCode"), ("CISCO-WAN-3G-MIB", "c3gPnOffset"), ("CISCO-WAN-3G-MIB", "c3gRxMainGainControl"), ("CISCO-WAN-3G-MIB", "c3gRxDiversityGainControl"), ("CISCO-WAN-3G-MIB", "c3gTxTotalPower"), ("CISCO-WAN-3G-MIB", "c3gTxGainAdjust"), ("CISCO-WAN-3G-MIB", "c3gCarrierToInterferenceRatio"), ("CISCO-WAN-3G-MIB", "c3g1xRttBandClass"), ("CISCO-WAN-3G-MIB", "c3gEvDoBandClass"), ("CISCO-WAN-3G-MIB", "c3gCdmaHistory1xRttRssiPerSecond"), ("CISCO-WAN-3G-MIB", "c3gCdmaHistory1xRttRssiPerMinute"), ("CISCO-WAN-3G-MIB", "c3gCdmaHistory1xRttRssiPerHour"), ("CISCO-WAN-3G-MIB", "c3gCdmaHistoryEvDoRssiPerSecond"), ("CISCO-WAN-3G-MIB", "c3gCdmaHistoryEvDoRssiPerMinute"), ("CISCO-WAN-3G-MIB", "c3gCdmaHistoryEvDoRssiPerHour"), ("CISCO-WAN-3G-MIB", "c3gCdmaPinSecurityStatus"), ("CISCO-WAN-3G-MIB", "c3gCdmaPowerUpLockStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBCdmaObjectGroup = ciscoWan3gMIBCdmaObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWan3gMIBCdmaObjectGroup.setDescription('A collection of objects for Cellular 3G CDMA.')
ciscoWan3gMIBGsmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 2, 3)).setObjects(("CISCO-WAN-3G-MIB", "c3gGsmTotalByteTransmitted"), ("CISCO-WAN-3G-MIB", "c3gGsmTotalByteReceived"), ("CISCO-WAN-3G-MIB", "c3gGsmPacketSessionStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpType"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpAddress"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosTrafficClass"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosMaxUpLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosMaxDownLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosGuaUpLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosGuaDownLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosOrder"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosErroneousSdu"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosMaxSduSize"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosSer"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosBer"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosDelay"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosPriority"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosSrcStatDescriptor"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoUmtsQosSignalIndication"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoGprsQosPrecedence"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoGprsQosDelay"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoGprsQosReliability"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoGprsQosPeakRate"), ("CISCO-WAN-3G-MIB", "c3gGsmNegoGprsQosMeanRate"), ("CISCO-WAN-3G-MIB", "c3gImsi"), ("CISCO-WAN-3G-MIB", "c3gImei"), ("CISCO-WAN-3G-MIB", "c3gIccId"), ("CISCO-WAN-3G-MIB", "c3gMsisdn"), ("CISCO-WAN-3G-MIB", "c3gFsn"), ("CISCO-WAN-3G-MIB", "c3gModemStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmRoamingPreference"), ("CISCO-WAN-3G-MIB", "c3gGsmLac"), ("CISCO-WAN-3G-MIB", "c3gGsmCurrentServiceStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmCurrentServiceError"), ("CISCO-WAN-3G-MIB", "c3gGsmCurrentService"), ("CISCO-WAN-3G-MIB", "c3gGsmPacketService"), ("CISCO-WAN-3G-MIB", "c3gGsmCurrentRoamingStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmNetworkSelectionMode"), ("CISCO-WAN-3G-MIB", "c3gGsmCountry"), ("CISCO-WAN-3G-MIB", "c3gGsmNetwork"), ("CISCO-WAN-3G-MIB", "c3gGsmMcc"), ("CISCO-WAN-3G-MIB", "c3gGsmMnc"), ("CISCO-WAN-3G-MIB", "c3gGsmRac"), ("CISCO-WAN-3G-MIB", "c3gGsmCurrentCellId"), ("CISCO-WAN-3G-MIB", "c3gGsmCurrentPrimaryScramblingCode"), ("CISCO-WAN-3G-MIB", "c3gGsmPlmnSelection"), ("CISCO-WAN-3G-MIB", "c3gGsmRegPlmn"), ("CISCO-WAN-3G-MIB", "c3gGsmPlmnAbbr"), ("CISCO-WAN-3G-MIB", "c3gGsmServiceProvider"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpProfileType"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpProfileAddr"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpProfileApn"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpProfileAuthenType"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpProfileUsername"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpProfilePassword"), ("CISCO-WAN-3G-MIB", "c3gGsmPdpProfileRowStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosTrafficClass"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosMaxUpLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosMaxDownLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosGuaUpLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosGuaDownLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosOrder"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosErroneousSdu"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosMaxSduSize"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosSer"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosBer"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosDelay"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosPriority"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosSrcStatDescriptor"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosSignalIndication"), ("CISCO-WAN-3G-MIB", "c3gGsmReqUmtsQosRowStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosTrafficClass"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosMaxUpLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosMaxDownLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosGuaUpLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosGuaDownLinkBitRate"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosOrder"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosErroneousSdu"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosMaxSduSize"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosSer"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosBer"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosDelay"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosPriority"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosSrcStatDescriptor"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosSignalIndication"), ("CISCO-WAN-3G-MIB", "c3gGsmMinUmtsQosRowStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmReqGprsQosPrecedence"), ("CISCO-WAN-3G-MIB", "c3gGsmReqGprsQosDelay"), ("CISCO-WAN-3G-MIB", "c3gGsmReqGprsQosReliability"), ("CISCO-WAN-3G-MIB", "c3gGsmReqGprsQosPeakRate"), ("CISCO-WAN-3G-MIB", "c3gGsmReqGprsQosMeanRate"), ("CISCO-WAN-3G-MIB", "c3gGsmReqGprsQosRowStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmMinGprsQosPrecedence"), ("CISCO-WAN-3G-MIB", "c3gGsmMinGprsQosDelay"), ("CISCO-WAN-3G-MIB", "c3gGsmMinGprsQosReliability"), ("CISCO-WAN-3G-MIB", "c3gGsmMinGprsQosPeakRate"), ("CISCO-WAN-3G-MIB", "c3gGsmMinGprsQosMeanRate"), ("CISCO-WAN-3G-MIB", "c3gGsmMinGprsQosRowStatus"), ("CISCO-WAN-3G-MIB", "c3gCurrentGsmRssi"), ("CISCO-WAN-3G-MIB", "c3gCurrentGsmEcIo"), ("CISCO-WAN-3G-MIB", "c3gGsmCurrentBand"), ("CISCO-WAN-3G-MIB", "c3gGsmChannelNumber"), ("CISCO-WAN-3G-MIB", "c3gGsmNumberOfNearbyCell"), ("CISCO-WAN-3G-MIB", "c3gGsmNearbyCellPrimaryScramblingCode"), ("CISCO-WAN-3G-MIB", "c3gGsmNearbyCellRscp"), ("CISCO-WAN-3G-MIB", "c3gGsmNearbyCellEcIoMeasurement"), ("CISCO-WAN-3G-MIB", "c3gGsmHistoryRssiPerSecond"), ("CISCO-WAN-3G-MIB", "c3gGsmHistoryRssiPerMinute"), ("CISCO-WAN-3G-MIB", "c3gGsmHistoryRssiPerHour"), ("CISCO-WAN-3G-MIB", "c3gGsmChv1"), ("CISCO-WAN-3G-MIB", "c3gGsmSimStatus"), ("CISCO-WAN-3G-MIB", "c3gGsmSimUserOperationRequired"), ("CISCO-WAN-3G-MIB", "c3gGsmNumberOfRetriesRemaining"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBGsmObjectGroup = ciscoWan3gMIBGsmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWan3gMIBGsmObjectGroup.setDescription('A collection of objects for Cellular 3G GSM and LTE.')
ciscoWan3gMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 2, 4)).setObjects(("CISCO-WAN-3G-MIB", "c3gModemUpNotif"), ("CISCO-WAN-3G-MIB", "c3gModemDownNotif"), ("CISCO-WAN-3G-MIB", "c3gServiceChangedNotif"), ("CISCO-WAN-3G-MIB", "c3gNetworkChangedNotif"), ("CISCO-WAN-3G-MIB", "c3gConnectionStatusChangedNotif"), ("CISCO-WAN-3G-MIB", "c3gRssiOnsetNotif"), ("CISCO-WAN-3G-MIB", "c3gEcIoOnsetNotif"), ("CISCO-WAN-3G-MIB", "c3gRssiAbateNotif"), ("CISCO-WAN-3G-MIB", "c3gEcIoAbateNotif"), ("CISCO-WAN-3G-MIB", "c3gModemTemperOnsetNotif"), ("CISCO-WAN-3G-MIB", "c3gModemTemperAbateNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBNotificationGroup = ciscoWan3gMIBNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoWan3gMIBNotificationGroup.setDescription('A collection of objects for Cellular WAN notifications. ciscoWan3gMIBNotificationGroup object is superseded by ciscoWan3gMIBNotificationGroupRev1.')
ciscoWan3gMIBLbsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 2, 5)).setObjects(("CISCO-WAN-3G-MIB", "c3gLbsModeSelected"), ("CISCO-WAN-3G-MIB", "c3gLbsState"), ("CISCO-WAN-3G-MIB", "c3gLbsLocFixError"), ("CISCO-WAN-3G-MIB", "c3gLbsLatitude"), ("CISCO-WAN-3G-MIB", "c3gLbsLongitude"), ("CISCO-WAN-3G-MIB", "c3gLbsTimeStamp"), ("CISCO-WAN-3G-MIB", "c3gLbsLocUncertaintyAngle"), ("CISCO-WAN-3G-MIB", "c3gLbsLocUncertaintyA"), ("CISCO-WAN-3G-MIB", "c3gLbsLocUncertaintyPos"), ("CISCO-WAN-3G-MIB", "c3gLbsFixtype"), ("CISCO-WAN-3G-MIB", "c3gLbsHeightValid"), ("CISCO-WAN-3G-MIB", "c3gLbsHeight"), ("CISCO-WAN-3G-MIB", "c3gLbsLocUncertaintyVertical"), ("CISCO-WAN-3G-MIB", "c3gLbsVelocityValid"), ("CISCO-WAN-3G-MIB", "c3gLbsHeading"), ("CISCO-WAN-3G-MIB", "c3gLbsVelocityHorizontal"), ("CISCO-WAN-3G-MIB", "c3gLbsVelocityVertical"), ("CISCO-WAN-3G-MIB", "c3gLbsHepe"), ("CISCO-WAN-3G-MIB", "c3gLbsNumSatellites"), ("CISCO-WAN-3G-MIB", "c3gWanLbsSatelliteNumber"), ("CISCO-WAN-3G-MIB", "c3gWanLbsSatelliteElevation"), ("CISCO-WAN-3G-MIB", "c3gWanLbsSatelliteAzimuth"), ("CISCO-WAN-3G-MIB", "c3gWanLbsSatelliteUsed"), ("CISCO-WAN-3G-MIB", "c3gWanLbsSatelliteInfoSignalNoiseRatio"), ("CISCO-WAN-3G-MIB", "c3gWanLbsSatelliteInfoRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBLbsObjectGroup = ciscoWan3gMIBLbsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWan3gMIBLbsObjectGroup.setDescription('A collection of common objects for Cellular Location Based Service.')
ciscoWan3gMIBSmsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 2, 6)).setObjects(("CISCO-WAN-3G-MIB", "c3gSmsServiceAvailable"), ("CISCO-WAN-3G-MIB", "c3gSmsOutSmsCount"), ("CISCO-WAN-3G-MIB", "c3gSmsOutSmsErrorCount"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsStorageUsed"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsStorageUnused"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsArchiveCount"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsArchiveErrorCount"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsArchived"), ("CISCO-WAN-3G-MIB", "c3gSmsArchiveUrl"), ("CISCO-WAN-3G-MIB", "c3gSmsOutSmsStatus"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsCount"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsDeleted"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsStorageMax"), ("CISCO-WAN-3G-MIB", "c3gSmsInSmsCallBack"), ("CISCO-WAN-3G-MIB", "c3gSmsOutSmsPendingCount"), ("CISCO-WAN-3G-MIB", "c3gSmsOutSmsArchiveCount"), ("CISCO-WAN-3G-MIB", "c3gSmsOutSmsArchiveErrorCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBSmsObjectGroup = ciscoWan3gMIBSmsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWan3gMIBSmsObjectGroup.setDescription('A collection of common objects for Cellular Short Messaging Service.')
ciscoWan3gMIBNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 661, 2, 2, 7)).setObjects(("CISCO-WAN-3G-MIB", "c3gModemUpNotif"), ("CISCO-WAN-3G-MIB", "c3gModemDownNotif"), ("CISCO-WAN-3G-MIB", "c3gServiceChangedNotif"), ("CISCO-WAN-3G-MIB", "c3gNetworkChangedNotif"), ("CISCO-WAN-3G-MIB", "c3gConnectionStatusChangedNotif"), ("CISCO-WAN-3G-MIB", "c3gRssiOnsetNotif"), ("CISCO-WAN-3G-MIB", "c3gEcIoOnsetNotif"), ("CISCO-WAN-3G-MIB", "c3gRssiAbateNotif"), ("CISCO-WAN-3G-MIB", "c3gEcIoAbateNotif"), ("CISCO-WAN-3G-MIB", "c3gModemTemperOnsetNotif"), ("CISCO-WAN-3G-MIB", "c3gModemTemperAbateNotif"), ("CISCO-WAN-3G-MIB", "c3gModemTemperOnsetRecoveryNotif"), ("CISCO-WAN-3G-MIB", "c3gModemTemperAbateRecoveryNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWan3gMIBNotificationGroupRev1 = ciscoWan3gMIBNotificationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoWan3gMIBNotificationGroupRev1.setDescription('A collection of objects for Cellular WAN notifications.')
mibBuilder.exportSymbols("CISCO-WAN-3G-MIB", C3gGprsQosDelay=C3gGprsQosDelay, c3gNotifRadioService=c3gNotifRadioService, c3gReverseTunnelPreference=c3gReverseTunnelPreference, c3gGsmChv1=c3gGsmChv1, c3gCurrentCallSetupMode=c3gCurrentCallSetupMode, C3gUmtsQosPriority=C3gUmtsQosPriority, c3gSmsOutSmsCount=c3gSmsOutSmsCount, c3gModemTemperAbateNotifThreshold=c3gModemTemperAbateNotifThreshold, c3gRati=c3gRati, c3gWanLbsCommonEntry=c3gWanLbsCommonEntry, c3gGsmLac=c3gGsmLac, c3gColorCode=c3gColorCode, c3gGsmRadio=c3gGsmRadio, c3gGsmReqUmtsQosGuaDownLinkBitRate=c3gGsmReqUmtsQosGuaDownLinkBitRate, c3gGsmReqUmtsQosTable=c3gGsmReqUmtsQosTable, c3gCdmaCurrentCallStatus=c3gCdmaCurrentCallStatus, c3gCdma1xRttRadioTable=c3gCdma1xRttRadioTable, c3gAccountActivationDate=c3gAccountActivationDate, c3gCdmaConnectionEntry=c3gCdmaConnectionEntry, c3gGsmReqUmtsQosPriority=c3gGsmReqUmtsQosPriority, c3gAaaPassword=c3gAaaPassword, c3gRssiOnsetNotifFlag=c3gRssiOnsetNotifFlag, c3gGsmNegoUmtsQosMaxDownLinkBitRate=c3gGsmNegoUmtsQosMaxDownLinkBitRate, ciscoWan3gMIBGsmObjectGroup=ciscoWan3gMIBGsmObjectGroup, c3gLbsLocUncertaintyVertical=c3gLbsLocUncertaintyVertical, C3gUmtsQosSignalIndication=C3gUmtsQosSignalIndication, c3gGsmServiceProvider=c3gGsmServiceProvider, c3gCdmaHistory1xRttRssiPerSecond=c3gCdmaHistory1xRttRssiPerSecond, c3gGsmReqUmtsQosOrder=c3gGsmReqUmtsQosOrder, C3gUmtsQosErroneousSdu=C3gUmtsQosErroneousSdu, c3gTxTotalPower=c3gTxTotalPower, c3gImsi=c3gImsi, c3gConnectionStatusChangedNotif=c3gConnectionStatusChangedNotif, c3gCdmaProfileIndex=c3gCdmaProfileIndex, C3gUmtsQosOrder=C3gUmtsQosOrder, c3gCdmaCurrentServiceStatus=c3gCdmaCurrentServiceStatus, c3gGpsState=c3gGpsState, c3gGsmReqUmtsQosBer=c3gGsmReqUmtsQosBer, c3gSmsInSmsArchiveCount=c3gSmsInSmsArchiveCount, c3gCurrentActiveDataProfile=c3gCurrentActiveDataProfile, c3gLbsState=c3gLbsState, c3gGsmCurrentService=c3gGsmCurrentService, c3gCdmaTotalCallDuration=c3gCdmaTotalCallDuration, c3gMsid=c3gMsid, c3gAuthStatus=c3gAuthStatus, ciscoWan3gMIBCdmaObjectGroup=ciscoWan3gMIBCdmaObjectGroup, c3gGsmReqUmtsQosErroneousSdu=c3gGsmReqUmtsQosErroneousSdu, c3gGsmHistoryRssiPerSecond=c3gGsmHistoryRssiPerSecond, c3gModemTemperOnsetRecoveryNotif=c3gModemTemperOnsetRecoveryNotif, c3gGsmMinUmtsQosBer=c3gGsmMinUmtsQosBer, c3gGsmMinUmtsQosPriority=c3gGsmMinUmtsQosPriority, c3gCdmaSecurityTable=c3gCdmaSecurityTable, c3gCdma1xRttRadioEntry=c3gCdma1xRttRadioEntry, c3gGsmNegoUmtsQosErroneousSdu=c3gGsmNegoUmtsQosErroneousSdu, c3gGsmMinUmtsQosTable=c3gGsmMinUmtsQosTable, c3gGsmCurrentBand=c3gGsmCurrentBand, c3gCdmaHistory1xRttRssiPerHour=c3gCdmaHistory1xRttRssiPerHour, c3gLbsHeightValid=c3gLbsHeightValid, c3gGsmNearbyCellRscp=c3gGsmNearbyCellRscp, c3gGsmReqUmtsQosTrafficClass=c3gGsmReqUmtsQosTrafficClass, c3gGsmRac=c3gGsmRac, c3gStandard=c3gStandard, c3gLbsLatitude=c3gLbsLatitude, c3gLbsLocUncertaintyAngle=c3gLbsLocUncertaintyAngle, c3gSubnetMask=c3gSubnetMask, c3gGsmNegoUmtsQosMaxUpLinkBitRate=c3gGsmNegoUmtsQosMaxUpLinkBitRate, c3gLbsHeight=c3gLbsHeight, c3gMsl=c3gMsl, c3gCdmaHistory1xRttRssiPerMinute=c3gCdmaHistory1xRttRssiPerMinute, c3gGsmMinUmtsQosSrcStatDescriptor=c3gGsmMinUmtsQosSrcStatDescriptor, c3gCdmaConnectionTable=c3gCdmaConnectionTable, c3gPriHaAddr=c3gPriHaAddr, c3gGsmNegoUmtsQosGuaUpLinkBitRate=c3gGsmNegoUmtsQosGuaUpLinkBitRate, c3gEcIoOnsetNotifThreshold=c3gEcIoOnsetNotifThreshold, c3gWanLbsSatelliteNumber=c3gWanLbsSatelliteNumber, c3gWanGsm=c3gWanGsm, c3gServingBaseStationLatitude=c3gServingBaseStationLatitude, c3gSmsInSmsCallBack=c3gSmsInSmsCallBack, C3gUmtsQosSer=C3gUmtsQosSer, c3gModemDownNotifEnabled=c3gModemDownNotifEnabled, c3gCdmaTotalTransmitted=c3gCdmaTotalTransmitted, c3gCurrent1xRttEcIo=c3gCurrent1xRttEcIo, c3gGsmCountry=c3gGsmCountry, c3gGsmHistoryRssiPerHour=c3gGsmHistoryRssiPerHour, c3gModemActivationStatus=c3gModemActivationStatus, c3gCdmaPowerUpLockStatus=c3gCdmaPowerUpLockStatus, c3gCdmaCurrentCallType=c3gCdmaCurrentCallType, c3gGsmReqUmtsQosSignalIndication=c3gGsmReqUmtsQosSignalIndication, c3gCurrent1xRttRssi=c3gCurrent1xRttRssi, c3gGsmPacketSessionEntry=c3gGsmPacketSessionEntry, c3gSmsOutSmsStatus=c3gSmsOutSmsStatus, c3gGsmNetworkSelectionMode=c3gGsmNetworkSelectionMode, c3gModemTemperOnsetNotif=c3gModemTemperOnsetNotif, c3gCarrierToInterferenceRatio=c3gCarrierToInterferenceRatio, c3gSmsArchiveUrl=c3gSmsArchiveUrl, c3gLbsNumSatellites=c3gLbsNumSatellites, c3gCdmaCurrentRoamingStatus=c3gCdmaCurrentRoamingStatus, ciscoWan3gMIBCompliances=ciscoWan3gMIBCompliances, c3gSmsOutSmsArchiveErrorCount=c3gSmsOutSmsArchiveErrorCount, c3gGsmMinUmtsQosDelay=c3gGsmMinUmtsQosDelay, c3gModemTemperAbateNotifEnabled=c3gModemTemperAbateNotifEnabled, c3gCdmaLastConnError=c3gCdmaLastConnError, c3gWanLbsSatelliteInfoIndex=c3gWanLbsSatelliteInfoIndex, c3gGsmNearbyCellEcIoMeasurement=c3gGsmNearbyCellEcIoMeasurement, c3gGsmNumberOfRetriesRemaining=c3gGsmNumberOfRetriesRemaining, c3gWanSmsCommon=c3gWanSmsCommon, c3gGsmNegoGprsQosEntry=c3gGsmNegoGprsQosEntry, c3gGsmNegoUmtsQosPriority=c3gGsmNegoUmtsQosPriority, c3gCdmaSessionEntry=c3gCdmaSessionEntry, c3gHdrAtState=c3gHdrAtState, c3gGsmHistoryRssiPerMinute=c3gGsmHistoryRssiPerMinute, c3gNotifEcIo=c3gNotifEcIo, c3gLbsHeading=c3gLbsHeading, c3gGsmRoamingPreference=c3gGsmRoamingPreference, c3gGsmNegoUmtsQosTable=c3gGsmNegoUmtsQosTable, c3gWanLbsSatelliteElevation=c3gWanLbsSatelliteElevation, C3gTemperature=C3gTemperature, c3gGsmMinUmtsQosEntry=c3gGsmMinUmtsQosEntry, c3gWanCdma=c3gWanCdma, c3gGsmNegoUmtsQosSignalIndication=c3gGsmNegoUmtsQosSignalIndication, c3gGsmPacketSessionTable=c3gGsmPacketSessionTable, c3gHdrDrcCover=c3gHdrDrcCover, C3gUmtsQosTrafficClass=C3gUmtsQosTrafficClass, c3gMnHaSpi=c3gMnHaSpi, c3gGsmMinGprsQosReliability=c3gGsmMinGprsQosReliability, c3gCdmaSecurityEntry=c3gCdmaSecurityEntry, c3gNumberOfDataProfileConfigurable=c3gNumberOfDataProfileConfigurable, c3gGsmSecurityTable=c3gGsmSecurityTable, ciscoWan3gMIBCompliance1Rev1=ciscoWan3gMIBCompliance1Rev1, ciscoWan3gMIBCommonObjectGroup=ciscoWan3gMIBCommonObjectGroup, c3gCdmaProfileCommonEntry=c3gCdmaProfileCommonEntry, c3gNai=c3gNai, c3gGsmNearbyCellPrimaryScramblingCode=c3gGsmNearbyCellPrimaryScramblingCode, c3gGsmNetwork=c3gGsmNetwork, c3gGsmSecurity=c3gGsmSecurity, c3gModemTemperOnsetNotifEnabled=c3gModemTemperOnsetNotifEnabled, C3gGprsQosPrecedence=C3gGprsQosPrecedence, c3gCdmaHistoryEntry=c3gCdmaHistoryEntry, c3gEcIoAbateNotifThreshold=c3gEcIoAbateNotifThreshold, c3gGsmReqUmtsQosEntry=c3gGsmReqUmtsQosEntry, c3gWanSms=c3gWanSms, ciscoWan3gMIBConform=ciscoWan3gMIBConform, c3gGsmCurrentPrimaryScramblingCode=c3gGsmCurrentPrimaryScramblingCode, c3gWanLbsSatelliteInfoRowStatus=c3gWanLbsSatelliteInfoRowStatus, ciscoWan3gMIBObjects=ciscoWan3gMIBObjects, c3gFsn=c3gFsn, c3gGsmSimStatus=c3gGsmSimStatus, c3gGsmCurrentServiceStatus=c3gGsmCurrentServiceStatus, c3gPriHaAddrType=c3gPriHaAddrType, c3gCdmaProfile=c3gCdmaProfile, c3gCdmaCurrentCallDuration=c3gCdmaCurrentCallDuration, c3gLbsLocFixError=c3gLbsLocFixError, C3gUmtsQosSrcStatDescriptor=C3gUmtsQosSrcStatDescriptor, c3gGsmPdpAddress=c3gGsmPdpAddress, c3gHdrColorCode=c3gHdrColorCode, c3gGsmMinUmtsQosMaxSduSize=c3gGsmMinUmtsQosMaxSduSize, c3gGsmNegoUmtsQosEntry=c3gGsmNegoUmtsQosEntry, c3gCdmaHistoryTable=c3gCdmaHistoryTable, c3gGsmHistoryTable=c3gGsmHistoryTable, c3gEcIoOnsetNotifFlag=c3gEcIoOnsetNotifFlag, c3gNetworkChangedNotif=c3gNetworkChangedNotif, c3gGsmCurrentServiceError=c3gGsmCurrentServiceError, c3gCdmaRoamingPreference=c3gCdmaRoamingPreference, c3gCdmaCurrentTransmitted=c3gCdmaCurrentTransmitted, c3g1xRttBandClass=c3g1xRttBandClass, c3gCurrentEvDoChannelNumber=c3gCurrentEvDoChannelNumber, c3gWanLbsSatelliteAzimuth=c3gWanLbsSatelliteAzimuth, c3gGsmMinGprsQosDelay=c3gGsmMinGprsQosDelay, c3gImei=c3gImei, c3gLbsVelocityValid=c3gLbsVelocityValid, c3gGsmTotalByteReceived=c3gGsmTotalByteReceived, ciscoWan3gMIBNotifs=ciscoWan3gMIBNotifs, c3gGsmNegoGprsQosMeanRate=c3gGsmNegoGprsQosMeanRate, c3gConnectionStatusChangedNotifFlag=c3gConnectionStatusChangedNotifFlag, c3gGsmPdpProfileAddr=c3gGsmPdpProfileAddr, c3gLbsVelocityHorizontal=c3gLbsVelocityHorizontal, c3gModemStatus=c3gModemStatus, c3gMdn=c3gMdn, c3gCdmaEvDoRadioEntry=c3gCdmaEvDoRadioEntry, c3gGsmPacketService=c3gGsmPacketService, c3gGsmMinGprsQosMeanRate=c3gGsmMinGprsQosMeanRate, c3gLbsModeSelected=c3gLbsModeSelected, c3gGsmReqUmtsQosMaxUpLinkBitRate=c3gGsmReqUmtsQosMaxUpLinkBitRate, c3gGsmMinGprsQosPeakRate=c3gGsmMinGprsQosPeakRate, c3gSmsCommonTable=c3gSmsCommonTable, c3gCdmaEvDoBandClassTable=c3gCdmaEvDoBandClassTable, c3gSmsServiceAvailable=c3gSmsServiceAvailable, c3gCdmaNetworkTable=c3gCdmaNetworkTable, c3gModemState=c3gModemState, c3gGsmReqUmtsQosRowStatus=c3gGsmReqUmtsQosRowStatus, c3gGsmRegPlmn=c3gGsmRegPlmn, c3gGsmReqUmtsQosGuaUpLinkBitRate=c3gGsmReqUmtsQosGuaUpLinkBitRate, c3gGsmHistoryEntry=c3gGsmHistoryEntry, c3gCurrentGsmEcIo=c3gCurrentGsmEcIo, c3gHdrDdtmPreference=c3gHdrDdtmPreference, c3gWanLbsCommon=c3gWanLbsCommon, c3gMnAaaSpi=c3gMnAaaSpi, c3gSmsInSmsCount=c3gSmsInSmsCount, c3gCurrentIdleDigitalMode=c3gCurrentIdleDigitalMode, c3gGsmMinUmtsQosErroneousSdu=c3gGsmMinUmtsQosErroneousSdu, c3gEsn=c3gEsn, c3gGsmSimUserOperationRequired=c3gGsmSimUserOperationRequired, c3gGsmPacketSessionStatus=c3gGsmPacketSessionStatus, c3gGsmNegoGprsQosReliability=c3gGsmNegoGprsQosReliability, c3gSmsInSmsDeleted=c3gSmsInSmsDeleted, c3gGsmMinUmtsQosMaxUpLinkBitRate=c3gGsmMinUmtsQosMaxUpLinkBitRate, c3gServiceChangedNotifEnabled=c3gServiceChangedNotifEnabled, c3gGsmReqUmtsQosDelay=c3gGsmReqUmtsQosDelay, c3gCurrentServiceType=c3gCurrentServiceType, c3gMsisdn=c3gMsisdn, c3gGsmReqGprsQosPrecedence=c3gGsmReqGprsQosPrecedence, C3gEcIo=C3gEcIo, c3gGsmMcc=c3gGsmMcc, c3gCdmaPinSecurityStatus=c3gCdmaPinSecurityStatus, c3gGsmTotalByteTransmitted=c3gGsmTotalByteTransmitted, c3gCurrentSystemTime=c3gCurrentSystemTime, c3gCdmaHistoryEvDoRssiPerHour=c3gCdmaHistoryEvDoRssiPerHour, c3gHomeAddr=c3gHomeAddr, c3gCurrentSid=c3gCurrentSid, c3gWanCommonEntry=c3gWanCommonEntry, c3gGsmReqGprsQosRowStatus=c3gGsmReqGprsQosRowStatus, c3gModemUpNotifEnabled=c3gModemUpNotifEnabled, c3gGsmMinUmtsQosSer=c3gGsmMinUmtsQosSer, c3gWanLbsCommonTable=c3gWanLbsCommonTable, c3gGsmNetworkEntry=c3gGsmNetworkEntry, c3gModemTemperOnsetNotifThreshold=c3gModemTemperOnsetNotifThreshold, c3gCdmaProfileCommonTable=c3gCdmaProfileCommonTable, c3gRssiAbateNotifThreshold=c3gRssiAbateNotifThreshold, c3gCapability=c3gCapability, c3gGsmMinUmtsQosSignalIndication=c3gGsmMinUmtsQosSignalIndication, c3gHdrRri=c3gHdrRri, c3gSmsInSmsArchiveErrorCount=c3gSmsInSmsArchiveErrorCount, C3gPdpType=C3gPdpType, c3gRssiAbateNotifFlag=c3gRssiAbateNotifFlag, c3gServingBaseStationLongitude=c3gServingBaseStationLongitude, c3gGsmIdentityTable=c3gGsmIdentityTable, c3gTxGainAdjust=c3gTxGainAdjust, c3gCdmaTotalReceived=c3gCdmaTotalReceived, c3gModemTemperature=c3gModemTemperature, c3gGsmReqUmtsQosMaxSduSize=c3gGsmReqUmtsQosMaxSduSize, c3gGsmNegoUmtsQosDelay=c3gGsmNegoUmtsQosDelay, c3gCdmaRadio=c3gCdmaRadio, c3gModemTemperAbateNotif=c3gModemTemperAbateNotif, c3gGsmIdentityEntry=c3gGsmIdentityEntry, c3gGsmNegoGprsQosPrecedence=c3gGsmNegoGprsQosPrecedence, c3gSmsCommonEntry=c3gSmsCommonEntry, c3gGsmMinGprsQosRowStatus=c3gGsmMinGprsQosRowStatus, c3gGsmPlmnSelection=c3gGsmPlmnSelection, ciscoWan3gMIBCompliance1=ciscoWan3gMIBCompliance1, c3gHomeAddrType=c3gHomeAddrType, c3gLbsVelocityVertical=c3gLbsVelocityVertical, c3gGsmRadioTable=c3gGsmRadioTable, c3gRoamingStatus=c3gRoamingStatus, c3gCdmaHybridModePreference=c3gCdmaHybridModePreference)
mibBuilder.exportSymbols("CISCO-WAN-3G-MIB", c3gRxDiversityGainControl=c3gRxDiversityGainControl, c3gHdrDrc=c3gHdrDrc, C3gUmtsQosBer=C3gUmtsQosBer, c3gCurrentEvDoRssi=c3gCurrentEvDoRssi, c3gCdmaEvDoRadioTable=c3gCdmaEvDoRadioTable, c3gCdmaIdentityEntry=c3gCdmaIdentityEntry, c3gGsmNearbyCellEntry=c3gGsmNearbyCellEntry, c3gGsmPdpProfileUsername=c3gGsmPdpProfileUsername, c3gBandClassIndex=c3gBandClassIndex, c3gGsmMinGprsQosTable=c3gGsmMinGprsQosTable, c3gGsmSecurityEntry=c3gGsmSecurityEntry, c3gRssiAbateNotif=c3gRssiAbateNotif, ciscoWan3gMIBLbsObjectGroup=ciscoWan3gMIBLbsObjectGroup, c3gLbsLocUncertaintyPos=c3gLbsLocUncertaintyPos, c3gGsmNegoUmtsQosOrder=c3gGsmNegoUmtsQosOrder, c3gIccId=c3gIccId, c3gWanLbsSatelliteInfoTable=c3gWanLbsSatelliteInfoTable, c3gCdmaSessionTable=c3gCdmaSessionTable, c3gUati=c3gUati, c3gLbsFixtype=c3gLbsFixtype, c3gGsmMinGprsQosPrecedence=c3gGsmMinGprsQosPrecedence, c3gGsmReqUmtsQosMaxDownLinkBitRate=c3gGsmReqUmtsQosMaxDownLinkBitRate, c3gOutgoingCallNumber=c3gOutgoingCallNumber, c3gGsmReqGprsQosMeanRate=c3gGsmReqGprsQosMeanRate, c3gGsmMinUmtsQosMaxDownLinkBitRate=c3gGsmMinUmtsQosMaxDownLinkBitRate, c3gModemTemperAbateRecoveryNotif=c3gModemTemperAbateRecoveryNotif, c3gGsmReqGprsQosPeakRate=c3gGsmReqGprsQosPeakRate, c3gGsmMinGprsQosEntry=c3gGsmMinGprsQosEntry, c3gCdma1xRttBandClassEntry=c3gCdma1xRttBandClassEntry, c3gMobileIpErrorCode=c3gMobileIpErrorCode, c3gGsmNegoUmtsQosSrcStatDescriptor=c3gGsmNegoUmtsQosSrcStatDescriptor, c3gGsmNegoUmtsQosBer=c3gGsmNegoUmtsQosBer, c3gGsmReqUmtsQosSrcStatDescriptor=c3gGsmReqUmtsQosSrcStatDescriptor, c3gCdmaProfileTable=c3gCdmaProfileTable, c3gGsmNegoUmtsQosGuaDownLinkBitRate=c3gGsmNegoUmtsQosGuaDownLinkBitRate, ciscoWan3gMIBComplianceRev1=ciscoWan3gMIBComplianceRev1, c3gGsmCurrentCellId=c3gGsmCurrentCellId, c3gGsmPdpType=c3gGsmPdpType, c3gGsmNegoGprsQosPeakRate=c3gGsmNegoGprsQosPeakRate, c3gGsmReqGprsQosEntry=c3gGsmReqGprsQosEntry, PYSNMP_MODULE_ID=ciscoWan3gMIB, c3gGsmNegoUmtsQosMaxSduSize=c3gGsmNegoUmtsQosMaxSduSize, c3gSecHaAddr=c3gSecHaAddr, c3gGsmNearbyCellIndex=c3gGsmNearbyCellIndex, c3gHdrSessionEnd=c3gHdrSessionEnd, c3gGsmPlmnAbbr=c3gGsmPlmnAbbr, c3gSmsOutSmsErrorCount=c3gSmsOutSmsErrorCount, c3gGsmNumberOfNearbyCell=c3gGsmNumberOfNearbyCell, c3gPreviousServiceType=c3gPreviousServiceType, c3gSipPassword=c3gSipPassword, c3gCdma1xRttBandClassTable=c3gCdma1xRttBandClassTable, c3gWanLbs=c3gWanLbs, c3gSmsOutSmsArchiveCount=c3gSmsOutSmsArchiveCount, c3gCurrentGsmRssi=c3gCurrentGsmRssi, c3gSmsInSmsArchived=c3gSmsInSmsArchived, ciscoWan3gMIB=ciscoWan3gMIB, C3gUmtsQosLinkBitRate=C3gUmtsQosLinkBitRate, c3gLbsTimeStamp=c3gLbsTimeStamp, c3gGsmMnc=c3gGsmMnc, c3gEcIoAbateNotifFlag=c3gEcIoAbateNotifFlag, c3gCurrent1xRttChannelNumber=c3gCurrent1xRttChannelNumber, c3gGsmPdpProfileAuthenType=c3gGsmPdpProfileAuthenType, ciscoWan3gMIBCompliance=ciscoWan3gMIBCompliance, c3gWanLbsSatelliteUsed=c3gWanLbsSatelliteUsed, c3gCurrentEvDoEcIo=c3gCurrentEvDoEcIo, ciscoWan3gMIBSmsObjectGroup=ciscoWan3gMIBSmsObjectGroup, c3gEvDoBandClass=c3gEvDoBandClass, c3gGsmPdpProfile=c3gGsmPdpProfile, c3gWanLbsSatelliteInfoSignalNoiseRatio=c3gWanLbsSatelliteInfoSignalNoiseRatio, c3gPnOffset=c3gPnOffset, c3gConnectionStatus=c3gConnectionStatus, c3gWanCommonTable=c3gWanCommonTable, c3gGsmPdpProfileRowStatus=c3gGsmPdpProfileRowStatus, c3gGsmRadioEntry=c3gGsmRadioEntry, c3gGsmNetworkTable=c3gGsmNetworkTable, c3gHdrSessionStart=c3gHdrSessionStart, c3gLbsLocUncertaintyA=c3gLbsLocUncertaintyA, c3gGsmNegoGprsQosTable=c3gGsmNegoGprsQosTable, c3gLbsHepe=c3gLbsHepe, c3gMnAaaSs=c3gMnAaaSs, c3gServiceChangedNotif=c3gServiceChangedNotif, c3gGsmPdpProfileApn=c3gGsmPdpProfileApn, c3gPrlVersion=c3gPrlVersion, C3gGprsQosMeanRate=C3gGprsQosMeanRate, c3gEcIoAbateNotif=c3gEcIoAbateNotif, c3gNotifRssi=c3gNotifRssi, c3gSmsInSmsStorageMax=c3gSmsInSmsStorageMax, c3gGsmNegoUmtsQosSer=c3gGsmNegoUmtsQosSer, c3gGsmPdpProfileType=c3gGsmPdpProfileType, ciscoWan3gMIBNotificationGroup=ciscoWan3gMIBNotificationGroup, c3gGsmNearbyCellTable=c3gGsmNearbyCellTable, c3gGsmReqGprsQosReliability=c3gGsmReqGprsQosReliability, c3gGsmMinUmtsQosGuaUpLinkBitRate=c3gGsmMinUmtsQosGuaUpLinkBitRate, c3gMnHaSs=c3gMnHaSs, c3gGsmMinUmtsQosTrafficClass=c3gGsmMinUmtsQosTrafficClass, c3gModemReset=c3gModemReset, c3gGsmPdpProfileTable=c3gGsmPdpProfileTable, c3gCurrent1xRttChannelState=c3gCurrent1xRttChannelState, c3gWanLbsSatelliteInfoEntry=c3gWanLbsSatelliteInfoEntry, c3gCdmaHistoryEvDoRssiPerSecond=c3gCdmaHistoryEvDoRssiPerSecond, c3gGsmChannelNumber=c3gGsmChannelNumber, c3gLbsLongitude=c3gLbsLongitude, c3gGsmReqGprsQosDelay=c3gGsmReqGprsQosDelay, c3gModemUpNotif=c3gModemUpNotif, c3gCdmaProfileEntry=c3gCdmaProfileEntry, c3gModemDownNotif=c3gModemDownNotif, ciscoWan3gMIBNotificationGroupRev1=ciscoWan3gMIBNotificationGroupRev1, c3gSmsInSmsStorageUsed=c3gSmsInSmsStorageUsed, ciscoWan3gMIBGroups=ciscoWan3gMIBGroups, c3gHdrSessionDuration=c3gHdrSessionDuration, c3gGsmMinUmtsQosGuaDownLinkBitRate=c3gGsmMinUmtsQosGuaDownLinkBitRate, c3gSipUsername=c3gSipUsername, c3gRssiOnsetNotif=c3gRssiOnsetNotif, c3gSectorId=c3gSectorId, c3gHdrSessionState=c3gHdrSessionState, c3gWanLbsSatelliteInfo=c3gWanLbsSatelliteInfo, c3gGsmPdpProfileIndex=c3gGsmPdpProfileIndex, c3gGsmNegoGprsQosDelay=c3gGsmNegoGprsQosDelay, c3gCdmaLastCallDisconnReason=c3gCdmaLastCallDisconnReason, c3gCdmaEvDoBandClassEntry=c3gCdmaEvDoBandClassEntry, c3gCdmaIdentityTable=c3gCdmaIdentityTable, c3gCdmaCurrentReceived=c3gCdmaCurrentReceived, c3gSecHaAddrType=c3gSecHaAddrType, c3gGsmNegoUmtsQosTrafficClass=c3gGsmNegoUmtsQosTrafficClass, C3gGprsQosPeakRate=C3gGprsQosPeakRate, c3gGsmCurrentRoamingStatus=c3gGsmCurrentRoamingStatus, c3gSmsInSmsStorageUnused=c3gSmsInSmsStorageUnused, c3gNetworkChangedNotifEnabled=c3gNetworkChangedNotifEnabled, c3gEcIoOnsetNotif=c3gEcIoOnsetNotif, c3gGsmMinUmtsQosRowStatus=c3gGsmMinUmtsQosRowStatus, C3gGprsQosReliability=C3gGprsQosReliability, c3gGsmMinUmtsQosOrder=c3gGsmMinUmtsQosOrder, c3gGsmReqGprsQosTable=c3gGsmReqGprsQosTable, c3gRssiOnsetNotifThreshold=c3gRssiOnsetNotifThreshold, c3gCdmaHistoryEvDoRssiPerMinute=c3gCdmaHistoryEvDoRssiPerMinute, c3gCurrentNid=c3gCurrentNid, c3gGsmPdpProfilePassword=c3gGsmPdpProfilePassword, C3gRssi=C3gRssi, c3gGsmReqUmtsQosSer=c3gGsmReqUmtsQosSer, c3gRxMainGainControl=c3gRxMainGainControl, c3gCdmaNetworkEntry=c3gCdmaNetworkEntry, c3gCdmaSecurity=c3gCdmaSecurity, c3gSmsOutSmsPendingCount=c3gSmsOutSmsPendingCount, c3gGsmPdpProfileEntry=c3gGsmPdpProfileEntry, C3gServiceCapability=C3gServiceCapability)
