#
# PySNMP MIB module H3C-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-UPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:24:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, Counter32, Gauge32, iso, Unsigned32, NotificationType, Bits, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Counter32", "Gauge32", "iso", "Unsigned32", "NotificationType", "Bits", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
h3cUps = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82))
if mibBuilder.loadTexts: h3cUps.setLastUpdated('200709041452Z')
if mibBuilder.loadTexts: h3cUps.setOrganization('H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cUps.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cUps.setDescription('This MIB describes the general information of UPS(Uninterrupted Power Supply) device.')
h3cUpsMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82, 1))
class H3cActionType(TextualConvention, Integer32):
    description = 'A control variable used to trigger an operator events, when read, always returns a value of invalid.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("action", 1), ("invalid", 2))

h3cUpsConfigEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82, 1, 1), H3cActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cUpsConfigEnable.setStatus('current')
if mibBuilder.loadTexts: h3cUpsConfigEnable.setDescription("This object identifies the operation which will make the UPS(Uninterrupted Power Supply)'s new configure become effective.")
h3cUpsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82, 1, 2), )
if mibBuilder.loadTexts: h3cUpsConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cUpsConfigTable.setDescription('This table contains an entry for user to get some information about the UPS device.')
h3cUpsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82, 1, 2, 1), ).setIndexNames((0, "H3C-UPS-MIB", "h3cUpsIndex"))
if mibBuilder.loadTexts: h3cUpsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cUpsConfigEntry.setDescription('An entry containing management information applicable to a particular UPS.')
h3cUpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cUpsIndex.setStatus('current')
if mibBuilder.loadTexts: h3cUpsIndex.setDescription('This object identifies the index of h3cUpsConfigTable. The object identified by this index is the same object as identified by the same value of entPhysicalIndex.')
h3cUpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("emersonUart", 1), ("mge", 2), ("common", 3), ("emersonEth", 4), ("liebert", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cUpsType.setStatus('current')
if mibBuilder.loadTexts: h3cUpsType.setDescription("This object identifies the type of UPS. The value 'emersonUart' means an EMERSON UPS support UART interface. The value 'mge' means a MGE UPS support ethernet interface. The value 'common' means a common UPS support standard UPSMIB. The value 'emersonEth' means an EMERSON UPS support ethernet interface. The value 'liebert' means a Liebert UPS support ethernet interface.")
h3cUpsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82, 1, 2, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cUpsIpAddress.setStatus('current')
if mibBuilder.loadTexts: h3cUpsIpAddress.setDescription('This object describes the address of UPS. The value of this object is invalid if the UPS do not support ethernet interface.')
h3cUpsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 82, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cUpsIpAddressType.setStatus('current')
if mibBuilder.loadTexts: h3cUpsIpAddressType.setDescription('This object describes the address type of UPS. The value of this object is invalid if the UPS do not support ethernet interface.')
mibBuilder.exportSymbols("H3C-UPS-MIB", h3cUps=h3cUps, H3cActionType=H3cActionType, h3cUpsIpAddressType=h3cUpsIpAddressType, h3cUpsConfigEntry=h3cUpsConfigEntry, h3cUpsMibObjects=h3cUpsMibObjects, h3cUpsIpAddress=h3cUpsIpAddress, h3cUpsConfigEnable=h3cUpsConfigEnable, h3cUpsConfigTable=h3cUpsConfigTable, h3cUpsIndex=h3cUpsIndex, PYSNMP_MODULE_ID=h3cUps, h3cUpsType=h3cUpsType)
