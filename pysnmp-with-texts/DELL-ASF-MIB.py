#
# PySNMP MIB module DELL-ASF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DELL-ASF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, NotificationType, Counter32, iso, TimeTicks, ModuleIdentity, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Bits, IpAddress, Integer32, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "NotificationType", "Counter32", "iso", "TimeTicks", "ModuleIdentity", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Bits", "IpAddress", "Integer32", "MibIdentifier", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wiredformgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3183))
pet = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1))
asfPetEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 1))
asfTrapIPMIAlertTest = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1001))
if mibBuilder.loadTexts: asfTrapIPMIAlertTest.setDescription('IPMI Alert Configuration Test')
asfTrapFanSpeedWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,262400))
if mibBuilder.loadTexts: asfTrapFanSpeedWarning.setDescription('Generic Predictive Fan Failure ( predictive failure asserted )')
asfTrapFanSPeedWarningCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,262528))
if mibBuilder.loadTexts: asfTrapFanSPeedWarningCleared.setDescription('Generic Predictive Fan Failure Cleared')
asfTrapFanSpeedProblem = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,262402))
if mibBuilder.loadTexts: asfTrapFanSpeedProblem.setDescription('Generic Critical Fan Failure')
asfTrapFanSPeedProblemCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,262530))
if mibBuilder.loadTexts: asfTrapFanSPeedProblemCleared.setDescription('Generic Critical Fan Failure Cleared')
asfTrapBatteryLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2715392))
if mibBuilder.loadTexts: asfTrapBatteryLowWarning.setDescription('Battery Low (Predictive Failure)')
asfTrapBatteryLowWarningCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2715520))
if mibBuilder.loadTexts: asfTrapBatteryLowWarningCleared.setDescription('Battery Low (Predictive Failure) Cleared')
asfTrapBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2715393))
if mibBuilder.loadTexts: asfTrapBatteryFailure.setDescription('Battery Failure')
asfTrapBatteryFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2715521))
if mibBuilder.loadTexts: asfTrapBatteryFailCleared.setDescription('Battery Failure Cleared')
asfTrapUnderVoltageWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131328))
if mibBuilder.loadTexts: asfTrapUnderVoltageWarning.setDescription('Under-Voltage Warning (Lower Non Critical - going low)')
asfTrapUnderVoltageWarningCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131456))
if mibBuilder.loadTexts: asfTrapUnderVoltageWarningCleared.setDescription('Under-Voltage Warning Cleared')
asfTrapUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131330))
if mibBuilder.loadTexts: asfTrapUnderVoltage.setDescription('Under-Voltage Problem (Lower Critical - going low)')
asfTrapUnderVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131458))
if mibBuilder.loadTexts: asfTrapUnderVoltageCleared.setDescription('Under-Voltage Problem Cleared')
asfTrapOverVoltageWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131335))
if mibBuilder.loadTexts: asfTrapOverVoltageWarning.setDescription('Over-Voltage Warning (Upper Non Critical - going high)')
asfTrapOverVoltageWarningCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131463))
if mibBuilder.loadTexts: asfTrapOverVoltageWarningCleared.setDescription('Over-Voltage Warning Cleared')
asfTrapOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131337))
if mibBuilder.loadTexts: asfTrapOverVoltage.setDescription('Over-Voltage Problem (Upper Critical - going high)')
asfTrapVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131465))
if mibBuilder.loadTexts: asfTrapVoltageCleared.setDescription('Over-Voltage Problem Cleared')
asfTrapCriticalDiscreteVoltage = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131841))
if mibBuilder.loadTexts: asfTrapCriticalDiscreteVoltage.setDescription('Generic Critical Voltage Problem')
asfTrapCriticalDiscreteVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,131840))
if mibBuilder.loadTexts: asfTrapCriticalDiscreteVoltageCleared.setDescription('Generic Critical Voltage Problem Cleared')
asfTrapUnderTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,65792))
if mibBuilder.loadTexts: asfTrapUnderTemperatureWarning.setDescription('Under-Temperature Warning (Lower Non-Critical - going low)')
asfTrapUnderTemperatureWarningCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,65920))
if mibBuilder.loadTexts: asfTrapUnderTemperatureWarningCleared.setDescription('Under-Temperature Warning Cleared')
asfTrapUnderTemperature = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,65794))
if mibBuilder.loadTexts: asfTrapUnderTemperature.setDescription('Under-Temperature Problem (Lower Critical - going low)')
asfTrapUnderTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,65922))
if mibBuilder.loadTexts: asfTrapUnderTemperatureCleared.setDescription('Under-Temperature Problem Cleared')
asfTrapOverTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,65799))
if mibBuilder.loadTexts: asfTrapOverTemperatureWarning.setDescription('Over-Temperature Warning (Upper Non-Critical - going high)')
asfTrapOverTemperatureWarningCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,65927))
if mibBuilder.loadTexts: asfTrapOverTemperatureWarningCleared.setDescription('Over-Temperature Warning Cleared')
asfTrapOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,65801))
if mibBuilder.loadTexts: asfTrapOverTemperature.setDescription('Over-Temperature Problem (Upper Critical - going high)')
asfTrapOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,65929))
if mibBuilder.loadTexts: asfTrapOverTemperatureCleared.setDescription('Over-Temperature Problem Cleared')
asfTrapCaseIntrusion = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,356096))
if mibBuilder.loadTexts: asfTrapCaseIntrusion.setDescription('Chassis Intrusion - Physical Security Violation')
asfTrapCaseIntrusionCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,356224))
if mibBuilder.loadTexts: asfTrapCaseIntrusionCleared.setDescription('Chassis Intrusion (Physical Security Violation) Event Cleared')
asfTrapFanRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,264962))
if mibBuilder.loadTexts: asfTrapFanRedundancyDegraded.setDescription('Fan redundancy has been degraded')
asfTrapFanRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,264961))
if mibBuilder.loadTexts: asfTrapFanRedundancyLost.setDescription('Fan redundancy has been lost')
asfTrapFanFullRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,264960))
if mibBuilder.loadTexts: asfTrapFanFullRedundancy.setDescription('Fan redundancy Has Returned to Normal')
asfTrapPSRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,527106))
if mibBuilder.loadTexts: asfTrapPSRedundancyDegraded.setDescription('Power Supply Redundancy Degraded')
asfTrapPSRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,527105))
if mibBuilder.loadTexts: asfTrapPSRedundancyLost.setDescription('Power Supply Redundancy Lost')
asfTrapPSFullRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,527104))
if mibBuilder.loadTexts: asfTrapPSFullRedundancy.setDescription('Power Supply Redundancy Has Returned to Normal')
asfTrapCpuThermalTrip = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487169))
if mibBuilder.loadTexts: asfTrapCpuThermalTrip.setDescription('CPU Thermal Trip (Over Temperature Shutdown)')
asfTrapCpuThermalTripCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487297))
if mibBuilder.loadTexts: asfTrapCpuThermalTripCleared.setDescription('CPU Thermal Trip (Over Temperature Shutdown) Cleared')
asfTrapCpuBistError = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487170))
if mibBuilder.loadTexts: asfTrapCpuBistError.setDescription('CPU BIST (Built In Self Test) Failure')
asfTrapCpuBistErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487298))
if mibBuilder.loadTexts: asfTrapCpuBistErrorCleared.setDescription('CPU BIST (Built In Self Test) Failure Cleared')
asfTrapCpuIErr = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487168))
if mibBuilder.loadTexts: asfTrapCpuIErr.setDescription('CPU Internal Error')
asfTrapCpuIErrCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487296))
if mibBuilder.loadTexts: asfTrapCpuIErrCleared.setDescription('CPU Internal Error Cleared')
asfTrapCpuConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487173))
if mibBuilder.loadTexts: asfTrapCpuConfigError.setDescription('CPU Configuration Error')
asfTrapCpuDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487176))
if mibBuilder.loadTexts: asfTrapCpuDisabled.setDescription('CPU Disabled (Processor Disabled)')
asfTrapCpuEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487304))
if mibBuilder.loadTexts: asfTrapCpuEnabled.setDescription('CPU Enabled (Processor Enabled)')
asfTrapCpuConfigErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487301))
if mibBuilder.loadTexts: asfTrapCpuConfigErrorCleared.setDescription('CPU Configuration Error Cleared')
asfTrapCpuPresence = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487175))
if mibBuilder.loadTexts: asfTrapCpuPresence.setDescription('CPU Presence (Processor Presence Detected)')
asfTrapCpuNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487303))
if mibBuilder.loadTexts: asfTrapCpuNotPresent.setDescription('CPU Not Present (Processor Not Present)')
asfTrapCpuThrottle = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487178))
if mibBuilder.loadTexts: asfTrapCpuThrottle.setDescription('CPU Throttle (Processor Speed Reduced)')
asfTrapCpuThrottleCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,487306))
if mibBuilder.loadTexts: asfTrapCpuThrottleCleared.setDescription('CPU Throttle Cleared (Normal Processor Speed)')
asfTrapPsPresenceDeteced = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552704))
if mibBuilder.loadTexts: asfTrapPsPresenceDeteced.setDescription('Power Supply Inserted')
asfTrapPsPresenceRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552832))
if mibBuilder.loadTexts: asfTrapPsPresenceRemoved.setDescription('Power Supply Removed')
asfTrapPsFailure = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552705))
if mibBuilder.loadTexts: asfTrapPsFailure.setDescription('Power Supply Failure')
asfTrapPsFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552833))
if mibBuilder.loadTexts: asfTrapPsFailureCleared.setDescription('Power Supply Failure Cleared')
asfTrapPsPredictiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552706))
if mibBuilder.loadTexts: asfTrapPsPredictiveFailure.setDescription('Power Supply Warning')
asfTrapPsPredictiveFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552834))
if mibBuilder.loadTexts: asfTrapPsPredictiveFailureCleared.setDescription('Power Supply Warning Cleared')
asfTrapPsAcLost = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552707))
if mibBuilder.loadTexts: asfTrapPsAcLost.setDescription('Power Supply AC Lost')
asfTrapPsAcBack = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552835))
if mibBuilder.loadTexts: asfTrapPsAcBack.setDescription('Power Supply AC Restored')
asfTrapSelCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1076994))
if mibBuilder.loadTexts: asfTrapSelCleared.setDescription('System Event Log (SEL) Cleared')
asfTrapSelFull = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1076996))
if mibBuilder.loadTexts: asfTrapSelFull.setDescription('System Event Log (SEL) Full (Logging Disabled)')
asfTrapASRTimeout = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2322176))
if mibBuilder.loadTexts: asfTrapASRTimeout.setDescription('ASR (Automatic System Recovery) Timer Expired')
asfTrapASROsReset = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2322177))
if mibBuilder.loadTexts: asfTrapASROsReset.setDescription('ASR (Automatic System Recovery) Reset Occurred')
asfTrapASRPowerDown = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2322178))
if mibBuilder.loadTexts: asfTrapASRPowerDown.setDescription('ASR (Automatic System Recovery) Power Down Occurred')
asfTrapASRPowerCycle = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2322179))
if mibBuilder.loadTexts: asfTrapASRPowerCycle.setDescription('ASR (Automatic System Recovery) Power Cycle Occurred')
asfTrapOverSystemPowerWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2322180))
if mibBuilder.loadTexts: asfTrapOverSystemPowerWarning.setDescription('Over-System Power Utilization Warning (Upper Non-Critical - going high)')
asfTrapOverSystemPowerWarningCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2322181))
if mibBuilder.loadTexts: asfTrapOverSystemPowerWarningCleared.setDescription('Over-System Power Utilization Warning Cleared')
asfTrapOverSystemPowerCritical = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2322182))
if mibBuilder.loadTexts: asfTrapOverSystemPowerCritical.setDescription('Over-System Power Utilization Problem (Upper Critical - going high)')
asfTrapOverSystemPowerCriticalCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,2322183))
if mibBuilder.loadTexts: asfTrapOverSystemPowerCriticalCleared.setDescription('Over-System Power Utilization Problem Cleared')
asfTrapPSUMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552710))
if mibBuilder.loadTexts: asfTrapPSUMismatch.setDescription('Power Supply Mismatch (Configuration Error)')
asfTrapPSUMismatchNormal = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552838))
if mibBuilder.loadTexts: asfTrapPSUMismatchNormal.setDescription('Power Supply Mismatch Error Cleared (Configuration Error Cleared)')
asfTrapSystemPowerExceedsWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552711))
if mibBuilder.loadTexts: asfTrapSystemPowerExceedsWarning.setDescription('System Power Exceeds than PSU Wattage (Warning)')
asfTrapSystemPowerNormal = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,552839))
if mibBuilder.loadTexts: asfTrapSystemPowerNormal.setDescription('System Power Exceeds Warning Cleared')
asfTrapSystemPowerExceedsError = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,12611334))
if mibBuilder.loadTexts: asfTrapSystemPowerExceedsError.setDescription('System Power Exceeds than PSU Wattage (Error)')
asfTrapSystemPowerExceedsCleared = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,12611462))
if mibBuilder.loadTexts: asfTrapSystemPowerExceedsCleared.setDescription('System Power Exceeds Error Cleared')
asfTrapModuleSDCardFailedError = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1404932))
if mibBuilder.loadTexts: asfTrapModuleSDCardFailedError.setDescription('Module SD Card Failure Error')
asfTrapModuleSDWriteProtectWarning = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1404935))
if mibBuilder.loadTexts: asfTrapModuleSDWriteProtectWarning.setDescription('Module SD Card Write Protect Warning')
asfTrapModuleSDCardPresence = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1405056))
if mibBuilder.loadTexts: asfTrapModuleSDCardPresence.setDescription('Module SD Card Present (SD Card Presence Detected)')
asfTrapModuleSDCardNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1404928))
if mibBuilder.loadTexts: asfTrapModuleSDCardNotPresent.setDescription('Module SD Card not Present ')
asfTrapSDRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1379074))
if mibBuilder.loadTexts: asfTrapSDRedundancyDegraded.setDescription('SD Card redundancy has been degraded')
asfTrapSDRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1379073))
if mibBuilder.loadTexts: asfTrapSDRedundancyLost.setDescription('SD Card redundancy has been lost')
asfTrapSDFullRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,1379072))
if mibBuilder.loadTexts: asfTrapSDFullRedundancy.setDescription('SD Card redundancy Has Returned to Normal')
asfTrapInternalDualSDModulePresent = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13201152))
if mibBuilder.loadTexts: asfTrapInternalDualSDModulePresent.setDescription('Internal Dual SD Module is present')
asfTrapInternalDualSDModuleAbsent = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13201280))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleAbsent.setDescription('Internal Dual SD Module is absent')
asfTrapInternalDualSDModuleOffline = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13201153))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleOffline.setDescription('Internal Dual SD Module is offline')
asfTrapInternalDualSDModuleOnline = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13201281))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleOnline.setDescription('Internal Dual SD Module is online')
asfTrapInternalDualSDModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13201154))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleFailure.setDescription('Failure detected on Internal Dual SD Module')
asfTrapInternalDualSDModuleNormal = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13201282))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleNormal.setDescription('Internal Dual SD Module is operating normally')
asfTrapInternalDualSDModuleWriteProtected = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13201155))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleWriteProtected.setDescription('Internal Dual SD Module is write protected')
asfTrapInternalDualSDModuleWriteable = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13201283))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleWriteable.setDescription('Internal Dual SD Module is writable')
asfTrapInternalDualSDModuleRedundant = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13175552))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleRedundant.setDescription('Internal Dual SD Module is redundant')
asfTrapInternalDualSDModuleRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13175553))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleRedundancyLost.setDescription('Internal Dual SD Module redundancy is lost')
asfTrapInternalDualSDModuleNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 3183, 1, 1) + (0,13175555))
if mibBuilder.loadTexts: asfTrapInternalDualSDModuleNotRedundant.setDescription('Internal Dual SD Module is not redundant')
mibBuilder.exportSymbols("DELL-ASF-MIB", asfTrapBatteryFailCleared=asfTrapBatteryFailCleared, asfTrapPSUMismatchNormal=asfTrapPSUMismatchNormal, asfTrapInternalDualSDModuleOffline=asfTrapInternalDualSDModuleOffline, asfTrapASROsReset=asfTrapASROsReset, asfTrapCriticalDiscreteVoltage=asfTrapCriticalDiscreteVoltage, asfTrapSystemPowerExceedsWarning=asfTrapSystemPowerExceedsWarning, asfTrapSystemPowerExceedsCleared=asfTrapSystemPowerExceedsCleared, asfTrapASRTimeout=asfTrapASRTimeout, asfTrapInternalDualSDModuleWriteProtected=asfTrapInternalDualSDModuleWriteProtected, asfTrapOverTemperatureWarning=asfTrapOverTemperatureWarning, asfTrapPsFailureCleared=asfTrapPsFailureCleared, asfTrapInternalDualSDModulePresent=asfTrapInternalDualSDModulePresent, asfTrapInternalDualSDModuleNotRedundant=asfTrapInternalDualSDModuleNotRedundant, asfTrapInternalDualSDModuleRedundant=asfTrapInternalDualSDModuleRedundant, asfTrapUnderVoltage=asfTrapUnderVoltage, asfTrapCpuPresence=asfTrapCpuPresence, asfTrapOverSystemPowerCritical=asfTrapOverSystemPowerCritical, asfTrapSDRedundancyDegraded=asfTrapSDRedundancyDegraded, asfTrapCpuThermalTripCleared=asfTrapCpuThermalTripCleared, asfTrapInternalDualSDModuleOnline=asfTrapInternalDualSDModuleOnline, asfTrapModuleSDCardNotPresent=asfTrapModuleSDCardNotPresent, asfTrapCpuBistErrorCleared=asfTrapCpuBistErrorCleared, asfTrapSelCleared=asfTrapSelCleared, asfTrapSystemPowerNormal=asfTrapSystemPowerNormal, asfTrapUnderTemperatureCleared=asfTrapUnderTemperatureCleared, asfTrapSelFull=asfTrapSelFull, asfTrapFanSpeedProblem=asfTrapFanSpeedProblem, asfTrapCriticalDiscreteVoltageCleared=asfTrapCriticalDiscreteVoltageCleared, asfTrapBatteryLowWarningCleared=asfTrapBatteryLowWarningCleared, asfTrapPsAcBack=asfTrapPsAcBack, asfTrapCpuConfigError=asfTrapCpuConfigError, asfTrapOverTemperatureWarningCleared=asfTrapOverTemperatureWarningCleared, asfTrapUnderVoltageWarning=asfTrapUnderVoltageWarning, asfTrapBatteryFailure=asfTrapBatteryFailure, asfTrapInternalDualSDModuleWriteable=asfTrapInternalDualSDModuleWriteable, asfTrapFanSpeedWarning=asfTrapFanSpeedWarning, asfTrapCpuNotPresent=asfTrapCpuNotPresent, asfTrapPsPresenceRemoved=asfTrapPsPresenceRemoved, asfTrapOverSystemPowerCriticalCleared=asfTrapOverSystemPowerCriticalCleared, asfTrapOverSystemPowerWarningCleared=asfTrapOverSystemPowerWarningCleared, asfTrapCpuThrottle=asfTrapCpuThrottle, asfTrapUnderVoltageWarningCleared=asfTrapUnderVoltageWarningCleared, asfPetEvts=asfPetEvts, asfTrapModuleSDCardFailedError=asfTrapModuleSDCardFailedError, asfTrapCpuIErrCleared=asfTrapCpuIErrCleared, asfTrapCaseIntrusion=asfTrapCaseIntrusion, asfTrapFanFullRedundancy=asfTrapFanFullRedundancy, asfTrapPSFullRedundancy=asfTrapPSFullRedundancy, asfTrapOverVoltageWarning=asfTrapOverVoltageWarning, asfTrapBatteryLowWarning=asfTrapBatteryLowWarning, asfTrapPsPresenceDeteced=asfTrapPsPresenceDeteced, asfTrapUnderTemperature=asfTrapUnderTemperature, asfTrapPSRedundancyLost=asfTrapPSRedundancyLost, asfTrapCpuThrottleCleared=asfTrapCpuThrottleCleared, asfTrapModuleSDCardPresence=asfTrapModuleSDCardPresence, asfTrapCpuConfigErrorCleared=asfTrapCpuConfigErrorCleared, asfTrapPsPredictiveFailureCleared=asfTrapPsPredictiveFailureCleared, asfTrapPsFailure=asfTrapPsFailure, pet=pet, asfTrapOverVoltage=asfTrapOverVoltage, asfTrapOverTemperature=asfTrapOverTemperature, asfTrapInternalDualSDModuleNormal=asfTrapInternalDualSDModuleNormal, asfTrapInternalDualSDModuleFailure=asfTrapInternalDualSDModuleFailure, asfTrapVoltageCleared=asfTrapVoltageCleared, asfTrapSDRedundancyLost=asfTrapSDRedundancyLost, asfTrapInternalDualSDModuleRedundancyLost=asfTrapInternalDualSDModuleRedundancyLost, asfTrapCpuEnabled=asfTrapCpuEnabled, asfTrapOverVoltageWarningCleared=asfTrapOverVoltageWarningCleared, wiredformgmt=wiredformgmt, asfTrapASRPowerCycle=asfTrapASRPowerCycle, asfTrapFanSPeedWarningCleared=asfTrapFanSPeedWarningCleared, asfTrapUnderTemperatureWarningCleared=asfTrapUnderTemperatureWarningCleared, asfTrapOverTemperatureCleared=asfTrapOverTemperatureCleared, asfTrapPSUMismatch=asfTrapPSUMismatch, asfTrapPsAcLost=asfTrapPsAcLost, asfTrapPsPredictiveFailure=asfTrapPsPredictiveFailure, asfTrapOverSystemPowerWarning=asfTrapOverSystemPowerWarning, asfTrapUnderVoltageCleared=asfTrapUnderVoltageCleared, asfTrapCpuDisabled=asfTrapCpuDisabled, asfTrapModuleSDWriteProtectWarning=asfTrapModuleSDWriteProtectWarning, asfTrapInternalDualSDModuleAbsent=asfTrapInternalDualSDModuleAbsent, asfTrapIPMIAlertTest=asfTrapIPMIAlertTest, asfTrapCaseIntrusionCleared=asfTrapCaseIntrusionCleared, asfTrapSDFullRedundancy=asfTrapSDFullRedundancy, asfTrapUnderTemperatureWarning=asfTrapUnderTemperatureWarning, asfTrapFanRedundancyLost=asfTrapFanRedundancyLost, asfTrapCpuBistError=asfTrapCpuBistError, asfTrapPSRedundancyDegraded=asfTrapPSRedundancyDegraded, asfTrapASRPowerDown=asfTrapASRPowerDown, asfTrapFanSPeedProblemCleared=asfTrapFanSPeedProblemCleared, asfTrapFanRedundancyDegraded=asfTrapFanRedundancyDegraded, asfTrapCpuIErr=asfTrapCpuIErr, asfTrapCpuThermalTrip=asfTrapCpuThermalTrip, asfTrapSystemPowerExceedsError=asfTrapSystemPowerExceedsError)
