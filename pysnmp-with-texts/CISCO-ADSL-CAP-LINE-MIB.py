#
# PySNMP MIB module CISCO-ADSL-CAP-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ADSL-CAP-LINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adslLineConfProfileName, adslAtucIntervalNumber = mibBuilder.importSymbols("ADSL-LINE-MIB", "adslLineConfProfileName", "adslAtucIntervalNumber")
AdslPerfPrevDayCount, AdslPerfCurrDayCount = mibBuilder.importSymbols("ADSL-TC-MIB", "AdslPerfPrevDayCount", "AdslPerfCurrDayCount")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfIntervalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfCurrentCount")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, MibIdentifier, IpAddress, ObjectIdentity, Unsigned32, Counter32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, NotificationType, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "IpAddress", "ObjectIdentity", "Unsigned32", "Counter32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "NotificationType", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoAdslLineCapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 149))
ciscoAdslLineCapMIB.setRevisions(('2001-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAdslLineCapMIB.setRevisionsDescriptions(('Changed MAX-ACCESS for cAdslAtucCapConfUp17KBaudEnable to read-create due to the the bug fix of MAX-ACCESS in the broken MIB object.',))
if mibBuilder.loadTexts: ciscoAdslLineCapMIB.setLastUpdated('200103010000Z')
if mibBuilder.loadTexts: ciscoAdslLineCapMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAdslLineCapMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-dslam.com')
if mibBuilder.loadTexts: ciscoAdslLineCapMIB.setDescription("This MIB module serves as an enterprise-specific extension of the ADSL-LINE-MIB. The structure of this MIB module shadows the structure of the ADSL-LINE-MIB, table for table. The tables defined by this MIB module contain managed objects that meet the following criteria: 1) A managed object represents an attribute or characteristic specific to CAP (Carrierless AM/PM) modems. 2) The ADSL-CAP-LINE-MIB does not already contain a managed object representing the same information as this managed object. Observe that entries contained by the tables in this MIB module do not augment the corresponding entries in the ADSL-LINE-MIB, as every modem represented by the ADSL-LINE-MIB is not necessarily a CAP modem. Also observe that entries contained by the tables in this MIB module do not augment the corresponding entries in the ADSL-CAP-LINE-MIB, as this assumes that the ADSL-CAP-LINE-MIB defines tables that correspond to every table defined by the ADSL-LINE-MIB. At this time, this assumption does not hold true. *** ABBREVIATIONS, ACRONYMS, AND SYMBOLS *** ADSL - Asymmetric Digital Subscriber Line. ATM - Asynchronous Transfer Mode. ATU-C - ADSL Transceiver Unit, Central Office end. ATU-R - ADSL Transceiver Unit, Remote terminal end. BER - Bit Error Ratio. CAP - Carrierless Amplitude Modulation / Pulse Modulation. DSL - Digital Subscriber Line. SNR - Signal-to-Noise Ratio. STM - Synchronous Transfer Mode. *** DEFINITIONS *** DOWNSTREAM The flow of data in the direction from the ATU-C to ATU-R. MARGIN (also referred to as 'SNR margin') The difference between the SNR of the received signal and the SNR required to provide a BER of 10E-7. SYMBOL The number of bits the transmitter is capable of multiplexing and modulating in a single signalling interval. SYMBOL RATE The rate at which all symbols are transmitted. UPSTREAM The flow of data in the direction from the ATU-R to ATU-C.")
class AdslLineCapDownstreamRate(TextualConvention, Integer32):
    description = 'The downstream line rate at which an ADSL line can train at, given an ATU-C and ATU-R implementing the CAP line code.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(7168000, 7168000), ValueRangeConstraint(6272000, 6272000), ValueRangeConstraint(5120000, 5120000), ValueRangeConstraint(4480000, 4480000), ValueRangeConstraint(3200000, 3200000), ValueRangeConstraint(2688000, 2688000), ValueRangeConstraint(2560000, 2560000), ValueRangeConstraint(2240000, 2240000), ValueRangeConstraint(1920000, 1920000), ValueRangeConstraint(1600000, 1600000), ValueRangeConstraint(1280000, 1280000), ValueRangeConstraint(1024000, 1024000), ValueRangeConstraint(960000, 960000), ValueRangeConstraint(896000, 896000), ValueRangeConstraint(768000, 768000), ValueRangeConstraint(640000, 640000), ValueRangeConstraint(512000, 512000), ValueRangeConstraint(384000, 384000), ValueRangeConstraint(256000, 256000), ValueRangeConstraint(0, 0), )
class AdslLineCapUpstreamRate(TextualConvention, Integer32):
    description = 'The upstream line rate at which an ADSL line can train at, given an ATU-C and ATU-R implementing the CAP line code.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1088000, 1088000), ValueRangeConstraint(952000, 952000), ValueRangeConstraint(816000, 816000), ValueRangeConstraint(680000, 680000), ValueRangeConstraint(544000, 544000), ValueRangeConstraint(408000, 408000), ValueRangeConstraint(272000, 272000), ValueRangeConstraint(91000, 91000), ValueRangeConstraint(0, 0), )
ciscoAdslLineCapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 149, 1))
cAdslAtucCapPhysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 2), )
if mibBuilder.loadTexts: cAdslAtucCapPhysTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPhysTable.setDescription('This table extends the adslAtucPhysTable and contains enterprise-specific physical layer parameters for the ATU-C class devices supported by the system.')
cAdslAtucCapPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cAdslAtucCapPhysEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPhysEntry.setDescription('A set of enterprise-specific physical-layer parameters for an ATU-C class device supported by the system. There exists an entry for each ifEntry with an ifType of adsl(94) and an adslLineCoding of cap(3).')
cAdslAtucCapCurrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("training", 3), ("steadyState", 4), ("downloading", 5), ("downloadFailed", 6), ("testing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucCapCurrState.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapCurrState.setDescription("This object specifies the state of the ATU-C transceiver. The value of this managed is 'idle' for an ATU-C that has been provisioned, but is not physically present in the system.")
cAdslAtucCapCurrRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 2, 1, 2), Gauge32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucCapCurrRxGain.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapCurrRxGain.setDescription("This managed object represents the gain applied to the ATU-C receiver. The value of this managed object is '0' for an ATU-C that has been provisioned, but is not physically present in the system.")
cAdslAtucCapCurrRxSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 2, 1, 3), Gauge32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucCapCurrRxSnr.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapCurrRxSnr.setDescription("This managed object represents the signal-to-noise ratio measured across the the ATU-C receive pair. The value of this managed object is '0' for an ATU-C that has been provisioned, but is not physically present in the system.")
cAdslAturCapPhysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 3), )
if mibBuilder.loadTexts: cAdslAturCapPhysTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAturCapPhysTable.setDescription('This table extends the adslAturPhysTable and contains enterprise-specific physical layer parameters for the ATU-R class devices supported by the system.')
cAdslAturCapPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cAdslAturCapPhysEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAturCapPhysEntry.setDescription('A set of enterprise-specific physical-layer parameters for an ATU-R class device supported by the system. There exists an entry for each ifEntry with an ifType of adsl(94) and an adslLineCoding of cap(3).')
cAdslAturCapCurrRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 3, 1, 1), Gauge32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAturCapCurrRxGain.setStatus('current')
if mibBuilder.loadTexts: cAdslAturCapCurrRxGain.setDescription("This managed object represents the gain applied to the ATU-R receiver. The value of this managed object is '0' if the corresponding ATU-C has been provisioned, but is not physically present in the system.")
cAdslAtucCapPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 6), )
if mibBuilder.loadTexts: cAdslAtucCapPerfDataTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPerfDataTable.setDescription('This table extends the adslAtucPerfDataTable and contains enterprise-specific physical layer statistics for the ATU-C class devices supported by the system.')
cAdslAtucCapPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cAdslAtucCapPerfDataEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPerfDataEntry.setDescription('A set of enterprise-specific physical-layer statistics for an ATU-C class device supported by the system. There exists an entry for each ifEntry with an ifType of adsl(94) and an adslLineCoding of cap(3).')
cAdslAtucCapPerfInitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucCapPerfInitFailures.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPerfInitFailures.setDescription('This object specifies the number of line initialization failures relative to sysUpTime.')
cAdslAtucCapPerfCurr15MinInitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 6, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucCapPerfCurr15MinInitFailures.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPerfCurr15MinInitFailures.setDescription('This object specifies the number of line initialization failures in the current 15-minute interval.')
cAdslAtucCapPerfCurr1DayInitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 6, 1, 3), AdslPerfCurrDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucCapPerfCurr1DayInitFailures.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPerfCurr1DayInitFailures.setDescription('This object specifies the number of line initialization failures in the current 1-day interval.')
cAdslAtucCapPerfPrev1DayInitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 6, 1, 4), AdslPerfPrevDayCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucCapPerfPrev1DayInitFailures.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPerfPrev1DayInitFailures.setDescription('This object specifies the number of line initialization failures in the previous 1-day interval.')
cAdslAtucCapIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 8), )
if mibBuilder.loadTexts: cAdslAtucCapIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapIntervalTable.setDescription('This table extends the adslAtucIntervalTable and contains enterprise-specific physical layer statistics intervals for the ATU-C class devices supported by the system.')
cAdslAtucCapIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL-LINE-MIB", "adslAtucIntervalNumber"))
if mibBuilder.loadTexts: cAdslAtucCapIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapIntervalEntry.setDescription('A 15-minute interval of enterprise-specific physical-layer statistics for an ATU-C class device supported by the system. There exists up to 96 entries for each ifEntry with an ifType of adsl(94) and an adslLineCoding of cap(3).')
cAdslAtucCapIntervalInitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 8, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucCapIntervalInitFailures.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapIntervalInitFailures.setDescription('This object specifies the number of line initialization failures in the interval.')
cAdslLineCapConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14), )
if mibBuilder.loadTexts: cAdslLineCapConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cAdslLineCapConfProfileTable.setDescription('This table extends the adslLineConfProfileTable and contains enterprise-specific ADSL line configuration information.')
cAdslLineCapConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1), ).setIndexNames((1, "ADSL-LINE-MIB", "adslLineConfProfileName"))
if mibBuilder.loadTexts: cAdslLineCapConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslLineCapConfProfileEntry.setDescription('A configuration profile containing enterprise-specific ADSL line configuration information.')
cAdslLineCapConfTrainingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("fast", 2))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslLineCapConfTrainingMode.setReference('ANSI T1E1.4/99-161R3, Single-Carrier Rate Adaptive Digital Subscriber Line (RADSL).')
if mibBuilder.loadTexts: cAdslLineCapConfTrainingMode.setStatus('current')
if mibBuilder.loadTexts: cAdslLineCapConfTrainingMode.setDescription('This object specifies the mode employed by the ATU-C and ATU-R when training against each other. One of two training modes can be employed: - Standard An ATU-C initiates a training sequence using the method defined by T1E1.4/99-161R3. This training mode is the default for ADSL modems employing the CAP line code. - Fast An ATU-C initiates a vendor-specific training sequence that can possibly provide a shorter training sequence.')
cAdslLineCapConfInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("short", 2), ("long", 3))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslLineCapConfInterleaveDelay.setReference('ANSI T1E1.4/99-161R3, Single-Carrier Rate Adaptive Digital Subscriber Line (RADSL).')
if mibBuilder.loadTexts: cAdslLineCapConfInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: cAdslLineCapConfInterleaveDelay.setDescription("This object specifies the interleave delay for the downstream channel. The value of this object specifies the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. The value 'long' provides greater separation between consecutive input bytes in the output bit stream, thereby allowing for improved impulse noise immunity at the expense of payload latency.")
cAdslLineCapConfCpeSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslLineCapConfCpeSignature.setStatus('current')
if mibBuilder.loadTexts: cAdslLineCapConfCpeSignature.setDescription('This object specifies the value of the minimum CPE signature expected from ATU-R during training. The value of the CPE signature corresponds to the software version of the ATU-R. If the CPE signature advertised by an ATU-R is less than the value of this object, then the ATU-C will be placed into an idle state, thereby preventing the line from training. In addition, the agent increments the value of the cAdslAtucCapPerfInitFailures object for each attempt to train by an ATU-R advertising a CPE signature less than the value of this object. When a management client observes the value of cAdslAtucCapPerfInitFailures increasing, it should retrieve the value of the adslAturInvSerialNumber object (for more details, see the ADSL-LINE-MIB) . This value of this object reflects the CPE signature advertised by an ATU-R implementing the CAP line code. If the CPE signature of the ATU-R is not known, the value of the adslAturInvSerialNumber object should be a zero-length string.')
cAdslAtucCapConfTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(60)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucCapConfTargetSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapConfTargetSnrMgn.setDescription('This object specifies the target SNR margin. This is the desired noise margin the ATU-C must achieve with a BER of 10-7 or better to successfully complete training.')
cAdslAtucCapConfMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 5), AdslLineCapDownstreamRate()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucCapConfMinTxRate.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapConfMinTxRate.setDescription('This object specifies the minimum acceptable downstream line rate.')
cAdslAtucCapConfMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 6), AdslLineCapDownstreamRate().clone(640000)).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucCapConfMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapConfMaxTxRate.setDescription('This object specifies the desired line rate which the ATU-C will attempt to train at.')
cAdslAtucCapConfDown136KBaudEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucCapConfDown136KBaudEnable.setReference('ANSI T1E1.4/99-161R3, Single-Carrier Rate Adaptive Digital Subscriber Line (RADSL).')
if mibBuilder.loadTexts: cAdslAtucCapConfDown136KBaudEnable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapConfDown136KBaudEnable.setDescription('This object specifies whether the modem can train the downstream channel using a symbol rate of 136K symbols per second.')
cAdslAtucCapConfUp68KBaudEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucCapConfUp68KBaudEnable.setReference('ANSI T1E1.4/99-161R3, Single-Carrier Rate Adaptive Digital Subscriber Line (RADSL).')
if mibBuilder.loadTexts: cAdslAtucCapConfUp68KBaudEnable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapConfUp68KBaudEnable.setDescription('This object specifies whether the modem can train the upstream channel using a symbol rate of 68K symbols per second. The value of this object does not effect whether the modem can train at any other symbol rate; that is, the values of this object and cAdslAtucCapConfUp17KBaudEnable are not mutually exclusive.')
cAdslAtucCapConfUp17KBaudEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucCapConfUp17KBaudEnable.setReference('ANSI T1E1.4/99-161R3, Single-Carrier Rate Adaptive Digital Subscriber Line (RADSL).')
if mibBuilder.loadTexts: cAdslAtucCapConfUp17KBaudEnable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapConfUp17KBaudEnable.setDescription('This object specifies whether the modem can train the upstream channel using a symbol rate of 17K symbols per second. The value of this object does not effect whether the modem can train at any other symbol rate; that is, the values of this object and cAdslAtucCapConfUp68KBaudEnable are not mutually exclusive.')
cAdslAtucCapConfPsdmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-52, -52), ValueRangeConstraint(-49, -49), ValueRangeConstraint(-46, -46), ValueRangeConstraint(-43, -43), ValueRangeConstraint(-40, -40), ValueRangeConstraint(-37, -37), )).clone(-40)).setUnits('dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucCapConfPsdmLevel.setReference('ANSI T1E1.4/99-161R3, Single-Carrier Rate Adaptive Digital Subscriber Line (RADSL).')
if mibBuilder.loadTexts: cAdslAtucCapConfPsdmLevel.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapConfPsdmLevel.setDescription('This managed object specifies the nominal power output of the ATU-C across the entire transmit spectrum. Observe that this implies the attenuation of the signal for some data rates. This value does not take effect until the modem has retrained against the ATU-C to which the ATU-R has a connection.')
cAdslAturCapConfTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(60)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAturCapConfTargetSnrMgn.setStatus('current')
if mibBuilder.loadTexts: cAdslAturCapConfTargetSnrMgn.setDescription('This object specifies the target SNR margin. This is the desired noise margin the ATU-R must achieve with a BER of 10-7 or better to successfully complete training.')
cAdslAturCapConfMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 12), AdslLineCapUpstreamRate()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAturCapConfMinTxRate.setStatus('current')
if mibBuilder.loadTexts: cAdslAturCapConfMinTxRate.setDescription('This object specifies the minimum acceptable upstream line rate.')
cAdslAturCapConfMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 13), AdslLineCapUpstreamRate().clone(91000)).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAturCapConfMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: cAdslAturCapConfMaxTxRate.setDescription('This object specifies the desired line rate which the ATU-R will attempt to train at.')
cAdslAturCapConfPsdmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 149, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-53, -53), ValueRangeConstraint(-50, -50), ValueRangeConstraint(-47, -47), ValueRangeConstraint(-44, -44), ValueRangeConstraint(-41, -41), ValueRangeConstraint(-38, -38), )).clone(-38)).setUnits('dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAturCapConfPsdmLevel.setReference('ANSI T1E1.4/99-161R3, Single-Carrier Rate Adaptive Digital Subscriber Line (RADSL).')
if mibBuilder.loadTexts: cAdslAturCapConfPsdmLevel.setStatus('current')
if mibBuilder.loadTexts: cAdslAturCapConfPsdmLevel.setDescription('This managed object specifies the nominal power output of the ATU-R across the entire transmit spectrum. Observe that this implies the attenuation of the signal for some data rates. This value does not take effect until the modem has retrained against the ATU-C to which the ATU-R has a connection.')
cAdslLineCapMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 149, 2))
cAdslLineCapMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 149, 2, 0))
ciscoAdslLineCapMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 149, 3))
ciscoAdslLineCapMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 1))
ciscoAdslLineCapMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 2))
ciscoAdslLineCapMIBAtucCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 1, 1)).setObjects(("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapBasicGroup"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapGroup"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapPM15MinIntervalGroup"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapPM1DayIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAdslLineCapMIBAtucCompliance = ciscoAdslLineCapMIBAtucCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoAdslLineCapMIBAtucCompliance.setDescription('The compliance statement for entities that implement the CISCO-ADSL-CAP-LINE-MIB. Implementation of this MIB is mandatory for any platform that supports one or more ADSL line interfaces that implement the CAP line code.')
ciscoAdslLineCapMIBAturCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 1, 2)).setObjects(("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAdslLineCapMIBAturCompliance = ciscoAdslLineCapMIBAturCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoAdslLineCapMIBAturCompliance.setDescription('The compliance statement for entities that implement the CISCO-ADSL-CAP-LINE-MIB and manage ADSL ATU-R class devices. Implementation of this MIB is mandatory for any platform that supports one or more ADSL line interfaces that implement the CAP line code.')
cAdslAtucCapBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 2, 1)).setObjects(("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapCurrState"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapCurrRxGain"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapCurrRxSnr"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapPerfInitFailures"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslLineCapConfTrainingMode"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslLineCapConfInterleaveDelay"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslLineCapConfCpeSignature"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapConfTargetSnrMgn"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapConfMinTxRate"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapConfMaxTxRate"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapConfDown136KBaudEnable"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapConfUp68KBaudEnable"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapConfUp17KBaudEnable"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapConfPsdmLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAtucCapBasicGroup = cAdslAtucCapBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapBasicGroup.setDescription('A collection of managed objects defining the basic operation of an ATU-C implementing the CAP line code.')
cAdslAturBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 2, 2)).setObjects(("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapCurrRxGain"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslLineCapConfTrainingMode"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapConfTargetSnrMgn"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapConfMinTxRate"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapConfMaxTxRate"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapConfPsdmLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAturBasicGroup = cAdslAturBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAturBasicGroup.setDescription('A collection of managed objects defining the basic operation of an ATU-R implementing the CAP line code.')
cAdslAturCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 2, 3)).setObjects(("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapCurrRxGain"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapConfTargetSnrMgn"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapConfMinTxRate"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapConfMaxTxRate"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAturCapConfPsdmLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAturCapGroup = cAdslAturCapGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAturCapGroup.setDescription('A collection of managed objects defining the capability to remotely manage a ATU-R.')
cAdslAtucCapPM15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 2, 4)).setObjects(("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapPerfCurr15MinInitFailures"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapIntervalInitFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAtucCapPM15MinIntervalGroup = cAdslAtucCapPM15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPM15MinIntervalGroup.setDescription('A collection of managed objects defining near-end performance data collection capability using 15-minute intervals.')
cAdslAtucCapPM1DayIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 149, 3, 2, 5)).setObjects(("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapPerfCurr1DayInitFailures"), ("CISCO-ADSL-CAP-LINE-MIB", "cAdslAtucCapPerfPrev1DayInitFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAtucCapPM1DayIntervalGroup = cAdslAtucCapPM1DayIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucCapPM1DayIntervalGroup.setDescription('A collection of managed objects defining near-end performance data collection capability using 1-day intervals.')
mibBuilder.exportSymbols("CISCO-ADSL-CAP-LINE-MIB", cAdslLineCapConfInterleaveDelay=cAdslLineCapConfInterleaveDelay, ciscoAdslLineCapMIBCompliances=ciscoAdslLineCapMIBCompliances, cAdslAtucCapPerfDataTable=cAdslAtucCapPerfDataTable, cAdslAtucCapPerfCurr15MinInitFailures=cAdslAtucCapPerfCurr15MinInitFailures, AdslLineCapUpstreamRate=AdslLineCapUpstreamRate, cAdslAturCapConfMinTxRate=cAdslAturCapConfMinTxRate, cAdslAturCapConfMaxTxRate=cAdslAturCapConfMaxTxRate, cAdslAtucCapConfPsdmLevel=cAdslAtucCapConfPsdmLevel, cAdslAtucCapIntervalInitFailures=cAdslAtucCapIntervalInitFailures, ciscoAdslLineCapMIBGroups=ciscoAdslLineCapMIBGroups, cAdslAtucCapPM15MinIntervalGroup=cAdslAtucCapPM15MinIntervalGroup, cAdslAtucCapConfUp17KBaudEnable=cAdslAtucCapConfUp17KBaudEnable, cAdslAturCapPhysEntry=cAdslAturCapPhysEntry, cAdslLineCapConfProfileEntry=cAdslLineCapConfProfileEntry, cAdslAtucCapConfTargetSnrMgn=cAdslAtucCapConfTargetSnrMgn, cAdslLineCapMIBNotifications=cAdslLineCapMIBNotifications, cAdslAturBasicGroup=cAdslAturBasicGroup, cAdslLineCapConfProfileTable=cAdslLineCapConfProfileTable, cAdslAturCapCurrRxGain=cAdslAturCapCurrRxGain, cAdslLineCapConfTrainingMode=cAdslLineCapConfTrainingMode, cAdslAturCapPhysTable=cAdslAturCapPhysTable, cAdslAtucCapBasicGroup=cAdslAtucCapBasicGroup, cAdslAtucCapPerfPrev1DayInitFailures=cAdslAtucCapPerfPrev1DayInitFailures, cAdslAtucCapCurrRxSnr=cAdslAtucCapCurrRxSnr, cAdslAturCapConfPsdmLevel=cAdslAturCapConfPsdmLevel, ciscoAdslLineCapMIBConformance=ciscoAdslLineCapMIBConformance, PYSNMP_MODULE_ID=ciscoAdslLineCapMIB, cAdslAtucCapPerfInitFailures=cAdslAtucCapPerfInitFailures, cAdslAtucCapIntervalEntry=cAdslAtucCapIntervalEntry, cAdslAtucCapCurrRxGain=cAdslAtucCapCurrRxGain, cAdslLineCapMIBNotificationsPrefix=cAdslLineCapMIBNotificationsPrefix, cAdslLineCapConfCpeSignature=cAdslLineCapConfCpeSignature, cAdslAtucCapConfMinTxRate=cAdslAtucCapConfMinTxRate, ciscoAdslLineCapMIB=ciscoAdslLineCapMIB, cAdslAtucCapConfUp68KBaudEnable=cAdslAtucCapConfUp68KBaudEnable, cAdslAturCapGroup=cAdslAturCapGroup, cAdslAtucCapPhysTable=cAdslAtucCapPhysTable, cAdslAturCapConfTargetSnrMgn=cAdslAturCapConfTargetSnrMgn, ciscoAdslLineCapMIBAtucCompliance=ciscoAdslLineCapMIBAtucCompliance, cAdslAtucCapPM1DayIntervalGroup=cAdslAtucCapPM1DayIntervalGroup, cAdslAtucCapPerfDataEntry=cAdslAtucCapPerfDataEntry, cAdslAtucCapPhysEntry=cAdslAtucCapPhysEntry, ciscoAdslLineCapMIBAturCompliance=ciscoAdslLineCapMIBAturCompliance, ciscoAdslLineCapMIBObjects=ciscoAdslLineCapMIBObjects, cAdslAtucCapConfDown136KBaudEnable=cAdslAtucCapConfDown136KBaudEnable, cAdslAtucCapCurrState=cAdslAtucCapCurrState, AdslLineCapDownstreamRate=AdslLineCapDownstreamRate, cAdslAtucCapPerfCurr1DayInitFailures=cAdslAtucCapPerfCurr1DayInitFailures, cAdslAtucCapIntervalTable=cAdslAtucCapIntervalTable, cAdslAtucCapConfMaxTxRate=cAdslAtucCapConfMaxTxRate)
