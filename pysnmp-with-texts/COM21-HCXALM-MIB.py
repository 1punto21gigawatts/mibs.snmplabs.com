#
# PySNMP MIB module COM21-HCXALM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXALM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
com21Hcx, com21 = mibBuilder.importSymbols("COM21-HCX-MIB", "com21Hcx", "com21")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ModuleIdentity, IpAddress, MibIdentifier, Counter32, NotificationType, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ModuleIdentity", "IpAddress", "MibIdentifier", "Counter32", "NotificationType", "ObjectIdentity", "Counter64")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
com21HcxAlm = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 11))
if mibBuilder.loadTexts: com21HcxAlm.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxAlm.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxAlm.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxAlm.setDescription('This is the Com21 ComController Alarm Management MIB module. COM21 Part# 005-0025-00')
com21HcxCurrAlmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 15))
com21HcxEventLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 16))
com21HcxAlmSeverityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 17))
class EpochTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class AlarmSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("clear", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5))

com21HcxCurrAlmTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1), )
if mibBuilder.loadTexts: com21HcxCurrAlmTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxCurrAlmTable.setDescription('table of current alarms.')
com21HcxAlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1), ).setIndexNames((0, "COM21-HCXALM-MIB", "hcxAlmTrapId"), (0, "COM21-HCXALM-MIB", "hcxAlmShelfId"), (0, "COM21-HCXALM-MIB", "hcxAlmSlotId"), (0, "COM21-HCXALM-MIB", "hcxAlmPortId"))
if mibBuilder.loadTexts: com21HcxAlmEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxAlmEntry.setDescription('.')
hcxAlmTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmTrapId.setStatus('current')
if mibBuilder.loadTexts: hcxAlmTrapId.setDescription(' contains the trap id associated with the alarm.')
hcxAlmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 2), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmSeverity.setStatus('current')
if mibBuilder.loadTexts: hcxAlmSeverity.setDescription(' contains alarm severity.')
hcxAlmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 3), EpochTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmTime.setStatus('current')
if mibBuilder.loadTexts: hcxAlmTime.setDescription(' contains time (in the form of Epoch) that alarm occured.')
hcxAlmShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxAlmShelfId.setDescription(' contains the shelf id associated with the alarm.')
hcxAlmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxAlmSlotId.setDescription(' contains the slot id associated with the alarm.')
hcxAlmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmPortId.setStatus('current')
if mibBuilder.loadTexts: hcxAlmPortId.setDescription(' contains any port id associated with the alarm. If there is no associated port number then this attribute will be 0.')
hcxAlmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxAlmMacAddr.setDescription(' contains any MAC address (i.e. ComPort MAC Address) associated with the alarm. If there is no associated MAC address then this attribute will be 0.')
hcxAlmDataAValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmDataAValid.setStatus('current')
if mibBuilder.loadTexts: hcxAlmDataAValid.setDescription(' this attribute indicates if the hcxAlmDataA attribute is valid for this alarm.')
hcxAlmDataA = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmDataA.setStatus('current')
if mibBuilder.loadTexts: hcxAlmDataA.setDescription(' contains a single integer for data related to the alarm. i.e. for storing a threshold value associated with a threshold alarm. The application reading this value must have explicit knowledge of the trap id inorder to interpret this attribute.')
hcxAlmDataBValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmDataBValid.setStatus('current')
if mibBuilder.loadTexts: hcxAlmDataBValid.setDescription(' this attribute indicates if the hcxAlmDataB attribute is valid for this alarm.')
hcxAlmDataB = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmDataB.setStatus('current')
if mibBuilder.loadTexts: hcxAlmDataB.setDescription(' contains a second integer field for data related to the alarm. The application reading this value must have explicit knowledge of the trap id in order to interpret this attribute.')
hcxAlmStrDataValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmStrDataValid.setStatus('current')
if mibBuilder.loadTexts: hcxAlmStrDataValid.setDescription(' this attribute indicates if the hcxAlmStrData attribute is valid for this alarm.')
hcxAlmStrData = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 15, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmStrData.setStatus('current')
if mibBuilder.loadTexts: hcxAlmStrData.setDescription(' contains a display string for information related to the alarm. It maybe for storing a descriptive string or other text information.')
com21HcxEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1), )
if mibBuilder.loadTexts: com21HcxEventLogTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxEventLogTable.setDescription('table of alarm log.')
com21HcxEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1), ).setIndexNames((0, "COM21-HCXALM-MIB", "hcxEventLogId"))
if mibBuilder.loadTexts: com21HcxEventLogEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxEventLogEntry.setDescription('.')
hcxEventLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogId.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogId.setDescription(' contains alarm id. This is a simple sequential number starting at 1.')
hcxEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 2), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogSeverity.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogSeverity.setDescription(' contains alarm severity.')
hcxEventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 3), EpochTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogTime.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogTime.setDescription(' contains time (in the form of Epoch) that alarm occured.')
hcxEventLogShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogShelfId.setDescription(' contains the shelf id associated with the alarm.')
hcxEventLogSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogSlotId.setDescription(' contains the slot id associated with the alarm.')
hcxEventLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogPortId.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogPortId.setDescription(' contains any port id associated with the alarm. If there is no associated port number then this attribute will be 0.')
hcxEventLogMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogMacAddr.setDescription(' contains any MAC Address associated with the alarm. If there is no associated MAC Address then this attribute will be 0.')
hcxEventLogTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogTrapId.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogTrapId.setDescription(' contains the trap id associated with the alarm.')
hcxEventLogDataAValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogDataAValid.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogDataAValid.setDescription(' this attribute indicates if the hcxEventLogDataA attribute is valid for this alarm.')
hcxEventLogDataA = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogDataA.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogDataA.setDescription(' contains a single integer for data related to the alarm. i.e. for storing a threshold value associated with a threshold alarm. The application reading this value must have explicit knowledge of the trap id inorder to interpret this attribute.')
hcxEventLogDataBValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogDataBValid.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogDataBValid.setDescription(' this attribute indicates if the hcxEventLogDataB attribute is valid for this alarm.')
hcxEventLogDataB = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventLogDataB.setStatus('current')
if mibBuilder.loadTexts: hcxEventLogDataB.setDescription(' contains a second integer field for data related to the alarm. The application reading this value must have explicit knowledge of the trap id in order to interpret this attribute.')
hcxEventStrDataValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventStrDataValid.setStatus('current')
if mibBuilder.loadTexts: hcxEventStrDataValid.setDescription(' this attribute indicates if the hcxEventStrData attribute is valid for this alarm.')
hcxEventStrData = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 16, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxEventStrData.setStatus('current')
if mibBuilder.loadTexts: hcxEventStrData.setDescription(' contains a display string for information related to the alarm. It maybe for storing a descriptive string or other text information.')
com21HcxAlmSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 17, 1), )
if mibBuilder.loadTexts: com21HcxAlmSeverityTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxAlmSeverityTable.setDescription('table of alarm severities.')
com21HcxAlmSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 17, 1, 1), ).setIndexNames((0, "COM21-HCXALM-MIB", "hcxAlmSevTrapId"))
if mibBuilder.loadTexts: com21HcxAlmSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxAlmSeverityEntry.setDescription('.')
hcxAlmSevTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxAlmSevTrapId.setStatus('current')
if mibBuilder.loadTexts: hcxAlmSevTrapId.setDescription(' contains the trap id.')
hcxSetAlmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 17, 1, 1, 2), AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxSetAlmSeverity.setStatus('current')
if mibBuilder.loadTexts: hcxSetAlmSeverity.setDescription(' contains alarm severity. See trap description for defaults.')
mibBuilder.exportSymbols("COM21-HCXALM-MIB", hcxAlmDataB=hcxAlmDataB, hcxEventLogTrapId=hcxEventLogTrapId, hcxAlmMacAddr=hcxAlmMacAddr, EpochTime=EpochTime, hcxAlmTime=hcxAlmTime, hcxAlmStrData=hcxAlmStrData, hcxEventLogSlotId=hcxEventLogSlotId, AlarmSeverity=AlarmSeverity, hcxAlmTrapId=hcxAlmTrapId, hcxEventLogDataA=hcxEventLogDataA, hcxEventStrData=hcxEventStrData, com21HcxAlm=com21HcxAlm, hcxEventLogMacAddr=hcxEventLogMacAddr, hcxEventLogId=hcxEventLogId, com21HcxCurrAlmTable=com21HcxCurrAlmTable, hcxAlmSevTrapId=hcxAlmSevTrapId, hcxEventLogDataAValid=hcxEventLogDataAValid, com21HcxAlmEntry=com21HcxAlmEntry, com21HcxAlmSeverityGroup=com21HcxAlmSeverityGroup, com21HcxAlmSeverityEntry=com21HcxAlmSeverityEntry, com21HcxCurrAlmGroup=com21HcxCurrAlmGroup, hcxEventLogTime=hcxEventLogTime, PYSNMP_MODULE_ID=com21HcxAlm, hcxAlmDataAValid=hcxAlmDataAValid, hcxEventLogDataBValid=hcxEventLogDataBValid, hcxEventLogShelfId=hcxEventLogShelfId, hcxAlmShelfId=hcxAlmShelfId, hcxAlmPortId=hcxAlmPortId, hcxAlmStrDataValid=hcxAlmStrDataValid, hcxEventLogSeverity=hcxEventLogSeverity, hcxAlmSlotId=hcxAlmSlotId, com21HcxEventLogEntry=com21HcxEventLogEntry, com21HcxEventLogTable=com21HcxEventLogTable, hcxEventStrDataValid=hcxEventStrDataValid, hcxAlmDataA=hcxAlmDataA, com21HcxEventLogGroup=com21HcxEventLogGroup, hcxEventLogDataB=hcxEventLogDataB, hcxSetAlmSeverity=hcxSetAlmSeverity, com21HcxAlmSeverityTable=com21HcxAlmSeverityTable, hcxAlmDataBValid=hcxAlmDataBValid, hcxAlmSeverity=hcxAlmSeverity, hcxEventLogPortId=hcxEventLogPortId)
