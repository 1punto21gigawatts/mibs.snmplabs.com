#
# PySNMP MIB module ANS-MLBAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANS-MLBAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
DateAndTime, mlpmpR115, RowPointer, RowStatus = mibBuilder.importSymbols("ANS-COMMON-MIB", "DateAndTime", "mlpmpR115", "RowPointer", "RowStatus")
ansSlotSystemNodeIndex, ansSlotPosition, ansSlotSubrackIndex, ansBoardSystemNodeIndex, ansBoardSubrackIndex, ansBoardPosition = mibBuilder.importSymbols("ANS-EQUIPMENT-MIB", "ansSlotSystemNodeIndex", "ansSlotPosition", "ansSlotSubrackIndex", "ansBoardSystemNodeIndex", "ansBoardSubrackIndex", "ansBoardPosition")
ansAccessUserPortPosition, ansAccessUserPortSubrack, ansAccessUserPortIndex, ansAccessUserPortSystemNode = mibBuilder.importSymbols("ANS-GS-MIB", "ansAccessUserPortPosition", "ansAccessUserPortSubrack", "ansAccessUserPortIndex", "ansAccessUserPortSystemNode")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Integer32, iso, Counter32, Unsigned32, Gauge32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Integer32", "iso", "Counter32", "Unsigned32", "Gauge32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Counter64", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mlbas = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5))
mlbasRadioNode = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1))
mlbasAccessTerminalSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2))
mlbasAccessTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3))
mlbasServiceUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4))
mlbasDownLinkPerf15min = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5))
mlbasUpLinkPerf15min = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6))
mlbasDownLinkPerf24hour = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7))
mlbasUpLinkPerf24hour = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8))
mlbasDownLinkLog15min = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9))
mlbasUpLinkLog15min = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10))
mlbasDownLinkLog24hour = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11))
mlbasUpLinkLog24hour = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12))
mlbasServiceUnitPort = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13))
mlbasRadioNodeTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1), )
if mibBuilder.loadTexts: mlbasRadioNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRadioNodeTable.setDescription('Radio node table')
mlbasRadioNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasRadioNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRadioNodeEntry.setDescription('This entity represents a WBAS radio node which consists of an indoor Control Unit (CU) and an outdoor Radio Unit. The CU consists of MAC and modem and is implemented as an extended board that can be inserted into a subrack slot.')
mlbasRnCUId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUId.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUId.setDescription('Radio Node Identity')
mlbasRnCUSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUSecurity.setDescription('Controls scrambling on RNs and ATs')
mlbasRnCUBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("ber3", 3), ("ber4", 4), ("ber5", 5), ("ber6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUBerThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUBerThreshold.setDescription('Threshold for bit error rate alarms')
mlbasRnCUBwLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUBwLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUBwLimit.setDescription('Percentage of the available RN - AT air interface bandwidth that is to be utilized for user-traffic')
mlbasRnCULoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("permanent", 2), ("selfTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCULoopMode.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCULoopMode.setDescription('The loop mode')
mlbasRnCULoopPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modem", 1), ("radio", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCULoopPoint.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCULoopPoint.setDescription('The loop point: Only editable when permanent')
mlbasRnCUAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allAlarms", 1), ("filter", 2), ("noAlarms", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUAlarmLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUAlarmLevel.setDescription('Controls the alarm filtering at the RN')
mlbasRnCUSignedOnAts = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUSignedOnAts.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUSignedOnAts.setDescription('Number of signed on ATs at the RN')
mlbasRnCUSignedOffAts = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUSignedOffAts.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUSignedOffAts.setDescription('Number of signed off ATs at the RN')
mlbasRnCUChBw = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUChBw.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUChBw.setDescription('Channel Bandwidth [kHz]')
mlbasRnCUHwIdModem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(41, 41)).setFixedLength(41)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUHwIdModem.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUHwIdModem.setDescription('The hardware id of the modem')
mlbasRnCUSwIdModem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUSwIdModem.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUSwIdModem.setDescription('The software id of the modem')
mlbasRnRUDownFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnRUDownFreq.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUDownFreq.setDescription('Current down link center frequency [kHz]')
mlbasRnRUUpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUUpFreq.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUUpFreq.setDescription('Current up link center frequency [kHz]')
mlbasRnRUDownFreqMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUDownFreqMin.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUDownFreqMin.setDescription('Min. down link center frequency in subband [kHz]')
mlbasRnRUDownFreqMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUDownFreqMax.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUDownFreqMax.setDescription('Max. down link center frequency in subband [kHz]')
mlbasRnRUFreqDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUFreqDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUFreqDuplex.setDescription('Duplex dist. (mlbasRnRUUpFreq - mlbasRnRUDownFreq) [kHz]')
mlbasRnRUFreqStep = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUFreqStep.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUFreqStep.setDescription('Size of one frequency tuning step [kHz]')
mlbasRnRUOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnRUOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUOutputPower.setDescription('Current output power [dbm]')
mlbasRnRUOutputPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUOutputPowerMin.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUOutputPowerMin.setDescription('Minimum output power [dbm]')
mlbasRnRUOutputPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUOutputPowerMax.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUOutputPowerMax.setDescription('Maximum output power [dbm]')
mlbasRnRUHwIdRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(41, 41)).setFixedLength(41)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUHwIdRadio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUHwIdRadio.setDescription('The hardware id of the radio')
mlbasRnRUSwIdRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUSwIdRadio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRUSwIdRadio.setDescription('The software id of the radio')
mlbasRnInterfLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnInterfLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnInterfLevel.setDescription('Interference levels to set the RSSI expected')
mlbasRnRSSIEXP = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnRSSIEXP.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnRSSIEXP.setDescription('Nominal RF Input Power [dbm]')
mlbasRnCUSignOffAts = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("signOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUSignOffAts.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnCUSignOffAts.setDescription('Initiates sign off of all ATs at the RN')
mlbasRnSwitchBoardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("switch-board", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnSwitchBoardAction.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasRnSwitchBoardAction.setDescription('')
mlbasAccessTerminalSlotTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1), )
if mibBuilder.loadTexts: mlbasAccessTerminalSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAccessTerminalSlotTable.setDescription('Access Terminal Slot table')
mlbasAccessTerminalSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSlotSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotPosition"))
if mibBuilder.loadTexts: mlbasAccessTerminalSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAccessTerminalSlotEntry.setDescription('This entity represents the relation between a Radio Node and an Access Terminal.')
mlbasAtSlotTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotTerminalId.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtSlotTerminalId.setDescription('Access Terminal Identity, unique within the system')
mlbasAtSlotRnPos = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotRnPos.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtSlotRnPos.setDescription('RN control board pos. within the subrack')
mlbasAtSlotLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotLocation.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtSlotLocation.setDescription('Physical location of the AT')
mlbasAtSlotSignOnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotSignOnAction.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtSlotSignOnAction.setDescription('Initiates sign on for the AT')
mlbasAtSlotSignOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("signedOn", 1), ("signedOff", 2), ("signingOn", 3), ("signingOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtSlotSignOnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtSlotSignOnStatus.setDescription('Current sign on status for the AT')
mlbasAtSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtSlotRowStatus.setDescription('')
mlbasAccessTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1), )
if mibBuilder.loadTexts: mlbasAccessTerminalTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAccessTerminalTable.setDescription('Access Terminal table')
mlbasAccessTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSlotSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotPosition"))
if mibBuilder.loadTexts: mlbasAccessTerminalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAccessTerminalEntry.setDescription('This entity represents a WBAS Access Terminal in the remote part of the access network located at a customer. Collection of link performance is also controlled via this entity.')
mlbasAtCUPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtCUPerformance.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUPerformance.setDescription('Current performance monitoring status')
mlbasAtCUPerfStart = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUPerfStart.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUPerfStart.setDescription('Indicates when monitoring was started')
mlbasAtCUAtmLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtCUAtmLoop.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUAtmLoop.setDescription('Controls ATM traffic loop')
mlbasAtCUBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("ber3", 3), ("ber4", 4), ("ber5", 5), ("ber6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtCUBerThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUBerThreshold.setDescription('Threshold for bit error rate alarms')
mlbasAtCUValid15MinPerf = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUValid15MinPerf.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUValid15MinPerf.setDescription('Number of valid 15 min. periods stored in CP')
mlbasAtCUInvalid15MinPerf = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUInvalid15MinPerf.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUInvalid15MinPerf.setDescription('Number of invalid 15 min. periods stored in CP')
mlbasAtCUValid24HPerf = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUValid24HPerf.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUValid24HPerf.setDescription('Number of valid 24 hour periods stored in CP')
mlbasAtCUInvalid24HPerf = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUInvalid24HPerf.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUInvalid24HPerf.setDescription('Number of invalid 24 hour periods stored in CP')
mlbasAtCUHwIdModem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(41, 41)).setFixedLength(41)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUHwIdModem.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUHwIdModem.setDescription('The hardware id of the modem')
mlbasAtCUSwIdModem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUSwIdModem.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtCUSwIdModem.setDescription('The software id of the modem')
mlbasAtRUDownFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUDownFreq.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtRUDownFreq.setDescription('Current down link frequency [kHz]')
mlbasAtRUUpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUUpFreq.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtRUUpFreq.setDescription('Current up link frequency [kHz]')
mlbasAtRUOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtRUOutputPower.setDescription('Current output power [dbm]')
mlbasAtRUHwIdRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(41, 41)).setFixedLength(41)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUHwIdRadio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtRUHwIdRadio.setDescription('The hardware id of the radio')
mlbasAtRUSwIdRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUSwIdRadio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasAtRUSwIdRadio.setDescription('The software id of the radio')
mlbasServiceUnitTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1), )
if mibBuilder.loadTexts: mlbasServiceUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasServiceUnitTable.setDescription('Service Interface Unit table')
mlbasServiceUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasSuPos"))
if mibBuilder.loadTexts: mlbasServiceUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasServiceUnitEntry.setDescription('This entity represents a WBAS Service Interface Unit which can be inserted into an Access Terminal as a plug-in card. Both plug-in card and corresponding slot are covered by the entity.')
mlbasSuPos = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuPos.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuPos.setDescription('Position within the AT')
mlbasSuManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unmanaged", 1), ("empty", 2), ("present", 3), ("managed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasSuManagedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuManagedStatus.setDescription('Defines status of the slot; Only managed and unmanaged is selectable; When setting managed, empty or present is returned')
mlbasSuOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuOperState.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuOperState.setDescription('Operational state')
mlbasSuHwId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(35, 35)).setFixedLength(35)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuHwId.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuHwId.setDescription('Hardware identity; mlbasSuManagedStatus must be set to unmanaged')
mlbasSuType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("ethernet", 2), ("e1", 3), ("ds1", 4), ("atm", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasSuType.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuType.setDescription('Interface type')
mlbasSuPciId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuPciId.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuPciId.setDescription('...')
mlbasSuPciVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuPciVendor.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuPciVendor.setDescription('...')
mlbasSuPortStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuPortStartIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuPortStartIndex.setDescription('Port start index')
mlbasSuNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuNumOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSuNumOfPorts.setDescription('Number of provided ports on the SU')
mlbasDownLinkPerf15minTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1), )
if mibBuilder.loadTexts: mlbasDownLinkPerf15minTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDownLinkPerf15minTable.setDescription('Down Link Performance 15 min Table')
mlbasDownLinkPerf15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasDL15PeriodIndex"))
if mibBuilder.loadTexts: mlbasDownLinkPerf15minEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDownLinkPerf15minEntry.setDescription('This entity contains performance data collected for the down link.')
mlbasDL15PeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PeriodIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PeriodIndex.setDescription('The period number')
mlbasDL15UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15UpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15UpdateTime.setDescription('Update time for the 15 minute counters')
mlbasDL15PerfCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfCellErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfCellErrRatio.setDescription('Values for 15 minute counters: Cell error ratio')
mlbasDL15PerfCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfCellLossRatio.setDescription('Values for 15 minute counters: Cell loss ratio')
mlbasDL15PerfUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfUbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfUbrDiscCell.setDescription('Values for 15 minute counters: Unspecified Bit Rate discarded cells')
mlbasDL15PerfCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfCbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfCbrDiscCell.setDescription('Values for 15 minute counters: Constant Bit Rate discarded cells')
mlbasDL15PerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfAvailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfAvailTime.setDescription('Values for 15 minute counters: Availability time')
mlbasDL15PerfUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfUnavailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfUnavailTime.setDescription('Values for 15 minute counters: Unavailability time')
mlbasDL15PerfErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfErroredSecRatio.setDescription('Values for 15 minute counters: Errored seconds')
mlbasDL15PerfSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfSevErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfSevErroredSecRatio.setDescription('Values for 15 minute counters: Severely errored seconds')
mlbasDL15PerfBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfBgBlockErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfBgBlockErrRatio.setDescription('Values for 15 minute counters: Background block error ratio')
mlbasDL15PerfMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfMinInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfMinInPower.setDescription('Values for 15 minute counters: Minimum electric power received by antenna')
mlbasDL15PerfMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfMaxInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfMaxInPower.setDescription('Values for 15 minute counters: Maximum electric power received by antenna')
mlbasDL15PerfAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfAverageInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfAverageInPower.setDescription('Values for 15 minute counters: Average electric power received by antenna')
mlbasDL15PerfMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfMinOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfMinOutPower.setDescription('Values for 15 minute counters: Minimum power transmitted by radio')
mlbasDL15PerfMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfMaxOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfMaxOutPower.setDescription('Values for 15 minute counters: Maximum power transmitted by radio')
mlbasDL15PerfAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfAverageOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfAverageOutPower.setDescription('Values for 15 minute counters: Average power transmitted by radio')
mlbasDL15PerfTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfTerminalId.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15PerfTerminalId.setDescription('Access Terminal Identity, unique within the system')
mlbasUpLinkPerf15minTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1), )
if mibBuilder.loadTexts: mlbasUpLinkPerf15minTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUpLinkPerf15minTable.setDescription('Up Link Performance 15 min Table')
mlbasUpLinkPerf15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasUL15PeriodIndex"))
if mibBuilder.loadTexts: mlbasUpLinkPerf15minEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUpLinkPerf15minEntry.setDescription('This entity contains performance data collected for the up link.')
mlbasUL15PeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PeriodIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PeriodIndex.setDescription('The period number')
mlbasUL15UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15UpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15UpdateTime.setDescription('Update time for the 15 minute counters')
mlbasUL15PerfCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfCellErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfCellErrRatio.setDescription('Previous values for 15 minute counters: Cell error ratio')
mlbasUL15PerfCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfCellLossRatio.setDescription('Values for 15 minute counters: Cell loss ratio')
mlbasUL15PerfUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfUbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfUbrDiscCell.setDescription('Values for 15 minute counters: Unspecified Bit Rate discarded cells')
mlbasUL15PerfCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfCbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfCbrDiscCell.setDescription('Values for 15 minute counters: Constant Bit Rate discarded cells')
mlbasUL15PerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfAvailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfAvailTime.setDescription('Values for 15 minute counters: Availability time')
mlbasUL15PerfUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfUnavailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfUnavailTime.setDescription('Values for 15 minute counters: Unavailability time')
mlbasUL15PerfErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfErroredSecRatio.setDescription('Values for 15 minute counters: Errored seconds')
mlbasUL15PerfSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfSevErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfSevErroredSecRatio.setDescription('Values for 15 minute counters: Severely errored seconds')
mlbasUL15PerfBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfBgBlockErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfBgBlockErrRatio.setDescription('Values for 15 minute counters: Background block error ratio')
mlbasUL15PerfMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfMinInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfMinInPower.setDescription('Values for 15 minute counters: Minimum electric power received by antenna')
mlbasUL15PerfMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfMaxInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfMaxInPower.setDescription('Values for 15 minute counters: Maximum electric power received by antenna')
mlbasUL15PerfAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfAverageInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfAverageInPower.setDescription('Values for 15 minute counters: Average electric power received by antenna')
mlbasUL15PerfMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfMinOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfMinOutPower.setDescription('Values for 15 minute counters: Minimum power transmitted by radio')
mlbasUL15PerfMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfMaxOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfMaxOutPower.setDescription('Values for 15 minute counters: Maximum power transmitted by radio')
mlbasUL15PerfAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfAverageOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfAverageOutPower.setDescription('Values for 15 minute counters: Average power transmitted by radio')
mlbasUL15PerfTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfTerminalId.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15PerfTerminalId.setDescription('Access Terminal Identity, unique within the system')
mlbasDownLinkPerf24hourTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1), )
if mibBuilder.loadTexts: mlbasDownLinkPerf24hourTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDownLinkPerf24hourTable.setDescription('This entity contains performance data collected for the down link. Down Link Performance 24 hour Table.')
mlbasDownLinkPerf24hourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasDL24PeriodIndex"))
if mibBuilder.loadTexts: mlbasDownLinkPerf24hourEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDownLinkPerf24hourEntry.setDescription('')
mlbasDL24PeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PeriodIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PeriodIndex.setDescription('The period number')
mlbasDL24UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24UpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24UpdateTime.setDescription('Update time for the 24 hour counters')
mlbasDL24PerfCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfCellErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfCellErrRatio.setDescription('Values for the 24 hour counters: Cell error ratio')
mlbasDL24PerfCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfCellLossRatio.setDescription('Values for the 24 hour counters: Cell loss ratio')
mlbasDL24PerfUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfUbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfUbrDiscCell.setDescription('Values for the 24 hour counters: Unspecified Bit Rate discarded cells')
mlbasDL24PerfCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfCbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfCbrDiscCell.setDescription('Values for the 24 hour counters: Constant Bit Rate discarded cells')
mlbasDL24PerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfAvailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfAvailTime.setDescription('Values for the 24 hour counters: Availability time')
mlbasDL24PerfUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfUnavailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfUnavailTime.setDescription('Values for the 24 hour counters: Unavailability time')
mlbasDL24PerfErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfErroredSecRatio.setDescription('Values for the 24 hour counters: Errored seconds')
mlbasDL24PerfSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfSevErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfSevErroredSecRatio.setDescription('Values for the 24 hour counters: Severely errored seconds')
mlbasDL24PerfBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfBgBlockErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfBgBlockErrRatio.setDescription('Values for the 24 hour counters: Background block error ratio')
mlbasDL24PerfMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfMinInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfMinInPower.setDescription('Values for the 24 hour counters: Minimum electric power received by antenna')
mlbasDL24PerfMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfMaxInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfMaxInPower.setDescription('Values for the 24 hour counters: Maximum electric power received by antenna')
mlbasDL24PerfAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfAverageInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfAverageInPower.setDescription('Values for the 24 hour counters: Average electric power received by antenna')
mlbasDL24PerfMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfMinOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfMinOutPower.setDescription('Values for the 24 hour counters: Minimum power transmitted by radio')
mlbasDL24PerfMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfMaxOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfMaxOutPower.setDescription('Values for the 24 hour counters: Maximum power transmitted by radio')
mlbasDL24PerfAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfAverageOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfAverageOutPower.setDescription('Values for the 24 hour counters: Average power transmitted by radio')
mlbasDL24PerfTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfTerminalId.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24PerfTerminalId.setDescription('Access Terminal Identity, unique within the system')
mlbasUpLinkPerf24hourTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1), )
if mibBuilder.loadTexts: mlbasUpLinkPerf24hourTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUpLinkPerf24hourTable.setDescription('This entity contains performance data collected for the up link. Up Link Performance 24 hour Table.')
mlbasUpLinkPerf24hourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasUL24PeriodIndex"))
if mibBuilder.loadTexts: mlbasUpLinkPerf24hourEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUpLinkPerf24hourEntry.setDescription('')
mlbasUL24PeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PeriodIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PeriodIndex.setDescription('The period number')
mlbasUL24UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24UpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24UpdateTime.setDescription('Update time for the 24 hour counters')
mlbasUL24PerfCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfCellErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfCellErrRatio.setDescription('Values for the 24 hour counters: Cell error ratio')
mlbasUL24PerfCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfCellLossRatio.setDescription('Values for the 24 hour counters: Cell loss ratio')
mlbasUL24PerfUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfUbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfUbrDiscCell.setDescription('Values for the 24 hour counters: Unspecified Bit Rate discarded cells')
mlbasUL24PerfCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfCbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfCbrDiscCell.setDescription('Values for the 24 hour counters: Constant Bit Rate discarded cells')
mlbasUL24PerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfAvailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfAvailTime.setDescription('Values for the 24 hour counters: Availability time')
mlbasUL24PerfUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfUnavailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfUnavailTime.setDescription('Values for the 24 hour counters: Unavailability time')
mlbasUL24PerfErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfErroredSecRatio.setDescription('Values for the 24 hour counters: Errored seconds')
mlbasUL24PerfSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfSevErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfSevErroredSecRatio.setDescription('Values for the 24 hour counters: Severely errored seconds')
mlbasUL24PerfBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfBgBlockErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfBgBlockErrRatio.setDescription('Values for the 24 hour counters: Background block error ratio')
mlbasUL24PerfMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfMinInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfMinInPower.setDescription('Values for the 24 hour counters: Minimum electric power received by antenna')
mlbasUL24PerfMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfMaxInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfMaxInPower.setDescription('Values for the 24 hour counters: Maximum electric power received by antenna')
mlbasUL24PerfAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfAverageInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfAverageInPower.setDescription('Values for the 24 hour counters: Average electric power received by antenna')
mlbasUL24PerfMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfMinOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfMinOutPower.setDescription('Values for the 24 hour counters: Minimum power transmitted by radio')
mlbasUL24PerfMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfMaxOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfMaxOutPower.setDescription('Values for the 24 hour counters: Maximum power transmitted by radio')
mlbasUL24PerfAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfAverageOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfAverageOutPower.setDescription('Values for the 24 hour counters: Average power transmitted by radio')
mlbasUL24PerfTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfTerminalId.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24PerfTerminalId.setDescription('Access Terminal Identity, unique within the system')
mlbasDownLinkLog15minTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1), )
if mibBuilder.loadTexts: mlbasDownLinkLog15minTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDownLinkLog15minTable.setDescription('Down Link Log 15 min Table')
mlbasDownLinkLog15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasDownLinkLog15minEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDownLinkLog15minEntry.setDescription('This entity contains performance data collected for the down link.')
mlbasDL15LogCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogCellErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogCellErrRatio.setDescription('Values for 15 minute counters: Cell error ratio')
mlbasDL15LogCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogCellLossRatio.setDescription('Values for 15 minute counters: Cell loss ratio')
mlbasDL15LogUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogUbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogUbrDiscCell.setDescription('Values for 15 minute counters: Unspecified Bit Rate discarded cells')
mlbasDL15LogCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogCbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogCbrDiscCell.setDescription('Values for 15 minute counters: Constant Bit Rate discarded cells')
mlbasDL15LogAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogAvailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogAvailTime.setDescription('Values for 15 minute counters: Availability time')
mlbasDL15LogUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogUnavailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogUnavailTime.setDescription('Values for 15 minute counters: Unavailability time')
mlbasDL15LogErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogErroredSecRatio.setDescription('Values for 15 minute counters: Errored seconds')
mlbasDL15LogSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogSevErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogSevErroredSecRatio.setDescription('Values for 15 minute counters: Severely errored seconds')
mlbasDL15LogBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogBgBlockErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogBgBlockErrRatio.setDescription('Values for 15 minute counters: Background block error ratio')
mlbasDL15LogMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogMinInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogMinInPower.setDescription('Values for 15 minute counters: Minimum electric power received by antenna')
mlbasDL15LogMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogMaxInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogMaxInPower.setDescription('Values for 15 minute counters: Maximum electric power received by antenna')
mlbasDL15LogAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogAverageInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogAverageInPower.setDescription('Values for 15 minute counters: Average electric power received by antenna')
mlbasDL15LogMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogMinOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogMinOutPower.setDescription('Values for 15 minute counters: Minimum power transmitted by radio')
mlbasDL15LogMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogMaxOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogMaxOutPower.setDescription('Values for 15 minute counters: Maximum power transmitted by radio')
mlbasDL15LogAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogAverageOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL15LogAverageOutPower.setDescription('Values for 15 minute counters: Average power transmitted by radio')
mlbasUpLinkLog15minTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1), )
if mibBuilder.loadTexts: mlbasUpLinkLog15minTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUpLinkLog15minTable.setDescription('Up Link Log 15 min Table')
mlbasUpLinkLog15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasUpLinkLog15minEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUpLinkLog15minEntry.setDescription('This entity contains performance data collected for the up link.')
mlbasUL15LogCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogCellErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogCellErrRatio.setDescription('Previous values for 15 minute counters: Cell error ratio')
mlbasUL15LogCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogCellLossRatio.setDescription('Values for 15 minute counters: Cell loss ratio')
mlbasUL15LogUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogUbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogUbrDiscCell.setDescription('Values for 15 minute counters: Unspecified Bit Rate discarded cells')
mlbasUL15LogCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogCbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogCbrDiscCell.setDescription('Values for 15 minute counters: Constant Bit Rate discarded cells')
mlbasUL15LogAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogAvailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogAvailTime.setDescription('Values for 15 minute counters: Availability time')
mlbasUL15LogUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogUnavailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogUnavailTime.setDescription('Values for 15 minute counters: Unavailability time')
mlbasUL15LogErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogErroredSecRatio.setDescription('Values for 15 minute counters: Errored seconds')
mlbasUL15LogSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogSevErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogSevErroredSecRatio.setDescription('Values for 15 minute counters: Severely errored seconds')
mlbasUL15LogBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogBgBlockErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogBgBlockErrRatio.setDescription('Values for 15 minute counters: Background block error ratio')
mlbasUL15LogMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogMinInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogMinInPower.setDescription('Values for 15 minute counters: Minimum electric power received by antenna')
mlbasUL15LogMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogMaxInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogMaxInPower.setDescription('Values for 15 minute counters: Maximum electric power received by antenna')
mlbasUL15LogAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogAverageInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogAverageInPower.setDescription('Values for 15 minute counters: Average electric power received by antenna')
mlbasUL15LogMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogMinOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogMinOutPower.setDescription('Values for 15 minute counters: Minimum power transmitted by radio')
mlbasUL15LogMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogMaxOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogMaxOutPower.setDescription('Values for 15 minute counters: Maximum power transmitted by radio')
mlbasUL15LogAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogAverageOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL15LogAverageOutPower.setDescription('Values for 15 minute counters: Average power transmitted by radio')
mlbasDownLinkLog24hourTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1), )
if mibBuilder.loadTexts: mlbasDownLinkLog24hourTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDownLinkLog24hourTable.setDescription('This entity contains performance data collected for the down link. Down Link Log 24 hour Table.')
mlbasDownLinkLog24hourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasDownLinkLog24hourEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDownLinkLog24hourEntry.setDescription('')
mlbasDL24LogCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogCellErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogCellErrRatio.setDescription('Values for the 24 hour counters: Cell error ratio')
mlbasDL24LogCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogCellLossRatio.setDescription('Values for the 24 hour counters: Cell loss ratio')
mlbasDL24LogUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogUbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogUbrDiscCell.setDescription('Values for the 24 hour counters: Unspecified Bit Rate discarded cells')
mlbasDL24LogCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogCbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogCbrDiscCell.setDescription('Values for the 24 hour counters: Constant Bit Rate discarded cells')
mlbasDL24LogAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogAvailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogAvailTime.setDescription('Values for the 24 hour counters: Availability time')
mlbasDL24LogUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogUnavailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogUnavailTime.setDescription('Values for the 24 hour counters: Unavailability time')
mlbasDL24LogErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogErroredSecRatio.setDescription('Values for the 24 hour counters: Errored seconds')
mlbasDL24LogSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogSevErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogSevErroredSecRatio.setDescription('Values for the 24 hour counters: Severely errored seconds')
mlbasDL24LogBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogBgBlockErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogBgBlockErrRatio.setDescription('Values for the 24 hour counters: Background block error ratio')
mlbasDL24LogMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogMinInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogMinInPower.setDescription('Values for the 24 hour counters: Minimum electric power received by antenna')
mlbasDL24LogMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogMaxInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogMaxInPower.setDescription('Values for the 24 hour counters: Maximum electric power received by antenna')
mlbasDL24LogAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogAverageInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogAverageInPower.setDescription('Values for the 24 hour counters: Average electric power received by antenna')
mlbasDL24LogMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogMinOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogMinOutPower.setDescription('Values for the 24 hour counters: Minimum power transmitted by radio')
mlbasDL24LogMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogMaxOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogMaxOutPower.setDescription('Values for the 24 hour counters: Maximum power transmitted by radio')
mlbasDL24LogAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogAverageOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasDL24LogAverageOutPower.setDescription('Values for the 24 hour counters: Average power transmitted by radio')
mlbasUpLinkLog24hourTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1), )
if mibBuilder.loadTexts: mlbasUpLinkLog24hourTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUpLinkLog24hourTable.setDescription('This entity contains performance data collected for the up link. Up Link Log 24 hour Table.')
mlbasUpLinkLog24hourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasUpLinkLog24hourEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUpLinkLog24hourEntry.setDescription('')
mlbasUL24LogCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogCellErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogCellErrRatio.setDescription('Values for the 24 hour counters: Cell error ratio')
mlbasUL24LogCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogCellLossRatio.setDescription('Values for the 24 hour counters: Cell loss ratio')
mlbasUL24LogUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogUbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogUbrDiscCell.setDescription('Values for the 24 hour counters: Unspecified Bit Rate discarded cells')
mlbasUL24LogCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogCbrDiscCell.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogCbrDiscCell.setDescription('Values for the 24 hour counters: Constant Bit Rate discarded cells')
mlbasUL24LogAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogAvailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogAvailTime.setDescription('Values for the 24 hour counters: Availability time')
mlbasUL24LogUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogUnavailTime.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogUnavailTime.setDescription('Values for the 24 hour counters: Unavailability time')
mlbasUL24LogErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogErroredSecRatio.setDescription('Values for the 24 hour counters: Errored seconds')
mlbasUL24LogSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogSevErroredSecRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogSevErroredSecRatio.setDescription('Values for the 24 hour counters: Severely errored seconds')
mlbasUL24LogBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogBgBlockErrRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogBgBlockErrRatio.setDescription('Values for the 24 hour counters: Background block error ratio')
mlbasUL24LogMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogMinInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogMinInPower.setDescription('Values for the 24 hour counters: Minimum electric power received by antenna')
mlbasUL24LogMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogMaxInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogMaxInPower.setDescription('Values for the 24 hour counters: Maximum electric power received by antenna')
mlbasUL24LogAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogAverageInPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogAverageInPower.setDescription('Values for the 24 hour counters: Average electric power received by antenna')
mlbasUL24LogMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogMinOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogMinOutPower.setDescription('Values for the 24 hour counters: Minimum power transmitted by radio')
mlbasUL24LogMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogMaxOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogMaxOutPower.setDescription('Values for the 24 hour counters: Maximum power transmitted by radio')
mlbasUL24LogAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogAverageOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasUL24LogAverageOutPower.setDescription('Values for the 24 hour counters: Average power transmitted by radio')
mlbasServiceUnitPortTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13, 1), )
if mibBuilder.loadTexts: mlbasServiceUnitPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasServiceUnitPortTable.setDescription('Service Unit Port table')
mlbasServiceUnitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansAccessUserPortSystemNode"), (0, "ANS-GS-MIB", "ansAccessUserPortSubrack"), (0, "ANS-GS-MIB", "ansAccessUserPortPosition"), (0, "ANS-GS-MIB", "ansAccessUserPortIndex"))
if mibBuilder.loadTexts: mlbasServiceUnitPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasServiceUnitPortEntry.setDescription('Entries in the mlbasServiceUnitPortTable represent ports at Access Terminals provided as Service Unit ports at each Access Terminal.')
mlbasSUPortPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSUPortPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSUPortPosition.setDescription('Reference to slot at the AT for the SU.')
mlbasSUPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSUPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mlbasSUPortIndex.setDescription('Reference to the port at the SU.')
mibBuilder.exportSymbols("ANS-MLBAS-MIB", mlbasUL24LogCbrDiscCell=mlbasUL24LogCbrDiscCell, mlbasDL15LogUnavailTime=mlbasDL15LogUnavailTime, mlbasDL24LogCellLossRatio=mlbasDL24LogCellLossRatio, mlbasUpLinkPerf24hour=mlbasUpLinkPerf24hour, mlbasAccessTerminalTable=mlbasAccessTerminalTable, mlbasUL24PerfMinOutPower=mlbasUL24PerfMinOutPower, mlbasUL24PeriodIndex=mlbasUL24PeriodIndex, mlbasUL15PerfErroredSecRatio=mlbasUL15PerfErroredSecRatio, mlbasSuManagedStatus=mlbasSuManagedStatus, mlbasServiceUnitPortEntry=mlbasServiceUnitPortEntry, mlbasSuPortStartIndex=mlbasSuPortStartIndex, mlbas=mlbas, mlbasRnCUAlarmLevel=mlbasRnCUAlarmLevel, mlbasRnRUUpFreq=mlbasRnRUUpFreq, mlbasUL15LogMaxOutPower=mlbasUL15LogMaxOutPower, mlbasRnRUDownFreq=mlbasRnRUDownFreq, mlbasDL15LogErroredSecRatio=mlbasDL15LogErroredSecRatio, mlbasAtCUBerThreshold=mlbasAtCUBerThreshold, mlbasDownLinkLog24hour=mlbasDownLinkLog24hour, mlbasDL24UpdateTime=mlbasDL24UpdateTime, mlbasAccessTerminalSlotEntry=mlbasAccessTerminalSlotEntry, mlbasUL15PerfTerminalId=mlbasUL15PerfTerminalId, mlbasRnRUOutputPower=mlbasRnRUOutputPower, mlbasDL24PerfMinOutPower=mlbasDL24PerfMinOutPower, mlbasDL15LogCellErrRatio=mlbasDL15LogCellErrRatio, mlbasRnInterfLevel=mlbasRnInterfLevel, mlbasRnCUSignOffAts=mlbasRnCUSignOffAts, mlbasRnRSSIEXP=mlbasRnRSSIEXP, mlbasAtSlotRowStatus=mlbasAtSlotRowStatus, mlbasAtCUValid15MinPerf=mlbasAtCUValid15MinPerf, mlbasRnSwitchBoardAction=mlbasRnSwitchBoardAction, mlbasAtCUAtmLoop=mlbasAtCUAtmLoop, mlbasDL15LogCbrDiscCell=mlbasDL15LogCbrDiscCell, mlbasRadioNodeEntry=mlbasRadioNodeEntry, mlbasDL24PerfAvailTime=mlbasDL24PerfAvailTime, mlbasDL24LogAverageOutPower=mlbasDL24LogAverageOutPower, mlbasDL24PerfTerminalId=mlbasDL24PerfTerminalId, mlbasRnCUSignedOffAts=mlbasRnCUSignedOffAts, mlbasDL24LogMaxInPower=mlbasDL24LogMaxInPower, mlbasRnCUId=mlbasRnCUId, mlbasSuHwId=mlbasSuHwId, mlbasUL15PeriodIndex=mlbasUL15PeriodIndex, mlbasDL15LogUbrDiscCell=mlbasDL15LogUbrDiscCell, mlbasUL24UpdateTime=mlbasUL24UpdateTime, mlbasUpLinkLog15min=mlbasUpLinkLog15min, mlbasDL24LogAverageInPower=mlbasDL24LogAverageInPower, mlbasUpLinkLog24hourTable=mlbasUpLinkLog24hourTable, mlbasUL24LogMinInPower=mlbasUL24LogMinInPower, mlbasUL24PerfMinInPower=mlbasUL24PerfMinInPower, mlbasUL15PerfMaxOutPower=mlbasUL15PerfMaxOutPower, mlbasDL24PerfBgBlockErrRatio=mlbasDL24PerfBgBlockErrRatio, mlbasDL24LogUnavailTime=mlbasDL24LogUnavailTime, mlbasServiceUnitPort=mlbasServiceUnitPort, mlbasUL24PerfErroredSecRatio=mlbasUL24PerfErroredSecRatio, mlbasUL24LogMaxOutPower=mlbasUL24LogMaxOutPower, mlbasUL15LogErroredSecRatio=mlbasUL15LogErroredSecRatio, mlbasDL24LogAvailTime=mlbasDL24LogAvailTime, mlbasDownLinkLog15minEntry=mlbasDownLinkLog15minEntry, mlbasDL15PerfMaxInPower=mlbasDL15PerfMaxInPower, mlbasDL15LogAvailTime=mlbasDL15LogAvailTime, mlbasDL24LogUbrDiscCell=mlbasDL24LogUbrDiscCell, mlbasUL15PerfAverageInPower=mlbasUL15PerfAverageInPower, mlbasUL15PerfAverageOutPower=mlbasUL15PerfAverageOutPower, mlbasDL15LogAverageInPower=mlbasDL15LogAverageInPower, mlbasDownLinkPerf15min=mlbasDownLinkPerf15min, mlbasUpLinkPerf24hourTable=mlbasUpLinkPerf24hourTable, mlbasUL15LogAvailTime=mlbasUL15LogAvailTime, mlbasUpLinkPerf15min=mlbasUpLinkPerf15min, mlbasDL15PerfUnavailTime=mlbasDL15PerfUnavailTime, mlbasUL24PerfTerminalId=mlbasUL24PerfTerminalId, mlbasUL24LogBgBlockErrRatio=mlbasUL24LogBgBlockErrRatio, mlbasDL15PerfAverageOutPower=mlbasDL15PerfAverageOutPower, mlbasDL24PerfCellErrRatio=mlbasDL24PerfCellErrRatio, mlbasUL24PerfMaxOutPower=mlbasUL24PerfMaxOutPower, mlbasServiceUnitTable=mlbasServiceUnitTable, mlbasUL15LogAverageOutPower=mlbasUL15LogAverageOutPower, mlbasDL24PerfMaxOutPower=mlbasDL24PerfMaxOutPower, mlbasRnRUFreqDuplex=mlbasRnRUFreqDuplex, mlbasDL24PerfErroredSecRatio=mlbasDL24PerfErroredSecRatio, mlbasUL24PerfCellErrRatio=mlbasUL24PerfCellErrRatio, mlbasUL15LogCbrDiscCell=mlbasUL15LogCbrDiscCell, mlbasDL15PerfBgBlockErrRatio=mlbasDL15PerfBgBlockErrRatio, mlbasRnCUBwLimit=mlbasRnCUBwLimit, mlbasAtSlotLocation=mlbasAtSlotLocation, mlbasUpLinkLog15minEntry=mlbasUpLinkLog15minEntry, mlbasAtCUSwIdModem=mlbasAtCUSwIdModem, mlbasUL15LogSevErroredSecRatio=mlbasUL15LogSevErroredSecRatio, mlbasAccessTerminalEntry=mlbasAccessTerminalEntry, mlbasUL15LogMinInPower=mlbasUL15LogMinInPower, mlbasUL24PerfBgBlockErrRatio=mlbasUL24PerfBgBlockErrRatio, mlbasDL24LogCellErrRatio=mlbasDL24LogCellErrRatio, mlbasRnCULoopMode=mlbasRnCULoopMode, mlbasRnRUSwIdRadio=mlbasRnRUSwIdRadio, mlbasAccessTerminalSlot=mlbasAccessTerminalSlot, mlbasAtRUOutputPower=mlbasAtRUOutputPower, mlbasUL15PerfMinInPower=mlbasUL15PerfMinInPower, mlbasDL24LogMinInPower=mlbasDL24LogMinInPower, mlbasDownLinkLog15minTable=mlbasDownLinkLog15minTable, mlbasDL24LogErroredSecRatio=mlbasDL24LogErroredSecRatio, mlbasRnRUOutputPowerMax=mlbasRnRUOutputPowerMax, mlbasUL15LogUbrDiscCell=mlbasUL15LogUbrDiscCell, mlbasDL24PerfMinInPower=mlbasDL24PerfMinInPower, mlbasDL15PerfAverageInPower=mlbasDL15PerfAverageInPower, mlbasDL24PerfCellLossRatio=mlbasDL24PerfCellLossRatio, mlbasAtCUInvalid15MinPerf=mlbasAtCUInvalid15MinPerf, mlbasUpLinkLog24hourEntry=mlbasUpLinkLog24hourEntry, mlbasAtCUPerfStart=mlbasAtCUPerfStart, mlbasDL15LogBgBlockErrRatio=mlbasDL15LogBgBlockErrRatio, mlbasAtRUDownFreq=mlbasAtRUDownFreq, mlbasDL15PerfCbrDiscCell=mlbasDL15PerfCbrDiscCell, mlbasUL24LogCellErrRatio=mlbasUL24LogCellErrRatio, mlbasDL24LogSevErroredSecRatio=mlbasDL24LogSevErroredSecRatio, mlbasDL15PerfCellErrRatio=mlbasDL15PerfCellErrRatio, mlbasUL15PerfUnavailTime=mlbasUL15PerfUnavailTime, mlbasDL24PeriodIndex=mlbasDL24PeriodIndex, mlbasDownLinkLog15min=mlbasDownLinkLog15min, mlbasUL15PerfMaxInPower=mlbasUL15PerfMaxInPower, mlbasUL24LogMaxInPower=mlbasUL24LogMaxInPower, mlbasDL24LogCbrDiscCell=mlbasDL24LogCbrDiscCell, mlbasUL24PerfUbrDiscCell=mlbasUL24PerfUbrDiscCell, mlbasAtSlotTerminalId=mlbasAtSlotTerminalId, mlbasDL24LogBgBlockErrRatio=mlbasDL24LogBgBlockErrRatio, mlbasSuType=mlbasSuType, mlbasUL24LogCellLossRatio=mlbasUL24LogCellLossRatio, mlbasAccessTerminalSlotTable=mlbasAccessTerminalSlotTable, mlbasUpLinkPerf15minEntry=mlbasUpLinkPerf15minEntry, mlbasUL24PerfAverageInPower=mlbasUL24PerfAverageInPower, mlbasRnRUFreqStep=mlbasRnRUFreqStep, mlbasDL15LogMaxOutPower=mlbasDL15LogMaxOutPower, mlbasRnCUSignedOnAts=mlbasRnCUSignedOnAts, mlbasUL24LogErroredSecRatio=mlbasUL24LogErroredSecRatio, mlbasRadioNodeTable=mlbasRadioNodeTable, mlbasUL24PerfUnavailTime=mlbasUL24PerfUnavailTime, mlbasDL15LogMaxInPower=mlbasDL15LogMaxInPower, mlbasUpLinkLog15minTable=mlbasUpLinkLog15minTable, mlbasAtRUHwIdRadio=mlbasAtRUHwIdRadio, mlbasUL15UpdateTime=mlbasUL15UpdateTime, mlbasUL15PerfBgBlockErrRatio=mlbasUL15PerfBgBlockErrRatio, mlbasAtRUSwIdRadio=mlbasAtRUSwIdRadio, mlbasDL15PeriodIndex=mlbasDL15PeriodIndex, mlbasDownLinkPerf24hourTable=mlbasDownLinkPerf24hourTable, mlbasDL24PerfAverageOutPower=mlbasDL24PerfAverageOutPower, mlbasDL15PerfMaxOutPower=mlbasDL15PerfMaxOutPower, mlbasRnCUSecurity=mlbasRnCUSecurity, mlbasDownLinkLog24hourEntry=mlbasDownLinkLog24hourEntry, mlbasUpLinkPerf24hourEntry=mlbasUpLinkPerf24hourEntry, mlbasRnRUHwIdRadio=mlbasRnRUHwIdRadio, mlbasDL15PerfAvailTime=mlbasDL15PerfAvailTime, mlbasDownLinkPerf24hour=mlbasDownLinkPerf24hour, mlbasUpLinkLog24hour=mlbasUpLinkLog24hour, mlbasDL24PerfAverageInPower=mlbasDL24PerfAverageInPower, mlbasUL15LogUnavailTime=mlbasUL15LogUnavailTime, mlbasSuOperState=mlbasSuOperState, mlbasUL24PerfSevErroredSecRatio=mlbasUL24PerfSevErroredSecRatio, mlbasSuPciVendor=mlbasSuPciVendor, mlbasDL15PerfCellLossRatio=mlbasDL15PerfCellLossRatio, mlbasDL15PerfSevErroredSecRatio=mlbasDL15PerfSevErroredSecRatio, mlbasUpLinkPerf15minTable=mlbasUpLinkPerf15minTable, mlbasUL15PerfMinOutPower=mlbasUL15PerfMinOutPower, mlbasUL24LogMinOutPower=mlbasUL24LogMinOutPower, mlbasDL15LogSevErroredSecRatio=mlbasDL15LogSevErroredSecRatio, mlbasDL24LogMaxOutPower=mlbasDL24LogMaxOutPower, mlbasDL24PerfUnavailTime=mlbasDL24PerfUnavailTime, mlbasAtRUUpFreq=mlbasAtRUUpFreq, mlbasDownLinkPerf24hourEntry=mlbasDownLinkPerf24hourEntry, mlbasDL15LogCellLossRatio=mlbasDL15LogCellLossRatio, mlbasServiceUnitPortTable=mlbasServiceUnitPortTable, mlbasDL15PerfErroredSecRatio=mlbasDL15PerfErroredSecRatio, mlbasRnRUDownFreqMax=mlbasRnRUDownFreqMax, mlbasDownLinkPerf15minTable=mlbasDownLinkPerf15minTable, mlbasAtSlotRnPos=mlbasAtSlotRnPos, mlbasRnRUDownFreqMin=mlbasRnRUDownFreqMin, mlbasRnCULoopPoint=mlbasRnCULoopPoint, mlbasDL15PerfMinInPower=mlbasDL15PerfMinInPower, mlbasDL15UpdateTime=mlbasDL15UpdateTime, mlbasDL24PerfUbrDiscCell=mlbasDL24PerfUbrDiscCell, mlbasAtCUValid24HPerf=mlbasAtCUValid24HPerf, mlbasUL24LogAverageOutPower=mlbasUL24LogAverageOutPower, mlbasAtCUInvalid24HPerf=mlbasAtCUInvalid24HPerf, mlbasDL24PerfSevErroredSecRatio=mlbasDL24PerfSevErroredSecRatio, mlbasRnCUSwIdModem=mlbasRnCUSwIdModem, mlbasUL15PerfCellLossRatio=mlbasUL15PerfCellLossRatio, mlbasUL15PerfAvailTime=mlbasUL15PerfAvailTime, mlbasServiceUnit=mlbasServiceUnit, mlbasAtCUHwIdModem=mlbasAtCUHwIdModem, mlbasUL24PerfAvailTime=mlbasUL24PerfAvailTime, mlbasSUPortPosition=mlbasSUPortPosition, mlbasUL24LogUnavailTime=mlbasUL24LogUnavailTime, mlbasRnCUHwIdModem=mlbasRnCUHwIdModem, mlbasAtCUPerformance=mlbasAtCUPerformance, mlbasDL15PerfUbrDiscCell=mlbasDL15PerfUbrDiscCell, mlbasUL15PerfUbrDiscCell=mlbasUL15PerfUbrDiscCell, mlbasUL15PerfCellErrRatio=mlbasUL15PerfCellErrRatio, mlbasAtSlotSignOnStatus=mlbasAtSlotSignOnStatus, mlbasDL24LogMinOutPower=mlbasDL24LogMinOutPower, mlbasDL15PerfTerminalId=mlbasDL15PerfTerminalId, mlbasServiceUnitEntry=mlbasServiceUnitEntry, mlbasUL15LogMinOutPower=mlbasUL15LogMinOutPower, mlbasUL24PerfMaxInPower=mlbasUL24PerfMaxInPower, mlbasDownLinkLog24hourTable=mlbasDownLinkLog24hourTable, mlbasUL15LogAverageInPower=mlbasUL15LogAverageInPower, mlbasUL24PerfAverageOutPower=mlbasUL24PerfAverageOutPower, mlbasUL15LogCellErrRatio=mlbasUL15LogCellErrRatio, mlbasUL15LogBgBlockErrRatio=mlbasUL15LogBgBlockErrRatio, mlbasRnCUChBw=mlbasRnCUChBw, mlbasDL24PerfMaxInPower=mlbasDL24PerfMaxInPower, mlbasUL24LogAverageInPower=mlbasUL24LogAverageInPower, mlbasSuPos=mlbasSuPos, mlbasSuPciId=mlbasSuPciId, mlbasSUPortIndex=mlbasSUPortIndex, mlbasUL15LogMaxInPower=mlbasUL15LogMaxInPower, mlbasDownLinkPerf15minEntry=mlbasDownLinkPerf15minEntry, mlbasRadioNode=mlbasRadioNode, mlbasSuNumOfPorts=mlbasSuNumOfPorts, mlbasDL15LogMinInPower=mlbasDL15LogMinInPower, mlbasUL24PerfCellLossRatio=mlbasUL24PerfCellLossRatio, mlbasDL15LogAverageOutPower=mlbasDL15LogAverageOutPower, mlbasDL15LogMinOutPower=mlbasDL15LogMinOutPower, mlbasUL24LogUbrDiscCell=mlbasUL24LogUbrDiscCell, mlbasRnRUOutputPowerMin=mlbasRnRUOutputPowerMin, mlbasUL15LogCellLossRatio=mlbasUL15LogCellLossRatio, mlbasUL15PerfCbrDiscCell=mlbasUL15PerfCbrDiscCell, mlbasUL15PerfSevErroredSecRatio=mlbasUL15PerfSevErroredSecRatio, mlbasAtSlotSignOnAction=mlbasAtSlotSignOnAction, mlbasUL24LogAvailTime=mlbasUL24LogAvailTime, mlbasUL24LogSevErroredSecRatio=mlbasUL24LogSevErroredSecRatio, mlbasDL15PerfMinOutPower=mlbasDL15PerfMinOutPower, mlbasDL24PerfCbrDiscCell=mlbasDL24PerfCbrDiscCell, mlbasUL24PerfCbrDiscCell=mlbasUL24PerfCbrDiscCell, mlbasRnCUBerThreshold=mlbasRnCUBerThreshold, mlbasAccessTerminal=mlbasAccessTerminal)
