#
# PySNMP MIB module CISCO-GPRS-CHARGING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GPRS-CHARGING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoAlarmSeverity, = mibBuilder.importSymbols("CISCO-TC", "CiscoAlarmSeverity")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Counter64, ModuleIdentity, ObjectIdentity, TimeTicks, Counter32, Unsigned32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Counter64", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Counter32", "Unsigned32", "IpAddress", "Bits")
TextualConvention, RowStatus, TruthValue, StorageType, TestAndIncr, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "StorageType", "TestAndIncr", "DisplayString")
ciscoGprsChargingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 192))
ciscoGprsChargingMIB.setRevisions(('2011-03-04 00:00', '2010-07-27 00:00', '2010-06-08 00:00', '2010-02-01 00:00', '2008-12-12 00:00', '2008-01-29 00:00', '2006-08-18 00:00', '2006-04-04 19:00', '2005-09-16 18:00', '2004-07-26 02:00', '2004-03-22 03:00', '2002-11-11 17:00', '2002-06-05 10:00', '2001-12-04 12:00', '2001-09-18 16:00', '2000-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGprsChargingMIB.setRevisionsDescriptions(('Added the following Acronyms in Description:- EPC, PGW, SGW, SPGW. Added cgprsCgScdrEnable to ciscoGprsChargingConfig. Added cgprsCgProfileScdrEnable to cgprsCgProfileTable. Added cgprsCgMIBConfigProfileChangeGroupRev1Sup1. Added cgprsCgComplianceRev12 and deprecated cgprsCgComplianceRev11.', 'Added cgprsCgProfileContentDccaProfileWeight to cgprsCgProfileContentDccaProfileTable. Deprecated following group and compliance cgprsCgMIBConfigGroupR100 cgprsCgComplianceRev10 Added following group and compliance cgprsCgMIBConfigGroupR100Rev1. cgprsCgComplianceRev11.', 'deprecated cgprsCgProfileContentDccaProfile. Added cgprsCgProfileContentDccaProfileTable. Deprecated following group and compliance cgprsCgMIBExtConfigGroup cgprsCgComplianceRev9 Added following group and compliance cgprsCgMIBConfigGroupR100. cgprsCgComplianceRev10.', 'Deprecated table cgprsCgGatewayTable and cgprsCgAlarmHistTable. Deprecated objects cgprsCgServiceMode and cgprsCgSwitchOverPriority from ciscoGprsChargingConfig. Deprecated objects cgprsCgActiveChgGatewayAddrType, cgprsCgActiveChgGatewayAddress and cgprsCgOldChgGatewayAddress from ciscoGprsChargingStatus. Added Textual-Convention CgprsCgGatewayType. Added following tables to ciscoGprsChargingConfig: cgprsCgGatewayIpTable, cgprsCgGroupTable. Added following table to ciscoGprsChargingStats: cgprsCgGatewayGroupStatisticsTable. Added following table to ciscoGprsChargingStatus: cgprsCgGatewayGroupStatusTable. Added following table to ciscoGprsChargingAlarms: cgprsCgGatewayGroupAlarmHistTable. Added table cgprsCgGatewayIpTable with following objects: cgprsCgGatewayIpIndex, cgprsCgGatewayIpAddrType, cgprsCgGatewayIpAddr, cgprsCgGatewayOperStatus, cgprsCgGatewayLinkState, cgprsCgGateway, cgprsCgGatewayIpRowStatus Added table cgprsCgGroupTable with following objects: cgprsCgGroupIndex, cgprsCgGroupIscsi, cgprsCgGroupServiceMode, cgprsCgGroupSwitchOverPriority, cgprsCgGroupRowStatus Added table cgprsCgGatewayGroupStatisticsTable with following objects: cgprsCgGatewayGroupCgDownTimes, cgprsCgGatewayGroupAccPtNum, cgprsCgGatewayGroupCdrOpenedNum, cgprsCgGatewayGroupCdrClosedNum, cgprsCgGatewayGroupContainerNum, cgprsCgGatewayGroupServiceRecordsNum, cgprsCgGatewayGroupPendingMsgNum, cgprsCgGatewayGroupCdrPendingMsgIscsiNum, cgprsCgGatewayGroupCdrPendingMsgCgPathNum, cgprsCgGatewayGroupCdrPendingMsgMaintNum, cgprsCgGatewayGroupTotalCdrOpened, cgprsCgGatewayGroupTotalContainerCreated, cgprsCgGatewayGroupTotalServiceRecords, cgprsCgGatewayGroupTotalSentMsg, cgprsCgGatewayGroupTotalSentMsgToIscsi, cgprsCgGatewayGroupTotalSentMsgToCg Added table cgprsCgGatewayGroupStatusTable with following objects: cgprsCgGatewayGroupStatusAddrType, cgprsCgGatewayGroupStatusActiveCgAddr, cgprsCgGatewayGroupStatusOldCgAddr Added table cgprsCgGatewayGroupAlarmHistTable with following objects: cgprsCgGatewayGroupAlarmHistIndex, cgprsCgGatewayGroupAlarmHistType, cgprsCgGatewayGroupAlarmHistAddrType, cgprsCgGatewayGroupAlarmHistAddress, cgprsCgGatewayGroupAlarmHistSeverity, cgprsCgGatewayGroupAlarmHistInfo Added Alarm cgprsCgGatewayGroupAlarmEnable Deprecated Alarm: cgprsCgAlarmEnable Added Notification: cgprsCgGatewayGroupAlarmNotif, cgprsCgGatewayGroupSwitchoverNotif, cgprsCgGatewayGroupInServiceModeNotif, cgprsCgGatewayGroupMaintenanceModeNotif Deprecated following group and compliance cgprsCgComplianceRev8, cgprsCgMIBAlarmsGroupRev1, cgprsCgMIBConfigGroupRev4, cgprsCgMIBNotifGroupRev1. Added following group, compliance cgprsCgMIBConfigGroupRev5, cgprsCgComplianceRev9, cgprsCgMIBAlarmsGroupRev2, cgprsCgMIBStatusGroupRev1, cgprsCgMIBConfigGroupR90, cgprsCgMIBStatsGroupRev3. cgprsCgMIBNotifGroupRev2', 'Added cgprsCgProfileContentPostUserLocChange to cgprsCgProfileTable. Added cgprsCgServiceRecordIncludeUserLocInfo to ciscoGprsChargingConfig.', 'Added cgprsCgChargingSrcInterface to ciscoGprsChargingConfig.', '- Deprecated following objects cgprsCgProfileMapNum, cgprsCgProfileContentPostValTime. - Added following objects cgprsCgProfileMapNumber, cgprsCgProfileContentPostValidityTime. - Deprecated following groups and compliance cgprsCgMIBConfigGroupR60, cgprsCgMIBConfigGroupRev3, cgprsCgComplianceRev5. - Added following group, compliance cgprsCgMIBConfigGroupRev4, cgprsCgMIBExtConfigGroup. cgprsCgComplianceRev6.', "Added following objects in cgprsCgProfileTable: cgprsCgProfileContentPostQosChange, cgprsCgProfileContentPostSgsnChange, cgprsCgProfileContentPostRatChange, cgprsCgProfileContentPostPlmnChange, cgprsCgProfileStorageType Changed the DEFVAL of cgprsCgCdrOptionDynamicAddr, cgprsCgCdrOptionNip, cgprsCgCdrOptionPdpType and cgprsCgCdrOptionPdpAddress from 'false' to 'true'. Added following objects in ciscoGprsChargingConfig: cgprsCgServiceRecordIncludeRat, cgprsCgServiceRecordIncludePlmn Changed the DEFVAL of the following objects: cgprsCgProfileCategory, cgprsCgContainerTimeLimit.", 'Added cgprsCgCdrOptionServiceRecord, cgprsCgPartialCdrGenEnableAll, cgprsCgCdrOptionApn, cgprsCgCdrOptionVirtualApn, cgprsCgCdrOptionApnSelMode, cgprsCgCdrOptionDynamicAddr, cgprsCgCdrOptionNip, cgprsCgCdrOptionPdpAddress, cgprsCgCdrOptionPdpType, cgprsCgCdrOptionSerMsisdn, cgprsCgCdrOptionSgsnPlmn cgprsCgCdrOptionCamelCharInfo, cgprsCgCdrOptionImeisv, cgprsCgCdrOptionMsTimeZone, cgprsCgCdrOptionRatType, cgprsCgCdrOptionUserLocInfo to ciscoGprsChargingConfig. Added cgprsCgProfileCdrSuppressPrepaid, cgprsCgProfileContentDccaProfile, cgprsCgProfileContentPostTime, cgprsCgProfileContentPostValTime, cgprsCgProfileContentPostVolume, cgprsCgProfileContentRulebaseId to cgprsCgProfileTable. Added cgprsCgTotalServiceRecords to ciscoGprsChargingStats.', 'Modified the description for cgprsCgProfileDurLimit and cgprsCgProfileVolumeLimit.', 'Added cgprsCgContainerTimeLimit, cgprsCgProfileTable, cgprsCgProfileMapTable, cgprsCgServiceMode, cgprsCgChargingCharReject, cgprsCgPartialCdrGenEnable cgprsCgSwitchOverPriority, cgprsCgCharSelectionMode, cgprsCgReconnect, cgprsCgPtcEnable, cgprsCgPtcPossiblyDupEnable to ciscoGprsChargingConfig. Updated cgprsCgRelease. Added cgprsCgGatewaySwitchoverNotif, cgprsCgInServiceModeNotif, cgprsCgMaitenanceModeNotif to ciscoGprsCharNotifs. Added cgprsCgActiveChgGatewayAddrType, cgprsCgActiveChgGatewayAddress, cgprsCgOldChgGatewayAddress to ciscoGprsChargingStatus. Obsoleted cgprsCgCdrNonPrimaryEnable.', 'Added cgprsCgRelease, cgprsCgGtpShortHeaderEnable and cgprsCgTransFormNumRespEnable to ciscoGprsChargingConfig. Deprecated cgprsCgCdrNonPrimaryEnable.', 'Added cgprsCgCdrSgsnChangeLimit to ciscoGprsChargingConfig. Deprecated cgprsCgSgsnChangeLimit. Added cgprsCgAlarmHistLatestIndex to ciscoGprsChargingAlarms. Updated DEFVAL of cgprsCgConditionLimit. Added cgprsCgAlarmChargingDisabled, cgprsCgAlarmChargingEnabled to CgprsCgAlarmType. Enums for cgprsCgClearCdrPartialCdr have been modified to comply with the standards.', 'Added the objects cgprsCgPartialCdrTrigger, cgprsCgSgsnChangeLimit, cgprsCgTotalCdrOpened cgprsCgTotalContainer.', 'Added an object cgprsCgChargeForRoamersOnly. Added cgprsCgMIBNotifGroup to MODULE-COMPLIANCE. Added range for cgprsCgCdrAggreLimit, cgprsCgPathRequest. Changed the syntax of cgprsCgTransInterval from TimeInterval to Unsigned32. Moreover changed its default value from 10500 to 105. Changed the syntax of cgprsCgServerSwitchTimeout from TimeInterval to Unsigned32. Moreover changed its default value from 6000 to 60. Changed the range of cgprsCgN3BufferSize from <100 - 1480> to <300 - 1460> and its default value has been changed from 1480 to 1460. Changed the syntax of cgprsCgAlarmHistSeverity from INTEGER to CiscoAlarmSeverity. Changed the syntax from IpAddress to InetAddress for the objects cgprsCgGatewayAddr and cgprsCgAlarmHistAddress. Changed the description for cgprsCgGatewayRowStatus. Replaced the object: - cgprsCgGatewayType with cgprsCgGatewayIndex. - cgprsCgGatewayOperState with cgprsCgOperStatus. - cgprsCgGatewayAdminState with cgprsCgLinkState. Removed the object cgprsCgAlarmHistStatus and the textual convention CgprsCgAlarmStatus.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGprsChargingMIB.setLastUpdated('201103040000Z')
if mibBuilder.loadTexts: ciscoGprsChargingMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGprsChargingMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-gprs@cisco.com')
if mibBuilder.loadTexts: ciscoGprsChargingMIB.setDescription("This MIB module manages the charging related function on the GGSN node of a GPRS system. The following diagram illustrates a simplified GPRS logical architecture with the interface name denotations: +==+ +===+ +====+ +====+ +===+ |MS|-----|BSS|-----|SGSN|---Gn---|GGSN|---Gi---|PDN| +==+ +===+ +====+ +====+ +===+ \\ / Ga Ga \\ +==+ / |CG| +==+ Charging information in GPRS is collected for each MS by SGSNs and GGSNs that are serving that MS. The GGSN collects charging information for each MS based on both external data network usage and the GPRS network resources. Acronyms and terms: APN Access Point Name BSS Base Station System CCA Credit Control Answer CDR Call Detail Record CID Charging Identification CG Charging Gateway CGF Charging Gateway Functionality CGG Charging Gateway Group. DCCA Diameter Credit Control Application ETSI European Telecommunications Standards Institute Ga Name of the interface between SGSN/GGSN and CG Gi Name of the interface between GGSN and PDN Gn Name of the interface between GGSN and SGSN G-CDR Gateway GPRS Support Node-Call Detail Record GGSN Gateway GPRS Support Node GPRS General Packet Radio Service GSM Global System for Mobile communication GTP GPRS Tunneling Protocol GTP' GTP enchanced for charging IE Information Element MS Mobile Station PDN Packet Data Network PDP Packet Data Protocol SGSN Serving GPRS support Node TOS Type of Service. PSD Persistance Storage Device. PTC Packet Transfer Command. EPC Evolved Packet Core PGW PDN Gateway SGW Serving Gateway SPGW When a single physical EPC Gateway acts as both SGW and PGW for a session, then that session is said to be in SPGW mode.")
class CgprsCgAlarmType(TextualConvention, Integer32):
    description = 'Identifies the possible types of GPRS charging gateway and charging related alarm. cgprsCgAlarmCgDown - CG is down. cgprsCgAlarmCgUp - CG is up. cgprsCgAlarmTransFailure - The GGSN has repeatedly failed to receive responses for Data Record Transfer Request Messages from CG. cgprsCgAlarmTransSuccess - The GGSN has successfully sent Data Record Transfer Request Message to CG after the failure. cgprsCgAlarmCapacityFull - The GGSN is out of memory and has failed to buffer a G-CDR internally. cgprsCgAlarmCapacityFree - The GGSN is able to buffer G-CDR after the failure to buffer G-CDRs. cgprsCgAlarmEchoFailure - The GGSN has repeatedly failed to receive the Echo Response Messages from the CG for the Echo Request message. cgprsCgAlarmEchoRestored - The GGSN has got the Echo Response from the CG after the cgprsCgAlarmEchoFailure has been detected. cgprsCgAlarmCdrDiscard - The G-CDRs are discarded. cgprsCgAlarmCdrDiscardRestored - This is to indicate that GGSN has started buffering G-CDRs after cgprsCgAlarmCdrDiscard has occured. cgprsCgAlarmChargingDisabled - Indicates that charging transactions on the GGSN are disabled. cgprsCgAlarmChargingEnabled - Indicates that charging transactions on the GGSN are enabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("cgprsCgAlarmCgDown", 1), ("cgprsCgAlarmCgUp", 2), ("cgprsCgAlarmTransFailure", 3), ("cgprsCgAlarmTransSuccess", 4), ("cgprsCgAlarmCapacityFull", 5), ("cgprsCgAlarmCapacityFree", 6), ("cgprsCgAlarmEchoFailure", 7), ("cgprsCgAlarmEchoRestored", 8), ("cgprsCgAlarmCdrDiscard", 9), ("cgprsCgAlarmCdrBuffered", 10), ("cgprsCgAlarmChargingDisabled", 11), ("cgprsCgAlarmChargingEnabled", 12))

class CgprsCgGatewayType(TextualConvention, Integer32):
    description = 'Identifies the possible types of GPRS charging gateway. cgprsCgGatewayPrimary - Indicates it is a primary charging gateway. cgprsCgGatewaySecondary - Indicates it is a secondary charging gateway. cgprsCgGatewayTertiary - Indicates it is a tertiary charging gateway.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cgprsCgGatewayPrimary", 1), ("cgprsCgGatewaySecondary", 2), ("cgprsCgGatewayTertiary", 3))

ciscoGprsChargingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 1))
ciscoGprsChargingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1))
ciscoGprsChargingOthers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 2))
ciscoGprsChargingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3))
ciscoGprsChargingAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4))
ciscoGprsChargingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5))
cgprsCgEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgEnable.setDescription("This object is used to enable/disable the charging transaction feature on the GGSN. When the object is set to 'true', charging processing is enabled on the GGSN.")
cgprsCgCdrLocalSeqNumEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrLocalSeqNumEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrLocalSeqNumEnable.setDescription("This object is used to enable/disable the feature of using the local record sequence number field in G-CDRs on the GGSN. When the object is set to 'true', the G-CDRs contain the local record sequence number in the CDR.")
cgprsCgCdrNodeIdEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrNodeIdEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrNodeIdEnable.setDescription("This object is used to enable/disable the feature of using the NodeID field in G-CDRs on the GGSN. When the object is set to 'true', the G-CDRs include the NodeID field.")
cgprsCgFlowControlEcho = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgFlowControlEcho.setStatus('current')
if mibBuilder.loadTexts: cgprsCgFlowControlEcho.setDescription("This object is used to enable/disable flow control between the GGSN and CG. When the object is set to 'true', the GGSN enables private extension information element in the echo request. This is used for maintaining flow control on packets transmitted to the CG.")
cgprsCgCdrPktsStatEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrPktsStatEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrPktsStatEnable.setDescription("This object is used to enable/disable G-CDR packet statistics collection. When the object is set to 'true', the G-CDR is enabled to collect the packet statistics from cgprsGtpChargingPktsUplink and cgprsGtpChargingPktsDownlink object.")
cgprsCgCdrNonPrimaryEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrNonPrimaryEnable.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsCgCdrNonPrimaryEnable.setDescription("This object controls the generation of non-primary partial CDRs on GGSN as follows: 'true(1)' - the generation of non-primary partial CDRs is enabled. 'false(2)'- the generation of non-primary partial CDRs is disabled and all partial CDRs have the same content of primary partial CDRs.")
cgprsCgCdrAggreLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setUnits('CDRs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrAggreLimit.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrAggreLimit.setDescription('The Maximum number of G-CDRs that can be aggregated in a charging data transfer message to a CG.')
cgprsCgTransInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(105)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgTransInterval.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTransInterval.setDescription('Specifies the time interval between transfers of GPRS charging data for a PDP context (user session) between the GGSN and the charging gateway.')
cgprsCgPktsQSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(128)).setUnits('PDUs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgPktsQSize.setStatus('current')
if mibBuilder.loadTexts: cgprsCgPktsQSize.setDescription("The maximum size of the GGSN's queue of outstanding charging data transfer requests.")
cgprsCgPathRequest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgPathRequest.setStatus('current')
if mibBuilder.loadTexts: cgprsCgPathRequest.setDescription("The time interval between two TCP connection establishment retry attempts if the TCP connection can't be established for the communication with CG.")
cgprsCgContainerVolThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1048576)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgContainerVolThresh.setStatus('current')
if mibBuilder.loadTexts: cgprsCgContainerVolThresh.setDescription('The traffic volume threshold that triggers addition of a container and closing the G-CDR.')
cgprsCgMapDataTos = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgMapDataTos.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMapDataTos.setDescription("Specifies a IP Type of Service (TOS) mapping for GPRS charging data packets transmitted by the GGSN. A higher TOS mapping value indicates a higher service priority. The values '6' and '7' are not used in the mapping.")
cgprsCgPathProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2))).clone('udp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgPathProtocol.setStatus('current')
if mibBuilder.loadTexts: cgprsCgPathProtocol.setDescription('Specifies the transport protocol used by the GGSN to transmit and receive charging data to and from a CG. udp - use UDP for charging data transfers. tcp - use TCP for charging data transfers.')
cgprsCgServerSwitchTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgServerSwitchTimeout.setStatus('current')
if mibBuilder.loadTexts: cgprsCgServerSwitchTimeout.setDescription('A timeout value that determines when the GGSN attempts to switch over to an alternate CG after a destination CG cannot be located or becomes unusable. Setting value 0 disables this feature.')
cgprsCgConditionLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgConditionLimit.setStatus('current')
if mibBuilder.loadTexts: cgprsCgConditionLimit.setDescription('The maximum number of charging condition changes to trigger closure of a G-CDR partial record. When the maximum number is reached, the G-CDR is closed and a new partial G-CDR is opened.')
cgprsCgGtpPrimePort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1024, 10000)).clone(3386)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgGtpPrimePort.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGtpPrimePort.setDescription('The destination port for transferring G-CDR between GGSN and CG. The port number is used for both UDP and TCP.')
cgprsCgN3BufferSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 1460)).clone(1460)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgN3BufferSize.setStatus('current')
if mibBuilder.loadTexts: cgprsCgN3BufferSize.setDescription("The transmit buffer size for sending GTP' PDU.")
cgprsCgChargeForRoamersOnly = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgChargeForRoamersOnly.setStatus('current')
if mibBuilder.loadTexts: cgprsCgChargeForRoamersOnly.setDescription("This object is used to indicate to the GGSN that it needs to generate CDRs only for roamers. When the object is set to 'false' GGSN will generate CDRs for non-roamers also. This option only affects new PDP contexts while the ones that have already been created are not affected.")
cgprsCgTariffTimeMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgTariffTimeMaxEntries.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeMaxEntries.setDescription('Indicates the upper limit on the number of entries that the cgprsCgTariffTimeTable may contain.')
cgprsCgTariffTimeNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 20), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgTariffTimeNextIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeNextIndex.setDescription('This object contains an appropriate value to be used for cgprsCgTariffTimeIndex when creating entries in the cgprsCgTariffTimeTable. The value 0 indicates that no new rows can be created. Otherwise, it is recommended that values are assigned contiguously, starting from 1. Algorithm for Tariff Time creation by a Manager: done = false while done == false begin index = GET (cgprsCgTariffTimeNextIndex.0) if ( index == 0 ) break; SET (cgprsCgTariffTimeNextIndex.0=index) && SET(cgprsCgTariffTimeRowStatus.index=createAndGo) if (set failed) done = false else done = true end.')
cgprsCgTariffTimeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 21), )
if mibBuilder.loadTexts: cgprsCgTariffTimeTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeTable.setDescription('The tariff time table. The tariff time table contains all currently configured tariff times on the GGSN')
cgprsCgTariffTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 21, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeIndex"))
if mibBuilder.loadTexts: cgprsCgTariffTimeEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeEntry.setDescription('A description of a tariff time entry. An entry is created whenever a tariff time is configured. When the GPRS tariffs time is reached, a container will be attached to the G-CDR for the user. A new entry cannot be created in this table when the table is full.')
cgprsCgTariffTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cgprsCgTariffTimeIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeIndex.setDescription('An arbitrary non-zero integer value uniquely identifying each charging tariff time.')
cgprsCgTariffTimeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgTariffTimeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. The objects in this table can't be modified if the value of this object is 'active'.RowStatus options 'notInService' and 'createAndWait' are not supported.")
cgprsCgTariffTimeHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgTariffTimeHour.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeHour.setDescription('Specifies the hours part of GPRS tariffs time.')
cgprsCgTariffTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 21, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgTariffTimeMin.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeMin.setDescription('Specifies the minutes part of GPRS tariffs time.')
cgprsCgTariffTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgTariffTimeSec.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTariffTimeSec.setDescription('Specifies the seconds part of GPRS tariffs time.')
cgprsCgGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 22), )
if mibBuilder.loadTexts: cgprsCgGatewayTable.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgGatewayTable.setDescription('Charging gateway table. The table contains a list of charging gateways. A charging gateway contains databases to store the collected G-CDRs for billing purposes. cgprsCgGatewayTable only stores information about the global default charging gateway group. However, either of global default charing gateway or charging gateway 1-29 can be used under an APN. This table is deprecated by cgprsCgGatewayIpTable.')
cgprsCgGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 22, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayIndex"))
if mibBuilder.loadTexts: cgprsCgGatewayEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgGatewayEntry.setDescription('A conceptual row in the cgprsCgGatewayTable.')
cgprsCgGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: cgprsCgGatewayIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgGatewayIndex.setDescription('An unique identifier for the CG.')
cgprsCgGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 22, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGatewayAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgGatewayAddrType.setDescription('This object indicates the type of Internet address given in cgprsCgGatewayAddr.')
cgprsCgGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 22, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGatewayAddr.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgGatewayAddr.setDescription('The IP address that is used to uniquely identify the CG.')
cgprsCgGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 22, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGatewayRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgGatewayRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. cgprsCgGatewayAddrType and cgprsCgGatewayAddr are the mandatory objects in a create request. To delete a row, set this object to 'destroy'.")
cgprsCgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("active", 2), ("standby", 3))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgOperStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgOperStatus.setDescription('This object is used to indicate whether the configured CG is active(2) or standby(3).The object will return undefined(1) when its not used either as active(2) or standby(3).')
cgprsCgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("pending", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgLinkState.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgLinkState.setDescription("This object is used to indicate the reachability of the CG. If the CG is reachable then this object is set to 'on'. When the CG is not reachable but the GGSN tries to establish a connection then the object will be set to 'pending' state. When the CG is not reachable then the value returned for this object will be 'off'.")
cgprsCgClearCdrPartialCdr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closeCdr", 1), ("canCloseCdr", 2), ("cannotCloseCdr", 3), ("closingCdr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgClearCdrPartialCdr.setStatus('current')
if mibBuilder.loadTexts: cgprsCgClearCdrPartialCdr.setDescription("This object is used to close all existing CDRs, transfer them to the CG and open new partial CDRs for any existing PDP contexts. closeCdr - close all existing CDRs. canCloseCdr - CDRs can be closed. This object can be set to 'closeCdr' only when it is in 'canCloseCdr' state. cannotCloseCdr - CDRs cannot be closed. closingCdr - CDRs are being closed.")
cgprsCgSgsnChangeLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgSgsnChangeLimit.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgSgsnChangeLimit.setDescription('This object denotes the maximum number of SGSN changes that will trigger the closure of G-CDR or partial record. When the maximum number is reached, the record is closed and a new partial record is opened. When the value is zero, then for every SGSN change, the G-CDR or partial record is closed. This object is deprecated by cgprsCgCdrSgsnChangeLimit.')
cgprsCgCdrSgsnChangeLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrSgsnChangeLimit.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrSgsnChangeLimit.setDescription("This object denotes the maximum number of SGSN changes that will trigger the closure of G-CDR or partial record. When the maximum number is reached, the record is closed and a new partial record is opened. When the value is zero, then for every SGSN change, the G-CDR or partial record is closed. If the value of object is set to '-1', then the number of SGSN changes is not associated with the closure of G-CDR or creation/closure of partial record.")
cgprsCgRelease = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("release98", 1), ("release99", 2), ("release4", 3), ("release5", 4))).clone('release99')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgRelease.setReference('3G TS 32.015 V3.2.0, Release99 Charging. GSM 12.15 V7.4.0, Release98 GPRS Charging. 3GPP TS 32.215.')
if mibBuilder.loadTexts: cgprsCgRelease.setStatus('current')
if mibBuilder.loadTexts: cgprsCgRelease.setDescription("This object specifies the release specific parameters that needs to be used when communicating with the CG. for eg: Qos Profile Info, Charging Characteristics field, etc., This object also defines the charging release to enable the CRs implemented in GGSN version 5.0 (GGSN version is defined in cGgsnVersion in CISCO-GGSN-MIB, which is out of scope of this MIB). 'release98' - No behavior change in GGSN 5.0. 'release99' - From the baseline support of R99 that we already have in GGSN4.0, add support of 32.015 CR 032 with the latest (Data Record Format Version) of 32.015 v3.10.0. 'release4' or 'release5' - From the baseline support of R99 in GGSN 5.0, add 32.215 CR 002 and Charging Characteristics Selection Mode.")
cgprsCgGtpShortHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgGtpShortHeaderEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGtpShortHeaderEnable.setDescription("This object enables the GGSN to use the 6-byte GTP short header for charging transactions. This object cannot be toggled when there are pending CDR's.")
cgprsCgTransFormNumRespEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgTransFormNumRespEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTransFormNumRespEnable.setDescription("When this object is set to 'true', the data record transfer response IE uses the one octet format which contains the number of records responded. When set to 'false', it uses the 2-octet format and it contains the length of this IE. This object cannot be toggled when there are active MS sessions on the GGSN.")
cgprsCgContainerTimeLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 4294967295), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgContainerTimeLimit.setReference('3GPP; Technical Specification Group Services and System Aspects; Telecommunication Management; Charging and billing; GSM call and event data for the Packet Switched (PS) domain (Release 1999); 3GPP TS 32.015')
if mibBuilder.loadTexts: cgprsCgContainerTimeLimit.setStatus('current')
if mibBuilder.loadTexts: cgprsCgContainerTimeLimit.setDescription('A G-CDR is used to collect charging information related to the packet data information for a GPRS mobile in the GGSN.The List of Traffic Data Volumes attribute of the G-CDR consists of a set of containers, that can be closed on certain trigers conditions like, - Data volume limit - Time duration limit - Maximum number of change condition limit This object when set to some non-zero time value, enables the G-CDR updation when the time limit is reached.')
cgprsCgProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30), )
if mibBuilder.loadTexts: cgprsCgProfileTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileTable.setDescription("Charging characteristics is a parameter introduced in Release 99.Charging Characteristics allows the operator to apply different charging methods on a per PDP basis. Charging Characteristics is a 2-octet parameter: The first 4 bits of the first octet, the 'P' bits, is called the charging profile index. It specifies up to 16 different charging profiles. The remaining bits, the 'B' bits, can be used to further characterize the Charging behavior. Charging characteristics can be received from the SGSN as an IE in the create PDP request message or from locally defined defaults. There can be local default at the access-point or GGSN levels. At either level, there may be also different defaults for home, roaming, visiting subscribers, etc. This table allows to create a charging profile and define all the characteristics for that profile. This profile will be mapped to some APN.")
cgprsCgProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileNum"))
if mibBuilder.loadTexts: cgprsCgProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileEntry.setDescription('An entry is created for each charging profile, with the characteristics of the charging being configured, it has some default characteristics when not configured.')
cgprsCgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cgprsCgProfileNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileNum.setDescription("This object is the charging profile index. This object represents the 'P' bits in charging characteristics.")
cgprsCgProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'. Only these two values 'createAndGo' and 'destroy' will be accepted. The table objects can be modified, when the RowStatus (cgprsCgProfileRowStatus) is active.")
cgprsCgProfileDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileDesc.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileDesc.setDescription('This object is used to describe this profile.')
cgprsCgProfileCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("hotRate", 0), ("flat", 1), ("prepaid", 2), ("normal", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileCategory.setReference('3GPP TS 32.215 V5.5.0 (2003-12), section 5.6')
if mibBuilder.loadTexts: cgprsCgProfileCategory.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileCategory.setDescription('This object defines the charging profile category. hotRate(0) - Charging by hot billing. flat(1) - Flat rate charging. prepaid(2) - Prepaid charging. normal(3) - Normal charging.')
cgprsCgProfileCdrSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileCdrSuppress.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileCdrSuppress.setDescription("This object specifies the generation of CDRs. If set to 'true', there won't be any CDRs generated. If set to 'false', the CDRs will be generated.")
cgprsCgProfileVolumeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1048576)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileVolumeLimit.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileVolumeLimit.setDescription('This object specifies the volume limit at which the CDR updation has to take place.')
cgprsCgProfileVolumeLimitReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileVolumeLimitReset.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileVolumeLimitReset.setDescription("This object is used to reset the volume limit timer specified in cgprsCgProfileVolumeLimit when another trigger occurs. If set to 'true' the volume limit timer will be reset when another trigger such as duration limit occurs. If set to 'false', the volume timer will continue until it reaches the value set in cgprsCgProfileVolumeLimit.")
cgprsCgProfileDurLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 4294967295), ))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileDurLimit.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileDurLimit.setDescription("This object specifies the time limit in which the CDR updation has to take place. The value '0' means no duration limit.")
cgprsCgProfileDurLimitReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileDurLimitReset.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileDurLimitReset.setDescription("This object is used to reset the duration limit timer specified in cgprsCgProfileDurLimit when another trigger occurs. If set to 'true' the duration limit timer will be reset when another trigger such as volume limit occurs. If set to 'false', the duration timer will continue until it reaches the value set in cgprsCgProfileDurLimit.")
cgprsCgProfileTariffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileTariffTime.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileTariffTime.setDescription('This object enables the tariff time for this profile.')
cgprsCgProfileSgsnChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileSgsnChange.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileSgsnChange.setDescription("This object denotes the maximum number of SGSN changes that will trigger the closure of G-CDR or partial record. When the maximum number is reached, the record is closed and a new partial record is opened. When the value is zero, then for every SGSN change, the G-CDR or partial record is closed. The value '-1' indicates no sgsn change limit.")
cgprsCgProfileCdrSuppressPrepaid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileCdrSuppressPrepaid.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileCdrSuppressPrepaid.setDescription("This object specifies the suppression of CDRs for prepaid. This object can be set to 'true' only when the object cgprsCgProfileCdrSuppress is set to 'false'. If set to 'true', there won't be any CDRs generated for prepaid users. If set to 'false', the CDRs will be generated for prepaid users.")
cgprsCgProfileContentDccaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfile.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfile.setDescription("This object specifies a DCCA client to use to communicate with a DCCA server in a GGSN charging profile. The profile name is the DCCA profile name (cGgsnSADccaProfileName) which is present in CISCO-GGSN-SERVICE-AWARE-MIB and it's outside the scope of this MIB. The presence of the object in this table indicates online billing is required. Therefore, regardless of whether a subscriber is prepaid or postpaid, the GGSN will contact the DCCA server if this object is set. If the user is to be treated as a postpaid user, the server returns X and the user is treated as a postpaid user. If this object is not set to valid value, then users using the charging profile will be treated as postpaid (offline billing).")
cgprsCgProfileContentPostTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 4294967295))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostTime.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentPostTime.setDescription('This object specifies a trigger condition for postpaid users in this charging profile, the time duration limit that when exceeded causes the GGSN to collect upstream and downstream traffic byte counts and close and update the G-CDR for a particular PDP context.')
cgprsCgProfileContentPostValTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(900, 4294967295))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostValTime.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgProfileContentPostValTime.setDescription('This object specifies the validity timeout for this postpaid users in this charging profile. By default, the time and volume quota for postpaid has no validity timeout. If it is configured, it applies to both time based or volume based quota. This object is deprecated by cgprsCgProfileContentPostValidityTime')
cgprsCgProfileContentPostVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostVolume.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentPostVolume.setDescription('This object specifies a trigger condition for postpaid users in this charging profile, the maximum number of bytes that the GGSN maintains across all containers for a particular PDP context before closing and updating the G-CDR.')
cgprsCgProfileContentRulebaseId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 17), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentRulebaseId.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentRulebaseId.setDescription('This object sets the rulebase ID for this charging profile. Rulebases contain the rules for defining categories of traffic, categories on which decisions such as whether to allow or disallow traffic, and how to measure the traffic, are based. The GGSN maps Diameter Rulebase IDs to CSG billing plans. The rulebase value presented in a RADIUS Access Accept message overrides the default rulebase ID configured in the charging profile. A rulebase ID received in a CCA initial message from a DCCA server overrides the Rulebase ID received from the RADIUS server and the default rulebase ID configured in a charging profile.')
cgprsCgProfileContentPostQosChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostQosChange.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentPostQosChange.setDescription("This object when set to 'true' enables the trigger for QoS change for postpaid users using this charging profile. The change in QoS causes GGSN to close the G-CDR for a particular PDP context and generate the service record for each service.")
cgprsCgProfileContentPostSgsnChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostSgsnChange.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentPostSgsnChange.setDescription("This object when set to 'true' enables the trigger for SGSN change for postpaid users using this charging profile. The SGSN address is added to the SGSN list in the context G-CDR. When the SGSN limit is reached, the G-CDR is closed. Current SGSN address is written into the CDR, when the cgprsCgRelease value is 'release4' or above, and service record is generated.")
cgprsCgProfileContentPostRatChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostRatChange.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentPostRatChange.setDescription("This object when set to 'true' enables the trigger for RAT change for postpaid users using this charging profile. This object can be set to 'true' only when the object cgprsCgServiceRecordIncludeRat is 'true'. When a RAT change is received, the G-CDR is closed. The new RAT value is written into the new G-CDR and service record is is generated with the new RAT value.")
cgprsCgProfileContentPostPlmnChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostPlmnChange.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentPostPlmnChange.setDescription("This object when set to 'true' enables the trigger for PLMN change for postpaid users using this charging profile. When enabled, the current PLMN-ID is always written into the service-record. If none is received in the PDP create/update request, a value of zero is written into the service-record. This object can be set to 'true' only when the object cgprsCgServiceRecordIncludePlmn is 'true'. When a PLMN-ID change is received, the G-CDR is closed. A new service-record is generated and the new PLMN-ID is written into the new service-record.")
cgprsCgProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 22), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
cgprsCgProfileContentPostValidityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(900, 4294967295), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostValidityTime.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentPostValidityTime.setDescription('This object specifies the validity timeout for this postpaid users in this charging profile. By default, the time and volume quota for postpaid has no validity timeout. If it is configured, it applies to both time based or volume based quota. The valid range of this object is from 900 to 4294967295, and the value 0 indicates that the validity timeout is not configured.')
cgprsCgProfileContentPostUserLocChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentPostUserLocChange.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentPostUserLocChange.setDescription("This object when set to 'true' enables the trigger for user location change for postpaid users using this charging profile. When the trigger is enabled and a user location change is received, the G-CDR is closed. A new service-record is generated and the new user location information is written into the new service-record. This object can be set to 'true' only when the object cgprsCgServiceRecordIncludeUserLocInfo is 'true'.")
cgprsCgProfileScdrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 30, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileScdrEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileScdrEnable.setDescription("This object specifies whether the SGW CDR generation is enabled or disabled, for the sessions in SPGW mode. When set to 'true' SGW mode CDR generation is enabled. when set to 'false' SGW mode CDR generation is Disabled. By default the value of this object is 'false'.")
cgprsCgProfileMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 31), )
if mibBuilder.loadTexts: cgprsCgProfileMapTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileMapTable.setDescription('This table maintains the default charging profile mappings. The profile set in cgprsCgProfileTable will be mapped to the default profile table. Only one mapping to the type of MS can be present. This is a static table which contains only four entries, each for a category.')
cgprsCgProfileMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 31, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapCategory"))
if mibBuilder.loadTexts: cgprsCgProfileMapEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileMapEntry.setDescription('Entry for each category (all, home, visiting and roamer) exists, which has the profile number and override condition.')
cgprsCgProfileMapCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 1), ("home", 2), ("roaming", 3), ("visitor", 4))))
if mibBuilder.loadTexts: cgprsCgProfileMapCategory.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileMapCategory.setDescription('This object defines the category in which the MS falls into.')
cgprsCgProfileMapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgProfileMapNum.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgProfileMapNum.setDescription("This object represents the profile number which is created using cgprsCgProfileTable. This object holds the valid value represented by cgprsCgProfileNum. The profile number 0 cannot be created or deleted using cgprsCgProfileTable. It's created using the other configuration objects cgprsCgContainerVolThresh, cgprsCgCdrSgsnChangeLimit, cgprsCgContainerTimeLimit. This object is deprecated by cgprsCgProfileMapNumber.")
cgprsCgProfileMapOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 31, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgProfileMapOverride.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileMapOverride.setDescription('This object defines whether the profile set in cgprsCgProfileMapNum should override the value received from SGSN.')
cgprsCgProfileMapTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 31, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgProfileMapTrusted.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileMapTrusted.setDescription("This object defines whether the profile for 'roaming', 'visitor' is a trusted. This object has no meaning when the value of the cgprsCgProfileMapCategory is 'all' or 'home'. If this object is set to 'true' and cgprsCgProfileMapCategory is 'roaming', then this profile will be the default profile for trusted roamer. If set to 'false', then it's just a roamer. If this object is set to 'true' and cgprsCgProfileMapCategory is 'visitor', then this profile will be the default profile for trusted visitor. If set to 'false', then it's just a roamer.")
cgprsCgProfileMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgProfileMapNumber.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileMapNumber.setDescription("This object represents the profile number which is created using cgprsCgProfileTable. This object holds the valid value represented by cgprsCgProfileNum. The profile number 0 cannot be created or deleted using cgprsCgProfileTable. It's created using the other configuration objects cgprsCgContainerVolThresh, cgprsCgCdrSgsnChangeLimit, cgprsCgContainerTimeLimit. The value -1 for this object indicates that the default profile for the category is not configured.")
cgprsCgChargingCharReject = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgChargingCharReject.setStatus('current')
if mibBuilder.loadTexts: cgprsCgChargingCharReject.setDescription("This object defines whether the incoming PDP create request has to be rejected or accepted depending on the charging profile match. If in case a PDP create request comes in and if there is no matching profile configured and there is no overriding profile set, then if this object is set to 'false', the PDP will be accepted and the default profile will be applied to it. If this object is set to 'true', the PDP will be rejected if no matching profile in the create request or overriding profile is present.")
cgprsCgServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("maintenance", 2))).clone('operational')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgServiceMode.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgServiceMode.setDescription("This object specifies the service mode for charging. The charging functions in the GGSN involve mainly collection/accumulation of CDRs and transmitting CDRs to the Charging Gateways. The charging service-mode function has no impact to the collection/accumulation of CDRs. The charging service mode function only involves the transmission of CDRs to the charging gateways. The charging service-mode has the following two states: 'operational' : Normal operation. 'maintenance' : In this state, transmission of CDRs to the charging gateways will not be performed; However, collection and accumulation of CDRs will continue as is done normally. The default charging service-mode state is 'in-service'(This mode is set with value as 'operational'). When the GGSN is in 'outOfService' mode set in cGgsnServiceMode, all the charging configurations will be allowed. In the system-init phase, the charging service mode CLI configs will not be handled. The handling of 'Redirecting Request', 'Node Alive' and charging gateway switchover mechanisms will not be performed while the charging is in maintenance mode. After the mode is changed to in-service, the messages in the pending queue will be sent towards the newly configured active charging gateway and the normal functions will continue from thereon. When switching between modes, traps will be generated using cgprsCgInServiceModeNotif and cgprsCgMaintenanceModeNotif. This object is deprecated by cgprsCgGroupServiceMode.")
cgprsCgPartialCdrGenEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 34), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgPartialCdrGenEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgPartialCdrGenEnable.setDescription("A Primary CDR refers to the first CDR for a PDP. Subsequent CDR's, called secondary CDR's, will be opened when the primary CDR is closed by triggers like exceeding data volume limit, max number of charging condition changes, SGSN change, etc., A Partial CDR is such subsequent CDR in which some fields, like Access Point Name, PDP Type, etc., that cannot change during the life time of the PDP are not included. This object controls the generation of partial CDRs on GGSN. When set to 'true', partial CDR's are generated. When set to 'false', partial CDR's are not generated i.e., all the fields are sent in the CDR.")
cgprsCgSwitchOverPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 35), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgSwitchOverPriority.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgSwitchOverPriority.setDescription("This object is used to enable the switch over priority mechanism. 'true' - If a higher priority CG comes up, it becomes the active CG. 'false' - If a higher priority CG comes up, the existing active CG continues to be active. This object is deprecated by cgprsCgGroupSwitchOverPriority.")
cgprsCgCharSelectionMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 36), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCharSelectionMode.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCharSelectionMode.setDescription("This object is used to add the charging characteristic selection mode in the CDR. 'true' - Charging characteristic selection mode will be added in the CDR. 'false' - Charging characteristic selection mode will not be added in the CDR.")
cgprsCgReconnect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgReconnect.setStatus('current')
if mibBuilder.loadTexts: cgprsCgReconnect.setDescription('This object enables the charging reconnect feature. This feature when enabled, reconnects to the CG that is unreachable due to some transient network or link failures. It is only needed for CG using path protocoal as UDP and when the CG can only respond to echo but cannot send echo request. By default this feature is disabled.')
cgprsCgPtcEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgPtcEnable.setReference('GSM 12.15 version 7.6.0 Release 1998')
if mibBuilder.loadTexts: cgprsCgPtcEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgPtcEnable.setDescription("When this object is set, GGSN sends the Packet Transfer Command (PTC) IE in the CDR message. 'true' - send PTC IE with the CDR. The value in the IE will be 'Send Data Record Packet' if the object cgprsCgPtcPossiblyDupEnable is not set to 'true' and there is no condition of possibly duplicate scenario. 'false' - do not send PTC IE with the CDR. This object cannot be set to 'false' if the object cgprsCgPtcPossiblyDupEnable is set to 'true'.")
cgprsCgPtcPossiblyDupEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgPtcPossiblyDupEnable.setReference('GSM 12.15 version 7.6.0 Release 1998')
if mibBuilder.loadTexts: cgprsCgPtcPossiblyDupEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgPtcPossiblyDupEnable.setDescription("This object is used to send possibly duplicated Data Record Packet. When the CDR packet is directed to a secondary CGF (by a CDR generating node) because the currently used CGF is not working or the CDR transfer is not working properly, then this Packet Transfer Command is used instead of the normal 'Send Data Record Packet'. This object has no meaning unless the object cgprsCgPtcEnable is set to 'true'. 'true' - send PTC IE with 'Possibly Duplicate Record' with the CDR when the possibly duplicate scenario occurs. 'false' - Do not set the PTC IE with 'Possibly Duplicate Record' even if possibly duplicate scenario occurs.")
cgprsCgCdrOptionServiceRecord = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionServiceRecord.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionServiceRecord.setDescription('G-CDRs contain information for part, or the entire duration, of a PDP context. The G-CDR includes information such as the subscriber (MSISDN, IMSI), APN used, QoS applied, SGSN ID (as the mobile access location), a time stamp and duration, data volume recorded separately for the upstream and downstream direction, and volume thresholds for intermediate CDR generation and tariff time switches. In addition to all of the above, additionally, enhanced G-CDRs contain a service-record part that contains the usage data of each service flow used by a PDP session (specified by category ID). For example, the upstream and downstream volume and duration is recorded per service flow. By default this feature is not enabled. The number specified is the maximum number of service records a G-CDR can contain before the G-CDR is closed and a partial G-CDR is opened.')
cgprsCgPartialCdrGenEnableAll = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 41), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgPartialCdrGenEnableAll.setStatus('current')
if mibBuilder.loadTexts: cgprsCgPartialCdrGenEnableAll.setDescription("This object when set to 'true' enables the GGSN to copy the SGSN list for charging release prior to release 4 (cgprsCgRelease). The SGSN change limit trigger specified in the object cgprsCgCdrSgsnChangeLimit has to be set as well. If this object is set to 'false'-current SGSN address may not be present in CDR. This object can be set to true only when the object cgprsCgPartialCdrGenEnable is set to 'true'.")
cgprsCgCdrOptionApn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 42), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionApn.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionApn.setDescription("This object when set to 'true' includes real APN in the G-CDR and accounting records. If object is set to 'false'- Access Point Name is disabled in G-CDRs. The option cannot be disabed if the CHARGING_RELEASE is 98 or 99.")
cgprsCgCdrOptionVirtualApn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 43), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionVirtualApn.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionVirtualApn.setDescription("This object when set to 'true' includes virtual APN in G-CDR and accounting records. If this object is set to 'false'- Real APN is included in the G-CDRs.")
cgprsCgCdrOptionApnSelMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 44), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionApnSelMode.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionApnSelMode.setDescription("This object when set to 'true' includes 'APN selection mode' field in G-CDR and sent to CG. The field 'APN selection mode' indicates how the SGSN selected the APN to be used. Selection Mode indicates whether a subscribed APN was selected, or whether a non subscribed APN sent by the MS, or a non-subscribed APN chosen by SGSN was was selected.")
cgprsCgCdrOptionDynamicAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 45), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionDynamicAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionDynamicAddr.setDescription("This object when set to 'true' includes 'Dynamic Address' field in G-CDR and sent to CG. This field indicates that PDP address has been dynamically allocated for that particular PDP context. This field is missing if address is static i.e. part of PDP context subscription.")
cgprsCgCdrOptionNip = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 46), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionNip.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionNip.setDescription("This object when set to 'true' includes NIP (Network Initiated PDP context) field in G-CDR and sent to CG. This field indicates that PDP context is network initiated. The field is missing in case of mobile activated PDP context.")
cgprsCgCdrOptionPdpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 47), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionPdpAddress.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionPdpAddress.setDescription("This object when set to 'true' includes 'Served PDP Address' field in G-CDR and sent to CG. This field (Served PDP Address) contains the PDP address of the served IMSI. This is a network layer address i.e. of type IP version 4 or IP version 6. This parameter shall be present except when both the PDP type is PPP and dynamic PDP address assignment is used.")
cgprsCgCdrOptionPdpType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 48), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionPdpType.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionPdpType.setDescription("This object if set to 'true' includes 'PDP Type' field in G-CDRs. This field defines the PDP type,e.g.IP,PPP or IHOSS:OSP.")
cgprsCgCdrOptionSerMsisdn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 49), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionSerMsisdn.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionSerMsisdn.setDescription("This object when set to 'true' enable the GGSN to provide the MSISDN number from the create PDP context request in the G-CDRs. This field contains the Mobile Station (MS) ISDN number (MSISDN) of the served party. The term 'served' party is used to describe the mobile subscriber involved in the transaction recorded. If the object is set to 'false', Disable the GGSN to provide MSISDN number in the G-CDRs.")
cgprsCgCdrOptionSgsnPlmn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 50), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionSgsnPlmn.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionSgsnPlmn.setDescription("This object whe set to 'true' includes SGSN PLMN ID (MCC and MNC) in the G-CDR and sent to CG. The SGSN PLMN ID field contains a SGSN PLMN Identifier, for the SGSNs which have been connected during the record. This implies that when the MS moves to another PLMN, the G-CDR has to be closed.")
cgprsCgCdrOptionCamelCharInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 51), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionCamelCharInfo.setReference('3GPP;Technical Specification Group Services and System Aspects;Telecommunication Management;Charging Management; Charging data description for the Packet Switched (PS) domain (Release 5); 3GPP TS 32.215 V5.7.0')
if mibBuilder.loadTexts: cgprsCgCdrOptionCamelCharInfo.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionCamelCharInfo.setDescription("This object if set to 'true', S-CDR CAMEL information recieved from SGSN, which is a copy of Tag and Length from SGSN's CDR (S-CDR) is included in G-CDR. If this object is set to 'false', CAMEL field is not included in G-CDRs.")
cgprsCgCdrOptionImeisv = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 52), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionImeisv.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionImeisv.setDescription("This object when set to 'true' the IMEI (Software Version) IE shall be handled by GGSN in a transparent manner and shall be sent to the Charging gateway that is release 5.0 compliant without any modification. International Mobile Equipment Identity IMEI Software Version (IMEISV): indicates identity of mobile equipment used by the subscriber.")
cgprsCgCdrOptionMsTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 53), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionMsTimeZone.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionMsTimeZone.setDescription("This object when set to 'true' includes MS Time Zone field in the G-CDRs and sent to CG. MS Time Zone indicates the offset between universal time and local time in steps of 15 minutes of where the MS currently resides.")
cgprsCgCdrOptionRatType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 54), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionRatType.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionRatType.setDescription("This object when set to 'true' includes Radio Access Type (RAT) IE in the G-CDRs and sent to CG. RAT, indicates whether the SGSN serves the User Equipment (UE) by Universal Terrestrial Radio Access Network (UTRAN) or GSM/EDGE RAN (GERAN).")
cgprsCgCdrOptionUserLocInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 55), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgCdrOptionUserLocInfo.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOptionUserLocInfo.setDescription("This object when set to 'true' includes the User Location Information IE in G-CDRs and sent to CG. User Location Information gives Cell Global Identity (CGI)/Service Area Identity (SAI) of where the MS is currently located.")
cgprsCgServiceRecordIncludeRat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 56), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgServiceRecordIncludeRat.setStatus('current')
if mibBuilder.loadTexts: cgprsCgServiceRecordIncludeRat.setDescription("This object when set to 'true', writes the RAT value into into the service record when RAT change is recieved. If this object is set to 'false', it disables the RAT trigger set by the object cgprsCgProfileContentPostRatChange.")
cgprsCgServiceRecordIncludePlmn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 57), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgServiceRecordIncludePlmn.setStatus('current')
if mibBuilder.loadTexts: cgprsCgServiceRecordIncludePlmn.setDescription("This object when set to 'true', writes the PLMN-ID of the PDP into the service record when there is change in the PLMN-ID. If this object is set to 'false', it disables the plmn trigger set by the object cgprsCgProfileContentPostPlmnChange.")
cgprsCgChargingSrcInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgChargingSrcInterface.setStatus('current')
if mibBuilder.loadTexts: cgprsCgChargingSrcInterface.setDescription('This object specifies the loopback interface to be used by GGSN as the charging source interface. When this is set to any value other than -1, the GTP path to the charging gateways will be re-created with the new address obtained from the loopback interface and this address will be used for all the charging messages in GGSN. When this is set to -1, the global GTP virtual template will be used as source interface for all charging messages.')
cgprsCgServiceRecordIncludeUserLocInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 59), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgServiceRecordIncludeUserLocInfo.setStatus('current')
if mibBuilder.loadTexts: cgprsCgServiceRecordIncludeUserLocInfo.setDescription("When this object is set to 'true', the user location information of the PDP is written into the service record when there is change in the user location information. When this object is set to 'false', the user location information of the PDP is not written into the service record.")
cgprsCgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 60), )
if mibBuilder.loadTexts: cgprsCgGroupTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGroupTable.setDescription('Charging gateway group table. The table contains a list of charging groups. In each charging group, a unique primary, secondary, and tertiary charging gateway, and iSCSI target can be defined and associated with an APN. Charging group enables sending charging records belonging to different APNs to different destinations.')
cgprsCgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 60, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupIndex"))
if mibBuilder.loadTexts: cgprsCgGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGroupEntry.setDescription('A conceptual row in the cgprsCgGroupTable. A row is created in cgprsCgGroupTable whenever a charing group is configured, whereas a row is deleted on removal/unconfiguration of a charging group.')
cgprsCgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 60, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29)))
if mibBuilder.loadTexts: cgprsCgGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGroupIndex.setDescription('A locally unique identifier for the charging groups on GGSN. Note: There is support for only 30 charging groups (0-29). Where charging group 0 is also referred as default charging gateway group.')
cgprsCgGroupIscsi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 60, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGroupIscsi.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGroupIscsi.setDescription('This object specifies the iSCSI gateway name for the charging group.')
cgprsCgGroupServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 60, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("maintenance", 2))).clone('operational')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGroupServiceMode.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGroupServiceMode.setDescription("This object specifies the charging service-mode for a charging group. The charging functions in the GGSN involve mainly collection/accumulation of CDRs and transmitting CDRs to the Charging Gateways. The charging service-mode function has no impact to the collection/accumulation of CDRs. The charging service mode function only involves the transmission of CDRs to the charging gateways. The charging service-mode has the following two states: 'operational' : In this state, the charging group will observe normal charging operations. That is, accumulation and transmission of CDRs to the charging gateway will continue as is done normally. 'maintenance' : In this state, transmission of CDRs to the charging gateways will not be performed; However, collection and accumulation of CDRs will continue as is done normally. When the GGSN is in 'maintenance' mode, all the charging configurations will be allowed. In the system-init phase, the charging service mode CLI configs will not be handled. The handling of 'Redirecting Request', 'Node Alive' and charging gateway switchover mechanisms will not be performed while the charging is in maintenance mode. After the mode is changed to operational mode, the messages in the pending queue will be sent towards the newly configured active charging gateway and the normal functions will continue from thereon. When switching between modes, traps will be generated using cgprsCgGatewayGroupInServiceModeNotif and cgprsCgGatewayGroupMaintenanceModeNotif.")
cgprsCgGroupSwitchOverPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 60, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGroupSwitchOverPriority.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGroupSwitchOverPriority.setDescription("This object specifies the switch over priority mechanism. 'true' - If a higher priority CG comes up, it becomes the active CG. 'false' - If a higher priority CG comes up, the existing active CG continues to be active.")
cgprsCgGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 60, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGroupRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
cgprsCgGatewayIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61), )
if mibBuilder.loadTexts: cgprsCgGatewayIpTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayIpTable.setDescription('Charging gateway table. The table contains a list of charging gateways. A charging gateway contains databases to store the collected G-CDRs for billing purposes.')
cgprsCgGatewayIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupIndex"), (0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayIpIndex"))
if mibBuilder.loadTexts: cgprsCgGatewayIpEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayIpEntry.setDescription('A conceptual row in the cgprsCgGatewayIpTable.')
cgprsCgGatewayIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgprsCgGatewayIpIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayIpIndex.setDescription('An unique identifier for the CG.')
cgprsCgGatewayIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGatewayIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayIpAddrType.setDescription('This object specifies the type of Internet address given in cgprsCgGatewayIpAddr.')
cgprsCgGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGatewayIpAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayIpAddr.setDescription('This object specifies the IP address that is used to uniquely identify the CG.')
cgprsCgGatewayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("active", 2), ("standby", 3))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayOperStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayOperStatus.setDescription('This object is used to indicate what is the operation status of the configured charging gateway. undefined(1) The operation status of the CG is neither active nor standby. active(2) The operation status of the CG is active standby(3) The operation status of the CG is standby')
cgprsCgGatewayLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("pending", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayLinkState.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayLinkState.setDescription('This object is used to indicate the reachability of the CG. on(1) The CG is reachable off(2) The CG is not reachable pending(3) The CG is not reachable but the GGSN is trying to establish a connection')
cgprsCgGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61, 1, 6), CgprsCgGatewayType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGateway.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGateway.setDescription('This object indicates the type of GPRS charging gateway.')
cgprsCgGatewayIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 61, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgGatewayIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayIpRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
cgprsCgProfileContentDccaProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 62), )
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileTable.setDescription('This table contains the list of DCCA Profiles configured as part of the charging profile.')
cgprsCgProfileContentDccaProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 62, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileNum"), (0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentDccaProfileName"))
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileEntry.setDescription('An Entry contains the DCCA profile name.')
cgprsCgProfileContentDccaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 62, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileName.setReference('cGgsnSADccaProfileName is defined in CISCO-GGSN-SERVICE-AWARE-MIB.')
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileName.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileName.setDescription('This object specifies a DCCA client to use to communicate with a DCCA server in a GGSN charging profile. The value must be same as an entry in cGgsnSADccaProfileTable identified by cGgsnSADccaProfileName.')
cgprsCgProfileContentDccaProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 62, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. This object must be set to 'creatAndGo' to create an entry and set to 'destroy' to delete an entry. The value in any column may be modified any time even the value of this entry rowStatus object is 'active'.")
cgprsCgProfileContentDccaProfileWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 62, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileWeight.setStatus('current')
if mibBuilder.loadTexts: cgprsCgProfileContentDccaProfileWeight.setDescription('This object specifies the DCCA profile Round Robin weight')
cgprsCgScdrEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 1, 63), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgScdrEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgScdrEnable.setDescription("This object specifies whether the SGW CDR generation is enabled or disabled, for the sessions in SPGW mode. When set to 'true' SGW mode CDR generation is enabled. when set to 'false' SGW mode CDR generation is Disabled. By default the value of this object is 'false'.")
cgprsCgDownTimes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 1), Counter32()).setUnits('transitions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgDownTimes.setStatus('current')
if mibBuilder.loadTexts: cgprsCgDownTimes.setDescription('The number of occurrences of cgprsCgAlarmEchoFailure traps state transitions since system startup. Trigger Condition: This counter is incremented when the GGSN detects a CG has gone down. Condition includes, a) Link state down. b) Redirection request.')
cgprsCgAccPtNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 2), Counter32()).setUnits('access-points').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgAccPtNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgAccPtNum.setDescription('The number of access points for which charging data is being collected. Trigger Condition: This counter is triggered when a CDR is opened for a PDP and that PDP belongs to a new APN.')
cgprsCgCdrOpenedNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 3), Gauge32()).setUnits('CDRs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgCdrOpenedNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrOpenedNum.setDescription('The number of currently opened G-CDRs on the GGSN. A G-CDR shall be opened for each activated PDP context. Trigger Condition: This counter is triggered when a new CDR is opened. This new CDR might be opened initially and also due to the closure of the existing opened CDR.')
cgprsCgCdrClosedNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 4), Gauge32()).setUnits('CDRs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgCdrClosedNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgCdrClosedNum.setDescription('The number of currently closed G-CDRs on the GGSN which have not been sent to the CG. The G-CDR shall be closed on encountering some trigger conditions. In the event that the G-CDR is closed and the PDP remains active, a new G-CDR will be opened for the PDP. Trigger Condition: This counter is triggered when the CDR is closed. The closure might be due to different trigger conditions. a) Clearing of the CDR using CLI. b) Tigger conditions like vloume limit, time limit, sgsn change limit, container change limit set with configuration objects. c) CDR size reaches maximum.')
cgprsCgContainerNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 5), Gauge32()).setUnits('containers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgContainerNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgContainerNum.setDescription('The number of currently open or closed charging containers. Trigger Condition: This counter is triggered when the CDR is closed or the CDR is updated.')
cgprsCgPendingMsgNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 6), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgPendingMsgNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgPendingMsgNum.setDescription('The number of currently pending G-CDR output messages. Trigger Condition: This counter is triggered when the CDR is sent to the CG and the response from the CG failed.')
cgprsCgSentMsgNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgSentMsgNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgSentMsgNum.setDescription('The number of transmitted G-CDR output messages since the charging service is enabled. The sent G-CDR is the CDR that was sent to the CG for which the GGSN got a response back from the CG. Trigger Condition: This counter is incremented when a CDR is sent to the CG and got a positive response.')
cgprsCgTotalCdrOpened = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 8), Counter32()).setUnits('CDRs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgTotalCdrOpened.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTotalCdrOpened.setDescription('This object gives the total number of CDRs opened on the GGSN, either since system startup or since the last time the charging statistics was cleared. Trigger Condition: This counter is incremented when a new CDR is opened. This new CDR might be opened initially and also due to the closure of the existing opened CDR.')
cgprsCgTotalContainerCreated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 9), Counter32()).setUnits('containers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgTotalContainerCreated.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTotalContainerCreated.setDescription('This object gives the total number of containers created on the GGSN, either since system startup or since the last time the charging statistics was cleared. Trigger Condition: This counter is incremented when the CDR is closed or the CDR is updated.')
cgprsCgTotalServiceRecords = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 10), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgTotalServiceRecords.setStatus('current')
if mibBuilder.loadTexts: cgprsCgTotalServiceRecords.setDescription('This object reflects the total number of service records created on the GGSN, either since the system startup or since the time the service aware feature is enabled. Trigger Condition: This counter is incremented when the service record is closed.')
cgprsCgGatewayGroupStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11), )
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatisticsTable.setDescription('This table contains the charging statistics of all the charging groups on this GGSN.')
cgprsCgGatewayGroupStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1), )
cgprsCgGroupEntry.registerAugmentions(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupStatisticsEntry"))
cgprsCgGatewayGroupStatisticsEntry.setIndexNames(*cgprsCgGroupEntry.getIndexNames())
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatisticsEntry.setDescription('This object indicates the entry for each charging group in statistics table. An entry will be created in the statistics table whenever a charging group is configured, whereas an entry will be removed from the table on unconfiguration of the charging group.')
cgprsCgGatewayGroupCgDownTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 1), Counter32()).setUnits('transitions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupCgDownTimes.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupCgDownTimes.setDescription('This object indicates the number of occurrences of cgprsCgAlarmEchoFailure traps state transitions since system startup. Trigger Condition: This counter is incremented when the GGSN detects a CG has gone down. Condition includes, a) Link state down. b) Redirection request.')
cgprsCgGatewayGroupAccPtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 2), Counter32()).setUnits('access-points').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupAccPtNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAccPtNum.setDescription('This object indicates the number of access points configured with a charging group for which charging data is being collected. Trigger Condition: This counter is triggered when a CDR is opened for a PDP and that PDP belongs to a new APN.')
cgprsCgGatewayGroupCdrOpenedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('CDRs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrOpenedNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrOpenedNum.setDescription('This object indicates the number of currently opened G-CDRs on GGSN for a charging group. A G-CDR shall be opened for each activated PDP context. Trigger Condition: This counter is triggered when a new CDR is opened. This new CDR might be opened initially and also due to the closure of the existing opened CDR.')
cgprsCgGatewayGroupCdrClosedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('CDRs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrClosedNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrClosedNum.setDescription('This object indicates the number of currently closed G-CDRs on GGSN for a charging group, which have not been sent to the CG. The G-CDR shall be closed on encountering some trigger conditions. In the event that the G-CDR is closed and the PDP remains active, a new G-CDR will be opened for the PDP. Trigger Condition: This counter is triggered when the CDR is closed. The closure might be due to different trigger conditions. a) Clearing of the CDR using CLI. b) Tigger conditions like vloume limit, time limit, sgsn change limit, container change limit set with configuration objects. c) CDR size reaches maximum.')
cgprsCgGatewayGroupContainerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('containers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupContainerNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupContainerNum.setDescription('This object indicates the number of currently open or closed charging containers for a charging group. Trigger Condition: This counter is triggered when the CDR is closed or the CDR is updated.')
cgprsCgGatewayGroupServiceRecordsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupServiceRecordsNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupServiceRecordsNum.setDescription('This object indcates the number of currently created service records on GGSN for a charging group. Trigger Condition: This counter is triggered when the service record is closed.')
cgprsCgGatewayGroupPendingMsgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupPendingMsgNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupPendingMsgNum.setDescription('This object indicates the number of currently pending G-CDR output messages for a charging group. Trigger Condition: This counter is triggered when the CDR is sent to the CG or iSCSI and the response from the CG or iSCSI target failed.')
cgprsCgGatewayGroupCdrPendingMsgIscsiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrPendingMsgIscsiNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrPendingMsgIscsiNum.setDescription('This object indicates the number of currently pending G-CDR output messages for a charging group in the iSCSI path. Trigger Condition: This counter is triggered when the CDR is sent to the iSCSI and response from the iSCSI target failed.')
cgprsCgGatewayGroupCdrPendingMsgCgPathNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrPendingMsgCgPathNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrPendingMsgCgPathNum.setDescription('The number of currently pending G-CDR output messages for a charging group in the CG path. Trigger Condition: This counter is triggered when the CDR is sent to the CG and response from the CG target failed.')
cgprsCgGatewayGroupCdrPendingMsgMaintNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrPendingMsgMaintNum.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupCdrPendingMsgMaintNum.setDescription('This object indicates the number of currently pending G-CDR output messages for a charging group, when the charging group service mode is maintenance. Trigger Condition: This counter is triggered when there are pending G-CDR output messages and the charging group is moved to maintenance mode.')
cgprsCgGatewayGroupTotalCdrOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 11), Counter32()).setUnits('CDRs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalCdrOpened.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalCdrOpened.setDescription('This object indicates the total number of CDRs opened on the GGSN for a charging group, either since system startup or since the last time the charging statistics was cleared. Trigger Condition: This counter is incremented when a new CDR is opened. This new CDR might be opened initially and also due to the closure of the existing opened CDR.')
cgprsCgGatewayGroupTotalContainerCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 12), Counter32()).setUnits('containers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalContainerCreated.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalContainerCreated.setDescription('This object indicates the total number of containers created on the GGSN for a charging group, either since system startup or since the last time the charging statistics was cleared. Trigger Condition: This counter is incremented when the CDR is closed or the CDR is updated.')
cgprsCgGatewayGroupTotalServiceRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 13), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalServiceRecords.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalServiceRecords.setDescription('This object indicates the total number of service records created on GGSN for a charging group, either since the system startup or since the time the service aware feature is enabled. Trigger Condition: This counter is incremented when the service record is closed.')
cgprsCgGatewayGroupTotalSentMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 14), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalSentMsg.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalSentMsg.setDescription('This object indicates the total number of G-CDR output messages sent from a charging group on the GGSN since the charging service is enabled. Trigger Condition: This counter is incremented when a CDR is sent either to a CG or an iSCSI target and got a positive response.')
cgprsCgGatewayGroupTotalSentMsgToIscsi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 15), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalSentMsgToIscsi.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalSentMsgToIscsi.setDescription('This object indicates the total number of G-CDR output messages sent from a charging group on the GGSN to an iSCSI target since the charging service is enabled. Trigger Condition: This counter is incremented when a CDR is sent to the iSCSI target and got a positive response.')
cgprsCgGatewayGroupTotalSentMsgToCg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 3, 11, 1, 16), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalSentMsgToCg.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupTotalSentMsgToCg.setDescription('This object indicates the total number of G-CDR output messages sent from a charging group on the GGSN to a CG since the charging service is enabled. Trigger Condition: This counter is incremented when a CDR is sent to a CG and got a positive response.')
cgprsCgActiveChgGatewayAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgActiveChgGatewayAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgActiveChgGatewayAddrType.setDescription('This object specifies the address type of the active charging gateway. This object is deprecated by cgprsCgGatewayGroupStatusAddrType.')
cgprsCgActiveChgGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgActiveChgGatewayAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgActiveChgGatewayAddress.setDescription('This object specifies the address of the active charging gateway. The type of address will be represented by cgprsCgActiveChgGatewayAddrType. This object is deprecated by cgprsCgGatewayGroupStatusActiveCgAddr.')
cgprsCgOldChgGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgOldChgGatewayAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgOldChgGatewayAddress.setDescription('This object specifies the address of the previous active charging gateway. The type of address will same as the one present in cgprsCgActiveChgGatewayAddrType. This object is deprecated by cgprsCgGatewayGroupStatusOldCgAddr.')
cgprsCgGatewayGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5, 4), )
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusTable.setDescription('Charging gateway table. The table contains a list of currently active and previous active charging gateways.')
cgprsCgGatewayGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5, 4, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupIndex"))
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusEntry.setDescription('A conceptual row in the cgprsCgGatewayGroupStatusTable.')
cgprsCgGatewayGroupStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusAddrType.setDescription('This object indicates the address type of the active charging gateway.')
cgprsCgGatewayGroupStatusActiveCgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5, 4, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusActiveCgAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusActiveCgAddr.setDescription('This object indicates the address of the active charging gateway. The type of address will be represented by cgprsCgGatewayGroupStatusAddrType')
cgprsCgGatewayGroupStatusOldCgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 5, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusOldCgAddr.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupStatusOldCgAddr.setDescription('This object indicates the address of the previous active charging gateway. The type of address will same as the one present in cgprsCgGatewayGroupStatusAddrType.')
cgprsCgAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgAlarmEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmEnable.setDescription("The object controls the generation of cgprsCgAlarmNotif as follows: 'true(1)' - the generation of cgprsCgAlarmNotif notifications is enabled. 'false(2)' - the generation of cgprsCgAlarmNotif notifications is disabled.")
cgprsCgAlarmHistTableMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgAlarmHistTableMax.setStatus('current')
if mibBuilder.loadTexts: cgprsCgAlarmHistTableMax.setDescription('Specifies the upper limit on the number of entries that the cgprsCgAlarmHistTable may contain.')
cgprsCgAlarmHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 3), )
if mibBuilder.loadTexts: cgprsCgAlarmHistTable.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmHistTable.setDescription('This table contains a history of all charging gateway and charging related alarms that were generated.This table is deprecated by cgprsCgGatewayGroupAlarmHistTable')
cgprsCgAlarmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistIndex"))
if mibBuilder.loadTexts: cgprsCgAlarmHistEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmHistEntry.setDescription('The information regarding a CG alarm. An entry, the oldest entry, is removed if the table is full and a new entry is created in the table to accommodate a new alarm.')
cgprsCgAlarmHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgprsCgAlarmHistIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmHistIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing the charging gateway and charging related alarms. When the index reaches the maximum value it will wrap around to one.')
cgprsCgAlarmHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 3, 1, 2), CgprsCgAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgAlarmHistType.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmHistType.setDescription('Type of the GPRS charging gateway or charging related alarm.')
cgprsCgAlarmHistAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgAlarmHistAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmHistAddrType.setDescription('This object indicates the type of Internet address given in cgprsCgAlarmHistAddress.')
cgprsCgAlarmHistAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgAlarmHistAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmHistAddress.setDescription('The IP address that is used to uniquely identify the CG.')
cgprsCgAlarmHistSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 3, 1, 5), CiscoAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgAlarmHistSeverity.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmHistSeverity.setDescription('This object indicates the severity of the alarm.')
cgprsCgAlarmHistInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgAlarmHistInfo.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmHistInfo.setDescription('This object provide detailed information when a GPRS charging gateway or charging related alarm is generated.')
cgprsCgAlarmHistLatestIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgAlarmHistLatestIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsCgAlarmHistLatestIndex.setDescription('The value of cgprsCgAlarmHistIndex for the most recently created entry in cgprsCgAlarmHistTable.')
cgprsCgGatewayGroupAlarmHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 5), )
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistTable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistTable.setDescription('This table contains a history of all charging groups and charging related alarms that were generated for the charging gateways per charging group.')
cgprsCgGatewayGroupAlarmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 5, 1), ).setIndexNames((0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupIndex"), (0, "CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistIndex"))
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistEntry.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistEntry.setDescription('This object indicates the information regarding a CG alarm per charging group. An entry is created in the table on receiving a charging gateway alarm per charging group. A CG alarm can be received for scenarios described by CgprsCgAlarmType. An entry, the oldest entry, is removed if the table is full and a new entry is created in the table to accommodate a new alarm.')
cgprsCgGatewayGroupAlarmHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistIndex.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistIndex.setDescription('This object indicates a monotonically increasing integer for the sole purpose of indexing the charging gateway and charging related alarms in a charging group. When the index reaches the maximum value it will wrap around to one.')
cgprsCgGatewayGroupAlarmHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 5, 1, 2), CgprsCgAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistType.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistType.setDescription('This object indicates the type of GPRS, charging gateway or charging related alarm.')
cgprsCgGatewayGroupAlarmHistAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 5, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistAddrType.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistAddrType.setDescription('This object indicates the type of Internet address given in cgprsCgGatewayGroupAlarmHistAddress.')
cgprsCgGatewayGroupAlarmHistAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistAddress.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistAddress.setDescription('This object indicates the IP address that is used to uniquely identify the CG.')
cgprsCgGatewayGroupAlarmHistSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 5, 1, 5), CiscoAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistSeverity.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistSeverity.setDescription('This object indicates the severity of the alarm.')
cgprsCgGatewayGroupAlarmHistInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 5, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistInfo.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmHistInfo.setDescription('This object provides detailed information when a GPRS charging gateway or charging related alarm is generated.')
cgprsCgGatewayGroupAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 192, 1, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmEnable.setDescription("The object controls the generation of cgprsCgGatewayGroupAlarmNotif as follows: 'true(1)' - the generation of cgprsCgGatewayGroupAlarmNotif notifications is enabled. 'false(2)' - the generation of cgprsCgGatewayGroupAlarmNotif notifications is disabled.")
ciscoGprsCharNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 2))
ciscoGprsCharNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0))
cgprsCgAlarmNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0, 1)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistSeverity"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistInfo"))
if mibBuilder.loadTexts: cgprsCgAlarmNotif.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgAlarmNotif.setDescription('A cgprsCgAlarmNotif signifies that a GPRS related alarm is detected in the managed system. This alarm is sent after an entry has been added to cgprsCgAlarmHistTable or cgprsCgGatewayGroupAlarmHistTable. This notification is deprecated by cgprsCgGatewayGroupAlarmNotif')
cgprsCgGatewaySwitchoverNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0, 2)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgActiveChgGatewayAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgActiveChgGatewayAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgOldChgGatewayAddress"))
if mibBuilder.loadTexts: cgprsCgGatewaySwitchoverNotif.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgGatewaySwitchoverNotif.setDescription('A notification of this type is generated when the charging gateway is switched, the new charging gateway is identified by cgprsCgActiveChgGatewayAddress and the old charging gateway is identified by cgprsCgOldChgGatewayAddress. The switchover will happen according to the value set in cgprsCgGroupSwitchOverTime and the selection of the new CG will be according to the value set in cgprsCgSwitchOverPriority. Note: Selection of new CG based on the value set in cgprsCgSwitchOverPriority is only true for default charging gateway group, for other charging gateway groups including defualt charging gateway group it can be determined by the value set in cgprsCgGroupSwitchOverPriority. This notification is deprecated by cgprsCgGatewayGroupSwitchoverNotif')
cgprsCgInServiceModeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0, 3))
if mibBuilder.loadTexts: cgprsCgInServiceModeNotif.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgInServiceModeNotif.setDescription('A notification of this type is generated when the GGSN charging function is in normal mode. This can be identified by cgprsCgServiceMode object for default charging gateway group whereas for other charging groups, including default charging gateway group it can be identfied by cgprsCgGroupServiceMode. This notification is deprecated by cgprsCgGatewayGroupInServiceModeNotif')
cgprsCgMaintenanceModeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0, 4))
if mibBuilder.loadTexts: cgprsCgMaintenanceModeNotif.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMaintenanceModeNotif.setDescription('A notification of this type is generated when the GGSN charging function is in maintenance mode. This can be identified by cgprsCgServiceMode object for default charging gateway group whereas for other charging groups, including default charging gateway group it can be identfied by cgprsCgGroupServiceMode. This notification is deprecated by cgprsCgGatewayGroupMaintenanceModeNotif')
cgprsCgGatewayGroupAlarmNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0, 5)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistSeverity"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistInfo"))
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupAlarmNotif.setDescription('A cgprsCgGroupAlarmNotif signifies that a GPRS related alarm is detected in the managed system. This alarm is sent after an entry has been added to cgprsCgGatewayGroupAlarmHistTable.')
cgprsCgGatewayGroupSwitchoverNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0, 6)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupStatusAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupStatusActiveCgAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupStatusOldCgAddr"))
if mibBuilder.loadTexts: cgprsCgGatewayGroupSwitchoverNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupSwitchoverNotif.setDescription('A notification of this type is generated when the charging gateway is switched, the new charging gateway is identified by cgprsCgGatewayGroupStatusActiveCgAddr and the old charging gateway is identified by cgprsCgGatewayGroupStatusOldCgAddr.')
cgprsCgGatewayGroupInServiceModeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0, 7)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupServiceMode"))
if mibBuilder.loadTexts: cgprsCgGatewayGroupInServiceModeNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupInServiceModeNotif.setDescription('The cgprsCgGatewayGroupInServiceModeNotif notification is generated when the charging group state transitions to in-service mode, identified by the object cgprsCgGroupServiceMode')
cgprsCgGatewayGroupMaintenanceModeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 192, 2, 0, 8)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupServiceMode"))
if mibBuilder.loadTexts: cgprsCgGatewayGroupMaintenanceModeNotif.setStatus('current')
if mibBuilder.loadTexts: cgprsCgGatewayGroupMaintenanceModeNotif.setDescription('The cgprsCgGatewayGroupMaintenanceModeNotif notification is generated when the charging group state transitions to maintenance mode, identified by the object cgprsCgGroupServiceMode')
ciscoGprsCharMIBConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 3))
cgprsCgMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1))
cgprsCgMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2))
cgprsCgCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 1)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgCompliance = cgprsCgCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsCgCompliance.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB.')
cgprsCgComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 2)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev1 = cgprsCgComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsCgComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB. This is deprecated by cgprsCgComplianceRev2.')
cgprsCgComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 3)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev2 = cgprsCgComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB.')
cgprsCgComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 4)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev3"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev3 = cgprsCgComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev3.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB.')
cgprsCgComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 5)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev3"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev4 = cgprsCgComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev4.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB.')
cgprsCgComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 6)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev3"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev5 = cgprsCgComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev5.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB.')
cgprsCgComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 7)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev4"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBExtConfigGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev6 = cgprsCgComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev6.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB. This is deprecated by cgprsCgComplianceRev7.')
cgprsCgComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 8)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev4"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBExtConfigGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR80"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev7 = cgprsCgComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev7.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB. This is deprecated by cgprsCgComplianceRev8.')
cgprsCgComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 9)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev4"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBExtConfigGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR80"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev8 = cgprsCgComplianceRev8.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev8.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB. This is deprecated by cgprsCgComplianceRev9.')
cgprsCgComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 10)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev5"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBExtConfigGroup"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR80"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR90"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev3"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev9 = cgprsCgComplianceRev9.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev9.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB. This is deprecated by cgprsCgComplianceRev10.')
cgprsCgComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 11)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev5"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR80"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR90"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev3"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR100"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev10 = cgprsCgComplianceRev10.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev10.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB. This compliance is deprecated and replaced by cgprsCgComplianceRev11.')
cgprsCgComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 12)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev5"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR80"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR90"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev3"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR100Rev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev11 = cgprsCgComplianceRev11.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgComplianceRev11.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB.')
cgprsCgComplianceRev12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 1, 13)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupRev5"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBAlarmsGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBNotifGroupRev2"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatusGroupR60"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR80"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR90"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBStatsGroupRev3"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroupRev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigGroupR100Rev1"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMIBConfigProfileChangeGroupRev1Sup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgComplianceRev12 = cgprsCgComplianceRev12.setStatus('current')
if mibBuilder.loadTexts: cgprsCgComplianceRev12.setDescription('The compliance statement for entities which implement the CISCO GPRS CHARGING MIB.')
cgprsCgMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 1)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgOperStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgLinkState"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrLocalSeqNumEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrNodeIdEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgFlowControlEcho"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrPktsStatEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrNonPrimaryEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrAggreLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransInterval"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPktsQSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathRequest"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerVolThresh"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMapDataTos"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathProtocol"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServerSwitchTimeout"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgConditionLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpPrimePort"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgN3BufferSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargeForRoamersOnly"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMaxEntries"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeNextIndex"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeHour"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMin"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroup = cgprsCgMIBConfigGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroup.setDescription('A collection of objects providing charging related configuration.')
cgprsCgMIBStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 2)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgDownTimes"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAccPtNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOpenedNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrClosedNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPendingMsgNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgSentMsgNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBStatsGroup = cgprsCgMIBStatsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsCgMIBStatsGroup.setDescription('A collection of objects providing charging related statistics.')
cgprsCgMIBAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 3)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistTableMax"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistSeverity"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBAlarmsGroup = cgprsCgMIBAlarmsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBAlarmsGroup.setDescription('A collection of objects providing information about the charging gateway and charging related alarms. This group is obsoleted by cgprsCgMIBAlarmsGroupRev1.')
cgprsCgMIBNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 4)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBNotifGroup = cgprsCgMIBNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBNotifGroup.setDescription('A collection of notification.')
cgprsCgMIBConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 5)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgOperStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgLinkState"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrLocalSeqNumEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrNodeIdEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgFlowControlEcho"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrPktsStatEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrNonPrimaryEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrAggreLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransInterval"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPktsQSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathRequest"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerVolThresh"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMapDataTos"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathProtocol"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServerSwitchTimeout"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgConditionLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpPrimePort"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgN3BufferSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargeForRoamersOnly"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMaxEntries"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeNextIndex"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeHour"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMin"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeSec"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgClearCdrPartialCdr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgSgsnChangeLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupRev1 = cgprsCgMIBConfigGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupRev1.setDescription('A collection of objects providing charging related configuration. This group is deprecated by cgprsCgMIBConfigGroupRev2.')
cgprsCgMIBStatsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 6)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgDownTimes"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAccPtNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOpenedNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrClosedNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPendingMsgNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgSentMsgNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTotalCdrOpened"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTotalContainerCreated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBStatsGroupRev1 = cgprsCgMIBStatsGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBStatsGroupRev1.setDescription('A collection of objects providing information about the charging gateway and charging related alarms.')
cgprsCgMIBConfigGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 7)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgOperStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgLinkState"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrLocalSeqNumEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrNodeIdEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgFlowControlEcho"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrPktsStatEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrAggreLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransInterval"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPktsQSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathRequest"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerVolThresh"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMapDataTos"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathProtocol"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServerSwitchTimeout"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgConditionLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpPrimePort"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgN3BufferSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargeForRoamersOnly"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMaxEntries"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeNextIndex"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeHour"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMin"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeSec"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgClearCdrPartialCdr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrSgsnChangeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgSgsnChangeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgRelease"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpShortHeaderEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransFormNumRespEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupRev2 = cgprsCgMIBConfigGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupRev2.setDescription('A collection of objects providing charging related configuration.')
cgprsCgMIBAlarmsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 8)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistTableMax"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistSeverity"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistInfo"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistLatestIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBAlarmsGroupRev1 = cgprsCgMIBAlarmsGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBAlarmsGroupRev1.setDescription('A collection of objects providing information about the charging gateway and charging related alarms. This group is obsoleted by cgprsCgMIBAlarmsGroupRev2')
cgprsCgMIBConfigGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 9)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgOperStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgLinkState"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrLocalSeqNumEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrNodeIdEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgFlowControlEcho"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrPktsStatEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrAggreLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransInterval"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPktsQSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathRequest"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerVolThresh"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMapDataTos"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathProtocol"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServerSwitchTimeout"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgConditionLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpPrimePort"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgN3BufferSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargeForRoamersOnly"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMaxEntries"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeNextIndex"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeHour"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMin"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeSec"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgClearCdrPartialCdr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrSgsnChangeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgRelease"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpShortHeaderEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransFormNumRespEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerTimeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDesc"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCategory"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCdrSuppress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileVolumeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileVolumeLimitReset"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDurLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDurLimitReset"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileTariffTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileSgsnChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapOverride"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapTrusted"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargingCharReject"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServiceMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPartialCdrGenEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgSwitchOverPriority"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCharSelectionMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgReconnect"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPtcEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPtcPossiblyDupEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupRev3 = cgprsCgMIBConfigGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupRev3.setDescription('A collection of objects providing charging related configuration.')
cgprsCgMIBNotifGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 10)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmNotif"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewaySwitchoverNotif"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgInServiceModeNotif"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMaintenanceModeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBNotifGroupRev1 = cgprsCgMIBNotifGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBNotifGroupRev1.setDescription('A collection of notification.')
cgprsCgMIBStatsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 11)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgDownTimes"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAccPtNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOpenedNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrClosedNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPendingMsgNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgSentMsgNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTotalCdrOpened"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTotalContainerCreated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBStatsGroupRev2 = cgprsCgMIBStatsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBStatsGroupRev2.setDescription('A collection of objects providing charging related statistics.')
cgprsCgMIBStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 12)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgActiveChgGatewayAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgActiveChgGatewayAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgOldChgGatewayAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBStatusGroup = cgprsCgMIBStatusGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBStatusGroup.setDescription('A collection of objects providing charging related status.')
cgprsCgMIBConfigGroupR60 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 13)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionServiceRecord"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPartialCdrGenEnableAll"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCdrSuppressPrepaid"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentDccaProfile"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostValTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostVolume"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentRulebaseId"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionApn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionVirtualApn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionApnSelMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionDynamicAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionNip"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionPdpAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionPdpType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionSerMsisdn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionSgsnPlmn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionCamelCharInfo"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionImeisv"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionMsTimeZone"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionRatType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionUserLocInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupR60 = cgprsCgMIBConfigGroupR60.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupR60.setDescription('A collection of objects added as part of GGSN release R6.0.')
cgprsCgMIBStatusGroupR60 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 14)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgTotalServiceRecords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBStatusGroupR60 = cgprsCgMIBStatusGroupR60.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBStatusGroupR60.setDescription('A collection of status object added as part of GGSN release R6.0.')
cgprsCgMIBConfigProfileChangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 15)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostQosChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostSgsnChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostRatChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostPlmnChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileStorageType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServiceRecordIncludeRat"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServiceRecordIncludePlmn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigProfileChangeGroup = cgprsCgMIBConfigProfileChangeGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBConfigProfileChangeGroup.setDescription('A collection of objects providing charging related configuration. This is deprecated by cgprsCgMIBConfigProfileChangeGroupRev1.')
cgprsCgMIBConfigGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 16)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgOperStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgLinkState"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrLocalSeqNumEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrNodeIdEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgFlowControlEcho"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrPktsStatEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrAggreLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransInterval"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPktsQSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathRequest"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerVolThresh"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMapDataTos"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathProtocol"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServerSwitchTimeout"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgConditionLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpPrimePort"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgN3BufferSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargeForRoamersOnly"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMaxEntries"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeNextIndex"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeHour"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMin"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeSec"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgClearCdrPartialCdr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrSgsnChangeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgRelease"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpShortHeaderEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransFormNumRespEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerTimeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDesc"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCategory"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCdrSuppress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileVolumeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileVolumeLimitReset"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDurLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDurLimitReset"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileTariffTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileSgsnChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapNumber"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapOverride"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapTrusted"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargingCharReject"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServiceMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPartialCdrGenEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgSwitchOverPriority"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCharSelectionMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgReconnect"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPtcEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPtcPossiblyDupEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupRev4 = cgprsCgMIBConfigGroupRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupRev4.setDescription('A collection of objects providing charging related configurations.')
cgprsCgMIBExtConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 17)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionServiceRecord"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPartialCdrGenEnableAll"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCdrSuppressPrepaid"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentDccaProfile"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostValidityTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostVolume"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentRulebaseId"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionApn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionVirtualApn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionApnSelMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionDynamicAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionNip"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionPdpAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionPdpType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionSerMsisdn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionSgsnPlmn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionCamelCharInfo"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionImeisv"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionMsTimeZone"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionRatType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionUserLocInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBExtConfigGroup = cgprsCgMIBExtConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBExtConfigGroup.setDescription('A collection of status objects.')
cgprsCgMIBConfigGroupR80 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 18)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargingSrcInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupR80 = cgprsCgMIBConfigGroupR80.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupR80.setDescription('Collection of objects added as part of GGSN R8.0 release.')
cgprsCgMIBConfigProfileChangeGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 19)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostQosChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostSgsnChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostRatChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostPlmnChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostUserLocChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileStorageType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServiceRecordIncludeRat"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServiceRecordIncludePlmn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServiceRecordIncludeUserLocInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigProfileChangeGroupRev1 = cgprsCgMIBConfigProfileChangeGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBConfigProfileChangeGroupRev1.setDescription('A collection of objects providing charging related configuration.')
cgprsCgMIBConfigGroupR90 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 20)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayIpAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayIpAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayOperStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayLinkState"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGateway"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayIpRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupIscsi"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupServiceMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupSwitchOverPriority"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupR90 = cgprsCgMIBConfigGroupR90.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupR90.setDescription('Collection of objects added as part of GGSN R9.0 release.')
cgprsCgMIBStatsGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 21)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupCgDownTimes"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAccPtNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupCdrOpenedNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupCdrClosedNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupContainerNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupServiceRecordsNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupPendingMsgNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupCdrPendingMsgIscsiNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupCdrPendingMsgCgPathNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupCdrPendingMsgMaintNum"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupTotalCdrOpened"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupTotalContainerCreated"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupTotalServiceRecords"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupTotalSentMsg"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupTotalSentMsgToIscsi"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupTotalSentMsgToCg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBStatsGroupRev3 = cgprsCgMIBStatsGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBStatsGroupRev3.setDescription('A collection of objects providing charging related statistics.')
cgprsCgMIBAlarmsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 22)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgAlarmHistTableMax"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistSeverity"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmHistInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBAlarmsGroupRev2 = cgprsCgMIBAlarmsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBAlarmsGroupRev2.setDescription('A collection of objects providing information about the charging gateway and charging related alarms.')
cgprsCgMIBStatusGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 23)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupStatusAddrType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupStatusActiveCgAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupStatusOldCgAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBStatusGroupRev1 = cgprsCgMIBStatusGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBStatusGroupRev1.setDescription('A collection of objects providing charging related status.')
cgprsCgMIBConfigGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 24)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrLocalSeqNumEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrNodeIdEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgFlowControlEcho"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrPktsStatEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrAggreLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransInterval"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPktsQSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathRequest"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerVolThresh"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgMapDataTos"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPathProtocol"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgServerSwitchTimeout"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgConditionLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpPrimePort"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgN3BufferSize"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargeForRoamersOnly"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMaxEntries"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeNextIndex"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeHour"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeMin"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTariffTimeSec"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgClearCdrPartialCdr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrSgsnChangeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgRelease"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGtpShortHeaderEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgTransFormNumRespEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgContainerTimeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDesc"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCategory"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCdrSuppress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileVolumeLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileVolumeLimitReset"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDurLimit"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileDurLimitReset"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileTariffTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileSgsnChange"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapNumber"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapOverride"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileMapTrusted"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgChargingCharReject"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPartialCdrGenEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCharSelectionMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgReconnect"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPtcEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPtcPossiblyDupEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupRev5 = cgprsCgMIBConfigGroupRev5.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupRev5.setDescription('A collection of objects providing charging related configurations.')
cgprsCgMIBNotifGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 25)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupAlarmNotif"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupSwitchoverNotif"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupInServiceModeNotif"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgGatewayGroupMaintenanceModeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBNotifGroupRev2 = cgprsCgMIBNotifGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBNotifGroupRev2.setDescription('A collection of notification.')
cgprsCgMIBConfigGroupR100 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 26)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionServiceRecord"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPartialCdrGenEnableAll"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCdrSuppressPrepaid"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostValidityTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostVolume"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentRulebaseId"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionApn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionVirtualApn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionApnSelMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionDynamicAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionNip"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionPdpAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionPdpType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionSerMsisdn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionSgsnPlmn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionCamelCharInfo"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionImeisv"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionMsTimeZone"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionRatType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionUserLocInfo"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentDccaProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupR100 = cgprsCgMIBConfigGroupR100.setStatus('deprecated')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupR100.setDescription('A collection of charging related configuration objects for GGSN 10.0 release. This group is deprecated and replaced by cgprsCgMIBConfigGroupR100Rev1.')
cgprsCgMIBConfigGroupR100Rev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 27)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionServiceRecord"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgPartialCdrGenEnableAll"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileCdrSuppressPrepaid"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostValidityTime"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentPostVolume"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentRulebaseId"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionApn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionVirtualApn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionApnSelMode"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionDynamicAddr"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionNip"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionPdpAddress"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionPdpType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionSerMsisdn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionSgsnPlmn"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionCamelCharInfo"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionImeisv"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionMsTimeZone"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionRatType"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgCdrOptionUserLocInfo"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentDccaProfileRowStatus"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileContentDccaProfileWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigGroupR100Rev1 = cgprsCgMIBConfigGroupR100Rev1.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBConfigGroupR100Rev1.setDescription('A collection of charging related configuration objects for GGSN 10.0 release.')
cgprsCgMIBConfigProfileChangeGroupRev1Sup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 192, 3, 2, 28)).setObjects(("CISCO-GPRS-CHARGING-MIB", "cgprsCgProfileScdrEnable"), ("CISCO-GPRS-CHARGING-MIB", "cgprsCgScdrEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cgprsCgMIBConfigProfileChangeGroupRev1Sup1 = cgprsCgMIBConfigProfileChangeGroupRev1Sup1.setStatus('current')
if mibBuilder.loadTexts: cgprsCgMIBConfigProfileChangeGroupRev1Sup1.setDescription('A collection of objects providing charging related configuration.')
mibBuilder.exportSymbols("CISCO-GPRS-CHARGING-MIB", cgprsCgMIBConfigGroupR60=cgprsCgMIBConfigGroupR60, cgprsCgGroupServiceMode=cgprsCgGroupServiceMode, cgprsCgPtcEnable=cgprsCgPtcEnable, cgprsCgGatewayOperStatus=cgprsCgGatewayOperStatus, cgprsCgGatewayGroupStatisticsTable=cgprsCgGatewayGroupStatisticsTable, cgprsCgSentMsgNum=cgprsCgSentMsgNum, cgprsCgTariffTimeRowStatus=cgprsCgTariffTimeRowStatus, cgprsCgCdrNonPrimaryEnable=cgprsCgCdrNonPrimaryEnable, cgprsCgGatewayGroupTotalContainerCreated=cgprsCgGatewayGroupTotalContainerCreated, cgprsCgFlowControlEcho=cgprsCgFlowControlEcho, cgprsCgServiceRecordIncludePlmn=cgprsCgServiceRecordIncludePlmn, cgprsCgGatewayRowStatus=cgprsCgGatewayRowStatus, cgprsCgGroupTable=cgprsCgGroupTable, cgprsCgProfileTariffTime=cgprsCgProfileTariffTime, cgprsCgMIBNotifGroupRev2=cgprsCgMIBNotifGroupRev2, cgprsCgProfileContentPostSgsnChange=cgprsCgProfileContentPostSgsnChange, cgprsCgProfileNum=cgprsCgProfileNum, cgprsCgComplianceRev9=cgprsCgComplianceRev9, cgprsCgActiveChgGatewayAddrType=cgprsCgActiveChgGatewayAddrType, ciscoGprsChargingConfig=ciscoGprsChargingConfig, cgprsCgProfileRowStatus=cgprsCgProfileRowStatus, cgprsCgProfileDesc=cgprsCgProfileDesc, cgprsCgPartialCdrGenEnableAll=cgprsCgPartialCdrGenEnableAll, cgprsCgGatewayGroupAlarmNotif=cgprsCgGatewayGroupAlarmNotif, cgprsCgGatewayGroupAlarmHistIndex=cgprsCgGatewayGroupAlarmHistIndex, cgprsCgMIBConfigGroupRev2=cgprsCgMIBConfigGroupRev2, cgprsCgCdrOptionServiceRecord=cgprsCgCdrOptionServiceRecord, cgprsCgServerSwitchTimeout=cgprsCgServerSwitchTimeout, cgprsCgPathRequest=cgprsCgPathRequest, cgprsCgGroupIndex=cgprsCgGroupIndex, cgprsCgGatewayGroupInServiceModeNotif=cgprsCgGatewayGroupInServiceModeNotif, cgprsCgProfileSgsnChange=cgprsCgProfileSgsnChange, cgprsCgGatewayGroupTotalCdrOpened=cgprsCgGatewayGroupTotalCdrOpened, cgprsCgProfileContentPostValidityTime=cgprsCgProfileContentPostValidityTime, cgprsCgMIBStatusGroup=cgprsCgMIBStatusGroup, cgprsCgGatewayIpIndex=cgprsCgGatewayIpIndex, cgprsCgAlarmHistIndex=cgprsCgAlarmHistIndex, cgprsCgAlarmHistLatestIndex=cgprsCgAlarmHistLatestIndex, cgprsCgGtpShortHeaderEnable=cgprsCgGtpShortHeaderEnable, cgprsCgMIBConfigGroup=cgprsCgMIBConfigGroup, cgprsCgEnable=cgprsCgEnable, cgprsCgComplianceRev6=cgprsCgComplianceRev6, cgprsCgMIBConfigGroupR100Rev1=cgprsCgMIBConfigGroupR100Rev1, cgprsCgProfileCategory=cgprsCgProfileCategory, ciscoGprsChargingMIB=ciscoGprsChargingMIB, cgprsCgOldChgGatewayAddress=cgprsCgOldChgGatewayAddress, cgprsCgAlarmHistAddress=cgprsCgAlarmHistAddress, cgprsCgComplianceRev2=cgprsCgComplianceRev2, cgprsCgProfileEntry=cgprsCgProfileEntry, ciscoGprsChargingAlarms=ciscoGprsChargingAlarms, cgprsCgPktsQSize=cgprsCgPktsQSize, cgprsCgCharSelectionMode=cgprsCgCharSelectionMode, cgprsCgTariffTimeTable=cgprsCgTariffTimeTable, cgprsCgComplianceRev3=cgprsCgComplianceRev3, cgprsCgTariffTimeMin=cgprsCgTariffTimeMin, cgprsCgPathProtocol=cgprsCgPathProtocol, cgprsCgLinkState=cgprsCgLinkState, cgprsCgProfileContentRulebaseId=cgprsCgProfileContentRulebaseId, cgprsCgPtcPossiblyDupEnable=cgprsCgPtcPossiblyDupEnable, cgprsCgGroupEntry=cgprsCgGroupEntry, cgprsCgCdrClosedNum=cgprsCgCdrClosedNum, cgprsCgGatewayGroupCdrClosedNum=cgprsCgGatewayGroupCdrClosedNum, cgprsCgProfileMapNum=cgprsCgProfileMapNum, cgprsCgMIBConfigGroupRev3=cgprsCgMIBConfigGroupRev3, cgprsCgMIBConfigGroupRev4=cgprsCgMIBConfigGroupRev4, ciscoGprsChargingOthers=ciscoGprsChargingOthers, cgprsCgTotalServiceRecords=cgprsCgTotalServiceRecords, cgprsCgMIBConfigGroupR80=cgprsCgMIBConfigGroupR80, cgprsCgChargingCharReject=cgprsCgChargingCharReject, cgprsCgCdrOptionPdpAddress=cgprsCgCdrOptionPdpAddress, cgprsCgCdrOptionImeisv=cgprsCgCdrOptionImeisv, cgprsCgGatewayGroupSwitchoverNotif=cgprsCgGatewayGroupSwitchoverNotif, cgprsCgGatewayGroupAlarmEnable=cgprsCgGatewayGroupAlarmEnable, cgprsCgMIBCompliances=cgprsCgMIBCompliances, cgprsCgMIBConfigGroupRev1=cgprsCgMIBConfigGroupRev1, cgprsCgCdrNodeIdEnable=cgprsCgCdrNodeIdEnable, ciscoGprsCharMIBConformances=ciscoGprsCharMIBConformances, cgprsCgMIBNotifGroup=cgprsCgMIBNotifGroup, cgprsCgClearCdrPartialCdr=cgprsCgClearCdrPartialCdr, ciscoGprsCharNotifs=ciscoGprsCharNotifs, ciscoGprsChargingMIBObjects=ciscoGprsChargingMIBObjects, cgprsCgAlarmHistEntry=cgprsCgAlarmHistEntry, cgprsCgGatewayIpEntry=cgprsCgGatewayIpEntry, cgprsCgGatewayGroupStatusActiveCgAddr=cgprsCgGatewayGroupStatusActiveCgAddr, PYSNMP_MODULE_ID=ciscoGprsChargingMIB, cgprsCgProfileContentDccaProfileRowStatus=cgprsCgProfileContentDccaProfileRowStatus, ciscoGprsCharNotifPrefix=ciscoGprsCharNotifPrefix, cgprsCgAlarmHistSeverity=cgprsCgAlarmHistSeverity, cgprsCgProfileContentDccaProfileTable=cgprsCgProfileContentDccaProfileTable, cgprsCgN3BufferSize=cgprsCgN3BufferSize, cgprsCgRelease=cgprsCgRelease, cgprsCgGatewayGroupCdrPendingMsgIscsiNum=cgprsCgGatewayGroupCdrPendingMsgIscsiNum, cgprsCgSwitchOverPriority=cgprsCgSwitchOverPriority, cgprsCgCdrOptionMsTimeZone=cgprsCgCdrOptionMsTimeZone, cgprsCgTariffTimeIndex=cgprsCgTariffTimeIndex, cgprsCgTariffTimeMaxEntries=cgprsCgTariffTimeMaxEntries, cgprsCgDownTimes=cgprsCgDownTimes, cgprsCgInServiceModeNotif=cgprsCgInServiceModeNotif, cgprsCgGatewayEntry=cgprsCgGatewayEntry, cgprsCgMIBConfigProfileChangeGroup=cgprsCgMIBConfigProfileChangeGroup, cgprsCgGatewayGroupAlarmHistAddrType=cgprsCgGatewayGroupAlarmHistAddrType, cgprsCgChargeForRoamersOnly=cgprsCgChargeForRoamersOnly, cgprsCgCdrLocalSeqNumEnable=cgprsCgCdrLocalSeqNumEnable, cgprsCgGatewayGroupCdrPendingMsgCgPathNum=cgprsCgGatewayGroupCdrPendingMsgCgPathNum, cgprsCgScdrEnable=cgprsCgScdrEnable, cgprsCgMIBConfigProfileChangeGroupRev1=cgprsCgMIBConfigProfileChangeGroupRev1, cgprsCgComplianceRev10=cgprsCgComplianceRev10, cgprsCgGateway=cgprsCgGateway, cgprsCgTransInterval=cgprsCgTransInterval, cgprsCgMIBConfigGroupR100=cgprsCgMIBConfigGroupR100, cgprsCgCdrOptionSgsnPlmn=cgprsCgCdrOptionSgsnPlmn, cgprsCgProfileMapTrusted=cgprsCgProfileMapTrusted, cgprsCgMIBStatsGroupRev1=cgprsCgMIBStatsGroupRev1, cgprsCgProfileContentDccaProfileEntry=cgprsCgProfileContentDccaProfileEntry, cgprsCgPartialCdrGenEnable=cgprsCgPartialCdrGenEnable, cgprsCgCdrOptionRatType=cgprsCgCdrOptionRatType, cgprsCgAlarmHistTable=cgprsCgAlarmHistTable, cgprsCgTariffTimeSec=cgprsCgTariffTimeSec, cgprsCgMIBAlarmsGroupRev1=cgprsCgMIBAlarmsGroupRev1, cgprsCgProfileCdrSuppressPrepaid=cgprsCgProfileCdrSuppressPrepaid, cgprsCgGatewayLinkState=cgprsCgGatewayLinkState, cgprsCgCdrAggreLimit=cgprsCgCdrAggreLimit, cgprsCgCdrOptionSerMsisdn=cgprsCgCdrOptionSerMsisdn, cgprsCgContainerVolThresh=cgprsCgContainerVolThresh, cgprsCgGatewayIndex=cgprsCgGatewayIndex, cgprsCgProfileContentDccaProfileWeight=cgprsCgProfileContentDccaProfileWeight, cgprsCgComplianceRev8=cgprsCgComplianceRev8, cgprsCgProfileContentPostVolume=cgprsCgProfileContentPostVolume, cgprsCgGatewayGroupStatusTable=cgprsCgGatewayGroupStatusTable, cgprsCgProfileContentPostTime=cgprsCgProfileContentPostTime, cgprsCgGatewayGroupCdrOpenedNum=cgprsCgGatewayGroupCdrOpenedNum, cgprsCgMaintenanceModeNotif=cgprsCgMaintenanceModeNotif, cgprsCgComplianceRev7=cgprsCgComplianceRev7, cgprsCgGatewayGroupStatusAddrType=cgprsCgGatewayGroupStatusAddrType, cgprsCgMIBConfigProfileChangeGroupRev1Sup1=cgprsCgMIBConfigProfileChangeGroupRev1Sup1, cgprsCgProfileTable=cgprsCgProfileTable, cgprsCgProfileContentPostQosChange=cgprsCgProfileContentPostQosChange, cgprsCgTotalCdrOpened=cgprsCgTotalCdrOpened, cgprsCgGatewayTable=cgprsCgGatewayTable, cgprsCgProfileMapOverride=cgprsCgProfileMapOverride, cgprsCgCdrOptionPdpType=cgprsCgCdrOptionPdpType, cgprsCgGroupIscsi=cgprsCgGroupIscsi, cgprsCgGatewayGroupAlarmHistAddress=cgprsCgGatewayGroupAlarmHistAddress, cgprsCgAlarmHistTableMax=cgprsCgAlarmHistTableMax, cgprsCgCdrOptionUserLocInfo=cgprsCgCdrOptionUserLocInfo, cgprsCgGroupSwitchOverPriority=cgprsCgGroupSwitchOverPriority, cgprsCgGatewayGroupMaintenanceModeNotif=cgprsCgGatewayGroupMaintenanceModeNotif, cgprsCgMIBStatsGroupRev3=cgprsCgMIBStatsGroupRev3, cgprsCgComplianceRev1=cgprsCgComplianceRev1, cgprsCgGatewayGroupPendingMsgNum=cgprsCgGatewayGroupPendingMsgNum, cgprsCgTariffTimeEntry=cgprsCgTariffTimeEntry, cgprsCgComplianceRev11=cgprsCgComplianceRev11, cgprsCgProfileContentDccaProfileName=cgprsCgProfileContentDccaProfileName, cgprsCgProfileContentPostRatChange=cgprsCgProfileContentPostRatChange, cgprsCgMapDataTos=cgprsCgMapDataTos, cgprsCgProfileDurLimitReset=cgprsCgProfileDurLimitReset, cgprsCgMIBConfigGroupRev5=cgprsCgMIBConfigGroupRev5, cgprsCgGatewayIpRowStatus=cgprsCgGatewayIpRowStatus, cgprsCgGatewayGroupStatisticsEntry=cgprsCgGatewayGroupStatisticsEntry, cgprsCgGatewayGroupTotalServiceRecords=cgprsCgGatewayGroupTotalServiceRecords, cgprsCgGatewayGroupCgDownTimes=cgprsCgGatewayGroupCgDownTimes, cgprsCgTotalContainerCreated=cgprsCgTotalContainerCreated, cgprsCgMIBStatusGroupR60=cgprsCgMIBStatusGroupR60, cgprsCgGatewayAddr=cgprsCgGatewayAddr, cgprsCgMIBNotifGroupRev1=cgprsCgMIBNotifGroupRev1, cgprsCgComplianceRev5=cgprsCgComplianceRev5, cgprsCgProfileMapTable=cgprsCgProfileMapTable, cgprsCgTransFormNumRespEnable=cgprsCgTransFormNumRespEnable, cgprsCgAccPtNum=cgprsCgAccPtNum, cgprsCgGatewayGroupContainerNum=cgprsCgGatewayGroupContainerNum, cgprsCgCdrOptionNip=cgprsCgCdrOptionNip, cgprsCgGatewayGroupTotalSentMsg=cgprsCgGatewayGroupTotalSentMsg, cgprsCgSgsnChangeLimit=cgprsCgSgsnChangeLimit, cgprsCgConditionLimit=cgprsCgConditionLimit, cgprsCgGatewayGroupTotalSentMsgToIscsi=cgprsCgGatewayGroupTotalSentMsgToIscsi, cgprsCgChargingSrcInterface=cgprsCgChargingSrcInterface, cgprsCgGatewayGroupAlarmHistType=cgprsCgGatewayGroupAlarmHistType, cgprsCgGatewayGroupStatusEntry=cgprsCgGatewayGroupStatusEntry, cgprsCgCdrOptionDynamicAddr=cgprsCgCdrOptionDynamicAddr, cgprsCgMIBGroups=cgprsCgMIBGroups, cgprsCgGatewayGroupCdrPendingMsgMaintNum=cgprsCgGatewayGroupCdrPendingMsgMaintNum, cgprsCgGatewaySwitchoverNotif=cgprsCgGatewaySwitchoverNotif, cgprsCgGatewayIpAddr=cgprsCgGatewayIpAddr, cgprsCgReconnect=cgprsCgReconnect, cgprsCgCdrOptionCamelCharInfo=cgprsCgCdrOptionCamelCharInfo, cgprsCgCompliance=cgprsCgCompliance, cgprsCgCdrOptionVirtualApn=cgprsCgCdrOptionVirtualApn, cgprsCgMIBConfigGroupR90=cgprsCgMIBConfigGroupR90, cgprsCgProfileMapNumber=cgprsCgProfileMapNumber, cgprsCgMIBAlarmsGroupRev2=cgprsCgMIBAlarmsGroupRev2, cgprsCgGatewayGroupAlarmHistTable=cgprsCgGatewayGroupAlarmHistTable, cgprsCgProfileScdrEnable=cgprsCgProfileScdrEnable, cgprsCgProfileContentDccaProfile=cgprsCgProfileContentDccaProfile, cgprsCgGatewayGroupStatusOldCgAddr=cgprsCgGatewayGroupStatusOldCgAddr, ciscoGprsChargingStats=ciscoGprsChargingStats, cgprsCgAlarmEnable=cgprsCgAlarmEnable, cgprsCgProfileVolumeLimit=cgprsCgProfileVolumeLimit, cgprsCgCdrSgsnChangeLimit=cgprsCgCdrSgsnChangeLimit, cgprsCgServiceRecordIncludeUserLocInfo=cgprsCgServiceRecordIncludeUserLocInfo, CgprsCgGatewayType=CgprsCgGatewayType, cgprsCgMIBAlarmsGroup=cgprsCgMIBAlarmsGroup, cgprsCgGatewayGroupAccPtNum=cgprsCgGatewayGroupAccPtNum, cgprsCgOperStatus=cgprsCgOperStatus, cgprsCgGatewayGroupAlarmHistInfo=cgprsCgGatewayGroupAlarmHistInfo, cgprsCgProfileContentPostPlmnChange=cgprsCgProfileContentPostPlmnChange, cgprsCgProfileVolumeLimitReset=cgprsCgProfileVolumeLimitReset, cgprsCgAlarmHistInfo=cgprsCgAlarmHistInfo, cgprsCgTariffTimeHour=cgprsCgTariffTimeHour, cgprsCgCdrOptionApn=cgprsCgCdrOptionApn, cgprsCgGtpPrimePort=cgprsCgGtpPrimePort, cgprsCgServiceMode=cgprsCgServiceMode, cgprsCgPendingMsgNum=cgprsCgPendingMsgNum, cgprsCgGatewayGroupAlarmHistEntry=cgprsCgGatewayGroupAlarmHistEntry, cgprsCgComplianceRev4=cgprsCgComplianceRev4, cgprsCgGatewayGroupServiceRecordsNum=cgprsCgGatewayGroupServiceRecordsNum, cgprsCgMIBStatsGroup=cgprsCgMIBStatsGroup, cgprsCgGroupRowStatus=cgprsCgGroupRowStatus, cgprsCgProfileContentPostValTime=cgprsCgProfileContentPostValTime, cgprsCgAlarmNotif=cgprsCgAlarmNotif, cgprsCgGatewayGroupTotalSentMsgToCg=cgprsCgGatewayGroupTotalSentMsgToCg, cgprsCgActiveChgGatewayAddress=cgprsCgActiveChgGatewayAddress, cgprsCgProfileDurLimit=cgprsCgProfileDurLimit, cgprsCgMIBStatsGroupRev2=cgprsCgMIBStatsGroupRev2, cgprsCgCdrPktsStatEnable=cgprsCgCdrPktsStatEnable, cgprsCgProfileContentPostUserLocChange=cgprsCgProfileContentPostUserLocChange, cgprsCgAlarmHistType=cgprsCgAlarmHistType, cgprsCgAlarmHistAddrType=cgprsCgAlarmHistAddrType, cgprsCgMIBStatusGroupRev1=cgprsCgMIBStatusGroupRev1, CgprsCgAlarmType=CgprsCgAlarmType, cgprsCgContainerTimeLimit=cgprsCgContainerTimeLimit, cgprsCgProfileCdrSuppress=cgprsCgProfileCdrSuppress, ciscoGprsChargingStatus=ciscoGprsChargingStatus, cgprsCgProfileMapEntry=cgprsCgProfileMapEntry, cgprsCgProfileMapCategory=cgprsCgProfileMapCategory, cgprsCgGatewayAddrType=cgprsCgGatewayAddrType, cgprsCgGatewayIpAddrType=cgprsCgGatewayIpAddrType, cgprsCgProfileStorageType=cgprsCgProfileStorageType, cgprsCgCdrOpenedNum=cgprsCgCdrOpenedNum, cgprsCgComplianceRev12=cgprsCgComplianceRev12, cgprsCgGatewayGroupAlarmHistSeverity=cgprsCgGatewayGroupAlarmHistSeverity, cgprsCgCdrOptionApnSelMode=cgprsCgCdrOptionApnSelMode, cgprsCgGatewayIpTable=cgprsCgGatewayIpTable, cgprsCgTariffTimeNextIndex=cgprsCgTariffTimeNextIndex, cgprsCgContainerNum=cgprsCgContainerNum, cgprsCgMIBExtConfigGroup=cgprsCgMIBExtConfigGroup, cgprsCgServiceRecordIncludeRat=cgprsCgServiceRecordIncludeRat)
