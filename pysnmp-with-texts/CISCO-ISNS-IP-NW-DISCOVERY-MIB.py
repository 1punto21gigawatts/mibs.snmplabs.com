#
# PySNMP MIB module CISCO-ISNS-IP-NW-DISCOVERY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ISNS-IP-NW-DISCOVERY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcNameId, = mibBuilder.importSymbols("CISCO-ST-TC", "FcNameId")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, Integer32, ModuleIdentity, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, MibIdentifier, Counter64, IpAddress, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "ModuleIdentity", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "MibIdentifier", "Counter64", "IpAddress", "Unsigned32", "NotificationType")
TextualConvention, TruthValue, TestAndIncr, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "TestAndIncr", "RowStatus", "DisplayString")
ciscoIsnsIpNetDiscoveryMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 434))
ciscoIsnsIpNetDiscoveryMIB.setRevisions(('2004-09-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryMIB.setLastUpdated('200409080000Z')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryMIB.setDescription("MIB to provide the information about the disjoint IP networks connected to the various gigabit ethernet interfaces in the 'Fabric' and objects to discover the same. It is possible that multiple disjoint IP networks may terminate on a single fibre channel switch in a Fabric. In such a scenario, the iSNS Server has to ensure that the targets returned on a query by iscsi devices are filter based on access control list (specified by the user during configuration) and also based on gigabit ethernet ports which are reachable to the IP network, on which the iscsi device is present. To achieve the above objective, the iSNS server partitions all known gigabit ethernet ports into disjoint sets based on IP reachability by sending discovery packets. Each set is referred to as an IP Network and the gigabit ethernet ports contained therein are referred to as IP Network members. This MIB provides ability to initiate, configure and show discovery results of the IP Networks in the fabric. GLOSSARY: Fabric - The set of physically connected fibre channel switches. WWN - World Wide Name. ISNS - Internet Storage Name Service.")
ciscoIsnsIpNetDiscoveryMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 434, 0))
ciscoIsnsIpNetDiscoveryMIBObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 434, 1))
ciscoIsnsIpNetDiscoveryConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 434, 2))
ciscoIsnsIpNetDiscoveryMIBInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1))
ciscoIsnsIpNetDiscoveryMIBConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 2))
ciscoIsnsIpNetAutomaticDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoIsnsIpNetAutomaticDiscovery.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetAutomaticDiscovery.setDescription("This object indicates whether the automatic discovery from the iSNS Server, to find the reachability on the IP networks is enabled or not in the system. If automatic discovery is not enabled in the system, then based on the user demand only, the iSNS Server runs the IP network discovery. The value of this object set to 'true' indicates the automatic discovery for IP network is enabled in the system. The value of this object set to 'false' indicates the automatic discovery for IP network is not enabled in the system.")
ciscoIsnsIpNetDiscoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5184000)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryInterval.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryInterval.setDescription('This object indicates the time duration between successive automatic discovery run for the IP networks, from the iSNS server.')
ciscoIsnsIpNetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 3), )
if mibBuilder.loadTexts: ciscoIsnsIpNetTable.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetTable.setDescription('Represents the list of all the IP networks connected to the gigabit ethernet interfaces in the fabric.')
ciscoIsnsIpNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetName"))
if mibBuilder.loadTexts: ciscoIsnsIpNetEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetEntry.setDescription("An entry represents the information about an IP network connected to the gigabit ethernet interface in the fabric. The 'ciscoIsnsIpNetDiscoveryMechanism' object represents, whether the corresponding entry is populated by the discovery process or by the static configuration of the user.")
ciscoIsnsIpNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 100)))
if mibBuilder.loadTexts: ciscoIsnsIpNetName.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetName.setDescription('A human readable unique string representing the name of an IP network. This name is used to identify the IP network to which the gigabit ethernet interfaces/subinterfaces in the fabric belongs.')
ciscoIsnsIpNetDiscoveryMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoGenerated", 1), ("userConfigured", 2))).clone('userConfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryMechanism.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryMechanism.setDescription("This object represents whether the IP network is dynamically discovered by the discovery process (or) statically configured by the user. autoGenerated (1) - dynamically discovered by the discovery process. userConfigured (2) - IP network configuration is statically created by user. An attempt to modify this object will fail with an 'inconsistentValue' error if the corresponding instance of the 'ciscoIsnsIpNetRowStatus' object value is active (1). For Row creation the value of this object is should be 'userConfigured'. This object represents whether the corresponding instance of IP network and its members represented in the 'ciscoIsnsIpNetInterfaceTable' are created by the discovery process or by the static configuration of the user.")
ciscoIsnsIpNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoIsnsIpNetRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetRowStatus.setDescription('This object indicates the status of this entry in the table.')
ciscoIsnsIpNetInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 4), )
if mibBuilder.loadTexts: ciscoIsnsIpNetInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetInterfaceTable.setDescription('A table consisting of entries for all the gigabit ethernet interfaces, which are connected to the various IP networks in the Fabric. The members of the IP networks are either statically configured by the user or dynamically discovered by the discovery process in the iSNS Server.')
ciscoIsnsIpNetInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetName"), (0, "CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsGigEPortDeviceName"), (0, "CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsGigEPortIfIndex"))
if mibBuilder.loadTexts: ciscoIsnsIpNetInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetInterfaceEntry.setDescription("An entry (conceptual row) in the 'ciscoIsnsIpNetInterfaceTable'. Each row represents a gigabit ethernet interface in the fabric and its IP network. The IP network name for the gigabit ethernet interface is represented by the index object 'ciscoIsnsIpNetName' from the 'ciscoIsnsIpNetTable'.")
ciscoIsnsGigEPortDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 4, 1, 1), FcNameId())
if mibBuilder.loadTexts: ciscoIsnsGigEPortDeviceName.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsGigEPortDeviceName.setDescription("This object represents the World Wide Name (WWN) of the associated switch in the fabric, of the gigabit ethernet interface mentioned in corresponding instance of 'ciscoIsnsGigEPortIfIndex' object.")
ciscoIsnsGigEPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ciscoIsnsGigEPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsGigEPortIfIndex.setDescription("This object represents the 'ifIndex' of the gigabit ethernet interface in a switch in the fabric. The World Wide Name (WWN) of the switch is mentioned in the corresponding instance of 'ciscoIsnsGigEPortDeviceName'. The gigabit ethernet interface is connected to the IP network represented by the the value of the corresponding instance of 'ciscoIsnsIpNetName'.")
ciscoIsnsIpNetInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoIsnsIpNetInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetInterfaceRowStatus.setDescription('This object indicates the status of this entry in the table.')
ciscoIsnsIpNetDiscoverySpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 2, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoverySpinLock.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoverySpinLock.setDescription("This object is used to facilitate modification of ciscoIsnsIpNetToDiscover,ciscoIsnsGigEInterfaceToDiscover and ciscoIsnsIpNetDiscoveryCommand objects by multiple managers. The procedure for modifying the above three objects are as follows: 1. For IP network specific discovery, determine the new values for 'ciscoIsnsIpNetToDiscover' object. And For interface specific discovery, determine the new value for 'ciscoIsnsGigEInterfaceToDiscover' object. 2. Retrieve the value of 'ciscoIsnsIpNetDiscoverySpinLock' object. 3. For IP network specific discovery, Set the value of 'ciscoIsnsIpNetDiscoverySpinLock' object to the retrieved value, and (in the same PDU) the value of 'ciscoIsnsIpNetToDiscover' object to the new value. If the set fails for the 'ciscoIsnsIpNetDiscoverySpinLock' object, go back to step 2. For Interface specific discovery, Set the value of 'ciscoIsnsIpNetDiscoverySpinLock' object to the retrieved value, and (in the same PDU) the value of 'ciscoIsnsGigEInterfaceToDiscover' to the new value. If the set fails for the 'ciscoIsnsIpNetDiscoverySpinLock' object, go back to step 2. 4. Set the value of 'ciscoIsnsIpNetDiscoverySpinLock' object to the retrieved value incremented by two, and (in the same PDU) the value of 'ciscoIsnsIpNetDiscoveryCommand' object to 'ipNetworkSpecific' or 'interfaceSpecific'. If the set fails for 'ciscoIsnsIpNetDiscoverySpinLock' object go back to step 2. Note that if it's possible to include 'ciscoIsnsIpNetDiscoveryCommand' object in the (Set Request) PDU of an earlier step, then step 4 , can be eliminated.")
ciscoIsnsIpNetToDiscover = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoIsnsIpNetToDiscover.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetToDiscover.setDescription("This object indicates the name of an IP network, represented by the the value of the 'ciscoIsnsIpNetName' object, that needs to be (re)discovered. This object MUST be set to a valid value before or concurrently with setting the value of the 'ciscoIsnsIpNetDiscoveryCommand' object to 'ipNetworkSpecific' .")
ciscoIsnsGigEInterfaceToDiscover = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 2, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoIsnsGigEInterfaceToDiscover.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsGigEInterfaceToDiscover.setDescription("This object represents the 'ifIndex' of the specified gigabit ethernet interface for which the IP network discovery needs to be done incrementally. This object MUST be set to a valid value before or concurrently with setting the value of the 'ciscoIsnsIpNetDiscoveryCommand' object to 'interfaceSpecific'.")
ciscoIsnsIpNetDiscoveryCommand = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("noOp", 2), ("ipNetworkSpecific", 3), ("interfaceSpecific", 4))).clone('noOp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryCommand.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryCommand.setDescription("The IP network discovery command to be executed. Command Remarks all Run IP network discovery for all the gigabit ethernet interfaces in the fabric. noOp no operation will be performed. ipNetworkSpecific Run IP network discovery for all gigabit ethernet interfaces that are configured to be members of the IP network name specified in the 'ciscoIsnsIpNetToDiscover' object. interfaceSpecific Run IP network discovery incrementally for the gigabit ethernet interface specified in the 'ciscoIsnsGigEInterfaceToDiscover' object. The value of this object when read is always 'noOp'.")
ciscoIsnsIpNetDiscoveryCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 434, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("success", 1), ("none", 2), ("inProgress", 3), ("noIpNetworkNameSpecified", 4), ("invalidIpNetworkName", 5), ("noGigEInterfaceIndexSpecified", 6), ("invalidGigEInterfaceIndex", 7), ("generalFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryCmdStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryCmdStatus.setDescription("The status of the last IP network discovery command operation. success (1) - IP network discovery operation completed successfully. none (2) - no IP network discovery operation is performed. inProgress (3) - discovery operation is in progress. noIpNetworkNameSpecified (4) - IP network name not specified, i.e., the value of 'ciscoIsnsIpNetToDiscover' object is set to empty string. invalidIpNetworkName (5) - IP network is not configured. NoGigEInterfaceIndexSpecified (6) - 'ifIndex' of the gigabit eithernet interface is not specified, i.e., the value of 'ciscoIsnsGigEInterfaceToDiscover' object is set to '0'. invalidGigEInterfaceIndex (7) - 'ifIndex' of the gigabit ethernet interface specified in the 'ciscoIsnsGigEInterfaceToDiscover' object is not valid. generalFailure (8)- General IP network discovery operation Failure.")
ciscoIsnsIpNetDiscoverCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 434, 2, 1))
ciscoIsnsIpNetDiscoveryMIBComp = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 434, 2, 1, 1)).setObjects(("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetDiscoveryInfoGroup"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetDiscoveryCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIsnsIpNetDiscoveryMIBComp = ciscoIsnsIpNetDiscoveryMIBComp.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryMIBComp.setDescription('The compliance statement for entities which implement the CISCO-ISNS-IP-NW-DISCOVERY-MIB.')
ciscoIsnsIpNetDiscoveryMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 434, 2, 2))
ciscoIsnsIpNetDiscoveryInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 434, 2, 2, 1)).setObjects(("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetAutomaticDiscovery"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetDiscoveryInterval"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetDiscoveryMechanism"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetRowStatus"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetInterfaceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIsnsIpNetDiscoveryInfoGroup = ciscoIsnsIpNetDiscoveryInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryInfoGroup.setDescription('A Collection of objects for the IP networks configured/discovered in the fabric and its associated gigabit ethernet interfaces details.')
ciscoIsnsIpNetDiscoveryCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 434, 2, 2, 2)).setObjects(("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetDiscoverySpinLock"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetToDiscover"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsGigEInterfaceToDiscover"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetDiscoveryCommand"), ("CISCO-ISNS-IP-NW-DISCOVERY-MIB", "ciscoIsnsIpNetDiscoveryCmdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIsnsIpNetDiscoveryCfgGroup = ciscoIsnsIpNetDiscoveryCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIsnsIpNetDiscoveryCfgGroup.setDescription('A Collection of objects to be configured, for doing the IP network discovery.')
mibBuilder.exportSymbols("CISCO-ISNS-IP-NW-DISCOVERY-MIB", ciscoIsnsIpNetDiscoveryMIBGroups=ciscoIsnsIpNetDiscoveryMIBGroups, ciscoIsnsIpNetToDiscover=ciscoIsnsIpNetToDiscover, ciscoIsnsIpNetInterfaceRowStatus=ciscoIsnsIpNetInterfaceRowStatus, ciscoIsnsIpNetAutomaticDiscovery=ciscoIsnsIpNetAutomaticDiscovery, PYSNMP_MODULE_ID=ciscoIsnsIpNetDiscoveryMIB, ciscoIsnsGigEPortDeviceName=ciscoIsnsGigEPortDeviceName, ciscoIsnsIpNetDiscoveryMIBConfig=ciscoIsnsIpNetDiscoveryMIBConfig, ciscoIsnsGigEPortIfIndex=ciscoIsnsGigEPortIfIndex, ciscoIsnsIpNetDiscoveryInfoGroup=ciscoIsnsIpNetDiscoveryInfoGroup, ciscoIsnsIpNetDiscoveryMIB=ciscoIsnsIpNetDiscoveryMIB, ciscoIsnsIpNetDiscoverCompliance=ciscoIsnsIpNetDiscoverCompliance, ciscoIsnsIpNetDiscoveryConform=ciscoIsnsIpNetDiscoveryConform, ciscoIsnsIpNetDiscoveryMechanism=ciscoIsnsIpNetDiscoveryMechanism, ciscoIsnsIpNetDiscoveryMIBObjs=ciscoIsnsIpNetDiscoveryMIBObjs, ciscoIsnsIpNetDiscoverySpinLock=ciscoIsnsIpNetDiscoverySpinLock, ciscoIsnsIpNetDiscoveryMIBComp=ciscoIsnsIpNetDiscoveryMIBComp, ciscoIsnsIpNetDiscoveryMIBInfo=ciscoIsnsIpNetDiscoveryMIBInfo, ciscoIsnsGigEInterfaceToDiscover=ciscoIsnsGigEInterfaceToDiscover, ciscoIsnsIpNetDiscoveryCmdStatus=ciscoIsnsIpNetDiscoveryCmdStatus, ciscoIsnsIpNetDiscoveryInterval=ciscoIsnsIpNetDiscoveryInterval, ciscoIsnsIpNetDiscoveryCfgGroup=ciscoIsnsIpNetDiscoveryCfgGroup, ciscoIsnsIpNetDiscoveryMIBNotifs=ciscoIsnsIpNetDiscoveryMIBNotifs, ciscoIsnsIpNetInterfaceEntry=ciscoIsnsIpNetInterfaceEntry, ciscoIsnsIpNetRowStatus=ciscoIsnsIpNetRowStatus, ciscoIsnsIpNetInterfaceTable=ciscoIsnsIpNetInterfaceTable, ciscoIsnsIpNetEntry=ciscoIsnsIpNetEntry, ciscoIsnsIpNetName=ciscoIsnsIpNetName, ciscoIsnsIpNetTable=ciscoIsnsIpNetTable, ciscoIsnsIpNetDiscoveryCommand=ciscoIsnsIpNetDiscoveryCommand)
