#
# PySNMP MIB module CISCO-RHINO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-RHINO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
workgroup, = mibBuilder.importSymbols("CISCO-SMI", "workgroup")
Unsigned32, = mibBuilder.importSymbols("CISCO-TC", "Unsigned32")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Bits, ObjectIdentity, NotificationType, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Gauge32, iso, MibIdentifier, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "ObjectIdentity", "NotificationType", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Gauge32", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32")
TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
ciscoLS1010ChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 5, 11))
ciscoLS1010ChassisMIB.setRevisions(('2001-03-29 00:00', '2001-02-15 00:00', '2000-07-20 00:00', '2000-04-11 00:00', '2000-02-07 00:00', '1999-11-30 00:00', '1999-10-04 00:00', '1999-06-29 00:00', '1999-06-17 00:00', '1999-03-12 00:00', '1998-12-02 00:00', '1998-10-26 00:00', '1998-07-13 00:00', '1997-11-20 00:00', '1997-07-22 00:00', '1997-02-04 00:00', '1996-10-02 00:00', '1995-10-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLS1010ChassisMIB.setRevisionsDescriptions(('-Added enum ACL Daughter card SubModuleType for Cat8540. -Added enum for TS Carrier Module. -Added enum for medium SingleModeLRFiber for OC3 and OC12 ATM pams.', '-Added object for module hardware minor version. -Added objects for module and submodule serial number in string format. -Deprecated integer serial number objects for module and submodule. -Added enumeration to submodule type for NRP2 for 6400. -Reduce to single Module Compliance for clarity.', 'Added enums XPIF GE, ATM, and POS SubModuleTypes for Cat8540c. Added enums cmpmCarrier ModuleType for Cat8540c.', 'Added enums in ChassisSysType & ChassisBkplType for Cat4908g', 'Added enums for OC48c LR, and Dual Slot modules.', 'Added enums for OC48c and ARM modules.', 'Added enums in ChassisSysType & ChassisBkplType for C2948.', 'Added enums in subModuleType for the IMA & ATM25M4P PAMs.', 'Added enumerations for Cat6k', 'Added enumerations for TGX8750.', 'Consolidate changes from C6400, C8500, FR-PAM, new modules.', 'Added new enum c8510. Also new tables for enet ports and LEDs.', 'Rhino ATM Switch Chassis MIB', 'Added ciscoAtmInterceptEndToEndOamFlow. Editorial changes.', 'Added clocking objects ', 'Added object ciscoLS1010SubModuleHwVersionMinor.', 'Added a new PsType for -48 VDC.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLS1010ChassisMIB.setLastUpdated('200103290000Z')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIB.setDescription('-Added enum sixPortDS3 for ciscoLS1010SubModuleType. -Added enum nodeSwitchProcessor2ndGeneration for ciscoLS1010ModuleType. -Added enum ac175W for psType. -Added Group object for Notification objects.')
ciscoLS1010ChassisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1))
ciscoLS1010ChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1))
ciscoLS1010ModuleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2))
ciscoLS1010SubModuleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3))
ciscoLS1010PortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4))
ciscoLS1010CpuSwitchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5))
clsEnetPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6))
clsPortLedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7))
class PsType(TextualConvention, Integer32):
    description = 'Power Supply type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("powerone", 0), ("astec", 1), ("minus48VDC", 2), ("empty", 3), ("ac1100W", 4), ("ac1200W", 5), ("dc1200W", 6), ("pem", 7), ("ac1360W", 8), ("dc1360W", 9), ("ac2000W", 10), ("dc2000W", 11), ("acpem", 12), ("ac175W", 13))

class OperStatus(TextualConvention, Integer32):
    description = 'Operational status of a chassis component. fanAlarm(4) is only applicable to the C5500 power supply. A fault(3) supercedes a fanAlarm(4). partialFault(5) & empty(6) are used by the Cisco6400 for the fan status to indicate partial fans failure & fan not present. A fault(3) value indicates total fans failure in the C6400.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("ok", 2), ("fault", 3), ("fanAlarm", 4), ("partialFault", 5), ("empty", 6))

class AdminStatus(TextualConvention, Integer32):
    description = 'Admin status of a chassis component.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enable", 1), ("disable", 2), ("reset", 3))

class Led(TextualConvention, Integer32):
    description = 'LED status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("off", 1), ("green", 2), ("red", 3), ("yellow", 4), ("blinkgreen", 5), ("blinkyellow", 6), ("blinkred", 7), ("unknown", 8))

class PcmciaType(TextualConvention, Integer32):
    description = 'PCMCIA card type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("empty", 2), ("flash", 3), ("disk", 4))

ciscoLS1010ChassisSysType = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("ls1010", 2), ("c8510", 3), ("cisco6400", 4), ("c8540", 5), ("tgx8750", 6), ("wsx6302", 7), ("c2948g", 8), ("c4908g", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisSysType.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisSysType.setDescription('The chassis system type.')
ciscoLS1010ChassisBkplType = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("atm", 2), ("c5500", 3), ("cisco6400", 4), ("c8510", 5), ("c8540", 6), ("tgx8750", 7), ("cat6000", 8), ("c2948g", 9), ("c4908g", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisBkplType.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisBkplType.setDescription('The chassis backplane type.')
ciscoLS1010ChassisPs0Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 3), PsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Type.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Type.setDescription('Type of power supply number 1.')
ciscoLS1010ChassisPs0AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 4), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0AdminStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0AdminStatus.setDescription('Enable or disable power supply 1.')
ciscoLS1010ChassisPs0Status = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Status.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Status.setDescription('Status of power supply number 1.')
ciscoLS1010ChassisPs0Led = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 6), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Led.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Led.setDescription('LED Status of power supply number 1.')
ciscoLS1010ChassisPs1Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 7), PsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Type.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Type.setDescription('Type of power supply number 2.')
ciscoLS1010ChassisPs1AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 8), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1AdminStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1AdminStatus.setDescription('Enable or disable power supply 2.')
ciscoLS1010ChassisPs1Status = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 9), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Status.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Status.setDescription('Status of power supply number 2.')
ciscoLS1010ChassisPs1Led = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 10), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Led.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Led.setDescription('LED Status of power supply number 2.')
ciscoLS1010ChassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 11), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisFanStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisFanStatus.setDescription('Status of the chassis fan.')
ciscoLS1010ChassisFanLed = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 12), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisFanLed.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisFanLed.setDescription('LED Status of fan.')
ciscoLS1010ChassisCardStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 13), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisCardStatusLed.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisCardStatusLed.setDescription('LED Status of CPU card.')
ciscoLS1010ChassisEnetLinkLed = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 14), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisEnetLinkLed.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisEnetLinkLed.setDescription('Ethernet link status LED of CPU card.')
ciscoLS1010Chassis12VoltStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("outOfTolerance", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010Chassis12VoltStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010Chassis12VoltStatus.setDescription('The chassis 12V status.')
ciscoLS1010ChassisTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("overTemperature", 2), ("minorWarning", 3), ("majorWarning", 4), ("criticalWarning", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisTempStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisTempStatus.setDescription('The chassis temperature status. The values of minorWarning(3), majorWarning(4) and criticalWarning(5) will be primarily used by C6400 to indicate the core temperature. C6400 will never report overTemperature(2) status. In C6400 there are two temperature sensors: core and inlet. C6400 use this object to represent the core temperature and the other object ciscoLS1010ChassisInletTempStatus to represent the inlet temperature.')
ciscoLS1010ChassisPcmciaSlot0Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 17), PcmciaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPcmciaSlot0Type.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPcmciaSlot0Type.setDescription('Type of PCMCIA slot 0 type.')
ciscoLS1010ChassisPcmciaSlot1Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 18), PcmciaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPcmciaSlot1Type.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisPcmciaSlot1Type.setDescription('Type of PCMCIA slot 1 type.')
ciscoLS1010ChassisNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisNumSlots.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisNumSlots.setDescription('The number of slots in the chassis for plug-in modules.')
ciscoLS1010ChassisLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisLastChange.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisLastChange.setDescription('The last time chassis physical content get changed.')
ciscoLS1010ChassisFailureAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nothing", 1), ("sendTrap", 2), ("shutdown", 3), ("sendTrapAndShutdown", 4))).clone('sendTrapAndShutdown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisFailureAction.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisFailureAction.setDescription('The action to take when there is any chassis failure, which includes either power supply, voltage, temperature and fan failure.')
ciscoLS1010ChassisChangeAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("sendTrap", 2))).clone('sendTrap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisChangeAction.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisChangeAction.setDescription('The action to take when there is any chassis change, which includes either power supply, fan and boards.')
ciscoLS1010ChassisClockingMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonRevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisClockingMode.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisClockingMode.setDescription('The clocking mode of the ls1010 system. By default, the mode is non-revertive, which means that the clock will stick to the current priority, even though higher priority clock is available.')
ciscols1010SystemClockSourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSelected", 1), ("selected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscols1010SystemClockSourceStatus.setStatus('current')
if mibBuilder.loadTexts: ciscols1010SystemClockSourceStatus.setDescription("The network clock source status of 'system' source: 'notSelected' indicates 'system' not selected as the network clock source. 'selected' indicates ASP freerunning(system) is selected as network clock source. ")
ciscols1010SystemClockSourcePriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscols1010SystemClockSourcePriority.setStatus('current')
if mibBuilder.loadTexts: ciscols1010SystemClockSourcePriority.setDescription("The highest priority at which 'system' is configured as a network clock source. ")
ciscoLS1010ChassisInletTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("overTemperature", 2), ("minorWarning", 3), ("majorWarning", 4), ("criticalWarning", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisInletTempStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisInletTempStatus.setDescription('C6400 has two temperature sensors: core and inlet. C6400 use this object to represent the inlet temperature and use the object ciscoLS1010ChassisTempStatus to represent the core temperature.')
ciscoLS1010ModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1), )
if mibBuilder.loadTexts: ciscoLS1010ModuleTable.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleTable.setDescription('A list of module entries. The number of entries is given by the value of ciscoLS1010ChassisNumSlots.')
ciscoLS1010ModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-RHINO-MIB", "ciscoLS1010ModuleIndex"))
if mibBuilder.loadTexts: ciscoLS1010ModuleEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleEntry.setDescription('Entry containing information about one module in a slot of the chassis.')
ciscoLS1010ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: ciscoLS1010ModuleIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleIndex.setDescription('A unique value for each module.')
ciscoLS1010ModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("carrier", 2), ("cpuSwitchAndFeature", 3), ("cpuSwitchAndFeaturePFQ", 4), ("superCarrier", 5), ("cpuRoute", 6), ("switch10GAndFC", 7), ("switch10GNoFC", 8), ("atmFabricIntegration", 9), ("dualSlot", 10), ("cmpmCarrier", 11), ("tsCarrier", 12), ("nodeSwitchProcessor2ndGeneration", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleType.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleType.setDescription('The type of module.')
ciscoLS1010ModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleSerialNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLS1010ModuleSerialNumber.setDescription('The serial number of the module. Deprecated in favor of object ciscoLS1010ModuleSerialNumberString. This object returns 0 for modules using an alphanumeric numbering scheme.')
ciscoLS1010ModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleHwVersion.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleHwVersion.setDescription('The hardware version of the module.')
ciscoLS1010ModuleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleSwVersion.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleSwVersion.setDescription('The software version number.')
ciscoLS1010ModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleDescr.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleDescr.setDescription('A descriptive string used by the agent to describe the module.')
ciscoLS1010ModuleNumSubModules = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleNumSubModules.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleNumSubModules.setDescription('The max number of sub-modules supported by this module.')
ciscoLS1010ModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 8), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ModuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleAdminStatus.setDescription("This object, when read, always returns a value of ok(1). Setting this object to one of the acceptable values gives the following results: reset: reset the module's control logic enable: enable the module disable: disable the module Setting this object to any other values results in an error.")
ciscoLS1010ModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 9), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleOperStatus.setDescription('Operational status of the module.')
ciscoLS1010ModuleHwVersionMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleHwVersionMinor.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleHwVersionMinor.setDescription('The minor hardware version of the module.')
ciscoLS1010ModuleSerialNumberString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleSerialNumberString.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ModuleSerialNumberString.setDescription('The serial number of the module.')
ciscoLS1010SubModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoLS1010SubModuleTable.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleTable.setDescription('A list of sub-module entries. The number of entries is given by the value of ciscoLS1010SlotNumSubModules.')
ciscoLS1010SubModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-RHINO-MIB", "ciscoLS1010ModuleIndex"), (0, "CISCO-RHINO-MIB", "ciscoLS1010SubModuleIndex"))
if mibBuilder.loadTexts: ciscoLS1010SubModuleEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleEntry.setDescription('Entry containing information about one sub-module in a sub-slot of the module.')
ciscoLS1010SubModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: ciscoLS1010SubModuleIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleIndex.setDescription('A unique value for each sub-module within the module. This value is determined by sub-slot number where the sub-module is inserted.')
ciscoLS1010SubModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("other", 1), ("oc3Utp5", 2), ("oc3SingleModeFiber", 3), ("oc3MultiModeFiber", 4), ("oc12SingleModeFiber", 5), ("oc12MultiModeFiber", 6), ("ds3", 7), ("e3", 8), ("cpuSwitch", 9), ("featureFpga", 10), ("featureAsic", 11), ("t1", 12), ("e1", 13), ("e1bnc", 14), ("oc3Mixed", 15), ("cbrt1", 16), ("cbr120e1", 17), ("cbr75e1", 18), ("quadDs3", 19), ("quadE3", 20), ("dualDs3", 21), ("dualE3", 22), ("oc12Mixed", 23), ("atm25", 24), ("featurePVC", 25), ("routerProcessorAlpha", 26), ("dualOC3SingleModeIRFiber", 27), ("dualOC3MultiModeIRFiber", 28), ("routerProcessorBeta", 29), ("fratm1CT3", 30), ("fratm4CE1", 31), ("oc3SingleModeLRFiber", 35), ("oc12SingleModeLRFiber", 36), ("sixPortDS3", 37), ("feUTP8p16k", 40), ("feUTP8p64k", 41), ("feMMF8p16k", 42), ("feMMF8p64k", 43), ("feUTP16p16k", 44), ("feUTP16p64k", 45), ("feMMF16p16k", 46), ("feMMF16p64k", 47), ("geF1p16k", 48), ("geF1p64k", 49), ("geF2p16k", 50), ("geF2p64k", 51), ("feBridge4p", 52), ("feUTP8p16kFullDup", 53), ("feUTP8p64kFullDup", 54), ("routeProc", 55), ("switch10GProc", 56), ("featureNetClock", 57), ("featureABR", 58), ("geF8p64k", 59), ("featureLite", 60), ("s16pOC3MM", 61), ("s16pOC3SM", 62), ("s4pOC12MM", 63), ("s4pOC12SM", 64), ("atmIma8pT1", 65), ("atmIma8pE1", 66), ("atm25m4p", 67), ("s1pOC48cSM", 68), ("s1pOC48cSMLR", 69), ("atmFIMBridge", 70), ("atmFIMoc12MM", 71), ("arm1p64k", 80), ("arm2p64k", 81), ("xpif1pGE16k", 82), ("xpif1pGE64k", 83), ("xpif1pGE256k", 84), ("xpifAtm1pOC12SMIR64k", 85), ("xpifAtm1pOC12SMIR256k", 86), ("xpifAtm1pOC12MM64k", 87), ("xpifAtm1pOC12MM256k", 88), ("xpifAtm1pOC3SMIR64k", 89), ("xpifAtm1pOC3SMIR256k", 90), ("xpifAtm1pOC3MM64k", 91), ("xpifAtm1pOC3MM256k", 92), ("xpifPos1pOC12SMIR64k", 93), ("xpifPos1pOC12SMIR256k", 94), ("xpifPos1pOC12SMLR64k", 95), ("xpifPos1pOC12SMLR256k", 96), ("xpifArm2p256k", 97), ("aclDaughter", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleType.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleType.setDescription('The type of sub-module.')
ciscoLS1010SubModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleSerialNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLS1010SubModuleSerialNumber.setDescription('The serial number of the sub-module. Deprecated in favor of object ciscoLS1010SubModuleSerialNumberString. This object returns 0 for submodules using an alphanumeric numbering scheme.')
ciscoLS1010SubModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleHwVersion.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleHwVersion.setDescription('The major hardware version of the sub-module. Together with ciscoLS1010SubModuleHwVersionMinor, this completely specifies the hardware version of the sub-module.')
ciscoLS1010SubModuleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleSwVersion.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleSwVersion.setDescription('The software version number.')
ciscoLS1010SubModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleDescr.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleDescr.setDescription('A descriptive string used by the agent to describe the module.')
ciscoLS1010SubModuleNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleNumPorts.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleNumPorts.setDescription('The maximum number of ports supported by this sub-module.')
ciscoLS1010SubModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010SubModuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleAdminStatus.setDescription('This object can be read/written as reset or ok.')
ciscoLS1010SubModuleHwVersionMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleHwVersionMinor.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleHwVersionMinor.setDescription('The minor hardware version of the sub-module. Together with ciscoLS1010SubModuleHwVersion, this completely specifies the hardware version of the sub-module.')
ciscoLS1010SubModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 10), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleOperStatus.setDescription('Operational status of the submodule.')
ciscoLS1010SubModuleSerialNumberString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleSerialNumberString.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010SubModuleSerialNumberString.setDescription('The serial number of the sub-module.')
ciscoLS1010PortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1), )
if mibBuilder.loadTexts: ciscoLS1010PortTable.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010PortTable.setDescription('A list of port entries. The number of entries is determined by the number of modules in the chassis, the number of sub-module in the module and the number of ports on each sub-module.')
ciscoLS1010PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-RHINO-MIB", "ciscoLS1010ModuleIndex"), (0, "CISCO-RHINO-MIB", "ciscoLS1010SubModuleIndex"), (0, "CISCO-RHINO-MIB", "ciscoLS1010PortIndex"))
if mibBuilder.loadTexts: ciscoLS1010PortEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010PortEntry.setDescription('Entry containing information for a particular port on a sub-module.')
ciscoLS1010PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: ciscoLS1010PortIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010PortIndex.setDescription('An index value that uniquely identifies this port within a sub-module. The value is determined by the location of the port on the sub-module. Valid entries are 1 to the value of subModuleNumPorts for this sub-module.')
ciscoLS1010PortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010PortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010PortIfIndex.setDescription('The ifIndex value assigned to this port.')
clsEnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1), )
if mibBuilder.loadTexts: clsEnetPortTable.setStatus('current')
if mibBuilder.loadTexts: clsEnetPortTable.setDescription('A list of ethernet port entries. This table is mainly to support ethernet port only.')
clsEnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: clsEnetPortEntry.setStatus('current')
if mibBuilder.loadTexts: clsEnetPortEntry.setDescription('Entry contains information of a particular ethernet port.')
clsEnetPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("auto", 2), ("half", 3), ("full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsEnetPortDuplex.setStatus('current')
if mibBuilder.loadTexts: clsEnetPortDuplex.setDescription('Indicates whether the port is operating in half-duplex, full-duplex, or auto mode. If the port could not agree with the far end on port duplex, the port will be in auto(2) mode. Unknown(1) indicates either the port does not support duplex mode, or the duplex mode is none of the defined.')
clsEnetPortAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("auto", 2), ("e10Mbps", 3), ("e100Mbps", 4), ("e1000Mbps", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsEnetPortAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: clsEnetPortAdminSpeed.setDescription('Indicates the desired speed of the port in bits per second. The current operational speed of the port is determined by ifSpeed. If the port could not agree with the far end on port speed, the port will be in auto(2) mode, which will force the port to transmit in speed whichever is lower. Unknown(1) indicates either the port does not support admin speed, or the admin speed is none of the defined.')
clsEnetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("e100BaseTX", 2), ("e100BaseFX", 3), ("e1000BaseLX", 4), ("e1000BaseSX", 5), ("empty", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsEnetPortType.setStatus('current')
if mibBuilder.loadTexts: clsEnetPortType.setDescription('The type of physical layer medium-dependent interface on the port. unknown(1) indicates that the port type is none of those defined. empty(6) indicates that the port is not present.')
clsEnetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("autoNegotiate", 2), ("forceUp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsEnetPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: clsEnetPortLinkStatus.setDescription('This object indicates how the link status of the port came up. autoNegotiate(2) -- the port will try to negotiate the link with the partner port. If successful, the link will come up, otherwise the link will remain down. forceUp(3) -- the port will force the link up irrespective of its partner port. This will bring up the link in full duplex only. Default is autoNegotiate(2).')
clsPortLedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1), )
if mibBuilder.loadTexts: clsPortLedTable.setStatus('current')
if mibBuilder.loadTexts: clsPortLedTable.setDescription('A list of LED entries associated with a port.')
clsPortLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-RHINO-MIB", "clsPortLedIndex"))
if mibBuilder.loadTexts: clsPortLedEntry.setStatus('current')
if mibBuilder.loadTexts: clsPortLedEntry.setDescription('Entry contains information of a particular LED associated with a particular port which is identified by ifIndex.')
clsPortLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: clsPortLedIndex.setStatus('current')
if mibBuilder.loadTexts: clsPortLedIndex.setDescription('An index that uniquely identifies this LED among all the LEDs associated with the port identified by ifIndex. This value is related to the physical location of the LED, and is in ascending order from top to bottom, left to right.')
clsPortLedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ledTx", 1), ("ledRx", 2), ("ledLink", 3), ("led100Mbps", 4), ("ledRxLoss", 5), ("ledRxFullOut", 6), ("ledRxSync", 7), ("ledFullDuplex", 8), ("ledOptDetect", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsPortLedType.setStatus('current')
if mibBuilder.loadTexts: clsPortLedType.setDescription('Indicates the type or label of the LED.')
clsPortLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsPortLedStatus.setStatus('current')
if mibBuilder.loadTexts: clsPortLedStatus.setDescription('Indicates the status of the LED. Unknown(1) indicates either the LED status is not supported or the status is none of the defined.')
ciscoAtmCpuAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmCpuAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmCpuAdminStatus.setDescription('Reset will reload the CPU board.')
ciscoAtmSwitchTotalBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchTotalBuffer.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchTotalBuffer.setDescription("The total cell buffer count in switch's shared memory.")
ciscoAtmSwitchFreeBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchFreeBuffer.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchFreeBuffer.setDescription("The free cell buffer count in switch's shared memory.")
ciscoAtmSwitchDiscardCells = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchDiscardCells.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchDiscardCells.setDescription('The total discarded cells of the switch.')
ciscoAtmSwitchInvalidCells = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCells.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCells.setDescription('The total invalid cells of the switch.')
ciscoAtmSwitchInvalidCellHeaderTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6), )
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderTable.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderTable.setDescription('A list of invalid cell header entries.')
ciscoAtmSwitchInvalidCellHeaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1), ).setIndexNames((0, "CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCellHeaderIndex"))
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderEntry.setDescription('a entry of invalid cell header.')
ciscoAtmSwitchInvalidCellHeaderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderIndex.setDescription('A sequence number that identifies a invalid cell header entry in the table.')
ciscoAtmSwitchInvalidCellHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeader.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeader.setDescription('The most recently received invalid cells header. octet 0 is port number (0-32), octet 1 bit 7-5 is PTI, octet 1 bit 4 is CLP, octet 1 bit 3-0 is GFC, octet 2 is VPI, octet 3 is high byte of VCI octet 4 is low byte of VCI.')
ciscoAtmCpuTerminateOamFlow = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmCpuTerminateOamFlow.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoAtmCpuTerminateOamFlow.setDescription('Terminate all the incoming OAM cells to the CPU port.')
ciscoAtmInterceptEndToEndOamFlow = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmInterceptEndToEndOamFlow.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmInterceptEndToEndOamFlow.setDescription("Indicates whether incoming end-to-end OAM flow cells are sent to the switch CPU. If the value is 'true', all incoming end-to-end OAM flow cells, including those on transit connections, are sent to the switch CPU. This value may be modified at any time. The modified value will apply to all existing connections. Note that if the value is 'false', the switch can not use the ATM PING application for end-to-end loopback on transit connections, since the end-to-end OAM cells on such connections will not be seen by the switch CPU.")
ciscoLS1010ChassisMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 2))
ciscoLS1010ChassisMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0))
ciscoLS1010ChassisFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0, 1)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010Chassis12VoltStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisTempStatus"))
if mibBuilder.loadTexts: ciscoLS1010ChassisFailureNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisFailureNotification.setDescription('Agent detects a change in the status of ps0, ps1, fan, 12V line, and/or chassis temperature. This notification will be generated when the status changes from no-fault to fault, and also when the status changes from fault to no-fault.')
ciscoLS1010ChassisChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0, 2))
if mibBuilder.loadTexts: ciscoLS1010ChassisChangeNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisChangeNotification.setDescription('Agent detects any hot-swap component change or changes in the chassis.')
ciscoLS1010ChassisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 3))
ciscoLS1010ChassisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1))
ciscoLS1010ChassisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2))
ciscoLS1010ChassisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 1)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBCompliance = ciscoLS1010ChassisMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco LS1010 Chassis MIB. This statement was obsoleted by ciscoLS1010ChassisMIBComplianceRev1.')
ciscoLS1010ChassisMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 2)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBRev1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev1 = ciscoLS1010ChassisMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco LS1010 Chassis MIB. This statement was obsoleted by ciscoLS1010ChassisMIBComplianceRev2.')
ciscoLS1010ChassisMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 3)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBRev1Group"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev2 = ciscoLS1010ChassisMIBComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco LS1010 Chassis MIB')
ciscoLS1010ChassisMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 4)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup1"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev3 = ciscoLS1010ChassisMIBComplianceRev3.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco LS1010 Chassis MIB.')
ciscoLS1010ChassisMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 5)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup1"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"), ("CISCO-RHINO-MIB", "clsEnetPortGroup1"), ("CISCO-RHINO-MIB", "clsPortLedGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev4 = ciscoLS1010ChassisMIBComplianceRev4.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cisco LS1010 Chassis MIB.')
ciscoLS1010ChassisMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 6)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup1"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"), ("CISCO-RHINO-MIB", "clsOperStatusGroup"), ("CISCO-RHINO-MIB", "clsInletTempGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev5 = ciscoLS1010ChassisMIBComplianceRev5.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBComplianceRev5.setDescription('The compliance statement for the Cisco 6400 product.')
ciscoLS1010ChassisMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 7)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup2"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev6 = ciscoLS1010ChassisMIBComplianceRev6.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBComplianceRev6.setDescription('The compliance statement for this MIB.')
ciscoLS1010ChassisMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 1)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisSysType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisBkplType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisCardStatusLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisEnetLinkLed"), ("CISCO-RHINO-MIB", "ciscoLS1010Chassis12VoltStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisTempStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisNumSlots"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisLastChange"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFailureAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisChangeAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisInletTempStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleNumSubModules"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleOperStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleNumPorts"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010PortIfIndex"), ("CISCO-RHINO-MIB", "ciscoAtmCpuAdminStatus"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchTotalBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchFreeBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchDiscardCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCellHeader"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBGroup = ciscoLS1010ChassisMIBGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBGroup.setDescription('A collection of objects providing rhino chassis information')
ciscoLS1010ChassisMIBObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 2)).setObjects(("CISCO-RHINO-MIB", "ciscoAtmCpuTerminateOamFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBObsoleteGroup = ciscoLS1010ChassisMIBObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBObsoleteGroup.setDescription('A collection of objects providing rhino chassis information which are obsolete.')
ciscoLS1010ChassisMIBRev1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 3)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersionMinor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBRev1Group = ciscoLS1010ChassisMIBRev1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBRev1Group.setDescription('A collection of objects useful for reporting the hardware version of sub-modules in the chassis.')
ciscoLS1010ChassisMIBClockingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 4)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisClockingMode"), ("CISCO-RHINO-MIB", "ciscols1010SystemClockSourceStatus"), ("CISCO-RHINO-MIB", "ciscols1010SystemClockSourcePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBClockingGroup = ciscoLS1010ChassisMIBClockingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBClockingGroup.setDescription('A collection of objects useful for managing clocking.')
ciscoLS1010ChassisMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 5)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisSysType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisBkplType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisCardStatusLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisEnetLinkLed"), ("CISCO-RHINO-MIB", "ciscoLS1010Chassis12VoltStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisTempStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisNumSlots"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisLastChange"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFailureAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisChangeAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleNumSubModules"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleNumPorts"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleOperStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersionMinor"), ("CISCO-RHINO-MIB", "ciscoLS1010PortIfIndex"), ("CISCO-RHINO-MIB", "ciscoAtmCpuAdminStatus"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchTotalBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchFreeBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchDiscardCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCellHeader"), ("CISCO-RHINO-MIB", "ciscoAtmInterceptEndToEndOamFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBGroup1 = ciscoLS1010ChassisMIBGroup1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBGroup1.setDescription('A collection of objects for managing the LS1010 chassis.')
clsEnetPortGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 6)).setObjects(("CISCO-RHINO-MIB", "clsEnetPortDuplex"), ("CISCO-RHINO-MIB", "clsEnetPortAdminSpeed"), ("CISCO-RHINO-MIB", "clsEnetPortType"), ("CISCO-RHINO-MIB", "clsEnetPortLinkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clsEnetPortGroup1 = clsEnetPortGroup1.setStatus('current')
if mibBuilder.loadTexts: clsEnetPortGroup1.setDescription('A collection of objects for managing ethernet ports.')
clsPortLedGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 7)).setObjects(("CISCO-RHINO-MIB", "clsPortLedType"), ("CISCO-RHINO-MIB", "clsPortLedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clsPortLedGroup1 = clsPortLedGroup1.setStatus('current')
if mibBuilder.loadTexts: clsPortLedGroup1.setDescription('A collection of objects for showing port LEDs.')
clsOperStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 8)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ModuleOperStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clsOperStatusGroup = clsOperStatusGroup.setStatus('current')
if mibBuilder.loadTexts: clsOperStatusGroup.setDescription('A collection of objects for displaying operational status of modules and sub-modules in the chassis.')
clsInletTempGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 9)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisInletTempStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clsInletTempGroup = clsInletTempGroup.setStatus('current')
if mibBuilder.loadTexts: clsInletTempGroup.setDescription('A collection of objects for reporting inlet temperature.')
ciscoLS1010ChassisMIBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 10)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisSysType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisBkplType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisCardStatusLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisEnetLinkLed"), ("CISCO-RHINO-MIB", "ciscoLS1010Chassis12VoltStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisTempStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisNumSlots"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisLastChange"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFailureAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisChangeAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleNumSubModules"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleNumPorts"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleOperStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersionMinor"), ("CISCO-RHINO-MIB", "ciscoLS1010PortIfIndex"), ("CISCO-RHINO-MIB", "ciscoAtmCpuAdminStatus"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchTotalBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchFreeBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchDiscardCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCellHeader"), ("CISCO-RHINO-MIB", "ciscoAtmInterceptEndToEndOamFlow"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleHwVersionMinor"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSerialNumberString"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSerialNumberString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBGroup2 = ciscoLS1010ChassisMIBGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBGroup2.setDescription('A collection of objects for managing the LS1010 chassis.')
ciscoLS1010ChassisMIBDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 11)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBDeprecatedGroup = ciscoLS1010ChassisMIBDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBDeprecatedGroup.setDescription('A collection of objects providing rhino chassis information which are obsolete.')
ciscoLS1010ChassisMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 12)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisFailureNotification"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBNotificationGroup = ciscoLS1010ChassisMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIBNotificationGroup.setDescription('A collection of notifications supported by LS1010 chassis.')
mibBuilder.exportSymbols("CISCO-RHINO-MIB", ciscoLS1010PortEntry=ciscoLS1010PortEntry, ciscoLS1010ChassisMIBGroup2=ciscoLS1010ChassisMIBGroup2, clsEnetPortTable=clsEnetPortTable, ciscoLS1010ChassisBkplType=ciscoLS1010ChassisBkplType, ciscoLS1010ChassisFanStatus=ciscoLS1010ChassisFanStatus, ciscoLS1010SubModuleEntry=ciscoLS1010SubModuleEntry, ciscoLS1010ChassisFanLed=ciscoLS1010ChassisFanLed, ciscoLS1010ChassisMIBComplianceRev2=ciscoLS1010ChassisMIBComplianceRev2, ciscoLS1010ModuleSerialNumberString=ciscoLS1010ModuleSerialNumberString, ciscoLS1010SubModuleSerialNumber=ciscoLS1010SubModuleSerialNumber, clsPortLedGroup1=clsPortLedGroup1, ciscoLS1010ChassisMIBClockingGroup=ciscoLS1010ChassisMIBClockingGroup, ciscoLS1010SubModuleTable=ciscoLS1010SubModuleTable, ciscoAtmSwitchInvalidCellHeaderEntry=ciscoAtmSwitchInvalidCellHeaderEntry, ciscoLS1010ModuleTable=ciscoLS1010ModuleTable, ciscoLS1010ChassisClockingMode=ciscoLS1010ChassisClockingMode, clsEnetPortDuplex=clsEnetPortDuplex, clsOperStatusGroup=clsOperStatusGroup, ciscoLS1010ChassisMIBGroups=ciscoLS1010ChassisMIBGroups, ciscoLS1010ChassisMIBGroup=ciscoLS1010ChassisMIBGroup, ciscoLS1010ChassisMIBGroup1=ciscoLS1010ChassisMIBGroup1, ciscoLS1010ChassisPs1Type=ciscoLS1010ChassisPs1Type, ciscoLS1010SubModuleDescr=ciscoLS1010SubModuleDescr, ciscoLS1010ChassisChangeAction=ciscoLS1010ChassisChangeAction, clsEnetPortType=clsEnetPortType, clsPortLedGroup=clsPortLedGroup, ciscoLS1010ModuleIndex=ciscoLS1010ModuleIndex, ciscoAtmSwitchInvalidCellHeaderTable=ciscoAtmSwitchInvalidCellHeaderTable, ciscoLS1010ModuleHwVersion=ciscoLS1010ModuleHwVersion, clsPortLedType=clsPortLedType, ciscoLS1010ChassisFailureNotification=ciscoLS1010ChassisFailureNotification, ciscoAtmSwitchDiscardCells=ciscoAtmSwitchDiscardCells, ciscoLS1010ChassisPcmciaSlot0Type=ciscoLS1010ChassisPcmciaSlot0Type, Led=Led, ciscoLS1010ChassisMIBNotificationPrefix=ciscoLS1010ChassisMIBNotificationPrefix, clsEnetPortAdminSpeed=clsEnetPortAdminSpeed, ciscoLS1010ChassisPs0Status=ciscoLS1010ChassisPs0Status, ciscoLS1010ModuleSwVersion=ciscoLS1010ModuleSwVersion, clsEnetPortEntry=clsEnetPortEntry, PcmciaType=PcmciaType, ciscoLS1010ChassisPs1Status=ciscoLS1010ChassisPs1Status, clsEnetPortGroup=clsEnetPortGroup, ciscoAtmSwitchTotalBuffer=ciscoAtmSwitchTotalBuffer, PsType=PsType, ciscoLS1010ModuleOperStatus=ciscoLS1010ModuleOperStatus, clsPortLedEntry=clsPortLedEntry, ciscoAtmSwitchInvalidCellHeader=ciscoAtmSwitchInvalidCellHeader, ciscoLS1010ChassisMIBObjects=ciscoLS1010ChassisMIBObjects, ciscols1010SystemClockSourcePriority=ciscols1010SystemClockSourcePriority, clsPortLedIndex=clsPortLedIndex, ciscoLS1010ChassisMIBComplianceRev5=ciscoLS1010ChassisMIBComplianceRev5, ciscoLS1010ChassisMIBRev1Group=ciscoLS1010ChassisMIBRev1Group, ciscoLS1010ChassisMIBNotifications=ciscoLS1010ChassisMIBNotifications, ciscoLS1010ModuleNumSubModules=ciscoLS1010ModuleNumSubModules, ciscoLS1010SubModuleGroup=ciscoLS1010SubModuleGroup, ciscoLS1010ChassisMIBConformance=ciscoLS1010ChassisMIBConformance, ciscoLS1010ModuleGroup=ciscoLS1010ModuleGroup, ciscols1010SystemClockSourceStatus=ciscols1010SystemClockSourceStatus, OperStatus=OperStatus, ciscoLS1010ChassisNumSlots=ciscoLS1010ChassisNumSlots, ciscoAtmSwitchInvalidCellHeaderIndex=ciscoAtmSwitchInvalidCellHeaderIndex, ciscoLS1010ChassisMIBComplianceRev4=ciscoLS1010ChassisMIBComplianceRev4, clsEnetPortGroup1=clsEnetPortGroup1, AdminStatus=AdminStatus, ciscoLS1010ChassisGroup=ciscoLS1010ChassisGroup, ciscoLS1010SubModuleSerialNumberString=ciscoLS1010SubModuleSerialNumberString, ciscoLS1010PortGroup=ciscoLS1010PortGroup, ciscoAtmCpuTerminateOamFlow=ciscoAtmCpuTerminateOamFlow, ciscoLS1010ChassisLastChange=ciscoLS1010ChassisLastChange, ciscoLS1010ChassisPs0Led=ciscoLS1010ChassisPs0Led, ciscoLS1010ChassisInletTempStatus=ciscoLS1010ChassisInletTempStatus, ciscoLS1010SubModuleSwVersion=ciscoLS1010SubModuleSwVersion, ciscoLS1010ChassisMIBNotificationGroup=ciscoLS1010ChassisMIBNotificationGroup, ciscoLS1010ChassisEnetLinkLed=ciscoLS1010ChassisEnetLinkLed, ciscoLS1010ChassisMIB=ciscoLS1010ChassisMIB, clsEnetPortLinkStatus=clsEnetPortLinkStatus, ciscoLS1010ChassisMIBCompliances=ciscoLS1010ChassisMIBCompliances, ciscoLS1010ChassisPs0AdminStatus=ciscoLS1010ChassisPs0AdminStatus, ciscoAtmInterceptEndToEndOamFlow=ciscoAtmInterceptEndToEndOamFlow, ciscoLS1010ChassisMIBComplianceRev6=ciscoLS1010ChassisMIBComplianceRev6, ciscoAtmCpuAdminStatus=ciscoAtmCpuAdminStatus, ciscoLS1010Chassis12VoltStatus=ciscoLS1010Chassis12VoltStatus, ciscoLS1010ModuleSerialNumber=ciscoLS1010ModuleSerialNumber, clsInletTempGroup=clsInletTempGroup, ciscoLS1010ModuleType=ciscoLS1010ModuleType, ciscoLS1010ModuleHwVersionMinor=ciscoLS1010ModuleHwVersionMinor, ciscoLS1010SubModuleOperStatus=ciscoLS1010SubModuleOperStatus, ciscoAtmSwitchFreeBuffer=ciscoAtmSwitchFreeBuffer, ciscoLS1010ChassisPcmciaSlot1Type=ciscoLS1010ChassisPcmciaSlot1Type, ciscoLS1010SubModuleType=ciscoLS1010SubModuleType, ciscoLS1010ChassisPs0Type=ciscoLS1010ChassisPs0Type, ciscoLS1010ModuleAdminStatus=ciscoLS1010ModuleAdminStatus, ciscoLS1010ChassisTempStatus=ciscoLS1010ChassisTempStatus, ciscoLS1010PortIndex=ciscoLS1010PortIndex, PYSNMP_MODULE_ID=ciscoLS1010ChassisMIB, ciscoLS1010ChassisCardStatusLed=ciscoLS1010ChassisCardStatusLed, ciscoLS1010ChassisSysType=ciscoLS1010ChassisSysType, ciscoLS1010ModuleDescr=ciscoLS1010ModuleDescr, ciscoLS1010PortIfIndex=ciscoLS1010PortIfIndex, ciscoLS1010ChassisMIBComplianceRev3=ciscoLS1010ChassisMIBComplianceRev3, clsPortLedTable=clsPortLedTable, ciscoLS1010ChassisPs1AdminStatus=ciscoLS1010ChassisPs1AdminStatus, ciscoLS1010SubModuleHwVersionMinor=ciscoLS1010SubModuleHwVersionMinor, ciscoLS1010ModuleEntry=ciscoLS1010ModuleEntry, ciscoLS1010ChassisFailureAction=ciscoLS1010ChassisFailureAction, ciscoLS1010ChassisMIBObsoleteGroup=ciscoLS1010ChassisMIBObsoleteGroup, ciscoLS1010CpuSwitchGroup=ciscoLS1010CpuSwitchGroup, ciscoLS1010PortTable=ciscoLS1010PortTable, ciscoLS1010ChassisMIBDeprecatedGroup=ciscoLS1010ChassisMIBDeprecatedGroup, ciscoLS1010SubModuleHwVersion=ciscoLS1010SubModuleHwVersion, ciscoLS1010ChassisMIBCompliance=ciscoLS1010ChassisMIBCompliance, clsPortLedStatus=clsPortLedStatus, ciscoLS1010SubModuleIndex=ciscoLS1010SubModuleIndex, ciscoLS1010SubModuleNumPorts=ciscoLS1010SubModuleNumPorts, ciscoLS1010ChassisPs1Led=ciscoLS1010ChassisPs1Led, ciscoLS1010ChassisMIBComplianceRev1=ciscoLS1010ChassisMIBComplianceRev1, ciscoAtmSwitchInvalidCells=ciscoAtmSwitchInvalidCells, ciscoLS1010ChassisChangeNotification=ciscoLS1010ChassisChangeNotification, ciscoLS1010SubModuleAdminStatus=ciscoLS1010SubModuleAdminStatus)
