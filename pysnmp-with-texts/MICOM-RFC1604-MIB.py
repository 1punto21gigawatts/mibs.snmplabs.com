#
# PySNMP MIB module MICOM-RFC1604-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-RFC1604-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, ObjectIdentity, TimeTicks, Counter64, NotificationType, IpAddress, Integer32, MibIdentifier, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "ObjectIdentity", "TimeTicks", "Counter64", "NotificationType", "IpAddress", "Integer32", "MibIdentifier", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_rfc1604 = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 8)).setLabel("micom-rfc1604")
rfc1604_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1)).setLabel("rfc1604-configuration")
rfc1604_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2)).setLabel("rfc1604-control")
mcmFrLportTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1), )
if mibBuilder.loadTexts: mcmFrLportTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLportTable.setDescription('NAME = ; DESC = The Frame Relay Logical Port Information \\ table (Operational).; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmFrLportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrLportIfIndex"))
if mibBuilder.loadTexts: mcmFrLportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLportEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay Logical \\ Port Information table (Operational).; HELP = ; CAPABILITIES = ;')
mcmFrLportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLportIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local DCE interface. \\ (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group, but specific to \\ the FR Logical Port info table.) (Operational); HELP = ; CAPABILITIES = ;')
mcmFrLportNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("e164", 2), ("x121", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportNumPlan.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLportNumPlan.setDescription("NAME = ; DESC = The value of this object identifies \\ the network address numbering plan \\ for this UNI logical port. \\ (Operational); HELP = The network address is the object ifPhysAddress. \\ The value 'none' implies that there is \\ no ifPhysAddress (the SNMP proxy-agent \\ will return an octet string of zero \\ length for ifPhysAddress). The value \\ 'other' means that an address has been \\ assigned to this interface, but the \\ numbering plan is not enumerated here. ; CAPABILITIES = ;")
mcmFrLportType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLportType.setDescription('NAME = ; DESC = The value of this object identifies \\ the type of network interface for this \\ logical port. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrLportAddrDLCILen = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("twoOctets10Bits", 1), ("threeOctets10Bits", 2), ("threeOctets16Bits", 3), ("fourOctets17Bits", 4), ("fourOctets23Bits", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportAddrDLCILen.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLportAddrDLCILen.setDescription('NAME = ; DESC = The value of this object identifies \\ the Q.922 Address field length and \\ DLCI length for this UNI logical \\ port. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrLportVCSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ccittQ933A", 5), ("ansiT1617D-1994", 6))).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportVCSigProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrLportVCSigProtocol.setDescription('NAME = ; DESC = The value of this object identifies \\ the Local In-Channel Signaling Protocol \\ that is used for this frame relay UNI \\ logical port. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrMgtVCSigTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2), )
if mibBuilder.loadTexts: mcmFrMgtVCSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigTable.setDescription('NAME = ; DESC = The Frame Relay Management VC \\ Signaling Parameters and Errors table. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmFrMgtVCSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrMgtVCSigIfIndex"))
if mibBuilder.loadTexts: mcmFrMgtVCSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay Management \\ VC Signaling Parameters and Errors table. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrMgtVCSigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local DCE interface. \\ (Operational); HELP = (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group but specific to \\ the FR Mgmt VC Sig table.); CAPABILITIES = ;')
mcmFrMgtVCSigProced = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("u2nnet", 1), ("bidirect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigProced.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigProced.setDescription('NAME = ; DESC = The value of this object identifies \\ the Local In-Channel Signaling Procedure \\ that is used for this UNI logical \\ port. (Operational); HELP = The UNI logical port can \\ be performing only user-to-network \\ network-side procedures.; CAPABILITIES = ;')
mcmFrMgtVCSigNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetN392.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigNetN392.setDescription('NAME = ; DESC = The value of this object identifies \\ the Network-side N392 error threshold \\ value for this UNI logical port (nN2 for LMI). \\ (Operational); HELP = If the logical port is not performing \\ network-side procedures, then this value is \\ equal to noSuchName. This object \\ applies to Q.933 Annex A, T1.617 \\ Annex D, and LMI.; CAPABILITIES = ;')
mcmFrMgtVCSigNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetN393.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigNetN393.setDescription('NAME = ; DESC = The value of this object identifies \\ the Network-side N393 monitored events \\ count value for this UNI logical port \\ (nN3 for LMI). (Operational); HELP = If the logical port is not performing \\ network-side procedures, then this value is equal \\ to noSuchName. This object \\ applies to Q.933 Annex A, T1.617 \\ Annex D, and LMI.; CAPABILITIES = ;')
mcmFrMgtVCSigNetT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetT392.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigNetT392.setDescription('NAME = ; DESC = The value of this object identifies \\ the Network-side T392 polling verification \\ timer value for this UNI logical port \\ (nT2 for LMI). (Operational); HELP = This value is in seconds. \\ If the logical port is not performing\\ network-side procedures, \\ then this value is equal to noSuchName. \\ This object applies to Q.933 Annex A, \\ T1.617 Annex D, and LMI.; CAPABILITIES = ;')
mcmFrMgtVCSigNetLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetLinkRelErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigNetLinkRelErrors.setDescription('NAME = ; DESC = The number of network-side local in-channel \\ signaling link reliability errors. \\ (Operational); HELP = Marks non-receipt of Status/Status Enquiry \\ messages or invalid sequence numbers \\ in a Link Integrity Verification Information \\ Element for this UNI logical port. \\ If the logical port is not performing \\ network-side procedures, then this value is equal \\ to noSuchName. Note: no Configuration counterpart \\ for this object.; CAPABILITIES = ;')
mcmFrMgtVCSigNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetProtErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigNetProtErrors.setDescription('NAME = ; DESC = The number of network-side local in-channel \\ signaling protocol errors. (Operational); HELP = Types include protocol discriminator, message type, call reference, \\ and mandatory information element errors) \\ for this UNI logical port. If \\ the logical port is not performing \\ network-side procedures, then this value is equal \\ to noSuchName. \\ Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
mcmFrMgtVCSigNetChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetChanInactive.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrMgtVCSigNetChanInactive.setDescription('NAME = ; DESC = The number of times the network-side channel \\ was declared inactive.; (Operational) \\ ; HELP = If the logical port is not performing \\ network-side procedures, then this value \\ is equal to noSuchName. Note: no Configuration \\ counterpart for this object.; CAPABILITIES = ;')
mcmFrPVCEndptTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3), )
if mibBuilder.loadTexts: mcmFrPVCEndptTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptTable.setDescription('NAME = ; DESC = The Frame Relay PVC End-Point table. \\ (Operational); HELP = This table contains the \\ traffic parameters and statistics for \\ a PVC end-point.; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmFrPVCEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrPVCEndptIfIndex"), (0, "MICOM-RFC1604-MIB", "mcmFrPVCEndptDLCIIndex"))
if mibBuilder.loadTexts: mcmFrPVCEndptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay PVC End-point \\ table. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local DCE interface. \\ (Operational); HELP = (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group but specific to \\ the PVC end-point table.); CAPABILITIES = ;')
mcmFrPVCEndptDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptDLCIIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptDLCIIndex.setDescription('NAME = ; DESC = The value of this object is equal to the \\ DLCI value for this PVC end-point. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptInMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInMaxFrameSize.setDescription('NAME = ; DESC = The largest frame relay information field \\ in octets for this PVC end-point data sent \\ into the network. (Operational); HELP = The value must be \\ less than or equal to the corresponding \\ ifMtu (mcmFrPhyPortMtuSize) for this \\ Frame Relay UNI logical port.; CAPABILITIES = ;')
mcmFrPVCEndptInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInBc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInBc.setDescription('NAME = ; DESC = The committed burst size (Bc) in bits \\ for this PVC end-point data sent into \\ frame relay network.(Operational); HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInBe.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInBe.setDescription('NAME = ; DESC = The committed excess size (Be) in bits \\ for this PVC end-point data sent into \\ frame relay network. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptInCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInCIR.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInCIR.setDescription('NAME = ; DESC = The committed information rate (CIR) in bits/sec \\ for this PVC end-point data sent into \\ frame relay network.; HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptOutMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptOutMaxFrameSize.setDescription('NAME = ; DESC = The largest frame relay information field \\ in octets for this PVC end-point data received \\ from the network. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutBc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptOutBc.setDescription('NAME = ; DESC = (Operational); HELP = The committed burst size (Bc) in bits \\ for this PVC end-point data received from \\ frame relay network.; CAPABILITIES = ;')
mcmFrPVCEndptOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutBe.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptOutBe.setDescription('NAME = ; DESC = The committed excess size (Be) in bits \\ for this PVC end-point data received from \\ frame relay network. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptOutCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutCIR.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptOutCIR.setDescription('NAME = ; DESC =The committed information rate (CIR) in bits/sec \\ for this PVC end-point data received from \\ frame relay network.(Operational); HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInFrames.setDescription('NAME = ; DESC = The number of frames received by the \\ network (ingress) for this PVC end-point. \\ (Operational); HELP = This includes any frames discarded \\ by the network due to submitting more \\ than Bc + Be data or due to any network \\ congestion recovery procedures. \\ Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
mcmFrPVCEndptOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptOutFrames.setDescription('NAME = ; DESC = The number of frames sent by the network \\ (egress) regardless of whether they \\ are Bc or Be frames for this PVC end-point. (Operational) \\ ; HELP = Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
mcmFrPVCEndptInDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInDEFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInDEFrames.setDescription('NAME = ; DESC = The number of frames received by the \\ network (ingress) with the DE bit set \\ to (1) for this PVC end-point. (Operational); HELP = Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
mcmFrPVCEndptInExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInExcessFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInExcessFrames.setDescription('NAME = ; DESC = The number of frames received by the \\ network (ingress) for this PVC end-point \\ which were treated as excess traffic. \\ (Operational); HELP = Frames which are sent to the network \\ with DE set to zero are treated as \\ excess when more than Bc bits are submitted \\ to the network during the Committed \\ Information Rate Measurement Interval \\ (Tc). Excess traffic may or may not \\ be discarded at the ingress if more \\ than Bc + Be bits are submitted to \\ the network during Tc. Traffic discarded \\ at the ingress is not recorded in \\ mcmFrPVCEndptInExcessFrames. \\ Frames which are sent to the network \\ with DE set to one are also treated \\ as excess traffic. \\ Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
mcmFrPVCEndptOutExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutExcessFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptOutExcessFrames.setDescription('NAME = ; DESC = The number of frames sent by the network \\ (egress) for this PVC end-point which \\ were treated as excess traffic. (The \\ DE bit may be set to one.) (Operational); HELP = Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
mcmFrPVCEndptInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInDiscards.setDescription('NAME = ; DESC = The number of frames received by the \\ the network (ingress) that were discarded \\ due to traffic enforcement for this \\ PVC end-point. (Operational); HELP = Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
mcmFrPVCEndptInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptInOctets.setDescription('NAME = ; DESC = The number of octets received by the \\ network (ingress) for this PVC end-point. \\ (Operational); HELP = This counter should only count octets \\ from the beginning of the frame relay \\ header field to the end of user data. \\ If the network supporting Frame Relay \\ cannot count octets, then this count \\ should be an approximation. \\ Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
mcmFrPVCEndptOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrPVCEndptOutOctets.setDescription('NAME = ; DESC = The number of octets sent by the network \\ (egress) for this PVC end-point. (Operational); ; HELP = This counter should only count octets from \\ the beginning of the frame relay header \\ field to the end of user data. If \\ the network supporting Frame Relay \\ can not count octets, then this count \\ should be an approximation. Note: no Configuration counterpart for this object.; CAPABILITIES = ;')
nvmFrLportTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4), )
if mibBuilder.loadTexts: nvmFrLportTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLportTable.setDescription('NAME = ; DESC = The Frame Relay Logical Port Information \\ table (Configuration).; HELP = NET_CFG, VPN_CFG; CAPABILITIES = ;')
nvmFrLportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "nvmFrLportIfIndex"))
if mibBuilder.loadTexts: nvmFrLportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLportEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay Logical \\ Port Information table (Configuration).; HELP = ; CAPABILITIES = ;')
nvmFrLportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLportIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLportIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local DCE interface. \\ (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group but specific to \\ the FR Logical Port info table..) (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrLportNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("e164", 2), ("x121", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLportNumPlan.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLportNumPlan.setDescription("NAME = ; DESC = The value of this object identifies \\ the network address numbering plan \\ for this UNI logical port. \\ (Configuration); HELP = The network address is the object ifPhysAddress. \\ The value 'none' implies that there is \\ no ifPhysAddress (the SNMP proxy-agent \\ will return an octet string of zero \\ length for ifPhysAddress). The value \\ 'other' means that an address has been \\ assigned to this interface, but the \\ numbering plan is not enumerated here. \\ (For Release 1.1, only none(4) will be supported. \\ This object has temporarily been assigned read-only \\ access. Read-write access will be assigned when \\ other enumeration values are supported.) ; CAPABILITIES = ;")
nvmFrLportType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLportType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLportType.setDescription('NAME = ; DESC = The value of this object identifies \\ the type of network interface for this \\ logical port. (Always uni(1) for Release 1.1). \\ (Configuration); HELP = This object has temporarily been assigned read-only \\ access. Read-write access will be assigned when \\ other enumeration values are supported. ; CAPABILITIES = ;')
nvmFrLportAddrDLCILen = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("twoOctets10Bits", 1), ("threeOctets10Bits", 2), ("threeOctets16Bits", 3), ("fourOctets17Bits", 4), ("fourOctets23Bits", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLportAddrDLCILen.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLportAddrDLCILen.setDescription('NAME = ; DESC = The value of this object identifies \\ the Q.922 Address field length and \\ DLCI length for this UNI logical port.\\ (Always twoOctets10Bits(1) for Release 1.1). \\ (Configuration); HELP = This object has temporarily been assigned read-only \\ access. Read-write access will be assigned when \\ other enumeration values are supported.); CAPABILITIES = ;')
nvmFrLportVCSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ccittQ933A", 5), ("ansiT1617D-1994", 6))).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLportVCSigProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrLportVCSigProtocol.setDescription('NAME = ; DESC = The value of this object identifies \\ the Local In-Channel Signaling Protocol \\ that is used for this frame relay UNI \\ logical port. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrMgtVCSigTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5), )
if mibBuilder.loadTexts: nvmFrMgtVCSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMgtVCSigTable.setDescription('NAME = ; DESC = The Frame Relay Management VC \\ Signaling Parameters and Errors table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmFrMgtVCSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "nvmFrMgtVCSigIfIndex"))
if mibBuilder.loadTexts: nvmFrMgtVCSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMgtVCSigEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay Management \\ VC Signaling Parameters and Errors table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrMgtVCSigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrMgtVCSigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMgtVCSigIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local DCE interface. \\ (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group but specific to \\ the FR Mgmt VC Sig table.) (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrMgtVCSigProced = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("u2nnet", 1), ("bidirect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrMgtVCSigProced.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMgtVCSigProced.setDescription('NAME = ; DESC = The value of this object identifies \\ the Local In-Channel Signaling Procedure \\ that is used for this UNI logical \\ port. (Configuration); HELP = The UNI logical port can \\ be performing only user-to-network \\ network-side procedures. \\ Always u2nnet(1) for Release 1.1. \\ This object has temporarily been assigned read-only \\ access. Read-write access will be assigned when \\ other enumeration values are supported. ; CAPABILITIES = ;')
nvmFrMgtVCSigNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMgtVCSigNetN392.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMgtVCSigNetN392.setDescription('NAME = ; DESC = The value of this object identifies \\ the Network-side N392 error threshold \\ value for this UNI logical port (nN2 for LMI). \\ (Configuration); HELP = If the logical port is not performing \\ network-side procedures, then this value is \\ equal to noSuchName. This object \\ applies to Q.933 Annex A, T1.617 \\ Annex D, and LMI.; CAPABILITIES = ;')
nvmFrMgtVCSigNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrMgtVCSigNetN393.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMgtVCSigNetN393.setDescription('NAME = ; DESC = The value of this object identifies \\ the Network-side N393 monitored events \\ count value for this UNI logical port \\ (nN3 for LMI). (Configuration); HELP = If the logical port is not performing \\ network-side procedures, then this value is equal \\ to noSuchName. This object applies to Q.933 \\ Annex A, T1.617 Annex D, and LMI. \\ (Always set to value of N392 for Release 1.1. \\ This object has temporarily been assigned read-only \\ access. Read-write access will be assigned when \\ other values are supported.) ; CAPABILITIES = ;')
nvmFrMgtVCSigNetT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMgtVCSigNetT392.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrMgtVCSigNetT392.setDescription('NAME = ; DESC = The value of this object identifies \\ the Network-side T392 polling verification \\ timer value for this UNI logical port \\ (nT2 for LMI). (Configuration); HELP = This value is in seconds. \\ If the logical port is not performing\\ network-side procedures, \\ then this value is equal to noSuchName. \\ This object applies to Q.933 Annex A, \\ T1.617 Annex D, and LMI; CAPABILITIES = ;')
nvmFrPVCEndptTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6), )
if mibBuilder.loadTexts: nvmFrPVCEndptTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptTable.setDescription('NAME = ; DESC = The Frame Relay PVC End-Point table. \\ This table is used to model a PVC \\ end-point. (Configuration); HELP = This table contains the \\ traffic parameters and statistics for \\ a PVC end-point.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmFrPVCEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "nvmFrPVCEndptIfIndex"), (0, "MICOM-RFC1604-MIB", "nvmFrPVCEndptDLCIIndex"))
if mibBuilder.loadTexts: nvmFrPVCEndptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay PVC End-point \\ table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrPVCEndptIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCEndptIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local DCE interface. \\ (Configuration); HELP = (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group but specific to \\ the PVC end-point table.); CAPABILITIES = ;')
nvmFrPVCEndptDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCEndptDLCIIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptDLCIIndex.setDescription('NAME = ; DESC = The value of this object is equal to the \\ DLCI value for this PVC end-point. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrPVCEndptInMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptInMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptInMaxFrameSize.setDescription('NAME = ; DESC = The largest frame relay information field \\ in octets for this PVC end-point data sent \\ into the network. (Configuration); HELP = The value must be \\ less than or equal to the corresponding \\ ifMtu (nvmFrPhyPortMtuSize) for this \\ Frame Relay UNI logical port.; CAPABILITIES = ;')
nvmFrPVCEndptInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCEndptInBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptInBc.setDescription('NAME = ; DESC = The committed burst size (Bc) in bits \\ for this PVC end-point data sent into \\ frame relay network. (Configuration); HELP = This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future \\ releases.; CAPABILITIES = ;')
nvmFrPVCEndptInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptInBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptInBe.setDescription('NAME = ; DESC = The committed excess size (Be) in bits \\ for this PVC end-point data sent into \\ frame relay network. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrPVCEndptInCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptInCIR.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptInCIR.setDescription('NAME = ; DESC = The committed information rate (CIR) in bits/sec \\ for this PVC end-point data sent into \\ frame relay network.(Configuration); HELP = ; CAPABILITIES = ;')
nvmFrPVCEndptOutMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptOutMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptOutMaxFrameSize.setDescription('NAME = ; DESC = The largest frame relay information field \\ in octets for this PVC end-point data received \\ from the network. (Configuration); HELP = The value must be \\ less than or equal to the corresponding \\ ifMtu (nvmFrPhyPortMtuSize) for this \\ Frame Relay UNI logical port.; CAPABILITIES = ;')
nvmFrPVCEndptOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCEndptOutBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptOutBc.setDescription('NAME = ; DESC = The committed burst size (Bc) in bits \\ for this PVC end-point data received from \\ frame relay network. (Configuration); HELP = This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future \\ releases.; CAPABILITIES = ;')
nvmFrPVCEndptOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptOutBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptOutBe.setDescription('NAME = ; DESC = The committed excess size (Be) in bits \\ for this PVC end-point data received from \\ frame relay network. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrPVCEndptOutCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptOutCIR.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrPVCEndptOutCIR.setDescription('NAME = ; DESC = The committed information rate (CIR) in bits/sec \\ for this PVC end-point data received from \\ frame relay network. (Configuration); HELP = ; CAPABILITIES = ;')
mcmFrMgtVCSigCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 1), )
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrTable.setDescription('NAME = ; DESC = The Frame Relay Management VC Signaling \\ Parameters counter reset table.; HELP = ; CAPABILITIES = NET_OPER, VPN_OPER;')
mcmFrMgtVCSigCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 1, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrMgtVCSigCntrIfIndex"))
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay Management VC \\ Signaling Parameters counter reset table.; HELP = ; CAPABILITIES = ;')
mcmFrMgtVCSigCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrIfIndex.setDescription('NAME = ; DESC = The ifIndex of the FR Management VC Signaling \\ Parameters table. This index specifies \\ the particular row of counter objects to \\ be reset.; HELP = ; CAPABILITIES = ;')
mcmFrMgtVCSigCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrAction.setDescription('NAME = ; DESC = Setting this object to reset(1) will \\ zero the values of a specific row of \\ counters in the FR Management VC \\ Signaling Parameters table.; HELP = When set to reset(1), a row containing \\ the following counter objects are reset: \\ mcmFrMgtVCSigNetLinkRelErrors \\ mcmFrMgtVCSigNetProtErrors \\ mcmFrMgtVCSigNetChanInactive; CAPABILITIES = ;')
mcmFrPVCEndptCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2), )
if mibBuilder.loadTexts: mcmFrPVCEndptCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCEndptCntrTable.setDescription('NAME = ; DESC = The Frame Relay PVC End-Point Group \\ counter reset table.; HELP = ; CAPABILITIES = NET_OPER, VPN_OPER;')
mcmFrPVCEndptCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrPVCEndptCntrIfIndex"), (0, "MICOM-RFC1604-MIB", "mcmFrPVCEndptCntrDLCIIndex"))
if mibBuilder.loadTexts: mcmFrPVCEndptCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCEndptCntrEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay PVC End-Point \\ Group counter reset table.; HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptCntrIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCEndptCntrIfIndex.setDescription('NAME = ; DESC = The ifIndex of the FR PVC End-Point \\ table. This index (in conjunction with \\ the DLCI index) specifies the particular \\ row of counter objects to be reset.; HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptCntrDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptCntrDLCIIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCEndptCntrDLCIIndex.setDescription('NAME = ; DESC = The DLCI Index of the FR PVC End-Point \\ table. This index (in conjunction with \\ the ifIndex) specifies the particular \\ row of counter objects to be reset.; HELP = ; CAPABILITIES = ;')
mcmFrPVCEndptCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrPVCEndptCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrPVCEndptCntrAction.setDescription('NAME = ; DESC = Setting this object to reset(1) will \\ zero the values of a specific row of \\ counters in the FR PVC End-Point table; HELP = When set to reset(1), a row containing \\ the following counter objects are reset: \\ mcmFrPVCEndptInFrames \\ mcmFrPVCEndptOutFrames \\ mcmFrPVCEndptInDEFrames \\ mcmFrPVCEndptInExcessFrames \\ mcmFrPVCEndptOutExcessFrames \\ mcmFrPVCEndptInDiscards \\ mcmFrPVCEndptInOctets \\ mcmFrPVCEndptOutOctets; CAPABILITIES = ;')
mibBuilder.exportSymbols("MICOM-RFC1604-MIB", mcmFrMgtVCSigIfIndex=mcmFrMgtVCSigIfIndex, micom_rfc1604=micom_rfc1604, mcmFrPVCEndptInOctets=mcmFrPVCEndptInOctets, nvmFrLportType=nvmFrLportType, mcmFrPVCEndptInMaxFrameSize=mcmFrPVCEndptInMaxFrameSize, nvmFrMgtVCSigIfIndex=nvmFrMgtVCSigIfIndex, nvmFrPVCEndptEntry=nvmFrPVCEndptEntry, mcmFrMgtVCSigNetN392=mcmFrMgtVCSigNetN392, nvmFrMgtVCSigNetN393=nvmFrMgtVCSigNetN393, mcmFrLportEntry=mcmFrLportEntry, mcmFrMgtVCSigCntrIfIndex=mcmFrMgtVCSigCntrIfIndex, nvmFrLportIfIndex=nvmFrLportIfIndex, nvmFrPVCEndptInCIR=nvmFrPVCEndptInCIR, mcmFrPVCEndptCntrTable=mcmFrPVCEndptCntrTable, mcmFrMgtVCSigNetN393=mcmFrMgtVCSigNetN393, nvmFrMgtVCSigTable=nvmFrMgtVCSigTable, mcmFrPVCEndptCntrEntry=mcmFrPVCEndptCntrEntry, mcmFrLportNumPlan=mcmFrLportNumPlan, nvmFrLportVCSigProtocol=nvmFrLportVCSigProtocol, nvmFrMgtVCSigProced=nvmFrMgtVCSigProced, nvmFrPVCEndptOutBe=nvmFrPVCEndptOutBe, mcmFrMgtVCSigCntrEntry=mcmFrMgtVCSigCntrEntry, mcmFrPVCEndptInExcessFrames=mcmFrPVCEndptInExcessFrames, nvmFrPVCEndptTable=nvmFrPVCEndptTable, nvmFrPVCEndptOutCIR=nvmFrPVCEndptOutCIR, rfc1604_control=rfc1604_control, mcmFrPVCEndptOutExcessFrames=mcmFrPVCEndptOutExcessFrames, nvmFrPVCEndptOutMaxFrameSize=nvmFrPVCEndptOutMaxFrameSize, mcmFrPVCEndptDLCIIndex=mcmFrPVCEndptDLCIIndex, mcmFrPVCEndptInBc=mcmFrPVCEndptInBc, mcmFrPVCEndptInCIR=mcmFrPVCEndptInCIR, mcmFrLportVCSigProtocol=mcmFrLportVCSigProtocol, nvmFrPVCEndptInBe=nvmFrPVCEndptInBe, mcmFrLportTable=mcmFrLportTable, mcmFrPVCEndptInDEFrames=mcmFrPVCEndptInDEFrames, mcmFrPVCEndptCntrAction=mcmFrPVCEndptCntrAction, nvmFrPVCEndptInMaxFrameSize=nvmFrPVCEndptInMaxFrameSize, nvmFrMgtVCSigNetT392=nvmFrMgtVCSigNetT392, mcmFrMgtVCSigCntrTable=mcmFrMgtVCSigCntrTable, mcmFrPVCEndptOutFrames=mcmFrPVCEndptOutFrames, nvmFrPVCEndptOutBc=nvmFrPVCEndptOutBc, mcmFrMgtVCSigCntrAction=mcmFrMgtVCSigCntrAction, mcmFrPVCEndptOutBe=mcmFrPVCEndptOutBe, mcmFrPVCEndptCntrIfIndex=mcmFrPVCEndptCntrIfIndex, mcmFrMgtVCSigEntry=mcmFrMgtVCSigEntry, nvmFrLportAddrDLCILen=nvmFrLportAddrDLCILen, mcmFrMgtVCSigNetProtErrors=mcmFrMgtVCSigNetProtErrors, mcmFrPVCEndptEntry=mcmFrPVCEndptEntry, mcmFrPVCEndptOutMaxFrameSize=mcmFrPVCEndptOutMaxFrameSize, nvmFrLportNumPlan=nvmFrLportNumPlan, nvmFrLportTable=nvmFrLportTable, mcmFrPVCEndptOutBc=mcmFrPVCEndptOutBc, mcmFrPVCEndptIfIndex=mcmFrPVCEndptIfIndex, nvmFrMgtVCSigNetN392=nvmFrMgtVCSigNetN392, mcmFrPVCEndptInDiscards=mcmFrPVCEndptInDiscards, mcmFrMgtVCSigProced=mcmFrMgtVCSigProced, mcmFrMgtVCSigNetChanInactive=mcmFrMgtVCSigNetChanInactive, rfc1604_configuration=rfc1604_configuration, mcmFrPVCEndptInBe=mcmFrPVCEndptInBe, mcmFrPVCEndptOutOctets=mcmFrPVCEndptOutOctets, mcmFrPVCEndptOutCIR=mcmFrPVCEndptOutCIR, nvmFrPVCEndptDLCIIndex=nvmFrPVCEndptDLCIIndex, nvmFrPVCEndptInBc=nvmFrPVCEndptInBc, mcmFrMgtVCSigNetT392=mcmFrMgtVCSigNetT392, mcmFrPVCEndptTable=mcmFrPVCEndptTable, mcmFrPVCEndptCntrDLCIIndex=mcmFrPVCEndptCntrDLCIIndex, mcmFrLportIfIndex=mcmFrLportIfIndex, mcmFrLportAddrDLCILen=mcmFrLportAddrDLCILen, mcmFrLportType=mcmFrLportType, nvmFrLportEntry=nvmFrLportEntry, nvmFrPVCEndptIfIndex=nvmFrPVCEndptIfIndex, nvmFrMgtVCSigEntry=nvmFrMgtVCSigEntry, mcmFrMgtVCSigNetLinkRelErrors=mcmFrMgtVCSigNetLinkRelErrors, mcmFrPVCEndptInFrames=mcmFrPVCEndptInFrames, mcmFrMgtVCSigTable=mcmFrMgtVCSigTable)
