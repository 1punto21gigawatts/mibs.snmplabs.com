#
# PySNMP MIB module CISCO-SSLVPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SSLVPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, Gauge32, ModuleIdentity, MibIdentifier, Integer32, Counter64, ObjectIdentity, TimeTicks, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "Gauge32", "ModuleIdentity", "MibIdentifier", "Integer32", "Counter64", "ObjectIdentity", "TimeTicks", "iso", "Counter32")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
ciscoSslvpnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 829))
ciscoSslvpnMIB.setRevisions(('2015-11-17 00:00', '2015-10-14 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSslvpnMIB.setRevisionsDescriptions(('Incorporated MIB review comments.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSslvpnMIB.setLastUpdated('201511170000Z')
if mibBuilder.loadTexts: ciscoSslvpnMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSslvpnMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-vpn@cisco.com')
if mibBuilder.loadTexts: ciscoSslvpnMIB.setDescription('This MIB module defines management objects for configuration and monitoring of the Cisco secure gateway that implements SSLVPN. Glossary: AnyConnect - Cisco AnyConnect a unified agent that delivers multiple security services to help enable and protect the enterprise. SSL - Secure Sockets Layer URL - Uniform Resource Locator VPN - Virtual Private Network')
ciscoSslvpnMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 829, 0))
ciscoSslvpnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 829, 1))
ciscoSslvpnMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 829, 2))
csslvpnGlobalStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1))
csslvpnSession = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2))
csslvpnNotificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 3))
csslvpnMaxSessionAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnMaxSessionAllowed.setStatus('current')
if mibBuilder.loadTexts: csslvpnMaxSessionAllowed.setDescription('This object indicates the maximum number of active SSLVPN sessions that are supported by the device.')
csslvpnActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 2), Unsigned32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnActiveSessions.setStatus('current')
if mibBuilder.loadTexts: csslvpnActiveSessions.setDescription('This object indicates the total number of active SSLVPN sessions.')
csslvpnPeakSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 3), Unsigned32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnPeakSessions.setStatus('current')
if mibBuilder.loadTexts: csslvpnPeakSessions.setDescription('This object indicates the total number of sessions during peak time.')
csslvpnInControlPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnInControlPackets.setStatus('current')
if mibBuilder.loadTexts: csslvpnInControlPackets.setDescription('This object indicates the total number of control packets received by the Secure Gateway.')
csslvpnInDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnInDataPackets.setStatus('current')
if mibBuilder.loadTexts: csslvpnInDataPackets.setDescription('This object indicates the total number of data packets received by the Secure Gateway.')
csslvpnOutControlPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnOutControlPackets.setStatus('current')
if mibBuilder.loadTexts: csslvpnOutControlPackets.setDescription('This object indicates the total number of control packets sent by the Secure Gateway.')
csslvpnOutDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnOutDataPackets.setStatus('current')
if mibBuilder.loadTexts: csslvpnOutDataPackets.setDescription('This object indicates the total number of data packets sent by the Secure Gateway.')
csslvpnAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnAuthFailures.setStatus('current')
if mibBuilder.loadTexts: csslvpnAuthFailures.setDescription('This object indicates the total number of authentication failures.')
csslvpnConnectFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnConnectFailures.setStatus('current')
if mibBuilder.loadTexts: csslvpnConnectFailures.setDescription('This object indicates the total number of connect failures.')
csslvpnReconnectFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnReconnectFailures.setStatus('current')
if mibBuilder.loadTexts: csslvpnReconnectFailures.setDescription('This object indicates the total number of reconnect failures.')
csslvpnDpdTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnDpdTimeouts.setStatus('current')
if mibBuilder.loadTexts: csslvpnDpdTimeouts.setDescription('This object indicates the total number of Dead Peer Detection timeouts.')
csslvpnAuthRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 12), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnAuthRequests.setStatus('current')
if mibBuilder.loadTexts: csslvpnAuthRequests.setDescription('This object indicates the total number of authentication requests.')
csslvpnAuthResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 13), Counter64()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnAuthResponses.setStatus('current')
if mibBuilder.loadTexts: csslvpnAuthResponses.setDescription('This object indicates the total number of authentication responses.')
csslvpnInDpdRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 14), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnInDpdRequests.setStatus('current')
if mibBuilder.loadTexts: csslvpnInDpdRequests.setDescription('This object indicates the total number of Dead Peer Detection requests received by Secure Gateway.')
csslvpnOutDpdRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 15), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnOutDpdRequests.setStatus('current')
if mibBuilder.loadTexts: csslvpnOutDpdRequests.setDescription('This object indicates the total number of Dead Peer Detection requests sent by Secure Gateway.')
csslvpnInDpdResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 16), Counter64()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnInDpdResponses.setStatus('current')
if mibBuilder.loadTexts: csslvpnInDpdResponses.setDescription('This object indicates the total number of Dead Peer Detection responses received by Secure Gateway.')
csslvpnOutDpdResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 1, 17), Counter64()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnOutDpdResponses.setStatus('current')
if mibBuilder.loadTexts: csslvpnOutDpdResponses.setDescription('This object indicates the total number of Dead Peer Detection responses sent by Secure Gateway.')
csslvpnSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1), )
if mibBuilder.loadTexts: csslvpnSessionTable.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionTable.setDescription('A list of SSLVPN sessions which has been successfully created by the secure gateway.')
csslvpnSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SSLVPN-MIB", "csslvpnSessionID"))
if mibBuilder.loadTexts: csslvpnSessionEntry.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionEntry.setDescription('An entry providing the management information of a SSLVPN session. An entry will be created when the SSLVPN session has been successfully provisioned by the secure gateway. An entry will be removed when the SSLVPN session has been removed by the secure gateway.')
csslvpnSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: csslvpnSessionID.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionID.setDescription('This object indicates the index of a SSLVPN session. The value of csslvpnSessionID is assigned uniquely during session creation.')
csslvpnSessionUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionUser.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionUser.setDescription('This object indicates the username with which session is authenticated.')
csslvpnSessionProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionProfile.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionProfile.setDescription('This object indicates the SSL profile to which session is connected. The SSL profile defines authentication and accounting lists. Profile selection will be based on policy and URL values. Profile may also optionally associate with default authorization policy')
csslvpnSessionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionPolicy.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionPolicy.setDescription('This object indicates the SSL policy to which session is connected. SSL policy defines the cipher suites to be supported and the trust point to be used during SSL negotiation. SSL policy is a container of all the parameters used in the SSL negotiation. The policy selection would be done by matching the session parameters against the parameters configured under the policy')
csslvpnSessionClientIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionClientIpAddrType.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionClientIpAddrType.setDescription('This object indicates the type of public IP Address of the client that initiated the session.')
csslvpnSessionClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionClientIpAddr.setDescription('This object indicates the public IP Address of the client that initiated the session. The type of this address is determined by the value of csslvpnSessionClientIpAddrType object.')
csslvpnSessionTunnelIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionTunnelIpAddrType.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionTunnelIpAddrType.setDescription('This object indicates the type of IP address assigned to AnyConnect client during tunnel bring up.')
csslvpnSessionTunnelIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionTunnelIpAddr.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionTunnelIpAddr.setDescription('This object indicates the IP address assigned to AnyConnect client during tunnel bring up. The type of this address is determined by the value of csslvpnSessionTunnelIpAddrType object.')
csslvpnSessionTunnelNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 9), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionTunnelNetmask.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionTunnelNetmask.setDescription('This object indicates the netmask assigned to the client during the session bring up. This object is always interpreted with the value of csslvpnSessionTunnelIpAddrType object.')
csslvpnSessionNumConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionNumConnections.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionNumConnections.setDescription('This object indicates the total number of connections associated with a particular session.')
csslvpnSessionRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionRxPackets.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionRxPackets.setDescription('This object indicates the total number of packets received during the session.')
csslvpnSessionTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionTxPackets.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionTxPackets.setDescription('This object indicates the total number of packets transmitted during the session.')
csslvpnSessionRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 13), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionRxBytes.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionRxBytes.setDescription('This object indicates the total number of bytes received during the session.')
csslvpnSessionTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionTxBytes.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionTxBytes.setDescription('This object indicates the total number of bytes transmitted during the session.')
csslvpnSessionLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionLastUsed.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionLastUsed.setDescription('This object indicates the time, when the session was last used.')
csslvpnSessionCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 2, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csslvpnSessionCreated.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionCreated.setDescription('This object indicates the time, when the session was created.')
csslvpnNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 829, 1, 3, 1), Bits().clone(namedValues=NamedValues(("sessionLimit", 0), ("tunnelUp", 1), ("tunnelDown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csslvpnNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: csslvpnNotificationEnable.setDescription('This object specifies whether a specified notification is enabled or not. If a bit corresponding to a notification is set to 1, then the specified notification can be generated. sessionLimit -- the csslvpnSessionLimitNotif notification. tunnelUp -- the csslvpnTunnelUpNotif notification. tunnelDown -- the csslvpnTunnelDownNotif notification.')
csslvpnSessionLimitNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 829, 0, 1)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnMaxSessionAllowed"))
if mibBuilder.loadTexts: csslvpnSessionLimitNotif.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionLimitNotif.setDescription('This notification would be sent when the attempt of creating a new active sessions may exceed the maximum number of sessions supported by the device.')
csslvpnTunnelUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 829, 0, 2)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnSessionUser"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelIpAddrType"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelIpAddr"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelNetmask"))
if mibBuilder.loadTexts: csslvpnTunnelUpNotif.setStatus('current')
if mibBuilder.loadTexts: csslvpnTunnelUpNotif.setDescription('This notification would be sent when SSLVPN tunnel gets created.')
csslvpnTunnelDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 829, 0, 3)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnSessionUser"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelIpAddrType"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelIpAddr"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelNetmask"))
if mibBuilder.loadTexts: csslvpnTunnelDownNotif.setStatus('current')
if mibBuilder.loadTexts: csslvpnTunnelDownNotif.setDescription('This notification would be sent when SSLVPN tunnel tears down.')
ciscoSslvpnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 829, 2, 1))
ciscoSslvpnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 829, 2, 2))
ciscoSslvpnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 829, 2, 1, 1)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnGlobalSessionGroup"), ("CISCO-SSLVPN-MIB", "csslvpnStatisticsGroup"), ("CISCO-SSLVPN-MIB", "csslvpnSessionGroup"), ("CISCO-SSLVPN-MIB", "csslvpnNotificationGroup"), ("CISCO-SSLVPN-MIB", "csslvpnNotificationControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSslvpnMIBCompliance = ciscoSslvpnMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSslvpnMIBCompliance.setDescription('The compliance statement for entities which implement CISCO-SSLVPN-MIB.')
csslvpnGlobalSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 829, 2, 2, 1)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnMaxSessionAllowed"), ("CISCO-SSLVPN-MIB", "csslvpnActiveSessions"), ("CISCO-SSLVPN-MIB", "csslvpnPeakSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csslvpnGlobalSessionGroup = csslvpnGlobalSessionGroup.setStatus('current')
if mibBuilder.loadTexts: csslvpnGlobalSessionGroup.setDescription('A collection of objects providing management information for global SSLVPN session statistics.')
csslvpnStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 829, 2, 2, 2)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnInControlPackets"), ("CISCO-SSLVPN-MIB", "csslvpnInDataPackets"), ("CISCO-SSLVPN-MIB", "csslvpnOutControlPackets"), ("CISCO-SSLVPN-MIB", "csslvpnOutDataPackets"), ("CISCO-SSLVPN-MIB", "csslvpnAuthFailures"), ("CISCO-SSLVPN-MIB", "csslvpnConnectFailures"), ("CISCO-SSLVPN-MIB", "csslvpnReconnectFailures"), ("CISCO-SSLVPN-MIB", "csslvpnDpdTimeouts"), ("CISCO-SSLVPN-MIB", "csslvpnAuthRequests"), ("CISCO-SSLVPN-MIB", "csslvpnAuthResponses"), ("CISCO-SSLVPN-MIB", "csslvpnInDpdRequests"), ("CISCO-SSLVPN-MIB", "csslvpnOutDpdRequests"), ("CISCO-SSLVPN-MIB", "csslvpnInDpdResponses"), ("CISCO-SSLVPN-MIB", "csslvpnOutDpdResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csslvpnStatisticsGroup = csslvpnStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: csslvpnStatisticsGroup.setDescription('A collection of objects providing management information for global SSLVPN statistics.')
csslvpnSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 829, 2, 2, 3)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnSessionUser"), ("CISCO-SSLVPN-MIB", "csslvpnSessionProfile"), ("CISCO-SSLVPN-MIB", "csslvpnSessionPolicy"), ("CISCO-SSLVPN-MIB", "csslvpnSessionClientIpAddrType"), ("CISCO-SSLVPN-MIB", "csslvpnSessionClientIpAddr"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelIpAddrType"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelIpAddr"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTunnelNetmask"), ("CISCO-SSLVPN-MIB", "csslvpnSessionNumConnections"), ("CISCO-SSLVPN-MIB", "csslvpnSessionRxPackets"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTxPackets"), ("CISCO-SSLVPN-MIB", "csslvpnSessionRxBytes"), ("CISCO-SSLVPN-MIB", "csslvpnSessionTxBytes"), ("CISCO-SSLVPN-MIB", "csslvpnSessionLastUsed"), ("CISCO-SSLVPN-MIB", "csslvpnSessionCreated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csslvpnSessionGroup = csslvpnSessionGroup.setStatus('current')
if mibBuilder.loadTexts: csslvpnSessionGroup.setDescription('A collection of objects providing management information for SSLVPN sessions.')
csslvpnNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 829, 2, 2, 4)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnSessionLimitNotif"), ("CISCO-SSLVPN-MIB", "csslvpnTunnelUpNotif"), ("CISCO-SSLVPN-MIB", "csslvpnTunnelDownNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csslvpnNotificationGroup = csslvpnNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: csslvpnNotificationGroup.setDescription('A collection of SSLVPN notifications.')
csslvpnNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 829, 2, 2, 5)).setObjects(("CISCO-SSLVPN-MIB", "csslvpnNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csslvpnNotificationControlGroup = csslvpnNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: csslvpnNotificationControlGroup.setDescription('A collection of objects providing control on the generation of SSLVPN notifications.')
mibBuilder.exportSymbols("CISCO-SSLVPN-MIB", csslvpnSessionTable=csslvpnSessionTable, csslvpnOutDataPackets=csslvpnOutDataPackets, csslvpnTunnelDownNotif=csslvpnTunnelDownNotif, csslvpnConnectFailures=csslvpnConnectFailures, csslvpnMaxSessionAllowed=csslvpnMaxSessionAllowed, csslvpnSessionGroup=csslvpnSessionGroup, csslvpnNotificationGroup=csslvpnNotificationGroup, csslvpnNotificationEnable=csslvpnNotificationEnable, ciscoSslvpnMIBNotifs=ciscoSslvpnMIBNotifs, csslvpnSessionID=csslvpnSessionID, csslvpnSessionEntry=csslvpnSessionEntry, csslvpnAuthFailures=csslvpnAuthFailures, csslvpnSessionRxBytes=csslvpnSessionRxBytes, ciscoSslvpnMIB=ciscoSslvpnMIB, csslvpnSessionNumConnections=csslvpnSessionNumConnections, csslvpnSessionCreated=csslvpnSessionCreated, csslvpnSessionTunnelIpAddr=csslvpnSessionTunnelIpAddr, csslvpnSessionTunnelNetmask=csslvpnSessionTunnelNetmask, csslvpnGlobalSessionGroup=csslvpnGlobalSessionGroup, csslvpnInControlPackets=csslvpnInControlPackets, ciscoSslvpnMIBCompliances=ciscoSslvpnMIBCompliances, csslvpnInDpdRequests=csslvpnInDpdRequests, csslvpnSessionTunnelIpAddrType=csslvpnSessionTunnelIpAddrType, ciscoSslvpnMIBObjects=ciscoSslvpnMIBObjects, csslvpnSessionProfile=csslvpnSessionProfile, csslvpnInDpdResponses=csslvpnInDpdResponses, csslvpnOutDpdResponses=csslvpnOutDpdResponses, csslvpnInDataPackets=csslvpnInDataPackets, csslvpnSession=csslvpnSession, csslvpnOutControlPackets=csslvpnOutControlPackets, ciscoSslvpnMIBGroups=ciscoSslvpnMIBGroups, ciscoSslvpnMIBCompliance=ciscoSslvpnMIBCompliance, csslvpnSessionClientIpAddr=csslvpnSessionClientIpAddr, csslvpnDpdTimeouts=csslvpnDpdTimeouts, csslvpnSessionUser=csslvpnSessionUser, csslvpnSessionPolicy=csslvpnSessionPolicy, csslvpnAuthResponses=csslvpnAuthResponses, PYSNMP_MODULE_ID=ciscoSslvpnMIB, csslvpnOutDpdRequests=csslvpnOutDpdRequests, csslvpnPeakSessions=csslvpnPeakSessions, csslvpnActiveSessions=csslvpnActiveSessions, csslvpnSessionRxPackets=csslvpnSessionRxPackets, csslvpnNotificationControl=csslvpnNotificationControl, ciscoSslvpnMIBConform=ciscoSslvpnMIBConform, csslvpnTunnelUpNotif=csslvpnTunnelUpNotif, csslvpnSessionClientIpAddrType=csslvpnSessionClientIpAddrType, csslvpnSessionTxPackets=csslvpnSessionTxPackets, csslvpnReconnectFailures=csslvpnReconnectFailures, csslvpnStatisticsGroup=csslvpnStatisticsGroup, csslvpnAuthRequests=csslvpnAuthRequests, csslvpnSessionLastUsed=csslvpnSessionLastUsed, csslvpnSessionLimitNotif=csslvpnSessionLimitNotif, csslvpnSessionTxBytes=csslvpnSessionTxBytes, csslvpnNotificationControlGroup=csslvpnNotificationControlGroup, csslvpnGlobalStatistics=csslvpnGlobalStatistics)
