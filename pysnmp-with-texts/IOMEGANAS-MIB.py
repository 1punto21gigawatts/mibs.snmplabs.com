#
# PySNMP MIB module IOMEGANAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IOMEGANAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, ModuleIdentity, Bits, iso, Counter64, Gauge32, MibIdentifier, enterprises, TimeTicks, Unsigned32, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Bits", "iso", "Counter64", "Gauge32", "MibIdentifier", "enterprises", "TimeTicks", "Unsigned32", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
lenovoemc = ModuleIdentity((1, 3, 6, 1, 4, 1, 11369))
lenovoemc.setRevisions(('2007-03-01 10:11',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lenovoemc.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: lenovoemc.setLastUpdated('200703011011Z')
if mibBuilder.loadTexts: lenovoemc.setOrganization('LenovoEMC')
if mibBuilder.loadTexts: lenovoemc.setContactInfo('lenovo_customerfeedback@mailca.custhelp.com')
if mibBuilder.loadTexts: lenovoemc.setDescription('MIB for Iomega NAS')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
iomegaNAS = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10))
iomegaNASInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 1))
systemPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 2))
iomegaNASFunctionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 3))
iomegaNASStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 4))
iomegaNASDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 5))
iomegaNASSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 6))
iomegaNASEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 7))
iomegaNASNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 8))
deviceDescr = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('Iomega NAS BOX')).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDescr.setStatus('current')
if mibBuilder.loadTexts: deviceDescr.setDescription('Description of this device.')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('Iomega NAS host name.')
netConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 1, 3))
ioTable = MibTable((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1), )
if mibBuilder.loadTexts: ioTable.setStatus('current')
if mibBuilder.loadTexts: ioTable.setDescription('A table of disk I/O performance.')
ioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1), ).setIndexNames((0, "IOMEGANAS-MIB", "ioIndex"))
if mibBuilder.loadTexts: ioEntry.setStatus('current')
if mibBuilder.loadTexts: ioEntry.setDescription('An entry of one disk I/O performance.')
ioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ioIndex.setStatus('current')
if mibBuilder.loadTexts: ioIndex.setDescription('ioIndex')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('current')
if mibBuilder.loadTexts: diskName.setDescription('Disk names such as sda and so on')
ioMgrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioMgrs.setStatus('current')
if mibBuilder.loadTexts: ioMgrs.setDescription('Read merges per second.')
ioMgws = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioMgws.setStatus('current')
if mibBuilder.loadTexts: ioMgws.setDescription('Write merges per second.')
ioReqrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioReqrs.setStatus('current')
if mibBuilder.loadTexts: ioReqrs.setDescription('Read io requests per second.')
ioReqws = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioReqws.setStatus('current')
if mibBuilder.loadTexts: ioReqws.setDescription('Write io requests per second.')
ioKbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioKbrs.setStatus('current')
if mibBuilder.loadTexts: ioKbrs.setDescription('Kilobytes read per second.')
ioKbws = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioKbws.setStatus('current')
if mibBuilder.loadTexts: ioKbws.setDescription('Kilobytes written per second.')
ioAvgQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAvgQueue.setStatus('current')
if mibBuilder.loadTexts: ioAvgQueue.setDescription('Average queue length.')
ioAvgWait = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAvgWait.setStatus('current')
if mibBuilder.loadTexts: ioAvgWait.setDescription('Average waiting time (queue + service)')
ioAvgSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAvgSvc.setStatus('current')
if mibBuilder.loadTexts: ioAvgSvc.setDescription('Average service time at disk.')
ioAvgUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioAvgUtil.setStatus('current')
if mibBuilder.loadTexts: ioAvgUtil.setDescription('Average disk utilization.')
ioCpuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioCpuTime.setStatus('current')
if mibBuilder.loadTexts: ioCpuTime.setDescription('Percentage of CPU time during which I/O requests were issued to the device.')
bkupTable = MibTable((1, 3, 6, 1, 4, 1, 11369, 10, 3, 1), )
if mibBuilder.loadTexts: bkupTable.setStatus('current')
if mibBuilder.loadTexts: bkupTable.setDescription('A table of backup status.')
bkupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11369, 10, 3, 1, 1), ).setIndexNames((0, "IOMEGANAS-MIB", "bkupIndex"))
if mibBuilder.loadTexts: bkupEntry.setStatus('current')
if mibBuilder.loadTexts: bkupEntry.setDescription('An entry of backup status.')
bkupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bkupIndex.setStatus('current')
if mibBuilder.loadTexts: bkupIndex.setDescription('Record backup status')
bkupClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bkupClient.setStatus('current')
if mibBuilder.loadTexts: bkupClient.setDescription('Client Name')
bkupltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bkupltStatus.setStatus('current')
if mibBuilder.loadTexts: bkupltStatus.setDescription('Last backup status')
bkupTotalSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bkupTotalSpace.setStatus('current')
if mibBuilder.loadTexts: bkupTotalSpace.setDescription('Total space')
remoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 3, 2))
conTable = MibTable((1, 3, 6, 1, 4, 1, 11369, 10, 3, 3), )
if mibBuilder.loadTexts: conTable.setStatus('current')
if mibBuilder.loadTexts: conTable.setDescription('Table for connected client count')
conEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11369, 10, 3, 3, 1), ).setIndexNames((0, "IOMEGANAS-MIB", "conIndex"))
if mibBuilder.loadTexts: conEntry.setStatus('current')
if mibBuilder.loadTexts: conEntry.setDescription('Entry for connected client count')
conIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: conIndex.setStatus('current')
if mibBuilder.loadTexts: conIndex.setDescription('Index for entry')
conCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: conCount.setStatus('current')
if mibBuilder.loadTexts: conCount.setDescription('Connected client count for a given protocol')
conProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: conProtocol.setStatus('current')
if mibBuilder.loadTexts: conProtocol.setDescription('Protocol used by this kind of clients')
mediaService = MibIdentifier((1, 3, 6, 1, 4, 1, 11369, 10, 3, 4))
raidStatus = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidStatus.setStatus('current')
if mibBuilder.loadTexts: raidStatus.setDescription('Description of raid status. There are five different status: NORMAL REBUILDING DEGRADED REBUILDFS FAULTED')
raidLevel = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidLevel.setStatus('current')
if mibBuilder.loadTexts: raidLevel.setDescription('Raid level(5/10)')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 11369, 10, 4, 3), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
if mibBuilder.loadTexts: diskTable.setDescription('The table of disks that build the RAID.')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11369, 10, 4, 3, 1), ).setIndexNames((0, "IOMEGANAS-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
if mibBuilder.loadTexts: diskEntry.setDescription('An entry of one disk.')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: diskIndex.setStatus('current')
if mibBuilder.loadTexts: diskIndex.setDescription('Index of disk entry')
diskID = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 4, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskID.setStatus('current')
if mibBuilder.loadTexts: diskID.setDescription('ID of disk in array')
diskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 4, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSize.setStatus('current')
if mibBuilder.loadTexts: diskSize.setDescription('Capacity of disk')
diskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 4, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatus.setStatus('current')
if mibBuilder.loadTexts: diskStatus.setDescription('Status of Disk. There are four status: NORMAL FOREIGN FAULTED MISSING')
usbTable = MibTable((1, 3, 6, 1, 4, 1, 11369, 10, 5, 1), )
if mibBuilder.loadTexts: usbTable.setStatus('current')
if mibBuilder.loadTexts: usbTable.setDescription('Table of connected usb devices.')
usbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11369, 10, 5, 1, 1), ).setIndexNames((0, "IOMEGANAS-MIB", "usbIndex"))
if mibBuilder.loadTexts: usbEntry.setStatus('current')
if mibBuilder.loadTexts: usbEntry.setDescription('Entry for connected USB device')
usbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: usbIndex.setStatus('current')
if mibBuilder.loadTexts: usbIndex.setDescription('Index for entry in the table')
usbManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbManufacture.setStatus('current')
if mibBuilder.loadTexts: usbManufacture.setDescription('Manufucture of the device')
usbModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbModel.setStatus('current')
if mibBuilder.loadTexts: usbModel.setDescription('Model of the USB device')
usbType = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbType.setStatus('current')
if mibBuilder.loadTexts: usbType.setDescription('USB device type(such UPS(3), PTP(6), printer(7) and so on)')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 11369, 10, 6, 1), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
if mibBuilder.loadTexts: fanTable.setDescription('Table for fan sensors')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11369, 10, 6, 1, 1), ).setIndexNames((0, "IOMEGANAS-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
if mibBuilder.loadTexts: fanEntry.setDescription('Entry for fan sensor')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fanIndex.setStatus('current')
if mibBuilder.loadTexts: fanIndex.setDescription('Index for the entry')
fanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanName.setStatus('current')
if mibBuilder.loadTexts: fanName.setDescription('Name of the fan sensor')
fanValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanValue.setStatus('current')
if mibBuilder.loadTexts: fanValue.setDescription('Rotation speed of the fan in RPM')
tempTable = MibTable((1, 3, 6, 1, 4, 1, 11369, 10, 6, 2), )
if mibBuilder.loadTexts: tempTable.setStatus('current')
if mibBuilder.loadTexts: tempTable.setDescription('Table for temperature sensor')
tempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11369, 10, 6, 2, 1), ).setIndexNames((0, "IOMEGANAS-MIB", "tempIndex"))
if mibBuilder.loadTexts: tempEntry.setStatus('current')
if mibBuilder.loadTexts: tempEntry.setDescription('Entry for temperature sensor')
tempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: tempIndex.setStatus('current')
if mibBuilder.loadTexts: tempIndex.setDescription('Index for entry')
tempName = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempName.setStatus('current')
if mibBuilder.loadTexts: tempName.setDescription('Name of the temperature sensor')
tempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempValue.setStatus('current')
if mibBuilder.loadTexts: tempValue.setDescription('The temperature of the sensor in mC.')
voltTable = MibTable((1, 3, 6, 1, 4, 1, 11369, 10, 6, 3), )
if mibBuilder.loadTexts: voltTable.setStatus('current')
if mibBuilder.loadTexts: voltTable.setDescription('Table for volt sensor')
voltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11369, 10, 6, 3, 1), ).setIndexNames((0, "IOMEGANAS-MIB", "voltIndex"))
if mibBuilder.loadTexts: voltEntry.setStatus('current')
if mibBuilder.loadTexts: voltEntry.setDescription('Entry for volt sensor')
voltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: voltIndex.setStatus('current')
if mibBuilder.loadTexts: voltIndex.setDescription('Index for the entry')
voltName = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltName.setStatus('current')
if mibBuilder.loadTexts: voltName.setDescription('Name of the volt sensor')
voltValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11369, 10, 6, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltValue.setStatus('current')
if mibBuilder.loadTexts: voltValue.setDescription('The voltage in mV')
eventID = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventID.setStatus('current')
if mibBuilder.loadTexts: eventID.setDescription('ID of the event')
eventText = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventText.setStatus('current')
if mibBuilder.loadTexts: eventText.setDescription('Description of the event.')
iomegaNASNotificationError = NotificationType((1, 3, 6, 1, 4, 1, 11369, 10, 8, 1)).setObjects(("IOMEGANAS-MIB", "deviceDescr"), ("IOMEGANAS-MIB", "deviceName"), ("IOMEGANAS-MIB", "eventID"), ("IOMEGANAS-MIB", "eventText"))
if mibBuilder.loadTexts: iomegaNASNotificationError.setStatus('current')
if mibBuilder.loadTexts: iomegaNASNotificationError.setDescription('An Error EventMonitorTrap is generated in response to a user-specified event. Details can be found in Variables data.')
dns0 = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 1, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns0.setStatus('current')
if mibBuilder.loadTexts: dns0.setDescription('The first DNS server')
dns1 = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 1, 3, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns1.setStatus('current')
if mibBuilder.loadTexts: dns1.setDescription('Backup DNS server')
wins0 = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 1, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wins0.setStatus('current')
if mibBuilder.loadTexts: wins0.setDescription('The first wins server')
wins1 = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 1, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wins1.setStatus('current')
if mibBuilder.loadTexts: wins1.setDescription('Backup wins server')
raEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raEnabled.setStatus('current')
if mibBuilder.loadTexts: raEnabled.setDescription('Whether RA is enabled 0 Disable 1 Enable')
mediaServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11369, 10, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaServiceEnabled.setStatus('current')
if mibBuilder.loadTexts: mediaServiceEnabled.setDescription('Whether media service is enabled 0 disable 1 enable')
iomegaNASNotificationWarn = NotificationType((1, 3, 6, 1, 4, 1, 11369, 10, 8, 2)).setObjects(("IOMEGANAS-MIB", "deviceDescr"), ("IOMEGANAS-MIB", "deviceName"), ("IOMEGANAS-MIB", "eventID"), ("IOMEGANAS-MIB", "eventText"))
if mibBuilder.loadTexts: iomegaNASNotificationWarn.setStatus('current')
if mibBuilder.loadTexts: iomegaNASNotificationWarn.setDescription('A Warning EventMonitorTrap is generated in response to a user-specified event. Details can be found in Variables data.')
iomegaNASNotificationInfo = NotificationType((1, 3, 6, 1, 4, 1, 11369, 10, 8, 3)).setObjects(("IOMEGANAS-MIB", "deviceDescr"), ("IOMEGANAS-MIB", "deviceName"), ("IOMEGANAS-MIB", "eventID"), ("IOMEGANAS-MIB", "eventText"))
if mibBuilder.loadTexts: iomegaNASNotificationInfo.setStatus('current')
if mibBuilder.loadTexts: iomegaNASNotificationInfo.setDescription('An Informational EventMonitorTrap is generated in response to a user-specified event. Details can be found in Variables data.')
mibBuilder.exportSymbols("IOMEGANAS-MIB", iomegaNASNotificationInfo=iomegaNASNotificationInfo, ioAvgSvc=ioAvgSvc, iomegaNASNotificationError=iomegaNASNotificationError, deviceName=deviceName, bkupltStatus=bkupltStatus, iomegaNASEvent=iomegaNASEvent, tempName=tempName, internet=internet, conCount=conCount, raidLevel=raidLevel, iomegaNASSensor=iomegaNASSensor, voltIndex=voltIndex, PYSNMP_MODULE_ID=lenovoemc, ioMgws=ioMgws, usbTable=usbTable, iomegaNASDevice=iomegaNASDevice, diskTable=diskTable, iomegaNASInfo=iomegaNASInfo, bkupIndex=bkupIndex, tempEntry=tempEntry, iomegaNASNotificationWarn=iomegaNASNotificationWarn, ioReqws=ioReqws, bkupClient=bkupClient, fanValue=fanValue, iomegaNASStorage=iomegaNASStorage, tempTable=tempTable, diskEntry=diskEntry, raEnabled=raEnabled, diskName=diskName, dns1=dns1, ioIndex=ioIndex, bkupTotalSpace=bkupTotalSpace, enterprises=enterprises, diskStatus=diskStatus, org=org, eventText=eventText, diskID=diskID, bkupTable=bkupTable, usbIndex=usbIndex, remoteAccess=remoteAccess, ioKbws=ioKbws, mediaServiceEnabled=mediaServiceEnabled, ioAvgQueue=ioAvgQueue, iomegaNASFunctionStatus=iomegaNASFunctionStatus, systemPerformance=systemPerformance, iomegaNAS=iomegaNAS, voltName=voltName, fanName=fanName, wins0=wins0, ioAvgUtil=ioAvgUtil, ioCpuTime=ioCpuTime, private=private, eventID=eventID, ioKbrs=ioKbrs, raidStatus=raidStatus, conProtocol=conProtocol, wins1=wins1, ioEntry=ioEntry, mediaService=mediaService, conTable=conTable, netConfig=netConfig, usbModel=usbModel, ioAvgWait=ioAvgWait, voltEntry=voltEntry, ioMgrs=ioMgrs, usbType=usbType, dod=dod, diskIndex=diskIndex, lenovoemc=lenovoemc, fanEntry=fanEntry, iomegaNASNotifications=iomegaNASNotifications, usbManufacture=usbManufacture, voltTable=voltTable, deviceDescr=deviceDescr, dns0=dns0, diskSize=diskSize, tempValue=tempValue, fanTable=fanTable, fanIndex=fanIndex, ioReqrs=ioReqrs, voltValue=voltValue, conEntry=conEntry, ioTable=ioTable, bkupEntry=bkupEntry, tempIndex=tempIndex, conIndex=conIndex, usbEntry=usbEntry)
