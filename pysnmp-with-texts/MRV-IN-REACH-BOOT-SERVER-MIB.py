#
# PySNMP MIB module MRV-IN-REACH-BOOT-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IN-REACH-BOOT-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
mrvInReachProductDivision, DateTime, AddressType = mibBuilder.importSymbols("MRV-IN-REACH-PRODUCT-DIVISION-MIB", "mrvInReachProductDivision", "DateTime", "AddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, Counter64, iso, ObjectIdentity, IpAddress, Integer32, MibIdentifier, ModuleIdentity, NotificationType, Unsigned32, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "Counter64", "iso", "ObjectIdentity", "IpAddress", "Integer32", "MibIdentifier", "ModuleIdentity", "NotificationType", "Unsigned32", "TimeTicks", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xBootServer = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6))
xBsBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 1))
xDump = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 2))
xLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 3))
xParam = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 4))
class DialogStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("none", 1), ("fileTooLarge", 2), ("notImageFile", 3), ("notExecutableFile", 4), ("badFileData", 5), ("deviceWriteProtected", 6), ("operationTimeout", 7), ("remoteFileNotFound", 8), ("remoteFileAccessViolation", 9), ("protocolError", 10), ("fileSystemError", 11), ("temporaryResourceConflict", 12), ("success", 13))

basicLogLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLogLimit.setStatus('mandatory')
if mibBuilder.loadTexts: basicLogLimit.setDescription("Maximum allowed number of kilobytes for recording events. Corresponds directly to MANAGER LOG FILE SIZE and the value labeled 'Log File Size:' in the MANAGER CHARACTERISTICS display.")
basicActiveLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicActiveLimit.setStatus('mandatory')
if mibBuilder.loadTexts: basicActiveLimit.setDescription("Maximum allowed number of simultaneous service dialogs. Corresponds directly to MANAGER SIMULTANEOUS and the value labeled 'Maximum simultaneous requests:' in the MANAGER CHARACTERISTICS display.")
basicActiveNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicActiveNumber.setDescription('Number of active service dialogs. Corresponds indirectly to the list of active clients in the MANAGER STATUS display.')
basicClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicClientNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicClientNumber.setDescription('Number of defined clients. Corresponds indirectly to the list of defined clients in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.')
basicOffersSent = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicOffersSent.setStatus('mandatory')
if mibBuilder.loadTexts: basicOffersSent.setDescription("Total number of service offers sent in response to client requests. Corresponds directly to the value labeled 'Total service offers sent:' in the MANAGER STATUS display.")
basicEventTotal = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicEventTotal.setStatus('mandatory')
if mibBuilder.loadTexts: basicEventTotal.setDescription("Total number of events that have been written to the event log since it was last purged. This may be less than the number currently in the log. Corresponds directly to the value labeled 'Total Messages Logged:' in the MANAGER EVENTS display.")
basicEventPurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicEventPurge.setStatus('mandatory')
if mibBuilder.loadTexts: basicEventPurge.setDescription("Control to cause emptying the event log. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes the event log to immediately become empty. Corresponds directly to the PURGE MANAGER LOG FILE command.")
activeTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 8), )
if mibBuilder.loadTexts: activeTable.setStatus('mandatory')
if mibBuilder.loadTexts: activeTable.setDescription('A list of active client dialog entries. The number of entries is given by basicActiveNumber.')
activeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1), ).setIndexNames((0, "MRV-IN-REACH-BOOT-SERVER-MIB", "activeIdentificationType"), (0, "MRV-IN-REACH-BOOT-SERVER-MIB", "activeIdentification"))
if mibBuilder.loadTexts: activeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: activeEntry.setDescription('Parameter values for an active client dialog entry.')
activeIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: activeIdentificationType.setDescription("The type of identification value in activeIdentification. Corresponds indirectly to the value labeled 'EthernetAddress' in the MANAGER STATUS display.")
activeIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: activeIdentification.setDescription("Identification of the active partner. Corresponds directly to the value labeled 'EthernetAddress' in the MANAGER STATUS display.")
activeFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("parameterStore", 1), ("load", 2), ("dump", 3), ("imageUpdate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFunction.setStatus('mandatory')
if mibBuilder.loadTexts: activeFunction.setDescription("The function the server is performing with the partner. Corresponds directly to the value labeled 'Function' in the MANAGER STATUS display.")
activeSoftwareVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4), ("diagnostic", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeSoftwareVersionType.setStatus('mandatory')
if mibBuilder.loadTexts: activeSoftwareVersionType.setDescription("If activeFunction is 'load', the software version being sent to the client, otherwise 'notApplicable'. Corresponds to the letter in the software version labeled 'Version' in the MANAGER STATUS display. alpha 'A': alpha test beta 'B': beta test production null: normal, production software special 'S': special, custom software diagnostic 'D': diagnostic, debug software ")
activeSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: activeSoftwareVersion.setDescription("If activeFunction is 'load', the 4-byte software version being sent to the client, otherwise zero length. In order, the octets contain major version, minor version, ECO, and pre-release number. Corresponds to the numbers in the software version labeled 'Version' in the MANAGER STATUS display. For example, the version display for activeSoftwareVersionType 'production' and activeSoftwareVersion '2.2.0.0' is 'V2.2'. The version display for activeSoftwareVersionType 'beta' and activeSoftwareVersion '3.1.0.4' is 'V3.1B4'.")
activeParameterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeParameterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: activeParameterVersion.setDescription("If activeFunction is 'parameterStore', the parameter version being stored by the client, otherwise zero. Corresponds directly to the value labeled 'Version' in the MANAGER STATUS display.")
activeCurrentSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCurrentSequence.setStatus('mandatory')
if mibBuilder.loadTexts: activeCurrentSequence.setDescription("The current dialog sequence number. Corresponds directly to the value labeled 'Seq' in the MANAGER STATUS display.")
activeBytesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeBytesRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: activeBytesRemaining.setDescription("The number of bytes remaining to be transferred in the dialog. Corresponds directly to the value labeled 'Left' in the MANAGER STATUS display.")
activeFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFile.setStatus('mandatory')
if mibBuilder.loadTexts: activeFile.setDescription("The name of the file being used in the dialog. Corresponds directly to the value labeled 'File' in the MANAGER STATUS display.")
activeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 10), DialogStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: activeStatus.setDescription("The final status of the most recent attempt to get an image. Corresponds directly to the value labeled 'Get Status:' in the DEVICE STATUS display.")
activeState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 1), ("internal1", 2), ("internal2", 3), ("openPartner", 4), ("openFile", 5), ("receivePartner", 6), ("writeFile", 7), ("closePartner", 8), ("closeFile", 9), ("cleanup", 10), ("done", 11), ("error", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeState.setStatus('mandatory')
if mibBuilder.loadTexts: activeState.setDescription("The dynamic state of an active attempt to get an image. Corresponds directly to the value labeled 'Get State:' in the DEVICE STATUS display.")
clientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 9), )
if mibBuilder.loadTexts: clientTable.setStatus('mandatory')
if mibBuilder.loadTexts: clientTable.setDescription('A list of client data base entries. The number of entries is given by basicClientNumber.')
clientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1), ).setIndexNames((0, "MRV-IN-REACH-BOOT-SERVER-MIB", "clientIdentificationType"), (0, "MRV-IN-REACH-BOOT-SERVER-MIB", "clientIdentification"))
if mibBuilder.loadTexts: clientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clientEntry.setDescription('Parameter values for a client data base entry.')
clientIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: clientIdentificationType.setDescription("The type of identification value in clientIdentification. Corresponds directly to MANAGER NODE, MANAGER GLOBAL, and MANAGER LOCAL, and the value labeled 'Ethernet Address' in the MANAGER NODE display or 'Ethernet Address', 'Device', and 'Global Devices' or 'Local Devices' in the MANAGER GLOBAL and LOCAL displays.")
clientIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: clientIdentification.setDescription("Identification of the client, either a hardware type or an Ethernet address, depending on clientIdentificationType. Corresponds directly to MANAGER NODE, MANAGER GLOBAL, and MANAGER LOCAL, and the value labeled 'Ethernet Address' in the MANAGER NODE display or 'Ethernet Address', 'Device', and 'Global Devices' or 'Local Devices' in the MANAGER GLOBAL and LOCAL displays.")
clientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: clientEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the PURGE LOCAL, PURGE GLOBAL, and PURGE NODE commands. Actual removal of the entry is implementation specific.")
clientName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientName.setStatus('mandatory')
if mibBuilder.loadTexts: clientName.setDescription("A name that may be used to identify the client. Corresponds directly to the value labeled 'Name' in the MANAGER NODE display.")
clientLoadFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientLoadFile.setStatus('mandatory')
if mibBuilder.loadTexts: clientLoadFile.setDescription("The file with the client's load image. Corresponds directly to the value labeled 'Load File' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
clientDiagnosticFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientDiagnosticFile.setStatus('mandatory')
if mibBuilder.loadTexts: clientDiagnosticFile.setDescription("The file with the client's diagnostic test image. Corresponds directly to the value labeled 'Diag File' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
clientLoadService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientLoadService.setStatus('mandatory')
if mibBuilder.loadTexts: clientLoadService.setDescription("Control for allowing load service for the client. Corresponds directly to the value labeled 'Load' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
clientDumpService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientDumpService.setStatus('mandatory')
if mibBuilder.loadTexts: clientDumpService.setDescription("Control for allowing dump service for the client. Corresponds directly to the value labeled 'Dump' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
namedTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 10), )
if mibBuilder.loadTexts: namedTable.setStatus('mandatory')
if mibBuilder.loadTexts: namedTable.setDescription('A list of named client data base entries. The number of entries is given by basicClientNumber.')
namedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1), ).setIndexNames((0, "MRV-IN-REACH-BOOT-SERVER-MIB", "namedName"))
if mibBuilder.loadTexts: namedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: namedEntry.setDescription('Parameter values for a named client data base entry.')
namedIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: namedIdentificationType.setDescription("The type of identification value in namedIdentification. Corresponds directly to MANAGER NODE, MANAGER GLOBAL, and MANAGER LOCAL, and the value labeled 'Ethernet Address' in the MANAGER NODE display or 'Ethernet Address', 'Device', and 'Global Devices' or 'Local Devices' in the MANAGER GLOBAL and LOCAL displays.")
namedIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: namedIdentification.setDescription("Identification of the client, either a hardware type or an Ethernet address, depending on namedIdentificationType. Corresponds directly to MANAGER NODE, MANAGER GLOBAL, and MANAGER LOCAL, and the value labeled 'Ethernet Address' in the MANAGER NODE display or 'Ethernet Address', 'Device', and 'Global Devices' or 'Local Devices' in the MANAGER GLOBAL and LOCAL displays.")
namedEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: namedEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the PURGE LOCAL, PURGE GLOBAL, and PURGE NODE commands. Actual removal of the entry is implementation specific.")
namedName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedName.setStatus('mandatory')
if mibBuilder.loadTexts: namedName.setDescription("A name that may be used to identify the client. Corresponds directly to the value labeled 'Name' in the MANAGER NODE display.")
namedLoadFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedLoadFile.setStatus('mandatory')
if mibBuilder.loadTexts: namedLoadFile.setDescription("The file with the client's load image. Corresponds directly to the value labeled 'Load File' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
namedDiagnosticFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedDiagnosticFile.setStatus('mandatory')
if mibBuilder.loadTexts: namedDiagnosticFile.setDescription("The file with the client's diagnostic test image. Corresponds directly to the value labeled 'Diag File' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
namedLoadService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedLoadService.setStatus('mandatory')
if mibBuilder.loadTexts: namedLoadService.setDescription("Control for allowing load service for the client. Corresponds directly to the value labeled 'Load' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
namedDumpService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedDumpService.setStatus('mandatory')
if mibBuilder.loadTexts: namedDumpService.setDescription("Control for allowing dump service for the client. Corresponds directly to the value labeled 'Dump' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
xEventTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 11), )
if mibBuilder.loadTexts: xEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: xEventTable.setDescription('A list of event entries. The number of entries is given by basicEventNumber.')
xEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1), ).setIndexNames((0, "MRV-IN-REACH-BOOT-SERVER-MIB", "xEventIndex"))
if mibBuilder.loadTexts: xEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xEventEntry.setDescription('Parameter values for a event entry.')
xEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xEventIndex.setDescription('In identification number for an event. The value 1 indicates the oldest event in the file, with subsequent numbers indicating sequential events. The event text for a given number may change as a circular event log wraps over its beginning. Corresponds directly to the relative position of an event in the MANAGER EVENTS display.')
xEventText = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xEventText.setStatus('mandatory')
if mibBuilder.loadTexts: xEventText.setDescription('The text of the event, including date, time and other information. Corresponds directly to the individual event text in the MANAGER EVENTS display.')
basicDeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDeviceNumber.setDescription("The system's number of mass-storage devices.")
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 13), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTable.setDescription('A list of device entries. The number of entries is given by basicDeviceNumber.')
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1), ).setIndexNames((0, "MRV-IN-REACH-BOOT-SERVER-MIB", "deviceIndex"))
if mibBuilder.loadTexts: deviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceEntry.setDescription('Parameter values for a device entry.')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIndex.setDescription('In identification number for a device, in the range 1 to basicDeviceNumber')
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('mandatory')
if mibBuilder.loadTexts: deviceName.setDescription("A name by which the device is known in other displays, such as 'C1' or 'D2'.")
deviceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDescr.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDescr.setDescription("Details of the device type, including, for example, size, manufacturer, Flash versus RAM, and such. Corresponds directly to the value labeled 'Device Type: in the MANAGER DEVICE STATUS display.")
deviceOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("format", 3), ("idle", 4), ("erase", 5), ("paramStore", 6), ("unpack", 7), ("loadingClient", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOperation.setStatus('mandatory')
if mibBuilder.loadTexts: deviceOperation.setDescription("Current operational state of the device. Corresponds directly the value labeled 'Device Operation:' in the MANAGER DEVICE STATUS display.")
deviceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unformatted", 1), ("formatted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFormat.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFormat.setDescription("Formatting status of the device. Corresponds directly the presence of one of the value labels under the label 'Device Status:' in the MANAGER DEVICE STATUS display.")
deviceProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("write-enabled", 1), ("write-protected", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceProtection.setStatus('mandatory')
if mibBuilder.loadTexts: deviceProtection.setDescription("Write-protect status of the device. Corresponds directly the presence of one of the value labels under the label 'Device Status:' in the MANAGER DEVICE STATUS display.")
deviceFormatMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFormatMedium.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFormatMedium.setDescription("Control to cause formatting of the medium in the device. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes the device to be formatted. Corresponds directly to the FORMAT DEVICE command.")
deviceGetFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2), ("abort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFile.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFile.setDescription("Control to cause getting a file to the device from a remote host system. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes the get to be attempted. Corresponds directly to the GET DEVICE command. When set to 'execute', the objects deviceGetFileHostIdentificationType, deviceGetFileHostIdentification, deviceGetFileName and deviceGetFileArea must be somewhere in the same set request message.")
deviceGetFileHostIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 9), AddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileHostIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFileHostIdentificationType.setDescription("The type of identification value in deviceIdentification. Corresponds indirectly to ADDRESS in the GET DEVICE command. This object may not be set outside the context of setting deviceGetFile to 'execute'. In response to a get-request or get-next-request, the value of this object is 'undefined'.")
deviceGetFileHostIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileHostIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFileHostIdentification.setDescription("Identification of the host to get the file from, with type depending on deviceIdentificationType. Corresponds directly to ADDRESS in the GET DEVICE command. This object may not be set outside the context of setting deviceGetFile to 'execute'. In response to a get-request or get-next-request, the value of this object is zero length.")
deviceGetFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileName.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFileName.setDescription("The name of the file to get. Corresponds directly to LOAD FILE in the GET DEVICE command. This object may not be set outside the context of setting deviceGetFile to 'execute'. In response to a get-request or get-next-request, the value of this object is zero length.")
deviceGetFileArea = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileArea.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFileArea.setDescription("The area number in which to put the file. Corresponds directly to AREA in the GET DEVICE command. If it is not relevant to the particular device, it is ignored. This object may not be set outside the context of setting deviceGetFile to 'execute'. In response to a get-request or get-next-request, the value of this object is zero.")
deviceFormatOption = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFormatOption.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFormatOption.setDescription("Formatting option to apply. Corresponds directly to the OPTION in the FORMAT DEVICE command. This object may not be set outside the context of setting deviceFormatMedium to 'execute'. In response to a get-request or get-next-request, the value of this object is zero.")
deviceFormatRedundantParams = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonredundant", 1), ("redundant", 2))).clone('redundant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFormatRedundantParams.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFormatRedundantParams.setDescription("Control for creating redundant parameter storage areas when formatting. Corresponds directly to NONREDUNDANT in the FORMAT DEVICE command. This object may not be set outside the context of setting deviceFormatMedium to 'execute'. In response to a get-request or get-next-request, the value of this object is zero.")
devicePreviousStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 15), DialogStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePreviousStatus.setStatus('mandatory')
if mibBuilder.loadTexts: devicePreviousStatus.setDescription("Result of the immediately previous concluded boot dialog. Corresponds directly to the value labeled 'Get File Previous Status:' in the SHOW CARD STATUS display.")
dumpService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpService.setStatus('mandatory')
if mibBuilder.loadTexts: dumpService.setDescription("Control for allowing dump service for any client. Corresponds directly to DUMP and the value labeled 'Dump:' in the MANAGER CHARACTERISTICS display.")
dumpDrive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpDrive.setStatus('mandatory')
if mibBuilder.loadTexts: dumpDrive.setDescription("Identification number of the disk drive where dumps are stored. Corresponds directly to DUMP DRIVE and the value labeled 'Dump Drive:' in the MANAGER CHARACTERISTICS display.")
dumpMerit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpMerit.setStatus('mandatory')
if mibBuilder.loadTexts: dumpMerit.setDescription("Relative preference for this dump server over others. Corresponds directly to DUMP MERIT and the value labeled 'Dump Merit:' in the MANAGER CHARACTERISTICS display.")
dumpSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("small", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpSize.setStatus('mandatory')
if mibBuilder.loadTexts: dumpSize.setDescription("Type of dump file to keep. Corresponds directly to DUMP SIZE and the value labeled 'Dump Size:' in the MANAGER CHARACTERISTICS display.")
dumpCompleted = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpCompleted.setStatus('mandatory')
if mibBuilder.loadTexts: dumpCompleted.setDescription("The number of dumps completed since system initialization. Corresponds directly to the value labeled 'Dump Operations Completed:' in the MANAGER STATUS display.")
dumpActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpActive.setStatus('mandatory')
if mibBuilder.loadTexts: dumpActive.setDescription("The number of dumps in progress. Corresponds directly to the value labeled 'Currently Dumping:' in the MANAGER STATUS display.")
dumpFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileNumber.setDescription("The number of dump files currently stored. Corresponds directly to the value labeled 'Network dump files' and 'files' in the MANAGER FILES display.")
dumpFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 2, 8), )
if mibBuilder.loadTexts: dumpFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileTable.setDescription('A list of dump file entries. The number of entries is given by dumpFileNumber.')
dumpFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1), ).setIndexNames((0, "MRV-IN-REACH-BOOT-SERVER-MIB", "dumpFileIdentificationType"), (0, "MRV-IN-REACH-BOOT-SERVER-MIB", "dumpFileIdentification"))
if mibBuilder.loadTexts: dumpFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileEntry.setDescription('Parameter values for a dump file entry.')
dumpFileIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileIdentificationType.setDescription("The type of identification value in dumpFileIdentification. Corresponds indirectly to a file name part in the section labeled 'Network dump files' in the MANAGER FILES display.")
dumpFileIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileIdentification.setDescription("Identification of the dump file, an Ethernet address, as indicated by dumpFileIdentificationType. Corresponds indirectly to a file name part in the section labeled 'Network dump files' in the MANAGER FILES display.")
dumpFileEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpFileEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds indirectly to the PURGE MANAGER DUMP FILES command. Actual removal of the entry is implementation specific.")
dumpFileCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 4), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileCreation.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileCreation.setDescription("The time the dump file was created. Corresponds directly to a date and time in the section labeled 'Network dump files' in the MANAGER FILES display.")
dumpFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileSize.setDescription("The number of bytes stored in the dump file. Corresponds directly to the value labeled 'bytes' in the section labeled 'Network dump files' in the MANAGER FILES display.")
loadService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadService.setStatus('mandatory')
if mibBuilder.loadTexts: loadService.setDescription("Control for allowing load service for any client. Corresponds directly to LOAD and the value labeled 'Load:' in the MANAGER CHARACTERISTICS display.")
loadMerit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMerit.setStatus('mandatory')
if mibBuilder.loadTexts: loadMerit.setDescription("Relative preference for this load server over others. Corresponds directly to LOAD MERIT and the value labeled 'Load Merit:' in the MANAGER CHARACTERISTICS display.")
loadCompleted = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadCompleted.setStatus('mandatory')
if mibBuilder.loadTexts: loadCompleted.setDescription("The number of loads completed since system initialization. Corresponds directly to the value labeled 'Load Operations Completed:' in the MANAGER STATUS display.")
loadActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadActive.setStatus('mandatory')
if mibBuilder.loadTexts: loadActive.setDescription("The number of loads in progress. Corresponds directly to the value labeled 'Currently Loading:' in the MANAGER STATUS display.")
loadFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileNumber.setDescription("The number of load files currently stored. Corresponds directly to the value labeled 'Load image files' and 'files' in the MANAGER FILES display.")
loadFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 3, 6), )
if mibBuilder.loadTexts: loadFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileTable.setDescription('A list of load file entries. The number of entries is given by loadFileNumber.')
loadFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1), ).setIndexNames((0, "MRV-IN-REACH-BOOT-SERVER-MIB", "loadFileName"))
if mibBuilder.loadTexts: loadFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileEntry.setDescription('Parameter values for a load file entry.')
loadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileName.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileName.setDescription("The name of a load file. Corresponds directly to a file name part in the section labeled 'Load image files' in the MANAGER FILES display.")
loadFileCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 2), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileCreation.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileCreation.setDescription("The time the load file was created. Corresponds directly to a date and time in the section labeled 'Load image files' in the MANAGER FILES display.")
loadFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileSize.setDescription("The number of bytes stored in the load file. Corresponds directly to the value labeled 'bytes' in the section labeled 'Load image files' in the MANAGER FILES display.")
loadFileSoftwareVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSoftwareVersionType.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileSoftwareVersionType.setDescription("The software version type of the image in the load file. Corresponds directly to a software version in the section labeled 'Load image files' in the MANAGER FILES display. alpha 'A': alpha test beta 'B': beta test production null: normal, production software special 'S': special, custom software ")
loadFileSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileSoftwareVersion.setDescription("The software version of the image in the load file. Corresponds directly to a software version in the section labeled 'Load image files' in the MANAGER FILES display. For example, the version display for loadFileSoftwareVersionType 'production' and loadFileSoftwareVersion '2.2.0.0' is 'V2.2'. The version display for loadFileSoftwareVersionType 'beta' and loadFileSoftwareVersion '3.1.0.4' is 'V3.1B4'.")
paramService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramService.setStatus('mandatory')
if mibBuilder.loadTexts: paramService.setDescription("Control for allowing parameter storage service for any client. Corresponds directly to PARAMETER SERVICE and the value labeled 'Parameter Service:' in the MANAGER CHARACTERISTICS display.")
paramDefaultService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramDefaultService.setStatus('mandatory')
if mibBuilder.loadTexts: paramDefaultService.setDescription("Control for allowing default parameter loading service for any client. Corresponds directly to PARAMETER DEFAULT SERVICE and the value labeled 'Parameter Default Service:' in the MANAGER CHARACTERISTICS display.")
paramDrive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramDrive.setStatus('mandatory')
if mibBuilder.loadTexts: paramDrive.setDescription("Identification number of the disk drive where parameters are stored. Corresponds directly to PARAMETER DRIVE and the value labeled 'Parameter Drive:' in the MANAGER CHARACTERISTICS display.")
paramActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramActive.setStatus('mandatory')
if mibBuilder.loadTexts: paramActive.setDescription("The number of params in progress. Corresponds directly to the value labeled 'Currently Paraming:' in the MANAGER STATUS display.")
paramStorageActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramStorageActive.setStatus('mandatory')
if mibBuilder.loadTexts: paramStorageActive.setDescription("The number of parameter storage operations in progress. Corresponds directly to the value labeled 'Currently saving parameters:' in the MANAGER STATUS display.")
paramFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileNumber.setDescription("The number of parameter files currently stored. Corresponds directly to the value labeled 'Parameter files' and 'files' in the MANAGER FILES display.")
paramFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 4, 7), )
if mibBuilder.loadTexts: paramFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileTable.setDescription('A list of param file entries. The number of entries is given by paramFileNumber.')
paramFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1), ).setIndexNames((0, "MRV-IN-REACH-BOOT-SERVER-MIB", "paramFileIdentificationType"), (0, "MRV-IN-REACH-BOOT-SERVER-MIB", "paramFileIdentification"))
if mibBuilder.loadTexts: paramFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileEntry.setDescription('Parameter values for a param file entry.')
paramFileIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileIdentificationType.setDescription("The type of identification value in paramFileIdentification. Corresponds indirectly to a file name part in the section labeled 'Parameter files' in the MANAGER FILES display.")
paramFileIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileIdentification.setDescription("Identification of the param file, an Ethernet address, as indicated by paramFileIdentificationType. Corresponds indirectly to a file name part in the section labeled 'Parameter files' in the MANAGER FILES display.")
paramFileEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramFileEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds indirectly to the PURGE MANAGER PARAMETER FILES command. Actual removal of the entry is implementation specific.")
paramFileWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 4), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileWrite.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileWrite.setDescription("The time the parameter file was last written. Corresponds directly to a date and time in the section labeled 'Parameter files' in the MANAGER FILES display.")
paramFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileSize.setDescription("The number of bytes stored in the param file. Corresponds directly to the value labeled 'bytes' in the section labeled 'Parameter files' in the MANAGER FILES display.")
paramFileParameterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileParameterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileParameterVersion.setDescription("The version number of the parameter data in the file. Corresponds directly to the value labeled 'ver' in the section labeled 'Parameter files' in the MANAGER FILES display.")
mibBuilder.exportSymbols("MRV-IN-REACH-BOOT-SERVER-MIB", xEventText=xEventText, namedDiagnosticFile=namedDiagnosticFile, deviceGetFileName=deviceGetFileName, xEventTable=xEventTable, clientDiagnosticFile=clientDiagnosticFile, xEventEntry=xEventEntry, loadService=loadService, clientLoadFile=clientLoadFile, activeIdentificationType=activeIdentificationType, namedIdentificationType=namedIdentificationType, deviceName=deviceName, dumpService=dumpService, namedIdentification=namedIdentification, dumpCompleted=dumpCompleted, activeState=activeState, deviceFormat=deviceFormat, deviceOperation=deviceOperation, xParam=xParam, deviceProtection=deviceProtection, namedEntry=namedEntry, namedLoadService=namedLoadService, deviceGetFile=deviceGetFile, loadActive=loadActive, basicActiveLimit=basicActiveLimit, loadFileSoftwareVersion=loadFileSoftwareVersion, namedDumpService=namedDumpService, paramFileEntryStatus=paramFileEntryStatus, paramFileWrite=paramFileWrite, loadFileSize=loadFileSize, deviceFormatOption=deviceFormatOption, clientName=clientName, basicEventPurge=basicEventPurge, deviceGetFileHostIdentificationType=deviceGetFileHostIdentificationType, activeParameterVersion=activeParameterVersion, loadCompleted=loadCompleted, clientIdentificationType=clientIdentificationType, namedEntryStatus=namedEntryStatus, loadFileEntry=loadFileEntry, activeStatus=activeStatus, loadFileCreation=loadFileCreation, xLoad=xLoad, xBootServer=xBootServer, dumpDrive=dumpDrive, loadFileNumber=loadFileNumber, dumpFileSize=dumpFileSize, dumpFileCreation=dumpFileCreation, activeEntry=activeEntry, clientTable=clientTable, activeTable=activeTable, deviceGetFileHostIdentification=deviceGetFileHostIdentification, activeSoftwareVersion=activeSoftwareVersion, loadMerit=loadMerit, basicLogLimit=basicLogLimit, dumpMerit=dumpMerit, dumpFileEntryStatus=dumpFileEntryStatus, paramService=paramService, dumpFileNumber=dumpFileNumber, namedName=namedName, basicOffersSent=basicOffersSent, basicEventTotal=basicEventTotal, activeCurrentSequence=activeCurrentSequence, clientEntryStatus=clientEntryStatus, loadFileSoftwareVersionType=loadFileSoftwareVersionType, activeBytesRemaining=activeBytesRemaining, clientEntry=clientEntry, deviceTable=deviceTable, activeSoftwareVersionType=activeSoftwareVersionType, activeIdentification=activeIdentification, paramFileNumber=paramFileNumber, deviceEntry=deviceEntry, paramFileIdentification=paramFileIdentification, dumpFileIdentificationType=dumpFileIdentificationType, paramStorageActive=paramStorageActive, xEventIndex=xEventIndex, basicDeviceNumber=basicDeviceNumber, devicePreviousStatus=devicePreviousStatus, dumpSize=dumpSize, dumpFileIdentification=dumpFileIdentification, paramDefaultService=paramDefaultService, paramFileEntry=paramFileEntry, deviceFormatRedundantParams=deviceFormatRedundantParams, paramFileParameterVersion=paramFileParameterVersion, deviceFormatMedium=deviceFormatMedium, paramFileIdentificationType=paramFileIdentificationType, DialogStatus=DialogStatus, deviceDescr=deviceDescr, deviceGetFileArea=deviceGetFileArea, loadFileName=loadFileName, loadFileTable=loadFileTable, namedLoadFile=namedLoadFile, paramFileTable=paramFileTable, xBsBasic=xBsBasic, clientDumpService=clientDumpService, dumpFileEntry=dumpFileEntry, dumpFileTable=dumpFileTable, activeFunction=activeFunction, xDump=xDump, deviceIndex=deviceIndex, paramDrive=paramDrive, basicClientNumber=basicClientNumber, basicActiveNumber=basicActiveNumber, paramActive=paramActive, namedTable=namedTable, dumpActive=dumpActive, clientIdentification=clientIdentification, clientLoadService=clientLoadService, paramFileSize=paramFileSize, activeFile=activeFile)
