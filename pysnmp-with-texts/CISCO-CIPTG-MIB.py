#
# PySNMP MIB module CISCO-CIPTG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CIPTG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SAPType, = mibBuilder.importSymbols("CISCO-TC", "SAPType")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, IpAddress, ModuleIdentity, NotificationType, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, ObjectIdentity, Counter32, TimeTicks, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "ModuleIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "ObjectIdentity", "Counter32", "TimeTicks", "iso", "Gauge32")
TextualConvention, RowStatus, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue", "MacAddress")
ciscoCipTgMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 73))
ciscoCipTgMIB.setRevisions(('1999-01-25 00:00', '1998-01-06 00:00', '1997-02-09 00:00', '1997-03-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCipTgMIB.setRevisionsDescriptions(('Now that the CMCC supports MPC+ in addition to MPC, additional objects and tables are necessary. Added the following to cipLlcTgOperTable: cipTgLlcOperLocalVcToken cipTgLlcOperRemoteVcToken cipTgLlcOperLocalConnToken cipTgLlcOperRemoteConnToken cipTgLlcOperVcStatus cipTgLlcOperConnStatus Added the following to cipLlcTgStatsTable: cipTgLlcStatsConnNumberRecv cipTgLlcStatsConnNumberSent Added cipTgIpAdminTable. Added cipTgIpOperTable. Added cipTgIpStatsTable. Added cipTgCmgrOperTable.', "With the addition of Cisco's new Channel Port Adapter cards, all the references to CIP in the MIB description and object descriptions are changed to CMCC (Cisco Mainframe Channel Connection). The object names in the form of cip... or cipCard... will remain the same, but will be valid objects for the Channel Port Adapter cards.", 'Initial version of this MIB module.', 'Change all SAP objects to use the SAPType textual convention for the SYNTAX.',))
if mibBuilder.loadTexts: ciscoCipTgMIB.setLastUpdated('9901250000Z')
if mibBuilder.loadTexts: ciscoCipTgMIB.setOrganization('cisco IBU Engineering Working Group')
if mibBuilder.loadTexts: ciscoCipTgMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoCipTgMIB.setDescription('This is the Management Information Base (MIB) module for objects used to manage Transmission Groups (TGs) in Cisco Mainframe Channel Connection (CMCC) environments. --------------------------------------------------- | Acronym Definitions: | | CIP = Channel Interface Processor | | CMCC = Cisco Mainframe Channel Connection | | Cmgr = Connection Manager | | HPDT = High Performance Data Transfer | | HPR = High Performance Routing | | HSAS = High Speed Access Services | | LLC = Logical Link Control | | MPC = Multi-Path Channel | | MPC+ = HPDT MPC | | SNA = Systems Network Architecture | | TG = Transmission Group | | VC = Virtual Circuit | --------------------------------------------------- This MIB consists of the following tables: 1) TG LLC Connection Administration 2) TG LLC Connection Operational 3) TG LLC Connection Statistics 4) TG IP Connection Administration 5) TG IP Connection Operational 6) TG IP Connection Statistics 7) TG Connection Manager Operational Refer to the following MIBs for an understanding of Cisco CIP internal LAN and adapter terminology: CISCO-CIPLAN-MIB ')
cipTgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 73, 1))
cipTgLlc = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1))
cipTgIp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2))
cipTgCmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3))
class ChannelTgName(DisplayString):
    description = 'Display string for a CMCC Transmission Group (TG) name. The name is 1 to 8 characters in length padded out to 8 characters with spaces.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class ChannelTgToken(DisplayString):
    description = 'Display string for a CMCC Transmission Group (TG) token/handle. The token may have a length up to 24 characters.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 24)

cipTgLlcAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1), )
if mibBuilder.loadTexts: cipTgLlcAdminTable.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminTable.setDescription('This table contains CMCC configuration information for each instance of a Cisco CMCC Transmission Group (TG) using LLC as the DLC to establish a connection to a remote network node. Each instance of this table is created for every LLC TG with a unique tg-name configured on a CMCC card.')
cipTgLlcAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CIPTG-MIB", "cipTgLlcAdminName"))
if mibBuilder.loadTexts: cipTgLlcAdminEntry.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminEntry.setDescription('A list of CMCC LLC TG configuration values.')
cipTgLlcAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1, 1, 1), ChannelTgName())
if mibBuilder.loadTexts: cipTgLlcAdminName.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminName.setDescription('This is the name for this instance of a LLC connection transmission group (TG).')
cipTgLlcAdminLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("iso88023csmacd", 1), ("iso88025tokenRing", 2), ("fddi", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgLlcAdminLanType.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminLanType.setDescription('The LAN media type that this LLC TG uses to establish LLC communications with the specified remote network node.')
cipTgLlcAdminAdaptNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgLlcAdminAdaptNo.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminAdaptNo.setDescription('The CMCC internal adapter that is used by this LLC TG as the local MAC address for the LLC connection with the remote network node.')
cipTgLlcAdminLSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1, 1, 4), SAPType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgLlcAdminLSAP.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminLSAP.setDescription('The local SAP address that this LLC TG opens on the specified CMCC internal MAC adapter and used by this TG to establish the LLC connection with the remote network node.')
cipTgLlcAdminRMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgLlcAdminRMAC.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminRMAC.setDescription('The remote MAC address that this LLC TG uses to establish the LLC connection with the remote network node. This is the MAC address of the remote network node device. If this object is not specified, it will default to the MAC Address specified by the cipTgLlcAdminLanType and cipTgLlcAdminAdaptNo objects.')
cipTgLlcAdminRSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1, 1, 6), SAPType().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgLlcAdminRSAP.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminRSAP.setDescription('The remote SAP address that this LLC TG uses to establish the LLC connection with the remote network node. This is the SAP address of the remote network node device.')
cipTgLlcAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgLlcAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcAdminRowStatus.setDescription("This object is used by a Management Station to create or delete the row entry in the cipTgLlcAdminTable following the the RowStatus textual convention. Upon successful creation of the row, an Agent automatically creates a corresponding entry in the cipTgLlcOperTable and cipTgLlcStatsTable. cipTgLlcAdminRMAC and cipTgLlcAdminRSAP do not need to be specified in order to create a row. These objects will be automatically set to their default values. The Management Station can initiate row deletion, by setting this value to 'destroy (6)'. The Agent will then delete the rows corresponding to this CMCC LLC TG instance from the cipTgLlcAdminTable, cipTgLlcOperTable and cipTgLlcStatsTable.")
cipTgLlcOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2), )
if mibBuilder.loadTexts: cipTgLlcOperTable.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperTable.setDescription('This table contains operational information for each instance of a CMCC Transmission Group (TG) using LLC as the DLC to establish a connection to a remote network node. Each instance of this table is created for every LLC TG with a unique tg-name configured on a CMCC card.')
cipTgLlcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1), )
cipTgLlcAdminEntry.registerAugmentions(("CISCO-CIPTG-MIB", "cipTgLlcOperEntry"))
cipTgLlcOperEntry.setIndexNames(*cipTgLlcAdminEntry.getIndexNames())
if mibBuilder.loadTexts: cipTgLlcOperEntry.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperEntry.setDescription('A list of CMCC LLC TG operational values.')
cipTgLlcOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("shutdown", 1), ("reset", 2), ("locatePeer", 3), ("peerLocated", 4), ("negotiation", 5), ("contactPending", 6), ("active", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperState.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperState.setDescription('Activation state of the CMCC LLC TG. shutdown - CMCC interface with this LLC TG is shutdown. reset - This LLC TG interface is up, but LLC connection establishment has not started. locatePeer - This LLC TG has sent a test command to the configured remote network node. peerLocated - This LLC TG has sent an LLC TEST command and received a TEST rsp from the configured remote network node. negotiation - XID3 negotiation between the host and the remote network node has begun using this LLC connection TG. contactPending - The LLC session negotiation is complete. This LLC TG has sent or received a SABME. active - LLC connection TG is active.')
cipTgLlcOperTGN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperTGN.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperTGN.setDescription('The TG number for this LLC connection TG. This value is extracted from the XID3 negotiation exchange between the host and the remote network node.')
cipTgLlcOperLocalCP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperLocalCP.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperLocalCP.setDescription('The local control point name for the host. The name is extracted from the XID3s received from the host and sent to the remote network node. While the LLC TG is in any state other than contactPending or active, the local Control Point will be unknown and the size of this string will be zero.')
cipTgLlcOperRemoteCP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperRemoteCP.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperRemoteCP.setDescription('The remote control point name for the remote node connected to this TG. The name is extracted from the XID3s received from the remote network node and sent to the host. While the LLC TG is in any state other than contactPending or active, the remote Control Point will be unknown and the size of this string will be zero.')
cipTgLlcOperMaxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperMaxIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperMaxIn.setDescription('The maximum PIU the remote node is allowed to send to the host. The value is extracted from XID3s received from the host.')
cipTgLlcOperMaxOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperMaxOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperMaxOut.setDescription('The maximum PIU VTAM is allowed to send to the remote node. The value is extracted from the XID3s received from the remote node.')
cipTgLlcOperHpr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperHpr.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperHpr.setDescription('Indicates whether HPR is active on this LLC TG.')
cipTgLlcOperHprLSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 8), SAPType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperHprLSAP.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperHprLSAP.setDescription('The local SAP value used on this CMPC LLC connection TG for HPR traffic. This value is extracted from XID3s during the connection negotiation between VTAM and the remote node.')
cipTgLlcOperHprRSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 9), SAPType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperHprRSAP.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperHprRSAP.setDescription('The remote SAP value used on this LLC connection TG for HPR traffic. This value is extracted from XID3s during the connection negotiation between the host and the remote node.')
cipTgLlcOperRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperRIF.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperRIF.setDescription('The Routing Information Field for this LLC connection TG. If the connection is not established using Source-Route Bridging, then this value will have a zero length.')
cipTgLlcOperLocalVcToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 11), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperLocalVcToken.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperLocalVcToken.setDescription("The CMCC's token/handle for this CMPC+ TG APPN VC. This token is included in the APPN protocol virtual circuit activation message sent to the host.")
cipTgLlcOperRemoteVcToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 12), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperRemoteVcToken.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperRemoteVcToken.setDescription("The host's token/handle for this CMPC+ TG APPN VC. This token is extracted from the APPN protocol virtual circuit activation message received from the host.")
cipTgLlcOperLocalConnToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 13), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperLocalConnToken.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperLocalConnToken.setDescription("The CMCC's token/handle for this CMPC+ TG APPN connection. This token is included in the APPN connection activation message sent to the host.")
cipTgLlcOperRemoteConnToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 14), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperRemoteConnToken.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperRemoteConnToken.setDescription("The host's token/handle for this CMPC+ TG APPN connection. This token is extracted from the APPN connection activation message received from the host.")
cipTgLlcOperVcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperVcStatus.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperVcStatus.setDescription('Activation state of this CMPC+ TG APPN virtual circuit. reset - Awaiting an MPC+ APPN virtual circuit activate indication from the host. active - An MPC+ APPN virtual circuit active indication has been receive from the host and CMCC has sent an MPC+ APPN virtual circuit active indication to the host. The MPC+ APPN virtual circuit is now active.')
cipTgLlcOperConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("connRequestSent", 2), ("pendingActive", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcOperConnStatus.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcOperConnStatus.setDescription('Activation state of this CMPC+ TG APPN connection. reset - Awaiting MPC+ APPN Connection Request from the host. connRequestSent - The CMCC has sent an MPC+ APPN Connection Request to the host and is awaiting an MPC+ APPN Connection Confirm from the host. pendingActive - The CMCC is waiting for the host to enable traffic flow on the APPN connection. active - The MPC+ APPN connection is active and both the CMCC and the host have enabled traffic flow on the connection.')
cipTgLlcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3), )
if mibBuilder.loadTexts: cipTgLlcStatsTable.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsTable.setDescription('This table contains statistical information for each instance of a CMCC LLC connection Transmission Group (TG). Each instance of this table is created for every LLC TG with a unique tg-name configured on a CMCC card.')
cipTgLlcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1), )
cipTgLlcAdminEntry.registerAugmentions(("CISCO-CIPTG-MIB", "cipTgLlcStatsEntry"))
cipTgLlcStatsEntry.setIndexNames(*cipTgLlcAdminEntry.getIndexNames())
if mibBuilder.loadTexts: cipTgLlcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsEntry.setDescription('A list of CMCC LLC TG statistical objects.')
cipTgLlcStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsIFramesIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsIFramesIn.setDescription('The number of LLC I-Frames received by this LLC connection TG from the remote network node.')
cipTgLlcStatsIFrameBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 2), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsIFrameBytesIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsIFrameBytesIn.setDescription('The number of LLC I-Frame bytes received by this LLC connection TG from the remote network node.')
cipTgLlcStatsHCIFrameBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsHCIFrameBytesIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsHCIFrameBytesIn.setDescription('The number of LLC I-Frame bytes received by this LLC connection TG from the remote network node. NOTE: This is a 64 bit (High Capacity) version of the cipTgLlcStatsIFrameBytesIn counter for use with SNMP Version 2 Managers')
cipTgLlcStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsIFramesOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsIFramesOut.setDescription('The number of LLC I-Frames sent by this LLC connection TG to the remote network node.')
cipTgLlcStatsIFrameBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsIFrameBytesOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsIFrameBytesOut.setDescription('The number of LLC I-Frame bytes sent by this LLC connection TG to the remote network node.')
cipTgLlcStatsHCIFrameBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsHCIFrameBytesOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsHCIFrameBytesOut.setDescription('The number of LLC I-Frame bytes sent by this LLC connection TG to the remote network node. NOTE: This is a 64 bit (High Capacity) version of the cipTgLlcStatsIFrameBytesOut counter for use with SNMP Version 2 Managers')
cipTgLlcStatsUIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsUIFramesIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsUIFramesIn.setDescription('Number of LLC UI Frames (HPR frames) received by this CMPC LLC connection TG from the remote network node.')
cipTgLlcStatsUIFrameBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 8), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsUIFrameBytesIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsUIFrameBytesIn.setDescription('The number of LLC UI-Frame bytes received by this LLC connection TG from the remote network node.')
cipTgLlcStatsHCUIFrameBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsHCUIFrameBytesIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsHCUIFrameBytesIn.setDescription('The number of LLC UI-Frame bytes received by this LLC connection TG from the remote network node. NOTE: This is a 64 bit (High Capacity) version of the cipTgLlcStatsUIFrameBytesIn counter for use with SNMP Version 2 Managers')
cipTgLlcStatsUIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsUIFramesOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsUIFramesOut.setDescription('Number of LLC UI Frames (HPR frames) sent by this CMPC LLC connection TG to the remote network node.')
cipTgLlcStatsUIFrameBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 11), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsUIFrameBytesOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsUIFrameBytesOut.setDescription('The number of LLC UI-Frame bytes sent by this LLC connection TG to the remote network node.')
cipTgLlcStatsHCUIFrameBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsHCUIFrameBytesOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsHCUIFrameBytesOut.setDescription('The number of LLC UI-Frame bytes sent by this LLC connection TG to the remote network node. NOTE: This is a 64 bit (High Capacity) version of the cipTgLlcStatsIFrameBytesOut counter for use with SNMP Version 2 Managers')
cipTgLlcStatsTestCmdsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsTestCmdsOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsTestCmdsOut.setDescription('Number of TEST commands sent by this LLC TG to the configured remote MAC address.')
cipTgLlcStatsTestRspsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsTestRspsIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsTestRspsIn.setDescription('Number of TEST responses received by this LLC TG.')
cipTgLlcStatsXidCmdsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsXidCmdsIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsXidCmdsIn.setDescription('Number of XID commands received by this LLC TG.')
cipTgLlcStatsXidCmdsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsXidCmdsOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsXidCmdsOut.setDescription('Number of XID commands sent by this LLC TG.')
cipTgLlcStatsXidRspsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsXidRspsIn.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsXidRspsIn.setDescription('Number of XID responses received by this LLC TG.')
cipTgLlcStatsXidRspsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsXidRspsOut.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsXidRspsOut.setDescription('Number of XID responses sent by this LLC TG.')
cipTgLlcStatsConnNumberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsConnNumberRecv.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsConnNumberRecv.setDescription('Number of connection-oriented MPC+ frames received from the host over this TG.')
cipTgLlcStatsConnNumberSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgLlcStatsConnNumberSent.setStatus('current')
if mibBuilder.loadTexts: cipTgLlcStatsConnNumberSent.setDescription('Number of connection-oriented MPC+ frames sent to the host over this TG.')
cipTgIpAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 1), )
if mibBuilder.loadTexts: cipTgIpAdminTable.setStatus('current')
if mibBuilder.loadTexts: cipTgIpAdminTable.setDescription('This table contains CMCC configuration information for each instance of a CMPC+ IP Transmission Group (TG). An instance of this table is created for every CMPC+ IP configured on a CMCC card.')
cipTgIpAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CIPTG-MIB", "cipTgIpAdminName"))
if mibBuilder.loadTexts: cipTgIpAdminEntry.setStatus('current')
if mibBuilder.loadTexts: cipTgIpAdminEntry.setDescription('A list of CMCC IP TG configuration values.')
cipTgIpAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 1, 1, 1), ChannelTgName())
if mibBuilder.loadTexts: cipTgIpAdminName.setStatus('current')
if mibBuilder.loadTexts: cipTgIpAdminName.setDescription('This is the name for this instance of an CMPC+ IP transmission group (TG).')
cipTgIpAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcpIp", 1), ("hsas", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgIpAdminType.setStatus('current')
if mibBuilder.loadTexts: cipTgIpAdminType.setDescription('The type of host IP stack that is using this TG.')
cipTgIpAdminRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgIpAdminRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: cipTgIpAdminRemoteIpAddr.setDescription('The IP address of the Host IP stack using this TG. The CMCC will forward packets with this IP address as the destination IP address up to the host IP stack.')
cipTgIpAdminLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgIpAdminLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: cipTgIpAdminLocalIpAddr.setDescription('The IP address of the CMCC for this TG.')
cipTgIpAdminBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgIpAdminBroadcast.setStatus('current')
if mibBuilder.loadTexts: cipTgIpAdminBroadcast.setDescription('Indicates whether or not broadcast packets are to be sent to the host.')
cipTgIpAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipTgIpAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipTgIpAdminRowStatus.setDescription('This object is used by a Management Station to create or delete the row entry in the cipTgIpAdminTable following the the RowStatus textual convention.')
cipTgIpOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 2), )
if mibBuilder.loadTexts: cipTgIpOperTable.setStatus('current')
if mibBuilder.loadTexts: cipTgIpOperTable.setDescription('This table contains operational information for a CMPC+ IP TG instance. An instance of this table is created for every CMPC+ IP TG.')
cipTgIpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 2, 1), )
cipTgIpAdminEntry.registerAugmentions(("CISCO-CIPTG-MIB", "cipTgIpOperEntry"))
cipTgIpOperEntry.setIndexNames(*cipTgIpAdminEntry.getIndexNames())
if mibBuilder.loadTexts: cipTgIpOperEntry.setStatus('current')
if mibBuilder.loadTexts: cipTgIpOperEntry.setDescription('A list of CMCC IP TG operational values.')
cipTgIpOperLocalVcToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 2, 1, 1), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpOperLocalVcToken.setStatus('current')
if mibBuilder.loadTexts: cipTgIpOperLocalVcToken.setDescription("The CMCC's token/handle for this CMPC+ TG IP VC. This token is included in the IP protocol virtual circuit activation message sent to the host.")
cipTgIpOperRemoteVcToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 2, 1, 2), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpOperRemoteVcToken.setStatus('current')
if mibBuilder.loadTexts: cipTgIpOperRemoteVcToken.setDescription("The host's token/handle for this CMPC+ TG IP VC. This token is extracted from the IP protocol virtual circuit activation message received from the host.")
cipTgIpOperLocalConnToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 2, 1, 3), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpOperLocalConnToken.setStatus('current')
if mibBuilder.loadTexts: cipTgIpOperLocalConnToken.setDescription("The CMCC's token/handle for this CMPC+ TG IP connection. This token is included in the IP connection activation message sent to the host.")
cipTgIpOperRemoteConnToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 2, 1, 4), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpOperRemoteConnToken.setStatus('current')
if mibBuilder.loadTexts: cipTgIpOperRemoteConnToken.setDescription("The host's token/handle for this CMPC+ TG IP connection. This token is extracted from the IP connection activation message received from the host.")
cipTgIpOperVcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpOperVcStatus.setStatus('current')
if mibBuilder.loadTexts: cipTgIpOperVcStatus.setDescription('Activation state of this CMPC+ TG IP virtual circuit. reset - Awaiting an MPC+ IP virtual circuit activate indication from the host. active - An MPC+ IP virtual circuit active indication has been receive from the host and CMCC has sent an MPC+ IP virtual circuit active indication to the host. The MPC+ IP virtual circuit is now active.')
cipTgIpOperConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("connRequestSent", 2), ("pendingActive", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpOperConnStatus.setStatus('current')
if mibBuilder.loadTexts: cipTgIpOperConnStatus.setDescription('Activation state of this CMPC+ TG IP connection. reset - Awaiting MPC+ IP Connection Request from the host. connRequestSent - The CMCC has sent an MPC+ IP Connection Request to the host and is awaiting an MPC+ IP Connection Confirm from the host. pendingActive - The CMCC is waiting for the host to enable traffic flow on the IP connection. active - The MPC+ IP connection is active and both the CMCC and the host have enabled traffic flow on the connection.')
cipTgIpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 3), )
if mibBuilder.loadTexts: cipTgIpStatsTable.setStatus('current')
if mibBuilder.loadTexts: cipTgIpStatsTable.setDescription('This table contains statistical information for each instance of a CMCC CMPC+ IP Transmission Group (TG). Each instance of this table is created for every CMPC+ IP TG with a unique tg-name configured on a CMCC card.')
cipTgIpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 3, 1), )
cipTgIpAdminEntry.registerAugmentions(("CISCO-CIPTG-MIB", "cipTgIpStatsEntry"))
cipTgIpStatsEntry.setIndexNames(*cipTgIpAdminEntry.getIndexNames())
if mibBuilder.loadTexts: cipTgIpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cipTgIpStatsEntry.setDescription('A list of CMCC CMPC+ IP TG statistical objects.')
cipTgIpStatsPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpStatsPacketsIn.setStatus('current')
if mibBuilder.loadTexts: cipTgIpStatsPacketsIn.setDescription('The number of IP packets received from the IP network for this CMPC+ IP TG.')
cipTgIpStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 3, 1, 2), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: cipTgIpStatsBytesIn.setDescription('The number of bytes received in IP packets from the IP network for this CMPC+ IP TG.')
cipTgIpStatsHCBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 3, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpStatsHCBytesIn.setStatus('current')
if mibBuilder.loadTexts: cipTgIpStatsHCBytesIn.setDescription('The number of bytes received in IP packets from the IP network for this CMPC+ IP TG. Note: This is a 64-bit (High Capacity) version of cipTgIpStatsBytesIn counter used for use with SNMP Version 2 Managers. ')
cipTgIpStatsPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpStatsPacketsOut.setStatus('current')
if mibBuilder.loadTexts: cipTgIpStatsPacketsOut.setDescription('The number of IP packets sent by the host to the IP network over this CMPC+ IP TG.')
cipTgIpStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 3, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: cipTgIpStatsBytesOut.setDescription('The number of bytes sent in IP packets from host to the IP network over this CMPC+ IP TG.')
cipTgIpStatsHCBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 2, 3, 1, 6), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgIpStatsHCBytesOut.setStatus('current')
if mibBuilder.loadTexts: cipTgIpStatsHCBytesOut.setDescription('The number of bytes sent in IP packets from host to the IP network over this CMPC+ IP TG. Note: This is a 64-bit (High Capacity) version of cipTgIpStatsBytesOut counter used for use with SNMP Version 2 Managers. ')
cipTgCmgrOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1), )
if mibBuilder.loadTexts: cipTgCmgrOperTable.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperTable.setDescription('This table contains operational information for a CMPC+ TG Connection Manager instance. An instance of this table is created for every CMPC+ TG.')
cipTgCmgrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CIPTG-MIB", "cipTgCmgrOperName"))
if mibBuilder.loadTexts: cipTgCmgrOperEntry.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperEntry.setDescription('A list of CMCC TG Connection Manager operational values.')
cipTgCmgrOperName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 1), ChannelTgName())
if mibBuilder.loadTexts: cipTgCmgrOperName.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperName.setDescription('This is the name for this instance of a CMPC+ TG.')
cipTgCmgrOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("pointToMultiPoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperType.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperType.setDescription('Type of Connection Manager for TG. pointToPoint - One MPC+ connection per TG is supported between the host and the CMCC. pointToMultiPoint - Multiple MPC+ connections per TG are supported between the host and the CMCC.')
cipTgCmgrOperLocalGrToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 3), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperLocalGrToken.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperLocalGrToken.setDescription("The CMCC's Group Token for this CMPC+ TG. This token is included in the XID2 sent by the CMCC. Requests for Connection Manager virtual circuit and Connection activation and deactivation flow on this token.")
cipTgCmgrOperRemoteGrToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 4), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperRemoteGrToken.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperRemoteGrToken.setDescription("The host's Group Token for this CMPC+ TG. This token is extracted from the XID2 sent by the the host to the CMCC. Requests for Connection Manager virtual circuit and Connection activation and deactivation flow on this token.")
cipTgCmgrOperLocalVcToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 5), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperLocalVcToken.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperLocalVcToken.setDescription("The CMCC's token/handle for this CMPC+ TG Cmgr VC. This token is included in the Connection Manager virtual circuit activation message sent to the host.")
cipTgCmgrOperRemoteVcToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 6), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperRemoteVcToken.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperRemoteVcToken.setDescription("The host's token/handle for this CMPC+ TG Cmgr VC. This token is extracted from the Connection Manager virtual circuit activation message received from the host.")
cipTgCmgrOperLocalConnToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 7), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperLocalConnToken.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperLocalConnToken.setDescription("The CMCC's token/handle for this CMPC+ TG Cmgr connection. This token is included in the Cmgr connection activation message sent to the host.")
cipTgCmgrOperRemoteConnToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 8), ChannelTgToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperRemoteConnToken.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperRemoteConnToken.setDescription("The host's token/handle for this CMPC+ TG Cmgr connection. This token is extracted from the Cmgr connection activation message received from the host.")
cipTgCmgrOperVcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperVcStatus.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperVcStatus.setDescription('Activation state of the CMPC+ TG connection Manager virtual circuit. reset - Awaiting virtual circuit activate indication from the host. active - A virtual circuit active indication has been receive from the host and CMCC has sent a virtual circuit active indication to the host. The virtual circuit is now active.')
cipTgCmgrOperConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 73, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipTgCmgrOperConnStatus.setStatus('current')
if mibBuilder.loadTexts: cipTgCmgrOperConnStatus.setDescription('Activation state of the CMPC+ TG Connection Manager connection. reset - Awaiting Cmgr Connection Request from the host. active - A Cmgr Connection Request has been receive from the host and CMCC has returned Cmgr Connection Request to the host. The Cmgr connection is now active.')
ciscoCipTgMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 73, 3))
ciscoCipTgMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 73, 3, 1))
ciscoCipTgMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 73, 3, 2))
ciscoCipTgMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 73, 3, 1, 1)).setObjects(("CISCO-CIPTG-MIB", "ciscoCipTgLlcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipTgMibCompliance = ciscoCipTgMibCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCipTgMibCompliance.setDescription('The compliance statement for the CMCC TG feature.')
ciscoCipTgMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 73, 3, 1, 2)).setObjects(("CISCO-CIPTG-MIB", "ciscoCipTgLlcGroupRev1"), ("CISCO-CIPTG-MIB", "ciscoCipTgIpGroup"), ("CISCO-CIPTG-MIB", "ciscoCipTgCmgrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipTgMibComplianceRev1 = ciscoCipTgMibComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCipTgMibComplianceRev1.setDescription('The compliance statement for the CMCC TG feature.')
ciscoCipTgLlcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 73, 3, 2, 2)).setObjects(("CISCO-CIPTG-MIB", "cipTgLlcAdminLanType"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminAdaptNo"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminLSAP"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminRMAC"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminRSAP"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminRowStatus"), ("CISCO-CIPTG-MIB", "cipTgLlcOperState"), ("CISCO-CIPTG-MIB", "cipTgLlcOperTGN"), ("CISCO-CIPTG-MIB", "cipTgLlcOperLocalCP"), ("CISCO-CIPTG-MIB", "cipTgLlcOperRemoteCP"), ("CISCO-CIPTG-MIB", "cipTgLlcOperMaxIn"), ("CISCO-CIPTG-MIB", "cipTgLlcOperMaxOut"), ("CISCO-CIPTG-MIB", "cipTgLlcOperHpr"), ("CISCO-CIPTG-MIB", "cipTgLlcOperHprLSAP"), ("CISCO-CIPTG-MIB", "cipTgLlcOperHprRSAP"), ("CISCO-CIPTG-MIB", "cipTgLlcOperRIF"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsIFramesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsIFrameBytesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsHCIFrameBytesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsIFramesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsIFrameBytesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsHCIFrameBytesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsUIFramesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsUIFrameBytesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsHCUIFrameBytesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsUIFramesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsUIFrameBytesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsHCUIFrameBytesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsTestCmdsOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsTestRspsIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsXidCmdsIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsXidCmdsOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsXidRspsIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsXidRspsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipTgLlcGroup = ciscoCipTgLlcGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCipTgLlcGroup.setDescription('A collection of objects providing CMCC LLC TG Administration, Operational status and Statistics.')
ciscoCipTgLlcGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 73, 3, 2, 3)).setObjects(("CISCO-CIPTG-MIB", "cipTgLlcAdminLanType"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminAdaptNo"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminLSAP"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminRMAC"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminRSAP"), ("CISCO-CIPTG-MIB", "cipTgLlcAdminRowStatus"), ("CISCO-CIPTG-MIB", "cipTgLlcOperState"), ("CISCO-CIPTG-MIB", "cipTgLlcOperTGN"), ("CISCO-CIPTG-MIB", "cipTgLlcOperLocalCP"), ("CISCO-CIPTG-MIB", "cipTgLlcOperRemoteCP"), ("CISCO-CIPTG-MIB", "cipTgLlcOperMaxIn"), ("CISCO-CIPTG-MIB", "cipTgLlcOperMaxOut"), ("CISCO-CIPTG-MIB", "cipTgLlcOperHpr"), ("CISCO-CIPTG-MIB", "cipTgLlcOperHprLSAP"), ("CISCO-CIPTG-MIB", "cipTgLlcOperHprRSAP"), ("CISCO-CIPTG-MIB", "cipTgLlcOperRIF"), ("CISCO-CIPTG-MIB", "cipTgLlcOperLocalVcToken"), ("CISCO-CIPTG-MIB", "cipTgLlcOperRemoteVcToken"), ("CISCO-CIPTG-MIB", "cipTgLlcOperLocalConnToken"), ("CISCO-CIPTG-MIB", "cipTgLlcOperRemoteConnToken"), ("CISCO-CIPTG-MIB", "cipTgLlcOperVcStatus"), ("CISCO-CIPTG-MIB", "cipTgLlcOperConnStatus"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsIFramesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsIFrameBytesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsHCIFrameBytesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsIFramesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsIFrameBytesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsHCIFrameBytesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsUIFramesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsUIFrameBytesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsHCUIFrameBytesIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsUIFramesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsUIFrameBytesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsHCUIFrameBytesOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsTestCmdsOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsTestRspsIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsXidCmdsIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsXidCmdsOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsXidRspsIn"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsXidRspsOut"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsConnNumberRecv"), ("CISCO-CIPTG-MIB", "cipTgLlcStatsConnNumberSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipTgLlcGroupRev1 = ciscoCipTgLlcGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoCipTgLlcGroupRev1.setDescription('A collection of objects providing CMCC LLC TG Administration, Operational status and Statistics.')
ciscoCipTgIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 73, 3, 2, 4)).setObjects(("CISCO-CIPTG-MIB", "cipTgIpAdminType"), ("CISCO-CIPTG-MIB", "cipTgIpAdminRemoteIpAddr"), ("CISCO-CIPTG-MIB", "cipTgIpAdminLocalIpAddr"), ("CISCO-CIPTG-MIB", "cipTgIpAdminBroadcast"), ("CISCO-CIPTG-MIB", "cipTgIpAdminRowStatus"), ("CISCO-CIPTG-MIB", "cipTgIpOperLocalVcToken"), ("CISCO-CIPTG-MIB", "cipTgIpOperRemoteVcToken"), ("CISCO-CIPTG-MIB", "cipTgIpOperLocalConnToken"), ("CISCO-CIPTG-MIB", "cipTgIpOperRemoteConnToken"), ("CISCO-CIPTG-MIB", "cipTgIpOperVcStatus"), ("CISCO-CIPTG-MIB", "cipTgIpOperConnStatus"), ("CISCO-CIPTG-MIB", "cipTgIpStatsPacketsIn"), ("CISCO-CIPTG-MIB", "cipTgIpStatsBytesIn"), ("CISCO-CIPTG-MIB", "cipTgIpStatsHCBytesIn"), ("CISCO-CIPTG-MIB", "cipTgIpStatsPacketsOut"), ("CISCO-CIPTG-MIB", "cipTgIpStatsBytesOut"), ("CISCO-CIPTG-MIB", "cipTgIpStatsHCBytesOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipTgIpGroup = ciscoCipTgIpGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCipTgIpGroup.setDescription('A collection of objects providing CMCC IP TG Administration, Operational status and Statistics.')
ciscoCipTgCmgrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 73, 3, 2, 5)).setObjects(("CISCO-CIPTG-MIB", "cipTgCmgrOperType"), ("CISCO-CIPTG-MIB", "cipTgCmgrOperLocalGrToken"), ("CISCO-CIPTG-MIB", "cipTgCmgrOperRemoteGrToken"), ("CISCO-CIPTG-MIB", "cipTgCmgrOperLocalVcToken"), ("CISCO-CIPTG-MIB", "cipTgCmgrOperRemoteVcToken"), ("CISCO-CIPTG-MIB", "cipTgCmgrOperLocalConnToken"), ("CISCO-CIPTG-MIB", "cipTgCmgrOperRemoteConnToken"), ("CISCO-CIPTG-MIB", "cipTgCmgrOperVcStatus"), ("CISCO-CIPTG-MIB", "cipTgCmgrOperConnStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipTgCmgrGroup = ciscoCipTgCmgrGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCipTgCmgrGroup.setDescription('A collection of objects providing CMCC TG Connection Manager Operational status.')
mibBuilder.exportSymbols("CISCO-CIPTG-MIB", cipTgIpStatsHCBytesIn=cipTgIpStatsHCBytesIn, cipTgLlcAdminRMAC=cipTgLlcAdminRMAC, cipTgLlcOperVcStatus=cipTgLlcOperVcStatus, cipTgLlcOperHprRSAP=cipTgLlcOperHprRSAP, ciscoCipTgMibCompliances=ciscoCipTgMibCompliances, cipTgLlcStatsUIFrameBytesOut=cipTgLlcStatsUIFrameBytesOut, ChannelTgName=ChannelTgName, cipTgLlcOperMaxIn=cipTgLlcOperMaxIn, cipTgLlcOperRIF=cipTgLlcOperRIF, cipTgIpStatsPacketsOut=cipTgIpStatsPacketsOut, cipTgLlcStatsHCIFrameBytesIn=cipTgLlcStatsHCIFrameBytesIn, cipTgIpOperLocalVcToken=cipTgIpOperLocalVcToken, ciscoCipTgMibConformance=ciscoCipTgMibConformance, ChannelTgToken=ChannelTgToken, cipTgIpAdminLocalIpAddr=cipTgIpAdminLocalIpAddr, cipTgLlcOperRemoteCP=cipTgLlcOperRemoteCP, cipTgLlcStatsUIFrameBytesIn=cipTgLlcStatsUIFrameBytesIn, cipTgIp=cipTgIp, PYSNMP_MODULE_ID=ciscoCipTgMIB, cipTgLlcAdminLanType=cipTgLlcAdminLanType, cipTgCmgrOperLocalGrToken=cipTgCmgrOperLocalGrToken, cipTgIpStatsTable=cipTgIpStatsTable, cipTgIpAdminRowStatus=cipTgIpAdminRowStatus, cipTgLlcStatsUIFramesOut=cipTgLlcStatsUIFramesOut, cipTgLlcStatsHCUIFrameBytesIn=cipTgLlcStatsHCUIFrameBytesIn, ciscoCipTgLlcGroup=ciscoCipTgLlcGroup, cipTgLlcOperLocalVcToken=cipTgLlcOperLocalVcToken, cipTgLlcOperMaxOut=cipTgLlcOperMaxOut, cipTgCmgrOperType=cipTgCmgrOperType, cipTgLlc=cipTgLlc, cipTgLlcStatsConnNumberRecv=cipTgLlcStatsConnNumberRecv, cipTgLlcOperRemoteVcToken=cipTgLlcOperRemoteVcToken, cipTgCmgrOperRemoteGrToken=cipTgCmgrOperRemoteGrToken, cipTgLlcStatsIFrameBytesIn=cipTgLlcStatsIFrameBytesIn, cipTgIpOperEntry=cipTgIpOperEntry, cipTgLlcAdminRowStatus=cipTgLlcAdminRowStatus, cipTgLlcStatsHCUIFrameBytesOut=cipTgLlcStatsHCUIFrameBytesOut, cipTgLlcAdminTable=cipTgLlcAdminTable, cipTgLlcStatsIFramesOut=cipTgLlcStatsIFramesOut, cipTgLlcAdminEntry=cipTgLlcAdminEntry, cipTgIpStatsBytesIn=cipTgIpStatsBytesIn, cipTgIpOperVcStatus=cipTgIpOperVcStatus, cipTgIpAdminType=cipTgIpAdminType, cipTgIpAdminTable=cipTgIpAdminTable, cipTgIpOperRemoteConnToken=cipTgIpOperRemoteConnToken, cipTgLlcStatsUIFramesIn=cipTgLlcStatsUIFramesIn, cipTgLlcAdminAdaptNo=cipTgLlcAdminAdaptNo, cipTgIpStatsBytesOut=cipTgIpStatsBytesOut, cipTgLlcStatsXidRspsIn=cipTgLlcStatsXidRspsIn, cipTgLlcOperRemoteConnToken=cipTgLlcOperRemoteConnToken, cipTgLlcAdminLSAP=cipTgLlcAdminLSAP, cipTgLlcStatsTestRspsIn=cipTgLlcStatsTestRspsIn, cipTgCmgrOperConnStatus=cipTgCmgrOperConnStatus, ciscoCipTgCmgrGroup=ciscoCipTgCmgrGroup, cipTgIpStatsHCBytesOut=cipTgIpStatsHCBytesOut, cipTgLlcAdminName=cipTgLlcAdminName, cipTgIpOperRemoteVcToken=cipTgIpOperRemoteVcToken, cipTgIpAdminRemoteIpAddr=cipTgIpAdminRemoteIpAddr, cipTgCmgr=cipTgCmgr, cipTgIpStatsEntry=cipTgIpStatsEntry, cipTgLlcOperLocalCP=cipTgLlcOperLocalCP, cipTgCmgrOperLocalConnToken=cipTgCmgrOperLocalConnToken, cipTgLlcOperConnStatus=cipTgLlcOperConnStatus, cipTgLlcStatsConnNumberSent=cipTgLlcStatsConnNumberSent, cipTgLlcOperHprLSAP=cipTgLlcOperHprLSAP, cipTgLlcStatsEntry=cipTgLlcStatsEntry, cipTgLlcOperEntry=cipTgLlcOperEntry, cipTgLlcStatsXidCmdsIn=cipTgLlcStatsXidCmdsIn, cipTgLlcStatsHCIFrameBytesOut=cipTgLlcStatsHCIFrameBytesOut, ciscoCipTgLlcGroupRev1=ciscoCipTgLlcGroupRev1, cipTgIpStatsPacketsIn=cipTgIpStatsPacketsIn, cipTgCmgrOperEntry=cipTgCmgrOperEntry, ciscoCipTgMibGroups=ciscoCipTgMibGroups, ciscoCipTgMibComplianceRev1=ciscoCipTgMibComplianceRev1, ciscoCipTgMibCompliance=ciscoCipTgMibCompliance, cipTgLlcStatsTable=cipTgLlcStatsTable, cipTgCmgrOperTable=cipTgCmgrOperTable, cipTgCmgrOperVcStatus=cipTgCmgrOperVcStatus, ciscoCipTgIpGroup=ciscoCipTgIpGroup, cipTgLlcStatsXidRspsOut=cipTgLlcStatsXidRspsOut, cipTgObjects=cipTgObjects, cipTgIpOperConnStatus=cipTgIpOperConnStatus, cipTgLlcOperHpr=cipTgLlcOperHpr, cipTgLlcOperTable=cipTgLlcOperTable, cipTgIpAdminEntry=cipTgIpAdminEntry, cipTgCmgrOperLocalVcToken=cipTgCmgrOperLocalVcToken, cipTgCmgrOperName=cipTgCmgrOperName, cipTgLlcOperLocalConnToken=cipTgLlcOperLocalConnToken, cipTgCmgrOperRemoteConnToken=cipTgCmgrOperRemoteConnToken, cipTgLlcStatsXidCmdsOut=cipTgLlcStatsXidCmdsOut, cipTgCmgrOperRemoteVcToken=cipTgCmgrOperRemoteVcToken, cipTgLlcStatsIFramesIn=cipTgLlcStatsIFramesIn, cipTgLlcAdminRSAP=cipTgLlcAdminRSAP, cipTgLlcStatsTestCmdsOut=cipTgLlcStatsTestCmdsOut, cipTgLlcOperTGN=cipTgLlcOperTGN, cipTgLlcOperState=cipTgLlcOperState, cipTgIpAdminBroadcast=cipTgIpAdminBroadcast, cipTgIpOperLocalConnToken=cipTgIpOperLocalConnToken, ciscoCipTgMIB=ciscoCipTgMIB, cipTgIpAdminName=cipTgIpAdminName, cipTgIpOperTable=cipTgIpOperTable, cipTgLlcStatsIFrameBytesOut=cipTgLlcStatsIFrameBytesOut)
