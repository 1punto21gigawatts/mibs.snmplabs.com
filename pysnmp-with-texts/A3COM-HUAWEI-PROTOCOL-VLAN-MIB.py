#
# PySNMP MIB module A3COM-HUAWEI-PROTOCOL-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-PROTOCOL-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Counter64, NotificationType, IpAddress, ObjectIdentity, Gauge32, Integer32, TimeTicks, iso, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Counter64", "NotificationType", "IpAddress", "ObjectIdentity", "Gauge32", "Integer32", "TimeTicks", "iso", "ModuleIdentity", "MibIdentifier")
RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
h3cProtocolVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16))
h3cProtocolVlan.setRevisions(('2004-08-31 19:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cProtocolVlan.setRevisionsDescriptions(('The initial revision of this MIB module .',))
if mibBuilder.loadTexts: h3cProtocolVlan.setLastUpdated('200408311800Z')
if mibBuilder.loadTexts: h3cProtocolVlan.setOrganization('Huawei 3Com Technology Co., Ltd.')
if mibBuilder.loadTexts: h3cProtocolVlan.setContactInfo('Platform Team Huawei 3Com Technology Co., Ltd. Hai-Dian District Beijing P.R. China http://www.huawei-3com.com Zip:100085 ')
if mibBuilder.loadTexts: h3cProtocolVlan.setDescription('This MIB contains the objects for managing the protocol-based vlan configurations.')
class H3cvProtocolVlanProtocolType(TextualConvention, Integer32):
    description = ' Contains protocols both for layer3 and layer2. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 101, 102, 103))
    namedValues = NamedValues(("ip", 1), ("ipx", 2), ("at", 3), ("ipv6", 4), ("mode-llc", 101), ("mode-snap", 102), ("mode-ethernetii", 103))

class H3cvProtocolVlanProtocolSubType(TextualConvention, Integer32):
    description = ' combine with H3cvProtocolVlanProtocolType. ethernetii(2), llc(3), raw(4), snap(5) are used when the value of H3cvProtocolVlanProtocolType is for layer 3 protocols. etype(6) is used when the value of H3cvProtocolVlanProtocolType is for layer 2 protocols. Detail information refers to DESCRIPTION part of h3cProtocolVlanProtocolTypeValue. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notused", 1), ("ethernetii", 2), ("llc", 3), ("raw", 4), ("snap", 5), ("etype", 6))

h3cProtocolVlanOperate = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1))
h3cProtocolNumAllVlan = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cProtocolNumAllVlan.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolNumAllVlan.setDescription('The maximum number of protocols that can be configured on all vlans. This number may vary with products.')
h3cProtocolNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cProtocolNumPerVlan.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolNumPerVlan.setDescription('The maximum number of protocols that can be configured per vlan. This number may vary with products.')
h3cProtocolNumAllPort = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cProtocolNumAllPort.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolNumAllPort.setDescription('The maximum number of protocols that can be applied on all ports. This number may vary with products.')
h3cProtocolNumPerPort = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cProtocolNumPerPort.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolNumPerPort.setDescription('The maximum number of protocols that can be applied to each port. This number may vary with products.')
h3cProtocolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 5), )
if mibBuilder.loadTexts: h3cProtocolVlanTable.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanTable.setDescription('Protocol-based VLAN configuration table.')
h3cProtocolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanVlanId"), (0, "A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanProtocolIndex"))
if mibBuilder.loadTexts: h3cProtocolVlanEntry.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanEntry.setDescription('Protocol-based VLAN configuration entry.')
h3cProtocolVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cProtocolVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanVlanId.setDescription('Vlan ID.')
h3cProtocolVlanProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cProtocolVlanProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanProtocolIndex.setDescription('The protocol index value of a row in this table in the range of [0..h3cProtocolNumPerVlan-1]. This object may not be provided during creation. In this case, a number is assigned by system automatically.')
h3cProtocolVlanProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 5, 1, 3), H3cvProtocolVlanProtocolType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cProtocolVlanProtocolType.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanProtocolType.setDescription(' Specify protocol types supported by a protocol-based VLAN. Now protocols supported on layer 3 are ip, ipx, at, ipv6, etc. Now protocols supported on layer 2 are llc, snap, ethernetii, etc. For details, see description of h3cProtocolVlanProtocolTypeValue. ')
h3cProtocolVlanProtocolSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 5, 1, 4), H3cvProtocolVlanProtocolSubType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cProtocolVlanProtocolSubType.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanProtocolSubType.setDescription(' See description of h3cProtocolVlanProtocolTypeValue. ')
h3cProtocolVlanProtocolTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cProtocolVlanProtocolTypeValue.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanProtocolTypeValue.setDescription(" The value of the configured protocol type. By default, semicolon(;) is used as a seperator between different parts in the content of the object. The relationship among h3cProtocolVlanProtocolType, h3cProtocolVlanProtocolSubType and h3cProtocolVlanProtocolTypeValue is as follows. |--------------------------------------------------------------------------------------------| | h3cProtocolVlan- | h3cProtocolVlan- | h3cProtocolVlanProtocolTypeValue | | ProtocolType | ProtocolSubType | | |------------------|------------------|------------------------------------------------------| | ip | notused | IP address with subnet mask in dotted decimal format.| | | | such as 10.10.11.12;255.255.0.0. By default,subnet | | | | mask is 255.255.255.0 . | |------------------|------------------|------------------------------------------------------| | ipv6 | notused | Zero length string | |------------------|------------------|------------------------------------------------------| | at | notused | Zero length string | |------------------|------------------|------------------------------------------------------| | ipx | ethernetii | Zero length string | | | llc | | | | raw | | | | snap | | |------------------|------------------|------------------------------------------------------| | mode-snap | notused | zero length string | | |------------------|------------------------------------------------------| | | etype | hex string like '600', which means 0x0600. | | | | The range is [0x600..0xffff] | |------------------|------------------|------------------------------------------------------| | mode-ethernetii | notused | zero length string | | |------------------|------------------------------------------------------| | | etype | hex string like '600', which means 0x0600. | | | | The range is [0x600..0xffff] | |------------------|------------------|------------------------------------------------------| | mode-llc | notused | the sequence of different parts is as follows. | | | | [dsap value][;ssap value][dsap value;ssap value] | | | | Both range is [0x00..0xff] | | | | | | | | For example. Suppose value of dsap and ssap are 0x09 | | | | and 0x0a. | | | | If neither dsap or ssap, the string length is zero. | | | | If dsap provided, the string is '09;' or '09' | | | | If ssap provided, the value is ';0a' | | | | If dsap and ssap provided, the value is '09;0a' | |------------------|------------------|------------------------------------------------------| ")
h3cProtocolVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cProtocolVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanRowStatus.setDescription('The row status of this table.')
h3cProtocolVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6), )
if mibBuilder.loadTexts: h3cProtocolVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortTable.setDescription(' Protocol-based VLAN port information table. h3cProtocolVlanPortVlanId refers to h3cProtocolVlanVlanId in h3cProtocolVlanTable. h3cProtocolVlanPortProtocolId refers to h3cProtocolVlanProtocolIndex in h3cProtocolVlanTable. So if the value of h3cProtocolVlanPortVlanId and h3cProtocolVlanPortProtocolId have no corresponding entry in h3cProtocolVlanTable, set operation for this table will fail. Only hybrid ports are supported by this table. Only untagged packets are supported by this table. ')
h3cProtocolVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanPortIndex"), (0, "A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanPortVlanId"), (0, "A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanPortProtocolId"))
if mibBuilder.loadTexts: h3cProtocolVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortEntry.setDescription(' Protocol-based VLAN port information entry. ')
h3cProtocolVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cProtocolVlanPortIndex.setReference('hwLswPortIndex in A3COM-HUAWEI-DEVICE-MIB')
if mibBuilder.loadTexts: h3cProtocolVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortIndex.setDescription(' The maximum number is the total number of the ports supported by device. ')
h3cProtocolVlanPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cProtocolVlanPortVlanId.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortVlanId.setDescription('The protocol-based VLAN ID.')
h3cProtocolVlanPortProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6, 1, 3), Integer32())
if mibBuilder.loadTexts: h3cProtocolVlanPortProtocolId.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortProtocolId.setDescription('The protocol index.')
h3cProtocolVlanPortProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6, 1, 4), H3cvProtocolVlanProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cProtocolVlanPortProtocolType.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortProtocolType.setDescription('Refer to the description of h3cProtocolVlanProtocolType.')
h3cProtocolVlanPortProtocolSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6, 1, 5), H3cvProtocolVlanProtocolSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cProtocolVlanPortProtocolSubType.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortProtocolSubType.setDescription('Refer to the description of h3cProtocolVlanProtocolSubType.')
h3cProtocolVlanPortTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cProtocolVlanPortTypeValue.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortTypeValue.setDescription('Refer to the description of h3cProtocolVlanProtocolTypeValue.')
h3cProtocolVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cProtocolVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortRowStatus.setDescription('The row status of this table.')
h3cDifferentProtocolNumAllPort = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDifferentProtocolNumAllPort.setStatus('current')
if mibBuilder.loadTexts: h3cDifferentProtocolNumAllPort.setDescription('The maximum number of different protocols that can be applied to all ports.')
h3cProtocolVlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 2))
h3cProtocolVlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 2, 1))
h3cProtocolVlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 2, 1, 1)).setObjects(("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanOperateGroup"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanProtocolGroup"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cProtocolVlanCompliance = h3cProtocolVlanCompliance.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanCompliance.setDescription('The compliance statement for protocol vlan MIB.')
h3cProtocolVlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 2, 2))
h3cProtocolVlanOperateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 2, 2, 1)).setObjects(("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolNumAllVlan"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolNumPerVlan"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolNumAllPort"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolNumPerPort"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cDifferentProtocolNumAllPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cProtocolVlanOperateGroup = h3cProtocolVlanOperateGroup.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanOperateGroup.setDescription('A group of scalar objects describing the maximum number.')
h3cProtocolVlanProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 2, 2, 2)).setObjects(("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanProtocolType"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanProtocolSubType"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanProtocolTypeValue"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cProtocolVlanProtocolGroup = h3cProtocolVlanProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanProtocolGroup.setDescription('A group of protocol vlan protocol.')
h3cProtocolVlanPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 16, 2, 2, 3)).setObjects(("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanPortProtocolType"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanPortProtocolSubType"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanPortTypeValue"), ("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", "h3cProtocolVlanPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cProtocolVlanPortGroup = h3cProtocolVlanPortGroup.setStatus('current')
if mibBuilder.loadTexts: h3cProtocolVlanPortGroup.setDescription('A group of protocol vlan port.')
mibBuilder.exportSymbols("A3COM-HUAWEI-PROTOCOL-VLAN-MIB", H3cvProtocolVlanProtocolType=H3cvProtocolVlanProtocolType, h3cProtocolVlanProtocolSubType=h3cProtocolVlanProtocolSubType, h3cProtocolNumPerVlan=h3cProtocolNumPerVlan, h3cProtocolVlanProtocolTypeValue=h3cProtocolVlanProtocolTypeValue, h3cProtocolVlanVlanId=h3cProtocolVlanVlanId, h3cProtocolVlanPortIndex=h3cProtocolVlanPortIndex, h3cProtocolVlanPortTable=h3cProtocolVlanPortTable, h3cProtocolVlanPortTypeValue=h3cProtocolVlanPortTypeValue, h3cProtocolNumAllPort=h3cProtocolNumAllPort, h3cProtocolVlanCompliances=h3cProtocolVlanCompliances, h3cProtocolVlan=h3cProtocolVlan, H3cvProtocolVlanProtocolSubType=H3cvProtocolVlanProtocolSubType, PYSNMP_MODULE_ID=h3cProtocolVlan, h3cProtocolVlanProtocolType=h3cProtocolVlanProtocolType, h3cProtocolVlanConformance=h3cProtocolVlanConformance, h3cProtocolVlanPortVlanId=h3cProtocolVlanPortVlanId, h3cProtocolVlanRowStatus=h3cProtocolVlanRowStatus, h3cProtocolVlanPortRowStatus=h3cProtocolVlanPortRowStatus, h3cProtocolVlanPortProtocolId=h3cProtocolVlanPortProtocolId, h3cProtocolVlanCompliance=h3cProtocolVlanCompliance, h3cProtocolVlanProtocolIndex=h3cProtocolVlanProtocolIndex, h3cProtocolVlanPortProtocolType=h3cProtocolVlanPortProtocolType, h3cProtocolVlanPortEntry=h3cProtocolVlanPortEntry, h3cProtocolVlanPortProtocolSubType=h3cProtocolVlanPortProtocolSubType, h3cDifferentProtocolNumAllPort=h3cDifferentProtocolNumAllPort, h3cProtocolVlanEntry=h3cProtocolVlanEntry, h3cProtocolVlanPortGroup=h3cProtocolVlanPortGroup, h3cProtocolVlanGroups=h3cProtocolVlanGroups, h3cProtocolVlanProtocolGroup=h3cProtocolVlanProtocolGroup, h3cProtocolVlanOperateGroup=h3cProtocolVlanOperateGroup, h3cProtocolVlanTable=h3cProtocolVlanTable, h3cProtocolVlanOperate=h3cProtocolVlanOperate, h3cProtocolNumPerPort=h3cProtocolNumPerPort, h3cProtocolNumAllVlan=h3cProtocolNumAllVlan)
