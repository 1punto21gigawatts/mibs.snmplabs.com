#
# PySNMP MIB module A3COM-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:08:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, enterprises, NotificationType, Gauge32, ObjectIdentity, Unsigned32, MibIdentifier, Bits, Counter32, Counter64, mgmt, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "enterprises", "NotificationType", "Gauge32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "Counter32", "Counter64", "mgmt", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "ModuleIdentity")
DisplayString, MacAddress, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "RowStatus", "TruthValue")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
wlan_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35)).setLabel("wlan-mib")
rivet = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 35, 8))
rivet.setRevisions(('2004-04-27 07:55', '2004-09-01 00:00', '2004-10-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rivet.setRevisionsDescriptions(('Newly Created 3COM AP-PRIVATE-MIB.', 'Modify mibs for VAP, add AuthSupplicantTable and WdsTable', '3Com private-mib OID root is iso(1).org(3).dod(6).internet(1).private(4).enterprises(1).a3Com(43).wlan-mib(35).rivet(8)',))
if mibBuilder.loadTexts: rivet.setLastUpdated('200410120000Z')
if mibBuilder.loadTexts: rivet.setOrganization('3COM Networks, Inc')
if mibBuilder.loadTexts: rivet.setContactInfo('Postal: Phone: E-mail: WWW: ')
if mibBuilder.loadTexts: rivet.setDescription('The management information definitions for the 3COM AP-PRIVATE-MIB.')
enterpriseApSys = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 1))
enterpriseApLineMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 2))
enterpriseApPortMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 3))
enterpriseApFileTransferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 4))
enterpriseApResetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 5))
enterpriseApIpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 6))
enterpriseAPdot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 7))
enterpriseApAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 8))
enterpriseApSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 9))
enterpriseApRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 10))
enterpriseApWebRedirection = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 11))
enterpriseApProxyArp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 12))
enterpriseApRogueAp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 13))
apNotificationTrapTree = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 100))
swHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
if mibBuilder.loadTexts: swHardwareVer.setDescription('Hardware version of the main board.')
swBootRomVer = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
if mibBuilder.loadTexts: swBootRomVer.setDescription('Boot ROM code version of the main board.')
swOpCodeVer = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
if mibBuilder.loadTexts: swOpCodeVer.setDescription('Operation code version of the main board.')
swSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swSerialNumber.setDescription('Serial Number of the Access Point.')
lineTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 2, 1), )
if mibBuilder.loadTexts: lineTable.setStatus('current')
if mibBuilder.loadTexts: lineTable.setDescription('Table of descriptive and status information about configuration of each RS-232 line in this system')
lineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 2, 1, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "lineIndex"))
if mibBuilder.loadTexts: lineEntry.setStatus('current')
if mibBuilder.loadTexts: lineEntry.setDescription('An entry in the table, containing information about configuration in one RS232 line of the Access Point.')
lineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lineIndex.setStatus('current')
if mibBuilder.loadTexts: lineIndex.setDescription('This is defined as RS-232 index.')
lineDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDataBits.setStatus('current')
if mibBuilder.loadTexts: lineDataBits.setDescription('This is defined as number of data bits for the RS232 interface.')
lineParity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("none", 99), ("odd", 1), ("even", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineParity.setStatus('current')
if mibBuilder.loadTexts: lineParity.setDescription('This is defined as parity of the RS232 interface.')
lineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineSpeed.setStatus('current')
if mibBuilder.loadTexts: lineSpeed.setDescription('This is defined as the speed of the RS-232 interface.')
lineStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineStopBits.setStatus('current')
if mibBuilder.loadTexts: lineStopBits.setDescription('This is defined as the number of stop bits for the RS-232 interface.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription("Table of descriptive and status information about configuration of each switch port (including expansion slot) in this system. This table also contains information about each trunk (similar to Cisco's EtherChannel).")
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('Indicates the port name. This is same as ifAlias in the IF-MIB (RFC2863 or later).')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseMiniGBIC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('Indicates the port type.')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxCfg.setDescription('Set the port speed and duplex mode as follows: halfDuplex10(2) - 10Mbps and half duplex mode fullDuplex10(3) - 10Mbps and full duplex mode halfDuplex100(4) - 100Mbps and half duplex mode fullDuplex100(5) - 100Mbps and full duplex mode halfDuplex1000(6) - 1000Mbps and half duplex mode fullDuplex1000(7) - 1000Mbps and full duplex mode hundredBaseTX port can be set as halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) hundredBaseFX port can be set as halfDuplex100(4) fullDuplex100(5) thousandBaseSX port can be set as halfDuplex1000(6) fullDuplex1000(7) The actual operating speed and duplex of the port is given by portSpeedDpxStatus.')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlCfg.setDescription('(1) Flow control mechanism is enabled. If the port type is hundredBaseTX or thousandBaseSX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, the port uses IEEE 802.3x flow control mechanism. If the port type is hundredBaseFX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, Flow control mechanism will not function. (2) Flow control mechanism is disabled. (3) Flow control mechanism is backPressure. when the port is in fullDuplex mode.This flow control mechanism will not function. (4) Flow control mechanism is IEEE 802.3x flow control. when the port is in halfDuplex mode.This flow control mechanism will not function. hundredBaseTX and thousandBaseSX port can be set as: enabled(1), disabled(2), backPressure(3), dot3xFlowControl(4). hundredBaseFX port can be set as: enabled(1), disabled(2), backPressure(3). The actual flow control mechanism is used given by portFlowCtrlStatus.')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("portCap10half", 99), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
if mibBuilder.loadTexts: portCapabilities.setDescription('Port capabilities.')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: portAutonegotiation.setDescription('Whether autonegotiation is enabled.')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxStatus.setDescription('The operating speed and duplex mode of the switched port. If this index is a trunk, the speed is the speed of its individual members. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlStatus.setDescription('(2) BackPressure flow control machanism is used. (3) IEEE 802.3 flow control machanism is used. (4) Flow control mechanism is disabled. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
transferType = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferType.setStatus('current')
if mibBuilder.loadTexts: transferType.setDescription('Type of file to transfer.')
fileType = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("application", 1), ("config", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileType.setStatus('current')
if mibBuilder.loadTexts: fileType.setDescription('Type of file to transfer.')
srcFile = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcFile.setStatus('current')
if mibBuilder.loadTexts: srcFile.setDescription('The source file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
destFile = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destFile.setStatus('current')
if mibBuilder.loadTexts: destFile.setDescription('The destination file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
fileServer = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServer.setStatus('current')
if mibBuilder.loadTexts: fileServer.setDescription("The IP address of the TFTP server for transfer when a download is next requested via this MIB. This value is set to `0.0.0.0' when no IP address has been specified.")
userName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The username specified for an FTP Transfer.')
password = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('current')
if mibBuilder.loadTexts: password.setDescription('The password specified for an FTP Transfer.')
status = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 11, 12, 13, 20, 30))).clone(namedValues=NamedValues(("running", 1), ("success", 2), ("failureGeneric", 3), ("flashOpenError", 10), ("flashMallocError", 11), ("flashReadError", 12), ("flashFtypeError", 13), ("socketWriteError", 20), ("protocolError", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('current')
if mibBuilder.loadTexts: status.setDescription('The status of the transfer.')
transferStart = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferStart.setStatus('current')
if mibBuilder.loadTexts: transferStart.setDescription('To start a transfer.')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
if mibBuilder.loadTexts: restartOpCodeFile.setDescription('Name of op-code file for start-up.')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
if mibBuilder.loadTexts: restartControl.setDescription('Setting this object to warmBoot(2) causes the device to restart the application software with current configuration parameters saved in non-volatile memory. Setting this object to coldBoot(3) causes the device to reinitialize configuration parameters in non-volatile memory to default values and restart the application software. When the device is running normally, this variable has a value of running(1).')
netConfigIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
if mibBuilder.loadTexts: netConfigIPAddress.setDescription('The IP address of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use DHCP to try to figure out what these values should be. If DHCP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
netConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: netConfigSubnetMask.setDescription('The subnet mask of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use DHCP to try to figure out what these values should be. If DHCP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
netConfigDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: netConfigDefaultGateway.setDescription('The IP Address of the default gateway. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
netConfigHttpState = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpState.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpState.setDescription('Whether HTTP is enabled.')
netConfigHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpPort.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpPort.setDescription('The port number for HTTP. Default value is 80.')
netConfigHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpsState.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpsState.setDescription('Whether Secure HTTP is enabled.')
netConfigHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpsPort.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpsPort.setDescription('The port number for Secure HTTP. Default value is 443.')
netConfigDHCPState = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigDHCPState.setStatus('current')
if mibBuilder.loadTexts: netConfigDHCPState.setDescription('Whether DHCP is enabled.')
dot11AuthenticationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 5))
dot118021xState = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("supported", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xState.setStatus('current')
if mibBuilder.loadTexts: dot118021xState.setDescription('This attribute indicates that the Enterprise the state of the 802.1x authentication algorithm.')
dot118021xBroadcastKeyRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xBroadcastKeyRefreshRate.setStatus('current')
if mibBuilder.loadTexts: dot118021xBroadcastKeyRefreshRate.setDescription('The number (in minutes) between changing the broadcast key for 802.1x and WPA clients')
dot118021xSessionKeyRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xSessionKeyRefreshRate.setStatus('current')
if mibBuilder.loadTexts: dot118021xSessionKeyRefreshRate.setDescription('The number (in minutes) between changing session keys for 802.1x and WPA clients')
dot118021xReauthenticationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xReauthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: dot118021xReauthenticationTimeout.setDescription('The number (in minutes) between forcing 802.1x clients to reauthenticate')
dot11MACAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MACAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: dot11MACAuthenticationType.setDescription('This value indicates the type of mac authentication in use.')
dot11AuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6), )
if mibBuilder.loadTexts: dot11AuthenticationServerTable.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationServerTable.setDescription('Table of descriptive and status information about configuration of each authentication server.')
dot11AuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "dot11AuthenticationServerIndex"))
if mibBuilder.loadTexts: dot11AuthenticationServerEntry.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationServerEntry.setDescription('An entry in the table, containing information about configuration of one authentication server of the AP.')
dot11AuthenticationServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11AuthenticationServerIndex.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationServerIndex.setDescription('Index of the Authentication Server')
dot11AuthenticationServer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationServer.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationServer.setDescription('This value indicates the IP address of the authentication server.')
dot11AuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationPort.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationPort.setDescription('This value indicates the UDP Port used by the authentication server.')
dot11AuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationKey.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationKey.setDescription('This value indicates the shared key used by the authentication server.')
dot11AuthenticationRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationRetransmit.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationRetransmit.setDescription('This value indicates the retransmit timer length used by the authentication server.')
dot11AuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationTimeout.setDescription('This value indicates the Timeout value(sec) used by the authentication server.')
dot11AuthenticationAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationAcctPort.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationAcctPort.setDescription('The port number for radius server accounting.')
dot11AuthenticationInterimUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationInterimUpdate.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationInterimUpdate.setDescription('This value indicates the Timeout value(sec) used by the radius server interim update.')
dot11Filter = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 7))
dot11FilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FilterDefault.setStatus('current')
if mibBuilder.loadTexts: dot11FilterDefault.setDescription('This value indicates the default access for local mac filters.')
dot11FilterTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 7, 2), )
if mibBuilder.loadTexts: dot11FilterTable.setStatus('current')
if mibBuilder.loadTexts: dot11FilterTable.setDescription('Table of status information about each configured MAC Address Filtering Entry.')
dot11FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 7, 2, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "dot11FilterAddress"))
if mibBuilder.loadTexts: dot11FilterEntry.setStatus('current')
if mibBuilder.loadTexts: dot11FilterEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
dot11FilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 7, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot11FilterAddress.setStatus('current')
if mibBuilder.loadTexts: dot11FilterAddress.setDescription('This value indicates the MAC address of the filter entry.')
dot11FilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 31, 32))).clone(namedValues=NamedValues(("allowed", 30), ("denied", 31), ("delete", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FilterStatus.setStatus('current')
if mibBuilder.loadTexts: dot11FilterStatus.setDescription('This value indicates the Status of the filter entry. Ifallowed, the client is allowed access to the network. If disallowed, the no frames will be forwarded to the network from the client.')
dot11AuthenticationSupplicantTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 8), )
if mibBuilder.loadTexts: dot11AuthenticationSupplicantTable.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationSupplicantTable.setDescription('Table of descriptive and status information about configuration of supplicant')
dot11AuthenticationSupplicantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 8, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "dot118021xSuppIndex"))
if mibBuilder.loadTexts: dot11AuthenticationSupplicantEntry.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationSupplicantEntry.setDescription('An entry in the table, containing information about configuration of one supplicant.')
dot118021xSuppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: dot118021xSuppIndex.setStatus('current')
if mibBuilder.loadTexts: dot118021xSuppIndex.setDescription('Index of the interface for which this supplicant is running. Currently only the ethernet interface.')
dot118021xSuppState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xSuppState.setStatus('current')
if mibBuilder.loadTexts: dot118021xSuppState.setDescription('This object is used to enable or disable the 802.1x supplicant.')
dot118021xSuppUser = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xSuppUser.setStatus('current')
if mibBuilder.loadTexts: dot118021xSuppUser.setDescription('This value indicates the username for supplicant. If value is configured, will display ****. Else will display EMPTY.')
dot118021xSuppPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 7, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xSuppPasswd.setStatus('current')
if mibBuilder.loadTexts: dot118021xSuppPasswd.setDescription('This value indicates the password for supplicant. If value is configured, will display ****. Else will display EMPTY.')
enterpriseApAdminUser = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApAdminUser.setStatus('current')
if mibBuilder.loadTexts: enterpriseApAdminUser.setDescription('This value indicates the username for management login.')
enterpriseApAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApAdminPassword.setStatus('current')
if mibBuilder.loadTexts: enterpriseApAdminPassword.setDescription('This value indicates the password for management login. Accept empty string to remove the password.')
enterpriseApSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1), )
if mibBuilder.loadTexts: enterpriseApSecurityTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityTable.setDescription('Table of descriptive and status information about configuration of each radio in terms of security settings.')
enterpriseApSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "enterpriseApSecurityIndex"))
if mibBuilder.loadTexts: enterpriseApSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityEntry.setDescription('An entry in the table, containing information about configuration of one radio of the AP.')
enterpriseApSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApSecurityIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityIndex.setDescription('Radio Index for security settings.')
enterpriseApSecurityAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("shared", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityAuthType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityAuthType.setDescription('This value indicates the type of authentication in use for this radio interface.')
enterpriseApSecuritySharedKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("sixtyFour", 1), ("oneHundredTwentyEight", 2), ("oneHundredFiftyTwo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSecuritySharedKeyLen.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecuritySharedKeyLen.setDescription('This value indicates the shared key length for this radio interface.')
enterpriseApSecurityWPAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("supported", 0), ("required", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAMode.setDescription('This value indicates the state of WPA for this radio interface.')
enterpriseApSecurityWPAKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot1x", 0), ("presharedkey", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAKeyType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAKeyType.setDescription('This value indicates the type of WPA Key Management in use for this radio interface.')
enterpriseApSecurityWPACipher = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wep", 0), ("tkip", 1), ("aes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPACipher.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPACipher.setDescription('This value indicates the type of WPA Cipher in use for this radio interface.')
enterpriseApSecurityWPAPSKType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("alphanumeric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAPSKType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAPSKType.setDescription('This value indicates the type of WPA Pre Shared Key in use for this radio interface.')
enterpriseApSecurityWPAPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAPSK.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAPSK.setDescription('This value indicates WPA Pre Shared Key in use for this radio interface.')
enterpriseApSecurityWEPKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hexadecimal", 0), ("alphanumeric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWEPKeyType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWEPKeyType.setDescription('This value indicates the type of WEP Key in use for this radio interface.')
enterpriseApSecurityWEPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 9, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWEPEnabled.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWEPEnabled.setDescription('This value indicates whether WEP is enabled.')
enterpriseApRadioTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1), )
if mibBuilder.loadTexts: enterpriseApRadioTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTable.setDescription('Table of descriptive and status information about configuration of each radio.')
enterpriseApRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "enterpriseApRadioIndex"))
if mibBuilder.loadTexts: enterpriseApRadioEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioEntry.setDescription('An entry in the table, containing information about configuration of one radio of the AP.')
enterpriseApRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApRadioIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioIndex.setDescription('Radio Index for configuration.')
enterpriseApRadioAutoChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAutoChannel.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAutoChannel.setDescription('This value indicates whether auto channel selection is enabled or not for this radio interface')
enterpriseApRadioTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("middle", 3), ("quarter", 4), ("eighth", 5), ("min", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioTransmitPower.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTransmitPower.setDescription('This value indicates the transmit power for this radio interface.')
enterpriseApRadioTurboMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioTurboMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTurboMode.setDescription('This value indicates whether turbo mode is enabled for this radio interface.')
enterpriseApRadioDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 9, 11, 12, 18, 24, 36, 48, 54, 255))).clone(namedValues=NamedValues(("oneMbps", 1), ("twoMbps", 2), ("fiveAndHalfMbps", 5), ("sixMbps", 6), ("nineMbps", 9), ("elevenMbps", 11), ("twelveMbps", 12), ("eighteenMbps", 18), ("twentyFourMbps", 24), ("thirtySixMbps", 36), ("fourtyEightMbps", 48), ("fiftyFourMbps", 54), ("auto", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioDataRate.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioDataRate.setDescription('This value indicates the data rate for this radio interface. Radio interface A operates at 6, 9, 12, 18, 24, 36, 48, 54. Radio interface G operates all listed data rates. The auto setting will attempt to set the best data rate for the interface')
enterpriseApRadioGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bOnly", 1), ("gOnly", 2), ("bg", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioGMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioGMode.setDescription('This value indicates the radio mode for the 802.11g radio. This setting is only valid for the 802.11g interface.')
enterpriseApRadioAntennaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("left", 2), ("right", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAntennaMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAntennaMode.setDescription('This value indicates the antenna mode in use for the G-radio. The values are interpreted as follows: both(1) means use both built-in antennas, left(2) means use left side. right(3) means use right side. invalid(4) means not support. This setting is only valid for the 802.11g interface.')
rogueApState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApState.setStatus('current')
if mibBuilder.loadTexts: rogueApState.setDescription('This value is used to enable/disable Rogue Ap Detection for this radio interface.')
rogueApInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApInterval.setStatus('current')
if mibBuilder.loadTexts: rogueApInterval.setDescription('How often to scan for Rogue Aps. The interval in minutes, with default of 720(minutes).')
rogueApDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApDuration.setStatus('current')
if mibBuilder.loadTexts: rogueApDuration.setDescription('How long to scan each channel (in milliseconds). A longer duration will yield more complete results. A shorter duration will allow clients a better chance of remaining connected. Default value is 350(milliseconds).')
rogueApScanNow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueApScanNow.setStatus('current')
if mibBuilder.loadTexts: rogueApScanNow.setDescription('When writing the value to enable, the AP will trigger the Rouge AP scan function. The value will always return disable(2).')
enterpriseApVapRadioTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 2), )
if mibBuilder.loadTexts: enterpriseApVapRadioTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioTable.setDescription('Table of descriptive and status information about configuration of each Vap radio.')
enterpriseApVapRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 2, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "enterpriseApVapRadioIndex"))
if mibBuilder.loadTexts: enterpriseApVapRadioEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioEntry.setDescription('An entry in the table, containing information about configuration of one Vap radio of the AP.')
enterpriseApVapRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApVapRadioIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioIndex.setDescription('Radio Index for configuration.')
enterpriseApVapRadioState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioState.setDescription('This value indicates the state of the radio interface.')
enterpriseApVapRadioClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioClosedSystem.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioClosedSystem.setDescription('This value indicates whether closed system is enabled for this radio interface.')
enterpriseApVapRadioMaxAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioMaxAssoc.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioMaxAssoc.setDescription('This value indicates the max number of clients allowed on this radio interface.')
enterpriseApVapRadioTransmitKey = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioTransmitKey.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioTransmitKey.setDescription('This value indicates default transmit key in use for this radio interface.')
enterpriseApVapRadioDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVapRadioDescription.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVapRadioDescription.setDescription('This value indicates the description for this radio interface.')
radioWdsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 3), )
if mibBuilder.loadTexts: radioWdsTable.setStatus('current')
if mibBuilder.loadTexts: radioWdsTable.setDescription('Table of configuration information for Wds for each Radio interface.')
radioWdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 3, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "enterpriseApRadioIndex"))
if mibBuilder.loadTexts: radioWdsEntry.setStatus('current')
if mibBuilder.loadTexts: radioWdsEntry.setDescription('An entry in the table, containing information about configuration of peer Bridging for one radio of the AP. The table is indexed by radio Index (corresponding to enterpriseApRadioTable). The table does not contain the radio index as a member of the table.')
wdsApRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("roleAp", 1), ("roleBridgeMaster", 2), ("roleRepeater", 3), ("roleBridge", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsApRole.setStatus('current')
if mibBuilder.loadTexts: wdsApRole.setDescription('This value indicates the role of the Ap for this radio: normal operation(1), bridge master(2) which accepts only repeaters to associate with, repeater Ap(3) that accepts wireless station and other repeaters if it is root-connected: bridge-connected or root connected, and bridge(4) which bridges ethernet traffic to WDS parent bridge but does not relay wireless traffic.')
radioWdsPeerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 4), )
if mibBuilder.loadTexts: radioWdsPeerTable.setStatus('current')
if mibBuilder.loadTexts: radioWdsPeerTable.setDescription('Table of configuration information for Wds Peers for each Radio interface.')
radioWdsPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 4, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "enterpriseApRadioIndex"), (0, "A3COM-PRIVATE-MIB", "wdsPeerIndex"))
if mibBuilder.loadTexts: radioWdsPeerEntry.setStatus('current')
if mibBuilder.loadTexts: radioWdsPeerEntry.setDescription('An entry in the table, containing information about configuration of peer Bridging for one radio of the AP. The table is indexed by radio Index (corresponding to enterpriseApRadioTable) and the peer index (Up to 6). The table does not contain the radio index as a member of the table.')
wdsPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: wdsPeerIndex.setStatus('current')
if mibBuilder.loadTexts: wdsPeerIndex.setDescription('Peer Index for the radio interface.')
wdsPeerBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 10, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsPeerBssid.setStatus('current')
if mibBuilder.loadTexts: wdsPeerBssid.setDescription('The BSSID for this peer.')
webRedirectionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webRedirectionEnabled.setStatus('current')
if mibBuilder.loadTexts: webRedirectionEnabled.setDescription('Whether Web Redirection is enabled.')
proxyArpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyArpEnabled.setStatus('current')
if mibBuilder.loadTexts: proxyArpEnabled.setDescription('Whether ProxyArp is enabled.')
rogueApDetectionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 8, 13, 1), )
if mibBuilder.loadTexts: rogueApDetectionTable.setStatus('current')
if mibBuilder.loadTexts: rogueApDetectionTable.setDescription('Table of each AP that has been detected.')
rogueApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 8, 13, 1, 1), ).setIndexNames((0, "A3COM-PRIVATE-MIB", "rogueApIndex"))
if mibBuilder.loadTexts: rogueApEntry.setStatus('current')
if mibBuilder.loadTexts: rogueApEntry.setDescription('An entry in the table, containing information about any AP detected.')
rogueApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: rogueApIndex.setStatus('current')
if mibBuilder.loadTexts: rogueApIndex.setDescription('Monotonically increasing index.')
rogueApBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApBssid.setStatus('current')
if mibBuilder.loadTexts: rogueApBssid.setDescription('The AP BSSID')
rogueApSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApSsid.setStatus('current')
if mibBuilder.loadTexts: rogueApSsid.setDescription('The AP SSID')
rogueApPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApPortNumber.setStatus('current')
if mibBuilder.loadTexts: rogueApPortNumber.setDescription('Interface index for the radio.')
rogueApChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApChannelNumber.setStatus('current')
if mibBuilder.loadTexts: rogueApChannelNumber.setDescription('Channel where Ap detected.')
rogueApRSSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 8, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueApRSSIValue.setStatus('current')
if mibBuilder.loadTexts: rogueApRSSIValue.setDescription('RSSI for AP detected.')
apNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 1))
apNotificationDot11MacAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 1, 1), MacAddress())
if mibBuilder.loadTexts: apNotificationDot11MacAddr.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11MacAddr.setDescription('Mac Address of the affected interface, returned with traps only.')
apNotificationDot11Station = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 1, 2), MacAddress())
if mibBuilder.loadTexts: apNotificationDot11Station.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11Station.setDescription('This attribute holds the MAC address of the wireless station')
apNotificationDot11RequestType = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("association", 2), ("reAssociation", 3), ("authentication", 4))))
if mibBuilder.loadTexts: apNotificationDot11RequestType.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11RequestType.setDescription('This attribute defines the request type sent by the station. Value = 1: Unknown request type Value = 2: Association Request Value = 3: Re-association Request Value = 4: Authentication')
apNotificationDot11ReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("invalidModeOrState", 1), ("unAuthenticatedStation", 2), ("internalError", 3), ("outOfSequenceFrame", 4), ("unsupportedAlgorithm", 5), ("invalidFrameLngth", 6), ("wepRequiredOnAP", 7), ("wepNotAllowed", 8), ("challengeTextMismatch", 9))))
if mibBuilder.loadTexts: apNotificationDot11ReasonCode.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11ReasonCode.setDescription('This attribute defines the reason for the failure of an operation. Value = 1: Invalid mode/state Value = 2: Station not authenticated. Value = 3: Internal error Value = 4: Out of sequence frame Value = 5: Un-supportd algorithm Value = 6: Invalid frame length Value = 7: WEP is required on the AP Value = 8: WEP not allowed Value = 9: Challenge text mismatch')
apNotificationDot11IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 1, 5), IpAddress())
if mibBuilder.loadTexts: apNotificationDot11IpAddress.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11IpAddress.setDescription('This value indicates the IP address of the Access Point')
apNotificationDot11AuthenticatorMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 1, 6), MacAddress())
if mibBuilder.loadTexts: apNotificationDot11AuthenticatorMacAddr.setStatus('current')
if mibBuilder.loadTexts: apNotificationDot11AuthenticatorMacAddr.setDescription('This attribute holds the MAC address of the authenticator for the AP.')
apNotificationTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2))
sysSystemUp = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 1))
if mibBuilder.loadTexts: sysSystemUp.setStatus('current')
if mibBuilder.loadTexts: sysSystemUp.setDescription('The system up notification shall be sent when the AP is fully up and running.')
sysSystemDown = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 2))
if mibBuilder.loadTexts: sysSystemDown.setStatus('current')
if mibBuilder.loadTexts: sysSystemDown.setDescription('The system down notification shall be sent before the AP is about to reboot.')
sysRadiusServerChanged = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 3))
if mibBuilder.loadTexts: sysRadiusServerChanged.setStatus('current')
if mibBuilder.loadTexts: sysRadiusServerChanged.setDescription('The RADIUS server changed notification shall be sent when the RADIUS server has changed from Primary / Secondary to Secondary / Primary.')
dot11StationAssociation = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 4)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot11StationAssociation.setStatus('current')
if mibBuilder.loadTexts: dot11StationAssociation.setDescription('The associate notification shall be sent when a station successfully associates with the Access Point. The value of the notification shall include the MAC address of the station that has associated.')
dot11StationReAssociation = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 5)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot11StationReAssociation.setStatus('current')
if mibBuilder.loadTexts: dot11StationReAssociation.setDescription('The re-associate notification shall be sent when a station successfully re-associates with the Access Point. The value of the notification shall include the MAC address of the station that has associated.')
dot11StationAuthentication = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 6)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot11StationAuthentication.setStatus('current')
if mibBuilder.loadTexts: dot11StationAuthentication.setDescription('The authentication notification shall be sent when a station successfully authenticates with the Access Point. The value of the notification shall include the MAC address of the station that has authenticated.')
dot11StationRequestFail = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 7)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"), ("A3COM-PRIVATE-MIB", "apNotificationDot11RequestType"), ("A3COM-PRIVATE-MIB", "apNotificationDot11ReasonCode"))
if mibBuilder.loadTexts: dot11StationRequestFail.setStatus('current')
if mibBuilder.loadTexts: dot11StationRequestFail.setDescription('The station request fail shall be sent out when a station fails to associate / re-associate / authenticate with the Access Point. The notification shall include the MAC address of the station and the reason code for the failure.')
dot11InterfaceAGFail = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 8))
if mibBuilder.loadTexts: dot11InterfaceAGFail.setStatus('current')
if mibBuilder.loadTexts: dot11InterfaceAGFail.setDescription('The InterfaceAGFail notification shall be sent out when 802.11a/802.11g wireless interface has failed.')
dot1xMacAddrAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 9)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xMacAddrAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: dot1xMacAddrAuthSuccess.setDescription('The 802.1x MAC address authentication success notification shall be sent when a station successfully authenticates the MAC address with the RADIUS server. The value of the notification shall include the MAC address of the station that has authenticated.')
dot1xMacAddrAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 10)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xMacAddrAuthFail.setStatus('current')
if mibBuilder.loadTexts: dot1xMacAddrAuthFail.setDescription('The 802.1x MAC address authentication failure notification shall be sent when a station fails to authenticate the MAC address with the RADIUS server. The value of the notification shall include the MAC address of the station that failed to authenticate.')
dot1xAuthNotInitiated = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 11)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xAuthNotInitiated.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthNotInitiated.setDescription('The 802.1x authentication not initiated notification shall be sent when a station did not initiate 802.1x authentication with the RADIUS server. The value of the notification shall include the MAC address of the station that did not initiate 802.1x authentication.')
dot1xAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 12)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSuccess.setDescription('The 802.1x authentication success notification shall be sent when a station successfully authenticates with the RADIUS server. The value of the notification shall include the MAC address of the station that has authenticated.')
dot1xAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 13)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: dot1xAuthFail.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthFail.setDescription('The 802.1x authentication failure notification shall be sent when a station fails to authenticate with the RADIUS server. The value of the notification shall include the MAC address of the station that failed to authenticate.')
localMacAddrAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 14)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: localMacAddrAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: localMacAddrAuthSuccess.setDescription('The Local MAC address authentication success notification shall be sent when a station successfully authenticates the MAC address with the database stored locally within the AP. The value of the notification shall include the MAC address of the station that has authenticated.')
localMacAddrAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 15)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"))
if mibBuilder.loadTexts: localMacAddrAuthFail.setStatus('current')
if mibBuilder.loadTexts: localMacAddrAuthFail.setDescription('The Local MAC address authentication failure notification shall be sent when a station fails to authenticate the MAC address with the database stored locally within the AP. The value of the notification shall include the MAC address of the station that has authenticated.')
pppLogonFail = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 16))
if mibBuilder.loadTexts: pppLogonFail.setStatus('current')
if mibBuilder.loadTexts: pppLogonFail.setDescription('The PPP Logon failure notification shall be sent out when the AP fails to login successfully to the PPP peer using the supplied username and password.')
iappStationRoamedFrom = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 17)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"), ("A3COM-PRIVATE-MIB", "apNotificationDot11IpAddress"))
if mibBuilder.loadTexts: iappStationRoamedFrom.setStatus('current')
if mibBuilder.loadTexts: iappStationRoamedFrom.setDescription('The IAPP Station Roamed-From Notification shall be sent out whenever a station roams from another Access Point (AP) to this AP. The notification shall include the MAC address of the station and the IP address of the old AP.')
iappStationRoamedTo = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 18)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"), ("A3COM-PRIVATE-MIB", "apNotificationDot11IpAddress"))
if mibBuilder.loadTexts: iappStationRoamedTo.setStatus('current')
if mibBuilder.loadTexts: iappStationRoamedTo.setDescription('The IAPP Station Roamed-To Notification shall be sent out whenever a station roams to another Access Point (AP) from this AP. The notification shall include the MAC address of the station and the IP address of the new AP.')
iappContextDataSent = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 19)).setObjects(("A3COM-PRIVATE-MIB", "apNotificationDot11Station"), ("A3COM-PRIVATE-MIB", "apNotificationDot11IpAddress"))
if mibBuilder.loadTexts: iappContextDataSent.setStatus('current')
if mibBuilder.loadTexts: iappContextDataSent.setDescription('The IAPP Context Data Sent notification shall be sent out whenever the context data for a station has been sent to the new AP with which the station has associated. The notification shall include the MAC address of the station and the IP address of the new AP.')
sntpServerFail = NotificationType((1, 3, 6, 1, 4, 1, 43, 35, 8, 100, 2, 20))
if mibBuilder.loadTexts: sntpServerFail.setStatus('current')
if mibBuilder.loadTexts: sntpServerFail.setDescription('The sntpServerFail notification shall be sent when the AP fails to get time from the configured SNTP server.')
mibBuilder.exportSymbols("A3COM-PRIVATE-MIB", radioWdsPeerEntry=radioWdsPeerEntry, enterpriseApRadioIndex=enterpriseApRadioIndex, dot118021xState=dot118021xState, dot11MACAuthenticationType=dot11MACAuthenticationType, enterpriseApSecurity=enterpriseApSecurity, portType=portType, enterpriseApRadio=enterpriseApRadio, dot11AuthenticationSupplicantEntry=dot11AuthenticationSupplicantEntry, sysSystemUp=sysSystemUp, enterpriseApRadioDataRate=enterpriseApRadioDataRate, rogueApPortNumber=rogueApPortNumber, transferType=transferType, enterpriseApFileTransferMgt=enterpriseApFileTransferMgt, enterpriseApVapRadioMaxAssoc=enterpriseApVapRadioMaxAssoc, dot11FilterEntry=dot11FilterEntry, rogueApDuration=rogueApDuration, password=password, enterpriseApSecurityWEPEnabled=enterpriseApSecurityWEPEnabled, portAutonegotiation=portAutonegotiation, status=status, dot11AuthenticationRetransmit=dot11AuthenticationRetransmit, rogueApRSSIValue=rogueApRSSIValue, enterpriseApRadioEntry=enterpriseApRadioEntry, radioWdsEntry=radioWdsEntry, lineSpeed=lineSpeed, localMacAddrAuthFail=localMacAddrAuthFail, a3Com=a3Com, rivet=rivet, enterpriseApSecurityWPAKeyType=enterpriseApSecurityWPAKeyType, rogueApIndex=rogueApIndex, dot1xAuthFail=dot1xAuthFail, netConfigDefaultGateway=netConfigDefaultGateway, enterpriseApSecuritySharedKeyLen=enterpriseApSecuritySharedKeyLen, enterpriseApSys=enterpriseApSys, enterpriseApSecurityWPAPSK=enterpriseApSecurityWPAPSK, sntpServerFail=sntpServerFail, enterpriseApSecurityWPACipher=enterpriseApSecurityWPACipher, dot1xMacAddrAuthSuccess=dot1xMacAddrAuthSuccess, lineStopBits=lineStopBits, swSerialNumber=swSerialNumber, restartControl=restartControl, wdsApRole=wdsApRole, netConfigHttpsPort=netConfigHttpsPort, dot11FilterDefault=dot11FilterDefault, enterpriseApRadioAutoChannel=enterpriseApRadioAutoChannel, dot11StationReAssociation=dot11StationReAssociation, dot118021xSuppState=dot118021xSuppState, dot118021xSessionKeyRefreshRate=dot118021xSessionKeyRefreshRate, apNotificationDot11AuthenticatorMacAddr=apNotificationDot11AuthenticatorMacAddr, dot11AuthenticationServerEntry=dot11AuthenticationServerEntry, lineParity=lineParity, dot11AuthenticationEntry=dot11AuthenticationEntry, enterpriseApVapRadioDescription=enterpriseApVapRadioDescription, rogueApChannelNumber=rogueApChannelNumber, rogueApInterval=rogueApInterval, apNotificationDot11RequestType=apNotificationDot11RequestType, restartOpCodeFile=restartOpCodeFile, dot118021xSuppUser=dot118021xSuppUser, swOpCodeVer=swOpCodeVer, fileServer=fileServer, enterpriseApAdmin=enterpriseApAdmin, portEntry=portEntry, enterpriseApRadioGMode=enterpriseApRadioGMode, netConfigDHCPState=netConfigDHCPState, PYSNMP_MODULE_ID=rivet, enterpriseApSecurityWPAPSKType=enterpriseApSecurityWPAPSKType, dot11AuthenticationServerTable=dot11AuthenticationServerTable, dot11InterfaceAGFail=dot11InterfaceAGFail, portTable=portTable, localMacAddrAuthSuccess=localMacAddrAuthSuccess, swBootRomVer=swBootRomVer, dot11AuthenticationServer=dot11AuthenticationServer, sysRadiusServerChanged=sysRadiusServerChanged, rogueApBssid=rogueApBssid, dot11AuthenticationSupplicantTable=dot11AuthenticationSupplicantTable, webRedirectionEnabled=webRedirectionEnabled, dot11Filter=dot11Filter, dot118021xSuppIndex=dot118021xSuppIndex, rogueApDetectionTable=rogueApDetectionTable, sysSystemDown=sysSystemDown, rogueApState=rogueApState, rogueApSsid=rogueApSsid, enterpriseApRadioAntennaMode=enterpriseApRadioAntennaMode, dot1xMacAddrAuthFail=dot1xMacAddrAuthFail, enterpriseApAdminPassword=enterpriseApAdminPassword, dot11FilterStatus=dot11FilterStatus, enterpriseApSecurityEntry=enterpriseApSecurityEntry, wdsPeerBssid=wdsPeerBssid, destFile=destFile, enterpriseApSecurityIndex=enterpriseApSecurityIndex, netConfigHttpState=netConfigHttpState, dot11AuthenticationInterimUpdate=dot11AuthenticationInterimUpdate, portIndex=portIndex, apNotificationDot11MacAddr=apNotificationDot11MacAddr, apNotificationDot11IpAddress=apNotificationDot11IpAddress, portSpeedDpxCfg=portSpeedDpxCfg, portFlowCtrlStatus=portFlowCtrlStatus, enterpriseApVapRadioEntry=enterpriseApVapRadioEntry, lineTable=lineTable, dot11AuthenticationTimeout=dot11AuthenticationTimeout, dot11FilterAddress=dot11FilterAddress, dot1xAuthSuccess=dot1xAuthSuccess, wlan_mib=wlan_mib, enterpriseApWebRedirection=enterpriseApWebRedirection, swHardwareVer=swHardwareVer, enterpriseApPortMgnt=enterpriseApPortMgnt, lineEntry=lineEntry, enterpriseApSecurityAuthType=enterpriseApSecurityAuthType, radioWdsTable=radioWdsTable, radioWdsPeerTable=radioWdsPeerTable, enterpriseApSecurityTable=enterpriseApSecurityTable, enterpriseApProxyArp=enterpriseApProxyArp, dot11FilterTable=dot11FilterTable, rogueApScanNow=rogueApScanNow, iappStationRoamedTo=iappStationRoamedTo, apNotificationDot11ReasonCode=apNotificationDot11ReasonCode, lineDataBits=lineDataBits, enterpriseApSecurityWPAMode=enterpriseApSecurityWPAMode, portCapabilities=portCapabilities, dot11AuthenticationServerIndex=dot11AuthenticationServerIndex, dot11AuthenticationKey=dot11AuthenticationKey, apNotificationObjects=apNotificationObjects, dot11AuthenticationAcctPort=dot11AuthenticationAcctPort, enterpriseApLineMgnt=enterpriseApLineMgnt, portName=portName, enterpriseApRadioTable=enterpriseApRadioTable, dot118021xSuppPasswd=dot118021xSuppPasswd, dot11StationAuthentication=dot11StationAuthentication, apNotificationDot11Station=apNotificationDot11Station, apNotificationTrapObjects=apNotificationTrapObjects, dot11StationRequestFail=dot11StationRequestFail, enterpriseApVapRadioIndex=enterpriseApVapRadioIndex, enterpriseApResetMgt=enterpriseApResetMgt, portSpeedDpxStatus=portSpeedDpxStatus, netConfigHttpPort=netConfigHttpPort, enterpriseApSecurityWEPKeyType=enterpriseApSecurityWEPKeyType, wdsPeerIndex=wdsPeerIndex, lineIndex=lineIndex, enterpriseApVapRadioState=enterpriseApVapRadioState, enterpriseApVapRadioTransmitKey=enterpriseApVapRadioTransmitKey, portFlowCtrlCfg=portFlowCtrlCfg, userName=userName, dot1xAuthNotInitiated=dot1xAuthNotInitiated, dot118021xBroadcastKeyRefreshRate=dot118021xBroadcastKeyRefreshRate, netConfigHttpsState=netConfigHttpsState, iappStationRoamedFrom=iappStationRoamedFrom, iappContextDataSent=iappContextDataSent, enterpriseApRadioTransmitPower=enterpriseApRadioTransmitPower, netConfigIPAddress=netConfigIPAddress, enterpriseApIpMgt=enterpriseApIpMgt, fileType=fileType, transferStart=transferStart, srcFile=srcFile, enterpriseApVapRadioTable=enterpriseApVapRadioTable, dot11AuthenticationPort=dot11AuthenticationPort, apNotificationTrapTree=apNotificationTrapTree, proxyArpEnabled=proxyArpEnabled, enterpriseApVapRadioClosedSystem=enterpriseApVapRadioClosedSystem, enterpriseApAdminUser=enterpriseApAdminUser, pppLogonFail=pppLogonFail, enterpriseApRadioTurboMode=enterpriseApRadioTurboMode, enterpriseAPdot11=enterpriseAPdot11, enterpriseApRogueAp=enterpriseApRogueAp, dot118021xReauthenticationTimeout=dot118021xReauthenticationTimeout, rogueApEntry=rogueApEntry, netConfigSubnetMask=netConfigSubnetMask, dot11StationAssociation=dot11StationAssociation)
