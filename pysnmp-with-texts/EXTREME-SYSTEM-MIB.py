#
# PySNMP MIB module EXTREME-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, PortList = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
extremeSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 1))
if mibBuilder.loadTexts: extremeSystem.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremeSystem.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeSystem.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeSystem.setDescription('Extreme System objects: objects common to all platforms')
extremeSystemCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1))
extremeSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveToPrimary", 1), ("saveToSecondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeSaveConfiguration.setStatus('current')
if mibBuilder.loadTexts: extremeSaveConfiguration.setDescription('When this object is set, the device will copy the contents of the configuration database to a buffer and save it to the persistant store specified by the value of the object. The save is performed asynchronously, and the snmp agent will continue to respond to both gets and sets while the save is taking place. A network management application may use the extremeSaveStatus object to determine when the asynchronous save operation has completed.')
extremeSaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveInProgress", 1), ("saveNotInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSaveStatus.setStatus('current')
if mibBuilder.loadTexts: extremeSaveStatus.setDescription('This object will return the status of a save operation invoked by setting the extremeSaveConfiguration object. A network management application can read this object to determine that a save operation has completed.')
extremeCurrentConfigInUse = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeCurrentConfigInUse.setStatus('current')
if mibBuilder.loadTexts: extremeCurrentConfigInUse.setDescription('Shows which NVRAM configuration store was used at last boot')
extremeConfigToUseOnReboot = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeConfigToUseOnReboot.setStatus('current')
if mibBuilder.loadTexts: extremeConfigToUseOnReboot.setDescription('Controls which NVRAM configuration store will be used on next reboot.')
extremeOverTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeOverTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: extremeOverTemperatureAlarm.setDescription('Alarm status of overtemperature sensor in device enclosure.')
extremeCurrentTemperature = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeCurrentTemperature.setStatus('current')
if mibBuilder.loadTexts: extremeCurrentTemperature.setDescription('Current temperature in degrees celcius measured inside device enclosure.')
extremeFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 9), )
if mibBuilder.loadTexts: extremeFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: extremeFanStatusTable.setDescription('Table of operational status of all internal cooling fans.')
extremeFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 9, 1), ).setIndexNames((0, "EXTREME-SYSTEM-MIB", "extremeFanNumber"))
if mibBuilder.loadTexts: extremeFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: extremeFanStatusEntry.setDescription('Entry in table of all internal cooling fans.')
extremeFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeFanNumber.setStatus('current')
if mibBuilder.loadTexts: extremeFanNumber.setDescription('Identifier of cooling fan, numbered from the front and/or left side of device.')
extremeFanOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 9, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeFanOperational.setStatus('current')
if mibBuilder.loadTexts: extremeFanOperational.setDescription('Operational status of a cooling fan.')
extremeFanEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeFanEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: extremeFanEntPhysicalIndex.setDescription('The entity index for this fan entity in the entity table.')
extremePrimaryPowerOperational = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePrimaryPowerOperational.setStatus('current')
if mibBuilder.loadTexts: extremePrimaryPowerOperational.setDescription('Operational status of internal power supply of a device.')
extremeRedundantPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("presentOK", 2), ("presentNotOK", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeRedundantPowerStatus.setStatus('current')
if mibBuilder.loadTexts: extremeRedundantPowerStatus.setDescription('Operational status of an external redundant power supply to a device.')
extremeRedundantPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeRedundantPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: extremeRedundantPowerAlarm.setDescription('Alarm state of an external redundant power supply to a device. Alarm state indicates either fan failure or overtemperature condition.')
extremePrimarySoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePrimarySoftwareRev.setStatus('current')
if mibBuilder.loadTexts: extremePrimarySoftwareRev.setDescription('The software revision of the primary image stored in this device. This string will have a zero length if the revision is unknown, invalid or not present. This will also be reported in RMON2 probeSoftwareRev if this is the software image currently running in the device.')
extremeSecondarySoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSecondarySoftwareRev.setStatus('current')
if mibBuilder.loadTexts: extremeSecondarySoftwareRev.setDescription('The software revision of the secondary image stored in this device. This string will have a zero length if the revision is unknown, invalid or not present. This will also be reported in RMON2 probeSoftwareRev if this is the software image currently running in the device.')
extremeImageToUseOnReboot = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeImageToUseOnReboot.setStatus('current')
if mibBuilder.loadTexts: extremeImageToUseOnReboot.setDescription('Controls which image will be used on next reboot.')
extremeSystemID = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSystemID.setStatus('current')
if mibBuilder.loadTexts: extremeSystemID.setDescription('This represents the System ID of the Summit Switch.')
extremeSystemBoardID = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSystemBoardID.setStatus('current')
if mibBuilder.loadTexts: extremeSystemBoardID.setDescription('This represents the Board ID of the Summit Switch.')
extremeSystemLeftBoardID = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSystemLeftBoardID.setStatus('current')
if mibBuilder.loadTexts: extremeSystemLeftBoardID.setDescription('This represents the Left Board ID of the Summit Switch.')
extremeSystemRightBoardID = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSystemRightBoardID.setStatus('current')
if mibBuilder.loadTexts: extremeSystemRightBoardID.setDescription('This represents the Right Board ID of the Summit Switch.')
extremeInputPowerVoltage = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v110", 1), ("v220", 2), ("v48DC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeInputPowerVoltage.setStatus('current')
if mibBuilder.loadTexts: extremeInputPowerVoltage.setDescription('The input power voltage at which the system is currently operating.')
extremePowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("presentOK", 2), ("presentNotOK", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePowerStatus.setStatus('current')
if mibBuilder.loadTexts: extremePowerStatus.setDescription('Operational status of the power supply to a device.')
extremePowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePowerAlarm.setStatus('current')
if mibBuilder.loadTexts: extremePowerAlarm.setDescription('Alarm state of the power supply to a device. Alarm state indicates either fan failure or overtemperature condition.')
extremeRmonEnable = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeRmonEnable.setStatus('current')
if mibBuilder.loadTexts: extremeRmonEnable.setDescription('Setting this to true will cause the agent to start collecting RMON statistics.')
extremeBootROMVersion = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeBootROMVersion.setStatus('current')
if mibBuilder.loadTexts: extremeBootROMVersion.setDescription('The software revision of the bootrom on the device. This string will have a zero length if the revision is unknown or invalid.')
extremeDot1dTpFdbTableEnable = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeDot1dTpFdbTableEnable.setStatus('current')
if mibBuilder.loadTexts: extremeDot1dTpFdbTableEnable.setDescription('Setting this to true will cause GetNext operations on the dot1dTpFdbTable to be allowed. Note that Get operations are always allowed.')
extremePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 27), )
if mibBuilder.loadTexts: extremePowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: extremePowerSupplyTable.setDescription('Table of status of all power supplies in the system.')
extremePowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 27, 1), ).setIndexNames((0, "EXTREME-SYSTEM-MIB", "extremePowerSupplyNumber"))
if mibBuilder.loadTexts: extremePowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: extremePowerSupplyEntry.setDescription('An entry indicating the status of a specific power supply.')
extremePowerSupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 27, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremePowerSupplyNumber.setStatus('current')
if mibBuilder.loadTexts: extremePowerSupplyNumber.setDescription('Power supply number.')
extremePowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("presentOK", 2), ("presentNotOK", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: extremePowerSupplyStatus.setDescription('Status of the power supply.')
extremePowerSupplyInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v110", 1), ("v220", 2), ("v48DC", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePowerSupplyInputVoltage.setStatus('current')
if mibBuilder.loadTexts: extremePowerSupplyInputVoltage.setDescription('Input voltage of the power supply')
extremePowerSupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 27, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePowerSupplySerialNumber.setStatus('current')
if mibBuilder.loadTexts: extremePowerSupplySerialNumber.setDescription(' The serial number of the power supply unit.')
extremePowerSupplyEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePowerSupplyEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: extremePowerSupplyEntPhysicalIndex.setDescription(' The entity index for this psu entity in the entity table.')
extremeCpuAggregateUtilization = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeCpuAggregateUtilization.setStatus('current')
if mibBuilder.loadTexts: extremeCpuAggregateUtilization.setDescription('The aggregate CPU utilization since the time the start started executing.')
extremeCpuTask2Table = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29), )
if mibBuilder.loadTexts: extremeCpuTask2Table.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2Table.setDescription('Table of CPU tasks that are active.')
extremeCpuTask2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29, 1), ).setIndexNames((0, "EXTREME-SYSTEM-MIB", "extremeCpuTask2CpuId"), (0, "EXTREME-SYSTEM-MIB", "extremeCpuTask2Name"))
if mibBuilder.loadTexts: extremeCpuTask2Entry.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2Entry.setDescription('An entry in table of describes a single task.')
extremeCpuTask2CpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29, 1, 1), Unsigned32())
if mibBuilder.loadTexts: extremeCpuTask2CpuId.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2CpuId.setDescription('CPU on which this task last executed or is executing. The primary CPU has a value of 1.')
extremeCpuTask2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: extremeCpuTask2Name.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2Name.setDescription('Name associated with the reported task id.')
extremeCpuTask2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeCpuTask2Id.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2Id.setDescription('Task identifier assigned by the operating system when this task is spawned.')
extremeCpuTask2Pc = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeCpuTask2Pc.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2Pc.setDescription('The value of the program counter for this task. It indicates the address of the next instruction that would be executed once the operating system resumes this task.')
extremeCpuTask2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeCpuTask2Status.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2Status.setDescription('The current status of the task as reported by the operating system.')
extremeCpuTask2Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeCpuTask2Utilization.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2Utilization.setDescription('The current CPU utilization by this task. This is the utilization when the task last executed.')
extremeCpuTask2MaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 29, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeCpuTask2MaxUtilization.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTask2MaxUtilization.setDescription('The maximum CPU utilization by this task since the time the start started executing. This value may be cleared.')
extremeAuthFailSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 30), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeAuthFailSrcAddr.setStatus('current')
if mibBuilder.loadTexts: extremeAuthFailSrcAddr.setDescription('The IP address of the originator of the bad SNMP request that caused the generation of an authentication failure trap.')
extremeCpuTransmitPriority = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeCpuTransmitPriority.setStatus('deprecated')
if mibBuilder.loadTexts: extremeCpuTransmitPriority.setDescription('The CPU transmit priority.')
extremeImageBooted = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeImageBooted.setStatus('current')
if mibBuilder.loadTexts: extremeImageBooted.setDescription('The image with which the switch was last booted, using which it is currently running.')
extremeMsmFailoverCause = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("never", 1), ("admin", 2), ("exception", 3), ("removal", 4), ("hwFailure", 5), ("watchdog", 6), ("keepalive", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMsmFailoverCause.setStatus('current')
if mibBuilder.loadTexts: extremeMsmFailoverCause.setDescription('The cause of the last MSM failover. never(1) means an MSM Failover has not occurred since the last reboot. admin(2) means the failover was initiated by the user. exception(3) means the former master MSM encountered a software exception condition. removal(4) means the master MSM was physically removed from the chassis. hwFailure(5) means a diagnostic failure was detected in the master MSM. watchdog(6) means that the master MSM hardware watchdog timer expired. keepalive(7) means the master MSM failed to respond to slave keepalive requests. The MSM failover will have been hitless only in the admin(2) and exception(3) cases ')
extremeImageTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34), )
if mibBuilder.loadTexts: extremeImageTable.setStatus('current')
if mibBuilder.loadTexts: extremeImageTable.setDescription('A table containing information about each software image.')
extremeImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1), ).setIndexNames((0, "EXTREME-SYSTEM-MIB", "extremeImageNumber"))
if mibBuilder.loadTexts: extremeImageEntry.setStatus('current')
if mibBuilder.loadTexts: extremeImageEntry.setDescription('A table entry containing information about each software image.')
extremeImageNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cur", 0), ("pri", 1), ("sec", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeImageNumber.setStatus('current')
if mibBuilder.loadTexts: extremeImageNumber.setDescription('A unique integer identifying the particular software image.')
extremeMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMajorVersion.setStatus('current')
if mibBuilder.loadTexts: extremeMajorVersion.setDescription('The ExtremeWare Release Major Version.')
extremeSubMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSubMajorVersion.setStatus('deprecated')
if mibBuilder.loadTexts: extremeSubMajorVersion.setDescription('The ExtremeWare Release Sub-major Version. This object is deprecated from extremeware 7.3. The extremeMinorVersion gets the value of extremeSubMajorVersion and the new extremePatchVersion gets the value of old extremeMinorVersion value.')
extremeMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMinorVersion.setStatus('current')
if mibBuilder.loadTexts: extremeMinorVersion.setDescription('The ExtremeWare Release Minor Version.')
extremeBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeBuildNumber.setStatus('current')
if mibBuilder.loadTexts: extremeBuildNumber.setDescription('The ExtremeWare Build Number.')
extremeTechnologyReleaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeTechnologyReleaseNumber.setStatus('current')
if mibBuilder.loadTexts: extremeTechnologyReleaseNumber.setDescription('The Technology Release version. This value is zero for all but TR releases.')
extremeSustainingReleaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSustainingReleaseNumber.setStatus('current')
if mibBuilder.loadTexts: extremeSustainingReleaseNumber.setDescription('The Sustaining Release number for the ExtremeWare version.')
extremeBranchRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeBranchRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: extremeBranchRevisionNumber.setDescription('The incremental build on specified branch.')
extremeImageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("trunk", 0), ("branch", 1), ("patch", 2), ("technology", 3), ("beta", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeImageType.setStatus('current')
if mibBuilder.loadTexts: extremeImageType.setDescription('The branch type from which the image was built.')
extremeImageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeImageDescription.setStatus('current')
if mibBuilder.loadTexts: extremeImageDescription.setDescription('A unique string that can be used to identify the specific patch, technology, or development branch release.')
extremeImageSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("nossh", 1), ("ssh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeImageSecurity.setStatus('deprecated')
if mibBuilder.loadTexts: extremeImageSecurity.setDescription('Indicates whether image was built with ssh.This object is deprecated, the ssh capability can be obtained from the extremeImageSshCapability of the ImageFeatureTable')
extremePatchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 34, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePatchVersion.setStatus('current')
if mibBuilder.loadTexts: extremePatchVersion.setDescription('The ExtremeWare Release Patch Version.')
extremeImageFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 35), )
if mibBuilder.loadTexts: extremeImageFeatureTable.setStatus('current')
if mibBuilder.loadTexts: extremeImageFeatureTable.setDescription('A table containing information about the software features.')
extremeImageFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 35, 1), ).setIndexNames((0, "EXTREME-SYSTEM-MIB", "extremeImageFeatureNumber"))
if mibBuilder.loadTexts: extremeImageFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: extremeImageFeatureEntry.setDescription('A table entry containing information about software features.')
extremeImageFeatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cur", 0), ("pri", 1), ("sec", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeImageFeatureNumber.setStatus('current')
if mibBuilder.loadTexts: extremeImageFeatureNumber.setDescription('A unique integer identifying the particular software image.')
extremeImageSshCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("nossh", 1), ("ssh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeImageSshCapability.setStatus('current')
if mibBuilder.loadTexts: extremeImageSshCapability.setDescription('Indicates whether image has ssh capability.')
extremeImageUAACapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("nouaa", 1), ("uaa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeImageUAACapability.setStatus('current')
if mibBuilder.loadTexts: extremeImageUAACapability.setDescription('Indicates whether image has Wireless(UAA) components.')
extremeChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2))
extremeMasterMSMSlot = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMasterMSMSlot.setStatus('current')
if mibBuilder.loadTexts: extremeMasterMSMSlot.setDescription('The extremeSlotNumber of the master MSM module.')
extremeChassisPortsPerSlot = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeChassisPortsPerSlot.setStatus('current')
if mibBuilder.loadTexts: extremeChassisPortsPerSlot.setDescription('The maximum number of ports that can be accomodated in a single slot. This number would change to accomodate blades with higher port density than current ones.')
extremeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 2), )
if mibBuilder.loadTexts: extremeSlotTable.setStatus('current')
if mibBuilder.loadTexts: extremeSlotTable.setDescription('A table containing information about each slot in the chassis.')
extremeSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 2, 1), ).setIndexNames((0, "EXTREME-SYSTEM-MIB", "extremeSlotNumber"))
if mibBuilder.loadTexts: extremeSlotEntry.setStatus('current')
if mibBuilder.loadTexts: extremeSlotEntry.setDescription('A table entry containing information about the module in each slot of the chassis.')
extremeSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSlotNumber.setStatus('current')
if mibBuilder.loadTexts: extremeSlotNumber.setDescription('A unique integer identifying the particular slot in the chassis.')
extremeSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSlotName.setStatus('current')
if mibBuilder.loadTexts: extremeSlotName.setDescription('A name identifying the particular slot in the chassis.')
extremeSlotModuleConfiguredType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 101, 102, 103, 104, 105, 106, 107, 108, 200, 201))).clone(namedValues=NamedValues(("none", 1), ("fe32", 2), ("g4x", 3), ("g6x", 4), ("fe32fx", 5), ("f48ti", 7), ("g8xi", 8), ("g8ti", 9), ("g12sxi", 10), ("g12ti", 11), ("fm32t", 21), ("gm4x", 22), ("gm4sx", 23), ("gm4t", 24), ("wdm8", 25), ("fm24f", 26), ("fm24sf", 27), ("fm24te", 28), ("f96ti", 29), ("wdm4", 30), ("f32fi", 31), ("tenGx3", 32), ("tenGigLR", 33), ("g16x3", 34), ("g24t3", 35), ("gm16x3", 36), ("gm16t3", 37), ("fm16t3", 38), ("fm32p", 39), ("fm8v", 50), ("wm4t1", 51), ("wm4t3", 52), ("wm1t3", 53), ("wm4e1", 54), ("p3c", 101), ("p12c", 102), ("arm", 103), ("mpls", 104), ("sma", 105), ("p48c", 106), ("a3c", 107), ("a12c", 108), ("pxm", 200), ("s300fixed", 201)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeSlotModuleConfiguredType.setStatus('current')
if mibBuilder.loadTexts: extremeSlotModuleConfiguredType.setDescription('The configured module type for the given slot. At startup, the module-type is none(1). It is possible to configure the module-type even if there is no module in the slot. If the current module in the slot is different than the requested configured module-type, then the current configuration for the module is erased and the card will be restarted. The new configured module-type will be recorded. Since the configured module type is different than the actual module type, a moduleMismatch trap will be sent, and the extremeSlotModuleState for that module will show a mismatch(3). Setting this variable to none(1) will clear the previously assigned module-type of this slot, and all configuration information related to the slot will be erased.')
extremeSlotModuleInsertedType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 55, 101, 102, 103, 104, 105, 106, 107, 108, 200, 201, 202))).clone(namedValues=NamedValues(("none", 1), ("fe32", 2), ("g4x", 3), ("g6x", 4), ("fe32fx", 5), ("msm", 6), ("f48ti", 7), ("g8xi", 8), ("g8ti", 9), ("g12sxi", 10), ("g12ti", 11), ("msm64i", 18), ("alpine3808", 19), ("alpine3804", 20), ("fm32t", 21), ("gm4x", 22), ("gm4sx", 23), ("gm4t", 24), ("wdm8", 25), ("fm24f", 26), ("fm24sf", 27), ("fm24te", 28), ("f96ti", 29), ("wdm4", 30), ("f32fi", 31), ("tenGx3", 32), ("tenGigLR", 33), ("g16x3", 34), ("g24t3", 35), ("gm16x3", 36), ("gm16t3", 37), ("fm16t3", 38), ("fm32p", 39), ("fm8v", 50), ("wm4t1", 51), ("wm4t3", 52), ("wm1t3", 53), ("wm4e1", 54), ("alpine3802", 55), ("p3c", 101), ("p12c", 102), ("arm", 103), ("mpls", 104), ("sma", 105), ("p48c", 106), ("a3c", 107), ("a12c", 108), ("pxm", 200), ("s300fixed", 201), ("msm3", 202)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSlotModuleInsertedType.setStatus('current')
if mibBuilder.loadTexts: extremeSlotModuleInsertedType.setDescription('The module type inserted into the slot. It is possible to have a slot inserted into the slot even though extremeSlotConfiguredType is none(1).')
extremeSlotModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 100))).clone(namedValues=NamedValues(("notPresent", 1), ("testing", 2), ("mismatch", 3), ("failed", 4), ("operational", 5), ("powerdown", 6), ("unknown", 7), ("present", 8), ("poweron", 9), ("post", 10), ("downloading", 11), ("booting", 12), ("offline", 13), ("initializing", 14), ("invalid", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSlotModuleState.setStatus('current')
if mibBuilder.loadTexts: extremeSlotModuleState.setDescription('The state of the module inserted in this slot.')
extremeSlotModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 1, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSlotModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: extremeSlotModuleSerialNumber.setDescription('The serial number of the module inserted in this slot.')
extremeSystemHealthCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 1, 3))
extremeHealthCheckErrorType = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("cpuPacket", 2), ("backplane", 3), ("hardwareFail", 4), ("pbusChecksum", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeHealthCheckErrorType.setStatus('current')
if mibBuilder.loadTexts: extremeHealthCheckErrorType.setDescription('The error reported in the system health check trap')
extremeHealthCheckAction = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("syslogOnly", 1), ("healthCheckTrap", 2), ("ioModuleDown", 3), ("systemDown", 4), ("autoRecovery", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeHealthCheckAction.setStatus('current')
if mibBuilder.loadTexts: extremeHealthCheckAction.setDescription('The action/alarm level that has been configured for health check.')
extremeHealthCheckMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeHealthCheckMaxRetries.setStatus('current')
if mibBuilder.loadTexts: extremeHealthCheckMaxRetries.setDescription('The maximum number of times a module restart will be attempted if it fails. If extremeHealthCheckAction is not autorecovery(5), then this value is zero.')
extremeSystemThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 1, 4))
extremeCpuUtilRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeCpuUtilRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: extremeCpuUtilRisingThreshold.setDescription('Rising threshold for CPU Aggregation utilization trap')
extremeCpuTaskUtilPair = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 1, 4, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeCpuTaskUtilPair.setStatus('current')
if mibBuilder.loadTexts: extremeCpuTaskUtilPair.setDescription('TaskName/CPU_% Util pair reported in CPU Utilization trap')
mibBuilder.exportSymbols("EXTREME-SYSTEM-MIB", extremePatchVersion=extremePatchVersion, extremeImageBooted=extremeImageBooted, extremeMsmFailoverCause=extremeMsmFailoverCause, extremePowerAlarm=extremePowerAlarm, extremeCpuTask2Name=extremeCpuTask2Name, extremeSlotModuleInsertedType=extremeSlotModuleInsertedType, extremeImageUAACapability=extremeImageUAACapability, extremeSaveConfiguration=extremeSaveConfiguration, extremeSaveStatus=extremeSaveStatus, extremeSlotModuleSerialNumber=extremeSlotModuleSerialNumber, extremeAuthFailSrcAddr=extremeAuthFailSrcAddr, extremeImageSecurity=extremeImageSecurity, extremeSystemCommon=extremeSystemCommon, extremeInputPowerVoltage=extremeInputPowerVoltage, extremeMasterMSMSlot=extremeMasterMSMSlot, extremeFanNumber=extremeFanNumber, extremeSystemThresholds=extremeSystemThresholds, extremeRedundantPowerAlarm=extremeRedundantPowerAlarm, extremeCpuAggregateUtilization=extremeCpuAggregateUtilization, extremeCpuTask2Table=extremeCpuTask2Table, extremePowerSupplyStatus=extremePowerSupplyStatus, extremeConfigToUseOnReboot=extremeConfigToUseOnReboot, extremeImageTable=extremeImageTable, extremeSlotName=extremeSlotName, extremePowerSupplyNumber=extremePowerSupplyNumber, extremePowerSupplySerialNumber=extremePowerSupplySerialNumber, extremeSystemBoardID=extremeSystemBoardID, extremeDot1dTpFdbTableEnable=extremeDot1dTpFdbTableEnable, extremeCpuTask2Entry=extremeCpuTask2Entry, extremeImageFeatureNumber=extremeImageFeatureNumber, extremeCpuTask2Utilization=extremeCpuTask2Utilization, extremeMinorVersion=extremeMinorVersion, extremePowerSupplyEntry=extremePowerSupplyEntry, extremeSlotModuleConfiguredType=extremeSlotModuleConfiguredType, extremePowerSupplyInputVoltage=extremePowerSupplyInputVoltage, extremeFanOperational=extremeFanOperational, extremeFanEntPhysicalIndex=extremeFanEntPhysicalIndex, extremeSubMajorVersion=extremeSubMajorVersion, extremeSustainingReleaseNumber=extremeSustainingReleaseNumber, extremeCpuTask2CpuId=extremeCpuTask2CpuId, extremeImageEntry=extremeImageEntry, extremeCpuTask2MaxUtilization=extremeCpuTask2MaxUtilization, extremeImageSshCapability=extremeImageSshCapability, extremePowerSupplyEntPhysicalIndex=extremePowerSupplyEntPhysicalIndex, extremeFanStatusEntry=extremeFanStatusEntry, extremeSlotNumber=extremeSlotNumber, extremeCpuUtilRisingThreshold=extremeCpuUtilRisingThreshold, extremeImageNumber=extremeImageNumber, extremeBuildNumber=extremeBuildNumber, extremeRmonEnable=extremeRmonEnable, extremeSlotTable=extremeSlotTable, extremeOverTemperatureAlarm=extremeOverTemperatureAlarm, extremePrimaryPowerOperational=extremePrimaryPowerOperational, extremeCpuTask2Id=extremeCpuTask2Id, extremeChassisPortsPerSlot=extremeChassisPortsPerSlot, extremeImageFeatureTable=extremeImageFeatureTable, extremeSystemID=extremeSystemID, extremeHealthCheckAction=extremeHealthCheckAction, extremeSlotEntry=extremeSlotEntry, extremePowerSupplyTable=extremePowerSupplyTable, extremeCpuTask2Pc=extremeCpuTask2Pc, extremeSlotModuleState=extremeSlotModuleState, extremeRedundantPowerStatus=extremeRedundantPowerStatus, extremeSystemRightBoardID=extremeSystemRightBoardID, PYSNMP_MODULE_ID=extremeSystem, extremePowerStatus=extremePowerStatus, extremeTechnologyReleaseNumber=extremeTechnologyReleaseNumber, extremeImageType=extremeImageType, extremeImageFeatureEntry=extremeImageFeatureEntry, extremeCurrentConfigInUse=extremeCurrentConfigInUse, extremeCurrentTemperature=extremeCurrentTemperature, extremeCpuTaskUtilPair=extremeCpuTaskUtilPair, extremeSystem=extremeSystem, extremeSystemLeftBoardID=extremeSystemLeftBoardID, extremeSystemHealthCheck=extremeSystemHealthCheck, extremeMajorVersion=extremeMajorVersion, extremeBranchRevisionNumber=extremeBranchRevisionNumber, extremeBootROMVersion=extremeBootROMVersion, extremeHealthCheckMaxRetries=extremeHealthCheckMaxRetries, extremeCpuTask2Status=extremeCpuTask2Status, extremeHealthCheckErrorType=extremeHealthCheckErrorType, extremeSecondarySoftwareRev=extremeSecondarySoftwareRev, extremeChassisGroup=extremeChassisGroup, extremeImageDescription=extremeImageDescription, extremeCpuTransmitPriority=extremeCpuTransmitPriority, extremeImageToUseOnReboot=extremeImageToUseOnReboot, extremeFanStatusTable=extremeFanStatusTable, extremePrimarySoftwareRev=extremePrimarySoftwareRev)
