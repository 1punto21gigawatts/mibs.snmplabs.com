#
# PySNMP MIB module TUBS-NFS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TUBS-NFS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, enterprises, TimeTicks, Counter64, Integer32, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Gauge32, IpAddress, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "enterprises", "TimeTicks", "Counter64", "Integer32", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Gauge32", "IpAddress", "ModuleIdentity", "iso")
TextualConvention, TimeStamp, DateAndTime, TruthValue, TAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DateAndTime", "TruthValue", "TAddress", "RowStatus", "DisplayString")
nfsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1575, 1, 2))
if mibBuilder.loadTexts: nfsMIB.setLastUpdated('9411152024Z')
if mibBuilder.loadTexts: nfsMIB.setOrganization('TU Braunschweig')
if mibBuilder.loadTexts: nfsMIB.setContactInfo(' Juergen Schoenwaelder Postal: TU Braunschweig Bueltenweg 74/75 D-38108 Braunschweig GERMANY Tel: +49 531 391 3249 Fax: +49 531 391 5936 E-mail: schoenw@ibr.cs.tu-bs.de')
if mibBuilder.loadTexts: nfsMIB.setDescription('Experimental MIB modules for NFS server.')
nfsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1))
nfsClient = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2))
nfsServerCalls = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerCalls.setStatus('current')
if mibBuilder.loadTexts: nfsServerCalls.setDescription('The number of nfs calls received by the server. Every read access to this variable will cause the agent to reload the statistics contained in this group.')
nfsServerBad = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerBad.setStatus('current')
if mibBuilder.loadTexts: nfsServerBad.setDescription('The number of incorrect nfs calls received by the server.')
nfsServerNull = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerNull.setStatus('current')
if mibBuilder.loadTexts: nfsServerNull.setDescription('The number of nfs null operations.')
nfsServerGetattr = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerGetattr.setStatus('current')
if mibBuilder.loadTexts: nfsServerGetattr.setDescription('The number of nfs getattr operations.')
nfsServerSetattr = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerSetattr.setStatus('current')
if mibBuilder.loadTexts: nfsServerSetattr.setDescription('The number of nfs setattr operations.')
nfsServerRoot = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerRoot.setStatus('current')
if mibBuilder.loadTexts: nfsServerRoot.setDescription('The number of nfs root operations.')
nfsServerLookup = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerLookup.setStatus('current')
if mibBuilder.loadTexts: nfsServerLookup.setDescription('The number of nfs lookup operations.')
nfsServerReadlink = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerReadlink.setStatus('current')
if mibBuilder.loadTexts: nfsServerReadlink.setDescription('The number of nfs readlink operations.')
nfsServerRead = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerRead.setStatus('current')
if mibBuilder.loadTexts: nfsServerRead.setDescription('The number of nfs read operations.')
nfsServerWrcache = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerWrcache.setStatus('current')
if mibBuilder.loadTexts: nfsServerWrcache.setDescription('The number of nfs wrcache operations.')
nfsServerWrite = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerWrite.setStatus('current')
if mibBuilder.loadTexts: nfsServerWrite.setDescription('The number of nfs write operations.')
nfsServerCreate = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerCreate.setStatus('current')
if mibBuilder.loadTexts: nfsServerCreate.setDescription('The number of nfs create operations.')
nfsServerRemove = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerRemove.setStatus('current')
if mibBuilder.loadTexts: nfsServerRemove.setDescription('The number of nfs remove operations.')
nfsServerRename = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerRename.setStatus('current')
if mibBuilder.loadTexts: nfsServerRename.setDescription('The number of nfs rename operations.')
nfsServerLink = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerLink.setStatus('current')
if mibBuilder.loadTexts: nfsServerLink.setDescription('The number of nfs link operations.')
nfsServerSymlink = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerSymlink.setStatus('current')
if mibBuilder.loadTexts: nfsServerSymlink.setDescription('The number of nfs symlink operations.')
nfsServerMkdir = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerMkdir.setStatus('current')
if mibBuilder.loadTexts: nfsServerMkdir.setDescription('The number of nfs mkdir operations.')
nfsServerRmdir = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerRmdir.setStatus('current')
if mibBuilder.loadTexts: nfsServerRmdir.setDescription('The number of nfs rmdir operations.')
nfsServerReaddir = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerReaddir.setStatus('current')
if mibBuilder.loadTexts: nfsServerReaddir.setDescription('The number of nfs readdir operations.')
nfsServerFsstat = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServerFsstat.setStatus('current')
if mibBuilder.loadTexts: nfsServerFsstat.setDescription('The number of nfs fsstat operations.')
nfsClientCalls = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientCalls.setStatus('current')
if mibBuilder.loadTexts: nfsClientCalls.setDescription('The number of nfs calls send by the client Every read access to this variable will cause the agent to reload the statistics contained in this group.')
nfsClientBad = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientBad.setStatus('current')
if mibBuilder.loadTexts: nfsClientBad.setDescription('The number of incorrect nfs calls send by the client.')
nfsClientNull = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientNull.setStatus('current')
if mibBuilder.loadTexts: nfsClientNull.setDescription('The number of nfs null operations.')
nfsClientGetattr = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientGetattr.setStatus('current')
if mibBuilder.loadTexts: nfsClientGetattr.setDescription('The number of nfs getattr operations.')
nfsClientSetattr = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientSetattr.setStatus('current')
if mibBuilder.loadTexts: nfsClientSetattr.setDescription('The number of nfs setattr operations.')
nfsClientRoot = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientRoot.setStatus('current')
if mibBuilder.loadTexts: nfsClientRoot.setDescription('The number of nfs root operations.')
nfsClientLookup = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientLookup.setStatus('current')
if mibBuilder.loadTexts: nfsClientLookup.setDescription('The number of nfs lookup operations.')
nfsClientReadlink = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientReadlink.setStatus('current')
if mibBuilder.loadTexts: nfsClientReadlink.setDescription('The number of nfs readlink operations.')
nfsClientRead = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientRead.setStatus('current')
if mibBuilder.loadTexts: nfsClientRead.setDescription('The number of nfs read operations.')
nfsClientWrcache = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientWrcache.setStatus('current')
if mibBuilder.loadTexts: nfsClientWrcache.setDescription('The number of nfs wrcache operations.')
nfsClientWrite = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientWrite.setStatus('current')
if mibBuilder.loadTexts: nfsClientWrite.setDescription('The number of nfs write operations.')
nfsClientCreate = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientCreate.setStatus('current')
if mibBuilder.loadTexts: nfsClientCreate.setDescription('The number of nfs create operations.')
nfsClientRemove = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientRemove.setStatus('current')
if mibBuilder.loadTexts: nfsClientRemove.setDescription('The number of nfs remove operations.')
nfsClientRename = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientRename.setStatus('current')
if mibBuilder.loadTexts: nfsClientRename.setDescription('The number of nfs rename operations.')
nfsClientLink = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientLink.setStatus('current')
if mibBuilder.loadTexts: nfsClientLink.setDescription('The number of nfs link operations.')
nfsClientSymlink = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientSymlink.setStatus('current')
if mibBuilder.loadTexts: nfsClientSymlink.setDescription('The number of nfs symlink operations.')
nfsClientMkdir = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientMkdir.setStatus('current')
if mibBuilder.loadTexts: nfsClientMkdir.setDescription('The number of nfs mkdir operations.')
nfsClientRmdir = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientRmdir.setStatus('current')
if mibBuilder.loadTexts: nfsClientRmdir.setDescription('The number of nfs rmdir operations.')
nfsClientReaddir = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientReaddir.setStatus('current')
if mibBuilder.loadTexts: nfsClientReaddir.setDescription('The number of nfs readdir operations.')
nfsClientFsstat = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 2, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClientFsstat.setStatus('current')
if mibBuilder.loadTexts: nfsClientFsstat.setDescription('The number of nfs fsstat operations.')
mibBuilder.exportSymbols("TUBS-NFS-MIB", nfsClient=nfsClient, nfsClientLink=nfsClientLink, nfsServerRename=nfsServerRename, nfsClientWrite=nfsClientWrite, nfsServerNull=nfsServerNull, nfsMIB=nfsMIB, nfsServerWrcache=nfsServerWrcache, nfsClientRoot=nfsClientRoot, nfsClientCalls=nfsClientCalls, nfsClientRead=nfsClientRead, nfsClientReadlink=nfsClientReadlink, nfsServerMkdir=nfsServerMkdir, nfsServerRoot=nfsServerRoot, nfsClientRemove=nfsClientRemove, nfsServerLookup=nfsServerLookup, nfsServerCreate=nfsServerCreate, nfsServerFsstat=nfsServerFsstat, nfsServerWrite=nfsServerWrite, nfsServerReadlink=nfsServerReadlink, nfsServer=nfsServer, nfsServerCalls=nfsServerCalls, nfsClientSetattr=nfsClientSetattr, nfsClientNull=nfsClientNull, nfsClientGetattr=nfsClientGetattr, nfsClientBad=nfsClientBad, nfsServerReaddir=nfsServerReaddir, nfsServerRead=nfsServerRead, nfsClientRmdir=nfsClientRmdir, nfsServerRemove=nfsServerRemove, nfsServerSetattr=nfsServerSetattr, nfsClientMkdir=nfsClientMkdir, nfsClientReaddir=nfsClientReaddir, nfsServerSymlink=nfsServerSymlink, nfsClientCreate=nfsClientCreate, nfsClientSymlink=nfsClientSymlink, nfsClientLookup=nfsClientLookup, nfsClientWrcache=nfsClientWrcache, nfsServerBad=nfsServerBad, PYSNMP_MODULE_ID=nfsMIB, nfsServerLink=nfsServerLink, nfsClientRename=nfsClientRename, nfsServerGetattr=nfsServerGetattr, nfsServerRmdir=nfsServerRmdir, nfsClientFsstat=nfsClientFsstat)
