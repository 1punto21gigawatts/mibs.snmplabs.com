#
# PySNMP MIB module COMPAQ-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COMPAQ-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
compaq_common_mgmt, = mibBuilder.importSymbols("COMPAQ-ID-REC-MIB", "compaq-common-mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, NotificationType, Gauge32, ObjectIdentity, MibIdentifier, Unsigned32, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "NotificationType", "Gauge32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Bits", "Counter32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
swCompaqL2Mgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 232, 161, 3, 2))
if mibBuilder.loadTexts: swCompaqL2Mgmt.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swCompaqL2Mgmt.setOrganization('COMPAQ, Inc.')
if mibBuilder.loadTexts: swCompaqL2Mgmt.setContactInfo(' COMPAQ Customer Service Postal: Tel: E-mail: ')
if mibBuilder.loadTexts: swCompaqL2Mgmt.setDescription('The Structure of Common Management Information for making a trunk and IGMP related function for Compaq devices.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

swPortTrunkPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1))
swPortMirrorPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2))
swIGMPPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3))
swPortTrunkMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMaxEntries.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkMaxEntries.setDescription('The max entries of swPortTrunkTable')
swPortTrunkMaxPortMembers = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMaxPortMembers.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkMaxPortMembers.setDescription('The max number of ports allowed in a trunk.')
swPortTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 3), )
if mibBuilder.loadTexts: swPortTrunkTable.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkTable.setDescription('This table specifies the port membership for each logical link.')
swPortTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 3, 1), ).setIndexNames((0, "COMPAQ-L2MGMT-MIB", "swPortTrunkIndex"))
if mibBuilder.loadTexts: swPortTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkEntry.setDescription('A list of information specifies which ports group form a single logical link.')
swPortTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkIndex.setDescription('The index of logical port trunk.')
swPortTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkName.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkName.setDescription('The name of logical port trunk.')
swPortTrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMasterPort.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkMasterPort.setDescription('The object indicates the master port number of the port trunk entry.The first port of the trunk is implicitly configured to be the master logical port.When using Port Trunk, you can not configure the other ports of the group except the master port. Their configuration must be same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
swPortTrunkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkPortList.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkPortList.setDescription('Indicate member ports of a logical trunk.')
swPortTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkState.setStatus('current')
if mibBuilder.loadTexts: swPortTrunkState.setDescription('This object indicates the status of this entry. ')
swPortMirrorMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortMirrorMaxEntries.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorMaxEntries.setDescription('The max entries of this swPortMirrorCtrlTable')
swPortMirrorCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2, 2), )
if mibBuilder.loadTexts: swPortMirrorCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorCtrlTable.setDescription("A list of port snooping entries.Port mirroring function provides an easy way to monitor traffic on any port. In this way any good packets appears on the source mirror port also shows up on the target mirror port and doesn't to reconstruct the LAN.")
swPortMirrorCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2, 2, 1), ).setIndexNames((0, "COMPAQ-L2MGMT-MIB", "swPortMirrorIndex"))
if mibBuilder.loadTexts: swPortMirrorCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorCtrlEntry.setDescription('A list of information provide an easy way to monitor traffic on any port. The use can bring a fancy network monitor attaching to any target mirror port and set the port to be monitored as source mirror port. ')
swPortMirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortMirrorIndex.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorIndex.setDescription('This object indicates the port snooping entry number.There is just only one now.')
swPortMirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortMirrorSourcePort.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorSourcePort.setDescription('This object indicates the number of port to be sniffed. The port number is the sequential (logical) number which is also applied to bridge MIB, etc. ')
swPortMirrorTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortMirrorTargetPort.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorTargetPort.setDescription('This object indicates switch which port will sniff another port. A trunk port member cannot be configured as a target Snooping port. The port number is the sequential (logical) number which is also applied to bridge MIB, etc. ')
swPortMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ingress", 2), ("egress", 3), ("both", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortMirrorDirection.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorDirection.setDescription('This object uses to setup the what packets will be mirrored.')
swPortMirrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortMirrorState.setStatus('current')
if mibBuilder.loadTexts: swPortMirrorState.setDescription('This object indicates the status of this entry. ')
swIGMPCtrlStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: swIGMPCtrlStatus.setDescription('Enable the IGMP Control')
swIGMPCtrlMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPCtrlMaxEntries.setStatus('current')
if mibBuilder.loadTexts: swIGMPCtrlMaxEntries.setDescription('The max entries of this swIGMPCtrlTable')
swIGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3), )
if mibBuilder.loadTexts: swIGMPCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swIGMPCtrlTable.setDescription("The table controls the Vlan's IGMP function. Its scale depends on current VLAN state (swVlanInfoStatus). If VLAN is disabled or in Mac-Base mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries can be up to 12, with index range from 1 to 12.")
swIGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3, 1), ).setIndexNames((0, "COMPAQ-L2MGMT-MIB", "swIGMPCtrlVid"))
if mibBuilder.loadTexts: swIGMPCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swIGMPCtrlEntry.setDescription('The entry in IGMP control table (swIGMPCtrlTable). The entry is effective only when IGMP capture switch (swDevIGMPCaptureState) is enabled.')
swIGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIGMPCtrlVid.setStatus('current')
if mibBuilder.loadTexts: swIGMPCtrlVid.setDescription("This object indicates the IGMP control entry's VLAN id. If VLAN is disabled or in Mac-Base mode, the Vid is always 0 and cannot be changed by management users. If VLAN is in Port-Base mode, the Vid is arranged from 1 to 12 , fixed form. If VLAN is in 802.1q mode, the Vid setting can vary from 1 to 4094 by management user, and the Vid in each entry must be unique in the IGMP Control Table.")
swIGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3, 1, 2), Integer32().clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIGMPQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swIGMPQueryInterval.setDescription('The frequency at which IGMP Host-Query packets are transmitted on this interface.')
swIGMPQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIGMPQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: swIGMPQueryMaxResponseTime.setDescription('The maximum query response time advertised in IGMPv2 queries on this interface.')
swIGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIGMPRobustness.setStatus('current')
if mibBuilder.loadTexts: swIGMPRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses. Note: for Version issue, when using IGMP V1, this item got no any sense, but v2 should be used.')
swIGMPCtrlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3, 1, 5), Integer32().clone(300)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPCtrlTimer.setStatus('current')
if mibBuilder.loadTexts: swIGMPCtrlTimer.setDescription('The timer value for sending IGMP query packet when none was sent by the multicast router in the LAN. The timer works in per-VLAN basis. Our device will be activated to send the query message if the timer is expired. Please reference RFC2236-1997. And it recommends a default of 125 seconds. The timeout value must be at least 30 seconds.')
swIGMPQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("v0Querier", 2), ("v1Querier", 3), ("v2Querier", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIGMPQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: swIGMPQuerierVersion.setDescription('Select the IGMP Querier Version')
swIGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIGMPCtrlState.setStatus('current')
if mibBuilder.loadTexts: swIGMPCtrlState.setDescription('This object indicates the status of this entry.')
swIGMPIfnoMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPIfnoMaxEntries.setStatus('current')
if mibBuilder.loadTexts: swIGMPIfnoMaxEntries.setDescription('The max entries of this swIGMPInfoTable')
swIGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 5), )
if mibBuilder.loadTexts: swIGMPInfoTable.setStatus('current')
if mibBuilder.loadTexts: swIGMPInfoTable.setDescription('The table contains the number current IGMP query packets which is captured by this device, as well as the IGMP query packets sent by the device.')
swIGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 5, 1), ).setIndexNames((0, "COMPAQ-L2MGMT-MIB", "swIGMPInfoVid"))
if mibBuilder.loadTexts: swIGMPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swIGMPInfoEntry.setDescription('Information about current IGMP query information, provided that swDevIGMPCaptureState and swIGMPCtrlState of associated VLAN entry are all enabled.')
swIGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoVid.setStatus('current')
if mibBuilder.loadTexts: swIGMPInfoVid.setDescription('This object indicates the Vid of associated IGMP info table entry. It follows swIGMPCtrlVid in the associated entry of IGMP control table (swIGMPCtrlTable).')
swIGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setStatus('current')
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function enabled, in per-VLAN basis.')
swIGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setStatus('current')
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, in per-VLAN basis. In case of IGMP timer expiration, the switch sends IGMP query packets to related VLAN member ports and increment this object by 1.')
swIGMPTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: swIGMPTableMaxEntries.setDescription('The max entries of swIGMPTable')
swIGMPTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 7), )
if mibBuilder.loadTexts: swIGMPTable.setStatus('current')
if mibBuilder.loadTexts: swIGMPTable.setDescription('This table containing current IGMP information which is captured by this device, provided that swDevIGMPCaptureState and swIGMPCtrlState of associated VLAN entry are all enabled. Note that the priority of IGMP table entries is lower than Filtering Table, i.e. if there is a table hash collision between the entries of IGMP Table and Filtering Table inside the switch H/W address table, then Filtering Table entry overwrite the colliding entry of IGMP Table. See swFdbFilterTable description also.')
swIGMPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 7, 1), ).setIndexNames((0, "COMPAQ-L2MGMT-MIB", "swIGMPVid"), (0, "COMPAQ-L2MGMT-MIB", "swIGMPGroupIpAddr"))
if mibBuilder.loadTexts: swIGMPEntry.setStatus('current')
if mibBuilder.loadTexts: swIGMPEntry.setDescription('Information about IGMP information which is captured by this device, provided that swDevIGMPCaptureState and swIGMPCtrlState of associated VLAN entry are all enabled.')
swIGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPVid.setStatus('current')
if mibBuilder.loadTexts: swIGMPVid.setDescription('This object indicates the Vid of individual IGMP table entry. It shows the Vid of IGMP report information captured on network.')
swIGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setDescription('This object is identify group ip address which is captured from IGMP packet, in per-Vlan basis.')
swIGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 7, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPMacAddr.setStatus('current')
if mibBuilder.loadTexts: swIGMPMacAddr.setDescription('This object is to identify the mac address corresponding to swIGMPGroupIpAddr, in per-Vlan basis..')
swIGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPPortMap.setStatus('current')
if mibBuilder.loadTexts: swIGMPPortMap.setDescription('This object indicates which ports are belonged to the same multicast group, in per-Vlan basis. Each multicast group has a octect string to indicate with port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. .')
swIGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 2, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setStatus('current')
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setDescription('This object indicates how many report packets are received by our device corresponding to this entry since IGMP function is enabled, in per-Vlan basis. .')
mibBuilder.exportSymbols("COMPAQ-L2MGMT-MIB", swPortMirrorDirection=swPortMirrorDirection, swIGMPIfnoMaxEntries=swIGMPIfnoMaxEntries, swPortTrunkName=swPortTrunkName, swPortMirrorCtrlEntry=swPortMirrorCtrlEntry, swPortMirrorState=swPortMirrorState, swIGMPCtrlTimer=swIGMPCtrlTimer, swIGMPInfoEntry=swIGMPInfoEntry, swPortTrunkTable=swPortTrunkTable, swPortTrunkEntry=swPortTrunkEntry, swPortTrunkState=swPortTrunkState, swIGMPCtrlMaxEntries=swIGMPCtrlMaxEntries, swIGMPCtrlState=swIGMPCtrlState, swPortTrunkMaxPortMembers=swPortTrunkMaxPortMembers, swPortTrunkIndex=swPortTrunkIndex, swIGMPPackage=swIGMPPackage, swIGMPVid=swIGMPVid, swPortMirrorMaxEntries=swPortMirrorMaxEntries, swPortMirrorSourcePort=swPortMirrorSourcePort, swIGMPInfoTxQueryCount=swIGMPInfoTxQueryCount, swIGMPPortMap=swIGMPPortMap, swPortMirrorPackage=swPortMirrorPackage, swIGMPQuerierVersion=swIGMPQuerierVersion, MacAddress=MacAddress, swIGMPCtrlEntry=swIGMPCtrlEntry, PortList=PortList, swIGMPTableMaxEntries=swIGMPTableMaxEntries, swIGMPEntry=swIGMPEntry, swIGMPInfoQueryCount=swIGMPInfoQueryCount, swIGMPCtrlTable=swIGMPCtrlTable, swPortTrunkMaxEntries=swPortTrunkMaxEntries, swPortMirrorTargetPort=swPortMirrorTargetPort, swIGMPIpGroupReportCount=swIGMPIpGroupReportCount, swPortMirrorIndex=swPortMirrorIndex, swIGMPTable=swIGMPTable, swIGMPInfoVid=swIGMPInfoVid, swPortMirrorCtrlTable=swPortMirrorCtrlTable, swIGMPMacAddr=swIGMPMacAddr, PYSNMP_MODULE_ID=swCompaqL2Mgmt, swPortTrunkMasterPort=swPortTrunkMasterPort, swIGMPCtrlVid=swIGMPCtrlVid, swIGMPCtrlStatus=swIGMPCtrlStatus, swIGMPQueryMaxResponseTime=swIGMPQueryMaxResponseTime, swPortTrunkPortList=swPortTrunkPortList, swIGMPInfoTable=swIGMPInfoTable, swIGMPQueryInterval=swIGMPQueryInterval, swPortTrunkPackage=swPortTrunkPackage, swIGMPRobustness=swIGMPRobustness, swIGMPGroupIpAddr=swIGMPGroupIpAddr, swCompaqL2Mgmt=swCompaqL2Mgmt)
