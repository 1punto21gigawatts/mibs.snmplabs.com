#
# PySNMP MIB module INTEL-MPLINK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-MPLINK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, Integer32, Unsigned32, Counter32, IpAddress, MibIdentifier, NotificationType, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, ObjectIdentity, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Integer32", "Unsigned32", "Counter32", "IpAddress", "MibIdentifier", "NotificationType", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "ObjectIdentity", "iso", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class OnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class Attachment(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("none", 1), ("tenbase-t", 2), ("aui", 3), ("id0", 4), ("id1", 5), ("id2", 6), ("id3", 7), ("eia530-dce", 8), ("test-plug", 9), ("v11-dce", 10), ("v24-dce", 11), ("v35-dce", 12), ("v36-dce", 13), ("eia530-dte", 14), ("v11-dte", 15), ("v24-dte", 16), ("v35-dte", 17), ("v36-dte", 18), ("empty", 19), ("isdn", 20), ("pcmcia-async", 21), ("isdn-e1-rj45", 22), ("isdn-e1-bnc", 23), ("isdn-t1-rj45", 24))

class CompType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("proprietary", 1), ("stac", 2))

class Direction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3))

class DataState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("down", 1), ("timeCut", 2), ("up", 3))

class ConnectState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("create", 1), ("down", 2), ("outgoingCall", 3), ("incomingCall", 4), ("incomingDisconnect", 5), ("outgoingDisconnect", 6), ("waitDisconnectConfirm", 7), ("error", 8), ("destroy", 9), ("timeCut", 10), ("idle", 11), ("up", 12), ("empty", 13))

class UserEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("all", 1), ("ip", 2), ("ipx", 3), ("br", 4))

class ProtoEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("ip-all", 1), ("ip-ftp", 2), ("ip-telnet", 3), ("ip-smtp", 4), ("ip-dns", 5), ("ip-bootp", 6), ("ip-http", 7), ("ip-snmp", 8), ("ip-rip", 9), ("ip-tunnel", 10), ("ip-other", 11), ("ipx-all", 12), ("ipx-ncp", 13), ("ipx-spx", 14), ("ipx-rip", 15), ("ipx-sap", 16), ("ipx-type20", 17), ("ipx-other", 18), ("br-all", 19), ("br-bpdu", 20), ("br-other", 21))

mpl = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20))
mplService = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 1))
mplLanSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 2))
mplWanSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 3))
mplIfSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 4))
mplGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 5))
mplUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 20, 6))
mplServiceTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1), )
if mibBuilder.loadTexts: mplServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceTable.setDescription('This table contains information on MP Links. These entries applies to LAN entries as well as WAN entries.')
mplServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplServiceNumber"))
if mibBuilder.loadTexts: mplServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceEntry.setDescription('Information on a particular MP Link.')
mplServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceNumber.setDescription('The MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mplServiceSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceSlotNumber.setDescription('The Slot position of the card. Set to 0 for stand-alone products.')
mplServicePlugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServicePlugNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mplServicePlugNumber.setDescription('The plug number of the physical interface to which the MP Link is associated.')
mplServicePlugName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServicePlugName.setStatus('mandatory')
if mibBuilder.loadTexts: mplServicePlugName.setDescription('The name of the physical interface to which the MP Link is associated.')
mplServiceAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 5), Attachment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceAttachment.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceAttachment.setDescription('The connector type used to connect the router to the LAN or WAN.')
mplServiceProvider = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("lan", 1), ("lapbHdlc", 2), ("pppHdlc", 3), ("frHdlc", 4), ("frAttachment", 5), ("lapbIsdn", 6), ("pppIsdn", 7), ("isdnAttachment", 8), ("x25Lapb", 9), ("x25Attachment", 10), ("slip", 11), ("pppMultiMaster", 12), ("pppAodi", 13), ("pppX25", 14), ("pppPcmcia", 15), ("pppTcpTunnel", 16), ("pppPcmciaModem", 17), ("padX25", 18), ("pppAsync", 19), ("asyncAttachment", 20), ("pppX31", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceProvider.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceProvider.setDescription('The type of provider for this MP Link. For WAN links this specifies the actual protocol stack.')
mplServiceBytesSentUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceBytesSentUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceBytesSentUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of octets (bytes) sent via the MP Link.')
mplServiceBytesSentLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceBytesSentLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceBytesSentLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of octets (bytes) sent via the MP Link.')
mplServiceBytesReceivedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceBytesReceivedUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceBytesReceivedUpper.setDescription('The lower 32 bits of the 64 bits counter which is the number of octets (bytes) sent via the MP Link.')
mplServiceBytesReceivedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplServiceBytesReceivedLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceBytesReceivedLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of octets (bytes) received via the MP Link.')
mplServiceLock = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 1, 1, 1, 11), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplServiceLock.setStatus('mandatory')
if mibBuilder.loadTexts: mplServiceLock.setDescription("Indicates whether an MP Link has been locked from local management. The link may be unlocked by setting the value to 'off' and locked by setting the value to 'on'.")
mplLanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1), )
if mibBuilder.loadTexts: mplLanTable.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTable.setDescription('This table contains information on LAN MP Links.')
mplLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplLanNumber"))
if mibBuilder.loadTexts: mplLanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanEntry.setDescription('Information on a particular LAN MP Link.')
mplLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanNumber.setDescription('The LAN MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mplLanRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanRxCRCErrors.setDescription('The number of frames received which were discarded due to Cyclic Redundancy Check (CRC) errors.')
mplLanRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanRxOverrun.setDescription('The number of frames received which were lost due to RAM overloads within the router. This should not occur.')
mplLanRxLong = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxLong.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanRxLong.setDescription('The number of frames received which were discarded due to being larger than the maximum allowable length on the LAN.')
mplLanRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanRxOverflow.setDescription('The number of frames received which were discarded due to lack of buffer capacity.')
mplLanRxAlnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxAlnErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanRxAlnErrors.setDescription('The number of frames received which were discarded due to having the wrong frame length.')
mplLanRxOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxOuts.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanRxOuts.setDescription('The number of frames received which were processed by higher layer protocols.')
mplLanRxShort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanRxShort.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanRxShort.setDescription('The number of frames received which were discarded due to being shorter than the smallest allowable length on the LAN.')
mplLanTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxDeferred.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTxDeferred.setDescription('The number of outgoing frames which were discarded due to a busy link.')
mplLanTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTxUnderrun.setDescription('The number of outgoing frames which were discarded due to overload.')
mplLanTxSQEFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxSQEFailure.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTxSQEFailure.setDescription('The number of outbound frames which had Signal Quality Errors (SQE).')
mplLanTxExcDeferral = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxExcDeferral.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTxExcDeferral.setDescription('The number of transmission attempts which were delayed for more than 3.2 ms.')
mplLanTxCollExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxCollExceed.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTxCollExceed.setDescription('The number of outbound frames which were discarded due to exceeding 16 collisions on the Ethernet.')
mplLanTxLateColl = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxLateColl.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTxLateColl.setDescription('The number of collisions occurring after the first 512 bytes of a frame had been transmitted.')
mplLanTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTxCollisions.setDescription('The number of outgoing frames which were discarded due to collisions that occurred during transmissions.')
mplLanTxNoCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplLanTxNoCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: mplLanTxNoCarrier.setDescription('The number of No Carrier detections during transmissions.')
mplWanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1), )
if mibBuilder.loadTexts: mplWanTable.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanTable.setDescription('This table contains information on WAN MP Links.')
mplWanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplWanNumber"))
if mibBuilder.loadTexts: mplWanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanEntry.setDescription('Information on a particular WAN MP Link.')
mplWanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanNumber.setDescription('The WAN MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mplWanDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 2), DataState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanDataState.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanDataState.setDescription('The state of the MP Link seen from the higher layer protocol.')
mplWanDataStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanDataStateTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanDataStateTimer.setDescription('The time in seconds since the MP Link entered the Data State.')
mplWanConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 4), ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanConnectState.setDescription('Indicates the connection state of the WAN MP Link.')
mplWanConnectStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanConnectStateTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanConnectStateTimer.setDescription('The time in seconds since the MP Link entered the Connect State.')
mplWanCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 6), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCompression.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanCompression.setDescription("Indicates if data compression is used over the WAN MP Link. For frame relay links compression is not negotiated. For all other WAN protocols the compression will remain 'off' if not configured in both routers over the link.")
mplWanCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 7), CompType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCompressionType.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanCompressionType.setDescription('Proprietary compression is used for LAPB and X.25 MP Links. For all other WAN protocols the Stac compression algorithm is used.')
mplWanCallsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCallsSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanCallsSucceeded.setDescription('The number of outgoing call which succeeded in making the connection.')
mplWanCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCallsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanCallsFailed.setDescription('The number of outgoing call which failed to make the connection.')
mplWanCallsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCallsAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanCallsAccepted.setDescription('The number of incoming calls which were accepted on this link.')
mplWanCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanCallsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanCallsRejected.setDescription('The number of incoming calls which were rejected on this link.')
mplWanRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplWanRetries.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanRetries.setDescription('The number of retries made for outgoing calls. May be set to zero which causes the call sequence to restarted.')
mplWanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 13), Direction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanDirection.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanDirection.setDescription("Shows who initiated the call. 'incoming' if the call was initiated by the remote router and 'outgoing' if the call was inititated by this router. For PPP Multi Links the direction refers the the direction of the first slave link.")
mplWanHasBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 14), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanHasBackup.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanHasBackup.setDescription('Indicates whether this link has a backup link configured for it.')
mplWanBackupFor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanBackupFor.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanBackupFor.setDescription('Shows the primary link for which this link is the backup. The value 0 indicates that this is not a backup link.')
mplWanBackupForAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 16), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanBackupForAttachment.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanBackupForAttachment.setDescription('Indicates whether this link is a backup for an attachment.')
mplWanFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanFlags.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanFlags.setDescription('WAN Flags dataCompressionMask 0x0001 acceptIncomingMask 0x0002 permitOutgoingMask 0x0004 permitTimeCutMask 0x0008 chapMask 0x0010 - CHAP, PPP only papMask 0x0020 - PAP, PPP only onlyReplyChapMask 0x0040 slaveLink 0x0080 blockOutgoing 0x0100 blockIncoming 0x0200 isLeased 0x0400 dataCompressionMode 0x0800 - PPP new-stac compression flag activitySoft 0x1000 - Activity timer only sends trap')
mplWanPppMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanPppMaster.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanPppMaster.setDescription('Indicates the master link for a slave link. For master links and links not associated with a PPP Multi Link the value is 0.')
mplWanPppSlaveUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanPppSlaveUpCount.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanPppSlaveUpCount.setDescription("The number of slave links in Connect State 'up'. For slave links and links not associated with a PPP Multi Link the value is 1.")
mplWanActivityTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanActivityTimeLeft.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanActivityTimeLeft.setDescription("The time remaining in seconds until the Daily Activity Limit will close and lock the link. When the Daily Activity Limit has been reached, the link can be activated by setting mplWanActivity to 'on'.")
mplWanActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 21), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplWanActivity.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanActivity.setDescription("Indicates whether the Daily Activity Limit has been reached and locked the link. To unlock the link set the value to 'off'. It is not possible to set to the value to 'on'.")
mplWanTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 22), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanTimer.setDescription("Indicates whether an MP Link timer has locked the link. 'on' means the link is locked.")
mplWanTimeTillTimecut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanTimeTillTimecut.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanTimeTillTimecut.setDescription('Time left in seconds until time cut')
mplWanLastPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanLastPacket.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanLastPacket.setDescription('The first byte in this string identifies the type of packet that opened the link the last time. IP 1 Internet Protocols 0xcc IPX 2 Novell IPX 0x800000008137 STA_ETH 3 Bridge-Ether 0x800080c20007 STA_FRAG 4 Bridge-Frag 0x800080c2000d STA_BPDU 5 Bridge-BPDU 0x800080c2000e STA_CRAY 6 Bridge-Cray 0x800000800500 STA_ETH_FCS 15 Bridge-FCS After this byte follows a part of the packet header.')
mplWanInCallsPlaced = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanInCallsPlaced.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanInCallsPlaced.setDescription('??? Number of calls placed.')
mplWanOutCallsPlaced = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanOutCallsPlaced.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanOutCallsPlaced.setDescription('??? Number of calls placed.')
mplWanInTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanInTimeActive.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanInTimeActive.setDescription('The time in seconds that the link was in the Up state for incoming calls.')
mplWanOutTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanOutTimeActive.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanOutTimeActive.setDescription('The time in seconds that the link was in the Up state for outcoming calls.')
mplWanTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplWanTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: mplWanTotalTime.setDescription('??? ')
mplCompTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2), )
if mibBuilder.loadTexts: mplCompTable.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTable.setDescription('Compression table with counters and other information regarding the Transmit and Receive Decoder.')
mplCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplCompNumber"))
if mibBuilder.loadTexts: mplCompEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompEntry.setDescription('')
mplCompNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompNumber.setDescription('The WAN MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mplCompRxDecRxBytesTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRxBytesTotalUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecRxBytesTotalUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of bytes received by the Receive Decoder.')
mplCompRxDecRxBytesTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRxBytesTotalLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecRxBytesTotalLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of bytes received by the Receive Decoder.')
mplCompRxDecRxBytesDecompUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRxBytesDecompUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecRxBytesDecompUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of bytes sent by the Receive Decoder.')
mplCompRxDecRxBytesDecompLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRxBytesDecompLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecRxBytesDecompLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of bytes sent by the Receive Decoder.')
mplCompRxDecDecompressedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecDecompressedUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecDecompressedUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of packets decompressed by the Receive Decoder.')
mplCompRxDecDecompressedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecDecompressedLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecDecompressedLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of packets decompressed by the Receive Decoder.')
mplCompRxDecAllocErrorsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecAllocErrorsUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecAllocErrorsUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of allocation errors in the Receive Decoder.')
mplCompRxDecAllocErrorsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecAllocErrorsLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecAllocErrorsLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of allocation errors in the Receive Decoder.')
mplCompRxDecRemoteInits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompRxDecRemoteInits.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompRxDecRemoteInits.setDescription('Number of remote initializations by the Receive Decoder.')
mplCompTxEncInBytesTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncInBytesTotalUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncInBytesTotalUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of bytes received by the Transmit Decoder.')
mplCompTxEncInBytesTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncInBytesTotalLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncInBytesTotalLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of bytes received by the Transmit Decoder.')
mplCompTxEncTxBytesCompUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncTxBytesCompUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncTxBytesCompUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of bytes sent by the Transmit Decoder.')
mplCompTxEncTxBytesCompLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncTxBytesCompLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncTxBytesCompLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of bytes sent by the Transmit Decoder.')
mplCompTxEncCompressedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncCompressedUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncCompressedUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of packets compressed by the Transmit Decoder.')
mplCompTxEncCompressedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncCompressedLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncCompressedLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of packets compressed by the Transmit Decoder.')
mplCompTxEncAllocErrorsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncAllocErrorsUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncAllocErrorsUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of allocation errors in the Transmit Decoder.')
mplCompTxEncAllocErrorsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncAllocErrorsLower.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncAllocErrorsLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of allocation errors in the Transmit Decoder.')
mplCompTxEncLocalInits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncLocalInits.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncLocalInits.setDescription('Number of local initializations by the Receive Decoder.')
mplCompTxEncTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncTransmitErrors.setDescription('Number of transmit errors')
mplCompTxEncQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplCompTxEncQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: mplCompTxEncQueueLength.setDescription('Queue length')
mplIfStackTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 4, 1), )
if mibBuilder.loadTexts: mplIfStackTable.setStatus('mandatory')
if mibBuilder.loadTexts: mplIfStackTable.setDescription("This table contains information on the relationships between the multiple sub-layers of network interfaces. In particular, it contains information on which sub- layers run 'on top of' which other sub-layers. Each sub-layer corresponds to a conceptual row in the ifTable.")
mplIfStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 4, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplIfStackNumber"))
if mibBuilder.loadTexts: mplIfStackEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mplIfStackEntry.setDescription("Information on a particular relationship between two sub-layers, specifying that one sub-layer runs on 'top' of the other sub-layer. Each sub-layer corresponds to a conceptual row in the ifTable.")
mplIfStackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplIfStackNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mplIfStackNumber.setDescription('The MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mplIfStackLowerLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplIfStackLowerLayer.setStatus('mandatory')
if mibBuilder.loadTexts: mplIfStackLowerLayer.setDescription("The value of ifIndex corresponding to the lower sub- layer of the relationship, i.e., the sub-layer which runs 'below' the sub-layer identified by the corresponding instance of mplIfStackNumber. If there is no lower sub-layer, then this object has the value 0.")
mplGeneralOverviewChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 20, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplGeneralOverviewChange.setStatus('mandatory')
if mibBuilder.loadTexts: mplGeneralOverviewChange.setDescription('The value of sysUpTime at the time any MP Link seen from the overview changed state or the like.')
mplGeneralIfgroupStatus = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 20, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplGeneralIfgroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mplGeneralIfgroupStatus.setDescription('A table describing the status of all ifgroups. Bit 0-3: State: 001 = Up, 010 = Down, 011 = Timecut, 100 = Disabled 111 = Lock. Bit 4: Reserved for future use Bit 5: IP status: 1 = Up, 0 = Down. (This bit is only used for MPLinks) Bit 6: IPX status: 1 = Up, 0 = Down. (This bit is only used for MPLinks) Bit 7: Bridge status: 1 = Up, 0 = Down. (This bit is only used for MPLinks)')
mplUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1), )
if mibBuilder.loadTexts: mplUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: mplUtilizationTable.setDescription('Utilization table')
mplUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1), ).setIndexNames((0, "INTEL-MPLINK-MIB", "mplUtilizationPlugNumber"), (0, "INTEL-MPLINK-MIB", "mplUtilizationMplink"), (0, "INTEL-MPLINK-MIB", "mplUtilizationUser"), (0, "INTEL-MPLINK-MIB", "mplUtilizationProtocol"))
if mibBuilder.loadTexts: mplUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mplUtilizationEntry.setDescription('')
mplUtilizationPlugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationPlugNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mplUtilizationPlugNumber.setDescription('')
mplUtilizationMplink = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationMplink.setStatus('mandatory')
if mibBuilder.loadTexts: mplUtilizationMplink.setDescription('')
mplUtilizationUser = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 3), UserEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationUser.setStatus('mandatory')
if mibBuilder.loadTexts: mplUtilizationUser.setDescription('')
mplUtilizationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 4), ProtoEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mplUtilizationProtocol.setDescription('')
mplUtilizationRxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationRxUtil.setStatus('mandatory')
if mibBuilder.loadTexts: mplUtilizationRxUtil.setDescription('')
mplUtilizationTxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 20, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplUtilizationTxUtil.setStatus('mandatory')
if mibBuilder.loadTexts: mplUtilizationTxUtil.setDescription('')
mplLockEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 20) + (0,1)).setObjects(("INTEL-MPLINK-MIB", "mplServiceNumber"), ("INTEL-MPLINK-MIB", "mplServiceLock"))
if mibBuilder.loadTexts: mplLockEvent.setDescription('Lock state changed to <mplServiceLock> for link <mplServiceNumber>. This trap is sent when an MP Link is locked or unlocked from local management or via SNMP.')
mplWanRetriesEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 20) + (0,2)).setObjects(("INTEL-MPLINK-MIB", "mplWanNumber"), ("INTEL-MPLINK-MIB", "mplWanRetries"))
if mibBuilder.loadTexts: mplWanRetriesEvent.setDescription('Max. retries exceeded (<mplWanRetries>) for link <mplWanNumber>. This trap is sent when an MP Link has had more failed connect-attempts than allowed in the configuration.')
mplWanActivityEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 20) + (0,3)).setObjects(("INTEL-MPLINK-MIB", "mplWanNumber"), ("INTEL-MPLINK-MIB", "mplWanActivity"))
if mibBuilder.loadTexts: mplWanActivityEvent.setDescription('Daily Activity Limit has been reached. Link <mplWanNumber> locked. This trap is sent when the Daily Activity Limit has been reached and locked the link.')
mplWanTimerEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 20) + (0,4)).setObjects(("INTEL-MPLINK-MIB", "mplWanNumber"), ("INTEL-MPLINK-MIB", "mplWanTimer"))
if mibBuilder.loadTexts: mplWanTimerEvent.setDescription('Link timer has changed lock state to <WanTimer> for link <WanNumber>. This trap is sent when an MP Link timer has locked or unlocked the link.')
mibBuilder.exportSymbols("INTEL-MPLINK-MIB", mplCompTxEncLocalInits=mplCompTxEncLocalInits, mplWanInCallsPlaced=mplWanInCallsPlaced, mplCompTable=mplCompTable, mplUtilizationPlugNumber=mplUtilizationPlugNumber, mplCompRxDecRemoteInits=mplCompRxDecRemoteInits, mplIfStackTable=mplIfStackTable, mplWanOutCallsPlaced=mplWanOutCallsPlaced, mplWanHasBackup=mplWanHasBackup, mplCompTxEncCompressedUpper=mplCompTxEncCompressedUpper, mplLanTxExcDeferral=mplLanTxExcDeferral, mplWanRetriesEvent=mplWanRetriesEvent, mplWanTimerEvent=mplWanTimerEvent, mplWanTimeTillTimecut=mplWanTimeTillTimecut, mplLanRxLong=mplLanRxLong, mplWanTimer=mplWanTimer, CompType=CompType, Attachment=Attachment, mplUtilizationUser=mplUtilizationUser, mplUtilizationProtocol=mplUtilizationProtocol, mplServiceAttachment=mplServiceAttachment, mplWanEntry=mplWanEntry, mplWanCallsRejected=mplWanCallsRejected, mplCompRxDecRxBytesTotalUpper=mplCompRxDecRxBytesTotalUpper, mplWanLastPacket=mplWanLastPacket, mpl=mpl, mplLanTable=mplLanTable, mplGeneralOverviewChange=mplGeneralOverviewChange, mplWanDataState=mplWanDataState, mplCompTxEncAllocErrorsUpper=mplCompTxEncAllocErrorsUpper, mplWanPppSlaveUpCount=mplWanPppSlaveUpCount, mplWanPppMaster=mplWanPppMaster, mplLanTxCollExceed=mplLanTxCollExceed, mplCompTxEncAllocErrorsLower=mplCompTxEncAllocErrorsLower, mplCompTxEncTransmitErrors=mplCompTxEncTransmitErrors, mplServiceBytesReceivedUpper=mplServiceBytesReceivedUpper, mplServicePlugName=mplServicePlugName, mplLanRxCRCErrors=mplLanRxCRCErrors, mplServicePlugNumber=mplServicePlugNumber, ConnectState=ConnectState, mplWanOutTimeActive=mplWanOutTimeActive, mplWanTable=mplWanTable, mplCompRxDecRxBytesDecompUpper=mplCompRxDecRxBytesDecompUpper, mplCompRxDecAllocErrorsUpper=mplCompRxDecAllocErrorsUpper, mplLanTxCollisions=mplLanTxCollisions, mplLanRxShort=mplLanRxShort, mplWanCompressionType=mplWanCompressionType, mplService=mplService, mplLanRxOverflow=mplLanRxOverflow, mplCompTxEncInBytesTotalLower=mplCompTxEncInBytesTotalLower, mplWanBackupFor=mplWanBackupFor, mplLanRxOverrun=mplLanRxOverrun, mplIfStackEntry=mplIfStackEntry, mplCompRxDecRxBytesDecompLower=mplCompRxDecRxBytesDecompLower, mplServiceEntry=mplServiceEntry, mplWanSpecific=mplWanSpecific, mplLanEntry=mplLanEntry, mplLanSpecific=mplLanSpecific, mplServiceSlotNumber=mplServiceSlotNumber, mplWanDataStateTimer=mplWanDataStateTimer, mplWanActivity=mplWanActivity, mplServiceBytesSentUpper=mplServiceBytesSentUpper, mplCompTxEncInBytesTotalUpper=mplCompTxEncInBytesTotalUpper, mplLanTxDeferred=mplLanTxDeferred, mplWanFlags=mplWanFlags, mplUtilizationRxUtil=mplUtilizationRxUtil, mplCompTxEncTxBytesCompUpper=mplCompTxEncTxBytesCompUpper, OnOff=OnOff, mplServiceBytesSentLower=mplServiceBytesSentLower, mplCompRxDecRxBytesTotalLower=mplCompRxDecRxBytesTotalLower, mplCompRxDecDecompressedLower=mplCompRxDecDecompressedLower, mplUtilization=mplUtilization, mplWanActivityEvent=mplWanActivityEvent, mplCompRxDecDecompressedUpper=mplCompRxDecDecompressedUpper, mplLockEvent=mplLockEvent, mplWanConnectState=mplWanConnectState, mplLanNumber=mplLanNumber, mplWanRetries=mplWanRetries, ProtoEnum=ProtoEnum, mplLanRxOuts=mplLanRxOuts, mplWanConnectStateTimer=mplWanConnectStateTimer, mplCompEntry=mplCompEntry, mplIfStackLowerLayer=mplIfStackLowerLayer, mplWanBackupForAttachment=mplWanBackupForAttachment, mplCompTxEncCompressedLower=mplCompTxEncCompressedLower, mplServiceBytesReceivedLower=mplServiceBytesReceivedLower, mplCompNumber=mplCompNumber, mplWanCallsFailed=mplWanCallsFailed, mplLanTxUnderrun=mplLanTxUnderrun, mplUtilizationEntry=mplUtilizationEntry, mplUtilizationMplink=mplUtilizationMplink, mplIfSpecific=mplIfSpecific, mplGeneralIfgroupStatus=mplGeneralIfgroupStatus, mplCompRxDecAllocErrorsLower=mplCompRxDecAllocErrorsLower, mplUtilizationTable=mplUtilizationTable, mplServiceNumber=mplServiceNumber, mplWanDirection=mplWanDirection, Direction=Direction, mplWanActivityTimeLeft=mplWanActivityTimeLeft, mplIfStackNumber=mplIfStackNumber, mplLanTxNoCarrier=mplLanTxNoCarrier, mplServiceTable=mplServiceTable, mplWanCompression=mplWanCompression, mplCompTxEncQueueLength=mplCompTxEncQueueLength, mplGeneral=mplGeneral, UserEnum=UserEnum, mplLanTxLateColl=mplLanTxLateColl, mplUtilizationTxUtil=mplUtilizationTxUtil, mplWanCallsSucceeded=mplWanCallsSucceeded, mplWanInTimeActive=mplWanInTimeActive, mplServiceProvider=mplServiceProvider, mplServiceLock=mplServiceLock, DataState=DataState, mplLanRxAlnErrors=mplLanRxAlnErrors, mplLanTxSQEFailure=mplLanTxSQEFailure, mplCompTxEncTxBytesCompLower=mplCompTxEncTxBytesCompLower, mplWanNumber=mplWanNumber, mplWanCallsAccepted=mplWanCallsAccepted, mplWanTotalTime=mplWanTotalTime)
