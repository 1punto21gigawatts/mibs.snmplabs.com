#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-TimeMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-TimeMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:31:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
DisplayString, RowStatus, Counter32, StorageType, Integer32, RowPointer, Unsigned32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "DisplayString", "RowStatus", "Counter32", "StorageType", "Integer32", "RowPointer", "Unsigned32")
NonReplicated, EnterpriseDateAndTime = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "EnterpriseDateAndTime")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, ObjectIdentity, Counter32, TimeTicks, Bits, Counter64, NotificationType, Integer32, iso, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Counter32", "TimeTicks", "Bits", "Counter64", "NotificationType", "Integer32", "iso", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
timeMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13))
mscTime = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19))
mscTimeRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 1), )
if mibBuilder.loadTexts: mscTimeRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeRowStatusTable.setDescription('This entry controls the addition and deletion of mscTime components.')
mscTimeRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeIndex"))
if mibBuilder.loadTexts: mscTimeRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeRowStatusEntry.setDescription('A single entry in the table represents a single mscTime component.')
mscTimeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscTime components. These components cannot be added nor deleted.')
mscTimeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscTimeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeStorageType.setDescription('This variable represents the storage type value for the mscTime tables.')
mscTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTimeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeIndex.setDescription('This variable represents the index for the mscTime tables.')
mscTimeOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10), )
if mibBuilder.loadTexts: mscTimeOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeOperTable.setDescription('This group contains the operational attributes of the Time component.')
mscTimeOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeIndex"))
if mibBuilder.loadTexts: mscTimeOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeOperEntry.setDescription('An entry in the mscTimeOperTable.')
mscTimeNetworkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1, 1), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTimeNetworkTime.setStatus('obsolete')
if mibBuilder.loadTexts: mscTimeNetworkTime.setDescription('The networkTime attribute represents the current date and time. The operator resets the current date and time by setting this attribute. If syncStatus is synchronized or synchronizing, the set verb is disabled.')
mscTimeSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("synchronized", 0), ("unsynchronized", 1), ("synchronizing", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeSyncStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeSyncStatus.setDescription('This attribute indicates the XNTP (Network Time Protocol) synchronization status of this module. If the value is synchronized or synchronizing, the syncSource attribute indicates the IP address of the main network time server. The values have the following meanings: synchronized -- The module is synchronized with the network time server. unsynchronized -- There is no network time server selected as XNTP server for the module to synchronize its time with. synchronizing -- The module is trying to synchronize with the network time server. unknown -- The synchronization status of the module is unknown.')
mscTimeSyncSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeSyncSource.setStatus('obsolete')
if mibBuilder.loadTexts: mscTimeSyncSource.setDescription("The syncSource is the IP address of the time server host to which the module's syncStatus is synchronized. If the module's syncStatus is unsynchronized, the address is 0.0.0.0.")
mscTimeTimeOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTimeTimeOffset.setStatus('obsolete')
if mibBuilder.loadTexts: mscTimeTimeOffset.setDescription('The timeOffset attribute is the number of minutes, to add to the reference time, which is equal to the Universal Coordinated Time (UTC), to obtain the moduleTime.')
mscTimeModuleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTimeModuleTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeModuleTime.setDescription('This attribute indicates the current date and time on this module. The moduleTime is obtained by adding an offset to the reference time, which is the Universal Time Coordinated (UTC). When the moduleTime is set, it keeps the value even if the card boots. It is the time used for time stamps, such as in alarms and accounting data. The operator resets the current date and time by setting this attribute when syncStatus is unsynchronized. Setting this attribute is not allowed if syncStatus is synchronized or synchronizing.')
mscTimeOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTimeOffset.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeOffset.setDescription('This attribute specifies the number of minutes to be added to the reference time, which is Universal Coordinated Time (UTC), to obtain the moduleTime. It keeps its value even if the card boots. However, if the node is powered-off for more than 24 hours, it resets to the default value, which is 0. The specified value should be in the range -720 (-12 hours) to 720 (+12 hours). Values greater than 720 are accepted for backward compatibility; for example, 780 (13 hours) corresponds to an offset of -11 hours. If a value greater than 720 is entered, it will be displayed as a negative offset.')
mscTimeMainServer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeMainServer.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeMainServer.setDescription('This attribute indicates the IP address of the main network time server that this module synchronizes with. If syncStatus is unsynchronized, then mainServer is 0.0.0.0.')
mscTimeXntpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeXntpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeXntpVersion.setDescription('This attribute indicates the current protocol version of XNTP running on this module.')
mscTimeSyncSourcesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 391), )
if mibBuilder.loadTexts: mscTimeSyncSourcesTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeSyncSourcesTable.setDescription('This attribute indicates the IP addresses of the network time servers that this module synchronizes with. XNTP uses the clock values of the network time servers to set its moduleTime.')
mscTimeSyncSourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 391, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeIndex"), (0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeSyncSourcesValue"))
if mibBuilder.loadTexts: mscTimeSyncSourcesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeSyncSourcesEntry.setDescription('An entry in the mscTimeSyncSourcesTable.')
mscTimeSyncSourcesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 391, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeSyncSourcesValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeSyncSourcesValue.setDescription('This variable represents both the value and the index for the mscTimeSyncSourcesTable.')
mscTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3))
mscTimeServerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 1), )
if mibBuilder.loadTexts: mscTimeServerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerRowStatusTable.setDescription('This entry controls the addition and deletion of mscTimeServer components.')
mscTimeServerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeIndex"), (0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeServerIndex"))
if mibBuilder.loadTexts: mscTimeServerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerRowStatusEntry.setDescription('A single entry in the table represents a single mscTimeServer component.')
mscTimeServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTimeServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscTimeServer components. These components can be added and deleted.')
mscTimeServerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscTimeServerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerStorageType.setDescription('This variable represents the storage type value for the mscTimeServer tables.')
mscTimeServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: mscTimeServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerIndex.setDescription('This variable represents the index for the mscTimeServer tables.')
mscTimeServerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 11), )
if mibBuilder.loadTexts: mscTimeServerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerProvTable.setDescription('This group contains the provisionable attributes of the Server component.')
mscTimeServerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeIndex"), (0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeServerIndex"))
if mibBuilder.loadTexts: mscTimeServerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerProvEntry.setDescription('An entry in the mscTimeServerProvTable.')
mscTimeServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 11, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTimeServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerIpAddress.setDescription('This attribute specifies the IP address of a network time server that the module will attempt to synchronize with. The value of ipAddress must be unique across all Server components.')
mscTimeServerIpStack = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipiFrIpiVc", 1), ("vrIp", 2))).clone('ipiFrIpiVc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTimeServerIpStack.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerIpStack.setDescription('This attribute specifies the IP stack that XNTP uses to communi- cate with the network time server. If ipiFrIpiVc is selected, then an IpiFr or IpiVc component must be provisioned on this module. If vrIp is selected, then Ip must be provisioned under the management Vr on this module.')
mscTimeServerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 12), )
if mibBuilder.loadTexts: mscTimeServerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscTimeServerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeIndex"), (0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeServerIndex"))
if mibBuilder.loadTexts: mscTimeServerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerStateEntry.setDescription('An entry in the mscTimeServerStateTable.')
mscTimeServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscTimeServerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscTimeServerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscTimeServerOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13), )
if mibBuilder.loadTexts: mscTimeServerOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerOperTable.setDescription('This group contains the operational attributes of the Server component.')
mscTimeServerOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeIndex"), (0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscTimeServerIndex"))
if mibBuilder.loadTexts: mscTimeServerOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerOperEntry.setDescription('An entry in the mscTimeServerOperTable.')
mscTimeServerXntpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerXntpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerXntpVersion.setDescription('This attribute indicates the version of XNTP currently in use by the network time server.')
mscTimeServerStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerStratum.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerStratum.setDescription('This attribute indicates the stratum level of the clock on the network time server.')
mscTimeServerPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerPoll.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerPoll.setDescription('This attribute indicates the time interval for the Passport module to poll the network time server for time synchronization.')
mscTimeServerPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerPktSent.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerPktSent.setDescription('This attribute counts the packets sent to the network time server.')
mscTimeServerPktRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerPktRecv.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerPktRecv.setDescription('This attribute counts the packets received from the network time server, including the invalid packets.')
mscTimeServerPktValid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerPktValid.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerPktValid.setDescription('This attribute counts the valid packets received from the network time server.')
mscTimeServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 19, 3, 13, 1, 392), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTimeServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTimeServerStatus.setDescription("This attribute indicates the status of the network time server. main -- This network time server is working properly, and is the system servers (synchronization sources) of the module. primary -- This network time server is working properly, and is the primary servers (one of the synchronization sources) of the module secondary -- This network time server is working properly, but its offset and dispersion is not stable or too high so that it can not be selected as one of the primary time synchronization sources. But if the primary synchronization sources are not available, it can take over the responsibility and become the time synchronization source of the module. unused -- This network time server is not used as a server (synchronization source) of the module. noResponse -- This network time server is not responding to the module's time synchronization request. This could be caused by network error or protocol error, or network time server configuration error. stratumTooHigh -- This network time server has the bad stratum (higher than 16), or its stratum is higher than the module's stratum. leapUnsync -- This network time server's leap value indicates that this network time server is not synchronized. clockUnsync -- This network time server's clock values indicates that this network time server is not synchronized. rootTooNoisy -- This network time server's root dispersion is too high, so that its time stamp is not used. peerTooNoisy -- The modules dispersion relative to this network time server is too high, so this network time server's time stamp is not used. faultStick -- This offset of the module relative to this network time server is out of the range or too high, so that it can not be selected as one of the primary time synchronization source. Description of bits: main(0) primary(1) secondary(2) unused(3) noResponse(4) stratumTooHigh(5) leapUnsync(6) clockUnsync(7) rootTooNoisy(8) peerTooNoisy(9) faultStick(10)")
mscNS = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20))
mscNSRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 1), )
if mibBuilder.loadTexts: mscNSRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSRowStatusTable.setDescription('This entry controls the addition and deletion of mscNS components.')
mscNSRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscNSIndex"))
if mibBuilder.loadTexts: mscNSRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSRowStatusEntry.setDescription('A single entry in the table represents a single mscNS component.')
mscNSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNSRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNS components. These components can be added and deleted.')
mscNSComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNSComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNSStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNSStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSStorageType.setDescription('This variable represents the storage type value for the mscNS tables.')
mscNSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscNSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSIndex.setDescription('This variable represents the index for the mscNS tables.')
mscNSProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 10), )
if mibBuilder.loadTexts: mscNSProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSProvTable.setDescription('This group contains all of the provisioning data for the NetworkSynchronization component.')
mscNSProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscNSIndex"))
if mibBuilder.loadTexts: mscNSProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSProvEntry.setDescription('An entry in the mscNSProvTable.')
mscNSPrimaryReference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 10, 1, 1), RowPointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNSPrimaryReference.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSPrimaryReference.setDescription('This component name is the port that is the preferred choice as the reference for the network clock.')
mscNSSecondaryReference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 10, 1, 2), RowPointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNSSecondaryReference.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSSecondaryReference.setDescription('This component name is the port that is the second choice for the reference for the network clock.')
mscNSTertiaryReference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 10, 1, 3), RowPointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNSTertiaryReference.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSTertiaryReference.setDescription('This component name is the port that is the third choice for the reference for the network clock.')
mscNSStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 11), )
if mibBuilder.loadTexts: mscNSStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscNSStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscNSIndex"))
if mibBuilder.loadTexts: mscNSStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSStateEntry.setDescription('An entry in the mscNSStateTable.')
mscNSAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNSAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscNSOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNSOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscNSUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNSUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscNSOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 12), )
if mibBuilder.loadTexts: mscNSOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSOperTable.setDescription('This group contains the operational attributes for the network clock sync')
mscNSOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TimeMIB", "mscNSIndex"))
if mibBuilder.loadTexts: mscNSOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSOperEntry.setDescription('An entry in the mscNSOperTable.')
mscNSClockSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("freeRun", 0), ("synchronizing", 1), ("synchronized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNSClockSyncState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSClockSyncState.setDescription('When the clockSyncState is in the freeRun state, either no reference have beed provisioned or none of the provisioned references have been found to be valid. The Stratum-3 clock is allowed to run freely at its last adjusted frequency. When the clockSyncState is in the synchronizing state, the Stratum-3 is trying to synchronize in frequency to a valid provisioned reference. This state should last approximately 1-2 minutes, provided the reference is stable. Once frequency synchronization is acheived, a null phase is acquired and the clockSyncState enters the synchronized state. In this state, both phase and frequency are tracked and compensated for. This node is now ready to support transparent data services.')
mscNSActiveReference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 12, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNSActiveReference.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSActiveReference.setDescription('Indicates the active 8Khz clock reference source')
mscNSStandbyReference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 20, 12, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNSStandbyReference.setStatus('mandatory')
if mibBuilder.loadTexts: mscNSStandbyReference.setDescription('Indicates the standby 8Khz clock reference source which will be selected if a failure is detected on the active source.')
timeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13, 1))
timeGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13, 1, 1))
timeGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13, 1, 1, 3))
timeGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13, 1, 1, 3, 2))
timeCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13, 3))
timeCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13, 3, 1))
timeCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13, 3, 1, 3))
timeCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 13, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-TimeMIB", mscNSRowStatus=mscNSRowStatus, mscNSStorageType=mscNSStorageType, mscNSUsageState=mscNSUsageState, mscTimeOperTable=mscTimeOperTable, mscNSOperTable=mscNSOperTable, timeMIB=timeMIB, mscNSProvEntry=mscNSProvEntry, mscNSProvTable=mscNSProvTable, mscTimeServerOperEntry=mscTimeServerOperEntry, mscTimeNetworkTime=mscTimeNetworkTime, mscTimeServerPktValid=mscTimeServerPktValid, mscTimeSyncSourcesValue=mscTimeSyncSourcesValue, mscTimeServerProvTable=mscTimeServerProvTable, mscNSRowStatusTable=mscNSRowStatusTable, mscNSComponentName=mscNSComponentName, mscTimeServerAdminState=mscTimeServerAdminState, mscNSStateTable=mscNSStateTable, mscNSSecondaryReference=mscNSSecondaryReference, mscTimeStorageType=mscTimeStorageType, mscTimeServerRowStatusEntry=mscTimeServerRowStatusEntry, mscTimeServerStorageType=mscTimeServerStorageType, mscTimeServerIndex=mscTimeServerIndex, mscNSOperationalState=mscNSOperationalState, mscTimeComponentName=mscTimeComponentName, mscTimeServerOperTable=mscTimeServerOperTable, mscTimeXntpVersion=mscTimeXntpVersion, mscTimeOffset=mscTimeOffset, mscNSActiveReference=mscNSActiveReference, mscTimeServerPoll=mscTimeServerPoll, timeGroupCA02A=timeGroupCA02A, timeCapabilitiesCA02=timeCapabilitiesCA02, mscTimeServerXntpVersion=mscTimeServerXntpVersion, mscTimeOperEntry=mscTimeOperEntry, mscTimeIndex=mscTimeIndex, timeGroupCA=timeGroupCA, mscTimeSyncStatus=mscTimeSyncStatus, mscTimeServerUsageState=mscTimeServerUsageState, mscNSIndex=mscNSIndex, mscTimeRowStatusEntry=mscTimeRowStatusEntry, timeGroup=timeGroup, mscTimeRowStatusTable=mscTimeRowStatusTable, mscNSClockSyncState=mscNSClockSyncState, timeCapabilitiesCA=timeCapabilitiesCA, mscTimeRowStatus=mscTimeRowStatus, mscTime=mscTime, mscNSAdminState=mscNSAdminState, mscTimeServerStatus=mscTimeServerStatus, mscNSRowStatusEntry=mscNSRowStatusEntry, timeCapabilities=timeCapabilities, mscTimeServerComponentName=mscTimeServerComponentName, mscTimeServerOperationalState=mscTimeServerOperationalState, mscTimeServerStratum=mscTimeServerStratum, mscTimeServerStateTable=mscTimeServerStateTable, mscTimeServerIpAddress=mscTimeServerIpAddress, mscTimeTimeOffset=mscTimeTimeOffset, mscNSTertiaryReference=mscNSTertiaryReference, mscNSOperEntry=mscNSOperEntry, mscTimeServerPktRecv=mscTimeServerPktRecv, timeGroupCA02=timeGroupCA02, mscTimeServerIpStack=mscTimeServerIpStack, mscNSPrimaryReference=mscNSPrimaryReference, mscTimeSyncSource=mscTimeSyncSource, mscTimeServerRowStatus=mscTimeServerRowStatus, mscTimeServerRowStatusTable=mscTimeServerRowStatusTable, mscTimeServerStateEntry=mscTimeServerStateEntry, mscTimeSyncSourcesEntry=mscTimeSyncSourcesEntry, mscNS=mscNS, mscTimeMainServer=mscTimeMainServer, mscTimeSyncSourcesTable=mscTimeSyncSourcesTable, mscNSStandbyReference=mscNSStandbyReference, timeCapabilitiesCA02A=timeCapabilitiesCA02A, mscTimeModuleTime=mscTimeModuleTime, mscTimeServerProvEntry=mscTimeServerProvEntry, mscTimeServerPktSent=mscTimeServerPktSent, mscTimeServer=mscTimeServer, mscNSStateEntry=mscNSStateEntry)
