#
# PySNMP MIB module SMUX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SMUX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:07:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, Integer32, NotificationType, ModuleIdentity, Gauge32, iso, Counter32, IpAddress, MibIdentifier, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "Integer32", "NotificationType", "ModuleIdentity", "Gauge32", "iso", "Counter32", "IpAddress", "MibIdentifier", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
unix = MibIdentifier((1, 3, 6, 1, 4, 1, 4))
smux = MibIdentifier((1, 3, 6, 1, 4, 1, 4, 4))
smuxPeerTable = MibTable((1, 3, 6, 1, 4, 1, 4, 4, 1), )
if mibBuilder.loadTexts: smuxPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: smuxPeerTable.setDescription('The SMUX peer table.')
smuxPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4, 4, 1, 1), ).setIndexNames((0, "SMUX-MIB", "smuxPindex"))
if mibBuilder.loadTexts: smuxPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smuxPeerEntry.setDescription('An entry in the SMUX peer table.')
smuxPindex = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxPindex.setStatus('mandatory')
if mibBuilder.loadTexts: smuxPindex.setDescription('An index which uniquely identifies a SMUX peer.')
smuxPidentity = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxPidentity.setStatus('mandatory')
if mibBuilder.loadTexts: smuxPidentity.setDescription('The authoritative designation for a SMUX peer.')
smuxPdescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxPdescription.setStatus('mandatory')
if mibBuilder.loadTexts: smuxPdescription.setDescription('A human-readable description of a SMUX peer.')
smuxPstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("connecting", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smuxPstatus.setStatus('mandatory')
if mibBuilder.loadTexts: smuxPstatus.setDescription('The type of SMUX peer. Setting this object to the value invalid(2) has the effect of invaliding the corresponding entry in the smuxPeerTable. It is an implementation- specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that correspond to entries not currently in use. Proper interpretation of such entries requires examination of the relative smuxPstatus object.')
smuxTreeTable = MibTable((1, 3, 6, 1, 4, 1, 4, 4, 2), )
if mibBuilder.loadTexts: smuxTreeTable.setStatus('mandatory')
if mibBuilder.loadTexts: smuxTreeTable.setDescription('The SMUX tree table.')
smuxTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4, 4, 2, 1), ).setIndexNames((0, "SMUX-MIB", "smuxTsubtree"), (0, "SMUX-MIB", "smuxTpriority"))
if mibBuilder.loadTexts: smuxTreeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smuxTreeEntry.setDescription('An entry in the SMUX tree table.')
smuxTsubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxTsubtree.setStatus('mandatory')
if mibBuilder.loadTexts: smuxTsubtree.setDescription('The MIB subtree being exported by a SMUX peer.')
smuxTpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxTpriority.setStatus('mandatory')
if mibBuilder.loadTexts: smuxTpriority.setDescription("The SMUX peer's priority when exporting the MIB subtree.")
smuxTindex = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuxTindex.setStatus('mandatory')
if mibBuilder.loadTexts: smuxTindex.setDescription("The SMUX peer's identity.")
smuxTstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smuxTstatus.setStatus('mandatory')
if mibBuilder.loadTexts: smuxTstatus.setDescription('The type of SMUX tree. Setting this object to the value invalid(2) has the effect of invaliding the corresponding entry in the smuxTreeTable. It is an implementation- specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that correspond to entries not currently in use. Proper interpretation of such entries requires examination of the relative smuxTstatus object.')
mibBuilder.exportSymbols("SMUX-MIB", unix=unix, smux=smux, smuxPindex=smuxPindex, smuxPidentity=smuxPidentity, smuxTindex=smuxTindex, smuxTsubtree=smuxTsubtree, smuxPeerEntry=smuxPeerEntry, smuxPdescription=smuxPdescription, smuxTreeTable=smuxTreeTable, smuxTreeEntry=smuxTreeEntry, smuxTpriority=smuxTpriority, smuxPstatus=smuxPstatus, smuxPeerTable=smuxPeerTable, smuxTstatus=smuxTstatus)
