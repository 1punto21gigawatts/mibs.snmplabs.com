#
# PySNMP MIB module ALCATEL-IND1-IPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-IPX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
routingIND1Ipx, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Ipx")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Counter64, Gauge32, Bits, ObjectIdentity, MibIdentifier, iso, NotificationType, TimeTicks, Integer32, IpAddress, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Gauge32", "Bits", "ObjectIdentity", "MibIdentifier", "iso", "NotificationType", "TimeTicks", "Integer32", "IpAddress", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
alcatelIND1IPXMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1))
alcatelIND1IPXMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IPXMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IPXMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1IPXMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IPXMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IPXMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): This is the proprietary MIB for the IPX routing sub-sytem. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IPXMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1))
class NetNumber(TextualConvention, OctetString):
    description = 'IPX network number. It is a 32-bit value divided into 4 octets.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class HostAddress(TextualConvention, OctetString):
    description = 'IPX host MAC address. It is a group of the 6 octets from the MAC address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

alaIpxRoutingGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1))
if mibBuilder.loadTexts: alaIpxRoutingGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpxRoutingGroup.setDescription('IPX routing information.')
alaIpxFilterGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2))
if mibBuilder.loadTexts: alaIpxFilterGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpxFilterGroup.setDescription('IPX filtering information.')
alaIpxTimerGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 3))
if mibBuilder.loadTexts: alaIpxTimerGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpxTimerGroup.setDescription('IPX timer information.')
alaIpxStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaIpxStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIpxStaticRouteTable.setDescription('The Static Routes table is used and add entries and extract information from the static routes configured in the system.')
alaIpxStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaIpxStaticRouteNetNum"))
if mibBuilder.loadTexts: alaIpxStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpxStaticRouteEntry.setDescription('Each entry corresponds to one static route.')
alaIpxStaticRouteNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 1, 1, 1), NetNumber().clone(hexValue="00000000"))
if mibBuilder.loadTexts: alaIpxStaticRouteNetNum.setStatus('current')
if mibBuilder.loadTexts: alaIpxStaticRouteNetNum.setDescription("The IPX network number of the route's destination.")
alaIpxStaticRouteNextHopNet = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 1, 1, 2), NetNumber().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxStaticRouteNextHopNet.setStatus('current')
if mibBuilder.loadTexts: alaIpxStaticRouteNextHopNet.setDescription('The IPX network number of the router used to reach the first hop in the static route.')
alaIpxStaticRouteNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 1, 1, 3), HostAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxStaticRouteNextHopNode.setStatus('current')
if mibBuilder.loadTexts: alaIpxStaticRouteNextHopNode.setDescription('The IPX node number of the router used to reach the first hop in the static route.')
alaIpxStaticRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxStaticRouteTicks.setStatus('current')
if mibBuilder.loadTexts: alaIpxStaticRouteTicks.setDescription("The delay, in ticks, to reach the route's destination.")
alaIpxStaticRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxStaticRouteHopCount.setStatus('current')
if mibBuilder.loadTexts: alaIpxStaticRouteHopCount.setDescription('The number of hops necessary to reach the destination.')
alaIpxStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpxStaticRouteRowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxStaticRouteTable is constrained by the operational state of the corresponding static route. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alaIpxDefRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaIpxDefRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIpxDefRouteTable.setDescription('The default route table contains information about the destinations to which all packets are sent when the destination network is not known.')
alaIpxDefRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaIpxDefRouteVlanId"))
if mibBuilder.loadTexts: alaIpxDefRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpxDefRouteEntry.setDescription('One table entry per switch for default route.')
alaIpxDefRouteVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaIpxDefRouteVlanId.setStatus('current')
if mibBuilder.loadTexts: alaIpxDefRouteVlanId.setDescription('The VlanId for this filter. If VlanId equals 0, the filter is applied globally.')
alaIpxDefRouteNet = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 2, 1, 2), NetNumber().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxDefRouteNet.setStatus('current')
if mibBuilder.loadTexts: alaIpxDefRouteNet.setDescription('The IPX network number of the router used to reach the first hop in the default route.')
alaIpxDefRouteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 2, 1, 3), HostAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxDefRouteNode.setStatus('current')
if mibBuilder.loadTexts: alaIpxDefRouteNode.setDescription('The IPX node number of the router used to reach the first hop in the default route.')
alaIpxDefRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxDefRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpxDefRouteRowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxDefRouteTable is constrained by the operational state of the corresponding default route entry. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alaIpxExtMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alaIpxExtMsgTable.setStatus('current')
if mibBuilder.loadTexts: alaIpxExtMsgTable.setDescription('The extended RIP and SAP messages table contains information about which vlans use extended RIP and SAP packets.')
alaIpxExtMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaIpxExtMsgVlanId"))
if mibBuilder.loadTexts: alaIpxExtMsgEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpxExtMsgEntry.setDescription('One table entry per Vlan.')
alaIpxExtMsgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaIpxExtMsgVlanId.setStatus('current')
if mibBuilder.loadTexts: alaIpxExtMsgVlanId.setDescription('The VlanId for this filter. If VlanId equals 0, the filter is applied globally.')
alaIpxExtMsgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxExtMsgMode.setStatus('current')
if mibBuilder.loadTexts: alaIpxExtMsgMode.setDescription('Indicates whether extended RIP/SAP packets are sent and received.')
alaIpxExtMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxExtMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpxExtMsgRowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxExtMsgTable is constrained by the operational state of the corresponding watchdog entry. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alaIpxFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rip", 1), ("sap", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpxFlush.setStatus('current')
if mibBuilder.loadTexts: alaIpxFlush.setDescription('Flushes the routing and the SAP tables. The tables will then be rebuilt from the broadcast messages received from the networks. Reading this variable is undefined')
alaIpxRipSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaIpxRipSapFilterTable.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterTable.setDescription('The IPX Rip/Sap Filter Table contains information about all filters that have been defined.')
alaIpxRipSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterVlanId"), (0, "ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterType"), (0, "ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterNet"), (0, "ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterNetMask"), (0, "ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterNode"), (0, "ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterNodeMask"), (0, "ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterSvcType"))
if mibBuilder.loadTexts: alaIpxRipSapFilterEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterEntry.setDescription('Each entry corresponds to one filter.')
alaIpxRipSapFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaIpxRipSapFilterVlanId.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterVlanId.setDescription('The VlanId for this filter. If VlanId equals 0, the filter is applied globally.')
alaIpxRipSapFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sapOutput", 1), ("sapInput", 2), ("gnsOutput", 3), ("ripOutput", 4), ("ripInput", 5))).clone(1))
if mibBuilder.loadTexts: alaIpxRipSapFilterType.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterType.setDescription('The type of filter. ')
alaIpxRipSapFilterNet = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 3), NetNumber().clone(hexValue="00000000"))
if mibBuilder.loadTexts: alaIpxRipSapFilterNet.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterNet.setDescription("The IPX Network Address to filter. A network address of all 0 's is used to denote All Networks.")
alaIpxRipSapFilterNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 4), NetNumber().clone(hexValue="ffffffff"))
if mibBuilder.loadTexts: alaIpxRipSapFilterNetMask.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterNetMask.setDescription('The IPX Network Mask to be used.')
alaIpxRipSapFilterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 5), HostAddress().clone(hexValue="000000000000"))
if mibBuilder.loadTexts: alaIpxRipSapFilterNode.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterNode.setDescription("The IPX node address to filter. A node address of all 0 's is used to denote All Nodes.")
alaIpxRipSapFilterNodeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 6), HostAddress().clone(hexValue="ffffffffffff"))
if mibBuilder.loadTexts: alaIpxRipSapFilterNodeMask.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterNodeMask.setDescription('The IPX node address mask to be used.')
alaIpxRipSapFilterSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535))
if mibBuilder.loadTexts: alaIpxRipSapFilterSvcType.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterSvcType.setDescription('The SAP service type on which to filter. The SAP service types are defined by Novell.A value of ALL(65535) indicates that all services will be filtered.')
alaIpxRipSapFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2))).clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxRipSapFilterMode.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterMode.setDescription('The action defined by this filter. block (1) means packets matching this filter will be blocked, and allow(0) means that packets matching this filter will be allowed.')
alaIpxRipSapFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxRipSapFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpxRipSapFilterRowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxRipSapFilterTable is constrained by the operational state of the corresponding filter entry. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alaIpxWatchdogSpoofTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alaIpxWatchdogSpoofTable.setStatus('current')
if mibBuilder.loadTexts: alaIpxWatchdogSpoofTable.setDescription('The IPX Watchdog Spoofing Table contains information about all of the current IPX WAN watchdog spoofing entry statuses.')
alaIpxWatchdogSpoofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaIpxWatchdogSpoofVlanId"))
if mibBuilder.loadTexts: alaIpxWatchdogSpoofEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpxWatchdogSpoofEntry.setDescription('Each entry corresponds to one WAN routing service.')
alaIpxWatchdogSpoofVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaIpxWatchdogSpoofVlanId.setStatus('current')
if mibBuilder.loadTexts: alaIpxWatchdogSpoofVlanId.setDescription('The VlanId of the WAN routing service that this entry applies to. If VlanId equals 0, the filter is applied globally to all WAN Vlans.')
alaIpxWatchdogSpoofMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxWatchdogSpoofMode.setStatus('current')
if mibBuilder.loadTexts: alaIpxWatchdogSpoofMode.setDescription('This controls whether the IPX Watchdog Spoofing is enabled or disabled.When enabled, this routing service will spoof IPX Watchdog packets.When disabled, this routing service will not spoof IPX Watchdog packets.')
alaIpxWatchdogSpoofRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxWatchdogSpoofRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpxWatchdogSpoofRowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxWatchdogSpoofTable is constrained by the operational state of the corresponding watchdog entry. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alaIpxSerialFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 3), )
if mibBuilder.loadTexts: alaIpxSerialFilterTable.setStatus('current')
if mibBuilder.loadTexts: alaIpxSerialFilterTable.setDescription('The IPX Serialization Filtering Table contains information about all of the current IPX WAN serialization filtering entry statuses.')
alaIpxSerialFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaIpxSerialFilterVlanId"))
if mibBuilder.loadTexts: alaIpxSerialFilterEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpxSerialFilterEntry.setDescription('Each entry corresponds to one WAN routing service.')
alaIpxSerialFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaIpxSerialFilterVlanId.setStatus('current')
if mibBuilder.loadTexts: alaIpxSerialFilterVlanId.setDescription('The VlanId of the WAN routing service that this entry applies to. If VlanId equals 0, the filter is applied globally to all WAN Vlans.')
alaIpxSerialFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxSerialFilterMode.setStatus('current')
if mibBuilder.loadTexts: alaIpxSerialFilterMode.setDescription('This controls whether the IPX Serialization Filtering is enabled or disabled.When enabled, this routing service will filter IPX Serialization packets.When disabled, this routing service will not filter IPX Serialization packets.')
alaIpxSerialFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxSerialFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpxSerialFilterRowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxSerialFilterTable is constrained by the operational state of the corresponding filter entry. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alaSpxKeepaliveSpoofTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 4), )
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofTable.setStatus('current')
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofTable.setDescription('The SPX Keepalive Spoofing Table contains information about all of the current IPX WAN SPX spoofing filtering entry statuses.')
alaSpxKeepaliveSpoofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaSpxKeepaliveSpoofVlanId"))
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofEntry.setStatus('current')
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofEntry.setDescription('Each entry corresponds to one WAN routing service.')
alaSpxKeepaliveSpoofVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofVlanId.setStatus('current')
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofVlanId.setDescription('The VlanId of the WAN routing service that this entry applies to. If VlanId equals 0, the filter is applied globally to all WAN Vlans.')
alaSpxKeepaliveSpoofMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofMode.setStatus('current')
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofMode.setDescription('This controls whether the SPX Keepalive Spoofing is enabled or disabled.When enabled, this routing service will spoof SPX Keepalive packets.When disabled, this routing service will not spoof SPX Keepalive packets.')
alaSpxKeepaliveSpoofRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSpxKeepaliveSpoofRowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxKeepaliveSpoofTable is constrained by the operational state of the corresponding keepalive entry. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alaIpxType20Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 5), )
if mibBuilder.loadTexts: alaIpxType20Table.setStatus('current')
if mibBuilder.loadTexts: alaIpxType20Table.setDescription('The IPX Type 20 Table contains information about all of the current Type 20 filtering entry statuses.')
alaIpxType20Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaIpxType20VlanId"))
if mibBuilder.loadTexts: alaIpxType20Entry.setStatus('current')
if mibBuilder.loadTexts: alaIpxType20Entry.setDescription('Each entry corresponds to one Virtual LAN.')
alaIpxType20VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaIpxType20VlanId.setStatus('current')
if mibBuilder.loadTexts: alaIpxType20VlanId.setDescription('The VLAN Id of the routing interface that this entry applies to. If VlanId equals 0, the filter is applied globally.')
alaIpxType20Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxType20Mode.setStatus('current')
if mibBuilder.loadTexts: alaIpxType20Mode.setDescription('This controls whether IPX Type 20 packet are enabled or disabled.When enabled, this routing interface will forward Type 20 packets.When disabled, the packets will not.')
alaIpxType20RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxType20RowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpxType20RowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxType20Table is constrained by the operational state of the corresponding type 20 entry. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alaIpxTimerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaIpxTimerTable.setStatus('current')
if mibBuilder.loadTexts: alaIpxTimerTable.setDescription('The IPX Timer Table contains information about all of the current Timer adjustments entry statuses.')
alaIpxTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPX-MIB", "alaIpxTimerVlanId"))
if mibBuilder.loadTexts: alaIpxTimerEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpxTimerEntry.setDescription('Each entry corresponds to one Virtual LAN.')
alaIpxTimerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaIpxTimerVlanId.setStatus('current')
if mibBuilder.loadTexts: alaIpxTimerVlanId.setDescription('The VLAN Id of the routing interface that this entry applies to. If VlanId equals 0, the filter is applied globally.')
alaIpxTimerSap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxTimerSap.setStatus('current')
if mibBuilder.loadTexts: alaIpxTimerSap.setDescription('This controls whether IPX SAP packet timer duration.')
alaIpxTimerRip = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxTimerRip.setStatus('current')
if mibBuilder.loadTexts: alaIpxTimerRip.setDescription('This controls whether IPX RIP packet timer duration.')
alaIpxTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpxTimerRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpxTimerRowStatus.setDescription('The row status variable, used in accordance to installation and removal conventions for conceptual rows. The RowStatus of a currenty active row in the alaIpxTimerTable is constrained by the operational state of the corresponding timer entry. The RowStatus values that are supported are the following: active: This indicates that the row is active and valid. createAndGo: This will create the row and activate it. destroy: This value will deactivate the row and delete from the system.')
alcatelIND1IPXMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2))
alcatelIND1IPXMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 1))
alcatelIND1IPXMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2))
alcatelIND1IPXMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBStaticRouteGroup"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBDefRouteGroup"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBExtMsgGroup"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBFlushGroup"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBRipSapFilterGroup"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBWatchdogSpoofGroup"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBSerialFilterGroup"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBKeepaliveSpoofGroup"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBType20Group"), ("ALCATEL-IND1-IPX-MIB", "alcatelIND1IPXMIBTimerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBCompliance = alcatelIND1IPXMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBCompliance.setDescription('The compliance statement for IPX Subsystem and ALCATEL-IND1-IPX-MIB.')
alcatelIND1IPXMIBStaticRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxStaticRouteNextHopNet"), ("ALCATEL-IND1-IPX-MIB", "alaIpxStaticRouteNextHopNode"), ("ALCATEL-IND1-IPX-MIB", "alaIpxStaticRouteTicks"), ("ALCATEL-IND1-IPX-MIB", "alaIpxStaticRouteHopCount"), ("ALCATEL-IND1-IPX-MIB", "alaIpxStaticRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBStaticRouteGroup = alcatelIND1IPXMIBStaticRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBStaticRouteGroup.setDescription('A collection of objects from Static Route Table.')
alcatelIND1IPXMIBDefRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxDefRouteNet"), ("ALCATEL-IND1-IPX-MIB", "alaIpxDefRouteNode"), ("ALCATEL-IND1-IPX-MIB", "alaIpxDefRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBDefRouteGroup = alcatelIND1IPXMIBDefRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBDefRouteGroup.setDescription('A collection of objects from Default Route Table.')
alcatelIND1IPXMIBExtMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxExtMsgMode"), ("ALCATEL-IND1-IPX-MIB", "alaIpxExtMsgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBExtMsgGroup = alcatelIND1IPXMIBExtMsgGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBExtMsgGroup.setDescription('A collection of objects from Extended Message Table.')
alcatelIND1IPXMIBFlushGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxFlush"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBFlushGroup = alcatelIND1IPXMIBFlushGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBFlushGroup.setDescription('A collection of objects to flush the RIP and SAP tables.')
alcatelIND1IPXMIBRipSapFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterMode"), ("ALCATEL-IND1-IPX-MIB", "alaIpxRipSapFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBRipSapFilterGroup = alcatelIND1IPXMIBRipSapFilterGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBRipSapFilterGroup.setDescription('A collection of objects from the RIP and SAP Filter tables.')
alcatelIND1IPXMIBWatchdogSpoofGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxWatchdogSpoofMode"), ("ALCATEL-IND1-IPX-MIB", "alaIpxWatchdogSpoofRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBWatchdogSpoofGroup = alcatelIND1IPXMIBWatchdogSpoofGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBWatchdogSpoofGroup.setDescription('A collection of objects from the Watchdog spoof tables.')
alcatelIND1IPXMIBSerialFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxSerialFilterMode"), ("ALCATEL-IND1-IPX-MIB", "alaIpxSerialFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBSerialFilterGroup = alcatelIND1IPXMIBSerialFilterGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBSerialFilterGroup.setDescription('A collection of objects from the Serialization Filter tables.')
alcatelIND1IPXMIBKeepaliveSpoofGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaSpxKeepaliveSpoofMode"), ("ALCATEL-IND1-IPX-MIB", "alaSpxKeepaliveSpoofRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBKeepaliveSpoofGroup = alcatelIND1IPXMIBKeepaliveSpoofGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBKeepaliveSpoofGroup.setDescription('A collection of objects from the Keepalive Spoof tables.')
alcatelIND1IPXMIBType20Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxType20Mode"), ("ALCATEL-IND1-IPX-MIB", "alaIpxType20RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBType20Group = alcatelIND1IPXMIBType20Group.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBType20Group.setDescription('A collection of objects from the Type 20 packet tables.')
alcatelIND1IPXMIBTimerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 8, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-IPX-MIB", "alaIpxTimerRip"), ("ALCATEL-IND1-IPX-MIB", "alaIpxTimerSap"), ("ALCATEL-IND1-IPX-MIB", "alaIpxTimerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1IPXMIBTimerGroup = alcatelIND1IPXMIBTimerGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPXMIBTimerGroup.setDescription('A collection of objects from the RIP and SAP Timer tables.')
mibBuilder.exportSymbols("ALCATEL-IND1-IPX-MIB", alaSpxKeepaliveSpoofVlanId=alaSpxKeepaliveSpoofVlanId, alaIpxFlush=alaIpxFlush, alaIpxWatchdogSpoofEntry=alaIpxWatchdogSpoofEntry, alaIpxTimerSap=alaIpxTimerSap, alcatelIND1IPXMIBCompliances=alcatelIND1IPXMIBCompliances, alcatelIND1IPXMIBRipSapFilterGroup=alcatelIND1IPXMIBRipSapFilterGroup, alcatelIND1IPXMIBType20Group=alcatelIND1IPXMIBType20Group, alaIpxWatchdogSpoofMode=alaIpxWatchdogSpoofMode, alaIpxRoutingGroup=alaIpxRoutingGroup, alaIpxTimerVlanId=alaIpxTimerVlanId, alaIpxFilterGroup=alaIpxFilterGroup, alcatelIND1IPXMIBWatchdogSpoofGroup=alcatelIND1IPXMIBWatchdogSpoofGroup, alcatelIND1IPXMIBDefRouteGroup=alcatelIND1IPXMIBDefRouteGroup, alaIpxRipSapFilterType=alaIpxRipSapFilterType, alaIpxSerialFilterTable=alaIpxSerialFilterTable, alaSpxKeepaliveSpoofTable=alaSpxKeepaliveSpoofTable, alaSpxKeepaliveSpoofEntry=alaSpxKeepaliveSpoofEntry, alaIpxType20Mode=alaIpxType20Mode, alaIpxDefRouteNode=alaIpxDefRouteNode, alaIpxType20RowStatus=alaIpxType20RowStatus, alcatelIND1IPXMIB=alcatelIND1IPXMIB, alaIpxRipSapFilterMode=alaIpxRipSapFilterMode, alaIpxStaticRouteEntry=alaIpxStaticRouteEntry, alcatelIND1IPXMIBStaticRouteGroup=alcatelIND1IPXMIBStaticRouteGroup, alaIpxDefRouteVlanId=alaIpxDefRouteVlanId, HostAddress=HostAddress, alaIpxTimerRip=alaIpxTimerRip, alcatelIND1IPXMIBCompliance=alcatelIND1IPXMIBCompliance, alcatelIND1IPXMIBKeepaliveSpoofGroup=alcatelIND1IPXMIBKeepaliveSpoofGroup, alaIpxRipSapFilterNodeMask=alaIpxRipSapFilterNodeMask, alaIpxRipSapFilterEntry=alaIpxRipSapFilterEntry, alaIpxExtMsgRowStatus=alaIpxExtMsgRowStatus, alcatelIND1IPXMIBObjects=alcatelIND1IPXMIBObjects, alaIpxTimerEntry=alaIpxTimerEntry, alaIpxDefRouteTable=alaIpxDefRouteTable, alcatelIND1IPXMIBFlushGroup=alcatelIND1IPXMIBFlushGroup, PYSNMP_MODULE_ID=alcatelIND1IPXMIB, alaIpxSerialFilterVlanId=alaIpxSerialFilterVlanId, alaIpxType20VlanId=alaIpxType20VlanId, alaIpxDefRouteNet=alaIpxDefRouteNet, alcatelIND1IPXMIBTimerGroup=alcatelIND1IPXMIBTimerGroup, alaIpxDefRouteEntry=alaIpxDefRouteEntry, alaIpxSerialFilterMode=alaIpxSerialFilterMode, alaIpxStaticRouteNextHopNet=alaIpxStaticRouteNextHopNet, alaIpxWatchdogSpoofTable=alaIpxWatchdogSpoofTable, alaIpxExtMsgTable=alaIpxExtMsgTable, alaIpxStaticRouteHopCount=alaIpxStaticRouteHopCount, alaIpxStaticRouteNetNum=alaIpxStaticRouteNetNum, alaIpxStaticRouteTicks=alaIpxStaticRouteTicks, alaIpxExtMsgVlanId=alaIpxExtMsgVlanId, alaIpxDefRouteRowStatus=alaIpxDefRouteRowStatus, alaIpxExtMsgMode=alaIpxExtMsgMode, alaIpxType20Entry=alaIpxType20Entry, alaIpxRipSapFilterSvcType=alaIpxRipSapFilterSvcType, alaIpxSerialFilterEntry=alaIpxSerialFilterEntry, alaIpxRipSapFilterVlanId=alaIpxRipSapFilterVlanId, alaIpxRipSapFilterNode=alaIpxRipSapFilterNode, alcatelIND1IPXMIBExtMsgGroup=alcatelIND1IPXMIBExtMsgGroup, alaIpxStaticRouteNextHopNode=alaIpxStaticRouteNextHopNode, alaIpxWatchdogSpoofVlanId=alaIpxWatchdogSpoofVlanId, alcatelIND1IPXMIBGroups=alcatelIND1IPXMIBGroups, alaIpxTimerTable=alaIpxTimerTable, alaIpxStaticRouteRowStatus=alaIpxStaticRouteRowStatus, alaIpxWatchdogSpoofRowStatus=alaIpxWatchdogSpoofRowStatus, alcatelIND1IPXMIBSerialFilterGroup=alcatelIND1IPXMIBSerialFilterGroup, alaIpxRipSapFilterTable=alaIpxRipSapFilterTable, alaIpxRipSapFilterNet=alaIpxRipSapFilterNet, alaIpxStaticRouteTable=alaIpxStaticRouteTable, NetNumber=NetNumber, alaIpxTimerRowStatus=alaIpxTimerRowStatus, alcatelIND1IPXMIBConformance=alcatelIND1IPXMIBConformance, alaIpxExtMsgEntry=alaIpxExtMsgEntry, alaIpxRipSapFilterNetMask=alaIpxRipSapFilterNetMask, alaSpxKeepaliveSpoofRowStatus=alaSpxKeepaliveSpoofRowStatus, alaIpxType20Table=alaIpxType20Table, alaIpxSerialFilterRowStatus=alaIpxSerialFilterRowStatus, alaSpxKeepaliveSpoofMode=alaSpxKeepaliveSpoofMode, alaIpxTimerGroup=alaIpxTimerGroup, alaIpxRipSapFilterRowStatus=alaIpxRipSapFilterRowStatus)
