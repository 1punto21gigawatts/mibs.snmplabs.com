#
# PySNMP MIB module FILE-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FILE-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Bits, Counter64, Gauge32, ModuleIdentity, Integer32, Counter32, mib_2, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Bits", "Counter64", "Gauge32", "ModuleIdentity", "Integer32", "Counter32", "mib-2", "TimeTicks", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
swFileSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 14))
if mibBuilder.loadTexts: swFileSystemMIB.setLastUpdated('0905250000Z')
if mibBuilder.loadTexts: swFileSystemMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swFileSystemMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swFileSystemMIB.setDescription('The MIB module for managing file system.')
swFSBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 1))
swFSDriveCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 2))
swFSDirectoryCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 3))
swFSFileCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 4))
swFSCopyCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 5))
swFSMoveCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 6))
swFSBasicInfoCtrlStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("other", 0), ("start", 1), ("finish", 2), ("in-process", 3), ("fail", 4), ("invalid-drive-name", 5), ("same-file-name", 6), ("root-area-full", 7), ("insufficient-disk", 8), ("invalid-directory", 9), ("file-readonly", 10), ("exist-same-directory", 11), ("exist-file-in-directory", 12), ("no-file-or-dir", 13), ("no-format", 14), ("no-storage-media", 15), ("fs-no-match-media", 16), ("error-input", 17), ("error-char", 18), ("error-filename", 19), ("access-media-error", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSBasicInfoCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: swFSBasicInfoCtrlStatus.setDescription('This object describes users operations regarding the file status, such as media format, file copying, deleting files, making directories, deleting directories and renaming files. This object will return current status values.')
swFSBasicInfoCtrlProcess = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSBasicInfoCtrlProcess.setStatus('current')
if mibBuilder.loadTexts: swFSBasicInfoCtrlProcess.setDescription('This object indicates the current user operation process as a percentage.')
swFSDriveInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 1), )
if mibBuilder.loadTexts: swFSDriveInfoTable.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoTable.setDescription('This table will display information regarding the drive.')
swFSDriveInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 1, 1), ).setIndexNames((0, "FILE-SYSTEM-MIB", "swFSDriveInfoIndex"))
if mibBuilder.loadTexts: swFSDriveInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoEntry.setDescription('.')
swFSDriveInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: swFSDriveInfoIndex.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoIndex.setDescription('This object will index drive entries.')
swFSDriveInfoDriveID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5), ("g", 6), ("h", 7), ("i", 8), ("j", 9), ("k", 10), ("l", 11), ("m", 12), ("n", 13), ("o", 14), ("p", 15), ("q", 16), ("r", 17), ("s", 18), ("t", 19), ("u", 20), ("v", 21), ("w", 22), ("x", 23), ("y", 24), ("z", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoDriveID.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoDriveID.setDescription('Indicates the drive ID.')
swFSDriveInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoType.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoType.setDescription('Indicates the drive type.')
swFSDriveInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoSize.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoSize.setDescription('Indicates the drive size.')
swFSDriveInfoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoPartition.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoPartition.setDescription('Indicates the drive partition.')
swFSDriveInfoFStype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoFStype.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoFStype.setDescription('Indicates the FS type.')
swFSDriveFormatCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 2))
swFSDriveFormatDriveID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 0), ("a", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("f", 6), ("g", 7), ("h", 8), ("i", 9), ("j", 10), ("k", 11), ("l", 12), ("m", 13), ("n", 14), ("o", 15), ("p", 16), ("q", 17), ("r", 18), ("s", 19), ("t", 20), ("u", 21), ("v", 22), ("w", 23), ("x", 24), ("y", 25), ("z", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDriveFormatDriveID.setStatus('current')
if mibBuilder.loadTexts: swFSDriveFormatDriveID.setDescription('Used to assign a format type to the drive ID. If none (1) is specified, the switch will default to the current drive.')
swFSDriveFormatFat = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fat16", 1), ("fat32", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDriveFormatFat.setStatus('current')
if mibBuilder.loadTexts: swFSDriveFormatFat.setDescription('Use to assign FS type.')
swFSDriveFormatLabelName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDriveFormatLabelName.setStatus('current')
if mibBuilder.loadTexts: swFSDriveFormatLabelName.setDescription('Use to label a name for this drive.')
swFSDriveFormatType = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fast", 1), ("full", 2), ("full-with-mbr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDriveFormatType.setStatus('current')
if mibBuilder.loadTexts: swFSDriveFormatType.setDescription('Use to select format type: fast: clear the file and directory information in the partion header. full: clear the file and directory information in the partion header and the all data sectors in the partion. full-with-mbr: clear all data sectors in the disk ( or on the storage drive) and rebuild the partion information.')
swFSDriveFormatActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDriveFormatActivity.setStatus('current')
if mibBuilder.loadTexts: swFSDriveFormatActivity.setDescription('When this object is set to start(2),the device will begin to format the designated drive.')
swFSDriveChangeCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 3))
swFSDriveChangeUnitID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDriveChangeUnitID.setStatus('current')
if mibBuilder.loadTexts: swFSDriveChangeUnitID.setDescription('Use to assign the current unit ID. If it is not specified, it refers to the master unit.')
swFSDriveChangeDriveID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5), ("e", 6), ("f", 7), ("g", 8), ("h", 9), ("i", 10), ("j", 11), ("k", 12), ("l", 13), ("m", 14), ("n", 15), ("o", 16), ("p", 17), ("q", 18), ("r", 19), ("s", 20), ("t", 21), ("u", 22), ("v", 23), ("w", 24), ("x", 25), ("y", 26), ("z", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDriveChangeDriveID.setStatus('current')
if mibBuilder.loadTexts: swFSDriveChangeDriveID.setDescription('Specifies the drive ID. To set this object will change the current drive.')
swFSDriveCurrentDirectory = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDriveCurrentDirectory.setStatus('current')
if mibBuilder.loadTexts: swFSDriveCurrentDirectory.setDescription('Change the current directory to this directory. The path name can be specified either as a full path name or partial name. Entering a partial path name denotes that the directory is to be a part of the current directory. ')
swFSDriveInfoStackTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4), )
if mibBuilder.loadTexts: swFSDriveInfoStackTable.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackTable.setDescription('This table indicates information about the drives of devices stacked with the current device.')
swFSDriveInfoStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4, 1), ).setIndexNames((0, "FILE-SYSTEM-MIB", "swFSDriveInfoStackUnitID"), (0, "FILE-SYSTEM-MIB", "swFSDriveInfoStackIndex"))
if mibBuilder.loadTexts: swFSDriveInfoStackEntry.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackEntry.setDescription('A list of information about each drive of devices stacked with this device.')
swFSDriveInfoStackUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoStackUnitID.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackUnitID.setDescription('The Unit ID of each device stacked with the current device.')
swFSDriveInfoStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: swFSDriveInfoStackIndex.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackIndex.setDescription('The drive index of each device stacked with the current device.')
swFSDriveInfoStackDriveID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("f", 6), ("g", 7), ("h", 8), ("i", 9), ("j", 10), ("k", 11), ("l", 12), ("m", 13), ("n", 14), ("o", 15), ("p", 16), ("q", 17), ("r", 18), ("s", 19), ("t", 20), ("u", 21), ("v", 22), ("w", 23), ("x", 24), ("y", 25), ("z", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoStackDriveID.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackDriveID.setDescription('Indicates the drive ID.')
swFSDriveInfoStackType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoStackType.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackType.setDescription('Indicates the drive type.')
swFSDriveInfoStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoStackSize.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackSize.setDescription('Indicates the drive size.')
swFSDriveInfoStackPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoStackPartition.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackPartition.setDescription('Indicates the drive partition.')
swFSDriveInfoStackFStype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDriveInfoStackFStype.setStatus('current')
if mibBuilder.loadTexts: swFSDriveInfoStackFStype.setDescription('Indicates the FS type.')
swFSDirectoryMake = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDirectoryMake.setStatus('current')
if mibBuilder.loadTexts: swFSDirectoryMake.setDescription('make directory (md/mkdir). Used to create a directory on a drive.')
swFSDirectoryDel = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDirectoryDel.setStatus('current')
if mibBuilder.loadTexts: swFSDirectoryDel.setDescription('delete directory (rd/rmdir). Used to delete a directory on a drive.')
swFSctrlDirectoryDir = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 3))
swFSDirectoryPath = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSDirectoryPath.setStatus('current')
if mibBuilder.loadTexts: swFSDirectoryPath.setDescription('Used to control the path directory.')
swFSDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 3, 2), )
if mibBuilder.loadTexts: swFSDirectoryTable.setStatus('current')
if mibBuilder.loadTexts: swFSDirectoryTable.setDescription('This table lists file and directory information.')
swFSDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 3, 2, 1), ).setIndexNames((0, "FILE-SYSTEM-MIB", "swFSDirectoryName"))
if mibBuilder.loadTexts: swFSDirectoryEntry.setStatus('current')
if mibBuilder.loadTexts: swFSDirectoryEntry.setDescription('.')
swFSDirectoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDirectoryName.setStatus('current')
if mibBuilder.loadTexts: swFSDirectoryName.setDescription('Indicates a file name or directory in this directory.')
swFSDirectoryAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dir", 1), ("file", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDirectoryAttr.setStatus('current')
if mibBuilder.loadTexts: swFSDirectoryAttr.setDescription("Displays the attributes of this entry. dir(1) - it's a directory. file(2) - it's a file.")
swFSDirectoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDirectoryTime.setStatus('current')
if mibBuilder.loadTexts: swFSDirectoryTime.setDescription('Indicates the time of creation or modification of this file.')
swFSDirectorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 14, 3, 3, 2, 1, 4), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: swFSDirectorySize.setStatus('current')
if mibBuilder.loadTexts: swFSDirectorySize.setDescription('Indicates the file size.')
swFSFileRename = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 4, 1))
swFSFileSourceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSFileSourceName.setStatus('current')
if mibBuilder.loadTexts: swFSFileSourceName.setDescription('Use to assign the source file to copy. Please input path and filename to rename.')
swFSFileTargetName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSFileTargetName.setStatus('current')
if mibBuilder.loadTexts: swFSFileTargetName.setDescription('Use to assign the destination file to copy. Please input path and filename to rename.')
swFSFileRenameActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSFileRenameActivity.setStatus('current')
if mibBuilder.loadTexts: swFSFileRenameActivity.setDescription('When this object is set to start(2), the device will begin renaming the file.')
swFSFileDel = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 14, 4, 2))
swFSFileDelName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSFileDelName.setStatus('current')
if mibBuilder.loadTexts: swFSFileDelName.setDescription('Use to delete a file. Please input path and filename to delete.')
swFSFileDelOption = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("recursive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSFileDelOption.setStatus('current')
if mibBuilder.loadTexts: swFSFileDelOption.setDescription('When this object is set to none(1), the file will be deleted. When this object is set to recursive(2), the directory will be deleted despite of whether there is any file in it.')
swFSFileDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSFileDelActivity.setStatus('current')
if mibBuilder.loadTexts: swFSFileDelActivity.setDescription('When this object is set to start(2), the device will begin deleting the file.')
swFSCopySourceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSCopySourceName.setStatus('current')
if mibBuilder.loadTexts: swFSCopySourceName.setDescription('Use to assign the source file to copy. Please input path and filename.')
swFSCopyDestinationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSCopyDestinationName.setStatus('current')
if mibBuilder.loadTexts: swFSCopyDestinationName.setDescription('Use to assign the destination file to copy. Please input path and filename.')
swFSCopyActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("start", 2), ("file-to-file", 3), ("file-to-image", 4), ("file-to-config", 5), ("file-to-prom", 6), ("image-to-file", 7), ("config-to-file", 8), ("log-to-file", 9), ("prom-to-file", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSCopyActivity.setStatus('current')
if mibBuilder.loadTexts: swFSCopyActivity.setDescription('This command is used to copy a file to another file in the file system. A file located in a drive of a unit can be copied to another file located in another drive of another unit. For any project that does not support the file system on the flash, the system file such as runtime image/configuration / prom /log can still be copied to media or from media that supports the file system via this command using the reserved keyword. The keyword here refers to image-id, config-id, prom, or log.')
swFSCopyDestinationUnitID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSCopyDestinationUnitID.setStatus('current')
if mibBuilder.loadTexts: swFSCopyDestinationUnitID.setDescription('Use to assign the destination unit ID to copy. If it is specified, swFSCopyDestinationDriveID should be specified also. If it is not specified, it refers to the current unit specified by swFSDriveChangeUnitID. If the current unit is not specified also, it refers to the master unit. ')
swFSCopyDestinationDriveID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5), ("e", 6), ("f", 7), ("g", 8), ("h", 9), ("i", 10), ("j", 11), ("k", 12), ("l", 13), ("m", 14), ("n", 15), ("o", 16), ("p", 17), ("q", 18), ("r", 19), ("s", 20), ("t", 21), ("u", 22), ("v", 23), ("w", 24), ("x", 25), ("y", 26), ("z", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSCopyDestinationDriveID.setStatus('current')
if mibBuilder.loadTexts: swFSCopyDestinationDriveID.setDescription('Specifies the destination drive ID to copy. If swFSCopyDestinationUnitID is specified, this object should be specified also. If it is not specified, it refers to the current drive specified by swFSDriveChangeDriveID.')
swFSCopyConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSCopyConfigID.setStatus('current')
if mibBuilder.loadTexts: swFSCopyConfigID.setDescription('Specifies the specific configuration to copied.')
swFSCopyImageID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSCopyImageID.setStatus('current')
if mibBuilder.loadTexts: swFSCopyImageID.setDescription('Specifies the specific firmware image to copied.')
swFSMoveSourceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSMoveSourceName.setStatus('current')
if mibBuilder.loadTexts: swFSMoveSourceName.setDescription('Use to assign the source file to move. Please input path and filename.')
swFSMoveDestinationUnitID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSMoveDestinationUnitID.setStatus('current')
if mibBuilder.loadTexts: swFSMoveDestinationUnitID.setDescription('Use to assign the destination unit ID to move. If it is specified, swFSMoveDestinationDriveID should be specified also. If it is not specified, it refers to the current unit specified by swFSDriveChangeUnitID. If the current unit is not specified also, it refers to the master unit. ')
swFSMoveDestinationDriveID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5), ("e", 6), ("f", 7), ("g", 8), ("h", 9), ("i", 10), ("j", 11), ("k", 12), ("l", 13), ("m", 14), ("n", 15), ("o", 16), ("p", 17), ("q", 18), ("r", 19), ("s", 20), ("t", 21), ("u", 22), ("v", 23), ("w", 24), ("x", 25), ("y", 26), ("z", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSMoveDestinationDriveID.setStatus('current')
if mibBuilder.loadTexts: swFSMoveDestinationDriveID.setDescription('Specifies the destination drive ID to move. If swFSMoveDestinationUnitID is specified, this object should be specified also. If it is not specified, it refers to the current drive specified by swFSDriveChangeDriveID.')
swFSMoveDestinationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSMoveDestinationName.setStatus('current')
if mibBuilder.loadTexts: swFSMoveDestinationName.setDescription('Use to assign the destination file to move. Please input path and filename.')
swFSMoveActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 14, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFSMoveActivity.setStatus('current')
if mibBuilder.loadTexts: swFSMoveActivity.setDescription('When this object is set to start(2), the device will begin moving the file.')
mibBuilder.exportSymbols("FILE-SYSTEM-MIB", swFileSystemMIB=swFileSystemMIB, swFSDriveInfoEntry=swFSDriveInfoEntry, swFSDriveInfoStackPartition=swFSDriveInfoStackPartition, swFSDriveInfoStackSize=swFSDriveInfoStackSize, swFSFileDelOption=swFSFileDelOption, swFSBasicInfoCtrlProcess=swFSBasicInfoCtrlProcess, swFSCopyDestinationUnitID=swFSCopyDestinationUnitID, swFSCopyImageID=swFSCopyImageID, swFSDriveInfoFStype=swFSDriveInfoFStype, swFSCopyConfigID=swFSCopyConfigID, swFSMoveDestinationUnitID=swFSMoveDestinationUnitID, swFSDriveCurrentDirectory=swFSDriveCurrentDirectory, swFSDriveFormatCtrl=swFSDriveFormatCtrl, swFSDriveInfoSize=swFSDriveInfoSize, swFSDriveInfoStackUnitID=swFSDriveInfoStackUnitID, swFSDirectoryMake=swFSDirectoryMake, swFSDirectoryName=swFSDirectoryName, swFSMoveDestinationDriveID=swFSMoveDestinationDriveID, swFSDirectoryPath=swFSDirectoryPath, swFSDriveFormatLabelName=swFSDriveFormatLabelName, swFSDriveInfoTable=swFSDriveInfoTable, swFSDirectoryTable=swFSDirectoryTable, swFSDirectoryTime=swFSDirectoryTime, swFSDriveChangeDriveID=swFSDriveChangeDriveID, swFSDriveInfoIndex=swFSDriveInfoIndex, swFSDriveChangeUnitID=swFSDriveChangeUnitID, swFSFileTargetName=swFSFileTargetName, swFSDriveFormatFat=swFSDriveFormatFat, swFSCopyActivity=swFSCopyActivity, swFSDriveInfoType=swFSDriveInfoType, swFSDriveFormatType=swFSDriveFormatType, swFSFileRenameActivity=swFSFileRenameActivity, swFSDriveInfoStackFStype=swFSDriveInfoStackFStype, swFSMoveSourceName=swFSMoveSourceName, swFSDriveFormatDriveID=swFSDriveFormatDriveID, swFSDriveInfoStackIndex=swFSDriveInfoStackIndex, swFSBasicInfo=swFSBasicInfo, swFSDirectoryAttr=swFSDirectoryAttr, swFSFileRename=swFSFileRename, swFSFileSourceName=swFSFileSourceName, swFSFileDel=swFSFileDel, swFSFileCtrl=swFSFileCtrl, swFSDriveInfoStackEntry=swFSDriveInfoStackEntry, swFSFileDelName=swFSFileDelName, swFSDriveCtrl=swFSDriveCtrl, swFSCopyCtrl=swFSCopyCtrl, swFSMoveActivity=swFSMoveActivity, PYSNMP_MODULE_ID=swFileSystemMIB, swFSDriveChangeCtrl=swFSDriveChangeCtrl, swFSDriveInfoDriveID=swFSDriveInfoDriveID, swFSDirectoryEntry=swFSDirectoryEntry, swFSDriveInfoPartition=swFSDriveInfoPartition, swFSDriveInfoStackDriveID=swFSDriveInfoStackDriveID, swFSFileDelActivity=swFSFileDelActivity, swFSDriveFormatActivity=swFSDriveFormatActivity, swFSDriveInfoStackTable=swFSDriveInfoStackTable, swFSMoveCtrl=swFSMoveCtrl, swFSDirectoryDel=swFSDirectoryDel, swFSMoveDestinationName=swFSMoveDestinationName, swFSDirectorySize=swFSDirectorySize, swFSBasicInfoCtrlStatus=swFSBasicInfoCtrlStatus, swFSctrlDirectoryDir=swFSctrlDirectoryDir, swFSCopyDestinationDriveID=swFSCopyDestinationDriveID, swFSDriveInfoStackType=swFSDriveInfoStackType, swFSCopySourceName=swFSCopySourceName, swFSDirectoryCtrl=swFSDirectoryCtrl, swFSCopyDestinationName=swFSCopyDestinationName)
