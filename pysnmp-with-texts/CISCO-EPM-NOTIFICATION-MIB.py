#
# PySNMP MIB module CISCO-EPM-NOTIFICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-EPM-NOTIFICATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Unsigned32, Counter64, iso, ObjectIdentity, Bits, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, NotificationType, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "Counter64", "iso", "ObjectIdentity", "Bits", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "NotificationType", "MibIdentifier", "Counter32")
TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString")
ciscoEpmNotificationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 311))
ciscoEpmNotificationMIB.setRevisions(('2004-06-07 00:00', '2003-08-21 00:00', '2002-07-28 14:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEpmNotificationMIB.setRevisionsDescriptions(('Updated the cenAlarmEntry to include new attributes. The new attributes carries information that adds more value to the already existing trap structure. The Management application computes events for a device via polling snmp mib objects on the device and/or by listening to SNMP Traps. Multiple events on a single device roll up into what is called an Alert - there can be only one alert for a given device at any given time. The objects contained in the cenAlarmEntry are the same for both Alert and Event based notification. The attribute cenAlarmMode added in this revision of the mib can be used to distinguish between the Alert based and event based notification. In case of event based notification, the cenAlertID would contain the alert id, as computed by the management system, to which the generated event has been rolled up. Traps generated from systems that support mutiple Partition, the cenPartitionNumber and cenPartitionName attributes will carry the exact partition details of the device for which the trap is generated. Through the management application user interface, the user can customize few attributes of the trap structure. Two attributes included in this mib revision that allows the user to customize each trap sent out are cenCustomerIdentification and cenCustomerRevision. ciscoEpmNotificationObjectsGroup, ciscoEpmNotificationAlarm, and ciscoEpmNotificationMIBCompliance have been deprecated in this revision. ciscoEpmNotificationAlarmRev1, ciscoEpmNotificationAlarmGroupRev1, ciscoEpmNotificationMIBComplianceRev1, and ciscoEpmNotificationObjectsGroupRev1 have been newly created in this revision.', 'Included imports for Integer32, Unsigned32, and NOTIFICATION-GROUP.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoEpmNotificationMIB.setLastUpdated('200406070000Z')
if mibBuilder.loadTexts: ciscoEpmNotificationMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEpmNotificationMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: tac@cisco.com')
if mibBuilder.loadTexts: ciscoEpmNotificationMIB.setDescription("Notifications directly from hardware and software and processed notifications from various management applications can be further processed and forwarded by still other management applications to indicate the status of devices and software (managed objects). The status of these managed objects can be reported by traps. The CISCO-EPM-NOTIFICATION-MIB contains the trap structure which carries the identity and status info of the managed object as analyzed by such an event processor. It is not possible for receivers of these traps to query the mib objects. A unique but optional feature of the application generating the trap defined in this mib is the ability to contain multiple partitions in the same system running the application. A 'Partition' is a logical grouping of a set of managed devices. These devices can belong to only one partition at any given time. The trap structure will contain information on the exact partition number and the partition name of the device where it resides. The need for trap generation is to enable multiple management applications in the network to have a consolidated view of the whole network of Cisco and non-Cisco devices.")
ciscoEpmNotificationMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 311, 0))
ciscoEpmNotificationMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 311, 1))
ciscoEpmNotificationMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 311, 2))
cenAlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1))
cenAlarmTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cenAlarmTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: cenAlarmTableMaxLength.setDescription('Maximum number of entries permissible in the cenAlarmTable.')
cenAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2), )
if mibBuilder.loadTexts: cenAlarmTable.setStatus('current')
if mibBuilder.loadTexts: cenAlarmTable.setDescription('A table containing the device identification and alarm value. The maximum number of entries permissible in this table is defined by cenAlarmTableMaxLength. When the number of entries in the table reaches the maximum limit, the next entry would replace the oldest existing entry in the table.')
cenAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-EPM-NOTIFICATION-MIB", "cenAlarmIndex"))
if mibBuilder.loadTexts: cenAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: cenAlarmEntry.setDescription('The information regarding a single device status alarm. An entry is created when an alarm is processed.')
cenAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cenAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: cenAlarmIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing the attributes in ciscoEpmNotificationMIBObjects. When the maximum value is reached, this value wraps back to 1.')
cenAlarmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmVersion.setStatus('current')
if mibBuilder.loadTexts: cenAlarmVersion.setDescription('The release version of this MIB. The version string will be of the form <major version>.<minorversion>.')
cenAlarmTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmTimestamp.setStatus('current')
if mibBuilder.loadTexts: cenAlarmTimestamp.setDescription('The time when the alarm was raised.')
cenAlarmUpdatedTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmUpdatedTimestamp.setStatus('current')
if mibBuilder.loadTexts: cenAlarmUpdatedTimestamp.setDescription('Alarms persist over time and can have their field(s) change values. The last time a field(s) changed, this alarm is updated. The updated time denotes this time. Each alarm is identified by the unique alarm instance id, cenAlarmInstanceID.')
cenAlarmInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmInstanceID.setStatus('current')
if mibBuilder.loadTexts: cenAlarmInstanceID.setDescription('The Unique Alarm Instance ID.')
cenAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: cenAlarmStatus.setDescription('The alarm status indicates the status of the alarm in integer value.')
cenAlarmStatusDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmStatusDefinition.setStatus('current')
if mibBuilder.loadTexts: cenAlarmStatusDefinition.setDescription("The short description of the status of the alarm. The string is formatted in '<integer>,<alarmStatus description>' tuples. The <integer> value is the same value that the 'cenAlarmStatus' attribute holds. <alarmStatus description> contains one line description of the alarm status generated.")
cenAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("direct", 2), ("indirect", 3), ("mixed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmType.setStatus('current')
if mibBuilder.loadTexts: cenAlarmType.setDescription('unknown: When the value for this attribute could not be determined. direct: Denotes an alarm generated by a set of events where all events are reported by an observation(s) of a managed object. indirect: Denotes an alarm generated by a set of events where all events were deduced or inferred by the status of managed objects as determined by the network management system. mixed: Denotes an alarm generated by a set of events which were either direct or indirect.')
cenAlarmCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmCategory.setStatus('current')
if mibBuilder.loadTexts: cenAlarmCategory.setDescription('The category of the alarm generated represented in integer value.')
cenAlarmCategoryDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmCategoryDefinition.setStatus('current')
if mibBuilder.loadTexts: cenAlarmCategoryDefinition.setDescription("The short description of the category of the alarm generated. The String is formatted in '<integer>,<alarmCategory description>' tuples. The <integer> value is the same value that the 'cenAlarmCategory' attribute holds. <alarmCategory description> contains one line description of the alarm category generated.")
cenAlarmServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmServerAddressType.setStatus('current')
if mibBuilder.loadTexts: cenAlarmServerAddressType.setDescription('The type of Internet address by which the server is reachable. The Server is the server that is generating this trap.')
cenAlarmServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmServerAddress.setStatus('current')
if mibBuilder.loadTexts: cenAlarmServerAddress.setDescription('The IP Address or the DNS name of the Management Server that raised this alarm to be notified.')
cenAlarmManagedObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmManagedObjectClass.setStatus('current')
if mibBuilder.loadTexts: cenAlarmManagedObjectClass.setDescription('The class of the managed object for which this alarm was generated. For example, Router, Switch, GateKeeper and VoicePort.')
cenAlarmManagedObjectAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmManagedObjectAddressType.setStatus('current')
if mibBuilder.loadTexts: cenAlarmManagedObjectAddressType.setDescription('The type of Internet address by which the managed object is reachable.')
cenAlarmManagedObjectAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmManagedObjectAddress.setStatus('current')
if mibBuilder.loadTexts: cenAlarmManagedObjectAddress.setDescription('The IP Address or the DNS name of the Managed Object.')
cenAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: cenAlarmDescription.setDescription('A detailed description of the alarm.')
cenAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: cenAlarmSeverity.setDescription('The alarm severity indicates the severity of the alarm in integer value.')
cenAlarmSeverityDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmSeverityDefinition.setStatus('current')
if mibBuilder.loadTexts: cenAlarmSeverityDefinition.setDescription("The short description of the severity of the alarm generated. The String is formatted in '<integer>,<alarmSeverity description>' tuples. The <integer> value is the same value that the 'cenAlarmSeverity ' attribute holds. <alarmSeverity description> contains one line description of the alarm severity generated.")
cenAlarmTriageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmTriageValue.setStatus('current')
if mibBuilder.loadTexts: cenAlarmTriageValue.setDescription('The triage value of an alarm is a hierarchical weighting value (applied by the application, and more importantly customizable by the end user) to allow an artificial form of evaluating impact, interest, or other user-determined functions between alarms. The value is a positive number or zero where zero denotes an undetermined or uncomputable value.')
cenEventIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenEventIDList.setStatus('current')
if mibBuilder.loadTexts: cenEventIDList.setDescription('Comma separated list of the Unique Event identifiers that led to the generation of this Alarm.')
cenUserMessage1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenUserMessage1.setStatus('current')
if mibBuilder.loadTexts: cenUserMessage1.setDescription('User input message. This value can be configured.')
cenUserMessage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenUserMessage2.setStatus('current')
if mibBuilder.loadTexts: cenUserMessage2.setDescription('User input message. This value can be configured.')
cenUserMessage3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenUserMessage3.setStatus('current')
if mibBuilder.loadTexts: cenUserMessage3.setDescription('User input message. This value can be configured.')
cenAlarmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("alert", 2), ("event", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlarmMode.setStatus('current')
if mibBuilder.loadTexts: cenAlarmMode.setDescription('unknown: When the value for this attribute could not be determined. alert: Denotes an alarm generated by a set of events where all events are reported by polling of managed objects and/or listening to SNMP notifications. event: Denotes an event generated by polling of managed ojects and/or listening to SNMP notifications.')
cenPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenPartitionNumber.setStatus('current')
if mibBuilder.loadTexts: cenPartitionNumber.setDescription('In traps generated by the management application that support multiple partitions, the attribute will carry the integer value assigned to identify the logical group where the managed device resides.')
cenPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenPartitionName.setStatus('current')
if mibBuilder.loadTexts: cenPartitionName.setDescription('In traps generated by the management application that support multiple partitions, the attribute will carry the name assigned to identify the logical group where the managed device resides.')
cenCustomerIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 27), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenCustomerIdentification.setStatus('current')
if mibBuilder.loadTexts: cenCustomerIdentification.setDescription('User input message. The attribute takes in a free format text. This attribute can be used by advanced management applications to sort responses from the fault management server.')
cenCustomerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenCustomerRevision.setStatus('current')
if mibBuilder.loadTexts: cenCustomerRevision.setDescription('User input message. The attribute takes in a free format text. This attribute can be used by advanced management applications to sort responses from the fault management server.')
cenAlertID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 311, 1, 1, 2, 1, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cenAlertID.setStatus('current')
if mibBuilder.loadTexts: cenAlertID.setDescription('In event based notification, this attribute will contain the alert id to which the generated event has been rolled up to. In alert based notification, the cenAlarmInstanceId and cenAlertID would be identical.')
ciscoEpmNotificationAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 311, 0, 1)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmVersion"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTimestamp"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmUpdatedTimestamp"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmInstanceID"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmStatus"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmStatusDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmCategory"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmCategoryDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmServerAddressType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmServerAddress"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectClass"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectAddressType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectAddress"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmDescription"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmSeverity"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmSeverityDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTriageValue"), ("CISCO-EPM-NOTIFICATION-MIB", "cenEventIDList"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage1"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage2"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage3"))
if mibBuilder.loadTexts: ciscoEpmNotificationAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEpmNotificationAlarm.setDescription('Notification of the status of the managed object as generated by the management server. New attributes are added to the ciscoEpmNotificationAlarmRev1. Hence this notification is deprecated.')
ciscoEpmNotificationAlarmRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 311, 0, 2)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmVersion"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTimestamp"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmUpdatedTimestamp"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmInstanceID"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmStatus"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmStatusDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmCategory"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmCategoryDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmServerAddressType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmServerAddress"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectClass"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectAddressType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectAddress"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmDescription"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmSeverity"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmSeverityDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTriageValue"), ("CISCO-EPM-NOTIFICATION-MIB", "cenEventIDList"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage1"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage2"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage3"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmMode"), ("CISCO-EPM-NOTIFICATION-MIB", "cenPartitionNumber"), ("CISCO-EPM-NOTIFICATION-MIB", "cenPartitionName"), ("CISCO-EPM-NOTIFICATION-MIB", "cenCustomerIdentification"), ("CISCO-EPM-NOTIFICATION-MIB", "cenCustomerRevision"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlertID"))
if mibBuilder.loadTexts: ciscoEpmNotificationAlarmRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoEpmNotificationAlarmRev1.setDescription('Notification of the status of the managed object as generated by the management server.')
ciscoEpmNotificationMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 1))
ciscoEpmNotificationMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 2))
ciscoEpmNotificationMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 1, 1)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "ciscoEpmNotificationObjectsGroup"), ("CISCO-EPM-NOTIFICATION-MIB", "ciscoEpmNotificationAlarmGroup"), ("CISCO-EPM-NOTIFICATION-MIB", "ciscoEpmAlarmConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpmNotificationMIBCompliance = ciscoEpmNotificationMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEpmNotificationMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-EPM-NOTIFICATION-MIB. New attributes are included in ciscoEpmNotificationMIBComplianceRev1. Hence this object is deprecated.')
ciscoEpmNotificationMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 1, 1, 2)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "ciscoEpmNotificationObjectsGroupRev1"), ("CISCO-EPM-NOTIFICATION-MIB", "ciscoEpmNotificationAlarmGroupRev1"), ("CISCO-EPM-NOTIFICATION-MIB", "ciscoEpmAlarmConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpmNotificationMIBComplianceRev1 = ciscoEpmNotificationMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoEpmNotificationMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-EPM-NOTIFICATION-MIB.')
ciscoEpmNotificationAlarmGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 2, 1)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "ciscoEpmNotificationAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpmNotificationAlarmGroup = ciscoEpmNotificationAlarmGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEpmNotificationAlarmGroup.setDescription('The collection of notifications used to indicate managed object status. ciscoEpmNotificationAlarmGroupRev1 is defined. Hence this object is deprecated.')
ciscoEpmNotificationObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 2, 2)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmVersion"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTimestamp"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmUpdatedTimestamp"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmInstanceID"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmStatus"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmStatusDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmCategory"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmCategoryDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmServerAddressType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmServerAddress"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectClass"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectAddressType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectAddress"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmDescription"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmSeverity"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmSeverityDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTriageValue"), ("CISCO-EPM-NOTIFICATION-MIB", "cenEventIDList"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage1"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage2"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpmNotificationObjectsGroup = ciscoEpmNotificationObjectsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEpmNotificationObjectsGroup.setDescription('Trap reflecting the alarm. New attributes are added to the new notification ciscoEpmNotificationObjectsGroupRev1. Hence this object is deprecated.')
ciscoEpmAlarmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 2, 3)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTableMaxLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpmAlarmConfigGroup = ciscoEpmAlarmConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEpmAlarmConfigGroup.setDescription('A collection of objects providing information about the total number of cenAlarmTable entries maintained.')
ciscoEpmNotificationAlarmGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 2, 4)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "ciscoEpmNotificationAlarmRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpmNotificationAlarmGroupRev1 = ciscoEpmNotificationAlarmGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoEpmNotificationAlarmGroupRev1.setDescription('The collection of notifications used to indicate managed object status.')
ciscoEpmNotificationObjectsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 311, 2, 2, 5)).setObjects(("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmVersion"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTimestamp"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmUpdatedTimestamp"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmInstanceID"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmStatus"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmStatusDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmCategory"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmCategoryDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmServerAddressType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmServerAddress"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectClass"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectAddressType"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmManagedObjectAddress"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmDescription"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmSeverity"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmSeverityDefinition"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmTriageValue"), ("CISCO-EPM-NOTIFICATION-MIB", "cenEventIDList"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage1"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage2"), ("CISCO-EPM-NOTIFICATION-MIB", "cenUserMessage3"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlarmMode"), ("CISCO-EPM-NOTIFICATION-MIB", "cenPartitionNumber"), ("CISCO-EPM-NOTIFICATION-MIB", "cenPartitionName"), ("CISCO-EPM-NOTIFICATION-MIB", "cenCustomerIdentification"), ("CISCO-EPM-NOTIFICATION-MIB", "cenCustomerRevision"), ("CISCO-EPM-NOTIFICATION-MIB", "cenAlertID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpmNotificationObjectsGroupRev1 = ciscoEpmNotificationObjectsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoEpmNotificationObjectsGroupRev1.setDescription('Notification reflecting the alarm.')
mibBuilder.exportSymbols("CISCO-EPM-NOTIFICATION-MIB", cenAlarmServerAddressType=cenAlarmServerAddressType, cenAlarmTableMaxLength=cenAlarmTableMaxLength, cenPartitionNumber=cenPartitionNumber, cenEventIDList=cenEventIDList, cenPartitionName=cenPartitionName, cenUserMessage2=cenUserMessage2, cenAlertID=cenAlertID, ciscoEpmNotificationMIBCompliance=ciscoEpmNotificationMIBCompliance, ciscoEpmNotificationMIBComplianceRev1=ciscoEpmNotificationMIBComplianceRev1, cenAlarmStatus=cenAlarmStatus, ciscoEpmNotificationAlarmGroup=ciscoEpmNotificationAlarmGroup, cenAlarmInstanceID=cenAlarmInstanceID, cenAlarmSeverity=cenAlarmSeverity, cenAlarmTriageValue=cenAlarmTriageValue, ciscoEpmNotificationMIB=ciscoEpmNotificationMIB, cenAlarmCategory=cenAlarmCategory, cenAlarmIndex=cenAlarmIndex, cenAlarmUpdatedTimestamp=cenAlarmUpdatedTimestamp, ciscoEpmNotificationObjectsGroupRev1=ciscoEpmNotificationObjectsGroupRev1, cenAlarmServerAddress=cenAlarmServerAddress, ciscoEpmNotificationAlarm=ciscoEpmNotificationAlarm, cenCustomerIdentification=cenCustomerIdentification, ciscoEpmNotificationMIBNotifs=ciscoEpmNotificationMIBNotifs, ciscoEpmNotificationMIBObjects=ciscoEpmNotificationMIBObjects, cenUserMessage3=cenUserMessage3, cenCustomerRevision=cenCustomerRevision, cenAlarmTable=cenAlarmTable, cenAlarmMode=cenAlarmMode, ciscoEpmNotificationAlarmGroupRev1=ciscoEpmNotificationAlarmGroupRev1, cenAlarmManagedObjectAddress=cenAlarmManagedObjectAddress, cenAlarmManagedObjectClass=cenAlarmManagedObjectClass, cenAlarmSeverityDefinition=cenAlarmSeverityDefinition, cenAlarmData=cenAlarmData, ciscoEpmNotificationAlarmRev1=ciscoEpmNotificationAlarmRev1, ciscoEpmNotificationMIBCompliances=ciscoEpmNotificationMIBCompliances, cenAlarmCategoryDefinition=cenAlarmCategoryDefinition, ciscoEpmNotificationObjectsGroup=ciscoEpmNotificationObjectsGroup, ciscoEpmAlarmConfigGroup=ciscoEpmAlarmConfigGroup, PYSNMP_MODULE_ID=ciscoEpmNotificationMIB, cenUserMessage1=cenUserMessage1, cenAlarmVersion=cenAlarmVersion, ciscoEpmNotificationMIBConform=ciscoEpmNotificationMIBConform, cenAlarmStatusDefinition=cenAlarmStatusDefinition, cenAlarmTimestamp=cenAlarmTimestamp, ciscoEpmNotificationMIBGroups=ciscoEpmNotificationMIBGroups, cenAlarmManagedObjectAddressType=cenAlarmManagedObjectAddressType, cenAlarmType=cenAlarmType, cenAlarmDescription=cenAlarmDescription, cenAlarmEntry=cenAlarmEntry)
