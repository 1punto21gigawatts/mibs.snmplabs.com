#
# PySNMP MIB module SYSLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYSLOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, MibIdentifier, iso, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, ModuleIdentity, ObjectIdentity, Unsigned32, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "MibIdentifier", "iso", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Counter64", "IpAddress")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
swSysLogMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 12))
if mibBuilder.loadTexts: swSysLogMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swSysLogMIB.setOrganization(' ')
if mibBuilder.loadTexts: swSysLogMIB.setContactInfo(' ')
if mibBuilder.loadTexts: swSysLogMIB.setDescription('The Structure of System Log Information for the proprietary enterprise.')
swSysLogCtrlState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysLogCtrlState.setStatus('current')
if mibBuilder.loadTexts: swSysLogCtrlState.setDescription('This object can be enabled or disabled functionality of System Log during runtime of the system.')
swSysLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 12, 2), )
if mibBuilder.loadTexts: swSysLogServerTable.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerTable.setDescription('This table contain System Log Server information.')
swSysLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 12, 2, 1), ).setIndexNames((0, "SYSLOG-MIB", "swSysLogServerIndex"))
if mibBuilder.loadTexts: swSysLogServerEntry.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerEntry.setDescription('A list of information about System Log Server.')
swSysLogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysLogServerIndex.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerIndex.setDescription('The index of System Log Server entry ,and is unique.')
swSysLogServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 12, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSysLogServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerIPAddress.setDescription('specifies the IP address of the System Log Server.')
swSysLogServerFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local0", 0), ("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6), ("local7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSysLogServerFacility.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerFacility.setDescription('syslog Message Facilities')
swSysLogServerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("warning", 2), ("informational", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSysLogServerSeverity.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerSeverity.setDescription('syslog Message Severities')
swSysLogServerUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 12, 2, 1, 5), Integer32().clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSysLogServerUDPPort.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerUDPPort.setDescription('syslog uses the user datagram protocol (UDP) as its underlying tranaposrt layer mechanism. The UDP port that has been assigned to syslog is 514. It is RECOMMENDED that the source port also be 514 to indicate that the message is form the syslog process of the sender, but there have been cases seen where valid syslog messages have come from a sender with a source port other than 514. If the sender uses a source port other than 514 then it is RECOMMENDED and has been considered to be good from that subsequent messages are from a single consistent port.')
swSysLogServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSysLogServerState.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerState.setDescription('enabled or disabled the specific System Log Server during runtime.')
swSysLogServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 12, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSysLogServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: swSysLogServerRowStatus.setDescription('indicates the status of this entry. When creating a syslog server entry, the IP address should be set, too.')
swLogSaveCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 12, 3))
swLogSaveMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("time-interval", 1), ("on-demand", 2), ("log-trigger", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLogSaveMethod.setStatus('current')
if mibBuilder.loadTexts: swLogSaveMethod.setDescription("Used to show and configure the method to save log. when set time-interval(1),Save log to flash every swLogSaveTimeInterval minutes. (if no log happened in this period, don't save) when set on-demand(2), save log to flash whenever user type 'save log' or 'save all'. when set log-trigger(3), save log to flash whenever log arrives.")
swLogSaveTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 12, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLogSaveTimeInterval.setStatus('current')
if mibBuilder.loadTexts: swLogSaveTimeInterval.setDescription('The time(minutes) interval to save log to flash. It can only be set when you have selected the time-interval(1) in swLogSaveMethod.')
swSysLogCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 12, 4))
swSysLogCtrlClearLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysLogCtrlClearLog.setStatus('current')
if mibBuilder.loadTexts: swSysLogCtrlClearLog.setDescription('Clear the switch history log.')
mibBuilder.exportSymbols("SYSLOG-MIB", swSysLogCtrlClearLog=swSysLogCtrlClearLog, swSysLogServerUDPPort=swSysLogServerUDPPort, swSysLogServerIPAddress=swSysLogServerIPAddress, swSysLogServerRowStatus=swSysLogServerRowStatus, swLogSaveCtrl=swLogSaveCtrl, swLogSaveMethod=swLogSaveMethod, swSysLogServerIndex=swSysLogServerIndex, PYSNMP_MODULE_ID=swSysLogMIB, swSysLogServerFacility=swSysLogServerFacility, swSysLogServerEntry=swSysLogServerEntry, swSysLogServerSeverity=swSysLogServerSeverity, swLogSaveTimeInterval=swLogSaveTimeInterval, swSysLogCtrl=swSysLogCtrl, swSysLogServerTable=swSysLogServerTable, swSysLogCtrlState=swSysLogCtrlState, swSysLogMIB=swSysLogMIB, swSysLogServerState=swSysLogServerState)
