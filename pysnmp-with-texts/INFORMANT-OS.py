#
# PySNMP MIB module INFORMANT-OS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-OS
# Produced by pysmi-0.3.4 at Wed May  1 13:53:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, Bits, ModuleIdentity, IpAddress, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, TimeTicks, ObjectIdentity, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "Bits", "ModuleIdentity", "IpAddress", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "iso")
TruthValue, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "DisplayString", "TextualConvention")
informant, WtcsDisplayString = mibBuilder.importSymbols("WTCS", "informant", "WtcsDisplayString")
wmiOperatingSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22))
wmiOperatingSystem.setRevisions(('2007-08-31 21:29', '2007-06-05 22:28', '2006-05-24 22:27', '2005-03-19 18:50', '2004-11-03 21:33',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wmiOperatingSystem.setRevisionsDescriptions(('Modified ospsKernelModeTime, ospsOtherOperationCount, ospsOtherTransferCount, ospsReadOperationCount, ospsReadTransferCount, ospsUserModeTime, ospsWriteOperationCount, ospsWriteTransferCount, ostdElapsedTime, ostdKernelModeTime, ostdUserModeTime to be Counter64 rather than WtcsDisplayString.', 'Added new Win32_ComputerSystem and Win32_WinSAT entries which are new to Windows Vista. Refer to http://www.microsoft.com/technet/scriptcenter/hubs/vista.mspx for more information on the new WMI objects in Vista.', 'Added the wmiEventLog OID branch to status the Windows Event Log.', 'Added the win32Shutdown and win32CreateProcess OIDs. These values can only be written to and cannot be read. Also modified the ossvcState so that the Windows service can be stopped, started, paused, and resumed through SNMP.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: wmiOperatingSystem.setLastUpdated('200801142359Z')
if mibBuilder.loadTexts: wmiOperatingSystem.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: wmiOperatingSystem.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: wmiOperatingSystem.setDescription('The MIB module for informant operating system WMI entities.')
wmiDesktop = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1))
if mibBuilder.loadTexts: wmiDesktop.setStatus('current')
if mibBuilder.loadTexts: wmiDesktop.setDescription('The Desktop subcategory groups classes that represent objects that define a specific desktop configuration.')
win32DesktopTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1), )
if mibBuilder.loadTexts: win32DesktopTable.setStatus('current')
if mibBuilder.loadTexts: win32DesktopTable.setDescription("The Win32_Desktop WMI class represents the common characteristics of a user's desktop. The properties of this class can be modified by the user to customize the desktop.")
win32DesktopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osdtIndex"))
if mibBuilder.loadTexts: win32DesktopEntry.setStatus('current')
if mibBuilder.loadTexts: win32DesktopEntry.setDescription('None')
osdtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtIndex.setStatus('current')
if mibBuilder.loadTexts: osdtIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osdtBorderWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtBorderWidth.setStatus('current')
if mibBuilder.loadTexts: osdtBorderWidth.setDescription('Width of the borders around all windows with adjustable borders. Example: 3')
osdtCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtCaption.setStatus('current')
if mibBuilder.loadTexts: osdtCaption.setDescription('Short description (one-line string) of the CIM_Setting object.')
osdtCoolSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtCoolSwitch.setStatus('current')
if mibBuilder.loadTexts: osdtCoolSwitch.setDescription('Fast task switching is turned on. Fast task switching allows the user to switch between windows using the ALT+TAB keyboard combination.')
osdtCursorBlinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 5), Gauge32()).setUnits('Milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtCursorBlinkRate.setStatus('current')
if mibBuilder.loadTexts: osdtCursorBlinkRate.setDescription('Length of time between successive cursor blinks. Example: 530')
osdtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtDescription.setStatus('current')
if mibBuilder.loadTexts: osdtDescription.setDescription('Description of the CIM_Setting object.')
osdtDragFullWindows = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtDragFullWindows.setStatus('current')
if mibBuilder.loadTexts: osdtDragFullWindows.setDescription('Contents of a window are shown when a user moves the window.')
osdtGridGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 8), Gauge32()).setUnits('8 Pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtGridGranularity.setStatus('current')
if mibBuilder.loadTexts: osdtGridGranularity.setDescription('Spacing of the grid that windows are bound to on the desktop. This makes organizing windows easier. The spacing is usually fine enough that the user does not notice it. Example: 1')
osdtIconSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 9), Gauge32()).setUnits('Pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtIconSpacing.setStatus('current')
if mibBuilder.loadTexts: osdtIconSpacing.setDescription('Spacing between icons. Example: 75')
osdtIconTitleFaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtIconTitleFaceName.setStatus('current')
if mibBuilder.loadTexts: osdtIconTitleFaceName.setDescription("Font used for the names of the icons. Example: 'MS San Serif'")
osdtIconTitleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 11), Gauge32()).setUnits('Point').setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtIconTitleSize.setStatus('current')
if mibBuilder.loadTexts: osdtIconTitleSize.setDescription('Icon font size. Example: 9')
osdtIconTitleWrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtIconTitleWrap.setStatus('current')
if mibBuilder.loadTexts: osdtIconTitleWrap.setDescription("Icon's title text wraps to the next line.")
osdtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtName.setStatus('current')
if mibBuilder.loadTexts: osdtName.setDescription("Name that identifies the current desktop profile. Example: 'MainProf'")
osdtPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtPattern.setStatus('current')
if mibBuilder.loadTexts: osdtPattern.setDescription('Name of the pattern used as the background for the desktop.')
osdtScreenSaverActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtScreenSaverActive.setStatus('current')
if mibBuilder.loadTexts: osdtScreenSaverActive.setDescription('Screen saver is active.')
osdtScreenSaverExecutable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtScreenSaverExecutable.setStatus('current')
if mibBuilder.loadTexts: osdtScreenSaverExecutable.setDescription("Name of the current screen saver executable file. Example: 'LOGON.SCR'")
osdtScreenSaverSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtScreenSaverSecure.setStatus('current')
if mibBuilder.loadTexts: osdtScreenSaverSecure.setDescription('Password is enabled for the screen saver.')
osdtScreenSaverTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 18), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtScreenSaverTimeout.setStatus('current')
if mibBuilder.loadTexts: osdtScreenSaverTimeout.setDescription('Amount of time that passes before the screen saver starts.')
osdtSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtSettingID.setStatus('current')
if mibBuilder.loadTexts: osdtSettingID.setDescription('Identifier by which the CIM_Setting object is known.')
osdtWallpaper = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtWallpaper.setStatus('current')
if mibBuilder.loadTexts: osdtWallpaper.setDescription("File name for the wallpaper design on the background of the desktop. Example: 'WINNT.BMP'")
osdtWallpaperStretched = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtWallpaperStretched.setStatus('current')
if mibBuilder.loadTexts: osdtWallpaperStretched.setDescription('Wallpaper is stretched to fill the entire screen. Microsoft Plus! must be installed before this option is available. If FALSE, the wallpaper retains its original dimensions on the desktop background.')
osdtWallpaperTiled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdtWallpaperTiled.setStatus('current')
if mibBuilder.loadTexts: osdtWallpaperTiled.setDescription('Wallpaper is tiled or centered.')
win32EnvironmentTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2), )
if mibBuilder.loadTexts: win32EnvironmentTable.setStatus('current')
if mibBuilder.loadTexts: win32EnvironmentTable.setDescription('The Win32_Environment WMI class represents an environment or system environment setting on a Windows computer system.')
win32EnvironmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "osevIndex"))
if mibBuilder.loadTexts: win32EnvironmentEntry.setStatus('current')
if mibBuilder.loadTexts: win32EnvironmentEntry.setDescription('None')
osevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevIndex.setStatus('current')
if mibBuilder.loadTexts: osevIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osevCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevCaption.setStatus('current')
if mibBuilder.loadTexts: osevCaption.setDescription('Short description (one-line string) of the object.')
osevDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevDescription.setStatus('current')
if mibBuilder.loadTexts: osevDescription.setDescription('Description of the object.')
osevInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevInstallDate.setStatus('current')
if mibBuilder.loadTexts: osevInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
osevName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevName.setStatus('current')
if mibBuilder.loadTexts: osevName.setDescription("Character string specifying the name of a Windows environment variable. By specifying the name of a variable that does not yet exist, an application creates a new environment variable. Example: 'Path'")
osevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevStatus.setStatus('current')
if mibBuilder.loadTexts: osevStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
osevSystemVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevSystemVariable.setStatus('current')
if mibBuilder.loadTexts: osevSystemVariable.setDescription('Indicating whether the variable is a system variable. A system variable is set by the operating system, and is independent from user environment settings.')
osevUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 8), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 260))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevUserName.setStatus('current')
if mibBuilder.loadTexts: osevUserName.setDescription("Name of the owner of the environment setting. It is set to <SYSTEM> for settings that are specific to the Windows system (as opposed to a specific user) and <DEFAULT> for default user settings. Example: 'Jsmith'")
osevVariableValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 2, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osevVariableValue.setStatus('current')
if mibBuilder.loadTexts: osevVariableValue.setDescription("Placeholder variable of a Windows environment variable. Information like the file system directory can change from computer to computer. The operating system substitutes placeholders for these. Example: '%SystemRoot%'")
win32TimeZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3), )
if mibBuilder.loadTexts: win32TimeZoneTable.setStatus('current')
if mibBuilder.loadTexts: win32TimeZoneTable.setDescription('The Win32_TimeZone WMI class represents the time zone information for a Windows system, which includes changes needed for the daylight saving time transition.')
win32TimeZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1), ).setIndexNames((0, "INFORMANT-OS", "ostzIndex"))
if mibBuilder.loadTexts: win32TimeZoneEntry.setStatus('current')
if mibBuilder.loadTexts: win32TimeZoneEntry.setDescription('None')
ostzIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzIndex.setStatus('current')
if mibBuilder.loadTexts: ostzIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ostzBias = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 2), Integer32()).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzBias.setStatus('current')
if mibBuilder.loadTexts: ostzBias.setDescription('Current bias for local time translation. The bias is the difference between Universal Time Coordinate (UTC) and local time. All translations between UTC and local time are based on the following formula: UTC = local time + bias. This property is required.')
ostzCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzCaption.setStatus('current')
if mibBuilder.loadTexts: ostzCaption.setDescription('Short description of the CIM_Setting object a one-line string.')
ostzDaylightBias = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 4), Integer32()).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightBias.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightBias.setDescription('Bias value to be used during local time translations that occur during daylight time. This property is ignored if a value for the DaylightDay property is not supplied. The value of this property is added to the Bias property to form the bias used during daylight time. In most time zones, the value of this property is -60.')
ostzDaylightDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightDay.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightDay.setDescription("DaylightDayOfWeek of the DaylightMonth when the transition from standard time to daylight saving time occurs on this operating system. Example: If the transition day (DaylightDayOfWeek) occurs on a Sunday then the value '1' indicates the first Sunday of the DaylightMonth, '2' indicates the second Sunday and so on. The value '5' indicates the last DaylightDayOfWeek in the month.")
ostzDaylightDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightDayOfWeek.setDescription('Day of the week when the transition from standard time to daylight saving time occurs on an operating system.')
ostzDaylightHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightHour.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightHour.setDescription('Hour of the day when the transition from standard time to daylight saving time occurs on an operating system. Example: 2')
ostzDaylightMillisecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightMillisecond.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightMillisecond.setDescription('Millisecond of the DaylightSecond when the transition from standard time to daylight saving time occurs on an operating system.')
ostzDaylightMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightMinute.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightMinute.setDescription('Minute of the DaylightHour when the transition from standard time to daylight saving time occurs on an operating system. Example: 59')
ostzDaylightMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightMonth.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightMonth.setDescription('Month when the transition from standard time to daylight saving time occurs on an operating system.')
ostzDaylightName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 11), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightName.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightName.setDescription("Time zone being represented when daylight saving time is in effect. Example: 'EDT' (Eastern Daylight Time)")
ostzDaylightSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightSecond.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightSecond.setDescription('Second of the DaylightMinute when the transition from standard time to daylight saving time occurs on an operating system. Example: 59')
ostzDaylightYear = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDaylightYear.setStatus('current')
if mibBuilder.loadTexts: ostzDaylightYear.setDescription('Year when daylight saving time is in effect. This property is not required. Example: 1997')
ostzDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzDescription.setStatus('current')
if mibBuilder.loadTexts: ostzDescription.setDescription('Description of the CIM_Setting object.')
ostzSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzSettingID.setStatus('current')
if mibBuilder.loadTexts: ostzSettingID.setDescription('Identifier for the CIM_Setting object.')
ostzStandardBias = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 16), Gauge32()).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardBias.setStatus('current')
if mibBuilder.loadTexts: ostzStandardBias.setDescription('Bias value to use when daylight saving time is not in effect. This property is ignored if a value for StandardDay is not supplied. The value of this property is added to the Bias property to form the bias during standard time. Example: 0')
ostzStandardDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardDay.setStatus('current')
if mibBuilder.loadTexts: ostzStandardDay.setDescription("StandardDayOfWeek of the StandardMonth when the transition from daylight saving time to standard time occurs on an operating system. If the transition day (StandardDayOfWeek) occurs on a Sunday then the value '1' indicates the first Sunday of the StandardMonth, '2' indicates the second Sunday and so on. The value '5' indicates the last StandardDayOfWeek in the month.")
ostzStandardDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: ostzStandardDayOfWeek.setDescription('Day of the week when the transition from daylight saving time to standard time occurs on an operating system.')
ostzStandardHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardHour.setStatus('current')
if mibBuilder.loadTexts: ostzStandardHour.setDescription('Hour of the day when the transition from daylight saving time to standard time occurs on an operating system. Example: 11')
ostzStandardMillisecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardMillisecond.setStatus('current')
if mibBuilder.loadTexts: ostzStandardMillisecond.setDescription('Millisecond of the StandardSecond when the transition from daylight saving time to standard time occurs on an operating system.')
ostzStandardMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardMinute.setStatus('current')
if mibBuilder.loadTexts: ostzStandardMinute.setDescription('Minute of the StandardDay when the transition from daylight saving time to standard time occurs on an operating system. Example: 59')
ostzStandardMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardMonth.setStatus('current')
if mibBuilder.loadTexts: ostzStandardMonth.setDescription('Month when the transition from daylight saving time to standard time occurs on an operating system.')
ostzStandardName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 23), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardName.setStatus('current')
if mibBuilder.loadTexts: ostzStandardName.setDescription("Name of the time zone being represented when standard time is in effect. Example: 'EST' (Eastern Standard Time)")
ostzStandardSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardSecond.setStatus('current')
if mibBuilder.loadTexts: ostzStandardSecond.setDescription('Second of the StandardMinute when the transition from daylight saving time to standard time occurs on an operating system. Example: 59')
ostzStandardYear = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 1, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostzStandardYear.setStatus('current')
if mibBuilder.loadTexts: ostzStandardYear.setDescription('Year when standard time is in effect. This property is not required. Example: 1997')
wmiDrivers = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2))
if mibBuilder.loadTexts: wmiDrivers.setStatus('current')
if mibBuilder.loadTexts: wmiDrivers.setDescription('The Drivers subcategory groups classes that represent virtual device drivers and system drivers for base services.')
win32DriverVXDTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1), )
if mibBuilder.loadTexts: win32DriverVXDTable.setStatus('current')
if mibBuilder.loadTexts: win32DriverVXDTable.setDescription('The Win32_DriverVXD WMI class represents a virtual device driver on a Windows computer system. A virtual device is a program that manages a system resource (such as a hardware device or installed software) so that more than one application can use the resource at the same time. Windows uses virtual devices to allow multitasking for Windows-based applications. The virtual devices work in conjunction with Windows to process interrupts, and carry out I/O operations for a given application without disrupting the execution of other applications. Most virtual devices manage a hardware device and many also manage or replace corresponding software such as ROM BIOS routines. A virtual device can contain the device-specific code needed to carry out actions on the device or it can rely on the other software to carry out these operations. In all cases, the virtual device keeps track of the state of the device for each application and ensures that the device is in the correct state whenever an application continues execution. Some virtual devices manage only installed software, such as an MS-DOS device driver or a Terminate and Stay Resident (TSR) program. Such virtual devices often contain code that either emulates the software or ensures that the software uses data that applies only to the currently running application. Virtual devices are sometimes used to improve the performance of installed software; the Intel-compatible microprocessors can execute the 32-bit code of a virtual device more efficiently than the 16-bit code of an MS-DOS device driver or TSR.')
win32DriverVXDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osvxdIndex"))
if mibBuilder.loadTexts: win32DriverVXDEntry.setStatus('current')
if mibBuilder.loadTexts: win32DriverVXDEntry.setDescription('None')
osvxdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdIndex.setStatus('current')
if mibBuilder.loadTexts: osvxdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osvxdBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdBuildNumber.setStatus('current')
if mibBuilder.loadTexts: osvxdBuildNumber.setDescription('Internal identifier for this compilation of this software element.')
osvxdCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdCaption.setStatus('current')
if mibBuilder.loadTexts: osvxdCaption.setDescription('Short description (one-line string) of the object.')
osvxdCodeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdCodeSet.setStatus('current')
if mibBuilder.loadTexts: osvxdCodeSet.setDescription('Code set used by this software element.')
osvxdControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdControl.setStatus('current')
if mibBuilder.loadTexts: osvxdControl.setDescription("Offset address to the driver's control procedures. The virtual machine manager calls this procedure to send control messages to the virtual device system. The system control messages direct the virtual device to carry out actions. An example of an action is initializing itself; another is notifying the virtual device of changes to virtual machines (such as a virtual machine is being created).")
osvxdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdDescription.setStatus('current')
if mibBuilder.loadTexts: osvxdDescription.setDescription('Description of the object.')
osvxdDeviceDescriptorBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdDeviceDescriptorBlock.setStatus('current')
if mibBuilder.loadTexts: osvxdDeviceDescriptorBlock.setDescription('Offset address to the device descriptor block (DDB) structure. The DDB contains information that the operating system uses to execute the procedures of the driver, including its location in the interrupt list, and other data to run and communicate with this VXD.')
osvxdIdentificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdIdentificationCode.setStatus('current')
if mibBuilder.loadTexts: osvxdIdentificationCode.setDescription("Manufacturer's identifier for this software element. Often this will be a stock-keeping unit (SKU) or a part number.")
osvxdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdInstallDate.setStatus('current')
if mibBuilder.loadTexts: osvxdInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
osvxdLanguageEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdLanguageEdition.setStatus('current')
if mibBuilder.loadTexts: osvxdLanguageEdition.setDescription("Language edition of this software element. The language codes defined in ISO 639 should be used. Where the software element represents multi-lingual or international version of a product, the string 'multilingual' should be used.")
osvxdManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdManufacturer.setStatus('current')
if mibBuilder.loadTexts: osvxdManufacturer.setDescription('Manufacturer of this software element.')
osvxdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdName.setStatus('current')
if mibBuilder.loadTexts: osvxdName.setDescription('Name used to identify this software element.')
osvxdOtherTargetOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdOtherTargetOS.setStatus('current')
if mibBuilder.loadTexts: osvxdOtherTargetOS.setDescription('Manufacturer and operating system type for a software element when the TargetOperatingSystem property has a value of 1 (Other). Therefore, when the TargetOperatingSystem property has a value of Other, the OtherTargetOS property must have a non-null value. For all other values of TargetOperatingSystem, the OtherTargetOS property is to be NULL.')
osvxdPMAPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdPMAPI.setStatus('current')
if mibBuilder.loadTexts: osvxdPMAPI.setDescription('Offset address to the protected mode application programming interface for this VXD. These functions can give applications direct access to the features of the VXD.')
osvxdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdSerialNumber.setStatus('current')
if mibBuilder.loadTexts: osvxdSerialNumber.setDescription('Assigned serial number of this software element.')
osvxdServiceTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdServiceTableSize.setStatus('current')
if mibBuilder.loadTexts: osvxdServiceTableSize.setDescription('Number of installed services and device driver services provided by the operating system. Example: 1024')
osvxdSoftwareElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 17), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdSoftwareElementID.setStatus('current')
if mibBuilder.loadTexts: osvxdSoftwareElementID.setDescription('Identifier for this software element, designed to be used in conjunction with other keys to create a unique representation of this CIM_SoftwareElement instance.')
osvxdSoftwareElementState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deployable", 1), ("installable", 2), ("executable", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdSoftwareElementState.setStatus('current')
if mibBuilder.loadTexts: osvxdSoftwareElementState.setDescription('State of a software element.')
osvxdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdStatus.setStatus('current')
if mibBuilder.loadTexts: osvxdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
osvxdTargetOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("macos", 2), ("attunix", 3), ("dgux", 4), ("decnt", 5), ("digitalUnix", 6), ("openVMS", 7), ("hpux", 8), ("aix", 9), ("mvs", 10), ("os400", 11), ("os2", 12), ("javaVM", 13), ("msdos", 14), ("win3x", 15), ("win95", 16), ("win98", 17), ("winnt", 18), ("wince", 19), ("ncr3000", 20), ("netWare", 21), ("osf", 22), ("dcOS", 23), ("reliantUNIX", 24), ("scoUnixWare", 25), ("scoOpenServer", 26), ("sequent", 27), ("irix", 28), ("solaris", 29), ("sunOS", 30), ("u6000", 31), ("aseries", 32), ("tandemNSK", 33), ("tandemNT", 34), ("bs2000", 35), ("linux", 36), ("lynx", 37), ("xenix", 38), ("vmESA", 39), ("interactiveUNIX", 40), ("bsdunix", 41), ("freeBSD", 42), ("netBSD", 43), ("gnuHurd", 44), ("os9", 45), ("machKernel", 46), ("inferno", 47), ("qnx", 48), ("epoc", 49), ("ixWorks", 50), ("vxWorks", 51), ("miNT", 52), ("beOS", 53), ("hpMPE", 54), ("nextStep", 55), ("palmPilot", 56), ("rhapsody", 57), ("windows2000", 58), ("dedicated", 59), ("vse", 60), ("tpf", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdTargetOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: osvxdTargetOperatingSystem.setDescription('Target operating system of the owning software element. The possible values for this property are as follows.')
osvxdV86API = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdV86API.setStatus('current')
if mibBuilder.loadTexts: osvxdV86API.setDescription('Offset to the application programming interface for use under virtual 8086 mode. These functions can give applications direct access to the features of the VXD.')
osvxdVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 1, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvxdVersion.setStatus('current')
if mibBuilder.loadTexts: osvxdVersion.setDescription("Version of the VXD driver. Example: '3.51'")
win32SystemDriverTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2), )
if mibBuilder.loadTexts: win32SystemDriverTable.setStatus('current')
if mibBuilder.loadTexts: win32SystemDriverTable.setDescription('The Win32_SystemDriver WMI class represents the system driver for a base service.')
win32SystemDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "ossdIndex"))
if mibBuilder.loadTexts: win32SystemDriverEntry.setStatus('current')
if mibBuilder.loadTexts: win32SystemDriverEntry.setDescription('None')
ossdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdIndex.setStatus('current')
if mibBuilder.loadTexts: ossdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ossdAcceptPause = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdAcceptPause.setStatus('current')
if mibBuilder.loadTexts: ossdAcceptPause.setDescription('Service can be paused.')
ossdAcceptStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdAcceptStop.setStatus('current')
if mibBuilder.loadTexts: ossdAcceptStop.setDescription('Service can be stopped.')
ossdCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdCaption.setStatus('current')
if mibBuilder.loadTexts: ossdCaption.setDescription('Short description (one-line string) of the object.')
ossdCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ossdCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified.')
ossdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdDescription.setStatus('current')
if mibBuilder.loadTexts: ossdDescription.setDescription('Description of the object.')
ossdDesktopInteract = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdDesktopInteract.setStatus('current')
if mibBuilder.loadTexts: ossdDesktopInteract.setDescription('Service can create or communicate with windows on the desktop.')
ossdDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdDisplayName.setStatus('current')
if mibBuilder.loadTexts: ossdDisplayName.setDescription("Display name of the service. This string has a maximum length of 256 characters. The name is case-preserved in the Service Control Manager. DisplayName comparisons are always case-insensitive. Constraints: Accepts the same value as the Name property. Example: 'Atdisk'")
ossdErrorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdErrorControl.setStatus('current')
if mibBuilder.loadTexts: ossdErrorControl.setDescription("Severity of the error if this service fails to start during startup. The value indicates the action taken by the startup program if failure occurs. All errors are logged by the computer system. Value Meaning 'Ignore' User is not notified. 'Normal' User is notified. 'Severe' System is restarted wth the last-known-good configuration. 'Critical' System attempts to restart with a good configuration. 'Unknown' Cause of the failure is unknown. ")
ossdExitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdExitCode.setStatus('current')
if mibBuilder.loadTexts: ossdExitCode.setDescription('Windows error code defining any problems encountered in starting or stopping the service. This property is set to ERROR_SERVICE_SPECIFIC_ERROR (1066) when the error is unique to the service represented by this class, and information about the error is available in the ServiceSpecificExitCode property. The service sets this value to NO_ERROR when running, and again upon normal termination.')
ossdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdInstallDate.setStatus('current')
if mibBuilder.loadTexts: ossdInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
ossdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdName.setStatus('current')
if mibBuilder.loadTexts: ossdName.setDescription("Unique identifier for the service which provides an indication of the functionality that is managed. This functionality is described in more detail in the object's Description property.")
ossdPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdPathName.setStatus('current')
if mibBuilder.loadTexts: ossdPathName.setDescription("Fully-qualified path to the service binary file that implements the service. Example: '\\SystemRoot\\System32\\drivers\\afd.sys'")
ossdServiceSpecificExitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdServiceSpecificExitCode.setStatus('current')
if mibBuilder.loadTexts: ossdServiceSpecificExitCode.setDescription('Service-specific error code for errors that occur while the service is either starting or stopping. The exit codes are defined by the service represented by this class. This value is only set when the ExitCode property value is ERROR_SERVICE_SPECIFIC_ERROR (1066).')
ossdServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("kernalDriver", 1), ("fileSystemDriver", 2), ("adapter", 3), ("recognizerDriver", 4), ("ownProcess", 5), ("shareProcess", 6), ("interactiveProcess", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdServiceType.setStatus('current')
if mibBuilder.loadTexts: ossdServiceType.setDescription('Type of service provided to calling processes.')
ossdStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdStarted.setStatus('current')
if mibBuilder.loadTexts: ossdStarted.setDescription('Service has been started.')
ossdStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdStartMode.setStatus('current')
if mibBuilder.loadTexts: ossdStartMode.setDescription("Severity of the error if this service fails to start during startup. The value indicates the action taken by the startup program if failure occurs. All errors are logged by the computer system. Value Meaning 'Ignore' User is not notified. 'Normal' User is notified. 'Severe' System is restarted with the last-known-good configuration. 'Critical' System attempts to restart with a good configuration. 'Unknown' Cause of the failure is unknown. ")
ossdStartName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdStartName.setStatus('current')
if mibBuilder.loadTexts: ossdStartName.setDescription("Account name under which the service runs. Depending on the service type, the account name may be in the form of DomainName\\Username. The service process will be logged using one of these two forms when it runs. If the account belongs to the built-in domain, .\\Username can be specified. If NULL is specified, the service will be logged on as the LocalSystem account. For kernel or system level drivers, StartName contains the driver object name (that is, \\FileSystem\\Rdr or \\Driver\\Xns) which the input and output (I/O) system uses to load the device driver. Additionally, if NULL is specified, the driver runs with a default object name created by the I/O system based on the service name. Example: 'DWDOM\\Admin' Windows XP: You can use UPN format (Username@DomainName) to specify the StartName.")
ossdState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stopped", 1), ("startPending", 2), ("stopPending", 3), ("running", 4), ("continuePending", 5), ("pausePending", 6), ("paused", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdState.setStatus('current')
if mibBuilder.loadTexts: ossdState.setDescription('Current state of the base service.')
ossdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdStatus.setStatus('current')
if mibBuilder.loadTexts: ossdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
ossdSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ossdSystemCreationClassName.setDescription('Type name of the system that hosts this service.')
ossdSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdSystemName.setStatus('current')
if mibBuilder.loadTexts: ossdSystemName.setDescription('Name of the system that hosts this service.')
ossdTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 2, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossdTagId.setStatus('current')
if mibBuilder.loadTexts: ossdTagId.setDescription('Unique tag value for this service in the group. A value of 0 indicates that the service has not been assigned a tag. A tag can be used for ordering service startup within a load order group by specifying a tag order vector in the registry located at: HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control \\GroupOrderList. Tags are only evaluated for Kernel Driver and File System Driver start type services that have Boot or System start modes.')
wmiFileSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3))
if mibBuilder.loadTexts: wmiFileSystem.setStatus('current')
if mibBuilder.loadTexts: wmiFileSystem.setDescription('The File System subcategory groups classes that represent the way a hard disk is logically arranged. This includes the type of file system used, the directory structure, and way the disk is partitioned.')
win32DiskPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1), )
if mibBuilder.loadTexts: win32DiskPartitionTable.setStatus('current')
if mibBuilder.loadTexts: win32DiskPartitionTable.setDescription('The Win32_DiskPartition WMI class represents the capabilities and management capacity of a partitioned area of a physical disk on a Windows system. Example: Disk #0, Partition #1.')
win32DiskPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osdpIndex"))
if mibBuilder.loadTexts: win32DiskPartitionEntry.setStatus('current')
if mibBuilder.loadTexts: win32DiskPartitionEntry.setDescription('None')
osdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpIndex.setStatus('current')
if mibBuilder.loadTexts: osdpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osdpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("readable", 1), ("writable", 2), ("readwriteSupported", 3), ("writeOnce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpAccess.setStatus('current')
if mibBuilder.loadTexts: osdpAccess.setDescription('Media access available.')
osdpAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpAvailability.setStatus('current')
if mibBuilder.loadTexts: osdpAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode.')
osdpBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpBlockSize.setStatus('current')
if mibBuilder.loadTexts: osdpBlockSize.setDescription('Size in bytes of the blocks which form this storage extent. If unknown or if a block concept is not valid (for example, for aggregate extents, memory or logical disks), enter a 1.')
osdpBootable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpBootable.setStatus('current')
if mibBuilder.loadTexts: osdpBootable.setDescription('Computer may be booted from this partition.')
osdpBootPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpBootPartition.setStatus('current')
if mibBuilder.loadTexts: osdpBootPartition.setDescription('Partition is the active partition. The operating system uses the active partition when booting from a hard disk.')
osdpCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpCaption.setStatus('current')
if mibBuilder.loadTexts: osdpCaption.setDescription('Short description (one-line string) of the object.')
osdpConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: osdpConfigManagerErrorCode.setDescription('Windows Configuration Manager error code.')
osdpConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: osdpConfigManagerUserConfig.setDescription('Device is using a user-defined configuration.')
osdpCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpCreationClassName.setStatus('current')
if mibBuilder.loadTexts: osdpCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified.')
osdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpDescription.setStatus('current')
if mibBuilder.loadTexts: osdpDescription.setDescription('Description of the object.')
osdpDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpDeviceID.setStatus('current')
if mibBuilder.loadTexts: osdpDeviceID.setDescription('Unique identifier of the disk drive and partition, from the rest of the system.')
osdpDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpDiskIndex.setStatus('current')
if mibBuilder.loadTexts: osdpDiskIndex.setDescription('Index number of the disk containing this partition. Example: 0')
osdpErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpErrorCleared.setStatus('current')
if mibBuilder.loadTexts: osdpErrorCleared.setDescription('Error reported in LastErrorCode is now cleared.')
osdpErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpErrorDescription.setStatus('current')
if mibBuilder.loadTexts: osdpErrorDescription.setDescription('Information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken.')
osdpErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: osdpErrorMethodology.setDescription('Type of error detection and correction supported by this storage extent.')
osdpHiddenSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpHiddenSectors.setStatus('current')
if mibBuilder.loadTexts: osdpHiddenSectors.setDescription('Number of hidden sectors in the partition. Example: 63')
osdpPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpPartitionIndex.setStatus('current')
if mibBuilder.loadTexts: osdpPartitionIndex.setDescription('Index number of the partition. Example: 1')
osdpInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpInstallDate.setStatus('current')
if mibBuilder.loadTexts: osdpInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
osdpLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: osdpLastErrorCode.setDescription('Last error code reported by the logical device.')
osdpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpName.setStatus('current')
if mibBuilder.loadTexts: osdpName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property.')
osdpNumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpNumberOfBlocks.setStatus('current')
if mibBuilder.loadTexts: osdpNumberOfBlocks.setDescription('Total number of consecutive blocks, each block the size of the value contained in the BlockSize property, which form this storage extent. Total size of the storage extent can be calculated by multiplying the value of the BlockSize property by the value of this property. If the value of BlockSize is 1, this property is the total size of the storage extent.')
osdpPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: osdpPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. Example: '*PNP030b'")
osdpPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: osdpPowerManagementCapabilities.setDescription('Specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
osdpPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: osdpPowerManagementSupported.setDescription('Device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management.')
osdpPrimaryPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpPrimaryPartition.setStatus('current')
if mibBuilder.loadTexts: osdpPrimaryPartition.setDescription('Primary partition.')
osdpPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpPurpose.setStatus('current')
if mibBuilder.loadTexts: osdpPurpose.setDescription('Description of the media and/or its use.')
osdpRewritePartition = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpRewritePartition.setStatus('current')
if mibBuilder.loadTexts: osdpRewritePartition.setDescription('Partition information has changed. When you change a partition (with IOCTL_DISK_SET_DRIVE_LAYOUT), the system uses this property to determine which partitions have changed and need their information rewritten. If TRUE, the partition needs to be rewritten.')
osdpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 29), WtcsDisplayString()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpSize.setStatus('current')
if mibBuilder.loadTexts: osdpSize.setDescription('Total size of the partition. Example: 1059045376')
osdpStartingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 30), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpStartingOffset.setStatus('current')
if mibBuilder.loadTexts: osdpStartingOffset.setDescription('Starting offset (in bytes) of the partition. Example: 32256')
osdpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpStatus.setStatus('current')
if mibBuilder.loadTexts: osdpStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
osdpStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpStatusInfo.setStatus('current')
if mibBuilder.loadTexts: osdpStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used.')
osdpSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: osdpSystemCreationClassName.setDescription('Creation class name of the scoping system.')
osdpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpSystemName.setStatus('current')
if mibBuilder.loadTexts: osdpSystemName.setDescription('Name of the scoping system.')
osdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 1, 1, 35), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdpType.setStatus('current')
if mibBuilder.loadTexts: osdpType.setDescription("Type of the partition. Values are: 'Unused' '12-bit FAT' 'Xenix Type 1' 'Xenix Type 2' '16-bit FAT' 'Extended Partition' 'MS-DOS V4 Huge' 'Installable File System' 'PowerPC Reference Platform' 'UNIX' 'NTFS' 'Win95 w/Extended Int 13' 'Extended w/Extended Int 13' 'Logical Disk Manager' 'Unknown'")
win32LogicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2), )
if mibBuilder.loadTexts: win32LogicalDiskTable.setStatus('current')
if mibBuilder.loadTexts: win32LogicalDiskTable.setDescription('The Win32_LogicalDisk WMI class represents a data source that resolves to an actual local storage device on a Windows system.')
win32LogicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "osldIndex"))
if mibBuilder.loadTexts: win32LogicalDiskEntry.setStatus('current')
if mibBuilder.loadTexts: win32LogicalDiskEntry.setDescription('None')
osldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldIndex.setStatus('current')
if mibBuilder.loadTexts: osldIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osldAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("readable", 1), ("writable", 2), ("readWriteSupported", 3), ("writeOnce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldAccess.setStatus('current')
if mibBuilder.loadTexts: osldAccess.setDescription('Type of media access available. This property is inherited from CIM_StorageExtent.')
osldAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldAvailability.setStatus('current')
if mibBuilder.loadTexts: osldAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
osldBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldBlockSize.setStatus('current')
if mibBuilder.loadTexts: osldBlockSize.setDescription('Size in bytes of the blocks that form this storage extent. If unknown or if a block concept is not valid (for example, for aggregate extents, memory or logical disks), enter a 1. This property is inherited from CIM_StorageExtent.')
osldCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldCaption.setStatus('current')
if mibBuilder.loadTexts: osldCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
osldCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldCompressed.setStatus('current')
if mibBuilder.loadTexts: osldCompressed.setDescription('If TRUE, the logical volume exists as a single compressed entity, such as a DoubleSpace volume. If file based compression is supported (such as on NTFS), this property will be FALSE.')
osldConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: osldConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
osldConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: osldConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
osldCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldCreationClassName.setStatus('current')
if mibBuilder.loadTexts: osldCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
osldDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldDescription.setStatus('current')
if mibBuilder.loadTexts: osldDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
osldDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldDeviceID.setStatus('current')
if mibBuilder.loadTexts: osldDeviceID.setDescription('Unique identifier of the logical disk from other devices on the system. This property is inherited from CIM_LogicalDevice.')
osldDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("noRootDirectory", 1), ("removableDisk", 2), ("localDisk", 3), ("networkDrive", 4), ("compactDisc", 5), ("ramDisk", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldDriveType.setStatus('current')
if mibBuilder.loadTexts: osldDriveType.setDescription('Numeric value corresponding to the type of disk drive this logical disk represents.')
osldErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldErrorCleared.setStatus('current')
if mibBuilder.loadTexts: osldErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
osldErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldErrorDescription.setStatus('current')
if mibBuilder.loadTexts: osldErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
osldErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: osldErrorMethodology.setDescription('Type of error detection and correction supported by this storage extent. This property is inherited from CIM_StorageExtent.')
osldFileSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldFileSystem.setStatus('current')
if mibBuilder.loadTexts: osldFileSystem.setDescription("File system on the logical disk. Example: 'NTFS'")
osldFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldFreeSpace.setStatus('current')
if mibBuilder.loadTexts: osldFreeSpace.setDescription('Space available on the logical disk. This property is inherited from CIM_LogicalDisk.')
osldInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldInstallDate.setStatus('current')
if mibBuilder.loadTexts: osldInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
osldLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: osldLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
osldMaximumComponentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldMaximumComponentLength.setStatus('current')
if mibBuilder.loadTexts: osldMaximumComponentLength.setDescription('Maximum length of a filename component supported by the Windows drive. A filename component is that portion of a filename between backslashes. The value can be used to indicate that long names are supported by the specified file system. For example, for a FAT file system supporting long names, the function stores the value 255, rather than the previous 8.3 indicator. Long names can also be supported on systems that use the NTFS file system. Example: 255')
osldMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 21), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldMediaType.setStatus('current')
if mibBuilder.loadTexts: osldMediaType.setDescription('Type of media currently present in the logical drive. This value will be one of the values of the MEDIA_TYPE enumeration defined in Winioctl.h. The value may not be exact for removable drives if currently there is no media in the drive. Value Meaning 0 Unknown Format is unknown 1 F5_1Pt2_512 51/4-Inch Floppy Disk - 1.2Mb - 512 bytes/sector 2 F3_1Pt44_512 31/2-Inch Floppy Disk - 1.44Mb -512 bytes/sector 3 F3_2Pt88_512 31/2-Inch Floppy Disk - 2.88Mb - 512 bytes/sector 4 F3_20Pt8_512 31/2-Inch Floppy Disk - 20.8Mb - 512 bytes/sector 5 F3_720_512 31/2-Inch Floppy Disk - 720Kb - 512 bytes/sector 6 F5_360_512 51/4-Inch Floppy Disk - 360Kb - 512 bytes/sector 7 F5_320_512 51/4-Inch Floppy Disk - 320Kb - 512 bytes/sector 8 F5_320_1024 51/4-Inch Floppy Disk - 320Kb - 1024 bytes/sector 9 F5_180_512 51/4-Inch Floppy Disk - 180Kb - 512 bytes/sector 10 F5_160_512 51/4-Inch Floppy Disk - 160Kb - 512 bytes/sector 11 Removable media other than floppy 12 Fixed hard disk media 13 F3_120M_512 31/2-Inch Floppy Disk - 120Mb - 512 bytes/sector 14 F3_640_512 31/2-Inch Floppy Disk - 640Kb - 512 bytes/sector 15 F5_640_512 51/4-Inch Floppy Disk - 640Kb - 512 bytes/sector 16 F5_720_512 51/4-Inch Floppy Disk - 720Kb - 512 bytes/sector 17 F3_1Pt2_512 31/2-Inch Floppy Disk - 1.2Mb - 512 bytes/sector 18 F3_1Pt23_1024 31/2-Inch Floppy Disk - 1.23Mb - 1024 bytes/sector 19 F5_1Pt23_1024 51/4-Inch Floppy Disk - 1.23Mb - 1024 bytes/sector 20 F3_128Mb_512 31/2-Inch Floppy Disk - 128Mb - 512 bytes/sector 21 F3_230Mb_512 31/2-Inch Floppy Disk - 230Mb - 512 bytes/sector 22 F8_256_128 8-Inch Floppy Disk - 256Kb - 128 bytes/sector')
osldName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldName.setStatus('current')
if mibBuilder.loadTexts: osldName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
osldNumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldNumberOfBlocks.setStatus('current')
if mibBuilder.loadTexts: osldNumberOfBlocks.setDescription('Total number of consecutive blocks, each block the size of the value contained in the BlockSize property, which form this storage extent. Total size of the storage extent can be calculated by multiplying the value of the BlockSize property by the value of this property. If the value of BlockSize is 1, this property is the total size of the storage extent. This property is inherited from CIM_StorageExtent.')
osldPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: osldPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
osldPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: osldPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
osldPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: osldPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
osldProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldProviderName.setStatus('current')
if mibBuilder.loadTexts: osldProviderName.setDescription('Network path to the logical device.')
osldPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldPurpose.setStatus('current')
if mibBuilder.loadTexts: osldPurpose.setDescription('Free-form string describing the media and/or its use. This property is inherited from CIM_StorageExtent.')
osldQuotasDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldQuotasDisabled.setStatus('current')
if mibBuilder.loadTexts: osldQuotasDisabled.setDescription('Indicates that quota management is not enabled (TRUE) on this system. This property is new for Windows XP.')
osldQuotasIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldQuotasIncomplete.setStatus('current')
if mibBuilder.loadTexts: osldQuotasIncomplete.setDescription('Indicates that the quota management was used but has been disabled (TRUE). Incomplete refers to the information left in the file system after quota management was disabled. This property is new for Windows XP.')
osldQuotasRebuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldQuotasRebuilding.setStatus('current')
if mibBuilder.loadTexts: osldQuotasRebuilding.setDescription('Indicates that the file system is in the active process of compiling information and setting the disk up for quota management. This property is new for Windows XP.')
osldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldSize.setStatus('current')
if mibBuilder.loadTexts: osldSize.setDescription('Size of the disk drive. This property is inherited from CIM_LogicalDisk.')
osldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldStatus.setStatus('current')
if mibBuilder.loadTexts: osldStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
osldStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldStatusInfo.setStatus('current')
if mibBuilder.loadTexts: osldStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
osldSupportsDiskQuotas = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldSupportsDiskQuotas.setStatus('current')
if mibBuilder.loadTexts: osldSupportsDiskQuotas.setDescription('If TRUE, this volume supports disk quotas. This property is new for Windows XP.')
osldSupportsFileBasedCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldSupportsFileBasedCompression.setStatus('current')
if mibBuilder.loadTexts: osldSupportsFileBasedCompression.setDescription('If TRUE, the logical disk partition supports file based compression, such as is the case with NTFS file system. This property is FALSE, when the Compressed property is TRUE.')
osldSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 37), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: osldSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
osldSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 38), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldSystemName.setStatus('current')
if mibBuilder.loadTexts: osldSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
osldVolumeDirty = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldVolumeDirty.setStatus('current')
if mibBuilder.loadTexts: osldVolumeDirty.setDescription('If TRUE, the disk requires ChkDsk to be run at next boot up. This property is only applicable to those instances of logical disk that represent a physical disk in the machine. It is not applicable to mapped logical drives. This property is new for Windows XP.')
osldVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldVolumeName.setStatus('current')
if mibBuilder.loadTexts: osldVolumeName.setDescription('Volume name of the logical disk. Constraints: maximum 32 characters.')
osldVolumeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 2, 1, 41), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osldVolumeSerialNumber.setStatus('current')
if mibBuilder.loadTexts: osldVolumeSerialNumber.setDescription("Volume serial number of the logical disk. Constraints: maximum 11 characters. Example: 'A8C3-D032'")
win32MappedLogicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3), )
if mibBuilder.loadTexts: win32MappedLogicalDiskTable.setStatus('current')
if mibBuilder.loadTexts: win32MappedLogicalDiskTable.setDescription('The Win32_MappedLogicalDisk WMI class represents network storage devices that are mapped as logical disks on the computer system.')
win32MappedLogicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1), ).setIndexNames((0, "INFORMANT-OS", "osmldIndex"))
if mibBuilder.loadTexts: win32MappedLogicalDiskEntry.setStatus('current')
if mibBuilder.loadTexts: win32MappedLogicalDiskEntry.setDescription('None')
osmldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldIndex.setStatus('current')
if mibBuilder.loadTexts: osmldIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osmldAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("readable", 1), ("writeable", 2), ("readWriteSupported", 3), ("writeOnce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldAccess.setStatus('current')
if mibBuilder.loadTexts: osmldAccess.setDescription('Device access state. This property is inherited from CIM_StorageExtent.')
osmldAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldAvailability.setStatus('current')
if mibBuilder.loadTexts: osmldAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
osmldBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 4), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldBlockSize.setStatus('current')
if mibBuilder.loadTexts: osmldBlockSize.setDescription('Size, in bytes, of the blocks which form this storage extent. If this concept is not valid for the device type, the value is 1. This property is inherited from CIM_StorageExtent.')
osmldCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldCaption.setStatus('current')
if mibBuilder.loadTexts: osmldCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
osmldCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldCompressed.setStatus('current')
if mibBuilder.loadTexts: osmldCompressed.setDescription('If TRUE, the file is compressed. This property is inherited from CIM_ManagedSystemElement.')
osmldConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: osmldConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
osmldConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: osmldConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
osmldCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 9), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldCreationClassName.setStatus('current')
if mibBuilder.loadTexts: osmldCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
osmldDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldDescription.setStatus('current')
if mibBuilder.loadTexts: osmldDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
osmldDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldDeviceID.setStatus('current')
if mibBuilder.loadTexts: osmldDeviceID.setDescription("Unique identifier of the memory array. This property is inherited from CIM_LogicalDevice. Example: 'Memory Array 1'")
osmldErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldErrorCleared.setStatus('current')
if mibBuilder.loadTexts: osmldErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
osmldErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldErrorDescription.setStatus('current')
if mibBuilder.loadTexts: osmldErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
osmldErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: osmldErrorMethodology.setDescription('Types of error checking used by the hardware. This property is inherited from CIM_StorageExtent.')
osmldFileSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldFileSystem.setStatus('current')
if mibBuilder.loadTexts: osmldFileSystem.setDescription("File system on the logical disk. Example: 'NTFS'")
osmldFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 16), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldFreeSpace.setStatus('current')
if mibBuilder.loadTexts: osmldFreeSpace.setDescription('Space available on the logical disk. This property is inherited from CIM_LogicalDisk.')
osmldInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldInstallDate.setStatus('current')
if mibBuilder.loadTexts: osmldInstallDate.setDescription('Date and time when the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
osmldLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: osmldLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
osmldMaximumComponentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldMaximumComponentLength.setStatus('current')
if mibBuilder.loadTexts: osmldMaximumComponentLength.setDescription('Contains the maximum length of a filename component supported by the Windows drive. Example: 255')
osmldName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldName.setStatus('current')
if mibBuilder.loadTexts: osmldName.setDescription('Object label. This property is inherited from CIM_ManagedSystemElement.')
osmldNumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldNumberOfBlocks.setStatus('current')
if mibBuilder.loadTexts: osmldNumberOfBlocks.setDescription('Total number of consecutive blocks, each block the size of the value contained in the BlockSize property, which form this storage extent. Total size of the storage extent can be calculated by multiplying the value of the BlockSize property by the value of this property. If the value of BlockSize is 1, this property is the total size of the storage extent. This property is inherited from CIM_StorageExtent.')
osmldPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: osmldPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
osmldPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("notSupported", 1), ("disabled", 2), ("enabled", 3), ("powerSavingModesEnterAutomatic", 4), ("powerStateSettable", 5), ("powerCyclingSupported", 6), ("timedPowerOnSupported", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: osmldPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice.')
osmldPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: osmldPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
osmldProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldProviderName.setStatus('current')
if mibBuilder.loadTexts: osmldProviderName.setDescription('Network path name to the logical device.')
osmldPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldPurpose.setStatus('current')
if mibBuilder.loadTexts: osmldPurpose.setDescription('Free-form string describing the media and/or its use. This property is inherited from CIM_StorageExtent.')
osmldQuotasDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldQuotasDisabled.setStatus('current')
if mibBuilder.loadTexts: osmldQuotasDisabled.setDescription('If TRUE, quota management is not enabled for this volume.')
osmldQuotasIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldQuotasIncomplete.setStatus('current')
if mibBuilder.loadTexts: osmldQuotasIncomplete.setDescription('If TRUE, quota management was used but has been disabled. Incomplete refers to the information left in the file system after quota management has been disabled.')
osmldQuotasRebuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldQuotasRebuilding.setStatus('current')
if mibBuilder.loadTexts: osmldQuotasRebuilding.setDescription('If TRUE, the file system is setting up for quota management.')
osmldSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldSessionID.setStatus('current')
if mibBuilder.loadTexts: osmldSessionID.setDescription("ID of the user's session. The user may be connected using a local login or a terminal session.")
osmldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 31), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldSize.setStatus('current')
if mibBuilder.loadTexts: osmldSize.setDescription('Size of the logical disk.')
osmldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldStatus.setStatus('current')
if mibBuilder.loadTexts: osmldStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
osmldStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldStatusInfo.setStatus('current')
if mibBuilder.loadTexts: osmldStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
osmldSupportsDiskQuotas = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldSupportsDiskQuotas.setStatus('current')
if mibBuilder.loadTexts: osmldSupportsDiskQuotas.setDescription('If TRUE, this volume supports disk quotas.')
osmldSupportFileBasedCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldSupportFileBasedCompression.setStatus('current')
if mibBuilder.loadTexts: osmldSupportFileBasedCompression.setDescription('If TRUE, the logical disk partition supports file based compression, such as is the case with NTFS. This property is FALSE, when the Compressed property is TRUE.')
osmldSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 36), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: osmldSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
osmldSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 37), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldSystemName.setStatus('current')
if mibBuilder.loadTexts: osmldSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
osmldVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 38), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldVolumeName.setStatus('current')
if mibBuilder.loadTexts: osmldVolumeName.setDescription('Volume name of the logical disk. This property value may have a maximum of 32 characters.')
osmldVolumeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 3, 1, 39), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osmldVolumeSerialNumber.setStatus('current')
if mibBuilder.loadTexts: osmldVolumeSerialNumber.setDescription("Volume serial number of the logical disk. This property value may have a maximum of 11 characters. This property is inherited from CIM_LogicalDevice. Example: 'A8C3-D032'")
win32QuotaSettingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4), )
if mibBuilder.loadTexts: win32QuotaSettingTable.setStatus('current')
if mibBuilder.loadTexts: win32QuotaSettingTable.setDescription('The Win32_QuotaSetting WMI class contains setting information for disk quotas on a volume. This class is new for Windows XP.')
win32QuotaSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1), ).setIndexNames((0, "INFORMANT-OS", "osqsIndex"))
if mibBuilder.loadTexts: win32QuotaSettingEntry.setStatus('current')
if mibBuilder.loadTexts: win32QuotaSettingEntry.setDescription('None')
osqsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsIndex.setStatus('current')
if mibBuilder.loadTexts: osqsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osqsCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsCaption.setStatus('current')
if mibBuilder.loadTexts: osqsCaption.setDescription('Short description of the object a one line string. This property is inherited from CIM_Setting.')
osqsDefaultLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 3), WtcsDisplayString()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsDefaultLimit.setStatus('current')
if mibBuilder.loadTexts: osqsDefaultLimit.setDescription('Default limit set for quotas on this specific volume.')
osqsDefaultWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 4), WtcsDisplayString()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsDefaultWarningLimit.setStatus('current')
if mibBuilder.loadTexts: osqsDefaultWarningLimit.setDescription('Default warning limit set for quotas on this specific volume.')
osqsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsDescription.setStatus('current')
if mibBuilder.loadTexts: osqsDescription.setDescription('Comment that describes the link. This property is inherited from CIM_Setting.')
osqsExceededNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsExceededNotification.setStatus('current')
if mibBuilder.loadTexts: osqsExceededNotification.setDescription('If TRUE, events are written to the event log when quotas are exceeded.')
osqsSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsSettingID.setStatus('current')
if mibBuilder.loadTexts: osqsSettingID.setDescription('Name of a CIM_Setting object.')
osqsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("tracked", 1), ("enforced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsState.setStatus('current')
if mibBuilder.loadTexts: osqsState.setDescription('Level of quota management set for this volume.')
osqsVolumePath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsVolumePath.setStatus('current')
if mibBuilder.loadTexts: osqsVolumePath.setDescription("Name of the volume where disk quotas are located. It can be volume name, volume path (such as D:\\\\), or it can be the unique volume name (such as '\\\\\\\\?Volume{GUID}\\\\.').")
osqsWarningExceededNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 4, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqsWarningExceededNotification.setStatus('current')
if mibBuilder.loadTexts: osqsWarningExceededNotification.setDescription('If TRUE, events are written to the event log when warnings are exceeded.')
win32VolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5), )
if mibBuilder.loadTexts: win32VolumeTable.setStatus('current')
if mibBuilder.loadTexts: win32VolumeTable.setDescription('The Win32_Volume class represents an area of storage on a hard disk. The class returns local volumes that are formatted, unformatted, mounted, or offline. A volume is formatted by using a file system, such as FAT or NTFS, and might have a drive letter assigned to it. One hard disk can have multiple volumes, and volumes can span multiple physical disks. The Win32_Volume class does not support disk drive management.')
win32VolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1), ).setIndexNames((0, "INFORMANT-OS", "osvlIndex"))
if mibBuilder.loadTexts: win32VolumeEntry.setStatus('current')
if mibBuilder.loadTexts: win32VolumeEntry.setDescription('None')
osvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlIndex.setStatus('current')
if mibBuilder.loadTexts: osvlIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osvlAutomount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlAutomount.setStatus('current')
if mibBuilder.loadTexts: osvlAutomount.setDescription('If true, the volume is mounted to the file system automatically when the first I/O is issued. If false, the volume is not mounted until explicitly mounted by using the Mount method, or by adding a drive letter or mount point.')
osvlCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlCapacity.setStatus('current')
if mibBuilder.loadTexts: osvlCapacity.setDescription('Size of the volume in bytes.')
osvlCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlCompressed.setStatus('current')
if mibBuilder.loadTexts: osvlCompressed.setDescription('If true the volume exists as one compressed entity, such as a DoubleSpace volume. If file-based compression is supported, such as the NTFS file system, this property is false.')
osvlDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlDeviceId.setStatus('current')
if mibBuilder.loadTexts: osvlDeviceId.setDescription('Unique identifier for the volume on this system.')
osvlDirtyBitSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlDirtyBitSet.setStatus('current')
if mibBuilder.loadTexts: osvlDirtyBitSet.setDescription('If true, the Chkdsk method is automatically run by the system at the next boot up.')
osvlDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlDriveLetter.setStatus('current')
if mibBuilder.loadTexts: osvlDriveLetter.setDescription('Drive letter assigned to a volume. This property is NULL for volumes without drive letters.')
osvlDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("noRootDirectory", 1), ("removableDisk", 2), ("localDisk", 3), ("networkDrive", 4), ("compactDisk", 5), ("ramDisk", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlDriveType.setStatus('current')
if mibBuilder.loadTexts: osvlDriveType.setDescription('Numeric value that corresponds to the type of disk drive that this logical disk represents.')
osvlFileSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlFileSystem.setStatus('current')
if mibBuilder.loadTexts: osvlFileSystem.setDescription('File system on the logical disk. Example: NTFS')
osvlFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlFreeSpace.setStatus('current')
if mibBuilder.loadTexts: osvlFreeSpace.setDescription('Number of bytes of available space on the volume.')
osvlIndexingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlIndexingEnabled.setStatus('current')
if mibBuilder.loadTexts: osvlIndexingEnabled.setDescription('If true, context indexing is enabled.')
osvlLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlLabel.setStatus('current')
if mibBuilder.loadTexts: osvlLabel.setDescription('Volume name of the logical disk. This property is null for volumes without a label. For FAT, FAT32 systems the maximum length is 11 characters. For NTFS file systems the maximum length is 32 characters.')
osvlMaximumFileNameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlMaximumFileNameLength.setStatus('current')
if mibBuilder.loadTexts: osvlMaximumFileNameLength.setDescription('Maximum length, in characters, of a filename component supported by a Windows drive. A filename component is the portion of a filename between backslashes. This value can be used to indicate that long names are supported by the file system. For example, for a FAT file system that supports long names, the property stores the value 255 not the previous 8.3 indicator. Long names can be supported on systems that use the NTFS file system. Example: 255')
osvlQuotasEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlQuotasEnabled.setStatus('current')
if mibBuilder.loadTexts: osvlQuotasEnabled.setDescription('If true, quota management is enabled for this volume.')
osvlQuotasIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlQuotasIncomplete.setStatus('current')
if mibBuilder.loadTexts: osvlQuotasIncomplete.setDescription('If true, quota management was used but is disabled. Incomplete refers to the information left in the file system after quota management is disabled.')
osvlQuotasRebuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlQuotasRebuilding.setStatus('current')
if mibBuilder.loadTexts: osvlQuotasRebuilding.setDescription('If true, the file system is in the process of compiling information and setting the disk up for quota management.')
osvlSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlSerialNumber.setStatus('current')
if mibBuilder.loadTexts: osvlSerialNumber.setDescription('Serial number of the volume. Example: A8C3D032')
osvlSupportsDiskQuotas = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlSupportsDiskQuotas.setStatus('current')
if mibBuilder.loadTexts: osvlSupportsDiskQuotas.setDescription('If true, the volume supports disk quotas.')
osvlSupportsFileBasedCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 3, 5, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osvlSupportsFileBasedCompression.setStatus('current')
if mibBuilder.loadTexts: osvlSupportsFileBasedCompression.setDescription('If true, the volume supports file-based compression like the NTFS file system.')
wmiJobObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4))
if mibBuilder.loadTexts: wmiJobObjects.setStatus('current')
if mibBuilder.loadTexts: wmiJobObjects.setDescription('The Job Objects subcategory groups classes that represent classes that provide the means of instrumenting named job objects. An unnamed job object cannot be instrumented.')
win32NamedJobObjectTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 1), )
if mibBuilder.loadTexts: win32NamedJobObjectTable.setStatus('current')
if mibBuilder.loadTexts: win32NamedJobObjectTable.setDescription('The Win32_NamedJobObject WMI class represents a kernel object that is used to group processes for controlling the life and resources of the processes within the job object. Only the job objects that are named are instrumented. This class is new for Windows XP.')
win32NamedJobObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osnjoIndex"))
if mibBuilder.loadTexts: win32NamedJobObjectEntry.setStatus('current')
if mibBuilder.loadTexts: win32NamedJobObjectEntry.setDescription('None')
osnjoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnjoIndex.setStatus('current')
if mibBuilder.loadTexts: osnjoIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osnjoBasicUIRestrictions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("desktop", 1), ("displaySettings", 2), ("exitWindows", 4), ("globalAtoms", 8), ("handles", 16), ("readClipboard", 32), ("systemParameters", 64), ("writeClipboard", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnjoBasicUIRestrictions.setStatus('current')
if mibBuilder.loadTexts: osnjoBasicUIRestrictions.setDescription('Restrictions on a job regarding the user interface.')
osnjoCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 1, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnjoCaption.setStatus('current')
if mibBuilder.loadTexts: osnjoCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
osnjoCollectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 1, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnjoCollectionID.setStatus('current')
if mibBuilder.loadTexts: osnjoCollectionID.setDescription("Number that identifies a job object. Because they are kernel objects, job object names are case sensitive. However, Windows Management Instrumentation (WMI) keys are case insensitive and must be decorated to distinguish case. To indicate a capital letter, precede the letter by using a backslash. For example, 'A' and 'a' are lowercase and '\\A' and '\\a' are uppercase. This property overrides the CollectionID property in CIM_CollectionofMSEs.")
osnjoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 1, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnjoDescription.setStatus('current')
if mibBuilder.loadTexts: osnjoDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
win32NamedJobObjectActgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2), )
if mibBuilder.loadTexts: win32NamedJobObjectActgInfoTable.setStatus('current')
if mibBuilder.loadTexts: win32NamedJobObjectActgInfoTable.setDescription('The Win32_NamedJobObjectActgInfo WMI class class represents the I/O accounting information for a job object. This class is new for Windows XP.')
win32NamedJobObjectActgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "osjoaIndex"))
if mibBuilder.loadTexts: win32NamedJobObjectActgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: win32NamedJobObjectActgInfoEntry.setDescription('None')
osjoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaIndex.setStatus('current')
if mibBuilder.loadTexts: osjoaIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osjoaActiveProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaActiveProcesses.setStatus('current')
if mibBuilder.loadTexts: osjoaActiveProcesses.setDescription('Total number of processes associated with a job. When a process is associated with a job, but the association fails because of a limit violation, the value is temporarily incremented. When the terminated process exits and all references to the process are released, the value is decremented.')
osjoaCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaCaption.setStatus('current')
if mibBuilder.loadTexts: osjoaCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
osjoaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaDescription.setStatus('current')
if mibBuilder.loadTexts: osjoaDescription.setDescription('Description of the object. This property is inherited from CIM_StatisticalInformation.')
osjoaName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaName.setStatus('current')
if mibBuilder.loadTexts: osjoaName.setDescription('Label by which the statistic or metric is known. When subclassed, the property can be overridden to be a key property. This property overrides the Name property in CIM_StatisticalInformation.')
osjoaOtherOperationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaOtherOperationCount.setStatus('current')
if mibBuilder.loadTexts: osjoaOtherOperationCount.setDescription('Number of I/O operations performed other than read and write operations by all processes that have been associated with the job including all processes currently associated with the job.')
osjoaOtherTransferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaOtherTransferCount.setStatus('current')
if mibBuilder.loadTexts: osjoaOtherTransferCount.setDescription('Number of bytes transferred during operations other than read and write by all processes that have been associated with the job including all processes currently associated with the job.')
osjoaPeakJobMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 8), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaPeakJobMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: osjoaPeakJobMemoryUsed.setDescription('Peak memory in kilobyte usage of all processes associated with the job.')
osjoaPeakProcessMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 9), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaPeakProcessMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: osjoaPeakProcessMemoryUsed.setDescription('The most process memory in kilobytes used by any process ever associated with the job.')
osjoaReadOperationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaReadOperationCount.setStatus('current')
if mibBuilder.loadTexts: osjoaReadOperationCount.setDescription('Number of read operations performed by all processes that have ever been associated with the job, in addition to all processes currently associated with the job.')
osjoaReadTransferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaReadTransferCount.setStatus('current')
if mibBuilder.loadTexts: osjoaReadTransferCount.setDescription('Number of bytes read by all processes that have been associated with the job including all processes currently associated with the job.')
osjoaThisPeriodTotalKernelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 12), WtcsDisplayString()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaThisPeriodTotalKernelTime.setStatus('current')
if mibBuilder.loadTexts: osjoaThisPeriodTotalKernelTime.setDescription('Total amount of kernel-mode execution time, in 100 nanosecond units, for all active processes associated with the job (and all terminated processes no longer associated with the job) after the last call that set a per-job kernel-mode time limit. This property is set to 0 (zero) when a job is created, and each time a per-job kernel-mode time limit is established.')
osjoaThisPeriodTotalUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 13), WtcsDisplayString()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaThisPeriodTotalUserTime.setStatus('current')
if mibBuilder.loadTexts: osjoaThisPeriodTotalUserTime.setDescription('Total amount of user-mode execution time, in 100 nanosecond units, for all active processes associated with the job (and all terminated processes no longer associated with the job) since the last call that set a per-job user-mode time limit. This property is set to 0 (zero) when a job is created, and each time a per-job user-mode time limit is established')
osjoaTotalKernelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 14), WtcsDisplayString()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaTotalKernelTime.setStatus('current')
if mibBuilder.loadTexts: osjoaTotalKernelTime.setDescription('Total amount of kernel-mode execution time, in 100 nanosecond units, for all active processes associated with the job, as well as all terminated processes no longer associated with the job.')
osjoaTotalPageFaultCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaTotalPageFaultCount.setStatus('current')
if mibBuilder.loadTexts: osjoaTotalPageFaultCount.setDescription('Total number of page faults encountered by all active processes associated with the job, as well as all terminated processes no longer associated with the job.')
osjoaTotalProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaTotalProcesses.setStatus('current')
if mibBuilder.loadTexts: osjoaTotalProcesses.setDescription('Total number of processes associated with the job during its lifetime, including those that are terminated. For example, when a process is associated with a job, but the association fails because of a limit violation, the value is incremented.')
osjoaTotalTerminatedProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaTotalTerminatedProcesses.setStatus('current')
if mibBuilder.loadTexts: osjoaTotalTerminatedProcesses.setDescription('Total number of processes terminated because of a limit violation.')
osjoaTotalUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 18), WtcsDisplayString()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaTotalUserTime.setStatus('current')
if mibBuilder.loadTexts: osjoaTotalUserTime.setDescription('Total amount of user-mode execution time, in 100 nanosecond units, for all active processes associated with a job, and all terminated processes not associated with a job.')
osjoaWriteOperationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaWriteOperationCount.setStatus('current')
if mibBuilder.loadTexts: osjoaWriteOperationCount.setDescription('Number of write operations performed by all processes that have been associated with a job, and all processes currently associated with the job.')
osjoaWriteTransferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjoaWriteTransferCount.setStatus('current')
if mibBuilder.loadTexts: osjoaWriteTransferCount.setDescription('Number of bytes written by all processes that have been associated with a job, and all processes currently associated with a job.')
win32NamedJobObjectLimitSetTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3), )
if mibBuilder.loadTexts: win32NamedJobObjectLimitSetTable.setStatus('current')
if mibBuilder.loadTexts: win32NamedJobObjectLimitSetTable.setDescription('The Win32_NamedJobObjectLimitSetting WMI class represents the limit settings for a job object. This class is new for Windows XP.')
win32NamedJobObjectLimitSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1), ).setIndexNames((0, "INFORMANT-OS", "osjolIndex"))
if mibBuilder.loadTexts: win32NamedJobObjectLimitSetEntry.setStatus('current')
if mibBuilder.loadTexts: win32NamedJobObjectLimitSetEntry.setDescription('None')
osjolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolIndex.setStatus('current')
if mibBuilder.loadTexts: osjolIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osjolActiveProcessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolActiveProcessLimit.setStatus('current')
if mibBuilder.loadTexts: osjolActiveProcessLimit.setDescription('Active process limit for a job. If associating a process with a job causes the active process count to exceed the limit, the process is terminated and the association fails. This property is ignored unless the LimitFlags property specifies the Active Process Limit value.')
osjolAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolAffinity.setStatus('current')
if mibBuilder.loadTexts: osjolAffinity.setDescription('Processor affinity for all processes associated with a job. The affinity of each thread is set to this value, but threads are free to set the affinity subsequently, when it is a subset of the specified affinity mask. Processes cannot set an affinity mask. This property is ignored unless LimitFlags specifies the Limit Affinity value.')
osjolCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolCaption.setStatus('current')
if mibBuilder.loadTexts: osjolCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
osjolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolDescription.setStatus('current')
if mibBuilder.loadTexts: osjolDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
osjolJobMemoryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolJobMemoryLimit.setStatus('current')
if mibBuilder.loadTexts: osjolJobMemoryLimit.setDescription('Per-job memory limit in kilobytes. This property is ignored unless LimitFlags specifies the Limit Job Memory value.')
osjolLimitFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("limitWorkingSet", 1), ("limitProcessTime", 2), ("limitJobTime", 4), ("activeProcessLimit", 8), ("limitAffinity", 16), ("limitPriorityClass", 32), ("limitPreserveJobTime", 64), ("limitSchedulingClass", 128), ("limitProcessMemory", 256), ("limitJobMemory", 512), ("limitDieOnUnhandledException", 1024), ("limitBreakawayOK", 2048), ("silentBreakawayOK", 4096)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolLimitFlags.setStatus('current')
if mibBuilder.loadTexts: osjolLimitFlags.setDescription('Bitmap that represents the job limits. One or more of the limits can be in effect at the same time.')
osjolMaximumWorkingSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolMaximumWorkingSetSize.setStatus('current')
if mibBuilder.loadTexts: osjolMaximumWorkingSetSize.setDescription('Maximum working set size for all processes associated with a job. This property is ignored unless LimitFlags specifies the Limit Working Set value.')
osjolMinimumWorkingSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolMinimumWorkingSetSize.setStatus('current')
if mibBuilder.loadTexts: osjolMinimumWorkingSetSize.setDescription('Minimum working set size for all processes associated with a job. This property is ignored unless LimitFlags specifies the Limit Working Set value.')
osjolPerJobUserTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 10), WtcsDisplayString()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolPerJobUserTimeLimit.setStatus('current')
if mibBuilder.loadTexts: osjolPerJobUserTimeLimit.setDescription('Per-job user mode execution time limit, in 100 nanosecond units. The system adds the current time of the processes associated with the job to this limit. For example, if you set this limit to 1 minute, and the job has a process that has accumulated 5 minutes of user mode time, the limit actually enforced is 6 minutes.')
osjolPerProcessUserTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 11), WtcsDisplayString()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolPerProcessUserTimeLimit.setStatus('current')
if mibBuilder.loadTexts: osjolPerProcessUserTimeLimit.setDescription('Per-process user mode execution time limit, in 100-nanosecond units. This property is ignored unless LimitFlags specifies Limit Process Time. The system periodically checks to determine whether or not each process associated with the job has accumulated more user-mode time than the set limit. If it has, the process is terminated.')
osjolPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolPriorityClass.setStatus('current')
if mibBuilder.loadTexts: osjolPriorityClass.setDescription('Priority class for all processes associated with the job. Processes and threads cannot modify their priority class. This property is ignored unless LimitFlags specifies the Limit Priority value.')
osjolProcessMemoryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolProcessMemoryLimit.setStatus('current')
if mibBuilder.loadTexts: osjolProcessMemoryLimit.setDescription('Per-process memory limit in kilobytes. This property is ignored unless LimitFlags specifies the Limit Process Memory value.')
osjolSchedulingClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolSchedulingClass.setStatus('current')
if mibBuilder.loadTexts: osjolSchedulingClass.setDescription('Scheduling class for all processes associated with the job. The valid values are 0 to 9. Use 0 (zero) for the least favorable scheduling class relative to other threads, and 9 for the most favorable scheduling class relative to other threads. This property is ignored unless LimitFlags specifies the Limit Scheduling Class value.')
osjolSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 4, 3, 1, 15), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osjolSettingID.setStatus('current')
if mibBuilder.loadTexts: osjolSettingID.setDescription("Job object limit setting instance. Because they are kernel objects, job object names are case-sensitive. However, Windows Management Instrumentation (WMI) keys are case-insensitive and must be decorated to distinguish case. To indicate a capital letter, precede the letter by a backslash. For example, 'A' and 'a' are lowercase and '\\A' and '\\a' are uppercase.")
wmiPageFiles = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5))
if mibBuilder.loadTexts: wmiPageFiles.setStatus('current')
if mibBuilder.loadTexts: wmiPageFiles.setDescription('The Memory and Page files subcategory groups classes that represent page file configuration settings.')
win32PageFileTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1), )
if mibBuilder.loadTexts: win32PageFileTable.setStatus('current')
if mibBuilder.loadTexts: win32PageFileTable.setDescription('The Win32_PageFile WMI class represents the file used for handling virtual memory file swapping on a Win32 system. This class has been deprecated.')
win32PageFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "ospfIndex"))
if mibBuilder.loadTexts: win32PageFileEntry.setStatus('current')
if mibBuilder.loadTexts: win32PageFileEntry.setDescription('None')
ospfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ospfAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAccessMask.setStatus('current')
if mibBuilder.loadTexts: ospfAccessMask.setDescription('List of access rights to the given file or directory held by the user or group on whose behalf the instance is returned. This property is only supported under Windows NT and Windows 2000. On Windows 98 and on Windows NT/Windows 2000 FAT volumes, the FULL_ACCESS value, 0xFFFFFFFF hex or 4294967295 decimal, is returned instead, indicating no security has been set on the object. Value Meaning 0 FILE_LIST_DIRECTORY Grants the right to read data from the file. For a directory, this value grants the right to list the contents of the directory. 1 FILE_ADD_FILE Grants the right to write data to the file. For a directory, this value grants the right to create a file in the directory. 2 FILE_ADD_SUBDIRECTORY Grants the right to append data to the file. For a directory, this value grants the right to create a subdirectory. 3 FILE_READ_EA Grants the right to read extended attributes. 4 FILE_WRITE_EA Grants the right to write extended attributes. 5 FILE_TRAVERSE Grants the right to execute a file. For a directory, the directory can be traversed. 6 FILE_DELETE_CHILD Grants the right to delete a directory and all the files it contains (its children), even if the files are read-only. 7 FILE_READ_ATTRIBUTES Grants the right to read file attributes. 8 FILE_WRITE_ATTRIBUTES Grants the right to change file attributes. 16 DELETE Grants delete access. 17 READ_CONTROL Grants read access to the security descriptor and owner. 18 WRITE_DAC Grants write access to the discretionary ACL. 19 WRITE_OWNER Assigns the write owner. 20 SYNCHRONIZE Synchronizes access and allows a process to wait for an object to enter the signaled state. ')
ospfArchive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfArchive.setStatus('current')
if mibBuilder.loadTexts: ospfArchive.setDescription('File should be archived.')
ospfCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCaption.setStatus('current')
if mibBuilder.loadTexts: ospfCaption.setDescription('Short description (one-line string) of the object.')
ospfCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCompressed.setStatus('current')
if mibBuilder.loadTexts: ospfCompressed.setDescription('File is compressed.')
ospfCompressionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCompressionMethod.setStatus('current')
if mibBuilder.loadTexts: ospfCompressionMethod.setDescription("Algorithm or tool used to compress the logical file. If it is not possible (or not desired) to describe the compression scheme (perhaps because it is not known), use the following words: 'Unknown' to represent that it is not known whether the logical file is compressed or not; 'Compressed' to represent that the file is compressed but either its compression scheme is not known or not disclosed; and 'Not Compressed' to represent that the logical file is not compressed.")
ospfCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ospfCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified.')
ospfCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCreationDate.setStatus('current')
if mibBuilder.loadTexts: ospfCreationDate.setDescription('File creation date.')
ospfCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ospfCSCreationClassName.setDescription('Class of the computer system.')
ospfCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCSName.setStatus('current')
if mibBuilder.loadTexts: ospfCSName.setDescription('Name of the computer system.')
ospfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfDescription.setStatus('current')
if mibBuilder.loadTexts: ospfDescription.setDescription('Description of the object.')
ospfDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfDrive.setStatus('current')
if mibBuilder.loadTexts: ospfDrive.setDescription("Drive letter (including colon) of the file. Example: 'c:'")
ospfEightDotThreeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfEightDotThreeFileName.setStatus('current')
if mibBuilder.loadTexts: ospfEightDotThreeFileName.setDescription("DOS-compatible file name for this file. Example: 'c:\\progra~1'")
ospfEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfEncrypted.setStatus('current')
if mibBuilder.loadTexts: ospfEncrypted.setDescription('File is encrypted.')
ospfEncryptionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfEncryptionMethod.setStatus('current')
if mibBuilder.loadTexts: ospfEncryptionMethod.setDescription("Algorithm or tool used to encrypt the logical file. If it is not possible (or not desired) to describe the encryption scheme (perhaps for security reasons), use the following words: 'Unknown' to represent that it is not known whether the logical file is encrypted or not; 'Encrypted' to represent that the file is encrypted but either its encryption scheme is not known or not disclosed; and 'Not Encrypted' to represent that the logical file is not encrypted.")
ospfExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtension.setStatus('current')
if mibBuilder.loadTexts: ospfExtension.setDescription("File extension (without the dot). Examples: 'txt', 'mof', 'mdb'.")
ospfFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfFileName.setStatus('current')
if mibBuilder.loadTexts: ospfFileName.setDescription("Name (without extension) of the file. Example: 'autoexec'")
ospfFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfFileSize.setStatus('current')
if mibBuilder.loadTexts: ospfFileSize.setDescription('Size of the file (in bytes).')
ospfFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfFileType.setStatus('current')
if mibBuilder.loadTexts: ospfFileType.setDescription('File type (indicated by the Extension property).')
ospfFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 20), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfFreeSpace.setStatus('current')
if mibBuilder.loadTexts: ospfFreeSpace.setDescription('Space available in the paging file. The operating system can enlarge the paging file as necessary up to the limit imposed by the user. This property shows the difference between the size of current committed memory and the current size of the paging file; it does not show the largest possible size of the paging file.')
ospfFSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfFSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ospfFSCreationClassName.setDescription('Class of the file system.')
ospfFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfFSName.setStatus('current')
if mibBuilder.loadTexts: ospfFSName.setDescription('Name of the file system.')
ospfHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfHidden.setStatus('current')
if mibBuilder.loadTexts: ospfHidden.setDescription('File is hidden.')
ospfInitialSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 24), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfInitialSize.setStatus('current')
if mibBuilder.loadTexts: ospfInitialSize.setDescription('Initial size of the page file.')
ospfInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfInstallDate.setStatus('current')
if mibBuilder.loadTexts: ospfInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
ospfInUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfInUseCount.setStatus('current')
if mibBuilder.loadTexts: ospfInUseCount.setDescription("Number of 'file opens' that are currently active against the file.")
ospfLastAccessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLastAccessed.setStatus('current')
if mibBuilder.loadTexts: ospfLastAccessed.setDescription('File was last accessed.')
ospfLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLastModified.setStatus('current')
if mibBuilder.loadTexts: ospfLastModified.setDescription('File was last modified.')
ospfManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfManufacturer.setStatus('current')
if mibBuilder.loadTexts: ospfManufacturer.setDescription('Manufacturer name from version resource, if one is present.')
ospfMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 30), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfMaximumSize.setStatus('current')
if mibBuilder.loadTexts: ospfMaximumSize.setDescription('Maximum size of the page file as set by the user. The operating system will not allow the page file to exceed this limit.')
ospfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfName.setStatus('current')
if mibBuilder.loadTexts: ospfName.setDescription("Name of the page file. Example: 'C:\\PAGEFILE.SYS'")
ospfPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfPath.setStatus('current')
if mibBuilder.loadTexts: ospfPath.setDescription("Path of the file. This includes leading and trailing backslashes. Example: '\\windows\\system\\'")
ospfReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfReadable.setStatus('current')
if mibBuilder.loadTexts: ospfReadable.setDescription('File can be read.')
ospfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
ospfSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSystem.setStatus('current')
if mibBuilder.loadTexts: ospfSystem.setDescription('File is a system file.')
ospfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 36), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVersion.setStatus('current')
if mibBuilder.loadTexts: ospfVersion.setDescription('Version name from version resource, if one is present.')
ospfWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 1, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfWriteable.setStatus('current')
if mibBuilder.loadTexts: ospfWriteable.setDescription('File can be written.')
win32PageFileSettingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2), )
if mibBuilder.loadTexts: win32PageFileSettingTable.setStatus('current')
if mibBuilder.loadTexts: win32PageFileSettingTable.setDescription('The Win32_PageFileSetting WMI class represents the settings of a page file. Information contained within objects instantiated from this class specify the page file parameters used when the file is created at system startup. The properties in this class can be modified and deferred until startup. These settings are different from the run-time state of a page file expressed through the associated class Win32_PageFileUsage. To create an instance of this class, enable the SeCreatePagefilePrivilege privilege. For more information, see Windows NT/Windows 2000 Privilege Strings and Executing Privileged Operations.')
win32PageFileSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "ospfsIndex"))
if mibBuilder.loadTexts: win32PageFileSettingEntry.setStatus('current')
if mibBuilder.loadTexts: win32PageFileSettingEntry.setDescription('None')
ospfsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfsIndex.setStatus('current')
if mibBuilder.loadTexts: ospfsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ospfsCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfsCaption.setStatus('current')
if mibBuilder.loadTexts: ospfsCaption.setDescription('Short description (one-line string) of the CIM_Setting object.')
ospfsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfsDescription.setStatus('current')
if mibBuilder.loadTexts: ospfsDescription.setDescription('Description of the CIM_Setting object.')
ospfsInitialSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2, 1, 4), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfsInitialSize.setStatus('current')
if mibBuilder.loadTexts: ospfsInitialSize.setDescription('Initial size of the page file. Example: 139')
ospfsMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2, 1, 5), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfsMaximumSize.setStatus('current')
if mibBuilder.loadTexts: ospfsMaximumSize.setDescription('Maximum size of the page file. Example: 178')
ospfsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfsName.setStatus('current')
if mibBuilder.loadTexts: ospfsName.setDescription("Path and file name of the page file. Example: 'C:\\PAGEFILE.SYS'")
ospfsSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 2, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfsSettingID.setStatus('current')
if mibBuilder.loadTexts: ospfsSettingID.setDescription('Identifier by which the CIM_Setting object is known.')
win32PageFileUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3), )
if mibBuilder.loadTexts: win32PageFileUsageTable.setStatus('current')
if mibBuilder.loadTexts: win32PageFileUsageTable.setDescription('The Win32_PageFileUsage WMI class represents the file used for handling virtual memory file swapping on a Win32 system. Information contained within objects instantiated from this class specify the run-time state of the page file.')
win32PageFileUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1), ).setIndexNames((0, "INFORMANT-OS", "ospfuIndex"))
if mibBuilder.loadTexts: win32PageFileUsageEntry.setStatus('current')
if mibBuilder.loadTexts: win32PageFileUsageEntry.setDescription('None')
ospfuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuIndex.setStatus('current')
if mibBuilder.loadTexts: ospfuIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ospfuAllocatedBaseSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 2), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuAllocatedBaseSize.setStatus('current')
if mibBuilder.loadTexts: ospfuAllocatedBaseSize.setDescription('Actual amount of disk space allocated for use with this page file. This value corresponds to the range established in Win32_PageFileSetting under the InitialSize and MaximumSize properties, set at system startup. Example: 178')
ospfuCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuCaption.setStatus('current')
if mibBuilder.loadTexts: ospfuCaption.setDescription('Short description of the object a one-line string.')
ospfuCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 4), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: ospfuCurrentUsage.setDescription('Amount of disk space currently used by the page file.')
ospfuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuDescription.setStatus('current')
if mibBuilder.loadTexts: ospfuDescription.setDescription('Description of the object.')
ospfuInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuInstallDate.setStatus('current')
if mibBuilder.loadTexts: ospfuInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
ospfuName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuName.setStatus('current')
if mibBuilder.loadTexts: ospfuName.setDescription("Name of the page file. Example: 'C:\\PAGEFILE.SYS'")
ospfuPeakUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 8), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuPeakUsage.setStatus('current')
if mibBuilder.loadTexts: ospfuPeakUsage.setDescription('Highest use page file.')
ospfuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuStatus.setStatus('current')
if mibBuilder.loadTexts: ospfuStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
ospfuTempPageFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 5, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfuTempPageFile.setStatus('current')
if mibBuilder.loadTexts: ospfuTempPageFile.setDescription('Windows XP, Windows Server 2003: If true, a temporary page file has been created, usually because there is no permanent page file on the current computer system.')
wmiMultimedia = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6))
if mibBuilder.loadTexts: wmiMultimedia.setStatus('current')
if mibBuilder.loadTexts: wmiMultimedia.setDescription('The class in the Multimedia Audio/Visual subcategory represents properties of the audio or video codec installed on the computer system.')
win32CodecFileTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1), )
if mibBuilder.loadTexts: win32CodecFileTable.setStatus('current')
if mibBuilder.loadTexts: win32CodecFileTable.setDescription('The Win32_CodecFile WMI class represents the audio or video codec installed on the computer system. Codecs convert one media format type to another, typically a compressed format to an uncompressed format. The name codec is derived from a combination of compress and decompress. For example, a codec can convert a compressed format such as MS-ADPCM to an uncompressed format such as PCM, which most audio hardware can play directly.')
win32CodecFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "oscfIndex"))
if mibBuilder.loadTexts: win32CodecFileEntry.setStatus('current')
if mibBuilder.loadTexts: win32CodecFileEntry.setDescription('None')
oscfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfIndex.setStatus('current')
if mibBuilder.loadTexts: oscfIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
oscfAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("fileLISTDIRECTORY", 0), ("fileADDFILE", 1), ("fileADDSUBDIRECTORY", 2), ("fileREADEA", 3), ("fileWRITEEA", 4), ("fileTRAVERSE", 5), ("fileDELETECHILD", 6), ("fileREADATTRIBUTES", 7), ("fileWRITEATTRIBUTES", 8), ("delete", 16), ("readCONTROL", 17), ("writeDAC", 18), ("writeOWNER", 19), ("synchronize", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfAccessMask.setStatus('current')
if mibBuilder.loadTexts: oscfAccessMask.setDescription('Bitmap list of access rights to the given file or directory held by the user or group on whose behalf the instance is returned. This property is only supported under Windows NT and Windows 2000. On Windows 98 and on Windows NT/Windows 2000 FAT volumes, the FULL_ACCESS value is returned instead, indicating no security has been set on the object. This property is inherited from CIM_LogicalFile.')
oscfArchive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfArchive.setStatus('current')
if mibBuilder.loadTexts: oscfArchive.setDescription('File should be archived. This property is inherited from CIM_LogicalFile.')
oscfCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfCaption.setStatus('current')
if mibBuilder.loadTexts: oscfCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
oscfCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfCompressed.setStatus('current')
if mibBuilder.loadTexts: oscfCompressed.setDescription('File is compressed. This property is inherited from CIM_LogicalFile.')
oscfCompressionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfCompressionMethod.setStatus('current')
if mibBuilder.loadTexts: oscfCompressionMethod.setDescription("Algorithm or tool used to compress the logical file. If it is not possible (or not desired) to describe the compression scheme (perhaps because it is not known), use the following words: 'Unknown' to represent that it is not known whether the logical file is compressed or not; 'Compressed' to represent that the file is compressed but either its compression scheme is not known or not disclosed; and 'Not Compressed' to represent that the logical file is not compressed. This property is inherited from CIM_LogicalFile.")
oscfCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfCreationClassName.setStatus('current')
if mibBuilder.loadTexts: oscfCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalFile.')
oscfCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfCreationDate.setStatus('current')
if mibBuilder.loadTexts: oscfCreationDate.setDescription('File creation date. This property is inherited from CIM_LogicalFile.')
oscfCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: oscfCSCreationClassName.setDescription('Class of the computer system. This property is inherited from CIM_LogicalFile.')
oscfCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfCSName.setStatus('current')
if mibBuilder.loadTexts: oscfCSName.setDescription('String representing the name of the computer system. This property is inherited from CIM_LogicalFile.')
oscfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfDescription.setStatus('current')
if mibBuilder.loadTexts: oscfDescription.setDescription("Full name of the codec driver. This string is intended to be displayed in large (descriptive) spaces. This property is inherited from CIM_ManagedSystemElement. Example: 'Microsoft PCM Converter'")
oscfDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfDrive.setStatus('current')
if mibBuilder.loadTexts: oscfDrive.setDescription("Drive letter (including colon) of the file. This property is inherited from CIM_LogicalFile. Example: 'c:'")
oscfEightDotThreeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfEightDotThreeFileName.setStatus('current')
if mibBuilder.loadTexts: oscfEightDotThreeFileName.setDescription("DOS-compatible file name for this file. This property is inherited from CIM_LogicalFile. Example: 'c:\\progra~1'")
oscfEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfEncrypted.setStatus('current')
if mibBuilder.loadTexts: oscfEncrypted.setDescription('If TRUE, the file is encrypted. This property is inherited from CIM_LogicalFile.')
oscfEncryptionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfEncryptionMethod.setStatus('current')
if mibBuilder.loadTexts: oscfEncryptionMethod.setDescription("Algorithm or tool used to encrypt the logical file. If it is not possible (or not desired) to describe the encryption scheme (perhaps for security reasons), use the following words: 'Unknown' to represent that it is not known whether the logical file is encrypted or not; 'Encrypted' to represent that the file is encrypted but either its encryption scheme is not known or not disclosed; and 'Not Encrypted' to represent that the logical file is not encrypted. This property is inherited from CIM_LogicalFile.")
oscfExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfExtension.setStatus('current')
if mibBuilder.loadTexts: oscfExtension.setDescription("File extension (without the dot). This property is inherited from CIM_LogicalFile. Examples: 'txt', 'mof', 'mdb'")
oscfFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfFileName.setStatus('current')
if mibBuilder.loadTexts: oscfFileName.setDescription("Name (without extension) of the file. This property is inherited from CIM_LogicalFile. Example: 'autoexec'")
oscfFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfFileSize.setStatus('current')
if mibBuilder.loadTexts: oscfFileSize.setDescription('Size of the file (in bytes). This property is inherited from CIM_LogicalFile.')
oscfFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfFileType.setStatus('current')
if mibBuilder.loadTexts: oscfFileType.setDescription('File type (indicated by the Extension property). This property is inherited from CIM_LogicalFile.')
oscfFSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfFSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: oscfFSCreationClassName.setDescription('Class of the file system. This property is inherited from CIM_LogicalFile.')
oscfFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfFSName.setStatus('current')
if mibBuilder.loadTexts: oscfFSName.setDescription('Name of the file system. This property is inherited from CIM_LogicalFile.')
oscfGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("video", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfGroup.setStatus('current')
if mibBuilder.loadTexts: oscfGroup.setDescription('Codec represented by this class.')
oscfHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfHidden.setStatus('current')
if mibBuilder.loadTexts: oscfHidden.setDescription('If TRUE, the file is hidden. This property is inherited from CIM_LogicalFile.')
oscfInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfInstallDate.setStatus('current')
if mibBuilder.loadTexts: oscfInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
oscfInUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfInUseCount.setStatus('current')
if mibBuilder.loadTexts: oscfInUseCount.setDescription("Number of 'file opens' that are currently active against the file. This property is inherited from CIM_LogicalFile.")
oscfLastAccessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfLastAccessed.setStatus('current')
if mibBuilder.loadTexts: oscfLastAccessed.setDescription('File was last accessed. This property is inherited from CIM_LogicalFile.')
oscfLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfLastModified.setStatus('current')
if mibBuilder.loadTexts: oscfLastModified.setDescription('File was last modified. This property is inherited from CIM_LogicalFile.')
oscfManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfManufacturer.setStatus('current')
if mibBuilder.loadTexts: oscfManufacturer.setDescription('Manufacturer string from version resource, if one is present. This property is inherited from CIM_DataFile.')
oscfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfName.setStatus('current')
if mibBuilder.loadTexts: oscfName.setDescription("Inherited name that serves as a key of a logical file instance within a file system. Full path names should be provided. This property is inherited from CIM_ManagedSystemElement. Example: 'c:\\winnt\\system\\win.ini'")
oscfPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfPath.setStatus('current')
if mibBuilder.loadTexts: oscfPath.setDescription("Path of the file. This includes leading and trailing backslashes. This property is inherited from CIM_LogicalFile. Example: '\\windows\\system\\'")
oscfReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfReadable.setStatus('current')
if mibBuilder.loadTexts: oscfReadable.setDescription('File can be read. This property is inherited from CIM_LogicalFile.')
oscfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfStatus.setStatus('current')
if mibBuilder.loadTexts: oscfStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
oscfSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfSystem.setStatus('current')
if mibBuilder.loadTexts: oscfSystem.setDescription('File is a system file. This property is inherited from CIM_LogicalFile.')
oscfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfVersion.setStatus('current')
if mibBuilder.loadTexts: oscfVersion.setDescription('Version string from version resource, if one is present. This property is inherited from CIM_DataFile.')
oscfWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 6, 1, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscfWriteable.setStatus('current')
if mibBuilder.loadTexts: oscfWriteable.setDescription('File can be written. This property is inherited from CIM_LogicalFile.')
wmiNetworking = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7))
if mibBuilder.loadTexts: wmiNetworking.setStatus('current')
if mibBuilder.loadTexts: wmiNetworking.setDescription('The Networking subcategory groups classes that represent network connections, network clients, and network connection settings such as the protocol used.')
win32IP4PersistedRouteTableTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1), )
if mibBuilder.loadTexts: win32IP4PersistedRouteTableTable.setStatus('current')
if mibBuilder.loadTexts: win32IP4PersistedRouteTableTable.setDescription('The Win32_IP4PersistedRouteTable WMI class represents persisted IP routes. By default, the routes added to the routing table are not permanent. Rebooting the computer clears the routes from the table. However, the following Windows NT command makes the route persist after the computer is restarted: route -p add Persistent entries are automatically reinserted in the route table each time the route table is rebuilt. Windows NT stores persistent routes in the registry. This class is only applicable to IP4 and does not address IPX or IP6. This class was added for Windows Server 2003 family.')
win32IP4PersistedRouteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osprtIndex"))
if mibBuilder.loadTexts: win32IP4PersistedRouteTableEntry.setStatus('current')
if mibBuilder.loadTexts: win32IP4PersistedRouteTableEntry.setDescription('None')
osprtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtIndex.setStatus('current')
if mibBuilder.loadTexts: osprtIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osprtCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtCaption.setStatus('current')
if mibBuilder.loadTexts: osprtCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
osprtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtDescription.setStatus('current')
if mibBuilder.loadTexts: osprtDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
osprtDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtDestination.setStatus('current')
if mibBuilder.loadTexts: osprtDestination.setDescription('Destination IP address for this persisted route.')
osprtInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtInstallDate.setStatus('current')
if mibBuilder.loadTexts: osprtInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
osprtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtMask.setStatus('current')
if mibBuilder.loadTexts: osprtMask.setDescription('Mask used in this persisted entry. Use the logical AND operation to combine the mask with the destination address. Compare the result to the value in the ipRouteDest field.')
osprtMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtMetric1.setStatus('current')
if mibBuilder.loadTexts: osprtMetric1.setDescription("Primary routing metric for this persisted route. The semantics of this metric are determined by the routing protocol specified in the route's ipRouteProto value. If this property is not used, its value should be set to -1.")
osprtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtName.setStatus('current')
if mibBuilder.loadTexts: osprtName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
osprtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtNextHop.setStatus('current')
if mibBuilder.loadTexts: osprtNextHop.setDescription("IP address of the next hop of this persisted route. If the route is bound to an interface that is realized via a broadcast medium, this field contains the agent's IP address on that interface.")
osprtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osprtStatus.setStatus('current')
if mibBuilder.loadTexts: osprtStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
win32IP4RouteTableTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2), )
if mibBuilder.loadTexts: win32IP4RouteTableTable.setStatus('current')
if mibBuilder.loadTexts: win32IP4RouteTableTable.setDescription("The Win32_IP4RouteTable WMI class represents information that governs the routing of network data packets. For example, Internet packets are usually sent to a gateway and local packets are routed directly by the client's computer. Administrators can use this information to trace problems associated with misrouted packets, and also direct a computer to a new gateway as necessary. This class is only applicable to IP4 and does not address IPX or IP6. It is intended to model only the information shown as a result of typing the route print command from the command prompt. This class was added for Windows Server 2003 family.")
win32IP4RouteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "osrtIndex"))
if mibBuilder.loadTexts: win32IP4RouteTableEntry.setStatus('current')
if mibBuilder.loadTexts: win32IP4RouteTableEntry.setDescription('None')
osrtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtIndex.setStatus('current')
if mibBuilder.loadTexts: osrtIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osrtAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtAge.setStatus('current')
if mibBuilder.loadTexts: osrtAge.setDescription('Number of seconds since this route was last updated or otherwise determined to be correct. Whether the routing information is outdated can only be determined by knowing the routing protocol by which the route was learned.')
osrtCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtCaption.setStatus('current')
if mibBuilder.loadTexts: osrtCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
osrtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtDescription.setStatus('current')
if mibBuilder.loadTexts: osrtDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
osrtDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtDestination.setStatus('current')
if mibBuilder.loadTexts: osrtDestination.setDescription('Destination IP address for this route.')
osrtInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtInformation.setStatus('current')
if mibBuilder.loadTexts: osrtInformation.setDescription("Reference to MIB definitions specific to the particular routing protocol that is responsible for this route, as determined by the value specified in the route's ipRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER {0 0}, which is a syntactically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.")
osrtInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtInstallDate.setStatus('current')
if mibBuilder.loadTexts: osrtInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
osrtInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: osrtInterfaceIndex.setDescription("IP address of the next hop of this route. The value in this property is the same as the value in the InterfaceIndex property in the instances of Win32_NetworkAdapter and Win32_NetworkAdapterConfiguration that represent the network interface of the next hop of the route. In the case of a route bound to an interface that is realized using a broadcast medium, the value of this field is the agent's IP address on that interface.")
osrtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtMask.setStatus('current')
if mibBuilder.loadTexts: osrtMask.setDescription('Mask used in this entry. Masks should be joined with a logical AND with the destination address before being compared to the value in the ipRouteDest field.')
osrtMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtMetric1.setStatus('current')
if mibBuilder.loadTexts: osrtMetric1.setDescription('Primary routing metric for this route. The routing protocol specified in the ipRouteProto value for the route determines the interpretation of this property. Set the value of this property to -1 if it is not used.')
osrtMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtMetric2.setStatus('current')
if mibBuilder.loadTexts: osrtMetric2.setDescription('Alternate routing metric for this route. The routing protocol specified in the ipRouteProto value for the route determines the interpretation of this property. Set the value of this property to -1 if it is not used.')
osrtMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtMetric3.setStatus('current')
if mibBuilder.loadTexts: osrtMetric3.setDescription('Alternate routing metric for this route. The routing protocol specified in the ipRouteProto value for the route determines the interpretation of this property. Set the value of this property to -1 if it is not used.')
osrtMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtMetric4.setStatus('current')
if mibBuilder.loadTexts: osrtMetric4.setDescription('Alternate routing metric for this route. The routing protocol specified in the ipRouteProto value for the route determines the interpretation of this property. Set the value of this property to -1 if it is not used.')
osrtMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtMetric5.setStatus('current')
if mibBuilder.loadTexts: osrtMetric5.setDescription('Alternate routing metric for this route. The routing protocol specified in the ipRouteProto value for the route determines the interpretation of this property. Set the value of this property to -1 if it is not used.')
osrtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtName.setStatus('current')
if mibBuilder.loadTexts: osrtName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
osrtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtNextHop.setStatus('current')
if mibBuilder.loadTexts: osrtNextHop.setDescription("IP address of the next hop of this route. For a route that is bound to an interface realized via a broadcast medium, the value of this field is the agent's IP address on that interface.")
osrtProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isis", 9), ("esis", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtProtocol.setStatus('current')
if mibBuilder.loadTexts: osrtProtocol.setDescription('Routing mechanism through which this route was learned. Inclusion of values for gateway routing protocols does not imply that hosts must support those protocols.')
osrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtStatus.setStatus('current')
if mibBuilder.loadTexts: osrtStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from the CIM_ManagedSystemElement class.")
osrtType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrtType.setStatus('current')
if mibBuilder.loadTexts: osrtType.setDescription('Type of route.')
win32NetworkClientTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3), )
if mibBuilder.loadTexts: win32NetworkClientTable.setStatus('current')
if mibBuilder.loadTexts: win32NetworkClientTable.setDescription('The Win32_NetworkClient WMI class represents a network client on a Windows system. Any computer system on the network with a client relationship to the system is a descendent (or member) of this class (for example, a computer running Windows 2000 Workstation or Windows 98 that is part of a Windows 2000 domain).')
win32NetworkClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3, 1), ).setIndexNames((0, "INFORMANT-OS", "osnclIndex"))
if mibBuilder.loadTexts: win32NetworkClientEntry.setStatus('current')
if mibBuilder.loadTexts: win32NetworkClientEntry.setDescription('None')
osnclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnclIndex.setStatus('current')
if mibBuilder.loadTexts: osnclIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osnclCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnclCaption.setStatus('current')
if mibBuilder.loadTexts: osnclCaption.setDescription('Short description (one-line string) of the object.')
osnclDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnclDescription.setStatus('current')
if mibBuilder.loadTexts: osnclDescription.setDescription('Description of the object.')
osnclInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnclInstallDate.setStatus('current')
if mibBuilder.loadTexts: osnclInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
osnclManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnclManufacturer.setStatus('current')
if mibBuilder.loadTexts: osnclManufacturer.setDescription("Name of the manufacturer of the network client running on the Windows system. Example: 'Microsoft Corporation'")
osnclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnclName.setStatus('current')
if mibBuilder.loadTexts: osnclName.setDescription("Network name of the network client running on a Windows system. Example: 'Microsoft Windows Network'")
osnclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnclStatus.setStatus('current')
if mibBuilder.loadTexts: osnclStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
win32NetworkConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4), )
if mibBuilder.loadTexts: win32NetworkConnectionTable.setStatus('current')
if mibBuilder.loadTexts: win32NetworkConnectionTable.setDescription('The Win32_NetworkClient WMI class represents a network client on a Windows system. Any computer system on the network with a client relationship to the system is a descendent (or member) of this class (for example, a computer running Windows 2000 Workstation or Windows 98 that is part of a Windows 2000 domain).')
win32NetworkConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1), ).setIndexNames((0, "INFORMANT-OS", "osncoIndex"))
if mibBuilder.loadTexts: win32NetworkConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: win32NetworkConnectionEntry.setDescription('None')
osncoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoIndex.setStatus('current')
if mibBuilder.loadTexts: osncoIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osncoAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoAccessMask.setStatus('current')
if mibBuilder.loadTexts: osncoAccessMask.setDescription('List of access rights to the given file or directory held by the user or group on whose behalf the instance is returned. This property is only supported under Windows NT and Windows 2000. On Windows 98 and on Windows NT/Windows 2000 FAT volumes, the FULL_ACCESS value is returned instead, indicating no security has been set on the object. Value Meaning 0 FILE_DATA_READ (file) FILE_LIST_DIRECTORY (directory) Grants the right to read data from the file. For a directory, this value grants the right to list the contents of the directory. 1 FILE_WRITE_DATA (file) FILE_ADD_FILE (directory) Grants the right to write data to the file. For a directory, this value grants the right to create a file in the directory. 2 FILE_APPEND_DATA (file) FILE_ADD_SUBDIRECTORY (directory) Grants the right to append data to the file. For a directory, this value grants the right to create a subdirectory. 3 FILE_READ_EA Grants the right to read extended attributes. 4 FILE_WRITE_EA Grants the right to write extended attributes. 5 FILE_TRAVERSE Grants the right to execute a file. For a directory, the directory can be traversed. 6 FILE_DELETE_CHILD Grants the right to delete a directory and all the files it contains (its children), even if the files are read-only. 7 FILE_READ_ATTRIBUTES Grants the right to read file attributes. 8 FILE_WRITE_ATTRIBUTES Grants the right to change file attributes. 16 DELETE Grants delete access. 17 READ_CONTROL Grants read access to the security descriptor and owner. 18 WRITE_DAC Grants write access to the discretionary ACL. 19 WRITE_OWNER Assigns the write owner. 20 SYNCHRONIZE Synchronizes access and allows a process to wait for an object to enter the signaled state. ')
osncoCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoCaption.setStatus('current')
if mibBuilder.loadTexts: osncoCaption.setDescription('Short description (one-line string) of the object.')
osncoComment = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoComment.setStatus('current')
if mibBuilder.loadTexts: osncoComment.setDescription('Comment supplied by the network provider.')
osncoConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connected", 1), ("error", 2), ("paused", 3), ("disconnected", 4), ("connecting", 5), ("reconnecting", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoConnectionState.setStatus('current')
if mibBuilder.loadTexts: osncoConnectionState.setDescription('Current state of the network connection.')
osncoConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentConnection", 1), ("persistentConnection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoConnectionType.setStatus('current')
if mibBuilder.loadTexts: osncoConnectionType.setDescription('Persistence type of the connection used for connecting to the network.')
osncoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoDescription.setStatus('current')
if mibBuilder.loadTexts: osncoDescription.setDescription('Description of the object.')
osncoDisplayType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("domain", 1), ("generic", 2), ("server", 3), ("share", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoDisplayType.setStatus('current')
if mibBuilder.loadTexts: osncoDisplayType.setDescription('Network object should be displayed in a network browsing user interface.')
osncoInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoInstallDate.setStatus('current')
if mibBuilder.loadTexts: osncoInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
osncoLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoLocalName.setStatus('current')
if mibBuilder.loadTexts: osncoLocalName.setDescription("Local name of the connected network device. Example: 'c:\\public'")
osncoName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoName.setStatus('current')
if mibBuilder.loadTexts: osncoName.setDescription("Name of the current network connection. It is the combination of the values in RemoteName and LocalName. Example: '\\\\NTRELEASE (c:\\public)'")
osncoPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoPersistent.setStatus('current')
if mibBuilder.loadTexts: osncoPersistent.setDescription('Connection will be reconnected automatically by the operating system on the next logon.')
osncoProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoProviderName.setStatus('current')
if mibBuilder.loadTexts: osncoProviderName.setDescription('Name of the provider that owns the resource. This property can be NULL if the provider name is unknown.')
osncoRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoRemoteName.setStatus('current')
if mibBuilder.loadTexts: osncoRemoteName.setDescription("Remote network resource name for a network resource. For a current or persistent connection, RemoteName contains the network name associated with the name of the value in the LocalName property. The name in RemoteName must follow the network provider's naming conventions. Example: '\\\\NTRELEASE'")
osncoRemotePath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoRemotePath.setStatus('current')
if mibBuilder.loadTexts: osncoRemotePath.setDescription("Full path to the network resource. Example: '\\\\infosrv1\\public'")
osncoResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disk", 1), ("print", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoResourceType.setStatus('current')
if mibBuilder.loadTexts: osncoResourceType.setDescription('Type of resource to enumerate or connect to.')
osncoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoStatus.setStatus('current')
if mibBuilder.loadTexts: osncoStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
osncoUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 4, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osncoUserName.setStatus('current')
if mibBuilder.loadTexts: osncoUserName.setDescription("User name or the default user name used to establish a network connection. Example: 'SYSTEM'")
win32NetworkProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5), )
if mibBuilder.loadTexts: win32NetworkProtocolTable.setStatus('current')
if mibBuilder.loadTexts: win32NetworkProtocolTable.setDescription('The Win32_NetworkProtocol WMI class represents a protocol and its network characteristics on a Win32 computer system.')
win32NetworkProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1), ).setIndexNames((0, "INFORMANT-OS", "osnpIndex"))
if mibBuilder.loadTexts: win32NetworkProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: win32NetworkProtocolEntry.setDescription('None')
osnpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpIndex.setStatus('current')
if mibBuilder.loadTexts: osnpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osnpCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpCaption.setStatus('current')
if mibBuilder.loadTexts: osnpCaption.setDescription('Short description (one-line string) of the object.')
osnpConnectionlessService = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpConnectionlessService.setStatus('current')
if mibBuilder.loadTexts: osnpConnectionlessService.setDescription('Protocol supports connectionless service. A connectionless (datagram) service describes a communications protocol or transport in which data packets are routed independently of each other and may follow different routes and arrive in a different order from that in which they were sent. Conversely, a connection-oriented service provides a virtual circuit through which data packets are received in the same order they were transmitted. If the connection between machines fails, the application is notified.')
osnpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpDescription.setStatus('current')
if mibBuilder.loadTexts: osnpDescription.setDescription('Description of the object.')
osnpGuaranteesDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpGuaranteesDelivery.setStatus('current')
if mibBuilder.loadTexts: osnpGuaranteesDelivery.setDescription('Protocol supports guaranteed delivery of data packets. If this flag is FALSE, there is no guarantee that all data sent will reach the intended destination.')
osnpGuaranteesSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpGuaranteesSequencing.setStatus('current')
if mibBuilder.loadTexts: osnpGuaranteesSequencing.setDescription('Protocol guarantees that data will arrive in the order in which it was sent. Note that this characteristic does not guarantee delivery of the data, only its order.')
osnpInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpInstallDate.setStatus('current')
if mibBuilder.loadTexts: osnpInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
osnpMaximumAddressSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 8), Gauge32()).setUnits('Characters').setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpMaximumAddressSize.setStatus('current')
if mibBuilder.loadTexts: osnpMaximumAddressSize.setDescription('Maximum length of a socket address supported by the protocol. Socket addresses may be items like URLs (www.microsoft.com) or IP addresses (130.215.24.1).')
osnpMaximumMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 9), Gauge32()).setUnits('Characters').setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpMaximumMessageSize.setStatus('current')
if mibBuilder.loadTexts: osnpMaximumMessageSize.setDescription('Maximum message size supported by the protocol. This is the maximum size of a message that can be sent from or received by the host. For protocols that do not support message framing, the actual maximum size of a message that can be sent to a given address may be less than this value.')
osnpMessageOriented = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpMessageOriented.setStatus('current')
if mibBuilder.loadTexts: osnpMessageOriented.setDescription('Protocol is message-oriented. A message-oriented protocol uses packets of data to transfer information. Conversely, stream-oriented protocols transfer data as a continuous stream of bytes.')
osnpMinimumAddressSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 11), Gauge32()).setUnits('Characters').setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpMinimumAddressSize.setStatus('current')
if mibBuilder.loadTexts: osnpMinimumAddressSize.setDescription('Minimum length of a socket address supported by the protocol.')
osnpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpName.setStatus('current')
if mibBuilder.loadTexts: osnpName.setDescription("Name for the protocol. Example: 'TCP/IP'")
osnpPseudoStreamOriented = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpPseudoStreamOriented.setStatus('current')
if mibBuilder.loadTexts: osnpPseudoStreamOriented.setDescription('Protocol is a message-oriented protocol that can receive variable-length data packets or streamed data for all receive operations. This optional capability is useful when an application does not want the protocol to frame messages, and requires stream-oriented characteristics. If TRUE, the protocol is pseudo stream-oriented.')
osnpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpStatus.setStatus('current')
if mibBuilder.loadTexts: osnpStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
osnpSupportsBroadcasting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsBroadcasting.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsBroadcasting.setDescription('Protocol supports a mechanism for broadcasting messages across the network.')
osnpSupportsConnectData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsConnectData.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsConnectData.setDescription('Protocol allows data to be connected across the network.')
osnpSupportsDisconnectData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsDisconnectData.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsDisconnectData.setDescription('Protocol allows data to be disconnected across the network.')
osnpSupportsEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsEncryption.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsEncryption.setDescription('Protocol supports data encryption.')
osnpSupportsExpeditedData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsExpeditedData.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsExpeditedData.setDescription('Protocol supports expedited data (also known as urgent data) across the network. Expedited data can bypass flow control and receive priority over normal data packets.')
osnpSupportsFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsFragmentation.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsFragmentation.setDescription('Protocol supports transmitting the data in fragments. Physical network maximum transfer unit (MTU) is hidden from applications. Each media type has a maximum frame size that cannot be exceeded. The link layer is responsible for discovering the MTU and reporting it to the protocols being used.')
osnpSupportsGracefulClosing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsGracefulClosing.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsGracefulClosing.setDescription('Protocol supports two-phase close operations, also known as graceful close operations. If not, the protocol supports only abortive close operations.')
osnpSupportsGuaranteedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsGuaranteedBandwidth.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsGuaranteedBandwidth.setDescription('Protocol has a mechanism to establish and maintain a guaranteed bandwidth.')
osnpSupportsMulticasting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsMulticasting.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsMulticasting.setDescription('Protocol supports multicasting.')
osnpSupportsQualityofService = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osnpSupportsQualityofService.setStatus('current')
if mibBuilder.loadTexts: osnpSupportsQualityofService.setDescription('Protocol is capable of Quality of Service (QOS) support by the underlying layered service provider or transport carrier. QOS is a collection of components that enable differentiation and preferential treatment for subsets of data transmitted over the network. QOS loosely means subsets of data get higher priority or guaranteed service when traversing a network.')
win32NTDomainTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6), )
if mibBuilder.loadTexts: win32NTDomainTable.setStatus('current')
if mibBuilder.loadTexts: win32NTDomainTable.setDescription('The Win32_NTDomain WMI class represents a Windows NT domain. This class is new for Windows XP.')
win32NTDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1), ).setIndexNames((0, "INFORMANT-OS", "osdoIndex"))
if mibBuilder.loadTexts: win32NTDomainEntry.setStatus('current')
if mibBuilder.loadTexts: win32NTDomainEntry.setDescription('None')
osdoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoIndex.setStatus('current')
if mibBuilder.loadTexts: osdoIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osdoCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoCaption.setStatus('current')
if mibBuilder.loadTexts: osdoCaption.setDescription('Short description of the object. This property is inherited from CIM_ManagedSystemElement.')
osdoClientSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoClientSiteName.setStatus('current')
if mibBuilder.loadTexts: osdoClientSiteName.setDescription('Name of the site where the domain controller is configured. This value can be NULL.')
osdoCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoCreationClassName.setStatus('current')
if mibBuilder.loadTexts: osdoCreationClassName.setDescription('Name of the first concrete class in the inheritance chain that is used to create an instance. You can use this property with other properties of the class to identify all instances of the class and its subclasses. This property is inherited from CIM_System.')
osdoDcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDcSiteName.setStatus('current')
if mibBuilder.loadTexts: osdoDcSiteName.setDescription('Name of the site where the domain controller is located. This value can be NULL.')
osdoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDescription.setStatus('current')
if mibBuilder.loadTexts: osdoDescription.setDescription('Comment that describes the link. This property is inherited from CIM_ManagedSystemElement.')
osdoDNSForestName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDNSForestName.setStatus('current')
if mibBuilder.loadTexts: osdoDNSForestName.setDescription('Name of the root of the DNS tree.')
osdoDomainControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDomainControllerAddress.setStatus('current')
if mibBuilder.loadTexts: osdoDomainControllerAddress.setDescription('Address of the discovered domain controller.')
osdoDomainControllerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dnsINETADDRESS", 1), ("dnsNETBIOSADDRESS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDomainControllerAddressType.setStatus('current')
if mibBuilder.loadTexts: osdoDomainControllerAddressType.setDescription('Type of address specified in the DomainControllerAddress property.')
osdoDomainControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDomainControllerName.setStatus('current')
if mibBuilder.loadTexts: osdoDomainControllerName.setDescription('Computer name for the discovered domain controller.')
osdoDomainGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDomainGUID.setStatus('current')
if mibBuilder.loadTexts: osdoDomainGUID.setDescription('Globally unique identifier (GUID) of the domain controller. This property is 0 (zero) if the domain controller does not have a GUID.')
osdoDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDomainName.setStatus('current')
if mibBuilder.loadTexts: osdoDomainName.setDescription('Name of the domain. Example: microsoft.com')
osdoDSDirectoryServiceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSDirectoryServiceFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSDirectoryServiceFlag.setDescription('If TRUE, the domain controller is a directory service server.')
osdoDSDnsControllerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSDnsControllerFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSDnsControllerFlag.setDescription('If true the Domain Controller Name is in DNS format. Example: www.mynode.com or 135.5.33.19')
osdoDSDnsDomainFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSDnsDomainFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSDnsDomainFlag.setDescription('If TRUE, the DomainName value is in DNS format.')
osdoDSDnsForestFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSDnsForestFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSDnsForestFlag.setDescription('If TRUE, the DNSForestName value is in DNS format.')
osdoDSGlobalCatalogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSGlobalCatalogFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSGlobalCatalogFlag.setDescription('If TRUE, the domain controller is a Global Catalog server for the DNSForestName value.')
osdoDSKerberosDistCenterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSKerberosDistCenterFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSKerberosDistCenterFlag.setDescription('If TRUE, the domain controller is a Kerberos Key Distribution Center for the domain.')
osdoDSPriDomainControllerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSPriDomainControllerFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSPriDomainControllerFlag.setDescription('If TRUE, the domain controller is the Primary Domain Controller.')
osdoDSTimeServiceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSTimeServiceFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSTimeServiceFlag.setDescription('If TRUE, the domain is running the Windows Time service.')
osdoDSWritableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoDSWritableFlag.setStatus('current')
if mibBuilder.loadTexts: osdoDSWritableFlag.setDescription('If TRUE, the domain controller hosts a writeable DS or Security Accounts Manager (SAM).')
osdoInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoInstallDate.setStatus('current')
if mibBuilder.loadTexts: osdoInstallDate.setDescription('Date and time when an object is installed. An object does not need a value to indicate that it is installed. This property is inherited from CIM_ManagedSystemElement.')
osdoName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoName.setStatus('current')
if mibBuilder.loadTexts: osdoName.setDescription('Name of an object. This property is inherited from CIM_ManagedSystemElement.')
osdoNameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoNameFormat.setStatus('current')
if mibBuilder.loadTexts: osdoNameFormat.setDescription('Format to generate the system name using the subclass heuristic. This property is inherited from CIM_System.')
osdoPrimaryOwnerContact = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoPrimaryOwnerContact.setStatus('current')
if mibBuilder.loadTexts: osdoPrimaryOwnerContact.setDescription('Contact information for the primary system owner. This property is inherited from CIM_System.')
osdoPrimaryOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 26), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoPrimaryOwnerName.setStatus('current')
if mibBuilder.loadTexts: osdoPrimaryOwnerName.setDescription('Name of the primary system owner. This property is inherited from CIM_System.')
osdoRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoRoles.setStatus('current')
if mibBuilder.loadTexts: osdoRoles.setDescription("Roles for this system in the IT environment. This property is inherited from CIM_System. Example: 'Switch' or 'Bridge'")
osdoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 7, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdoStatus.setStatus('current')
if mibBuilder.loadTexts: osdoStatus.setDescription('Current status of an object. Various operational and non-operational statuses can be defined. Operational statuses include: OK, Degraded, and Pred Fail, which is an element such as a SMART-enabled hard drive that may be functioning properly, but predicts a failure in the near future. Non-operational statuses include: Error, Starting, Stopping, and Service, which can apply during mirror resilvering of a disk, reloading a user permissions list, or other administrative work. Not all status work is online, but the managed element is not OK or in one of the other states. This property is inherited from CIM_ManagedSystemElement.')
wmiOperatingSystemSettings = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8))
if mibBuilder.loadTexts: wmiOperatingSystemSettings.setStatus('current')
if mibBuilder.loadTexts: wmiOperatingSystemSettings.setDescription('The Operating System Settings subcategory groups classes that represent the Operating System and its settings.')
win32BootConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1), )
if mibBuilder.loadTexts: win32BootConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: win32BootConfigurationTable.setDescription('The Win32_BootConfiguration WMI class represents the boot configuration of a Windows system.')
win32BootConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osbcIndex"))
if mibBuilder.loadTexts: win32BootConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: win32BootConfigurationEntry.setDescription('None')
osbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcIndex.setStatus('current')
if mibBuilder.loadTexts: osbcIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osbcBootDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcBootDirectory.setStatus('current')
if mibBuilder.loadTexts: osbcBootDirectory.setDescription("Path to the system files required for booting the system. Example: 'C:\\Windows'")
osbcCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcCaption.setStatus('current')
if mibBuilder.loadTexts: osbcCaption.setDescription('Short description (one-line string) of the CIM_Setting object. This property is inherited from CIM_Setting.')
osbcConfigurationPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcConfigurationPath.setStatus('current')
if mibBuilder.loadTexts: osbcConfigurationPath.setDescription('Path to the configuration files. This value may be similar to the value in the BootDirectory property.')
osbcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcDescription.setStatus('current')
if mibBuilder.loadTexts: osbcDescription.setDescription('Description of the CIM_Setting object. This property is inherited from CIM_Setting.')
osbcLastDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcLastDrive.setStatus('current')
if mibBuilder.loadTexts: osbcLastDrive.setDescription("Last drive letter to which a physical drive is assigned. Example: 'E:'")
osbcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcName.setStatus('current')
if mibBuilder.loadTexts: osbcName.setDescription('Name of the boot configuration. It is an identifier for the boot configuration.')
osbcScratchDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcScratchDirectory.setStatus('current')
if mibBuilder.loadTexts: osbcScratchDirectory.setDescription('Directory where temporary files can reside during boot time.')
osbcSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 9), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcSettingID.setStatus('current')
if mibBuilder.loadTexts: osbcSettingID.setDescription('Identifier by which the CIM_Setting object is known. This property is inherited from CIM_Setting.')
osbcTempDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osbcTempDirectory.setStatus('current')
if mibBuilder.loadTexts: osbcTempDirectory.setDescription("Directory where temporary files are stored. Example: 'C:\\TEMP'")
win32ComputerSystemTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2), )
if mibBuilder.loadTexts: win32ComputerSystemTable.setStatus('current')
if mibBuilder.loadTexts: win32ComputerSystemTable.setDescription('The Win32_ComputerSystem WMI class represents a computer operating system in a Windows environment.')
win32ComputerSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "oscsIndex"))
if mibBuilder.loadTexts: win32ComputerSystemEntry.setStatus('current')
if mibBuilder.loadTexts: win32ComputerSystemEntry.setDescription('None')
oscsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsIndex.setStatus('current')
if mibBuilder.loadTexts: oscsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
oscsAdminPasswordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("notImplemented", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsAdminPasswordStatus.setStatus('current')
if mibBuilder.loadTexts: oscsAdminPasswordStatus.setDescription('System hardware security settings for administrator password status.')
oscsAutomaticResetBootOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsAutomaticResetBootOption.setStatus('current')
if mibBuilder.loadTexts: oscsAutomaticResetBootOption.setDescription('Automatic reset boot option is enabled.')
oscsAutomaticResetCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsAutomaticResetCapability.setStatus('current')
if mibBuilder.loadTexts: oscsAutomaticResetCapability.setDescription('Automatic reset is enabled. This capability is available on Windows XP, Windows 2000, and Windows NT, but not on Windows 98 or Windows 95. ')
oscsBootOptionOnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reserved", 1), ("operatingSystem", 2), ("systemUtilities", 3), ("doNotReboot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsBootOptionOnLimit.setStatus('current')
if mibBuilder.loadTexts: oscsBootOptionOnLimit.setDescription('Boot option limit is ON. Identifies the system action when the ResetLimit value is reached.')
oscsBootOptionOnWatchDog = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reserved", 1), ("operatingSystem", 2), ("systemUtilities", 3), ("doNotReboot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsBootOptionOnWatchDog.setStatus('current')
if mibBuilder.loadTexts: oscsBootOptionOnWatchDog.setDescription('Type of reboot action after the time on the watchdog timer is elapsed.')
oscsBootROMSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsBootROMSupported.setStatus('current')
if mibBuilder.loadTexts: oscsBootROMSupported.setDescription('Indicates whether or not a boot ROM is supported.')
oscsBootupState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalBoot", 1), ("failsafeBoot", 2), ("failsafeWithNetworkBoot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsBootupState.setStatus('current')
if mibBuilder.loadTexts: oscsBootupState.setDescription('System is started. Fail-safe boot bypasses the user startup files also called SafeBoot.')
oscsCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsCaption.setStatus('current')
if mibBuilder.loadTexts: oscsCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
oscsChassisBootupState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("safes", 3), ("warning", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsChassisBootupState.setStatus('current')
if mibBuilder.loadTexts: oscsChassisBootupState.setDescription('Bootup state of the chassis.')
oscsCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsCreationClassName.setStatus('current')
if mibBuilder.loadTexts: oscsCreationClassName.setDescription('Name of the first concrete class in the inheritance chain of an instance. You can use this property with other properties of the class to identify all instances of the class and its subclasses. This property is inherited from CIM_System')
oscsCurrentTimeZone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 12), Integer32()).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsCurrentTimeZone.setStatus('current')
if mibBuilder.loadTexts: oscsCurrentTimeZone.setDescription('Amount of time the unitary computer system is offset from Universal Time Coordinate (UTC).')
oscsDaylightInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsDaylightInEffect.setStatus('current')
if mibBuilder.loadTexts: oscsDaylightInEffect.setDescription('Daylight savings mode is ON.')
oscsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsDescription.setStatus('current')
if mibBuilder.loadTexts: oscsDescription.setDescription('Description of the object.')
oscsDNSHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsDNSHostName.setStatus('current')
if mibBuilder.loadTexts: oscsDNSHostName.setDescription('Name of local computer according to the domain name server (DNS). This property is new for Windows Server 2003. ')
oscsDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsDomain.setStatus('current')
if mibBuilder.loadTexts: oscsDomain.setDescription('Name of the domain to which a computer belongs. Note If the computer is not part of a domain, then the name of the workgroup will be returned.')
oscsDomainRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standaloneWorkstation", 0), ("memberWorkstation", 1), ("standaloneServer", 2), ("memberServer", 3), ("backupDomainController", 4), ("primaryDomainController", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsDomainRole.setStatus('current')
if mibBuilder.loadTexts: oscsDomainRole.setDescription('Role of a computer in an assigned domain workgroup. A domain workgroup is a collection of computers on the same network. For example, a DomainRole property may show that a computer is a member workstation. This property is inherited from CIM_ManagedSystemElement.')
oscsEnableDaylightSavingsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsEnableDaylightSavingsTime.setStatus('current')
if mibBuilder.loadTexts: oscsEnableDaylightSavingsTime.setDescription('Windows XP, Windows Server 2003: Enables daylight savings time (DST) on a machine. A value of true indicates that the system time changes to an hour ahead or behind when DST starts or ends. A value of false indicates that the system time does not change to an hour ahead or behind when DST starts or ends. A value of NULL indicates that the DST status is unknown on a system. ')
oscsFrontPanelResetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notImplemented", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsFrontPanelResetStatus.setStatus('current')
if mibBuilder.loadTexts: oscsFrontPanelResetStatus.setDescription('The following table identifies the hardware security settings for the reset button on a computer.')
oscsInfraredSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsInfraredSupported.setStatus('current')
if mibBuilder.loadTexts: oscsInfraredSupported.setDescription('Infrared (IR) port exists on a computer system.')
oscsInitialLoadInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsInitialLoadInfo.setStatus('current')
if mibBuilder.loadTexts: oscsInitialLoadInfo.setDescription('Data needed to find the initial load device or boot service to request the operating system start up. This property is inherited from CIM_UnitaryComputerSystem.')
oscsInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsInstallDate.setStatus('current')
if mibBuilder.loadTexts: oscsInstallDate.setDescription('Object is installed. An object does not need a value to indicate that it is installed. This property is inherited from CIM_ManagedSystemElement.')
oscsKeyboardPasswordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notImplemented", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsKeyboardPasswordStatus.setStatus('current')
if mibBuilder.loadTexts: oscsKeyboardPasswordStatus.setDescription('System hardware security settings for Keyboard Password Status.')
oscsLastLoadInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsLastLoadInfo.setStatus('current')
if mibBuilder.loadTexts: oscsLastLoadInfo.setDescription('Array entry of the InitialLoadInfo property that contains the data to boot the operating system that is loaded. This property is inherited from CIM_UnitaryComputerSystem.')
oscsManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsManufacturer.setStatus('current')
if mibBuilder.loadTexts: oscsManufacturer.setDescription('Name of a computer manufacturer. Example: Adventure Works')
oscsModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsModel.setStatus('current')
if mibBuilder.loadTexts: oscsModel.setDescription('Product name that a manufacturer gives to a computer. This property must have a value.')
oscsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsName.setStatus('current')
if mibBuilder.loadTexts: oscsName.setDescription('Key of a CIM_System instance in an enterprise environment. This property is inherited from CIM_ManagedSystemElement.')
oscsNameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ip", 2), ("dial", 3), ("hid", 4), ("nwa", 5), ("hwa", 6), ("x25", 7), ("isdn", 8), ("ipx", 9), ("dcc", 10), ("icd", 11), ("e164", 12), ("sna", 13), ("osi", 14), ("other", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsNameFormat.setStatus('current')
if mibBuilder.loadTexts: oscsNameFormat.setDescription('Computer system Name value that is generated automatically. The CIM_ComputerSystem object and its derivatives are top level objects of the Common Information Model (CIM). They provide the scope for several components. Unique CIM_System keys are required, but you can define a heuristic to create the CIM_ComputerSystem name that generates the same name, and is independent from the discovery protocol. This prevents inventory and management problems when the same asset or entity is discovered multiple times, but cannot be resolved to one object. Using a heuristic is recommended but not required. The heuristic is outlined in the CIM V2 Common Model specification, and assumes that the documented rules are used to determine and assign a name. The NameFormat values list defines the order to assign a computer system name. Several rules map to the same value. The CIM_ComputerSystem Name value that is calculated using the heuristic is the key value of the system. However, you can use aliases to assign a different name for CIM_ComputerSystem, which can be more unique to your company. This property is inherited from CIM_System.')
oscsNetworkServerModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsNetworkServerModeEnabled.setStatus('current')
if mibBuilder.loadTexts: oscsNetworkServerModeEnabled.setDescription('Network Server Mode is enabled.')
oscsNumberOfProcessors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsNumberOfProcessors.setStatus('current')
if mibBuilder.loadTexts: oscsNumberOfProcessors.setDescription('Number of physical processors currently available on a system. This is the number of enabled processors for a system, which does not include the disabled processors. If a computer system has two physical processors each containing two logical processors, then the value of NumberOfProcessors is 2 and NumberOfLogicalProcessors is 4. The processors may be multi-core or they may be hyperthreading processors. For more information, see Remarks. Windows Server 2003, Windows XP, and Windows 2000: Because the NumberOfLogicalProcessors property is not available, NumberOfProcessors indicates the number of logical processors available in the system. In the case of a computer system that has two physical processors each containing two logical processors, the value of NumberOfProcessors is 4.')
oscsOEMLogoBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsOEMLogoBitmap.setStatus('current')
if mibBuilder.loadTexts: oscsOEMLogoBitmap.setDescription('List of data for a bitmap that the original equipment manufacturer (OEM) creates.')
oscsOEMStringArray = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsOEMStringArray.setStatus('current')
if mibBuilder.loadTexts: oscsOEMStringArray.setDescription('List of free form strings that an OEM defines. For example, an OEM defines the part numbers for system reference documents, manufacturer contact information, and so on.')
oscsPartOfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPartOfDomain.setStatus('current')
if mibBuilder.loadTexts: oscsPartOfDomain.setDescription('Windows XP, Windows Server 2003: If true, the computer is part of a domain or workgroup. If the value is NULL, the computer is not a part of a domain or workgroup, or the status is unknown. ')
oscsPauseAfterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 34), Integer32()).setUnits('Milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPauseAfterReset.setStatus('current')
if mibBuilder.loadTexts: oscsPauseAfterReset.setDescription('Time delay before a reboot is initiated in milliseconds. It is used after a system power cycle, local or remote system reset, and automatic system reset. A value of -1 (minus one) indicates that the pause value is unknown.')
oscsPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 35), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: oscsPowerManagementCapabilities.setDescription('Specific power capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled, but the exact setting is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5; Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5; and Time set to a specific date and time, or interval to power ON. This property is inherited from CIM_UnitaryComputerSystem. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
oscsPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: oscsPowerManagementSupported.setDescription('Device can be power-managed, for example, a device can be put into suspend mode, and so on. This property does not indicate that power management features are enabled currently, but it does indicate that the logical device is capable of power management. This property is inherited from CIM_UnitaryComputerSystem.')
oscsPowerOnPasswordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notImplemented", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPowerOnPasswordStatus.setStatus('current')
if mibBuilder.loadTexts: oscsPowerOnPasswordStatus.setDescription('System hardware security settings for Power On Password Status.')
oscsPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("fullPower", 1), ("powerSaveLowPowerMode", 2), ("powerSaveStandby", 3), ("powerSaveUnknown", 4), ("powerCycle", 5), ("powerOff", 6), ("powerSaveWarning", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPowerState.setStatus('current')
if mibBuilder.loadTexts: oscsPowerState.setDescription('Current power state of a computer and its associated operating system. The power saving states have the following values: Value 4 (Unknown) indicates that the system is known to be in a power save mode, but its exact status in this mode is unknown; 2 (Low Power Mode) indicates that the system is in a power save state, but still functioning and may exhibit degraded performance; 3 (Standby) indicates that the system is not functioning, but could be brought to full power quickly; and 7 (Warning) indicates that the computerSystem is in a warning state and a power save mode. This property is inherited from CIM_UnitaryComputerSystem.')
oscsPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("safe", 3), ("warning", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPowerSupplyState.setStatus('current')
if mibBuilder.loadTexts: oscsPowerSupplyState.setDescription('State of the power supply or supplies when last booted.')
oscsPrimaryOwnerContact = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPrimaryOwnerContact.setStatus('current')
if mibBuilder.loadTexts: oscsPrimaryOwnerContact.setDescription('Contact information for the primary system owner, for example, phone number, e-mail address, and so on. This property is inherited from CIM_System.')
oscsPrimaryOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 41), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPrimaryOwnerName.setStatus('current')
if mibBuilder.loadTexts: oscsPrimaryOwnerName.setDescription('Name of the primary system owner. This property is inherited from CIM_System.')
oscsResetCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("nonrecoverable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsResetCapability.setStatus('current')
if mibBuilder.loadTexts: oscsResetCapability.setDescription('If enabled, the value is 4 and the unitary computer system can be reset using the power and reset buttons. If disabled the value is 3, and a reset is not allowed. This property is inherited from CIM_UnitaryComputerSystem.')
oscsResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsResetCount.setStatus('current')
if mibBuilder.loadTexts: oscsResetCount.setDescription('Number of automatic resets since the last reset. A value of -1 (minus one) indicates that the count is unknown.')
oscsResetLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsResetLimit.setStatus('current')
if mibBuilder.loadTexts: oscsResetLimit.setDescription('Number of consecutive times a system reset is attempted. A value of -1 (minus one) indicates that the limit is unknown.')
oscsRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 45), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsRoles.setStatus('current')
if mibBuilder.loadTexts: oscsRoles.setDescription('List that specifies the roles of a system in the information technology environment. This property is inherited from CIM_System.')
oscsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsStatus.setStatus('current')
if mibBuilder.loadTexts: oscsStatus.setDescription('Current status of an object. Various operational and non-operational statuses can be defined. Operational statuses include: OK, Degraded, and Pred Fail, which is an element such as a SMART-enabled hard drive that may be functioning properly, but predicts a failure in the near future. Non-operational statuses include: Error, Starting, Stopping, and Service, which can apply during mirror resilvering of a disk, reloading a user permissions list, or other administrative work. Not all status work is online, but the managed element is not OK or in one of the other states. This property is inherited from CIM_ManagedSystemElement.')
oscsSupportContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 47), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsSupportContactDescription.setStatus('current')
if mibBuilder.loadTexts: oscsSupportContactDescription.setDescription('List of the support contact information for the Windows operating system.')
oscsSystemStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsSystemStartupDelay.setStatus('current')
if mibBuilder.loadTexts: oscsSystemStartupDelay.setDescription('Time to delay before starting the Windows operating system in seconds.')
oscsSystemStartupOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 49), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsSystemStartupOptions.setStatus('current')
if mibBuilder.loadTexts: oscsSystemStartupOptions.setDescription('List of the options for starting up the Windows operating system. This property must have a value.')
oscsSystemStartupSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsSystemStartupSetting.setStatus('current')
if mibBuilder.loadTexts: oscsSystemStartupSetting.setDescription('Index of the default start up profile. This value is calculated so that it usually returns 0 (zero), because at write-time the profile string is physically moved to the top of the list, which is how Windows NT determines the default value.')
oscsSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("x86BasedPC", 1), ("mipsBasedPC", 2), ("alphaBasedPC", 3), ("powerPC", 4), ("shxPC", 5), ("strongARMPC", 6), ("n64bitIntelPC", 7), ("n64bitAlphaPC", 8), ("unknown", 9), ("x86Nec98PC", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsSystemType.setStatus('current')
if mibBuilder.loadTexts: oscsSystemType.setDescription('System running on the Windows computer. This property must have a value.')
oscsThermalState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("safe", 3), ("warning", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsThermalState.setStatus('current')
if mibBuilder.loadTexts: oscsThermalState.setDescription('Thermal state of the system when last booted.')
oscsTotalPhysicalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 53), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsTotalPhysicalMemory.setStatus('current')
if mibBuilder.loadTexts: oscsTotalPhysicalMemory.setDescription('Total size of physical memory. Example: 67108864')
oscsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 54), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsUserName.setStatus('current')
if mibBuilder.loadTexts: oscsUserName.setDescription('Name of a user that is logged on currently. This property must have a value. In a terminal services session, UserName returns the name of the user that is logged on to the console not the user logged on during the terminal service session. Example: jeffsmith')
oscsWakeUpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("reserved", 0), ("other", 1), ("unknown", 2), ("apmTimer", 3), ("modemRing", 4), ("lanRemote", 5), ("powerSwitch", 6), ("pciPME", 7), ("acPowerRestored", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsWakeUpType.setStatus('current')
if mibBuilder.loadTexts: oscsWakeUpType.setDescription('Event that causes the system to power up.')
oscsWorkgroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 56), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsWorkgroup.setStatus('current')
if mibBuilder.loadTexts: oscsWorkgroup.setDescription('Windows Server 2003 and Windows XP: Name of the workgroup for this computer. If the value of the PartOfDomain property is false, then the name of the workgroup is returned. ')
oscsAutomaticManagedPagefile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 57), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsAutomaticManagedPagefile.setStatus('current')
if mibBuilder.loadTexts: oscsAutomaticManagedPagefile.setDescription('If True, the system manages the page file.')
oscsNumberOfLogicalProcessors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsNumberOfLogicalProcessors.setStatus('current')
if mibBuilder.loadTexts: oscsNumberOfLogicalProcessors.setDescription('Number of logical processors available on the computer. You can use NumberOfLogicalProcessors and NumberOfProcessors to determine if the computer is hyperthreading. For more information, see Remarks.')
oscsPCSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unspecified", 0), ("desktop", 1), ("mobile", 2), ("workstation", 3), ("enterpriseServer", 4), ("sohoServer", 5), ("appliancePC", 6), ("performanceServer", 7), ("maximum", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscsPCSystemType.setStatus('current')
if mibBuilder.loadTexts: oscsPCSystemType.setDescription('Type of the computer in use, such as laptop, desktop, or Tablet.')
win32ComputerSystemProductTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3), )
if mibBuilder.loadTexts: win32ComputerSystemProductTable.setStatus('current')
if mibBuilder.loadTexts: win32ComputerSystemProductTable.setDescription('The Win32_ComputerSystemProduct WMI class represents a product. This includes software and hardware used on this computer system.')
win32ComputerSystemProductEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1), ).setIndexNames((0, "INFORMANT-OS", "oscspIndex"))
if mibBuilder.loadTexts: win32ComputerSystemProductEntry.setStatus('current')
if mibBuilder.loadTexts: win32ComputerSystemProductEntry.setDescription('None')
oscspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspIndex.setStatus('current')
if mibBuilder.loadTexts: oscspIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
oscspCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspCaption.setStatus('current')
if mibBuilder.loadTexts: oscspCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_Product.')
oscspDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspDescription.setStatus('current')
if mibBuilder.loadTexts: oscspDescription.setDescription('Description of the product. This property is inherited from CIM_Product.')
oscspIdentifyingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspIdentifyingNumber.setStatus('current')
if mibBuilder.loadTexts: oscspIdentifyingNumber.setDescription('Product identification such as a serial number on software or a die number on a hardware chip. This property is inherited from CIM_Product.')
oscspName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspName.setStatus('current')
if mibBuilder.loadTexts: oscspName.setDescription('Commonly used product name. This property is inherited from CIM_Product.')
oscspSKUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspSKUNumber.setStatus('current')
if mibBuilder.loadTexts: oscspSKUNumber.setDescription('Product SKU (stock-keeping unit) information. This property is inherited from CIM_Product.')
oscspUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspUUID.setStatus('current')
if mibBuilder.loadTexts: oscspUUID.setDescription('Universally unique identifier (UUID) for this product. A UUID is a 128-bit identifier that is guaranteed to be different from other generated UUIDs. If a UUID is not available, a UUID of all zeros is used.')
oscspVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 8), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspVendor.setStatus('current')
if mibBuilder.loadTexts: oscspVendor.setDescription('Name of the product supplier. Corresponds to the Vendor property in the product object in the Desktop Management Task Force (DMTF) Solution Exchange Standard. This property is inherited from CIM_Product.')
oscspVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 3, 1, 9), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscspVersion.setStatus('current')
if mibBuilder.loadTexts: oscspVersion.setDescription('Product version information. Corresponds to the Version property in the product object in the DMTF Solution Exchange Standard. This property is inherited from CIM_Product.')
win32LoadOrderGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4), )
if mibBuilder.loadTexts: win32LoadOrderGroupTable.setStatus('current')
if mibBuilder.loadTexts: win32LoadOrderGroupTable.setDescription('The Win32_LoadOrderGroup WMI class represents a group of system services that define execution dependencies. The services must be initiated in the order specified by the Load Order Group, as the services are dependent on each other. These dependent services require the presence of the antecedent services to function correctly. The data in this class is derived by the provider from the registry key: System\\CurrentControlSet\\Control\\GroupOrderList')
win32LoadOrderGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1), ).setIndexNames((0, "INFORMANT-OS", "oslogIndex"))
if mibBuilder.loadTexts: win32LoadOrderGroupEntry.setStatus('current')
if mibBuilder.loadTexts: win32LoadOrderGroupEntry.setDescription('None')
oslogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oslogIndex.setStatus('current')
if mibBuilder.loadTexts: oslogIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
oslogCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oslogCaption.setStatus('current')
if mibBuilder.loadTexts: oslogCaption.setDescription('Short description (one-line string) of the object.')
oslogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oslogDescription.setStatus('current')
if mibBuilder.loadTexts: oslogDescription.setDescription('Description of the object.')
oslogDriverEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oslogDriverEnabled.setStatus('current')
if mibBuilder.loadTexts: oslogDriverEnabled.setDescription('Indicates whether this load order group can include drivers along with system services. ')
oslogGroupOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oslogGroupOrder.setStatus('current')
if mibBuilder.loadTexts: oslogGroupOrder.setDescription('Sequence in which this group of services is loaded onto the operating system. Example: 2')
oslogInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oslogInstallDate.setStatus('current')
if mibBuilder.loadTexts: oslogInstallDate.setDescription('Date object was installed. This property does not require a value to indicate that the object is installed.')
oslogName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oslogName.setStatus('current')
if mibBuilder.loadTexts: oslogName.setDescription("Name of the load order group. Example: 'Primary disk'")
oslogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oslogStatus.setStatus('current')
if mibBuilder.loadTexts: oslogStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may function properly but predicts a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The 'Service' status applies to administrative work, such as mirror-resilvering of a disk or reload of a user permissions list. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
win32OperatingSystemTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5), )
if mibBuilder.loadTexts: win32OperatingSystemTable.setStatus('current')
if mibBuilder.loadTexts: win32OperatingSystemTable.setDescription('The Win32_OperatingSystem WMI class represents an operating system installed on a Windows computer system. Any operating system that can be installed on a Windows system is a descendent or member of this class. If a computer has multiple operating systems installed, this class returns only an instance for the currently active operating system.')
win32OperatingSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1), ).setIndexNames((0, "INFORMANT-OS", "ososIndex"))
if mibBuilder.loadTexts: win32OperatingSystemEntry.setStatus('current')
if mibBuilder.loadTexts: win32OperatingSystemEntry.setDescription('None')
ososIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososIndex.setStatus('current')
if mibBuilder.loadTexts: ososIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ososBootDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososBootDevice.setStatus('current')
if mibBuilder.loadTexts: ososBootDevice.setDescription("Name of the disk drive from which the Windows operating system boots. Example: '\\\\Device\\Harddisk0'")
ososBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososBuildNumber.setStatus('current')
if mibBuilder.loadTexts: ososBuildNumber.setDescription("Build number of an operating system. It can be used for more precise version information than product release version numbers. Example: '1381'")
ososBuildType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososBuildType.setStatus('current')
if mibBuilder.loadTexts: ososBuildType.setDescription("Type of build used for an operating system. Examples: 'retail build', 'checked build'")
ososCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososCaption.setStatus('current')
if mibBuilder.loadTexts: ososCaption.setDescription("Short description of the object a one-line string. The string includes the operating system version. For example, 'Microsoft Windows XP Professional Version = 5.1.2500'. This property can be localized.")
ososCodeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososCodeSet.setStatus('current')
if mibBuilder.loadTexts: ososCodeSet.setDescription("Code page value an operating system uses. A code page contains a character table that an operating system uses to translate strings for different languages. The American National Standards Institute (ANSI) lists values that represent defined code pages. If an operating system does not use an ANSI code page, this member is set to 0 (zero). The CodeSet string can use up to six characters to define the code page value. Example: '1255'")
ososCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososCountryCode.setStatus('current')
if mibBuilder.loadTexts: ososCountryCode.setDescription("Code for the country/region that an operating system uses. Values are based on international phone dialing prefixes also referred to as IBM country/region codes. The property can use up to six characters to define the country/region code value. Example: '1' (United States)")
ososCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 8), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ososCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely.')
ososCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ososCSCreationClassName.setDescription('Creation class name of the scoping computer system.')
ososCSDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososCSDVersion.setStatus('current')
if mibBuilder.loadTexts: ososCSDVersion.setDescription("Null-terminated string that indicates the latest service pack installed on a computer system. If no service pack is installed, the string is NULL. For computers running Windows 95, this property contains a null-terminated string that provides arbitrary additional information about the operating system. Example: 'Service Pack 3'")
ososCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososCSName.setStatus('current')
if mibBuilder.loadTexts: ososCSName.setDescription('Name of the scoping computer system.')
ososCurrentTimeZone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososCurrentTimeZone.setStatus('current')
if mibBuilder.loadTexts: ososCurrentTimeZone.setDescription('Number of minutes an operating system is offset from Greenwich mean time (GMT). The number is positive, negative, or zero.')
ososDataExecPrevention32BitAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososDataExecPrevention32BitAppl.setStatus('current')
if mibBuilder.loadTexts: ososDataExecPrevention32BitAppl.setDescription('When the data execution prevention hardware feature is available, then if TRUE, this property indicates that the feature is set to work for 32-bit applications. On 64-bit computers, the data execution prevention feature is configured in the Boot.ini file and the properties in Win32_OperatingSystem are set accordingly. This property is set to FALSE on 32-bit computers. Windows XP SP1 and earlier: This property is not available. Windows Server 2003 and earlier: This property is not available.')
ososDataExecPreventionAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososDataExecPreventionAvailable.setStatus('current')
if mibBuilder.loadTexts: ososDataExecPreventionAvailable.setDescription('Data execution prevention is an AMD 64-bit hardware feature to prevent buffer overrun attacks by stopping the execution of code on data type memory pages. If TRUE, then this feature is available. On 64-bit computers, the data execution prevention feature is configured in the Boot.ini file and the properties in Win32_OperatingSystem are set accordingly. This property is set to FALSE on 32-bit computers. Windows XP SP1 and earlier: This property is not available. Windows Server 2003 and earlier: This property is not available.')
ososDataExecPreventionDrivers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososDataExecPreventionDrivers.setStatus('current')
if mibBuilder.loadTexts: ososDataExecPreventionDrivers.setDescription('When the data execution prevention hardware feature is available, then if TRUE, this property indicates that the feature is set to work for drivers. On 64-bit computers, the data execution prevention feature is configured in the Boot.ini file and the properties in Win32_OperatingSystem are set accordingly. This property is set to FALSE on 32-bit computers. Windows XP SP1 and earlier: This property is not available. Windows Server 2003 and earlier: This property is not available.')
ososDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososDebug.setStatus('current')
if mibBuilder.loadTexts: ososDebug.setDescription('Operating system is a checked (debug) build. If TRUE, the debugging version of User.exe is installed. Checked builds provide error checking, argument verification, and system debugging code. Additional code in a checked binary generates a kernel debugger error message and breaks into the debugger. This helps immediately determine the cause and location of the error. Performance suffers in a checked build due to the additional code that is executed.')
ososDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososDescription.setStatus('current')
if mibBuilder.loadTexts: ososDescription.setDescription('Description of the Windows operating system. Some user interfaces (those that allow editing of this description) limit its length to 48 characters.')
ososDistributed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososDistributed.setStatus('current')
if mibBuilder.loadTexts: ososDistributed.setDescription('Operating system is distributed across several computer system nodes. If so, these nodes should be grouped as a cluster.')
ososEncryptionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososEncryptionLevel.setStatus('current')
if mibBuilder.loadTexts: ososEncryptionLevel.setDescription('Windows Server 2003, Windows XP: Encryption level for secure transactions 40-bit, 128-bit, or n-bit. ')
ososForegroundApplicationBoost = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("minimum", 1), ("maximum", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososForegroundApplicationBoost.setStatus('current')
if mibBuilder.loadTexts: ososForegroundApplicationBoost.setDescription('Increase in priority given to the foreground application. On computer systems running Windows NT 4.0 and Windows 2000, application boost is implemented by giving an application more execution time slices (quantum lengths). A ForegroundApplicationBoost value of 0 (zero) indicates the system boosts the quantum length by 6; if 1, then 12; and if 2 then 18. On Windows NT 3.51 and earlier, application boost is implemented by increasing the scheduling priority. For these systems, the scheduling priority is increased by the value of this property. The default value is 2.')
ososFreePhysicalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososFreePhysicalMemory.setStatus('current')
if mibBuilder.loadTexts: ososFreePhysicalMemory.setDescription('Number of kilobytes of physical memory currently unused and available.')
ososFreeSpaceInPagingFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososFreeSpaceInPagingFiles.setStatus('current')
if mibBuilder.loadTexts: ososFreeSpaceInPagingFiles.setDescription('Number of kilobytes that can be mapped into the operating system paging files without causing any other pages to be swapped out.')
ososFreeVirtualMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososFreeVirtualMemory.setStatus('current')
if mibBuilder.loadTexts: ososFreeVirtualMemory.setDescription('Number of kilobytes of virtual memory currently unused and available. For example, this may be calculated by adding the amount of free RAM to the amount of free paging space, that is, adding the FreePhysicalMemory and FreeSpaceInPagingFiles properties.')
ososInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososInstallDate.setStatus('current')
if mibBuilder.loadTexts: ososInstallDate.setDescription('Date object was installed. This property does not require a value to indicate that the object is installed.')
ososLargeSystemCache = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("optimizeMemoryForApplications", 0), ("optimizeMemoryForSystemPerform", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososLargeSystemCache.setStatus('current')
if mibBuilder.loadTexts: ososLargeSystemCache.setDescription('Indicates whether or not to optimize memory for applications or system performance. Windows 2000 and earlier: This property is not available.')
ososLastBootUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososLastBootUpTime.setStatus('current')
if mibBuilder.loadTexts: ososLastBootUpTime.setDescription('Operating system was last booted.')
ososLocalDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososLocalDateTime.setStatus('current')
if mibBuilder.loadTexts: ososLocalDateTime.setDescription("Operating system's version of the local date and time of day.")
ososLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososLocale.setStatus('current')
if mibBuilder.loadTexts: ososLocale.setDescription('Language identifier used by the operating system. A language identifier is a standard international numeric abbreviation for a country/region. Each language has a unique language identifier (LANGID), a 16-bit value that consists of a primary language identifier and a secondary language identifier.')
ososManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososManufacturer.setStatus('current')
if mibBuilder.loadTexts: ososManufacturer.setDescription("Name of the operating system manufacturer. For Windows systems, this value is 'Microsoft Corporation'.")
ososMaxNumberOfProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososMaxNumberOfProcesses.setStatus('current')
if mibBuilder.loadTexts: ososMaxNumberOfProcesses.setDescription('Maximum number of process contexts the operating system can support. If there is no fixed maximum, the value should be 0 (zero). On systems that have a fixed maximum, this object can help diagnose failures that occur when the maximum is reached if unknown, enter -1.')
ososMaxProcessMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososMaxProcessMemorySize.setStatus('current')
if mibBuilder.loadTexts: ososMaxProcessMemorySize.setDescription('Maximum number of kilobytes of memory that can be allocated to a process. For operating systems with no virtual memory, typically this value is equal to the total amount of physical memory minus the memory used by the BIOS and OS. For some operating systems, this value may be infinity, in which case 0 (zero) should be entered. In other cases, this value could be a constant, for example, 2G or 4G.')
ososName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososName.setStatus('current')
if mibBuilder.loadTexts: ososName.setDescription('Operating system instance within a computer system.')
ososNumberOfLicensedUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososNumberOfLicensedUsers.setStatus('current')
if mibBuilder.loadTexts: ososNumberOfLicensedUsers.setDescription('Number of user licenses for the operating system. If unlimited, enter 0 (zero). If unknown, enter -1.')
ososNumberOfProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososNumberOfProcesses.setStatus('current')
if mibBuilder.loadTexts: ososNumberOfProcesses.setDescription('Number of process contexts currently loaded or running on the operating system.')
ososNumberOfUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososNumberOfUsers.setStatus('current')
if mibBuilder.loadTexts: ososNumberOfUsers.setDescription('Number of user sessions for which the operating system is storing state information currently. ')
ososOrganization = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 36), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososOrganization.setStatus('current')
if mibBuilder.loadTexts: ososOrganization.setDescription("Company name for the registered user of the operating system. Example: 'Microsoft Corporation'")
ososOSLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 9, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 2049, 2052, 2055, 2057, 2058, 2060, 2064, 2067, 2068, 2070, 2072, 2073, 2074, 2077, 3073, 3076, 3079, 3081, 3082, 3084, 3098, 4097, 4100, 4103, 4105, 4106, 4108, 5121, 5127, 5129, 5130, 5132, 6145, 6153, 6154, 7169, 7177, 7178, 8193, 8201, 8202, 9217, 9226, 10241, 10249, 10250, 11265, 11273, 11274, 12289, 12298, 13313, 13322, 14337, 14346, 15361, 15370, 16385, 16394, 17418, 18442, 19466, 20490))).clone(namedValues=NamedValues(("arabic", 1), ("chinese", 4), ("english", 9), ("arabicSaudiArabia", 1025), ("bulgarian", 1026), ("catalan", 1027), ("chineseTaiwan", 1028), ("czech", 1029), ("danish", 1030), ("germanGermany", 1031), ("greek", 1032), ("englishUnitedStates", 1033), ("spanishTraditionalSort", 1034), ("finnish", 1035), ("frenchFrance", 1036), ("hebrew", 1037), ("hungarian", 1038), ("icelandic", 1039), ("italianItaly", 1040), ("japanese", 1041), ("korean", 1042), ("dutchNetherlands", 1043), ("norwegianBokmal", 1044), ("polish", 1045), ("portugueseBrazil", 1046), ("rhaetoRomanic", 1047), ("romanian", 1048), ("russian", 1049), ("croatian", 1050), ("slovak", 1051), ("albanian", 1052), ("swedish", 1053), ("thai", 1054), ("turkish", 1055), ("urdu", 1056), ("indonesian", 1057), ("ukrainian", 1058), ("belarusian", 1059), ("slovenian", 1060), ("estonian", 1061), ("latvian", 1062), ("lithuanian", 1063), ("farsi", 1065), ("vietnamese", 1066), ("basque", 1069), ("serbian", 1070), ("macedonianFYROM", 1071), ("sutu", 1072), ("tsonga", 1073), ("tswana", 1074), ("xhosa", 1076), ("zulu", 1077), ("afrikaans", 1078), ("faeroese", 1080), ("hindi", 1081), ("maltese", 1082), ("gaelic", 1084), ("yiddish", 1085), ("malayMalaysia", 1086), ("arabicIraq", 2049), ("chinesePRC", 2052), ("germanSwitzerland", 2055), ("englishUnitedKingdom", 2057), ("spanishMexico", 2058), ("frenchBelgium", 2060), ("italianSwitzerland", 2064), ("dutchBelgium", 2067), ("norwegianNynorsk", 2068), ("portuguesePortugal", 2070), ("romanianMoldova", 2072), ("russianMoldova", 2073), ("serbianLatin", 2074), ("swedishFinland", 2077), ("arabicEgypt", 3073), ("chineseHongKongSAR", 3076), ("germanAustria", 3079), ("englishAustralia", 3081), ("spanishInternationalSort", 3082), ("frenchCanada", 3084), ("serbianCyrillic", 3098), ("arabicLibya", 4097), ("chineseSingapore", 4100), ("germanLuxembourg", 4103), ("englishCanada", 4105), ("spanishGuatemala", 4106), ("frenchSwitzerland", 4108), ("arabicAlgeria", 5121), ("germanLiechtenstein", 5127), ("englishNewZealand", 5129), ("spanishCostaRica", 5130), ("frenchLuxembourg", 5132), ("arabicMorocco", 6145), ("englishIreland", 6153), ("spanishPanama", 6154), ("arabicTunisia", 7169), ("englishSouthAfrica", 7177), ("spanishDominicanRepublic", 7178), ("arabicOman", 8193), ("englishJamaica", 8201), ("spanishVenezuela", 8202), ("arabicYemen", 9217), ("spanishColombia", 9226), ("arabicSyria", 10241), ("englishBelize", 10249), ("spanishPeru", 10250), ("arabicJordan", 11265), ("englishTrinidad", 11273), ("spanishArgentina", 11274), ("arabicLebanon", 12289), ("spanishEcuador", 12298), ("arabicKuwait", 13313), ("spanishChile", 13322), ("arabicUAE", 14337), ("spanishUruguay", 14346), ("arabicBahrain", 15361), ("spanishParaguay", 15370), ("arabicQatar", 16385), ("spanishBolivia", 16394), ("spanishElSalvador", 17418), ("spanishHonduras", 18442), ("spanishNicaragua", 19466), ("spanishPuertoRico", 20490)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososOSLanguage.setStatus('current')
if mibBuilder.loadTexts: ososOSLanguage.setDescription('Language version of the operating system installed.')
ososOSProductSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososOSProductSuite.setStatus('current')
if mibBuilder.loadTexts: ososOSProductSuite.setDescription('Installed and licensed system product additions to the operating system. For example, the value of 146 (0x92) for OSProductSuite indicates Enterprise, Terminal Server, and Data Center (bits one, four, and seven set). The following table identifies the possible values. Value Meaning 0x1 Small Business 0x2 Enterprise 0x4 BackOffice 0x8 Communication Server 0x10 Terminal Server 0x20 Small Business (Restricted) 0x40 Embedded NT 0x80 Data Center')
ososOSType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("macros", 2), ("attunix", 3), ("dgux", 4), ("decnt", 5), ("digitalUnix", 6), ("openVMS", 7), ("hpux", 8), ("aix", 9), ("mvs", 10), ("os400", 11), ("os2", 12), ("javaVM", 13), ("msdos", 14), ("win3x", 15), ("win95", 16), ("win98", 17), ("winnt", 18), ("wince", 19), ("ncr3000", 20), ("netWare", 21), ("osf", 22), ("dcOS", 23), ("reliantUNIX", 24), ("scoUnixWare", 25), ("scoOpenServer", 26), ("sequent", 27), ("irix", 28), ("solaris", 29), ("sunOS", 30), ("u6000", 31), ("aseries", 32), ("tandemNSK", 33), ("tandemNT", 34), ("bs2000", 35), ("linux", 36), ("lynx", 37), ("xenix", 38), ("vmESA", 39), ("interactiveUNIX", 40), ("bsdunix", 41), ("freeBSD", 42), ("netBSD", 43), ("gnuHurd", 44), ("os9", 45), ("machKernel", 46), ("inferno", 47), ("qnx", 48), ("epoc", 49), ("ixWorks", 50), ("vxWorks", 51), ("miNT", 52), ("beOS", 53), ("hpMPE", 54), ("nextStep", 55), ("palmPilot", 56), ("rhapsody", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososOSType.setStatus('current')
if mibBuilder.loadTexts: ososOSType.setDescription('Type of operating system.')
ososOtherTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososOtherTypeDescription.setStatus('current')
if mibBuilder.loadTexts: ososOtherTypeDescription.setDescription('Manufacturer and operating system type that is used when the operating system property OSType is set to 1 (Other). The format of the string inserted in OtherTypeDescription should be similar in format to the value strings defined for OSType. The OtherTypeDescription property should be set to NULL when OSType is any value other than 1.')
ososPAEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososPAEEnabled.setStatus('current')
if mibBuilder.loadTexts: ososPAEEnabled.setDescription('Physical Address Extension (PAE) is enabled by the operating system running on Intel processors. PAE allows applications to address more than 4 GB of physical memory. When PAE is enabled, the operating system uses three-level linear address translation rather than two-level. Providing more physical memory to an application reduces the need to swap memory to the page file and increases performance. To enable, PAE, use the /PAE switch in the Boot.ini file. Windows XP and earlier: The PAEEnabled property is not available.')
ososPlusProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 42), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososPlusProductID.setStatus('current')
if mibBuilder.loadTexts: ososPlusProductID.setDescription('Identification number for the Windows Plus! operating system enhancement software if installed.')
ososPlusVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 43), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososPlusVersionNumber.setStatus('current')
if mibBuilder.loadTexts: ososPlusVersionNumber.setDescription('Version number of the Windows Plus! operating system enhancement software if installed.')
ososPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 44), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososPrimary.setStatus('current')
if mibBuilder.loadTexts: ososPrimary.setDescription('Primary operating system.')
ososProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("workStation", 1), ("domainController", 2), ("server", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososProductType.setStatus('current')
if mibBuilder.loadTexts: ososProductType.setDescription('Additional information about the system.')
ososQuantumLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("oneTick", 2), ("twoTicks", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososQuantumLength.setStatus('current')
if mibBuilder.loadTexts: ososQuantumLength.setDescription("Number of clock ticks per quantum. A quantum is a unit of execution time that the scheduler is allowed to give to an application before switching to other applications. When a thread runs one quantum, the kernel preempts it and moves it to the end of a queue for applications with equal priorities. The actual length of a thread's quantum varies across different Windows platforms Windows NT/Windows 2000 only.")
ososQuantumType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("fixed", 2), ("variable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososQuantumType.setStatus('current')
if mibBuilder.loadTexts: ososQuantumType.setDescription("Length type of quantums. Windows NT 4.0 Workstation/Windows 2000 defaults to variable-length quantums where the foreground application has a longer quantum than the background applications. Windows NT server defaults to fixed-length quantums. A quantum is a unit of execution time that the scheduler is allowed to give to an application before switching to another application. When a thread runs one quantum, the kernel preempts it and moves it to the end of a queue for applications with equal priorities. The actual length of a thread's quantum varies across different Windows platforms. For Windows NT/Windows 2000 only.")
ososRegisteredUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 48), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososRegisteredUser.setStatus('current')
if mibBuilder.loadTexts: ososRegisteredUser.setDescription("Name of the registered user of the operating system. Example: 'Ben Smith'")
ososSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 49), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ososSerialNumber.setDescription("Operating system product serial identification number. Example: '10497-OEM-0031416-71674'")
ososServicePackMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososServicePackMajorVersion.setStatus('current')
if mibBuilder.loadTexts: ososServicePackMajorVersion.setDescription('Major version number of the service pack installed on the computer system. If no service pack has been installed, the value is 0 (zero). Windows NT 4.0, Windows Me/98/95: This property is present but the value is NULL.')
ososServicePackMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososServicePackMinorVersion.setStatus('current')
if mibBuilder.loadTexts: ososServicePackMinorVersion.setDescription('Minor version number of the service pack installed on the computer system. If no service pack has been installed, the value is 0 (zero). Windows NT 4.0, Windows Me/98/95: This property is present but the value is NULL.')
ososSizeStoredInPagingFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososSizeStoredInPagingFiles.setStatus('current')
if mibBuilder.loadTexts: ososSizeStoredInPagingFiles.setDescription("Total number of kilobytes that can be stored in the operating system's paging files 0 (zero) indicates that there are no paging files. Note that this number does not represent the actual physical size of the paging file on disk.")
ososStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososStatus.setStatus('current')
if mibBuilder.loadTexts: ososStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive may function properly, but predicts a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The 'Service' status applies to administrative work, such as mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, but the managed element is neither 'OK' nor in one of the other states.")
ososSuiteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososSuiteMask.setStatus('current')
if mibBuilder.loadTexts: ososSuiteMask.setDescription('Bit flags that identify the product suites available on the system. Windows 2000 Server and earlier, Windows 2000 and earlier: This property is not available. For example, to specify both Personal and Back Office you set SuiteMask to 4 | 512 or 516. The following table identifies the possible values. Value Meaning 1 Small Business 2 Enterprise 4 Back Office 8 Communications 16 Terminal 32 Small Business Restricted 64 Embedded NT 128 Data Center 256 Single User 512 Personal 1024 Blade ')
ososSystemDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 55), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososSystemDevice.setStatus('current')
if mibBuilder.loadTexts: ososSystemDevice.setDescription('Physical disk partition on which the operating system is installed.')
ososSystemDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 56), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososSystemDirectory.setStatus('current')
if mibBuilder.loadTexts: ososSystemDirectory.setDescription("System directory of the operating system. Example: 'C:\\WINDOWS\\SYSTEM32'")
ososSystemDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 57), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososSystemDrive.setStatus('current')
if mibBuilder.loadTexts: ososSystemDrive.setDescription("Letter of the disk drive on which the operating system resides. Example: 'C:' Windows 2000 Server and earlier, Windows 2000 and earlier: This property is not available.")
ososTotalSwapSpaceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososTotalSwapSpaceSize.setStatus('current')
if mibBuilder.loadTexts: ososTotalSwapSpaceSize.setDescription('Total swap space in kilobytes. This value may be NULL (unspecified) if swap space is not distinguished from page files. However, some operating systems distinguish these concepts. For example, in UNIX, whole processes can be swapped out when the free page list falls and remains below a specified amount.')
ososTotalVirtualMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososTotalVirtualMemorySize.setStatus('current')
if mibBuilder.loadTexts: ososTotalVirtualMemorySize.setDescription('Number of kilobytes of virtual memory. For example, this may be calculated by adding the amount of total RAM to the amount of paging space, that is, adding the amount of memory in or aggregated by the computer system to the property, SizeStoredInPagingFiles.')
ososTotalVisibleMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososTotalVisibleMemorySize.setStatus('current')
if mibBuilder.loadTexts: ososTotalVisibleMemorySize.setDescription('Total amount of physical memory available to the operating system. This value does not necessarily indicate the true amount of physical memory, but what is reported to the operating system as available to it.')
ososVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 61), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososVersion.setStatus('current')
if mibBuilder.loadTexts: ososVersion.setDescription("Version number of the operating system. Example: '4.0'")
ososWindowsDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 5, 1, 62), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ososWindowsDirectory.setStatus('current')
if mibBuilder.loadTexts: ososWindowsDirectory.setDescription("Windows directory of the operating system. Example: 'C:\\WINDOWS'")
win32OSRecoveryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6), )
if mibBuilder.loadTexts: win32OSRecoveryConfigTable.setStatus('current')
if mibBuilder.loadTexts: win32OSRecoveryConfigTable.setDescription('The Win32_OSRecoveryConfiguration WMI class represents the types of information that will be gathered from memory when the operating system fails. This includes boot failures and system crashes.')
win32OSRecoveryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1), ).setIndexNames((0, "INFORMANT-OS", "osrcIndex"))
if mibBuilder.loadTexts: win32OSRecoveryConfigEntry.setStatus('current')
if mibBuilder.loadTexts: win32OSRecoveryConfigEntry.setDescription('None')
osrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcIndex.setStatus('current')
if mibBuilder.loadTexts: osrcIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osrcAutoReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcAutoReboot.setStatus('current')
if mibBuilder.loadTexts: osrcAutoReboot.setDescription('System will automatically reboot during a recovery operation.')
osrcCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcCaption.setStatus('current')
if mibBuilder.loadTexts: osrcCaption.setDescription('Short description of the CIM_Setting object a one-line string.')
osrcDebugFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcDebugFilePath.setStatus('current')
if mibBuilder.loadTexts: osrcDebugFilePath.setDescription("Full path to the debug file. A debug file is created with the memory state of the computer after a computer failure. Example: 'C:\\WinNT\\Memory.dmp'")
osrcDebugInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("completeMemoryDump", 1), ("kernelMemoryDump", 2), ("smallMemoryDump", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcDebugInfoType.setStatus('current')
if mibBuilder.loadTexts: osrcDebugInfoType.setDescription('Windows XP, Windows Server 2003: Type of debugging information written to the log file.')
osrcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcDescription.setStatus('current')
if mibBuilder.loadTexts: osrcDescription.setDescription('Description of the CIM_Setting object.')
osrcExpandedDebugFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcExpandedDebugFilePath.setStatus('current')
if mibBuilder.loadTexts: osrcExpandedDebugFilePath.setDescription("Windows XP, Windows Server 2003: Expanded version of the DebugFilePath property. Example: 'C:\\WinNT\\Memory.dmp'")
osrcExpandedMiniDumpDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcExpandedMiniDumpDirectory.setStatus('current')
if mibBuilder.loadTexts: osrcExpandedMiniDumpDirectory.setDescription("Windows XP, Windows Server 2003: Expanded version of the MiniDumpDirectory property. Example: 'C:\\WinNT\\MiniDump'")
osrcKernelDumpOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcKernelDumpOnly.setStatus('current')
if mibBuilder.loadTexts: osrcKernelDumpOnly.setDescription('Only kernel debug information will be written to the debug log file. If TRUE, then only the state of the kernel is written to a file in the event of a system failure. If FALSE, the system will try to log the state of the memory, and any devices that can provide information about the system when it failed.')
osrcMiniDumpDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcMiniDumpDirectory.setStatus('current')
if mibBuilder.loadTexts: osrcMiniDumpDirectory.setDescription("Windows XP, Windows Server 2003: Directory where small memory dump files will be recorded and accumulated. Example: '%systemRoot%\\MiniDump'")
osrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 11), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcName.setStatus('current')
if mibBuilder.loadTexts: osrcName.setDescription('Identifying name for this instance of the Win32_OSRecoveryConfiguration class.')
osrcOverwriteExistingDebugFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcOverwriteExistingDebugFile.setStatus('current')
if mibBuilder.loadTexts: osrcOverwriteExistingDebugFile.setDescription('New log file will overwrite an existing one.')
osrcSendAdminAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcSendAdminAlert.setStatus('current')
if mibBuilder.loadTexts: osrcSendAdminAlert.setDescription('Alert message will be sent to the system administrator in the event of an operating system failure.')
osrcSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcSettingID.setStatus('current')
if mibBuilder.loadTexts: osrcSettingID.setDescription('Identifier by which the CIM_Setting object is known.')
osrcWriteDebugInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcWriteDebugInfo.setStatus('current')
if mibBuilder.loadTexts: osrcWriteDebugInfo.setDescription('Debugging information is to be written to a log file.')
osrcWriteToSystemLog = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 6, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrcWriteToSystemLog.setStatus('current')
if mibBuilder.loadTexts: osrcWriteToSystemLog.setDescription('Events will be written to a system log.')
win32QuickFixEngineeringTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7), )
if mibBuilder.loadTexts: win32QuickFixEngineeringTable.setStatus('current')
if mibBuilder.loadTexts: win32QuickFixEngineeringTable.setDescription('The Win32_QuickFixEngineering WMI class represents system-wide Quick Fix Engineering (QFE) or updates that have been applied to the current operating system.')
win32QuickFixEngineeringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1), ).setIndexNames((0, "INFORMANT-OS", "osqfeIndex"))
if mibBuilder.loadTexts: win32QuickFixEngineeringEntry.setStatus('current')
if mibBuilder.loadTexts: win32QuickFixEngineeringEntry.setDescription('None')
osqfeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeIndex.setStatus('current')
if mibBuilder.loadTexts: osqfeIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osqfeCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeCaption.setStatus('current')
if mibBuilder.loadTexts: osqfeCaption.setDescription('Short textual description (one-line string) of the object.')
osqfeCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeCSName.setStatus('current')
if mibBuilder.loadTexts: osqfeCSName.setDescription('Local name of the computer system. The value for this property comes from the CIM_ComputerSystem class.')
osqfeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeDescription.setStatus('current')
if mibBuilder.loadTexts: osqfeDescription.setDescription('Description of the object.')
osqfeFixComments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeFixComments.setStatus('current')
if mibBuilder.loadTexts: osqfeFixComments.setDescription('Additional comments relating to the update. This property represents data found in the Windows registry key: HKEY_LOCAL_MACHINE SOFTWARE Microsoft Windows NT CurrentVersion Hotfix')
osqfeHotFixID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 260))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeHotFixID.setStatus('current')
if mibBuilder.loadTexts: osqfeHotFixID.setDescription('Unique identifier associated with a particular QFE. This property represents data found in the Windows registry key: HKEY_LOCAL_MACHINE SOFTWARE Microsoft Windows NT CurrentVersion Hotfix')
osqfeInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeInstallDate.setStatus('current')
if mibBuilder.loadTexts: osqfeInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
osqfeInstalledBy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeInstalledBy.setStatus('current')
if mibBuilder.loadTexts: osqfeInstalledBy.setDescription('Person who installed the update. If this value is unknown, the property will be empty. This property represents data found in the Windows registry key: HKEY_LOCAL_MACHINE SOFTWARE Microsoft Windows NT CurrentVersion Hotfix')
osqfeInstalledOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeInstalledOn.setStatus('current')
if mibBuilder.loadTexts: osqfeInstalledOn.setDescription('Update was installed. If this value is unknown, the property will be empty. This property represents data found in the Windows registry key: HKEY_LOCAL_MACHINE SOFTWARE Microsoft Windows NT CurrentVersion Hotfix')
osqfeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeName.setStatus('current')
if mibBuilder.loadTexts: osqfeName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property.')
osqfeServicePackInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 11), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 260))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeServicePackInEffect.setStatus('current')
if mibBuilder.loadTexts: osqfeServicePackInEffect.setDescription('Service pack in effect when the update was applied. If no service pack has been applied, the property takes on the value SP0. If it cannot be determined what service pack was in effect, this property will be NULL. This property represents data found in the Windows registry key: HKEY_LOCAL_MACHINE SOFTWARE Microsoft Windows NT CurrentVersion Hotfix')
osqfeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osqfeStatus.setStatus('current')
if mibBuilder.loadTexts: osqfeStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
win32StartupCommandTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8), )
if mibBuilder.loadTexts: win32StartupCommandTable.setStatus('current')
if mibBuilder.loadTexts: win32StartupCommandTable.setDescription('The Win32_StartupCommand WMI class represents a command that runs automatically when a user logs onto the computer system.')
win32StartupCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1), ).setIndexNames((0, "INFORMANT-OS", "osscIndex"))
if mibBuilder.loadTexts: win32StartupCommandEntry.setStatus('current')
if mibBuilder.loadTexts: win32StartupCommandEntry.setDescription('None')
osscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscIndex.setStatus('current')
if mibBuilder.loadTexts: osscIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osscCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscCaption.setStatus('current')
if mibBuilder.loadTexts: osscCaption.setDescription('Short description (one-line string) of the CIM_Setting object.')
osscCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscCommand.setStatus('current')
if mibBuilder.loadTexts: osscCommand.setDescription("Command run by the startup command. Example: 'c:\\winnt\\notepad.exe myfile.txt'")
osscDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscDescription.setStatus('current')
if mibBuilder.loadTexts: osscDescription.setDescription('Description of the CIM_Setting object.')
osscLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscLocation.setStatus('current')
if mibBuilder.loadTexts: osscLocation.setDescription('Path where the startup command resides on the disk file system.')
osscName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscName.setStatus('current')
if mibBuilder.loadTexts: osscName.setDescription("File name of the startup command. Example: 'FindFast'")
osscSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscSettingID.setStatus('current')
if mibBuilder.loadTexts: osscSettingID.setDescription('Identifier by which the CIM_Setting object is known.')
osscUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 8, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscUser.setStatus('current')
if mibBuilder.loadTexts: osscUser.setDescription("User name for whom this startup command will run. Example: 'mydomain\\myname'")
win32Shutdown = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6, 8, 12))).clone(namedValues=NamedValues(("logOff", 0), ("shutdown", 1), ("reboot", 2), ("forcedLogOff", 4), ("forceShutdown", 5), ("forcedReboot", 6), ("powerOff", 8), ("forcedPowerOff", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: win32Shutdown.setStatus('current')
if mibBuilder.loadTexts: win32Shutdown.setDescription('This OID can only be written to and cannot be read! The Win32Shutdown WMI class method provides the full set of shutdown options supported by Win32 operating systems. Using Force in conjunction with Shutdown or Reboot on a remote computer immediately shuts down everything (including WMI, COM, and so on), or reboots the remote computer. This results in an indeterminate return value.')
win32WinSATTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10), )
if mibBuilder.loadTexts: win32WinSATTable.setStatus('current')
if mibBuilder.loadTexts: win32WinSATTable.setDescription('Defines summary assessment information for the most recent formal assessment.')
win32WinSATEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1), ).setIndexNames((0, "INFORMANT-OS", "ossatIndex"))
if mibBuilder.loadTexts: win32WinSATEntry.setStatus('current')
if mibBuilder.loadTexts: win32WinSATEntry.setDescription('None')
ossatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatIndex.setStatus('current')
if mibBuilder.loadTexts: ossatIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ossatCPUScore = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatCPUScore.setStatus('current')
if mibBuilder.loadTexts: ossatCPUScore.setDescription('A score for the processors on the computer.')
ossatD3DScore = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatD3DScore.setStatus('current')
if mibBuilder.loadTexts: ossatD3DScore.setDescription('A score for the three-dimensional graphics (gaming) capabilities of the computer.')
ossatDiskScore = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatDiskScore.setStatus('current')
if mibBuilder.loadTexts: ossatDiskScore.setDescription('A score for the sequential read throughput on the primary hard disk on the computer.')
ossatGraphicsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatGraphicsScore.setStatus('current')
if mibBuilder.loadTexts: ossatGraphicsScore.setDescription('A score for the graphics capabilities of the computer.')
ossatMemoryScore = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatMemoryScore.setStatus('current')
if mibBuilder.loadTexts: ossatMemoryScore.setDescription('A score for the memory throughput and capacity of the computer.')
ossatTimeTaken = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatTimeTaken.setStatus('current')
if mibBuilder.loadTexts: ossatTimeTaken.setDescription("This property must be set to 'MostRecentAssessment' in the WHERE clause of your WQL query.")
ossatAssessmentState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("stateUknown", 0), ("valid", 1), ("incoherentWithHardware", 2), ("noAssessmentAvailable", 3), ("invalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatAssessmentState.setStatus('current')
if mibBuilder.loadTexts: ossatAssessmentState.setDescription('State of the assessment. For a description of the possible values, see the WINSAT_ASSESSMENT_STATE enumeration.')
ossatSPRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 8, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossatSPRLevel.setStatus('current')
if mibBuilder.loadTexts: ossatSPRLevel.setDescription('Base score for the computer. For details on the score value, see http://msdn2.microsoft.com/en-us/library/aa969193.a spx')
wmiProcesses = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9))
if mibBuilder.loadTexts: wmiProcesses.setStatus('current')
if mibBuilder.loadTexts: wmiProcesses.setDescription('The Processes subcategory groups classes that represent system processes and threads.')
win32ProcessTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1), )
if mibBuilder.loadTexts: win32ProcessTable.setStatus('current')
if mibBuilder.loadTexts: win32ProcessTable.setDescription('The Win32_Process WMI class represents a sequence of events on a Windows operating system. A descendent or member of this class is a sequence that consists of an interaction of one or more processors or interpreters, some executable code, and a set of inputs, for example, a client application running on a Windows system.')
win32ProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "ospsIndex"))
if mibBuilder.loadTexts: win32ProcessEntry.setStatus('current')
if mibBuilder.loadTexts: win32ProcessEntry.setDescription('None')
ospsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsIndex.setStatus('current')
if mibBuilder.loadTexts: ospsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ospsCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsCaption.setStatus('current')
if mibBuilder.loadTexts: ospsCaption.setDescription('Short description of an object a one-line string.')
ospsCommandLine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsCommandLine.setStatus('current')
if mibBuilder.loadTexts: ospsCommandLine.setDescription('Command line used to start a specific process, if applicable. This property is new for Windows XP.')
ospsCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ospsCreationClassName.setDescription('Name of the first concrete class in the inheritance chain that is used to create an instance. You can use this property with other key properties of the class to identify uniquely all instances of the class and its subclasses. This property is inherited from CIM_System')
ospsCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsCreationDate.setStatus('current')
if mibBuilder.loadTexts: ospsCreationDate.setDescription('Date the process begins executing.')
ospsCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ospsCSCreationClassName.setDescription('Creation class name of the scoping computer system.')
ospsCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsCSName.setStatus('current')
if mibBuilder.loadTexts: ospsCSName.setDescription('Name of the scoping computer system.')
ospsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsDescription.setStatus('current')
if mibBuilder.loadTexts: ospsDescription.setDescription('Description of an object.')
ospsExecutablePath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsExecutablePath.setStatus('current')
if mibBuilder.loadTexts: ospsExecutablePath.setDescription('Path to the executable file of the process. Example: C:\\WINDOWS\\EXPLORER.EXE')
ospsExecutionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsExecutionState.setStatus('current')
if mibBuilder.loadTexts: ospsExecutionState.setDescription('This property is not implemented and does not get populated for any instance of this class. This property is always NULL.')
ospsHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsHandle.setStatus('current')
if mibBuilder.loadTexts: ospsHandle.setDescription('Process identifier.')
ospsHandleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsHandleCount.setStatus('current')
if mibBuilder.loadTexts: ospsHandleCount.setDescription('Total number of open handles owned by the process. HandleCount is the sum of the handles currently open by each thread in this process. A handle is used to examine or modify the system resources. Each handle has an entry in a table that is maintained internally. Entries contain the addresses of the resources and data to identify the resource type.')
ospsInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsInstallDate.setStatus('current')
if mibBuilder.loadTexts: ospsInstallDate.setDescription('Date an object is installed. The object may be installed without a value being written to this property.')
ospsKernelModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 14), Counter64()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsKernelModeTime.setStatus('current')
if mibBuilder.loadTexts: ospsKernelModeTime.setDescription('Time in kernel mode, in 100 nanosecond units. If this information is not available, use a value of 0 (zero).')
ospsMaximumWorkingSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 15), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsMaximumWorkingSetSize.setStatus('current')
if mibBuilder.loadTexts: ospsMaximumWorkingSetSize.setDescription('Maximum working set size of the process. The working set of a process is the set of memory pages visible to the process in physical RAM. These pages are resident, and available for an application to use without triggering a page fault. Example: 1413120')
ospsMinimumWorkingSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 16), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsMinimumWorkingSetSize.setStatus('current')
if mibBuilder.loadTexts: ospsMinimumWorkingSetSize.setDescription('Minimum working set size of the process. The working set of a process is the set of memory pages visible to the process in physical RAM. These pages are resident and available for an application to use without triggering a page fault. Example: 20480')
ospsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsName.setStatus('current')
if mibBuilder.loadTexts: ospsName.setDescription('Label for an object. When inherited by a subclass, the property can be overridden to be a key property.')
ospsOSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsOSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ospsOSCreationClassName.setDescription('Creation class name of the scoping operating system.')
ospsOSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsOSName.setStatus('current')
if mibBuilder.loadTexts: ospsOSName.setDescription('Name of the scoping operating system.')
ospsOtherOperationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsOtherOperationCount.setStatus('current')
if mibBuilder.loadTexts: ospsOtherOperationCount.setDescription('Number of I/O operations performed that are not read or write operations.')
ospsOtherTransferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 21), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsOtherTransferCount.setStatus('current')
if mibBuilder.loadTexts: ospsOtherTransferCount.setDescription('Amount of data transferred during operations that are not read or write operations.')
ospsPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsPageFaults.setStatus('current')
if mibBuilder.loadTexts: ospsPageFaults.setDescription('Number of page faults that a process generates. Example: 10')
ospsPageFileUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 23), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsPageFileUsage.setStatus('current')
if mibBuilder.loadTexts: ospsPageFileUsage.setDescription('Amount of page file space that a process is using currently. Example: 102435')
ospsParentProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsParentProcessId.setStatus('current')
if mibBuilder.loadTexts: ospsParentProcessId.setDescription('Unique identifier of the process that creates a process. Process identifier numbers are reused, so they only identify a process for the lifetime of that process. It is possible that the process identified by ParentProcessId is terminated, so ParentProcessId may not refer to a running process. It is also possible that ParentProcessId incorrectly refers to a process that reuses a process identifier. You can use the CreationDate property to determine whether the specified parent was created after the process represented by this Win32_Process instance was created.')
ospsPeakPageFileUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 25), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsPeakPageFileUsage.setStatus('current')
if mibBuilder.loadTexts: ospsPeakPageFileUsage.setDescription('Maximum amount of page file space used during the life of a process. Example: 102367')
ospsPeakVirtualSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 26), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsPeakVirtualSize.setStatus('current')
if mibBuilder.loadTexts: ospsPeakVirtualSize.setDescription('Maximum virtual address space a process uses at any one time. Using virtual address space does not necessarily imply corresponding use of either disk or main memory pages. However, virtual space is finite, and by using too much the process might not be able to load libraries.')
ospsPeakWorkingSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 27), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsPeakWorkingSetSize.setStatus('current')
if mibBuilder.loadTexts: ospsPeakWorkingSetSize.setDescription('Peak working set size of a process. Example: 1413120')
ospsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsPriority.setStatus('current')
if mibBuilder.loadTexts: ospsPriority.setDescription('Scheduling priority of a process within an operating system. The higher the value, the higher priority a process receives. Priority values can range from 0 (zero), which is the lowest priority to 31, which is highest priority. Example: 7')
ospsPrivatePageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsPrivatePageCount.setStatus('current')
if mibBuilder.loadTexts: ospsPrivatePageCount.setDescription('Current number of pages allocated that are accessible only to the process represented by this Win32_Process instance.')
ospsProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsProcessId.setStatus('current')
if mibBuilder.loadTexts: ospsProcessId.setDescription('Global process identifier that you can use to identify a process. The value is valid from the time a process is created until it is terminated.')
ospsQuotaNonPagedPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsQuotaNonPagedPoolUsage.setStatus('current')
if mibBuilder.loadTexts: ospsQuotaNonPagedPoolUsage.setDescription('Quota amount of non-paged pool usage for a process. Example: 15')
ospsQuotaPagedPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsQuotaPagedPoolUsage.setStatus('current')
if mibBuilder.loadTexts: ospsQuotaPagedPoolUsage.setDescription('Quota amount of paged pool usage for a process. Example: 22')
ospsQuotaPeakNonPagedPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsQuotaPeakNonPagedPoolUsage.setStatus('current')
if mibBuilder.loadTexts: ospsQuotaPeakNonPagedPoolUsage.setDescription('Peak quota amount of non-paged pool usage for a process. Example: 31')
ospsQuotaPeakPagedPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsQuotaPeakPagedPoolUsage.setStatus('current')
if mibBuilder.loadTexts: ospsQuotaPeakPagedPoolUsage.setDescription('Peak quota amount of paged pool usage for a process. Example: 31')
ospsReadOperationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsReadOperationCount.setStatus('current')
if mibBuilder.loadTexts: ospsReadOperationCount.setDescription('Number of read operations performed.')
ospsReadTransferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 36), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsReadTransferCount.setStatus('current')
if mibBuilder.loadTexts: ospsReadTransferCount.setDescription('Amount of data read.')
ospsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsSessionId.setStatus('current')
if mibBuilder.loadTexts: ospsSessionId.setDescription('Unique identifier that an operating system generates when a session is created. A session spans a period of time from log on until log off from a specific system.')
ospsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 38), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsStatus.setStatus('current')
if mibBuilder.loadTexts: ospsStatus.setDescription('This property is not implemented and does not get populated for any instance of this class. It is always NULL. ')
ospsTerminationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsTerminationDate.setStatus('current')
if mibBuilder.loadTexts: ospsTerminationDate.setDescription('Process was stopped or terminated. To get the termination time, a handle to the process must be held open. Otherwise, this property returns NULL.')
ospsThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsThreadCount.setStatus('current')
if mibBuilder.loadTexts: ospsThreadCount.setDescription('Number of active threads in a process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes an instruction. Each running process has at least one thread. This property is for computers running Windows NT only.')
ospsUserModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 41), Counter64()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsUserModeTime.setStatus('current')
if mibBuilder.loadTexts: ospsUserModeTime.setDescription('Time in user mode, in 100 nanosecond units. If this information is not available, use a value of 0 (zero).')
ospsVirtualSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 42), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsVirtualSize.setStatus('current')
if mibBuilder.loadTexts: ospsVirtualSize.setDescription('Current size of the virtual address space that a process is using. Using virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite, and by using too much, the process might not be able to load libraries.')
ospsWindowsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 43), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsWindowsVersion.setStatus('current')
if mibBuilder.loadTexts: ospsWindowsVersion.setDescription('Version of Windows in which the process is running. Example: 4.0')
ospsWorkingSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsWorkingSetSize.setStatus('current')
if mibBuilder.loadTexts: ospsWorkingSetSize.setDescription('Amount of memory in bytes that a process needs to execute efficiently for an operating system that uses page-based memory management. If the system does not have enough memory (less than the working set size), thrashing occurs. If the size of the working set is not known, use NULL or 0 (zero). If working set data is provided, you can monitor the information to understand the changing memory requirements of a process.')
ospsWriteOperationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsWriteOperationCount.setStatus('current')
if mibBuilder.loadTexts: ospsWriteOperationCount.setDescription('Number of write operations performed.')
ospsWriteTransferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 1, 1, 46), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospsWriteTransferCount.setStatus('current')
if mibBuilder.loadTexts: ospsWriteTransferCount.setDescription('Amount of data written.')
win32ThreadTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2), )
if mibBuilder.loadTexts: win32ThreadTable.setStatus('current')
if mibBuilder.loadTexts: win32ThreadTable.setDescription('The Win32_Thread WMI class represents a thread of execution. While a process must have one thread of execution, the process can create other threads to execute tasks in parallel. Threads share the process environment, thus multiple threads under the same process use less memory than the same number of processes.')
win32ThreadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "ostdIndex"))
if mibBuilder.loadTexts: win32ThreadEntry.setStatus('current')
if mibBuilder.loadTexts: win32ThreadEntry.setDescription('None')
ostdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdIndex.setStatus('current')
if mibBuilder.loadTexts: ostdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ostdCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdCaption.setStatus('current')
if mibBuilder.loadTexts: ostdCaption.setDescription('Short description (one-line string) of the object.')
ostdCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ostdCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified.')
ostdCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ostdCSCreationClassName.setDescription('Creation class name of the scoping computer system.')
ostdCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdCSName.setStatus('current')
if mibBuilder.loadTexts: ostdCSName.setDescription('Name of the scoping computer system.')
ostdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdDescription.setStatus('current')
if mibBuilder.loadTexts: ostdDescription.setDescription('Description of the object.')
ostdElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 7), Counter64()).setUnits('Milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdElapsedTime.setStatus('current')
if mibBuilder.loadTexts: ostdElapsedTime.setDescription('Total execution time given to this thread since its creation.')
ostdExecutionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ready", 2), ("running", 3), ("blocked", 4), ("suspendedBlocked", 5), ("suspendedReady", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdExecutionState.setStatus('current')
if mibBuilder.loadTexts: ostdExecutionState.setDescription('Current operating condition of the thread.')
ostdHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 9), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdHandle.setStatus('current')
if mibBuilder.loadTexts: ostdHandle.setDescription('Handle to a thread. The handle has full access rights by default. With the correct security access, the handle can be used in any function that accepts a thread handle. Depending on the inheritance flag specified when it is created, this handle can be inherited by child processes.')
ostdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdInstallDate.setStatus('current')
if mibBuilder.loadTexts: ostdInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
ostdKernelModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 11), Counter64()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdKernelModeTime.setStatus('current')
if mibBuilder.loadTexts: ostdKernelModeTime.setDescription('Time in kernel mode, in 100 nanoseconds. If this information is not available, a value of 0 should be used.')
ostdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdName.setStatus('current')
if mibBuilder.loadTexts: ostdName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property.')
ostdOSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdOSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ostdOSCreationClassName.setDescription('Creation class name of the scoping operating system.')
ostdOSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 14), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdOSName.setStatus('current')
if mibBuilder.loadTexts: ostdOSName.setDescription('Name of the scoping operating system.')
ostdPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdPriority.setStatus('current')
if mibBuilder.loadTexts: ostdPriority.setDescription("Dynamic priority of the thread. Each thread has a dynamic priority that the scheduler uses to determine which thread to execute. Initially, a thread's dynamic priority is the same as its base priority. The system can raise and lower the dynamic priority, to ensure that it is responsive (guaranteeing that no threads are starved for processor time). The system does not boost the priority of threads with a base priority level between 16 and 31. Only threads with a base priority between 0 and 15 receive dynamic priority boosts. Higher numbers indicate higher priorities.")
ostdPriorityBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdPriorityBase.setStatus('current')
if mibBuilder.loadTexts: ostdPriorityBase.setDescription("Current base priority of a thread. The operating system may raise the thread's dynamic priority above the base priority if the thread is handling user input, or lower it toward the base priority if the thread becomes compute-bound. The PriorityBase property can have a value between 0 and 31.")
ostdProcessCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 17), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdProcessCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ostdProcessCreationClassName.setDescription('Value of the scoping process CreationClassName property.')
ostdProcessHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 18), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdProcessHandle.setStatus('current')
if mibBuilder.loadTexts: ostdProcessHandle.setDescription('Process that created the thread. The contents of this property can be used by Windows API elements.')
ostdStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdStartAddress.setStatus('current')
if mibBuilder.loadTexts: ostdStartAddress.setDescription("Starting address of the thread. Because any application with appropriate access to the thread can change the thread's context, this value may only be an approximation of the thread's starting address.")
ostdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdStatus.setStatus('current')
if mibBuilder.loadTexts: ostdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
ostdThreadState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialized", 0), ("ready", 1), ("running", 2), ("standby", 3), ("terminated", 4), ("waiting", 5), ("transition", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdThreadState.setStatus('current')
if mibBuilder.loadTexts: ostdThreadState.setDescription('Current execution state for the thread.')
ostdThreadWaitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("executive", 0), ("freePage", 1), ("pageIn", 2), ("poolAllocation", 3), ("executionDelay", 4), ("freePage2", 5), ("pageIn2", 6), ("executive2", 7), ("freePage3", 8), ("pageIn3", 9), ("poolAllocation2", 10), ("executionDelay2", 11), ("freePage4", 12), ("pageIn4", 13), ("eventPairHigh", 14), ("eventPairLow", 15), ("lpcreceive", 16), ("lpcreply", 17), ("virtualMemory", 18), ("pageOut", 19), ("unknown", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdThreadWaitReason.setStatus('current')
if mibBuilder.loadTexts: ostdThreadWaitReason.setDescription('Reason why the thread is waiting. The value is only valid if the ThreadState member is set to Waiting (6). Event pairs allow communication with protected subsystems .')
ostdUserModeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 2, 1, 23), Counter64()).setUnits('100ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostdUserModeTime.setStatus('current')
if mibBuilder.loadTexts: ostdUserModeTime.setDescription('Time in user mode, in 100 nanoseconds. If this information is not available, a value of 0 should be used.')
win32CreateProcess = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 22, 9, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: win32CreateProcess.setStatus('current')
if mibBuilder.loadTexts: win32CreateProcess.setDescription("This OID can only be written to and cannot be read! Creates a new process. For security reasons, the script/program to be executed must reside in 'spawn' directory under the SNMP Informant-OS installation.")
wmiSchedulerJobs = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10))
if mibBuilder.loadTexts: wmiSchedulerJobs.setStatus('current')
if mibBuilder.loadTexts: wmiSchedulerJobs.setDescription('The Scheduler Jobs subcategory groups classes that represent scheduled job settings.')
win32CurrentTimeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1), )
if mibBuilder.loadTexts: win32CurrentTimeTable.setStatus('current')
if mibBuilder.loadTexts: win32CurrentTimeTable.setDescription('The Win32_CurrentTime abstract is a singleton WMI class that describes a point in time by using the component items such as milliseconds, seconds, minutes, hours, days, days of the week, week in the month, months, quarters, and years.')
win32CurrentTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osctIndex"))
if mibBuilder.loadTexts: win32CurrentTimeEntry.setStatus('current')
if mibBuilder.loadTexts: win32CurrentTimeEntry.setDescription('None')
osctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctIndex.setStatus('current')
if mibBuilder.loadTexts: osctIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osctDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctDay.setStatus('current')
if mibBuilder.loadTexts: osctDay.setDescription('Current day that matches the query (1-31).')
osctDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: osctDayOfWeek.setDescription('Current day of the current week that match the query (0-6). By convention, the value 0 (zero) is always Sunday, regardless of the culture or the locale set on the machine.')
osctHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctHour.setStatus('current')
if mibBuilder.loadTexts: osctHour.setDescription('Current hour of the current day (0-23).')
osctMilliseconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctMilliseconds.setStatus('current')
if mibBuilder.loadTexts: osctMilliseconds.setDescription('Not used.')
osctMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctMinute.setStatus('current')
if mibBuilder.loadTexts: osctMinute.setDescription('Current minute (0-59).')
osctMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctMonth.setStatus('current')
if mibBuilder.loadTexts: osctMonth.setDescription('Current month that matches the query (1-12).')
osctQuarter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctQuarter.setStatus('current')
if mibBuilder.loadTexts: osctQuarter.setDescription('Current quarter of the current year (1-4).')
osctSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctSecond.setStatus('current')
if mibBuilder.loadTexts: osctSecond.setDescription('Current second of the current minute (0-59).')
osctWeekInMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctWeekInMonth.setStatus('current')
if mibBuilder.loadTexts: osctWeekInMonth.setDescription('Current week (1-6) in the current month (1-12).')
osctYear = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osctYear.setStatus('current')
if mibBuilder.loadTexts: osctYear.setDescription('Current year that matches the query (4 digits).')
win32ScheduledJobTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2), )
if mibBuilder.loadTexts: win32ScheduledJobTable.setStatus('current')
if mibBuilder.loadTexts: win32ScheduledJobTable.setDescription('The Win32_ScheduledJob WMI class represents a job created with the AT command in a command window from Start, Run, or from Control Panel, Scheduled Jobs. You can enumerate or delete any existing jobs that are displayed in the Control Panel, Scheduled Jobs dialog box by using the Win32_ScheduledJob instances. This class is only instrumented on Windows NT 4.0 and later. Each job scheduled against the schedule service is stored persistently (the scheduler can start a job after a reboot), and is executed at the specified time and day of the week or month. If the computer is not active or if the scheduled service is not running at the specified job time, the schedule service runs the specified job on the next day at the specified time. Jobs are scheduled according to Universal Coordinated Time (UTC) with bias offset from Greenwich mean time (GMT), which means that a job can be specified using any time zone. The Win32_ScheduledJob class returns the local time with UTC offset when enumerating an object, and converts to local time when creating new jobs. For example, a job specified to run on a computer in Boston at 10:30 P.M. Monday PST time will be scheduled to run locally at 1:30 A.M. Tuesday EST. Note that a client must take into account whether or not daylight savings time is in operation on the local computer, and if it is, then subtract a bias of 60 minutes from the UTC offset.')
win32ScheduledJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "ossjIndex"))
if mibBuilder.loadTexts: win32ScheduledJobEntry.setStatus('current')
if mibBuilder.loadTexts: win32ScheduledJobEntry.setDescription('None')
ossjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjIndex.setStatus('current')
if mibBuilder.loadTexts: ossjIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ossjCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjCaption.setStatus('current')
if mibBuilder.loadTexts: ossjCaption.setDescription('Short description of the object a one-line string.')
ossjCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjCommand.setStatus('current')
if mibBuilder.loadTexts: ossjCommand.setDescription("Name of the command, batch program, or binary file (and command line arguments) that the schedule service uses to invoke the job. Example: 'defrag /q /f'")
ossjDaysOfMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjDaysOfMonth.setStatus('current')
if mibBuilder.loadTexts: ossjDaysOfMonth.setDescription('Days of the month when the job is scheduled to run. If a job is scheduled to run on multiple days of the month, these values can be joined in a logical OR. For example, if a job is to run on the 1st and 16th of each month, the value of the DaysOfMonth property would be 1 OR 32768. Value Meaning 0x1 1st 0x2 2nd 0x4 3rd 0x8 4th 0x10 5th 0x20 6th 0x40 7th 0x80 8th 0x100 9th 0x200 10th 0x400 11th 0x800 12th 0x1000 13th 0x2000 14th 0x4000 15th 0x8000 16th 0x10000 17th 0x20000 18th 0x40000 19th 0x80000 20th 0x100000 21st 0x200000 22nd 0x400000 23rd 0x800000 24th 0x1000000 25th 0x2000000 26th 0x4000000 27th 0x8000000 28th 0x10000000 29th 0x20000000 30th 0x40000000 31st')
ossjDaysOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjDaysOfWeek.setStatus('current')
if mibBuilder.loadTexts: ossjDaysOfWeek.setDescription('Days of the week when a job is scheduled to run. If a job is scheduled to run on multiple days of the week, the values can be joined in a logical OR. For example, if a job is scheduled to run on Mondays, Wednesdays, and Fridays the value of the DaysOfWeek property would be 1 OR 4 OR 16. Value Meaning 0x1 Monday 0x2 Tuesday 0x4 Wednesday 0x8 Thursday 0x10 Friday 0x20 Saturday 0x40 Sunday')
ossjDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjDescription.setStatus('current')
if mibBuilder.loadTexts: ossjDescription.setDescription('Description of the object.')
ossjElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjElapsedTime.setStatus('current')
if mibBuilder.loadTexts: ossjElapsedTime.setDescription('Length of time that the job has been executing.')
ossjInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjInstallDate.setStatus('current')
if mibBuilder.loadTexts: ossjInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
ossjInteractWithDesktop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjInteractWithDesktop.setStatus('current')
if mibBuilder.loadTexts: ossjInteractWithDesktop.setDescription('Specified job is interactive, which means that a user can give input to a scheduled job while it is executing.')
ossjJobId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjJobId.setStatus('current')
if mibBuilder.loadTexts: ossjJobId.setDescription('Identifying number of the job. It is used by methods as a handle to one job being scheduled on this computer.')
ossjJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjJobStatus.setStatus('current')
if mibBuilder.loadTexts: ossjJobStatus.setDescription('Status of execution the last time this job was scheduled to run.')
ossjName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjName.setStatus('current')
if mibBuilder.loadTexts: ossjName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property.')
ossjNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjNotify.setStatus('current')
if mibBuilder.loadTexts: ossjNotify.setDescription('User to be notified when job completes or fails.')
ossjOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjOwner.setStatus('current')
if mibBuilder.loadTexts: ossjOwner.setDescription('User that submitted the job.')
ossjPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjPriority.setStatus('current')
if mibBuilder.loadTexts: ossjPriority.setDescription('Urgency or importance of execution of a job. ')
ossjRunRepeatedly = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjRunRepeatedly.setStatus('current')
if mibBuilder.loadTexts: ossjRunRepeatedly.setDescription('Scheduled job runs repeatedly on the days that the job is scheduled. If FALSE, then the job is run one time.')
ossjStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjStartTime.setStatus('current')
if mibBuilder.loadTexts: ossjStartTime.setDescription('UTC time to run the job, in the form of YYYYMMDDHHMMSS.MMMMMM(+-)OOO, where YYYYMMDD must be replaced by ********. The replacement is necessary because the scheduling service only allows jobs to be configured to run one time, or run on a day of the month or week. A job cannot be run on a specific date. Example: ********123000.000000-420 implies 12:30 P.M. PST with daylight savings time in effect.')
ossjStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjStatus.setStatus('current')
if mibBuilder.loadTexts: ossjStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
ossjTimeSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjTimeSubmitted.setStatus('current')
if mibBuilder.loadTexts: ossjTimeSubmitted.setDescription('Time the job is submitted.')
ossjUntilTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 10, 2, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossjUntilTime.setStatus('current')
if mibBuilder.loadTexts: ossjUntilTime.setDescription('Time after which the job is invalid or must be stopped.')
wmiServices = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11))
if mibBuilder.loadTexts: wmiServices.setStatus('current')
if mibBuilder.loadTexts: wmiServices.setDescription('The Services subcategory groups classes that represent services and base services.')
win32ServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1), )
if mibBuilder.loadTexts: win32ServiceTable.setStatus('current')
if mibBuilder.loadTexts: win32ServiceTable.setDescription('The Win32_Service WMI class represents a service on a Windows computer system. A service application conforms to the interface rules of the Service Control Manager (SCM), and can be started by a user automatically at system boot through the Services control panel utility, or by an application that uses the service functions included in the Windows API. Services can execute when no user is logged on to the system.')
win32ServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "ossvcIndex"))
if mibBuilder.loadTexts: win32ServiceEntry.setStatus('current')
if mibBuilder.loadTexts: win32ServiceEntry.setDescription('None')
ossvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcIndex.setStatus('current')
if mibBuilder.loadTexts: ossvcIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
ossvcAcceptPause = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcAcceptPause.setStatus('current')
if mibBuilder.loadTexts: ossvcAcceptPause.setDescription('Service can be paused.')
ossvcAcceptStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcAcceptStop.setStatus('current')
if mibBuilder.loadTexts: ossvcAcceptStop.setDescription('Service can be stopped.')
ossvcCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcCaption.setStatus('current')
if mibBuilder.loadTexts: ossvcCaption.setDescription('Short description of the object a one-line string.')
ossvcCheckPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcCheckPoint.setStatus('current')
if mibBuilder.loadTexts: ossvcCheckPoint.setDescription('Value that the service increments periodically to report its progress during a long start, stop, pause, or continue operation. For example, the service increments this value as it completes each step of its initialization when it is starting up. The user interface program that invokes the operation on the service uses this value to track the progress of the service during a lengthy operation. This value is not valid and should be zero when the service does not have a start, stop, pause, or continue operation pending. ')
ossvcCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ossvcCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified.')
ossvcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcDescription.setStatus('current')
if mibBuilder.loadTexts: ossvcDescription.setDescription('Description of the object.')
ossvcDesktopInteract = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcDesktopInteract.setStatus('current')
if mibBuilder.loadTexts: ossvcDesktopInteract.setDescription('Service can create or communicate with windows on the desktop.')
ossvcDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcDisplayName.setStatus('current')
if mibBuilder.loadTexts: ossvcDisplayName.setDescription("Display name of the service. This string has a maximum length of 256 characters. The name is case-preserved in the Service Control Manager. However, DisplayName comparisons are always case-insensitive. Constraint: accepts the same value as the Name property. Example: 'Atdisk'")
ossvcErrorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcErrorControl.setStatus('current')
if mibBuilder.loadTexts: ossvcErrorControl.setDescription("Severity of the error if this service fails to start during startup. The value indicates the action taken by the startup program if failure occurs. All errors are logged by the computer system. Value Meaning 'Ignore' User is not notified. 'Normal' User is notified. 'Severe' System is restarted with the last-known-good configuration. 'Critical' System attempts to restart with a good configuration. 'Unknown' Severity of the error is unknown. ")
ossvcExitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcExitCode.setStatus('current')
if mibBuilder.loadTexts: ossvcExitCode.setDescription('Windows error code defining any problems encountered in starting or stopping the service. This property is set to ERROR_SERVICE_SPECIFIC_ERROR (1066) when the error is unique to the service represented by this class, and information about the error is available in the ServiceSpecificExitCode property. The service sets this value to NO_ERROR when running, and again upon normal termination.')
ossvcInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcInstallDate.setStatus('current')
if mibBuilder.loadTexts: ossvcInstallDate.setDescription('Date object is installed. This property does not need a value to indicate that the object is installed.')
ossvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcName.setStatus('current')
if mibBuilder.loadTexts: ossvcName.setDescription('Unique identifier of the service that provides an indication of the functionality that is managed. This functionality is described in more detail in the Description property of the object.')
ossvcPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcPathName.setStatus('current')
if mibBuilder.loadTexts: ossvcPathName.setDescription("Fully-qualified path to the service binary file that implements the service. Example: '\\SystemRoot\\System32\\drivers\\afd.sys'")
ossvcProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcProcessId.setStatus('current')
if mibBuilder.loadTexts: ossvcProcessId.setDescription('Process identifier of the service. Example: 324')
ossvcServiceSpecificExitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcServiceSpecificExitCode.setStatus('current')
if mibBuilder.loadTexts: ossvcServiceSpecificExitCode.setDescription('Service-specific error code for errors that occur while the service is either starting or stopping. The exit codes are defined by the service represented by this class. This value is only set when the ExitCode property value is ERROR_SERVICE_SPECIFIC_ERROR (1066).')
ossvcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("kernelDriver", 1), ("fileSystemDriver", 2), ("adapter", 3), ("recognizerDriver", 4), ("ownProcess", 5), ("shareProcess", 6), ("interactiveProcess", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcServiceType.setStatus('current')
if mibBuilder.loadTexts: ossvcServiceType.setDescription('Type of service provided to calling processes.')
ossvcStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcStarted.setStatus('current')
if mibBuilder.loadTexts: ossvcStarted.setDescription('Service has been started.')
ossvcStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcStartMode.setStatus('current')
if mibBuilder.loadTexts: ossvcStartMode.setDescription("Start mode of the Windows base service. Value Meaning 'Boot' Device driver started by the operating system loader (valid only for driver services) 'System' Device driver started by the IoInitSystem method (valid only for driver services) 'Auto' Service to be started automatically by the service control manager during system startup 'Manual' Service to be started by the service control manager when a process calls the StartService method 'Disabled' Service that cannot be started ")
ossvcStartName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcStartName.setStatus('current')
if mibBuilder.loadTexts: ossvcStartName.setDescription("Account name under which a service runs. Depending on the service type, the account name may be in the form of DomainName\\Username. The service process is logged by using one of these two forms when it runs. If the account belongs to the built-in domain, then .\\Username can be specified. For kernel or system level drivers, StartName contains the driver object name (that is, \\FileSystem\\Rdr or \\Driver\\Xns) which the input and output (I/O) system uses to load the device driver. Additionally, if NULL is specified, the driver runs with a default object name created by the I/O system based on the service name. Example: 'DWDOM\\Admin' Windows XP: You may use UPN format (Username@DomainName) to specify the StartName. Windows 2000: To change from a specified user to the LocalSystem account, use .\\LocalSystem.")
ossvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stopped", 1), ("startPending", 2), ("stopPending", 3), ("running", 4), ("continuePending", 5), ("pausePending", 6), ("paused", 7), ("unknown", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ossvcState.setStatus('current')
if mibBuilder.loadTexts: ossvcState.setDescription('Current state of the base service. Setting the state to stopped, running, or paused will either stop, start (or resume), or pause the service.')
ossvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcStatus.setStatus('current')
if mibBuilder.loadTexts: ossvcStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
ossvcSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: ossvcSystemCreationClassName.setDescription('Type name of the system that hosts this service.')
ossvcSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcSystemName.setStatus('current')
if mibBuilder.loadTexts: ossvcSystemName.setDescription('Name of the system that hosts this service.')
ossvcTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcTagId.setStatus('current')
if mibBuilder.loadTexts: ossvcTagId.setDescription('Unique tag value for this service in the group. A value of 0 (zero) indicates that the service does not have a tag. A tag can be used to order service startup within a load order group by specifying a tag order vector in the registry located at: HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control \\GroupOrderList. Tags are only evaluated for Kernel Driver and File System Driver start type services that have Boot or System start modes.')
ossvcWaitHint = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 11, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossvcWaitHint.setStatus('current')
if mibBuilder.loadTexts: ossvcWaitHint.setDescription('Estimated time required (in milliseconds) for a pending start, stop, pause, or continue operation. After the specified amount of time has elapsed, the service makes its next call to the SetServiceStatus method with either an incremented CheckPoint value or a change in CurrentState. If the amount of time specified by WaitHint passes, and CheckPoint has not been incremented, or CurrentState has not changed, the service control manager or service control program assumes that an error has occurred.')
wmiShares = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12))
if mibBuilder.loadTexts: wmiShares.setStatus('current')
if mibBuilder.loadTexts: wmiShares.setDescription('The Shares subcategory groups classes that represent details of shared resources such as printers and folders.')
win32DFSNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1), )
if mibBuilder.loadTexts: win32DFSNodeTable.setStatus('current')
if mibBuilder.loadTexts: win32DFSNodeTable.setDescription('The Win32_DFSNode WMI class represents a root or junction node of a domain-based or stand-alone distributed file system (DFS). The DFS root is also represented by this class because the root is also a node. Each link has one or more targets or actual share paths for the storage defined by the Win32_DFSTarget class. This class is new for Windows Server 2003.')
win32DFSNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osdfsnIndex"))
if mibBuilder.loadTexts: win32DFSNodeEntry.setStatus('current')
if mibBuilder.loadTexts: win32DFSNodeEntry.setDescription('None')
osdfsnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnIndex.setStatus('current')
if mibBuilder.loadTexts: osdfsnIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osdfsnCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnCaption.setStatus('current')
if mibBuilder.loadTexts: osdfsnCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
osdfsnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnDescription.setStatus('current')
if mibBuilder.loadTexts: osdfsnDescription.setDescription('Comment that describes the link. This property is inherited from CIM_ManagedSystemElement.')
osdfsnInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnInstallDate.setStatus('current')
if mibBuilder.loadTexts: osdfsnInstallDate.setDescription('Date that an object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement. ')
osdfsnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnName.setStatus('current')
if mibBuilder.loadTexts: osdfsnName.setDescription('Identifier for the DFS node. It is the same as the entry path of a node, based on the Universal Naming Convention (UNC). It can take one of the following two forms: \\\\\\\\DfsServerName\\\\ShareName\\\\PathToLink \\\\\\\\DomainName\\\\FtDfsName\\\\PathToLink where DfsServerName is the name of a server that hosts the DFS root volume. ShareName is the name of the share published on the host server. PathToLink is the path to the physical share. DomainName is the name of the domain that hosts the DFS root volume. FtDfsName is the name of the fault-tolerant DFS root published. PathToLink is the path to the physical share. This property overrides the Name property in CIM_ManagedSystemElement.')
osdfsnRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnRoot.setStatus('current')
if mibBuilder.loadTexts: osdfsnRoot.setDescription('Indicate whether the node is a DFS root or a link. A value of TRUE indicates that the node is a root.')
osdfsnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("inconsistent", 1), ("online", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnState.setStatus('current')
if mibBuilder.loadTexts: osdfsnState.setDescription('Status of the node.')
osdfsnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnStatus.setStatus('current')
if mibBuilder.loadTexts: osdfsnStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from the CIM_ManagedSystemElement class.")
osdfsnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 1, 1, 9), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfsnTimeout.setStatus('current')
if mibBuilder.loadTexts: osdfsnTimeout.setDescription('Time in seconds that the client caches the referral of this link.')
win32DFSTargetTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2), )
if mibBuilder.loadTexts: win32DFSTargetTable.setStatus('current')
if mibBuilder.loadTexts: win32DFSTargetTable.setDescription('The Win32_DFSTarget WMI class represents a target of a DFS node. This class was added for Windows Server 2003 family.')
win32DFSTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "osdfstIndex"))
if mibBuilder.loadTexts: win32DFSTargetEntry.setStatus('current')
if mibBuilder.loadTexts: win32DFSTargetEntry.setDescription('None')
osdfstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstIndex.setStatus('current')
if mibBuilder.loadTexts: osdfstIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osdfstCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstCaption.setStatus('current')
if mibBuilder.loadTexts: osdfstCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
osdfstDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstDescription.setStatus('current')
if mibBuilder.loadTexts: osdfstDescription.setDescription('Comment that describes the link. This property is inherited from CIM_ManagedSystemElement.')
osdfstInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstInstallDate.setStatus('current')
if mibBuilder.loadTexts: osdfstInstallDate.setDescription('Date and time when object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement. ')
osdfstLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstLinkName.setStatus('current')
if mibBuilder.loadTexts: osdfstLinkName.setDescription('Entry path of the node to which this target belongs.')
osdfstName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstName.setStatus('current')
if mibBuilder.loadTexts: osdfstName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
osdfstServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstServerName.setStatus('current')
if mibBuilder.loadTexts: osdfstServerName.setDescription('Name of the server that the node references')
osdfstShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstShareName.setStatus('current')
if mibBuilder.loadTexts: osdfstShareName.setDescription('String representing the name of the share that the node references.')
osdfstState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("offline", 0), ("online", 2), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstState.setStatus('current')
if mibBuilder.loadTexts: osdfstState.setDescription('State of the target.')
osdfstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osdfstStatus.setStatus('current')
if mibBuilder.loadTexts: osdfstStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
win32ServerConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3), )
if mibBuilder.loadTexts: win32ServerConnectionTable.setStatus('current')
if mibBuilder.loadTexts: win32ServerConnectionTable.setDescription('The Win32_ServerConnection WMI class represents the connections made from a remote computer to a shared resource on the local computer. This class is new for Windows XP.')
win32ServerConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1), ).setIndexNames((0, "INFORMANT-OS", "osscnIndex"))
if mibBuilder.loadTexts: win32ServerConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: win32ServerConnectionEntry.setDescription('None')
osscnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnIndex.setStatus('current')
if mibBuilder.loadTexts: osscnIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osscnActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 2), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnActiveTime.setStatus('current')
if mibBuilder.loadTexts: osscnActiveTime.setDescription('Number of seconds since this connection was established.')
osscnCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnCaption.setStatus('current')
if mibBuilder.loadTexts: osscnCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
osscnComputerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnComputerName.setStatus('current')
if mibBuilder.loadTexts: osscnComputerName.setDescription('Name of the computer from which the connection is established.')
osscnConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnConnectionID.setStatus('current')
if mibBuilder.loadTexts: osscnConnectionID.setDescription('Unique identifier for the connection.')
osscnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnDescription.setStatus('current')
if mibBuilder.loadTexts: osscnDescription.setDescription('Comment that describes the link. This property is inherited from CIM_ManagedSystemElement.')
osscnInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnInstallDate.setStatus('current')
if mibBuilder.loadTexts: osscnInstallDate.setDescription('Date/time when the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
osscnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnName.setStatus('current')
if mibBuilder.loadTexts: osscnName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
osscnNumberOfFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnNumberOfFiles.setStatus('current')
if mibBuilder.loadTexts: osscnNumberOfFiles.setDescription('Number of open files associated with this connection.')
osscnNumberOfUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnNumberOfUsers.setStatus('current')
if mibBuilder.loadTexts: osscnNumberOfUsers.setDescription('Number of users associated with this connection.')
osscnShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnShareName.setStatus('current')
if mibBuilder.loadTexts: osscnShareName.setDescription('Share resource to which the connection is established.')
osscnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnStatus.setStatus('current')
if mibBuilder.loadTexts: osscnStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly, but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
osscnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 3, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscnUserName.setStatus('current')
if mibBuilder.loadTexts: osscnUserName.setDescription('Name of the user that made a connection.')
win32ServerSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4), )
if mibBuilder.loadTexts: win32ServerSessionTable.setStatus('current')
if mibBuilder.loadTexts: win32ServerSessionTable.setDescription('The Win32_ServerSession WMI class represents the sessions that have been established with the local computer by users on a remote computer. This class was added for Windows XP.')
win32ServerSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1), ).setIndexNames((0, "INFORMANT-OS", "osssIndex"))
if mibBuilder.loadTexts: win32ServerSessionEntry.setStatus('current')
if mibBuilder.loadTexts: win32ServerSessionEntry.setDescription('None')
osssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssIndex.setStatus('current')
if mibBuilder.loadTexts: osssIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osssActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 2), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: osssActiveTime.setStatus('current')
if mibBuilder.loadTexts: osssActiveTime.setDescription('Number of seconds since this session was established.')
osssCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssCaption.setStatus('current')
if mibBuilder.loadTexts: osssCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
osssClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssClientType.setStatus('current')
if mibBuilder.loadTexts: osssClientType.setDescription('Type of the connected client.')
osssComputerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssComputerName.setStatus('current')
if mibBuilder.loadTexts: osssComputerName.setDescription('Name of the computer from which the session is established.')
osssDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssDescription.setStatus('current')
if mibBuilder.loadTexts: osssDescription.setDescription('Comment that describes the link. This property is inherited from CIM_ManagedSystemElement.')
osssIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 7), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: osssIdleTime.setStatus('current')
if mibBuilder.loadTexts: osssIdleTime.setDescription('Number of seconds that the session has been idle.')
osssInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssInstallDate.setStatus('current')
if mibBuilder.loadTexts: osssInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
osssName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssName.setStatus('current')
if mibBuilder.loadTexts: osssName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
osssResourcesOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssResourcesOpened.setStatus('current')
if mibBuilder.loadTexts: osssResourcesOpened.setDescription('Number of files, devices, and pipes opened during this session.')
osssSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("guest", 0), ("noEncryption", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssSessionType.setStatus('current')
if mibBuilder.loadTexts: osssSessionType.setDescription('Method of opening the session. This property is available only on Windows NT.')
osssStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssStatus.setStatus('current')
if mibBuilder.loadTexts: osssStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
osssTransportName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssTransportName.setStatus('current')
if mibBuilder.loadTexts: osssTransportName.setDescription('Name of the transport that the client is using to communicate with the server.')
osssUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 4, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osssUserName.setStatus('current')
if mibBuilder.loadTexts: osssUserName.setDescription('Name of the user that established the session.')
win32ShareTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5), )
if mibBuilder.loadTexts: win32ShareTable.setStatus('current')
if mibBuilder.loadTexts: win32ShareTable.setDescription('The Win32_Share class represents a shared resource on a Windows system. This may be a disk drive, printer, inter-process communication, or other shareable device. For information on retrieving WMI classes see Retrieving a Class.')
win32ShareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1), ).setIndexNames((0, "INFORMANT-OS", "osshIndex"))
if mibBuilder.loadTexts: win32ShareEntry.setStatus('current')
if mibBuilder.loadTexts: win32ShareEntry.setDescription('None')
osshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshIndex.setStatus('current')
if mibBuilder.loadTexts: osshIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osshAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshAccessMask.setStatus('current')
if mibBuilder.loadTexts: osshAccessMask.setDescription('List of access rights to the given file or directory held by the user or group on whose behalf the instance is returned. This property is only supported under Windows NT and Windows 2000. On Windows 98 and on Windows NT/Windows 2000 FAT volumes, the FULL_ACCESS value is returned instead, indicating no security has been set on the object. Windows 2000, Windows XP: This property is no longer used due to the expense of calling GetEffectiveRightsFromAcl. You should use the Win32_Share.GetAccessMask method instead. The value of the AccessMask property is set to NULL.')
osshAllowMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshAllowMaximum.setStatus('current')
if mibBuilder.loadTexts: osshAllowMaximum.setDescription('Number of concurrent users for this resource has been limited. If TRUE, the value in the MaximumAllowed property is ignored.')
osshCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshCaption.setStatus('current')
if mibBuilder.loadTexts: osshCaption.setDescription('Short description (one-line string) of the object.')
osshDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshDescription.setStatus('current')
if mibBuilder.loadTexts: osshDescription.setDescription('Description of the object.')
osshInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshInstallDate.setStatus('current')
if mibBuilder.loadTexts: osshInstallDate.setDescription('Object was installed. This property does not need a value to indicate that the object is installed.')
osshMaximumAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshMaximumAllowed.setStatus('current')
if mibBuilder.loadTexts: osshMaximumAllowed.setDescription('Limit on the maximum number of users allowed to use this resource concurrently. The value is only valid if the AllowMaximum property is set to FALSE')
osshName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshName.setStatus('current')
if mibBuilder.loadTexts: osshName.setDescription("Alias given to a path set up as a share on a Windows system. Example: 'public'")
osshPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshPath.setStatus('current')
if mibBuilder.loadTexts: osshPath.setDescription("Local path of the Windows share. Example: 'C:\\Program Files'")
osshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshStatus.setStatus('current')
if mibBuilder.loadTexts: osshStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states.")
osshType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 12, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osshType.setStatus('current')
if mibBuilder.loadTexts: osshType.setDescription('Type of resource being shared. Types include disk drives, print queues, interprocess communications (IPC), and general devices. Value Meaning 0 Disk Drive 1 Print Queue 2 Device 3 IPC 2147483648 Disk Drive Admin 2147483649 Print Queue Admin 2147483650 Device Admin 2147483651 IPC Admin')
wmiStorage = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13))
if mibBuilder.loadTexts: wmiStorage.setStatus('current')
if mibBuilder.loadTexts: wmiStorage.setDescription('The Storage subcategory groups classes that represent storage information.')
win32ShadowContextTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1), )
if mibBuilder.loadTexts: win32ShadowContextTable.setStatus('current')
if mibBuilder.loadTexts: win32ShadowContextTable.setDescription('The Win32_ShadowContext class specifies how a shadow copy is to be created, queried, or deleted, and the degree of writer involvement. Windows XP and earlier: This class is not available.')
win32ShadowContextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "osscxIndex"))
if mibBuilder.loadTexts: win32ShadowContextEntry.setStatus('current')
if mibBuilder.loadTexts: win32ShadowContextEntry.setDescription('None')
osscxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxIndex.setStatus('current')
if mibBuilder.loadTexts: osscxIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osscxClientAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxClientAccessible.setStatus('current')
if mibBuilder.loadTexts: osscxClientAccessible.setDescription('If true, the shadow copy is created by the Windows Previous Versions component.')
osscxDifferential = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxDifferential.setStatus('current')
if mibBuilder.loadTexts: osscxDifferential.setDescription('If true, the shadow copy is created by a differential shadow copy provider. The provider can be implemented in hardware or software.')
osscxExposedLocally = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxExposedLocally.setStatus('current')
if mibBuilder.loadTexts: osscxExposedLocally.setDescription('If true, the shadow copy is exposed on a remote computer with a network share. If both ExposedLocally and ExposedRemotely are false, the shadow copy is hidden.')
osscxExposedRemotely = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxExposedRemotely.setStatus('current')
if mibBuilder.loadTexts: osscxExposedRemotely.setDescription('If true, the shadow copy is exposed on a remote computer with a network share. If both ExposedRemotely and ExposedLocally are false, the shadow copy is hidden.')
osscxHardwareAssisted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxHardwareAssisted.setStatus('current')
if mibBuilder.loadTexts: osscxHardwareAssisted.setDescription('If true, the shadow copy is created by a hardware shadow copy provider.')
osscxImported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxImported.setStatus('current')
if mibBuilder.loadTexts: osscxImported.setDescription('If true, the shadow copy is imported to a computer by using the Import method not created by using the Create method.')
osscxName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxName.setStatus('current')
if mibBuilder.loadTexts: osscxName.setDescription('Name of the context.')
osscxNoAutoRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxNoAutoRelease.setStatus('current')
if mibBuilder.loadTexts: osscxNoAutoRelease.setDescription('If true, the shadow copy is retained after the requestor process ends. If false, the shadow copy is automatically deleted when the shadow copy requestor process ends. ')
osscxNotSurfaced = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxNotSurfaced.setStatus('current')
if mibBuilder.loadTexts: osscxNotSurfaced.setDescription('If true, the shadow copy is not currently in the device namespace of the local computer.')
osscxNoWriters = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxNoWriters.setStatus('current')
if mibBuilder.loadTexts: osscxNoWriters.setDescription('If true, the shadow copy is created without involvement of shadow copy writer components.')
osscxPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxPersistent.setStatus('current')
if mibBuilder.loadTexts: osscxPersistent.setDescription('If true, the shadow copy persists across reboots.')
osscxPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxPlex.setStatus('current')
if mibBuilder.loadTexts: osscxPlex.setDescription('If true, the shadow copy is created by a split mirror shadow copy provider.')
osscxTransportable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscxTransportable.setStatus('current')
if mibBuilder.loadTexts: osscxTransportable.setDescription('If true, the shadow copy can be surfaced on another computer. If false, and the volumes are surfaced locally, it may not be possible to surface them later on a different computer.')
win32ShadowCopyTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2), )
if mibBuilder.loadTexts: win32ShadowCopyTable.setStatus('current')
if mibBuilder.loadTexts: win32ShadowCopyTable.setDescription('The Win32_ShadowCopy class is a storage extent that represents a duplicate copy of the original volume at a previous time. Windows XP and earlier: This class is not available.')
win32ShadowCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "osscpIndex"))
if mibBuilder.loadTexts: win32ShadowCopyEntry.setStatus('current')
if mibBuilder.loadTexts: win32ShadowCopyEntry.setDescription('None')
osscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpIndex.setStatus('current')
if mibBuilder.loadTexts: osscpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osscpClientAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpClientAccessible.setStatus('current')
if mibBuilder.loadTexts: osscpClientAccessible.setDescription('If true, the shadow copy is created by the Windows Previous Versions component.')
osscpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpCount.setStatus('current')
if mibBuilder.loadTexts: osscpCount.setDescription('Number of shadow copies in a shadow copy set to which a shadow copy belongs.')
osscpDeviceObject = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpDeviceObject.setStatus('current')
if mibBuilder.loadTexts: osscpDeviceObject.setDescription('Windows object manager name for an underlying storage device that supports the original volume.')
osscpDifferential = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpDifferential.setStatus('current')
if mibBuilder.loadTexts: osscpDifferential.setDescription('If true, the shadow copy is created by a differential shadow copy provider. The provider can be implemented in hardware or software.')
osscpExposedLocally = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpExposedLocally.setStatus('current')
if mibBuilder.loadTexts: osscpExposedLocally.setDescription('If true, the shadow copy is exposed on the local computer with a drive letter or mount point. If ExposedLocally and ExposedRemotely are not set, the shadow copy is hidden.')
osscpExposedName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpExposedName.setStatus('current')
if mibBuilder.loadTexts: osscpExposedName.setDescription('File system name of a shadow copy when it is exposed. The ExposedName property might contain a drive letter or mount point. The ExposedName property is NULL when a shadow copy is hidden or otherwise not exposed.')
osscpExposedRemotely = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpExposedRemotely.setStatus('current')
if mibBuilder.loadTexts: osscpExposedRemotely.setDescription('If true, the shadow copy is exposed on a remote computer with a network share. If ExposedRemotely and ExposedLocally are not set, the shadow copy is hidden.')
osscpHardwareAssisted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpHardwareAssisted.setStatus('current')
if mibBuilder.loadTexts: osscpHardwareAssisted.setDescription('If true, the shadow copy is created by a hardware shadow copy provider.')
osscpID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpID.setStatus('current')
if mibBuilder.loadTexts: osscpID.setDescription('Unique identifier for a shadow copy on the system.')
osscpImported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpImported.setStatus('current')
if mibBuilder.loadTexts: osscpImported.setDescription('If true, the shadow copy is imported to a computer by using the Import method not created by using the Create method.')
osscpNoAutoRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpNoAutoRelease.setStatus('current')
if mibBuilder.loadTexts: osscpNoAutoRelease.setDescription('If true, the shadow copy is retained after the requestor process ends. If false, the shadow copy is automatically deleted when the requestor process ends.')
osscpNotSurfaced = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpNotSurfaced.setStatus('current')
if mibBuilder.loadTexts: osscpNotSurfaced.setDescription('If true, the shadow copy is not currently in the device namespace of a local computer.')
osscpNoWriters = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpNoWriters.setStatus('current')
if mibBuilder.loadTexts: osscpNoWriters.setDescription('If true, the shadow copy is created with the involvement of the shadow copy writer components.')
osscpOriginatingMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpOriginatingMachine.setStatus('current')
if mibBuilder.loadTexts: osscpOriginatingMachine.setDescription('Name of the computer that hosts the original volume.')
osscpPersistent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpPersistent.setStatus('current')
if mibBuilder.loadTexts: osscpPersistent.setDescription('If true, the shadow copy is persistent across reboots.')
osscpPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpPlex.setStatus('current')
if mibBuilder.loadTexts: osscpPlex.setDescription('If true, the shadow copy is created by a split mirror shadow copy provider. The provider can be implemented in hardware or software.')
osscpProviderID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpProviderID.setStatus('current')
if mibBuilder.loadTexts: osscpProviderID.setDescription('Unique identifier for a shadow provider that creates a shadow.')
osscpServiceMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpServiceMachine.setStatus('current')
if mibBuilder.loadTexts: osscpServiceMachine.setDescription('Name of the computer that services the shadow copy.')
osscpSetID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpSetID.setStatus('current')
if mibBuilder.loadTexts: osscpSetID.setDescription('Unique identifier for a shadow copy set to which the shadow belongs.')
osscpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("preparing", 1), ("processingPrepare", 2), ("prepared", 3), ("processingPrecommit", 4), ("precommitted", 5), ("processingCommit", 6), ("committed", 7), ("processingPostcommit", 8), ("created", 9), ("aborted", 10), ("deleted", 11), ("count", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpState.setStatus('current')
if mibBuilder.loadTexts: osscpState.setDescription('Current state of a shadow copy.')
osscpTransportable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpTransportable.setStatus('current')
if mibBuilder.loadTexts: osscpTransportable.setDescription('If true, the shadow copy can be surfaced on another computer. If false, and the volumes are surfaced locally, it may not be possible to surface them later on a different computer.')
osscpVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 2, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osscpVolumeName.setStatus('current')
if mibBuilder.loadTexts: osscpVolumeName.setDescription('Name of the original volume for which a shadow copy is made.')
win32ShadowProviderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3), )
if mibBuilder.loadTexts: win32ShadowProviderTable.setStatus('current')
if mibBuilder.loadTexts: win32ShadowProviderTable.setDescription('Typically, the Win32_ShadowProvider class represents a component that is a combination of user-mode and kernel or firmware implementation, that creates and represents volume shadow copies. Windows XP and earlier: This class is not available.')
win32ShadowProviderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3, 1), ).setIndexNames((0, "INFORMANT-OS", "osspIndex"))
if mibBuilder.loadTexts: win32ShadowProviderEntry.setStatus('current')
if mibBuilder.loadTexts: win32ShadowProviderEntry.setDescription('None')
osspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osspIndex.setStatus('current')
if mibBuilder.loadTexts: osspIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
osspCLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osspCLSID.setStatus('current')
if mibBuilder.loadTexts: osspCLSID.setDescription('Common Object Model (COM) class ID registered for a shadow provider.')
osspID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osspID.setStatus('current')
if mibBuilder.loadTexts: osspID.setDescription('Uniquely identifies the shadow provider on a system.')
osspName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osspName.setStatus('current')
if mibBuilder.loadTexts: osspName.setDescription('Descriptive name of a provider.')
osspType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("system", 1), ("software", 2), ("hardware", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osspType.setStatus('current')
if mibBuilder.loadTexts: osspType.setDescription('Specifies the class to which a shadow provider belongs.')
osspVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osspVersion.setStatus('current')
if mibBuilder.loadTexts: osspVersion.setDescription('Text representation of a shadow provider version.')
osspVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 13, 3, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osspVersionID.setStatus('current')
if mibBuilder.loadTexts: osspVersionID.setDescription('Numeric representation of a shadow provider version.')
wmiEventLog = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14))
if mibBuilder.loadTexts: wmiEventLog.setStatus('current')
if mibBuilder.loadTexts: wmiEventLog.setDescription('The Windows NT Event Log subcategory groups classes that represent events, event log entries, event log configuration settings, and so on.')
win32NTEventlogFileTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1), )
if mibBuilder.loadTexts: win32NTEventlogFileTable.setStatus('current')
if mibBuilder.loadTexts: win32NTEventlogFileTable.setDescription('The Win32_NTEventlogFile WMI class represents a logical file or directory of Windows NT events. The file is also known as the event log.')
win32NTEventlogFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1), ).setIndexNames((0, "INFORMANT-OS", "oselfIndex"))
if mibBuilder.loadTexts: win32NTEventlogFileEntry.setStatus('current')
if mibBuilder.loadTexts: win32NTEventlogFileEntry.setDescription('None')
oselfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfIndex.setStatus('current')
if mibBuilder.loadTexts: oselfIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
oselfAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfAccessMask.setStatus('current')
if mibBuilder.loadTexts: oselfAccessMask.setDescription('List of access rights to the given file or directory of Windows NT events held by the user or group on whose behalf the instance is returned.')
oselfArchive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfArchive.setStatus('current')
if mibBuilder.loadTexts: oselfArchive.setDescription('If True, a file of Windows NT events should be archived.')
oselfCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfCaption.setStatus('current')
if mibBuilder.loadTexts: oselfCaption.setDescription('Short description (one-line string) of the object.')
oselfCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfCompressed.setStatus('current')
if mibBuilder.loadTexts: oselfCompressed.setDescription('If True, a file of Windows NT events is compressed.')
oselfCompressionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfCompressionMethod.setStatus('current')
if mibBuilder.loadTexts: oselfCompressionMethod.setDescription("Algorithm or tool used to compress the logical file of Windows NT events. If it is not possible (or not desired) to describe the compression scheme (perhaps because it is not known), use the following words: 'Unknown' to represent that it is not known whether the logical file is compressed. 'Compressed' to represent that the file is compressed but either its compression scheme is not known or not disclosed. 'Not Compressed' to represent that the logical file is not compressed. ")
oselfCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfCreationClassName.setStatus('current')
if mibBuilder.loadTexts: oselfCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified.')
oselfCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfCreationDate.setStatus('current')
if mibBuilder.loadTexts: oselfCreationDate.setDescription('File of Windows NT events was created.')
oselfCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: oselfCSCreationClassName.setDescription('Class of the computer system.')
oselfCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfCSName.setStatus('current')
if mibBuilder.loadTexts: oselfCSName.setDescription('Name of the computer system.')
oselfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfDescription.setStatus('current')
if mibBuilder.loadTexts: oselfDescription.setDescription('Description of the object.')
oselfDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfDrive.setStatus('current')
if mibBuilder.loadTexts: oselfDrive.setDescription("Drive letter (including colon) of the file of Windows NT events. Example: 'c:'")
oselfEightDotThreeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfEightDotThreeFileName.setStatus('current')
if mibBuilder.loadTexts: oselfEightDotThreeFileName.setDescription("DOS-compatible file name for this file of Windows NT events. Example: 'c:\\progra~1'")
oselfEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfEncrypted.setStatus('current')
if mibBuilder.loadTexts: oselfEncrypted.setDescription('File of Windows NT events is encrypted.')
oselfEncryptionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfEncryptionMethod.setStatus('current')
if mibBuilder.loadTexts: oselfEncryptionMethod.setDescription("Algorithm or tool used to encrypt the logical file. If it is not possible (or not desired) to describe the encryption scheme (perhaps for security reasons), use the following words: 'Unknown' to represent that it is not known whether the logical file is encrypted. 'Encrypted' to represent that the file is encrypted but either its encryption scheme is not known or not disclosed. 'Not Encrypted' to represent that the logical file is not encrypted.")
oselfExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfExtension.setStatus('current')
if mibBuilder.loadTexts: oselfExtension.setDescription("File extension (without the dot) of Windows NT events. Example: 'txt', 'mof', 'mdb'")
oselfFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfFileName.setStatus('current')
if mibBuilder.loadTexts: oselfFileName.setDescription("File name (without extension) of the file of Windows NT events. Example: 'autoexec'")
oselfFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfFileSize.setStatus('current')
if mibBuilder.loadTexts: oselfFileSize.setDescription('Size of the file of Windows NT events (in bytes).')
oselfFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfFileType.setStatus('current')
if mibBuilder.loadTexts: oselfFileType.setDescription('File type (indicated by the Extension property).')
oselfFSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfFSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: oselfFSCreationClassName.setDescription('Class of the file system.')
oselfFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfFSName.setStatus('current')
if mibBuilder.loadTexts: oselfFSName.setDescription('Name of the file system.')
oselfHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfHidden.setStatus('current')
if mibBuilder.loadTexts: oselfHidden.setDescription('If True, a file of Windows NT events is hidden.')
oselfInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfInstallDate.setStatus('current')
if mibBuilder.loadTexts: oselfInstallDate.setDescription('Object is installed. This property does not need a value to indicate that the object is installed.')
oselfInUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfInUseCount.setStatus('current')
if mibBuilder.loadTexts: oselfInUseCount.setDescription("Number of 'file opens' that are currently active against the file of Windows NT events.")
oselfLastAccessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfLastAccessed.setStatus('current')
if mibBuilder.loadTexts: oselfLastAccessed.setDescription('File of Windows NT events was last accessed.')
oselfLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfLastModified.setStatus('current')
if mibBuilder.loadTexts: oselfLastModified.setDescription('File of Windows NT events was last modified.')
oselfLogFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfLogFileName.setStatus('current')
if mibBuilder.loadTexts: oselfLogFileName.setDescription('Name of the file of Windows NT events. Standard log file names include Application, System, and Security.')
oselfManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfManufacturer.setStatus('current')
if mibBuilder.loadTexts: oselfManufacturer.setDescription('Manufacturer from version resource, if one is present.')
oselfMaxFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfMaxFileSize.setStatus('current')
if mibBuilder.loadTexts: oselfMaxFileSize.setDescription('Maximum size (in bytes) permitted for the file of Windows NT events. If the file exceeds its maximum size, its contents are moved to another file and the primary file is emptied. A value of zero indicates no size limit. WMI retrieves the Maxsize value from the Event Log Service registry values.')
oselfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfName.setStatus('current')
if mibBuilder.loadTexts: oselfName.setDescription("Inherited name that serves as a key of a logical file instance of Windows NT events within a file system. Full path names should be provided. Example: 'c:\\winnt\\system\\win.ini'")
oselfNumberOfRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfNumberOfRecords.setStatus('current')
if mibBuilder.loadTexts: oselfNumberOfRecords.setDescription('Number of records in the file of Windows NT events. This value is determined by calling the Windows function GetNumberOfEventLogRecords.')
oselfOverwriteOutDated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 32), Gauge32()).setUnits('Days').setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfOverwriteOutDated.setStatus('current')
if mibBuilder.loadTexts: oselfOverwriteOutDated.setDescription('Number of days after which an event can be overwritten. Value Meaning 0: Any entry can be overwritten when necessary. 1..365: Events that have been in the log file for one year (365 days) or less can be overwritten. 4294967295: Nothing can be ever be overwritten. ')
oselfOverWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfOverWritePolicy.setStatus('current')
if mibBuilder.loadTexts: oselfOverWritePolicy.setDescription("Current overwrite policy the Event Log service employs for this log file. Data can be never overwritten, or overwritten when necessary or when outdated. When data is outdated depends on the OverwriteOutDated value. Value Meaning 'WhenNeeded' The value of OverwriteOutDated equals 0. 'OutDated' The value of OverwriteOutDated ranges from 1 to 365. 'Never' The value of OverwriteOutDated equals 4294967295.")
oselfPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfPath.setStatus('current')
if mibBuilder.loadTexts: oselfPath.setDescription("Path of the file of Windows NT event. This includes leading and trailing backslashes. Example: '\\windows\\system\\'")
oselfReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfReadable.setStatus('current')
if mibBuilder.loadTexts: oselfReadable.setDescription('If True, a file of Windows NT event can be read.')
oselfSources = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 36), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfSources.setStatus('current')
if mibBuilder.loadTexts: oselfSources.setDescription('List of applications that are registered to log into this log file.')
oselfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfStatus.setStatus('current')
if mibBuilder.loadTexts: oselfStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may function properly but predicts a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The 'Service' status can apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. Values are: 'OK' 'Error' 'Degraded' 'Unknown' 'Pred Fail' 'Starting' 'Stopping' 'Service' 'Stressed' 'NonRecover' 'No Contact' 'Lost Comm'")
oselfSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfSystem.setStatus('current')
if mibBuilder.loadTexts: oselfSystem.setDescription('If True, a file of Windows NT event is a system file.')
oselfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 39), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfVersion.setStatus('current')
if mibBuilder.loadTexts: oselfVersion.setDescription('Version string from version resource if one is present.')
oselfWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 1, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselfWriteable.setStatus('current')
if mibBuilder.loadTexts: oselfWriteable.setDescription('If True, a file of Windows NT event can be written.')
win32NTLogEventTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2), )
if mibBuilder.loadTexts: win32NTLogEventTable.setStatus('current')
if mibBuilder.loadTexts: win32NTLogEventTable.setDescription("The Win32_NTLogEvent WMI class is used to translate instances from the Windows NT event log. An application must have SeSecurityPrivilege to receive events from the security event log, otherwise 'Access Denied' is returned to the application.")
win32NTLogEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1), ).setIndexNames((0, "INFORMANT-OS", "oselIndex"))
if mibBuilder.loadTexts: win32NTLogEventEntry.setStatus('current')
if mibBuilder.loadTexts: win32NTLogEventEntry.setDescription('None')
oselIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselIndex.setStatus('current')
if mibBuilder.loadTexts: oselIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
oselCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselCategory.setStatus('current')
if mibBuilder.loadTexts: oselCategory.setDescription('Subcategory for this event. This subcategory is source-specific.')
oselCategoryString = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselCategoryString.setStatus('current')
if mibBuilder.loadTexts: oselCategoryString.setDescription('Translation of the subcategory. The translation is source-specific.')
oselComputerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselComputerName.setStatus('current')
if mibBuilder.loadTexts: oselComputerName.setDescription('Name of the computer that generated this event.')
oselData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselData.setStatus('current')
if mibBuilder.loadTexts: oselData.setDescription('List of the binary data that accompanied the report of the Windows NT event.')
oselEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselEventCode.setStatus('current')
if mibBuilder.loadTexts: oselEventCode.setDescription('Value of the lower 16-bits of the EventIdentifier property. It is present to match the value displayed in the Windows NT Event Viewer. Note that two events from the same source may have the same value for this property but may have different severity and EventIdentifier values.')
oselEventIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselEventIdentifier.setStatus('current')
if mibBuilder.loadTexts: oselEventIdentifier.setDescription('Identifier of the event. This is specific to the source that generated the event log entry and is used, together with SourceName, to uniquely identify a Windows NT event type.')
oselEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("error", 1), ("warning", 2), ("information", 3), ("securityAuditSuccess", 4), ("securityAuditFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselEventType.setStatus('current')
if mibBuilder.loadTexts: oselEventType.setDescription('Type of event.')
oselInsertionStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselInsertionStrings.setStatus('current')
if mibBuilder.loadTexts: oselInsertionStrings.setDescription('List of the insertion strings that accompanied the report of the Windows NT event.')
oselLogfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselLogfile.setStatus('current')
if mibBuilder.loadTexts: oselLogfile.setDescription('Name of Windows NT event log file. This is used together with RecordNumber to uniquely identify an instance of this class.')
oselMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselMessage.setStatus('current')
if mibBuilder.loadTexts: oselMessage.setDescription('Event message as it appears in the Windows NT event log. This is a standard message with zero or more insertion strings supplied by the source of the Windows NT event. The insertion strings are inserted into the standard message in a predefined format. If there are no insertion strings or there is a problem inserting the insertion strings, only the standard message will be present in this field.')
oselRecordNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselRecordNumber.setStatus('current')
if mibBuilder.loadTexts: oselRecordNumber.setDescription('Identifies the event within the Windows NT event log file. This is specific to the log file and is used together with the log file name to uniquely identify an instance of this class.')
oselSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselSourceName.setStatus('current')
if mibBuilder.loadTexts: oselSourceName.setDescription('Name of the source (application, service, driver, subsystem) that generated the entry. It is used, together with EventIdentifier to uniquely identify an Windows NT event type.')
oselTimeGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselTimeGenerated.setStatus('current')
if mibBuilder.loadTexts: oselTimeGenerated.setDescription('Source generated the event.')
oselTimeWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselTimeWritten.setStatus('current')
if mibBuilder.loadTexts: oselTimeWritten.setDescription('Event was written to the logfile.')
oselType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselType.setStatus('current')
if mibBuilder.loadTexts: oselType.setDescription('Type of event. This is an enumerated string. It is preferable to use the EventType property rather than the Type property. Value Meaning 1 Error 2 Warning 4 Information 8 Security audit success 16 Security audit failure')
oselUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 22, 14, 2, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oselUser.setStatus('current')
if mibBuilder.loadTexts: oselUser.setDescription('User name of the logged-on user when the event occurred. If the user name cannot be determined, this will be NULL.')
mibBuilder.exportSymbols("INFORMANT-OS", osdpName=osdpName, win32PageFileEntry=win32PageFileEntry, ostdCreationClassName=ostdCreationClassName, osshPath=osshPath, osncoStatus=osncoStatus, osvxdVersion=osvxdVersion, oscsSystemStartupOptions=oscsSystemStartupOptions, ossdAcceptStop=ossdAcceptStop, ospsPageFileUsage=ospsPageFileUsage, osldCaption=osldCaption, win32QuotaSettingEntry=win32QuotaSettingEntry, oscfArchive=oscfArchive, osssComputerName=osssComputerName, osdtIconTitleFaceName=osdtIconTitleFaceName, osdfstName=osdfstName, win32ShareTable=win32ShareTable, oscfInUseCount=oscfInUseCount, wmiProcesses=wmiProcesses, ospsTerminationDate=ospsTerminationDate, ospfuStatus=ospfuStatus, osmldSystemCreationClassName=osmldSystemCreationClassName, osvlDeviceId=osvlDeviceId, osprtName=osprtName, ospfLastAccessed=ospfLastAccessed, oscsAutomaticResetBootOption=oscsAutomaticResetBootOption, wmiJobObjects=wmiJobObjects, osnpMessageOriented=osnpMessageOriented, ososDataExecPreventionAvailable=ososDataExecPreventionAvailable, oselEventIdentifier=oselEventIdentifier, osmldFreeSpace=osmldFreeSpace, osmldSupportsDiskQuotas=osmldSupportsDiskQuotas, win32ShareEntry=win32ShareEntry, osdtWallpaperStretched=osdtWallpaperStretched, osqsWarningExceededNotification=osqsWarningExceededNotification, oselUser=oselUser, osldSystemName=osldSystemName, oscsPartOfDomain=oscsPartOfDomain, osdpAccess=osdpAccess, osdpErrorDescription=osdpErrorDescription, ospsOSName=ospsOSName, osqsCaption=osqsCaption, osnpMinimumAddressSize=osnpMinimumAddressSize, win32ServerConnectionTable=win32ServerConnectionTable, osvxdDeviceDescriptorBlock=osvxdDeviceDescriptorBlock, osdpStatus=osdpStatus, osjoaDescription=osjoaDescription, osssResourcesOpened=osssResourcesOpened, osncoInstallDate=osncoInstallDate, osrcIndex=osrcIndex, wmiOperatingSystem=wmiOperatingSystem, oselfEncrypted=oselfEncrypted, ossjStatus=ossjStatus, osmldFileSystem=osmldFileSystem, win32BootConfigurationEntry=win32BootConfigurationEntry, ososDataExecPreventionDrivers=ososDataExecPreventionDrivers, oselfCompressionMethod=oselfCompressionMethod, win32DiskPartitionTable=win32DiskPartitionTable, osjoaCaption=osjoaCaption, oscspVersion=oscspVersion, ososDebug=ososDebug, ossvcCreationClassName=ossvcCreationClassName, osssName=osssName, osjoaTotalKernelTime=osjoaTotalKernelTime, osdtCaption=osdtCaption, osldBlockSize=osldBlockSize, oscfVersion=oscfVersion, win32IP4RouteTableTable=win32IP4RouteTableTable, osnpInstallDate=osnpInstallDate, osscpPlex=osscpPlex, osjoaThisPeriodTotalKernelTime=osjoaThisPeriodTotalKernelTime, oscsPowerManagementSupported=oscsPowerManagementSupported, ospfInstallDate=ospfInstallDate, osvlDirtyBitSet=osvlDirtyBitSet, osdpErrorMethodology=osdpErrorMethodology, oscfLastAccessed=oscfLastAccessed, ososDistributed=ososDistributed, osjolActiveProcessLimit=osjolActiveProcessLimit, osncoRemotePath=osncoRemotePath, ossjStartTime=ossjStartTime, win32NTEventlogFileEntry=win32NTEventlogFileEntry, oscsPowerOnPasswordStatus=oscsPowerOnPasswordStatus, osmldCompressed=osmldCompressed, ossdStartName=ossdStartName, osdoName=osdoName, osqfeStatus=osqfeStatus, osscnInstallDate=osscnInstallDate, osncoName=osncoName, osnclCaption=osnclCaption, osmldStatusInfo=osmldStatusInfo, ospsOtherOperationCount=ospsOtherOperationCount, osscnUserName=osscnUserName, wmiFileSystem=wmiFileSystem, osdoCreationClassName=osdoCreationClassName, ospsKernelModeTime=ospsKernelModeTime, osldConfigManagerUserConfig=osldConfigManagerUserConfig, ospfsCaption=ospfsCaption, osnpGuaranteesDelivery=osnpGuaranteesDelivery, win32NTLogEventEntry=win32NTLogEventEntry, oscfReadable=oscfReadable, ospfuCaption=ospfuCaption, osnpSupportsDisconnectData=osnpSupportsDisconnectData, ospfEightDotThreeFileName=ospfEightDotThreeFileName, ossdPathName=ossdPathName, ostdOSCreationClassName=ostdOSCreationClassName, osjolPerJobUserTimeLimit=osjolPerJobUserTimeLimit, osdfstInstallDate=osdfstInstallDate, osctWeekInMonth=osctWeekInMonth, oscsFrontPanelResetStatus=oscsFrontPanelResetStatus, ossjJobId=ossjJobId, osctMilliseconds=osctMilliseconds, osevSystemVariable=osevSystemVariable, osdoPrimaryOwnerName=osdoPrimaryOwnerName, osbcCaption=osbcCaption, oscspIndex=oscspIndex, osjoaIndex=osjoaIndex, ossdDescription=ossdDescription, oscsStatus=oscsStatus, osmldLastErrorCode=osmldLastErrorCode, oscfIndex=oscfIndex, osvlCapacity=osvlCapacity, osrcDebugInfoType=osrcDebugInfoType, osscnComputerName=osscnComputerName, osscnShareName=osscnShareName, osbcName=osbcName, win32TimeZoneEntry=win32TimeZoneEntry, osnjoCollectionID=osnjoCollectionID, oscsPrimaryOwnerContact=oscsPrimaryOwnerContact, osjolJobMemoryLimit=osjolJobMemoryLimit, osldQuotasDisabled=osldQuotasDisabled, osjoaTotalTerminatedProcesses=osjoaTotalTerminatedProcesses, ospfArchive=ospfArchive, ospfFileName=ospfFileName, osjolSettingID=osjolSettingID, ossdName=ossdName, oscsIndex=oscsIndex, osdoInstallDate=osdoInstallDate, oscsNameFormat=oscsNameFormat, oscfInstallDate=oscfInstallDate, ostdExecutionState=ostdExecutionState, ossdSystemCreationClassName=ossdSystemCreationClassName, ososBootDevice=ososBootDevice, osmldSessionID=osmldSessionID, oselfFileSize=oselfFileSize, ossjUntilTime=ossjUntilTime, oselfPath=oselfPath, osdtIconTitleWrap=osdtIconTitleWrap, osqfeDescription=osqfeDescription, ospfIndex=ospfIndex, osvlQuotasIncomplete=osvlQuotasIncomplete, oscsDomain=oscsDomain, oselfCompressed=oselfCompressed, oscfFSCreationClassName=oscfFSCreationClassName, osnpSupportsExpeditedData=osnpSupportsExpeditedData, osncoAccessMask=osncoAccessMask, osrtMask=osrtMask, win32DriverVXDTable=win32DriverVXDTable, ossdSystemName=ossdSystemName, osscCommand=osscCommand, osscpNotSurfaced=osscpNotSurfaced, ossvcTagId=ossvcTagId, osdpCreationClassName=osdpCreationClassName, oselfOverWritePolicy=oselfOverWritePolicy, osprtInstallDate=osprtInstallDate, osjoaThisPeriodTotalUserTime=osjoaThisPeriodTotalUserTime, ospfuDescription=ospfuDescription, win32BootConfigurationTable=win32BootConfigurationTable, win32OperatingSystemTable=win32OperatingSystemTable, osvlCompressed=osvlCompressed, osshCaption=osshCaption, oscsChassisBootupState=oscsChassisBootupState, osscpIndex=osscpIndex, ospfEncrypted=ospfEncrypted, win32DFSNodeEntry=win32DFSNodeEntry, win32ShadowProviderTable=win32ShadowProviderTable, ososLocalDateTime=ososLocalDateTime, ossvcWaitHint=ossvcWaitHint, osscpClientAccessible=osscpClientAccessible, oscfFileSize=oscfFileSize, oscspUUID=oscspUUID, win32LoadOrderGroupTable=win32LoadOrderGroupTable, osvlIndex=osvlIndex, oscfDescription=oscfDescription, oscsAdminPasswordStatus=oscsAdminPasswordStatus, oscsPauseAfterReset=oscsPauseAfterReset, win32Shutdown=win32Shutdown, ossvcStartName=ossvcStartName, oselfEncryptionMethod=oselfEncryptionMethod, osbcSettingID=osbcSettingID, oselfName=oselfName, ososCurrentTimeZone=ososCurrentTimeZone, oscfAccessMask=oscfAccessMask, ospfAccessMask=ospfAccessMask, ospfEncryptionMethod=ospfEncryptionMethod, osssInstallDate=osssInstallDate, osldSystemCreationClassName=osldSystemCreationClassName, osmldMaximumComponentLength=osmldMaximumComponentLength, osdtIconSpacing=osdtIconSpacing, osmldCaption=osmldCaption, osscxIndex=osscxIndex, osldQuotasRebuilding=osldQuotasRebuilding, ostzSettingID=ostzSettingID, osscpSetID=osscpSetID, osrcDebugFilePath=osrcDebugFilePath, oscsInitialLoadInfo=oscsInitialLoadInfo, osssActiveTime=osssActiveTime, oselfLogFileName=oselfLogFileName, ossvcInstallDate=ossvcInstallDate, osspID=osspID, osdtScreenSaverTimeout=osdtScreenSaverTimeout, osrtStatus=osrtStatus, ososDescription=ososDescription, oscfCreationDate=oscfCreationDate, ospsStatus=ospsStatus, osldDescription=osldDescription, osdfsnName=osdfsnName, ospfCreationDate=ospfCreationDate, osvxdServiceTableSize=osvxdServiceTableSize, osdoDomainControllerAddress=osdoDomainControllerAddress, osldErrorCleared=osldErrorCleared, osmldIndex=osmldIndex, ospsQuotaNonPagedPoolUsage=ospsQuotaNonPagedPoolUsage, ossatGraphicsScore=ossatGraphicsScore, oselfArchive=oselfArchive, osvlIndexingEnabled=osvlIndexingEnabled, ospsOSCreationClassName=ospsOSCreationClassName, ospfExtension=ospfExtension, ossdStartMode=ossdStartMode, oscsModel=oscsModel, ostdName=ostdName, osdpDescription=osdpDescription, osssIdleTime=osssIdleTime, osdpErrorCleared=osdpErrorCleared, ospsReadOperationCount=ospsReadOperationCount, wmiDesktop=wmiDesktop, oscsResetLimit=oscsResetLimit, osdtScreenSaverSecure=osdtScreenSaverSecure, PYSNMP_MODULE_ID=wmiOperatingSystem, osldSupportsDiskQuotas=osldSupportsDiskQuotas, ostdElapsedTime=ostdElapsedTime, oscsTotalPhysicalMemory=oscsTotalPhysicalMemory, ostdUserModeTime=ostdUserModeTime, ossdInstallDate=ossdInstallDate, osdtScreenSaverActive=osdtScreenSaverActive, ospfsInitialSize=ospfsInitialSize, ososProductType=ososProductType, ossjDaysOfMonth=ossjDaysOfMonth, osspVersionID=osspVersionID, ospfCreationClassName=ospfCreationClassName, osldDriveType=osldDriveType, ospfVersion=ospfVersion, ossjElapsedTime=ossjElapsedTime, ospfsSettingID=ospfsSettingID, ospfuAllocatedBaseSize=ospfuAllocatedBaseSize, osmldPurpose=osmldPurpose)
mibBuilder.exportSymbols("INFORMANT-OS", osnpSupportsGracefulClosing=osnpSupportsGracefulClosing, osncoConnectionType=osncoConnectionType, win32DFSTargetTable=win32DFSTargetTable, osdoCaption=osdoCaption, osvlSupportsDiskQuotas=osvlSupportsDiskQuotas, ospfStatus=ospfStatus, osdoClientSiteName=osdoClientSiteName, osbcDescription=osbcDescription, ososManufacturer=ososManufacturer, ossvcCheckPoint=ossvcCheckPoint, win32ScheduledJobEntry=win32ScheduledJobEntry, osssIndex=osssIndex, ostzStandardDayOfWeek=ostzStandardDayOfWeek, osevStatus=osevStatus, oselfCreationClassName=oselfCreationClassName, oselInsertionStrings=oselInsertionStrings, ospsHandle=ospsHandle, osvlDriveLetter=osvlDriveLetter, win32IP4PersistedRouteTableEntry=win32IP4PersistedRouteTableEntry, ossatAssessmentState=ossatAssessmentState, ososSizeStoredInPagingFiles=ososSizeStoredInPagingFiles, ostzDaylightHour=ostzDaylightHour, ostzStandardBias=ostzStandardBias, oselfWriteable=oselfWriteable, ostzDaylightMinute=ostzDaylightMinute, ospfuCurrentUsage=ospfuCurrentUsage, osrcWriteDebugInfo=osrcWriteDebugInfo, osscnIndex=osscnIndex, osrcDescription=osrcDescription, ososOSLanguage=ososOSLanguage, ospsPriority=ospsPriority, osrcName=osrcName, oselfCSName=oselfCSName, oscfCSName=oscfCSName, ospsOtherTransferCount=ospsOtherTransferCount, win32LoadOrderGroupEntry=win32LoadOrderGroupEntry, osshAllowMaximum=osshAllowMaximum, osldPurpose=osldPurpose, win32EnvironmentEntry=win32EnvironmentEntry, osvxdBuildNumber=osvxdBuildNumber, oscsLastLoadInfo=oscsLastLoadInfo, win32StartupCommandEntry=win32StartupCommandEntry, osldConfigManagerErrorCode=osldConfigManagerErrorCode, oselEventCode=oselEventCode, osevCaption=osevCaption, oscfCaption=oscfCaption, osmldName=osmldName, osvxdSerialNumber=osvxdSerialNumber, osnclIndex=osnclIndex, ossjDaysOfWeek=ossjDaysOfWeek, ossjNotify=ossjNotify, ossvcServiceSpecificExitCode=ossvcServiceSpecificExitCode, oselfAccessMask=oselfAccessMask, oscfManufacturer=oscfManufacturer, osshName=osshName, ospfCaption=ospfCaption, osdpAvailability=osdpAvailability, ospfCompressionMethod=ospfCompressionMethod, ossvcExitCode=ossvcExitCode, osvxdStatus=osvxdStatus, ossjInteractWithDesktop=ossjInteractWithDesktop, osrtMetric3=osrtMetric3, oscfHidden=oscfHidden, ostdCaption=ostdCaption, osrcKernelDumpOnly=osrcKernelDumpOnly, ostzIndex=ostzIndex, osdpHiddenSectors=osdpHiddenSectors, osdpPNPDeviceID=osdpPNPDeviceID, osdoRoles=osdoRoles, win32ShadowProviderEntry=win32ShadowProviderEntry, win32ComputerSystemTable=win32ComputerSystemTable, ossatTimeTaken=ossatTimeTaken, osscxHardwareAssisted=osscxHardwareAssisted, ossjInstallDate=ossjInstallDate, win32OSRecoveryConfigEntry=win32OSRecoveryConfigEntry, osscpCount=osscpCount, ospfFSName=ospfFSName, osnpMaximumMessageSize=osnpMaximumMessageSize, ospsUserModeTime=ospsUserModeTime, ospfFSCreationClassName=ospfFSCreationClassName, osevInstallDate=osevInstallDate, oscsBootupState=oscsBootupState, oscspCaption=oscspCaption, oscfEncryptionMethod=oscfEncryptionMethod, oselfSystem=oselfSystem, ostzStandardName=ostzStandardName, osdtName=osdtName, oslogCaption=oslogCaption, ososCodeSet=ososCodeSet, oselCategory=oselCategory, osldVolumeDirty=osldVolumeDirty, ostdCSName=ostdCSName, osqfeName=osqfeName, osnjoCaption=osnjoCaption, oslogDriverEnabled=oslogDriverEnabled, ossvcState=ossvcState, oselfHidden=oselfHidden, osldFreeSpace=osldFreeSpace, osdfstLinkName=osdfstLinkName, osssUserName=osssUserName, win32NetworkProtocolTable=win32NetworkProtocolTable, osmldCreationClassName=osmldCreationClassName, osscxPersistent=osscxPersistent, ossvcAcceptPause=ossvcAcceptPause, osvlQuotasEnabled=osvlQuotasEnabled, osldNumberOfBlocks=osldNumberOfBlocks, osmldAvailability=osmldAvailability, osmldDescription=osmldDescription, win32WinSATTable=win32WinSATTable, ospsExecutionState=ospsExecutionState, osdfsnInstallDate=osdfsnInstallDate, osshIndex=osshIndex, wmiNetworking=wmiNetworking, oselfMaxFileSize=oselfMaxFileSize, osnpName=osnpName, ososOSType=ososOSType, osrtInformation=osrtInformation, ossjTimeSubmitted=ossjTimeSubmitted, osdfsnState=osdfsnState, osdfsnStatus=osdfsnStatus, oselfCreationDate=oselfCreationDate, osrtMetric2=osrtMetric2, wmiStorage=wmiStorage, osdpBootPartition=osdpBootPartition, oselRecordNumber=oselRecordNumber, ossjJobStatus=ossjJobStatus, osnpIndex=osnpIndex, ospsHandleCount=ospsHandleCount, osdoPrimaryOwnerContact=osdoPrimaryOwnerContact, osdtSettingID=osdtSettingID, osbcLastDrive=osbcLastDrive, osdoDNSForestName=osdoDNSForestName, ososEncryptionLevel=ososEncryptionLevel, osjoaActiveProcesses=osjoaActiveProcesses, osjoaOtherTransferCount=osjoaOtherTransferCount, win32NetworkClientTable=win32NetworkClientTable, osldCompressed=osldCompressed, ososSerialNumber=ososSerialNumber, osmldStatus=osmldStatus, ostzStandardYear=ostzStandardYear, osdpBlockSize=osdpBlockSize, ososSuiteMask=ososSuiteMask, oscsDNSHostName=oscsDNSHostName, ostdPriority=ostdPriority, oselfStatus=oselfStatus, oscsPrimaryOwnerName=oscsPrimaryOwnerName, ostzStandardSecond=ostzStandardSecond, oselfLastModified=oselfLastModified, win32PageFileUsageTable=win32PageFileUsageTable, oscspSKUNumber=oscspSKUNumber, osdfsnDescription=osdfsnDescription, oselCategoryString=oselCategoryString, win32ShadowContextTable=win32ShadowContextTable, osdpSystemCreationClassName=osdpSystemCreationClassName, ostzStandardHour=ostzStandardHour, ossdErrorControl=ossdErrorControl, oselfVersion=oselfVersion, osmldErrorCleared=osmldErrorCleared, osjolAffinity=osjolAffinity, osncoComment=osncoComment, osscnName=osscnName, osrtMetric5=osrtMetric5, ostdHandle=ostdHandle, osnpSupportsEncryption=osnpSupportsEncryption, osvlAutomount=osvlAutomount, oselfCaption=oselfCaption, osnjoDescription=osnjoDescription, osldErrorDescription=osldErrorDescription, ososSystemDevice=ososSystemDevice, oscfExtension=oscfExtension, win32ProcessEntry=win32ProcessEntry, osvlQuotasRebuilding=osvlQuotasRebuilding, osprtMetric1=osprtMetric1, oscsThermalState=oscsThermalState, osctIndex=osctIndex, wmiServices=wmiServices, win32NTEventlogFileTable=win32NTEventlogFileTable, osshType=osshType, osmldVolumeName=osmldVolumeName, osnclStatus=osnclStatus, oscspDescription=oscspDescription, osdpConfigManagerUserConfig=osdpConfigManagerUserConfig, osrcCaption=osrcCaption, oscsBootOptionOnWatchDog=oscsBootOptionOnWatchDog, osncoLocalName=osncoLocalName, osdtDescription=osdtDescription, ospsCreationClassName=ospsCreationClassName, ospsProcessId=ospsProcessId, osrtDescription=osrtDescription, ospsWindowsVersion=ospsWindowsVersion, osmldQuotasRebuilding=osmldQuotasRebuilding, oselfCSCreationClassName=oselfCSCreationClassName, ososOrganization=ososOrganization, ososCountryCode=ososCountryCode, win32ProcessTable=win32ProcessTable, ostzDaylightName=ostzDaylightName, osldProviderName=osldProviderName, ospsIndex=ospsIndex, osscUser=osscUser, osscpState=osscpState, oslogName=oslogName, osvxdTargetOperatingSystem=osvxdTargetOperatingSystem, osmldQuotasDisabled=osmldQuotasDisabled, osdoDSKerberosDistCenterFlag=osdoDSKerberosDistCenterFlag, ososServicePackMajorVersion=ososServicePackMajorVersion, osqsSettingID=osqsSettingID, oscfStatus=oscfStatus, osdoDSGlobalCatalogFlag=osdoDSGlobalCatalogFlag, ostzDaylightYear=ostzDaylightYear, osqsIndex=osqsIndex, ostdThreadState=ostdThreadState, oscfDrive=oscfDrive, ososNumberOfProcesses=ososNumberOfProcesses, ososTotalVirtualMemorySize=ososTotalVirtualMemorySize, osdfsnCaption=osdfsnCaption, osscxNoWriters=osscxNoWriters, oselComputerName=oselComputerName, win32MappedLogicalDiskTable=win32MappedLogicalDiskTable, osdfstState=osdfstState, oslogIndex=oslogIndex, osdfsnRoot=osdfsnRoot, ososForegroundApplicationBoost=ososForegroundApplicationBoost, oscsBootOptionOnLimit=oscsBootOptionOnLimit, osrtCaption=osrtCaption, osscnStatus=osscnStatus, ossvcDescription=ossvcDescription, osscnDescription=osscnDescription, ospsCSCreationClassName=ospsCSCreationClassName, osmldConfigManagerErrorCode=osmldConfigManagerErrorCode, osmldProviderName=osmldProviderName, osssTransportName=osssTransportName, ospfCSName=ospfCSName, osvxdSoftwareElementState=osvxdSoftwareElementState, osvxdDescription=osvxdDescription, osvxdIndex=osvxdIndex, osmldNumberOfBlocks=osmldNumberOfBlocks, osldIndex=osldIndex, osscDescription=osscDescription, win32NetworkClientEntry=win32NetworkClientEntry, osmldSystemName=osmldSystemName, win32ComputerSystemProductTable=win32ComputerSystemProductTable, osvlMaximumFileNameLength=osvlMaximumFileNameLength, ostzDaylightMillisecond=ostzDaylightMillisecond, win32NamedJobObjectTable=win32NamedJobObjectTable, osdpRewritePartition=osdpRewritePartition, ossvcProcessId=ossvcProcessId, osmldBlockSize=osmldBlockSize, wmiOperatingSystemSettings=wmiOperatingSystemSettings, ososCSDVersion=ososCSDVersion, osssDescription=osssDescription, oscsNumberOfLogicalProcessors=oscsNumberOfLogicalProcessors, oselLogfile=oselLogfile, ossdState=ossdState, win32LogicalDiskEntry=win32LogicalDiskEntry)
mibBuilder.exportSymbols("INFORMANT-OS", osrtType=osrtType, ossjCaption=ossjCaption, osnpMaximumAddressSize=osnpMaximumAddressSize, osscpExposedLocally=osscpExposedLocally, oselfDescription=oselfDescription, ossdExitCode=ossdExitCode, ospfsDescription=ospfsDescription, win32ServerSessionTable=win32ServerSessionTable, osscnConnectionID=osscnConnectionID, osdpStartingOffset=osdpStartingOffset, win32OSRecoveryConfigTable=win32OSRecoveryConfigTable, osvlFreeSpace=osvlFreeSpace, osldSize=osldSize, oscsUserName=oscsUserName, osdpPowerManagementCapabilities=osdpPowerManagementCapabilities, osjolCaption=osjolCaption, osnpSupportsMulticasting=osnpSupportsMulticasting, oselfManufacturer=oselfManufacturer, osdfstDescription=osdfstDescription, ostdCSCreationClassName=ostdCSCreationClassName, osshDescription=osshDescription, ososBuildType=ososBuildType, ossdIndex=ossdIndex, osncoIndex=osncoIndex, osscnActiveTime=osscnActiveTime, osspVersion=osspVersion, oscfPath=oscfPath, ospsQuotaPeakPagedPoolUsage=ospsQuotaPeakPagedPoolUsage, ospfuPeakUsage=ospfuPeakUsage, osdpBootable=osdpBootable, win32ComputerSystemEntry=win32ComputerSystemEntry, wmiShares=wmiShares, osldQuotasIncomplete=osldQuotasIncomplete, ospfMaximumSize=ospfMaximumSize, osncoRemoteName=osncoRemoteName, osscSettingID=osscSettingID, osrtMetric1=osrtMetric1, osnpSupportsGuaranteedBandwidth=osnpSupportsGuaranteedBandwidth, win32QuotaSettingTable=win32QuotaSettingTable, osdfstShareName=osdfstShareName, osdtIconTitleSize=osdtIconTitleSize, ospfReadable=ospfReadable, oscsCreationClassName=oscsCreationClassName, ostdIndex=ostdIndex, osjolSchedulingClass=osjolSchedulingClass, oscfCompressionMethod=oscfCompressionMethod, ospsExecutablePath=ospsExecutablePath, osprtCaption=osprtCaption, ossdCreationClassName=ossdCreationClassName, osprtMask=osprtMask, ososMaxNumberOfProcesses=ososMaxNumberOfProcesses, osjolMaximumWorkingSetSize=osjolMaximumWorkingSetSize, osldStatus=osldStatus, oselfFSName=oselfFSName, osdpDeviceID=osdpDeviceID, osrtAge=osrtAge, win32NTDomainEntry=win32NTDomainEntry, ososPrimary=ososPrimary, oscfLastModified=oscfLastModified, osdfsnTimeout=osdfsnTimeout, ososServicePackMinorVersion=ososServicePackMinorVersion, osdoStatus=osdoStatus, oscsNumberOfProcessors=oscsNumberOfProcessors, osldCreationClassName=osldCreationClassName, osdtCursorBlinkRate=osdtCursorBlinkRate, win32NetworkConnectionTable=win32NetworkConnectionTable, ospfManufacturer=ospfManufacturer, osnclManufacturer=osnclManufacturer, osscxPlex=osscxPlex, osldMediaType=osldMediaType, ospsParentProcessId=ospsParentProcessId, win32NamedJobObjectActgInfoEntry=win32NamedJobObjectActgInfoEntry, osldPowerManagementCapabilities=osldPowerManagementCapabilities, ososLargeSystemCache=ososLargeSystemCache, ososFreePhysicalMemory=ososFreePhysicalMemory, osctSecond=osctSecond, win32ThreadTable=win32ThreadTable, osscxExposedRemotely=osscxExposedRemotely, oscsName=oscsName, ostdProcessCreationClassName=ostdProcessCreationClassName, osdpPrimaryPartition=osdpPrimaryPartition, win32MappedLogicalDiskEntry=win32MappedLogicalDiskEntry, osnclDescription=osnclDescription, osdtCoolSwitch=osdtCoolSwitch, osldErrorMethodology=osldErrorMethodology, osrtInstallDate=osrtInstallDate, oscsPowerSupplyState=oscsPowerSupplyState, osmldDeviceID=osmldDeviceID, ososQuantumType=ososQuantumType, ossatCPUScore=ossatCPUScore, osdpConfigManagerErrorCode=osdpConfigManagerErrorCode, ospsWriteTransferCount=ospsWriteTransferCount, ospfSystem=ospfSystem, oscfFileName=oscfFileName, ososFreeSpaceInPagingFiles=ososFreeSpaceInPagingFiles, ospfLastModified=ospfLastModified, oscsPCSystemType=oscsPCSystemType, oscsSystemStartupSetting=oscsSystemStartupSetting, osnpSupportsQualityofService=osnpSupportsQualityofService, ososVersion=ososVersion, ososPlusProductID=ososPlusProductID, win32DesktopTable=win32DesktopTable, oselfNumberOfRecords=oselfNumberOfRecords, ospsCommandLine=ospsCommandLine, osscpExposedName=osscpExposedName, oscsCurrentTimeZone=oscsCurrentTimeZone, osmldSupportFileBasedCompression=osmldSupportFileBasedCompression, oscsDescription=oscsDescription, ostdProcessHandle=ostdProcessHandle, ospsName=ospsName, ospsPrivatePageCount=ospsPrivatePageCount, osdfstStatus=osdfstStatus, oscspVendor=oscspVendor, osdpPowerManagementSupported=osdpPowerManagementSupported, ostzDaylightBias=ostzDaylightBias, ostzStandardDay=ostzStandardDay, osdtWallpaper=osdtWallpaper, osscpDifferential=osscpDifferential, osjoaPeakProcessMemoryUsed=osjoaPeakProcessMemoryUsed, oscsDomainRole=oscsDomainRole, oscsKeyboardPasswordStatus=oscsKeyboardPasswordStatus, ospsInstallDate=ospsInstallDate, ospfuTempPageFile=ospfuTempPageFile, osvxdInstallDate=osvxdInstallDate, ospsMinimumWorkingSetSize=ospsMinimumWorkingSetSize, oselfFileName=oselfFileName, osjoaPeakJobMemoryUsed=osjoaPeakJobMemoryUsed, osqfeInstalledBy=osqfeInstalledBy, ospfCompressed=ospfCompressed, osscxExposedLocally=osscxExposedLocally, ossvcSystemName=ossvcSystemName, ososNumberOfUsers=ososNumberOfUsers, osdfstCaption=osdfstCaption, win32NamedJobObjectLimitSetEntry=win32NamedJobObjectLimitSetEntry, win32DiskPartitionEntry=win32DiskPartitionEntry, osldInstallDate=osldInstallDate, osevVariableValue=osevVariableValue, osrcExpandedMiniDumpDirectory=osrcExpandedMiniDumpDirectory, osscxNoAutoRelease=osscxNoAutoRelease, ossdTagId=ossdTagId, osnpDescription=osnpDescription, osdpType=osdpType, osdoDSDnsForestFlag=osdoDSDnsForestFlag, ospfCSCreationClassName=ospfCSCreationClassName, osdoDSDirectoryServiceFlag=osdoDSDirectoryServiceFlag, oscsResetCount=oscsResetCount, win32CurrentTimeTable=win32CurrentTimeTable, ospsPeakWorkingSetSize=ospsPeakWorkingSetSize, osshStatus=osshStatus, osscpPersistent=osscpPersistent, ossdDisplayName=ossdDisplayName, ostzDaylightMonth=ostzDaylightMonth, win32TimeZoneTable=win32TimeZoneTable, osmldVolumeSerialNumber=osmldVolumeSerialNumber, osnpSupportsFragmentation=osnpSupportsFragmentation, osjolLimitFlags=osjolLimitFlags, osdoDSDnsControllerFlag=osdoDSDnsControllerFlag, osjoaOtherOperationCount=osjoaOtherOperationCount, osdoNameFormat=osdoNameFormat, osqfeServicePackInEffect=osqfeServicePackInEffect, win32WinSATEntry=win32WinSATEntry, osbcIndex=osbcIndex, osdfstIndex=osdfstIndex, osrtDestination=osrtDestination, osvxdControl=osvxdControl, ossjCommand=ossjCommand, osqsDefaultWarningLimit=osqsDefaultWarningLimit, osjolPerProcessUserTimeLimit=osjolPerProcessUserTimeLimit, ospsVirtualSize=ospsVirtualSize, win32PageFileSettingTable=win32PageFileSettingTable, ostdThreadWaitReason=ostdThreadWaitReason, osldLastErrorCode=osldLastErrorCode, ostdDescription=ostdDescription, osscxTransportable=osscxTransportable, osjolMinimumWorkingSetSize=osjolMinimumWorkingSetSize, osdtWallpaperTiled=osdtWallpaperTiled, osmldConfigManagerUserConfig=osmldConfigManagerUserConfig, ospsThreadCount=ospsThreadCount, oscfSystem=oscfSystem, ossjRunRepeatedly=ossjRunRepeatedly, osqfeIndex=osqfeIndex, ospsPeakVirtualSize=ospsPeakVirtualSize, osdoDescription=osdoDescription, ostzStandardMinute=ostzStandardMinute, osprtStatus=osprtStatus, osctQuarter=osctQuarter, osdfstServerName=osdfstServerName, osvxdSoftwareElementID=osvxdSoftwareElementID, osldSupportsFileBasedCompression=osldSupportsFileBasedCompression, win32CreateProcess=win32CreateProcess, ossatD3DScore=ossatD3DScore, ospfFileType=ospfFileType, ososCSName=ososCSName, win32VolumeEntry=win32VolumeEntry, ososCreationClassName=ososCreationClassName, ososPAEEnabled=ososPAEEnabled, win32CurrentTimeEntry=win32CurrentTimeEntry, osldAccess=osldAccess, osldName=osldName, osdoDomainGUID=osdoDomainGUID, osctMinute=osctMinute, osldDeviceID=osldDeviceID, osvxdV86API=osvxdV86API, osjoaTotalPageFaultCount=osjoaTotalPageFaultCount, oscfCSCreationClassName=oscfCSCreationClassName, ososOtherTypeDescription=ososOtherTypeDescription, oscsManufacturer=oscsManufacturer, osqfeFixComments=osqfeFixComments, win32StartupCommandTable=win32StartupCommandTable, oscsOEMStringArray=oscsOEMStringArray, ostdInstallDate=ostdInstallDate, osdtScreenSaverExecutable=osdtScreenSaverExecutable, ossatIndex=ossatIndex, osbcBootDirectory=osbcBootDirectory, ososCaption=ososCaption, osvlLabel=osvlLabel, ospfsName=ospfsName, oselTimeWritten=oselTimeWritten, ospsReadTransferCount=ospsReadTransferCount, ossatDiskScore=ossatDiskScore, ossdServiceSpecificExitCode=ossdServiceSpecificExitCode, oscfWriteable=oscfWriteable, osvxdCodeSet=osvxdCodeSet, osqsVolumePath=osqsVolumePath, osncoResourceType=osncoResourceType, win32PageFileTable=win32PageFileTable, ososInstallDate=ososInstallDate, osmldAccess=osmldAccess, ossdCaption=ossdCaption, win32SystemDriverEntry=win32SystemDriverEntry, ospfFileSize=ospfFileSize, ostzDaylightDay=ostzDaylightDay, ososLastBootUpTime=ososLastBootUpTime, ostdKernelModeTime=ostdKernelModeTime, osscxClientAccessible=osscxClientAccessible, osscxDifferential=osscxDifferential, ossjName=ossjName, osvlDriveType=osvlDriveType, win32NetworkProtocolEntry=win32NetworkProtocolEntry, oslogDescription=oslogDescription, osevUserName=osevUserName, oselfEightDotThreeFileName=oselfEightDotThreeFileName, win32EnvironmentTable=win32EnvironmentTable, win32ShadowCopyEntry=win32ShadowCopyEntry, osdtGridGranularity=osdtGridGranularity, osldVolumeSerialNumber=osldVolumeSerialNumber, osvlSerialNumber=osvlSerialNumber, oscfEncrypted=oscfEncrypted, ossvcCaption=ossvcCaption, ossdStatus=ossdStatus, osdoDomainControllerName=osdoDomainControllerName, osctYear=osctYear, osncoProviderName=osncoProviderName, ostdPriorityBase=ostdPriorityBase)
mibBuilder.exportSymbols("INFORMANT-OS", osmldPowerManagementCapabilities=osmldPowerManagementCapabilities, win32OperatingSystemEntry=win32OperatingSystemEntry, ospsQuotaPeakNonPagedPoolUsage=ospsQuotaPeakNonPagedPoolUsage, osdpLastErrorCode=osdpLastErrorCode, ossvcDesktopInteract=ossvcDesktopInteract, ossvcSystemCreationClassName=ossvcSystemCreationClassName, osscxImported=osscxImported, ospsCaption=ospsCaption, osldPNPDeviceID=osldPNPDeviceID, osscpNoAutoRelease=osscpNoAutoRelease, oselfLastAccessed=oselfLastAccessed, oselfReadable=oselfReadable, ososCSCreationClassName=ososCSCreationClassName, osqfeHotFixID=osqfeHotFixID, osscpProviderID=osscpProviderID, win32PageFileSettingEntry=win32PageFileSettingEntry, osqsExceededNotification=osqsExceededNotification, osssStatus=osssStatus, oscsAutomaticResetCapability=oscsAutomaticResetCapability, osncoCaption=osncoCaption, osscnCaption=osscnCaption, win32DesktopEntry=win32DesktopEntry, oscfCreationClassName=oscfCreationClassName, ossdAcceptPause=ossdAcceptPause, osrtNextHop=osrtNextHop, osnclInstallDate=osnclInstallDate, ososTotalVisibleMemorySize=ososTotalVisibleMemorySize, osprtNextHop=osprtNextHop, wmiSchedulerJobs=wmiSchedulerJobs, win32ShadowContextEntry=win32ShadowContextEntry, win32DriverVXDEntry=win32DriverVXDEntry, ossdStarted=ossdStarted, osnjoIndex=osnjoIndex, osevDescription=osevDescription, osrcWriteToSystemLog=osrcWriteToSystemLog, osevIndex=osevIndex, oscfEightDotThreeFileName=oscfEightDotThreeFileName, oscsRoles=oscsRoles, osnjoBasicUIRestrictions=osnjoBasicUIRestrictions, osjolPriorityClass=osjolPriorityClass, oscfCompressed=oscfCompressed, ospsCreationDate=ospsCreationDate, osnpCaption=osnpCaption, osscpNoWriters=osscpNoWriters, ospfHidden=ospfHidden, osscnNumberOfUsers=osscnNumberOfUsers, osqfeCaption=osqfeCaption, oselfOverwriteOutDated=oselfOverwriteOutDated, win32DFSNodeTable=win32DFSNodeTable, osqfeInstalledOn=osqfeInstalledOn, osdpSystemName=osdpSystemName, oscsCaption=oscsCaption, ospsQuotaPagedPoolUsage=ospsQuotaPagedPoolUsage, ospfDescription=ospfDescription, osqfeInstallDate=osqfeInstallDate, oscsEnableDaylightSavingsTime=oscsEnableDaylightSavingsTime, ostdStartAddress=ostdStartAddress, osrcSendAdminAlert=osrcSendAdminAlert, osvxdManufacturer=osvxdManufacturer, win32IP4PersistedRouteTableTable=win32IP4PersistedRouteTableTable, oscsBootROMSupported=oscsBootROMSupported, osdpPurpose=osdpPurpose, oscsSupportContactDescription=oscsSupportContactDescription, oscfName=oscfName, osdoIndex=osdoIndex, oscspIdentifyingNumber=oscspIdentifyingNumber, ostzCaption=ostzCaption, ostzDaylightDayOfWeek=ostzDaylightDayOfWeek, wmiMultimedia=wmiMultimedia, win32CodecFileTable=win32CodecFileTable, osdtIndex=osdtIndex, win32VolumeTable=win32VolumeTable, osbcScratchDirectory=osbcScratchDirectory, ossjPriority=ossjPriority, osssSessionType=osssSessionType, osjoaName=osjoaName, osscpDeviceObject=osscpDeviceObject, osvxdIdentificationCode=osvxdIdentificationCode, ossdDesktopInteract=ossdDesktopInteract, oscspName=oscspName, osjoaTotalProcesses=osjoaTotalProcesses, osrcMiniDumpDirectory=osrcMiniDumpDirectory, win32NamedJobObjectActgInfoTable=win32NamedJobObjectActgInfoTable, osrtProtocol=osrtProtocol, osbcConfigurationPath=osbcConfigurationPath, osdoDcSiteName=osdoDcSiteName, ososPlusVersionNumber=ososPlusVersionNumber, oscsPowerState=oscsPowerState, osdpSize=osdpSize, osscpTransportable=osscpTransportable, oselData=oselData, osmldErrorMethodology=osmldErrorMethodology, ososSystemDrive=ososSystemDrive, oscfFileType=oscfFileType, osldVolumeName=osldVolumeName, ospsWriteOperationCount=ospsWriteOperationCount, osdpStatusInfo=osdpStatusInfo, osscpImported=osscpImported, oselfExtension=oselfExtension, osdfsnIndex=osdfsnIndex, osspCLSID=osspCLSID, ospfsMaximumSize=ospfsMaximumSize, osncoDescription=osncoDescription, ososName=ososName, oselType=oselType, ostzStandardMonth=ostzStandardMonth, oselfInstallDate=oselfInstallDate, ossjOwner=ossjOwner, ossvcPathName=ossvcPathName, osssCaption=osssCaption, osnpConnectionlessService=osnpConnectionlessService, osdpNumberOfBlocks=osdpNumberOfBlocks, ossdServiceType=ossdServiceType, ososQuantumLength=ososQuantumLength, win32IP4RouteTableEntry=win32IP4RouteTableEntry, win32ServerConnectionEntry=win32ServerConnectionEntry, oscsAutomaticManagedPagefile=oscsAutomaticManagedPagefile, osmldPNPDeviceID=osmldPNPDeviceID, ostzBias=ostzBias, ostzDescription=ostzDescription, osjoaWriteOperationCount=osjoaWriteOperationCount, osjolProcessMemoryLimit=osjolProcessMemoryLimit, win32ComputerSystemProductEntry=win32ComputerSystemProductEntry, ososIndex=ososIndex, win32NamedJobObjectLimitSetTable=win32NamedJobObjectLimitSetTable, osshInstallDate=osshInstallDate, osscxNotSurfaced=osscxNotSurfaced, osdtDragFullWindows=osdtDragFullWindows, oselfFileType=oselfFileType, ososLocale=ososLocale, oselEventType=oselEventType, oscfFSName=oscfFSName, osvxdCaption=osvxdCaption, win32NetworkConnectionEntry=win32NetworkConnectionEntry, osdoDSDnsDomainFlag=osdoDSDnsDomainFlag, oscsWakeUpType=oscsWakeUpType, oselSourceName=oselSourceName, osncoDisplayType=osncoDisplayType, ospfPath=ospfPath, osrcExpandedDebugFilePath=osrcExpandedDebugFilePath, osscIndex=osscIndex, win32ServiceTable=win32ServiceTable, win32QuickFixEngineeringTable=win32QuickFixEngineeringTable, osvxdPMAPI=osvxdPMAPI, oselTimeGenerated=oselTimeGenerated, ossatSPRLevel=ossatSPRLevel, win32ShadowCopyTable=win32ShadowCopyTable, oscsPowerManagementCapabilities=oscsPowerManagementCapabilities, oslogStatus=oslogStatus, osscpServiceMachine=osscpServiceMachine, osevName=osevName, osmldPowerManagementSupported=osmldPowerManagementSupported, wmiEventLog=wmiEventLog, win32NTLogEventTable=win32NTLogEventTable, osldMaximumComponentLength=osldMaximumComponentLength, osvxdName=osvxdName, ososBuildNumber=ososBuildNumber, osscnNumberOfFiles=osscnNumberOfFiles, osprtDescription=osprtDescription, ossvcErrorControl=ossvcErrorControl, osvlSupportsFileBasedCompression=osvlSupportsFileBasedCompression, oselfInUseCount=oselfInUseCount, osdpCaption=osdpCaption, ospfInitialSize=ospfInitialSize, win32ScheduledJobTable=win32ScheduledJobTable, ososMaxProcessMemorySize=ososMaxProcessMemorySize, ospfuIndex=ospfuIndex, osrcOverwriteExistingDebugFile=osrcOverwriteExistingDebugFile, ostdOSName=ostdOSName, osctDayOfWeek=osctDayOfWeek, win32QuickFixEngineeringEntry=win32QuickFixEngineeringEntry, osctMonth=osctMonth, ossvcDisplayName=ossvcDisplayName, ossvcServiceType=ossvcServiceType, ososStatus=ososStatus, osldPowerManagementSupported=osldPowerManagementSupported, osrtName=osrtName, osctDay=osctDay, osjolDescription=osjolDescription, ospsPeakPageFileUsage=ospsPeakPageFileUsage, ossvcIndex=ossvcIndex, osscpExposedRemotely=osscpExposedRemotely, oscsSystemStartupDelay=oscsSystemStartupDelay, win32CodecFileEntry=win32CodecFileEntry, osdpDiskIndex=osdpDiskIndex, osqsDefaultLimit=osqsDefaultLimit, oscsWorkgroup=oscsWorkgroup, ospfWriteable=ospfWriteable, oslogInstallDate=oslogInstallDate, ospsCSName=ospsCSName, ospsMaximumWorkingSetSize=ospsMaximumWorkingSetSize, osssClientType=osssClientType, osjolIndex=osjolIndex, ososRegisteredUser=ososRegisteredUser, oscfGroup=oscfGroup, osnpPseudoStreamOriented=osnpPseudoStreamOriented, osjoaReadOperationCount=osjoaReadOperationCount, oslogGroupOrder=oslogGroupOrder, ospfuName=ospfuName, win32DFSTargetEntry=win32DFSTargetEntry, osshMaximumAllowed=osshMaximumAllowed, ostzStandardMillisecond=ostzStandardMillisecond, osdpInstallDate=osdpInstallDate, osjoaTotalUserTime=osjoaTotalUserTime, osdoDSPriDomainControllerFlag=osdoDSPriDomainControllerFlag, osdpIndex=osdpIndex, osnpGuaranteesSequencing=osnpGuaranteesSequencing, ososFreeVirtualMemory=ososFreeVirtualMemory, oscsDaylightInEffect=oscsDaylightInEffect, oselMessage=oselMessage, osspName=osspName, ospsSessionId=ospsSessionId, osprtIndex=osprtIndex, ostzDaylightSecond=ostzDaylightSecond, ososSystemDirectory=ososSystemDirectory, osrcAutoReboot=osrcAutoReboot, win32ThreadEntry=win32ThreadEntry, osdoDomainControllerAddressType=osdoDomainControllerAddressType, osncoUserName=osncoUserName, osnpSupportsBroadcasting=osnpSupportsBroadcasting, osmldErrorDescription=osmldErrorDescription, win32SystemDriverTable=win32SystemDriverTable, osscCaption=osscCaption, oselfDrive=oselfDrive, osscpOriginatingMachine=osscpOriginatingMachine, ossvcStarted=ossvcStarted, osldFileSystem=osldFileSystem, ososTotalSwapSpaceSize=ososTotalSwapSpaceSize, ossvcStartMode=ossvcStartMode, oselfFSCreationClassName=oselfFSCreationClassName, ossvcStatus=ossvcStatus, osqsState=osqsState, osscpVolumeName=osscpVolumeName, ossjDescription=ossjDescription, osscpID=osscpID, win32NTDomainTable=win32NTDomainTable, osldStatusInfo=osldStatusInfo, ospfsIndex=ospfsIndex, osdpPartitionIndex=osdpPartitionIndex, osncoPersistent=osncoPersistent, osdoDomainName=osdoDomainName, osdoDSTimeServiceFlag=osdoDSTimeServiceFlag, oselfIndex=oselfIndex, osnpStatus=osnpStatus, osmldQuotasIncomplete=osmldQuotasIncomplete, osspIndex=osspIndex, oscsInfraredSupported=oscsInfraredSupported, ospsDescription=ospsDescription, win32LogicalDiskTable=win32LogicalDiskTable, osprtDestination=osprtDestination, oscsInstallDate=oscsInstallDate, ossvcAcceptStop=ossvcAcceptStop, osqfeCSName=osqfeCSName, osldAvailability=osldAvailability)
mibBuilder.exportSymbols("INFORMANT-OS", osrtMetric4=osrtMetric4, osmldInstallDate=osmldInstallDate, osrtInterfaceIndex=osrtInterfaceIndex, ossvcName=ossvcName, osncoConnectionState=osncoConnectionState, osscxName=osscxName, osqsDescription=osqsDescription, wmiPageFiles=wmiPageFiles, oscsResetCapability=oscsResetCapability, ospfInUseCount=ospfInUseCount, win32ServiceEntry=win32ServiceEntry, ossatMemoryScore=ossatMemoryScore, osjoaReadTransferCount=osjoaReadTransferCount, osjoaWriteTransferCount=osjoaWriteTransferCount, win32NamedJobObjectEntry=win32NamedJobObjectEntry, osmldSize=osmldSize, osdoDSWritableFlag=osdoDSWritableFlag, ososNumberOfLicensedUsers=ososNumberOfLicensedUsers, ososWindowsDirectory=ososWindowsDirectory, osscLocation=osscLocation, osspType=osspType, ospfFreeSpace=ospfFreeSpace, osdtPattern=osdtPattern, osnclName=osnclName, ospsWorkingSetSize=ospsWorkingSetSize, ospfName=ospfName, osvxdOtherTargetOS=osvxdOtherTargetOS, osvlFileSystem=osvlFileSystem, ostdStatus=ostdStatus, osscName=osscName, ososDataExecPrevention32BitAppl=ososDataExecPrevention32BitAppl, osshAccessMask=osshAccessMask, oscsOEMLogoBitmap=oscsOEMLogoBitmap, osdtBorderWidth=osdtBorderWidth, osnpSupportsConnectData=osnpSupportsConnectData, osbcTempDirectory=osbcTempDirectory, oscsNetworkServerModeEnabled=oscsNetworkServerModeEnabled, osrcSettingID=osrcSettingID, win32ServerSessionEntry=win32ServerSessionEntry, oselIndex=oselIndex, ososOSProductSuite=ososOSProductSuite, osscpHardwareAssisted=osscpHardwareAssisted, ossjIndex=ossjIndex, ospfDrive=ospfDrive, win32PageFileUsageEntry=win32PageFileUsageEntry, wmiDrivers=wmiDrivers, osvxdLanguageEdition=osvxdLanguageEdition, ospfuInstallDate=ospfuInstallDate, ospsPageFaults=ospsPageFaults, oselfSources=oselfSources, osctHour=osctHour, osrtIndex=osrtIndex, oscsSystemType=oscsSystemType)
