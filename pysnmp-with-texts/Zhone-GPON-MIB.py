#
# PySNMP MIB module Zhone-GPON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Zhone-GPON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:52:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, NotificationType, Integer32, Counter64, TimeTicks, iso, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, MibIdentifier, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Integer32", "Counter64", "TimeTicks", "iso", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "MibIdentifier", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
zhoneRegCpe, zhoneSs7, zhoneZedge, zhonePpp, zhoneVoice, zhoneVoip, zhoneBonding, zhoneConsole, zhoneZmsProduct, zhoneDsl, efmCuMIB, zhoneInterfaceGroup, zhoneIsdn, pktcIetfSigMib, zhoneDrafts, zhoneShelfSlotGroup, zhoneInterfaceTranslation, zhoneSystem, zhoneRegWtn, zhoneIp, sipCommonMIB, zhoneRegMalc, zhoneSubscriber, zhoneVoiceStats, zhoneShelfIndex, zhoneTrapModules, zhoneRegPls, zhoneSonet, sechtor100, zhoneSlotIndex, zhoneAtm, sipUAMIB, zhoneVdsl, zhoneLineTypes, zhoneClass5, zhoneGroups, apsMIB, zhoneVideo, zhoneCes, zhoneRegSechtor, zhonePls, sechtor300, zhoneMasterAgent, zhoneRegMux, zhoneGenWtn, zhoneShelfSlotCompliance, zhoneOcx, zhoneModules, zhoneBridge, zhoneDs3Ext, zhoneShelf, zhoneMalc, zhoneEnet, zhoneZAP, sipTC, zhoneWtn, zhoneZplex, zhoneGpon, zhoneCard, zhoneIma, zhoneDsx, efmOamMIB, zhoneRadio, zhoneApon = mibBuilder.importSymbols("Zhone", "zhoneRegCpe", "zhoneSs7", "zhoneZedge", "zhonePpp", "zhoneVoice", "zhoneVoip", "zhoneBonding", "zhoneConsole", "zhoneZmsProduct", "zhoneDsl", "efmCuMIB", "zhoneInterfaceGroup", "zhoneIsdn", "pktcIetfSigMib", "zhoneDrafts", "zhoneShelfSlotGroup", "zhoneInterfaceTranslation", "zhoneSystem", "zhoneRegWtn", "zhoneIp", "sipCommonMIB", "zhoneRegMalc", "zhoneSubscriber", "zhoneVoiceStats", "zhoneShelfIndex", "zhoneTrapModules", "zhoneRegPls", "zhoneSonet", "sechtor100", "zhoneSlotIndex", "zhoneAtm", "sipUAMIB", "zhoneVdsl", "zhoneLineTypes", "zhoneClass5", "zhoneGroups", "apsMIB", "zhoneVideo", "zhoneCes", "zhoneRegSechtor", "zhonePls", "sechtor300", "zhoneMasterAgent", "zhoneRegMux", "zhoneGenWtn", "zhoneShelfSlotCompliance", "zhoneOcx", "zhoneModules", "zhoneBridge", "zhoneDs3Ext", "zhoneShelf", "zhoneMalc", "zhoneEnet", "zhoneZAP", "sipTC", "zhoneWtn", "zhoneZplex", "zhoneGpon", "zhoneCard", "zhoneIma", "zhoneDsx", "efmOamMIB", "zhoneRadio", "zhoneApon")
ZhoneAdminString, ZhoneRowStatus, ZhoneEnabledFlag = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString", "ZhoneRowStatus", "ZhoneEnabledFlag")
zhoneGponOltMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 111))
zhoneGponOltMIB.setRevisions(('2014-10-29 02:19', '2014-10-17 01:53', '2014-06-11 17:38', '2014-05-27 10:37', '2014-01-22 16:52', '2013-12-19 14:08', '2013-12-12 15:25', '2013-10-02 15:45', '2013-06-10 12:25', '2013-05-16 14:25', '2013-05-08 16:01', '2013-05-01 14:25', '2012-12-05 11:54', '2012-10-19 14:24', '2012-10-09 09:16', '2012-08-23 14:53', '2011-11-10 18:14', '2011-10-17 19:43', '2011-06-14 15:04', '2011-06-02 19:02', '2011-04-08 09:50', '2011-03-14 12:00', '2011-03-01 10:49', '2011-02-08 17:08', '2011-01-24 16:56', '2011-01-17 11:36', '2010-11-04 10:36', '2010-10-28 14:49', '2010-10-19 14:40', '2010-09-08 10:18', '2010-09-01 16:25', '2010-09-01 12:10', '2010-08-13 15:29', '2010-08-10 16:35', '2010-07-27 08:08', '2010-07-19 14:23', '2010-06-11 14:21', '2010-06-01 18:02', '2010-05-13 09:02', '2010-05-12 09:00', '2010-04-13 11:19', '2010-04-05 11:37', '2010-03-31 07:52', '2010-03-16 11:33', '2010-01-13 13:01', '2009-12-16 07:32', '2009-11-14 09:54', '2009-11-13 09:13', '2009-10-09 11:31', '2009-09-24 13:04', '2009-09-18 18:40', '2009-09-16 07:19', '2009-09-15 11:00', '2009-09-14 06:38', '2009-08-28 14:45', '2009-08-19 12:24', '2009-07-31 06:32', '2009-07-16 10:02', '2009-07-07 11:12', '2009-06-16 08:36', '2009-06-11 15:49', '2009-05-22 15:53', '2009-05-18 15:08', '2009-02-18 11:38', '2009-01-15 07:04', '2009-01-06 11:33', '2008-12-10 09:42', '2008-11-11 14:07', '2008-10-09 17:08', '2008-09-22 07:55', '2008-08-12 07:39', '2008-06-25 14:49', '2008-06-12 17:37', '2008-05-23 15:39', '2007-08-22 17:34', '2007-03-19 17:35', '2007-03-01 19:27', '2006-10-27 16:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneGponOltMIB.setRevisionsDescriptions(('Added new bit onuRebooted in zhoneGponOnuStatusWord field.', 'Added new field link-status-alarm-Severity in gpon-olt-onu-config profile.', 'Added cmd operations for auto-cfg enable/disable', 'Added zhoneGponOltOnuConfigAutoConfigState.', 'Add gponOltStatusConfiguredOnuCount, gponOltStatusActiveOnuCount', 'Added ONU auto-assign trap.', 'Added zhoneGponSerialNoTimeStamp', 'Add method to gpon image upgrade table Add linkonly to zhoneGponOltOnuConfigLineStatusTraps', 'Added omciState entries postCfgError and omciErrAndPostCfgErr.', 'Added append and revert to ME profile row status.', 'Update alarms text description.', 'Add OLT Next Gem Port available object', 'Add more states for zhoneGponOnuOmciState', 'Changed the default value of zhoneGponPortConfigEncrypted to true.', 'Added a new enum onuSet2default to the object zhoneGponCmdOperation.', 'Added data sync fields to OnuConfigProfile.', 'Add auto-rssi rogueDetect mode.', 'add rogueOnu to onuStatusWord', 'Made zhoneGponOltStatusWord read-only.', 'Added zhoneGponOltStatusWordTrap', 'Changed th object name zhoneCpeTrafficManagementProfileIndex to zhoneGponPortConfigTrafficManagementProfileIndex', 'Removed QUICK-ACCESS for the object zhoneCpeTrafficManagementProfileIndex', '1.Removed rate, priority and weight fields from the zhoneGponPortConfigTable. 2.Added zhoneCpeTrafficManagementProfileIndex to the zhoneGponPortConfig table.', 'Add rogue onu detection', 'Remove gponOnuConnection table. This is now cpeConnection table in phyCPE mib.', 'zhoneGponOnuDistance', 'Add 3 zhoneGponOltOnuConfigEntry RxPower objects.', 'Added kbps rate limits for zhoneGponPortConfigUpstreamSIR and zhoneGponPortConfigUpstreamPIR Added an additional enum value oltactive to zhoneGponOltOpticStatus', 'Added 4 Bip8 Objects to zhoneGponOltConfigEntry.', 'Added 6 new objects to the zhoneGponPortConfigTable Added 4 new objects to the zhoneGponOltOnuConfigTable', 'Add ONU Id as a row creation parameter for gpon port.', 'Added additional values to the TpType', 'Added a new table zhoneGponOnuConnection. Added a new Textual Convention TpType', 'Add enum values for zhoneGponOnuOmciState ', 'Add Tx Preamble to GPON Olt Config', 'Add zhoneGponOltStatisticsClear and zhoneGponUpstreamOntStatisticsClear objects.', 'Added zhoneGponOntVersion to zhoneGponOnuStatusTable.', 'Add zhoneGponUpstreamMessageErrorMessage.', 'Update GponCacRc', '1. Add more enum values to zhoneGponOmciOnuPortAdminAutoDetect 2. Add zhoneGponOmciOnuImageDownloadProgressPercentage 3. Add zhoneGponUpgradeProgressPercentage 4. Add more enum values to GponCacRc 5. Clean up compile warning 6. Add missing descriptions to the zhone Groups.', 'Added zhoneGponOltStatisticsUpstreamPonValidPkts', 'Added zhoneGponOltStatisticsTable and zhoneGponUpstreamOntStatisticsTable.', 'Add activateCommit to zhoneGponOmciOnuImageUpgradeAction', 'Add zhoneGponOntRxPower', '1. Change default zhoneGponOltOnuConfigAutoUpgrade to enabled', 'Update zhoneGponPortConfigTable comments', 'Add zhoneGponOltConfigProtectionSwitchoverTimer', 'Added zhoneGponOmciOnuPortAdminAutoDetect to the zhoneGponOmciOnuPortAdminTable', 'Changed the maximum limit of zhoneGponTrafficProfileDbaFixedUsCbrBw to 454208', 'Add value ranges to GPON Traffic Profile bandwidth fields', 'Add useRegId to onu-config', "Add more values to zhoneGponPortStatusDbaStatus and update the it's comments", 'Change some defaults in olt-onu-config-profile.', '1. add GponCacRc data type 2. add zhoneGponPortStatusDbaStatus to zhoneGponPortStatusTable 3. add allocId info to zhoneGponOltDbaStatus', 'Changed zhoneGponOltOpticAlarms to Read-Only', 'Add olt optics status word and trap.', 'Add zhoneGponCmd objects', 'Add zhoneGponOltOpticStatus to the zhoneGponOltStatusTable.', 'Add the GponUpgradeByState table. Also add some fields to the zhoneGponOnuOmciImageUpgradeTable.', '1. Add zhoneGponOltOnuConfigAutoUpgrade 2. Add zhoneGponOltOnuConfigSerialNoVendorSpecificFsan', 'Modified the zhoneGponOnuStatusTable by removing zhoneGponOnuOpticTxPower and changing zhoneGponOnuOpticRxPower to zhoneGponOnuOpticRssi Also Added the following two new tables 1.zhoneGponOltStatusTable 2.zhoneGponOltDbaStatusTable ', 'Added the following 2 new objects to the GponOltConfigTable: 1.zhoneGponOltConfigDbaCycle 2.zhoneGponOltConfigSrDbaReportingBlockSize Added the following 6 new objects to the GponTrafficProfileTable: 1.zhoneGponTrafficProfileDbaFixedUsUbrBw 2.zhoneGponTrafficProfileDbaFixedUsCbrBw 3.zhoneGponTrafficProfileDbaAssuredUsBw 4.zhoneGponTrafficProfileDbaMaxUsBw 5.zhoneGponTrafficProfileExtraUsBwType 6.zhoneGponTrafficProfileDbaEnabled', 'Added zhoneGponOnuOpticTxPower and zhoneGponOnuOpticRxPower to the zhoneGponOnuStatusTable', 'Add trap enable flags to onu-config. Modify description of onu alarms text.', 'Add zhoneGponOmciOnuImageUpgradeTable', '1. Add zhoneGponOmciOnuReboot 2. Add zhoneGponOmciOnuPortAdminTable', 'Add zhoneGponOmciStatusTable', 'Rework zhoneGponPortConfigTable to support dynamic GEM port operations.', 'Add current and previous Omci statistics tables.', '1. add zhoneGponPortConfigTrafficProfile 2. update zhoneGponOnuStatusTable 3. add zhoneGponTrafficProfileTable 4. add zhoneGponPortStatusTable', '1. Add comments to OMCI profile tables containing instructions on the creation and updates of omci data. 2. Change OMCI row status variable definitions to reflect new omci operations. 3. Add omci objects 4. Change size of zhoneOnuOmciMEProfileOmciCommadns to 64K to allow better memory management. 5. Change size of zhoneOnuOmciGenericProfileOmciCommands to 15K to allow better memory management. 6. Change size of zhoneOnuOmciSpecificProfileOmciCommands to 15K to allow better memory management.', '1. add zhoneOnuOmciMEProfileTable 2. add zhoneOnuOmciGenericProfileTable 3. add zhoneOnuOmciSpecificProfileTable', 'Add GPON OMCI ONU Alarms: 1. Add zhoneGponOmciOnuAlarmsTrap 2. Add zhoneGponOmciOnuAlarmsTable', 'Added zhoneGponOltOnuConfigMEProfileName to OltOnuConfigTable Added zhoneGponOltOnuConfigGenericProfileName to OltOnuConfigTable ', 'Add omci filename and onu status change trap', 'add comments on alloc-id fields', 'Add serial number table. Change ONU serial number format.', 'Initial revision.',))
if mibBuilder.loadTexts: zhoneGponOltMIB.setLastUpdated('201410290219Z')
if mibBuilder.loadTexts: zhoneGponOltMIB.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhoneGponOltMIB.setContactInfo('Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com ')
if mibBuilder.loadTexts: zhoneGponOltMIB.setDescription('This is the Zhone GPON mib which contains SNMP objects for GPON ONU configuration, alarms, and status.It also includes the GPON OLT status information.')
class OnuUpgradeState(TextualConvention, Integer32):
    description = 'Onu upgrade state, for queries and reporting.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("queued", 1), ("noUpgrade", 2), ("downloading", 3), ("complete", 4), ("error", 5), ("aborted", 6), ("fileError", 7), ("downloaded", 8))

class GponCacRc(TextualConvention, Integer32):
    description = 'This object contains the result code of the last GPON CAC request for the OLT. ok - GPON CAC requrest approved noReq - GPON CAC request has not been performed badParms - Internal error. Bad pointer or index value parameter to a GPON CAC procedure call cfgLookup - Internal error. Failed to look up a config record ( OLT, ONU, traffic profile, etc ) genError - Internal error. Invalid value was found inside a profile so a switch statement failed maxOnuGemPorts - Each ONU supports a limited number of GEM ports maxOltAllocIds - Each OLT supports a limited number of allocIds maxOltDbaAllocIds - Each OLT supports a limited number of DBA-enabled allocIds maxBw - An attempt was made to create a new GEM port or modifying an existing GEM port but the there is no available total bandwidth maxCbrBw - An attempt was made to create a new GEM port or modifying an existing GEM port but the there is no available CBR bandwidth trafficClassChg - An attempt was made to change a GEM port traffic profile index. The change was not allowed because the new traffic profile has a different traffic class dbaStatusChg - An attempt was made to change a GEM port traffic profile index. The change was not allowed because the new traffic profile has a different DBA Enabled status testCreateInvalidParms - GEM Port cannot be created because there are invalid paramater values used to create the GEM Port. testCreateMissingParms - GEM Port cannot be created because there are missing paramater values used to create the GEM Port. testCreateAlreadyExistsIfIndex - GEM Port cannot be created because a GEM Port already exists with the specified ifIndex testCreateAlreadyExistsSSPS - GEM Port cannot be created because a GEM Port already exists with the specified shelf, slot, port and subPort values. testCreateOnuDoesNotExist - GEM Port cannot be created because the specified GEM Port ONU does not exist testCreateOnuNotRegistered - GEM Port cannot be created because the GEM Port ONU has not been registered with the LINERR testCreateCannotFindPrimary - GEM Port cannot be created because the GEM Port Primary OLT cannot be located testCreateCannotAddToSecondary - GEM Port cannot be created on the secondary OLT of an OLT line redundancy group'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("ok", 1), ("noReq", 2), ("badParms", 3), ("cfgLookup", 4), ("genError", 5), ("maxOnuGemPorts", 6), ("maxOltAllocIds", 7), ("maxOltDbaAllocIds", 8), ("maxBw", 9), ("maxCbrBw", 10), ("trafficClassChg", 11), ("dbaStatusChg", 12), ("testCreateInvalidParms", 13), ("testCreateMissingParms", 14), ("testCreateAlreadyExistsIfIndex", 15), ("testCreateAlreadyExistsSSPS", 16), ("testCreateOnuDoesNotExist", 17), ("testCreateOnuNotRegistered", 18), ("testCreateCannotFindPrimary", 19), ("testCreateCannotAddToSecondary", 20))

zhoneGponObjectID = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1))
zhoneGponOltConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1), )
if mibBuilder.loadTexts: zhoneGponOltConfigTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigTable.setDescription('Configuration parameters that apply to one OLT. This profile is auto-created.')
zhoneGponOltConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltIfIndex"))
if mibBuilder.loadTexts: zhoneGponOltConfigEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigEntry.setDescription('One row of the gpon olt config entry table.')
zhoneGponOltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneGponOltIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltIfIndex.setDescription('The ifIndex of the physical olt interface.')
zhoneGponOltConfigMaxRtPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 2), Integer32().clone(200)).setUnits('usec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigMaxRtPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigMaxRtPropagationDelay.setDescription('Maximum round trip propagation delay. Combined with max ONU response time and preassigned delay determins maximum logical PON distance. Default 200 usec for 20 dm.')
zhoneGponOltConfigMaxOnuResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 3), Integer32().clone(50)).setUnits('usec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigMaxOnuResponseTime.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigMaxOnuResponseTime.setDescription('Combined with max rt propagation delay, determins maximum logical PON distance.')
zhoneGponOltConfigPreassignedEqD = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 4), Integer32()).setUnits('usec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPreassignedEqD.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPreassignedEqD.setDescription('Combined with max rt propagation delay and max onu response time determines max logical PON distance.')
zhoneGponOltConfigLosAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 5), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigLosAlpha.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigLosAlpha.setDescription('Number of loss-of-signal occurrences to trigger alarm.')
zhoneGponOltConfigLofAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigLofAlpha.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigLofAlpha.setDescription('Number of loss-of-frame occurrences to trigger alarm.')
zhoneGponOltConfigLoamAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 7), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigLoamAlpha.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigLoamAlpha.setDescription('Number of loss-of-OAM occurrences to trigger alarm.')
zhoneGponOltConfigScrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 8), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigScrambler.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigScrambler.setDescription('Description.')
zhoneGponOltConfigFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 9), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigFecMode.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigFecMode.setDescription('Enables or disables forward error correction.')
zhoneGponOltConfigAutoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 10), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigAutoLearn.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigAutoLearn.setDescription('Enable or disable password auto-learn mode.')
zhoneGponOltConfigPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 11), Unsigned32()).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPowerLevel.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPowerLevel.setDescription('Olt power level. For the Broadlight 3000, values will be rounded down to one of 0, 3, or 6.')
zhoneGponOltConfigGuardBitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 12), Integer32().clone(32)).setUnits('bits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigGuardBitCount.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigGuardBitCount.setDescription('Number of guard bits for upstream transmission.')
zhoneGponOltConfigDbaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("predictive", 1), ("piggyback", 2), ("wholeReport", 3))).clone('predictive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigDbaMode.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigDbaMode.setDescription('Working DBA mode.')
zhoneGponOltConfigGemBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 14), Integer32().clone(16)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigGemBlockSize.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigGemBlockSize.setDescription('Basic unit in bytes used by all ONUs for DBA reports of their queue occupancy (for piggyback and whole-report DBA only).')
zhoneGponOltConfigUsBerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 15), Integer32().clone(5000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigUsBerInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigUsBerInterval.setDescription('Interval for upstream bit error rate calculation.')
zhoneGponOltConfigDsBerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 16), Integer32().clone(5000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigDsBerInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigDsBerInterval.setDescription('Interval used for downstream bit error rate calculation.')
zhoneGponOltConfigBerSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 8)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigBerSfThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigBerSfThreshold.setDescription('Threshold is 10**(-N) for signal fail.')
zhoneGponOltConfigBerSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigBerSdThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigBerSdThreshold.setDescription('Threshold is 10**(-N) for signal degrade. Must exceed sf threshold.')
zhoneGponOltConfigFecRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 19), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigFecRequest.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigFecRequest.setDescription('Indicates whether OLT turns on FEC indication for all Alloc-Id in the Upstream Bandwidth Map.')
zhoneGponOltConfigKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 20), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigKeyExchange.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigKeyExchange.setDescription('Specifies whether Single Key exchange should be performed during ONU activation process.')
zhoneGponOltConfigMinRtPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 21), Integer32()).setUnits('usec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigMinRtPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigMinRtPropagationDelay.setDescription('If closest ONU location is known, GPON_stack uses this value in order to limit the size of the quiet zone.')
zhoneGponOltConfigMinOnuResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 22), Integer32().clone(10)).setUnits('usec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigMinOnuResponseTime.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigMinOnuResponseTime.setDescription('GPON_stack uses this value in order to limit the size of the quiet zone.')
zhoneGponOltConfigEqDMeasureCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 23), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigEqDMeasureCycles.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigEqDMeasureCycles.setDescription('Defines the number of measurement cycles in the Ranging process.')
zhoneGponOltConfigDriftControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 24), Integer32().clone(1000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigDriftControlInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigDriftControlInterval.setDescription('Defines the interval of periodic monitoring on drifts of upstream data.')
zhoneGponOltConfigDriftControlLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 25), Integer32().clone(3)).setUnits('bits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigDriftControlLimit.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigDriftControlLimit.setDescription('Indicates the limit of upstream data drift.')
zhoneGponOltConfigAllocCycleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigAllocCycleLength.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigAllocCycleLength.setDescription('Alloc-ID assignment map cycle length.')
zhoneGponOltConfigMinUsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 27), Integer32().clone(16)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigMinUsAlloc.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigMinUsAlloc.setDescription('Size of minimal upstream allocation per frame.')
zhoneGponOltConfigAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 28), Integer32().clone(2000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigAckTimeout.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigAckTimeout.setDescription('Timeout length of Acknowledge message.')
zhoneGponOltConfigPlsMaxAllocSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 29), Integer32().clone(120)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPlsMaxAllocSize.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPlsMaxAllocSize.setDescription('Indecates a size of unassigned allocation that should be attached to the end of ranging window.')
zhoneGponOltConfigDbaCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigDbaCycle.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigDbaCycle.setDescription('The Dynamic Bandwidth Allocation(dba) cycle determines the DBA interval size. Its an integer multiplicant of 2 milli seconds. The range of values for the dba cycle can be between 2ms-10ms.')
zhoneGponOltConfigSrDbaReportingBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 31), Unsigned32().clone(48)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigSrDbaReportingBlockSize.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigSrDbaReportingBlockSize.setDescription('For DBA of SR type, the block size defines the resolution of the status reports per PON link.The default value is 48 bytes.')
zhoneGponOltConfigProtectionSwitchoverTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 32), Unsigned32().clone(500)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigProtectionSwitchoverTimer.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigProtectionSwitchoverTimer.setDescription('If we receive LOS alarm for a link in Active state, the link state changes to Switch Over Pending state. If the actual switch-over does not happen after this protection-switchover-timeout expires, the link will go back to Active state')
zhoneGponOltConfigPreambleOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 33), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleOverride.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleOverride.setDescription('Used to force the OLT to use the Preamble configuration in the OLT configuration profile. Otherwise the Preamble configuration will be determined at runtime and based on the SFP. ')
zhoneGponOltConfigPreambleType0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone('0x00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType0.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType0.setDescription('Byte number for preamble type 0. This string represents a hex value with range 0x00 to 0xFF. String must have the following format: 0xNN where where N is 0..9, A..F, a..f ')
zhoneGponOltConfigPreambleType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone('0x00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType1.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType1.setDescription('Byte number for preamble type 1. This string represents a hex value with range 0x00 to 0xFF. String must have the following format: 0xNN where where N is 0..9, A..F, a..f ')
zhoneGponOltConfigPreambleType3PreRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone('0x0b')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType3PreRange.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType3PreRange.setDescription('Byte number for preamble type 3 pre-ranging. This string represents a hex value with range 0x00 to 0xFF. String must have the following format: 0xNN where where N is 0..9, A..F, a..f ')
zhoneGponOltConfigPreambleType3PostRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone('0x08')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType3PostRange.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType3PostRange.setDescription('Byte number for preamble type 3 post-ranging. This string represents a hex value with range 0x00 to 0xFF. String must have the following format: 0xNN where where N is 0..9, A..F, a..f ')
zhoneGponOltConfigPreambleType3Pattern = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone('0xaa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType3Pattern.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigPreambleType3Pattern.setDescription('Preamble type 3 pattern. This string represents a hex value with range 0x00 to 0xFF. String must have the following format: 0xNN where where N is 0..9, A..F, a..f ')
zhoneGponOltConfigBipErrorMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("monitorOnly", 2), ("blockOnError", 3))).clone('monitorOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigBipErrorMonitoring.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigBipErrorMonitoring.setDescription('If in disabled mode, do not report BIP errors, do not disable ONU and do not throw any traps. If in monitorOnly mode, monitor BIP errors and if BIP Error Threshold exceeded, set appropriate zhoneGponOnuStatusWord bits based on the type of BIP errors and throw zhoneGponOnuError trap. If in blockOnError mode, monitor BIP errors and if BIP Error Threshold exceeded, block traffic, disable ONU ranging, set appropriate zhoneGponOnuStatusWord bits based on the type of BIP errors, and throw zhoneGponOnuError and linkDownTrap traps.')
zhoneGponOltConfigBipErrorsPerSampleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 40), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigBipErrorsPerSampleThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigBipErrorsPerSampleThreshold.setDescription('If the number of BIP errors per sample exceeds this threshold, it is counted as an errored sample.')
zhoneGponOltConfigBipErroredSamplesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 41), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigBipErroredSamplesThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigBipErroredSamplesThreshold.setDescription('If the number of errored samples exceed this sample threshold, report and disable the onu if in blockOnError mode, otherwise simply report the threshold as being exceeded.')
zhoneGponOltConfigBipMaxSampleGap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 42), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigBipMaxSampleGap.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigBipMaxSampleGap.setDescription('If two adjancent errored samples were taken farther apart than this threshold, do not count the earlier sample as an errored sample.')
zhoneGponOltConfigRogueOnuDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("rogueRssi", 2), ("backgroundProcess", 3), ("autoRssi", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigRogueOnuDetection.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigRogueOnuDetection.setDescription('Controls detection of rogue ONU on fiber. Values are: 1. detection disabled 2. detect via measurement from rssi process 3. detect via indication from background process. 4. normally off, but switch to rssi mode if rogue is suspected.')
zhoneGponOltConfigRogueOnuDetectFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigRogueOnuDetectFrequency.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigRogueOnuDetectFrequency.setDescription('Frequency in seconds for detection background task.')
zhoneGponOltConfigRogueOnuRxPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 1, 1, 45), Integer32().clone(-30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltConfigRogueOnuRxPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigRogueOnuRxPowerThreshold.setDescription('Power level below which to report rssi rogue ONU.')
zhoneGponOltOnuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2), )
if mibBuilder.loadTexts: zhoneGponOltOnuConfigTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigTable.setDescription('Configuration parameters applying to a single onu stacked on an olt. This profile is auto-created.')
zhoneGponOltOnuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"))
if mibBuilder.loadTexts: zhoneGponOltOnuConfigEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigEntry.setDescription('A row in the gpon olt-onu config table.')
zhoneGponOltOnuIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneGponOltOnuIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuIfIndex.setDescription('IfIndex of the onu interface stacked on the olt. ')
zhoneGponOltOnuConfigSerialNoVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 2), ZhoneAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone('ZNTS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigSerialNoVendorId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigSerialNoVendorId.setDescription("This is a string of 4 ascii characters representing the vendor ID portion of the onu serial number. Example: 'ZNTS' for Zhone.")
zhoneGponOltOnuConfigSerialNoVendorSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 3), ZhoneAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 10)).clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigSerialNoVendorSpecific.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigSerialNoVendorSpecific.setDescription('This is a string of ascii decimal digits representing the vendor-specific portion of the onu serial number.')
zhoneGponOltOnuConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 4), ZhoneAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigPassword.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigPassword.setDescription('Password (10 bytes).')
zhoneGponOltOnuConfigAutoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 5), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigAutoLearn.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigAutoLearn.setDescription('Indicates whether password is auto-learned.')
zhoneGponOltOnuConfigPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 6), Integer32()).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigPowerLevel.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigPowerLevel.setDescription('Olt power level. For the Broadlight 3000, values will be rounded down to one of 0, 3, or 6.')
zhoneGponOltOnuConfigUsBerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 7), Integer32().clone(5000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUsBerInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUsBerInterval.setDescription('Interval for upstream bit error rate calculation.')
zhoneGponOltOnuConfigDsBerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 8), Integer32().clone(5000)).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigDsBerInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigDsBerInterval.setDescription('Interval for downstream bit error rate.')
zhoneGponOltOnuConfigOnuAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOnuAdded.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOnuAdded.setDescription('Indicates to Broadlight that onu is activated. May not be used.')
zhoneGponOltOnuConfigOmciFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 10), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOmciFileName.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOmciFileName.setDescription('Name of OMCI configuration file for this ONT.')
zhoneGponOltOnuConfigMEProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 11), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigMEProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigMEProfileName.setDescription('This is the name of a Profile that contains OMCI commands which can configure an ONU. It is expected that this Profile contain OMCI commands that configure the Managed Entities (ME) on an ONU.')
zhoneGponOltOnuConfigGenericProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 12), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigGenericProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigGenericProfileName.setDescription('This is the name of a Profile that contains OMCI commands which can configure an ONU. It is expected that this Profile contain generic commands that are common to multiple ONUs.')
zhoneGponOltOnuConfigPhysicalTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 13), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigPhysicalTraps.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigPhysicalTraps.setDescription('If enabled, then an asynchronous notification from the ONT with ME class ONT-G triggers an omciOnuAlarms trap. The alarm conditions for this ME class are: equipment alarm, powering alarm, battery missing, battery failure, battery low, physical intrusion alarm, and self-test failure.')
zhoneGponOltOnuConfigOntTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 14), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOntTraps.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOntTraps.setDescription('If enabled, then an asynchronous notification from the ONT with ME class other than ONT-G triggers an omciOnuAlarms trap. ')
zhoneGponOltOnuConfigLineStatusTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("auto", 3), ("linkonly", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigLineStatusTraps.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigLineStatusTraps.setDescription("If enabled, then gponOnuLineStatusChange traps, and also LinkUp/LinkDown traps, are sent whenever line status changes between up and down. If disabled, none of these traps is sent. If auto, then line status traps are sent if the 'dying gasp' flag is on (for line down), or if the 'dying gasp' flag was on (for line up). Link down/up traps are not sent.")
zhoneGponOltOnuConfigAutoUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 16), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigAutoUpgrade.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigAutoUpgrade.setDescription('If enabled, then the ONU s/w will be upgraded if the ONU version does not match the assoicated remote upgrade profile. Changing this variable to disabled will not abort a remote software upgrade already in progress. ')
zhoneGponOltOnuConfigSerialNoVendorSpecificFsan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigSerialNoVendorSpecificFsan.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigSerialNoVendorSpecificFsan.setDescription('This is a string of ascii decimal digits representing the vendor-specific portion of the onu serial number in hex format ( FSAN ). ')
zhoneGponOltOnuConfigUseRegId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 18), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUseRegId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUseRegId.setDescription("If enabled, and if the onu is activated, then when an ONT is discovered with a registration ID that matches this ONU's password field, then the ONU will be auto-assigned to that ONT.")
zhoneGponOltOnuConfigModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigModel.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigModel.setDescription('Model ID returned from this Onu.')
zhoneGponOltOnuConfigOntVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOntVersion.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOntVersion.setDescription("This object defines the version of the ONT as defined by the vendor. The character value '0' indicates that the version information is not available or applicable.")
zhoneGponOltOnuConfigImageVersionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigImageVersionActive.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigImageVersionActive.setDescription('Version information for the active s/w image.')
zhoneGponOltOnuConfigImageVersionStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigImageVersionStandby.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigImageVersionStandby.setDescription('Version information for the standby s/w image.')
zhoneGponOltOnuConfigUsRxPowerMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("monitorOnly", 2), ("blockOnError", 3))).clone('monitorOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUsRxPowerMonitoring.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUsRxPowerMonitoring.setDescription('If in disabled mode, do not report Upstream Onu Rx Power errors, do not disable ONU and do not throw any traps. If in monitorOnly mode, monitor Upstream Onu Rx Power levels and if level is outside of thresholds, set appropriate zhoneGponOnuStatusWord bits and throw zhoneGponOnuError trap. If in blockOnError mode, monitor Upstream Onu Rx Power levels and if level is outside of thresholds, block traffic, disable ONU ranging, set appropriate zhoneGponOnuStatusWord bits and throw both zhoneGponOnuError and linkDownTrap traps.')
zhoneGponOltOnuConfigUsRxPowerHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 24), Integer32().clone(-10)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUsRxPowerHighThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUsRxPowerHighThreshold.setDescription('Upstream Receive Power High Threshold value.')
zhoneGponOltOnuConfigUsRxPowerLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 25), Integer32().clone(-30)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUsRxPowerLowThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigUsRxPowerLowThreshold.setDescription('Upstream Receive Power Low Threshold value.')
zhoneGponOltOnuConfigDbaStatusReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 26), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigDbaStatusReporting.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigDbaStatusReporting.setDescription('There are two types of DBA, Status Reporting and Non Status Reporting. The value is enabled or disabled. The default is disabled.')
zhoneGponOltOnuConfigOmciDataSync = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOmciDataSync.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigOmciDataSync.setDescription('If the MIB data sync value returned from the ONU on a MIB audit matches the MXK value, config not required.')
zhoneGponOltOnuConfigSnmpDataSync = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigSnmpDataSync.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigSnmpDataSync.setDescription('If the SNMP provisioning change value returned from the CPE matches the MXK value, config not required.')
zhoneGponOltOnuConfigNextAvailableGemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(257, 3828))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigNextAvailableGemPort.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigNextAvailableGemPort.setDescription('Next available GEM PORT for the ONU. ')
zhoneGponOltOnuConfigAutoConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("done", 2), ("disabled", 3), ("error", 4))).clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigAutoConfigState.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigAutoConfigState.setDescription('Track whether the ONU has been auto-configured.')
zhoneGponOltOnuConfigLinkStatusAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltOnuConfigLinkStatusAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOnuConfigLinkStatusAlarmSeverity.setDescription('Based on the severity set in this field LinkUp/LinkDown alarms are raised.')
zhoneGponPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3), )
if mibBuilder.loadTexts: zhoneGponPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigTable.setDescription('The gpon port is similiar to VCLs in ATM. Data is transferred between OLT and ONU via ports. This profile is dynamically created during CLI bridge-add, host-add, interface-add commands but must be explicitly created during SNMP operation. GEM ports can be created using a supplied I/F index value or using the next available I/F index value. Since the GEM Port is a virtual device, ZMS prefers to supply the I/F index value because ZMS cannot lookup the newly created GEM port using shelf/slot/olt/port indexing ( virual devices do not support these values). How to create a GEM port using next available I/F Index value, using a single SNMP packet with multiple var-binds: 1. Do an SNMP-Next of the object ifIndexNext to determine the I/F index value of the new GEM port. The SNMP-Next will not result in the auto-increment of ifIndexNext. 2. Issue single SNMP set command containing the following: zhoneGponPortConfigRowStatus.1 = create zhoneGponPortConfigRowShelf.1 = 1 zhoneGponPortConfigRowSlot.1 = GEM port slot zhoneGponPortConfigRowOlt.1 = GEM port OLT zhoneGponPortConfigRowPort.1 = GEM Port ID value zhoneGponPortConfigRowTrafficProfile.1 = traffic profile The GEM port will be created using the next available ifIndex. How to create a GEM port with a specified I/F index value, using a single SNMP packet with multiple var-binds: 1. Do an SNMP-Get of the object ifIndexNext to determine the next available I/F index value. The SNMP-Get will result in the auto-increment of ifIndexNext. 2. Issue single SNMP set command containing the following: zhoneGponPortConfigRowStatus.aaa = create zhoneGponPortConfigRowShelf.aaa = 1 zhoneGponPortConfigRowSlot.aaa = GEM port slot zhoneGponPortConfigRowOlt.aaa = GEM port OLT zhoneGponPortConfigRowPort.aaa = GEM Port ID value zhoneGponPortConfigRowTrafficProfile.aaa = traffic profile where aaa is the I/F index value collected in step 1. A GEM Port cannot be created if an I/F translate record already exists using the supplied I/F index value. How to delete a GEM port using a single SNMP packet: 1. Determine I/F index of GEM port config profile (aaa) 2. Issue single SNMP set command containing the following: zhoneGponPortConfigRowStatus.aaa = destroy Special Notes: 1. The deletion of a GEM port will be prevented if the GEM port supports bridges, interfaces, etc. 2. The GEM port ID value determines the GEM port ONU.')
zhoneGponPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponPortIfIndex"))
if mibBuilder.loadTexts: zhoneGponPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigEntry.setDescription('A row in the gpon port config table.')
zhoneGponPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneGponPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortIfIndex.setDescription('The ifIndex of the gpon-port interface stacked on the olt.')
zhoneGponPortConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 2), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigRowStatus.setDescription('The row status for the port config table. ')
zhoneGponPortConfigMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigMulticast.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigMulticast.setDescription('Specifies whether this is a multicast or unicast port. If unicast, only one onu may be given, and the unicast-onu-id field is used. If multicast is true, then the multicast-onu-ids is used to name the onus.')
zhoneGponPortConfigEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigEncrypted.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigEncrypted.setDescription('Specifies whether port-id PLOAM messages are encrypted. Must be false if multicast.')
zhoneGponPortConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("bidirectional", 3))).clone('bidirectional')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigDirection.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigDirection.setDescription('Direction of data for this port.')
zhoneGponPortConfigTrafficProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigTrafficProfile.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigTrafficProfile.setDescription('Index of GEM Port traffic profile for this port. A zero value indicates no GEM Port traffic profile has been selected.')
zhoneGponPortConfigRowShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 7), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigRowShelf.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigRowShelf.setDescription('This is a WRITE-ONLY variable used during port create/delete operations.')
zhoneGponPortConfigRowSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 8), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigRowSlot.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigRowSlot.setDescription('This is a WRITE-ONLY variable used during port create/delete operations.')
zhoneGponPortConfigRowOlt = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 9), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigRowOlt.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigRowOlt.setDescription('This is a WRITE-ONLY variable used during port create/delete operations.')
zhoneGponPortConfigRowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 10), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigRowPort.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigRowPort.setDescription('This is a WRITE-ONLY variable used during port create/delete operations.')
zhoneGponPortConfigRowTrafficProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 11), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigRowTrafficProfile.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigRowTrafficProfile.setDescription('This is a WRITE-ONLY variable used during port create/delete operations.')
zhoneGponPortConfigRowOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigRowOnuId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigRowOnuId.setDescription('The subPort of the ONU on which this GEM port is to be stacked. This is a write-only variable during row create.')
zhoneGponPortConfigTrafficManagementProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponPortConfigTrafficManagementProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigTrafficManagementProfileIndex.setDescription('This object points to the associated Traffic Management profile. If there is no traffic control for the GEM port, set it to 0.')
zhoneGponAllocIdTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 4), )
if mibBuilder.loadTexts: zhoneGponAllocIdTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdTable.setDescription('Table for management of upstream bandwidth')
zhoneGponAllocIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 4, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltIfIndex"), (0, "Zhone-GPON-MIB", "zhoneGponAllocIdIndex"))
if mibBuilder.loadTexts: zhoneGponAllocIdEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdEntry.setDescription('Entry in the gpon allocId table.')
zhoneGponAllocIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneGponAllocIdIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdIndex.setDescription('An Id number which must be unique for a given OLT.')
zhoneGponAllocIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 4, 1, 2), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponAllocIdRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdRowStatus.setDescription('Row status for the gpon alloc-id table.')
zhoneGponAllocIdOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponAllocIdOnuId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdOnuId.setDescription('The onu number for this olt to which we are allocating bandwidth. Cannot be greater than number of onus for the olt. This field cannot be changed once the alloc-id has been created.')
zhoneGponAllocIdGuaranteedBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 4, 1, 4), Integer32()).setUnits('kilobits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponAllocIdGuaranteedBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdGuaranteedBw.setDescription('Bandwidth guaranteed by this alloc-id. This value is specified in kilobits per second. Only multiples of 512 are allowed, and the value may not exceed 2621440 (i.e. 2.5 gigabits per second). ')
zhoneGponAllocIdTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("ubr", 2))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponAllocIdTrafficClass.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdTrafficClass.setDescription('Whether traffic is Constant Bit Rate or Unspecified Bit Rate.')
zhoneGponAllocIdCompensated = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 4, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponAllocIdCompensated.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdCompensated.setDescription('For CBR, indicates whether compensated.')
zhoneGponSerialNoTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 5), )
if mibBuilder.loadTexts: zhoneGponSerialNoTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNoTable.setDescription('Table of discovered serial numbers available for assignment to onus.')
zhoneGponSerialNoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 5, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponSerialNoOltLgIfIndex"), (0, "Zhone-GPON-MIB", "zhoneGponSerialNoIndexId"))
if mibBuilder.loadTexts: zhoneGponSerialNoEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNoEntry.setDescription('Row in the Gpon onu serial number table')
zhoneGponSerialNoOltLgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneGponSerialNoOltLgIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNoOltLgIfIndex.setDescription('Linegroup ifIndex of the Olt on which serial number was discovered.')
zhoneGponSerialNoIndexId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: zhoneGponSerialNoIndexId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNoIndexId.setDescription('An identifying number, unique within olt, for this discovered onu serial number.')
zhoneGponSerialNoVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 5, 1, 3), ZhoneAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponSerialNoVendorId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNoVendorId.setDescription('The 4-character vendor id portion of serial number. ')
zhoneGponSerialNoVendorSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 5, 1, 4), ZhoneAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponSerialNoVendorSpecific.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNoVendorSpecific.setDescription('Vendor specific portion of the unassigned onu serial number, a string of decimal digits.')
zhoneGponSerialNoTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponSerialNoTimeStamp.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNoTimeStamp.setDescription('Time, as ascii string, that the serial number was discovered.')
zhoneGponTrapPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6))
if mibBuilder.loadTexts: zhoneGponTrapPrefix.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrapPrefix.setDescription('Place-holder object for gpon traps, which must have a final digit of 0 in OID.')
zhoneGponTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0))
if mibBuilder.loadTexts: zhoneGponTraps.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTraps.setDescription('Traps raised by Gpon Rp.')
zhoneGponSerialNumberFound = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 1)).setObjects(("Zhone-GPON-MIB", "zhoneGponSerialNoVendorId"), ("Zhone-GPON-MIB", "zhoneGponSerialNoVendorSpecific"))
if mibBuilder.loadTexts: zhoneGponSerialNumberFound.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNumberFound.setDescription('Notification that an ONU serial number has been discovered.')
zhoneGponSerialNumberLost = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 2)).setObjects(("Zhone-GPON-MIB", "zhoneGponSerialNoVendorId"), ("Zhone-GPON-MIB", "zhoneGponSerialNoVendorSpecific"))
if mibBuilder.loadTexts: zhoneGponSerialNumberLost.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNumberLost.setDescription('Notification that a previously discovered ONU serial number is no longer available.')
zhoneGponOnuLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 3)).setObjects(("Zhone-GPON-MIB", "zhoneGponOnuStatusWord"))
if mibBuilder.loadTexts: zhoneGponOnuLineStatusChange.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuLineStatusChange.setDescription('Description.')
zhoneGponOmciOnuAlarmsTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 4)).setObjects(("Zhone-GPON-MIB", "zhoneGponOmciOnuAlarmsText"))
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsTrap.setDescription("Current active alarms for an ONU entity. Alarms contained in the trap bindings will be for only one specific entity. If an entity alarm is not contained in the trap bindings then the alarm is either not active, not enabled, or not supported. If there are no alarms for the entity, then there will only be one alarm in the trap bindings and that alarm will have a value of zero and the alarm string will be 'None'.")
zhoneGponOmciOnuDownloadStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 5)).setObjects(("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeDownloadStatus"))
if mibBuilder.loadTexts: zhoneGponOmciOnuDownloadStatusChange.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuDownloadStatusChange.setDescription('Trap will be raised for Image Download status changes.')
zhoneGponOltOpticsAlarmsTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 6)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltOpticAlarms"))
if mibBuilder.loadTexts: zhoneGponOltOpticsAlarmsTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOpticsAlarmsTrap.setDescription('Raised when SFP reports optics alarms condition for an SFP.')
zhoneGponOnuError = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 7)).setObjects(("Zhone-GPON-MIB", "zhoneGponOnuStatusWord"))
if mibBuilder.loadTexts: zhoneGponOnuError.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuError.setDescription('One of the ONU error conditions is present for the specified ONU. Report zhoneGponOnuStatusWord to indicate which error has occurred.')
zhoneGponRogueOnuTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 8)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltStatusWord"))
if mibBuilder.loadTexts: zhoneGponRogueOnuTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneGponRogueOnuTrap.setDescription('A rogue ONU has been detected on this OLT by the background process')
zhoneGponRssiRogueOnuTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 9)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltStatusWord"))
if mibBuilder.loadTexts: zhoneGponRssiRogueOnuTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneGponRssiRogueOnuTrap.setDescription('Rogue ONU has been detected by RSSI process on this OLT.')
zhoneGponOltStatusWordTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 10)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltStatusWord"))
if mibBuilder.loadTexts: zhoneGponOltStatusWordTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatusWordTrap.setDescription('Change in one of the gpol olt status word bits has been detected.')
zhoneGponOnuAutoAssign = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 6, 0, 11)).setObjects(("Zhone-GPON-MIB", "zhoneGponSerialNoVendorId"), ("Zhone-GPON-MIB", "zhoneGponSerialNoVendorSpecific"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigModel"))
if mibBuilder.loadTexts: zhoneGponOnuAutoAssign.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuAutoAssign.setDescription('Notification that an ONU ID has been auto assigned.')
zhoneGponOnuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 7), )
if mibBuilder.loadTexts: zhoneGponOnuStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuStatusTable.setDescription('Current status of onu as reported from Gpon driver.')
zhoneGponOnuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 7, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"))
if mibBuilder.loadTexts: zhoneGponOnuStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuStatusEntry.setDescription('Row in the zhoneGponOnuStatusTable.')
zhoneGponOnuStatusWord = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 7, 1, 1), Bits().clone(namedValues=NamedValues(("noAlarm", 0), ("inactive", 1), ("lossOfSignal", 2), ("lossOfFrame", 3), ("driftOfWindow", 4), ("signalFail", 5), ("signalDegrade", 6), ("lossOfGemChanDelin", 7), ("remoteDefect", 8), ("transmitterFailure", 9), ("startUpFailure", 10), ("lossOfAck", 11), ("dyingGasp", 12), ("lossOfPloamSync", 13), ("messageError", 14), ("physEquipError", 15), ("bit16notUsed", 16), ("bit17notUsed", 17), ("excessiveBipErrorsOnuDisabled", 18), ("excessiveBipErrorsOnuNotDisabled", 19), ("usRxPowerErrorOnuDisabled", 20), ("usRxPowerErrorOnuNotDisabled", 21), ("rogueOnu", 22), ("manualOnuRebooted", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOnuStatusWord.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuStatusWord.setDescription('Bit-encoded current onu status from gpon driver')
zhoneGponOnuOmciState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("waiting", 1), ("pending", 2), ("config", 3), ("error", 4), ("done", 5), ("download", 6), ("aborted", 7), ("unknown", 8), ("down", 9), ("noConfig", 10), ("rgComError", 11), ("rgServiceSetupErr", 12), ("omciFailed", 13), ("omciErrAndRgComErr", 14), ("omciErrAndRgServErr", 15), ("postCfgError", 16), ("omciErrAndPostCfgErr", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOnuOmciState.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuOmciState.setDescription('Current configuration status for ONU. 1. queued for configuration (waiting) 2. transitional state before configuration (pending) 3. in process of configuration (config) 4. unspecified error (error) 5. configuration successful (done) 6. image download in progress (download) 7. image download aborted (aborted) 8. state cannot be determined (unknown) 9. ONU is down (down) 10. no configuration has been attempted (noConfig) 11. ONU unreachable for RG configuration (rgComError) 12. Some RG commands failed, may impact service (rgServiceSetupErr) 13. OMCI configuration failed (omciFailed) 14. OMCI failed and also ONU unreachable for RG (omciErrAndRgComErr) 15. OMCI failed and also RG commands failed (omciErrAndRgServErr) 16. Some post-config commands failed (postCfgError) 17. OMCI failed and also some post-config commands failed (omciErrAndPostCfgErr)')
zhoneGponOnuOpticRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 200))).setUnits('tenths of dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOnuOpticRssi.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuOpticRssi.setDescription('RSSI power of the SFP per ONU. The value is in tenths of dB.')
zhoneGponOntRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 200))).setUnits('tenths of dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOntRxPower.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOntRxPower.setDescription('Rx Power as reported by the ONT. The value is in tenths of dB.')
zhoneGponOntVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOntVersion.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOntVersion.setDescription("This object defines the version of the ONT as defined by the vendor. The character value '0' indicates that the version information is not available or applicable. ")
zhoneGponOnuDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOnuDistance.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuDistance.setDescription('Distance from Olt to Ont in meters, as computed from Eqd.')
zhoneOnuOmciMEProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 8), )
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileTable.setDescription("Table containing the OMCI commands for the Managed Entities (ME) on an ONU. The following 'how to' examples demonstrate access of the object zhoneOnuOmciMEOmciCommands. How to create ME profile: 1. Determine ME profile instance <aaa> 2. Place file <filename> into uplink file system 3. Issue single SNMP set command containing the following: zhoneOnuOmciMEProfileRowStatus.aaa = create zhoneOnuOmciMEProfileName.aaa = ME profile name zhoneOnuOmciMEProfileFilename.aaa = <filename> How to update existing ME profile from a file: 1. Determine ME profile instance <aaa> 2. Place file <filename> into uplink file system 3. Issue single SNMP set command containing the following: zhoneOnuOmciMEProfileRowStatus.aaa = import zhoneOnuOmciMEProfileName.aaa = ME profile name zhoneOnuOmciMEProfileFilename.aaa = <filename> How to extract ME profile into a file: 1. Determine ME profile instance <aaa> 2. Issue single SNMP set command containing the following: zhoneOnuOmciMEProfileRowStatus.aaa = export zhoneOnuOmciMEProfileFilename.aaa = <filename> 3. The file <filename> now exists on uplink file system How to delete ME profile: 1. Determine ME profile instance <aaa> 2. Issue single SNMP set command containing the following: zhoneOnuOmciMEProfileRowStatus.aaa = destroy")
zhoneOnuOmciMEProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 8, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneOnuOmciMEProfileIndex"))
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileEntry.setDescription('Row in the ME Profile table.')
zhoneOnuOmciMEProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileIndex.setDescription('A unique index for each row entry (1..n).')
zhoneOnuOmciMEProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("export", 4), ("import", 5), ("append", 6), ("revert", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileRowStatus.setDescription('Row status for the Me profile entry. Not really used for the configuration on the ONUs')
zhoneOnuOmciMEProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileName.setDescription('Name given to each row entry in the ME Profile table. The name must contain ascii printable characters and cannot contain blanks or forward-slash characters. The name must be null-terminated and the null character is included in the object data length. The name must be unique in the ME profiles.')
zhoneOnuOmciMEProfileOmciCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileOmciCommands.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileOmciCommands.setDescription('Contains the set of OMCI commands and the variable substitutions used in configuring the ONUs. This object will go through some character substitution before being inserted into the database so the maximum string size will not be available. Available string size will vary based on string contents but expect about 10 percent loss. This object cannot be accessed directly. See the comments section for zhoneOnuCmciMEProfileTable on how to acces this object.')
zhoneOnuOmciMEProfileFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileFileName.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciMEProfileFileName.setDescription('Name of file to be loaded into profile. This object is write-only and is not preserved.')
zhoneOnuOmciGenericProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 9), )
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileTable.setDescription("Table containing Generic OMCI commands for an ONU. The Generic profile is 'created' from an existing ME profile. During this operation, the 'variable' defintions from the ME profile are extracted from the ME profile and placed into the Generic profile. The Generic profile is 'updated' from a file placed into the uplink's file system. The following 'how to' examples demonstrate access of the object zhoneOnuOmciGenericOmciCommands. How to create Generic profile from ME profile: 1. Determine Generic profile instance <aaa> 2. Issue single SNMP set command containing the following: zhoneOnuOmciGenericProfileRowStatus.aaa = create zhoneOnuOmciGenericProfileName.aaa = profile name zhoneOnuOmciGenericProfileMESrcProfileName = ME profile source 3. Profile is now created and the profile will not contain any variables and values. How to update existing Generic profile from a file: 1. Determine Generic profile instance <aaa> 2. Place file <filename> into uplink file system 3. Issue single SNMP set command containing the following: zhoneOnuOmciGenericProfileRowStatus.aaa = import zhoneOnuOmciGenericProfileFileName.aaa = <filename> How to extract Generic profile into a file: 1. Determine ME profile instance <aaa> 2. Issue single SNMP set command containing the following: zhoneOnuOmciGenericProfileRowStatus.aaa = export zhoneOnuOmciGenericProfileFilename.aaa = <filename> 3. The file <filename> now exists on uplink file system How to delete Generic profile: 1. Determine Generic profile instance <aaa> 2. Issue single SNMP set command containing the following: zhoneOnuOmciGenericProfileRowStatus.aaa = destroy")
zhoneOnuOmciGenericProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 9, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneOnuOmciGenericProfileIndex"))
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileEntry.setDescription('Row in the OMCI Generic Profile table')
zhoneOnuOmciGenericProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileIndex.setDescription('A unique index for each row entry ( 1..n ).')
zhoneOnuOmciGenericProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("export", 4), ("import", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileRowStatus.setDescription('Row status for the Generic profile entry. Not really used for the configuration of the ONUs')
zhoneOnuOmciGenericProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileName.setDescription('Name given to each row entry in the Generic Profile table. The name must contain ascii printable characters and cannot contain blanks or forward-slash characters. The name must be null-terminated and the null character is included in the object data length. The name must be unique in the Generic profiles.')
zhoneOnuOmciGenericProfileOmciCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileOmciCommands.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileOmciCommands.setDescription('Contains the generic set of OMCI commands and the variable substitutions used in configuring the ONUs. This object will go through some character substitution before being inserted into the database so the maximum string size will not be available. Available string size will vary based on string contents but expect about 10 percent loss.')
zhoneOnuOmciGenericProfileMESrcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileMESrcProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileMESrcProfileName.setDescription('Name of ME profile used to create the Generic profile. The value for this object is only initialized when the profile is created.')
zhoneOnuOmciGenericProfileFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileFileName.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileFileName.setDescription('Name of file to be loaded into profile. This object is write-only and is not preserved.')
zhoneOnuOmciSpecificProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 10), )
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileTable.setDescription(" Table containing Specific OMCI commands for an ONU. The Specific profile is 'created' from existing ME and Generic profiles. During this operation, the 'variable' defintions from the ME and Generic profile are extracted from the profiles and placed into the Specific profile. The ME and Generic profile names are extracted from the ONU's Olt/Onu config profile. The Specific profile is 'updated' from a file placed into the uplink's file system. The following 'how to' examples demonstrate access of the object zhoneOnuOmciSpecificOmciCommands. How to create Specific profile from ME and Generic profiles: 1. Determine Specific profile instance <aaa> (from ONU's ifIndex) 2. Issue single SNMP set command containing the following: zhoneOnuOmciSpecificProfileRowStatus.aaa = create zhoneOnuOmciSpecificProfileFileName = <filename> 3. The profile is now created and the omciCommands contents have been placed into <filename>. The name of the ME profile used to create the Speofic profile is installed into zhoneOnuOmciSpecificProfileMESrcProfile. How to update existing Specific profile from a file: 1. Determine Specific profile instance <aaa> (from ONU's ifIndex) 2. Place file <filename> into uplink file system 3. Issue single SNMP set command containing the following: zhoneOnuOmciGenericProfileRowStatus.aaa = import zhoneOnuOmciGenericProfileFileName.aaa = <filename> How to extract Specific profile into a file: 1. Determine Specific profile instance <aaa> (from ONU's ifIndex) 2. Issue single SNMP set command containing the following: zhoneOnuOmciGenericProfileRowStatus.aaa = export zhoneOnuOmciGenericProfileFilename.aaa = <filename> 3. The file <filename> now exists on uplink file system How to delete Specific profile: 1. Determine Specific profile instance <aaa> (from ONU's ifIndex) 2. Issue single SNMP set command containing the following: zhoneOnuOmciGenericProfileRowStatus.aaa = destroy")
zhoneOnuOmciSpecificProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 10, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneOnuOmciSpecificProfileIndex"))
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileEntry.setDescription('Row in the OMCI Specific Profile table')
zhoneOnuOmciSpecificProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileIndex.setDescription('A unique index for each row entry. The index value corresponds to the ifIndex of the ONU which uses this profile.')
zhoneOnuOmciSpecificProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("export", 4), ("import", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileRowStatus.setDescription('Row status for the Specific Profile entry. Not really used for the configuration of the ONUs')
zhoneOnuOmciSpecificProfileOmciCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileOmciCommands.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileOmciCommands.setDescription('Contains the Specific set of OMCI commands and the variable substitutions used in configuring the ONUs. This object will go through some character substitution before being inserted into the database so the maximum string size will not be available. Available string size will vary based on string contents but expect about 10 percent loss.')
zhoneOnuOmciSpecificProfileMESrcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileMESrcProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileMESrcProfileName.setDescription('Name of ME profile used to create the Specific profile. The value for this object is only initialized when the profile is created.')
zhoneOnuOmciSpecificProfileFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileFileName.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileFileName.setDescription('Name of file to be loaded into profile. This object is write-only and is not preserved.')
zhoneGponOmciOnuAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 11), )
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsTable.setDescription('A table of all GPON OMCI ONU alarms.')
zhoneGponOmciOnuAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 11, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"))
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsEntry.setDescription('An entry for each ONU in the zhoneGponOmciOnuAlarmsTable.')
zhoneGponOmciOnuAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsText.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsText.setDescription("This is a long ascii string which contains the GPON OMCI ONU alarms. Each line of text in this string has the following format: aaa,bbb,ccc,'aaaStr,'bbbStr',d\\n where aaa : ME classId ( numeric decimal value ) bbb : alarm index ( numeric decimal value ) ccc : entityId ( numeric decimal value ) aaaStr : string version of ME name bbbStr : string version of alarm name d : alarm severity ( 1=critical, 2=major, 3=minor, 4=warning ) The ME classId is the standard value from the 'Managed entity identifiers' table of G984.4. The alarm index is the zero-based index (G984.4 or G983.2) within the ME class. the entityId is the physical port number on the ONT. Here is a sample: 11,0,513,'PptpEthUni','LanLos',2\\n 256,1,0,'OntG','PoweringAlarm',3\\n If this string has zero length then there are no active alarms. If this string has a single entry with a classId of 65535 then the alarm collection failed. WARNING! In this description, replace the sinqle quote characters with double quote characters! The Zhone scripts have problems with double quote characters!")
zhoneGponTrafficProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12), )
if mibBuilder.loadTexts: zhoneGponTrafficProfileTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileTable.setDescription('A table of the GPON GEM Port Traffic profiles.')
zhoneGponTrafficProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponTrafficProfileIndex"))
if mibBuilder.loadTexts: zhoneGponTrafficProfileEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileEntry.setDescription('Row in the zhoneGponPortTrafProfileTable.')
zhoneGponTrafficProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneGponTrafficProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileIndex.setDescription('Used to index an entry in the GEM port traffic profile table')
zhoneGponTrafficProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 2), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileRowStatus.setDescription('The row status for the GEM Port Traffic profile. ')
zhoneGponTrafficProfileGuaranteedUpstreamBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setUnits('kilobits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileGuaranteedUpstreamBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileGuaranteedUpstreamBw.setDescription('Bandwidth guaranteed by this alloc-id. This value is specified in kilobits per second. Only multiples of 512 are allowed, and the value may not exceed 2621440 (i.e. 2.5 gigabits per second). ')
zhoneGponTrafficProfileClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("ubr", 2))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileClass.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileClass.setDescription('Whether traffic is Constant Bit Rate or Unspecified Bit Rate.')
zhoneGponTrafficProfileCompensated = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileCompensated.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileCompensated.setDescription('For CBR, indicates whether compensated.')
zhoneGponTrafficProfileShared = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileShared.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileShared.setDescription('TRUE if the GEM Port which uses this traffic descriptor shares and allocation ID with another GEM port. FALSE otherwise. When used more than once in the same ONU, the GEM ports are assigned the same alloc-id value.')
zhoneGponTrafficProfileDbaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileDbaEnabled.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileDbaEnabled.setDescription('A flag to indicate if dynamic or static bandwidth allocation is used. The default value of DbaEnabled is false.')
zhoneGponTrafficProfileDbaFixedUsUbrBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setUnits('kilobits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileDbaFixedUsUbrBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileDbaFixedUsUbrBw.setDescription('Fixed UBR bandwidth will be always allocated UBR bandwidth. The min values of Fixed Ubr bandwidth can be 0 or 128kilo bits per second.Only multiples of 64 kilobits per second are allowed. ')
zhoneGponTrafficProfileDbaFixedUsCbrBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 454208))).setUnits('kilobits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileDbaFixedUsCbrBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileDbaFixedUsCbrBw.setDescription('Fixed CBR bandwidth will be always allocated CBR bandwidth. The min value of Fixed Cbr bandwidth can be 0 or 512 kilobits per second.Only multiples of 64 kilo bits per second are allowed.')
zhoneGponTrafficProfileDbaAssuredUsBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setUnits('kilobits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileDbaAssuredUsBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileDbaAssuredUsBw.setDescription('DBA Assured bandwidth will be allocated when traffic demand exists. The min value of Assured bandwidth can be 0 or 256 kilobits per second. Only multiples of 64 kilo bits per second are allowed. ')
zhoneGponTrafficProfileMaxUsBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setUnits('kilobits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileMaxUsBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileMaxUsBw.setDescription('The Max Bandwidth value should be larger or equal to the sum of Fixed UBR, Fixed CBR and Assured.The increments should be done in the order of 64 kilobits per second.The default value of maximum bandwidth is 0.')
zhoneGponTrafficProfileExtraUsBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonassured", 1), ("besteffort", 2))).clone('nonassured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponTrafficProfileExtraUsBwType.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileExtraUsBwType.setDescription('Extra Bandwidth = MaxBw - (Assured+FixedUbr+FixedCbr) The two Extra bandwidth types supported are : 1.nonassured 2.besteffort By default the value is nonassured.Nonassured has higher priority for getting unused bandwidth than besteffort. ')
zhoneGponPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 13), )
if mibBuilder.loadTexts: zhoneGponPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortStatusTable.setDescription('Current status of GEM port as reported from Gpon driver.')
zhoneGponPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 13, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"))
if mibBuilder.loadTexts: zhoneGponPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortStatusEntry.setDescription('Row in the zhoneGponPortStatusTable.')
zhoneGponPortStatusAllocId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponPortStatusAllocId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortStatusAllocId.setDescription('The current dynamic alloc-id value for the GEM port.')
zhoneGponPortStatusDbaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sr", 1), ("nsr", 2), ("nsrError", 3), ("notEnabled", 4), ("notAvailable", 5), ("notAdded", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponPortStatusDbaStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortStatusDbaStatus.setDescription('The current DBA status for this GEM port. DBA status reporting is on a per-ONU basis. All GEM ports on the ONU will report the same value. Possible values: sr - DBA type is SR and there is no error nsr - DBA type is NSR and there is no error nsrError - DBA type is NSR and there is an error or the ONU does not support NSR notEnabled - DBA has been disabled notAvailable - cannot communicate with ONU notAdded - ONU is not added to the OLT error - internal error prevents data collection ')
zhoneGponOmciStatsCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 14), )
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentTable.setDescription("Table of current-interval statistics gathered via OMCI from ONT's as specified in the ME profiles used by that ONT.")
zhoneGponOmciStatsCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 14, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"), (0, "Zhone-GPON-MIB", "zhoneGponOmciStatsCurrentMEId"), (0, "Zhone-GPON-MIB", "zhoneGponOmciStatsCurrentLogicalPort"))
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentEntry.setDescription('Row in zhoneGponOmciStatsCurrentTable. Each row retrieves counters for the current 15-minute interval for one managed entity on one logical port of one ONT.')
zhoneGponOmciStatsCurrentMEId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentMEId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentMEId.setDescription('This is the ID of the managed entity in the ITU G984.4 standard for the OMCI statistics we want to read.')
zhoneGponOmciStatsCurrentLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentLogicalPort.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentLogicalPort.setDescription('This specifies which entity on the ONT we want the statistics for. This is a logical number (1,2,...) which is translated according to the ME profile into an entity ID which is included in the command to the ONT.')
zhoneGponOmciStatsCurrentText = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentText.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsCurrentText.setDescription('Blob of statistics information returned. Format is: PhysPort,I1,A1,I2,A2,...In,An where PhysPort - physical port ID value Ii = attribute index (0-15, ascii-coded decimal integer) within ME according to G984,4 standard. Ai = attribute value (counter, ascii-coded decimal integer) n = number of attributes returned = number requested. Maximum number of attributes per ME is 16.')
zhoneGponOmciStatsPreviousTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 15), )
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousTable.setDescription("Table of previous-interval statistics gathered via OMCI from ONT's as specified in the ME profiles used by that ONT.")
zhoneGponOmciStatsPreviousEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 15, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"), (0, "Zhone-GPON-MIB", "zhoneGponOmciStatsPreviousMEId"), (0, "Zhone-GPON-MIB", "zhoneGponOmciStatsPreviousLogicalPort"))
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousEntry.setDescription('Row in zhoneGponOmciStatsPreviousTable. Each row retrieves counters for the last completed 15-minute interval for one managed entity on one logical port of one ONT.')
zhoneGponOmciStatsPreviousMEId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousMEId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousMEId.setDescription('This is the ID of the managed entity in the ITU G984.4 standard for the OMCI statistics we want to read.')
zhoneGponOmciStatsPreviousLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousLogicalPort.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousLogicalPort.setDescription('This specifies which entity on the ONT we want the statistics for. This is a logical number (1,2,...) which is translated according to the ME profile into an entity ID which is included in the command to the ONT.')
zhoneGponOmciStatsPreviousText = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 15, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousText.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatsPreviousText.setDescription('Blob of statistics information returned. Format is: PhysPort,I1,A1,I2,A2,...In,An where PhysPort - physical port ID value Ii = attribute index (0-15, ascii-coded decimal integer) within ME according to G984,4 standard. Ai = attribute value (counter, ascii-coded decimal integer) n = number of attributes returned = number requested. Maximum number of attributes per ME is 16. ')
zhoneGponOmciStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 16), )
if mibBuilder.loadTexts: zhoneGponOmciStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatusTable.setDescription("Table of current-interval statistics gathered via OMCI from ONT's as specified in the ME profiles used by that ONT.")
zhoneGponOmciStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 16, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"), (0, "Zhone-GPON-MIB", "zhoneGponOmciStatusMEId"), (0, "Zhone-GPON-MIB", "zhoneGponOmciStatusLogicalPort"))
if mibBuilder.loadTexts: zhoneGponOmciStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatusEntry.setDescription('Row in zhoneGponOmciStatsCurrentTable. Each row retrieves counters for the current 15-minute interval for one managed entity on one logical port of one ONT.')
zhoneGponOmciStatusMEId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneGponOmciStatusMEId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatusMEId.setDescription('This is the ID of the managed entity in the ITU G984.4 standard for the OMCI statistics we want to read.')
zhoneGponOmciStatusLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 16, 1, 2), Unsigned32())
if mibBuilder.loadTexts: zhoneGponOmciStatusLogicalPort.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatusLogicalPort.setDescription('This specifies which entity on the ONT we want the statistics for. This is a logical number (1,2,...) which is translated according to the ME profile into an entity ID which is included in the command to the ONT.')
zhoneGponOmciStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciStatusText.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatusText.setDescription("Blob of status information returned. Format is: PhysPort,attrId1,attrName1,attrNumValue1,attrStrValue1... attrIdn,attrNamen,attrNumValuen,attrStrValuen where PhysPort - physical port ID value attrIdn = index number (0-15) of the attribute within the the ME (ascii decimal) attrNamen = name of the attribute (returned by OCS) attrNumValuen = value of the attribute (ascii decimal) attrStrValuen = interpreted value ( 'up', 'down', etc ) n = number of attributes returned = number requested. Maximum number of attributes per ME is 16.")
zhoneGponOmciOnuRebootTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 17), )
if mibBuilder.loadTexts: zhoneGponOmciOnuRebootTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuRebootTable.setDescription('Table of objects used to reboot an ONU via the OMCI.')
zhoneGponOmciOnuRebootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 17, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"))
if mibBuilder.loadTexts: zhoneGponOmciOnuRebootEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuRebootEntry.setDescription('A single entry in the table')
zhoneGponOmciOnuReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reboot", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponOmciOnuReboot.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuReboot.setDescription("Set this object to 'reboot to reboot an ONU. The reboot command is sent to the ONU over the OMCI. Successful transmission of the reboot command to the ONU does no guarantee the ONU will reboot. The ONU may be in a fatal lockup which prevents the processing of the reboot command. ")
zhoneGponOmciOnuPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 18), )
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminTable.setDescription('Table of objects used to configure the admin state of a physical port on an ONU.')
zhoneGponOmciOnuPortAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 18, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"), (0, "Zhone-GPON-MIB", "zhoneGponOmciOnuPortAdminMEId"), (0, "Zhone-GPON-MIB", "zhoneGponOmciOnuPortAdminLogicalPort"))
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminEntry.setDescription('A single entry in the table')
zhoneGponOmciOnuPortAdminMEId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminMEId.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminMEId.setDescription('This is the ID of the managed entity in the ITU G984.4 standard.')
zhoneGponOmciOnuPortAdminLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminLogicalPort.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminLogicalPort.setDescription('This specifies which entity on the ONT we want. This is a logical number (1,2,...) which is translated according to the ME profile into an entity ID which is included in the command to the ONT.')
zhoneGponOmciOnuPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("up", 1), ("down", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminState.setDescription('This object is used to place an ONU physical port in a DOWN or UP state. This state is a configuration parameter and is preserved.')
zhoneGponOmciOnuPortAdminAutoDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("tenFull", 2), ("hundredFull", 3), ("thousandFull", 4), ("tenAuto", 5), ("tenHalf", 6), ("hundredHalf", 7), ("thousandHalf", 8), ("thousandAuto", 9), ("autoFull", 10), ("autoHalf", 11), ("hundredAuto", 12))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminAutoDetect.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminAutoDetect.setDescription('This object is used to set the auto detection rate of an ONU physical port.This state is a configuration parameter and is preserved.')
zhoneGponOmciOnuImageUpgradeTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19), )
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeTable.setDescription("This table is used to perform ONU software upgrades. There is one table entry for each ONU. Each ONU is addressed by it's ifIndex.")
zhoneGponOmciOnuImageUpgradeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"))
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeEntry.setDescription('An entry for one ONU.')
zhoneGponOmciOnuImageUpgradeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("activate", 2), ("commit", 3), ("downloadActivate", 4), ("downloadActivateCommit", 5), ("abortDownload", 6), ("activateCommit", 7))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeAction.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeAction.setDescription('Which software upgrade action to perform.')
zhoneOnuOmciImageUpgradeFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeFilename.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeFilename.setDescription('Name of file to be loaded downloaded to ONU. Required on download actions.')
zhoneGponOmciOnuImageUpgradePartition = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("partitionNumber0", 1), ("partitionNumber1", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradePartition.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradePartition.setDescription("Optional on all actions. Indicates which partition or 'none'in which case default is to use inactive partition for download or activate action, or to the uncommitted partion for commit action. On a read, returns the partition used for current or latest upgrade.")
zhoneOnuOmciImageUpgradeImageVersionPartition0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeImageVersionPartition0.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeImageVersionPartition0.setDescription('Version information for s/w image loaded into partition 0.')
zhoneOnuOmciImageUpgradeImageVersionPartition1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeImageVersionPartition1.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeImageVersionPartition1.setDescription('Version information for s/w image loaded into partition 1.')
zhoneOnuOmciImageUpgradeIsCommittedPartition0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsCommittedPartition0.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsCommittedPartition0.setDescription('Current commit status for partition 0.')
zhoneOnuOmciImageUpgradeIsCommittedPartition1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsCommittedPartition1.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsCommittedPartition1.setDescription('Current commit status for partition 1.')
zhoneOnuOmciImageUpgradeIsActivatedPartition0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsActivatedPartition0.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsActivatedPartition0.setDescription('Current activated status for partition 0.')
zhoneOnuOmciImageUpgradeIsActivatedPartition1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsActivatedPartition1.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsActivatedPartition1.setDescription('Current activated status for partition 1.')
zhoneOnuOmciImageUpgradeIsValidPartition0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsValidPartition0.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsValidPartition0.setDescription('Current valid status for partition 0.')
zhoneOnuOmciImageUpgradeIsValidPartition1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsValidPartition1.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeIsValidPartition1.setDescription('Current valid status for partition 0.')
zhoneOnuOmciImageUpgradeDownloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 12), OnuUpgradeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciImageUpgradeDownloadStatus.setDescription('Current s/w image download status.')
zhoneGponOmciOnuImageUpgradeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeModel.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeModel.setDescription('Model id read from this onu.')
zhoneGponOmciOnuImageUpgradeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeStartTime.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeStartTime.setDescription('Start time, as ascii string, of most recent upgrade.')
zhoneGponOmciOnuImageUpgradeWillBeActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeWillBeActivated.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeWillBeActivated.setDescription('If true, the downloaded image will be activated when download completes.')
zhoneGponOmciOnuImageUpgradeWillBeCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeWillBeCommitted.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeWillBeCommitted.setDescription('If true, this image will be committed on successful activation.')
zhoneGponOmciOnuImageUpgradeType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("manual", 1), ("auto", 2), ("bulk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeType.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeType.setDescription('Indicates the reason for the upgrade.')
zhoneGponOmciOnuImageDownloadProgressPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageDownloadProgressPercentage.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageDownloadProgressPercentage.setDescription('Image download progress. This object is only valid during image download.')
zhoneGponOmciOnuImageUpgradeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 19, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("omci", 1), ("tftp", 2))).clone('omci')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeMethod.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeMethod.setDescription('The download method used for upgrading this ONU. TFTP is used where possible, else OMCI (default).')
zhoneGponOltStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20), )
if mibBuilder.loadTexts: zhoneGponOltStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatusTable.setDescription('Current Status of OLT as reported from the Gpon Driver.')
zhoneGponOltStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltIfIndex"))
if mibBuilder.loadTexts: zhoneGponOltStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatusEntry.setDescription('Row in the zhoneGponOltStatusTable.')
zhoneGponOltOpticTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 128))).setUnits('celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOpticTemperature.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOpticTemperature.setDescription('Internally measured Tranceiver Temperature of the OLT in Celcius.')
zhoneGponOltOpticVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 655))).setUnits('hundredths of volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOpticVoltage.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOpticVoltage.setDescription('Internally measured Tranceiver Supply Voltage of the OLT in Volts. The measured value will be in the order of hundredths of Volts.')
zhoneGponOltOpticTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131))).setUnits('milliAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOpticTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOpticTxBiasCurrent.setDescription('Measured Tx Bias current per OLT in milli Amperes.')
zhoneGponOltOpticTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 200))).setUnits('tenths of dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOpticTxPower.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOpticTxPower.setDescription('Measured Tx Output Power of the OLT in dB. The measured value will be in tenths of dB.')
zhoneGponOltOpticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("alarm", 4), ("sfpnotpresent", 8), ("oltactive", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOpticStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOpticStatus.setDescription('When the End Of Life(EOL) Alarm bit is set an alarm will be raised. Alarm is set at about 150% of original current.Alarm will be level Major. It will be cleared when the SFP is replaced, or when the Alarm bit is cleared. Warning indication will be provided when user asks for status. Warning is set when EOL is at about 130% original current.')
zhoneGponOltOpticAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 6), Bits().clone(namedValues=NamedValues(("tempHigh", 0), ("tempLow", 1), ("vccHigh", 2), ("vccLow", 3), ("txBiasHigh", 4), ("txBiasLow", 5), ("txPwrHigh", 6), ("txPwrLow", 7), ("rxPwrHigh", 8), ("rxPwrLow", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltOpticAlarms.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltOpticAlarms.setDescription('Bitmap of alarm conditions present, as reported from the SFP.')
zhoneGponOltStatusWord = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 7), Bits().clone(namedValues=NamedValues(("noAlarm", 0), ("notused1", 1), ("notused2", 2), ("notused3", 3), ("notused4", 4), ("notused5", 5), ("lossOfSignal", 6), ("notused7", 7), ("notused8", 8), ("outOfService", 9), ("rogueOnu", 10), ("rogueOnuRssi", 11), ("sgmiiGeLinkDown", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatusWord.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatusWord.setDescription('The bit-coded OLT status word.')
zhoneGponOltConfiguredOnuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltConfiguredOnuCount.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfiguredOnuCount.setDescription('Count of the ONUs on this OLT where onu-added = TRUE.')
zhoneGponOltActiveOnuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 20, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltActiveOnuCount.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltActiveOnuCount.setDescription('Number of ONUs on this OLT currently in operational state UP.')
zhoneGponOltDbaStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21), )
if mibBuilder.loadTexts: zhoneGponOltDbaStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaStatusTable.setDescription('Current status of OLT DBA as reported from CAC.')
zhoneGponOltDbaStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltIfIndex"))
if mibBuilder.loadTexts: zhoneGponOltDbaStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaStatusEntry.setDescription('Row in the zhoneGponOltDbaStatusTable.')
zhoneGponOltDbaTotalAvailableBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 1), Unsigned32()).setUnits('kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaTotalAvailableBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaTotalAvailableBw.setDescription('The Total Available DBA Bandwidth per OLT.The unit is Kilobits( 1000 bits).')
zhoneGponOltDbaTotalAvailableCompensatedCbrBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 2), Unsigned32()).setUnits('kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaTotalAvailableCompensatedCbrBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaTotalAvailableCompensatedCbrBw.setDescription('The Total Available DBA Compensated CBR bandwidth per OLT. The unit is Kilobits(1000 bits).')
zhoneGponOltDbaAllocatedUbrBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 3), Unsigned32()).setUnits('kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedUbrBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedUbrBw.setDescription('The Total Available DBA Allocated UBR bandwidth per OLT. The unit is Kilobits(1000 bits).')
zhoneGponOltDbaAllocatedCbrBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 4), Unsigned32()).setUnits('kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedCbrBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedCbrBw.setDescription('The Total Available DBA Allocated CBR bandwidth per OLT. The unit is Kilobits(1000 bits).')
zhoneGponOltDbaAllocatedCompensatedCbrBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 5), Unsigned32()).setUnits('kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedCompensatedCbrBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedCompensatedCbrBw.setDescription('The Total Available DBA Allocated CBR Compensated bandwidth per OLT. The unit is Kilobits(1000 bits).')
zhoneGponOltDbaAllocatedAssuredBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 6), Unsigned32()).setUnits('kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedAssuredBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedAssuredBw.setDescription('The Total Available DBA Allocated Assured bandwidth per OLT. The unit is Kilobits(1000 bits).')
zhoneGponOltDbaAllocatedNonAssuredBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 7), Unsigned32()).setUnits('kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedNonAssuredBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedNonAssuredBw.setDescription('The Total Available DBA Allocated Non Assured bandwidth per OLT. The unit is Kilobits(1000 bits).')
zhoneGponOltDbaAllocatedBestEffortBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 8), Unsigned32()).setUnits('kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedBestEffortBw.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaAllocatedBestEffortBw.setDescription('The Total Available DBA Allocated Best Effort bandwidth per OLT. The unit is Kilobits(1000 bits).')
zhoneGponOltDbaMaxAllocIds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaMaxAllocIds.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaMaxAllocIds.setDescription('Maximum number of alloc-Ids supported by this OLT.')
zhoneGponOltDbaAvailAllocIds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaAvailAllocIds.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaAvailAllocIds.setDescription('Total number of available alloc-Ids for this OLT.')
zhoneGponOltDbaUsedAllocIds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaUsedAllocIds.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaUsedAllocIds.setDescription('Total number of alloc-Ids in use for this OLT.')
zhoneGponOltDbaMaxDbaAllocIds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaMaxDbaAllocIds.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaMaxDbaAllocIds.setDescription('Maximum number of DBA alloc-Ids supported by this OLT.')
zhoneGponOltDbaAvailDbaAllocIds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaAvailDbaAllocIds.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaAvailDbaAllocIds.setDescription('Total number of available DBA alloc-Ids for this OLT.')
zhoneGponOltDbaUsedDbaAllocIds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaUsedDbaAllocIds.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaUsedDbaAllocIds.setDescription('Total number of DBA alloc-Ids in use for this OLT.')
zhoneGponOltDbaTotalOltGemPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaTotalOltGemPorts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaTotalOltGemPorts.setDescription('Total number GEM Ports currently on this OLT.')
zhoneGponOltDbaLastCacRc = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 21, 1, 16), GponCacRc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltDbaLastCacRc.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltDbaLastCacRc.setDescription('This object contains the result code of the last GPON CAC request for the OLT.')
zhoneGponUpgradeByStateTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22), )
if mibBuilder.loadTexts: zhoneGponUpgradeByStateTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeByStateTable.setDescription('Information about onu upgrade.')
zhoneGponUpgradeByStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeDownloadStatus"), (0, "Zhone", "zhoneSlotIndex"), (0, "Zhone-GPON-MIB", "zhoneGponUpgradeOlt"), (0, "Zhone-GPON-MIB", "zhoneGponUpgradeOnu"))
if mibBuilder.loadTexts: zhoneGponUpgradeByStateEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeByStateEntry.setDescription('Row in onu upgrade table.')
zhoneGponUpgradeOlt = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: zhoneGponUpgradeOlt.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeOlt.setDescription('Olt number on the card.')
zhoneGponUpgradeOnu = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: zhoneGponUpgradeOnu.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeOnu.setDescription('Onu number within olt.')
zhoneGponUpgradeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeModel.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeModel.setDescription('Model ID returned from this Onu.')
zhoneGponUpgradeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeStartTime.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeStartTime.setDescription('Last upgrade start time, as ascii string')
zhoneGponUpgradeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeIfIndex.setDescription('Onu ifIndex')
zhoneGponUpgradeByStateOnuState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 6), OnuUpgradeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeByStateOnuState.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeByStateOnuState.setDescription('The actual upgrade state of the onu.')
zhoneGponUpgradeByStateWillBeActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeByStateWillBeActivated.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeByStateWillBeActivated.setDescription('If true, the image will be activated if download is successful.')
zhoneGponUpgradeByStateWillBeCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeByStateWillBeCommitted.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeByStateWillBeCommitted.setDescription('If true, image will be committed after successful activation.')
zhoneGponUpgradeByStateUpgradeType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("manual", 1), ("auto", 2), ("bulk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeByStateUpgradeType.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeByStateUpgradeType.setDescription('Indicates the reason for the upgrade.')
zhoneGponUpgradeByStatePartition = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("partitionNumber0", 1), ("partitionNumber1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeByStatePartition.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeByStatePartition.setDescription('If upgrade has been requested, this is the image partition of the latest upgrade.')
zhoneGponUpgradeProgressPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeProgressPercentage.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeProgressPercentage.setDescription('Image download progress. This object is only valid during image download.')
zhoneGponUpgradeByStateMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 22, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("omci", 1), ("tftp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpgradeByStateMethod.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpgradeByStateMethod.setDescription('The download method used for upgrading this ONU. TFTP is used where possible, else OMCI (default).')
zhoneGponCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 23))
zhoneGponCmdOperation = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("onuApply", 1), ("onuResync", 2), ("onuReboot", 3), ("onuSet2default", 4), ("onuEnableAutoCfg", 5), ("onuDisableAutoCfg", 6))).clone('onuApply')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponCmdOperation.setStatus('current')
if mibBuilder.loadTexts: zhoneGponCmdOperation.setDescription('GPON Command operation. This object must be supplied with each operation.')
zhoneGponCmdFilterMask = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 23, 2), Bits().clone(namedValues=NamedValues(("filterShelf", 0), ("filterSlot", 1), ("filterOlt", 2), ("filterOnu", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponCmdFilterMask.setStatus('current')
if mibBuilder.loadTexts: zhoneGponCmdFilterMask.setDescription('GPON Command operation filter. This object must be supplied with each operation.')
zhoneGponCmdShelf = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 23, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponCmdShelf.setStatus('current')
if mibBuilder.loadTexts: zhoneGponCmdShelf.setDescription("GPON command 'SHELF' filter value. This parameter is for future use and is currently not supported.")
zhoneGponCmdSlot = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 23, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponCmdSlot.setStatus('current')
if mibBuilder.loadTexts: zhoneGponCmdSlot.setDescription("GPON command 'SLOT' filter value. If this object is included in the SNMP packet then the associated filter must be enabled in the filter (zhoneGponCmdFilterMask).")
zhoneGponCmdOlt = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 23, 5), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponCmdOlt.setStatus('current')
if mibBuilder.loadTexts: zhoneGponCmdOlt.setDescription("GPON command 'OLT' filter value. If this object is included in the SNMP packet then the associated filter must be enabled in the filter (zhoneGponCmdFilterMask).")
zhoneGponCmdOnu = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 23, 6), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponCmdOnu.setStatus('current')
if mibBuilder.loadTexts: zhoneGponCmdOnu.setDescription("GPON command 'ONU' filter value. If this object is included in the SNMP packet then the associated filter must be enabled in the filter (zhoneGponCmdFilterMask).")
zhoneGponOltStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24), )
if mibBuilder.loadTexts: zhoneGponOltStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsTable.setDescription('Per OLT statistics gathered from Broadlight device.')
zhoneGponOltStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltIfIndex"))
if mibBuilder.loadTexts: zhoneGponOltStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsEntry.setDescription('Per OLT statistics gathered from Broadlight device.')
zhoneGponOltStatisticsUpstreamValidGemFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamValidGemFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamValidGemFrames.setDescription('UpstreamValidGemFrames counter.')
zhoneGponOltStatisticsUpstreamDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamDiscardedFrames.setDescription('UpstreamDiscardedFrames counter.')
zhoneGponOltStatisticsUpstreamGemFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamGemFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamGemFrames.setDescription('UpstreamGemFrames counter.')
zhoneGponOltStatisticsUpstreamOmciFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamOmciFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamOmciFrames.setDescription('UpstreamOmciFrames counter.')
zhoneGponOltStatisticsUpstreamPloamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPloamFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPloamFrames.setDescription('UpstreamPloamFrames counter.')
zhoneGponOltStatisticsUpstreamIdlePloamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamIdlePloamFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamIdlePloamFrames.setDescription('UpstreamIdlePloamFrames counter.')
zhoneGponOltStatisticsDownstreamValidGemFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamValidGemFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamValidGemFrames.setDescription('DownstreamValidGemFrames counter.')
zhoneGponOltStatisticsDownstreamDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamDiscardedFrames.setDescription('DownstreamDiscardedFrames counter.')
zhoneGponOltStatisticsDownstreamGemFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamGemFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamGemFrames.setDescription('DownstreamGemFrames counter.')
zhoneGponOltStatisticsDownstreamOmciFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamOmciFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamOmciFrames.setDescription('DownstreamOmciFrames counter.')
zhoneGponOltStatisticsDownstreamPloamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamPloamFrames.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamPloamFrames.setDescription('DownstreamPloamFrames counter.')
zhoneGponOltStatisticsDownstreamIdlePloamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamIdlePloamFrames.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamIdlePloamFrames.setDescription('DownstreamIdlePloamFrames counter.')
zhoneGponOltStatisticsDownstreamPonValidEthernetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamPonValidEthernetPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamPonValidEthernetPkts.setDescription('DownstreamPonValidEthernetPkts counter.')
zhoneGponOltStatisticsDownstreamPonCpuPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamPonCpuPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamPonCpuPkts.setDescription('DownstreamPonCpuPkts counter.')
zhoneGponOltStatisticsDownstreamTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTxBytes.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTxBytes.setDescription('DownstreamTxBytes counter.')
zhoneGponOltStatisticsUpstreamPonValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPonValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPonValidPkts.setDescription('Description.')
zhoneGponOltStatisticsUpstreamPonValidNotIdlePloams = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPonValidNotIdlePloams.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPonValidNotIdlePloams.setDescription('UpstreamPonValidNotIdlePloams counter.')
zhoneGponOltStatisticsUpstreamPonErrorPloams = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPonErrorPloams.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPonErrorPloams.setDescription('UpstreamPonErrorPloams counter.')
zhoneGponOltStatisticsUpstreamPonInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPonInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamPonInvalidPkts.setDescription('UpstreamPonInvalidPkts counter.')
zhoneGponOltStatisticsUpstreamDroppedPktsInactivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamDroppedPktsInactivePorts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamDroppedPktsInactivePorts.setDescription('UpstreamDroppedPktsInactivePorts counter.')
zhoneGponOltStatisticsUpstreamDroppedPloamsFifoFull = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamDroppedPloamsFifoFull.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamDroppedPloamsFifoFull.setDescription('UpstreamDroppedPloamsFifoFull counter.')
zhoneGponOltStatisticsDownstreamTmValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmValidPkts.setDescription('DownstreamTmValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmCrcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmCrcPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmCrcPkts.setDescription('DownstreamTmCrcPkts counter.')
zhoneGponOltStatisticsDownstreamTmDroppedCpuPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmDroppedCpuPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmDroppedCpuPkts.setDescription('DownstreamTmDroppedCpuPkts counter.')
zhoneGponOltStatisticsDownstreamTmMacLookupMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmMacLookupMiss.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmMacLookupMiss.setDescription('DownstreamTmMacLookupMiss counter.')
zhoneGponOltStatisticsDownstreamTmPktsForwardedFromHmToPon = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmPktsForwardedFromHmToPon.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmPktsForwardedFromHmToPon.setDescription('DownstreamTmPktsForwardedFromHmToPon counter.')
zhoneGponOltStatisticsDownstreamTmPktsDroppedGemPidNotEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmPktsDroppedGemPidNotEnabled.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmPktsDroppedGemPidNotEnabled.setDescription('DownstreamTmPktsDroppedGemPidNotEnabled counter.')
zhoneGponOltStatisticsDownstreamTmQ0ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ0ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ0ValidPkts.setDescription('DownstreamTmQ0ValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ0DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ0DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ0DroppedPkts.setDescription('DownstreamTmQ0DroppedPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ1ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ1ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ1ValidPkts.setDescription('DownstreamTmQ1ValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ1DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ1DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ1DroppedPkts.setDescription('DownstreamTmQ1DroppedPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ2ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ2ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ2ValidPkts.setDescription('DownstreamTmQ2ValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ2DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ2DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ2DroppedPkts.setDescription('DownstreamTmQ2DroppedPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ3ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ3ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ3ValidPkts.setDescription('DownstreamTmQ3ValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ3DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ3DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ3DroppedPkts.setDescription('DownstreamTmQ3DroppedPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ4ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ4ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ4ValidPkts.setDescription('DownstreamTmQ4ValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ4DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ4DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ4DroppedPkts.setDescription('DownstreamTmQ4DroppedPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ5ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ5ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ5ValidPkts.setDescription('DownstreamTmQ5ValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ5DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ5DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ5DroppedPkts.setDescription('DownstreamTmQ5DroppedPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ6ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ6ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ6ValidPkts.setDescription('DownstreamTmQ6ValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ6DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ6DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ6DroppedPkts.setDescription('DownstreamTmQ6DroppedPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ7ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ7ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ7ValidPkts.setDescription('DownstreamTmQ7ValidPkts counter.')
zhoneGponOltStatisticsDownstreamTmQ7DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ7DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsDownstreamTmQ7DroppedPkts.setDescription('DownstreamTmQ7DroppedPkts counter.')
zhoneGponOltStatisticsUpstreamTmDroppedCpuPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmDroppedCpuPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmDroppedCpuPkts.setDescription('UpstreamTmDroppedCpuPkts counter.')
zhoneGponOltStatisticsUpstreamTmDroppedPktsCrcError = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmDroppedPktsCrcError.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmDroppedPktsCrcError.setDescription('UpstreamTmDroppedPktsCrcError counter.')
zhoneGponOltStatisticsUpstreamTmDroppedPktsSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmDroppedPktsSecurity.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmDroppedPktsSecurity.setDescription('UpstreamTmDroppedPktsSecurity counter.')
zhoneGponOltStatisticsUpstreamTmLearnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmLearnFailures.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmLearnFailures.setDescription('UpstreamTmLearnFailures counter.')
zhoneGponOltStatisticsUpstreamTmQ0ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ0ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ0ValidPkts.setDescription('UpstreamTmQ0ValidPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ0DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ0DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ0DroppedPkts.setDescription('UpstreamTmQ0DroppedPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ1ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ1ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ1ValidPkts.setDescription('UpstreamTmQ1ValidPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ1DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ1DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ1DroppedPkts.setDescription('UpstreamTmQ1DroppedPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ2ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ2ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ2ValidPkts.setDescription('UpstreamTmQ2ValidPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ2DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ2DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ2DroppedPkts.setDescription('UpstreamTmQ2DroppedPkts')
zhoneGponOltStatisticsUpstreamTmQ3ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ3ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ3ValidPkts.setDescription('UpstreamTmQ3ValidPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ3DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ3DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ3DroppedPkts.setDescription('UpstreamTmQ3DroppedPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ4ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ4ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ4ValidPkts.setDescription('UpstreamTmQ4ValidPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ4DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ4DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ4DroppedPkts.setDescription('UpstreamTmQ4DroppedPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ5ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ5ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ5ValidPkts.setDescription('UpstreamTmQ5ValidPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ5DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ5DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ5DroppedPkts.setDescription('UpstreamTmQ5DroppedPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ6ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ6ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ6ValidPkts.setDescription('UpstreamTmQ6ValidPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ6DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ6DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ6DroppedPkts.setDescription('UpstreamTmQ6DroppedPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ7ValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ7ValidPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ7ValidPkts.setDescription('UpstreamTmQ7ValidPkts counter.')
zhoneGponOltStatisticsUpstreamTmQ7DroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ7DroppedPkts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsUpstreamTmQ7DroppedPkts.setDescription('UpstreamTmQ7DroppedPkts counter.')
zhoneGponOltStatisticsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 24, 1, 64), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponOltStatisticsClearStats.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsClearStats.setDescription('Clear all statistics for the selected interface.')
zhoneGponUpstreamOntStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25), )
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsTable.setDescription('Per ONT Upstream Statistics provided by Broadlight.')
zhoneGponUpstreamOntStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1), ).setIndexNames((0, "Zhone-GPON-MIB", "zhoneGponOltOnuIfIndex"))
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsEntry.setDescription('Per ONT Upstream Statistics provided by Broadlight.')
zhoneGponUpstreamOntStatisticsUpstreamBipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsUpstreamBipErrors.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsUpstreamBipErrors.setDescription('UpstreamOntStatisticsUpstreamBipErrors counter.')
zhoneGponUpstreamOntStatisticsFecCorrectedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsFecCorrectedBytes.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsFecCorrectedBytes.setDescription('UpstreamOntStatisticsFecCorrectedBytes counter.')
zhoneGponUpstreamOntStatisticsFecCorrectedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsFecCorrectedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsFecCorrectedCodewords.setDescription('UpstreamOntStatisticsFecCorrectedCodewords counter.')
zhoneGponUpstreamOntStatisticsFecUncorrectedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsFecUncorrectedCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsFecUncorrectedCodewords.setDescription('UpstreamOntStatisticsFecUncorrectedCodewords counter.')
zhoneGponUpstreamOntStatisticsTotalRxCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsTotalRxCodewords.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsTotalRxCodewords.setDescription('UpstreamOntStatisticsTotalRxCodewords counter.')
zhoneGponUpstreamOntStatisticsUnreceivedBursts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsUnreceivedBursts.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsUnreceivedBursts.setDescription('UpstreamOntStatisticsUnreceivedBursts counter.')
zhoneGponUpstreamOntStatisticsBipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsBipErrors.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsBipErrors.setDescription('UpstreamOntStatisticsBipErrors counter.')
zhoneGponUpstreamOntStatisticsRemoteBipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsRemoteBipErrors.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsRemoteBipErrors.setDescription('UpstreamOntStatisticsRemoteBipErrors counter.')
zhoneGponUpstreamOntStatisticsDriftOfWindowIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsDriftOfWindowIndications.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsDriftOfWindowIndications.setDescription('UpstreamOntStatisticsDriftOfWindowIndications counter.')
zhoneGponUpstreamOntStatisticsMessageErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsMessageErrorMessage.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsMessageErrorMessage.setDescription('UpstreamOntStatisticsMessageErrorMessage counter.')
zhoneGponUpstreamOntStatisticsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 14, 1, 25, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsClearStats.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsClearStats.setDescription('Clear all statistics for the selected interface.')
zhoneGponOltConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 10)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltConfigMaxRtPropagationDelay"), ("Zhone-GPON-MIB", "zhoneGponOltConfigMaxOnuResponseTime"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPreassignedEqD"), ("Zhone-GPON-MIB", "zhoneGponOltConfigLosAlpha"), ("Zhone-GPON-MIB", "zhoneGponOltConfigLofAlpha"), ("Zhone-GPON-MIB", "zhoneGponOltConfigLoamAlpha"), ("Zhone-GPON-MIB", "zhoneGponOltConfigScrambler"), ("Zhone-GPON-MIB", "zhoneGponOltConfigFecMode"), ("Zhone-GPON-MIB", "zhoneGponOltConfigAutoLearn"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPowerLevel"), ("Zhone-GPON-MIB", "zhoneGponOltConfigGuardBitCount"), ("Zhone-GPON-MIB", "zhoneGponOltConfigDbaMode"), ("Zhone-GPON-MIB", "zhoneGponOltConfigGemBlockSize"), ("Zhone-GPON-MIB", "zhoneGponOltConfigUsBerInterval"), ("Zhone-GPON-MIB", "zhoneGponOltConfigDsBerInterval"), ("Zhone-GPON-MIB", "zhoneGponOltConfigBerSfThreshold"), ("Zhone-GPON-MIB", "zhoneGponOltConfigBerSdThreshold"), ("Zhone-GPON-MIB", "zhoneGponOltConfigFecRequest"), ("Zhone-GPON-MIB", "zhoneGponOltConfigKeyExchange"), ("Zhone-GPON-MIB", "zhoneGponOltConfigMinRtPropagationDelay"), ("Zhone-GPON-MIB", "zhoneGponOltConfigMinOnuResponseTime"), ("Zhone-GPON-MIB", "zhoneGponOltConfigEqDMeasureCycles"), ("Zhone-GPON-MIB", "zhoneGponOltConfigDriftControlInterval"), ("Zhone-GPON-MIB", "zhoneGponOltConfigDriftControlLimit"), ("Zhone-GPON-MIB", "zhoneGponOltConfigAllocCycleLength"), ("Zhone-GPON-MIB", "zhoneGponOltConfigMinUsAlloc"), ("Zhone-GPON-MIB", "zhoneGponOltConfigAckTimeout"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPlsMaxAllocSize"), ("Zhone-GPON-MIB", "zhoneGponOltConfigDbaCycle"), ("Zhone-GPON-MIB", "zhoneGponOltConfigSrDbaReportingBlockSize"), ("Zhone-GPON-MIB", "zhoneGponOltConfigProtectionSwitchoverTimer"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPreambleOverride"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPreambleType0"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPreambleType1"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPreambleType3PreRange"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPreambleType3PostRange"), ("Zhone-GPON-MIB", "zhoneGponOltConfigPreambleType3Pattern"), ("Zhone-GPON-MIB", "zhoneGponOltConfigBipErrorMonitoring"), ("Zhone-GPON-MIB", "zhoneGponOltConfigBipErrorsPerSampleThreshold"), ("Zhone-GPON-MIB", "zhoneGponOltConfigBipErroredSamplesThreshold"), ("Zhone-GPON-MIB", "zhoneGponOltConfigBipMaxSampleGap"), ("Zhone-GPON-MIB", "zhoneGponOltConfigRogueOnuDetectFrequency"), ("Zhone-GPON-MIB", "zhoneGponOltConfigRogueOnuRxPowerThreshold"), ("Zhone-GPON-MIB", "zhoneGponOltConfigRogueOnuDetection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOltConfigGroup = zhoneGponOltConfigGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltConfigGroup.setDescription('GPON OLT Config group')
zhoneGponOnuConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 11)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltOnuConfigSerialNoVendorId"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigSerialNoVendorSpecific"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigPassword"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigAutoLearn"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigPowerLevel"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigUsBerInterval"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigDsBerInterval"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigOnuAdded"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigOmciFileName"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigMEProfileName"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigGenericProfileName"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigPhysicalTraps"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigOntTraps"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigLineStatusTraps"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigAutoUpgrade"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigSerialNoVendorSpecificFsan"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigUseRegId"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigModel"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigOntVersion"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigImageVersionActive"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigImageVersionStandby"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigUsRxPowerMonitoring"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigUsRxPowerHighThreshold"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigUsRxPowerLowThreshold"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigDbaStatusReporting"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigOmciDataSync"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigSnmpDataSync"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigNextAvailableGemPort"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigAutoConfigState"), ("Zhone-GPON-MIB", "zhoneGponOltOnuConfigLinkStatusAlarmSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOnuConfigGroup = zhoneGponOnuConfigGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuConfigGroup.setDescription('GPON ONU Config group')
zhoneGponPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 12)).setObjects(("Zhone-GPON-MIB", "zhoneGponPortConfigRowStatus"), ("Zhone-GPON-MIB", "zhoneGponPortConfigMulticast"), ("Zhone-GPON-MIB", "zhoneGponPortConfigEncrypted"), ("Zhone-GPON-MIB", "zhoneGponPortConfigDirection"), ("Zhone-GPON-MIB", "zhoneGponPortConfigTrafficProfile"), ("Zhone-GPON-MIB", "zhoneGponPortConfigRowShelf"), ("Zhone-GPON-MIB", "zhoneGponPortConfigRowSlot"), ("Zhone-GPON-MIB", "zhoneGponPortConfigRowOlt"), ("Zhone-GPON-MIB", "zhoneGponPortConfigRowPort"), ("Zhone-GPON-MIB", "zhoneGponPortConfigRowTrafficProfile"), ("Zhone-GPON-MIB", "zhoneGponPortConfigRowOnuId"), ("Zhone-GPON-MIB", "zhoneGponPortConfigTrafficManagementProfileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponPortConfigGroup = zhoneGponPortConfigGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortConfigGroup.setDescription('GPON Port Config group')
zhoneGponAllocIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 13)).setObjects(("Zhone-GPON-MIB", "zhoneGponAllocIdRowStatus"), ("Zhone-GPON-MIB", "zhoneGponAllocIdOnuId"), ("Zhone-GPON-MIB", "zhoneGponAllocIdGuaranteedBw"), ("Zhone-GPON-MIB", "zhoneGponAllocIdTrafficClass"), ("Zhone-GPON-MIB", "zhoneGponAllocIdCompensated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponAllocIdGroup = zhoneGponAllocIdGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponAllocIdGroup.setDescription('GPON Allocation ID group')
zhoneGponSerialNoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 14)).setObjects(("Zhone-GPON-MIB", "zhoneGponSerialNoVendorId"), ("Zhone-GPON-MIB", "zhoneGponSerialNoVendorSpecific"), ("Zhone-GPON-MIB", "zhoneGponSerialNoTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponSerialNoGroup = zhoneGponSerialNoGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponSerialNoGroup.setDescription('GPON Serial Number group')
zhoneGponOnuStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 15)).setObjects(("Zhone-GPON-MIB", "zhoneGponOnuStatusWord"), ("Zhone-GPON-MIB", "zhoneGponOnuOmciState"), ("Zhone-GPON-MIB", "zhoneGponOnuOpticRssi"), ("Zhone-GPON-MIB", "zhoneGponOntRxPower"), ("Zhone-GPON-MIB", "zhoneGponOntVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOnuStatusGroup = zhoneGponOnuStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOnuStatusGroup.setDescription('GPON ONU Status group')
zhoneOnuOmciMeProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 16)).setObjects(("Zhone-GPON-MIB", "zhoneOnuOmciMEProfileRowStatus"), ("Zhone-GPON-MIB", "zhoneOnuOmciMEProfileName"), ("Zhone-GPON-MIB", "zhoneOnuOmciMEProfileOmciCommands"), ("Zhone-GPON-MIB", "zhoneOnuOmciMEProfileFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneOnuOmciMeProfileGroup = zhoneOnuOmciMeProfileGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciMeProfileGroup.setDescription('GPON OMCI ONU ME Profile group')
zhoneOnuOmciGenericProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 17)).setObjects(("Zhone-GPON-MIB", "zhoneOnuOmciGenericProfileRowStatus"), ("Zhone-GPON-MIB", "zhoneOnuOmciGenericProfileName"), ("Zhone-GPON-MIB", "zhoneOnuOmciGenericProfileOmciCommands"), ("Zhone-GPON-MIB", "zhoneOnuOmciGenericProfileFileName"), ("Zhone-GPON-MIB", "zhoneOnuOmciGenericProfileMESrcProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneOnuOmciGenericProfileGroup = zhoneOnuOmciGenericProfileGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciGenericProfileGroup.setDescription('GPON OMCI ONU Generic Profile group')
zhoneOnuOmciSpecificProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 18)).setObjects(("Zhone-GPON-MIB", "zhoneOnuOmciSpecificProfileRowStatus"), ("Zhone-GPON-MIB", "zhoneOnuOmciSpecificProfileOmciCommands"), ("Zhone-GPON-MIB", "zhoneOnuOmciSpecificProfileMESrcProfileName"), ("Zhone-GPON-MIB", "zhoneOnuOmciSpecificProfileFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneOnuOmciSpecificProfileGroup = zhoneOnuOmciSpecificProfileGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuOmciSpecificProfileGroup.setDescription('GPON OMCI ONU Specific Profile group')
zhoneGponOmciOnuAlarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 19)).setObjects(("Zhone-GPON-MIB", "zhoneGponOmciOnuAlarmsText"), ("Zhone-GPON-MIB", "zhoneGponOmciStatsCurrentText"), ("Zhone-GPON-MIB", "zhoneGponOmciStatsPreviousText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOmciOnuAlarmsGroup = zhoneGponOmciOnuAlarmsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuAlarmsGroup.setDescription('GPON OMCI ONU Alarms group')
zhoneGponTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 20)).setObjects(("Zhone-GPON-MIB", "zhoneGponSerialNumberFound"), ("Zhone-GPON-MIB", "zhoneGponSerialNumberLost"), ("Zhone-GPON-MIB", "zhoneGponOnuLineStatusChange"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuAlarmsTrap"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuDownloadStatusChange"), ("Zhone-GPON-MIB", "zhoneGponOltOpticsAlarmsTrap"), ("Zhone-GPON-MIB", "zhoneGponOnuError"), ("Zhone-GPON-MIB", "zhoneGponRogueOnuTrap"), ("Zhone-GPON-MIB", "zhoneGponRssiRogueOnuTrap"), ("Zhone-GPON-MIB", "zhoneGponOltStatusWordTrap"), ("Zhone-GPON-MIB", "zhoneGponOnuAutoAssign"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponTrapGroup = zhoneGponTrapGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrapGroup.setDescription('Gpon Trap objects.')
zhoneGponTrafficProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 21)).setObjects(("Zhone-GPON-MIB", "zhoneGponTrafficProfileRowStatus"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileClass"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileDbaEnabled"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileExtraUsBwType"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileMaxUsBw"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileDbaAssuredUsBw"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileDbaFixedUsCbrBw"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileDbaFixedUsUbrBw"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileCompensated"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileGuaranteedUpstreamBw"), ("Zhone-GPON-MIB", "zhoneGponTrafficProfileShared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponTrafficProfileGroup = zhoneGponTrafficProfileGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponTrafficProfileGroup.setDescription('Gpon Traffic Profile objects.')
zhoneGponPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 22)).setObjects(("Zhone-GPON-MIB", "zhoneGponPortStatusAllocId"), ("Zhone-GPON-MIB", "zhoneGponPortStatusDbaStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponPortStatusGroup = zhoneGponPortStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponPortStatusGroup.setDescription('Gpon Port Status objects.')
zhoneGponOmciStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 24)).setObjects(("Zhone-GPON-MIB", "zhoneGponOmciStatusText"), ("Zhone-GPON-MIB", "zhoneGponOnuDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOmciStatusGroup = zhoneGponOmciStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciStatusGroup.setDescription('Gpon Omci Status objects.')
zhoneGponOmciOnuRebootGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 25)).setObjects(("Zhone-GPON-MIB", "zhoneGponOmciOnuReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOmciOnuRebootGroup = zhoneGponOmciOnuRebootGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuRebootGroup.setDescription('Gpon Omci Reboot objects.')
zhoneGponOmciOnuPortAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 26)).setObjects(("Zhone-GPON-MIB", "zhoneGponOmciOnuPortAdminState"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuPortAdminAutoDetect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOmciOnuPortAdminGroup = zhoneGponOmciOnuPortAdminGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuPortAdminGroup.setDescription('Gpon Port Admin objects.')
zhoneGponOmciOnuImageUpgradeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 27)).setObjects(("Zhone-GPON-MIB", "zhoneGponOmciOnuPortAdminState"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageUpgradeAction"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeFilename"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageUpgradePartition"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeImageVersionPartition0"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeImageVersionPartition1"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeIsCommittedPartition0"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeIsCommittedPartition1"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeIsActivatedPartition0"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeIsActivatedPartition1"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeIsValidPartition0"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeIsValidPartition1"), ("Zhone-GPON-MIB", "zhoneOnuOmciImageUpgradeDownloadStatus"), ("Zhone-GPON-MIB", "zhoneGponUpgradeModel"), ("Zhone-GPON-MIB", "zhoneGponUpgradeStartTime"), ("Zhone-GPON-MIB", "zhoneGponUpgradeIfIndex"), ("Zhone-GPON-MIB", "zhoneGponUpgradeByStateOnuState"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageUpgradeModel"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageUpgradeStartTime"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageUpgradeWillBeActivated"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageUpgradeWillBeCommitted"), ("Zhone-GPON-MIB", "zhoneGponUpgradeByStateWillBeActivated"), ("Zhone-GPON-MIB", "zhoneGponUpgradeByStateWillBeCommitted"), ("Zhone-GPON-MIB", "zhoneGponUpgradeProgressPercentage"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageDownloadProgressPercentage"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageUpgradeMethod"), ("Zhone-GPON-MIB", "zhoneGponUpgradeByStateMethod"), ("Zhone-GPON-MIB", "zhoneGponUpgradeByStatePartition"), ("Zhone-GPON-MIB", "zhoneGponOmciOnuImageUpgradeType"), ("Zhone-GPON-MIB", "zhoneGponUpgradeByStateUpgradeType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOmciOnuImageUpgradeGroup = zhoneGponOmciOnuImageUpgradeGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOmciOnuImageUpgradeGroup.setDescription('Group of ONU Image Upgrade objects')
zhoneGponOltStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 28)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltOpticTemperature"), ("Zhone-GPON-MIB", "zhoneGponOltOpticVoltage"), ("Zhone-GPON-MIB", "zhoneGponOltOpticTxBiasCurrent"), ("Zhone-GPON-MIB", "zhoneGponOltOpticTxPower"), ("Zhone-GPON-MIB", "zhoneGponOltOpticStatus"), ("Zhone-GPON-MIB", "zhoneGponOltOpticAlarms"), ("Zhone-GPON-MIB", "zhoneGponOltStatusWord"), ("Zhone-GPON-MIB", "zhoneGponOltConfiguredOnuCount"), ("Zhone-GPON-MIB", "zhoneGponOltActiveOnuCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOltStatusGroup = zhoneGponOltStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatusGroup.setDescription('GPON OLT Status Group.')
zhoneGponeOltDbaStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 29)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltDbaTotalAvailableBw"), ("Zhone-GPON-MIB", "zhoneGponOltDbaTotalAvailableCompensatedCbrBw"), ("Zhone-GPON-MIB", "zhoneGponOltDbaAllocatedUbrBw"), ("Zhone-GPON-MIB", "zhoneGponOltDbaAllocatedCbrBw"), ("Zhone-GPON-MIB", "zhoneGponOltDbaAllocatedCompensatedCbrBw"), ("Zhone-GPON-MIB", "zhoneGponOltDbaAllocatedAssuredBw"), ("Zhone-GPON-MIB", "zhoneGponOltDbaAllocatedNonAssuredBw"), ("Zhone-GPON-MIB", "zhoneGponOltDbaAllocatedBestEffortBw"), ("Zhone-GPON-MIB", "zhoneGponOltDbaMaxAllocIds"), ("Zhone-GPON-MIB", "zhoneGponOltDbaAvailAllocIds"), ("Zhone-GPON-MIB", "zhoneGponOltDbaUsedAllocIds"), ("Zhone-GPON-MIB", "zhoneGponOltDbaMaxDbaAllocIds"), ("Zhone-GPON-MIB", "zhoneGponOltDbaAvailDbaAllocIds"), ("Zhone-GPON-MIB", "zhoneGponOltDbaUsedDbaAllocIds"), ("Zhone-GPON-MIB", "zhoneGponOltDbaTotalOltGemPorts"), ("Zhone-GPON-MIB", "zhoneGponOltDbaLastCacRc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponeOltDbaStatusGroup = zhoneGponeOltDbaStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponeOltDbaStatusGroup.setDescription('GPON OLT Dba Status Group.')
zhoneGponCmdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 31)).setObjects(("Zhone-GPON-MIB", "zhoneGponCmdOperation"), ("Zhone-GPON-MIB", "zhoneGponCmdSlot"), ("Zhone-GPON-MIB", "zhoneGponCmdOlt"), ("Zhone-GPON-MIB", "zhoneGponCmdOnu"), ("Zhone-GPON-MIB", "zhoneGponCmdFilterMask"), ("Zhone-GPON-MIB", "zhoneGponCmdShelf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponCmdGroup = zhoneGponCmdGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponCmdGroup.setDescription('GPON Command objects')
zhoneGponOltStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 32)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamValidGemFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamDiscardedFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamGemFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamOmciFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamPloamFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamIdlePloamFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamValidGemFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamDiscardedFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamGemFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamOmciFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamPloamFrames"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamPonValidEthernetPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamPonCpuPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTxBytes"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamPonValidNotIdlePloams"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamPonErrorPloams"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamPonInvalidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamDroppedPktsInactivePorts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamDroppedPloamsFifoFull"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmCrcPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmDroppedCpuPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmMacLookupMiss"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmPktsForwardedFromHmToPon"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmPktsDroppedGemPidNotEnabled"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ0ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ0DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ1ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ1DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ2ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ2DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ3ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ3DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ4ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ4DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ5ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ5DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ6ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ6DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ7ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamTmQ7DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmDroppedCpuPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmDroppedPktsCrcError"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmDroppedPktsSecurity"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmLearnFailures"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ0ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ0DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ1ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ1DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ2ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ2DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ3ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ3DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ4ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ4DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ5ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ5DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ6ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ6DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ7ValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamTmQ7DroppedPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsUpstreamPonValidPkts"), ("Zhone-GPON-MIB", "zhoneGponOltStatisticsClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponOltStatisticsGroup = zhoneGponOltStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponOltStatisticsGroup.setDescription('Gpon OLT Statistics objects.')
zhoneGponUpstreamOntStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 33)).setObjects(("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsUpstreamBipErrors"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsFecCorrectedBytes"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsFecCorrectedCodewords"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsFecUncorrectedCodewords"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsTotalRxCodewords"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsUnreceivedBursts"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsBipErrors"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsRemoteBipErrors"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsDriftOfWindowIndications"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsMessageErrorMessage"), ("Zhone-GPON-MIB", "zhoneGponUpstreamOntStatisticsClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponUpstreamOntStatisticsGroup = zhoneGponUpstreamOntStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneGponUpstreamOntStatisticsGroup.setDescription('Gpon Upstream ONT Statistics objects.')
zhoneGponDeprecated = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 34)).setObjects(("Zhone-GPON-MIB", "zhoneGponOltStatisticsDownstreamIdlePloamFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneGponDeprecated = zhoneGponDeprecated.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneGponDeprecated.setDescription('Gpon Deprecated objects.')
mibBuilder.exportSymbols("Zhone-GPON-MIB", zhoneGponOltConfigBipErrorMonitoring=zhoneGponOltConfigBipErrorMonitoring, zhoneGponUpstreamOntStatisticsTable=zhoneGponUpstreamOntStatisticsTable, zhoneGponOmciOnuPortAdminTable=zhoneGponOmciOnuPortAdminTable, zhoneGponOmciStatsCurrentLogicalPort=zhoneGponOmciStatsCurrentLogicalPort, zhoneGponOltStatisticsDownstreamPonValidEthernetPkts=zhoneGponOltStatisticsDownstreamPonValidEthernetPkts, zhoneGponOmciOnuReboot=zhoneGponOmciOnuReboot, zhoneOnuOmciImageUpgradeIsActivatedPartition0=zhoneOnuOmciImageUpgradeIsActivatedPartition0, zhoneOnuOmciImageUpgradeIsCommittedPartition1=zhoneOnuOmciImageUpgradeIsCommittedPartition1, zhoneGponOltOpticVoltage=zhoneGponOltOpticVoltage, zhoneGponOltStatisticsUpstreamTmQ4ValidPkts=zhoneGponOltStatisticsUpstreamTmQ4ValidPkts, zhoneGponOmciOnuImageUpgradeType=zhoneGponOmciOnuImageUpgradeType, zhoneGponAllocIdRowStatus=zhoneGponAllocIdRowStatus, zhoneGponOltDbaAvailDbaAllocIds=zhoneGponOltDbaAvailDbaAllocIds, zhoneGponAllocIdIndex=zhoneGponAllocIdIndex, zhoneGponOltOnuConfigOnuAdded=zhoneGponOltOnuConfigOnuAdded, zhoneGponOltStatisticsUpstreamTmQ0ValidPkts=zhoneGponOltStatisticsUpstreamTmQ0ValidPkts, zhoneGponOltConfigDsBerInterval=zhoneGponOltConfigDsBerInterval, zhoneGponUpstreamOntStatisticsGroup=zhoneGponUpstreamOntStatisticsGroup, zhoneGponUpgradeByStateMethod=zhoneGponUpgradeByStateMethod, zhoneGponOltConfigMaxOnuResponseTime=zhoneGponOltConfigMaxOnuResponseTime, zhoneGponOltConfigLoamAlpha=zhoneGponOltConfigLoamAlpha, zhoneGponOmciOnuAlarmsTrap=zhoneGponOmciOnuAlarmsTrap, zhoneGponRssiRogueOnuTrap=zhoneGponRssiRogueOnuTrap, zhoneGponOltOnuConfigOmciFileName=zhoneGponOltOnuConfigOmciFileName, zhoneGponOltConfigDriftControlInterval=zhoneGponOltConfigDriftControlInterval, zhoneGponOmciOnuImageUpgradeWillBeActivated=zhoneGponOmciOnuImageUpgradeWillBeActivated, zhoneGponOltStatisticsUpstreamIdlePloamFrames=zhoneGponOltStatisticsUpstreamIdlePloamFrames, zhoneGponPortConfigMulticast=zhoneGponPortConfigMulticast, zhoneGponOltStatisticsUpstreamTmQ3ValidPkts=zhoneGponOltStatisticsUpstreamTmQ3ValidPkts, zhoneGponOltDbaAllocatedCbrBw=zhoneGponOltDbaAllocatedCbrBw, zhoneGponUpstreamOntStatisticsClearStats=zhoneGponUpstreamOntStatisticsClearStats, zhoneGponOltConfigLofAlpha=zhoneGponOltConfigLofAlpha, zhoneGponCmdOlt=zhoneGponCmdOlt, zhoneGponOltStatisticsDownstreamTmQ4ValidPkts=zhoneGponOltStatisticsDownstreamTmQ4ValidPkts, zhoneGponOltDbaUsedDbaAllocIds=zhoneGponOltDbaUsedDbaAllocIds, zhoneGponUpgradeByStateTable=zhoneGponUpgradeByStateTable, zhoneOnuOmciMEProfileFileName=zhoneOnuOmciMEProfileFileName, zhoneGponOltStatisticsDownstreamTmQ0DroppedPkts=zhoneGponOltStatisticsDownstreamTmQ0DroppedPkts, zhoneGponOltStatisticsDownstreamTmQ1ValidPkts=zhoneGponOltStatisticsDownstreamTmQ1ValidPkts, zhoneOnuOmciGenericProfileOmciCommands=zhoneOnuOmciGenericProfileOmciCommands, zhoneGponPortStatusEntry=zhoneGponPortStatusEntry, zhoneGponOltStatisticsDownstreamTmQ5DroppedPkts=zhoneGponOltStatisticsDownstreamTmQ5DroppedPkts, zhoneGponOltStatisticsDownstreamTmQ7ValidPkts=zhoneGponOltStatisticsDownstreamTmQ7ValidPkts, zhoneOnuOmciMEProfileOmciCommands=zhoneOnuOmciMEProfileOmciCommands, zhoneGponRogueOnuTrap=zhoneGponRogueOnuTrap, zhoneOnuOmciSpecificProfileOmciCommands=zhoneOnuOmciSpecificProfileOmciCommands, zhoneGponOmciStatsPreviousText=zhoneGponOmciStatsPreviousText, zhoneOnuOmciSpecificProfileGroup=zhoneOnuOmciSpecificProfileGroup, zhoneGponUpgradeByStatePartition=zhoneGponUpgradeByStatePartition, zhoneGponPortConfigRowPort=zhoneGponPortConfigRowPort, zhoneGponOmciStatusEntry=zhoneGponOmciStatusEntry, zhoneGponOltOnuConfigLinkStatusAlarmSeverity=zhoneGponOltOnuConfigLinkStatusAlarmSeverity, zhoneGponOnuStatusGroup=zhoneGponOnuStatusGroup, zhoneGponOntRxPower=zhoneGponOntRxPower, zhoneOnuOmciSpecificProfileFileName=zhoneOnuOmciSpecificProfileFileName, zhoneGponOltConfigSrDbaReportingBlockSize=zhoneGponOltConfigSrDbaReportingBlockSize, zhoneGponOltMIB=zhoneGponOltMIB, zhoneGponOltStatisticsUpstreamPonValidNotIdlePloams=zhoneGponOltStatisticsUpstreamPonValidNotIdlePloams, zhoneGponSerialNoOltLgIfIndex=zhoneGponSerialNoOltLgIfIndex, zhoneOnuOmciMEProfileRowStatus=zhoneOnuOmciMEProfileRowStatus, zhoneGponOmciOnuAlarmsGroup=zhoneGponOmciOnuAlarmsGroup, zhoneGponUpgradeByStateUpgradeType=zhoneGponUpgradeByStateUpgradeType, zhoneGponUpgradeModel=zhoneGponUpgradeModel, zhoneGponOltDbaTotalAvailableCompensatedCbrBw=zhoneGponOltDbaTotalAvailableCompensatedCbrBw, zhoneGponOltStatisticsUpstreamTmQ5DroppedPkts=zhoneGponOltStatisticsUpstreamTmQ5DroppedPkts, zhoneGponAllocIdTrafficClass=zhoneGponAllocIdTrafficClass, zhoneGponOltOnuConfigUsRxPowerHighThreshold=zhoneGponOltOnuConfigUsRxPowerHighThreshold, zhoneGponOltStatisticsTable=zhoneGponOltStatisticsTable, zhoneGponAllocIdCompensated=zhoneGponAllocIdCompensated, zhoneGponPortConfigTable=zhoneGponPortConfigTable, zhoneGponOltConfigScrambler=zhoneGponOltConfigScrambler, zhoneGponOltDbaAvailAllocIds=zhoneGponOltDbaAvailAllocIds, zhoneGponOltDbaAllocatedCompensatedCbrBw=zhoneGponOltDbaAllocatedCompensatedCbrBw, zhoneGponOltOnuConfigSnmpDataSync=zhoneGponOltOnuConfigSnmpDataSync, zhoneGponUpstreamOntStatisticsBipErrors=zhoneGponUpstreamOntStatisticsBipErrors, zhoneGponOltStatisticsUpstreamPonValidPkts=zhoneGponOltStatisticsUpstreamPonValidPkts, zhoneGponOltStatisticsDownstreamTmQ4DroppedPkts=zhoneGponOltStatisticsDownstreamTmQ4DroppedPkts, zhoneGponSerialNoVendorId=zhoneGponSerialNoVendorId, zhoneGponOnuStatusTable=zhoneGponOnuStatusTable, zhoneGponOltStatisticsUpstreamTmQ2ValidPkts=zhoneGponOltStatisticsUpstreamTmQ2ValidPkts, zhoneGponOltConfigDbaCycle=zhoneGponOltConfigDbaCycle, zhoneGponOltConfigPreambleType3PostRange=zhoneGponOltConfigPreambleType3PostRange, zhoneGponOnuLineStatusChange=zhoneGponOnuLineStatusChange, zhoneOnuOmciGenericProfileName=zhoneOnuOmciGenericProfileName, zhoneGponOltStatisticsUpstreamTmDroppedPktsSecurity=zhoneGponOltStatisticsUpstreamTmDroppedPktsSecurity, zhoneGponOltStatisticsUpstreamValidGemFrames=zhoneGponOltStatisticsUpstreamValidGemFrames, zhoneOnuOmciImageUpgradeDownloadStatus=zhoneOnuOmciImageUpgradeDownloadStatus, zhoneGponUpstreamOntStatisticsRemoteBipErrors=zhoneGponUpstreamOntStatisticsRemoteBipErrors, zhoneGponOmciOnuAlarmsTable=zhoneGponOmciOnuAlarmsTable, zhoneGponPortConfigTrafficProfile=zhoneGponPortConfigTrafficProfile, zhoneGponOltStatusTable=zhoneGponOltStatusTable, zhoneGponOltOnuConfigUsRxPowerLowThreshold=zhoneGponOltOnuConfigUsRxPowerLowThreshold, zhoneGponOltStatisticsDownstreamTxBytes=zhoneGponOltStatisticsDownstreamTxBytes, zhoneGponOltStatisticsUpstreamTmQ0DroppedPkts=zhoneGponOltStatisticsUpstreamTmQ0DroppedPkts, zhoneGponOltStatisticsUpstreamTmQ4DroppedPkts=zhoneGponOltStatisticsUpstreamTmQ4DroppedPkts, zhoneOnuOmciMEProfileEntry=zhoneOnuOmciMEProfileEntry, zhoneGponOnuStatusEntry=zhoneGponOnuStatusEntry, zhoneGponOltOnuConfigAutoLearn=zhoneGponOltOnuConfigAutoLearn, zhoneGponOltOnuConfigModel=zhoneGponOltOnuConfigModel, zhoneGponOltStatisticsUpstreamPonInvalidPkts=zhoneGponOltStatisticsUpstreamPonInvalidPkts, zhoneGponTrapGroup=zhoneGponTrapGroup, zhoneGponOltStatisticsUpstreamTmQ6ValidPkts=zhoneGponOltStatisticsUpstreamTmQ6ValidPkts, zhoneOnuOmciMEProfileName=zhoneOnuOmciMEProfileName, zhoneGponOltStatisticsDownstreamIdlePloamFrames=zhoneGponOltStatisticsDownstreamIdlePloamFrames, zhoneGponOltConfigRogueOnuDetection=zhoneGponOltConfigRogueOnuDetection, zhoneGponOltConfigGroup=zhoneGponOltConfigGroup, zhoneGponOltOnuConfigAutoConfigState=zhoneGponOltOnuConfigAutoConfigState, zhoneGponOltDbaAllocatedUbrBw=zhoneGponOltDbaAllocatedUbrBw, zhoneGponCmd=zhoneGponCmd, zhoneGponUpgradeIfIndex=zhoneGponUpgradeIfIndex, zhoneGponPortConfigRowOlt=zhoneGponPortConfigRowOlt, zhoneGponOltStatisticsDownstreamTmQ6DroppedPkts=zhoneGponOltStatisticsDownstreamTmQ6DroppedPkts, zhoneGponTrafficProfileDbaEnabled=zhoneGponTrafficProfileDbaEnabled, zhoneGponOltStatisticsDownstreamTmCrcPkts=zhoneGponOltStatisticsDownstreamTmCrcPkts, OnuUpgradeState=OnuUpgradeState, zhoneGponOntVersion=zhoneGponOntVersion, zhoneGponOltStatisticsUpstreamPloamFrames=zhoneGponOltStatisticsUpstreamPloamFrames, zhoneGponOltConfigRogueOnuRxPowerThreshold=zhoneGponOltConfigRogueOnuRxPowerThreshold, zhoneGponOltOnuConfigMEProfileName=zhoneGponOltOnuConfigMEProfileName, zhoneGponOltConfigPreambleType3PreRange=zhoneGponOltConfigPreambleType3PreRange, zhoneGponCmdSlot=zhoneGponCmdSlot, zhoneGponOltConfigAckTimeout=zhoneGponOltConfigAckTimeout, zhoneOnuOmciMEProfileIndex=zhoneOnuOmciMEProfileIndex, zhoneGponPortConfigRowTrafficProfile=zhoneGponPortConfigRowTrafficProfile, zhoneGponOltStatisticsDownstreamDiscardedFrames=zhoneGponOltStatisticsDownstreamDiscardedFrames, zhoneGponUpstreamOntStatisticsMessageErrorMessage=zhoneGponUpstreamOntStatisticsMessageErrorMessage, zhoneGponUpstreamOntStatisticsTotalRxCodewords=zhoneGponUpstreamOntStatisticsTotalRxCodewords, zhoneGponUpstreamOntStatisticsFecUncorrectedCodewords=zhoneGponUpstreamOntStatisticsFecUncorrectedCodewords, zhoneGponOltConfigBipErrorsPerSampleThreshold=zhoneGponOltConfigBipErrorsPerSampleThreshold, zhoneGponCmdGroup=zhoneGponCmdGroup, zhoneGponOltStatisticsDownstreamTmDroppedCpuPkts=zhoneGponOltStatisticsDownstreamTmDroppedCpuPkts, zhoneGponUpstreamOntStatisticsUnreceivedBursts=zhoneGponUpstreamOntStatisticsUnreceivedBursts, zhoneGponOltDbaMaxDbaAllocIds=zhoneGponOltDbaMaxDbaAllocIds, zhoneGponOltOnuConfigAutoUpgrade=zhoneGponOltOnuConfigAutoUpgrade, zhoneGponOltDbaLastCacRc=zhoneGponOltDbaLastCacRc, zhoneGponeOltDbaStatusGroup=zhoneGponeOltDbaStatusGroup, zhoneGponOnuAutoAssign=zhoneGponOnuAutoAssign, zhoneGponOnuOmciState=zhoneGponOnuOmciState, zhoneGponOltOnuConfigImageVersionActive=zhoneGponOltOnuConfigImageVersionActive, zhoneGponOltStatisticsDownstreamTmPktsForwardedFromHmToPon=zhoneGponOltStatisticsDownstreamTmPktsForwardedFromHmToPon, zhoneGponOltConfigPreambleType1=zhoneGponOltConfigPreambleType1, zhoneGponOltStatusEntry=zhoneGponOltStatusEntry, zhoneOnuOmciGenericProfileMESrcProfileName=zhoneOnuOmciGenericProfileMESrcProfileName, zhoneGponTraps=zhoneGponTraps, zhoneGponPortStatusGroup=zhoneGponPortStatusGroup, zhoneOnuOmciSpecificProfileEntry=zhoneOnuOmciSpecificProfileEntry, zhoneGponOmciOnuImageUpgradeMethod=zhoneGponOmciOnuImageUpgradeMethod, zhoneGponOltOnuConfigTable=zhoneGponOltOnuConfigTable, zhoneGponOltStatisticsUpstreamDiscardedFrames=zhoneGponOltStatisticsUpstreamDiscardedFrames, zhoneGponUpstreamOntStatisticsFecCorrectedBytes=zhoneGponUpstreamOntStatisticsFecCorrectedBytes, zhoneGponOltOnuConfigSerialNoVendorId=zhoneGponOltOnuConfigSerialNoVendorId, zhoneGponAllocIdTable=zhoneGponAllocIdTable, zhoneGponSerialNumberLost=zhoneGponSerialNumberLost, zhoneGponOltStatisticsUpstreamTmQ1ValidPkts=zhoneGponOltStatisticsUpstreamTmQ1ValidPkts, zhoneGponOltOnuConfigUseRegId=zhoneGponOltOnuConfigUseRegId, zhoneGponOmciOnuRebootTable=zhoneGponOmciOnuRebootTable, zhoneGponTrafficProfileGroup=zhoneGponTrafficProfileGroup, zhoneGponOltStatisticsUpstreamDroppedPloamsFifoFull=zhoneGponOltStatisticsUpstreamDroppedPloamsFifoFull, zhoneGponOmciStatsCurrentTable=zhoneGponOmciStatsCurrentTable, zhoneGponOltConfigTable=zhoneGponOltConfigTable, zhoneGponTrapPrefix=zhoneGponTrapPrefix, zhoneGponOmciOnuImageUpgradeGroup=zhoneGponOmciOnuImageUpgradeGroup, zhoneGponPortConfigRowSlot=zhoneGponPortConfigRowSlot, zhoneGponSerialNoEntry=zhoneGponSerialNoEntry, zhoneOnuOmciSpecificProfileRowStatus=zhoneOnuOmciSpecificProfileRowStatus, zhoneGponOltStatisticsUpstreamTmDroppedPktsCrcError=zhoneGponOltStatisticsUpstreamTmDroppedPktsCrcError, zhoneGponOmciStatusMEId=zhoneGponOmciStatusMEId, zhoneGponUpstreamOntStatisticsFecCorrectedCodewords=zhoneGponUpstreamOntStatisticsFecCorrectedCodewords, zhoneGponOltStatisticsUpstreamTmQ1DroppedPkts=zhoneGponOltStatisticsUpstreamTmQ1DroppedPkts, zhoneGponOmciOnuImageUpgradeAction=zhoneGponOmciOnuImageUpgradeAction, zhoneGponOltStatisticsDownstreamTmMacLookupMiss=zhoneGponOltStatisticsDownstreamTmMacLookupMiss, zhoneGponOltConfigBipErroredSamplesThreshold=zhoneGponOltConfigBipErroredSamplesThreshold, zhoneGponOmciOnuAlarmsText=zhoneGponOmciOnuAlarmsText, zhoneGponOltOnuConfigLineStatusTraps=zhoneGponOltOnuConfigLineStatusTraps, zhoneGponOltIfIndex=zhoneGponOltIfIndex, zhoneGponOltStatisticsDownstreamTmQ1DroppedPkts=zhoneGponOltStatisticsDownstreamTmQ1DroppedPkts, zhoneGponOltConfigMinUsAlloc=zhoneGponOltConfigMinUsAlloc, zhoneGponOmciOnuImageUpgradePartition=zhoneGponOmciOnuImageUpgradePartition, zhoneGponPortIfIndex=zhoneGponPortIfIndex, zhoneGponOltOnuConfigPhysicalTraps=zhoneGponOltOnuConfigPhysicalTraps, zhoneGponOltStatusWord=zhoneGponOltStatusWord, zhoneGponOltStatisticsDownstreamTmQ0ValidPkts=zhoneGponOltStatisticsDownstreamTmQ0ValidPkts, zhoneOnuOmciImageUpgradeIsCommittedPartition0=zhoneOnuOmciImageUpgradeIsCommittedPartition0, zhoneOnuOmciImageUpgradeIsValidPartition0=zhoneOnuOmciImageUpgradeIsValidPartition0, zhoneOnuOmciSpecificProfileMESrcProfileName=zhoneOnuOmciSpecificProfileMESrcProfileName, zhoneGponTrafficProfileExtraUsBwType=zhoneGponTrafficProfileExtraUsBwType, zhoneGponOltConfigEntry=zhoneGponOltConfigEntry, zhoneGponOltStatisticsUpstreamOmciFrames=zhoneGponOltStatisticsUpstreamOmciFrames, zhoneGponOltConfigMinOnuResponseTime=zhoneGponOltConfigMinOnuResponseTime, zhoneGponOmciOnuPortAdminEntry=zhoneGponOmciOnuPortAdminEntry, zhoneGponOltStatisticsUpstreamTmQ2DroppedPkts=zhoneGponOltStatisticsUpstreamTmQ2DroppedPkts, zhoneGponOmciStatusLogicalPort=zhoneGponOmciStatusLogicalPort, zhoneGponOltOpticTemperature=zhoneGponOltOpticTemperature, zhoneGponOltOpticAlarms=zhoneGponOltOpticAlarms, zhoneGponOmciOnuImageUpgradeModel=zhoneGponOmciOnuImageUpgradeModel, zhoneOnuOmciSpecificProfileTable=zhoneOnuOmciSpecificProfileTable, zhoneGponOmciOnuPortAdminAutoDetect=zhoneGponOmciOnuPortAdminAutoDetect, zhoneGponOltStatisticsUpstreamTmLearnFailures=zhoneGponOltStatisticsUpstreamTmLearnFailures, zhoneGponOltStatisticsDownstreamValidGemFrames=zhoneGponOltStatisticsDownstreamValidGemFrames, zhoneGponOmciStatusText=zhoneGponOmciStatusText, zhoneOnuOmciGenericProfileTable=zhoneOnuOmciGenericProfileTable, zhoneOnuOmciImageUpgradeImageVersionPartition0=zhoneOnuOmciImageUpgradeImageVersionPartition0, zhoneGponOltStatisticsDownstreamTmQ2DroppedPkts=zhoneGponOltStatisticsDownstreamTmQ2DroppedPkts, zhoneGponOltOnuConfigImageVersionStandby=zhoneGponOltOnuConfigImageVersionStandby, zhoneGponOltConfigBerSdThreshold=zhoneGponOltConfigBerSdThreshold, zhoneGponOltConfigKeyExchange=zhoneGponOltConfigKeyExchange, zhoneGponAllocIdOnuId=zhoneGponAllocIdOnuId, zhoneGponOltActiveOnuCount=zhoneGponOltActiveOnuCount, zhoneGponOltConfiguredOnuCount=zhoneGponOltConfiguredOnuCount, zhoneGponOltDbaStatusEntry=zhoneGponOltDbaStatusEntry, zhoneGponOltStatisticsDownstreamGemFrames=zhoneGponOltStatisticsDownstreamGemFrames, zhoneGponOltStatisticsClearStats=zhoneGponOltStatisticsClearStats, zhoneGponUpgradeByStateWillBeActivated=zhoneGponUpgradeByStateWillBeActivated, zhoneGponAllocIdEntry=zhoneGponAllocIdEntry, zhoneGponOltStatisticsDownstreamTmQ2ValidPkts=zhoneGponOltStatisticsDownstreamTmQ2ValidPkts, zhoneGponTrafficProfileCompensated=zhoneGponTrafficProfileCompensated, zhoneGponPortConfigGroup=zhoneGponPortConfigGroup, zhoneGponOmciOnuPortAdminMEId=zhoneGponOmciOnuPortAdminMEId, zhoneGponOltStatisticsDownstreamTmQ6ValidPkts=zhoneGponOltStatisticsDownstreamTmQ6ValidPkts, zhoneGponTrafficProfileClass=zhoneGponTrafficProfileClass, zhoneGponCmdOperation=zhoneGponCmdOperation, zhoneGponOltOnuConfigDsBerInterval=zhoneGponOltOnuConfigDsBerInterval, zhoneGponOltStatisticsUpstreamTmDroppedCpuPkts=zhoneGponOltStatisticsUpstreamTmDroppedCpuPkts, zhoneGponPortConfigDirection=zhoneGponPortConfigDirection, zhoneGponPortConfigEntry=zhoneGponPortConfigEntry, zhoneGponTrafficProfileDbaFixedUsUbrBw=zhoneGponTrafficProfileDbaFixedUsUbrBw, zhoneOnuOmciImageUpgradeImageVersionPartition1=zhoneOnuOmciImageUpgradeImageVersionPartition1, zhoneGponOmciOnuPortAdminLogicalPort=zhoneGponOmciOnuPortAdminLogicalPort, zhoneGponOltOnuConfigPowerLevel=zhoneGponOltOnuConfigPowerLevel, zhoneGponTrafficProfileMaxUsBw=zhoneGponTrafficProfileMaxUsBw, zhoneGponOltConfigGemBlockSize=zhoneGponOltConfigGemBlockSize, zhoneGponSerialNoTable=zhoneGponSerialNoTable, zhoneGponTrafficProfileEntry=zhoneGponTrafficProfileEntry, zhoneGponUpgradeOlt=zhoneGponUpgradeOlt, zhoneGponOltConfigPreambleOverride=zhoneGponOltConfigPreambleOverride, zhoneGponOltOnuConfigPassword=zhoneGponOltOnuConfigPassword, zhoneGponOltStatisticsDownstreamPloamFrames=zhoneGponOltStatisticsDownstreamPloamFrames, zhoneGponOltStatisticsUpstreamTmQ5ValidPkts=zhoneGponOltStatisticsUpstreamTmQ5ValidPkts, zhoneGponOltOnuConfigUsRxPowerMonitoring=zhoneGponOltOnuConfigUsRxPowerMonitoring, zhoneGponOltStatisticsGroup=zhoneGponOltStatisticsGroup, zhoneGponOltConfigBerSfThreshold=zhoneGponOltConfigBerSfThreshold, zhoneGponPortConfigRowStatus=zhoneGponPortConfigRowStatus, zhoneGponOltOpticTxBiasCurrent=zhoneGponOltOpticTxBiasCurrent, zhoneOnuOmciImageUpgradeIsActivatedPartition1=zhoneOnuOmciImageUpgradeIsActivatedPartition1, zhoneGponUpgradeByStateEntry=zhoneGponUpgradeByStateEntry, zhoneGponOltConfigMaxRtPropagationDelay=zhoneGponOltConfigMaxRtPropagationDelay, zhoneGponOnuError=zhoneGponOnuError, zhoneGponOltConfigPowerLevel=zhoneGponOltConfigPowerLevel, zhoneOnuOmciGenericProfileGroup=zhoneOnuOmciGenericProfileGroup, zhoneGponOltOnuConfigGenericProfileName=zhoneGponOltOnuConfigGenericProfileName, zhoneGponOmciStatsPreviousEntry=zhoneGponOmciStatsPreviousEntry, zhoneGponTrafficProfileGuaranteedUpstreamBw=zhoneGponTrafficProfileGuaranteedUpstreamBw, zhoneGponOltStatusWordTrap=zhoneGponOltStatusWordTrap, zhoneGponOltOpticsAlarmsTrap=zhoneGponOltOpticsAlarmsTrap)
mibBuilder.exportSymbols("Zhone-GPON-MIB", zhoneGponTrafficProfileDbaFixedUsCbrBw=zhoneGponTrafficProfileDbaFixedUsCbrBw, zhoneGponOmciStatsCurrentText=zhoneGponOmciStatsCurrentText, zhoneGponTrafficProfileShared=zhoneGponTrafficProfileShared, zhoneGponOltDbaUsedAllocIds=zhoneGponOltDbaUsedAllocIds, zhoneGponOltOnuConfigDbaStatusReporting=zhoneGponOltOnuConfigDbaStatusReporting, zhoneGponPortConfigRowOnuId=zhoneGponPortConfigRowOnuId, zhoneGponUpstreamOntStatisticsEntry=zhoneGponUpstreamOntStatisticsEntry, zhoneGponOmciStatusGroup=zhoneGponOmciStatusGroup, zhoneGponOltDbaAllocatedNonAssuredBw=zhoneGponOltDbaAllocatedNonAssuredBw, zhoneGponOltConfigPreassignedEqD=zhoneGponOltConfigPreassignedEqD, zhoneGponOltStatisticsDownstreamTmValidPkts=zhoneGponOltStatisticsDownstreamTmValidPkts, zhoneGponOltStatisticsDownstreamPonCpuPkts=zhoneGponOltStatisticsDownstreamPonCpuPkts, zhoneGponOmciOnuRebootGroup=zhoneGponOmciOnuRebootGroup, zhoneGponOltOnuConfigOntVersion=zhoneGponOltOnuConfigOntVersion, zhoneGponOnuStatusWord=zhoneGponOnuStatusWord, zhoneGponTrafficProfileDbaAssuredUsBw=zhoneGponTrafficProfileDbaAssuredUsBw, zhoneGponOltStatusGroup=zhoneGponOltStatusGroup, zhoneGponOltStatisticsUpstreamPonErrorPloams=zhoneGponOltStatisticsUpstreamPonErrorPloams, zhoneOnuOmciMEProfileTable=zhoneOnuOmciMEProfileTable, zhoneGponSerialNumberFound=zhoneGponSerialNumberFound, zhoneOnuOmciMeProfileGroup=zhoneOnuOmciMeProfileGroup, zhoneGponOltOpticStatus=zhoneGponOltOpticStatus, zhoneGponPortStatusAllocId=zhoneGponPortStatusAllocId, zhoneGponDeprecated=zhoneGponDeprecated, zhoneGponAllocIdGuaranteedBw=zhoneGponAllocIdGuaranteedBw, zhoneGponOltStatisticsDownstreamTmQ3DroppedPkts=zhoneGponOltStatisticsDownstreamTmQ3DroppedPkts, zhoneGponOltConfigLosAlpha=zhoneGponOltConfigLosAlpha, zhoneGponPortConfigRowShelf=zhoneGponPortConfigRowShelf, zhoneGponPortConfigEncrypted=zhoneGponPortConfigEncrypted, zhoneGponPortConfigTrafficManagementProfileIndex=zhoneGponPortConfigTrafficManagementProfileIndex, zhoneGponOltStatisticsDownstreamTmQ3ValidPkts=zhoneGponOltStatisticsDownstreamTmQ3ValidPkts, zhoneGponUpgradeByStateWillBeCommitted=zhoneGponUpgradeByStateWillBeCommitted, zhoneGponUpstreamOntStatisticsUpstreamBipErrors=zhoneGponUpstreamOntStatisticsUpstreamBipErrors, zhoneGponOltConfigAutoLearn=zhoneGponOltConfigAutoLearn, zhoneGponOmciOnuRebootEntry=zhoneGponOmciOnuRebootEntry, zhoneGponOmciStatsPreviousTable=zhoneGponOmciStatsPreviousTable, zhoneGponOmciOnuImageUpgradeStartTime=zhoneGponOmciOnuImageUpgradeStartTime, zhoneGponOltStatisticsUpstreamTmQ6DroppedPkts=zhoneGponOltStatisticsUpstreamTmQ6DroppedPkts, zhoneGponOltConfigProtectionSwitchoverTimer=zhoneGponOltConfigProtectionSwitchoverTimer, zhoneGponOltConfigRogueOnuDetectFrequency=zhoneGponOltConfigRogueOnuDetectFrequency, zhoneGponOltOnuConfigNextAvailableGemPort=zhoneGponOltOnuConfigNextAvailableGemPort, zhoneGponSerialNoGroup=zhoneGponSerialNoGroup, zhoneGponSerialNoTimeStamp=zhoneGponSerialNoTimeStamp, zhoneGponObjectID=zhoneGponObjectID, zhoneGponSerialNoIndexId=zhoneGponSerialNoIndexId, zhoneGponOmciOnuPortAdminState=zhoneGponOmciOnuPortAdminState, zhoneGponOmciStatusTable=zhoneGponOmciStatusTable, zhoneGponOltDbaStatusTable=zhoneGponOltDbaStatusTable, zhoneGponOltConfigAllocCycleLength=zhoneGponOltConfigAllocCycleLength, zhoneGponOltConfigFecMode=zhoneGponOltConfigFecMode, zhoneGponUpgradeStartTime=zhoneGponUpgradeStartTime, zhoneGponOltConfigBipMaxSampleGap=zhoneGponOltConfigBipMaxSampleGap, zhoneGponUpgradeProgressPercentage=zhoneGponUpgradeProgressPercentage, zhoneGponOmciOnuImageUpgradeTable=zhoneGponOmciOnuImageUpgradeTable, zhoneGponOltStatisticsUpstreamTmQ3DroppedPkts=zhoneGponOltStatisticsUpstreamTmQ3DroppedPkts, zhoneGponOmciOnuAlarmsEntry=zhoneGponOmciOnuAlarmsEntry, zhoneGponOltDbaTotalOltGemPorts=zhoneGponOltDbaTotalOltGemPorts, zhoneGponOltDbaAllocatedBestEffortBw=zhoneGponOltDbaAllocatedBestEffortBw, zhoneGponOmciOnuDownloadStatusChange=zhoneGponOmciOnuDownloadStatusChange, zhoneGponOltStatisticsUpstreamDroppedPktsInactivePorts=zhoneGponOltStatisticsUpstreamDroppedPktsInactivePorts, zhoneGponOmciStatsCurrentMEId=zhoneGponOmciStatsCurrentMEId, zhoneOnuOmciSpecificProfileIndex=zhoneOnuOmciSpecificProfileIndex, zhoneGponTrafficProfileRowStatus=zhoneGponTrafficProfileRowStatus, zhoneGponPortStatusTable=zhoneGponPortStatusTable, zhoneGponOmciOnuImageUpgradeWillBeCommitted=zhoneGponOmciOnuImageUpgradeWillBeCommitted, zhoneGponOltOpticTxPower=zhoneGponOltOpticTxPower, zhoneGponOltStatisticsDownstreamTmQ7DroppedPkts=zhoneGponOltStatisticsDownstreamTmQ7DroppedPkts, zhoneGponOltConfigEqDMeasureCycles=zhoneGponOltConfigEqDMeasureCycles, zhoneGponOltOnuConfigSerialNoVendorSpecificFsan=zhoneGponOltOnuConfigSerialNoVendorSpecificFsan, zhoneOnuOmciGenericProfileIndex=zhoneOnuOmciGenericProfileIndex, zhoneGponOnuDistance=zhoneGponOnuDistance, zhoneGponUpgradeByStateOnuState=zhoneGponUpgradeByStateOnuState, zhoneGponOltStatisticsDownstreamTmQ5ValidPkts=zhoneGponOltStatisticsDownstreamTmQ5ValidPkts, zhoneGponOmciOnuPortAdminGroup=zhoneGponOmciOnuPortAdminGroup, zhoneOnuOmciGenericProfileRowStatus=zhoneOnuOmciGenericProfileRowStatus, zhoneGponOmciStatsPreviousMEId=zhoneGponOmciStatsPreviousMEId, zhoneGponCmdOnu=zhoneGponCmdOnu, zhoneGponOltConfigFecRequest=zhoneGponOltConfigFecRequest, zhoneGponOltConfigUsBerInterval=zhoneGponOltConfigUsBerInterval, zhoneOnuOmciGenericProfileFileName=zhoneOnuOmciGenericProfileFileName, zhoneGponUpgradeOnu=zhoneGponUpgradeOnu, zhoneGponSerialNoVendorSpecific=zhoneGponSerialNoVendorSpecific, zhoneGponOltStatisticsUpstreamTmQ7DroppedPkts=zhoneGponOltStatisticsUpstreamTmQ7DroppedPkts, zhoneGponOltDbaAllocatedAssuredBw=zhoneGponOltDbaAllocatedAssuredBw, zhoneOnuOmciImageUpgradeFilename=zhoneOnuOmciImageUpgradeFilename, zhoneGponOmciStatsCurrentEntry=zhoneGponOmciStatsCurrentEntry, zhoneGponOnuOpticRssi=zhoneGponOnuOpticRssi, zhoneGponOltDbaMaxAllocIds=zhoneGponOltDbaMaxAllocIds, zhoneOnuOmciImageUpgradeIsValidPartition1=zhoneOnuOmciImageUpgradeIsValidPartition1, zhoneGponCmdShelf=zhoneGponCmdShelf, zhoneGponOltOnuConfigSerialNoVendorSpecific=zhoneGponOltOnuConfigSerialNoVendorSpecific, zhoneGponOltConfigDbaMode=zhoneGponOltConfigDbaMode, zhoneGponOltStatisticsDownstreamTmPktsDroppedGemPidNotEnabled=zhoneGponOltStatisticsDownstreamTmPktsDroppedGemPidNotEnabled, zhoneGponOltOnuConfigOmciDataSync=zhoneGponOltOnuConfigOmciDataSync, zhoneGponOltOnuConfigOntTraps=zhoneGponOltOnuConfigOntTraps, zhoneGponOmciOnuImageDownloadProgressPercentage=zhoneGponOmciOnuImageDownloadProgressPercentage, zhoneGponOltStatisticsUpstreamGemFrames=zhoneGponOltStatisticsUpstreamGemFrames, zhoneGponOltStatisticsEntry=zhoneGponOltStatisticsEntry, zhoneGponOltConfigPlsMaxAllocSize=zhoneGponOltConfigPlsMaxAllocSize, zhoneGponAllocIdGroup=zhoneGponAllocIdGroup, zhoneGponOltConfigPreambleType3Pattern=zhoneGponOltConfigPreambleType3Pattern, zhoneGponOmciStatsPreviousLogicalPort=zhoneGponOmciStatsPreviousLogicalPort, zhoneGponOltStatisticsUpstreamTmQ7ValidPkts=zhoneGponOltStatisticsUpstreamTmQ7ValidPkts, zhoneGponOltOnuIfIndex=zhoneGponOltOnuIfIndex, zhoneOnuOmciGenericProfileEntry=zhoneOnuOmciGenericProfileEntry, zhoneGponOltOnuConfigEntry=zhoneGponOltOnuConfigEntry, GponCacRc=GponCacRc, zhoneGponOltConfigGuardBitCount=zhoneGponOltConfigGuardBitCount, zhoneGponUpstreamOntStatisticsDriftOfWindowIndications=zhoneGponUpstreamOntStatisticsDriftOfWindowIndications, zhoneGponPortStatusDbaStatus=zhoneGponPortStatusDbaStatus, zhoneGponTrafficProfileTable=zhoneGponTrafficProfileTable, zhoneGponOnuConfigGroup=zhoneGponOnuConfigGroup, PYSNMP_MODULE_ID=zhoneGponOltMIB, zhoneGponOltConfigMinRtPropagationDelay=zhoneGponOltConfigMinRtPropagationDelay, zhoneGponOltStatisticsDownstreamOmciFrames=zhoneGponOltStatisticsDownstreamOmciFrames, zhoneGponOltDbaTotalAvailableBw=zhoneGponOltDbaTotalAvailableBw, zhoneGponTrafficProfileIndex=zhoneGponTrafficProfileIndex, zhoneGponOltOnuConfigUsBerInterval=zhoneGponOltOnuConfigUsBerInterval, zhoneGponOmciOnuImageUpgradeEntry=zhoneGponOmciOnuImageUpgradeEntry, zhoneGponOltConfigDriftControlLimit=zhoneGponOltConfigDriftControlLimit, zhoneGponOltConfigPreambleType0=zhoneGponOltConfigPreambleType0, zhoneGponCmdFilterMask=zhoneGponCmdFilterMask)
