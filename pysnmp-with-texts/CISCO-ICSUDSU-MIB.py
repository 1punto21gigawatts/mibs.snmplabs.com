#
# PySNMP MIB module CISCO-ICSUDSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ICSUDSU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
dsx1ConfigEntry, = mibBuilder.importSymbols("RFC1406-MIB", "dsx1ConfigEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, ObjectIdentity, Unsigned32, ModuleIdentity, TimeTicks, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, iso, Counter64, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "iso", "Counter64", "Bits", "Integer32")
DisplayString, TextualConvention, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "TimeStamp")
ciscoICsuDsuMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 44))
if mibBuilder.loadTexts: ciscoICsuDsuMIB.setLastUpdated('9601210000Z')
if mibBuilder.loadTexts: ciscoICsuDsuMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoICsuDsuMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoICsuDsuMIB.setDescription('Integrated CSU/DSU MIB module. For T1 and Switched 56 kbps interfaces.')
ciscoICsuDsuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 1))
ciscoICsuDsuGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1))
ciscoICsuDsuT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2))
ciscoICsuDsuSw56k = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3))
ciscoICsuDsuStaticConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 1), )
if mibBuilder.loadTexts: ciscoICsuDsuStaticConfigTable.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuStaticConfigTable.setDescription('The CSU/DSU Static Configuration Table. Contains items that are statically configured and can not be changed by end user without physically changing the CSU/DSU.')
ciscoICsuDsuStaticConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ciscoICsuDsuStaticConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuStaticConfigEntry.setDescription('An entry in the static configuration table for each integrated CSU/DSU.')
ciscoICsuDsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fractionalT1", 1), ("twoWireSwitched56k", 2), ("fourWireSwitched56k", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuType.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuType.setDescription('Specifies the type of line interface or CSU/DSU.')
ciscoICsuDsuHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuHwRevision.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuHwRevision.setDescription('The CSU/DSU hardware revision.')
ciscoICsuDsuSwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSwRevision.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSwRevision.setDescription('The CSU/DSU software revision.')
ciscoICsuDsuProtocolRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuProtocolRevision.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuProtocolRevision.setDescription('The Protocol Revision of the CSU/DSU.')
ciscoICsuDsuTestReportTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2), )
if mibBuilder.loadTexts: ciscoICsuDsuTestReportTable.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuTestReportTable.setDescription('The CSU/DSU test report Table. Contains the results of user initiated tests, including selftest, reset, and loopback.')
ciscoICsuDsuTestReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ciscoICsuDsuTestReportEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuTestReportEntry.setDescription('An entry in the test report table for each integrated CSU/DSU.')
ciscoICsuDsuLastSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuLastSelfTestResult.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuLastSelfTestResult.setDescription('The result of the last self test. Represented as a sum of a bit map. The variable bit positions are: 1 - Flash Checksum bad. Catastrophic error. 2 - EPROM Checksum bad. Catastrophic error. 4 - RAM Tests failed. Catastrophic error. 8 - ROM Checksum bad. Catastrophic error. 16 - DteLoss. Could not put DTE into loopback. NonCatastrophic error. 32 - patternLossDuringTest. Put DTE into loopback but found BERT errors. NonCatastrophic error.')
ciscoICsuDsuTimeOfLastSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuTimeOfLastSelfTest.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuTimeOfLastSelfTest.setDescription('SysUpTime of LastSelfTest execution.')
ciscoICsuDsuNumResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuNumResets.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuNumResets.setDescription('Number of times CSU/DSU has been reset.')
ciscoICsuDsuTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuTimeOfLastReset.setDescription('SysUpTime of last CSU/DSU reset.')
ciscoICsuDsuLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("completed", 1), ("inProgress", 2), ("neverPerformed", 3), ("failed", 4), ("noSyncWithTestPattern", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackStatus.setDescription("Current Status of Loopback. Remaining Loopback results are valid only if status is 'completed' or 'failed' or 'noSyncWithTestPattern'.")
ciscoICsuDsuLoopbackNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackNumErrors.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackNumErrors.setDescription('Number of Bit errors that occurred in last successful loopback test. Valid only if remote loopback with pattern was performed and a sync was achieved on the test pattern.')
ciscoICsuDsuLoopbackDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackDuration.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackDuration.setDescription('Duration of last successful loopback test in hundredths of seconds. Note that it is possible for the CSU/DSU to lose framing during the test. If so, the duration represents the time between reframing and end of test. This simply means that the start time of last loopback cannot be calculated by subtracting this duration from the end time of last loopback.')
ciscoICsuDsuLoopbackPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dtePayload", 1), ("dteFull", 2), ("lineFull", 3), ("linePayload", 4), ("remoteSmartJack", 5), ("remoteFull", 6), ("remotePayload", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackPoint.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackPoint.setDescription("Point in network where last loopback was performed. Meaning for t1 CSU/DSU: dtePayload - local DSU loopback. The configured 'fractions' of the DS1 signal is looped back as the receive signal. Used to verify operation of DSU portion of local CSU/DSU. dteFull - local CSU loopback. DS1 transmit signal is looped back as the receive signal. Runs at full bandwidth irrespective of fractions configured. Used to verify operation of local CSU/DSU. lineFull - DS1 signal received from the network is transmitted back to the network. Signal is regenerated but not reframed. Loopback performed at the CSU. Used to verify operation of T1 network. linePayload - DS1 signal received from the network is transmitted back to the network. Data is regenerated and reframed with any LCV or CRC errors corrected. Loopback performed at the DSU. Used to verify operation of local CSU/DSU and T1 network. remoteSmartJack - the remote smart jack (telco installed wall socket device used to delineate network between CPE and telco equipment) is used to loopback the DS1 signal. Similar to remoteFull loopback except that the signal is looped at the smart jack before reaching remote CSU/DSU. Used to verify operation of local CSU/DSU and T1 network. remoteFull - remote unit placed in lineFull loopback. Used to verify operation of local CSU/DSU and T1 network. remotePayload - remote unit placed in linePayload loopback Used to verify operation of local CSU/DSU, T1 network, and remote CSU/DSU. Meaning for switched 56k CSU/DSU: dteFull - local CSU loopback. Transmit signal is looped back as the receive signal at a point close to the physical network interface. Used to verify operation of local CSU/DSU. lineFull - CSU/DSU is split into separate DTE and loop interface sections. Signal received from the network is transmitted back to the network. Data received from DTE is transmitted back to DTE. Used to verify operation of local CSU/DSU and network from remote site. linePayload - Signal received from the network is looped back at the DTE interface and transmitted back to the network. Data received from DTE is ignored. Used to verify operation of local CSU/DSU and network from remote site. remotePayload - Similar to linePayload except that the remote unit is placed into loopback. Used to verify operation of local CSU/DSU, T1 network, and remote CSU/DSU. ")
ciscoICsuDsuLoopbackPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noPattern", 1), ("patternQRW", 2), ("pattern0In1", 3), ("pattern1In1", 4), ("pattern1In2", 5), ("pattern1In3", 6), ("pattern1In5", 7), ("pattern1In8", 8), ("pattern3In24", 9), ("patternUser", 10), ("pattern2047", 11), ("pattern511", 12), ("patternStressDDS1", 13), ("patternStressDDS2", 14), ("patternStressDDS3", 15), ("patternStressDDS4", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackPattern.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackPattern.setDescription("Test pattern used for locally initiated remote loopback. Valid only if a remote loopback was last performed. Following patterns valid for T1 or Switched 56k CSU/DSU: noPattern - no specific pattern is used, data provided by the DTE. Used to loopback transmit data. Following patterns only valid for T1 CSU/DSU: patternQRW - Quasi-Random Word pattern. Specifically used to measure Bit Error Rates. pattern0In1 - repeated binary pattern of '0' or all zeros. Typically used for verification of B8ZS optioning of the T1 facility. pattern1In1 - repeated binary pattern of '1' or all ones. Typically used for signal power measurements. pattern1In2 - repeated binary pattern of '01'. Typically used in testing for bridge taps. pattern1In3 - repeated binary pattern of '001'. Typically used to terminate a remote loopback. pattern1In5 - repeated binary pattern of '00001'. Typically used to put the remote unit in loopback. pattern1In8 - repeated binary pattern of '00000001'. Typically used to stress the timing recovery circuits of repeaters and other intermediate equipment. pattern3In24 - repeated binary pattern of '000000000000000000000111' or hex '000007'. Typically used to test for one's density (consecutive zeros) tolerance on AMI lines. patternUser - user defined pattern. Following patterns only valid for Switched 56k CSU/DSU: pattern2047 - 2047 bit long pseudorandom pattern containing a maximum of 10 sequential zeros and 11 sequential ones. pattern511 - 511 bit long pseudorandom pattern containing a maximum of 8 sequential zeros and 9 sequential ones. patternStressDDS1 - DDS Stress test pattern #1. patternStressDDS2 - DDS Stress test pattern #2. patternStressDDS3 - DDS Stress test pattern #3. patternStressDDS4 - DDS Stress test pattern #4.")
ciscoICsuDsuUserDefinedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuUserDefinedPattern.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuUserDefinedPattern.setDescription('User Defined Loopback Pattern. Valid only if ciscoICsuDsuLoopbackPattern is patternUser.')
ciscoICsuDsuLoopbackCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("alternate", 2), ("v54", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackCode.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuLoopbackCode.setDescription("LoopCode used to initiate last remote loopback. Valid only if a only if a remote loopback was last performed. standard - standard loopback code. Usually consists of the repeated binary pattern of '00001' alternate - alternate loopback code. Usually the inverse of the standard pattern or '11110'. v54 - V.54 pattern. Used for fractional loopback.")
ciscoICsuDsuEndTimeOfLastLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 1, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuEndTimeOfLastLoopback.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuEndTimeOfLastLoopback.setDescription('SysUpTime of completion of last loopback test execution.')
ciscoICsuDsuT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 1), )
if mibBuilder.loadTexts: ciscoICsuDsuT1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1ConfigTable.setDescription('The T1 CSU/DSU Unit Configuration Table. Contains current T1 CSU/DSU configuration parameters not covered by RFC1406.')
ciscoICsuDsuT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 1, 1), )
dsx1ConfigEntry.registerAugmentions(("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1ConfigEntry"))
ciscoICsuDsuT1ConfigEntry.setIndexNames(*dsx1ConfigEntry.getIndexNames())
if mibBuilder.loadTexts: ciscoICsuDsuT1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1ConfigEntry.setDescription('An entry in the configuration table for each integrated T1 CSU/DSU.')
ciscoICsuDsuT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("buildOut0", 1), ("buildOut7p5", 2), ("buildOut15", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1LineBuildOut.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1LineBuildOut.setDescription('Line build out (LBO) is loss inserted by the CSU in order to meet the 15 to 22.5 dB loss requirement of the premises remote-end section. Selected so that (phone company loss) + (cable length loss) + (line build out) is greater that 15dB but less than 22.5 dB. buildOut0 means insert 0 dB. buildOut7p5 means insert 7.5 dB. buildOut15 means insert 15 dB.')
ciscoICsuDsuT1DteLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1DteLineCode.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1DteLineCode.setDescription('Indicates whether the DTE line code is inverted or not. When fractional timeslots are configured for 64kps and AMI linecode, a combination of inverting the DTE line code along with the proper line protocol (i.e. HDLC/SDLC) may be necessary to meet the ones density constraint.')
ciscoICsuDsuT1SupportRemoteAlarmIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1SupportRemoteAlarmIndication.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1SupportRemoteAlarmIndication.setDescription('Determines if unit will generate or detect a remote alarm indication (RAI) signal which is also known as a yellow alarm. In D4 framing format, DTE equipment (including Frame Relay equipment) that is using the HDLC or SDLC protocol may generate patterns as part of its normal traffic. These patterns may be interpreted as yellow alarms and disrupt data traffic.')
ciscoICsuDsuT1FullBandwidthRemoteLoopcode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("alternate", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1FullBandwidthRemoteLoopcode.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1FullBandwidthRemoteLoopcode.setDescription("LoopCode to be accepted from remote end to place unit in and out of full bandwidth loopback. standard - standard loopback code. Usually consists of the repeated binary pattern of '00001' alternate - alternate loopback code. Usually the inverse of the standard pattern or '11110'. disabled - No code is accepted, disabling an request for remote loopback.")
ciscoICsuDsuT1PayloadRemoteLoopcode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("alternate", 2), ("disabled", 3), ("v54", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1PayloadRemoteLoopcode.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1PayloadRemoteLoopcode.setDescription("LoopCode to be accepted from remote end to place unit in and out of payload or fractional loopback. standard - standard loopback code. Usually consists of the repeated binary pattern of '00001' alternate - alternate loopback code. Usually the inverse of the standard pattern or '11110'. disabled - No code is accepted, disabling an request for remote loopback. v54 - V.54 pattern. Used for fractional loopback.")
ciscoICsuDsuT1StatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 2), )
if mibBuilder.loadTexts: ciscoICsuDsuT1StatusTable.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1StatusTable.setDescription('The T1 CSU/DSU Unit Status Table. Contains information about the status of the CSU/DSU, including externally generated alarm conditions.')
ciscoICsuDsuT1StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ciscoICsuDsuT1StatusEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1StatusEntry.setDescription('An entry in the status table for each integrated T1 CSU/DSU.')
ciscoICsuDsuT1LoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1LoopStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1LoopStatus.setDescription("Current Loop status of T1 CSU/DSU. Represented as a sum of a bit map. The variable bit positions are: 1 - lossofSignal (LOS); unable to detect the DS1 signal. 2 - lossofFrame (LOF); unable to synchronize on the DS1 signal. 4 - detectedRemoteAlarmIndication (RAI); indicates that the transmitting equipment has lost its incoming signal. RAI is commonly called yellow alarm. 8 - detectedAlarmIndicationSignal (AIS); indicates that there is a transmission interruption located either at the equipment originating the AIS signal or upstream of that equipment. Indicated by an unframed, all-'ones' signal. Also known as blue alarm. 16 - placedInLoopback; Line placed in loopback from remote.")
ciscoICsuDsuT1LossOfSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1LossOfSignals.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1LossOfSignals.setDescription('Number of times lossofSignal event detected.')
ciscoICsuDsuT1LossOfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1LossOfFrames.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1LossOfFrames.setDescription('Number of times lossofFrame event detected.')
ciscoICsuDsuT1RemoteAlarmIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1RemoteAlarmIndications.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1RemoteAlarmIndications.setDescription('Number of times RemoteAlarmIndication signal or yellow alarm received.')
ciscoICsuDsuT1AlarmIndicationSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuT1AlarmIndicationSignals.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1AlarmIndicationSignals.setDescription('Number of times Alarm Indication Signal or blue alarm received.')
ciscoICsuDsuSw56kConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoICsuDsuSw56kConfigTable.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kConfigTable.setDescription('The Switched 56k CSU/DSU Configuration Table. Contains current Sw56k CSU/DSU configuration parameters.')
ciscoICsuDsuSw56kConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ciscoICsuDsuSw56kConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kConfigEntry.setDescription('An entry in the sw56k configuration table for each integrated switched 56 kbps CSU/DSU.')
ciscoICsuDsuSw56kNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dds", 1), ("att", 2), ("sprint", 3), ("otherCarrier", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kNetworkType.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kNetworkType.setDescription("Configures the DSU Module for the specific type of network being used. dds - AT&T's Dataphone Digital Service, generically known as Digital Data System. Requires 4-Wire interface. att - AT&T's Switched 56 Network. Operates over 2-Wire or or 4-Wire interface. sprint - Sprint Switched 56 Network. Operates over 2-Wire or 4-Wire interface. otherCarrier - Other carrier being used.")
ciscoICsuDsuSw56kClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kClockSource.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kClockSource.setDescription("Specifies the timing source for the DSU. 'internal' indicates timing provided by DSU. 'line' indicates timing provided by network receive signal.")
ciscoICsuDsuSw56kLoopRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps9600", 3), ("bps19k", 4), ("bps38k", 5), ("bps56k", 6), ("bps64k", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLoopRate.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLoopRate.setDescription("The Loop Rate option selects the network loop operating speed. Only 'ciscoICsuDsuSw56kNetworkType' of 'dds' supports all listed loop rates. 'att' and 'sprint' network types only support 'bps56k' or 56 kilobits per second.")
ciscoICsuDsuSw56kScramblerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kScramblerEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kScramblerEnabled.setDescription('Indicates if line code scrambling is enabled. Scrambling is used to prevent DTE data sequences that minic network loop maintenance functions from activating loopback. Only supported when operating in DDS mode at 64kbps (also known as clear channel mode).')
ciscoICsuDsuSw56kRemoteLoopbackEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kRemoteLoopbackEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kRemoteLoopbackEnabled.setDescription('Indicates if a request for Remote Digital Loopback is will be accepted.')
ciscoICsuDsuSw56kLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2), )
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLineStatusTable.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLineStatusTable.setDescription('The Sw56k CSU/DSU Status Table. Contains information about the status of the CSU/DSU, including externally generated alarm conditions.')
ciscoICsuDsuSw56kLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLineStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLineStatusEntry.setDescription('An entry in the sw56k status table for each integrated switched 56 kbps CSU/DSU.')
ciscoICsuDsuSw56kDialingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("dialing", 2), ("online", 3), ("noWinkFromSwitch", 4), ("numberBusy", 5), ("noAnswer", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kDialingStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kDialingStatus.setDescription('This variable indicates the dialing status of units using switched connections. idle - on-hook and no call in progress. dialing - dialing a number. onLine - Online passing data. noWinkFromSwitch - No wink from switch (cleared after 5 seconds). Wink is a DC signalling method in which the polarity of the line is temporarily reversed and then returned to its original polarity as an acknowledgement. numberBusy - Number is busy (cleared after 5 seconds). noAnswer - No answer. (cleared after 5 seconds).')
ciscoICsuDsuSw56kLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLoopStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLoopStatus.setDescription("Current loop status or alarm condition. Represented as a sum of a bit map. The variable bit positions are: 1 oosOofFromNetwork - The DSU is receiving Out of Service/ Out of Frame code from network indicating network trouble. This can be a problem with a device at the remote DSU. The most common cause of the this error is either the remote DSU is powered off or the remote telco connection is open. 2 noReceiveSignal - The DSU has detected sealing current from the central office but the receive level is below -45db. 4 noSealingCurrent - the DSU does not detect sealing current on the loop interface. This is normal for a private network. 8 noFrameSync - At 64k data rate the local loop operates at 72k with a framing pattern added to maintain byte alignment with the network. This condition is reported if the DSU cannot find the framing pattern. 16 attemptingToRateAdap - Set in 'autorate' mode when the DSU is searching for the loop rate. 32 rtTestFromTelco - Set when the DSU in telco initiated RT test. 64 llTestFromTelco - Set when the DSU in telco initiated LL test or when the transmit and receive pairs are reversed. 128 rdlFromRemoteDSU - Set when remote digital loopback initiated from remote DSU.")
ciscoICsuDsuSw56kReceivedOosOofs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kReceivedOosOofs.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kReceivedOosOofs.setDescription('Number of times OOS/OOF (Out Of Sync / Out Of Frame) code received.')
ciscoICsuDsuSw56kLostSealingCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLostSealingCurrents.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLostSealingCurrents.setDescription('Number of times Lost Sealing Current.')
ciscoICsuDsuSw56kLostReceiveSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLostReceiveSignals.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLostReceiveSignals.setDescription('Number of times lost receive signal.')
ciscoICsuDsuSw56kLostFrameSyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLostFrameSyncs.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLostFrameSyncs.setDescription('Number of times lost frame synchronization.')
ciscoICsuDsuSw56kLoopRateSearches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 44, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLoopRateSearches.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLoopRateSearches.setDescription('Number of times attempted Loop Rate Search.')
ciscoICsuDsuMIBNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 2))
ciscoICsuDsuEnableT1LoopStatusNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 44, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoICsuDsuEnableT1LoopStatusNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuEnableT1LoopStatusNotification.setDescription('Indicates whether or not a T1 Alarm Notification will be generated by this system.')
ciscoICsuDsuEnableSw56kLoopStatusNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 44, 2, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoICsuDsuEnableSw56kLoopStatusNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuEnableSw56kLoopStatusNotification.setDescription('Indicates whether or not a Sw56k Alarm Notification will be generated by this system.')
ciscoICsuDsuMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 3))
ciscoICsuDsuMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 3, 0))
ciscoICsuDsuT1LoopStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 44, 3, 0, 1)).setObjects(("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1LoopStatus"))
if mibBuilder.loadTexts: ciscoICsuDsuT1LoopStatusNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuT1LoopStatusNotification.setDescription('Indicates a change in T1 Loop Status.')
ciscoICsuDsuSw56kLoopStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 44, 3, 0, 2)).setObjects(("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kLoopStatus"))
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLoopStatusNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuSw56kLoopStatusNotification.setDescription('Indicates a change in Sw56k Loop Status.')
ciscoICsuDsuMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 4))
ciscoICsuDsuMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 4, 1))
ciscoICsuDsuMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 44, 4, 2))
ciscoICsuDsuMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 44, 4, 1, 1)).setObjects(("CISCO-ICSUDSU-MIB", "ciscoICsuDsuMIBGroup"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuMIBT1Group"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuMIBSw56kGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoICsuDsuMIBCompliance = ciscoICsuDsuMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Integrated CSU/DSU MIB')
ciscoICsuDsuMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 44, 4, 2, 1)).setObjects(("CISCO-ICSUDSU-MIB", "ciscoICsuDsuType"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuHwRevision"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSwRevision"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuProtocolRevision"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuLastSelfTestResult"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuTimeOfLastSelfTest"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuNumResets"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuTimeOfLastReset"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuLoopbackStatus"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuLoopbackNumErrors"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuLoopbackDuration"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuLoopbackPoint"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuLoopbackPattern"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuUserDefinedPattern"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuLoopbackCode"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuEndTimeOfLastLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoICsuDsuMIBGroup = ciscoICsuDsuMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuMIBGroup.setDescription('The collection of objects providing general information about the integrated CSU/DSU.')
ciscoICsuDsuMIBT1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 44, 4, 2, 2)).setObjects(("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1LineBuildOut"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1DteLineCode"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1SupportRemoteAlarmIndication"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1FullBandwidthRemoteLoopcode"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1PayloadRemoteLoopcode"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1LoopStatus"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1LossOfSignals"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1LossOfFrames"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1RemoteAlarmIndications"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuT1AlarmIndicationSignals"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuEnableT1LoopStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoICsuDsuMIBT1Group = ciscoICsuDsuMIBT1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuMIBT1Group.setDescription('The collection of objects providing information specific to integrated T1 CSU/DSU.')
ciscoICsuDsuMIBSw56kGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 44, 4, 2, 3)).setObjects(("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kNetworkType"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kClockSource"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kLoopRate"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kScramblerEnabled"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kRemoteLoopbackEnabled"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kDialingStatus"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kLoopStatus"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kReceivedOosOofs"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kLostSealingCurrents"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kLostReceiveSignals"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kLostFrameSyncs"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuSw56kLoopRateSearches"), ("CISCO-ICSUDSU-MIB", "ciscoICsuDsuEnableSw56kLoopStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoICsuDsuMIBSw56kGroup = ciscoICsuDsuMIBSw56kGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoICsuDsuMIBSw56kGroup.setDescription('The collection of objects providing information specific to integrated Switched 56k CSU/DSU.')
mibBuilder.exportSymbols("CISCO-ICSUDSU-MIB", ciscoICsuDsuEnableT1LoopStatusNotification=ciscoICsuDsuEnableT1LoopStatusNotification, ciscoICsuDsuMIBCompliance=ciscoICsuDsuMIBCompliance, ciscoICsuDsuT1=ciscoICsuDsuT1, ciscoICsuDsuLoopbackDuration=ciscoICsuDsuLoopbackDuration, ciscoICsuDsuMIBGroups=ciscoICsuDsuMIBGroups, ciscoICsuDsuStaticConfigTable=ciscoICsuDsuStaticConfigTable, ciscoICsuDsuSw56kLoopRateSearches=ciscoICsuDsuSw56kLoopRateSearches, ciscoICsuDsuMIBGroup=ciscoICsuDsuMIBGroup, ciscoICsuDsuSw56kLoopStatus=ciscoICsuDsuSw56kLoopStatus, ciscoICsuDsuT1PayloadRemoteLoopcode=ciscoICsuDsuT1PayloadRemoteLoopcode, ciscoICsuDsuSw56k=ciscoICsuDsuSw56k, ciscoICsuDsuTestReportTable=ciscoICsuDsuTestReportTable, ciscoICsuDsuLoopbackNumErrors=ciscoICsuDsuLoopbackNumErrors, ciscoICsuDsuMIBConformance=ciscoICsuDsuMIBConformance, ciscoICsuDsuT1LossOfFrames=ciscoICsuDsuT1LossOfFrames, ciscoICsuDsuSw56kLineStatusEntry=ciscoICsuDsuSw56kLineStatusEntry, ciscoICsuDsuSw56kLoopRate=ciscoICsuDsuSw56kLoopRate, ciscoICsuDsuTestReportEntry=ciscoICsuDsuTestReportEntry, ciscoICsuDsuEnableSw56kLoopStatusNotification=ciscoICsuDsuEnableSw56kLoopStatusNotification, ciscoICsuDsuEndTimeOfLastLoopback=ciscoICsuDsuEndTimeOfLastLoopback, ciscoICsuDsuMIBNotificationPrefix=ciscoICsuDsuMIBNotificationPrefix, ciscoICsuDsuT1StatusEntry=ciscoICsuDsuT1StatusEntry, ciscoICsuDsuLoopbackPoint=ciscoICsuDsuLoopbackPoint, ciscoICsuDsuSw56kClockSource=ciscoICsuDsuSw56kClockSource, ciscoICsuDsuSw56kLoopStatusNotification=ciscoICsuDsuSw56kLoopStatusNotification, ciscoICsuDsuMIBNotifications=ciscoICsuDsuMIBNotifications, ciscoICsuDsuT1SupportRemoteAlarmIndication=ciscoICsuDsuT1SupportRemoteAlarmIndication, ciscoICsuDsuProtocolRevision=ciscoICsuDsuProtocolRevision, ciscoICsuDsuLoopbackStatus=ciscoICsuDsuLoopbackStatus, ciscoICsuDsuGeneral=ciscoICsuDsuGeneral, ciscoICsuDsuType=ciscoICsuDsuType, ciscoICsuDsuSwRevision=ciscoICsuDsuSwRevision, ciscoICsuDsuSw56kLineStatusTable=ciscoICsuDsuSw56kLineStatusTable, PYSNMP_MODULE_ID=ciscoICsuDsuMIB, ciscoICsuDsuT1RemoteAlarmIndications=ciscoICsuDsuT1RemoteAlarmIndications, ciscoICsuDsuT1FullBandwidthRemoteLoopcode=ciscoICsuDsuT1FullBandwidthRemoteLoopcode, ciscoICsuDsuSw56kDialingStatus=ciscoICsuDsuSw56kDialingStatus, ciscoICsuDsuLoopbackPattern=ciscoICsuDsuLoopbackPattern, ciscoICsuDsuT1LossOfSignals=ciscoICsuDsuT1LossOfSignals, ciscoICsuDsuSw56kReceivedOosOofs=ciscoICsuDsuSw56kReceivedOosOofs, ciscoICsuDsuStaticConfigEntry=ciscoICsuDsuStaticConfigEntry, ciscoICsuDsuT1LineBuildOut=ciscoICsuDsuT1LineBuildOut, ciscoICsuDsuMIB=ciscoICsuDsuMIB, ciscoICsuDsuLastSelfTestResult=ciscoICsuDsuLastSelfTestResult, ciscoICsuDsuT1StatusTable=ciscoICsuDsuT1StatusTable, ciscoICsuDsuT1DteLineCode=ciscoICsuDsuT1DteLineCode, ciscoICsuDsuT1LoopStatus=ciscoICsuDsuT1LoopStatus, ciscoICsuDsuSw56kConfigTable=ciscoICsuDsuSw56kConfigTable, ciscoICsuDsuSw56kConfigEntry=ciscoICsuDsuSw56kConfigEntry, ciscoICsuDsuMIBT1Group=ciscoICsuDsuMIBT1Group, ciscoICsuDsuMIBSw56kGroup=ciscoICsuDsuMIBSw56kGroup, ciscoICsuDsuTimeOfLastSelfTest=ciscoICsuDsuTimeOfLastSelfTest, ciscoICsuDsuObjects=ciscoICsuDsuObjects, ciscoICsuDsuSw56kScramblerEnabled=ciscoICsuDsuSw56kScramblerEnabled, ciscoICsuDsuSw56kLostFrameSyncs=ciscoICsuDsuSw56kLostFrameSyncs, ciscoICsuDsuMIBCompliances=ciscoICsuDsuMIBCompliances, ciscoICsuDsuTimeOfLastReset=ciscoICsuDsuTimeOfLastReset, ciscoICsuDsuSw56kNetworkType=ciscoICsuDsuSw56kNetworkType, ciscoICsuDsuT1LoopStatusNotification=ciscoICsuDsuT1LoopStatusNotification, ciscoICsuDsuLoopbackCode=ciscoICsuDsuLoopbackCode, ciscoICsuDsuT1ConfigTable=ciscoICsuDsuT1ConfigTable, ciscoICsuDsuSw56kRemoteLoopbackEnabled=ciscoICsuDsuSw56kRemoteLoopbackEnabled, ciscoICsuDsuSw56kLostSealingCurrents=ciscoICsuDsuSw56kLostSealingCurrents, ciscoICsuDsuSw56kLostReceiveSignals=ciscoICsuDsuSw56kLostReceiveSignals, ciscoICsuDsuT1AlarmIndicationSignals=ciscoICsuDsuT1AlarmIndicationSignals, ciscoICsuDsuUserDefinedPattern=ciscoICsuDsuUserDefinedPattern, ciscoICsuDsuNumResets=ciscoICsuDsuNumResets, ciscoICsuDsuHwRevision=ciscoICsuDsuHwRevision, ciscoICsuDsuMIBNotificationEnables=ciscoICsuDsuMIBNotificationEnables, ciscoICsuDsuT1ConfigEntry=ciscoICsuDsuT1ConfigEntry)
