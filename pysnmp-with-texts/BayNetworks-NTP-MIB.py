#
# PySNMP MIB module BayNetworks-NTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BayNetworks-NTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:42:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, Integer32, Counter64, MibIdentifier, ObjectIdentity, Counter32, IpAddress, iso, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Integer32", "Counter64", "MibIdentifier", "ObjectIdentity", "Counter32", "IpAddress", "iso", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfNtpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfNtpGroup")
wfNtpEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1), )
if mibBuilder.loadTexts: wfNtpEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpEntryTable.setDescription('NTP base entry table. ')
wfNtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1), ).setIndexNames((0, "BayNetworks-NTP-MIB", "wfNtpIndex"))
if mibBuilder.loadTexts: wfNtpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpEntry.setDescription('An NTP base entry description')
wfNtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpIndex.setDescription(' Index of this entry. Index could only be one')
wfNtpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete NTP.')
wfNtpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpDisable.setDescription('Enable/Disable NTP')
wfNtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("client", 1), ("bclient", 2), ("mclient", 3))).clone('client')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpMode.setDescription('Enable/Disable NTP')
wfNtpDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpDebugFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpDebugFlag.setDescription('Flag for setting debug level')
wfNtpState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpState.setDescription('The current state of NTP.')
wfNtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpVersion.setDescription('The NTP version on the Router NTP client/server software')
wfNtpStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpStratum.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpStratum.setDescription('Router NTP client software stratum')
wfNtpRootDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpRootDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpRootDelay.setDescription('Delay from synchronization server this could be another secondary server or primary server in seconds')
wfNtpReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpReferenceId.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpReferenceId.setDescription('Reference ID of time synchronozition source ')
wfNtpClockPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpClockPrec.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpClockPrec.setDescription(' An 8 bit number indicating the precision of the router clock in seconds to the nearest power of two. ')
wfNtpLeapHappened = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpLeapHappened.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpLeapHappened.setDescription('Flag indicating whether leap occurred or not leap: a leap second is added / subtracted from the last second of a particular day for e.g. the time of a particular day will end with 23:59:60 instead of 23:59:59. This is done to conform with Universal Standard Time conventions')
wfNtpLeapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpLeapTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpLeapTime.setDescription('Next leap adjustment in 1/100 second')
wfNtpUpdateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpUpdateTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpUpdateTimer.setDescription('Number of seconds in powers of 2 between NTP polls.')
wfNtpAccessTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 2), )
if mibBuilder.loadTexts: wfNtpAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpAccessTable.setDescription('List of peers we restrict/prefer time synchronization based on source IP address or the source subnet ')
wfNtpAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 2, 1), ).setIndexNames((0, "BayNetworks-NTP-MIB", "wfNtpAccessIpAddr"))
if mibBuilder.loadTexts: wfNtpAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpAccessEntry.setDescription('An access control entry description')
wfNtpAccessDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpAccessDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpAccessDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete an NTP access control record')
wfNtpAccessFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restrict", 1), ("prefer", 2))).clone('restrict')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpAccessFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpAccessFilterType.setDescription('Could be restrict or prefer')
wfNtpAccessIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpAccessIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpAccessIpAddr.setDescription('Source Ip address of Peer the rule applies to')
wfNtpAccessIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpAccessIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpAccessIpMask.setDescription('Mask of subnet if rule applies to peers from a specific subnet')
wfNtpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3), )
if mibBuilder.loadTexts: wfNtpPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerTable.setDescription('The list of configured NTP peers')
wfNtpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1), ).setIndexNames((0, "BayNetworks-NTP-MIB", "wfNtpPeerIpAddress"))
if mibBuilder.loadTexts: wfNtpPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerEntry.setDescription('An NTP peer description')
wfNtpPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpPeerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete an IP interface.')
wfNtpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerState.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerState.setDescription('State of peer ')
wfNtpCfgPeerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("server", 1), ("peer", 2))).clone('server')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpCfgPeerMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpCfgPeerMode.setDescription('The configured as peer or server')
wfNtpPeerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("symmetrica", 1), ("symmetricp", 2), ("client", 3), ("server", 4), ("broadcast", 5), ("ntpctrl", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerMode.setDescription('The mode peer of operation')
wfNtpPeerHostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("symmetrica", 1), ("symmetricp", 2), ("client", 3), ("server", 4), ("broadcast", 5), ("ntpctrl", 6))).clone('client')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpPeerHostMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerHostMode.setDescription('Router NTP mode')
wfNtpPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerIpAddress.setDescription('Source IP address of Peer')
wfNtpSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpSourceIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpSourceIpAddress.setDescription('Source IP address of Peer')
wfNtpPeerPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNtpPeerPref.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerPref.setDescription('Peer Preference: Preference assigned to this peer. Will override NTP peer selection algorithm if greater than default value')
wfNtpPeerRefId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerRefId.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerRefId.setDescription('Peer Reference clock IP address')
wfNtpPeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 10), Integer32().clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerVersion.setDescription('Peers NTP version number')
wfNtpPeerPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerPrecision.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerPrecision.setDescription('Peers clock precision')
wfNtpPeerStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerStratum.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerStratum.setDescription('Peer stratum')
wfNtpPeerRootDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerRootDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerRootDelay.setDescription('Delay from syncronization clock in seconds')
wfNtpPeerDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerDispersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerDispersion.setDescription('Peer clock dispersion')
wfNtpPeerOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerOffset.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerOffset.setDescription('Peer clock offset')
wfNtpPeerPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerPolls.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerPolls.setDescription('Number of times this peer has been polled')
wfNtpPeerFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 17, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNtpPeerFrameReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfNtpPeerFrameReceives.setDescription('Number of times this peer has been polled')
mibBuilder.exportSymbols("BayNetworks-NTP-MIB", wfNtpEntryTable=wfNtpEntryTable, wfNtpAccessDelete=wfNtpAccessDelete, wfNtpPeerPref=wfNtpPeerPref, wfNtpPeerDelete=wfNtpPeerDelete, wfNtpStratum=wfNtpStratum, wfNtpDebugFlag=wfNtpDebugFlag, wfNtpReferenceId=wfNtpReferenceId, wfNtpDisable=wfNtpDisable, wfNtpAccessFilterType=wfNtpAccessFilterType, wfNtpLeapTime=wfNtpLeapTime, wfNtpRootDelay=wfNtpRootDelay, wfNtpMode=wfNtpMode, wfNtpPeerOffset=wfNtpPeerOffset, wfNtpAccessTable=wfNtpAccessTable, wfNtpPeerEntry=wfNtpPeerEntry, wfNtpPeerPrecision=wfNtpPeerPrecision, wfNtpVersion=wfNtpVersion, wfNtpPeerFrameReceives=wfNtpPeerFrameReceives, wfNtpSourceIpAddress=wfNtpSourceIpAddress, wfNtpDelete=wfNtpDelete, wfNtpPeerPolls=wfNtpPeerPolls, wfNtpPeerVersion=wfNtpPeerVersion, wfNtpIndex=wfNtpIndex, wfNtpState=wfNtpState, wfNtpAccessEntry=wfNtpAccessEntry, wfNtpPeerStratum=wfNtpPeerStratum, wfNtpPeerHostMode=wfNtpPeerHostMode, wfNtpCfgPeerMode=wfNtpCfgPeerMode, wfNtpAccessIpAddr=wfNtpAccessIpAddr, wfNtpEntry=wfNtpEntry, wfNtpClockPrec=wfNtpClockPrec, wfNtpUpdateTimer=wfNtpUpdateTimer, wfNtpPeerState=wfNtpPeerState, wfNtpPeerIpAddress=wfNtpPeerIpAddress, wfNtpPeerMode=wfNtpPeerMode, wfNtpPeerTable=wfNtpPeerTable, wfNtpPeerRootDelay=wfNtpPeerRootDelay, wfNtpAccessIpMask=wfNtpAccessIpMask, wfNtpPeerDispersion=wfNtpPeerDispersion, wfNtpPeerRefId=wfNtpPeerRefId, wfNtpLeapHappened=wfNtpLeapHappened)
