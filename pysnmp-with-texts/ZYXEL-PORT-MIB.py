#
# PySNMP MIB module ZYXEL-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibIdentifier, Counter32, Gauge32, IpAddress, Counter64, Unsigned32, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Counter32", "Gauge32", "IpAddress", "Counter64", "Unsigned32", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "NotificationType", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelPort = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61))
if mibBuilder.loadTexts: zyxelPort.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelPort.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelPort.setContactInfo('')
if mibBuilder.loadTexts: zyxelPort.setDescription('The subtree for port')
zyxelPortSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1))
zyxelPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 2))
zyxelPortNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 3))
zyxelPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1, 1), )
if mibBuilder.loadTexts: zyxelPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPortTable.setDescription('The table contains port configuration. ')
zyxelPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPortEntry.setDescription('An entry contains port configuration. ')
zyPortSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("auto", 0), ("speed10Half", 1), ("speed10Full", 2), ("speed100Half", 3), ("speed100Full", 4), ("speed1000Full", 5), ("speed10000Full", 6), ("speed12000Full", 7), ("speed40000Full", 8), ("speed1000Auto", 9), ("speedAuto1000", 10), ("speedAuto10000", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortSpeedDuplex.setStatus('current')
if mibBuilder.loadTexts: zyPortSpeedDuplex.setDescription('Select The speed and the duplex mode of the Ethernet connection on this port. Selecting Auto (auto-negotiation) allows one port to negotiate with a peer port automatically to obtain the connection speed and duplex mode that both ends support. When auto-negotiation is turned on, a port on the Switch negotiates with the peer automatically to determine the connection speed and duplex mode. If the peer port does not support auto-negotiation or turns off this feature, the Switch determines the connection speed by detecting the signal on the cable and using half duplex mode. Thus requiring you to make sure that the settings of the peer port are the same in order to connect.')
zyPortFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortFlowControlState.setStatus('current')
if mibBuilder.loadTexts: zyPortFlowControlState.setDescription('Enable/Disable the flow control on this port. A concentration of traffic on a port decreases port bandwidth and overflows buffer memory causing packet discards and frame losses. Flow control is used to regulate transmission of signals to match the bandwidth of the receiving port.')
zyPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortName.setStatus('current')
if mibBuilder.loadTexts: zyPortName.setDescription('Enter a descriptive name that identifies this port.')
zyPortIntrusionLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1, 1, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortIntrusionLockState.setStatus('current')
if mibBuilder.loadTexts: zyPortIntrusionLockState.setDescription('Enable/Disable intrusion lock on the port(s) and the port cannot be connected again after you disconnected the cable.')
zyPortCX4CableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("halfMeters", 0), ("oneMeters", 1), ("threeMeters", 2), ("fiveMeters", 3), ("tenMeters", 4), ("fifteenMeters", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortCX4CableLength.setStatus('current')
if mibBuilder.loadTexts: zyPortCX4CableLength.setDescription('Set the number of meters for the length of the 10GBASE-CX4 cable you use to connect between the swtich and another switch for stacking.')
zyPort10GMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sfpPlus", 0), ("dac10g", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPort10GMediaType.setStatus('current')
if mibBuilder.loadTexts: zyPort10GMediaType.setDescription('Set the 10GBase media type.')
zyxelPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 2, 1), )
if mibBuilder.loadTexts: zyxelPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPortInfoTable.setDescription('The table contains port information. ')
zyxelPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 2, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPortInfoEntry.setDescription('An entry contains port information. ')
zyPortModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("fastEthernet", 0), ("gigabitEthernet", 1), ("xgEthernet10000", 2), ("x1Ethernet40000", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPortModuleType.setStatus('current')
if mibBuilder.loadTexts: zyPortModuleType.setDescription('This entry displays the speed type of modular.')
zyPortLinkUpType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 0), ("copper", 1), ("fiber", 2), ("xfp", 3), ("cx4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPortLinkUpType.setStatus('current')
if mibBuilder.loadTexts: zyPortLinkUpType.setDescription('The entry shows the linkUp cable type (copper, fiber, xfp or cx4) for the combo ports.')
zyPortTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("underTesting", 1), ("success", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPortTestStatus.setStatus('current')
if mibBuilder.loadTexts: zyPortTestStatus.setDescription('This entry displays latest loopback test status of port while performing loopback test.')
zyPortCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 2, 1, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortCounterReset.setStatus('current')
if mibBuilder.loadTexts: zyPortCounterReset.setDescription('Enable this entry can reset port counter record.')
zyPortAutonegotiationFailed = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 3, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zyPortAutonegotiationFailed.setStatus('current')
if mibBuilder.loadTexts: zyPortAutonegotiationFailed.setDescription('Link speed and duplex mode autonegotiation has failed.')
zyPortIntrusionLock = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 3, 2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zyPortIntrusionLock.setStatus('current')
if mibBuilder.loadTexts: zyPortIntrusionLock.setDescription('The cable is disconnected and the port cannot be connected again.')
zyPortAutonegotiationFailedRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 61, 3, 3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zyPortAutonegotiationFailedRecovered.setStatus('current')
if mibBuilder.loadTexts: zyPortAutonegotiationFailedRecovered.setDescription('Link speed and duplex mode autonegotiation has recovered from failed.')
mibBuilder.exportSymbols("ZYXEL-PORT-MIB", zyPortIntrusionLockState=zyPortIntrusionLockState, zyPort10GMediaType=zyPort10GMediaType, zyPortAutonegotiationFailed=zyPortAutonegotiationFailed, zyxelPortNotifications=zyxelPortNotifications, zyxelPortTable=zyxelPortTable, zyPortSpeedDuplex=zyPortSpeedDuplex, zyxelPortInfoEntry=zyxelPortInfoEntry, zyxelPortInfoTable=zyxelPortInfoTable, zyPortName=zyPortName, zyPortLinkUpType=zyPortLinkUpType, zyxelPort=zyxelPort, zyPortModuleType=zyPortModuleType, zyPortTestStatus=zyPortTestStatus, zyPortAutonegotiationFailedRecovered=zyPortAutonegotiationFailedRecovered, zyxelPortSetup=zyxelPortSetup, zyxelPortEntry=zyxelPortEntry, zyxelPortStatus=zyxelPortStatus, zyPortIntrusionLock=zyPortIntrusionLock, PYSNMP_MODULE_ID=zyxelPort, zyPortCounterReset=zyPortCounterReset, zyPortCX4CableLength=zyPortCX4CableLength, zyPortFlowControlState=zyPortFlowControlState)
