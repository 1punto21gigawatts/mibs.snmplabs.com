#
# PySNMP MIB module OPTIX-SONET-EQPTMGT-MIB-V2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPTIX-SONET-EQPTMGT-MIB-V2
# Produced by pysmi-0.3.4 at Wed May  1 14:35:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
optixProvisionSonet, = mibBuilder.importSymbols("OPTIX-OID-MIB", "optixProvisionSonet")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Counter32, Counter64, Integer32, ObjectIdentity, IpAddress, MibIdentifier, iso, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Counter64", "Integer32", "ObjectIdentity", "IpAddress", "MibIdentifier", "iso", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
optixsonetEqptMgt = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3))
if mibBuilder.loadTexts: optixsonetEqptMgt.setLastUpdated('200605232006Z')
if mibBuilder.loadTexts: optixsonetEqptMgt.setOrganization('Your organization')
if mibBuilder.loadTexts: optixsonetEqptMgt.setContactInfo('Your contact info')
if mibBuilder.loadTexts: optixsonetEqptMgt.setDescription('Enter the description for this MIB module.')
class IntfType(TextualConvention, Integer32):
    description = 'Enter the description for the IntfType TEXTUAL-CONVENTION converted from type assignment.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 10, 12, 13, 17, 65, 100, 254))
    namedValues = NamedValues(("ds1-asyn-vt1", 1), ("ds3-asyn-sts1", 10), ("ec", 12), ("ds3-tmux-ds1", 13), ("ds3-srv-ds1", 17), ("uas", 65), ("mix", 100), ("invalid", 254))

optixsonetCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1), )
if mibBuilder.loadTexts: optixsonetCardInfoTable.setStatus('current')
if mibBuilder.loadTexts: optixsonetCardInfoTable.setDescription('This table describes the equipment unit management interface of Huawei SONET transmit platform ')
optixsonetCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1), ).setIndexNames((0, "OPTIX-SONET-EQPTMGT-MIB-V2", "cardIndexSlotId"), (0, "OPTIX-SONET-EQPTMGT-MIB-V2", "cardIndexSfpId"))
if mibBuilder.loadTexts: optixsonetCardInfoEntry.setStatus('current')
if mibBuilder.loadTexts: optixsonetCardInfoEntry.setDescription('The equipment unit management entry ')
cardIndexSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIndexSlotId.setStatus('current')
if mibBuilder.loadTexts: cardIndexSlotId.setDescription('Slot number. This will indicate what is the slot of the object.')
cardIndexSfpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIndexSfpId.setStatus('current')
if mibBuilder.loadTexts: cardIndexSfpId.setDescription('SFP identifier. This will indicate what is the SFP Slot of the object.For the card unit, I will be zero.')
cardProvisionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProvisionType.setStatus('current')
if mibBuilder.loadTexts: cardProvisionType.setDescription('It means the logical unit type provisioned by user.')
cardPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPhysicalType.setStatus('current')
if mibBuilder.loadTexts: cardPhysicalType.setDescription('It means the physical unit type inserted in the slot.')
cardInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 5), IntfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cardInterfaceType.setDescription('The AID unit interface type.This parameter is optional and can be used only for tributary units')
cardBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBandwidth.setStatus('current')
if mibBuilder.loadTexts: cardBandwidth.setDescription('The available bandwidth of the unit when it is provisioned in the slot. It is displayed when the Ethernet unit, the OC-N unit or the tributary unit is provisioned. It is the minimum value of the slot bus bandwidth and bandwidth of the unit.')
cardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerialNum.setStatus('current')
if mibBuilder.loadTexts: cardSerialNum.setDescription('The serial number for the equipment. Valid value is a string and is optional.')
cardCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCLEICode.setStatus('current')
if mibBuilder.loadTexts: cardCLEICode.setDescription('The CLEI code for the equipment. Valid value is a string and is optional.')
cardPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPartNum.setStatus('current')
if mibBuilder.loadTexts: cardPartNum.setDescription('Part number of the unit. Valid value is a unique 8-digit number for the unit.')
cardDOM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDOM.setStatus('current')
if mibBuilder.loadTexts: cardDOM.setDescription('The date when the unit was manufactured and is optional.')
cardPCBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPCBVersion.setStatus('current')
if mibBuilder.loadTexts: cardPCBVersion.setDescription('The PCB version for the equipment. Valid value is a string and is optional.')
cardSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSWVersion.setStatus('current')
if mibBuilder.loadTexts: cardSWVersion.setDescription('The software version for the equipment.')
cardFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFPGAVersion.setStatus('current')
if mibBuilder.loadTexts: cardFPGAVersion.setDescription('The FPGA version for the equipment. Valid value is a string and is optional.')
cardEPLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardEPLDVersion.setStatus('current')
if mibBuilder.loadTexts: cardEPLDVersion.setDescription('The EPLD version for the equipment. Valid value is a string and is optional.')
cardBIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardBIOSVersion.setStatus('current')
if mibBuilder.loadTexts: cardBIOSVersion.setDescription('The BIOS version for the equipment. Valid value for <BIOSVER> is a string and is optional.')
cardMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMAC.setStatus('current')
if mibBuilder.loadTexts: cardMAC.setDescription('The MAC address of a common control unit. Valid value is a string like 00-B0-D0-E3-4C-DE and is optional.')
cardPSTState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPSTState.setStatus('current')
if mibBuilder.loadTexts: cardPSTState.setDescription('<PST> means the primary state of the entity.')
cardSSTState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSSTState.setStatus('current')
if mibBuilder.loadTexts: cardSSTState.setDescription('<SST> means the secondary state of the entity.')
cardTPSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTPSPriority.setStatus('current')
if mibBuilder.loadTexts: cardTPSPriority.setDescription('The priority of the AID unit if the unit is a working unit of a DSn (TPS) protection group. For any other units, this parameter is not available. This attribute will be used when multi-units fault in a DSn (TPS) protection group.Valid values are list below Value Description 1 The highest priority for the unit in a TPS protection group 2 The secondary priority for the unit in a TPS protection group 3 The third priority for the unit in a TPS protection group 4 The lowest priority for the unit in a TPS protection group ')
cardSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("stateDNR", 1), ("stateWTR", 2), ("stateMAN", 3), ("stateAUTOSW", 4), ("stateFRCD", 5), ("stateLOCK", 6), ("stateINVALID", 254), ("stateIDLE", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwitchState.setStatus('current')
if mibBuilder.loadTexts: cardSwitchState.setDescription('The switch state of the AID unit if the unit is a unit of a DSn (TPS) protection group. Switch state of SONET equipment protection Value Description AUTO_SW Automatic switch DNR Do not revert FRCD Forced switch IDLE Idle LOCKOUT Lock to the working unit MAN Manually switch WTR Wait to restore ')
cardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDescription.setStatus('current')
if mibBuilder.loadTexts: cardDescription.setDescription('Description.')
optixsonetEqptMgtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2))
optixsonetEqptMgtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2, 1))
currentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2, 1, 1)).setObjects(("OPTIX-SONET-EQPTMGT-MIB-V2", "cardIndexSlotId"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardIndexSfpId"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardProvisionType"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardPhysicalType"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardInterfaceType"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardBandwidth"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardSerialNum"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardCLEICode"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardPartNum"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardDOM"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardPCBVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardSWVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardFPGAVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardEPLDVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardBIOSVersion"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardMAC"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardPSTState"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardSSTState"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardTPSPriority"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardSwitchState"), ("OPTIX-SONET-EQPTMGT-MIB-V2", "cardDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentObjectGroup = currentObjectGroup.setStatus('current')
if mibBuilder.loadTexts: currentObjectGroup.setDescription('Enter the description of the created OBJECT-GROUP.')
optixsonetEqptMgtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2, 2))
basicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 3, 2, 2, 1)).setObjects(("OPTIX-SONET-EQPTMGT-MIB-V2", "currentObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
if mibBuilder.loadTexts: basicCompliance.setDescription('Enter the description of the created MODULE-COMPLIANCE.')
mibBuilder.exportSymbols("OPTIX-SONET-EQPTMGT-MIB-V2", cardPCBVersion=cardPCBVersion, PYSNMP_MODULE_ID=optixsonetEqptMgt, cardProvisionType=cardProvisionType, basicCompliance=basicCompliance, optixsonetEqptMgtGroups=optixsonetEqptMgtGroups, cardBandwidth=cardBandwidth, cardPSTState=cardPSTState, optixsonetEqptMgtCompliances=optixsonetEqptMgtCompliances, IntfType=IntfType, cardFPGAVersion=cardFPGAVersion, cardInterfaceType=cardInterfaceType, cardIndexSlotId=cardIndexSlotId, cardEPLDVersion=cardEPLDVersion, cardSSTState=cardSSTState, cardTPSPriority=cardTPSPriority, currentObjectGroup=currentObjectGroup, optixsonetCardInfoTable=optixsonetCardInfoTable, cardDescription=cardDescription, cardCLEICode=cardCLEICode, optixsonetEqptMgtConformance=optixsonetEqptMgtConformance, cardPartNum=cardPartNum, cardPhysicalType=cardPhysicalType, optixsonetCardInfoEntry=optixsonetCardInfoEntry, cardMAC=cardMAC, optixsonetEqptMgt=optixsonetEqptMgt, cardSwitchState=cardSwitchState, cardIndexSfpId=cardIndexSfpId, cardSerialNum=cardSerialNum, cardDOM=cardDOM, cardBIOSVersion=cardBIOSVersion, cardSWVersion=cardSWVersion)
