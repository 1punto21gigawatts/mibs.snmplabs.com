#
# PySNMP MIB module CISCO-MPOA-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MPOA-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
AtmAddress, = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "AtmAddress")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VciInteger, VpiInteger = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "VciInteger", "VpiInteger")
mpsIndex, mpcIndex = mibBuilder.importSymbols("MPOA-MIB", "mpsIndex", "mpcIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, TimeTicks, ModuleIdentity, Counter32, ObjectIdentity, MibIdentifier, Bits, Counter64, NotificationType, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "ModuleIdentity", "Counter32", "ObjectIdentity", "MibIdentifier", "Bits", "Counter64", "NotificationType", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
ciscoMpoaExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 99999))
ciscoMpoaExtMIB.setRevisions(('2000-01-10 12:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMpoaExtMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoMpoaExtMIB.setLastUpdated('200001101230Z')
if mibBuilder.loadTexts: ciscoMpoaExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMpoaExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoMpoaExtMIB.setDescription("This MIB module is a Cisco extension to the ATM Forum's MPOA MIB. This MIB module consists of object groups to retrieve information about MPOA shortcut VCCs and to bind MPOA entities (MPC & MPS) to physical interfaces.")
ciscoMpoaExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1))
cMpcExtShortcutVCC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 1))
cMpcExtShortcutVCCTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 1, 1), )
if mibBuilder.loadTexts: cMpcExtShortcutVCCTable.setStatus('current')
if mibBuilder.loadTexts: cMpcExtShortcutVCCTable.setDescription('An extension to the mpcConfig table in the MPOA-MIB. This table identifies the VCI and VPI of each shortcut that is setup by an MPC. A shortcut is a VCC that is setup between the Ingress and Egress MPC.')
cMpcExtShortcutVCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 1, 1, 1), ).setIndexNames((0, "MPOA-MIB", "mpcIndex"), (0, "CISCO-MPOA-EXT-MIB", "cmpcSCVpi"), (0, "CISCO-MPOA-EXT-MIB", "cmpcSCVci"))
if mibBuilder.loadTexts: cMpcExtShortcutVCCEntry.setStatus('current')
if mibBuilder.loadTexts: cMpcExtShortcutVCCEntry.setDescription('Entries in the table for the shortcut VCCs setup by an MPC.')
cmpcSCVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 1, 1, 1, 1), VpiInteger())
if mibBuilder.loadTexts: cmpcSCVpi.setStatus('current')
if mibBuilder.loadTexts: cmpcSCVpi.setDescription('The VPI of the shortcut VCC setup by the MPC specified by MPC index. The destination of the shortcut VCC is specified by cmpcDestAtmAddr.')
cmpcSCVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 1, 1, 1, 2), VciInteger())
if mibBuilder.loadTexts: cmpcSCVci.setStatus('current')
if mibBuilder.loadTexts: cmpcSCVci.setDescription('The VCI of the shortcut VCC setup by the MPC specified by the MPC index. The destination of the shortcut VCC is specified by cmpcDestAtmAddr.')
cmpcDestAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 1, 1, 1, 3), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpcDestAtmAddr.setStatus('current')
if mibBuilder.loadTexts: cmpcDestAtmAddr.setDescription('The ATM address of the destination of this shortcut VCC.')
cMpcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 2))
cMpcInterfaceMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 2, 1), )
if mibBuilder.loadTexts: cMpcInterfaceMappingTable.setStatus('current')
if mibBuilder.loadTexts: cMpcInterfaceMappingTable.setDescription('Table that contains information about the MPC <--> interface binding.')
cMpcInterfaceMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 2, 1, 1), ).setIndexNames((0, "MPOA-MIB", "mpcIndex"))
if mibBuilder.loadTexts: cMpcInterfaceMappingEntry.setStatus('current')
if mibBuilder.loadTexts: cMpcInterfaceMappingEntry.setDescription('Each row in this table specifies the interface (by ifIndex) to which an MPC (specified by mpcIndex) is bound. Creation of an MPC does not create an entry in this table. After successfully creating an MPC, the MPC has to be bound to an interface in order to create an entry in this table.')
cMpcInterfaceMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMpcInterfaceMappingIndex.setStatus('current')
if mibBuilder.loadTexts: cMpcInterfaceMappingIndex.setDescription('The Interface (specified by the cMpcInterfaceMappingIndex) to which the MPS (specified by mpcIndex) is bound to. This interface has to be an ATM physical interface.')
cMpcInterfaceMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMpcInterfaceMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMpcInterfaceMappingRowStatus.setDescription("Row status of the row in the mapping table. Specifying a 'valid' value for the cMpcInterfaceMappingIndex (interface index of an ATM physical interface) in the set operation, along with a value of 4 (createAndGo) for the cMpcInterfaceMappingRowStatus, will bind the MPC specified by mpcIndex to the specified physical interface and create a row entry in this table.")
cMpsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 3))
cMpsInterfaceMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 3, 1), )
if mibBuilder.loadTexts: cMpsInterfaceMappingTable.setStatus('current')
if mibBuilder.loadTexts: cMpsInterfaceMappingTable.setDescription('Table that contains information about the MPS <--> interface binding.')
cMpsInterfaceMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 3, 1, 1), ).setIndexNames((0, "MPOA-MIB", "mpsIndex"))
if mibBuilder.loadTexts: cMpsInterfaceMappingEntry.setStatus('current')
if mibBuilder.loadTexts: cMpsInterfaceMappingEntry.setDescription('Each row in this table specifies the interface (by ifIndex) to which an MPS (specified by mpsIndex) is bound. Creation of an MPS does not create an entry in this table. After successfully creating an MPS, the MPS has to be bound to an interface in order to create an entry in this table.')
cMpsInterfaceMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMpsInterfaceMappingIndex.setStatus('current')
if mibBuilder.loadTexts: cMpsInterfaceMappingIndex.setDescription('The Interface (specified by the cMpsInterfaceMappingIndex) to which the MPS (specified by mpsIndex) is bound to. This interface has to be an ATM physical interface.')
cMpsInterfaceMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99999, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMpsInterfaceMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMpsInterfaceMappingRowStatus.setDescription("Row status of the row in the mapping table. Specifying a 'valid' value for the cMpsInterfaceMappingIndex (interface index of an ATM physical interface) in the set operation, along with a value of 4 (createAndGo) for the cMpsInterfaceMappingRowStatus, will bind the MPS specified by mpsIndex to the specified physical interface and create a row entry in this table. Similarly, specifying a value of 6 (destroy) for the cMpsInterfaceMappingRowStatus, along with the mpsIndex of the MPS, will detach the specified MPS from the physical interface(i.e. if it is already attached).")
ciscoMpoaExtMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 2))
ciscoMpoaExtMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 2, 0))
ciscoMpoaExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 3))
ciscoMpoaExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 3, 1))
ciscoMpoaExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99999, 3, 2))
ciscoMpoaExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 99999, 3, 1, 1)).setObjects(("CISCO-MPOA-EXT-MIB", "ciscoMpoaExtShorcutVCCMIBGroup"), ("CISCO-MPOA-EXT-MIB", "ciscoMpoaExtMpcInterfaceMappingGroup"), ("CISCO-MPOA-EXT-MIB", "ciscoMpoaExtMpsInterfaceMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMpoaExtMIBCompliance = ciscoMpoaExtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoMpoaExtMIBCompliance.setDescription('This module should be implemented by all Cisco devices supporting MPOA Clients.')
ciscoMpoaExtShorcutVCCMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99999, 3, 2, 1)).setObjects(("CISCO-MPOA-EXT-MIB", "cmpcDestAtmAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMpoaExtShorcutVCCMIBGroup = ciscoMpoaExtShorcutVCCMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMpoaExtShorcutVCCMIBGroup.setDescription('A collection of objects related to identifying a shorcut VCC setup by an MPC.')
ciscoMpoaExtMpcInterfaceMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99999, 3, 2, 2)).setObjects(("CISCO-MPOA-EXT-MIB", "cMpcInterfaceMappingIndex"), ("CISCO-MPOA-EXT-MIB", "cMpcInterfaceMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMpoaExtMpcInterfaceMappingGroup = ciscoMpoaExtMpcInterfaceMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMpoaExtMpcInterfaceMappingGroup.setDescription('A collection of objects related to identify the interface to which an MPC is bound to.')
ciscoMpoaExtMpsInterfaceMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99999, 3, 2, 3)).setObjects(("CISCO-MPOA-EXT-MIB", "cMpsInterfaceMappingIndex"), ("CISCO-MPOA-EXT-MIB", "cMpsInterfaceMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMpoaExtMpsInterfaceMappingGroup = ciscoMpoaExtMpsInterfaceMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMpoaExtMpsInterfaceMappingGroup.setDescription('A collection of objects related to identify the interface to which an MPS is bound to.')
mibBuilder.exportSymbols("CISCO-MPOA-EXT-MIB", cMpcInterfaceMappingTable=cMpcInterfaceMappingTable, cMpsInterfaceMappingRowStatus=cMpsInterfaceMappingRowStatus, cMpcExtShortcutVCCTable=cMpcExtShortcutVCCTable, ciscoMpoaExtMIBNotificationPrefix=ciscoMpoaExtMIBNotificationPrefix, PYSNMP_MODULE_ID=ciscoMpoaExtMIB, cMpcInterfaceMappingRowStatus=cMpcInterfaceMappingRowStatus, ciscoMpoaExtMIB=ciscoMpoaExtMIB, ciscoMpoaExtMIBObjects=ciscoMpoaExtMIBObjects, ciscoMpoaExtMIBCompliances=ciscoMpoaExtMIBCompliances, cMpcExtShortcutVCC=cMpcExtShortcutVCC, ciscoMpoaExtMIBConformance=ciscoMpoaExtMIBConformance, cMpcExtShortcutVCCEntry=cMpcExtShortcutVCCEntry, cMpcInterface=cMpcInterface, cmpcSCVpi=cmpcSCVpi, cMpsInterfaceMappingIndex=cMpsInterfaceMappingIndex, cmpcSCVci=cmpcSCVci, cMpsInterface=cMpsInterface, ciscoMpoaExtShorcutVCCMIBGroup=ciscoMpoaExtShorcutVCCMIBGroup, ciscoMpoaExtMIBNotifications=ciscoMpoaExtMIBNotifications, cMpsInterfaceMappingTable=cMpsInterfaceMappingTable, cMpcInterfaceMappingEntry=cMpcInterfaceMappingEntry, ciscoMpoaExtMIBCompliance=ciscoMpoaExtMIBCompliance, cMpsInterfaceMappingEntry=cMpsInterfaceMappingEntry, ciscoMpoaExtMpcInterfaceMappingGroup=ciscoMpoaExtMpcInterfaceMappingGroup, ciscoMpoaExtMpsInterfaceMappingGroup=ciscoMpoaExtMpsInterfaceMappingGroup, cMpcInterfaceMappingIndex=cMpcInterfaceMappingIndex, ciscoMpoaExtMIBGroups=ciscoMpoaExtMIBGroups, cmpcDestAtmAddr=cmpcDestAtmAddr)
