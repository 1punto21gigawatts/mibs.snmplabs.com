#
# PySNMP MIB module BIANCA-BRICK-IP-SERVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-IP-SERVICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, TimeTicks, ObjectIdentity, Integer32, Counter64, IpAddress, Counter32, Gauge32, Unsigned32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Integer32", "Counter64", "IpAddress", "Counter32", "Gauge32", "Unsigned32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
biboipsrv = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 14))
localTcpAllowTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1), )
if mibBuilder.loadTexts: localTcpAllowTable.setStatus('mandatory')
if mibBuilder.loadTexts: localTcpAllowTable.setDescription("Filter rule table for incoming TCP packets for local services. This table is used to restrict access to TCP services provided by the system. o active rules have at least one of 'localTcpAllowAddrMode' and 'localTcpAllowIfMode' set to 'verify' o if there are active rules for a certain service, incoming connections of this service type (port) must match at least one of them. o incoming connections to a service (port) without an active rule are always allowed. o connections originating from 127.0.0.1 are always allowed ")
localTcpAllowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-SERVICE-MIB", "localTcpAllowAddr"), (0, "BIANCA-BRICK-IP-SERVICE-MIB", "Service"))
if mibBuilder.loadTexts: localTcpAllowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: localTcpAllowEntry.setDescription('')
localTcpAllowAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowAddrMode.setStatus('mandatory')
if mibBuilder.loadTexts: localTcpAllowAddrMode.setDescription('Specifies wether or not the IP source address of incoming TCP packets should checked')
localTcpAllowAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowAddr.setStatus('mandatory')
if mibBuilder.loadTexts: localTcpAllowAddr.setDescription('source IP address')
localTcpAllowMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowMask.setStatus('mandatory')
if mibBuilder.loadTexts: localTcpAllowMask.setDescription('source IP address mask')
localTcpAllowIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowIfMode.setStatus('mandatory')
if mibBuilder.loadTexts: localTcpAllowIfMode.setDescription('Specifies wether or not the source interface of incoming TCP packets should checked')
localTcpAllowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: localTcpAllowIfIndex.setDescription('source interface index')
localTcpAllowService = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("telnet", 1), ("trace", 2), ("snmp", 3), ("capi", 4), ("tapi", 5), ("rfc1086", 6), ("http", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTcpAllowService.setStatus('mandatory')
if mibBuilder.loadTexts: localTcpAllowService.setDescription('TCP service')
localUdpAllowTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2), )
if mibBuilder.loadTexts: localUdpAllowTable.setStatus('mandatory')
if mibBuilder.loadTexts: localUdpAllowTable.setDescription("Filter rule table for incoming UDP packets for local services. This table is used to restrict access to UDP services provided by the system. o active rules have at least one of 'localUdpAllowAddrMode' and 'localUdpAllowIfMode' set to 'verify' o if there are active rules for a certain service, incoming packets of this service type must match at least one of them. o incoming packets to a service (port) without an active rule are always allowed. o packets originating from 127.0.0.1 are always allowed ")
localUdpAllowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-SERVICE-MIB", "localUdpAllowAddr"), (0, "BIANCA-BRICK-IP-SERVICE-MIB", "Service"))
if mibBuilder.loadTexts: localUdpAllowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: localUdpAllowEntry.setDescription('')
localUdpAllowAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowAddrMode.setStatus('mandatory')
if mibBuilder.loadTexts: localUdpAllowAddrMode.setDescription('Specifies wether or not the IP source address of incoming UDP packets should checked')
localUdpAllowAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowAddr.setStatus('mandatory')
if mibBuilder.loadTexts: localUdpAllowAddr.setDescription('source IP address')
localUdpAllowMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowMask.setStatus('mandatory')
if mibBuilder.loadTexts: localUdpAllowMask.setDescription('source IP address mask')
localUdpAllowIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowIfMode.setStatus('mandatory')
if mibBuilder.loadTexts: localUdpAllowIfMode.setDescription('Specifies wether or not the source interface of incoming UDP packets should checked')
localUdpAllowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: localUdpAllowIfIndex.setDescription('source interface index')
localUdpAllowService = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("snmp", 1), ("rip", 2), ("bootps", 3), ("dns", 4), ("nbns", 5), ("statmon", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localUdpAllowService.setStatus('mandatory')
if mibBuilder.loadTexts: localUdpAllowService.setDescription('service')
mibBuilder.exportSymbols("BIANCA-BRICK-IP-SERVICE-MIB", biboip=biboip, localTcpAllowService=localTcpAllowService, localTcpAllowIfMode=localTcpAllowIfMode, private=private, localTcpAllowEntry=localTcpAllowEntry, localTcpAllowAddr=localTcpAllowAddr, bintec=bintec, org=org, localTcpAllowTable=localTcpAllowTable, localUdpAllowAddrMode=localUdpAllowAddrMode, localUdpAllowTable=localUdpAllowTable, bibo=bibo, localTcpAllowAddrMode=localTcpAllowAddrMode, internet=internet, biboipsrv=biboipsrv, localUdpAllowService=localUdpAllowService, localTcpAllowMask=localTcpAllowMask, localUdpAllowIfMode=localUdpAllowIfMode, localUdpAllowIfIndex=localUdpAllowIfIndex, localUdpAllowMask=localUdpAllowMask, enterprises=enterprises, localUdpAllowEntry=localUdpAllowEntry, dod=dod, localTcpAllowIfIndex=localTcpAllowIfIndex, localUdpAllowAddr=localUdpAllowAddr)
