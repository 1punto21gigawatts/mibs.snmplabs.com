#
# PySNMP MIB module CPQ-TRAPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQ-TRAPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
agentSwitchPowerSupplyCondition, agentSwitchFanIndex, agentBscSwFileStatus, agentSwitchPowerSupplyInputLineStatus, agentSwitchCubeType, agentSwitchTempSensorThreshold, agentSwitchFanCondition, agentSwitchTempSensorCurrent, agentSwitchPowerSupplyExhaustTemp, agentSwitchCubeSparePartNumber, agentSwitchTempSensorIndex, agentSwitchPowerSupplyIntakeTemp, agentSNTPServer1IPAddr, agentSwitchCubeSpareName, agentBscSwFile, agentSwitchTempSensorTempType, agentSwitchPowerSupplyStatus, agentSwitchPowerSupplyMaxPwrOutput, agentSNTPServer2IPAddr, agentBscSwFileAddr, agentSwitchPowerSupplyCurPwrOutput, agentSwitchTempSensorCondition, agentBscSwFileLoadType = mibBuilder.importSymbols("COMPAQ-AGENT-MIB", "agentSwitchPowerSupplyCondition", "agentSwitchFanIndex", "agentBscSwFileStatus", "agentSwitchPowerSupplyInputLineStatus", "agentSwitchCubeType", "agentSwitchTempSensorThreshold", "agentSwitchFanCondition", "agentSwitchTempSensorCurrent", "agentSwitchPowerSupplyExhaustTemp", "agentSwitchCubeSparePartNumber", "agentSwitchTempSensorIndex", "agentSwitchPowerSupplyIntakeTemp", "agentSNTPServer1IPAddr", "agentSwitchCubeSpareName", "agentBscSwFile", "agentSwitchTempSensorTempType", "agentSwitchPowerSupplyStatus", "agentSwitchPowerSupplyMaxPwrOutput", "agentSNTPServer2IPAddr", "agentBscSwFileAddr", "agentSwitchPowerSupplyCurPwrOutput", "agentSwitchTempSensorCondition", "agentBscSwFileLoadType")
compaq_common_mgmt, = mibBuilder.importSymbols("COMPAQ-ID-REC-MIB", "compaq-common-mgmt")
compaq, = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
cpqRackNetConnectorName, cpqRackNetConnectorSerialNum, cpqRackCommonEnclosureName, cpqRackNetConnectorLocation, cpqRackName, cpqRackCommonEnclosureSerialNum, cpqRackNetConnectorFWRev, cpqRackNetConnectorSparePartNumber, cpqRackUid = mibBuilder.importSymbols("CPQRACK-MIB", "cpqRackNetConnectorName", "cpqRackNetConnectorSerialNum", "cpqRackCommonEnclosureName", "cpqRackNetConnectorLocation", "cpqRackName", "cpqRackCommonEnclosureSerialNum", "cpqRackNetConnectorFWRev", "cpqRackNetConnectorSparePartNumber", "cpqRackUid")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, mib_2, iso, Integer32, Gauge32, Counter32, Unsigned32, Counter64, NotificationType, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, IpAddress, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "mib-2", "iso", "Integer32", "Gauge32", "Counter32", "Unsigned32", "Counter64", "NotificationType", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "IpAddress", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
entityMIB = MibIdentifier((1, 3, 6, 1, 2, 1, 47))
entityMIBTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 47, 2))
entityMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 47, 2, 0))
entConfigChange = NotificationType((1, 3, 6, 1, 2, 1, 47, 2, 0) + (0,1))
if mibBuilder.loadTexts: entConfigChange.setDescription("An entConfigChange notification is generated when the value of entLastChangeTime changes. It can be utilized by an NMS to trigger logical/physical entity table maintenance polls. An agent should not generate more than one entConfigChange 'notification-event' in a given time interval (five seconds is the suggested default). A 'notification-event' is the transmission of a single trap or inform PDU to a list of notification destinations. If additional configuration changes occur within the throttling period, then notification-events for these changes should be suppressed by the agent until the current throttling period expires. At the end of a throttling period, one notification-event should be generated if any configuration changes occurred since the start of the throttling period. In such a case, another throttling period is started right away. An NMS should periodically check the value of entLastChangeTime to detect any missed entConfigChange notification-events, e.g., due to throttling or transmission loss.")
switchFirmwareTransferred = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161001)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("COMPAQ-AGENT-MIB", "agentBscSwFileAddr"), ("COMPAQ-AGENT-MIB", "agentBscSwFile"), ("COMPAQ-AGENT-MIB", "agentBscSwFileLoadType"), ("CPQRACK-MIB", "cpqRackNetConnectorFWRev"))
if mibBuilder.loadTexts: switchFirmwareTransferred.setDescription('The switch has successfully transferred a firmware image.')
switchConfigFileTransferred = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161002)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("COMPAQ-AGENT-MIB", "agentBscSwFileAddr"), ("COMPAQ-AGENT-MIB", "agentBscSwFile"), ("COMPAQ-AGENT-MIB", "agentBscSwFileLoadType"))
if mibBuilder.loadTexts: switchConfigFileTransferred.setDescription('The switch has successfully transferred a configuration file.')
switchTFTPTransferSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161003)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("COMPAQ-AGENT-MIB", "agentBscSwFileAddr"), ("COMPAQ-AGENT-MIB", "agentBscSwFile"), ("COMPAQ-AGENT-MIB", "agentBscSwFileLoadType"))
if mibBuilder.loadTexts: switchTFTPTransferSucceeded.setDescription('The switch has successfully completed a TFTP transfer.')
switchTFTPTransferFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161004)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("COMPAQ-AGENT-MIB", "agentBscSwFileAddr"), ("COMPAQ-AGENT-MIB", "agentBscSwFile"), ("COMPAQ-AGENT-MIB", "agentBscSwFileLoadType"))
if mibBuilder.loadTexts: switchTFTPTransferFailed.setDescription('The switch has failed a TFTP transfer.')
switchFileInvalid = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161005)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("COMPAQ-AGENT-MIB", "agentBscSwFileAddr"), ("COMPAQ-AGENT-MIB", "agentBscSwFile"), ("COMPAQ-AGENT-MIB", "agentBscSwFileLoadType"), ("COMPAQ-AGENT-MIB", "agentBscSwFileStatus"))
if mibBuilder.loadTexts: switchFileInvalid.setDescription('Invalid firmware or configuration image downloaded.')
switchFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161006)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("COMPAQ-AGENT-MIB", "agentSwitchFanIndex"), ("COMPAQ-AGENT-MIB", "agentSwitchFanCondition"))
if mibBuilder.loadTexts: switchFanFailed.setDescription('The switch fan has failed.')
switchFanOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161007)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("COMPAQ-AGENT-MIB", "agentSwitchFanIndex"), ("COMPAQ-AGENT-MIB", "agentSwitchFanCondition"))
if mibBuilder.loadTexts: switchFanOk.setDescription('The switch fan has returned to normal operation.')
switchTempSensorDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161008)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorIndex"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorCurrent"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorThreshold"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorCondition"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorTempType"))
if mibBuilder.loadTexts: switchTempSensorDegraded.setDescription('The switch temperature sensor indicates a high temperature condidtion.')
switchTempSensorFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161009)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorIndex"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorCurrent"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorThreshold"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorCondition"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorTempType"))
if mibBuilder.loadTexts: switchTempSensorFailed.setDescription('The switch temperature sensor indicates an over-temperature condition.')
switchTempSensorOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161010)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorIndex"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorCurrent"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorThreshold"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorCondition"), ("COMPAQ-AGENT-MIB", "agentSwitchTempSensorTempType"))
if mibBuilder.loadTexts: switchTempSensorOk.setDescription('The switch temperature sensor indicates temperature has returned to normal.')
switchPostSuccess = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161011)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"))
if mibBuilder.loadTexts: switchPostSuccess.setDescription('The switch has successfully completed POST.')
switchLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161012)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"))
if mibBuilder.loadTexts: switchLoginFailure.setDescription('The switch has rejected a login attempt.')
switchLocationChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161013)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"))
if mibBuilder.loadTexts: switchLocationChange.setDescription('The switch location has changed. The new location is defined in the variables. The trap will be sent out on the next boot')
switchCubeTypeChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161014)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("COMPAQ-AGENT-MIB", "agentSwitchCubeType"), ("COMPAQ-AGENT-MIB", "agentSwitchCubeSpareName"), ("COMPAQ-AGENT-MIB", "agentSwitchCubeSparePartNumber"))
if mibBuilder.loadTexts: switchCubeTypeChange.setDescription('Trap for connection different cube type. Customer has changed the cube type since the last boot. ')
switchSNTPServiceUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,161015)).setObjects(("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackNetConnectorSerialNum"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("COMPAQ-AGENT-MIB", "agentSNTPServer1IPAddr"), ("COMPAQ-AGENT-MIB", "agentSNTPServer2IPAddr"))
if mibBuilder.loadTexts: switchSNTPServiceUnavailable.setDescription('A SNTP Server was configured, but no SNTP servers were found. This trap is sent once if SNTP is enabled, a SNTP server is configured, and a SNTP server could not be contacted for 10 minutes from the start time. The start time will be defined as when both SNTP was enabled and a SNTP server was configured or when a SNTP server was contacted successfully.')
mibBuilder.exportSymbols("CPQ-TRAPS-MIB", switchFileInvalid=switchFileInvalid, switchTempSensorOk=switchTempSensorOk, switchLoginFailure=switchLoginFailure, entConfigChange=entConfigChange, switchCubeTypeChange=switchCubeTypeChange, entityMIBTrapPrefix=entityMIBTrapPrefix, switchFirmwareTransferred=switchFirmwareTransferred, switchFanFailed=switchFanFailed, switchLocationChange=switchLocationChange, switchSNTPServiceUnavailable=switchSNTPServiceUnavailable, switchConfigFileTransferred=switchConfigFileTransferred, switchTFTPTransferFailed=switchTFTPTransferFailed, switchFanOk=switchFanOk, switchTempSensorDegraded=switchTempSensorDegraded, entityMIB=entityMIB, switchTFTPTransferSucceeded=switchTFTPTransferSucceeded, switchPostSuccess=switchPostSuccess, entityMIBTraps=entityMIBTraps, switchTempSensorFailed=switchTempSensorFailed)
