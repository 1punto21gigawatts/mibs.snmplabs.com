#
# PySNMP MIB module SEI-SMI (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SEI-SMI
# Produced by pysmi-0.3.4 at Wed May  1 15:01:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
iso, Counter64, TimeTicks, IpAddress, Bits, ObjectIdentity, Unsigned32, ModuleIdentity, NotificationType, enterprises, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "TimeTicks", "IpAddress", "Bits", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "NotificationType", "enterprises", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sei = ModuleIdentity((1, 3, 6, 1, 4, 1, 20364))
sei.setRevisions(('2004-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sei.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: sei.setLastUpdated('200406080000Z')
if mibBuilder.loadTexts: sei.setOrganization('System Engineering International')
if mibBuilder.loadTexts: sei.setContactInfo(' System Engineering International Postal: 5115 Pegasus Ct., Suite Q Frederick, MD 21704 USA Tel: +1 301 694 9601 E-mail: tdiamond@seipower.com')
if mibBuilder.loadTexts: sei.setDescription('The Enterprise Number for System Engineering International')
juiceBoxPse = MibIdentifier((1, 3, 6, 1, 4, 1, 20364, 1))
juiceBoxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 20364, 1, 1))
juiceBoxPortTable = MibTable((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1), )
if mibBuilder.loadTexts: juiceBoxPortTable.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortTable.setDescription('A table of objects that display and control the power characteristics of an individual port on a Juice Box Midspan Power Hub. Values of all read-write objects in this table are persistent at restart/reboot.')
juiceBoxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1, 1), ).setIndexNames((0, "SEI-SMI", "juiceBoxPortIndex"))
if mibBuilder.loadTexts: juiceBoxPortEntry.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortEntry.setDescription('A set of objects that display and control the power characteristics of a Juice Box Midspan Power Hub port.')
juiceBoxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: juiceBoxPortIndex.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortIndex.setDescription('This variable uniquely identifies the port within the Juice Box Midspan Power Hub.')
juiceBoxPortDetectionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("ieee8023afonly", 2), ("ieee8023afandlegacy", 3), ("forcedon", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juiceBoxPortDetectionSetting.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortDetectionSetting.setDescription('Describes the type of PD detection performed by the port. A value of disabled(1) means that no PD detection is performed. If a port currently delivering power is set to disabled(1), power will be removed from the port. A value of ieee802.3afonly(2) means only PDs with valid signatures as defined by ieee 802.3af will be detected and powered. A value of ieee8023afandlegacy(3) means that PDs with 802.3af and legacy signatures will be detected and powered. A value of forcedon(4) means the port is powered without regard to detection status. A setting of forcedon(4) is not persistent and must be re-asserted after restart/reboot')
juiceBoxPortMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("max1W", 1), ("max2W", 2), ("max3W", 3), ("max4W", 4), ("max5W", 5), ("max6W", 6), ("max7W", 7), ("max8W", 8), ("max9W", 9), ("max10W", 10), ("max11W", 11), ("max12W", 12), ("max13W", 13), ("max14W", 14), ("max15W", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juiceBoxPortMaxPower.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortMaxPower.setDescription('Describes the maximum power setting for the port in watts. This setting is used by to calculate Allocated Power. It is only used if the port is classified as Class 0 or Legacy.')
juiceBoxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juiceBoxPortDescription.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortDescription.setDescription('A manager will set the value of this variable to indicate the type of powered device that is connected to the port. The default value supplied by the agent if no value has ever been set is PORT x where x is the port number')
juiceBoxPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15))).clone(namedValues=NamedValues(("disabled", 1), ("deliveringPower", 2), ("startupFault", 3), ("overCurrentFault", 4), ("short", 5), ("open", 6), ("rsignatureHi", 7), ("rsignatureLow", 8), ("invalidDetect", 9), ("disconnect", 10), ("powerup", 12), ("overPowerWarning", 13), ("overPowerFault", 14), ("insufficientPower", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxPortStatus.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortStatus.setDescription('Describes the status of the port. A value of disabled(1) means that juiceBoxPortDetectionSetting for the port is set to disabled. No PD detection will be performed. A value of deliveringPower(2) means the port is delivering power within operational parameters. A value of startupFault(3) means that port failed to power up properly. A value of overCurrentFault(4) means the port current was greater than the 350mA maximum value specified by IEEE 802.3af. A value of short(5) means an short circuit was discovered during PD detection. A value of open(6) means an open circuit was discovered during PD detection. A value of rsignatureHi(7) means a resistance greater than the valid signature specified by IEEE 802.3af was discovered during PD detection. A value of rsignatureLow(8) means a resistance less than the valid signature specified by IEEE 802.3af was discovered during PD detection. A value of invalidDetect(9) means an invalid signature as specified by IEEE 802.3af was discovered during PD detection. A value of disconnect(10) means that the port current was less than the 10mA mininum value specified by IEEE 802.3af required to maintain power. A value of powerup(12) means the port is in the process of being powered. A value of overPowerWarning(13) means the port is delivering power greater than the maximum value for its Class or the value set with juiceBoxPortMaxPower. A value of overPowerFault(14) means the port was shut down because the power delivered was at least 1 Watt greater than the maximum value for its Class or the value set with juiceBoxPortMaxPower. A value of insufficientPower(15) means the port could not be powered because there is insuffiecent power capability remaining to fully power the port.')
juiceBoxPortClassifications = MibTableColumn((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5), ("legacy", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxPortClassifications.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortClassifications.setDescription('Classification is a way to identify a Powered Device according to its power consumption. The meaning of the classification labels is defined in the IEEE specification. This variable is valid only while a PD is being powered, that is, while the attribute juiceBoxPortStatus is reporting the enumeration deliveringPower or overpowerWarning.')
juiceBoxPortPowerDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 20364, 1, 1, 1, 1, 7), Gauge32()).setUnits('milliWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxPortPowerDelivered.setStatus('current')
if mibBuilder.loadTexts: juiceBoxPortPowerDelivered.setDescription('Measured usage power of port expressed in milliWatts. This variable is valid only while a PD is being powered, that is, while the attribute juiceBoxPortStatus is reporting the enumeration deliveringPower or overPowerWarning. If an overPowerFault has occured on the port, the power level that caused the fault is indicated')
juiceBoxMainObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2))
juiceBoxMainSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 1), Gauge32()).setUnits('milliVolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxMainSystemVoltage.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainSystemVoltage.setDescription('Measured system voltage in millivolts .')
juiceBoxMainTemperature = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 2), Gauge32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxMainTemperature.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainTemperature.setDescription('Measured internal temperature in degrees C.')
juiceBoxMainPowerAvailable = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxMainPowerAvailable.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainPowerAvailable.setDescription('The nominal power of the JuiceBox expressed in Watts.')
juiceBoxMainPowerDelivered = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 4), Gauge32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxMainPowerDelivered.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainPowerDelivered.setDescription('Total Power Delivered to the PDs.')
juiceBoxMainAllocatedPower = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 5), Gauge32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxMainAllocatedPower.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainAllocatedPower.setDescription('Total Power Allocated to the PDs. This value is calculated base on the Classification of the PDs powered by the Juice Box. If the PD classified as Class 0 or Legacy, the juiceBoxPortMaxPower setting for the port is used.')
juiceBoxMainAllocatedPowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juiceBoxMainAllocatedPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainAllocatedPowerThreshold.setDescription('The usage threshold expressed in percents for comparing the alocated power and initiating an alarm (trap) if the threshold is exceeded.')
juiceBoxMainTrapDestinationIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juiceBoxMainTrapDestinationIPAddr.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainTrapDestinationIPAddr.setDescription('A read/write IP address. This is the address to which the agent sends traps. The value is initialized as 0.0.0.0. Traps will not be sent until a new value is entered')
juiceBoxMainTrapReXmitPeriod = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juiceBoxMainTrapReXmitPeriod.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainTrapReXmitPeriod.setDescription('The period of time in seconds after which a trap will be re-transmitted if the fault condition is still present')
juiceBoxMainGlobalPortDetectionSetting = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("ieee8023afonly", 2), ("ieee8023afandlegacy", 3), ("forcedon", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juiceBoxMainGlobalPortDetectionSetting.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainGlobalPortDetectionSetting.setDescription('Sets the PortDetectionSetting for all the Juice Box ports to the selected value. Describes the type of PD detection performed by the port. A value of disabled(1) means that no PD detection is performed. If a port currently delivering power is set to disabled(1), power will be removed from the port. A value of ieee802.3afonly(2) means only PDs with valid signatures as defined by ieee 802.3af will be detected and powered. A value of ieee8023afandlegacy(3) means that PDs with 802.3af and legacy signatures will be detected and powered. A value of forcedon(4) means the port is powered without regard to detection status. A setting of forcedon(4) is not persistent and must be re-asserted after restart/reboot')
juiceBoxMainGlobalPortMaxPower = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("max1W", 1), ("max2W", 2), ("max3W", 3), ("max4W", 4), ("max5W", 5), ("max6W", 6), ("max7W", 7), ("max8W", 8), ("max9W", 9), ("max10W", 10), ("max11W", 11), ("max12W", 12), ("max13W", 13), ("max14W", 14), ("max15W", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juiceBoxMainGlobalPortMaxPower.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainGlobalPortMaxPower.setDescription('Used to set PortMaxPower for all ports to the same value. Describes the maximum power setting for the port in watts. This setting is used by to calculate Allocated Power. It is only used if the port is classified as Class 0 or Legacy.')
juiceBoxMainNetworkControllerFirmware = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxMainNetworkControllerFirmware.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainNetworkControllerFirmware.setDescription('Firmware Version of the JuiceBox Network Controller.')
juiceBoxMainSystemControllerFirmware = MibScalar((1, 3, 6, 1, 4, 1, 20364, 1, 1, 2, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juiceBoxMainSystemControllerFirmware.setStatus('current')
if mibBuilder.loadTexts: juiceBoxMainSystemControllerFirmware.setDescription('Firmware Version of the JuiceBox SystemController.')
juiceBoxPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 20364) + (0,20)).setObjects(("SNMPv2-MIB", "sysName"), ("SEI-SMI", "juiceBoxPortIndex"), ("SEI-SMI", "juiceBoxPortStatus"))
if mibBuilder.loadTexts: juiceBoxPortStatusChange.setDescription('This trap will be sent anytime the status of a Juice Box port changes.')
juiceBoxAllocatedPowerThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 20364) + (0,10)).setObjects(("SNMPv2-MIB", "sysName"), ("SEI-SMI", "juiceBoxMainAllocatedPower"), ("SEI-SMI", "juiceBoxMainPowerDelivered"))
if mibBuilder.loadTexts: juiceBoxAllocatedPowerThresholdReached.setDescription('This trap is sent when the Allocated Power is greater than the percentage threshold set juiceBoxMainAllocatedPowerThreshold.')
mibBuilder.exportSymbols("SEI-SMI", juiceBoxPortDescription=juiceBoxPortDescription, PYSNMP_MODULE_ID=sei, juiceBoxPortMaxPower=juiceBoxPortMaxPower, juiceBoxPortDetectionSetting=juiceBoxPortDetectionSetting, juiceBoxPortClassifications=juiceBoxPortClassifications, juiceBoxObjects=juiceBoxObjects, juiceBoxPse=juiceBoxPse, juiceBoxMainPowerDelivered=juiceBoxMainPowerDelivered, juiceBoxMainAllocatedPower=juiceBoxMainAllocatedPower, juiceBoxPortPowerDelivered=juiceBoxPortPowerDelivered, juiceBoxMainSystemControllerFirmware=juiceBoxMainSystemControllerFirmware, sei=sei, juiceBoxMainGlobalPortMaxPower=juiceBoxMainGlobalPortMaxPower, juiceBoxMainPowerAvailable=juiceBoxMainPowerAvailable, juiceBoxMainTrapReXmitPeriod=juiceBoxMainTrapReXmitPeriod, juiceBoxMainGlobalPortDetectionSetting=juiceBoxMainGlobalPortDetectionSetting, juiceBoxMainSystemVoltage=juiceBoxMainSystemVoltage, juiceBoxMainTrapDestinationIPAddr=juiceBoxMainTrapDestinationIPAddr, juiceBoxPortIndex=juiceBoxPortIndex, juiceBoxMainAllocatedPowerThreshold=juiceBoxMainAllocatedPowerThreshold, juiceBoxMainNetworkControllerFirmware=juiceBoxMainNetworkControllerFirmware, juiceBoxPortEntry=juiceBoxPortEntry, juiceBoxAllocatedPowerThresholdReached=juiceBoxAllocatedPowerThresholdReached, juiceBoxMainObjects=juiceBoxMainObjects, juiceBoxPortStatusChange=juiceBoxPortStatusChange, juiceBoxPortStatus=juiceBoxPortStatus, juiceBoxMainTemperature=juiceBoxMainTemperature, juiceBoxPortTable=juiceBoxPortTable)
