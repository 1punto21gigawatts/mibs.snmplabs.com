#
# PySNMP MIB module OPCD-SUPPORT-MIB-V2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPCD-SUPPORT-MIB-V2
# Produced by pysmi-0.3.4 at Wed May  1 14:34:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, Gauge32, MibIdentifier, ObjectIdentity, iso, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Integer32, Unsigned32, IpAddress, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Gauge32", "MibIdentifier", "ObjectIdentity", "iso", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Integer32", "Unsigned32", "IpAddress", "NotificationType", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
opencode_systems = ModuleIdentity((1, 3, 6, 1, 4, 1, 30374)).setLabel("opencode-systems")
if mibBuilder.loadTexts: opencode_systems.setLastUpdated('200703061233Z')
if mibBuilder.loadTexts: opencode_systems.setOrganization('Opencode Systems')
if mibBuilder.loadTexts: opencode_systems.setContactInfo('Opencode Systems 1784 Sofia Bulgaria Tsarigradsko shosse 7-mi km BIC IZOT 629B Internet: http://www.opencode.com/ E-mail: opencode@opencode.com Phone: +359 2 971 83 14 Fax: +359 2 971 82 31')
if mibBuilder.loadTexts: opencode_systems.setDescription('Opencode Support')
ocsupport = MibIdentifier((1, 3, 6, 1, 4, 1, 30374, 3))
ocsupport_traps = MibIdentifier((1, 3, 6, 1, 4, 1, 30374, 3, 1)).setLabel("ocsupport-traps")
definitions = MibIdentifier((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0))
vars = MibIdentifier((1, 3, 6, 1, 4, 1, 30374, 3, 1, 1))
mcr_Host = MibScalar((1, 3, 6, 1, 4, 1, 30374, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("mcr-Host").setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcr_Host.setStatus('current')
if mibBuilder.loadTexts: mcr_Host.setDescription('String containing hostname of fault node.')
mcr_Severity = MibScalar((1, 3, 6, 1, 4, 1, 30374, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("normal", 4), ("warning", 5)))).setLabel("mcr-Severity").setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcr_Severity.setStatus('mandatory')
if mibBuilder.loadTexts: mcr_Severity.setDescription('Alarm severity.')
mcr_Text = MibScalar((1, 3, 6, 1, 4, 1, 30374, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("mcr-Text").setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcr_Text.setStatus('current')
if mibBuilder.loadTexts: mcr_Text.setDescription('String containing text of the alarm.')
mcr_FAN = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 2)).setLabel("mcr-FAN").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_FAN.setStatus('current')
if mibBuilder.loadTexts: mcr_FAN.setDescription('Fan Failed!!')
mcr_FAN_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 3)).setLabel("mcr-FAN-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_FAN_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_FAN_Canceled.setDescription('Fan is OK!!')
mcr_POWER = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 4)).setLabel("mcr-POWER").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_POWER.setStatus('current')
if mibBuilder.loadTexts: mcr_POWER.setDescription('Power Supply Failed!!')
mcr_POWER_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 5)).setLabel("mcr-POWER-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_POWER_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_POWER_Canceled.setDescription('Power Supply is OK!!')
mcr_TEMPERATURE = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 6)).setLabel("mcr-TEMPERATURE").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_TEMPERATURE.setStatus('current')
if mibBuilder.loadTexts: mcr_TEMPERATURE.setDescription('Temperature alarm!!Possible high temperature for zones on the server.')
mcr_TEMPERATURE_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 7)).setLabel("mcr-TEMPERATURE-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_TEMPERATURE_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_TEMPERATURE_Canceled.setDescription('Temperature is in normal level.')
mcr_HddFreeSpace = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 8)).setLabel("mcr-HddFreeSpace").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_HddFreeSpace.setStatus('current')
if mibBuilder.loadTexts: mcr_HddFreeSpace.setDescription('Low disk space!!')
mcr_HddFreeSpace_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 9)).setLabel("mcr-HddFreeSpace-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_HddFreeSpace_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_HddFreeSpace_Canceled.setDescription('Cancel alarm for low disk space.')
mcr_MysqlService = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 10)).setLabel("mcr-MysqlService").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_MysqlService.setStatus('current')
if mibBuilder.loadTexts: mcr_MysqlService.setDescription('Mysql Service is not accessible!!')
mcr_MysqlService_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 11)).setLabel("mcr-MysqlService-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_MysqlService_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_MysqlService_Canceled.setDescription('Mysql Service is accessible.')
mcr_DbFloatingIp = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 12)).setLabel("mcr-DbFloatingIp").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_DbFloatingIp.setStatus('current')
if mibBuilder.loadTexts: mcr_DbFloatingIp.setDescription('USSD DB Floating IP problem!! Possible floating ip down.')
mcr_DbFloatingIp_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 13)).setLabel("mcr-DbFloatingIp-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_DbFloatingIp_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_DbFloatingIp_Canceled.setDescription('Floating ip is accessible now.')
mcr_FailedEth = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 14)).setLabel("mcr-FailedEth").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_FailedEth.setStatus('current')
if mibBuilder.loadTexts: mcr_FailedEth.setDescription('Network(ethernet) interface Failure!!')
mcr_FailedEth_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 15)).setLabel("mcr-FailedEth-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_FailedEth_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_FailedEth_Canceled.setDescription('Failed Network(ethernet) interface is up.')
mcr_UpsStatus = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 16)).setLabel("mcr-UpsStatus").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_UpsStatus.setStatus('current')
if mibBuilder.loadTexts: mcr_UpsStatus.setDescription('Problem on ups system.Possible main power down.')
mcr_UpsStatus_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 17)).setLabel("mcr-UpsStatus-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_UpsStatus_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_UpsStatus_Canceled.setDescription('Main Power is up.Alarm is canceled.')
mcr_SwitchConnection = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 18)).setLabel("mcr-SwitchConnection").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_SwitchConnection.setStatus('current')
if mibBuilder.loadTexts: mcr_SwitchConnection.setDescription('No connection to ethernet switch!! Possible network problem with switch.')
mcr_SwitchConnection_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 19)).setLabel("mcr-SwitchConnection-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_SwitchConnection_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_SwitchConnection_Canceled.setDescription('Switch now is up.')
mcr_HddBayCheck = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 20)).setLabel("mcr-HddBayCheck").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_HddBayCheck.setStatus('current')
if mibBuilder.loadTexts: mcr_HddBayCheck.setDescription('HDD Drive Bay problem detected! Possible problem with failed disk or raid')
mcr_HddBayCheck_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 21)).setLabel("mcr-HddBayCheck-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_HddBayCheck_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_HddBayCheck_Canceled.setDescription('HDD is ok.')
ss7LinkDown = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 22)).setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ss7LinkDown.setStatus('current')
if mibBuilder.loadTexts: ss7LinkDown.setDescription('SS7 link down')
ss7LinkDown_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 23)).setLabel("ss7LinkDown-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ss7LinkDown_Canceled.setStatus('current')
if mibBuilder.loadTexts: ss7LinkDown_Canceled.setDescription('SS7 link/s is/are up now.')
ussdb_RunSlave = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 24)).setLabel("ussdb-RunSlave").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_RunSlave.setStatus('current')
if mibBuilder.loadTexts: ussdb_RunSlave.setDescription('Ussdbrowser was started on slave Node!')
ussdb_RunSlave_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 25)).setLabel("ussdb-RunSlave-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_RunSlave_Canceled.setStatus('current')
if mibBuilder.loadTexts: ussdb_RunSlave_Canceled.setDescription('Ussdbrowser is running in noramal mode now.')
ussdb_HeartbeatDown = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 26)).setLabel("ussdb-HeartbeatDown").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_HeartbeatDown.setStatus('current')
if mibBuilder.loadTexts: ussdb_HeartbeatDown.setDescription('Heartbeat is down!')
ussdb_HeartbeatDown_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 27)).setLabel("ussdb-HeartbeatDown-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_HeartbeatDown_Canceled.setStatus('current')
if mibBuilder.loadTexts: ussdb_HeartbeatDown_Canceled.setDescription('Heartbeat is down!')
ussdb_ConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 28)).setLabel("ussdb-ConnectionDown").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_ConnectionDown.setStatus('current')
if mibBuilder.loadTexts: ussdb_ConnectionDown.setDescription('USSD Browser floating IP is down on the Master Node!')
ussdb_ConnectionDown_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 29)).setLabel("ussdb-ConnectionDown-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_ConnectionDown_Canceled.setStatus('current')
if mibBuilder.loadTexts: ussdb_ConnectionDown_Canceled.setDescription('USSD Browser floating IP is up.')
ussdb_Switched = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 30)).setLabel("ussdb-Switched").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_Switched.setStatus('current')
if mibBuilder.loadTexts: ussdb_Switched.setDescription('Ussdbrowser Master has been switched!!')
ussdb_Switched_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 31)).setLabel("ussdb-Switched-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_Switched_Canceled.setStatus('current')
if mibBuilder.loadTexts: ussdb_Switched_Canceled.setDescription('Ussdbrowser Master has been switched - canceled!!')
ussdb_AppDown = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 32)).setLabel("ussdb-AppDown").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_AppDown.setStatus('current')
if mibBuilder.loadTexts: ussdb_AppDown.setDescription('Ussdbrowser Application down!!')
ussdb_AppDown_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 33)).setLabel("ussdb-AppDown-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_AppDown_Canceled.setStatus('current')
if mibBuilder.loadTexts: ussdb_AppDown_Canceled.setDescription('Ussdbrowser Application is up-Canceled')
ussdb_DbDown = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 34)).setLabel("ussdb-DbDown").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_DbDown.setStatus('current')
if mibBuilder.loadTexts: ussdb_DbDown.setDescription('Database Down!')
ussdb_DbDown_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 35)).setLabel("ussdb-DbDown-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: ussdb_DbDown_Canceled.setStatus('current')
if mibBuilder.loadTexts: ussdb_DbDown_Canceled.setDescription('Database is up!')
mcr_DBbackup = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 36)).setLabel("mcr-DBbackup").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_DBbackup.setStatus('current')
if mibBuilder.loadTexts: mcr_DBbackup.setDescription('DB backup problem')
mcr_DBbackup_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 37)).setLabel("mcr-DBbackup-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_DBbackup_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_DBbackup_Canceled.setDescription('DB backup problem alarm is canceled')
voicetrunks = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 38)).setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: voicetrunks.setStatus('current')
if mibBuilder.loadTexts: voicetrunks.setDescription('Voice trunk Failure')
voicetrunks_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 39)).setLabel("voicetrunks-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: voicetrunks_Canceled.setStatus('current')
if mibBuilder.loadTexts: voicetrunks_Canceled.setDescription('Voice trunk Failure canceled')
nodedown = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 40)).setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: nodedown.setStatus('current')
if mibBuilder.loadTexts: nodedown.setDescription('Node seems to be down')
nodedown_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 41)).setLabel("nodedown-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: nodedown_Canceled.setStatus('current')
if mibBuilder.loadTexts: nodedown_Canceled.setDescription('Node seems to be up now.')
test = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 42)).setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: test.setStatus('current')
if mibBuilder.loadTexts: test.setDescription('Test alarm')
test_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 43)).setLabel("test-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: test_Canceled.setStatus('current')
if mibBuilder.loadTexts: test_Canceled.setDescription('Test alarm canceled')
mcr_MSA2012_Problem = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 44)).setLabel("mcr-MSA2012-Problem").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_MSA2012_Problem.setStatus('current')
if mibBuilder.loadTexts: mcr_MSA2012_Problem.setDescription('MSA 2012 storage problem detected. Possible problems: 1.Hard disk failed. 2.Power supply failed. 3.Network connection failed. 4.Controller failed.')
mcr_MSA2012_Problem_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 45)).setLabel("mcr-MSA2012-Problem-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_MSA2012_Problem_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_MSA2012_Problem_Canceled.setDescription('MSA 2012 storage problem detected - canceled')
mcr_TEMPERATURE_CUST = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 46)).setLabel("mcr-TEMPERATURE-CUST").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_TEMPERATURE_CUST.setStatus('current')
if mibBuilder.loadTexts: mcr_TEMPERATURE_CUST.setDescription('Temperature alarm!!Possible high temperature for zones on the server. To check the status execute commands hplog -t')
mcr_TEMPERATURE_CUST_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 47)).setLabel("mcr-TEMPERATURE-CUST-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_TEMPERATURE_CUST_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_TEMPERATURE_CUST_Canceled.setDescription('Temperature is in normal level.')
mcr_DBReplication = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 48)).setLabel("mcr-DBReplication").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_DBReplication.setStatus('current')
if mibBuilder.loadTexts: mcr_DBReplication.setDescription("Replication problem detected.Check status with command 'show slave status' from mysql cli for more information.")
mcr_DBReplication_Canceled = NotificationType((1, 3, 6, 1, 4, 1, 30374, 3, 1, 0, 49)).setLabel("mcr-DBReplication-Canceled").setObjects(("OPCD-SUPPORT-MIB-V2", "mcr_Host"), ("OPCD-SUPPORT-MIB-V2", "mcr_Severity"), ("OPCD-SUPPORT-MIB-V2", "mcr_Text"))
if mibBuilder.loadTexts: mcr_DBReplication_Canceled.setStatus('current')
if mibBuilder.loadTexts: mcr_DBReplication_Canceled.setDescription('Replication is working without problems.')
mibBuilder.exportSymbols("OPCD-SUPPORT-MIB-V2", mcr_MysqlService_Canceled=mcr_MysqlService_Canceled, mcr_HddFreeSpace=mcr_HddFreeSpace, ussdb_Switched_Canceled=ussdb_Switched_Canceled, definitions=definitions, mcr_MSA2012_Problem_Canceled=mcr_MSA2012_Problem_Canceled, mcr_SwitchConnection_Canceled=mcr_SwitchConnection_Canceled, voicetrunks_Canceled=voicetrunks_Canceled, voicetrunks=voicetrunks, mcr_UpsStatus_Canceled=mcr_UpsStatus_Canceled, ussdb_DbDown=ussdb_DbDown, mcr_TEMPERATURE_CUST_Canceled=mcr_TEMPERATURE_CUST_Canceled, vars=vars, ocsupport=ocsupport, ussdb_HeartbeatDown=ussdb_HeartbeatDown, mcr_HddBayCheck_Canceled=mcr_HddBayCheck_Canceled, mcr_FailedEth=mcr_FailedEth, mcr_Host=mcr_Host, mcr_DbFloatingIp_Canceled=mcr_DbFloatingIp_Canceled, ussdb_RunSlave=ussdb_RunSlave, ussdb_DbDown_Canceled=ussdb_DbDown_Canceled, mcr_FailedEth_Canceled=mcr_FailedEth_Canceled, mcr_UpsStatus=mcr_UpsStatus, mcr_TEMPERATURE=mcr_TEMPERATURE, opencode_systems=opencode_systems, mcr_FAN=mcr_FAN, mcr_MysqlService=mcr_MysqlService, ussdb_RunSlave_Canceled=ussdb_RunSlave_Canceled, ussdb_ConnectionDown=ussdb_ConnectionDown, mcr_TEMPERATURE_Canceled=mcr_TEMPERATURE_Canceled, mcr_Severity=mcr_Severity, mcr_Text=mcr_Text, mcr_DbFloatingIp=mcr_DbFloatingIp, mcr_DBbackup_Canceled=mcr_DBbackup_Canceled, nodedown=nodedown, ocsupport_traps=ocsupport_traps, test_Canceled=test_Canceled, mcr_DBReplication_Canceled=mcr_DBReplication_Canceled, mcr_MSA2012_Problem=mcr_MSA2012_Problem, ussdb_Switched=ussdb_Switched, mcr_FAN_Canceled=mcr_FAN_Canceled, ussdb_AppDown=ussdb_AppDown, ss7LinkDown=ss7LinkDown, mcr_POWER=mcr_POWER, mcr_POWER_Canceled=mcr_POWER_Canceled, mcr_HddBayCheck=mcr_HddBayCheck, ussdb_HeartbeatDown_Canceled=ussdb_HeartbeatDown_Canceled, test=test, ussdb_ConnectionDown_Canceled=ussdb_ConnectionDown_Canceled, mcr_DBReplication=mcr_DBReplication, ss7LinkDown_Canceled=ss7LinkDown_Canceled, ussdb_AppDown_Canceled=ussdb_AppDown_Canceled, nodedown_Canceled=nodedown_Canceled, mcr_SwitchConnection=mcr_SwitchConnection, mcr_HddFreeSpace_Canceled=mcr_HddFreeSpace_Canceled, mcr_TEMPERATURE_CUST=mcr_TEMPERATURE_CUST, mcr_DBbackup=mcr_DBbackup, PYSNMP_MODULE_ID=opencode_systems)
