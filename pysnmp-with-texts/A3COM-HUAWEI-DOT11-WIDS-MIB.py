#
# PySNMP MIB module A3COM-HUAWEI-DOT11-WIDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-DOT11-WIDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:04:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
H3cDot11ObjectIDType, H3cDot11RadioScopeType, H3cDot11RadioType, H3cDot11SSIDStringType, h3cDot11, H3cDot11ChannelScopeType = mibBuilder.importSymbols("A3COM-HUAWEI-DOT11-REF-MIB", "H3cDot11ObjectIDType", "H3cDot11RadioScopeType", "H3cDot11RadioType", "H3cDot11SSIDStringType", "h3cDot11", "H3cDot11ChannelScopeType")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, IpAddress, ModuleIdentity, Counter64, Unsigned32, Counter32, Bits, MibIdentifier, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "IpAddress", "ModuleIdentity", "Counter64", "Unsigned32", "Counter32", "Bits", "MibIdentifier", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType")
DateAndTime, MacAddress, TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "MacAddress", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
h3cDot11WIDS = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5))
h3cDot11WIDS.setRevisions(('2010-05-31 18:00', '2009-07-29 18:00', '2009-05-07 20:00', '2008-07-25 19:00', '2007-06-19 19:00', '2007-05-16 19:00', '2006-08-20 19:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cDot11WIDS.setRevisionsDescriptions(('Modified to add new nodes.', 'Modified to add new nodes.', 'Add new nodes and table to support new featrues of WIDS.', 'Add new nodes to support new featrues of WIDS.', 'To fix bugs in the MIB file.', 'To fix bugs in the MIB file.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: h3cDot11WIDS.setLastUpdated('201005311800Z')
if mibBuilder.loadTexts: h3cDot11WIDS.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cDot11WIDS.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: h3cDot11WIDS.setDescription('This MIB provides information about WIDS feature. GLOSSARY Wireless Intrusion Detection Sensor (WIDS) WIDS is designed to be employed in an area that is serviced by an existing wireless network. It aids in the early detection of malicious outsider attacks and intrusions via wireless networks. Rogue AP A rogue access point is any Wi-Fi access point connected to the network without authorization. As it is not authorized, if there is any weakness in the AP, the hacker will have chance to compromise the network. Rogue Station It is similiar to Rogue AP, while it is a station. Monitor AP An AP will scan or listen to the air, and try to detect wireless attack in the network. Some AP products will work only in monitor role, while some AP products could switch between normal AP role (only provide wireless access service)and monitor AP role. Ad Hoc Mode Station could work under Ad hoc mode, then they could directly do peer-to-peer communication without other device support.')
class H3cDot11WIDSDevType(TextualConvention, Integer32):
    description = 'The type of device detected.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("client", 1), ("ap", 2), ("adhoc", 3), ("wirelessBridge", 4), ("unknown", 5))

class H3cDot11WIDSDevPermitType(TextualConvention, Integer32):
    description = 'Represents whether the detected device is permitted or a rogue.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("permit", 1), ("rogue", 2))

class H3cDot11WIDSAtkType(TextualConvention, Integer32):
    description = "The type of attack. This object has following defined values: 'act': Action Frame 'asr': Association Request 'aur': Authentication Request 'daf': Deauthentication Frame 'dar': Disassociation Request 'ndf': Null Data Frame 'pbr': Probe Request 'rar': Reassociation Request 'saf': Spoofed Disassociation Frame 'sdf': Spoofed Deauthentication Frame 'wiv': Weak IV Detected"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("act", 1), ("asr", 2), ("aur", 3), ("daf", 4), ("dar", 5), ("ndf", 6), ("pbr", 7), ("rar", 8), ("saf", 9), ("sdf", 10), ("wiv", 11), ("unknown", 12))

h3cDot11WIDSConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1))
h3cDot11WIDSGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1))
h3cDot11WIDSDetectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2))
h3cDot11WIDSNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3))
h3cDot11WIDSScanMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("auto", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11WIDSScanMode.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSScanMode.setDescription('Represents the scope of channels to be scanned. The following value are supported all(1) - Do scan on all the channels. auto(2) - Do scan for the channels that automatically selected by WIDS.')
h3cDot11WIDSScanChannelList = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11WIDSScanChannelList.setStatus('obsolete')
if mibBuilder.loadTexts: h3cDot11WIDSScanChannelList.setDescription('Represents the channel scope to be scanned when h3cDot11WIDSScanMode is configurated as channelSpec mode. Each channel value will be separated by comma character.')
h3cDot11CntMsrMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 3), Bits().clone(namedValues=NamedValues(("rogue", 0), ("adhoc", 1), ("config", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11CntMsrMode.setStatus('current')
if mibBuilder.loadTexts: h3cDot11CntMsrMode.setDescription('Represents the countermeasures mode.')
h3cDot11DevAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1800))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11DevAgingTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DevAgingTime.setDescription('Represents the age time for entries in the detected device table. If an entry is not detected within the interval, it is deleted from the detected device table. If the deleted entry is that of a rogue, it is added into the rogue history table.')
h3cDot11DynBlkListEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11DynBlkListEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlkListEnable.setDescription("Represents whether the dynamic blacklist feature is enabled or not. 'true' : Enable the dynamic blacklist feature to filter out unwanted clients, which will not get associated. 'false' : Disable the dynamic blacklist feature.")
h3cDot11DynBlkListLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11DynBlkListLifeTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlkListLifeTime.setDescription('Represents the lifetime for dynamic blacklist entries. If a dynamic blacklist entry is not detected within the lifetime, the entry will be removed from the dynamic blacklist. The lifetime becomes active only if dynamic blacklist feature is enabled.')
h3cDot11FloodAtkDctEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11FloodAtkDctEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11FloodAtkDctEnable.setDescription("Represents whether detection of flood attack is enabled or not. 'true' : Enable the detection of flood attack. 'false' : Disable the detection of flood attack.")
h3cDot11SpoofAtkDctEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11SpoofAtkDctEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11SpoofAtkDctEnable.setDescription("Represents whether detection of Spoof attack is enabled or not. 'true' : Enable the detection of Spoof attack. 'false' : Disable the detection of Spoof attack.")
h3cDot11WeakIVAtkDctEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11WeakIVAtkDctEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WeakIVAtkDctEnable.setDescription("Represents whether detection of weak-iv attack is enabled or not. 'true' : Enable the detection of weak-iv attack. 'false' : Disable the detection of weak-iv attack.")
h3cDot11ResetWIDSRogueHistory = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetWIDSRogueHistory.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetWIDSRogueHistory.setDescription('This object is used to clear all entries from the rogue history table. It will return false for get operation.')
h3cDot11ResetWIDSHistroy = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetWIDSHistroy.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetWIDSHistroy.setDescription('This object is used to clear the history information of attacks detected in the WLAN system. It will return false for get operation.')
h3cDot11ResetWIDSStatistics = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetWIDSStatistics.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetWIDSStatistics.setDescription('This object is used to clear the statistics of attacks detected in the WLAN system. It will return false for get operation.')
h3cDot11ResetAllDynBlkList = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetAllDynBlkList.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetAllDynBlkList.setDescription('This object is used to remove all entries from the dynamic blacklist. It will return false for get operation.')
h3cDot11ResetAllStcBlkList = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetAllStcBlkList.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetAllStcBlkList.setDescription('This object is used to remove all entries from the static blacklist. It will return false for get operation.')
h3cDot11ResetAllWhtBlkList = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetAllWhtBlkList.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetAllWhtBlkList.setDescription('This object is used to remove all entries from the static whitelist. It will return false for get operation.')
h3cDot11ResetAllDctRogueAP = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetAllDctRogueAP.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetAllDctRogueAP.setDescription('This object is used to clear the information of all detected rogue APs. It will return false for get operation.')
h3cDot11ResetAllDctRogueSta = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetAllDctRogueSta.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetAllDctRogueSta.setDescription('This object is used to clear the information of all detected rogue clients. It will return false for get operation.')
h3cDot11ResetAllDctAdhoc = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetAllDctAdhoc.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetAllDctAdhoc.setDescription('This object is used to clear the information of all detected ad hoc devices. It will return false for get operation.')
h3cDot11ResetAllDctDevice = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetAllDctDevice.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetAllDctDevice.setDescription('This object is used to clear the information of all detected devices. It will return false for get operation.')
h3cDot11ResetAllDctSSID = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11ResetAllDctSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11ResetAllDctSSID.setDescription('This object is used to clear the information of all detected SSIDs. It will return false for get operation.')
h3cDot11WidsFloodInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 21), Unsigned32().clone(1)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11WidsFloodInterval.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WidsFloodInterval.setDescription('The interval of WIDS flood detection.')
h3cDot11WidsBlackListThreshold = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 22), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11WidsBlackListThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WidsBlackListThreshold.setDescription('When flood attack exceeds the value of this node, the MAC address will be added into black list.')
h3cDot11SSIDFilterOnOff = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11SSIDFilterOnOff.setStatus('current')
if mibBuilder.loadTexts: h3cDot11SSIDFilterOnOff.setDescription('Represents whether the SSID permit feature is enabled or not.')
h3cDot11BSSIDFilterOnOff = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11BSSIDFilterOnOff.setStatus('current')
if mibBuilder.loadTexts: h3cDot11BSSIDFilterOnOff.setDescription('Represents whether the BSSID permit feature is enabled or not.')
h3cDot11WIDSPermitVendorTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 2), )
if mibBuilder.loadTexts: h3cDot11WIDSPermitVendorTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSPermitVendorTable.setDescription('The table provides the permitted vendor list, and each vendor will be identified by OUI. The legal device should be made by the permitted vendors.')
h3cDot11WIDSPermitVendorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11VendorOUI"))
if mibBuilder.loadTexts: h3cDot11WIDSPermitVendorEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSPermitVendorEntry.setDescription('Each entry provides the information of permitted vendor.')
h3cDot11VendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: h3cDot11VendorOUI.setStatus('current')
if mibBuilder.loadTexts: h3cDot11VendorOUI.setDescription('Represents the vendor OUI information of the wireless device.')
h3cDot11PermitVendorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11PermitVendorRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11PermitVendorRowStatus.setDescription('The status of this table entry.')
h3cDot11VendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11VendorName.setStatus('current')
if mibBuilder.loadTexts: h3cDot11VendorName.setDescription('Represents the vendor name of the wireless device.')
h3cDot11WIDSPermitSSIDTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 3), )
if mibBuilder.loadTexts: h3cDot11WIDSPermitSSIDTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSPermitSSIDTable.setDescription('The table represents the list of SSID could be permitted in the wireless network.')
h3cDot11WIDSPermitSSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11PermitSSID"))
if mibBuilder.loadTexts: h3cDot11WIDSPermitSSIDEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSPermitSSIDEntry.setDescription('Each entry provides the information of permitted SSID.')
h3cDot11PermitSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 3, 1, 1), H3cDot11SSIDStringType().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: h3cDot11PermitSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11PermitSSID.setDescription('Represents the permitted SSID in the wireless network.')
h3cDot11PermitSSIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11PermitSSIDRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11PermitSSIDRowStatus.setDescription('The status of this table entry.')
h3cDot11PermitSSIDDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11PermitSSIDDetected.setStatus('current')
if mibBuilder.loadTexts: h3cDot11PermitSSIDDetected.setDescription('Represents whether the permitted SSID is detected or not.')
h3cDot11WIDSIgnoreListTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 4), )
if mibBuilder.loadTexts: h3cDot11WIDSIgnoreListTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSIgnoreListTable.setDescription('The table provides the MAC address list of stations or APs, and WIDS always take them as legal stations or APs.')
h3cDot11WIDSIgnoreListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11IgnoreMAC"))
if mibBuilder.loadTexts: h3cDot11WIDSIgnoreListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSIgnoreListEntry.setDescription('Each entry contains the MAC address of station or AP, and WIDS always take it as legal station or AP.')
h3cDot11IgnoreMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11IgnoreMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11IgnoreMAC.setDescription('Represents the MAC address of station or AP, and WIDS always take it as legal station or AP.')
h3cDot11IgnoreListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11IgnoreListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11IgnoreListRowStatus.setDescription('The status of this table entry.')
h3cDot11IgnoreMACDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11IgnoreMACDetected.setStatus('current')
if mibBuilder.loadTexts: h3cDot11IgnoreMACDetected.setDescription('Represents whether the MAC address detected or not.')
h3cDot11IgnoreDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 4, 1, 4), H3cDot11WIDSDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11IgnoreDevType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11IgnoreDevType.setDescription('Represents the type of the MAC address detected. The value of this object always is unknown if the MAC address is not detected.')
h3cDot11WIDSAttackListTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 5), )
if mibBuilder.loadTexts: h3cDot11WIDSAttackListTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAttackListTable.setDescription('The table provides the MAC address list of rogue APs or rogue stations, the WIDS will take countermeasure as per the MAC address list.')
h3cDot11WIDSAttackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11AttackDeviceMac"))
if mibBuilder.loadTexts: h3cDot11WIDSAttackListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAttackListEntry.setDescription('Each entry contains the MAC address of rogue AP or rogue station, and the countermeasure will be taken for it.')
h3cDot11AttackDeviceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11AttackDeviceMac.setStatus('current')
if mibBuilder.loadTexts: h3cDot11AttackDeviceMac.setDescription('Represents the MAC address of rogue AP or rogue station, and the countermeasure will be taken for it.')
h3cDot11AttackListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11AttackListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11AttackListRowStatus.setDescription('The status of this table entry.')
h3cDot11AttackDevDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11AttackDevDetected.setStatus('current')
if mibBuilder.loadTexts: h3cDot11AttackDevDetected.setDescription('Represents whether the assigned MAC address in attack list is detected or not.')
h3cDot11AttackDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 5, 1, 4), H3cDot11WIDSDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11AttackDevType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11AttackDevType.setDescription('Represents the type of detected MAC address in attack list. If the MAC address is not detected, it will return unknown(5) for get operation.')
h3cDot11StaticWhiteListTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 6), )
if mibBuilder.loadTexts: h3cDot11StaticWhiteListTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaticWhiteListTable.setDescription('The table provides the information of whitelist.')
h3cDot11StaticWhiteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11StaticWhiteListMAC"))
if mibBuilder.loadTexts: h3cDot11StaticWhiteListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaticWhiteListEntry.setDescription('Each entry contains the information of whitelist.')
h3cDot11StaticWhiteListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11StaticWhiteListMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaticWhiteListMAC.setDescription('Represents the MAC addresses in whitelist.')
h3cDot11StaticWhiteListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11StaticWhiteListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaticWhiteListRowStatus.setDescription('The status of this table entry.')
h3cDot11StaticBlackListTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 7), )
if mibBuilder.loadTexts: h3cDot11StaticBlackListTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaticBlackListTable.setDescription('The table provides the information of static blacklist.')
h3cDot11StaticBlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11StaticBlackListMAC"))
if mibBuilder.loadTexts: h3cDot11StaticBlackListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaticBlackListEntry.setDescription('Each entry contains the information of static blacklist.')
h3cDot11StaticBlackListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11StaticBlackListMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaticBlackListMAC.setDescription('Represents the MAC addresses in static blacklist.')
h3cDot11StaticBlackListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11StaticBlackListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaticBlackListRowStatus.setDescription('The status of this table entry.')
h3cDot11WIDSPermitBSSIDTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 8), )
if mibBuilder.loadTexts: h3cDot11WIDSPermitBSSIDTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSPermitBSSIDTable.setDescription('The table represents the list of BSSID could be permitted in the wireless network.')
h3cDot11WIDSPermitBSSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11PermitBSSID"))
if mibBuilder.loadTexts: h3cDot11WIDSPermitBSSIDEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSPermitBSSIDEntry.setDescription('Each entry provides the information of permitted BSSID.')
h3cDot11PermitBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 8, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11PermitBSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11PermitBSSID.setDescription('Represents the permitted BSSID in the wireless network.')
h3cDot11PermitBSSIDDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 8, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11PermitBSSIDDetected.setStatus('current')
if mibBuilder.loadTexts: h3cDot11PermitBSSIDDetected.setDescription('Represents whether the permitted BSSID is detected or not.')
h3cDot11PermitBSSIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11PermitBSSIDRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11PermitBSSIDRowStatus.setDescription('Represents the row status of permit BSSID table.')
h3cDot11WIDSRogueAPTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1), )
if mibBuilder.loadTexts: h3cDot11WIDSRogueAPTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueAPTable.setDescription('The table represents the list of possible BSS information for rogue APs detected by the WIDS.')
h3cDot11WIDSRogueAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11RogueAPBSSMAC"))
if mibBuilder.loadTexts: h3cDot11WIDSRogueAPEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueAPEntry.setDescription('Each entry contains possible BSS information of each rogue AP detected by WIDS.')
h3cDot11RogueAPBSSMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11RogueAPBSSMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPBSSMAC.setDescription('Represents the BSS MAC address of rogue AP.')
h3cDot11RogueAPVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPVendorName.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPVendorName.setDescription('Represents the vendor name of rogue AP.')
h3cDot11RogueAPMonitorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPMonitorNum.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPMonitorNum.setDescription('Represents the number of monitor APs which detected the rogue AP.')
h3cDot11RogueAPFirstDetectTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPFirstDetectTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPFirstDetectTm.setDescription('Represents the time that AP was detected as a rogue AP for the first time.')
h3cDot11RogueAPLastDetectTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPLastDetectTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPLastDetectTm.setDescription('Represents the time that AP was detected as a rogue AP for the last time.')
h3cDot11RogueAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 6), H3cDot11SSIDStringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPSSID.setDescription('Represents the SSID broadcasted by rogue AP.')
h3cDot11RogueAPMaxSigStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPMaxSigStrength.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPMaxSigStrength.setDescription('Represents the maximal value of signal strength that WIDS received from the rogue AP.')
h3cDot11RogueAPChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 8), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPChannel.setDescription('Represents on which radio channel of the rogue AP the maximal signal strength was received.')
h3cDot11RogueAPBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 9), Integer32()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPBeaconInterval.setDescription('Represents the interval for Beacon management frame of rogue AP.')
h3cDot11RogueAPAttackedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPAttackedStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPAttackedStatus.setDescription('Represents whether the countermeasure have taken for the rogue AP.')
h3cDot11RogueAPToIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RogueAPToIgnore.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPToIgnore.setDescription('Represents whether the rogue AP will be taken as a rogue AP. If the value is true, NMS should not display the rogue AP as NMS display rogue AP list, and the MAC address will be automatically added into h3cDot11WIDSIgnoreListTable. If the value is false, NMS will take it as a rogue AP. ')
h3cDot11RogueAPEncryptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPEncryptStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPEncryptStatus.setDescription('Represents whether the rogue AP encrypt the frame or not.')
h3cDot11RogueAPReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RogueAPReset.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPReset.setDescription('This object is used to clear information of assigned AP. The information of AP which detect assigned rogue AP will be cleared together. It will return false for get operation.')
h3cDot11RogueAPFirstDetectTmStr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPFirstDetectTmStr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPFirstDetectTmStr.setDescription('Represents the time that AP was detected as a rogue AP for the first time.')
h3cDot11RogueAPLastDetectTmStr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueAPLastDetectTmStr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueAPLastDetectTmStr.setDescription('Represents the time that AP was detected as a rogue AP for the last time.')
h3cDot11WIDSRogueAPExtTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2), )
if mibBuilder.loadTexts: h3cDot11WIDSRogueAPExtTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueAPExtTable.setDescription('As each rogue AP could be detected by multiple monitor APs, each monitor AP could have some kind of detailed information about a specific rogue AP. In the h3cDot11WIDSRogueAPTable table, the detailed information for a specific rogue AP will be summarized from information in the h3cDot11WIDSRogueAPExtTable table. For example, multiple monitor APs could receive RF signal of one rogue AP, and each monitor AP has its maximum signal strength by itself. The information will be kept as h3cDot11DetectMaxAPSigStrength in the h3cDot11WIDSRogueAPExtTable table. While only the maximum value among all the h3cDot11DetectMaxAPSigStrength for each monitor AP will be kept in the h3cDot11WIDSRogueAPTable as h3cDot11RogueAPMaxSigStrength.')
h3cDot11WIDSRogueAPExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11RogueAPBSSMAC"), (0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAPID"))
if mibBuilder.loadTexts: h3cDot11WIDSRogueAPExtEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueAPExtEntry.setDescription('Each entry contains information of the rogue AP detected by each monitor AP.')
h3cDot11WIDSAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2, 1, 1), H3cDot11ObjectIDType())
if mibBuilder.loadTexts: h3cDot11WIDSAPID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAPID.setDescription('To uniquely identify each AP, and relation-ship between h3cDot11WIDSAPID and AP device will be static.')
h3cDot11DetectCurAPSigStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2, 1, 2), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectCurAPSigStrength.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectCurAPSigStrength.setDescription('Represents the current value of signal strength that WIDS monitor AP received from the rogue AP.')
h3cDot11DetectAPByChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2, 1, 3), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectAPByChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectAPByChannel.setDescription('Represents on which radio channel that WIDS monitor AP detected the rogue AP.')
h3cDot11DetectAPByRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2, 1, 4), H3cDot11RadioScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectAPByRadioID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectAPByRadioID.setDescription('Represents on which radio the monitor AP has detected the rogue AP.')
h3cDot11AttackAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11AttackAPStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11AttackAPStatus.setDescription('Represents whether monitor AP have taken countermeasure on the rogue AP.')
h3cDot11DetectAPFirstTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectAPFirstTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectAPFirstTm.setDescription('Represents the time that monitor AP detected the rogue AP for the first time.')
h3cDot11DetectAPLastTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectAPLastTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectAPLastTm.setDescription('Represents the time that monitor AP detected the rogue AP for the last time.')
h3cDot11WIDSRogueStaTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3), )
if mibBuilder.loadTexts: h3cDot11WIDSRogueStaTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueStaTable.setDescription('The table represents the list of rogue stations detected by the WIDS.')
h3cDot11WIDSRogueStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11RogueStaMAC"))
if mibBuilder.loadTexts: h3cDot11WIDSRogueStaEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueStaEntry.setDescription('Each entry contains information of each rogue station.')
h3cDot11RogueStaMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11RogueStaMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaMAC.setDescription('Represents the MAC address of rogue station.')
h3cDot11RogueStaVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaVendorName.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaVendorName.setDescription('Represents the vendor name of rogue station.')
h3cDot11RogueStaMonitorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaMonitorNum.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaMonitorNum.setDescription('Represents the number of monitor APs which detected the rogue station.')
h3cDot11RogueStaFirstDetectTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaFirstDetectTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaFirstDetectTm.setDescription('Represents the time that station was detected as a rogue station for the first time.')
h3cDot11RogueStaLastDetectTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaLastDetectTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaLastDetectTm.setDescription('Represents the time that station was detected as a rogue station for the last time.')
h3cDot11RogueStaAccessBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaAccessBSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaAccessBSSID.setDescription('Represents BSS MAC address that rogue station try to access.')
h3cDot11RogueStaMaxSigStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaMaxSigStrength.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaMaxSigStrength.setDescription('Represents the maximal value of signal strength that WIDS received from the rogue station.')
h3cDot11RogueStaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 8), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaChannel.setDescription('Represents on which radio channel the maximal signal strength was received.')
h3cDot11RogueStaAttackedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaAttackedStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaAttackedStatus.setDescription('Represents whether the countermeasure have taken for the rogue station.')
h3cDot11RogueStaToIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RogueStaToIgnore.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaToIgnore.setDescription('Represents whether the rogue AP will be taken as a rogue station. If the value is true, NMS should not display the rogue station as NMS display rogue station list, and the MAC address will be automatically added into h3cDot11WIDSIgnoreListTable. If the value is false, NMS will take it as a rogue station. ')
h3cDot11RogueStaAdHocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaAdHocStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaAdHocStatus.setDescription('Represents whether the rogue station work on the Ad Hoc mode or not.')
h3cDot11RogueStaReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RogueStaReset.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaReset.setDescription('This object is used to clear information of assigned station. The information of AP which detects assigned rogue station will be cleared together. It will return false for get operation.')
h3cDot11RogueStaFirstDetectTmStr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaFirstDetectTmStr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaFirstDetectTmStr.setDescription('Represents the time that station was detected as a rogue station for the first time.')
h3cDot11RogueStaLastDetectTmStr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RogueStaLastDetectTmStr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RogueStaLastDetectTmStr.setDescription('Represents the time that station was detected as a rogue station for the last time.')
h3cDot11WIDSRogueStaExtTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 4), )
if mibBuilder.loadTexts: h3cDot11WIDSRogueStaExtTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueStaExtTable.setDescription('As each rogue station could be detected by multiple monitor APs, each monitor AP could have some kind of detailed information about a specific rogue station. In the h3cDot11WIDSRogueStaTable table, the detailed information for a specific rogue station will be summarized from information in the h3cDot11WIDSRogueStaExtTable table. For example, multiple monitor APs could receive RF signal of one rogue station, and each monitor AP has its maximum signal strength by itself. The information will be kept as h3cDot11DetectMaxStaSigStrength in the h3cDot11WIDSRogueStaExtTable table. While only the maximum value among all the h3cDot11DetectMaxStaSigStrength for each monitor AP will be kept in the h3cDot11WIDSRogueStaTable as h3cDot11RogueStaMaxSigStrength.')
h3cDot11WIDSRogueStaExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11RogueStaMAC"), (0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAPID"))
if mibBuilder.loadTexts: h3cDot11WIDSRogueStaExtEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueStaExtEntry.setDescription('Each entry contains information of rogue station detected by each monitor AP.')
h3cDot11DetectCurStaSigStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 4, 1, 1), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectCurStaSigStrength.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectCurStaSigStrength.setDescription('Represents the current value of signal strength that WIDS monitor AP received from the rogue station.')
h3cDot11DetectStaByChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 4, 1, 2), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectStaByChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectStaByChannel.setDescription('Represents on which radio channel the maximal signal strength was received.')
h3cDot11DetectStaByRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 4, 1, 3), H3cDot11RadioScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectStaByRadioID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectStaByRadioID.setDescription('Represents which radio on the monitor AP has detected the rogue station.')
h3cDot11AttackStaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11AttackStaStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11AttackStaStatus.setDescription('Represents whether monitor AP have taken countermeasure for the rogue station.')
h3cDot11DetectStaFirstTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectStaFirstTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectStaFirstTm.setDescription('Represents the time that monitor AP detected the rogue station for the first time.')
h3cDot11DetectStaLastTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DetectStaLastTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DetectStaLastTm.setDescription('Represents the time that monitor AP detected the rogue station for the last time.')
h3cDot11WIDSDetectedDevTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5), )
if mibBuilder.loadTexts: h3cDot11WIDSDetectedDevTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDetectedDevTable.setDescription('This Table contains information of detected devices.')
h3cDot11WIDSDetectedDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSDevMAC"))
if mibBuilder.loadTexts: h3cDot11WIDSDetectedDevEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDetectedDevEntry.setDescription('Each entry contains information of detected devices.')
h3cDot11WIDSDevMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11WIDSDevMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevMAC.setDescription('Represents MAC address of the device detected.')
h3cDot11WIDSDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 2), H3cDot11WIDSDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevType.setDescription('Represents type of the device detected.')
h3cDot11WIDSDevPermitType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 3), H3cDot11WIDSDevPermitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevPermitType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevPermitType.setDescription('Represents whether the device detected is a rogue device or not.')
h3cDot11WIDSDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevVendor.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevVendor.setDescription('Represents Vendor of the detected device.')
h3cDot11WIDSDevMonitorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevMonitorNum.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevMonitorNum.setDescription('Represents the number of active APs that detect the device.')
h3cDot11WIDSDevSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevSSID.setDescription('Represents the service set identifier for the ESS of the device.')
h3cDot11WIDSDevBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevBSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevBSSID.setDescription('Represents the basic service set identifier of the detected device.')
h3cDot11WIDSDevChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 8), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevChannel.setDescription('Represents the channel in which the device was last detected.')
h3cDot11WIDSDevMaxRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 9), Integer32()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevMaxRSSI.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevMaxRSSI.setDescription('Represents the maximum detected RSSI of the device.')
h3cDot11WIDSDevBeaconIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 10), Integer32()).setUnits('millionsecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevBeaconIntvl.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevBeaconIntvl.setDescription('Represents the beacon interval for the detected AP.')
h3cDot11WIDSDevFstDctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevFstDctTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevFstDctTime.setDescription('Represents the time at which the device was first detected.')
h3cDot11WIDSDevLstDctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevLstDctTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevLstDctTime.setDescription('Represents the time at which the rogue AP was detected last time.')
h3cDot11WIDSDevReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11WIDSDevReset.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevReset.setDescription('This object is used to clears the information of the device detected in the WLAN. It will return false for get operation.')
h3cDot11WIDSDevSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 5, 1, 14), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSDevSnr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDevSnr.setDescription('Represents SNR of the device detected.')
h3cDot11WIDSRptAPTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 6), )
if mibBuilder.loadTexts: h3cDot11WIDSRptAPTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRptAPTable.setDescription('This Table contains information of the AP which detected device in the WLAN.')
h3cDot11WIDSRptAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSDevMAC"), (0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSRptAPMAC"))
if mibBuilder.loadTexts: h3cDot11WIDSRptAPEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRptAPEntry.setDescription('Each entry contains information of the AP which detected device in the WLAN.')
h3cDot11WIDSRptAPMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11WIDSRptAPMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRptAPMAC.setDescription('Represents the MAC address of the AP that detected the device.')
h3cDot11WIDSRptAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRptAPName.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRptAPName.setDescription('Represents the name of the AP that detected the device.')
h3cDot11WIDSRptAPRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 6, 1, 3), H3cDot11RadioScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRptAPRadioID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRptAPRadioID.setDescription('Represents the radio index of the AP that detected the device.')
h3cDot11WIDSRptAPMaxRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRptAPMaxRSSI.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRptAPMaxRSSI.setDescription('Represents the maximum detected RSSI of the device.')
h3cDot11WIDSRptAPFstDctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRptAPFstDctTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRptAPFstDctTime.setDescription('Represents the time at which the rogue AP was detected first time.')
h3cDot11WIDSRptAPLstDctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRptAPLstDctTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRptAPLstDctTime.setDescription('Represents the time at which the rogue AP was detected last time.')
h3cDot11DynBlackListTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 7), )
if mibBuilder.loadTexts: h3cDot11DynBlackListTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlackListTable.setDescription('This table contains information of dynamic blacklist entries.')
h3cDot11DynBlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11DynBlackListMAC"))
if mibBuilder.loadTexts: h3cDot11DynBlackListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlackListEntry.setDescription('Each entry contains information of dynamic blacklist.')
h3cDot11DynBlackListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11DynBlackListMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlackListMAC.setDescription('Represents the MAC address of the device inserted into the dynamic blacklist.')
h3cDot11DynBlackListTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 7, 1, 2), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DynBlackListTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlackListTime.setDescription('Represents the time elapsed since the entry was last updated.')
h3cDot11DynBlackListReason = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DynBlackListReason.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlackListReason.setDescription('Represents the reason why the entry was added into the dynamic blacklist.')
h3cDot11DynBlackListReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11DynBlackListReset.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlackListReset.setDescription('This object is used to remove designated entry from the dynamic blacklist. The value which read from this object always is false.')
h3cDot11DynBlackListTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 7, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11DynBlackListTimeTicks.setStatus('current')
if mibBuilder.loadTexts: h3cDot11DynBlackListTimeTicks.setDescription('Represents the time elapsed since the entry was last updated in units TimeTicks.')
h3cDot11WIDSRogueHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8), )
if mibBuilder.loadTexts: h3cDot11WIDSRogueHistoryTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHistoryTable.setDescription('This table contains information of all expired rogue devices which have been deleted from the list of detected rogue devices because they could not be detected within the device aging duration.')
h3cDot11WIDSRogueHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSRogueHisIndex"))
if mibBuilder.loadTexts: h3cDot11WIDSRogueHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHistoryEntry.setDescription('Each entry contains information of an expired rogue device which has been deleted from the list of detected rogue devices because they could not be detected within the device aging duration.')
h3cDot11WIDSRogueHisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisIndex.setDescription('Represents index of this entry.')
h3cDot11WIDSRogueHisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisMAC.setDescription('Represents the MAC address of the device.')
h3cDot11WIDSRogueHisVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisVendor.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisVendor.setDescription('Represents the vendor for the device.')
h3cDot11WIDSRogueHisType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8, 1, 4), H3cDot11WIDSDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisType.setDescription('Represents the type of the device.')
h3cDot11WIDSRogueHisChl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8, 1, 5), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisChl.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisChl.setDescription('Represents the channel in which the device was last detected.')
h3cDot11WIDSRogueHisSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisSSID.setDescription('Represents the service set identifier for the ESS of the device.')
h3cDot11WIDSRogueHisLastDctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 8, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisLastDctTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueHisLastDctTime.setDescription('Represents the time at which the device was last detected.')
h3cDot11WIDSAtkHistroyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9), )
if mibBuilder.loadTexts: h3cDot11WIDSAtkHistroyTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHistroyTable.setDescription('This table contains information of the history of attacks detected in the WLAN system.')
h3cDot11WIDSAtkHistroyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkHisIndex"))
if mibBuilder.loadTexts: h3cDot11WIDSAtkHistroyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHistroyEntry.setDescription('Each entry contains information of the history of attacks detected in the WLAN system.')
h3cDot11WIDSAtkHisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisIndex.setDescription('Represents index of this entry.')
h3cDot11WIDSAtkHisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisMAC.setDescription('Represents the Mac address. In case of spoof attacks, this field provides the BSSID which was spoofed. In case of other attacks, this field provides the MAC address of the device which initiated the attack.')
h3cDot11WIDSAtkHisType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9, 1, 3), H3cDot11WIDSAtkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisType.setDescription('Represents the type of attack.')
h3cDot11WIDSAtkHisChl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9, 1, 4), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisChl.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisChl.setDescription('Represents the channel in which the attack was detected.')
h3cDot11WIDSAtkHisRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisRSSI.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisRSSI.setDescription('Represents the average RSSI of the designated attack.')
h3cDot11WIDSAtkHisDctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisDctTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisDctTime.setDescription('Represents the time at which this attack was detected.')
h3cDot11WIDSAtkHisAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 9, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisAPName.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkHisAPName.setDescription('Represents the name of the AP which detected this attack.')
h3cDot11WIDSAtkStatis = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 10))
h3cDot11WIDSAtkStasStartTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 10, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasStartTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasStartTime.setDescription('Represents current attack tracking time. It is started at the system startup and is refreshed each hour subsequently.')
h3cDot11WIDSAtkStasTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 10, 2), )
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasTable.setDescription('This table contains information of the counts of attacks detected.')
h3cDot11WIDSAtkStasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 10, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkStasType"))
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasEntry.setDescription('Each entry contains information of the counts of attacks detected.')
h3cDot11WIDSAtkStasType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 10, 2, 1, 1), H3cDot11WIDSAtkType())
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasType.setDescription('Represents the type of attack.')
h3cDot11WIDSAtkStasCurCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 10, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasCurCnt.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasCurCnt.setDescription('Represents the count of attacks detected since the time specified by the current attack tracking time. The current attack tracking time is started at the system startup and is refreshed each hour subsequently.')
h3cDot11WIDSAtkStasTotalCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 10, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasTotalCnt.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkStasTotalCnt.setDescription('Represents the total count of the attacks detected since the system startup.')
h3cDot11BlackListTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 11), )
if mibBuilder.loadTexts: h3cDot11BlackListTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11BlackListTable.setDescription('This table contains information of blacklist entries, including dynamic and static.')
h3cDot11BlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 11, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11BlackListMAC"))
if mibBuilder.loadTexts: h3cDot11BlackListEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11BlackListEntry.setDescription('Each entry contains information of blacklist.')
h3cDot11BlackListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11BlackListMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11BlackListMAC.setDescription('This object represents the MAC address of the device inserted into the table.')
h3cDot11BlackListTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 11, 1, 2), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11BlackListTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11BlackListTime.setDescription('Represents the time elapsed since the entry was last updated. If it is static blacklist, the value is always 0.')
h3cDot11BlackListReason = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11BlackListReason.setStatus('current')
if mibBuilder.loadTexts: h3cDot11BlackListReason.setDescription('Represents the reason why the entry was added into the blacklist.')
h3cDot11BlackListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11BlackListRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11BlackListRowStatus.setDescription('This object represents the status of this table entry.')
h3cDot11BlackListTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 2, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11BlackListTimeTicks.setStatus('current')
if mibBuilder.loadTexts: h3cDot11BlackListTimeTicks.setDescription('Represents the time elapsed since the entry was last updated in timetick. If it is static blacklist, the value is always 0.')
h3cDot11WIDSTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1))
h3cDot11WIDSDetectRogueTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 1)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSRogueMAC"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSRogueType"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSMonitorMAC"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11MonitorAPID"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11MonitorApRadioID"))
if mibBuilder.loadTexts: h3cDot11WIDSDetectRogueTrap.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDetectRogueTrap.setDescription('The notification represents that a rogue AP or a station was detected by WIDS. The NMS would refer to MIB table under h3cDot11WIDSDetectGroup group to get more detailed information.')
h3cDot11WIDSAdHocTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 2)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAdHocMAC"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSMonitorMAC"))
if mibBuilder.loadTexts: h3cDot11WIDSAdHocTrap.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAdHocTrap.setDescription('The notification represents a rogue Ad hoc station was detected.')
h3cDot11WIDSUnauthorSSIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 3)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11UnauthorSSIDName"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSMonitorMAC"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11MonitorAPID"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11MonitorApRadioID"))
if mibBuilder.loadTexts: h3cDot11WIDSUnauthorSSIDTrap.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSUnauthorSSIDTrap.setDescription('The notification represents which unauthorized SSID are accessed in the network. The notification will be sent to NMS when an unauthorized SSID is detected on the network for the first time.')
h3cDot11WIDSDisappearRogueTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 4)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSRogueMAC"))
if mibBuilder.loadTexts: h3cDot11WIDSDisappearRogueTrap.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDisappearRogueTrap.setDescription('The notification represents that a rogue device has aged out and moved to history table or the device type has been changed to friendly. The notification will be sent to NMS whenever a rogue disappears.')
h3cDot11WIDSDetectAttack = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 5)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkHisType"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkHisChl"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkHisDctTime"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkHisAPName"))
if mibBuilder.loadTexts: h3cDot11WIDSDetectAttack.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDetectAttack.setDescription('This notification occurs when some type of attack is detected. ')
h3cDot11WIDSDetectWBridge = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 6)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSRptAPName"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSRptAPRadioID"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSRptAPLstDctTime"))
if mibBuilder.loadTexts: h3cDot11WIDSDetectWBridge.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSDetectWBridge.setDescription('This notification occurs whenever a detected device is classified as rogue wireless-bridge. ')
h3cDot11WIDSFloodTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 7)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkMac"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkFrameType"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSFirstTrapTime"))
if mibBuilder.loadTexts: h3cDot11WIDSFloodTrap.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSFloodTrap.setDescription('This notification occurs when flood attack is detected. ')
h3cDot11WIDSSpoofTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 8)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkMac"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkFrameType"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkChannel"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkTime"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkDestMac"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSFirstTrapTime"))
if mibBuilder.loadTexts: h3cDot11WIDSSpoofTrap.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSSpoofTrap.setDescription('This notification occurs when spoof attack is detected. ')
h3cDot11WIDSWeakIVTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 1, 9)).setObjects(("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkMac"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkChannel"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkTime"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSAtkDestMac"), ("A3COM-HUAWEI-DOT11-WIDS-MIB", "h3cDot11WIDSFirstTrapTime"))
if mibBuilder.loadTexts: h3cDot11WIDSWeakIVTrap.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSWeakIVTrap.setDescription('This notification occurs when weak IV attack is detected. ')
h3cDot11WIDSTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2))
h3cDot11WIDSRogueMAC = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSRogueMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueMAC.setDescription('Represents which rogue AP or station.')
h3cDot11WIDSRogueType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rogueAp", 1), ("rogueStation", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSRogueType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSRogueType.setDescription('Represents the rogue type. The following value are supported rogueAp(1) - A rogue AP rogueStation(2) - A rogue Station')
h3cDot11WIDSMonitorMAC = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSMonitorMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSMonitorMAC.setDescription('Represents which monitor detected the rogue AP or station.')
h3cDot11WIDSAdHocMAC = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSAdHocMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAdHocMAC.setDescription('Represents the MAC address of Ad hoc station.')
h3cDot11UnauthorSSIDName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 5), H3cDot11SSIDStringType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11UnauthorSSIDName.setStatus('current')
if mibBuilder.loadTexts: h3cDot11UnauthorSSIDName.setDescription('Represents an unauthorized SSID.')
h3cDot11MonitorAPID = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 6), H3cDot11ObjectIDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11MonitorAPID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorAPID.setDescription("Represents monitor AP's APID.")
h3cDot11MonitorApRadioID = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 7), H3cDot11RadioScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11MonitorApRadioID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorApRadioID.setDescription("Represents monitor AP's radio ID")
h3cDot11WIDSAtkMac = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSAtkMac.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkMac.setDescription('Represents mac address of attack source.')
h3cDot11WIDSAtkFrameType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 9), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSAtkFrameType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkFrameType.setDescription('Represents attack frame type.')
h3cDot11WIDSAtkChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 10), H3cDot11ChannelScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSAtkChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkChannel.setDescription('Represents attack channel.')
h3cDot11WIDSAtkTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSAtkTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkTime.setDescription('Represents when attacking happened.')
h3cDot11WIDSAtkDestMac = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 12), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSAtkDestMac.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSAtkDestMac.setDescription('Represents mac address of attack destination.')
h3cDot11WIDSFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 5, 3, 2, 13), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11WIDSFirstTrapTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11WIDSFirstTrapTime.setDescription('Represents the first trap time.')
mibBuilder.exportSymbols("A3COM-HUAWEI-DOT11-WIDS-MIB", h3cDot11WIDSAtkHisDctTime=h3cDot11WIDSAtkHisDctTime, h3cDot11WIDSAtkStasEntry=h3cDot11WIDSAtkStasEntry, h3cDot11WIDSRogueStaExtTable=h3cDot11WIDSRogueStaExtTable, h3cDot11BlackListTable=h3cDot11BlackListTable, h3cDot11WIDSRogueHisIndex=h3cDot11WIDSRogueHisIndex, h3cDot11AttackStaStatus=h3cDot11AttackStaStatus, h3cDot11WIDSDevSnr=h3cDot11WIDSDevSnr, h3cDot11WIDSNotifyGroup=h3cDot11WIDSNotifyGroup, h3cDot11WIDSTraps=h3cDot11WIDSTraps, h3cDot11WIDSRogueStaTable=h3cDot11WIDSRogueStaTable, h3cDot11RogueAPToIgnore=h3cDot11RogueAPToIgnore, h3cDot11StaticBlackListTable=h3cDot11StaticBlackListTable, h3cDot11WIDSRogueType=h3cDot11WIDSRogueType, h3cDot11DetectStaByChannel=h3cDot11DetectStaByChannel, h3cDot11WIDSAtkHistroyEntry=h3cDot11WIDSAtkHistroyEntry, h3cDot11DynBlackListReset=h3cDot11DynBlackListReset, h3cDot11RogueAPAttackedStatus=h3cDot11RogueAPAttackedStatus, h3cDot11MonitorAPID=h3cDot11MonitorAPID, h3cDot11DevAgingTime=h3cDot11DevAgingTime, h3cDot11RogueAPFirstDetectTmStr=h3cDot11RogueAPFirstDetectTmStr, h3cDot11WIDSAttackListTable=h3cDot11WIDSAttackListTable, h3cDot11WIDSDevVendor=h3cDot11WIDSDevVendor, h3cDot11DynBlackListTime=h3cDot11DynBlackListTime, h3cDot11WIDSDevMaxRSSI=h3cDot11WIDSDevMaxRSSI, h3cDot11WIDSRptAPMaxRSSI=h3cDot11WIDSRptAPMaxRSSI, h3cDot11RogueAPChannel=h3cDot11RogueAPChannel, h3cDot11WIDSRogueHisSSID=h3cDot11WIDSRogueHisSSID, h3cDot11PermitVendorRowStatus=h3cDot11PermitVendorRowStatus, h3cDot11SSIDFilterOnOff=h3cDot11SSIDFilterOnOff, h3cDot11RogueAPVendorName=h3cDot11RogueAPVendorName, h3cDot11WIDSPermitBSSIDTable=h3cDot11WIDSPermitBSSIDTable, h3cDot11WIDSAtkHisMAC=h3cDot11WIDSAtkHisMAC, h3cDot11WIDSAtkStasTable=h3cDot11WIDSAtkStasTable, h3cDot11WIDSRogueAPExtTable=h3cDot11WIDSRogueAPExtTable, h3cDot11DetectStaFirstTm=h3cDot11DetectStaFirstTm, h3cDot11RogueAPLastDetectTm=h3cDot11RogueAPLastDetectTm, h3cDot11WIDSPermitSSIDEntry=h3cDot11WIDSPermitSSIDEntry, h3cDot11WIDSScanChannelList=h3cDot11WIDSScanChannelList, h3cDot11PermitSSID=h3cDot11PermitSSID, h3cDot11WIDSAtkStasCurCnt=h3cDot11WIDSAtkStasCurCnt, h3cDot11RogueAPMaxSigStrength=h3cDot11RogueAPMaxSigStrength, h3cDot11RogueStaAdHocStatus=h3cDot11RogueStaAdHocStatus, h3cDot11WIDSDevChannel=h3cDot11WIDSDevChannel, h3cDot11WIDSRptAPName=h3cDot11WIDSRptAPName, h3cDot11WIDSRogueHistoryEntry=h3cDot11WIDSRogueHistoryEntry, h3cDot11ResetAllWhtBlkList=h3cDot11ResetAllWhtBlkList, h3cDot11RogueAPFirstDetectTm=h3cDot11RogueAPFirstDetectTm, h3cDot11WIDS=h3cDot11WIDS, h3cDot11RogueStaMAC=h3cDot11RogueStaMAC, h3cDot11WIDSRogueHistoryTable=h3cDot11WIDSRogueHistoryTable, h3cDot11PermitBSSIDDetected=h3cDot11PermitBSSIDDetected, h3cDot11PermitSSIDDetected=h3cDot11PermitSSIDDetected, h3cDot11WIDSRogueHisMAC=h3cDot11WIDSRogueHisMAC, h3cDot11WIDSAtkMac=h3cDot11WIDSAtkMac, h3cDot11IgnoreMAC=h3cDot11IgnoreMAC, h3cDot11WIDSDetectedDevTable=h3cDot11WIDSDetectedDevTable, h3cDot11DynBlkListLifeTime=h3cDot11DynBlkListLifeTime, h3cDot11StaticBlackListRowStatus=h3cDot11StaticBlackListRowStatus, h3cDot11WIDSUnauthorSSIDTrap=h3cDot11WIDSUnauthorSSIDTrap, h3cDot11RogueAPMonitorNum=h3cDot11RogueAPMonitorNum, h3cDot11WIDSRogueHisLastDctTime=h3cDot11WIDSRogueHisLastDctTime, h3cDot11DynBlkListEnable=h3cDot11DynBlkListEnable, h3cDot11IgnoreListRowStatus=h3cDot11IgnoreListRowStatus, H3cDot11WIDSAtkType=H3cDot11WIDSAtkType, h3cDot11AttackListRowStatus=h3cDot11AttackListRowStatus, h3cDot11WIDSAtkHisIndex=h3cDot11WIDSAtkHisIndex, h3cDot11StaticBlackListMAC=h3cDot11StaticBlackListMAC, h3cDot11StaticWhiteListEntry=h3cDot11StaticWhiteListEntry, h3cDot11RogueStaReset=h3cDot11RogueStaReset, h3cDot11WIDSDevMAC=h3cDot11WIDSDevMAC, h3cDot11FloodAtkDctEnable=h3cDot11FloodAtkDctEnable, h3cDot11StaticWhiteListTable=h3cDot11StaticWhiteListTable, h3cDot11RogueAPBeaconInterval=h3cDot11RogueAPBeaconInterval, h3cDot11RogueStaMaxSigStrength=h3cDot11RogueStaMaxSigStrength, h3cDot11WIDSAtkHisType=h3cDot11WIDSAtkHisType, h3cDot11WIDSAtkChannel=h3cDot11WIDSAtkChannel, h3cDot11WIDSTrapVarObjects=h3cDot11WIDSTrapVarObjects, h3cDot11WIDSAtkHisRSSI=h3cDot11WIDSAtkHisRSSI, h3cDot11UnauthorSSIDName=h3cDot11UnauthorSSIDName, h3cDot11WIDSAtkFrameType=h3cDot11WIDSAtkFrameType, h3cDot11ResetWIDSHistroy=h3cDot11ResetWIDSHistroy, h3cDot11WIDSRogueHisType=h3cDot11WIDSRogueHisType, h3cDot11WIDSGlobalConfigGroup=h3cDot11WIDSGlobalConfigGroup, h3cDot11ResetAllStcBlkList=h3cDot11ResetAllStcBlkList, h3cDot11BlackListRowStatus=h3cDot11BlackListRowStatus, h3cDot11IgnoreDevType=h3cDot11IgnoreDevType, h3cDot11DynBlackListTable=h3cDot11DynBlackListTable, h3cDot11AttackAPStatus=h3cDot11AttackAPStatus, h3cDot11WIDSAtkStasType=h3cDot11WIDSAtkStasType, h3cDot11WIDSDevMonitorNum=h3cDot11WIDSDevMonitorNum, h3cDot11WIDSAtkStasTotalCnt=h3cDot11WIDSAtkStasTotalCnt, h3cDot11DetectStaLastTm=h3cDot11DetectStaLastTm, h3cDot11PermitBSSIDRowStatus=h3cDot11PermitBSSIDRowStatus, h3cDot11AttackDevType=h3cDot11AttackDevType, h3cDot11RogueStaAttackedStatus=h3cDot11RogueStaAttackedStatus, h3cDot11RogueAPEncryptStatus=h3cDot11RogueAPEncryptStatus, h3cDot11BlackListTime=h3cDot11BlackListTime, h3cDot11DetectAPByRadioID=h3cDot11DetectAPByRadioID, h3cDot11WIDSPermitVendorEntry=h3cDot11WIDSPermitVendorEntry, h3cDot11WIDSRogueMAC=h3cDot11WIDSRogueMAC, h3cDot11WIDSRptAPTable=h3cDot11WIDSRptAPTable, h3cDot11BSSIDFilterOnOff=h3cDot11BSSIDFilterOnOff, h3cDot11RogueStaMonitorNum=h3cDot11RogueStaMonitorNum, h3cDot11WIDSRptAPEntry=h3cDot11WIDSRptAPEntry, h3cDot11ResetWIDSStatistics=h3cDot11ResetWIDSStatistics, h3cDot11WIDSDetectedDevEntry=h3cDot11WIDSDetectedDevEntry, h3cDot11RogueStaToIgnore=h3cDot11RogueStaToIgnore, h3cDot11PermitSSIDRowStatus=h3cDot11PermitSSIDRowStatus, h3cDot11WIDSFloodTrap=h3cDot11WIDSFloodTrap, PYSNMP_MODULE_ID=h3cDot11WIDS, h3cDot11RogueAPLastDetectTmStr=h3cDot11RogueAPLastDetectTmStr, h3cDot11WIDSRogueStaEntry=h3cDot11WIDSRogueStaEntry, h3cDot11WIDSRptAPMAC=h3cDot11WIDSRptAPMAC, h3cDot11PermitBSSID=h3cDot11PermitBSSID, h3cDot11RogueStaAccessBSSID=h3cDot11RogueStaAccessBSSID, h3cDot11ResetAllDctRogueAP=h3cDot11ResetAllDctRogueAP, h3cDot11WIDSPermitVendorTable=h3cDot11WIDSPermitVendorTable, h3cDot11ResetAllDynBlkList=h3cDot11ResetAllDynBlkList, h3cDot11WIDSAtkStatis=h3cDot11WIDSAtkStatis, h3cDot11BlackListReason=h3cDot11BlackListReason, h3cDot11WIDSRptAPFstDctTime=h3cDot11WIDSRptAPFstDctTime, h3cDot11ResetAllDctAdhoc=h3cDot11ResetAllDctAdhoc, h3cDot11WIDSAtkStasStartTime=h3cDot11WIDSAtkStasStartTime, h3cDot11WIDSAPID=h3cDot11WIDSAPID, h3cDot11WIDSIgnoreListTable=h3cDot11WIDSIgnoreListTable, h3cDot11CntMsrMode=h3cDot11CntMsrMode, h3cDot11DynBlackListReason=h3cDot11DynBlackListReason, h3cDot11WIDSAdHocTrap=h3cDot11WIDSAdHocTrap, h3cDot11WIDSRogueAPTable=h3cDot11WIDSRogueAPTable, h3cDot11ResetAllDctSSID=h3cDot11ResetAllDctSSID, h3cDot11WIDSDevBeaconIntvl=h3cDot11WIDSDevBeaconIntvl, h3cDot11VendorOUI=h3cDot11VendorOUI, h3cDot11WIDSDevType=h3cDot11WIDSDevType, h3cDot11DetectCurAPSigStrength=h3cDot11DetectCurAPSigStrength, h3cDot11IgnoreMACDetected=h3cDot11IgnoreMACDetected, h3cDot11DetectAPFirstTm=h3cDot11DetectAPFirstTm, h3cDot11WeakIVAtkDctEnable=h3cDot11WeakIVAtkDctEnable, h3cDot11StaticWhiteListMAC=h3cDot11StaticWhiteListMAC, h3cDot11WIDSRogueAPExtEntry=h3cDot11WIDSRogueAPExtEntry, h3cDot11BlackListEntry=h3cDot11BlackListEntry, h3cDot11WIDSIgnoreListEntry=h3cDot11WIDSIgnoreListEntry, h3cDot11StaticBlackListEntry=h3cDot11StaticBlackListEntry, h3cDot11WIDSAtkHisAPName=h3cDot11WIDSAtkHisAPName, h3cDot11WIDSFirstTrapTime=h3cDot11WIDSFirstTrapTime, h3cDot11DetectAPByChannel=h3cDot11DetectAPByChannel, h3cDot11WIDSDevPermitType=h3cDot11WIDSDevPermitType, h3cDot11DynBlackListTimeTicks=h3cDot11DynBlackListTimeTicks, h3cDot11WIDSAdHocMAC=h3cDot11WIDSAdHocMAC, h3cDot11ResetAllDctDevice=h3cDot11ResetAllDctDevice, h3cDot11WidsFloodInterval=h3cDot11WidsFloodInterval, h3cDot11WIDSDevLstDctTime=h3cDot11WIDSDevLstDctTime, h3cDot11DynBlackListMAC=h3cDot11DynBlackListMAC, h3cDot11WIDSDetectRogueTrap=h3cDot11WIDSDetectRogueTrap, h3cDot11WIDSDetectAttack=h3cDot11WIDSDetectAttack, h3cDot11RogueAPBSSMAC=h3cDot11RogueAPBSSMAC, h3cDot11AttackDeviceMac=h3cDot11AttackDeviceMac, h3cDot11RogueStaFirstDetectTmStr=h3cDot11RogueStaFirstDetectTmStr, h3cDot11RogueAPReset=h3cDot11RogueAPReset, h3cDot11WIDSDetectGroup=h3cDot11WIDSDetectGroup, h3cDot11WIDSDevSSID=h3cDot11WIDSDevSSID, h3cDot11WIDSConfigGroup=h3cDot11WIDSConfigGroup, h3cDot11ResetWIDSRogueHistory=h3cDot11ResetWIDSRogueHistory, h3cDot11WIDSAtkTime=h3cDot11WIDSAtkTime, h3cDot11WIDSRogueHisVendor=h3cDot11WIDSRogueHisVendor, h3cDot11AttackDevDetected=h3cDot11AttackDevDetected, h3cDot11DetectAPLastTm=h3cDot11DetectAPLastTm, h3cDot11RogueAPSSID=h3cDot11RogueAPSSID, h3cDot11WIDSPermitSSIDTable=h3cDot11WIDSPermitSSIDTable, h3cDot11WIDSDetectWBridge=h3cDot11WIDSDetectWBridge, h3cDot11WIDSSpoofTrap=h3cDot11WIDSSpoofTrap, h3cDot11RogueStaChannel=h3cDot11RogueStaChannel, h3cDot11StaticWhiteListRowStatus=h3cDot11StaticWhiteListRowStatus, h3cDot11WIDSRogueAPEntry=h3cDot11WIDSRogueAPEntry, h3cDot11WIDSRptAPLstDctTime=h3cDot11WIDSRptAPLstDctTime, h3cDot11ResetAllDctRogueSta=h3cDot11ResetAllDctRogueSta, h3cDot11RogueStaLastDetectTmStr=h3cDot11RogueStaLastDetectTmStr, h3cDot11WIDSRogueStaExtEntry=h3cDot11WIDSRogueStaExtEntry, h3cDot11BlackListTimeTicks=h3cDot11BlackListTimeTicks, h3cDot11WIDSAtkHistroyTable=h3cDot11WIDSAtkHistroyTable, h3cDot11WIDSDisappearRogueTrap=h3cDot11WIDSDisappearRogueTrap, h3cDot11WidsBlackListThreshold=h3cDot11WidsBlackListThreshold, H3cDot11WIDSDevType=H3cDot11WIDSDevType, h3cDot11VendorName=h3cDot11VendorName, h3cDot11WIDSDevBSSID=h3cDot11WIDSDevBSSID, h3cDot11WIDSDevReset=h3cDot11WIDSDevReset, h3cDot11WIDSMonitorMAC=h3cDot11WIDSMonitorMAC, h3cDot11WIDSScanMode=h3cDot11WIDSScanMode, H3cDot11WIDSDevPermitType=H3cDot11WIDSDevPermitType, h3cDot11WIDSAtkDestMac=h3cDot11WIDSAtkDestMac, h3cDot11RogueStaLastDetectTm=h3cDot11RogueStaLastDetectTm, h3cDot11WIDSAttackListEntry=h3cDot11WIDSAttackListEntry, h3cDot11MonitorApRadioID=h3cDot11MonitorApRadioID, h3cDot11DynBlackListEntry=h3cDot11DynBlackListEntry, h3cDot11WIDSAtkHisChl=h3cDot11WIDSAtkHisChl, h3cDot11WIDSPermitBSSIDEntry=h3cDot11WIDSPermitBSSIDEntry, h3cDot11WIDSRptAPRadioID=h3cDot11WIDSRptAPRadioID, h3cDot11RogueStaFirstDetectTm=h3cDot11RogueStaFirstDetectTm, h3cDot11BlackListMAC=h3cDot11BlackListMAC, h3cDot11DetectCurStaSigStrength=h3cDot11DetectCurStaSigStrength, h3cDot11SpoofAtkDctEnable=h3cDot11SpoofAtkDctEnable, h3cDot11DetectStaByRadioID=h3cDot11DetectStaByRadioID, h3cDot11WIDSRogueHisChl=h3cDot11WIDSRogueHisChl, h3cDot11WIDSWeakIVTrap=h3cDot11WIDSWeakIVTrap, h3cDot11RogueStaVendorName=h3cDot11RogueStaVendorName, h3cDot11WIDSDevFstDctTime=h3cDot11WIDSDevFstDctTime)
