#
# PySNMP MIB module CISCO-L2NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-L2NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoInetAddressMask, = mibBuilder.importSymbols("CISCO-TC", "CiscoInetAddressMask")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, MibIdentifier, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, TimeTicks, Gauge32, ObjectIdentity, IpAddress, ModuleIdentity, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "TimeTicks", "Gauge32", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Unsigned32", "Counter64")
DisplayString, RowStatus, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "StorageType")
ciscoL2natMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 806))
ciscoL2natMIB.setRevisions(('2013-04-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoL2natMIB.setRevisionsDescriptions(('Initial Version',))
if mibBuilder.loadTexts: ciscoL2natMIB.setLastUpdated('201304160000Z')
if mibBuilder.loadTexts: ciscoL2natMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoL2natMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoL2natMIB.setDescription('Network Address Translation (NAT) involves translating the source and or destination IP addresses of packets as they traverse from one IP domain to another. NAT is usually performed on packets that are routed, and there is a MIB already defined for that, but the application addressed here is for performing NAT for Layer 2 switched packets. This MIB module defines objects and tables for Network Address Translation (NAT) performed at layer 2. This application is planned currently for Industrial Ethernet switches, but this could be used for other applications. This platform implements NAT using an FPGA which connects to uplinks, so NAT is only applicable for packets coming in from uplinks, and going out of uplinks. There are 3 main logical modules that are referred in this MIB. Global parameters : These provide statistics for the entire platform. L2NAT Instance Table : This table contains multiple Layer 2 NAT instances. A Layer 2 NAT instance referred throughout this MIB is an entity that is defined with respect to the Layer 2 NAT feature, and is different from the concept of instance as used in SNMP. Each Layer 2 NAT instance has a unique number. Each Layer 2 NAT instance consists of packets that are to be permitted or denied, as well as packets that are supposed to be fixed up. Fixup is a NAT concept which applies to certain applications which embed IP addresses in the payload. For these applications to work across NAT, the embedded IP addresses need to be translated along with the header IP addresses. Each Layer 2 NAT instance also contains a list of source and/or destination IP address translations An instance only becomes effective on traffic after being applied to an interface vlan combination. This table actually consists of these 2 MIB tables in order for indexing to work, cl2natInstanceTable and cl2natInstanceIpTable L2NAT Interface Config Table : This table contains multiple entries, where each entry contains configuration for the instance applied to an interface vlan combination. This table actually consists of these 2 MIB tables in order for indexing to work cl2natInterfaceConfigTable and cl2natInterfaceIpConfigTable. L2NAT Interface Statistics Table : This table contains multiple entries, where each entry contains stats for the instance applied to an interface vlan combination. This table actually consists of these 2 MIB tables in order for indexing to work , cl2natInterfaceStatisticsTable and cl2natInterfaceIpStatisticsTable.')
ciscoL2natMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 806, 1))
cl2natTotalInstances = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTotalInstances.setStatus('current')
if mibBuilder.loadTexts: cl2natTotalInstances.setDescription('This object indicates the total number of Instances defined by the user on this device. Each instance is an independent module of configuration including IP address translations that only becomes active after being applied to an interface/vlan combination.')
cl2natTotalMatched = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTotalMatched.setStatus('current')
if mibBuilder.loadTexts: cl2natTotalMatched.setDescription('This object indicates the number of times a packet matches with user configured IP translation entries. It should be noted that the same packet can be counted twice if it matches both the outside and inside entries, one for the source address translation, and the other for the destination address translation.')
cl2natTotalUnmatched = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTotalUnmatched.setStatus('current')
if mibBuilder.loadTexts: cl2natTotalUnmatched.setDescription('This object indicates the total number of packets that did not match any of the configured NAT entries.')
cl2natTotalFixups = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTotalFixups.setStatus('current')
if mibBuilder.loadTexts: cl2natTotalFixups.setDescription('This object indicates the total number of packets that required fixups.')
cl2natTotalTranslationEntryConfigured = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTotalTranslationEntryConfigured.setStatus('current')
if mibBuilder.loadTexts: cl2natTotalTranslationEntryConfigured.setDescription('This object specifies the total number IP translation entries currently configured in the system.')
cl2natTotalPacketTranslated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTotalPacketTranslated.setStatus('current')
if mibBuilder.loadTexts: cl2natTotalPacketTranslated.setDescription('This object indicates the total number of packets that got translated per rules defined in the cl2natinstanceIpTable')
cl2natInstConfigInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 7), )
if mibBuilder.loadTexts: cl2natInstConfigInstanceTable.setStatus('current')
if mibBuilder.loadTexts: cl2natInstConfigInstanceTable.setDescription('This table contains multiple Layer 2 NAT instances. Each Layer 2 NAT instance has a unique name and consists of configurations other than the list of IP NAT translations for which there is a separate table. An instance only becomes effective on traffic after being applied to an interface/vlan combination, which is done through the cl2natInterfaceConfigTable.')
cl2natInstConfigInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 7, 1), ).setIndexNames((0, "CISCO-L2NAT-MIB", "cl2natInstConfigInstanceName"))
if mibBuilder.loadTexts: cl2natInstConfigInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: cl2natInstConfigInstanceEntry.setDescription('This entry is created as a row in the cl2natInstConfigInstanceTable table when a user configures a new instance. Each entry consists of the configuration parameters described below, and is indexed by the Layer 2 NAT instance name.')
cl2natInstConfigInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cl2natInstConfigInstanceName.setStatus('current')
if mibBuilder.loadTexts: cl2natInstConfigInstanceName.setDescription('This object specifies the Name assigned by user to a created Layer 2 NAT instance.')
cl2natInstConfigPermitIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 7, 1, 2), Bits().clone(namedValues=NamedValues(("unmatched", 0), ("igmp", 1), ("multicast", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstConfigPermitIn.setStatus('current')
if mibBuilder.loadTexts: cl2natInstConfigPermitIn.setDescription("This object specifies user configured options for permitting or denying packets coming in from uplinks that do not match any NAT entry (unmatched), IGMP packets, multicast packets. A bit value of 0 denotes drop and a value of 1 indicates permit for that type. Default is 'drop' for all 3 types.")
cl2natInstConfigPermitOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 7, 1, 3), Bits().clone(namedValues=NamedValues(("unmatched", 0), ("igmp", 1), ("multicast", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstConfigPermitOut.setStatus('current')
if mibBuilder.loadTexts: cl2natInstConfigPermitOut.setDescription('This object specifies user configured options for permitting or denying packets going out of uplinks that do not match any NAT entry (unmatched), IGMP packets, multicast packets. A bit value of 0 denotes drop and a value of 1 indicates permit for that type. Default is drop for all 3 types.')
cl2natInstConfigFixup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 7, 1, 4), Bits().clone(namedValues=NamedValues(("arp", 0), ("icmp", 1), ("profinet", 2), ("cip", 3), ("snmp", 4))).clone(namedValues=NamedValues(("arp", 0), ("icmp", 1), ("profinet", 2), ("cip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstConfigFixup.setStatus('current')
if mibBuilder.loadTexts: cl2natInstConfigFixup.setDescription('This object specifies user configured options for fixing up ARP, ICMP, Profinet, CIP and SNMP protocols. A fixup is required for protocols which embed IP addresses to work across NAT boundaries, and involves translating any IP address embedded in the protocol payload to the corresponding configured translated address. A bit value of 1 denotes fixup is enabled for that protocol, and a value of 0 indicates fixup is disabled. By default, fixup is enabled for ARP, ICMP, Profinet and CIP (if required).')
cl2natInstConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 7, 1, 5), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natInstConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: cl2natInstConfigStorageType.setDescription('This object specifies the storage type for this conceptual row. The following columnar objects are allowed to be writable when the storageType of this conceptual row is permanent(4): (replace with list of columns)')
cl2natInstConfigInstanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstConfigInstanceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cl2natInstConfigInstanceRowStatus.setDescription("This object will follow RowStatus Textual convention to create/destroy entries. The following columnar objects are mandatory to make the entry 'active': cl2natInstIpInstanceName Once the entry status has been set to active(1), the entry cannot be modified. The only operation possible after this is to delete the entry.")
cl2natInstIpInstanceIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8), )
if mibBuilder.loadTexts: cl2natInstIpInstanceIpTable.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpInstanceIpTable.setDescription('This table consists of multiple IP entries for each Layer2 NAT instances. This table is a logical extension of the cl2natInstInstanceTable because it is linked to the same Layer 2 NAT instance. This table is required because there can be multiple address translation entries for the same Layer 2 NAT instance.')
cl2natInstIpInstanceIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1), ).setIndexNames((0, "CISCO-L2NAT-MIB", "cl2natInstConfigInstanceName"), (0, "CISCO-L2NAT-MIB", "cl2natInstIpDirection"), (0, "CISCO-L2NAT-MIB", "cl2natInstIpFromIpAddressType"), (0, "CISCO-L2NAT-MIB", "cl2natInstIpFromIpAddress"), (0, "CISCO-L2NAT-MIB", "cl2natInstIpAddressType"))
if mibBuilder.loadTexts: cl2natInstIpInstanceIpEntry.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpInstanceIpEntry.setDescription('This Entry is created when a new IP translation entry is added for a particular instance.')
cl2natInstIpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inside", 1), ("outside", 2))))
if mibBuilder.loadTexts: cl2natInstIpDirection.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpDirection.setDescription('This object specifies the direction in which an address is to be translated. A value of 1 denotes that this entry is for translating source IP address of packets going out of uplinks, or destination IP address of packets coming in. A value of 2 denotes that this entry is for translating destination IP address of packets going out of uplinks, or source IP address of packets coming in.')
cl2natInstIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("host", 1), ("range", 2), ("network", 3))))
if mibBuilder.loadTexts: cl2natInstIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpAddressType.setDescription("This object specifies the type of address that is used to configure this translation. 'host' implies that this is a single IP address translation for one host. 'range' implies that the cl2natFromAddress and cl2natToAddress are the starting addresses of the range, and the cl2natIpRange is the number of addresses that are translated with this single config. 'network' implies that an entire class C network of original IP addresses is translated to the corresponding 254 address starting from the cl2natToAddress.")
cl2natInstIpFromIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cl2natInstIpFromIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpFromIpAddressType.setDescription('The address type of cl2natFromIpAddress. This object specifies whether this translation is for for IPv4 or IPv6.')
cl2natInstIpFromIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cl2natInstIpFromIpAddress.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpFromIpAddress.setDescription('This object indicates the source IP address of packets going out of the uplink before translation if the cl2natInstIpDirection value for this entry is inside(1). This objects indicate the destination IP address of packets coming in from the uplinks after translation if the cl2natInstIpDirection value for this entry is outside(2)')
cl2natInstIpToIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstIpToIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpToIpAddressType.setDescription('The address type of cl2natInstIpToIpAddress. This object specifies whether this translation is for for IPv4 or IPv6.')
cl2natInstIpToIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstIpToIpAddress.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpToIpAddress.setDescription('This object indicates the Source IP address of packets going out of the uplink after translation, and destination IP address of packets coming in from the uplinks before translation if the cl2natInstIpDirection value for this entry is inside(1), or the Destination IP address of packets going out of the uplink after translation, and source IP address of packets coming in from the uplinks before translation if the cl2natInstIpDirection value for this entry is outside(2).')
cl2natInstIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 7), CiscoInetAddressMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpAddressMask.setDescription("This object specifies the subnet address mask when the value of cl2natInstIpAddressType is 'network'. This is not used for any other option.")
cl2natInstIpRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstIpRange.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpRange.setDescription("This object specifies the number of addresses to be translated in case the value of cl2natIpAddressType is 'range'. This is not used for any other option.")
cl2natInstStorageIpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 9), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natInstStorageIpStorageType.setStatus('current')
if mibBuilder.loadTexts: cl2natInstStorageIpStorageType.setDescription('This object specifies the storage type for this conceptual row. The following columnar objects are allowed to be writable when the storageType of this conceptual row is permanent(4): (replace with list of columns)')
cl2natInstIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 8, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInstIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cl2natInstIpRowStatus.setDescription("This object will follow RowStatus Textual convention to create/destroy entries. The following columnar objects are mandatory to make the entry 'active': cl2natInstIpDirection cl2natInstIpFromIpAddress cl2natInstIpToIpAddress Once the entry status has been set to active(1), the entry cannot be modified. The only operation possible after this is to delete the entry.")
cl2natInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 9), )
if mibBuilder.loadTexts: cl2natInterfaceConfigTable.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceConfigTable.setDescription('This table contains multiple entries, where each entry contains configuration of the instance applied to an interface/vlan combination.')
cl2natInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 9, 1), ).setIndexNames((0, "CISCO-L2NAT-MIB", "cl2natInterfaceConfigIfIndex"), (0, "CISCO-L2NAT-MIB", "cl2natInterfaceConfigVlanIndex"))
if mibBuilder.loadTexts: cl2natInterfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceConfigEntry.setDescription('Each Entry is created as a row in the cl2natInterfaceConfigTable table when a user applies an instance to an interface/vlan combination, and removed when that instance is removed. A value of 0 in cl2natInterfaceVlanIndex indicates that this attachment is for untagged traffic. The result of this lookup is actually an index that is used to lookup the cl2natInstanceTable which gives the actual config of the instance attached.')
cl2natInterfaceConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cl2natInterfaceConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceConfigIfIndex.setDescription("The index value that uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
cl2natInterfaceConfigVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cl2natInterfaceConfigVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceConfigVlanIndex.setDescription('This object indicates the vlan ID the L2NAT instance is attached to. A value of 0 indicates the instance is attached to untagged traffic of the interface.')
cl2natInterfaceConfigInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 9, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natInterfaceConfigInstanceName.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceConfigInstanceName.setDescription("This object indicates the Layer 2 NAT Instance Name to be looked up to retrieve its configuration details. This name corresponds to what's in cl2natInstConfigInstanceName")
cl2natInterfaceConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 9, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natInterfaceConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceConfigStorageType.setDescription('This object specifies the storage type for this conceptual row. The following columnar objects are allowed to be writable when the storageType of this conceptual row is permanent(4): (replace with list of columns)')
cl2natInterfaceConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cl2natInterfaceConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceConfigRowStatus.setDescription("This object will follow RowStatus Textual convention to create/destroy entries. The following columnar objects are mandatory to make the entry 'active': ifIndex Once the entry status has been set to active(1), the entry cannot be modified. The only operation possible after this is to delete the entry.")
cl2natInterfaceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10), )
if mibBuilder.loadTexts: cl2natInterfaceStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceStatisticsTable.setDescription('This table contains the Layer 2 NAT instance level statistics. The IP address translation statistics are contained in the cl2natInterfaceIpStatisticsTable.')
cl2natInterfaceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1), ).setIndexNames((0, "CISCO-L2NAT-MIB", "cl2natInterfaceConfigIfIndex"), (0, "CISCO-L2NAT-MIB", "cl2natInterfaceConfigVlanIndex"))
if mibBuilder.loadTexts: cl2natInterfaceStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceStatisticsEntry.setDescription('This Entry is created as a row in the cl2natInterfaceStatisticsTable table when a user applies an instance to an interface/vlan combination, and removed when that instance is removed.')
cl2natFixupArpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupArpIn.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupArpIn.setDescription('This object indicates the Number of fixed up ARP packets for this Layer 2 NAT Instance coming into the uplinks.')
cl2natFixupIcmpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupIcmpIn.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupIcmpIn.setDescription('This object indicates the Number of fixed up ICMP packets for this Layer 2 NAT Instance coming into the uplinks.')
cl2natFixupCipIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupCipIn.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupCipIn.setDescription('This object indicates the Number of fixed up CIP packets for this Layer 2 NAT Instance coming into the uplinks.')
cl2natFixupProfinetIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupProfinetIn.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupProfinetIn.setDescription('This object indicates the Number of fixed up Profinet packets for this Layer 2 NAT Instance coming into the uplinks.')
cl2natFixupFtpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupFtpIn.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupFtpIn.setDescription('This object indicates the Number of fixed up FTP packets for this Layer 2 NAT Instance coming into the uplinksk.')
cl2natFixupSnmpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupSnmpIn.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupSnmpIn.setDescription('This object indicates the Number of fixed up SNMP packets for this Layer 2 NAT Instance coming into the uplinks.')
cl2natFixupSipIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupSipIn.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupSipIn.setDescription('This object indicates the Number of fixed up Sip packets for this Layer 2 NAT Instance coming into the uplinks.')
cl2natFixupSccpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupSccpIn.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupSccpIn.setDescription('This object indicates the Number of fixed up Sccp packets for this Layer 2 NAT Instance coming into the uplinks.')
cl2natUnmatchedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natUnmatchedIn.setStatus('current')
if mibBuilder.loadTexts: cl2natUnmatchedIn.setDescription("This object indicates the Number of unmatched packets for this Layer 2 NAT Instance coming into the uplinks. 'Unmatched' packets are those that do not match any IP address translation configured for this layer 2 NAT instance.")
cl2natTranslatedUnicastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTranslatedUnicastIn.setStatus('current')
if mibBuilder.loadTexts: cl2natTranslatedUnicastIn.setDescription('This object indicates the Number of translated unicast packets for this Layer 2 NAT coming into the uplinks.')
cl2natDroppedUnicastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natDroppedUnicastIn.setStatus('current')
if mibBuilder.loadTexts: cl2natDroppedUnicastIn.setDescription('This object indicates the Number of Dropped unicast packets for this Layer 2 NAT instance coming into the uplinks.')
cl2natDroppedMulticastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natDroppedMulticastIn.setStatus('current')
if mibBuilder.loadTexts: cl2natDroppedMulticastIn.setDescription('This object indicates the Number of dropped multicast packets for this Layer 2 NAT coming into the uplinks.')
cl2natPassThruUnicastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natPassThruUnicastIn.setStatus('current')
if mibBuilder.loadTexts: cl2natPassThruUnicastIn.setDescription('This object indicates the Number of passed through unicast packets for this Layer 2 NAT coming into the uplinks.')
cl2natPassThruMulticastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natPassThruMulticastIn.setStatus('current')
if mibBuilder.loadTexts: cl2natPassThruMulticastIn.setDescription('This object indicates the Number of passed through multicast packets for this Layer 2 NAT coming into the uplinks.')
cl2natPassThruIgmpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natPassThruIgmpIn.setStatus('current')
if mibBuilder.loadTexts: cl2natPassThruIgmpIn.setDescription('This object indicates the Number of passed through IGMP packets for this Layer 2 NAT coming into the uplinks.')
cl2natDroppedIgmpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natDroppedIgmpIn.setStatus('current')
if mibBuilder.loadTexts: cl2natDroppedIgmpIn.setDescription('This object indicates the Number of dropped IGMP packets for this Layer 2 NAT coming into the uplinks.')
cl2natFixupArpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupArpOut.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupArpOut.setDescription('This object indicates the Number of fixed up ARP packets for this Layer 2 NAT Instance going out of the uplinks.')
cl2natFixupIcmpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupIcmpOut.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupIcmpOut.setDescription('This object indicates the Number of fixed up ICMP packets for this Layer 2 NAT Instance going out of the uplinks.')
cl2natFixupCipOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupCipOut.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupCipOut.setDescription('This object indicates the Number of fixed up CIP packets for this Layer 2 NAT Instance going out of the uplinks.')
cl2natFixupProfinetOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupProfinetOut.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupProfinetOut.setDescription('This object indicates the Number of fixed up Profinet packets for this Layer 2 NAT Instance going out of the uplinks.')
cl2natFixupFtpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupFtpOut.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupFtpOut.setDescription('This object indicates the Number of fixed up FTP packets for this Layer 2 NAT Instance going out of the uplinks.')
cl2natFixupSnmpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupSnmpOut.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupSnmpOut.setDescription('This object indicates the Number of fixed up SNMP packets for this Layer 2 NAT Instance going out of the uplinks.')
cl2natFixupSipOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupSipOut.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupSipOut.setDescription('This object indicates the Number of fixed up Sip packets for this Layer 2 NAT Instance going out of the uplinks.')
cl2natFixupSccpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natFixupSccpOut.setStatus('current')
if mibBuilder.loadTexts: cl2natFixupSccpOut.setDescription('This object indicates the Number of fixed up Sccp packets for this Layer 2 NAT Instance going out of the uplinks.')
cl2natUnmatchedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natUnmatchedOut.setStatus('current')
if mibBuilder.loadTexts: cl2natUnmatchedOut.setDescription("This object indicates the Number of unmatched packets for this Layer 2 NAT Instance going out of the uplinks. 'Unmatched' packets are those that do not match any IP address translation configured for this layer 2 NAT instance.")
cl2natDroppedUnicastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natDroppedUnicastOut.setStatus('current')
if mibBuilder.loadTexts: cl2natDroppedUnicastOut.setDescription('This object indicates the Number of Dropped unicast packets for this Layer 2 NAT instance going out of the uplinks.')
cl2natTranslatedUnicastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTranslatedUnicastOut.setStatus('current')
if mibBuilder.loadTexts: cl2natTranslatedUnicastOut.setDescription('This object indicates the Number of translated unicast packets for this Layer 2 NAT going out of the uplinks.')
cl2natPassThruUnicastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natPassThruUnicastOut.setStatus('current')
if mibBuilder.loadTexts: cl2natPassThruUnicastOut.setDescription('This object indicates the Number of passed through unicast packets for this Layer 2 NAT instance going out of the uplinks.')
cl2natDroppedMulticastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natDroppedMulticastOut.setStatus('current')
if mibBuilder.loadTexts: cl2natDroppedMulticastOut.setDescription('This object indicates the Number of dropped multicast packets for this Layer 2 NAT instance going out of the uplinks.')
cl2natPassThruMulticastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natPassThruMulticastOut.setStatus('current')
if mibBuilder.loadTexts: cl2natPassThruMulticastOut.setDescription('This object indicates the Number of passed through multicast packets for this Layer 2 NAT coming out the uplinks.')
cl2natDroppedIgmpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natDroppedIgmpOut.setStatus('current')
if mibBuilder.loadTexts: cl2natDroppedIgmpOut.setDescription('This object indicates the Number of dropped IGMP packets for this Layer 2 NAT coming out of the uplinks.')
cl2natPassThruIgmpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 10, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natPassThruIgmpOut.setStatus('current')
if mibBuilder.loadTexts: cl2natPassThruIgmpOut.setDescription('This object indicates the Number of passed through IGMP packets for this Layer 2 NAT coming out of the uplinks.')
cl2natInterfaceIpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 11), )
if mibBuilder.loadTexts: cl2natInterfaceIpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceIpStatisticsTable.setDescription('This table contains statistics for IP translations of an L2 NAT instance that is applied to interface/vlan combination. This table is a logical extension of the cl2natInterfaceStatisticsTable, because these translations belong to the same instance referred to in that table.')
cl2natInterfaceIpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 11, 1), ).setIndexNames((0, "CISCO-L2NAT-MIB", "cl2natInterfaceConfigIfIndex"), (0, "CISCO-L2NAT-MIB", "cl2natInterfaceConfigVlanIndex"), (0, "CISCO-L2NAT-MIB", "cl2natInstIpDirection"), (0, "CISCO-L2NAT-MIB", "cl2natInstIpFromIpAddressType"), (0, "CISCO-L2NAT-MIB", "cl2natInstIpFromIpAddress"))
if mibBuilder.loadTexts: cl2natInterfaceIpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cl2natInterfaceIpStatisticsEntry.setDescription('This Entry is created in the cl2natInterfaceIpStatisticsTable for each IP translation of a Layer 2 NAT instance when it is attached to an interface/vlan.')
cl2natTranslatesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 11, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTranslatesIn.setStatus('current')
if mibBuilder.loadTexts: cl2natTranslatesIn.setDescription('This entry specifies the number of times this entry was matched for packets going from inside to outside of uplinks.')
cl2natTranslatesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 806, 1, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cl2natTranslatesOut.setStatus('current')
if mibBuilder.loadTexts: cl2natTranslatesOut.setDescription('This entry specifies the number of times this entry was matched for packets coming in from outside of uplinks to inside.')
ciscoL2natMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 806, 3))
ciscoL2natMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 806, 3, 1))
ciscoL2natMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 806, 3, 2))
ciscoL2natMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 806, 3, 1, 1)).setObjects(("CISCO-L2NAT-MIB", "cl2natGlobalStatisticsGroup"), ("CISCO-L2NAT-MIB", "cl2natInstanceConfigGroup"), ("CISCO-L2NAT-MIB", "cl2natInstanceStatisticsGroup"), ("CISCO-L2NAT-MIB", "cl2natInstanceTranslationStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoL2natMIBCompliance = ciscoL2natMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoL2natMIBCompliance.setDescription('cisco L2NAT mib compliance object')
cl2natGlobalStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 806, 3, 2, 1)).setObjects(("CISCO-L2NAT-MIB", "cl2natTotalInstances"), ("CISCO-L2NAT-MIB", "cl2natTotalMatched"), ("CISCO-L2NAT-MIB", "cl2natTotalUnmatched"), ("CISCO-L2NAT-MIB", "cl2natTotalFixups"), ("CISCO-L2NAT-MIB", "cl2natTotalTranslationEntryConfigured"), ("CISCO-L2NAT-MIB", "cl2natTotalPacketTranslated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cl2natGlobalStatisticsGroup = cl2natGlobalStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cl2natGlobalStatisticsGroup.setDescription('A collection of objects providing Global Statistics for NAT at layer 2')
cl2natInstanceConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 806, 3, 2, 2)).setObjects(("CISCO-L2NAT-MIB", "cl2natInstConfigPermitIn"), ("CISCO-L2NAT-MIB", "cl2natInstConfigPermitOut"), ("CISCO-L2NAT-MIB", "cl2natInstConfigFixup"), ("CISCO-L2NAT-MIB", "cl2natInstIpRange"), ("CISCO-L2NAT-MIB", "cl2natInstIpToIpAddress"), ("CISCO-L2NAT-MIB", "cl2natInstIpToIpAddressType"), ("CISCO-L2NAT-MIB", "cl2natInstConfigInstanceRowStatus"), ("CISCO-L2NAT-MIB", "cl2natInterfaceConfigRowStatus"), ("CISCO-L2NAT-MIB", "cl2natInstIpAddressMask"), ("CISCO-L2NAT-MIB", "cl2natInterfaceConfigInstanceName"), ("CISCO-L2NAT-MIB", "cl2natInstIpRowStatus"), ("CISCO-L2NAT-MIB", "cl2natInstConfigStorageType"), ("CISCO-L2NAT-MIB", "cl2natInstStorageIpStorageType"), ("CISCO-L2NAT-MIB", "cl2natInterfaceConfigStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cl2natInstanceConfigGroup = cl2natInstanceConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cl2natInstanceConfigGroup.setDescription('A collection of objects providing Instance and interface Config for NAT at layer 2')
cl2natInstanceStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 806, 3, 2, 3)).setObjects(("CISCO-L2NAT-MIB", "cl2natUnmatchedIn"), ("CISCO-L2NAT-MIB", "cl2natDroppedUnicastIn"), ("CISCO-L2NAT-MIB", "cl2natTranslatedUnicastIn"), ("CISCO-L2NAT-MIB", "cl2natFixupArpIn"), ("CISCO-L2NAT-MIB", "cl2natFixupIcmpIn"), ("CISCO-L2NAT-MIB", "cl2natFixupCipIn"), ("CISCO-L2NAT-MIB", "cl2natFixupProfinetIn"), ("CISCO-L2NAT-MIB", "cl2natFixupFtpIn"), ("CISCO-L2NAT-MIB", "cl2natFixupSnmpIn"), ("CISCO-L2NAT-MIB", "cl2natFixupSipIn"), ("CISCO-L2NAT-MIB", "cl2natFixupSccpIn"), ("CISCO-L2NAT-MIB", "cl2natUnmatchedOut"), ("CISCO-L2NAT-MIB", "cl2natDroppedUnicastOut"), ("CISCO-L2NAT-MIB", "cl2natTranslatedUnicastOut"), ("CISCO-L2NAT-MIB", "cl2natFixupArpOut"), ("CISCO-L2NAT-MIB", "cl2natFixupIcmpOut"), ("CISCO-L2NAT-MIB", "cl2natFixupCipOut"), ("CISCO-L2NAT-MIB", "cl2natFixupProfinetOut"), ("CISCO-L2NAT-MIB", "cl2natFixupFtpOut"), ("CISCO-L2NAT-MIB", "cl2natFixupSnmpOut"), ("CISCO-L2NAT-MIB", "cl2natFixupSipOut"), ("CISCO-L2NAT-MIB", "cl2natFixupSccpOut"), ("CISCO-L2NAT-MIB", "cl2natPassThruUnicastIn"), ("CISCO-L2NAT-MIB", "cl2natPassThruUnicastOut"), ("CISCO-L2NAT-MIB", "cl2natDroppedMulticastIn"), ("CISCO-L2NAT-MIB", "cl2natDroppedMulticastOut"), ("CISCO-L2NAT-MIB", "cl2natPassThruMulticastIn"), ("CISCO-L2NAT-MIB", "cl2natPassThruMulticastOut"), ("CISCO-L2NAT-MIB", "cl2natDroppedIgmpIn"), ("CISCO-L2NAT-MIB", "cl2natDroppedIgmpOut"), ("CISCO-L2NAT-MIB", "cl2natPassThruIgmpIn"), ("CISCO-L2NAT-MIB", "cl2natPassThruIgmpOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cl2natInstanceStatisticsGroup = cl2natInstanceStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cl2natInstanceStatisticsGroup.setDescription('A collection of objects providing per Instance Statistics for NAT at layer 2')
cl2natInstanceTranslationStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 806, 3, 2, 4)).setObjects(("CISCO-L2NAT-MIB", "cl2natTranslatesIn"), ("CISCO-L2NAT-MIB", "cl2natTranslatesOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cl2natInstanceTranslationStatisticsGroup = cl2natInstanceTranslationStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cl2natInstanceTranslationStatisticsGroup.setDescription('A collection of objects providing per Instance per translation statistics at layer 2')
mibBuilder.exportSymbols("CISCO-L2NAT-MIB", cl2natDroppedUnicastIn=cl2natDroppedUnicastIn, cl2natInstIpAddressMask=cl2natInstIpAddressMask, cl2natPassThruIgmpOut=cl2natPassThruIgmpOut, cl2natFixupProfinetOut=cl2natFixupProfinetOut, cl2natInstIpAddressType=cl2natInstIpAddressType, cl2natInterfaceConfigIfIndex=cl2natInterfaceConfigIfIndex, cl2natTranslatedUnicastOut=cl2natTranslatedUnicastOut, cl2natTotalFixups=cl2natTotalFixups, cl2natTotalPacketTranslated=cl2natTotalPacketTranslated, cl2natDroppedIgmpOut=cl2natDroppedIgmpOut, cl2natInstConfigFixup=cl2natInstConfigFixup, cl2natInterfaceStatisticsTable=cl2natInterfaceStatisticsTable, ciscoL2natMIB=ciscoL2natMIB, cl2natFixupSipIn=cl2natFixupSipIn, cl2natDroppedUnicastOut=cl2natDroppedUnicastOut, cl2natInterfaceConfigVlanIndex=cl2natInterfaceConfigVlanIndex, cl2natInstConfigPermitIn=cl2natInstConfigPermitIn, cl2natUnmatchedIn=cl2natUnmatchedIn, ciscoL2natMIBConformance=ciscoL2natMIBConformance, cl2natInstIpInstanceIpTable=cl2natInstIpInstanceIpTable, cl2natInstConfigInstanceName=cl2natInstConfigInstanceName, cl2natInstIpFromIpAddress=cl2natInstIpFromIpAddress, cl2natFixupArpOut=cl2natFixupArpOut, cl2natPassThruMulticastOut=cl2natPassThruMulticastOut, cl2natInstIpRange=cl2natInstIpRange, cl2natTotalMatched=cl2natTotalMatched, cl2natFixupSccpOut=cl2natFixupSccpOut, cl2natFixupCipOut=cl2natFixupCipOut, cl2natInstIpInstanceIpEntry=cl2natInstIpInstanceIpEntry, cl2natInstIpFromIpAddressType=cl2natInstIpFromIpAddressType, ciscoL2natMIBGroups=ciscoL2natMIBGroups, cl2natTranslatesOut=cl2natTranslatesOut, cl2natInstIpDirection=cl2natInstIpDirection, cl2natFixupCipIn=cl2natFixupCipIn, cl2natInterfaceConfigEntry=cl2natInterfaceConfigEntry, PYSNMP_MODULE_ID=ciscoL2natMIB, cl2natFixupSnmpOut=cl2natFixupSnmpOut, cl2natFixupFtpOut=cl2natFixupFtpOut, cl2natPassThruUnicastOut=cl2natPassThruUnicastOut, cl2natFixupSnmpIn=cl2natFixupSnmpIn, cl2natFixupSccpIn=cl2natFixupSccpIn, cl2natTotalInstances=cl2natTotalInstances, cl2natFixupFtpIn=cl2natFixupFtpIn, cl2natInterfaceConfigInstanceName=cl2natInterfaceConfigInstanceName, cl2natInstConfigPermitOut=cl2natInstConfigPermitOut, cl2natUnmatchedOut=cl2natUnmatchedOut, cl2natInstanceTranslationStatisticsGroup=cl2natInstanceTranslationStatisticsGroup, cl2natDroppedMulticastOut=cl2natDroppedMulticastOut, cl2natInterfaceConfigRowStatus=cl2natInterfaceConfigRowStatus, ciscoL2natMIBCompliance=ciscoL2natMIBCompliance, cl2natGlobalStatisticsGroup=cl2natGlobalStatisticsGroup, cl2natFixupIcmpIn=cl2natFixupIcmpIn, cl2natTranslatedUnicastIn=cl2natTranslatedUnicastIn, cl2natFixupProfinetIn=cl2natFixupProfinetIn, cl2natInterfaceConfigTable=cl2natInterfaceConfigTable, cl2natInterfaceConfigStorageType=cl2natInterfaceConfigStorageType, cl2natFixupIcmpOut=cl2natFixupIcmpOut, cl2natInterfaceIpStatisticsEntry=cl2natInterfaceIpStatisticsEntry, cl2natDroppedIgmpIn=cl2natDroppedIgmpIn, cl2natInstIpToIpAddress=cl2natInstIpToIpAddress, cl2natDroppedMulticastIn=cl2natDroppedMulticastIn, ciscoL2natMIBCompliances=ciscoL2natMIBCompliances, cl2natFixupArpIn=cl2natFixupArpIn, cl2natTranslatesIn=cl2natTranslatesIn, cl2natInstConfigInstanceTable=cl2natInstConfigInstanceTable, cl2natInstConfigInstanceEntry=cl2natInstConfigInstanceEntry, cl2natInstanceConfigGroup=cl2natInstanceConfigGroup, cl2natInstConfigStorageType=cl2natInstConfigStorageType, ciscoL2natMIBObjects=ciscoL2natMIBObjects, cl2natTotalUnmatched=cl2natTotalUnmatched, cl2natInstConfigInstanceRowStatus=cl2natInstConfigInstanceRowStatus, cl2natFixupSipOut=cl2natFixupSipOut, cl2natInstIpRowStatus=cl2natInstIpRowStatus, cl2natPassThruIgmpIn=cl2natPassThruIgmpIn, cl2natPassThruUnicastIn=cl2natPassThruUnicastIn, cl2natInstStorageIpStorageType=cl2natInstStorageIpStorageType, cl2natPassThruMulticastIn=cl2natPassThruMulticastIn, cl2natTotalTranslationEntryConfigured=cl2natTotalTranslationEntryConfigured, cl2natInterfaceStatisticsEntry=cl2natInterfaceStatisticsEntry, cl2natInterfaceIpStatisticsTable=cl2natInterfaceIpStatisticsTable, cl2natInstIpToIpAddressType=cl2natInstIpToIpAddressType, cl2natInstanceStatisticsGroup=cl2natInstanceStatisticsGroup)
