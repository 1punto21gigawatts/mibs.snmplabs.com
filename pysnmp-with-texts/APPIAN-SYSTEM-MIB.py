#
# PySNMP MIB module APPIAN-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcNodeId, AcNodeArchitecture, AcOpStatus, AcAdminStatus, acOsap = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcNodeId", "AcNodeArchitecture", "AcOpStatus", "AcAdminStatus", "acOsap")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, NotificationType, ModuleIdentity, Counter64, MibIdentifier, Integer32, Bits, Gauge32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "NotificationType", "ModuleIdentity", "Counter64", "MibIdentifier", "Integer32", "Bits", "Gauge32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress")
MacAddress, TruthValue, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention", "DateAndTime")
acSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 7))
acSystem.setRevisions(('1999-11-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acSystem.setRevisionsDescriptions(('Draft engineering version. Not for release.',))
if mibBuilder.loadTexts: acSystem.setLastUpdated('9911140000Z')
if mibBuilder.loadTexts: acSystem.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acSystem.setContactInfo('Douglas Theriault')
if mibBuilder.loadTexts: acSystem.setDescription('Appian Communications Services MIB definitions file containing configuration and statistics control for system related services. These services include Configuration Management, Event Logging, Statistics Collection, Alarms and Thresholds configuration, OSAP discovery and topology protocol.')
acCommMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1))
acStatsMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 2))
acEventMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3))
acConfigMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4))
acSntpMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7))
acAuthMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8))
acTrapMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9))
acFileXferMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10))
acRdpMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11))
class AcAccessRights(TextualConvention, Integer32):
    description = 'Community access rights: - readOnly: allows read access to all MIB tables with the exception of acCommMgrCommTable and acCommMgrSourceAddrTable. - readWrite: if there are no configured communities with security access rights, it allows read and write access to all MIB tables. However, if there is a security community configured, a community with readWrite access rights will not have read access to acCommMgrCommTable and acCommMgrSourceAddrTable, and it will not have write access to acCommMgrCommTable, acCommMgrSourceAddrTable, acTrapMgrDestAddrTable and acTrapMgrFilterTable. - security allows read-write access to all MIB tables.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("readOnly", 1), ("readWrite", 2), ("security", 3))

acCommMgrCommTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 1), )
if mibBuilder.loadTexts: acCommMgrCommTable.setStatus('current')
if mibBuilder.loadTexts: acCommMgrCommTable.setDescription('Table for configuring community strings and community access rights.')
acCommMgrCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acCommMgrCommNodeId"), (0, "APPIAN-SYSTEM-MIB", "acCommMgrCommId"))
if mibBuilder.loadTexts: acCommMgrCommEntry.setStatus('current')
if mibBuilder.loadTexts: acCommMgrCommEntry.setDescription('Entry of community table.')
acCommMgrCommNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acCommMgrCommNodeId.setStatus('current')
if mibBuilder.loadTexts: acCommMgrCommNodeId.setDescription('Unique identification number of this node within an Appian ring.')
acCommMgrCommId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acCommMgrCommId.setStatus('current')
if mibBuilder.loadTexts: acCommMgrCommId.setDescription('Number that uniquely identifies a community.')
acCommMgrCommAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 1, 1, 3), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCommMgrCommAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acCommMgrCommAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acCommMgrCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCommMgrCommString.setStatus('current')
if mibBuilder.loadTexts: acCommMgrCommString.setDescription('String that uniquely identifies a community.')
acCommMgrCommAccessRights = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 1, 1, 5), AcAccessRights()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCommMgrCommAccessRights.setStatus('current')
if mibBuilder.loadTexts: acCommMgrCommAccessRights.setDescription('Community access rights. See AcAccessRights for the semantics.')
acCommMgrSourceAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 2), )
if mibBuilder.loadTexts: acCommMgrSourceAddrTable.setStatus('current')
if mibBuilder.loadTexts: acCommMgrSourceAddrTable.setDescription('Table that specifies valid SNMP request source IP addresses and/or subnets for the different communities.')
acCommMgrSourceAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 2, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acCommMgrSourceAddrNodeId"), (0, "APPIAN-SYSTEM-MIB", "acCommMgrSourceAddrCommId"), (0, "APPIAN-SYSTEM-MIB", "acCommMgrSourceAddrIpAddress"))
if mibBuilder.loadTexts: acCommMgrSourceAddrEntry.setStatus('current')
if mibBuilder.loadTexts: acCommMgrSourceAddrEntry.setDescription('Entry that specifies a valid SNMP request source IP address or subnet for a given community.')
acCommMgrSourceAddrNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acCommMgrSourceAddrNodeId.setStatus('current')
if mibBuilder.loadTexts: acCommMgrSourceAddrNodeId.setDescription('Unique identification number of this node within an Appian ring.')
acCommMgrSourceAddrCommId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acCommMgrSourceAddrCommId.setStatus('current')
if mibBuilder.loadTexts: acCommMgrSourceAddrCommId.setDescription('Number that uniquely identifies a community.')
acCommMgrSourceAddrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 2, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acCommMgrSourceAddrIpAddress.setStatus('current')
if mibBuilder.loadTexts: acCommMgrSourceAddrIpAddress.setDescription('Valid source IP address for SNMP requests of this community. All source IP addresses are valid for a given community if there are no entries in acCommMgrSourceAddrTable for this community with acCommMgrSourceAddrAdminStatus equal to activate')
acCommMgrSourceAddrIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCommMgrSourceAddrIpSubnet.setStatus('current')
if mibBuilder.loadTexts: acCommMgrSourceAddrIpSubnet.setDescription('Subnet mask for valid source IP subnet for SNMP requests of this community.')
acCommMgrSourceAddrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 1, 2, 1, 5), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acCommMgrSourceAddrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acCommMgrSourceAddrAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acStatsMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 2, 1), )
if mibBuilder.loadTexts: acStatsMgrTable.setStatus('current')
if mibBuilder.loadTexts: acStatsMgrTable.setDescription('A table of statistics manager configuration parameters which is indexed by AcNodeId.')
acStatsMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 2, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acStatsMgrNodeId"))
if mibBuilder.loadTexts: acStatsMgrEntry.setStatus('current')
if mibBuilder.loadTexts: acStatsMgrEntry.setDescription('The configuration and status parameters controlling the Statistics Manager service on this specific node.')
acStatsMgrNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acStatsMgrNodeId.setStatus('current')
if mibBuilder.loadTexts: acStatsMgrNodeId.setDescription("The unique node identification number assigned by the EMS system to uniquely identify this node within an Appian ring of OSAP's.")
acStatsMgrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 2, 1, 1, 2), AcAdminStatus().clone('inactivate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acStatsMgrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acStatsMgrAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acEventMgrControlTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1), )
if mibBuilder.loadTexts: acEventMgrControlTable.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlTable.setDescription('A table of configuration parameters controlling the event manager. The event manager is responsible for logging security and application state changes generated on a node. These events are stored in non-volitile memory and may be sent as traps to the EMS system.')
acEventMgrControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acEventMgrControlNodeId"))
if mibBuilder.loadTexts: acEventMgrControlEntry.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlEntry.setDescription('The configuration and status parameters controlling the Event Logging Manager service on this specific node.')
acEventMgrControlNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEventMgrControlNodeId.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlNodeId.setDescription("The unique node identification number assigned by the EMS system to uniquely identify this node within an Appian ring of OSAP's.")
acEventMgrControlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 2), AcAdminStatus().clone('activate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrControlAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acEventMgrControlLogMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("flash-only", 2))).clone('flash-only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlLogMode.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlLogMode.setDescription('There are two kinds of logs in OSAP: regular log, and security log. This is the attribute to control the mode of operation of the regular event log. The regular event log can be configured to write to flash, or it can be disabled. When disabled, the event manager will keep a record of events in memory, which are available to the local CLI/TL1 but are not persistant.')
acEventMgrControlLogMaxFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1024)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlLogMaxFileSize.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlLogMaxFileSize.setDescription('The size of the regular event log on the file system measured in k-bytes.')
acEventMgrControlLogCurrentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEventMgrControlLogCurrentSize.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlLogCurrentSize.setDescription('The current size of the regular event log measured in k-bytes.')
acEventMgrControlLogFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEventMgrControlLogFileName.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlLogFileName.setDescription('The name of the binary regular log file.')
acEventMgrControlLogFileWrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlLogFileWrapEnable.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrControlLogFileWrapEnable.setDescription('When set to true, tells the event log manager to wrap the regular event log file when it has reached the maximum size. Oldest log entries are overwritten first when a wrap condition is reached.')
acEventMgrControlSecurityLogMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("flash-only", 2))).clone('flash-only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlSecurityLogMode.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlSecurityLogMode.setDescription('There are two kinds of logs in OSAP: regular log, and security log. This is the attribute to control the mode of operation of the security event log. The security event log can be configured to write to flash, or it can be disabled. When disabled, the event manager will keep a record of events in memory, which are available to the local CLI/TL1 but are not persistant.')
acEventMgrControlSecurityLogMaxFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1024)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlSecurityLogMaxFileSize.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlSecurityLogMaxFileSize.setDescription('The size of the regular security log on the file system measured in k-bytes.')
acEventMgrControlSecurityLogCurrentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEventMgrControlSecurityLogCurrentSize.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlSecurityLogCurrentSize.setDescription('The current size of the security event log measured in k-bytes.')
acEventMgrControlSecurityLogFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEventMgrControlSecurityLogFileName.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlSecurityLogFileName.setDescription('The name of the binary security log file.')
acEventMgrControlSecurityLogFileWrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlSecurityLogFileWrapEnable.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrControlSecurityLogFileWrapEnable.setDescription('When set to true, tells the event log manager to wrap the security event log file when it has reached the maximum size. Oldest log entries are overwritten first when a wrap condition is reached.')
acEventMgrControlRedirectTraceSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlRedirectTraceSlot1.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlRedirectTraceSlot1.setDescription('When set to true, events that originate in slot 1 and would otherwise be displayed on the global standard output (console or telnet session) of slot 1, will instead be displayed on the global standard output of the master switch.')
acEventMgrControlRedirectTraceSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrControlRedirectTraceSlot2.setStatus('current')
if mibBuilder.loadTexts: acEventMgrControlRedirectTraceSlot2.setDescription('When set to true, events that originate in slot 2 and would otherwise be displayed on the global standard output (console or telnet session) of slot 2, will instead be displayed on the global standard output of the master switch.')
acEventMgrAgentTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2), )
if mibBuilder.loadTexts: acEventMgrAgentTable.setStatus('current')
if mibBuilder.loadTexts: acEventMgrAgentTable.setDescription('This table provides configuration on a per agent basis for the handling of event messages from each agent. This table is automatically created by the system and does not need to be generated by the EMS.')
acEventMgrAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acEventMgrAgentNodeId"), (0, "APPIAN-SYSTEM-MIB", "acEventMgrAgentSlot"), (0, "APPIAN-SYSTEM-MIB", "acEventMgrAgentId"))
if mibBuilder.loadTexts: acEventMgrAgentEntry.setStatus('current')
if mibBuilder.loadTexts: acEventMgrAgentEntry.setDescription('A row per entity which allows for configuration settings on how eventlog messages generated by this entity are stored and reported for the EMS.')
acEventMgrAgentNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEventMgrAgentNodeId.setStatus('current')
if mibBuilder.loadTexts: acEventMgrAgentNodeId.setDescription('A unique node identification number which uniquely identifies a node within an Appian ring of OSAPs.')
acEventMgrAgentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("kernel", 1), ("common", 2), ("msgsvc", 3), ("fwdmgr", 4), ("iasmgr", 5), ("tlsmgr", 6), ("cfgmgr", 7), ("almmgr", 8), ("clisvc", 9), ("tl1svc", 10), ("enetaccess", 11), ("system", 12), ("enetIME", 13), ("ds1Tdm", 14), ("ds3Tdm", 15), ("ds3Net", 16), ("oc3Net", 17), ("ppp", 18), ("tta", 19), ("asrt", 20), ("fr", 21), ("sntp", 22), ("bpm", 23), ("snmp", 24), ("telnet", 25), ("serial", 26), ("statsmgr", 27), ("appiandcc", 28), ("excep", 29), ("mgmtapi", 30), ("lpta", 31), ("scmctrl", 32), ("sonet", 33), ("temux", 34), ("qos", 35), ("service", 36), ("mlc", 37), ("hdlc", 38), ("modmgr", 39), ("scpplt", 40), ("clkdrv", 41), ("plc", 42), ("mach", 43), ("enetagg", 44), ("eventmgr", 45), ("mgmtrem", 46), ("rdp", 47), ("loader", 48)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEventMgrAgentId.setStatus('current')
if mibBuilder.loadTexts: acEventMgrAgentId.setDescription("The acEventMgrAgentId identifies the agent which will be logging events within the event manager subsystem. The enumeration list of these well known ID's are published and used by the EMS in decoding the event log information for which agent has recorded an event.")
acEventMgrAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEventMgrAgentName.setStatus('current')
if mibBuilder.loadTexts: acEventMgrAgentName.setDescription('An ASCII name of the well known agent, sutible for display.')
acEventMgrAgentAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 4), AcAdminStatus().clone('activate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrAgentAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrAgentAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acEventMgrAgentLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrAgentLogLevel.setStatus('current')
if mibBuilder.loadTexts: acEventMgrAgentLogLevel.setDescription('The logging level at which this entity will generate events destined for the event log manager. Currently this value is a bit mask allowing the user to select which types of events to store in the log. The bit mask values are selected as follows based on the position of the bit: critical(1), -- Critical means needs immediate attn. major(2), -- The resources may be exhausted soon. minor(4), -- Early indication of resource exhaustion. warning(8), -- Warnings, non-fatal. info(16), -- Informational event. debug(32), -- Used for debugging only. cleared(64), -- An alarm is being cleared. security-critical(128), -- Security log - Critical means needs immediate attn. security-major(256), -- Security log - The resources may be exhausted soon. security-minor(512), -- Security log - Early indication of resource exhaustion. security-warning(1024), -- Security log - Warnings, non-fatal. security-info(2048), -- Security log - Informational event. security-debug(4096), -- Security log - Used for debugging only. security-cleared(8192) -- Security log - An alarm is being cleared. The mask is generated as a logical OR of the values defined above.')
acEventMgrAgentNumberEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEventMgrAgentNumberEvents.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrAgentNumberEvents.setDescription('The total number of events this entity has generated on this slot.')
acEventMgrAgentLastEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEventMgrAgentLastEventCode.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrAgentLastEventCode.setDescription('The last event ID which was generated by this entity on this slot.')
acEventMgrAgentLastEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEventMgrAgentLastEventCount.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrAgentLastEventCount.setDescription('The number of times the last event ID has been generated on this slot. Helpful in keeping a running count of the last event in the case of repeating errors.')
acEventMgrAgentSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEventMgrAgentSlot.setStatus('current')
if mibBuilder.loadTexts: acEventMgrAgentSlot.setDescription('The slot number where the configuration of this row will be applied.')
acEventMgrAgentTraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEventMgrAgentTraceLevel.setStatus('current')
if mibBuilder.loadTexts: acEventMgrAgentTraceLevel.setDescription('Specifies what types of events originated by this entity will be displayed on the standard global output as traces. Currently this value is a bit mask allowing the user to select which types of events to display. The bit mask values are selected as follows based on the position of the bit: critical(1), -- Critical means needs immediate attn. major(2), -- The resources may be exhausted soon. minor(4), -- Early indication of resource exhaustion. warning(8), -- Warnings, non-fatal. info(16), -- Informational event. debug(32), -- Used for debugging only. cleared(64), -- An alarm is being cleared. security-critical(128), -- Security log - Critical means needs immediate attn. security-major(256), -- Security log - The resources may be exhausted soon. security-minor(512), -- Security log - Early indication of resource exhaustion. security-warning(1024), -- Security log - Warnings, non-fatal. security-info(2048), -- Security log - Informational event. security-debug(4096), -- Security log - Used for debugging only. security-cleared(8192) -- Security log - An alarm is being cleared. The mask is generated as a logical OR of the values defined above.')
acEventMgrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 0))
acEventMgrLogFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acEventMgrControlNodeId"), ("APPIAN-SYSTEM-MIB", "acEventMgrControlLogCurrentSize"))
if mibBuilder.loadTexts: acEventMgrLogFullTrap.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrLogFullTrap.setDescription('The event log is over 90% full and wrapping is not enabled.')
acEventMgrSecurityLogFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acEventMgrControlNodeId"), ("APPIAN-SYSTEM-MIB", "acEventMgrControlSecurityLogCurrentSize"))
if mibBuilder.loadTexts: acEventMgrSecurityLogFullTrap.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrSecurityLogFullTrap.setDescription('The security log is over 90% full and wrapping is not enabled.')
acEventMgrLogFileCloseFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acEventMgrControlNodeId"), ("APPIAN-SYSTEM-MIB", "acEventMgrControlLogFileName"))
if mibBuilder.loadTexts: acEventMgrLogFileCloseFailedTrap.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrLogFileCloseFailedTrap.setDescription("The regular log file couldn't be closed.")
acEventMgrSecurityLogFileCloseFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 3, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acEventMgrControlNodeId"), ("APPIAN-SYSTEM-MIB", "acEventMgrControlSecurityLogFileName"))
if mibBuilder.loadTexts: acEventMgrSecurityLogFileCloseFailedTrap.setStatus('deprecated')
if mibBuilder.loadTexts: acEventMgrSecurityLogFileCloseFailedTrap.setDescription("The security log file couldn't be closed.")
acConfigMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1), )
if mibBuilder.loadTexts: acConfigMgrTable.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrTable.setDescription('The configuration manager configuration parameters in a table which is indexed by a unique AcNodeId.')
acConfigMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acConfigMgrNodeId"))
if mibBuilder.loadTexts: acConfigMgrEntry.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrEntry.setDescription('Single record per node which contains the configuration parameters for the configuration manager agent. This row is automatically created by the agent upon system initialization.')
acConfigMgrNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acConfigMgrNodeId.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrNodeId.setDescription("A unique number assigned by the EMS which uniquely identifies a node within an Appian ring of OSAP's.")
acConfigMgrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 2), AcAdminStatus().clone('inactivate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acConfigMgrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acConfigMgrCurrentRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acConfigMgrCurrentRevision.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrCurrentRevision.setDescription('The numeric revision number for the configuration file. This number is Appian specific and not an RCS type revision for the file, but instead an internal software revision of the file format.')
acConfigMgrFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('config.dat')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acConfigMgrFileName.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrFileName.setDescription('The name of the configuration file. When the system boots, this config file is expected to be on the file system and will be the file that the system uses for normal operation.')
acConfigMgrAutoSaveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acConfigMgrAutoSaveInterval.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrAutoSaveInterval.setDescription('The number of seconds after a provisioning change when the config file is updated with the current state of configuration for this node. The acConfigMgrAutoSaveEnable flag must be set to true(1) for auto-save to take place.')
acConfigMgrAutoSaveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acConfigMgrAutoSaveEnable.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrAutoSaveEnable.setDescription("When set to true(1), the configuration manager will perform an update operation on the configuration file after 'n' seconds from the last provisioning change, specified by acConfigMgrAutoSaveInterval. Enabling this feature allows the EMS to assume the platform is in sync with a recent dynamic provisioning change, vs. sending down a new configuration file.")
acConfigMgrLastWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acConfigMgrLastWritten.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrLastWritten.setDescription('The last time the configuration file was updated automatically.')
acConfigMgrSaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acConfigMgrSaveConfig.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrSaveConfig.setDescription('When set to true(1), the configuration manager will perform an update operation on the configuration file immediately.')
acConfigMgrOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("succeeded", 1), ("failed", 2), ("writing", 3))).clone('succeeded')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acConfigMgrOpStatus.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrOpStatus.setDescription('This attribute indicates the configuration file save status when acConfigMgrSaveConfig is set.')
acConfigMgrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 0))
acConfigMgrConfigFileCloseFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 4, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acConfigMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acConfigMgrFileName"))
if mibBuilder.loadTexts: acConfigMgrConfigFileCloseFailedTrap.setStatus('current')
if mibBuilder.loadTexts: acConfigMgrConfigFileCloseFailedTrap.setDescription("The configuration file couldn't be closed.")
acSntpMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1), )
if mibBuilder.loadTexts: acSntpMgrTable.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrTable.setDescription('The SNTP Manager is responsible for controlling the SNTP client agent on the SCP. The SNTP client will peer with a time server which itself may peer with a higher stratum clock or a radio receiver.')
acSntpMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acSntpMgrNodeId"))
if mibBuilder.loadTexts: acSntpMgrEntry.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrEntry.setDescription('A configuration record for the SNTP client agent.')
acSntpMgrNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSntpMgrNodeId.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrNodeId.setDescription("A unique identifier assigned by the EMS which uniquely identifies a node within an Appian ring of OSAP's.")
acSntpMgrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 2), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSntpMgrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrAdminStatus.setDescription('Attribute allowing enable/disabling control of the SNTP agent for provisioning changes. Refer to AcAdminStatus definition in appian-smi.mib.')
acSntpMgrOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 3), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSntpMgrOpStatus.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrOpStatus.setDescription('Attribute which describes the current operational status of the SNTP client agent. Refer to AcOpStatus definition in appian-smi.mib.')
acSntpMgrErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSntpMgrErrorCode.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrErrorCode.setDescription('If an error is reported in acSntpMgrOpStatus, this attribute will contain a detailed error code which can be referenced to determine the cause of a problem. The eventlog will also contain the failure reason.')
acSntpMgrPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSntpMgrPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrPeerIpAddress.setDescription('The configured IP Address in dotted notation which SNTP uses to perform NTP queries against. The peer should be a Stratum-2 or greater clock.')
acSntpMgrQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSntpMgrQueryInterval.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrQueryInterval.setDescription('The interval expressed in the number of seconds between NTP Query requests.')
acSntpMgrRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 7), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSntpMgrRetryCount.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrRetryCount.setDescription('The number of query attempts the SNTP client should perform before reporting that the SNTP client cannot communicate with the peer.')
acSntpMgrMaxVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7200000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSntpMgrMaxVariance.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrMaxVariance.setDescription('The variance expressed as the number of milliseconds between client and peer which will trigger an alarm. This is useful in determining if the historical data recorded in NOVRAM for statistics trending or timestamps used for traps is outside the configured variance parameter.')
acSntpMgrVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSntpMgrVariance.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrVariance.setDescription('The amount of time expressed as the number of milliseconds delta between client and peer.')
acSntpMgrVarianceDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSntpMgrVarianceDetectEnable.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrVarianceDetectEnable.setDescription('Used to enable or disable variance threshold alarms.')
acSntpMgrTimeZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSntpMgrTimeZone.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrTimeZone.setDescription('The time zone this node is currently located in, expressed as an integer ranging from 0 to 23, representing the 24 hr time- zones starting at UTC which is equal to 0 and proceeding in the positive westerly direction. ie: Boston = 5, California=8. Note: Daylight savings time is not automatically calculated.')
acSntpMgrDayLightSaving = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSntpMgrDayLightSaving.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrDayLightSaving.setDescription('It specifies if daylight saving time is applicable.')
acSntpMgrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 0))
acSntpMgrPeerFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acSntpMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acSntpMgrPeerIpAddress"))
if mibBuilder.loadTexts: acSntpMgrPeerFailureTrap.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrPeerFailureTrap.setDescription('The SNTP Client is unable to communicate with the NTP Server which has been configured.')
acSntpMgrVarianceTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acSntpMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acSntpMgrMaxVariance"), ("APPIAN-SYSTEM-MIB", "acSntpMgrVariance"))
if mibBuilder.loadTexts: acSntpMgrVarianceTrap.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrVarianceTrap.setDescription('The difference in time between client and peer exceeds the configured variance.')
acSntpMgrHardwareTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 7, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acSntpMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acSntpMgrErrorCode"))
if mibBuilder.loadTexts: acSntpMgrHardwareTrap.setStatus('current')
if mibBuilder.loadTexts: acSntpMgrHardwareTrap.setDescription('The SNTP Client was unable to read or write the hardware clock.')
acAuthMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1), )
if mibBuilder.loadTexts: acAuthMgrTable.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrTable.setDescription('The Authentication Manager is responsible for tracking who is logged into the system and how many success or failure events have occured for a unique user. As users log off the system they will be removed from the table.')
acAuthMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acAuthMgrNodeId"), (0, "APPIAN-SYSTEM-MIB", "acAuthMgrUserId"))
if mibBuilder.loadTexts: acAuthMgrEntry.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrEntry.setDescription('A single row within the authentication table tracking a single user session which can be via telnet, serial, rlogin or ftp.')
acAuthMgrNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acAuthMgrNodeId.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrNodeId.setDescription('A unique number within an Appian Ring identifying the node for which the user is logged into.')
acAuthMgrUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acAuthMgrUserId.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrUserId.setDescription('A unique identifier within an Appian node which is used to identify the user currently attempting to gain access to the system.')
acAuthMgrUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAuthMgrUserName.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrUserName.setDescription('A unique identifier within an Appian node which is used to identify the user currently attempting to gain access to the system.')
acAuthMgrAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("serial", 1), ("telnet", 2), ("rlogin", 3), ("ftp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAuthMgrAccessMode.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrAccessMode.setDescription('The current access method for this user.')
acAuthMgrLogonTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAuthMgrLogonTime.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrLogonTime.setDescription('The logon time this user was given access.')
acAuthMgrFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAuthMgrFailures.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrFailures.setDescription('The total number of logon attempts for a user who was given access to the system and who is currently still logged in, or the failure attempts for a user who attempted to gain access but did not.')
acAuthMgrLockOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAuthMgrLockOut.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrLockOut.setDescription('This field will read true(1) when the max number of failures has been reached for an attempted logon using the user name listed in this row.')
acAuthMgrDeleteEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAuthMgrDeleteEntry.setStatus('current')
if mibBuilder.loadTexts: acAuthMgrDeleteEntry.setDescription('Used to delete rows in this table.')
acTrapMgrDestAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 1), )
if mibBuilder.loadTexts: acTrapMgrDestAddrTable.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrDestAddrTable.setDescription('Table that specifies trap destination IP addresses for the different communities.')
acTrapMgrDestAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acTrapMgrDestAddrNodeId"), (0, "APPIAN-SYSTEM-MIB", "acTrapMgrDestAddrCommId"), (0, "APPIAN-SYSTEM-MIB", "acTrapMgrDestAddrIpAddress"))
if mibBuilder.loadTexts: acTrapMgrDestAddrEntry.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrDestAddrEntry.setDescription('Entry that specifies, for a given community, an IP address to send traps to.')
acTrapMgrDestAddrNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTrapMgrDestAddrNodeId.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrDestAddrNodeId.setDescription('Unique identification number of this node within an Appian ring.')
acTrapMgrDestAddrCommId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTrapMgrDestAddrCommId.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrDestAddrCommId.setDescription('Number that uniquely identifies a community.')
acTrapMgrDestAddrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 1, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTrapMgrDestAddrIpAddress.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrDestAddrIpAddress.setDescription('IP address to send traps to.')
acTrapMgrDestAddrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 1, 1, 4), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acTrapMgrDestAddrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrDestAddrAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acTrapMgrFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 2), )
if mibBuilder.loadTexts: acTrapMgrFilterTable.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrFilterTable.setDescription("Table that lists, for the different communities, the traps that these communities don't want to receive.")
acTrapMgrFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 2, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acTrapMgrFilterNodeId"), (0, "APPIAN-SYSTEM-MIB", "acTrapMgrFilterCommId"), (0, "APPIAN-SYSTEM-MIB", "acTrapMgrFilterId"))
if mibBuilder.loadTexts: acTrapMgrFilterEntry.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrFilterEntry.setDescription('This entry specifies a trap type (by OID) that the specified community is not interested in receiving.')
acTrapMgrFilterNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTrapMgrFilterNodeId.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrFilterNodeId.setDescription('Unique identification number of this node within an Appian ring.')
acTrapMgrFilterCommId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTrapMgrFilterCommId.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrFilterCommId.setDescription('Number that uniquely identifies a community.')
acTrapMgrFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTrapMgrFilterId.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrFilterId.setDescription('Number that, for the given node and community, uniquely identifies this filter.')
acTrapMgrFilterAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 2, 1, 4), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acTrapMgrFilterAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrFilterAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acTrapMgrFilterTrapOid = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acTrapMgrFilterTrapOid.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrFilterTrapOid.setDescription('Object identifier that identifies the trap type that will not be sent to the given community.')
acTrapMgrResendTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 3), )
if mibBuilder.loadTexts: acTrapMgrResendTable.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrResendTable.setDescription('Table that allows a management system to request traps to be resent. Only the last 100 traps generated by the OSAP will be stored.')
acTrapMgrResendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 3, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acTrapMgrResendNodeId"))
if mibBuilder.loadTexts: acTrapMgrResendEntry.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrResendEntry.setDescription('Setting this entry triggers the specified traps to be resent to the destination IP address specified.')
acTrapMgrResendNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTrapMgrResendNodeId.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrResendNodeId.setDescription('Unique identification number of this node within an Appian ring.')
acTrapMgrResendAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 3, 1, 2), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrapMgrResendAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrResendAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acTrapMgrResendFromSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrapMgrResendFromSeqId.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrResendFromSeqId.setDescription('Beginning of trap sequence number interval of traps to resend.')
acTrapMgrResendToSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 9, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrapMgrResendToSeqId.setStatus('current')
if mibBuilder.loadTexts: acTrapMgrResendToSeqId.setDescription('End of trap sequence number interval of traps to resend. If acTrapMgrResendToSeqId is the same as acTrapMgrResendFromSeqId, then only 1 trap is sent.')
acAuthMgrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 0))
acAuthenticationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acAuthMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acAuthMgrUserName"), ("APPIAN-SYSTEM-MIB", "acAuthMgrAccessMode"), ("APPIAN-SYSTEM-MIB", "acAuthMgrFailures"))
if mibBuilder.loadTexts: acAuthenticationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: acAuthenticationFailureTrap.setDescription('Access denied due to a Logon Authentication failure.')
acAuthenticationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acAuthMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acAuthMgrUserName"), ("APPIAN-SYSTEM-MIB", "acAuthMgrAccessMode"), ("APPIAN-SYSTEM-MIB", "acAuthMgrFailures"))
if mibBuilder.loadTexts: acAuthenticationExceededTrap.setStatus('current')
if mibBuilder.loadTexts: acAuthenticationExceededTrap.setDescription('The maximum number of authentication failure attempts has been exceeded. Access has been denied.')
acAuthenticationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 8, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acAuthMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acAuthMgrUserName"), ("APPIAN-SYSTEM-MIB", "acAuthMgrAccessMode"))
if mibBuilder.loadTexts: acAuthenticationSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: acAuthenticationSuccessTrap.setDescription('Successful logon by user.')
acFileXferMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1), )
if mibBuilder.loadTexts: acFileXferMgrTable.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrTable.setDescription('This table contains file transfer operation information. This table is created during the initialization of the system. The EMS does not create new rows in it.')
acFileXferMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acFileXferMgrNodeId"), (0, "APPIAN-SYSTEM-MIB", "acFileXferMgrRowId"))
if mibBuilder.loadTexts: acFileXferMgrEntry.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrEntry.setDescription('Each row in this table indicates a file transfer operation.')
acFileXferMgrNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acFileXferMgrNodeId.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrNodeId.setDescription('A unique node identification number which uniquely identifies a node within an Appian ring of OSAPs.')
acFileXferMgrRowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acFileXferMgrRowId.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrRowId.setDescription('The acFileXferMgrRowId identifies the row index of the table.')
acFileXferMgrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 3), AcAdminStatus().clone('inactivate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrAdminStatus.setDescription('The administrative status. See AcAdminStatus for the semantics.')
acFileXferMgrOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2))).clone('download')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrOperation.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrOperation.setDescription('The operation type. The upload and download indicate the direction of the file transfer from the perspective of the OSAP. A download is an ftp get from the ftp server, and an upload is an ftp put to the ftp server.')
acFileXferMgrFiletype = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("image", 1), ("eventlog", 2), ("config", 3), ("generic", 4))).clone('image')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrFiletype.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrFiletype.setDescription('This attribute indicates whether a binary image, or a binary event log, a textual configuration file or any other file is being transferred.')
acFileXferMgrFilesubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("primaryimage", 1), ("namedbootimage", 2), ("regularlog", 3), ("securitylog", 4), ("none", 5))).clone('primaryimage')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrFilesubtype.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrFilesubtype.setDescription('This attribute indicates what type of file it is.')
acFileXferMgrFtpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrFtpServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrFtpServerIpAddress.setDescription('The IP Address of the ftp server from where the file is being transferred.')
acFileXferMgrUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('anonymous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrUsername.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrUsername.setDescription('The user name to be used for the ftp login authentication. This is optional. If not supplied, the default value is used.')
acFileXferMgrPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrPassword.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrPassword.setDescription('The password to be used for the ftp login authentication. This is optional. If not supplied, the default value is used, which is the chassis name of the OSAP. When supplied, the password is in the clear-text form.')
acFileXferMgrSourceDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrSourceDirectory.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrSourceDirectory.setDescription('The name of the source directory for the file transfer operation.')
acFileXferMgrSourceFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrSourceFilename.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrSourceFilename.setDescription('The name of the source file for the file transfer operation.')
acFileXferMgrDestDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrDestDirectory.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrDestDirectory.setDescription('The name of the destination directory for the file transfer operation.')
acFileXferMgrDestFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrDestFilename.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrDestFilename.setDescription('The name of the destination file for the file transfer operation.')
acFileXferMgrXferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2))).clone('binary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acFileXferMgrXferMode.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrXferMode.setDescription('This attribute indicates the mode of the transfer: ascii or binary.')
acFileXferMgrOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("succeeded", 1), ("failed", 2), ("inprogress", 3))).clone('succeeded')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFileXferMgrOpStatus.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrOpStatus.setDescription('This attribute indicates whether the file transfer operation has been successful, or failed, or in progress.')
acFileXferMgrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 0))
acFileXferMgrXferFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrRowId"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrSourceFilename"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrDestFilename"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrOperation"))
if mibBuilder.loadTexts: acFileXferMgrXferFailedTrap.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrXferFailedTrap.setDescription('The file transfer operation failed.')
acFileXferMgrXferCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 10, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrNodeId"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrRowId"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrSourceFilename"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrDestFilename"), ("APPIAN-SYSTEM-MIB", "acFileXferMgrOperation"))
if mibBuilder.loadTexts: acFileXferMgrXferCompletedTrap.setStatus('current')
if mibBuilder.loadTexts: acFileXferMgrXferCompletedTrap.setDescription('The file transfer operation completed.')
acRdpMgrTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1), )
if mibBuilder.loadTexts: acRdpMgrTable.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrTable.setDescription('This table contains general Appian ring information discovered through the Ring Discovery Protocol (RDP).')
acRdpMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acRdpMgrNodeId"))
if mibBuilder.loadTexts: acRdpMgrEntry.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrEntry.setDescription('General Appian ring information discovered through RDP by the node specified by the index acRdpMgrNodeId.')
acRdpMgrNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acRdpMgrNodeId.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeId.setDescription('Identifies the node where the Appian ring information was gathered.')
acRdpMgrFsmState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("isolated", 0), ("discovery", 1), ("master", 2), ("pleb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrFsmState.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrFsmState.setDescription('State of the RDP Finite State Machine. Possible values: - isolated: the node is isolated. - discovery: the node is not isolated and is in the process of gathering Appian ring information. - master: the Appian ring information has been gathered and this node plays the role of master in the Ring Discovery Protocol (node with lowest Appian DCC MAC in the ring). - pleb: the Appian ring information has been gathered and this node does not play the role of master in the Ring Discovery Protocol (there is a node with a lower Appian DCC MAC in the ring).')
acRdpMgrRingMasterNodeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrRingMasterNodeMac.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrRingMasterNodeMac.setDescription('MAC address of RDP master node in the Appian ring.')
acRdpMgrRingTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrRingTopology.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrRingTopology.setDescription('Appian ring topology. Possible values: - unknown: there is not enough information available to determine whether this node is part of an open or closed ring. - open: two of the nodes in the ring are configured as End Systems. - closed: all nodes in the ring are configured as Intermediate Systems.')
acRdpMgrRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("complete", 1), ("incomplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrRingState.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrRingState.setDescription('Appian ring state: - unknown: there is not enough information available to determine whether the Appian ring is complete or incomplete. - complete: the ring map obtained contains all nodes in the ring. - incomplete: the ring map obtained does not contain all nodes in the ring. This may be due to a broken optical link or to misconfiguration of any of the nodes in the ring (wrong acChassisNodeArchitecture).')
acRdpMgrRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrRingSize.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrRingSize.setDescription('Number of nodes in the Appian ring. The special value -1 means the ring size is unknown.')
acRdpMgrRdpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrRdpVersion.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrRdpVersion.setDescription('Current version of the Ring Discovery Protocol (RDP)')
acRdpMgrNodeTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2), )
if mibBuilder.loadTexts: acRdpMgrNodeTable.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeTable.setDescription('This table contains information about the different nodes in the Appian DCC ring that this node is part of. The first entry in this table corresponds to this node. Each entry in the table corresponds to the East neighbor of the node referred to by the previous entry.')
acRdpMgrNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1), ).setIndexNames((0, "APPIAN-SYSTEM-MIB", "acRdpMgrNodeNodeId"), (0, "APPIAN-SYSTEM-MIB", "acRdpMgrNodeRowId"))
if mibBuilder.loadTexts: acRdpMgrNodeEntry.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeEntry.setDescription('Each row in this table contains information about a node in the Appian DCC ring.')
acRdpMgrNodeThisNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acRdpMgrNodeThisNodeId.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeThisNodeId.setDescription('A unique node identification number which uniquely identifies this node within an Appian ring of OSAPs.')
acRdpMgrNodeRowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acRdpMgrNodeRowId.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeRowId.setDescription('Index that identifies this row in the table.')
acRdpMgrNodeNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 3), AcNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrNodeNodeId.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeNodeId.setDescription('Node Id of node represented by this entry in the table.')
acRdpMgrNodeADccIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrNodeADccIpAddress.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeADccIpAddress.setDescription('IP address assigned to the Appian DCC management access interface of the node represented by this entry in the table.')
acRdpMgrNodeADccMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrNodeADccMacAddress.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeADccMacAddress.setDescription('Appian DCC MAC address of the node represented by this entry in the table.')
acRdpMgrNodeADccConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("is", 1), ("ese", 2), ("esw", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrNodeADccConfig.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeADccConfig.setDescription('RDP node configuration. Possible values: - unknown: the node configuration is unknown. - is: Intermediate System. The node is expected to have both an East and a West neighbor node in the Appian DCC ring. - ese: End System East. The node is expected to only have a West neighbor node in the Appian DCC ring. - esw: End System West. The node is expected to only have an East neighbor node in the Appian DCC ring.')
acRdpMgrNodeADccEastOk = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrNodeADccEastOk.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeADccEastOk.setDescription('Specifies whether RDP is active (there is light and we are receiving RDP packets) on the East interface.')
acRdpMgrNodeADccWestOk = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrNodeADccWestOk.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeADccWestOk.setDescription('Specifies whether RDP is active (there is light and we are receiving RDP packets) on the West interface.')
acRdpMgrNodeNodeArch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 2, 1, 9), AcNodeArchitecture()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acRdpMgrNodeNodeArch.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrNodeNodeArch.setDescription('Node architecture.')
acRdpMgrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 0))
acRdpMgrRingMapChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acRdpMgrNodeId"))
if mibBuilder.loadTexts: acRdpMgrRingMapChangedTrap.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrRingMapChangedTrap.setDescription('The ring map obtained by RDP has changed.')
acRdpMgrDuplicateNodeIdTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 7, 11, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SYSTEM-MIB", "acRdpMgrNodeId"))
if mibBuilder.loadTexts: acRdpMgrDuplicateNodeIdTrap.setStatus('current')
if mibBuilder.loadTexts: acRdpMgrDuplicateNodeIdTrap.setDescription('There are two nodes in the ring with the same node Id.')
mibBuilder.exportSymbols("APPIAN-SYSTEM-MIB", acSntpMgrTraps=acSntpMgrTraps, acCommMgrSourceAddrAdminStatus=acCommMgrSourceAddrAdminStatus, acEventMgrAgentLastEventCount=acEventMgrAgentLastEventCount, acEventMgrSecurityLogFileCloseFailedTrap=acEventMgrSecurityLogFileCloseFailedTrap, acAuthMgrTable=acAuthMgrTable, acFileXferMgrUsername=acFileXferMgrUsername, acEventMgrControlRedirectTraceSlot2=acEventMgrControlRedirectTraceSlot2, acConfigMgrTable=acConfigMgrTable, acRdpMgrNodeNodeId=acRdpMgrNodeNodeId, acStatsMgrEntry=acStatsMgrEntry, acTrapMgrDestAddrNodeId=acTrapMgrDestAddrNodeId, acRdpMgrNodeADccEastOk=acRdpMgrNodeADccEastOk, acSntpMgrErrorCode=acSntpMgrErrorCode, acTrapMgrDestAddrEntry=acTrapMgrDestAddrEntry, acRdpMgrRingTopology=acRdpMgrRingTopology, acEventMgrControlSecurityLogMaxFileSize=acEventMgrControlSecurityLogMaxFileSize, acEventMgrLogFullTrap=acEventMgrLogFullTrap, acCommMgrSourceAddrIpSubnet=acCommMgrSourceAddrIpSubnet, acFileXferMgrXferFailedTrap=acFileXferMgrXferFailedTrap, acAuthMgrUserName=acAuthMgrUserName, acFileXferMgrXferMode=acFileXferMgrXferMode, acSntpMgrVariance=acSntpMgrVariance, acSntpMgrTimeZone=acSntpMgrTimeZone, acEventMgrControlSecurityLogFileWrapEnable=acEventMgrControlSecurityLogFileWrapEnable, acEventMgrControlLogCurrentSize=acEventMgrControlLogCurrentSize, acAuthMgrLogonTime=acAuthMgrLogonTime, acAuthMgrTraps=acAuthMgrTraps, acRdpMgrNodeId=acRdpMgrNodeId, acSntpMgr=acSntpMgr, acFileXferMgrTable=acFileXferMgrTable, acTrapMgrDestAddrCommId=acTrapMgrDestAddrCommId, acTrapMgrFilterTrapOid=acTrapMgrFilterTrapOid, acEventMgrAgentEntry=acEventMgrAgentEntry, acCommMgrSourceAddrIpAddress=acCommMgrSourceAddrIpAddress, acTrapMgrFilterEntry=acTrapMgrFilterEntry, acTrapMgrFilterId=acTrapMgrFilterId, acCommMgrCommNodeId=acCommMgrCommNodeId, acFileXferMgrDestDirectory=acFileXferMgrDestDirectory, acAuthMgrLockOut=acAuthMgrLockOut, acEventMgrAgentName=acEventMgrAgentName, acEventMgrAgentAdminStatus=acEventMgrAgentAdminStatus, acSntpMgrPeerIpAddress=acSntpMgrPeerIpAddress, acEventMgrAgentTable=acEventMgrAgentTable, acRdpMgrNodeThisNodeId=acRdpMgrNodeThisNodeId, acFileXferMgrOperation=acFileXferMgrOperation, acRdpMgrNodeADccWestOk=acRdpMgrNodeADccWestOk, acCommMgr=acCommMgr, acEventMgrAgentId=acEventMgrAgentId, acFileXferMgrOpStatus=acFileXferMgrOpStatus, acEventMgrControlLogMode=acEventMgrControlLogMode, acTrapMgrDestAddrTable=acTrapMgrDestAddrTable, acSntpMgrRetryCount=acSntpMgrRetryCount, acAuthMgrDeleteEntry=acAuthMgrDeleteEntry, acConfigMgrFileName=acConfigMgrFileName, acAuthMgrFailures=acAuthMgrFailures, acStatsMgr=acStatsMgr, acFileXferMgr=acFileXferMgr, acConfigMgrEntry=acConfigMgrEntry, acRdpMgrNodeADccIpAddress=acRdpMgrNodeADccIpAddress, acRdpMgrRingSize=acRdpMgrRingSize, acConfigMgrAutoSaveInterval=acConfigMgrAutoSaveInterval, acAuthMgrAccessMode=acAuthMgrAccessMode, PYSNMP_MODULE_ID=acSystem, acStatsMgrAdminStatus=acStatsMgrAdminStatus, acRdpMgrRdpVersion=acRdpMgrRdpVersion, acEventMgrAgentLastEventCode=acEventMgrAgentLastEventCode, acConfigMgrLastWritten=acConfigMgrLastWritten, acEventMgrControlSecurityLogCurrentSize=acEventMgrControlSecurityLogCurrentSize, AcAccessRights=AcAccessRights, acRdpMgrTraps=acRdpMgrTraps, acCommMgrCommId=acCommMgrCommId, acTrapMgrFilterCommId=acTrapMgrFilterCommId, acEventMgrAgentLogLevel=acEventMgrAgentLogLevel, acSntpMgrTable=acSntpMgrTable, acConfigMgrAutoSaveEnable=acConfigMgrAutoSaveEnable, acCommMgrSourceAddrEntry=acCommMgrSourceAddrEntry, acEventMgrLogFileCloseFailedTrap=acEventMgrLogFileCloseFailedTrap, acAuthMgrEntry=acAuthMgrEntry, acCommMgrCommAccessRights=acCommMgrCommAccessRights, acEventMgrControlRedirectTraceSlot1=acEventMgrControlRedirectTraceSlot1, acCommMgrSourceAddrCommId=acCommMgrSourceAddrCommId, acAuthMgr=acAuthMgr, acFileXferMgrDestFilename=acFileXferMgrDestFilename, acTrapMgrResendTable=acTrapMgrResendTable, acFileXferMgrEntry=acFileXferMgrEntry, acEventMgrControlAdminStatus=acEventMgrControlAdminStatus, acEventMgrSecurityLogFullTrap=acEventMgrSecurityLogFullTrap, acEventMgrControlTable=acEventMgrControlTable, acAuthMgrUserId=acAuthMgrUserId, acEventMgrAgentTraceLevel=acEventMgrAgentTraceLevel, acSntpMgrEntry=acSntpMgrEntry, acSntpMgrVarianceTrap=acSntpMgrVarianceTrap, acFileXferMgrSourceFilename=acFileXferMgrSourceFilename, acCommMgrCommTable=acCommMgrCommTable, acConfigMgrCurrentRevision=acConfigMgrCurrentRevision, acRdpMgrRingMapChangedTrap=acRdpMgrRingMapChangedTrap, acRdpMgrTable=acRdpMgrTable, acSntpMgrMaxVariance=acSntpMgrMaxVariance, acCommMgrCommString=acCommMgrCommString, acConfigMgrNodeId=acConfigMgrNodeId, acTrapMgrFilterNodeId=acTrapMgrFilterNodeId, acTrapMgrResendFromSeqId=acTrapMgrResendFromSeqId, acCommMgrCommEntry=acCommMgrCommEntry, acRdpMgrNodeNodeArch=acRdpMgrNodeNodeArch, acSntpMgrNodeId=acSntpMgrNodeId, acRdpMgrDuplicateNodeIdTrap=acRdpMgrDuplicateNodeIdTrap, acFileXferMgrTraps=acFileXferMgrTraps, acEventMgrAgentNodeId=acEventMgrAgentNodeId, acConfigMgr=acConfigMgr, acEventMgrControlLogMaxFileSize=acEventMgrControlLogMaxFileSize, acAuthenticationExceededTrap=acAuthenticationExceededTrap, acConfigMgrOpStatus=acConfigMgrOpStatus, acAuthenticationFailureTrap=acAuthenticationFailureTrap, acEventMgrControlLogFileWrapEnable=acEventMgrControlLogFileWrapEnable, acSystem=acSystem, acTrapMgrResendAdminStatus=acTrapMgrResendAdminStatus, acTrapMgrResendNodeId=acTrapMgrResendNodeId, acEventMgrAgentNumberEvents=acEventMgrAgentNumberEvents, acFileXferMgrXferCompletedTrap=acFileXferMgrXferCompletedTrap, acCommMgrSourceAddrNodeId=acCommMgrSourceAddrNodeId, acEventMgr=acEventMgr, acRdpMgrRingMasterNodeMac=acRdpMgrRingMasterNodeMac, acRdpMgrRingState=acRdpMgrRingState, acSntpMgrOpStatus=acSntpMgrOpStatus, acEventMgrControlSecurityLogFileName=acEventMgrControlSecurityLogFileName, acEventMgrTraps=acEventMgrTraps, acStatsMgrNodeId=acStatsMgrNodeId, acSntpMgrPeerFailureTrap=acSntpMgrPeerFailureTrap, acFileXferMgrNodeId=acFileXferMgrNodeId, acConfigMgrTraps=acConfigMgrTraps, acTrapMgrDestAddrAdminStatus=acTrapMgrDestAddrAdminStatus, acEventMgrControlNodeId=acEventMgrControlNodeId, acTrapMgrDestAddrIpAddress=acTrapMgrDestAddrIpAddress, acRdpMgrFsmState=acRdpMgrFsmState, acRdpMgrNodeRowId=acRdpMgrNodeRowId, acRdpMgrEntry=acRdpMgrEntry, acRdpMgrNodeADccConfig=acRdpMgrNodeADccConfig, acSntpMgrDayLightSaving=acSntpMgrDayLightSaving, acSntpMgrHardwareTrap=acSntpMgrHardwareTrap, acFileXferMgrFiletype=acFileXferMgrFiletype, acFileXferMgrPassword=acFileXferMgrPassword, acEventMgrAgentSlot=acEventMgrAgentSlot, acCommMgrCommAdminStatus=acCommMgrCommAdminStatus, acFileXferMgrFilesubtype=acFileXferMgrFilesubtype, acTrapMgrResendToSeqId=acTrapMgrResendToSeqId, acTrapMgrFilterAdminStatus=acTrapMgrFilterAdminStatus, acConfigMgrSaveConfig=acConfigMgrSaveConfig, acEventMgrControlLogFileName=acEventMgrControlLogFileName, acFileXferMgrFtpServerIpAddress=acFileXferMgrFtpServerIpAddress, acTrapMgr=acTrapMgr, acEventMgrControlEntry=acEventMgrControlEntry, acFileXferMgrAdminStatus=acFileXferMgrAdminStatus, acSntpMgrVarianceDetectEnable=acSntpMgrVarianceDetectEnable, acCommMgrSourceAddrTable=acCommMgrSourceAddrTable, acRdpMgr=acRdpMgr, acSntpMgrAdminStatus=acSntpMgrAdminStatus, acStatsMgrTable=acStatsMgrTable, acRdpMgrNodeADccMacAddress=acRdpMgrNodeADccMacAddress, acTrapMgrResendEntry=acTrapMgrResendEntry, acFileXferMgrRowId=acFileXferMgrRowId, acConfigMgrConfigFileCloseFailedTrap=acConfigMgrConfigFileCloseFailedTrap, acFileXferMgrSourceDirectory=acFileXferMgrSourceDirectory, acAuthenticationSuccessTrap=acAuthenticationSuccessTrap, acConfigMgrAdminStatus=acConfigMgrAdminStatus, acSntpMgrQueryInterval=acSntpMgrQueryInterval, acTrapMgrFilterTable=acTrapMgrFilterTable, acRdpMgrNodeEntry=acRdpMgrNodeEntry, acRdpMgrNodeTable=acRdpMgrNodeTable, acAuthMgrNodeId=acAuthMgrNodeId, acEventMgrControlSecurityLogMode=acEventMgrControlSecurityLogMode)
