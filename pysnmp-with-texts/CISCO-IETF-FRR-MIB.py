#
# PySNMP MIB module CISCO-IETF-FRR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-FRR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
MplsTunnelIndex, MplsTunnelInstanceIndex, MplsBitRate, MplsLsrIdentifier, MplsTunnelAffinity = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelIndex", "MplsTunnelInstanceIndex", "MplsBitRate", "MplsLsrIdentifier", "MplsTunnelAffinity")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter64, Unsigned32, Gauge32, TimeTicks, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter64", "Unsigned32", "Gauge32", "TimeTicks", "Integer32", "NotificationType")
RowStatus, TextualConvention, DisplayString, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp")
cmplsFrrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 98))
cmplsFrrMIB.setRevisions(('2008-04-29 12:00', '2002-11-05 12:00', '2002-11-01 12:00', '2002-03-22 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmplsFrrMIB.setRevisionsDescriptions(("Added support for cmplsFrrUnProtected notification. It is defined in version 2 of the ietf draft. The notification's variable bindings have been modified from the draft form to match the previous approved Cisco-ized draft form as defined for the cmplsFrrProtected notification.", "Cisco'ized the MPLS-FRR-MIB.my file", 'Added support for Facility-based FRR. Removed tables that were redundant with other MPLS MIBs. Assigned experimental.120.', 'Initial draft version.',))
if mibBuilder.loadTexts: cmplsFrrMIB.setLastUpdated('200804291200Z')
if mibBuilder.loadTexts: cmplsFrrMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cmplsFrrMIB.setContactInfo(' Adrien Grise Postal: 300 Apollo Drive Cisco Systems, Inc. Chelmsford, MA 01824 Tel: +1-978-497-3989 Email: agrise@cisco.com Thomas D. Nadeau Postal: Cisco Systems, Inc. 250 Apollo Drive Chelmsford, MA 01924 Tel: +1-978-244-3051 Email: tnadeau@cisco.com MPLS MIB Development Team Postal: Cisco Systems, Inc. 250 Apollo Drive Chelmsford, MA 01924 Tel: +1-978-497-3989 Email: ch-mpls-mib-dev@cisco.com ')
if mibBuilder.loadTexts: cmplsFrrMIB.setDescription('This MIB module contains managed object definitions for MPLS Fast Reroute (FRR) as defined in:Pan, P., Gan, D., Swallow, G., Vasseur, J.Ph., Cooper, D., Atlas, A., Jork, M., Fast Reroute Techniques in RSVP-TE, draft-ietf-mpls-rsvp-lsp-fastreroute- 00.txt, January 2002.')
class MplsFrrDetourIndex(TextualConvention, Integer32):
    description = 'Index into mplsFrrDetourTable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

cmplsFrrNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 0))
cmplsFrrScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 1))
cmplsFrrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 2))
cmplsFrrGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1))
cmplsFrr1to1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 2))
cmplsFrrFacObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3))
cmplsFrrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 3))
cmplsFrrDetourIncoming = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrDetourIncoming.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrDetourIncoming.setDescription('The number of detour LSPs entering the device if mplsFrrConstProtectionMethod is set to oneToOneBackup(0), or or 0 if mplsFrrConstProtectionMethod is set to facilityBackup(1).')
cmplsFrrDetourOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrDetourOutgoing.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrDetourOutgoing.setDescription('The number of detour LSPs leaving the device if mplsFrrConstProtectionMethod is set to oneToOneBackup(0), or 0 if mplsFrrConstProtectionMethod is set to to facilityBackup(1).')
cmplsFrrDetourOriginating = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrDetourOriginating.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrDetourOriginating.setDescription('The number of detour LSPs originating at this PLR if mplsFrrConstProtectionMethod is set to oneToOneBackup(0). This object MUST return 0 if the mplsFrrConstProtectionMethod is set to facilityBackup(1).')
cmplsFrrSwitchover = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrSwitchover.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrSwitchover.setDescription('The number of tunnel instances that are switched over to their corresponding detour LSP if mplsFrrConstProtectionMethod is set to oneToOneBackup(0), or tunnels being switched over if mplsFrrConstProtectionMethod is set to facilityBackup(1).')
cmplsFrrNumOfConfIfs = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrNumOfConfIfs.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrNumOfConfIfs.setDescription('Indicates the number of MPLS interfaces configured for protection by the FRR feature, otherwise this value MUST return 0 to indicate that LSPs traversing any interface may be protected.')
cmplsFrrActProtectedIfs = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrActProtectedIfs.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrActProtectedIfs.setDescription('Indicates the number of interfaces currently being protected by the FRR feature if mplsFrrConstProtectionMethod is set to facilityBackup(1), otherwise this value should return 0 to indicate that LSPs traversing any interface may be protected. This value MUST be less than or equal to mplsFrrConfIfs.')
cmplsFrrConfProtectingTuns = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrConfProtectingTuns.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConfProtectingTuns.setDescription('Indicates the number of bypass tunnels configured to protect facilities on this LSR using the FRR feature if mplsFrrConstProtectionMethod is set to facilityBackup(1), otherwise this value MUST return 0.')
cmplsFrrActProtectedTuns = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrActProtectedTuns.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrActProtectedTuns.setDescription('Indicates the number of bypass tunnels indicated in mplsFrrConfProtectingTuns whose operStatus is up(1) indicating that they are currently protecting facilities on this LSR using the FRR feature. This object MUST return 0 if mplsFrrConstProtectionMethod is set to facilityBackup(1).')
cmplsFrrActProtectedLSPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrActProtectedLSPs.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrActProtectedLSPs.setDescription('Indicates the number of LSPs currently protected by the FRR feature. If mplsFrrConstProtectionMethod is set to facilityBackup(1)this object MUST return 0.')
cmplsFrrConstProtectionMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oneToOneBackup", 0), ("facilityBackup", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsFrrConstProtectionMethod.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstProtectionMethod.setDescription("Indicates which protection method is to be used for fast reroute. Some devices may require a reboot of their routing processors if this variable is changed. An agent which does not wish to reboot or modify its FRR mode MUST return an inconsistentValue error. Please consult the device's agent capability statement for more details.")
cmplsFrrNotifsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsFrrNotifsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrNotifsEnabled.setDescription('Enables or disables FRR notifications defined in this MIB module. Notifications are disabled by default.')
cmplsFrrLogTableMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsFrrLogTableMaxEntries.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogTableMaxEntries.setDescription('Indicates the maximum number of entries allowed in the FRR Log table. Agents receiving SETs for values that cannot be used must return an inconsistent value error. If a manager sets this value to 0, this indicates that no logging should take place by the agent. If this value is returned as 0, this indicates that no additional log entries will be added to the current table either because the table has been completely filled or logging has been disabled. However, agents may wish to not delete existing entries in the log table so that managers may review them in the future. It is implied that when mplsFrrLogTableCurrEntries has reached the value of this variable, that logging entries may not continue to be added to the table, although existing ones may remain. Furthermore, an agent may begin to delete existing (perhaps the oldest entries) entries to make room for new ones.')
cmplsFrrLogTableCurrEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrLogTableCurrEntries.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogTableCurrEntries.setDescription('Indicates the current number of entries in the FRR log table.')
cmplsFrrNotifMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 98, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsFrrNotifMaxRate.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrNotifMaxRate.setDescription('This variable indicates the number of milliseconds that must elapse between notification emissions. If events occur more rapidly, the implementation may simply fail to emit these notifications during that period, or may queue them until an appropriate time in the future. A value of 0 means no minimum elapsed period is specified.')
cmplsFrrConstTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1), )
if mibBuilder.loadTexts: cmplsFrrConstTable.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstTable.setDescription('This table shows detour setup constraints.')
cmplsFrrConstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-IETF-FRR-MIB", "cmplsFrrConstIfIndex"), (0, "CISCO-IETF-FRR-MIB", "cmplsFrrConstTunnelIndex"), (0, "CISCO-IETF-FRR-MIB", "cmplsFrrConstTunnelInstance"))
if mibBuilder.loadTexts: cmplsFrrConstEntry.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstEntry.setDescription('An entry in this table represents detour LSP or bypass tunnel setup constraints for a tunnel instance to be protected by detour LSPs or a tunnel. Agents must allow entries in this table to be created only for tunnel instances that require fast-reroute. Entries indexed with mplsFrrConstIfIndex set to 0 apply to all interfaces on this device for which the FRR feature can operate on.')
cmplsFrrConstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: cmplsFrrConstIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstIfIndex.setDescription('Uniquely identifies an interface for which fast reroute is configured. Tabular entries indexed with a 0 value apply to all interfaces on this device for which the FRR feature can operate on.')
cmplsFrrConstTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 2), MplsTunnelIndex())
if mibBuilder.loadTexts: cmplsFrrConstTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstTunnelIndex.setDescription('Uniquely identifies a tunnel for which fast reroute is requested.')
cmplsFrrConstTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 3), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: cmplsFrrConstTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstTunnelInstance.setDescription('Uniquely identifies an instance of this tunnel for which fast reroute is requested.')
cmplsFrrConstSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrConstSetupPrio.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001')
if mibBuilder.loadTexts: cmplsFrrConstSetupPrio.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstSetupPrio.setDescription('Indicates the setup priority of detour LSP.')
cmplsFrrConstHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrConstHoldingPrio.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001')
if mibBuilder.loadTexts: cmplsFrrConstHoldingPrio.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstHoldingPrio.setDescription('Indicates the holding priority for detour LSP.')
cmplsFrrConstInclAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 6), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrConstInclAnyAffinity.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001.')
if mibBuilder.loadTexts: cmplsFrrConstInclAnyAffinity.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstInclAnyAffinity.setDescription('A link satisfies the include-any constraint if and only if the constraint is zero, or the link and the constraint have a resource class in common.')
cmplsFrrConstInclAllAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 7), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrConstInclAllAffinity.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001.')
if mibBuilder.loadTexts: cmplsFrrConstInclAllAffinity.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstInclAllAffinity.setDescription('A link satisfies the include-all constraint if and only if the link contains all of the administrative groups specified in the constraint.')
cmplsFrrConstExclAllAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 8), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrConstExclAllAffinity.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001.')
if mibBuilder.loadTexts: cmplsFrrConstExclAllAffinity.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstExclAllAffinity.setDescription('A link satisfies the exclude-all constraint if and only if the link contains none of the administrative groups specified in the constraint.')
cmplsFrrConstHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrConstHopLimit.setReference('Pan, P., Gan, D., Swallow, G., Vasseur, J.Ph., Cooper, D., Atlas, A., Jork, M., Fast Reroute Techniques in RSVP-TE, draft- ietf-mpls-rsvp-lsp-fastreroute-00.txt, January 2002. Work in progress.')
if mibBuilder.loadTexts: cmplsFrrConstHopLimit.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstHopLimit.setDescription('The maximum number of hops that the detour LSP may traverse.')
cmplsFrrConstBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 10), MplsBitRate().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrConstBandwidth.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstBandwidth.setDescription('This variable represents the bandwidth for detour LSPs of this tunnel, in units of thousands of bits per second (Kbps).')
cmplsFrrConstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrConstRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstRowStatus.setDescription('This object is used to create, modify, and/or delete a row in this table.')
cmplsFrrConstNumProtectingTunOnIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrConstNumProtectingTunOnIf.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstNumProtectingTunOnIf.setDescription('The number of backup tunnels protecting the specified interface.')
cmplsFrrConstNumProtectedTunOnIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrConstNumProtectedTunOnIf.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstNumProtectedTunOnIf.setDescription('The number of tunnels protected on this interface.')
cmplsFrrLogTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 2), )
if mibBuilder.loadTexts: cmplsFrrLogTable.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogTable.setDescription('The fast reroute log table records fast reroute events such as protected links going up or down or the FRR feature kicking in.')
cmplsFrrLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-FRR-MIB", "cmplsFrrLogIndex"))
if mibBuilder.loadTexts: cmplsFrrLogEntry.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogEntry.setDescription('An entry in this table is created to describe one fast reroute event. Entries in this table are only created and destroyed by the agent implementation. The maximum number of entries in this log is governed by the scalar.')
cmplsFrrLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cmplsFrrLogIndex.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogIndex.setDescription('Uniquely identifies a fast reroute event entry.')
cmplsFrrLogEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrLogEventTime.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogEventTime.setDescription('This object provides the amount of time ticks since this event occured.')
cmplsFrrLogInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrLogInterface.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogInterface.setDescription('This object indicates which interface was affected by this FRR event. This value may be set to 0 if mplsFrrConstProtectionMethod is set to oneToOneBackup(0).')
cmplsFrrLogEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("protected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrLogEventType.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogEventType.setDescription('This object describes what type of fast reroute event occured.')
cmplsFrrLogEventDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrLogEventDuration.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogEventDuration.setDescription('This object describes the duration of this event.')
cmplsFrrLogEventReasonString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrLogEventReasonString.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogEventReasonString.setDescription('This object contains an implementation-specific explanation of the event.')
cmplsFrrFacRouteDBTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1), )
if mibBuilder.loadTexts: cmplsFrrFacRouteDBTable.setReference('Srinivansan, C., and A. Viswanathan, T. Nadeau, MPLS Traffic Engineering Management Information Base Using SMIv2, draft-ietf-mpls-te-mib-06.txt ')
if mibBuilder.loadTexts: cmplsFrrFacRouteDBTable.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteDBTable.setDescription('The mplsFrrFacRouteDBTable provides information about the fast reroute database. Each entry belongs to an interface, protecting backup tunnel and protected tunnel. MPLS interfaces defined on this node are protected by backup tunnels and are indexed by mplsFrrFacRouteProtectedIndex. Backup tunnels defined to protect the tunnels traversing an interface, and are indexed by mplsFrrFacRouteProtectingTunIndex. Note that the tunnel instance index is not required, since it is implied to be 0, which indicates the tunnel head interface for the protecting tunnel. The protecting tunnel is defined to exist on the PLR in the FRR specification. Protected tunnels are the LSPs that traverse the protected link. These LSPs are uniquely identified by mplsFrrFacRouteProtectedTunIndex, mplsFrrFacRouteProtectedTunInstance, mplsFrrFacRouteProtectedTunIngressLSRId, and mplsFrrFacRouteProtectedTunEgressLSRId.')
cmplsFrrFacRouteDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1), ).setIndexNames((0, "CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectedIfIndex"), (0, "CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectingTunIndex"), (0, "CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectedTunIndex"), (0, "CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectedTunInstance"), (0, "CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectedTunIngressLSRId"), (0, "CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectedTunEgressLSRId"))
if mibBuilder.loadTexts: cmplsFrrFacRouteDBEntry.setReference('Srinivansan, C., and A. Viswanathan, T. Nadeau, MPLS Label Switch Router Management Information Base Using SMIv2, draft-ietf-mpls-lsr-mib-07.txt Srinivansan, C., and A. Viswanathan, T. Nadeau, MPLS Traffic Engineering Management Information Base Using SMIv2, draft-ietf-mpls-te-mib- 06.txt.')
if mibBuilder.loadTexts: cmplsFrrFacRouteDBEntry.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteDBEntry.setDescription('An entry in the mplsFrrDBTable represents a single protected LSP, protected by a backup tunnel and defined for a specific protected interface. Note that for brevity, managers should consult the mplsTunnelTable present in the MPLS-TE MIB for additional information about the protecting and protected tunnels, and the ifEntry in the IF-MIB for the protected interface.')
cmplsFrrFacRouteProtectedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedIfIndex.setDescription('Uniquely identifies the interface configured for FRR protection.')
cmplsFrrFacRouteProtectingTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 2), MplsTunnelIndex())
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectingTunIndex.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectingTunIndex.setDescription('Uniquely identifies the mplsTunnelEntry primary index for the tunnel head interface designated to protect the interface as specified in the mplsFrrFacRouteIfProtectedIndex (and all of the tunnels using this interface).')
cmplsFrrFacRouteProtectedTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 3), MplsTunnelIndex())
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunIndex.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunIndex.setDescription('Uniquely identifies an mplsTunnelEntry that is being protected by FRR.')
cmplsFrrFacRouteProtectedTunInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 4), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunInstance.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunInstance.setDescription('Uniquely identifies an mplsTunnelEntry that is being protected by FRR.')
cmplsFrrFacRouteProtectedTunIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 5), MplsLsrIdentifier())
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunIngressLSRId.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209, December 2001 2. Constraint-Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212, January 2002')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunIngressLSRId.setDescription('Uniquely identifies an mplsTunnelEntry that is being protected by FRR.')
cmplsFrrFacRouteProtectedTunEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 6), MplsLsrIdentifier())
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunEgressLSRId.setDescription('Uniquely identifies an mplsTunnelEntry that is being protected by FRR.')
cmplsFrrFacRouteProtectedTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("ready", 2), ("partial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunStatus.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectedTunStatus.setDescription("Specifies the state of the protected tunnel. active This tunnel's label has been placed in the LFIB and is ready to be applied to incoming packets. ready - This tunnel's label entry has been created but is not yet in the LFIB. partial - This tunnel's label entry as not been fully created.")
cmplsFrrFacRouteProtectingTunResvBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 8), MplsBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectingTunResvBw.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectingTunResvBw.setDescription('Specifies the amount of bandwidth in megabytes per second that is actually reserved by the backup tunnel for facility backup. This value is repeated here from the MPLS- TE MIB because the tunnel entry will reveal the bandwidth reserved by the signaling protocol, which is typically 0 for backup tunnels so as to not over-book bandwidth. However, internal reservations are typically made on the PLR, thus this value should be revealed here.')
cmplsFrrFacRouteProtectingTunProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 98, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("linkProtection", 0), ("nodeProtection", 1))).clone('nodeProtection')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectingTunProtectionType.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteProtectingTunProtectionType.setDescription('Indicates type of the resource protection.')
cmplsFrrProtected = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 98, 0, 1)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrConstNumProtectingTunOnIf"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstNumProtectedTunOnIf"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstBandwidth"))
if mibBuilder.loadTexts: cmplsFrrProtected.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrProtected.setDescription('This notification is generated when a tunnel running over an interface as specified in the mplsFrrConstTable is initially protected by the backup tunnel also specified in the cmplsFrrConstTable. This notification should not be generated for each subsequent tunnel that is backed up by the FRR feature on this LSR, as this may result in potential scaling issues with regard to LSR performance and network loading. Note also that notifications MUST be generated in accordance with the cmplsFrrNotifMaxRate.')
cmplsFrrUnProtected = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 98, 0, 2)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrConstNumProtectingTunOnIf"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstNumProtectedTunOnIf"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstBandwidth"))
if mibBuilder.loadTexts: cmplsFrrUnProtected.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrUnProtected.setDescription('This notification is generated when the final tunnel that is being protected by a backup tunnel as specified in the cmplsFrrConstTable is restored to normal operation. This notification should not be generated for each restored tunnel, as this may result in potential scaling issues with regard to LSR performance and network loading. Note also that notifications MUST be generated in accordance with the cmplsFrrNotifMaxRate.')
cmplsFrrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 1))
cmplsFrrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 2))
cmplsFrrModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 2, 1)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrScalarGroup"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstGroup"), ("CISCO-IETF-FRR-MIB", "cmplsFrrLogGroup"), ("CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteDBGroup"), ("CISCO-IETF-FRR-MIB", "cmplsFrrNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsFrrModuleCompliance = cmplsFrrModuleCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cmplsFrrModuleCompliance.setDescription('Compliance statements for agents that support the MPLS FRR MIB.')
cmplsFrrModuleComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 2, 2)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrScalarGroup"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstGroup"), ("CISCO-IETF-FRR-MIB", "cmplsFrrLogGroup"), ("CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteDBGroup"), ("CISCO-IETF-FRR-MIB", "cmplsFrrNotifGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsFrrModuleComplianceRev1 = cmplsFrrModuleComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrModuleComplianceRev1.setDescription('Compliance statements for agents that support the MPLS FRR MIB.')
cmplsFrrScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 1, 1)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrDetourIncoming"), ("CISCO-IETF-FRR-MIB", "cmplsFrrDetourOutgoing"), ("CISCO-IETF-FRR-MIB", "cmplsFrrDetourOriginating"), ("CISCO-IETF-FRR-MIB", "cmplsFrrSwitchover"), ("CISCO-IETF-FRR-MIB", "cmplsFrrNumOfConfIfs"), ("CISCO-IETF-FRR-MIB", "cmplsFrrActProtectedIfs"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConfProtectingTuns"), ("CISCO-IETF-FRR-MIB", "cmplsFrrActProtectedTuns"), ("CISCO-IETF-FRR-MIB", "cmplsFrrActProtectedLSPs"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstProtectionMethod"), ("CISCO-IETF-FRR-MIB", "cmplsFrrNotifsEnabled"), ("CISCO-IETF-FRR-MIB", "cmplsFrrLogTableMaxEntries"), ("CISCO-IETF-FRR-MIB", "cmplsFrrLogTableCurrEntries"), ("CISCO-IETF-FRR-MIB", "cmplsFrrNotifMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsFrrScalarGroup = cmplsFrrScalarGroup.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrScalarGroup.setDescription('Objects that are required to gather fast reroute statistics.')
cmplsFrrConstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 1, 2)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrConstProtectionMethod"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstSetupPrio"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstHoldingPrio"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstInclAnyAffinity"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstInclAllAffinity"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstExclAllAffinity"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstHopLimit"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstBandwidth"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstRowStatus"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstNumProtectingTunOnIf"), ("CISCO-IETF-FRR-MIB", "cmplsFrrConstNumProtectedTunOnIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsFrrConstGroup = cmplsFrrConstGroup.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrConstGroup.setDescription('Objects that are required to configure fast reroute constraints at the ingress LSR of the tunnel that requires fast reroute service.')
cmplsFrrLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 1, 4)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrLogEventTime"), ("CISCO-IETF-FRR-MIB", "cmplsFrrLogInterface"), ("CISCO-IETF-FRR-MIB", "cmplsFrrLogEventType"), ("CISCO-IETF-FRR-MIB", "cmplsFrrLogEventDuration"), ("CISCO-IETF-FRR-MIB", "cmplsFrrLogEventReasonString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsFrrLogGroup = cmplsFrrLogGroup.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrLogGroup.setDescription('Objects that are required to represent FRR logging information at the detour ingress, transit and egress LSRs.')
cmplsFrrFacRouteDBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 1, 6)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectedTunStatus"), ("CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectingTunResvBw"), ("CISCO-IETF-FRR-MIB", "cmplsFrrFacRouteProtectingTunProtectionType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsFrrFacRouteDBGroup = cmplsFrrFacRouteDBGroup.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrFacRouteDBGroup.setDescription('Objects that are required to represent the FRR Facility Route Database information.')
cmplsFrrNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 1, 7)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrProtected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsFrrNotifGroup = cmplsFrrNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cmplsFrrNotifGroup.setDescription('Objects that are required to represent FRR notifications.')
cmplsFrrNotifGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 98, 3, 1, 8)).setObjects(("CISCO-IETF-FRR-MIB", "cmplsFrrProtected"), ("CISCO-IETF-FRR-MIB", "cmplsFrrUnProtected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsFrrNotifGroupRev1 = cmplsFrrNotifGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cmplsFrrNotifGroupRev1.setDescription('Objects that are required to represent FRR notifications.')
mibBuilder.exportSymbols("CISCO-IETF-FRR-MIB", cmplsFrrLogIndex=cmplsFrrLogIndex, cmplsFrrFacRouteProtectingTunIndex=cmplsFrrFacRouteProtectingTunIndex, cmplsFrrFacRouteProtectedTunInstance=cmplsFrrFacRouteProtectedTunInstance, cmplsFrrModuleComplianceRev1=cmplsFrrModuleComplianceRev1, cmplsFrrNotifGroupRev1=cmplsFrrNotifGroupRev1, cmplsFrrFacRouteProtectedIfIndex=cmplsFrrFacRouteProtectedIfIndex, cmplsFrrGroups=cmplsFrrGroups, cmplsFrrScalars=cmplsFrrScalars, cmplsFrrScalarGroup=cmplsFrrScalarGroup, cmplsFrrFacRouteProtectedTunIndex=cmplsFrrFacRouteProtectedTunIndex, cmplsFrrConstIfIndex=cmplsFrrConstIfIndex, cmplsFrrCompliances=cmplsFrrCompliances, cmplsFrrActProtectedLSPs=cmplsFrrActProtectedLSPs, cmplsFrrFacRouteProtectingTunResvBw=cmplsFrrFacRouteProtectingTunResvBw, cmplsFrrConstEntry=cmplsFrrConstEntry, cmplsFrrFacRouteDBGroup=cmplsFrrFacRouteDBGroup, cmplsFrrConstBandwidth=cmplsFrrConstBandwidth, cmplsFrrDetourIncoming=cmplsFrrDetourIncoming, cmplsFrrConfProtectingTuns=cmplsFrrConfProtectingTuns, cmplsFrrFacRouteProtectedTunEgressLSRId=cmplsFrrFacRouteProtectedTunEgressLSRId, cmplsFrrConstSetupPrio=cmplsFrrConstSetupPrio, cmplsFrrConstTunnelIndex=cmplsFrrConstTunnelIndex, cmplsFrrFacRouteProtectedTunStatus=cmplsFrrFacRouteProtectedTunStatus, cmplsFrrLogEventReasonString=cmplsFrrLogEventReasonString, cmplsFrrModuleCompliance=cmplsFrrModuleCompliance, cmplsFrrConstTable=cmplsFrrConstTable, cmplsFrrNotif=cmplsFrrNotif, cmplsFrrConstHoldingPrio=cmplsFrrConstHoldingPrio, cmplsFrrNotifsEnabled=cmplsFrrNotifsEnabled, cmplsFrrConstRowStatus=cmplsFrrConstRowStatus, cmplsFrrConstNumProtectedTunOnIf=cmplsFrrConstNumProtectedTunOnIf, MplsFrrDetourIndex=MplsFrrDetourIndex, cmplsFrrObjects=cmplsFrrObjects, cmplsFrrMIB=cmplsFrrMIB, cmplsFrrNotifMaxRate=cmplsFrrNotifMaxRate, cmplsFrrLogTableCurrEntries=cmplsFrrLogTableCurrEntries, cmplsFrrDetourOriginating=cmplsFrrDetourOriginating, cmplsFrrLogEventType=cmplsFrrLogEventType, cmplsFrrLogEventDuration=cmplsFrrLogEventDuration, cmplsFrrLogEventTime=cmplsFrrLogEventTime, cmplsFrrUnProtected=cmplsFrrUnProtected, cmplsFrrConstHopLimit=cmplsFrrConstHopLimit, cmplsFrrConstTunnelInstance=cmplsFrrConstTunnelInstance, cmplsFrrDetourOutgoing=cmplsFrrDetourOutgoing, cmplsFrrFacRouteProtectedTunIngressLSRId=cmplsFrrFacRouteProtectedTunIngressLSRId, cmplsFrrFacRouteProtectingTunProtectionType=cmplsFrrFacRouteProtectingTunProtectionType, cmplsFrrLogTable=cmplsFrrLogTable, cmplsFrrConstExclAllAffinity=cmplsFrrConstExclAllAffinity, cmplsFrrLogGroup=cmplsFrrLogGroup, cmplsFrrConformance=cmplsFrrConformance, cmplsFrr1to1Objects=cmplsFrr1to1Objects, cmplsFrrNotifGroup=cmplsFrrNotifGroup, cmplsFrrFacRouteDBTable=cmplsFrrFacRouteDBTable, cmplsFrrConstInclAllAffinity=cmplsFrrConstInclAllAffinity, cmplsFrrLogInterface=cmplsFrrLogInterface, cmplsFrrNumOfConfIfs=cmplsFrrNumOfConfIfs, cmplsFrrActProtectedIfs=cmplsFrrActProtectedIfs, cmplsFrrProtected=cmplsFrrProtected, cmplsFrrFacRouteDBEntry=cmplsFrrFacRouteDBEntry, cmplsFrrConstGroup=cmplsFrrConstGroup, cmplsFrrConstNumProtectingTunOnIf=cmplsFrrConstNumProtectingTunOnIf, cmplsFrrActProtectedTuns=cmplsFrrActProtectedTuns, cmplsFrrGeneralObjects=cmplsFrrGeneralObjects, cmplsFrrConstProtectionMethod=cmplsFrrConstProtectionMethod, cmplsFrrLogEntry=cmplsFrrLogEntry, cmplsFrrSwitchover=cmplsFrrSwitchover, cmplsFrrLogTableMaxEntries=cmplsFrrLogTableMaxEntries, PYSNMP_MODULE_ID=cmplsFrrMIB, cmplsFrrConstInclAnyAffinity=cmplsFrrConstInclAnyAffinity, cmplsFrrFacObjects=cmplsFrrFacObjects)
