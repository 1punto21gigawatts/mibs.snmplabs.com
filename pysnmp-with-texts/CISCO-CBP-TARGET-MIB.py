#
# PySNMP MIB module CISCO-CBP-TARGET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CBP-TARGET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
CcbptTargetId, CcbptTargetDirection, CcbptPolicyIdentifier, CcbptPolicySourceType, CcbptPolicyIdentifierOrZero, CcbptTargetType = mibBuilder.importSymbols("CISCO-CBP-TARGET-TC-MIB", "CcbptTargetId", "CcbptTargetDirection", "CcbptPolicyIdentifier", "CcbptPolicySourceType", "CcbptPolicyIdentifierOrZero", "CcbptTargetType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, IpAddress, NotificationType, Gauge32, Integer32, Unsigned32, iso, Bits, ObjectIdentity, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "IpAddress", "NotificationType", "Gauge32", "Integer32", "Unsigned32", "iso", "Bits", "ObjectIdentity", "MibIdentifier", "Counter64")
RowStatus, RowPointer, TextualConvention, DisplayString, TimeStamp, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "RowPointer", "TextualConvention", "DisplayString", "TimeStamp", "StorageType")
ciscoCbpTargetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 533))
ciscoCbpTargetMIB.setRevisions(('2006-05-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCbpTargetMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: ciscoCbpTargetMIB.setLastUpdated('200605240000Z')
if mibBuilder.loadTexts: ciscoCbpTargetMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCbpTargetMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: cs-c3pl@cisco.com, cs-qos@cisco.com')
if mibBuilder.loadTexts: ciscoCbpTargetMIB.setDescription('This MIB module defines the managed objects for representing targets which have class-based policy mappings. A target can be any logical interface to which a class-based policy is able to be associated.')
ciscoCbpTargetMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 533, 0))
ciscoCbpTargetMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 533, 1))
ciscoCbpTargetMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 533, 2))
ccbptTargetAttachCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1))
ccbptPolicyIdNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 1), CcbptPolicyIdentifierOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccbptPolicyIdNext.setStatus('current')
if mibBuilder.loadTexts: ccbptPolicyIdNext.setDescription("This object indicates the next available value of ccbptPolicyId that can be used to create a new conceptual row in the ccbptTargetTable. If no available identifier exists, then this object will have the value '0'. ")
ccbptTargetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2), )
if mibBuilder.loadTexts: ccbptTargetTable.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetTable.setDescription('This table describes the class-based policy attachments to to specific targets. ')
ccbptTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-CBP-TARGET-MIB", "ccbptTargetType"), (0, "CISCO-CBP-TARGET-MIB", "ccbptTargetId"), (0, "CISCO-CBP-TARGET-MIB", "ccbptTargetDir"), (0, "CISCO-CBP-TARGET-MIB", "ccbptPolicySourceType"), (0, "CISCO-CBP-TARGET-MIB", "ccbptPolicyId"))
if mibBuilder.loadTexts: ccbptTargetEntry.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetEntry.setDescription('Each entry describes a class-based policy attachment to a particular target. The ccbptTargetType uniquely identifies the type of target in the attachment. Additionally, the ccbptTargetId uniquely identifies the target in attachment and is of the format indicated by the ccbptTargetType. The ccbptTargetDir identifies the direction, relative to the ccbptTargetId, to which the policy is attached. The ccbptPolicySourceType identifies the source-type of the policy attached. The ccbptPolicyId uniquely identifies the policy within the scope of ccbptTargetType, ccbptTargetId, ccbptTargetDir, and ccbptPolicySourceType. A class-based policy attachment to a target can be created through other network management interfaces (e.g., the local console), in which case the SNMP entity will automatically create an entry in this table. A class-based policy attachment to a target can be destroyed through other network management interfaces, in which case the SNMP entity will automatically destroy the corresponding entry in this table. A class-based policy attachment to a target can be created, destroyed, and modified through the SNMP using ccbptTargetStatus using the semantics described by the RowStatus Textual Convention. However, when creating a new class-based policy attachment to a target, the value of ccbptPolicyIdNext should be used to identify the new policy within the scope of the target type, identifier, direction, and policy-source type. ')
ccbptTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 1), CcbptTargetType())
if mibBuilder.loadTexts: ccbptTargetType.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetType.setDescription('The type of target for this class-based policy attachment. This object identifies the format of the ccbptTargetId for this entry. ')
ccbptTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 2), CcbptTargetId())
if mibBuilder.loadTexts: ccbptTargetId.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetId.setDescription('The target identifier for this class-based policy attachment. For decoding the ccbptTargetId refer to the ccbptTargetType object and the CcbptTargetType description. ')
ccbptTargetDir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 3), CcbptTargetDirection())
if mibBuilder.loadTexts: ccbptTargetDir.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetDir.setDescription('The direction relative to the ccbptTargetId for this class based policy attachment. ')
ccbptPolicySourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 4), CcbptPolicySourceType())
if mibBuilder.loadTexts: ccbptPolicySourceType.setStatus('current')
if mibBuilder.loadTexts: ccbptPolicySourceType.setDescription('The source-type of the class-based policy for this target. The source-type refers to the source of the class-based policy definition. The intent of this object is to allow implementations to distinguish between different MIBs defining policy-maps. ')
ccbptPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 5), CcbptPolicyIdentifier())
if mibBuilder.loadTexts: ccbptPolicyId.setStatus('current')
if mibBuilder.loadTexts: ccbptPolicyId.setDescription('Unique identifier of this class-based policy instance. ')
ccbptTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccbptTargetStatus.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetStatus.setDescription("The status of the policy attachment to this target. The value for the corresponding instance of each of the following objects must be valid before the attachment can be activated: -ccbptTargetStorageType -ccbptPolicyMap Observe that no corresponding instance of any object in this table can be modified when the value of this object is 'active'. ")
ccbptTargetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccbptTargetStorageType.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetStorageType.setDescription("This object indicates how the device stores the data contained by the conceptual row. If an instance of this object has the value 'permanent', then this MIB definition does not require the SNMP entity to allow the instance of any object in the corresponding conceptual row to be writable through the SNMP. ")
ccbptPolicyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 8), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccbptPolicyMap.setStatus('current')
if mibBuilder.loadTexts: ccbptPolicyMap.setDescription('Refers to the first accessible object in the policy-map definition table used to manage policy-map information for policy-maps for the corresponding ccbptPolicySourceType. Specific MIB tables are not mentioned here as the intent of this mapping is to allow for different implementations to refer to their supported class-based policy definition table without requiring support of a specific MIB module. ')
ccbptPolicyInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccbptPolicyInstance.setStatus('current')
if mibBuilder.loadTexts: ccbptPolicyInstance.setDescription('Refers to the first accessible object in the policy instance table used to manage policy instance information for policy-maps of this ccbptPolicySourceType. Specific MIB tables are not mentioned here as the intent of this mapping is to allow for different implementations to refer to their supported class-based policy definition table without requiring support of a specific MIB module. ')
ccbptPolicyAttachTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccbptPolicyAttachTime.setStatus('current')
if mibBuilder.loadTexts: ccbptPolicyAttachTime.setDescription("The value of sysUpTime for the last time that the corresponding ccbptTargetStatus instance transitioned to the 'active' state. ")
ccbptTargetTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 533, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccbptTargetTableLastChange.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetTableLastChange.setDescription('The value of sysUpTime at the time of the last change to an entry in the ccbptTargetTable. ')
ciscoCbpTargetMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 533, 2, 1))
ciscoCbpTargetMIBMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 533, 2, 2))
ciscoCbpTargetMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 533, 2, 1, 1)).setObjects(("CISCO-CBP-TARGET-MIB", "ccbptTargetProvisioningGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCbpTargetMIBCompliance = ciscoCbpTargetMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoCbpTargetMIBCompliance.setDescription('The compliance statement for SNMP entities that implement the CISCO-CBP-TARGET-MIB. Implementation of this MIB module is strongly recommended for any devices implementing features using class-based policies, such as QoS, NAT, firewall, and MTR (Multi-Topology Routing).')
ccbptTargetProvisioningGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 533, 2, 2, 1)).setObjects(("CISCO-CBP-TARGET-MIB", "ccbptPolicyIdNext"), ("CISCO-CBP-TARGET-MIB", "ccbptTargetStatus"), ("CISCO-CBP-TARGET-MIB", "ccbptTargetStorageType"), ("CISCO-CBP-TARGET-MIB", "ccbptPolicyMap"), ("CISCO-CBP-TARGET-MIB", "ccbptPolicyInstance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccbptTargetProvisioningGroup = ccbptTargetProvisioningGroup.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetProvisioningGroup.setDescription('A collection of managed objects describing the target and class-based policy attachment configuration data. ')
ccbptTargetTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 533, 2, 2, 2)).setObjects(("CISCO-CBP-TARGET-MIB", "ccbptTargetTableLastChange"), ("CISCO-CBP-TARGET-MIB", "ccbptPolicyAttachTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccbptTargetTimeGroup = ccbptTargetTimeGroup.setStatus('current')
if mibBuilder.loadTexts: ccbptTargetTimeGroup.setDescription('A collection of managed objects describing the target and class-based policy attachment timestamp data. ')
mibBuilder.exportSymbols("CISCO-CBP-TARGET-MIB", ciscoCbpTargetMIB=ciscoCbpTargetMIB, ciscoCbpTargetMIBConform=ciscoCbpTargetMIBConform, ccbptPolicyMap=ccbptPolicyMap, ciscoCbpTargetMIBCompliances=ciscoCbpTargetMIBCompliances, ccbptPolicyAttachTime=ccbptPolicyAttachTime, ccbptTargetStorageType=ccbptTargetStorageType, ccbptTargetTableLastChange=ccbptTargetTableLastChange, ccbptPolicyId=ccbptPolicyId, ccbptTargetTable=ccbptTargetTable, ccbptTargetDir=ccbptTargetDir, ccbptTargetId=ccbptTargetId, ccbptTargetStatus=ccbptTargetStatus, ciscoCbpTargetMIBObjects=ciscoCbpTargetMIBObjects, ccbptPolicySourceType=ccbptPolicySourceType, PYSNMP_MODULE_ID=ciscoCbpTargetMIB, ccbptPolicyIdNext=ccbptPolicyIdNext, ciscoCbpTargetMIBNotifs=ciscoCbpTargetMIBNotifs, ccbptTargetProvisioningGroup=ccbptTargetProvisioningGroup, ccbptTargetEntry=ccbptTargetEntry, ccbptTargetAttachCfg=ccbptTargetAttachCfg, ccbptPolicyInstance=ccbptPolicyInstance, ciscoCbpTargetMIBMIBGroups=ciscoCbpTargetMIBMIBGroups, ccbptTargetType=ccbptTargetType, ccbptTargetTimeGroup=ccbptTargetTimeGroup, ciscoCbpTargetMIBCompliance=ciscoCbpTargetMIBCompliance)
