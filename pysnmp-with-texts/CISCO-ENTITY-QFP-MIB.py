#
# PySNMP MIB module CISCO-ENTITY-QFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENTITY-QFP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Unsigned32, Integer32, IpAddress, MibIdentifier, ObjectIdentity, iso, Bits, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Unsigned32", "Integer32", "IpAddress", "MibIdentifier", "ObjectIdentity", "iso", "Bits", "Gauge32", "NotificationType")
TruthValue, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "DateAndTime", "TextualConvention")
ciscoEntityQfpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 715))
ciscoEntityQfpMIB.setRevisions(('2014-06-18 00:00', '2012-06-06 00:00', '2009-12-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEntityQfpMIB.setRevisionsDescriptions(('Added the following objects to the MIB. ceqfpThroughputLicensedBW, ceqfpThroughputLevel, ceqfpThroughputInterval, ceqfpThroughputThreshold, ceqfpThroughputAvgRate to ceqfpThroughputTable. Added ceqfpThroughputNotifEnabled to ciscoEntityQfpNotif group. Added ceqfpThroughputNotif as a new notification to the MIB. Added a new MIB conform group, ceqfpThroughputGroup for the new objects. Also modified the ciscoEntityQfpMIBComplianceRev2 to add the new group ceqfpThroughputGroup.', 'Added the following new objects to the ceqfpMemoryResourceTable. ceqfpMemoryResTotalOvrflw, ceqfpMemoryHCResTotal, ceqfpMemoryResInUseOvrflw, ceqfpMemoryHCResInUse, ceqfpMemoryResFreeOvrflw,ceqfpMemoryHCResFree, ceqfpMemoryResLowFreeWatermarkOvrflw, ceqfpMemoryHCResLowFreeWatermark. Added following new compliance groups. ciscoEntityQfpMemoryResourceOvrflwGroup, ciscoEntityQfpMemoryHCResourceGroup. Added new compliance ciscoEntityQfpMIBComplianceRev2 which deprecates ciscoEntityQfpMIBComplianceRev1.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoEntityQfpMIB.setLastUpdated('201406180000Z')
if mibBuilder.loadTexts: ciscoEntityQfpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEntityQfpMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoEntityQfpMIB.setDescription("This MIB module defines managed objects that facilitate the management of Quantum Flow Processors (QFP), which are listed in the ENTITY-MIB (RFC 4133) entPhysicalTable as an entPhysicalClass of 'cpu'. The Quantum Flow Processors (QFP) technology is an architecture family developed by Cisco, which has fully integrated and programmable networking chip set that controls different functions of a system such as packet forwarding. This module contains objects to monitor various QFP statistics such as system, utilization, memory, etc. The utilization statistics can be used for future capacity planning. The calculation of this statistics may vary by devices which host QFPs, hence the user must refer to the specific device document of interest for the exact method of calculation. The utilization statistics have the following terminology. o Input - Communication channel where packets arrive on the QFP. o Output - Communication channel where packets leave the QFP. o Priority - A classification applied to packets indicating they should be treated with greater urgency. o Non-Priority - A classification applied to packets indicating they should be treated with lesser urgency. o Processing Load - The percentage of time over some interval that the QFP has spent forwarding packets, relative to the total time spent both forwarding packets and being idle.")
class CiscoQfpPacketRate(TextualConvention, Counter64):
    description = 'An estimate of throughput in units of packets per second. The CiscoQfpPacketRate type represents a non-negative integer, which may increase or decrease, but shall never exceed a maximum value, nor fall below a minimum value of Counter64. The Counter64 syntax is used for encoding rules.'
    status = 'current'
    displayHint = 'd'

class CiscoQfpBitRate(TextualConvention, Counter64):
    description = 'An estimate of throughput in units of bits per second. The CiscoQfpBitRate type represents a non-negative integer, which may increase or decrease, but shall never exceed a maximum value, nor fall below a minimum value of Counter64. The Counter64 syntax is used for encoding rules.'
    status = 'current'
    displayHint = 'd'

class CiscoQfpTimeInterval(TextualConvention, Integer32):
    description = 'An enumerated integer-value describing the available interval values for which the periodic statistics are to be collected. fiveSeconds (1) - Interval to collect last 5 seconds statistics oneMinute(2) - Interval to collect last 1 minute statistics fiveMinutes(3) - Interval to collect last 5 minutes statistics sixtyMinutes(4) - Interval to collect last 60 minutes statistics'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fiveSeconds", 1), ("oneMinute", 2), ("fiveMinutes", 3), ("sixtyMinutes", 4))

class CiscoQfpMemoryResource(TextualConvention, Integer32):
    description = 'An enumerated integer-value describing various memory resources used by the QFP. dram (1) - Dynamic Random Access Memory (DRAM) memory resource'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("dram", 1))

ciscoEntityQfpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 715, 0))
ciscoEntityQfpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 715, 1))
ciscoEntityQfpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 715, 2))
ciscoEntityQfp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1))
ciscoEntityQfpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 2))
ceqfpSystemTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 1), )
if mibBuilder.loadTexts: ceqfpSystemTable.setStatus('current')
if mibBuilder.loadTexts: ceqfpSystemTable.setDescription('This table maintains the QFP system information for each QFP physical entity. An agent creates a conceptual row to this table corresponding to a QFP physical entity upon detection of a physical entity supporting the QFP system information. An agent destroys a conceptual row from this table corresponding to a QFP physical entity upon removal of the QFP host physical entity.')
ceqfpSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ceqfpSystemEntry.setStatus('current')
if mibBuilder.loadTexts: ceqfpSystemEntry.setDescription('A conceptual row in the ceqfpSystemTable. There is an entry in this table for each QFP entity, as defined by a value of entPhysicalIndex.')
ceqfpSystemTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ingress", 2), ("egress", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpSystemTrafficDirection.setStatus('current')
if mibBuilder.loadTexts: ceqfpSystemTrafficDirection.setDescription('This object represents the traffic direction that this QFP is assigned to process. The enumerated values are described below. none (1) - The QFP is not assigned to processes any traffic yet ingress (2) - The QFP processes inbound traffic egress (3) - The QFP processes outbound traffic both (4) - The QFP processes both inbound and outbound traffic')
ceqfpSystemState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("reset", 2), ("init", 3), ("active", 4), ("activeSolo", 5), ("standby", 6), ("hotStandby", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpSystemState.setStatus('current')
if mibBuilder.loadTexts: ceqfpSystemState.setDescription('This object represents the current QFP state. The enumerated values are described below. unknown (1) - The state of the QFP is unknown reset (2) - The QFP is reset init (3) - The QFP is being initialized active (4) - The QFP is active in a system with redundant QFP activeSolo (5) - The QFP is active and there is no redundant QFP in the system standby (6) - The QFP is standby in a redundant system. hotStandby (7) - The QFP is standby and synchronized with active, so that a switchover in this state will preserve state of the active. Stateful datapath features are synchronized between the active QFP and standby QFP')
ceqfpNumberSystemLoads = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpNumberSystemLoads.setStatus('current')
if mibBuilder.loadTexts: ceqfpNumberSystemLoads.setDescription('This object represents the number of times the QFP is loaded, since the QFP host is up.')
ceqfpSystemLastLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpSystemLastLoadTime.setStatus('current')
if mibBuilder.loadTexts: ceqfpSystemLastLoadTime.setDescription('This object represents the QFP last load time.')
ceqfpFiveSecondUtilAlgo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("fiveSecSample", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpFiveSecondUtilAlgo.setStatus('current')
if mibBuilder.loadTexts: ceqfpFiveSecondUtilAlgo.setDescription('This objects represents the method used to calculate 5 Second interval utilization data. The enumerated values are described below. unknown (1) - The calculation method is unknown fiveSecSample (2) - The value is calculated based on the last 5 second sampling period of utilization data.')
ceqfpOneMinuteUtilAlgo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("fiveSecSMA", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpOneMinuteUtilAlgo.setStatus('current')
if mibBuilder.loadTexts: ceqfpOneMinuteUtilAlgo.setDescription('This objects represents the method used to calculate 1 Minute interval utilization data. The enumerated values are described below. unknown (1) - The calculation method is unknown fiveSecSMA (2) - The value is calculated using Simple Moving Average of last 12 five seconds utilization data.')
ceqfpFiveMinutesUtilAlgo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("fiveSecSMA", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpFiveMinutesUtilAlgo.setStatus('current')
if mibBuilder.loadTexts: ceqfpFiveMinutesUtilAlgo.setDescription('This objects represents the method used to calculate 5 Minutes interval utilization data. The enumerated values are described below. unknown (1) - The calculation method is unknown fiveSecSMA (2) - The value is calculated using Simple Moving Average of last 60 five seconds utilization data.')
ceqfpSixtyMinutesUtilAlgo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("fiveSecSMA", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpSixtyMinutesUtilAlgo.setStatus('current')
if mibBuilder.loadTexts: ceqfpSixtyMinutesUtilAlgo.setDescription('This objects represents the method used to calculate 60 Minutes interval utilization data. The enumerated values are described below. unknown (1) - The calculation method is unknown fiveSecSMA (1) - The value is calculated using Simple Moving Average of last 720 five seconds utilization data.')
ceqfpUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6), )
if mibBuilder.loadTexts: ceqfpUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilizationTable.setDescription('This table maintains the utilization statistics collected by each QFP physical entity at various time interval such as last 5 seconds, 1 minute, etc. An agent creates a conceptual row to this table corresponding to a QFP physical entity for a time interval upon detection of a physical entity supporting the utilization statistics for a time interval. The agent destroys a conceptual row from this table corresponding to a QFP physical entity for a time interval upon removal of the QFP host physical entity or it does not receive the utilization statistics update for a certain time period. The time period to wait before deleting an entry from this table would be the discretion of the supporting device.')
ceqfpUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-QFP-MIB", "ceqfpUtilTimeInterval"))
if mibBuilder.loadTexts: ceqfpUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilizationEntry.setDescription("A conceptual row in the ceqfpUtilizationTable. There is an entry in this table for each QFP entity by a value of entPhysicalIndex and the supported time interval by a value of ceqfpUtilTimeInterval. The method of utilization data calculation for each interval period can be identified through the respective interval scalar objects. For example the utilizaiton data calculation method for 'fiveSecond' interval can be identified by ceqfpFiveSecondUtilAlgo.")
ceqfpUtilTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 1), CiscoQfpTimeInterval())
if mibBuilder.loadTexts: ceqfpUtilTimeInterval.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilTimeInterval.setDescription('This object identifies the time interval for which the utilization statistics being collected. The interval values can be 5 second, 1 minute, etc. as specified in the CiscoQfpTimeInterval.')
ceqfpUtilInputPriorityPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 2), CiscoQfpPacketRate()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilInputPriorityPktRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilInputPriorityPktRate.setDescription('This object represents the QFP input channel priority packet rate during this interval.')
ceqfpUtilInputPriorityBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 3), CiscoQfpBitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilInputPriorityBitRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilInputPriorityBitRate.setDescription('This object represents the QFP input channel priority bit rate during this interval.')
ceqfpUtilInputNonPriorityPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 4), CiscoQfpPacketRate()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilInputNonPriorityPktRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilInputNonPriorityPktRate.setDescription('This object represents the QFP input channel non-priority packet rate during this interval.')
ceqfpUtilInputNonPriorityBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 5), CiscoQfpBitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilInputNonPriorityBitRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilInputNonPriorityBitRate.setDescription('This object represents the QFP input channel non-priority bit rate during this interval.')
ceqfpUtilInputTotalPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 6), CiscoQfpPacketRate()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilInputTotalPktRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilInputTotalPktRate.setDescription('This object represents the QFP input channel total packet rate during this interval, which includes both priority and non-priority input packet rate.')
ceqfpUtilInputTotalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 7), CiscoQfpBitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilInputTotalBitRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilInputTotalBitRate.setDescription('This object represents the QFP input channel total bit rate during this interval, which includes both priority and non-priority input bit rate.')
ceqfpUtilOutputPriorityPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 8), CiscoQfpPacketRate()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilOutputPriorityPktRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilOutputPriorityPktRate.setDescription('This object represents the QFP output channel priority packet rate during this interval.')
ceqfpUtilOutputPriorityBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 9), CiscoQfpBitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilOutputPriorityBitRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilOutputPriorityBitRate.setDescription('This object represents the QFP output channel priority bit rate during this interval.')
ceqfpUtilOutputNonPriorityPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 10), CiscoQfpPacketRate()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilOutputNonPriorityPktRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilOutputNonPriorityPktRate.setDescription('This object represents the QFP output channel non-priority packet rate during this interval.')
ceqfpUtilOutputNonPriorityBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 11), CiscoQfpBitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilOutputNonPriorityBitRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilOutputNonPriorityBitRate.setDescription('This object represents the QFP output channel non-priority bit rate during this interval.')
ceqfpUtilOutputTotalPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 12), CiscoQfpPacketRate()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilOutputTotalPktRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilOutputTotalPktRate.setDescription('This object represents the QFP output channel total packet rate during this interval, which includes both priority and non-priority output packet rate.')
ceqfpUtilOutputTotalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 13), CiscoQfpBitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilOutputTotalBitRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilOutputTotalBitRate.setDescription('This object represents the QFP output channel total bit rate during this interval, which includes both priority and non-priority bit rate.')
ceqfpUtilProcessingLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 6, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpUtilProcessingLoad.setStatus('current')
if mibBuilder.loadTexts: ceqfpUtilProcessingLoad.setDescription('This object represents the QFP processing load during this interval.')
ceqfpMemoryResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7), )
if mibBuilder.loadTexts: ceqfpMemoryResourceTable.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResourceTable.setDescription('This table maintains the memory resources statistics for each QFP physical entity. An agent creates a conceptual row to this table corresponding to a QFP physical entity and its supported memory resource type upon detection of a physical entity supporting the memory resource statistics for a memory resource type. An agent destroys a conceptual row from this table corresponding to a QFP physical entity and its supported memory resource type upon removal of the QFP host physical entity or it does not receive memory resource statistics update for a certain time period. The time period to wait before deleting an entry from this table would be the discretion of the supporting device.')
ceqfpMemoryResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResType"))
if mibBuilder.loadTexts: ceqfpMemoryResourceEntry.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResourceEntry.setDescription('A conceptual row in the ceqfpMemoryResourceTable. There is an entry in this table for each QFP entity by a value of entPhysicalIndex and the supported memory resource type by a value of ceqfpMemoryResType.')
ceqfpMemoryResType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 1), CiscoQfpMemoryResource())
if mibBuilder.loadTexts: ceqfpMemoryResType.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResType.setDescription('This object indicates the type of the memory resource used by the QFP. This object is one of the indices to uniquely identify the QFP memory resource type.')
ceqfpMemoryResTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 2), Gauge32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryResTotal.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResTotal.setDescription('This object represents total memory available on this memory resource.')
ceqfpMemoryResInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 3), Gauge32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryResInUse.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResInUse.setDescription('This object represents the memory which is currently under use on this memory resource.')
ceqfpMemoryResFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 4), Gauge32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryResFree.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResFree.setDescription('This object represents the memory which is currently free on this memory resource.')
ceqfpMemoryResLowFreeWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 5), Gauge32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryResLowFreeWatermark.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResLowFreeWatermark.setDescription('This object represents lowest free water mark on this memory resource.')
ceqfpMemoryResRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceqfpMemoryResRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResRisingThreshold.setDescription('This object represents the rising threshold value for this memory resource. A value of zero means that the rising threshold is not supported for this memory resource. The value of this object can not be set to lower than or equal to ceqfpMemoryResFallingThreshold. A rising (ceqfpMemoryResRisingThreshNotif) notification will be generated, whenever the memory resource usage (ceqfpMemoryHCResInUse) is equal to or greater than this value. After a rising notification is generated, another such notification will not be generated until the ceqfpMemoryResInUse falls below this value and reaches the ceqfpMemoryResFallingThreshold.')
ceqfpMemoryResFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(85)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceqfpMemoryResFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResFallingThreshold.setDescription('This object represents the falling threshold value for this memory resource. A value of zero means that the falling threshold is not supported for this memory resource. The value of this object can not be set to higher than or equal to ceqfpMemoryResRisingThreshold. A falling (ceqfpMemoryResRisingThreshNotif) notification will be generated, whenever the memory resource usage (ceqfpMemoryHCResInUse) is equal to or lesser than this value. After a falling notification is generated, another such notification will not be generated until the ceqfpMemoryResInUse rises above this value and reaches the ceqfpMemoryResRisingThreshold.')
ceqfpMemoryResTotalOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 8), Gauge32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryResTotalOvrflw.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResTotalOvrflw.setDescription('This object represents the upper 32-bit of ceqfpMemoryResTotal. This object needs to be supported only when the value of ceqfpMemoryResTotal exceeds 32-bit, otherwise this object value would be set to 0.')
ceqfpMemoryHCResTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 9), CounterBasedGauge64()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryHCResTotal.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryHCResTotal.setDescription('This object is a 64-bit version of ceqfpMemoryResTotal.')
ceqfpMemoryResInUseOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 10), Gauge32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryResInUseOvrflw.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResInUseOvrflw.setDescription('This object represents the upper 32-bit of ceqfpMemoryResInUse. This object needs to be supported only when the value of ceqfpMemoryResInUse exceeds 32-bit, otherwise this object value would be set to 0.')
ceqfpMemoryHCResInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 11), CounterBasedGauge64()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryHCResInUse.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryHCResInUse.setDescription('This object is a 64-bit version of ceqfpMemoryInRes.')
ceqfpMemoryResFreeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 12), Gauge32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryResFreeOvrflw.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResFreeOvrflw.setDescription('This object represents the upper 32-bit of ceqfpMemoryResFree. This object needs to be supported only when the value of ceqfpMemoryResFree exceeds 32-bit, otherwise this object value would be set to 0.')
ceqfpMemoryHCResFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 13), CounterBasedGauge64()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryHCResFree.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryHCResFree.setDescription('This object is a 64-bit version of ceqfpMemoryResFree.')
ceqfpMemoryResLowFreeWatermarkOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 14), Gauge32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryResLowFreeWatermarkOvrflw.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResLowFreeWatermarkOvrflw.setDescription('This object represents the upper 32-bit of ceqfpMemoryResLowFreeWatermark. This object needs to be supported only when the value of ceqfpMemoryResLowFreeWatermark exceeds 32-bit, otherwise this object value would be set to 0.')
ceqfpMemoryHCResLowFreeWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 7, 1, 15), CounterBasedGauge64()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpMemoryHCResLowFreeWatermark.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryHCResLowFreeWatermark.setDescription('This object is a 64-bit version of ceqfpMemoryResLowFreeWatermark.')
ceqfpThroughputTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 8), )
if mibBuilder.loadTexts: ceqfpThroughputTable.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputTable.setDescription('This table maintains the throughput information for each QFP physical entity. An agent creates a conceptual row to this table corresponding to a QFP physical entity upon detection of a physical entity supporting the QFP throughput information. An agent destroys a conceptual row from this table corresponding to a QFP physical entity upon removal of the QFP host physical entity.')
ceqfpThroughputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 8, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ceqfpThroughputEntry.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputEntry.setDescription('A conceptual row in the ceqfpThroughputTable. There is an entry in this table for each QFP entity, as defined by a value of entPhysicalIndex.')
ceqfpThroughputLicensedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 8, 1, 1), Counter64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpThroughputLicensedBW.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputLicensedBW.setDescription('This object represents the bandwidth for installed throughput license.')
ceqfpThroughputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("exceed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpThroughputLevel.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputLevel.setDescription('This object represents the current throughput level for installed throughput license. normal (1) - Throughput usage is normal warning (2) - Throughput usage has crossed the configured threshold limit exceed (3) - Throughput usage has exceeded the total licensed bandwidth')
ceqfpThroughputInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 86400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceqfpThroughputInterval.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputInterval.setDescription('The object represents the configured time interval at which the ceqfpThroughputLevel is checked.')
ceqfpThroughputThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 95))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceqfpThroughputThreshold.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputThreshold.setDescription('The object represents the configured throughput threshold.')
ceqfpThroughputAvgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 1, 8, 1, 5), Counter64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceqfpThroughputAvgRate.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputAvgRate.setDescription('The object represents the average throughput rate in the interval ceqfpThroughputInterval.')
ceqfpMemoryResThreshNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceqfpMemoryResThreshNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResThreshNotifEnabled.setDescription("This object controls memory resource rising and falling threshold notification. When this object contains a value 'true', then generation of memory resource threshold notification is enabled. If this object contains a value 'false', then generation of memory resource threshold notification is disabled.")
ceqfpMemoryResCurrentRisingThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ceqfpMemoryResCurrentRisingThresh.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResCurrentRisingThresh.setDescription('This object represents the current rising threshold value, which triggers the rising threshold notification (ceqfpMemoryResRisingThreshNotif).')
ceqfpMemoryResCurrentFallingThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 2, 3), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ceqfpMemoryResCurrentFallingThresh.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResCurrentFallingThresh.setDescription('This object represents the current falling threshold value, which triggers the falling threshold notification (ceqfpMemoryResFallingThreshNotif).')
ceqfpThroughputNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 715, 1, 2, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceqfpThroughputNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputNotifEnabled.setDescription("This object controls throughput rate notification. When this object contains a value 'true', then generation of ceqfpThroughputNotif is enabled. If this object contains a value 'false', then generation of ceqfpThroughputNotif is disabled.")
ciscoEntityQfpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 1))
ceqfpMemoryResRisingThreshNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 715, 0, 1)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResInUse"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResCurrentRisingThresh"))
if mibBuilder.loadTexts: ceqfpMemoryResRisingThreshNotif.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResRisingThreshNotif.setDescription('A notification indicating that the QFP memory usage is rising the threshold on this memory resource. This notification will be sent, whenever the QFP memory usage (ceqfpMemoryResInUse) is equal to or above the rising threshold (ceqfpMemoryResRisingThreshold). An agent may throttle the generation of consecutive ceqfpMemoryResRisingThreshNotif notification so that there is at least a five second (suggested default) gap between notification of this type.')
ceqfpMemoryResFallingThreshNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 715, 0, 2)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResInUse"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResCurrentFallingThresh"))
if mibBuilder.loadTexts: ceqfpMemoryResFallingThreshNotif.setStatus('current')
if mibBuilder.loadTexts: ceqfpMemoryResFallingThreshNotif.setDescription('A notification indicating that the QFP memory usage is equal to or below the falling threshold on this memory resource. This notification will be sent, whenever the QFP memory usage (ceqfpMemoryResInUse) is equal to or below the falling threshold (ceqfpMemoryResFallingThreshold). An agent may throttle the generation of consecutive ceqfpMemoryResFallingThreshNotif notification so that there is at least a five second (suggested default) gap between notification of this type.')
ceqfpThroughputNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 715, 0, 3)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputLicensedBW"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputLevel"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputAvgRate"))
if mibBuilder.loadTexts: ceqfpThroughputNotif.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputNotif.setDescription('A notification indicating that the average throughput rate for the configured interval has exceeded the threshold or reached maximum bandwidth allowed. This notification will be sent, whenever the ceqfpThroughputLevel object has the value warning(2) or exceed(3). The condition for trap generation will be checked in every ceqfpThroughputInterval. ceqfpThroughputNotif with ceqfpThrougputLevel as warning(2) indicates that average throughput rate has crossed the configured threshold. ceqfpThroughputNotif with ceqfpThrougputLevel as exceed(3) indicates that average throughput rate has reached maximum licensed bandwidth.')
ciscoEntityQfpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2))
ciscoEntityQfpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 1, 1)).setObjects(("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpSystemGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpUtilizationGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpUtilizationAlgoGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpMemoryResourceGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpMemoryResNotifGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpMIBComplianceRev1 = ciscoEntityQfpMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEntityQfpMIBComplianceRev1.setDescription('The compliance statement for CISCO-ENTITY-QFP-MIB')
ciscoEntityQfpMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 1, 2)).setObjects(("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpSystemGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpUtilizationGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpUtilizationAlgoGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpMemoryResourceGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpMemoryResourceOvrflwGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpMemoryHCResourceGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpMemoryResNotifGroup"), ("CISCO-ENTITY-QFP-MIB", "ciscoEntityQfpNotifGroup"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpMIBComplianceRev2 = ciscoEntityQfpMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpMIBComplianceRev2.setDescription('The compliance statement for CISCO-ENTITY-QFP-MIB. This compliance module deprecates ciscoEntityQfpMIBComplianceRev1.')
ciscoEntityQfpSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 1)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpSystemTrafficDirection"), ("CISCO-ENTITY-QFP-MIB", "ceqfpSystemState"), ("CISCO-ENTITY-QFP-MIB", "ceqfpNumberSystemLoads"), ("CISCO-ENTITY-QFP-MIB", "ceqfpSystemLastLoadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpSystemGroup = ciscoEntityQfpSystemGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpSystemGroup.setDescription('This group contains collection of QFP system information.')
ciscoEntityQfpUtilizationAlgoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 2)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpFiveSecondUtilAlgo"), ("CISCO-ENTITY-QFP-MIB", "ceqfpOneMinuteUtilAlgo"), ("CISCO-ENTITY-QFP-MIB", "ceqfpFiveMinutesUtilAlgo"), ("CISCO-ENTITY-QFP-MIB", "ceqfpSixtyMinutesUtilAlgo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpUtilizationAlgoGroup = ciscoEntityQfpUtilizationAlgoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpUtilizationAlgoGroup.setDescription('This group contains collection of QFP utilization algorithm objects.')
ciscoEntityQfpUtilizationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 3)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpUtilInputPriorityPktRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilInputPriorityBitRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilInputNonPriorityPktRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilInputNonPriorityBitRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilInputTotalPktRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilInputTotalBitRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilOutputPriorityPktRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilOutputPriorityBitRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilOutputNonPriorityPktRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilOutputNonPriorityBitRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilOutputTotalPktRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilOutputTotalBitRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpUtilProcessingLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpUtilizationGroup = ciscoEntityQfpUtilizationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpUtilizationGroup.setDescription('This group contains collection of QFP utilization information.')
ciscoEntityQfpMemoryResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 4)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResTotal"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResInUse"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResFree"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResLowFreeWatermark"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResRisingThreshold"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResFallingThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpMemoryResourceGroup = ciscoEntityQfpMemoryResourceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpMemoryResourceGroup.setDescription('This group contains collection of QFP memory resource information.')
ciscoEntityQfpNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 5)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResRisingThreshNotif"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResFallingThreshNotif"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpNotifGroup = ciscoEntityQfpNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpNotifGroup.setDescription('This group contains collection of QFP notifications.')
ciscoEntityQfpMemoryResNotifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 6)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResThreshNotifEnabled"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResCurrentRisingThresh"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResCurrentFallingThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpMemoryResNotifGroup = ciscoEntityQfpMemoryResNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpMemoryResNotifGroup.setDescription('This group contains memory resource notification control objects.')
ciscoEntityQfpMemoryResourceOvrflwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 7)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResTotalOvrflw"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResInUseOvrflw"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResFreeOvrflw"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryResLowFreeWatermarkOvrflw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpMemoryResourceOvrflwGroup = ciscoEntityQfpMemoryResourceOvrflwGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpMemoryResourceOvrflwGroup.setDescription('This group contains collection of upper 32-bit QFP memory resource information.')
ciscoEntityQfpMemoryHCResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 8)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryHCResTotal"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryHCResInUse"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryHCResFree"), ("CISCO-ENTITY-QFP-MIB", "ceqfpMemoryHCResLowFreeWatermark"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityQfpMemoryHCResourceGroup = ciscoEntityQfpMemoryHCResourceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityQfpMemoryHCResourceGroup.setDescription('This group contains collection of high capacity(HC) objects of QFP memory resource information.')
ceqfpThroughputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 715, 2, 2, 9)).setObjects(("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputLicensedBW"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputLevel"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputInterval"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputThreshold"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputAvgRate"), ("CISCO-ENTITY-QFP-MIB", "ceqfpThroughputNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceqfpThroughputGroup = ceqfpThroughputGroup.setStatus('current')
if mibBuilder.loadTexts: ceqfpThroughputGroup.setDescription('This group contains collection of throughput rate information.')
mibBuilder.exportSymbols("CISCO-ENTITY-QFP-MIB", ceqfpMemoryResCurrentRisingThresh=ceqfpMemoryResCurrentRisingThresh, ceqfpMemoryHCResTotal=ceqfpMemoryHCResTotal, ceqfpMemoryHCResFree=ceqfpMemoryHCResFree, ciscoEntityQfpMIBComplianceRev2=ciscoEntityQfpMIBComplianceRev2, ciscoEntityQfpMIBCompliances=ciscoEntityQfpMIBCompliances, ciscoEntityQfpNotif=ciscoEntityQfpNotif, ceqfpMemoryResInUseOvrflw=ceqfpMemoryResInUseOvrflw, ceqfpMemoryResRisingThreshNotif=ceqfpMemoryResRisingThreshNotif, ceqfpUtilOutputPriorityPktRate=ceqfpUtilOutputPriorityPktRate, ceqfpSystemEntry=ceqfpSystemEntry, ceqfpSystemState=ceqfpSystemState, ceqfpMemoryResRisingThreshold=ceqfpMemoryResRisingThreshold, ceqfpThroughputInterval=ceqfpThroughputInterval, ceqfpThroughputNotif=ceqfpThroughputNotif, ciscoEntityQfpMemoryResNotifGroup=ciscoEntityQfpMemoryResNotifGroup, ceqfpMemoryResFreeOvrflw=ceqfpMemoryResFreeOvrflw, ceqfpSystemTrafficDirection=ceqfpSystemTrafficDirection, ceqfpThroughputGroup=ceqfpThroughputGroup, ceqfpUtilTimeInterval=ceqfpUtilTimeInterval, ceqfpMemoryHCResLowFreeWatermark=ceqfpMemoryHCResLowFreeWatermark, ceqfpMemoryResourceTable=ceqfpMemoryResourceTable, ciscoEntityQfpUtilizationAlgoGroup=ciscoEntityQfpUtilizationAlgoGroup, ciscoEntityQfpMIBObjects=ciscoEntityQfpMIBObjects, ceqfpUtilizationEntry=ceqfpUtilizationEntry, ceqfpUtilOutputNonPriorityPktRate=ceqfpUtilOutputNonPriorityPktRate, ceqfpMemoryResType=ceqfpMemoryResType, ciscoEntityQfpSystemGroup=ciscoEntityQfpSystemGroup, ciscoEntityQfp=ciscoEntityQfp, ceqfpMemoryResLowFreeWatermarkOvrflw=ceqfpMemoryResLowFreeWatermarkOvrflw, ceqfpThroughputEntry=ceqfpThroughputEntry, ceqfpOneMinuteUtilAlgo=ceqfpOneMinuteUtilAlgo, ciscoEntityQfpMIBNotifs=ciscoEntityQfpMIBNotifs, ceqfpMemoryResThreshNotifEnabled=ceqfpMemoryResThreshNotifEnabled, ciscoEntityQfpMemoryResourceGroup=ciscoEntityQfpMemoryResourceGroup, ciscoEntityQfpMIBComplianceRev1=ciscoEntityQfpMIBComplianceRev1, CiscoQfpPacketRate=CiscoQfpPacketRate, ceqfpMemoryResourceEntry=ceqfpMemoryResourceEntry, ceqfpMemoryResInUse=ceqfpMemoryResInUse, ceqfpMemoryResFallingThreshold=ceqfpMemoryResFallingThreshold, ceqfpThroughputAvgRate=ceqfpThroughputAvgRate, ceqfpMemoryResTotalOvrflw=ceqfpMemoryResTotalOvrflw, ciscoEntityQfpNotifGroup=ciscoEntityQfpNotifGroup, ceqfpUtilOutputNonPriorityBitRate=ceqfpUtilOutputNonPriorityBitRate, ceqfpThroughputThreshold=ceqfpThroughputThreshold, ceqfpSixtyMinutesUtilAlgo=ceqfpSixtyMinutesUtilAlgo, ceqfpUtilInputNonPriorityPktRate=ceqfpUtilInputNonPriorityPktRate, ceqfpMemoryHCResInUse=ceqfpMemoryHCResInUse, ceqfpUtilInputTotalPktRate=ceqfpUtilInputTotalPktRate, ceqfpUtilizationTable=ceqfpUtilizationTable, ceqfpMemoryResTotal=ceqfpMemoryResTotal, ceqfpUtilInputPriorityPktRate=ceqfpUtilInputPriorityPktRate, CiscoQfpBitRate=CiscoQfpBitRate, ceqfpThroughputLevel=ceqfpThroughputLevel, ceqfpFiveMinutesUtilAlgo=ceqfpFiveMinutesUtilAlgo, ceqfpMemoryResFree=ceqfpMemoryResFree, CiscoQfpTimeInterval=CiscoQfpTimeInterval, ceqfpUtilOutputTotalBitRate=ceqfpUtilOutputTotalBitRate, ceqfpMemoryResCurrentFallingThresh=ceqfpMemoryResCurrentFallingThresh, ceqfpUtilProcessingLoad=ceqfpUtilProcessingLoad, ceqfpThroughputLicensedBW=ceqfpThroughputLicensedBW, ceqfpUtilOutputTotalPktRate=ceqfpUtilOutputTotalPktRate, ceqfpMemoryResFallingThreshNotif=ceqfpMemoryResFallingThreshNotif, ceqfpUtilInputNonPriorityBitRate=ceqfpUtilInputNonPriorityBitRate, ciscoEntityQfpMIBConform=ciscoEntityQfpMIBConform, ceqfpThroughputTable=ceqfpThroughputTable, ceqfpSystemTable=ceqfpSystemTable, ciscoEntityQfpMIB=ciscoEntityQfpMIB, ceqfpNumberSystemLoads=ceqfpNumberSystemLoads, CiscoQfpMemoryResource=CiscoQfpMemoryResource, ciscoEntityQfpUtilizationGroup=ciscoEntityQfpUtilizationGroup, ceqfpMemoryResLowFreeWatermark=ceqfpMemoryResLowFreeWatermark, ceqfpUtilInputPriorityBitRate=ceqfpUtilInputPriorityBitRate, ceqfpSystemLastLoadTime=ceqfpSystemLastLoadTime, ceqfpUtilInputTotalBitRate=ceqfpUtilInputTotalBitRate, PYSNMP_MODULE_ID=ciscoEntityQfpMIB, ceqfpThroughputNotifEnabled=ceqfpThroughputNotifEnabled, ciscoEntityQfpMIBGroups=ciscoEntityQfpMIBGroups, ciscoEntityQfpMemoryResourceOvrflwGroup=ciscoEntityQfpMemoryResourceOvrflwGroup, ceqfpFiveSecondUtilAlgo=ceqfpFiveSecondUtilAlgo, ciscoEntityQfpMemoryHCResourceGroup=ciscoEntityQfpMemoryHCResourceGroup, ceqfpUtilOutputPriorityBitRate=ceqfpUtilOutputPriorityBitRate)
