#
# PySNMP MIB module AtiL2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AtiL2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Counter32, ModuleIdentity, iso, TimeTicks, IpAddress, Integer32, Counter64, MibIdentifier, NotificationType, Gauge32, Bits, Unsigned32, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "ModuleIdentity", "iso", "TimeTicks", "IpAddress", "Integer32", "Counter64", "MibIdentifier", "NotificationType", "Gauge32", "Bits", "Unsigned32", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

alliedTelesyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
atiProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1))
swhub = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4))
at_8324 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 37)).setLabel("at-8324")
at_8124XL_V2 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 52)).setLabel("at-8124XL-V2")
at_8326GB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 72)).setLabel("at-8326GB")
at_9410GB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 73)).setLabel("at-9410GB")
at_8350GB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 74)).setLabel("at-8350GB")
at_8316F = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 77)).setLabel("at-8316F")
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
atiL2Mib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33))
atiL2GlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 1))
atiL2IpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 2))
atiL2NMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 3))
atiL2DHCPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 4))
atiL2DeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 5))
atiL2EthernetStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 6))
atiL2DevicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 7))
atiL2VlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 8))
atiL2IfExt = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 9))
atiL2BridgeMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 10))
atiL2BrBase = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1))
atiL2BrStp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2))
atiL2BrTp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3))
atiL2TrapAttrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 11))
atiL2QOSConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 12))
atiL2SwProduct = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2SwProduct.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2SwProduct.setDescription('Identifies the software product the device is running.')
atiL2SwVersion = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2SwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2SwVersion.setDescription(' Identifies the version number of the present release.')
atiL2Reset = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch-no-reset", 1), ("switch-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2Reset.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2Reset.setDescription(' Object use to reset all the Modules globally.')
atiL2MirroringSourceModule = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2MirroringSourceModule.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2MirroringSourceModule.setDescription(" This is the mirror source module number. If the atiL2EthConfigMirrorState is Enabled then the mirror source module/port data gets routed to the mirror destination module/port. Both transmitted and recieved source activity is mirrored to the destination. This arrangement is to put an RMON Probe on the destination port to probe the traffic on the Source port. This object will return a '0' if the MirrorState is not enabled.")
atiL2MirroringSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2MirroringSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2MirroringSourcePort.setDescription(" This is the Source port number for which there is another mirror port.If the atiL2EthConfigMirrorState is Enabled then the mirror portgets routed with all the packets going in and out of Source port. This arrangement is to put an RMON Probe on mirrored port to Probe the traffic on the Source port. One of the port is dedicated to this so that for any port as source port, this dedicated port can be a mirrored port. This object will return a '0' if the MirrorState is not enabled.")
atiL2MirroringDestinationModule = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2MirroringDestinationModule.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2MirroringDestinationModule.setDescription(" This is the mirror destination module number. If the atiL2EthConfigMirrorState is Enabled then the mirror source module/port data gets routed to the mirror destination module/port. Both transmitted and recieved source activity is mirrored to the destination. This arrangement is to put an RMON Probe on the destination port to probe the traffic on the Source port. This object will return a '0' if the MirrorState is not enabled.")
atiL2MirroringDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2MirroringDestinationPort.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2MirroringDestinationPort.setDescription(" This is the Destination port number for which there is another mirror port.If the atiL2EthConfigMirrorState is Enabled then,the mirror portgets routed with all the packets going in and out of Destination port. This arrangement is to put an RMON Probe on mirrored port to Probe the traffic on the Destination port. One of the port is dedicated to this so that for any port as destination port, this dedicated port can be a mirrored port. This object will return a '0' if the MirrorState is not enabled.")
atiL2MirrorState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receive-and-transmit", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2MirrorState.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2MirrorState.setDescription(' if the state of Mirroring is enabled by selecting one of the two values , then the Mirroring explained above works. If disabled, port operation works normally. No Traffic gets routed from MirroringSourcePort to Destination Mirrored Port.')
atiL2IGMPState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2IGMPState.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2IGMPState.setDescription('This attribute allows an administrative request to configure IGMP')
atiL2DeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DeviceNumber.setDescription('The total number of devices in the stack.')
atiL2CurrentIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2CurrentIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2CurrentIpAddress.setDescription(' The Current IP address is the one which is currently used and is obtained dynamically through one of the protocols interaction.( DHCP or Bootp.) This address is NULL if the Address is Statically configured.')
atiL2ConfiguredIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2ConfiguredIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2ConfiguredIpAddress.setDescription(' The Configured IP address of the device. This is the address configured through Network or Local Omega. ')
atiL2ConfiguredSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2ConfiguredSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2ConfiguredSubnetMask.setDescription(' The Configured Subnet Mask of the device.')
atiL2ConfiguredRouter = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2ConfiguredRouter.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2ConfiguredRouter.setDescription(' The Configured Gateway/Router address of the device')
atiL2IPAddressStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("from-dhcp", 1), ("from-bootp", 2), ("from-psuedoip", 3), ("from-Omega", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2IPAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2IPAddressStatus.setDescription(' The IP Address can be obtained/configured by any of the above different ways. This object specifies how IP address currently on the switch Box, was configured/obtained.')
atiL2DNServer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DNServer.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DNServer.setDescription(' The Configured DNS Server address of the device')
atiL2DefaultDomainName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DefaultDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DefaultDomainName.setDescription(' This Object defines the Default Domain where this switch can be belong to.')
atiL2NwMgrTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 3, 1), )
if mibBuilder.loadTexts: atiL2NwMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2NwMgrTable.setDescription('A list of SNMP Trap Manager stations Entries. The number of entries is given by the switchNwMgrTotal mib object.')
atiL2NwMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 3, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2NwMgrIndex"))
if mibBuilder.loadTexts: atiL2NwMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2NwMgrEntry.setDescription("Trap receipt Manager Entry containing ipaddress of the configured NMS's to which Traps are sent.")
atiL2NwMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2NwMgrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2NwMgrIndex.setDescription('The Index of the Managers Ip address.')
atiL2NwMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2NwMgrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2NwMgrIpAddr.setDescription('The IP Address of the NMS host configured.')
atiL2DHCPSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 1))
atiL2DHCPTimerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 2))
atiL2DHCPCurrentDHCPClientAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DHCPCurrentDHCPClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DHCPCurrentDHCPClientAddress.setDescription('Current IP address of the client. To start with,it might be null. This is filled by the server when sending a DHCPOFFER and the client uses the most comfortable offer from offers sent by different DHCP servers. A DHCPREQUEST packet is sent with the Client address agreed upon to the selected server ( Broadcast). Server Acks back this packet which is where Client/Server moves to the Bound state. Once reached into Bound state, the client address is made the official address on the client.')
atiL2DHCPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DHCPSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DHCPSubnetMask.setDescription('When the client/server reaches the BOUND state, this is one of the parameters set by the server.')
atiL2DHCPCurrentRelayAgentAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DHCPCurrentRelayAgentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DHCPCurrentRelayAgentAddress.setDescription('The IP address of the DHCP relay Agent on the same subnet. Normally there will be no DHCP server on each of the subnet and this Relay Agent will act in sending server across the subnets. There might not be any relay agent. This depends on the network Toplogy like where is the DHCP server and DHCP client.')
atiL2DHCPNextDHCPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DHCPNextDHCPServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DHCPNextDHCPServerAddress.setDescription('The IP address of the next DHCP server to be used during bootstrap. This address is sent by the DHCP server in the messages DHCPOFFER, DHCPACK,DHCPNACK.')
atiL2DHCPLeaseTimer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DHCPLeaseTimer.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DHCPLeaseTimer.setDescription('When the client/server reaches the BOUND state, this is one of the parameters set by the server. The lease time period in seconds for the DHCP client for using IP address on lease from the server. At the end of 50% of this timer a renewal request is sent by the client . This is the next Object atiL2DHCPReacquisitionTimer.')
atiL2DHCPReacquisitionTimer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DHCPReacquisitionTimer.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DHCPReacquisitionTimer.setDescription("When the client/server reaches the BOUND state, this is one of the parameters set by the server. Mentioned in RFC2131 4.4.5 as T1, this renewal time period in secs for the DHCP client is for using IP address on lease from the server Once the Reacquisition Timer period in secs after the lease period is reached, the client sends a DHCPREQUEST to the DHCP server requesting for renewal of the lease. Default would be 50% of the Lease timer which is represeneted by the above object. The client moves from BOUND to RENEW state once the DHCPREQUEST is sent after time T1 secs is passed from the start of to release time. T1 is always less than T2 ( see below for 'T2') which is less than the lease Timer period.")
atiL2DHCPExpirationTimer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 4, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DHCPExpirationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DHCPExpirationTimer.setDescription('When the client/server reaches the BOUND state, this is one of the parameters set by the server. Mentioned in RFC2131 4.4.5 as T2,this Expiration time period in secs is the time period in secs during which DHCP has gone through the BOUND->RENEWAL state. After T1 secs and when the state machine reaches T2 secs, ( T1 < T2 < lease period), DHCP client sends another DHCPREQUEST to the server asking the server to renew the lease for the IP parameters. By default it would be 87.5% of the Lease timer .If there is DHCPACK then the DHCP client moves from REBIND to BOUND. Else it moves to INIT state where it starts all over again sending a request for DHCPDISCOVER.')
atiL2deviceTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1), )
if mibBuilder.loadTexts: atiL2deviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceTable.setDescription('The table contains the mapping of all devices in the chassis.')
atiL2deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2deviceIndex"))
if mibBuilder.loadTexts: atiL2deviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceEntry.setDescription('The device entry in the DeviceTable.')
atiL2deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2deviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceIndex.setDescription('The Slot number in the chassis where the device is installed.')
atiL2deviceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2deviceDescr.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceDescr.setDescription('A textual description of the device.')
atiL2deviceProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 20))).clone(namedValues=NamedValues(("at-8324", 1), ("at-8316F", 2), ("at-8124XL-V2", 3), ("at-8326GB", 4), ("at-9410GB", 5), ("at-8350GB", 6), ("other", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2deviceProductType.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceProductType.setDescription('This object will return Product Type.')
atiL2devicePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2devicePortCount.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2devicePortCount.setDescription('The number of ports contained within the device. Valid range is 1-32. Within each device, the ports are uniquely numbered in the range from 1 to maxportCapacity.')
atiL2deviceSecurityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-with-learning-locked", 2), ("limited-enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2deviceSecurityConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceSecurityConfig.setDescription('Security feature configuration Object.The Security disable would let the device carry on the learn-new-address-as-it-comes-in mode as usual.When security is enabled-with-learning-locked, the learning of new address is stopped and the addresses locked in the device is used as the security Database. If an address comes in which is not present in the Device Security Database, then any of the atiL2SecurityAction Configured is triggered. When limited-enabled is selected, a per-port atiL2PortSecurityNumberOfAddresses specify the max number of MACs to be learned.')
atiL2deviceSecurityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("send-trap-only", 1), ("disable-port-only", 2), ("disable-port-and-send-trap", 3), ("do-nothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2deviceSecurityAction.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceSecurityAction.setDescription('Security Action to be carried when the atiL2SecurityConfig is enabled-with-learning-locked or limted-enabled.')
atiL2deviceDebugAvailableBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2deviceDebugAvailableBytes.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceDebugAvailableBytes.setDescription('This is strictly for Debug reason and this object should not be believed as the correct number.')
atiL2deviceMDA1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ten-100rj45-mii", 1), ("hundredfiber-mii", 2), ("oneGb-rj45", 3), ("oneGb-Fiber", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2deviceMDA1Type.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceMDA1Type.setDescription("This object returns the MDA type of the Uplink port. The values of 1 and 2 are the only one present in 81XX. 82XX has all the values supported. This object returns the MDA type of the Uplink Port named 'A'. It returns 'none' if a 'A' MDA slot is not installed.")
atiL2deviceMDA2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ten-100rj45-mii", 1), ("hundredfiber-mii", 2), ("oneGb-rj45", 3), ("oneGb-Fiber", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2deviceMDA2Type.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceMDA2Type.setDescription("This Object is supported in 81XX 82XX product lines. The values of 1 and 2 are the only one present in 81XX. 82XX has all the values supported. This object returns the MDA type of the Uplink Port named 'B'. It returns 'none' if a 'B' MDA slot is not installed.")
atiL2deviceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch-no-reset", 1), ("switch-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2deviceReset.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2deviceReset.setDescription("Setting this object to 'switch-reset' will cause the switch to perform a hardware reset within approximately 4-6 seconds. Setting this object to 'switch-no-reset will have no effect. The value 'no-reset' will be returned whenever this object is retrieved.")
atiL2EthMonStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1))
atiL2EthErrStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2))
atiL2EthMonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1), )
if mibBuilder.loadTexts: atiL2EthMonStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonStatsTable.setDescription('A list of statistics entries.')
atiL2EthMonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2EthMonModuleId"))
if mibBuilder.loadTexts: atiL2EthMonStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonStatsEntry.setDescription('A collection of statistics kept for a particular port.')
atiL2EthMonModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonModuleId.setDescription('This Object Identifies the Module Id for which the Statistics is collected.')
atiL2EthMonRxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonRxGoodFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonRxGoodFrames.setDescription('The total number of Good Frames received on this module.')
atiL2EthMonTxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonTxGoodFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonTxGoodFrames.setDescription('The total number of Good Frames Transmitted by this module.')
atiL2EthMonTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonTxTotalBytes.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonTxTotalBytes.setDescription('The total number of Bytes transmitted from this module.')
atiL2EthMonTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonTxDeferred.setStatus('deprecated')
if mibBuilder.loadTexts: atiL2EthMonTxDeferred.setDescription('This is the count of first time Transmission attempt which failed on an interface due to medium being busy.')
atiL2EthMonTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonTxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonTxCollisions.setDescription('The total number of collisions while switching on an interface.')
atiL2EthMonTxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonTxBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonTxBroadcastFrames.setDescription('The total number of Transmit Broadcast Frames while switching on an interface.')
atiL2EthMonTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonTxMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonTxMulticastFrames.setDescription('The total number of Transmit Multicast while switching on an interface.')
atiL2EthMonRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthMonRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthMonRxOverruns.setDescription('The total number of Recieved Overrun Frames while switching on an interface.')
atiL2EthPortMonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2), )
if mibBuilder.loadTexts: atiL2EthPortMonStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonStatsTable.setDescription('A list of statistics entries per Port on a Module.')
atiL2EthPortMonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2EthPortMonModuleId"), (0, "AtiL2-MIB", "atiL2EthPortMonPortId"))
if mibBuilder.loadTexts: atiL2EthPortMonStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonStatsEntry.setDescription('A collection of statistics kept for a particular port.')
atiL2EthPortMonModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonModuleId.setDescription('This Object Identifies the Module Id for which the Statistics is collected.')
atiL2EthPortMonPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonPortId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonPortId.setDescription('This Object Identifies the Port on the Module recognised by EthMonPortModuleId for which the Statistics is collected.')
atiL2EthPortMonRxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonRxGoodFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonRxGoodFrames.setDescription('The total number of Good Frames received on this module.')
atiL2EthPortMonTxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonTxGoodFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonTxGoodFrames.setDescription('The total number of Good Frames Transmitted by this module.')
atiL2EthPortMonTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonTxTotalBytes.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonTxTotalBytes.setDescription('The total number of Bytes transmitted from this module.')
atiL2EthPortMonTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonTxDeferred.setStatus('deprecated')
if mibBuilder.loadTexts: atiL2EthPortMonTxDeferred.setDescription('This is the count of first time Transmission attempt which failed on an interface due to medium being busy.')
atiL2EthPortMonTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonTxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonTxCollisions.setDescription('The total number of collisions while switching on an interface.')
atiL2EthPortMonTxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonTxBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonTxBroadcastFrames.setDescription('The total number of Transmit Broadcast Frames on this port and Module while switching on an interface.')
atiL2EthPortMonTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonTxMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonTxMulticastFrames.setDescription('The total number of Transmit Multicast on this port and Module while switching on an interface.')
atiL2EthPortMonRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortMonRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortMonRxOverruns.setDescription('The total number of Recieved Overrun Frames on this port and Module while switching on an interface.')
atiL2EthErrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 1), )
if mibBuilder.loadTexts: atiL2EthErrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthErrStatsTable.setDescription('A list of statistics entries.')
atiL2EthErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2EthErrModuleId"))
if mibBuilder.loadTexts: atiL2EthErrorStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthErrorStatsEntry.setDescription('A collection of statistics kept for a particular port.')
atiL2EthErrModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthErrModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthErrModuleId.setDescription('This Object Identifies the Module Id for which the Statistics is collected.')
atiL2EthErrorCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthErrorCRC.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthErrorCRC.setDescription('The total number of CRC errors on received packets.')
atiL2EthErrorAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthErrorAlignment.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthErrorAlignment.setDescription('The total number of packets received that has alignment errors.')
atiL2EthErrorRxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthErrorRxBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthErrorRxBadFrames.setDescription('The counter is incremented when a bad frame was received.')
atiL2EthErrorLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthErrorLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthErrorLateCollisions.setDescription('This object counts the number of times the collison was detected in the port.')
atiL2EthErrorTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthErrorTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthErrorTxTotal.setDescription('Total number of error resulted from transfer operations.')
atiL2EthPortErrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2), )
if mibBuilder.loadTexts: atiL2EthPortErrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrStatsTable.setDescription('A list of statistics entries.')
atiL2EthPortErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2EthPortErrModuleId"), (0, "AtiL2-MIB", "atiL2EthPortErrPortId"))
if mibBuilder.loadTexts: atiL2EthPortErrorStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrorStatsEntry.setDescription('A collection of statistics kept for a particular port.')
atiL2EthPortErrModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortErrModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrModuleId.setDescription('This Object Identifies the Module Id for which the Statistics is collected.')
atiL2EthPortErrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortErrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrPortId.setDescription('This Object Identifies the Port on the Module recognised by the above Object for which the Statistics is collected.')
atiL2EthPortErrorCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortErrorCRC.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrorCRC.setDescription('The total number of CRC errors on received packets.')
atiL2EthPortErrorAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortErrorAlignment.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrorAlignment.setDescription('The total number of packets received that has alignment errors.')
atiL2EthPortErrorRxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortErrorRxBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrorRxBadFrames.setDescription('The counter is incremented when a bad frame was received.')
atiL2EthPortErrorLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortErrorLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrorLateCollisions.setDescription('This object counts the number of times the collison was detected in the port.')
atiL2EthPortErrorTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 6, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2EthPortErrorTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2EthPortErrorTxTotal.setDescription('Total number of error resulted from transfer operations.')
atiL2DevicePortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1), )
if mibBuilder.loadTexts: atiL2DevicePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortTable.setDescription('Table of basic port configuration information.')
atiL2DevicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2DeviceId"), (0, "AtiL2-MIB", "atiL2DevicePortNumber"))
if mibBuilder.loadTexts: atiL2DevicePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortEntry.setDescription('An entry in the port config table.')
atiL2DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DeviceId.setDescription('This object identifies the Module Id of the switch Stack.')
atiL2DevicePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DevicePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortNumber.setDescription('This object identifies the Port on atiL2ModuleId of the switch Stack.')
atiL2DevicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortName.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortName.setDescription('This attribute associates a user defined string name with the port.')
atiL2DevicePortAutosenseOrHalfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portAutoSense", 1), ("forceHalfDuplex-10M", 2), ("forceHalfDuplex-100M", 3), ("forceFullDuplex-10M", 4), ("forceFullDuplex-100M", 5), ("forceHalfDuplex-1G", 6), ("forceFullDuplex-1G", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortAutosenseOrHalfDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortAutosenseOrHalfDuplex.setDescription('This attribute allows an administrative request to configure whether this port can Autosense or Force the Half Duplex or Full Duplex on different Port Speeds.')
atiL2DevicePortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DevicePortLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortLinkState.setDescription('This attribute allows an administrative request to read the status of link state on this port.')
atiL2DevicePortDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autosense", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DevicePortDuplexStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortDuplexStatus.setDescription('This attribute allows an administrative request to read the status of Duplex on this port.')
atiL2DevicePortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenMBits", 1), ("hundredMBits", 2), ("gigaBits", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2DevicePortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortSpeed.setDescription("This attribute allows an administrative request to read or write the speed of this port. This Object is valid only for 10/100Mbits and gigaBits ports. The only gigabit port that can be set is that of AT-A14 and it's values can be either 2 or 3.")
atiL2DevicePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("blocking", 3), ("listening", 4), ("learning", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortState.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortState.setDescription('This attribute allows an administrative request to disable or enable communications on this port.It also responds with the status of the port .Except enabled(1) and disabled(2), all values are read-only status.')
atiL2DevicePortTransmitPacingConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortTransmitPacingConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortTransmitPacingConfig.setDescription('This Object is supported on at36XX product line Only. This attribute allows the transmit Pacing to be enabled or disabled.')
atiL2DevicePortSTPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortSTPConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortSTPConfig.setDescription('This attribute allows a bridging Mode to be configured with either Spanning Tree enabled or disabled. When Spanning tree is enabled, make sure that this port is belonging to a valid Bridge_id. Spanning Tree is enabled only when a valid Bridge_id is set.')
atiL2DevicePortBridgeid = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortBridgeid.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortBridgeid.setDescription(' The Bridge to which this port belongs to.')
atiL2DevicePortSTPCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortSTPCost.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortSTPCost.setDescription('The Cost of the Spanning Tree Protocol.This object is valid only when STP is enabled.')
atiL2DevicePortSTPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortSTPPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2DevicePortSTPPriority.setDescription(' The Priority of the spanning Tree Protocol. This object is valid when STP is enabled.')
atiL2DevicePortFlowControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortFlowControlEnable.setStatus('deprecated')
if mibBuilder.loadTexts: atiL2DevicePortFlowControlEnable.setDescription('This per-port attribute describes whether the port identified has flow Control Enabled or not. Flow Control on Full Duplex and Half Duplex is detected and automatically, flow control accordingly is taken care of. By Default, Flow Control is Disabled.')
atiL2DevicePortBackPressureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortBackPressureEnable.setStatus('deprecated')
if mibBuilder.loadTexts: atiL2DevicePortBackPressureEnable.setDescription('This per-port attribute describes whether the port identified has Back Pressure Enabled or not. By Default, Back Pressure is Disabled.')
atiL2DevicePortVlanTagPriorityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use-vlan-priority", 1), ("override-vlan-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortVlanTagPriorityConfig.setStatus('deprecated')
if mibBuilder.loadTexts: atiL2DevicePortVlanTagPriorityConfig.setDescription('This per-port attribute allows the configuration of the Tag Priority to be Override or Use the Tag Priority. By Default, all ports use Vlan Tag priority.')
atiL2DevicePortQOSPriorityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high-priority", 1), ("normal-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2DevicePortQOSPriorityConfig.setStatus('deprecated')
if mibBuilder.loadTexts: atiL2DevicePortQOSPriorityConfig.setDescription('This per-port attribute is applicable only to at-8324, at-8124XL-V2 and at-8316 and it allows for the configuration of the Priority of the port to be high or Low. In a switch environment, Ports with high Priority and traffic from and to the ports get more priority when compared with those with normal priority. By Default, all ports have Normal Priority.')
atiL2BasicVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1), )
if mibBuilder.loadTexts: atiL2BasicVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BasicVlanTable.setDescription('Table of Virtual LAN configured.')
atiL2BasicVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2BeVlanIndex"))
if mibBuilder.loadTexts: atiL2BasicVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BasicVlanEntry.setDescription('An entry in the table, containing VLAN information.')
atiL2BeVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BeVlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanIndex.setDescription('This object identifies the VLAN.')
atiL2BeVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanName.setDescription("This attribute associates a user defined string with the Virtual LAN. To configure a new VLAN, do 'set' operation on this object with the VLAN name. To delete a VLAN, do 'set' operation with string '*<module_num>', where <module_num> is the module number (1..8) from which the delete request is being sent. If a vlan is being created or modified, before configuring any of the objects in this row, set atiL2VlanStatus to 'under-construction' and once configured with all the information, set the same object to operational. This step is not required when deleting a vlan.")
atiL2BeVlanTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanTagId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanTagId.setDescription("This object configures the VId in the Tag Information header in accordance with 802.1q spec. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule1UntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule1UntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule1UntaggedPorts.setDescription("This Object builds the Output Ports on the Module that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12..15,18-22,26'. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule1TaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule1TaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule1TaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule2UntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule2UntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule2UntaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule2TaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule2TaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule2TaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule3UntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule3UntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule3UntaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule3TaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule3TaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule3TaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule4UntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule4UntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule4UntaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule4TaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule4TaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule4TaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule5UntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule5UntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule5UntaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule5TaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule5TaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule5TaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule6UntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule6UntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule6UntaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule6TaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule6TaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule6TaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule7UntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule7UntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule7UntaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule7TaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule7TaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule7TaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule8UntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule8UntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule8UntaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanModule8TaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanModule8TaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanModule8TaggedPorts.setDescription("This Object builds the Output Ports on the Module atiL2BeVlanModuleId that participate in the Vlan with the atiL2BeVlanName. The Format of the input string would be like '1,2,5,7,12'. Please select the Module by setting the atiL2BeVlanModuleId with the Module Id and then set the port mask. If this is not set, by default this will be set to 1. Before configuring any of the objects in this row , set the atiL2VlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational.")
atiL2BeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("operational", 2), ("under-construction", 3), ("not-operational", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BeVlanRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BeVlanRowStatus.setDescription('This object is used to create or modify a vlan. The user should first set this object to under-construction. After the vlan name, the tag Id and the ports belonging to the vlan are configured/modified, this object should be set to operational. If it is not set to operational, the whole row will be lost and the vlan will not be configured in the switch.')
atiL2Port2VlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 2), )
if mibBuilder.loadTexts: atiL2Port2VlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2Port2VlanTable.setDescription('Table of per port Virtual LAN configuration.')
atiL2Port2VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 2, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2PvModuleId"), (0, "AtiL2-MIB", "atiL2PvPortNumber"))
if mibBuilder.loadTexts: atiL2Port2VlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2Port2VlanEntry.setDescription('An entry in the table, containing per port VLAN information.')
atiL2PvModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2PvModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2PvModuleId.setDescription('This object identifies the Module Id on the switching Stack.')
atiL2PvPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2PvPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2PvPortNumber.setDescription('This object identifies the port on the Module atiL2PvModuleId .')
atiL2PvVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 8, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2PvVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2PvVlanName.setDescription('This attribute associates a user defined string with the Virtual LAN. This Object is the same as atiL2BeVlanName. Please make sure to give the same string as atiL2BeVlanName.')
atiL2IfExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 33, 9, 1))
atiIfExtnTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 9, 1, 1), )
if mibBuilder.loadTexts: atiIfExtnTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiIfExtnTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
atiIfExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 9, 1, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiIfExtnIndex"))
if mibBuilder.loadTexts: atiIfExtnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiIfExtnEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
atiIfExtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiIfExtnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atiIfExtnIndex.setDescription('A unique value for each interface corresponding to the ifIndex value for the same interface.')
atiIfExtnModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiIfExtnModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: atiIfExtnModuleId.setDescription('The unit number associated with this particular interface.')
atiIfExtnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiIfExtnPort.setStatus('mandatory')
if mibBuilder.loadTexts: atiIfExtnPort.setDescription('The port number within a unit or slot.')
atiL2BrBaseTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 1), )
if mibBuilder.loadTexts: atiL2BrBaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBaseTable.setDescription('Table of basic bridge information.')
atiL2BrBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2BrBaseLanId"))
if mibBuilder.loadTexts: atiL2BrBaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBaseEntry.setDescription('An entry in the atiL2BrBaseTable.')
atiL2BrBaseLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBaseLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBaseLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atiL2BrBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBaseBridgeAddress.setReference('IEEE 802.1D-1990: Sections 6.4.1.1.3 and 3.12.5')
if mibBuilder.loadTexts: atiL2BrBaseBridgeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBaseBridgeAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge. However it is only required to be unique. When concatenated with atiL2BrStpPriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol.')
atiL2BrBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBaseNumPorts.setReference('IEEE 802.1D-1990: Section 6.4.1.1.3')
if mibBuilder.loadTexts: atiL2BrBaseNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBaseNumPorts.setDescription('The number of ports controlled by this bridging entity.')
atiL2BrBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBaseType.setDescription('Indicates what type of bridging this bridge can perform. If a bridge is actually performing a certain type of bridging this will be indicated by entries in the port table for the given type.')
atiL2BrBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 4), )
if mibBuilder.loadTexts: atiL2BrBasePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBasePortTable.setDescription('A table that contains generic information about every port that is associated with this bridge. Transparent, source-route, and srt ports are included.')
atiL2BrBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 4, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2BrBasePortLanId"), (0, "AtiL2-MIB", "atiL2BrBasePort"))
if mibBuilder.loadTexts: atiL2BrBasePortEntry.setReference('IEEE 802.1D-1990: Section 6.4.2, 6.6.1')
if mibBuilder.loadTexts: atiL2BrBasePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBasePortEntry.setDescription('A list of information for each port of the bridge.')
atiL2BrBasePortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBasePortLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBasePortLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atiL2BrBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBasePort.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBasePort.setDescription('The port number of the port for which this entry contains bridge management information.')
atiL2BrBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBasePortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBasePortIfIndex.setDescription('The value of the instance of the ifIndex object, defined in MIB-II, for the interface corresponding to this port.')
atiL2BrBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBasePortCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBasePortCircuit.setDescription('For a port which (potentially) has the same value of atiL2BrBasePortIfIndex as another port on the same bridge, this object contains the name of an object instance unique to this port. For example, in the case where multiple ports correspond one- to-one with multiple X.25 virtual circuits, this value might identify an (e.g., the first) object instance associated with the X.25 virtual circuit corresponding to this port. For a port which has a unique value of atiL2BrBasePortIfIndex, this object can have the value { 0 0 }.')
atiL2BrBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBasePortDelayExceededDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atiL2BrBasePortDelayExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBasePortDelayExceededDiscards.setDescription('The number of frames discarded by this port due to excessive transit delay through the bridge. It is incremented by both transparent and source route bridges.')
atiL2BrBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrBasePortMtuExceededDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atiL2BrBasePortMtuExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrBasePortMtuExceededDiscards.setDescription('The number of frames discarded by this port due to an excessive size. It is incremented by both transparent and source route bridges.')
atiL2BrStpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1), )
if mibBuilder.loadTexts: atiL2BrStpTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpTable.setDescription('Table of bridge spanning tree information.')
atiL2BrStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2BrStpLanId"))
if mibBuilder.loadTexts: atiL2BrStpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpEntry.setDescription('An entry in the atiL2BrStpTable.')
atiL2BrStpLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atiL2BrStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpProtocolSpecification.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpProtocolSpecification.setDescription("An indication of what version of the Spanning Tree Protocol is being run. The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol. IEEE 802.1d implementations will return 'ieee8021d(3)'. If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version a new value will be defined.")
atiL2BrStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BrStpPriority.setReference('IEEE 802.1D-1990: Section 4.5.3.7')
if mibBuilder.loadTexts: atiL2BrStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are given by the value of atiL2BrBaseBridgeAddress.')
atiL2BrStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpTimeSinceTopologyChange.setReference('IEEE 802.1D-1990: Section 6.8.1.1.3')
if mibBuilder.loadTexts: atiL2BrStpTimeSinceTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
atiL2BrStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpTopChanges.setReference('IEEE 802.1D-1990: Section 6.8.1.1.3')
if mibBuilder.loadTexts: atiL2BrStpTopChanges.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
atiL2BrStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpDesignatedRoot.setReference('IEEE 802.1D-1990: Section 4.5.3.1')
if mibBuilder.loadTexts: atiL2BrStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
atiL2BrStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpRootCost.setReference('IEEE 802.1D-1990: Section 4.5.3.2')
if mibBuilder.loadTexts: atiL2BrStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
atiL2BrStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpRootPort.setReference('IEEE 802.1D-1990: Section 4.5.3.3')
if mibBuilder.loadTexts: atiL2BrStpRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpRootPort.setDescription('The port number of the port which offers the lowest cost path from this bridge to the root bridge.')
atiL2BrStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.4')
if mibBuilder.loadTexts: atiL2BrStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
atiL2BrStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.5')
if mibBuilder.loadTexts: atiL2BrStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
atiL2BrStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpHoldTime.setReference('IEEE 802.1D-1990: Section 4.5.3.14')
if mibBuilder.loadTexts: atiL2BrStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
atiL2BrStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.6')
if mibBuilder.loadTexts: atiL2BrStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. [Note that this value is the one that this bridge is currently using, in contrast to atiL2BrStpBridgeForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.]')
atiL2BrStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BrStpBridgeMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.8')
if mibBuilder.loadTexts: atiL2BrStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of atiL2BrStpBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
atiL2BrStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BrStpBridgeHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.9')
if mibBuilder.loadTexts: atiL2BrStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpBridgeHelloTime.setDescription('The value that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D- 1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
atiL2BrStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BrStpBridgeForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.10')
if mibBuilder.loadTexts: atiL2BrStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of atiL2BrStpBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
atiL2BrStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15), )
if mibBuilder.loadTexts: atiL2BrStpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortTable.setDescription('A table that contains port-specific information for the Spanning Tree Protocol.')
atiL2BrStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2BrStpPortLanId"), (0, "AtiL2-MIB", "atiL2BrStpPort"))
if mibBuilder.loadTexts: atiL2BrStpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
atiL2BrStpPortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpPortLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atiL2BrStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpPort.setReference('IEEE 802.1D-1990: Section 6.8.2.1.2')
if mibBuilder.loadTexts: atiL2BrStpPort.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPort.setDescription('The port number of the port for which this entry contains Spanning Tree Protocol management information.')
atiL2BrStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BrStpPortPriority.setReference('IEEE 802.1D-1990: Section 4.5.5.1')
if mibBuilder.loadTexts: atiL2BrStpPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of atiL2BrStpPort.')
atiL2BrStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpPortState.setReference('IEEE 802.1D-1990: Section 4.5.5.2')
if mibBuilder.loadTexts: atiL2BrStpPortState.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are disabled (see atiL2BrStpPortEnable), this object will have a value of disabled(1).")
atiL2BrStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BrStpPortEnable.setReference('IEEE 802.1D-1990: Section 4.5.5.2')
if mibBuilder.loadTexts: atiL2BrStpPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortEnable.setDescription('The enabled/disabled status of the port.')
atiL2BrStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BrStpPortPathCost.setReference('IEEE 802.1D-1990: Section 4.5.5.3')
if mibBuilder.loadTexts: atiL2BrStpPortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN.')
atiL2BrStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedRoot.setReference('IEEE 802.1D-1990: Section 4.5.5.4')
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
atiL2BrStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedCost.setReference('IEEE 802.1D-1990: Section 4.5.5.5')
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
atiL2BrStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedBridge.setReference('IEEE 802.1D-1990: Section 4.5.5.6')
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
atiL2BrStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedPort.setReference('IEEE 802.1D-1990: Section 4.5.5.7')
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
atiL2BrStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 2, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrStpPortForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrStpPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
atiL2BrTpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 1), )
if mibBuilder.loadTexts: atiL2BrTpTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpTable.setDescription('Table of transparent bridging information.')
atiL2BrTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 1, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2BrTpLanId"))
if mibBuilder.loadTexts: atiL2BrTpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpEntry.setDescription('An entry in the atiL2BrTpTable.')
atiL2BrTpLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atiL2BrTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpLearnedEntryDiscards.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: atiL2BrTpLearnedEntryDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpLearnedEntryDiscards.setDescription('The total number of Forwarding Database entries, which have been or would have been learnt, but have been discarded due to a lack of space to store them in the Forwarding Database. If this counter is increasing, it indicates that the Forwarding Database is regularly becoming full (a condition which has unpleasant performance effects on the subnetwork). If this counter has a significant value but is not presently increasing, it indicates that the problem has been occurring but is not persistent.')
atiL2BrTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2BrTpAgingTime.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: atiL2BrTpAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information. 802.1D-1990 recommends a default of 300 seconds.')
atiL2BrTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 3), )
if mibBuilder.loadTexts: atiL2BrTpFdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpFdbTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
atiL2BrTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 3, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2BrTpFdbLanId"), (0, "AtiL2-MIB", "atiL2BrTpFdbAddress"))
if mibBuilder.loadTexts: atiL2BrTpFdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information.')
atiL2BrTpFdbLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpFdbLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpFdbLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atiL2BrTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpFdbAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2')
if mibBuilder.loadTexts: atiL2BrTpFdbAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpFdbAddress.setDescription('A unicast MAC address for which the bridge has forwarding and/or filtering information.')
atiL2BrTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpFdbPort.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpFdbPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of atiL2BrTpFdbAddress has been seen. A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address . Implementors are encouraged to assign the port value to this object whenever it is learned even for addresses for which the corresponding value of atiL2BrTpFdbStatus is not learned(3).")
atiL2BrTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpFdbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpFdbStatus.setDescription('The status of this entry. The meanings of the values are: inactive(1) : this entry is not longer valid (e.g., it was learned but has since aged-out), but has not yet been flushed from the table. active(2) : the value of the corresponding instance of atiL2BrTpFdbPort was active, and is being used. other(3) : none of the following. This would include the case where some other MIB object (not the corresponding instance of atiL2BrTpFdbPort ) is being used to determine if and how frames addressed to the value of the corresponding instance of atiL2BrTpFdbAddress are being forwarded.')
atiL2BrTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 4), )
if mibBuilder.loadTexts: atiL2BrTpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpPortTable.setDescription('A table that contains information about every port that is associated with this transparent bridge.')
atiL2BrTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 4, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2BrTpPortLanId"), (0, "AtiL2-MIB", "atiL2BrTpPort"))
if mibBuilder.loadTexts: atiL2BrTpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpPortEntry.setDescription('A list of information for each port of a transparent bridge.')
atiL2BrTpPortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpPortLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpPortLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atiL2BrTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpPort.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpPort.setDescription('The port number of the port for which this entry contains Transparent bridging management information.')
atiL2BrTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpPortMaxInfo.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpPortMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
atiL2BrTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpPortInFrames.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atiL2BrTpPortInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpPortInFrames.setDescription('The number of frames that have been received by this port from its segment. Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
atiL2BrTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpPortOutFrames.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atiL2BrTpPortOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpPortOutFrames.setDescription('The number of frames that have been transmitted by this port to its segment. Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
atiL2BrTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 10, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2BrTpPortInDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atiL2BrTpPortInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2BrTpPortInDiscards.setDescription('Count of valid frames received which were discarded (i.e., filtered) by the Forwarding Process.')
atiL2TrapAttrModuleId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: atiL2TrapAttrModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2TrapAttrModuleId.setDescription('This attribute is the Module Numver used when Traps pertinent to Module is sent.')
atiL2TrapAttrPortId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: atiL2TrapAttrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2TrapAttrPortId.setDescription('This attribute is the Port Number used when Traps pertinent to Ports are sent.')
newRoot = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,101))
if mibBuilder.loadTexts: newRoot.setDescription('The newRoot trap indicates that the sending agent has become the new root of the Spanning Tree; the trap is sent by a bridge soon after its election as the new root, e.g., upon expiration of the Topology Change Timer immediately subsequent to its election. Implementation of this trap is optional.')
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,102))
if mibBuilder.loadTexts: topologyChange.setDescription('A topologyChange trap is sent by a bridge when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. The trap is not sent if a newRoot trap is sent for the same transition. Implementation of this trap is optional.')
atiL2FanStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,103)).setObjects(("AtiL2-MIB", "atiL2TrapAttrModuleId"))
if mibBuilder.loadTexts: atiL2FanStopTrap.setDescription(' A Trap sent from the Module defined by the varable above when a fan from that Module stops.')
atiL2TemperatureAbnormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,104)).setObjects(("AtiL2-MIB", "atiL2TrapAttrModuleId"))
if mibBuilder.loadTexts: atiL2TemperatureAbnormalTrap.setDescription(' A Trap sent from the Module defined by the varable above when temperature of the Module is abnormal.')
atiL2PowerSupplyOutage = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,105)).setObjects(("AtiL2-MIB", "atiL2TrapAttrModuleId"))
if mibBuilder.loadTexts: atiL2PowerSupplyOutage.setDescription(' A Trap sent from the Module defined by the varable above when one of the power supply goes down.')
atiL2IntruderAlert = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,106)).setObjects(("AtiL2-MIB", "atiL2TrapAttrModuleId"), ("AtiL2-MIB", "atiL2TrapAttrPortId"))
if mibBuilder.loadTexts: atiL2IntruderAlert.setDescription(' A Trap sent from the specified module and specified port when an intruder has been detected.')
atiL2QOSStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 33, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2QOSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2QOSStatus.setDescription('If the QOS status is enabled, then QOS packets will be assigned to high or low priority queue. If it is disabled, packets works normally.(Applicable only to at-8326GB, at-9410GB and at-8350GB)')
atiL2TrafficMappingTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 33, 12, 2), )
if mibBuilder.loadTexts: atiL2TrafficMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2TrafficMappingTable.setDescription('It contains the mapping of all traffic classes and their priority assignments.(Applicable only to at-8326GB, at-9410GB and at-8350GB)')
atiL2TrafficMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 33, 12, 2, 1), ).setIndexNames((0, "AtiL2-MIB", "atiL2TrafficClassIndex"))
if mibBuilder.loadTexts: atiL2TrafficMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2TrafficMappingEntry.setDescription("Each entry maps a traffic class to the priority queue to be used for it's packets. (Applicable only to at-8326GB, at-9410GB and at-8350GB)")
atiL2TrafficClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiL2TrafficClassIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2TrafficClassIndex.setDescription('The Index of the traffic class. It is obtained from the packet format.(Applicable only to at-8326GB, at-9410GB and at-8350GB)')
atiL2PriorityQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 33, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("highest", 0), ("lowest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiL2PriorityQueue.setStatus('mandatory')
if mibBuilder.loadTexts: atiL2PriorityQueue.setDescription('The priority queue to be used to forward packets. (Applicable only to at-8326GB, at-9410GB and at-8350GB)')
mibBuilder.exportSymbols("AtiL2-MIB", atiL2DHCPGroup=atiL2DHCPGroup, atiL2BrStp=atiL2BrStp, atiL2BeVlanModule6UntaggedPorts=atiL2BeVlanModule6UntaggedPorts, atiL2BrTpPortLanId=atiL2BrTpPortLanId, atiL2PriorityQueue=atiL2PriorityQueue, atiL2EthErrorStatsEntry=atiL2EthErrorStatsEntry, atiL2EthMonTxBroadcastFrames=atiL2EthMonTxBroadcastFrames, atiL2FanStopTrap=atiL2FanStopTrap, atiL2BrStpPortTable=atiL2BrStpPortTable, atiL2EthPortMonModuleId=atiL2EthPortMonModuleId, atiL2deviceIndex=atiL2deviceIndex, atiL2EthPortMonTxMulticastFrames=atiL2EthPortMonTxMulticastFrames, atiL2EthPortErrorCRC=atiL2EthPortErrorCRC, atiL2BrStpTopChanges=atiL2BrStpTopChanges, atiL2BrTpPortEntry=atiL2BrTpPortEntry, atiL2BrStpBridgeHelloTime=atiL2BrStpBridgeHelloTime, atiL2BrTpPortInDiscards=atiL2BrTpPortInDiscards, atiL2DevicePortAutosenseOrHalfDuplex=atiL2DevicePortAutosenseOrHalfDuplex, atiL2TrafficMappingEntry=atiL2TrafficMappingEntry, atiIfExtnModuleId=atiIfExtnModuleId, atiL2DHCPLeaseTimer=atiL2DHCPLeaseTimer, atiL2BrTpLearnedEntryDiscards=atiL2BrTpLearnedEntryDiscards, atiL2DevicePortEntry=atiL2DevicePortEntry, atiL2DevicePortState=atiL2DevicePortState, atiL2EthPortErrorStatsEntry=atiL2EthPortErrorStatsEntry, atiL2DevicePortVlanTagPriorityConfig=atiL2DevicePortVlanTagPriorityConfig, atiL2BrStpDesignatedRoot=atiL2BrStpDesignatedRoot, atiL2EthPortMonRxGoodFrames=atiL2EthPortMonRxGoodFrames, at_8316F=at_8316F, atiL2SwVersion=atiL2SwVersion, atiL2DHCPSysGroup=atiL2DHCPSysGroup, atiL2DeviceId=atiL2DeviceId, atiL2BrStpRootPort=atiL2BrStpRootPort, mibObject=mibObject, atiL2EthPortMonTxGoodFrames=atiL2EthPortMonTxGoodFrames, atiL2EthPortErrorLateCollisions=atiL2EthPortErrorLateCollisions, topologyChange=topologyChange, at_9410GB=at_9410GB, atiL2BrStpPortState=atiL2BrStpPortState, atiL2DevicePortName=atiL2DevicePortName, atiL2BrStpLanId=atiL2BrStpLanId, atiL2BrBaseLanId=atiL2BrBaseLanId, atiL2BeVlanModule8TaggedPorts=atiL2BeVlanModule8TaggedPorts, atiL2NwMgrIpAddr=atiL2NwMgrIpAddr, newRoot=newRoot, atiL2TemperatureAbnormalTrap=atiL2TemperatureAbnormalTrap, atiL2EthMonTxTotalBytes=atiL2EthMonTxTotalBytes, atiL2BrStpPortForwardTransitions=atiL2BrStpPortForwardTransitions, atiL2DevicePortSTPCost=atiL2DevicePortSTPCost, atiL2BrStpTimeSinceTopologyChange=atiL2BrStpTimeSinceTopologyChange, atiL2deviceDescr=atiL2deviceDescr, atiL2BeVlanModule5TaggedPorts=atiL2BeVlanModule5TaggedPorts, atiL2NwMgrEntry=atiL2NwMgrEntry, atiL2TrapAttrPortId=atiL2TrapAttrPortId, atiL2GlobalGroup=atiL2GlobalGroup, atiL2BeVlanModule5UntaggedPorts=atiL2BeVlanModule5UntaggedPorts, atiL2PvPortNumber=atiL2PvPortNumber, atiL2BrTpPortInFrames=atiL2BrTpPortInFrames, atiL2deviceSecurityAction=atiL2deviceSecurityAction, alliedTelesyn=alliedTelesyn, atiL2EthPortMonRxOverruns=atiL2EthPortMonRxOverruns, atiL2BeVlanModule2UntaggedPorts=atiL2BeVlanModule2UntaggedPorts, atiL2BrStpMaxAge=atiL2BrStpMaxAge, atiL2DHCPTimerGroup=atiL2DHCPTimerGroup, atiL2QOSStatus=atiL2QOSStatus, atiL2TrafficMappingTable=atiL2TrafficMappingTable, atiL2BrBasePortCircuit=atiL2BrBasePortCircuit, atiL2DNServer=atiL2DNServer, atiL2DevicePortQOSPriorityConfig=atiL2DevicePortQOSPriorityConfig, atiL2ConfiguredRouter=atiL2ConfiguredRouter, atiL2ConfiguredSubnetMask=atiL2ConfiguredSubnetMask, atiL2EthPortErrPortId=atiL2EthPortErrPortId, atiL2DevicePortTable=atiL2DevicePortTable, atiL2IfExt=atiL2IfExt, atiL2DevicePortSTPPriority=atiL2DevicePortSTPPriority, atiL2IntruderAlert=atiL2IntruderAlert, atiL2VlanConfigGroup=atiL2VlanConfigGroup, atiL2EthErrorAlignment=atiL2EthErrorAlignment, atiL2BrStpPortDesignatedCost=atiL2BrStpPortDesignatedCost, atiL2BeVlanModule2TaggedPorts=atiL2BeVlanModule2TaggedPorts, atiIfExtnEntry=atiIfExtnEntry, atiL2BrBasePortTable=atiL2BrBasePortTable, atiL2SwProduct=atiL2SwProduct, atiL2BrStpBridgeForwardDelay=atiL2BrStpBridgeForwardDelay, atiL2Reset=atiL2Reset, atiL2PvModuleId=atiL2PvModuleId, atiL2BridgeMib=atiL2BridgeMib, atiL2BeVlanModule1TaggedPorts=atiL2BeVlanModule1TaggedPorts, atiL2deviceDebugAvailableBytes=atiL2deviceDebugAvailableBytes, atiL2BrTpAgingTime=atiL2BrTpAgingTime, atiL2IPAddressStatus=atiL2IPAddressStatus, atiL2DeviceGroup=atiL2DeviceGroup, at_8350GB=at_8350GB, atiL2CurrentIpAddress=atiL2CurrentIpAddress, atiL2BrTpFdbAddress=atiL2BrTpFdbAddress, atiL2BeVlanModule4UntaggedPorts=atiL2BeVlanModule4UntaggedPorts, atiL2DevicePortSTPConfig=atiL2DevicePortSTPConfig, atiL2BeVlanTagId=atiL2BeVlanTagId, atiL2BrBaseNumPorts=atiL2BrBaseNumPorts, atiL2BrTpFdbEntry=atiL2BrTpFdbEntry, atiL2BrStpTable=atiL2BrStpTable, atiL2BrTpPortTable=atiL2BrTpPortTable, atiL2BrStpHelloTime=atiL2BrStpHelloTime, atiL2BrBasePortMtuExceededDiscards=atiL2BrBasePortMtuExceededDiscards, atiL2EthPortMonStatsTable=atiL2EthPortMonStatsTable, atiL2DHCPSubnetMask=atiL2DHCPSubnetMask, atiL2BeVlanModule8UntaggedPorts=atiL2BeVlanModule8UntaggedPorts, atiL2PowerSupplyOutage=atiL2PowerSupplyOutage, atiL2BrTpPortMaxInfo=atiL2BrTpPortMaxInfo, atiL2deviceSecurityConfig=atiL2deviceSecurityConfig, atiL2DevicePortNumber=atiL2DevicePortNumber, atiL2BrBasePortLanId=atiL2BrBasePortLanId, atiL2BasicVlanEntry=atiL2BasicVlanEntry, atiL2BrStpEntry=atiL2BrStpEntry, atiL2deviceTable=atiL2deviceTable, atiL2DevicePortConfigGroup=atiL2DevicePortConfigGroup, atiL2BrStpPortDesignatedBridge=atiL2BrStpPortDesignatedBridge, atiL2BeVlanModule7UntaggedPorts=atiL2BeVlanModule7UntaggedPorts, atiL2IpGroup=atiL2IpGroup, atiL2QOSConfigGroup=atiL2QOSConfigGroup, atiL2DHCPCurrentRelayAgentAddress=atiL2DHCPCurrentRelayAgentAddress, atiL2EthErrStatsTable=atiL2EthErrStatsTable, atiL2EthErrorLateCollisions=atiL2EthErrorLateCollisions, atiProduct=atiProduct, atiL2EthPortErrModuleId=atiL2EthPortErrModuleId, atiL2BrTp=atiL2BrTp, atiL2BeVlanIndex=atiL2BeVlanIndex, atiL2BrStpPort=atiL2BrStpPort, atiL2BrBaseTable=atiL2BrBaseTable, atiL2BrBasePortIfIndex=atiL2BrBasePortIfIndex, at_8124XL_V2=at_8124XL_V2, atiL2DeviceNumber=atiL2DeviceNumber, atiL2DevicePortSpeed=atiL2DevicePortSpeed, atiL2BeVlanModule6TaggedPorts=atiL2BeVlanModule6TaggedPorts, atiL2TrapAttrGroup=atiL2TrapAttrGroup, atiL2NMGroup=atiL2NMGroup, atiL2EthErrStatsGroup=atiL2EthErrStatsGroup, atiL2EthErrorTxTotal=atiL2EthErrorTxTotal, atiL2BrBase=atiL2BrBase, atiL2BrTpTable=atiL2BrTpTable, atiL2deviceMDA2Type=atiL2deviceMDA2Type, atiL2ConfiguredIpAddress=atiL2ConfiguredIpAddress, atiL2BeVlanModule3UntaggedPorts=atiL2BeVlanModule3UntaggedPorts, at_8326GB=at_8326GB, atiL2BeVlanName=atiL2BeVlanName, atiL2MirroringDestinationPort=atiL2MirroringDestinationPort, at_8324=at_8324, atiL2MirrorState=atiL2MirrorState, atiL2EthPortMonPortId=atiL2EthPortMonPortId, atiL2PvVlanName=atiL2PvVlanName, atiIfExtnPort=atiIfExtnPort, atiL2BrBasePortEntry=atiL2BrBasePortEntry, atiL2TrapAttrModuleId=atiL2TrapAttrModuleId, atiL2BrStpPortDesignatedPort=atiL2BrStpPortDesignatedPort, atiL2BrStpPortPathCost=atiL2BrStpPortPathCost, atiL2BrTpFdbStatus=atiL2BrTpFdbStatus, atiL2DevicePortBackPressureEnable=atiL2DevicePortBackPressureEnable, atiL2EthMonStatsGroup=atiL2EthMonStatsGroup, atiIfExtnIndex=atiIfExtnIndex, atiL2EthMonModuleId=atiL2EthMonModuleId, MacAddress=MacAddress, atiL2BrBaseBridgeAddress=atiL2BrBaseBridgeAddress, atiL2BrTpPort=atiL2BrTpPort, atiL2deviceMDA1Type=atiL2deviceMDA1Type, atiL2BrTpLanId=atiL2BrTpLanId, atiL2EthMonTxCollisions=atiL2EthMonTxCollisions, atiL2deviceProductType=atiL2deviceProductType, atiL2MirroringSourceModule=atiL2MirroringSourceModule, atiL2DevicePortTransmitPacingConfig=atiL2DevicePortTransmitPacingConfig, atiL2IfExtensions=atiL2IfExtensions, atiL2DHCPExpirationTimer=atiL2DHCPExpirationTimer, atiL2EthMonTxGoodFrames=atiL2EthMonTxGoodFrames, atiL2EthPortMonTxTotalBytes=atiL2EthPortMonTxTotalBytes, atiL2BrBaseEntry=atiL2BrBaseEntry, Timeout=Timeout, atiL2deviceEntry=atiL2deviceEntry, atiL2EthPortErrorTxTotal=atiL2EthPortErrorTxTotal, atiL2EthMonTxDeferred=atiL2EthMonTxDeferred, atiL2DevicePortFlowControlEnable=atiL2DevicePortFlowControlEnable, atiL2BrStpRootCost=atiL2BrStpRootCost, atiL2BeVlanModule7TaggedPorts=atiL2BeVlanModule7TaggedPorts, atiL2IGMPState=atiL2IGMPState, atiL2BeVlanModule1UntaggedPorts=atiL2BeVlanModule1UntaggedPorts, atiL2BeVlanModule3TaggedPorts=atiL2BeVlanModule3TaggedPorts, atiL2DHCPReacquisitionTimer=atiL2DHCPReacquisitionTimer, atiL2BrTpPortOutFrames=atiL2BrTpPortOutFrames, atiL2EthPortMonTxCollisions=atiL2EthPortMonTxCollisions, atiL2BrStpPortEntry=atiL2BrStpPortEntry, atiL2BrStpPortDesignatedRoot=atiL2BrStpPortDesignatedRoot, atiL2DHCPCurrentDHCPClientAddress=atiL2DHCPCurrentDHCPClientAddress, atiL2MirroringSourcePort=atiL2MirroringSourcePort, atiL2EthMonRxOverruns=atiL2EthMonRxOverruns, atiL2BrBasePortDelayExceededDiscards=atiL2BrBasePortDelayExceededDiscards, atiL2BrStpHoldTime=atiL2BrStpHoldTime, atiL2NwMgrTable=atiL2NwMgrTable, atiL2BrStpPortEnable=atiL2BrStpPortEnable, atiL2BeVlanRowStatus=atiL2BeVlanRowStatus, atiL2EthPortMonStatsEntry=atiL2EthPortMonStatsEntry, atiL2EthPortErrorRxBadFrames=atiL2EthPortErrorRxBadFrames, atiIfExtnTable=atiIfExtnTable, atiL2BrStpPortLanId=atiL2BrStpPortLanId, atiL2BrStpProtocolSpecification=atiL2BrStpProtocolSpecification, atiL2BrTpFdbLanId=atiL2BrTpFdbLanId, atiL2BeVlanModule4TaggedPorts=atiL2BeVlanModule4TaggedPorts, atiL2NwMgrIndex=atiL2NwMgrIndex, atiL2Port2VlanTable=atiL2Port2VlanTable, atiL2EthPortMonTxDeferred=atiL2EthPortMonTxDeferred, atiL2EthErrorCRC=atiL2EthErrorCRC, atiL2BrStpBridgeMaxAge=atiL2BrStpBridgeMaxAge, atiL2BrStpPortPriority=atiL2BrStpPortPriority, atiL2EthPortMonTxBroadcastFrames=atiL2EthPortMonTxBroadcastFrames, atiL2EthErrorRxBadFrames=atiL2EthErrorRxBadFrames, atiL2DefaultDomainName=atiL2DefaultDomainName, BridgeId=BridgeId, atiL2EthPortErrorAlignment=atiL2EthPortErrorAlignment, atiL2BrBaseType=atiL2BrBaseType, atiL2BrBasePort=atiL2BrBasePort, atiL2EthPortErrStatsTable=atiL2EthPortErrStatsTable, atiL2BrTpFdbTable=atiL2BrTpFdbTable, atiL2BrTpEntry=atiL2BrTpEntry, atiL2BrStpForwardDelay=atiL2BrStpForwardDelay, atiL2devicePortCount=atiL2devicePortCount, atiL2BrStpPriority=atiL2BrStpPriority, swhub=swhub, atiL2DHCPNextDHCPServerAddress=atiL2DHCPNextDHCPServerAddress, atiL2EthernetStatsGroup=atiL2EthernetStatsGroup, atiL2EthMonStatsEntry=atiL2EthMonStatsEntry, atiL2EthMonRxGoodFrames=atiL2EthMonRxGoodFrames, atiL2EthErrModuleId=atiL2EthErrModuleId, atiL2Port2VlanEntry=atiL2Port2VlanEntry, atiL2TrafficClassIndex=atiL2TrafficClassIndex, atiL2deviceReset=atiL2deviceReset, atiL2EthMonStatsTable=atiL2EthMonStatsTable, atiL2Mib=atiL2Mib, atiL2DevicePortDuplexStatus=atiL2DevicePortDuplexStatus, atiL2EthMonTxMulticastFrames=atiL2EthMonTxMulticastFrames, atiL2BasicVlanTable=atiL2BasicVlanTable, atiL2DevicePortLinkState=atiL2DevicePortLinkState, atiL2DevicePortBridgeid=atiL2DevicePortBridgeid, atiL2MirroringDestinationModule=atiL2MirroringDestinationModule, atiL2BrTpFdbPort=atiL2BrTpFdbPort)
