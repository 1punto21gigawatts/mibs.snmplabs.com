#
# PySNMP MIB module FORTINET-FORTIGATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-FORTIGATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
fortinet, FnIndex, FnBoolState, fnAdminEntry, fnSysSerial = mibBuilder.importSymbols("FORTINET-CORE-MIB", "fortinet", "FnIndex", "FnBoolState", "fnAdminEntry", "fnSysSerial")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, ifName, ifEntry = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName", "ifEntry")
InetPortNumber, InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, IpAddress, NotificationType, Gauge32, TimeTicks, iso, Bits, Counter64, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "IpAddress", "NotificationType", "Gauge32", "TimeTicks", "iso", "Bits", "Counter64", "MibIdentifier", "Unsigned32")
DisplayString, DateAndTime, PhysAddress, AutonomousType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "PhysAddress", "AutonomousType", "TextualConvention")
fnFortiGateMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12356, 101))
fnFortiGateMib.setRevisions(('2016-06-17 00:00', '2015-04-23 00:00', '2015-03-16 00:00', '2015-01-10 00:00', '2014-12-04 00:00', '2014-06-04 00:00', '2014-02-13 00:00', '2013-08-12 00:00', '2013-07-26 00:00', '2013-04-12 00:00', '2013-04-06 00:00', '2012-11-29 00:00', '2012-07-10 00:00', '2012-05-16 00:00', '2012-02-06 00:00', '2011-09-12 00:00', '2011-01-10 00:00', '2009-11-03 00:00', '2009-10-01 00:00', '2009-07-07 00:00', '2008-11-03 00:00', '2008-09-02 00:00', '2008-08-19 00:00', '2008-06-16 00:00', '2008-04-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fnFortiGateMib.setRevisionsDescriptions(('Added fgProcessorFnNP6 in fgProcessorTypes.', 'Added fgDevice OIDs', 'Added fgIntfVlanHbs OIDs for vlan interface heartbeat feature', 'Added fgLinkMonitor OIDs for link-monitor feature', 'Added fgUsbModemInfoObjects OIDs for LTE Modem', 'Added fgUsbports OIDs for external USB ports', 'Added fgIntfVrrps OIDs for VRRP', 'Added fgServerLoadBalance OIDs.', 'Added fgTrapIpsFailOpen OID in fgTraps', 'Added fgWc wireless controller OIDs', 'Added fgVpnTrapPhase1Name OID in VPN traps', 'Added OID for 64-bit sysUpTime', "Added OID for a virtual domain's HA cluster member state.", 'Added OIDs for advanced system info and NP4/NP2 processors.', 'Added OIDs for IPv6 statistics.', 'MIB module for Fortinet FortiGate devices.', 'Added OIDs for session setup rates and VPN tunnel stats', 'Added OIDs for Proxy information, CPU and low-memory usage', 'Added new FortiGate models.', 'Added fgTrapFazDisconnect.', 'Added fgVdTpTable. Re-ordered MIB tree to improve readability. Replaced indexes for tables that had a dependent relationship with another table.', 'Added OIDs for compatibility with FORTIOS-300-MIB.', 'Conformance statements.', 'Spelling corrections.', 'Initial version of FORTINET-FORTIGATE-MIB.',))
if mibBuilder.loadTexts: fnFortiGateMib.setLastUpdated('201606170000Z')
if mibBuilder.loadTexts: fnFortiGateMib.setOrganization('Fortinet Technologies, Inc.')
if mibBuilder.loadTexts: fnFortiGateMib.setContactInfo(' Technical Support email: support@fortinet.com http://www.fortinet.com')
if mibBuilder.loadTexts: fnFortiGateMib.setDescription('Various non-monotonically increase Counter32 values have been changed to Gauge32.')
class FgVdIndex(TextualConvention, Integer32):
    description = 'data type for virtual-domain indexes'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class FgOpMode(TextualConvention, Integer32):
    description = 'enumerated type for device operation modes'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nat", 1), ("transparent", 2))

class FgHaMode(TextualConvention, Integer32):
    description = 'enumerated type for HA cluster modes'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standalone", 1), ("activeActive", 2), ("activePassive", 3))

class FgHaState(TextualConvention, Integer32):
    description = 'enumerated type for HA cluster member state'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("master", 1), ("backup", 2), ("standalone", 3))

class FgHaLBSchedule(TextualConvention, Integer32):
    description = 'enumerated type for HA load-balancing schedules'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("hub", 2), ("leastConnections", 3), ("roundRobin", 4), ("weightedRoundRobin", 5), ("random", 6), ("ipBased", 7), ("ipPortBased", 8))

class FgAdminPermLevel(TextualConvention, Integer32):
    description = 'enumerated type for administrative permissions'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 15, 255))
    namedValues = NamedValues(("readAdmin", 0), ("writeAdmin", 1), ("domainAdmin", 15), ("superAdmin", 255))

class FgFwUserAuthType(TextualConvention, Integer32):
    description = 'enumerated type for user authentication types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("local", 1), ("radiusSingle", 2), ("radiusMultiple", 3), ("ldap", 4))

class FgSessProto(TextualConvention, Integer32):
    description = 'data type for session protocols'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 8, 12, 17, 22, 41, 46, 47, 50, 51, 89, 103, 108, 255))
    namedValues = NamedValues(("ip", 0), ("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("ipv6", 41), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("ospf", 89), ("pim", 103), ("comp", 108), ("raw", 255))

class FgP2PProto(TextualConvention, Integer32):
    description = 'data type for session protocols'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("bitTorrent", 0), ("eDonkey", 1), ("gnutella", 2), ("kaZaa", 3), ("skype", 4), ("winNY", 5))

class FgScanAvDisposition(TextualConvention, Integer32):
    description = 'Scan AV Disposition for detected anomalies'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("detected", 1), ("blocked", 2))

class FgWanOptProtocols(TextualConvention, Integer32):
    description = 'WAN optimization protocol types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("http", 1), ("mapi", 2), ("cifs", 3), ("ftp", 4), ("tcp", 5))

class FgWanOptHistPeriods(TextualConvention, Integer32):
    description = 'WAN optimization history statistics time period types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("last10Min", 1), ("lastHour", 2), ("lastDay", 3), ("lastMonth", 4))

class FgHaStatsSyncStatusType(TextualConvention, Integer32):
    description = 'Current HA Sync status types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("unsynchronized", 0), ("synchronized", 1))

class FgWcWlanSecurityType(TextualConvention, Integer32):
    description = 'enumerated type for WLAN security methods'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 0), ("open", 1), ("captivePortal", 2), ("wep64", 3), ("wep128", 4), ("wpaOnlyPersonal", 5), ("wpaOnlyEnterprise", 6), ("wpa2OnlyPersonal", 7), ("wpa2OnlyEnterprise", 8), ("wpaPersonal", 9), ("wpaEnterprise", 10), ("wpaOnlyPersonalCaptivePortal", 11), ("wpa2OnlyPersonalCaptivePortal", 12), ("wpaPersonalCaptivePortal", 13))

class FgWcWlanAuthenticationType(TextualConvention, Integer32):
    description = 'enumerated type for WLAN authentication methods'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("psk", 1), ("radiusServer", 2), ("userGroup", 3))

class FgWcWlanEncryptionType(TextualConvention, Integer32):
    description = 'enumerated type for WLAN encryption methods'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("other", 0), ("none", 1), ("tkip", 2), ("aes", 3), ("tkipAes", 4))

class FgWcWtpRadioId(TextualConvention, Unsigned32):
    description = 'unique identifier of a radio on a WTP'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 31)

class FgWcWtpRadioType(TextualConvention, Integer32):
    description = 'Enumerated types for WTP radio. The following enumerated values are supported: other(0) - radio type is unknown dot11a(1) - 802.11a radio dot11b(2) - 802.11b radio dot11g(3) - 802.11g/b radio dot11n5g(4) - 802.11n/a radio at 5GHz band dot11n2g(5) - 802.11n/g/b radio at 2.4GHz band dot11ac(6) - 802.11ac/n/a radio dot11ngOnly(7) - 802.11n/g radio at 2.4GHz band dot11gOnly(8) - 802.11g radio dot11n2GHzOnly(9) - 802.11n radio at 2.4GHz band dot11n5GHzOnly(10) - 802.11n radio at 5GHz band dot11acnOnly(11) - 802.11ac/n radio dot11acOnly(12) - 802.11ac radio'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("other", 0), ("dot11a", 1), ("dot11b", 2), ("dot11g", 3), ("dot11n5g", 4), ("dot11n2g", 5), ("dot11ac", 6), ("dot11ngOnly", 7), ("dot11gOnly", 8), ("dot11n2GHzOnly", 9), ("dot11n5GHzOnly", 10), ("dot11acnOnly", 11), ("dot11acOnly", 12))

class FgWcWtpChannelWidthType(TextualConvention, Integer32):
    description = 'enumerated type for WTP radio channel width'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("width20MHz", 1), ("width40MHz", 2), ("width80MHz", 3))

class FgWcWtpRadioBandType(TextualConvention, Integer32):
    description = 'enumerated type for WTP radio band'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("other", 0), ("band2GHz", 1), ("band5GHz", 2))

class FgWcWtpRadioChannelNumber(TextualConvention, Integer32):
    description = 'channel number of a WTP radio'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 200)

class FgWcWtpRadioMode(TextualConvention, Integer32):
    description = 'Represents the operating mode of the WTP radio. The following enumerated values are supported: other(0) - The radio mode is unknown. notExist(1) - The radio does not physically exist. disabled(2) - The radio is administratively disabled. ap(3) - The radio is configured as an access point. monitor(4) - The radio is configured as a dedicated rogue AP scanner. sniffer(5) - The radio is configured as a wireless sniffer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 0), ("notExist", 1), ("disabled", 2), ("ap", 3), ("monitor", 4), ("sniffer", 5))

class FgWcCountryString(TextualConvention, OctetString):
    description = "This attribute identifies the country or non-country entity in which the station is operating. If it is a country, the first two octets of this string is the two character country code as described in document ISO/IEC 3166-1. The third octet shall be one of the following: 1. an ASCII space character, if the regulations under which the station is operating encompass all environments in the country, 2. an ASCII 'O' character, if the regulations under which the station is operating are for an Outdoor environment only, or 3. an ASCII 'I' character, if the regulations under which the station is operating are for an Indoor environment only. 4. an ASCII 'X' character, if the station is operating under a non-country entity. The first two octets of the non-country entity shall be two ASCII 'XX' characters."
    status = 'current'
    displayHint = '3a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

fgModel = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1))
fg900D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 900))
fgr60D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 643))
fgr90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 638))
fgt1000C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10004))
fgt1000D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 10005))
fgt100D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1004))
fgt1200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 12000))
fgt140D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1401))
fgt140P = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 1402))
fgt1500D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 15000))
fgt1500DT = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 15001))
fgt200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2005))
fgt200DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2007))
fgt240D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2006))
fgt240DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2008))
fgt280D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 2013))
fgt3000D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30000))
fgt30D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 304))
fgt30DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 305))
fgt30E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 306))
fgt3100D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 31000))
fgt3200D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32000))
fgt3240C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32401))
fgt3600C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 36004))
fgt3700D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 37000))
fgt3700DX = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 37001))
fgt3810D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38101))
fgt3815D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 38150))
fgt3HD = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 3006))
fgt400D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 4004))
fgt5001C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50014))
fgt5001D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 50015))
fgt500D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 5004))
fgt50E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 505))
fgt51E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 515))
fgt600C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6003))
fgt600D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 6004))
fgt60D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 624))
fgt60DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 625))
fgt70D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 700))
fgt70DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 701))
fgt800C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 8003))
fgt800D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 8004))
fgt80C = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 800))
fgt80CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 801))
fgt80D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 803))
fgt90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 630))
fgt90DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 631))
fgt92D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 636))
fgt94DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 634))
fgt98DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 635))
fgtVM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 30))
fgtVM64AWS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 45))
fgtVM64AWSONDEMAND = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 46))
fgtVM64HV = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 70))
fgtVM64KVm = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 60))
fgtVM64SVM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 32))
fgtVM64VMX = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 31))
fgtVM64XEN = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 40))
fgtsoc3 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 628))
fosVM64 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90000))
fosVM64KVM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 90060))
fw60DP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 627))
fwf30D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 314))
fwf30DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 315))
fwf30E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 316))
fwf50E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 506))
fwf51E = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 516))
fwf60D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 626))
fwf80CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 810))
fwf81CM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 811))
fwf90D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 632))
fwf90DPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 633))
fwf92D = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 1, 637))
fgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 2))
fgTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0))
fgVirtualDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3))
fgVdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1))
fgVdNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdNumber.setStatus('current')
if mibBuilder.loadTexts: fgVdNumber.setDescription('The number of virtual domains in vdTable')
fgVdMaxVdoms = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdMaxVdoms.setStatus('current')
if mibBuilder.loadTexts: fgVdMaxVdoms.setDescription('The maximum number of virtual domains allowed on the device as allowed by hardware and/or licensing')
fgVdEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 3, 1, 3), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEnabled.setStatus('current')
if mibBuilder.loadTexts: fgVdEnabled.setDescription('Whether virtual domains are enabled on this device')
fgVdTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2))
fgVdTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1), )
if mibBuilder.loadTexts: fgVdTable.setStatus('current')
if mibBuilder.loadTexts: fgVdTable.setDescription('A table of virtual domains configured on the device')
fgVdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgVdEntry.setStatus('current')
if mibBuilder.loadTexts: fgVdEntry.setDescription('An entry containing information applicable to a particular virtual domain')
fgVdEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntIndex.setStatus('current')
if mibBuilder.loadTexts: fgVdEntIndex.setDescription('Internal virtual domain index used to uniquely identify rows in this table. This index is also used by other tables referencing a virtual domain.')
fgVdEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntName.setStatus('current')
if mibBuilder.loadTexts: fgVdEntName.setDescription('The name of the virtual domain')
fgVdEntOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 3), FgOpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntOpMode.setStatus('current')
if mibBuilder.loadTexts: fgVdEntOpMode.setDescription('Operation mode of the virtual domain (NAT or Transparent)')
fgVdEntHaState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 4), FgHaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntHaState.setStatus('current')
if mibBuilder.loadTexts: fgVdEntHaState.setDescription('HA cluster member state of the virtual domain on this device (master, backup or standalone)')
fgVdEntCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntCpuUsage.setStatus('current')
if mibBuilder.loadTexts: fgVdEntCpuUsage.setDescription('CPU usage of the virtual domain (percentage).')
fgVdEntMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntMemUsage.setStatus('current')
if mibBuilder.loadTexts: fgVdEntMemUsage.setDescription('Memory usage of the virtual domain (percentage).')
fgVdEntSesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntSesCount.setStatus('current')
if mibBuilder.loadTexts: fgVdEntSesCount.setDescription('Number of active sessions on the virtual domain.')
fgVdEntSesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 1, 1, 8), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdEntSesRate.setStatus('current')
if mibBuilder.loadTexts: fgVdEntSesRate.setDescription('The session setup rate on the virtual domain.')
fgVdTpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2), )
if mibBuilder.loadTexts: fgVdTpTable.setStatus('current')
if mibBuilder.loadTexts: fgVdTpTable.setDescription('A table of virtual domains in transparent operation mode. This table has a sparse dependent relationship with fgVdTable.')
fgVdTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgVdTpEntry.setStatus('current')
if mibBuilder.loadTexts: fgVdTpEntry.setDescription('An entry containing information applicable to a particular virtual domain in transparent mode')
fgVdTpMgmtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtAddrType.setStatus('current')
if mibBuilder.loadTexts: fgVdTpMgmtAddrType.setDescription('The type of address stored in fgVdTpMgmtAddr, in compliance with INET-ADDRESS-MIB')
fgVdTpMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtAddr.setStatus('current')
if mibBuilder.loadTexts: fgVdTpMgmtAddr.setDescription('The management IP address of the virtual domain in transparent mode, typically an IPv4 address. The address type/format is determined by fgVdTpMgmtAddrType.')
fgVdTpMgmtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 3, 2, 2, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVdTpMgmtMask.setStatus('current')
if mibBuilder.loadTexts: fgVdTpMgmtMask.setDescription('The address prefix length (or network mask) applied to the fgVdTpMgmtAddr')
fgSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4))
fgSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1))
fgSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersion.setStatus('current')
if mibBuilder.loadTexts: fgSysVersion.setDescription('Firmware version of the device')
fgSysMgmtVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 2), FgVdIndex())
if mibBuilder.loadTexts: fgSysMgmtVdom.setStatus('current')
if mibBuilder.loadTexts: fgSysMgmtVdom.setDescription('Index that identifies the management virtual domain. This index corresponds to the index used by fgVdTable.')
fgSysCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysCpuUsage.setStatus('current')
if mibBuilder.loadTexts: fgSysCpuUsage.setDescription('Current CPU usage (percentage)')
fgSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysMemUsage.setStatus('current')
if mibBuilder.loadTexts: fgSysMemUsage.setDescription('Current memory utilization (percentage)')
fgSysMemCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysMemCapacity.setStatus('current')
if mibBuilder.loadTexts: fgSysMemCapacity.setDescription('Total physical memory (RAM) installed (KB)')
fgSysDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysDiskUsage.setStatus('current')
if mibBuilder.loadTexts: fgSysDiskUsage.setDescription('Current hard disk usage (MB), if disk is present')
fgSysDiskCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysDiskCapacity.setStatus('current')
if mibBuilder.loadTexts: fgSysDiskCapacity.setDescription('Total hard disk capacity (MB), if disk is present')
fgSysSesCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesCount.setStatus('current')
if mibBuilder.loadTexts: fgSysSesCount.setDescription('Number of active sessions on the device')
fgSysLowMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysLowMemUsage.setStatus('current')
if mibBuilder.loadTexts: fgSysLowMemUsage.setDescription("Current lowmem utilization (percentage). Lowmem is memory available for the kernel's own data structures and kernel specific tables. The system can get into a bad state if it runs out of lowmem.")
fgSysLowMemCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysLowMemCapacity.setStatus('current')
if mibBuilder.loadTexts: fgSysLowMemCapacity.setDescription('Total lowmem capacity (KB). See fgSysLowMemUsage for the description of lowmem.')
fgSysSesRate1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 11), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate1.setStatus('current')
if mibBuilder.loadTexts: fgSysSesRate1.setDescription('The average session setup rate over the past minute.')
fgSysSesRate10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 12), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate10.setStatus('current')
if mibBuilder.loadTexts: fgSysSesRate10.setDescription('The average session setup rate over the past 10 minutes.')
fgSysSesRate30 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 13), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate30.setStatus('current')
if mibBuilder.loadTexts: fgSysSesRate30.setDescription('The average session setup rate over the past 30 minutes.')
fgSysSesRate60 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 14), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSesRate60.setStatus('current')
if mibBuilder.loadTexts: fgSysSesRate60.setDescription('The average session setup rate over the past 60 minutes.')
fgSysSes6Count = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Count.setStatus('current')
if mibBuilder.loadTexts: fgSysSes6Count.setDescription('Number of active ipv6 sessions on the device')
fgSysSes6Rate1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 16), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate1.setStatus('current')
if mibBuilder.loadTexts: fgSysSes6Rate1.setDescription('The average ipv6 session setup rate over the past minute.')
fgSysSes6Rate10 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 17), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate10.setStatus('current')
if mibBuilder.loadTexts: fgSysSes6Rate10.setDescription('The average ipv6 session setup rate over the past 10 minutes.')
fgSysSes6Rate30 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 18), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate30.setStatus('current')
if mibBuilder.loadTexts: fgSysSes6Rate30.setDescription('The average ipv6 session setup rate over the past 30 minutes.')
fgSysSes6Rate60 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 19), Gauge32()).setUnits('Sessions Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysSes6Rate60.setStatus('current')
if mibBuilder.loadTexts: fgSysSes6Rate60.setDescription('The average ipv6 session setup rate over the past 60 minutes.')
fgSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 1, 20), Counter64()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysUpTime.setStatus('current')
if mibBuilder.loadTexts: fgSysUpTime.setDescription('The 64bit time (in hundredths of a second) since the network management portion of the system was last re-initialized.')
fgSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2))
fgSysVersionAv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersionAv.setStatus('current')
if mibBuilder.loadTexts: fgSysVersionAv.setDescription('Virus signature database version installed on the device')
fgSysVersionIps = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSysVersionIps.setStatus('current')
if mibBuilder.loadTexts: fgSysVersionIps.setDescription('IPS signature database version installed on the device')
fgHwSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3))
fgHwSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorCount.setStatus('current')
if mibBuilder.loadTexts: fgHwSensorCount.setDescription('The number of entries in fgHwSensorTable')
fgHwSensorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2), )
if mibBuilder.loadTexts: fgHwSensorTable.setStatus('current')
if mibBuilder.loadTexts: fgHwSensorTable.setDescription('A list of device specific hardware sensors and values. Because different devices have different hardware sensor capabilities, this table may or may not contain any values.')
fgHwSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgHwSensorEntIndex"))
if mibBuilder.loadTexts: fgHwSensorEntry.setStatus('current')
if mibBuilder.loadTexts: fgHwSensorEntry.setDescription('An entry containing the name, value, and alarm status of a given hardware sensor')
fgHwSensorEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgHwSensorEntIndex.setStatus('current')
if mibBuilder.loadTexts: fgHwSensorEntIndex.setDescription('A unique identifier within the fgHwSensorTable')
fgHwSensorEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntName.setStatus('current')
if mibBuilder.loadTexts: fgHwSensorEntName.setDescription('A string identifying the sensor by name')
fgHwSensorEntValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntValue.setStatus('current')
if mibBuilder.loadTexts: fgHwSensorEntValue.setDescription('A string representation of the value of the sensor. Because sensors can present data in different formats, string representation is most general format. Interpretation of the value (units of measure, for example) is dependent on the individual sensor.')
fgHwSensorEntAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHwSensorEntAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: fgHwSensorEntAlarmStatus.setDescription('If the sensor has an alarm threshold and has exceeded it, this will indicate its status. Not all sensors have alarms.')
fgProcessors = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4))
fgProcessorCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorCount.setStatus('current')
if mibBuilder.loadTexts: fgProcessorCount.setDescription('The number of entries in fgProcessorTable')
fgProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2), )
if mibBuilder.loadTexts: fgProcessorTable.setStatus('current')
if mibBuilder.loadTexts: fgProcessorTable.setDescription('A table that lists information for each processor')
fgProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgProcessorEntIndex"))
if mibBuilder.loadTexts: fgProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: fgProcessorEntry.setDescription('An entry containing information for a particular processor')
fgProcessorEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgProcessorEntIndex.setStatus('current')
if mibBuilder.loadTexts: fgProcessorEntIndex.setDescription('A unique identifier within the fgProcessorTable')
fgProcessorUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUsage.setStatus('current')
if mibBuilder.loadTexts: fgProcessorUsage.setDescription("The processor's CPU usage (percentage), which is an average calculated over the last minute. (only valid for processors types that support this statistic).")
fgProcessorUsage5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUsage5sec.setStatus('current')
if mibBuilder.loadTexts: fgProcessorUsage5sec.setDescription("The processor's CPU usage (percentage), which is an average calculated over the last 5 sec. (only valid for processors types that support this statistic).")
fgProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorType.setStatus('current')
if mibBuilder.loadTexts: fgProcessorType.setDescription('An indication of the type of the processor. Types are defined in fgProcessorTypes.')
fgProcessorContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 5), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorContainedIn.setStatus('current')
if mibBuilder.loadTexts: fgProcessorContainedIn.setDescription('The index to the processor module entry in the fgProcessorModuleTable that contains this processor.')
fgProcessorPktRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktRxCount.setStatus('current')
if mibBuilder.loadTexts: fgProcessorPktRxCount.setDescription('The total number of packets received by this processor (only valid for processors types that support this statistic).')
fgProcessorPktTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktTxCount.setStatus('current')
if mibBuilder.loadTexts: fgProcessorPktTxCount.setDescription('The total number of packets transmitted by this processor (only valid for processors types that support this statistic).')
fgProcessorPktDroppedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorPktDroppedCount.setStatus('current')
if mibBuilder.loadTexts: fgProcessorPktDroppedCount.setDescription('The total number of packets dropped by this processor (only valid for processors types that support this statistic).')
fgProcessorUserUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorUserUsage.setStatus('current')
if mibBuilder.loadTexts: fgProcessorUserUsage.setDescription("The processor's CPU user space usage, which is an average calculated over the last minute. (only valid for processors types that support this statistic).")
fgProcessorSysUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 2, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorSysUsage.setStatus('current')
if mibBuilder.loadTexts: fgProcessorSysUsage.setDescription("The processor's CPU system space usage, which is an average calculated over the last minute. (only valid for processors types that support this statistic).")
fgProcessorTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3))
fgProcessorOther = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 1))
if mibBuilder.loadTexts: fgProcessorOther.setStatus('current')
if mibBuilder.loadTexts: fgProcessorOther.setDescription('The processor type identifier used when no other defined type is appropriate.')
fgProcessorIntel = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 2))
if mibBuilder.loadTexts: fgProcessorIntel.setStatus('current')
if mibBuilder.loadTexts: fgProcessorIntel.setDescription('The processor type identifier used for Intel CPU.')
fgProcessorAMD = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 3))
if mibBuilder.loadTexts: fgProcessorAMD.setStatus('current')
if mibBuilder.loadTexts: fgProcessorAMD.setDescription('The processor type identifier used for AMD CPU.')
fgProcessorXlr = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 4))
if mibBuilder.loadTexts: fgProcessorXlr.setStatus('current')
if mibBuilder.loadTexts: fgProcessorXlr.setDescription('The processor type identifier used for RMI XLR processor.')
fgProcessorFnSoc = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 5))
if mibBuilder.loadTexts: fgProcessorFnSoc.setStatus('current')
if mibBuilder.loadTexts: fgProcessorFnSoc.setDescription('The processor type identifier used for Fortinet FortiSoc processor.')
fgProcessorFnNP2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 6))
if mibBuilder.loadTexts: fgProcessorFnNP2.setStatus('current')
if mibBuilder.loadTexts: fgProcessorFnNP2.setDescription('The processor type identifier used for Fortinet NP2 security processor.')
fgProcessorFnNP4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 7))
if mibBuilder.loadTexts: fgProcessorFnNP4.setStatus('current')
if mibBuilder.loadTexts: fgProcessorFnNP4.setDescription('The processor type identifier used for Fortinet NP4 security processor.')
fgProcessorFnNP6 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 4, 3, 8))
if mibBuilder.loadTexts: fgProcessorFnNP6.setStatus('current')
if mibBuilder.loadTexts: fgProcessorFnNP6.setDescription('The processor type identifier used for Fortinet NP6 security processor.')
fgProcessorModules = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5))
fgProcessorModuleTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1))
fgProcModOther = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 1))
if mibBuilder.loadTexts: fgProcModOther.setStatus('current')
if mibBuilder.loadTexts: fgProcModOther.setDescription('The processor module type identifier used when no other defined type is appropriate.')
fgProcModIntegrated = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 2))
if mibBuilder.loadTexts: fgProcModIntegrated.setStatus('current')
if mibBuilder.loadTexts: fgProcModIntegrated.setDescription('The processor module type identifier used for the main CPUs built in the device.')
fgProcModFnXE2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 3))
if mibBuilder.loadTexts: fgProcModFnXE2.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnXE2.setDescription('The processor module type identifier used for Fortinet AMC module ADM-XE2.')
fgProcModFnCE4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 4))
if mibBuilder.loadTexts: fgProcModFnCE4.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnCE4.setDescription('The processor module type identifier used for Fortinet AMC module ASM-CE4.')
fgProcModFnFE8 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 5))
if mibBuilder.loadTexts: fgProcModFnFE8.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnFE8.setDescription('The processor module type identifier used for Fortinet AMC module ADM-FE8.')
fgProcModFnXG2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 6))
if mibBuilder.loadTexts: fgProcModFnXG2.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnXG2.setDescription('The processor module type identifier used for Fortinet FMC module FMC-XG2.')
fgProcModIntegratedNPU = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 7))
if mibBuilder.loadTexts: fgProcModIntegratedNPU.setStatus('current')
if mibBuilder.loadTexts: fgProcModIntegratedNPU.setDescription('The processor module type identifier used for the NPU(s) built in the device.')
fgProcModFnXD2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 8))
if mibBuilder.loadTexts: fgProcModFnXD2.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnXD2.setDescription('The processor module type identifier used for Fortinet FMC module FMC-XD2.')
fgProcModFnF20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 9))
if mibBuilder.loadTexts: fgProcModFnF20.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnF20.setDescription('The processor module type identifier used for Fortinet FMC module FMC-F20.')
fgProcModFnC20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 10))
if mibBuilder.loadTexts: fgProcModFnC20.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnC20.setDescription('The processor module type identifier used for Fortinet FMC module FMC-C20.')
fgProcModFnXD4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 11))
if mibBuilder.loadTexts: fgProcModFnXD4.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnXD4.setDescription('The processor module type identifier used for Fortinet AMC module ADM-XD4.')
fgProcModFnFB4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 12))
if mibBuilder.loadTexts: fgProcModFnFB4.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnFB4.setDescription('The processor module type identifier used for Fortinet AMC module ASM-FB4.')
fgProcModFnFB8 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 13))
if mibBuilder.loadTexts: fgProcModFnFB8.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnFB8.setDescription('The processor module type identifier used for Fortinet AMC module ADM-FB8.')
fgProcModFnXB2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 1, 14))
if mibBuilder.loadTexts: fgProcModFnXB2.setStatus('current')
if mibBuilder.loadTexts: fgProcModFnXB2.setDescription('The processor module type identifier used for Fortinet AMC module ADM-XB2.')
fgProcessorModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcessorModuleCount.setStatus('current')
if mibBuilder.loadTexts: fgProcessorModuleCount.setDescription('The number of entries in fgProcessorModuleTable')
fgProcessorModuleTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3), )
if mibBuilder.loadTexts: fgProcessorModuleTable.setStatus('current')
if mibBuilder.loadTexts: fgProcessorModuleTable.setDescription('A table that lists information for each processor module')
fgProcessorModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgProcModIndex"))
if mibBuilder.loadTexts: fgProcessorModuleEntry.setStatus('current')
if mibBuilder.loadTexts: fgProcessorModuleEntry.setDescription('An entry containing information for a particular processor module')
fgProcModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgProcModIndex.setStatus('current')
if mibBuilder.loadTexts: fgProcModIndex.setDescription('A unique identifier within the fgProcessorModuleTable')
fgProcModType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModType.setStatus('current')
if mibBuilder.loadTexts: fgProcModType.setDescription('An indication of the type of the processor module. Types are defined in fgProcessorModuleTypes.')
fgProcModName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModName.setStatus('current')
if mibBuilder.loadTexts: fgProcModName.setDescription('A textual name of this processor module.')
fgProcModDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModDescr.setStatus('current')
if mibBuilder.loadTexts: fgProcModDescr.setDescription('A textual description of this processor module.')
fgProcModProcessorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModProcessorCount.setStatus('current')
if mibBuilder.loadTexts: fgProcModProcessorCount.setDescription('Total number of processors contained by this module.')
fgProcModMemCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModMemCapacity.setStatus('current')
if mibBuilder.loadTexts: fgProcModMemCapacity.setDescription('Total physical memory (RAM) installed (KB) on this processor module.')
fgProcModMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModMemUsage.setStatus('current')
if mibBuilder.loadTexts: fgProcModMemUsage.setDescription('Current memory utilization (percentage) on this processor module.')
fgProcModSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModSessionCount.setStatus('current')
if mibBuilder.loadTexts: fgProcModSessionCount.setDescription('Number of active sessions on this processor module (only valid for processors types that support this statistic).')
fgProcModSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 5, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgProcModSACount.setStatus('current')
if mibBuilder.loadTexts: fgProcModSACount.setDescription('Number of IPsec Security Associations on this processor module (only valid for processors types that support this statistic).')
fgSystemInfoAdvanced = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6))
fgSysInfoAdvMem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1))
fgSIAdvMemPageCache = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 1), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemPageCache.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvMemPageCache.setDescription('The amount of physical RAM used as cache memory for files read from the disk (the page cache).')
fgSIAdvMemCacheActive = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 2), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemCacheActive.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvMemCacheActive.setDescription('The toal amount of buffer or page cache memory that are active. This part of the memory is used recently and usually not reclaimed unless absolutely necessary.')
fgSIAdvMemCacheInactive = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 3), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemCacheInactive.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvMemCacheInactive.setDescription('The total amount of buffer or page cache memory that are free and available. This is memory that has not been recently used and can be reclaimed for other purposes by the paging algorithm.')
fgSIAdvMemBuffer = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 4), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemBuffer.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvMemBuffer.setDescription('The amount of physical RAM used for filesystem buffers.')
fgSIAdvMemEnterKerConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 5), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemEnterKerConsThrsh.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvMemEnterKerConsThrsh.setDescription('Current memory threshold level to enter kernel conserve mode.')
fgSIAdvMemLeaveKerConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 6), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemLeaveKerConsThrsh.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvMemLeaveKerConsThrsh.setDescription('Current memory threshold level to leave kernel conserve mode.')
fgSIAdvMemEnterProxyConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 7), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemEnterProxyConsThrsh.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvMemEnterProxyConsThrsh.setDescription('Current memory threshold level to enter proxy conserve mode.')
fgSIAdvMemLeaveProxyConsThrsh = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 1, 8), Gauge32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvMemLeaveProxyConsThrsh.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvMemLeaveProxyConsThrsh.setDescription('Current memory threshold level to leave proxy conserve mode.')
fgSysInfoAdvSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2))
fgSIAdvSesEphemeralCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesEphemeralCount.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvSesEphemeralCount.setDescription('The current number of ephemeral sessions on the device.')
fgSIAdvSesEphemeralLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesEphemeralLimit.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvSesEphemeralLimit.setDescription('The limit number of allowed ephemeral sessions on the device.')
fgSIAdvSesClashCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesClashCount.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvSesClashCount.setDescription('The number of new sessions which have collision with existing sessions. This generally highlights a shortage of ports or IP in ip-pool during source natting (PNAT).')
fgSIAdvSesExpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesExpCount.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvSesExpCount.setDescription('The number of current expectation sessions.')
fgSIAdvSesSyncQFCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesSyncQFCount.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvSesSyncQFCount.setDescription('The sync queue full counter, reflecting bursts on the sync queue.')
fgSIAdvSesAcceptQFCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesAcceptQFCount.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvSesAcceptQFCount.setDescription('The accept queue full counter, reflecting bursts on the accept queue.')
fgSIAdvSesNoListenerCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 6, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgSIAdvSesNoListenerCount.setStatus('current')
if mibBuilder.loadTexts: fgSIAdvSesNoListenerCount.setDescription('The number of direct requests to Fortigate local stack from external, reflecting DOS attack towards the Fortigate.')
fgUsbports = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7))
fgUsbportCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportCount.setStatus('current')
if mibBuilder.loadTexts: fgUsbportCount.setDescription('The number of entries in fgUsbportTable.')
fgUsbportTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2), )
if mibBuilder.loadTexts: fgUsbportTable.setStatus('current')
if mibBuilder.loadTexts: fgUsbportTable.setDescription('A table that lists information for each external USB port.')
fgUsbportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgUsbportEntIndex"))
if mibBuilder.loadTexts: fgUsbportEntry.setStatus('current')
if mibBuilder.loadTexts: fgUsbportEntry.setDescription('An entry containing information for a particular USB port.')
fgUsbportEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgUsbportEntIndex.setStatus('current')
if mibBuilder.loadTexts: fgUsbportEntIndex.setDescription('A unique identifier within the fgUsbportTable.')
fgUsbportPlugged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unplugged", 0), ("plugged", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportPlugged.setStatus('current')
if mibBuilder.loadTexts: fgUsbportPlugged.setDescription("The USB port's plugged status.")
fgUsbportVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportVersion.setStatus('current')
if mibBuilder.loadTexts: fgUsbportVersion.setDescription("The USB port's version.")
fgUsbportClass = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 254, 255))).clone(namedValues=NamedValues(("ifc", 0), ("audio", 1), ("comm", 2), ("hid", 3), ("physical", 5), ("image", 6), ("printer", 7), ("storage", 8), ("hub", 9), ("cdcData", 10), ("chipSmartCard", 11), ("contentSecurity", 13), ("appSpec", 254), ("vendorSpec", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportClass.setStatus('current')
if mibBuilder.loadTexts: fgUsbportClass.setDescription('The device class.')
fgUsbportVendId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportVendId.setStatus('current')
if mibBuilder.loadTexts: fgUsbportVendId.setDescription('The Vendor ID of the device.')
fgUsbportProdId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportProdId.setStatus('current')
if mibBuilder.loadTexts: fgUsbportProdId.setDescription('The Product ID of the device.')
fgUsbportRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportRevision.setStatus('current')
if mibBuilder.loadTexts: fgUsbportRevision.setDescription('The release number of the device.')
fgUsbportManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportManufacturer.setStatus('current')
if mibBuilder.loadTexts: fgUsbportManufacturer.setDescription('The manufacturer of the device.')
fgUsbportProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportProduct.setStatus('current')
if mibBuilder.loadTexts: fgUsbportProduct.setDescription('The product of the device.')
fgUsbportSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 7, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbportSerial.setStatus('current')
if mibBuilder.loadTexts: fgUsbportSerial.setDescription('The serial number of the device.')
fgLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8))
fgLinkMonitorNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorNumber.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorNumber.setDescription('The number of link monitor in fgLinkMonitorTable')
fgLinkMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2), )
if mibBuilder.loadTexts: fgLinkMonitorTable.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorTable.setDescription('Link Monitor statistics table. This table has a dependent expansion relationship with fgVdTable. Only virtual domains with enabled link monitor are present in this table.')
fgLinkMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgLinkMonitorID"))
if mibBuilder.loadTexts: fgLinkMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorEntry.setDescription('Link Monitor statistics on a virtual domain')
fgLinkMonitorID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgLinkMonitorID.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorID.setDescription('Link Monitor ID. Only enabled link monitor entries are present in this table. Link Monitor IDs are only unique within a virtual domain.')
fgLinkMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorName.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorName.setDescription('Link Monitor name.')
fgLinkMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alive", 0), ("dead", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorState.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorState.setDescription('Link Monitor state.')
fgLinkMonitorLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorLatency.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorLatency.setDescription('The average latency of link monitor in float number within last 30 probes.')
fgLinkMonitorJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorJitter.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorJitter.setDescription('The average jitter of link monitor in float number within last 30 probes.')
fgLinkMonitorPacketSend = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketSend.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorPacketSend.setDescription('The total number of packets sent by link monitor.')
fgLinkMonitorPacketRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketRecv.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorPacketRecv.setDescription('The total number of packets received by link monitor.')
fgLinkMonitorPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorPacketLoss.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorPacketLoss.setDescription('The average packet loss percentage in float number within last 30 probes.')
fgLinkMonitorVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 4, 8, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgLinkMonitorVdom.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorVdom.setDescription('Virtual domain the link monitor entry exists in. This name corresponds to the fgVdEntName used in fgVdTable.')
fgFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5))
fgFwPolicies = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1))
fgFwPolInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 1))
fgFwPolTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2))
fgFwPolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1), )
if mibBuilder.loadTexts: fgFwPolStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgFwPolStatsTable.setDescription('Firewall policy statistics table. This table has a dependent expansion relationship with fgVdTable. Only virtual domains with enabled policies are present in this table.')
fgFwPolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgFwPolID"))
if mibBuilder.loadTexts: fgFwPolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgFwPolStatsEntry.setDescription('Firewall policy statistics on a virtual domain')
fgFwPolID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwPolID.setStatus('current')
if mibBuilder.loadTexts: fgFwPolID.setDescription('Firewall policy ID. Only enabled policies are present in this table. Policy IDs are only unique within a virtual domain.')
fgFwPolPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolPktCount.setStatus('current')
if mibBuilder.loadTexts: fgFwPolPktCount.setDescription('Number of packets matched to policy (passed or blocked, depending on policy action). Count is from the time the policy became active.')
fgFwPolByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolByteCount.setStatus('current')
if mibBuilder.loadTexts: fgFwPolByteCount.setDescription('Number of bytes in packets matching the policy. See fgFwPolPktCount.')
fgFwPolLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolLastUsed.setStatus('current')
if mibBuilder.loadTexts: fgFwPolLastUsed.setDescription('How many minutes since last used.')
fgFwPolPktCountHc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolPktCountHc.setStatus('current')
if mibBuilder.loadTexts: fgFwPolPktCountHc.setDescription('64-bit Number of packets matched to policy (passed or blocked, depending on policy action). Count is from the time the policy became active.')
fgFwPolByteCountHc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPolByteCountHc.setStatus('current')
if mibBuilder.loadTexts: fgFwPolByteCountHc.setDescription('64-bit Number of bytes in packets matching the policy. See fgFwPolPktCountHc.')
fgFwPol6StatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2), )
if mibBuilder.loadTexts: fgFwPol6StatsTable.setStatus('current')
if mibBuilder.loadTexts: fgFwPol6StatsTable.setDescription('Firewall policy6 statistics table. This table has a dependent expansion relationship with fgVdTable. Only virtual domains with enabled policies are present in this table.')
fgFwPol6StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgFwPol6ID"))
if mibBuilder.loadTexts: fgFwPol6StatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgFwPol6StatsEntry.setDescription('Firewall policy6 statistics on a virtual domain')
fgFwPol6ID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwPol6ID.setStatus('current')
if mibBuilder.loadTexts: fgFwPol6ID.setDescription('Firewall policy6 ID. Only enabled policies are present in this table. Policy IDs are only unique within a virtual domain.')
fgFwPol6PktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPol6PktCount.setStatus('current')
if mibBuilder.loadTexts: fgFwPol6PktCount.setDescription('Number of packets matched to policy (passed or blocked, depending on policy action). Count is from the time the policy became active.')
fgFwPol6ByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPol6ByteCount.setStatus('current')
if mibBuilder.loadTexts: fgFwPol6ByteCount.setDescription('Number of bytes in packets matching the policy. See fgFwPol6PktCount.')
fgFwPol6LastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwPol6LastUsed.setStatus('current')
if mibBuilder.loadTexts: fgFwPol6LastUsed.setDescription('How many minutes since last used.')
fgFwUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2))
fgFwUserInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1))
fgFwUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserNumber.setStatus('current')
if mibBuilder.loadTexts: fgFwUserNumber.setDescription('The number of user accounts in fgFwUserTable')
fgFwUserAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: fgFwUserAuthTimeout.setDescription("Idle period after which a firewall-authentication user's session is automatically expired")
fgFwUserTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2))
fgFwUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1), )
if mibBuilder.loadTexts: fgFwUserTable.setStatus('current')
if mibBuilder.loadTexts: fgFwUserTable.setDescription('A list of local and proxy (Radius server) user accounts for use with firewall user authentication')
fgFwUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgFwUserIndex"))
if mibBuilder.loadTexts: fgFwUserEntry.setStatus('current')
if mibBuilder.loadTexts: fgFwUserEntry.setDescription('An entry containing information applicable to a particular user account')
fgFwUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgFwUserIndex.setStatus('current')
if mibBuilder.loadTexts: fgFwUserIndex.setDescription('An index for uniquely identifying the users in fgFwUserTable')
fgFwUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserName.setStatus('current')
if mibBuilder.loadTexts: fgFwUserName.setDescription('User-name of the specified account')
fgFwUserAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 3), FgFwUserAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserAuth.setStatus('current')
if mibBuilder.loadTexts: fgFwUserAuth.setDescription('Type of authentication the account uses (local, RADIUS, LDAP, etc.)')
fgFwUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserState.setStatus('current')
if mibBuilder.loadTexts: fgFwUserState.setDescription('Status of the user account (enable/disable)')
fgFwUserVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 5, 2, 2, 1, 1, 5), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFwUserVdom.setStatus('current')
if mibBuilder.loadTexts: fgFwUserVdom.setDescription('Virtual domain the user account exists in. This index corresponds to the index used in fgVdTable.')
fgMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6))
fgFmTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0))
fgAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1))
fgAdminOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1))
fgAdminIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: fgAdminIdleTimeout.setDescription('Idle period after which an administrator is automatically logged out of the system')
fgAdminLcdProtection = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 1, 2), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminLcdProtection.setStatus('current')
if mibBuilder.loadTexts: fgAdminLcdProtection.setDescription('Status of the LCD protection (enabled/disabled)')
fgAdminTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2))
fgAdminTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1), )
if mibBuilder.loadTexts: fgAdminTable.setStatus('current')
if mibBuilder.loadTexts: fgAdminTable.setDescription('A table of administrator accounts on the device')
fgAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1, 1), )
fnAdminEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAdminEntry"))
fgAdminEntry.setIndexNames(*fnAdminEntry.getIndexNames())
if mibBuilder.loadTexts: fgAdminEntry.setStatus('current')
if mibBuilder.loadTexts: fgAdminEntry.setDescription('An entry containing information applicable to a particular admin account')
fgAdminVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 6, 1, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAdminVdom.setStatus('current')
if mibBuilder.loadTexts: fgAdminVdom.setDescription('The virtual domain the administrator belongs to')
fgMgmtTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2))
fgManIfIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfIp.setStatus('current')
if mibBuilder.loadTexts: fgManIfIp.setDescription('IP address of the interface listed in the trap')
fgManIfMask = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfMask.setStatus('current')
if mibBuilder.loadTexts: fgManIfMask.setDescription('Mask of subnet the interface belongs to')
fgManIfIp6 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 6, 2, 3), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgManIfIp6.setStatus('current')
if mibBuilder.loadTexts: fgManIfIp6.setDescription('IPv6 address of the interface listed in the trap')
fgIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7))
fgIntfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 1))
fgIntfTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2))
fgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1), )
if mibBuilder.loadTexts: fgIntfTable.setStatus('current')
if mibBuilder.loadTexts: fgIntfTable.setDescription('Fortinet specific extensions to MIB-2 ifTable')
fgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1), )
ifEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIntfEntry"))
fgIntfEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: fgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: fgIntfEntry.setDescription('Fortinet specific information about an ifEntry. This table augments the standard ifTable, so the same indexing is used.')
fgIntfEntVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 2, 1, 1, 1), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfEntVdom.setStatus('current')
if mibBuilder.loadTexts: fgIntfEntVdom.setDescription('The virtual domain the interface belongs to. This index corresponds to the index used by fgVdTable.')
fgIntfVrrps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3))
fgIntfVrrpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpCount.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpCount.setDescription('The number of entries in fgIntfVrrpTable')
fgIntfVrrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2), )
if mibBuilder.loadTexts: fgIntfVrrpTable.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpTable.setDescription('A list of VRRPs and values.')
fgIntfVrrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntIndex"))
if mibBuilder.loadTexts: fgIntfVrrpEntry.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpEntry.setDescription('An entry containing the ID, group ID, interface name, state and IP address of a given virtual router.')
fgIntfVrrpEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfVrrpEntIndex.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpEntIndex.setDescription('A unique identifier within the fgIntfVrrpTable')
fgIntfVrrpEntVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 2), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntVrId.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpEntVrId.setDescription('ID of a virtual router.')
fgIntfVrrpEntGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 3), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntGrpId.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpEntGrpId.setDescription('The group ID of a virtual router.')
fgIntfVrrpEntIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntIfName.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpEntIfName.setDescription('The interface name of a virtual router.')
fgIntfVrrpEntState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntState.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpEntState.setDescription('State of a virtual router.')
fgIntfVrrpEntVrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 3, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVrrpEntVrIp.setStatus('current')
if mibBuilder.loadTexts: fgIntfVrrpEntVrIp.setDescription('IP address of a virtual router.')
fgIntfVlanHbs = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4))
fgIntfVlanHbCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbCount.setStatus('current')
if mibBuilder.loadTexts: fgIntfVlanHbCount.setDescription('The number of entries in fgIntfVlanHbTable')
fgIntfVlanHbTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2), )
if mibBuilder.loadTexts: fgIntfVlanHbTable.setStatus('current')
if mibBuilder.loadTexts: fgIntfVlanHbTable.setDescription('A list of VlanHbs and values.')
fgIntfVlanHbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntIndex"))
if mibBuilder.loadTexts: fgIntfVlanHbEntry.setStatus('current')
if mibBuilder.loadTexts: fgIntfVlanHbEntry.setDescription("An entry containing the vlan interface name, peer's serial number and state of a given vlan interface heartbeat.")
fgIntfVlanHbEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIntfVlanHbEntIndex.setStatus('current')
if mibBuilder.loadTexts: fgIntfVlanHbEntIndex.setDescription('A unique identifier within the fgIntfVlanHbTable')
fgIntfVlanHbEntIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntIfName.setStatus('current')
if mibBuilder.loadTexts: fgIntfVlanHbEntIfName.setDescription('The vlan interface name.')
fgIntfVlanHbEntSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntSerial.setStatus('current')
if mibBuilder.loadTexts: fgIntfVlanHbEntSerial.setDescription('Serial number of a vlan HA peer.')
fgIntfVlanHbEntState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIntfVlanHbEntState.setStatus('current')
if mibBuilder.loadTexts: fgIntfVlanHbEntState.setDescription('State of a vlan interface heartbeat.')
fgAntivirus = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8))
fgAvInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 1))
fgAvTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2))
fgAvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1), )
if mibBuilder.loadTexts: fgAvStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgAvStatsTable.setDescription('A table of Anti-virus statistics per virtual domain')
fgAvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAvStatsEntry"))
fgAvStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAvStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgAvStatsEntry.setDescription('Anti-virus statistics for a particular virtual domain')
fgAvVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvVirusDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvVirusDetected.setDescription('Number of virus transmissions detected in the virtual domain since start-up')
fgAvVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvVirusBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvVirusBlocked.setDescription('Number of virus transmissions blocked in the virtual domain since start-up')
fgAvHTTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvHTTPVirusDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvHTTPVirusDetected.setDescription('Number of virus transmissions over HTTP detected in the virtual domain since start-up')
fgAvHTTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvHTTPVirusBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvHTTPVirusBlocked.setDescription('Number of virus transmissions over HTTP blocked in the virtual domain since start-up')
fgAvSMTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvSMTPVirusDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvSMTPVirusDetected.setDescription('Number of virus transmissions over SMTP detected in the virtual domain since start-up')
fgAvSMTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvSMTPVirusBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvSMTPVirusBlocked.setDescription('Number of virus transmissions over SMTP blocked in the virtual domain since start-up')
fgAvPOP3VirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvPOP3VirusDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvPOP3VirusDetected.setDescription('Number of virus transmissions over POP3 detected in the virtual domain since start-up')
fgAvPOP3VirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvPOP3VirusBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvPOP3VirusBlocked.setDescription('Number of virus transmissions over POP3 blocked in the virtual domain since start-up')
fgAvIMAPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMAPVirusDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvIMAPVirusDetected.setDescription('Number of virus transmissions over IMAP detected in the virtual domain since start-up')
fgAvIMAPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMAPVirusBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvIMAPVirusBlocked.setDescription('Number of virus transmissions over IMAP blocked in the virtual domain since start-up')
fgAvFTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvFTPVirusDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvFTPVirusDetected.setDescription('Number of virus transmissions over FTP detected in the virtual domain since start-up')
fgAvFTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvFTPVirusBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvFTPVirusBlocked.setDescription('Number of virus transmissions over FTP blocked in the virtual domain since start-up')
fgAvIMVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMVirusDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvIMVirusDetected.setDescription('Number of virus transmissions over IM protocols detected in the virtual domain since start-up')
fgAvIMVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvIMVirusBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvIMVirusBlocked.setDescription('Number of virus transmissions over IM protocols blocked in the virtual domain since start-up')
fgAvNNTPVirusDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvNNTPVirusDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvNNTPVirusDetected.setDescription('Number of virus transmissions over NNTP detected in the virtual domain since start-up')
fgAvNNTPVirusBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvNNTPVirusBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvNNTPVirusBlocked.setDescription('Number of virus transmissions over NNTP blocked in the virtual domain since start-up')
fgAvOversizedDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvOversizedDetected.setStatus('current')
if mibBuilder.loadTexts: fgAvOversizedDetected.setDescription('Number of over-sized file transmissions detected in the virtual domain since start-up')
fgAvOversizedBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 8, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAvOversizedBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAvOversizedBlocked.setDescription('Number of over-sized file transmissions blocked in the virtual domain since start-up')
fgAvTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 8, 3))
fgAvTrapVirName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 8, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgAvTrapVirName.setStatus('current')
if mibBuilder.loadTexts: fgAvTrapVirName.setDescription('Virus name that triggered event')
fgIps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9))
fgIpsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 1))
fgIpsTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2))
fgIpsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1), )
if mibBuilder.loadTexts: fgIpsStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgIpsStatsTable.setDescription('A table of IPS/IDS statistics per virtual domain')
fgIpsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIpsStatsEntry"))
fgIpsStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIpsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgIpsStatsEntry.setDescription('IPS/IDS statistics for a particular virtual domain')
fgIpsIntrusionsDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsIntrusionsDetected.setStatus('current')
if mibBuilder.loadTexts: fgIpsIntrusionsDetected.setDescription('Number of intrusions detected since start-up in this virtual domain')
fgIpsIntrusionsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsIntrusionsBlocked.setStatus('current')
if mibBuilder.loadTexts: fgIpsIntrusionsBlocked.setDescription('Number of intrusions blocked since start-up in this virtual domain')
fgIpsCritSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsCritSevDetections.setStatus('current')
if mibBuilder.loadTexts: fgIpsCritSevDetections.setDescription('Number of critical severity intrusions detected since start-up in this virtual domain')
fgIpsHighSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsHighSevDetections.setStatus('current')
if mibBuilder.loadTexts: fgIpsHighSevDetections.setDescription('Number of high severity intrusions detected since start-up in this virtual domain')
fgIpsMedSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsMedSevDetections.setStatus('current')
if mibBuilder.loadTexts: fgIpsMedSevDetections.setDescription('Number of medium severity intrusions detected since start-up in this virtual domain')
fgIpsLowSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsLowSevDetections.setStatus('current')
if mibBuilder.loadTexts: fgIpsLowSevDetections.setDescription('Number of low severity intrusions detected since start-up in this virtual domain')
fgIpsInfoSevDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsInfoSevDetections.setStatus('current')
if mibBuilder.loadTexts: fgIpsInfoSevDetections.setDescription('Number of informational severity intrusions detected since start-up in this virtual domain')
fgIpsSignatureDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsSignatureDetections.setStatus('current')
if mibBuilder.loadTexts: fgIpsSignatureDetections.setDescription('Number of intrusions detected by signature since start-up in this virtual domain')
fgIpsAnomalyDetections = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 9, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpsAnomalyDetections.setStatus('current')
if mibBuilder.loadTexts: fgIpsAnomalyDetections.setDescription('Number of intrusions DECed as anomalies since start-up in this virtual domain')
fgIpsTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3))
fgIpsTrapSigId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 1), FnIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSigId.setStatus('current')
if mibBuilder.loadTexts: fgIpsTrapSigId.setDescription('ID of IPS signature identified in trap')
fgIpsTrapSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSrcIp.setStatus('current')
if mibBuilder.loadTexts: fgIpsTrapSrcIp.setDescription('Source IP Address of the IPS signature trigger')
fgIpsTrapSigMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 9, 3, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgIpsTrapSigMsg.setStatus('current')
if mibBuilder.loadTexts: fgIpsTrapSigMsg.setDescription('Message associated with IPS event')
fgApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10))
fgWebfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1))
fgWebfilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 1))
fgWebfilterTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2))
fgWebfilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1), )
if mibBuilder.loadTexts: fgWebfilterStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgWebfilterStatsTable.setDescription('A table of Web-filter statistics per virtual domain')
fgWebfilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgWebfilterStatsEntry"))
fgWebfilterStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgWebfilterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgWebfilterStatsEntry.setDescription('Web-filter statistics for a particular virtual domain')
fgWfHTTPBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPBlocked.setStatus('current')
if mibBuilder.loadTexts: fgWfHTTPBlocked.setDescription('Number of HTTP sessions blocked by Web-filter since start-up')
fgWfHTTPSBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPSBlocked.setStatus('current')
if mibBuilder.loadTexts: fgWfHTTPSBlocked.setDescription('Number of HTTPS sessions blocked by Web-filter since start-up')
fgWfHTTPURLBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPURLBlocked.setStatus('current')
if mibBuilder.loadTexts: fgWfHTTPURLBlocked.setDescription('Number of HTTP URLs blocked by Web-filter since start-up')
fgWfHTTPSURLBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfHTTPSURLBlocked.setStatus('current')
if mibBuilder.loadTexts: fgWfHTTPSURLBlocked.setDescription('Number of HTTPS URLs blocked by Web-filter since start-up')
fgWfActiveXBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfActiveXBlocked.setStatus('current')
if mibBuilder.loadTexts: fgWfActiveXBlocked.setDescription('Number of ActiveX downloads blocked by Web-filter since start-up')
fgWfCookieBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfCookieBlocked.setStatus('current')
if mibBuilder.loadTexts: fgWfCookieBlocked.setDescription('Number of HTTP Cookies blocked by Web-filter since start-up')
fgWfAppletBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWfAppletBlocked.setStatus('current')
if mibBuilder.loadTexts: fgWfAppletBlocked.setDescription('Number of Applets blocked by Web-filter since start-up')
fgFortiGuardStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2), )
if mibBuilder.loadTexts: fgFortiGuardStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgFortiGuardStatsTable.setDescription('A table of FortiGuard statistics per virtual domain')
fgFortiGuardStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgFortiGuardStatsEntry"))
fgFortiGuardStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgFortiGuardStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgFortiGuardStatsEntry.setDescription('FortiGuard statistics for a particular virtual domain')
fgFgWfHTTPExamined = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPExamined.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPExamined.setDescription('Number of HTTP requests examined using FortiGuard since start-up')
fgFgWfHTTPSExamined = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSExamined.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPSExamined.setDescription('Number of HTTPS requests examined using FortiGuard since start-up')
fgFgWfHTTPAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPAllowed.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPAllowed.setDescription('Number of HTTP requests allowed to proceed using FortiGuard since start-up')
fgFgWfHTTPSAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSAllowed.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPSAllowed.setDescription('Number of HTTPS requests allowed to proceed using FortiGuard since start-up')
fgFgWfHTTPBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPBlocked.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPBlocked.setDescription('Number of HTTP requests blocked using FortiGuard since start-up')
fgFgWfHTTPSBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSBlocked.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPSBlocked.setDescription('Number of HTTPS requests blocked using FortiGuard since start-up')
fgFgWfHTTPLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPLogged.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPLogged.setDescription('Number of HTTP requests logged using FortiGuard since start-up')
fgFgWfHTTPSLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSLogged.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPSLogged.setDescription('Number of HTTPS requests logged using FortiGuard since start-up')
fgFgWfHTTPOverridden = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPOverridden.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPOverridden.setDescription('Number of HTTP requests overridden using FortiGuard since start-up')
fgFgWfHTTPSOverridden = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgFgWfHTTPSOverridden.setStatus('current')
if mibBuilder.loadTexts: fgFgWfHTTPSOverridden.setDescription('Number of HTTPS requests overridden using FortiGuard since start-up')
fgAppProxyHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100))
fgApHTTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPUpTime.setStatus('deprecated')
if mibBuilder.loadTexts: fgApHTTPUpTime.setDescription('HTTP proxy up-time (in seconds)')
fgApHTTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPMemUsage.setStatus('deprecated')
if mibBuilder.loadTexts: fgApHTTPMemUsage.setDescription('HTTP proxy memory usage (percentage of system total)')
fgApHTTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPConnections.setStatus('current')
if mibBuilder.loadTexts: fgApHTTPConnections.setDescription('HTTP proxy current connections')
fgApHTTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPMaxConnections.setStatus('current')
if mibBuilder.loadTexts: fgApHTTPMaxConnections.setDescription('Maximum number of connections supported by HTTP proxy')
fgApHTTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3), )
if mibBuilder.loadTexts: fgApHTTPStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgApHTTPStatsTable.setDescription('A table of HTTP Proxy statistics per virtual domain')
fgApHTTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApHTTPStatsEntry"))
fgApHTTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApHTTPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgApHTTPStatsEntry.setDescription('HTTP Proxy statistics for a particular virtual domain')
fgApHTTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 100, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApHTTPReqProcessed.setStatus('current')
if mibBuilder.loadTexts: fgApHTTPReqProcessed.setDescription('Number of HTTP requests in this virtual domain processed by the HTTP proxy since start-up')
fgAppProxySMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101))
fgApSMTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPUpTime.setStatus('deprecated')
if mibBuilder.loadTexts: fgApSMTPUpTime.setDescription('SMTP Proxy up-time, in seconds')
fgApSMTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPMemUsage.setStatus('deprecated')
if mibBuilder.loadTexts: fgApSMTPMemUsage.setDescription('SMTP Proxy memory utilization (percentage of system total)')
fgApSMTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPConnections.setStatus('current')
if mibBuilder.loadTexts: fgApSMTPConnections.setDescription('SMTP proxy current connections')
fgApSMTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPMaxConnections.setStatus('current')
if mibBuilder.loadTexts: fgApSMTPMaxConnections.setDescription('Maximum number of connections supported by SMTP proxy')
fgApSMTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3), )
if mibBuilder.loadTexts: fgApSMTPStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgApSMTPStatsTable.setDescription('A table of SMTP proxy statistics per virtual domain')
fgApSMTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApSMTPStatsEntry"))
fgApSMTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApSMTPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgApSMTPStatsEntry.setDescription('SMTP Proxy statistics for a particular virtual domain')
fgApSMTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPReqProcessed.setStatus('current')
if mibBuilder.loadTexts: fgApSMTPReqProcessed.setDescription('Number of requests in this virtual domain processed by the SMTP proxy since start-up')
fgApSMTPSpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 101, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSMTPSpamDetected.setStatus('current')
if mibBuilder.loadTexts: fgApSMTPSpamDetected.setDescription('Number of spam detected in this virtual domain by the SMTP proxy since start-up')
fgAppProxyPOP3 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102))
fgApPOP3UpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3UpTime.setStatus('deprecated')
if mibBuilder.loadTexts: fgApPOP3UpTime.setDescription('Up-time of the POP3 proxy, in seconds')
fgApPOP3MemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3MemUsage.setStatus('deprecated')
if mibBuilder.loadTexts: fgApPOP3MemUsage.setDescription('Memory usage of the POP3 Proxy (percentage of system total)')
fgApPOP3Connections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3Connections.setStatus('current')
if mibBuilder.loadTexts: fgApPOP3Connections.setDescription('POP3 proxy current connections')
fgApPOP3MaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3MaxConnections.setStatus('current')
if mibBuilder.loadTexts: fgApPOP3MaxConnections.setDescription('Maximum number of connections supported by POP3 proxy')
fgApPOP3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3), )
if mibBuilder.loadTexts: fgApPOP3StatsTable.setStatus('current')
if mibBuilder.loadTexts: fgApPOP3StatsTable.setDescription('A table of POP3 proxy statistics per virtual domain')
fgApPOP3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApPOP3StatsEntry"))
fgApPOP3StatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApPOP3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgApPOP3StatsEntry.setDescription('Proxy pop3 statistics for a particular virtual domain')
fgApPOP3ReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3ReqProcessed.setStatus('current')
if mibBuilder.loadTexts: fgApPOP3ReqProcessed.setDescription('Number of requests in this virtual domain processed by the POP3 proxy since start-up')
fgApPOP3SpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 102, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApPOP3SpamDetected.setStatus('current')
if mibBuilder.loadTexts: fgApPOP3SpamDetected.setDescription('Number of spam detected in this virtual domain by the POP3 Proxy since start-up')
fgAppProxyIMAP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103))
fgApIMAPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPUpTime.setStatus('deprecated')
if mibBuilder.loadTexts: fgApIMAPUpTime.setDescription('Up-time of the IMAP proxy, in seconds')
fgApIMAPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPMemUsage.setStatus('deprecated')
if mibBuilder.loadTexts: fgApIMAPMemUsage.setDescription('Memory utilization of the IMAP Proxy (as a percentage of the system total)')
fgApIMAPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPConnections.setStatus('current')
if mibBuilder.loadTexts: fgApIMAPConnections.setDescription('IMAP proxy current connections')
fgApIMAPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPMaxConnections.setStatus('current')
if mibBuilder.loadTexts: fgApIMAPMaxConnections.setDescription('Maximum number of connections supported by IMAP proxy')
fgApIMAPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3), )
if mibBuilder.loadTexts: fgApIMAPStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgApIMAPStatsTable.setDescription('A table of IMAP proxy statistics per virtual domain')
fgApIMAPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApIMAPStatsEntry"))
fgApIMAPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApIMAPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgApIMAPStatsEntry.setDescription('IMAP Proxy statistics for a particular virtual domain')
fgApIMAPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPReqProcessed.setStatus('current')
if mibBuilder.loadTexts: fgApIMAPReqProcessed.setDescription('Number of requests in this virtual domain processed by the IMAP proxy since start-up')
fgApIMAPSpamDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 103, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMAPSpamDetected.setStatus('current')
if mibBuilder.loadTexts: fgApIMAPSpamDetected.setDescription('Number of spam detected in this virtual domain by the IMAP proxy since start-up')
fgAppProxyNNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104))
fgApNNTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPUpTime.setStatus('deprecated')
if mibBuilder.loadTexts: fgApNNTPUpTime.setDescription('Up-time of the NNTP proxy, in seconds')
fgApNNTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPMemUsage.setStatus('deprecated')
if mibBuilder.loadTexts: fgApNNTPMemUsage.setDescription('Memory utilization of the NNTP proxy, as a percentage of the system total')
fgApNNTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPConnections.setStatus('current')
if mibBuilder.loadTexts: fgApNNTPConnections.setDescription('NNTP proxy current connections')
fgApNNTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPMaxConnections.setStatus('current')
if mibBuilder.loadTexts: fgApNNTPMaxConnections.setDescription('Maximum number of connections supported by NNTP proxy')
fgApNNTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3), )
if mibBuilder.loadTexts: fgApNNTPStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgApNNTPStatsTable.setDescription('A table of NNTP proxy statistics per virtual domain')
fgApNNTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApNNTPStatsEntry"))
fgApNNTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApNNTPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgApNNTPStatsEntry.setDescription('NNTP Proxy statistics for a particular virtual domain')
fgApNNTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 104, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApNNTPReqProcessed.setStatus('current')
if mibBuilder.loadTexts: fgApNNTPReqProcessed.setDescription('Number of requests in the virtual domain processed by the NNTP proxy since start-up')
fgAppProxyIM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105))
fgApIMUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMUpTime.setStatus('current')
if mibBuilder.loadTexts: fgApIMUpTime.setDescription('Up-time of the IM proxy, in seconds')
fgApIMMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMMemUsage.setStatus('current')
if mibBuilder.loadTexts: fgApIMMemUsage.setDescription('IM Proxy memory usage, as a percentage of the system total')
fgApIMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3), )
if mibBuilder.loadTexts: fgApIMStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgApIMStatsTable.setDescription('A table of IM proxy statistics per virtual domain')
fgApIMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApIMStatsEntry"))
fgApIMStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApIMStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgApIMStatsEntry.setDescription('IM Proxy statistics for a particular virtual domain')
fgApIMReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 105, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApIMReqProcessed.setStatus('current')
if mibBuilder.loadTexts: fgApIMReqProcessed.setDescription('Number of requests in this virtual domain processed by the IM proxy since start-up')
fgAppProxySIP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106))
fgApSIPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPUpTime.setStatus('current')
if mibBuilder.loadTexts: fgApSIPUpTime.setDescription('Up-time of the SIP Proxy, in seconds')
fgApSIPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPMemUsage.setStatus('current')
if mibBuilder.loadTexts: fgApSIPMemUsage.setDescription('SIP Proxy memory utilization, as a percentage of the system total')
fgApSIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3), )
if mibBuilder.loadTexts: fgApSIPStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgApSIPStatsTable.setDescription('A table of SIP proxy statistics per virtual domain')
fgApSIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApSIPStatsEntry"))
fgApSIPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApSIPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgApSIPStatsEntry.setDescription('SIP Proxy statistics for a particular virtual domain')
fgApSIPClientReg = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPClientReg.setStatus('current')
if mibBuilder.loadTexts: fgApSIPClientReg.setDescription('Number of client registration requests (Register and Options) in this virtual domain processed by the SIP proxy since start-up')
fgApSIPCallHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPCallHandling.setStatus('current')
if mibBuilder.loadTexts: fgApSIPCallHandling.setDescription('Number of call handling requests (Invite, Ack, Bye, Cancel and Refer) in this virtual domain processed by the SIP proxy since start-up')
fgApSIPServices = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPServices.setStatus('current')
if mibBuilder.loadTexts: fgApSIPServices.setDescription('Number of service requests (Subscribe, notify and Message) in this virtual domain processed by the SIP proxy since start-up')
fgApSIPOtherReq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 106, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApSIPOtherReq.setStatus('current')
if mibBuilder.loadTexts: fgApSIPOtherReq.setDescription('Number of other sip requests in this virtual domain processed by the SIP proxy since start-up')
fgAppScanUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107))
fgAppSuNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppSuNumber.setStatus('current')
if mibBuilder.loadTexts: fgAppSuNumber.setDescription('The number of scan units in the fgAppSuStatsTable')
fgAppSuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2), )
if mibBuilder.loadTexts: fgAppSuStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgAppSuStatsTable.setDescription('A table of scan unit statistics')
fgAppSuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgAppSuIndex"))
if mibBuilder.loadTexts: fgAppSuStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgAppSuStatsEntry.setDescription('Statistics entry for a particular scan unit')
fgAppSuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgAppSuIndex.setStatus('current')
if mibBuilder.loadTexts: fgAppSuIndex.setDescription('Index that uniquely identifies a scan unit in the fgAppSuStatsTable')
fgAppSuFileScanned = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 107, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppSuFileScanned.setStatus('current')
if mibBuilder.loadTexts: fgAppSuFileScanned.setDescription('Number of files scanned by this scan unit')
fgAppVoIP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108))
fgAppVoIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1), )
if mibBuilder.loadTexts: fgAppVoIPStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgAppVoIPStatsTable.setDescription('A table of VoIP related statistics per virtual domain')
fgAppVoIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppVoIPStatsEntry"))
fgAppVoIPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppVoIPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgAppVoIPStatsEntry.setDescription('VoIP statistics for a particular virtual domain')
fgAppVoIPConn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppVoIPConn.setStatus('current')
if mibBuilder.loadTexts: fgAppVoIPConn.setDescription('The current number of VoIP connections on the virtual domain')
fgAppVoIPCallBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 108, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppVoIPCallBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAppVoIPCallBlocked.setDescription('Number of VoIP calls blocked (SIP Invites blocked and SCCP calls blocked) in this virtual domain')
fgAppP2P = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109))
fgAppP2PStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1), )
if mibBuilder.loadTexts: fgAppP2PStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgAppP2PStatsTable.setDescription('A table of P2P protocol related statistics per virtual domain')
fgAppP2PStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppP2PStatsEntry"))
fgAppP2PStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppP2PStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgAppP2PStatsEntry.setDescription('P2P statistics for a particular virtual domain')
fgAppP2PConnBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PConnBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAppP2PConnBlocked.setDescription('Number of P2P connections blocked in this virtual domain')
fgAppP2PProtoTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2), )
if mibBuilder.loadTexts: fgAppP2PProtoTable.setStatus('current')
if mibBuilder.loadTexts: fgAppP2PProtoTable.setDescription('A table of peer to peer statistics per virtual domain per protocol. This table has a dependent expansion relationship with fgVdTable.')
fgAppP2PProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgAppP2PProtEntProto"))
if mibBuilder.loadTexts: fgAppP2PProtoEntry.setStatus('current')
if mibBuilder.loadTexts: fgAppP2PProtoEntry.setDescription('P2P statistics for a particular virtual domain and protocol')
fgAppP2PProtEntProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 1), FgP2PProto())
if mibBuilder.loadTexts: fgAppP2PProtEntProto.setStatus('current')
if mibBuilder.loadTexts: fgAppP2PProtEntProto.setDescription('P2P protocol this row of statistics is for, within the specified virtual domain')
fgAppP2PProtEntBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PProtEntBytes.setStatus('current')
if mibBuilder.loadTexts: fgAppP2PProtEntBytes.setDescription('Number of bytes transferred through this virtual domain on this P2P protocol since last reset')
fgAppP2PProtoEntLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 109, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppP2PProtoEntLastReset.setStatus('current')
if mibBuilder.loadTexts: fgAppP2PProtoEntLastReset.setDescription('Time elapsed since the corresponding fgAppP2PProtEntBytes was last reset to 0.')
fgAppIM = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110))
fgAppIMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1), )
if mibBuilder.loadTexts: fgAppIMStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgAppIMStatsTable.setDescription('A table of instant messaging statistics per virtual domain')
fgAppIMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgAppIMStatsEntry"))
fgAppIMStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgAppIMStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgAppIMStatsEntry.setDescription('IM statistics for a particular virtual domain')
fgAppIMMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMMessages.setStatus('current')
if mibBuilder.loadTexts: fgAppIMMessages.setDescription('Total number of IM messages processed in this virtual domain')
fgAppIMFileTransfered = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMFileTransfered.setStatus('current')
if mibBuilder.loadTexts: fgAppIMFileTransfered.setDescription('Number of files transferred through this virtual domain')
fgAppIMFileTxBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMFileTxBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAppIMFileTxBlocked.setDescription('Number of blocked file transfers in this virtual domain')
fgAppIMConnBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 110, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgAppIMConnBlocked.setStatus('current')
if mibBuilder.loadTexts: fgAppIMConnBlocked.setDescription('Number of connections blocked in this virtual domain')
fgAppProxyFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111))
fgApFTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPUpTime.setStatus('deprecated')
if mibBuilder.loadTexts: fgApFTPUpTime.setDescription('Up-time of the FTP proxy, in seconds')
fgApFTPMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPMemUsage.setStatus('deprecated')
if mibBuilder.loadTexts: fgApFTPMemUsage.setDescription('FTP Proxy memory utilization, as a percentage of the system total')
fgApFTPConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPConnections.setStatus('current')
if mibBuilder.loadTexts: fgApFTPConnections.setDescription('FTP proxy current connections')
fgApFTPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPMaxConnections.setStatus('current')
if mibBuilder.loadTexts: fgApFTPMaxConnections.setDescription('Maximum number of connections supported by FTP proxy')
fgApFTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3), )
if mibBuilder.loadTexts: fgApFTPStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgApFTPStatsTable.setDescription('A table of FTP proxy statistics per virtual domain')
fgApFTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgApFTPStatsEntry"))
fgApFTPStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgApFTPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgApFTPStatsEntry.setDescription('FTP Proxy statistics for a particular virtual domain')
fgApFTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 111, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgApFTPReqProcessed.setStatus('current')
if mibBuilder.loadTexts: fgApFTPReqProcessed.setDescription('Number of requests in this virtual domain processed by the FTP proxy since start-up')
fgAppExplicitProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112))
fgExplicitProxyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1))
fgExplicitProxyUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyUpTime.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyUpTime.setDescription('Explicit proxy up-time (in seconds)')
fgExplicitProxyMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyMemUsage.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyMemUsage.setDescription('Explicit proxy memory usage (percentage of system total)')
fgExplicitProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyRequests.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyRequests.setDescription('Explicit proxy total number of requests')
fgExplicitProxyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2), )
if mibBuilder.loadTexts: fgExplicitProxyStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyStatsTable.setDescription('A table of explicit proxy statistics per virtual domain')
fgExplicitProxyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyStatsEntry.setDescription('Explicit proxy statistics for a particular virtual domain')
fgExplicitProxyUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyUsers.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyUsers.setDescription('Number of current users in this virtual domain')
fgExplicitProxySessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxySessions.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxySessions.setDescription('Number of current sessions in this virtual domain')
fgExplicitProxyScanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3), )
if mibBuilder.loadTexts: fgExplicitProxyScanStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyScanStatsTable.setDescription('A table of explicit proxy scan statistics per virtual domain')
fgExplicitProxyScanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgExplicitProxyScanStatsDisp"))
if mibBuilder.loadTexts: fgExplicitProxyScanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyScanStatsEntry.setDescription('Explicit proxy scan statistics for a particular virtual domain')
fgExplicitProxyScanStatsDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 1), FgScanAvDisposition())
if mibBuilder.loadTexts: fgExplicitProxyScanStatsDisp.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyScanStatsDisp.setDescription('Disposition of an Scan result')
fgExplicitProxyVirus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyVirus.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyVirus.setDescription('Number of viruses in this virtual domain')
fgExplicitProxyBannedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBannedWords.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyBannedWords.setDescription('Number of elements containing banned words in this virtual domain')
fgExplicitProxyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyPolicy.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyPolicy.setDescription('Number of elements violating policy (e.g. filename or file type rules) in this virtual domain')
fgExplicitProxyOversized = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyOversized.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyOversized.setDescription('Number of oversized elements in this virtual domain')
fgExplicitProxyArchNest = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchNest.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyArchNest.setDescription('Number of too deeply nested archives in this virtual domain')
fgExplicitProxyArchSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchSize.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyArchSize.setDescription('Number of archives that decompress beyond size limit in this virtual domain')
fgExplicitProxyArchEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchEncrypted.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyArchEncrypted.setDescription('Number of encrypted archives in this virtual domain')
fgExplicitProxyArchMultiPart = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchMultiPart.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyArchMultiPart.setDescription('Number of multipart archives in this virtual domain')
fgExplicitProxyArchUnsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchUnsupported.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyArchUnsupported.setDescription('Number of archives with unsupported (but known) formats in this virtual domain')
fgExplicitProxyArchBomb = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchBomb.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyArchBomb.setDescription('Number of archive bombs in this virtual domain')
fgExplicitProxyArchCorrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyArchCorrupt.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyArchCorrupt.setDescription('Number of corrupt archives in this virtual domain')
fgExplicitProxyScriptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4), )
if mibBuilder.loadTexts: fgExplicitProxyScriptStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyScriptStatsTable.setDescription('A table of explicit proxy script filtering statistics per virtual domain')
fgExplicitProxyScriptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyScriptStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyScriptStatsEntry.setDescription('Explicit proxy scan statistics for a particular virtual domain')
fgExplicitProxyFilteredApplets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredApplets.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyFilteredApplets.setDescription('Number of applets filtered from files in this virtual domain')
fgExplicitProxyFilteredActiveX = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredActiveX.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyFilteredActiveX.setDescription('Number of ActiveX scripts filtered from files in this virtual domain')
fgExplicitProxyFilteredJScript = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredJScript.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyFilteredJScript.setDescription('Number of JScript scripts filtered from files in this virtual domain')
fgExplicitProxyFilteredJS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredJS.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyFilteredJS.setDescription('Number of JavaScript scripts filtered from files in this virtual domain')
fgExplicitProxyFilteredVBS = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredVBS.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyFilteredVBS.setDescription('Number of Visual Basic scripts filtered from files in this virtual domain')
fgExplicitProxyFilteredOthScript = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyFilteredOthScript.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyFilteredOthScript.setDescription('Number of other types of scripts filtered from files in this virtual domain')
fgExplicitProxyFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5), )
if mibBuilder.loadTexts: fgExplicitProxyFilterStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyFilterStatsTable.setDescription('A table of explicit proxy policy enforcement statistics per virtual domain')
fgExplicitProxyFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgExplicitProxyFilterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyFilterStatsEntry.setDescription('Explicit proxy scan statistics for a particular virtual domain')
fgExplicitProxyBlockedDLP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedDLP.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyBlockedDLP.setDescription('Number of elements blocked due to Data Leak Prevention in this virtual domain')
fgExplicitProxyBlockedConType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedConType.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyBlockedConType.setDescription('Number of elements blocked due to Content-Type filtering rules in this virtual domain')
fgExplicitProxyExaminedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyExaminedURLs.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyExaminedURLs.setDescription('Number of URLs inspected against filtering rules in this virtual domain')
fgExplicitProxyAllowedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyAllowedURLs.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyAllowedURLs.setDescription('Number of URLs explicitly allowed due to filtering rules in this virtual domain')
fgExplicitProxyBlockedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyBlockedURLs.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyBlockedURLs.setDescription('Number of URLs explicitly blocked due to filtering rules in this virtual domain')
fgExplicitProxyLoggedURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyLoggedURLs.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyLoggedURLs.setDescription('Number of URLs logged due to filtering rules in this virtual domain')
fgExplicitProxyOverriddenURLs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 112, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgExplicitProxyOverriddenURLs.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyOverriddenURLs.setDescription('Number of URLs access due to overriding filtering rules in this virtual domain')
fgAppWebCache = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113))
fgWebCacheInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1))
fgWebCacheRAMLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMLimit.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheRAMLimit.setDescription('RAM available for web cache in bytes')
fgWebCacheRAMUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMUsage.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheRAMUsage.setDescription('RAM used by web cache in bytes')
fgWebCacheRAMHits = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMHits.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheRAMHits.setDescription('Number of cache hits in RAM since last reset')
fgWebCacheRAMMisses = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRAMMisses.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheRAMMisses.setDescription('Number of cache misses in RAM since last reset')
fgWebCacheRequests = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheRequests.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheRequests.setDescription('Number of cache requests since last reset')
fgWebCacheBypass = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheBypass.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheBypass.setDescription('Number of cache bypasses since last reset')
fgWebCacheUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheUpTime.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheUpTime.setDescription('Web Cache up-time (in seconds)')
fgWebCacheDiskStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2), )
if mibBuilder.loadTexts: fgWebCacheDiskStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheDiskStatsTable.setDescription('A table of the Web Cache disk statistics per disk')
fgWebCacheDiskStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgWebCacheDisk"))
if mibBuilder.loadTexts: fgWebCacheDiskStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheDiskStatsEntry.setDescription('The Web Cache disk statistics for a particular disk')
fgWebCacheDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fgWebCacheDisk.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheDisk.setDescription('The Web Cache Disk index')
fgWebCacheDiskLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskLimit.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheDiskLimit.setDescription('The about of storage (in bytes) available for the Web Cache on a particular disk')
fgWebCacheDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskUsage.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheDiskUsage.setDescription('The about of storage (in bytes) in use by the Web Cache on a paricular disk')
fgWebCacheDiskHits = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskHits.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheDiskHits.setDescription('The number of cache hits on a paricular disk')
fgWebCacheDiskMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 113, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWebCacheDiskMisses.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheDiskMisses.setDescription('The number of cache misses on a paricular disk')
fgAppWanOpt = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114))
fgWanOptInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1))
fgMemCacheLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheLimit.setStatus('current')
if mibBuilder.loadTexts: fgMemCacheLimit.setDescription('RAM available for mem cache in bytes')
fgMemCacheUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheUsage.setStatus('current')
if mibBuilder.loadTexts: fgMemCacheUsage.setDescription('RAM used by mem cache in bytes')
fgMemCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheHits.setStatus('current')
if mibBuilder.loadTexts: fgMemCacheHits.setDescription('Number of hits in mem cache since last reset')
fgMemCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgMemCacheMisses.setStatus('current')
if mibBuilder.loadTexts: fgMemCacheMisses.setDescription('Number of misses in mem cache since last reset')
fgByteCacheRAMLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgByteCacheRAMLimit.setStatus('current')
if mibBuilder.loadTexts: fgByteCacheRAMLimit.setDescription('RAM available for byte cache in bytes')
fgByteCacheRAMUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgByteCacheRAMUsage.setStatus('current')
if mibBuilder.loadTexts: fgByteCacheRAMUsage.setDescription('RAM used by byte cache in bytes')
fgWanOptUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptUpTime.setStatus('current')
if mibBuilder.loadTexts: fgWanOptUpTime.setDescription('Wan Optimization up-time (in seconds)')
fgWanOptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2), )
if mibBuilder.loadTexts: fgWanOptStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgWanOptStatsTable.setDescription('A table of WAN optimization statistics per virtual domain')
fgWanOptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"))
if mibBuilder.loadTexts: fgWanOptStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgWanOptStatsEntry.setDescription('WAN optimization statistics for a particular virtual domain')
fgWanOptTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptTunnels.setStatus('current')
if mibBuilder.loadTexts: fgWanOptTunnels.setDescription('Number of current tunnels in this virtual domain')
fgWanOptLANBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLANBytesIn.setStatus('current')
if mibBuilder.loadTexts: fgWanOptLANBytesIn.setDescription('Number of bytes received on LAN in last 5 seconds')
fgWanOptLANBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLANBytesOut.setStatus('current')
if mibBuilder.loadTexts: fgWanOptLANBytesOut.setDescription('Number of bytes sent on LAN in last 5 seconds')
fgWanOptWANBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWANBytesIn.setStatus('current')
if mibBuilder.loadTexts: fgWanOptWANBytesIn.setDescription('Number of bytes received on WAN in last 5 seconds')
fgWanOptWANBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWANBytesOut.setStatus('current')
if mibBuilder.loadTexts: fgWanOptWANBytesOut.setDescription('Number of bytes sent on WAN in last 5 seconds')
fgWanOptHistoryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3), )
if mibBuilder.loadTexts: fgWanOptHistoryStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgWanOptHistoryStatsTable.setDescription('A table of the WAN optimization history per protocol')
fgWanOptHistoryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptHistPeriod"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptProtocol"))
if mibBuilder.loadTexts: fgWanOptHistoryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgWanOptHistoryStatsEntry.setDescription('The WAN optimization history for a particular virtual domain, period, and protocol')
fgWanOptHistPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 1), FgWanOptHistPeriods())
if mibBuilder.loadTexts: fgWanOptHistPeriod.setStatus('current')
if mibBuilder.loadTexts: fgWanOptHistPeriod.setDescription('WAN optimization table entry period')
fgWanOptProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 2), FgWanOptProtocols())
if mibBuilder.loadTexts: fgWanOptProtocol.setStatus('current')
if mibBuilder.loadTexts: fgWanOptProtocol.setDescription('Internal WAN optimization table entry protocol')
fgWanOptReductionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptReductionRate.setStatus('current')
if mibBuilder.loadTexts: fgWanOptReductionRate.setDescription('Reduction rate achieved by WAN optimization')
fgWanOptLanTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanTraffic.setStatus('current')
if mibBuilder.loadTexts: fgWanOptLanTraffic.setDescription('Number of bytes transferred via LAN')
fgWanOptWanTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 3, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanTraffic.setStatus('current')
if mibBuilder.loadTexts: fgWanOptWanTraffic.setDescription('Number of bytes transferred via WAN')
fgWanOptTrafficStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4), )
if mibBuilder.loadTexts: fgWanOptTrafficStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgWanOptTrafficStatsTable.setDescription('A table of the WAN optimization traffic for a particular virtual domain and protocol')
fgWanOptTrafficStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWanOptProtocol"))
if mibBuilder.loadTexts: fgWanOptTrafficStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgWanOptTrafficStatsEntry.setDescription('The WAN optimization history for a particular protocol')
fgWanOptLanInTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanInTraffic.setStatus('current')
if mibBuilder.loadTexts: fgWanOptLanInTraffic.setDescription('Amount of traffic received from the LAN by WAN optimization')
fgWanOptLanOutTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptLanOutTraffic.setStatus('current')
if mibBuilder.loadTexts: fgWanOptLanOutTraffic.setDescription('Amount of traffic sent to the LAN by WAN optimization')
fgWanOptWanInTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanInTraffic.setStatus('current')
if mibBuilder.loadTexts: fgWanOptWanInTraffic.setDescription('Amount of traffic received from the WAN by WAN optimization')
fgWanOptWanOutTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptWanOutTraffic.setStatus('current')
if mibBuilder.loadTexts: fgWanOptWanOutTraffic.setDescription('Amount of traffic sent to the WAN by WAN optimization')
fgWanOptDiskStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5), )
if mibBuilder.loadTexts: fgWanOptDiskStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgWanOptDiskStatsTable.setDescription('A table of the Web Cache disk statistics per disk')
fgWanOptDiskStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgWanOptDisk"))
if mibBuilder.loadTexts: fgWanOptDiskStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgWanOptDiskStatsEntry.setDescription('The Web Cache disk statistics for a particular disk')
fgWanOptDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fgWanOptDisk.setStatus('current')
if mibBuilder.loadTexts: fgWanOptDisk.setDescription('The Web Cache Disk index')
fgWanOptDiskLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskLimit.setStatus('current')
if mibBuilder.loadTexts: fgWanOptDiskLimit.setDescription('The about of storage (in bytes) available for the Web Cache on a particular disk')
fgWanOptDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskUsage.setStatus('current')
if mibBuilder.loadTexts: fgWanOptDiskUsage.setDescription('The about of storage (in bytes) in use by the Web Cache on a paricular disk')
fgWanOptDiskHits = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskHits.setStatus('current')
if mibBuilder.loadTexts: fgWanOptDiskHits.setDescription('The number of cache hits on a paricular disk')
fgWanOptDiskMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 10, 114, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWanOptDiskMisses.setStatus('current')
if mibBuilder.loadTexts: fgWanOptDiskMisses.setDescription('The number of cache misses on a paricular disk')
fgInetProto = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11))
fgInetProtoInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11, 1))
fgInetProtoTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2))
fgIpSessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1), )
if mibBuilder.loadTexts: fgIpSessTable.setStatus('current')
if mibBuilder.loadTexts: fgIpSessTable.setDescription('Information on the IP sessions active on the device')
fgIpSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgIpSessIndex"))
if mibBuilder.loadTexts: fgIpSessEntry.setStatus('current')
if mibBuilder.loadTexts: fgIpSessEntry.setDescription('Information on a specific session, including source and destination')
fgIpSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgIpSessIndex.setStatus('current')
if mibBuilder.loadTexts: fgIpSessIndex.setDescription('An index value that uniquely identifies an IP session within the fgIpSessTable')
fgIpSessProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 2), FgSessProto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessProto.setStatus('current')
if mibBuilder.loadTexts: fgIpSessProto.setDescription('The protocol the session is using (IP, TCP, UDP, etc.)')
fgIpSessFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessFromAddr.setStatus('current')
if mibBuilder.loadTexts: fgIpSessFromAddr.setDescription('Source IP address (IPv4 only) of the session')
fgIpSessFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessFromPort.setStatus('current')
if mibBuilder.loadTexts: fgIpSessFromPort.setDescription('Source port number (UDP and TCP only) of the session')
fgIpSessToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessToAddr.setStatus('current')
if mibBuilder.loadTexts: fgIpSessToAddr.setDescription('Destination IP address (IPv4 only) of the session')
fgIpSessToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessToPort.setStatus('current')
if mibBuilder.loadTexts: fgIpSessToPort.setDescription('Destination Port number (UDP and TCP only) of the session')
fgIpSessExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessExp.setStatus('current')
if mibBuilder.loadTexts: fgIpSessExp.setDescription('Number of seconds remaining before the session expires (if idle)')
fgIpSessVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 1, 1, 8), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessVdom.setStatus('current')
if mibBuilder.loadTexts: fgIpSessVdom.setDescription('Virtual domain the session is part of. This index corresponds to the index used by fgVdTable.')
fgIpSessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2), )
if mibBuilder.loadTexts: fgIpSessStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgIpSessStatsTable.setDescription('IP session statistics table')
fgIpSessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIpSessStatsEntry"))
fgIpSessStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIpSessStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgIpSessStatsEntry.setDescription('IP session statistics on a virtual domain')
fgIpSessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIpSessNumber.setStatus('current')
if mibBuilder.loadTexts: fgIpSessNumber.setDescription('Current number of sessions on the virtual domain')
fgIp6SessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3), )
if mibBuilder.loadTexts: fgIp6SessStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgIp6SessStatsTable.setDescription('IP session statistics table')
fgIp6SessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgIp6SessStatsEntry"))
fgIp6SessStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgIp6SessStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgIp6SessStatsEntry.setDescription('IP session statistics on a virtual domain')
fgIp6SessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 11, 2, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgIp6SessNumber.setStatus('current')
if mibBuilder.loadTexts: fgIp6SessNumber.setDescription('Current number of sessions on the virtual domain')
fgVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12))
fgVpnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 1))
fgVpnTunnelUpCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunnelUpCount.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunnelUpCount.setDescription('The number of IPsec VPN tunnels with at least one SA')
fgVpnTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2))
fgVpnDialupTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1), )
if mibBuilder.loadTexts: fgVpnDialupTable.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupTable.setDescription('Dial-up VPN peers information')
fgVpnDialupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnDialupIndex"))
if mibBuilder.loadTexts: fgVpnDialupEntry.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupEntry.setDescription('Dial-up VPN peer info')
fgVpnDialupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnDialupIndex.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupIndex.setDescription('An index value that uniquely identifies an VPN dial-up peer within the fgVpnDialupTable')
fgVpnDialupGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupGateway.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupGateway.setDescription('Remote gateway IP address of the tunnel')
fgVpnDialupLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupLifetime.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupLifetime.setDescription('Tunnel life time (seconds) of the tunnel')
fgVpnDialupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupTimeout.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupTimeout.setDescription('Time before the next key exchange (seconds) of the tunnel')
fgVpnDialupSrcBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupSrcBegin.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupSrcBegin.setDescription('Remote subnet address of the tunnel')
fgVpnDialupSrcEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupSrcEnd.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupSrcEnd.setDescription('Remote subnet mask of the tunnel')
fgVpnDialupDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupDstAddr.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupDstAddr.setDescription('Local subnet address of the tunnel')
fgVpnDialupVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 8), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupVdom.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupVdom.setDescription('Virtual domain tunnel is part of. This index corresponds to the index used by fgVdTable.')
fgVpnDialupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupInOctets.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupInOctets.setDescription('Number of bytes received on tunnel since instantiation.')
fgVpnDialupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnDialupOutOctets.setStatus('current')
if mibBuilder.loadTexts: fgVpnDialupOutOctets.setDescription('Number of bytes sent on tunnel since instantiation.')
fgVpnTunTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2), )
if mibBuilder.loadTexts: fgVpnTunTable.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunTable.setDescription('Table of non-dial-up IPsec VPN tunnels')
fgVpnTunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnTunEntIndex"))
if mibBuilder.loadTexts: fgVpnTunEntry.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntry.setDescription('Tunnel VPN peer info')
fgVpnTunEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnTunEntIndex.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntIndex.setDescription('An index value that uniquely identifies a VPN tunnel within the fgVpnTunTable')
fgVpnTunEntPhase1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntPhase1Name.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntPhase1Name.setDescription('Descriptive name of phase1 configuration for the tunnel')
fgVpnTunEntPhase2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntPhase2Name.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntPhase2Name.setDescription('Descriptive name of phase2 configuration for the tunnel')
fgVpnTunEntRemGwyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntRemGwyIp.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntRemGwyIp.setDescription('IP of remote gateway used by the tunnel')
fgVpnTunEntRemGwyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntRemGwyPort.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntRemGwyPort.setDescription('port of remote gateway used by tunnel, if UDP')
fgVpnTunEntLocGwyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLocGwyIp.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntLocGwyIp.setDescription('IP of local gateway used by the tunnel')
fgVpnTunEntLocGwyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLocGwyPort.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntLocGwyPort.setDescription('port of local gateway used by tunnel, if UDP')
fgVpnTunEntSelectorSrcBeginIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcBeginIp.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcBeginIp.setDescription('Beginning of address range of source selector')
fgVpnTunEntSelectorSrcEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcEndIp.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcEndIp.setDescription('End of address range of source selector')
fgVpnTunEntSelectorSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 10), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcPort.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntSelectorSrcPort.setDescription('Source selector port')
fgVpnTunEntSelectorDstBeginIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstBeginIp.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstBeginIp.setDescription('Beginning of address range of destination selector')
fgVpnTunEntSelectorDstEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstEndIp.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstEndIp.setDescription('End of address range of destination selector')
fgVpnTunEntSelectorDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstPort.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntSelectorDstPort.setDescription('Destination selector port')
fgVpnTunEntSelectorProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntSelectorProto.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntSelectorProto.setDescription('Protocol number for selector')
fgVpnTunEntLifeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLifeSecs.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntLifeSecs.setDescription('Lifetime of tunnel in seconds, if time based lifetime used')
fgVpnTunEntLifeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntLifeBytes.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntLifeBytes.setDescription('Lifetime of tunnel in bytes, if byte transfer based lifetime used')
fgVpnTunEntTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntTimeout.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntTimeout.setDescription('Timeout of tunnel in seconds')
fgVpnTunEntInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntInOctets.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntInOctets.setDescription('Number of bytes received on tunnel')
fgVpnTunEntOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntOutOctets.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntOutOctets.setDescription('Number of bytes sent out on tunnel')
fgVpnTunEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntStatus.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntStatus.setDescription('Current status of tunnel (up or down)')
fgVpnTunEntVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 2, 1, 21), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnTunEntVdom.setStatus('current')
if mibBuilder.loadTexts: fgVpnTunEntVdom.setDescription('Virtual domain the tunnel is part of. This index corresponds to the index used by fgVdTable.')
fgVpnSslStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3), )
if mibBuilder.loadTexts: fgVpnSslStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslStatsTable.setDescription('SSL VPN statistics table')
fgVpnSslStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1), )
fgVdEntry.registerAugmentions(("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsEntry"))
fgVpnSslStatsEntry.setIndexNames(*fgVdEntry.getIndexNames())
if mibBuilder.loadTexts: fgVpnSslStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslStatsEntry.setDescription('SSL VPN statistics for a given virtual domain')
fgVpnSslState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 1), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslState.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslState.setDescription('Whether SSL-VPN is enabled on this virtual domain')
fgVpnSslStatsLoginUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsLoginUsers.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslStatsLoginUsers.setDescription('The current number of users logged in through SSL-VPN tunnels in the virtual domain')
fgVpnSslStatsMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxUsers.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslStatsMaxUsers.setDescription('The maximum number of total users that can be logged in at any one time on the virtual domain')
fgVpnSslStatsActiveWebSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsActiveWebSessions.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslStatsActiveWebSessions.setDescription('The current number of active SSL web sessions in the virtual domain')
fgVpnSslStatsMaxWebSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxWebSessions.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslStatsMaxWebSessions.setDescription('The maximum number of active SSL web sessions at any one time within the virtual domain')
fgVpnSslStatsActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslStatsActiveTunnels.setDescription('The current number of active SSL tunnels in the virtual domain')
fgVpnSslStatsMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslStatsMaxTunnels.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslStatsMaxTunnels.setDescription('The maximum number of active SSL tunnels at any one time in the virtual domain')
fgVpnSslTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4), )
if mibBuilder.loadTexts: fgVpnSslTunnelTable.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelTable.setDescription('A list of active SSL VPN tunnel entries')
fgVpnSslTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelIndex"))
if mibBuilder.loadTexts: fgVpnSslTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelEntry.setDescription('An SSL VPN tunnel entry containing connection information and traffic statistics')
fgVpnSslTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgVpnSslTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelIndex.setDescription('An index value that uniquely identifies an active SSL VPN tunnel within the fgVpnSslTunnelTable')
fgVpnSslTunnelVdom = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 2), FgVdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelVdom.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelVdom.setDescription('The index of the virtual domain this tunnel belongs to. This index corresponds to the index used by fgVdTable.')
fgVpnSslTunnelUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelUserName.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelUserName.setDescription('The user name used to authenticate the tunnel')
fgVpnSslTunnelSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelSrcIp.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelSrcIp.setDescription('The source IP address of this tunnel')
fgVpnSslTunnelIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelIp.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelIp.setDescription('The connection IP address of this tunnel')
fgVpnSslTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelUpTime.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelUpTime.setDescription('The up-time of this tunnel in seconds')
fgVpnSslTunnelBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelBytesIn.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelBytesIn.setDescription('The number of incoming bytes of L2 traffic through this tunnel since it was established')
fgVpnSslTunnelBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 12, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgVpnSslTunnelBytesOut.setStatus('current')
if mibBuilder.loadTexts: fgVpnSslTunnelBytesOut.setDescription('The number of outgoing bytes of L2 traffic through this tunnel since it was established')
fgVpnTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3))
fgVpnTrapLocalGateway = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapLocalGateway.setStatus('current')
if mibBuilder.loadTexts: fgVpnTrapLocalGateway.setDescription('Local gateway IP address. Used in VPN related traps.')
fgVpnTrapRemoteGateway = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapRemoteGateway.setStatus('current')
if mibBuilder.loadTexts: fgVpnTrapRemoteGateway.setDescription('Remote gateway IP address. Used in VPN related traps.')
fgVpnTrapPhase1Name = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 12, 3, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgVpnTrapPhase1Name.setStatus('current')
if mibBuilder.loadTexts: fgVpnTrapPhase1Name.setDescription('Name of the phase 1. Used in VPN related traps.')
fgHighAvailability = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13))
fgHaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1))
fgHaSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 1), FgHaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaSystemMode.setStatus('current')
if mibBuilder.loadTexts: fgHaSystemMode.setDescription('High-availability mode (Standalone, A-A or A-P)')
fgHaGroupId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 2), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaGroupId.setStatus('current')
if mibBuilder.loadTexts: fgHaGroupId.setDescription('HA cluster group ID device is configured for')
fgHaPriority = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaPriority.setStatus('current')
if mibBuilder.loadTexts: fgHaPriority.setDescription('HA clustering priority of the device (default = 127)')
fgHaOverride = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaOverride.setStatus('current')
if mibBuilder.loadTexts: fgHaOverride.setDescription('Status of a master override flag')
fgHaAutoSync = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 5), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaAutoSync.setStatus('current')
if mibBuilder.loadTexts: fgHaAutoSync.setDescription('Configuration of an automatic configuration synchronization (enabled or disabled)')
fgHaSchedule = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 6), FgHaLBSchedule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaSchedule.setStatus('current')
if mibBuilder.loadTexts: fgHaSchedule.setDescription('Load-balancing schedule of cluster (in A-A mode)')
fgHaGroupName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaGroupName.setStatus('current')
if mibBuilder.loadTexts: fgHaGroupName.setDescription('HA cluster group name')
fgHaTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2))
fgHaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1), )
if mibBuilder.loadTexts: fgHaStatsTable.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsTable.setDescription('Some useful statistics for all members of a cluster. This table is also available in standalone mode.')
fgHaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgHaStatsIndex"))
if mibBuilder.loadTexts: fgHaStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsEntry.setDescription("Statistics for a particular HA cluster's unit")
fgHaStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 1), FnIndex())
if mibBuilder.loadTexts: fgHaStatsIndex.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsIndex.setDescription('An index value that uniquely identifies an unit in the HA Cluster')
fgHaStatsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSerial.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsSerial.setDescription('Serial number of the HA cluster member for this row')
fgHaStatsCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsCpuUsage.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsCpuUsage.setDescription('CPU usage of the specified cluster member (percentage)')
fgHaStatsMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsMemUsage.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsMemUsage.setDescription('Memory usage of the specified cluster member (percentage)')
fgHaStatsNetUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsNetUsage.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsNetUsage.setDescription('Network bandwidth usage of specified cluster member (kbps)')
fgHaStatsSesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSesCount.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsSesCount.setDescription('Current session count of specified cluster member')
fgHaStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsPktCount.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsPktCount.setDescription('Number of packets processed by the specified cluster member since start-up')
fgHaStatsByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsByteCount.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsByteCount.setDescription('Number of bytes processed by the specified cluster member since start-up')
fgHaStatsIdsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsIdsCount.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsIdsCount.setDescription('Number of IDS/IPS events triggered on the specified cluster member since start-up')
fgHaStatsAvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsAvCount.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsAvCount.setDescription('Number of anti-virus events triggered on the specified cluster member since start-up')
fgHaStatsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsHostname.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsHostname.setDescription('Host name of the specified cluster member')
fgHaStatsSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 12), FgHaStatsSyncStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncStatus.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsSyncStatus.setDescription('Current HA Sync status')
fgHaStatsSyncDatimeSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncDatimeSucc.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsSyncDatimeSucc.setDescription('Date and time of last successful sync')
fgHaStatsSyncDatimeUnsucc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsSyncDatimeUnsucc.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsSyncDatimeUnsucc.setDescription('Date and time of last unsuccessful sync')
fgHaStatsGlobalChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsGlobalChecksum.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsGlobalChecksum.setDescription('Current HA global checksum value')
fgHaStatsMasterSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 13, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgHaStatsMasterSerial.setStatus('current')
if mibBuilder.loadTexts: fgHaStatsMasterSerial.setDescription('Serial number of master during the last synch attempt (successful of not)')
fgHaTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 13, 3))
fgHaTrapMemberSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 13, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgHaTrapMemberSerial.setStatus('current')
if mibBuilder.loadTexts: fgHaTrapMemberSerial.setDescription('Serial number of an HA cluster member. Used to identify the origin of a trap when a cluster is configured.')
fgWc = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14))
fgWcTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1))
fgWcApVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 1), FgVdIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApVdom.setStatus('current')
if mibBuilder.loadTexts: fgWcApVdom.setDescription('Virtual domain the wtp is part of')
fgWcApSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApSerial.setStatus('current')
if mibBuilder.loadTexts: fgWcApSerial.setDescription('Serial number of the wtp')
fgWcApName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgWcApName.setStatus('current')
if mibBuilder.loadTexts: fgWcApName.setDescription('Name of the wtp')
fgWcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2))
fgWcInfoName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoName.setStatus('current')
if mibBuilder.loadTexts: fgWcInfoName.setDescription('Represents the name of an AC')
fgWcInfoLocation = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoLocation.setStatus('current')
if mibBuilder.loadTexts: fgWcInfoLocation.setDescription('Represents the location of an AC')
fgWcInfoWtpCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpCapacity.setStatus('current')
if mibBuilder.loadTexts: fgWcInfoWtpCapacity.setDescription('Represents the maximum number of WTPs that can be managed on the AC.')
fgWcInfoWtpManaged = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpManaged.setStatus('current')
if mibBuilder.loadTexts: fgWcInfoWtpManaged.setDescription('Represents the number of WTPs being managed on the AC.')
fgWcInfoWtpSessions = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoWtpSessions.setStatus('current')
if mibBuilder.loadTexts: fgWcInfoWtpSessions.setDescription('Represents the number of WTPs that are connecting to the AC.')
fgWcInfoStationCapacity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoStationCapacity.setStatus('current')
if mibBuilder.loadTexts: fgWcInfoStationCapacity.setDescription('Represents the maximum number of stations that can be supported on the AC.')
fgWcInfoStationCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 14, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcInfoStationCount.setStatus('current')
if mibBuilder.loadTexts: fgWcInfoStationCount.setDescription('Represents the number of stations that are accessing the wireless service provided by the AC.')
fgWcWlanTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3), )
if mibBuilder.loadTexts: fgWcWlanTable.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanTable.setDescription('A table that allows the operator to display WLAN profiles.')
fgWcWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgWcWlanEntry.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanEntry.setDescription('A set of objects that stores the settings of a WLAN profile.')
fgWcWlanSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanSsid.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanSsid.setDescription('Service set ID of this WLAN profile.')
fgWcWlanBroadcastSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 2), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanBroadcastSsid.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanBroadcastSsid.setDescription('Whether SSID broadcast is enabled on this WLAN profile.')
fgWcWlanSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 3), FgWcWlanSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanSecurity.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanSecurity.setDescription('Represents the security type of the WLAN profile.')
fgWcWlanEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 4), FgWcWlanEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanEncryption.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanEncryption.setDescription('Represents the encryption method of the WLAN profile.')
fgWcWlanAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 5), FgWcWlanAuthenticationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanAuthentication.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanAuthentication.setDescription('Represents the authentication method of the WLAN profile.')
fgWcWlanRadiusServer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanRadiusServer.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanRadiusServer.setDescription('Represents the specified RADIUS server of the WLAN profile.')
fgWcWlanUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanUserGroup.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanUserGroup.setDescription('Represents the specified user group of the WLAN profile.')
fgWcWlanLocalBridging = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 8), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanLocalBridging.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanLocalBridging.setDescription('Whether local bridging is enabled on this WLAN profile.')
fgWcWlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanVlanId.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanVlanId.setDescription('Represents the VLAN ID of the WLAN profile.')
fgWcWlanMeshBackhaul = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 10), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanMeshBackhaul.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanMeshBackhaul.setDescription('Whether mesh backhaul is enabled on this WLAN profile.')
fgWcWlanStationCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanStationCapacity.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanStationCapacity.setDescription('Represents the maximum number of clients allowed on this WLAN profile.')
fgWcWlanStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWlanStationCount.setStatus('current')
if mibBuilder.loadTexts: fgWcWlanStationCount.setDescription('Represents the number of clients currently connected to this WLAN profile.')
fgWcWtpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4))
fgWcWtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1), )
if mibBuilder.loadTexts: fgWcWtpProfileTable.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileTable.setDescription('A table of objects that display WTP profiles for WTPs to be managed before they connect to the AC. A WTP could get the new configuration through the CAPWAP control channel.')
fgWcWtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileName"))
if mibBuilder.loadTexts: fgWcWtpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileEntry.setDescription('A set of objects that display a WTP profile.')
fgWcWtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpProfileName.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileName.setDescription('Represents the name of a WTP profile.')
fgWcWtpProfilePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfilePlatform.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfilePlatform.setDescription('Represents the hardware platform of a WTP profile.')
fgWcWtpProfileDataChannelDtlsPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("clear", 1), ("dtls", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileDataChannelDtlsPolicy.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileDataChannelDtlsPolicy.setDescription('The AC communicates its policy on the use of DTLS for the CAPWAP data channel. The AC MAY support more than one option, represented by the bit field below: other(0) - Other method, for example, vendor specific clear(1) - Clear text dtls(2) - DTLS')
fgWcWtpProfileCountryString = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 1, 1, 4), FgWcCountryString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileCountryString.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileCountryString.setDescription('Represents the country setting of a WTP profile, in ISO string format.')
fgWcWtpProfileRadioTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2), )
if mibBuilder.loadTexts: fgWcWtpProfileRadioTable.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioTable.setDescription('A table of objects that display WTP radio profiles for WTP radios to be managed before the WTPs connect to the AC. A WTP radio could get the new configuration through the CAPWAP control channel.')
fgWcWtpProfileRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioProfileName"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioRadioId"))
if mibBuilder.loadTexts: fgWcWtpProfileRadioEntry.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioEntry.setDescription('A set of objects that display a WTP radio profile.')
fgWcWtpProfileRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpProfileRadioProfileName.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioProfileName.setDescription('Represents the name of a WTP profile.')
fgWcWtpProfileRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpProfileRadioRadioId.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioRadioId.setDescription('Represents the radio Id of a WTP radio.')
fgWcWtpProfileRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 3), FgWcWtpRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioMode.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioMode.setDescription('Represents the operating mode of a WTP radio.')
fgWcWtpProfileRadioApScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioApScan.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioApScan.setDescription('Whether background scan is enabled on this WTP radio.')
fgWcWtpProfileRadioWidsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioWidsProfile.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioWidsProfile.setDescription('Represents the WIDS profile configured for this WTP radio.')
fgWcWtpProfileRadioDarrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 6), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioDarrp.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioDarrp.setDescription('Whether DARRP is enabled on this WTP radio.')
fgWcWtpProfileRadioFrequencyHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 7), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioFrequencyHandoff.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioFrequencyHandoff.setDescription('Whether frequency handoff is enabled on this WTP radio.')
fgWcWtpProfileRadioApHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 8), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioApHandoff.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioApHandoff.setDescription('Whether AP handoff is enabled on this WTP radio.')
fgWcWtpProfileRadioBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioBeaconInterval.setDescription('This attribute shall specify the number of TUs that a station shall use for scheduling Beacon transmissions. This value is transmitted in Beacon and Probe Response frames.')
fgWcWtpProfileRadioDtimPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioDtimPeriod.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioDtimPeriod.setDescription('This attribute shall specify the number of beacon intervals that shall elapse between transmission of Beacon frames containing a TIM element whose DTIM Count field is 0. This value is transmitted in the DTIM Period field of Beacon frames.')
fgWcWtpProfileRadioBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 11), FgWcWtpRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioBand.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioBand.setDescription('Represents the radio band setting configured for this WTP radio.')
fgWcWtpProfileRadioChannelBonding = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 12), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannelBonding.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannelBonding.setDescription('Whether channel bonding is enabled on this WTP radio.')
fgWcWtpProfileRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannel.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannel.setDescription('Represents a list of channels configured for this WTP radio.')
fgWcWtpProfileRadioAutoTxPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 14), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerControl.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerControl.setDescription('Whether automatic TX power control is enabled on this WTP radio.')
fgWcWtpProfileRadioAutoTxPowerLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerLow.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerLow.setDescription('Represents the low limit of the power level configured for this WTP radio, in dBm. Applicable only when auto power leveling is enabled.')
fgWcWtpProfileRadioAutoTxPowerHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerHigh.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioAutoTxPowerHigh.setDescription('Represents the high limit of the power level configured for this WTP radio, in dBm. Applicable only when auto power leveling is enabled.')
fgWcWtpProfileRadioTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioTxPowerLevel.setDescription('Represents the radio TX power setting configured for this WTP radio, in percentage. Application only when auto power leveling is disabled.')
fgWcWtpProfileRadioVaps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioVaps.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioVaps.setDescription('Represents a list of WLANs configured for this WTP radio.')
fgWcWtpProfileRadioStationCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioStationCapacity.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioStationCapacity.setDescription('Represents the maximum number of clients allowed on this WTP radio.')
fgWcWtpProfileRadioChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 2, 1, 20), FgWcWtpChannelWidthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannelWidth.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpProfileRadioChannelWidth.setDescription('Represents the channel width on this WTP radio.')
fgWcWtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3), )
if mibBuilder.loadTexts: fgWcWtpConfigTable.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigTable.setDescription('A table of objects that display the configuration of WTPs.')
fgWcWtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpId"))
if mibBuilder.loadTexts: fgWcWtpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigEntry.setDescription('A set of objects that display the configuration of a WTP.')
fgWcWtpConfigWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpConfigWtpId.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigWtpId.setDescription('Represents the unique identifier of a WTP.')
fgWcWtpConfigWtpAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("discovered", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpAdmin.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigWtpAdmin.setDescription('Represents the administrative status of this WTP. The following enumerated values are supported: discovered(1) - This WTP was discovered though discovery or join request messages. disable(2) - Controller is configured to not provide service to this WTP. enable(3), - Controller is configured to provide service to this WTP. other(0) - The administration state of the WTP is unknown.')
fgWcWtpConfigWtpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpName.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigWtpName.setDescription('Represents the name configured for this WTP.')
fgWcWtpConfigWtpLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpLocation.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigWtpLocation.setDescription('Represents the location of this WTP.')
fgWcWtpConfigWtpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigWtpProfile.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigWtpProfile.setDescription('Represents the WTP profile configured for this WTP.')
fgWcWtpConfigRadioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 6), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioEnable.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigRadioEnable.setDescription('Whether radio is enabled for this WTP.')
fgWcWtpConfigRadioAutoTxPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 7), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerControl.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerControl.setDescription('Whether radio automatic TX power control is enabled on this WTP.')
fgWcWtpConfigRadioAutoTxPowerLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerLow.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerLow.setDescription('Represents the low limit of radio automatic TX power control configured for this WTP, in dBm.')
fgWcWtpConfigRadioAutoTxPowerHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerHigh.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigRadioAutoTxPowerHigh.setDescription('Represents the high limit of radio automatic TX power control configured for this WTP, in dBm.')
fgWcWtpConfigRadioTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigRadioTxPowerLevel.setDescription('Represents the radio TX power setting configured for this WTP, in percentage.')
fgWcWtpConfigRadioBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 11), FgWcWtpRadioBandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioBand.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigRadioBand.setDescription('Represents the radio band configured for this WTP.')
fgWcWtpConfigRadioApScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 12), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigRadioApScan.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigRadioApScan.setDescription('Whether background scan is enabled on this WTP.')
fgWcWtpConfigVapAll = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 13), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigVapAll.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigVapAll.setDescription('Whether all VAPs are selected for this WTP.')
fgWcWtpConfigVaps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpConfigVaps.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpConfigVaps.setDescription('Represents a list of VAPs configured for this WTP.')
fgWcWtpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4), )
if mibBuilder.loadTexts: fgWcWtpSessionTable.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionTable.setDescription("A table of objects that indicate the AC's CAPWAP FSM state for each WTP, and helps the operator to query a WTP's current status.")
fgWcWtpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpId"))
if mibBuilder.loadTexts: fgWcWtpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionEntry.setDescription("A set of objects that displays the AC's CAPWAP FSM state for each WTP. Also, the operator could query the current status of a WTP by using the identifier of the corresponding WTP.")
fgWcWtpSessionWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionWtpId.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpId.setDescription('Represents the unique identifier of a WTP.')
fgWcWtpSessionWtpIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpIpAddressType.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpIpAddressType.setDescription('Represents the IP address type of a WTP. Only ipv4(1) and ipv6(2) are supported by the object.')
fgWcWtpSessionWtpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpIpAddress.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpIpAddress.setDescription('Represents the IP address of a WTP that corresponds to the IP address in the IP packet header. The format of this IP address is determined by the corresponding instance of object fgWcWtpWtpIpAddressType.')
fgWcWtpSessionWtpLocalIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpLocalIpAddressType.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpLocalIpAddressType.setDescription('Represents the local IP address type of a WTP. Only ipv4(1) and ipv6(2) are supported by the object.')
fgWcWtpSessionWtpLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpLocalIpAddress.setDescription('Represents the local IP address of a WTP and models the CAPWAP Local IPv4 Address or CAPWAP Local IPv6 Address fields [RFC5415]. If a Network Address Translation (NAT) device is present between WTP and AC, the value of fgWcWtpWtpLocalIpAddress will be different from the value of fgWcWtpWtpIpAddress. The format of this IP address is determined by the corresponding instance of object fgWcWtpSessionWtpLocalIpAddressType.')
fgWcWtpSessionWtpBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 6), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpBaseMacAddress.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpBaseMacAddress.setDescription("Represents the WTP's Base MAC Address, which MAY be assigned to the primary Ethernet interface. The instance of the object corresponds to the Base MAC Address sub-element in the CAPWAP protocol [RFC5415].")
fgWcWtpSessionConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("offLine", 1), ("onLine", 2), ("downloadingImage", 3), ("connectedImage", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionConnectionState.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionConnectionState.setDescription('Represents the connection state of a WTP to AC. The following enumerated values are supported: offLine(1) - The WTP is not connected. onLine(2) - The WTP is connected. downloadingImage(3) - The WTP is downloading software image from the AC on joining. connectedImage(4) - The AC is pushing software image to the connected WTP. other(0) - The WTP connection state is unknown.')
fgWcWtpSessionWtpUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpUpTime.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpUpTime.setDescription('Represents the time (in hundredths of a second) since the WTP boots.')
fgWcWtpSessionWtpDaemonUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpDaemonUpTime.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpDaemonUpTime.setDescription('Represents the time (in hundredths of a second) since the WTP daemon has been started.')
fgWcWtpSessionWtpSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpSessionUpTime.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpSessionUpTime.setDescription('Represents the time (in hundredths of a second) since the WTP connects to the AC.')
fgWcWtpSessionWtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpProfileName.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpProfileName.setDescription('Represents the profile configured for this WTP.')
fgWcWtpSessionWtpModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpModelNumber.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpModelNumber.setDescription('Represents the model number of a WTP.')
fgWcWtpSessionWtpHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpHwVersion.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpHwVersion.setDescription('Represents the hardware version of a WTP.')
fgWcWtpSessionWtpSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpSwVersion.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpSwVersion.setDescription('Represents the software version of a WTP.')
fgWcWtpSessionWtpBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpBootVersion.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpBootVersion.setDescription('Represents the boot loader version of a WTP.')
fgWcWtpSessionWtpRegionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpRegionCode.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpRegionCode.setDescription('Represents the region code programmed for this WTP.')
fgWcWtpSessionWtpStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpStationCount.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpStationCount.setDescription('Represents the number of clients currently connected to this WTP.')
fgWcWtpSessionWtpByteRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpByteRxCount.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpByteRxCount.setDescription('Represents the number of bytes received by this WTP.')
fgWcWtpSessionWtpByteTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpByteTxCount.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpByteTxCount.setDescription('Represents the number of bytes transmitted by this WTP.')
fgWcWtpSessionWtpCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpCpuUsage.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpCpuUsage.setDescription('Represents the current CPU usage of a WTP (percentage).')
fgWcWtpSessionWtpMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 21), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpMemoryUsage.setDescription('Represents the current memory usage of a WTP (percentage).')
fgWcWtpSessionWtpMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 4, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionWtpMemoryCapacity.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionWtpMemoryCapacity.setDescription('Represents the total physical memory (RAM) installed (KB).')
fgWcWtpSessionRadioTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5), )
if mibBuilder.loadTexts: fgWcWtpSessionRadioTable.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioTable.setDescription('A table of objects that display the status of radios in WTP sessions.')
fgWcWtpSessionRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioWtpId"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioRadioId"))
if mibBuilder.loadTexts: fgWcWtpSessionRadioEntry.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioEntry.setDescription('A set of objects that display the status of a radio in a WTP session.')
fgWcWtpSessionRadioWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionRadioWtpId.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioWtpId.setDescription('Represents the unique identifier of a WTP.')
fgWcWtpSessionRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpSessionRadioRadioId.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioRadioId.setDescription('Represents the radio Id of a radio.')
fgWcWtpSessionRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 3), FgWcWtpRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioMode.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioMode.setDescription('Represents the operating mode of this radio.')
fgWcWtpSessionRadioBaseBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 4), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioBaseBssid.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioBaseBssid.setDescription('Represents base bssid of this radio.')
fgWcWtpSessionRadioCountryString = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 5), FgWcCountryString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioCountryString.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioCountryString.setDescription('Represents the current operating country string, in ISO string format.')
fgWcWtpSessionRadioCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioCountryCode.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioCountryCode.setDescription('Represents the current operating country code.')
fgWcWtpSessionRadioOperatingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 7), FgWcWtpRadioChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioOperatingChannel.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioOperatingChannel.setDescription('Represents the current operating channel of this radio.')
fgWcWtpSessionRadioOperatingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioOperatingPower.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioOperatingPower.setDescription('Represents the current operating power of this radio, in dBm.')
fgWcWtpSessionRadioStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionRadioStationCount.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionRadioStationCount.setDescription('Represents the number of clients currently connected to this radio.')
fgWcWtpSessionVapTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6), )
if mibBuilder.loadTexts: fgWcWtpSessionVapTable.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionVapTable.setDescription('A table of objects that display the status of VAPs in WTP sessions. A VAP represents an SSID that is assigned on a WTP radio.')
fgWcWtpSessionVapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapWtpId"), (0, "FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapRadioId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fgWcWtpSessionVapEntry.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionVapEntry.setDescription('A set of objects that display the status of a VAP in a WTP session.')
fgWcWtpSessionVapWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: fgWcWtpSessionVapWtpId.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionVapWtpId.setDescription('Represents the unique identifier of a WTP.')
fgWcWtpSessionVapRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 2), FgWcWtpRadioId())
if mibBuilder.loadTexts: fgWcWtpSessionVapRadioId.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionVapRadioId.setDescription('Represents the radio Id of a VAP.')
fgWcWtpSessionVapSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapSsid.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionVapSsid.setDescription('Service set ID of this VAP interface.')
fgWcWtpSessionVapStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapStationCount.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionVapStationCount.setDescription('Represents the number of clients currently connected to this VAP.')
fgWcWtpSessionVapByteRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapByteRxCount.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionVapByteRxCount.setDescription('Represents the number of bytes received by this VAP.')
fgWcWtpSessionVapByteTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 4, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcWtpSessionVapByteTxCount.setStatus('current')
if mibBuilder.loadTexts: fgWcWtpSessionVapByteTxCount.setDescription('Represents the number of bytes transmitted by this VAP.')
fgWcStaTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5), )
if mibBuilder.loadTexts: fgWcStaTable.setStatus('current')
if mibBuilder.loadTexts: fgWcStaTable.setDescription('A table that provides information of all the wireless stations that are accessing the wireless service provided by the AC.')
fgWcStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1), ).setIndexNames((0, "FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), (0, "IF-MIB", "ifIndex"), (0, "FORTINET-FORTIGATE-MIB", "fgWcStaMacAddress"))
if mibBuilder.loadTexts: fgWcStaEntry.setStatus('current')
if mibBuilder.loadTexts: fgWcStaEntry.setDescription('A set of objects that display information of a wireless station.')
fgWcStaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 1), PhysAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), )))
if mibBuilder.loadTexts: fgWcStaMacAddress.setStatus('current')
if mibBuilder.loadTexts: fgWcStaMacAddress.setDescription('Represents the MAC address of a wireless station.')
fgWcStaWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaWlan.setStatus('current')
if mibBuilder.loadTexts: fgWcStaWlan.setDescription('WLAN interface that a wireless station is connected to.')
fgWcStaWtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaWtpId.setStatus('current')
if mibBuilder.loadTexts: fgWcStaWtpId.setDescription('Unique identifier of the WTP that a wireless station is connected to.')
fgWcStaRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 4), FgWcWtpRadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaRadioId.setStatus('current')
if mibBuilder.loadTexts: fgWcStaRadioId.setDescription('Represents the radio of the WTP that a wireless station is connected to.')
fgWcStaVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaVlanId.setStatus('current')
if mibBuilder.loadTexts: fgWcStaVlanId.setDescription('Represents the VLAN ID that is assigned to a wireless station.')
fgWcStaIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIpAddressType.setStatus('current')
if mibBuilder.loadTexts: fgWcStaIpAddressType.setDescription('Represents the IP address type of a wireless station. Only ipv4(1) and ipv6(2) are supported by the object.')
fgWcStaIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIpAddress.setStatus('current')
if mibBuilder.loadTexts: fgWcStaIpAddress.setDescription('Represents the IP address of a wireless station.')
fgWcStaVci = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaVci.setStatus('current')
if mibBuilder.loadTexts: fgWcStaVci.setDescription('Represents the vendor class identifier of a wireless station.')
fgWcStaHost = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaHost.setStatus('current')
if mibBuilder.loadTexts: fgWcStaHost.setDescription('Represents the host name of a wireless station.')
fgWcStaUser = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaUser.setStatus('current')
if mibBuilder.loadTexts: fgWcStaUser.setDescription('Represents the user name of a wireless station.')
fgWcStaGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaGroup.setStatus('current')
if mibBuilder.loadTexts: fgWcStaGroup.setDescription('Represents the user group of a wireless station.')
fgWcStaSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaSignal.setStatus('current')
if mibBuilder.loadTexts: fgWcStaSignal.setDescription('Represents the signal strengh of a wireless station, in dBm.')
fgWcStaNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaNoise.setStatus('current')
if mibBuilder.loadTexts: fgWcStaNoise.setDescription('Represents the noise level of a wireless station, in dBm.')
fgWcStaIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaIdle.setStatus('current')
if mibBuilder.loadTexts: fgWcStaIdle.setDescription('Indicates how long a wireless station in inactive, in seconds.')
fgWcStaBandwidthTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaBandwidthTx.setStatus('current')
if mibBuilder.loadTexts: fgWcStaBandwidthTx.setDescription('Represents the TX bandwidth of a wireless station, in kbps.')
fgWcStaBandwidthRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaBandwidthRx.setStatus('current')
if mibBuilder.loadTexts: fgWcStaBandwidthRx.setDescription('Represents the RX bandwidth of a wireless station, in kbps.')
fgWcStaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 17), FgWcWtpRadioChannelNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaChannel.setStatus('current')
if mibBuilder.loadTexts: fgWcStaChannel.setDescription('Represents the frequency channel that a wireless station is using.')
fgWcStaRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 18), FgWcWtpRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaRadioType.setStatus('current')
if mibBuilder.loadTexts: fgWcStaRadioType.setDescription('Represents the radio physical type of a wireless station.')
fgWcStaSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 19), FgWcWlanSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaSecurity.setStatus('current')
if mibBuilder.loadTexts: fgWcStaSecurity.setDescription('Represents the security type of a wireless station.')
fgWcStaEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 20), FgWcWlanEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaEncrypt.setStatus('current')
if mibBuilder.loadTexts: fgWcStaEncrypt.setDescription('Represents the encryption method of a wireless station.')
fgWcStaOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 101, 14, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgWcStaOnline.setStatus('current')
if mibBuilder.loadTexts: fgWcStaOnline.setDescription('Represent online status of a wireless station.')
fgFc = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 15))
fgFcTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1))
fgFcSwVdom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 1), FgVdIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwVdom.setStatus('current')
if mibBuilder.loadTexts: fgFcSwVdom.setDescription('Virtual domain the switch is part of')
fgFcSwSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwSerial.setStatus('current')
if mibBuilder.loadTexts: fgFcSwSerial.setDescription('Serial number of the switch')
fgFcSwName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgFcSwName.setStatus('current')
if mibBuilder.loadTexts: fgFcSwName.setDescription('Name of the switch')
fgServerLoadBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 16))
fgServerLoadBalanceTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1))
fgServerLoadBalanceRealServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgServerLoadBalanceRealServerAddress.setStatus('current')
if mibBuilder.loadTexts: fgServerLoadBalanceRealServerAddress.setDescription('IP of the real server.')
fgServerLoadBalanceVirtualServerName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgServerLoadBalanceVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: fgServerLoadBalanceVirtualServerName.setDescription('Name of the virual server.')
fgUsbModemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 17))
fgUsbModemInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1))
fgUsbModemSignalStrength = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSignalStrength.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemSignalStrength.setDescription('3G/4G USB Modem signal Strength.')
fgUsbModemStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemStatus.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemStatus.setDescription(' 3G/4G USB Modem status.')
fgUsbModemSimState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSimState.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemSimState.setDescription('3G/4G USB Modem sim card status.')
fgUsbModemVendor = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemVendor.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemVendor.setDescription('3G/4G USB Modem vendor name.')
fgUsbModemProduct = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemProduct.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemProduct.setDescription('3G/4G USB Modem product name.')
fgUsbModemNetwork = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("network3G", 0), ("networkLTE", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemNetwork.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemNetwork.setDescription('3G/4G USB Modem network type.')
fgUsbModemId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemId.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemId.setDescription('3G/4G USB Modem identifier.')
fgUsbModemSimId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 17, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fgUsbModemSimId.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemSimId.setDescription('3G/4G USB Modem sim card identifier.')
fgDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 18))
fgDeviceTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1))
fgDeviceMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceMacAddress.setStatus('current')
if mibBuilder.loadTexts: fgDeviceMacAddress.setDescription('The MAC address pertaining the Device.')
fgDeviceCreated = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 2), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceCreated.setStatus('current')
if mibBuilder.loadTexts: fgDeviceCreated.setDescription('The created time pertaining the Device.')
fgDeviceLastSeen = MibScalar((1, 3, 6, 1, 4, 1, 12356, 101, 18, 1, 3), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fgDeviceLastSeen.setStatus('current')
if mibBuilder.loadTexts: fgDeviceLastSeen.setDescription('The last seen time pertaining the Device.')
fgMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 101, 100))
fgTrapVpnTunUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 301)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"))
if mibBuilder.loadTexts: fgTrapVpnTunUp.setStatus('current')
if mibBuilder.loadTexts: fgTrapVpnTunUp.setDescription('Indicates that the specified VPN tunnel has been brought up.')
fgTrapVpnTunDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 302)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"))
if mibBuilder.loadTexts: fgTrapVpnTunDown.setStatus('current')
if mibBuilder.loadTexts: fgTrapVpnTunDown.setDescription('The specified VPN tunnel has been brought down.')
fgTrapHaSwitch = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 401)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapHaSwitch.setStatus('current')
if mibBuilder.loadTexts: fgTrapHaSwitch.setDescription('The specified cluster member has transitioned from a slave role to a master role.')
fgTrapHaStateChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 402)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: fgTrapHaStateChange.setDescription('Trap being sent when the HA cluster member changes its state')
fgTrapHaHBFail = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 403)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaHBFail.setStatus('current')
if mibBuilder.loadTexts: fgTrapHaHBFail.setDescription('The heartbeat device failure count has exceeded the configured threshold.')
fgTrapHaMemberDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 404)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaMemberDown.setStatus('current')
if mibBuilder.loadTexts: fgTrapHaMemberDown.setDescription('The specified device (by serial number) is moving to a down state.')
fgTrapHaMemberUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 405)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapHaMemberUp.setStatus('current')
if mibBuilder.loadTexts: fgTrapHaMemberUp.setDescription('A new cluster member has joined the cluster.')
fgTrapIpsSignature = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 503)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"))
if mibBuilder.loadTexts: fgTrapIpsSignature.setStatus('current')
if mibBuilder.loadTexts: fgTrapIpsSignature.setDescription('An IPS signature has been triggered')
fgTrapIpsAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 504)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"))
if mibBuilder.loadTexts: fgTrapIpsAnomaly.setStatus('current')
if mibBuilder.loadTexts: fgTrapIpsAnomaly.setDescription('An IPS anomaly has been detected')
fgTrapIpsPkgUpdate = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 505)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapIpsPkgUpdate.setStatus('current')
if mibBuilder.loadTexts: fgTrapIpsPkgUpdate.setDescription('The IPS signature database has been updated')
fgTrapIpsFailOpen = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 506)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapIpsFailOpen.setStatus('current')
if mibBuilder.loadTexts: fgTrapIpsFailOpen.setDescription('The IPS network buffer is full')
fgTrapAvVirus = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 601)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgAvTrapVirName"))
if mibBuilder.loadTexts: fgTrapAvVirus.setStatus('current')
if mibBuilder.loadTexts: fgTrapAvVirus.setDescription('A virus has been detected by the anti-virus engine')
fgTrapAvOversize = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 602)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversize.setStatus('current')
if mibBuilder.loadTexts: fgTrapAvOversize.setDescription('An over-sized file has been detected by the anti-virus engine')
fgTrapAvPattern = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 603)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvPattern.setStatus('current')
if mibBuilder.loadTexts: fgTrapAvPattern.setDescription('The anti-virus engine has blocked a file because it matched a configured pattern')
fgTrapAvFragmented = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 604)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvFragmented.setStatus('current')
if mibBuilder.loadTexts: fgTrapAvFragmented.setDescription('The anti-virus engine has detected a fragmented file')
fgTrapAvEnterConserve = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 605)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvEnterConserve.setStatus('current')
if mibBuilder.loadTexts: fgTrapAvEnterConserve.setDescription('The anti-virus engine has entered conservation mode due to low memory conditions')
fgTrapAvBypass = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 606)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvBypass.setStatus('current')
if mibBuilder.loadTexts: fgTrapAvBypass.setDescription('The anti-virus engine has been bypassed due to conservation mode')
fgTrapAvOversizePass = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 607)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversizePass.setStatus('current')
if mibBuilder.loadTexts: fgTrapAvOversizePass.setDescription('An over-sized file has been detected, but has been passed due to configuration')
fgTrapAvOversizeBlock = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 608)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: fgTrapAvOversizeBlock.setStatus('current')
if mibBuilder.loadTexts: fgTrapAvOversizeBlock.setDescription('An over-sized file has been detected and has been blocked')
fgTrapFazDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 701)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgTrapFazDisconnect.setStatus('current')
if mibBuilder.loadTexts: fgTrapFazDisconnect.setDescription('The device has been disconnected from the FortiAnalyzer.')
fgTrapWcApUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 801)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"))
if mibBuilder.loadTexts: fgTrapWcApUp.setStatus('current')
if mibBuilder.loadTexts: fgTrapWcApUp.setDescription('Indicates that the specified AP is up.')
fgTrapWcApDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 802)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"))
if mibBuilder.loadTexts: fgTrapWcApDown.setStatus('current')
if mibBuilder.loadTexts: fgTrapWcApDown.setDescription('Indicates that the specified AP is down.')
fgTrapFcSwUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 901)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if mibBuilder.loadTexts: fgTrapFcSwUp.setStatus('current')
if mibBuilder.loadTexts: fgTrapFcSwUp.setDescription('Indicates that the specified switch controller session is up.')
fgTrapFcSwDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 902)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if mibBuilder.loadTexts: fgTrapFcSwDown.setStatus('current')
if mibBuilder.loadTexts: fgTrapFcSwDown.setDescription('Indicates that the specified switch controller session is down.')
fgFmTrapDeployComplete = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1000)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapDeployComplete.setStatus('current')
if mibBuilder.loadTexts: fgFmTrapDeployComplete.setDescription('Indicates when deployment of a new configuration has been completed. Used for verification by FortiManager.')
fgFmTrapDeployInProgress = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1002)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapDeployInProgress.setStatus('current')
if mibBuilder.loadTexts: fgFmTrapDeployInProgress.setDescription('Indicates that a configuration change was not immediate and that the change is currently in progress. Used for verification by FortiManager.')
fgFmTrapConfChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1003)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"))
if mibBuilder.loadTexts: fgFmTrapConfChange.setStatus('current')
if mibBuilder.loadTexts: fgFmTrapConfChange.setDescription('The device configuration has been changed by something other than the managing FortiManager device.')
fgFmTrapIfChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 6, 0, 1004)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("IF-MIB", "ifName"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp"), ("FORTINET-FORTIGATE-MIB", "fgManIfMask"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp6"))
if mibBuilder.loadTexts: fgFmTrapIfChange.setStatus('current')
if mibBuilder.loadTexts: fgFmTrapIfChange.setDescription('Trap is sent to the managing FortiManager if an interface IP is changed')
fgTrapServerLoadBalanceRealServerDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1101)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceRealServerAddress"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceVirtualServerName"))
if mibBuilder.loadTexts: fgTrapServerLoadBalanceRealServerDown.setStatus('current')
if mibBuilder.loadTexts: fgTrapServerLoadBalanceRealServerDown.setDescription('One of servers in a Server Load Balance group goes down.')
fgTrapDeviceNew = NotificationType((1, 3, 6, 1, 4, 1, 12356, 101, 2, 0, 1201)).setObjects(("FORTINET-CORE-MIB", "fnSysSerial"), ("SNMPv2-MIB", "sysName"), ("IF-MIB", "ifIndex"), ("FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), ("FORTINET-FORTIGATE-MIB", "fgDeviceCreated"), ("FORTINET-FORTIGATE-MIB", "fgDeviceLastSeen"), ("FORTINET-FORTIGATE-MIB", "fgDeviceMacAddress"))
if mibBuilder.loadTexts: fgTrapDeviceNew.setStatus('current')
if mibBuilder.loadTexts: fgTrapDeviceNew.setDescription('A new device is found.')
fgFmTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 1)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFmTrapDeployComplete"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapDeployInProgress"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapConfChange"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapIfChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFmTrapGroup = fgFmTrapGroup.setStatus('current')
if mibBuilder.loadTexts: fgFmTrapGroup.setDescription('Traps are intended for use in conjunction with a FortiManager.')
fgFmTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 2)).setObjects(("FORTINET-FORTIGATE-MIB", "fgManIfIp"), ("FORTINET-FORTIGATE-MIB", "fgManIfMask"), ("FORTINET-FORTIGATE-MIB", "fgManIfIp6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFmTrapObjectGroup = fgFmTrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgFmTrapObjectGroup.setDescription('These objects support the traps in the fgFmTrapGroup.')
fgAdminObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 3)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAdminIdleTimeout"), ("FORTINET-FORTIGATE-MIB", "fgAdminLcdProtection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAdminObjectGroup = fgAdminObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgAdminObjectGroup.setDescription('Objects pertaining to administration of the device.')
fgSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 4)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSysVersion"), ("FORTINET-FORTIGATE-MIB", "fgSysCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysDiskCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysSesCount"), ("FORTINET-FORTIGATE-MIB", "fgSysLowMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgSysLowMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate1"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate10"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate30"), ("FORTINET-FORTIGATE-MIB", "fgSysSesRate60"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Count"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate1"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate10"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate30"), ("FORTINET-FORTIGATE-MIB", "fgSysSes6Rate60"), ("FORTINET-FORTIGATE-MIB", "fgSysUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSystemObjectGroup = fgSystemObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgSystemObjectGroup.setDescription('Objects pertaining to the system status of the device.')
fgSoftwareObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 5)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSysVersionAv"), ("FORTINET-FORTIGATE-MIB", "fgSysVersionIps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSoftwareObjectGroup = fgSoftwareObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgSoftwareObjectGroup.setDescription('Objects pertaining to software running on the device.')
fgHwSensorsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 6)).setObjects(("FORTINET-FORTIGATE-MIB", "fgHwSensorCount"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntName"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntValue"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorEntAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgHwSensorsObjectGroup = fgHwSensorsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgHwSensorsObjectGroup.setDescription('Object pertaining to hardware sensors on the device.')
fgHighAvailabilityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 7)).setObjects(("FORTINET-FORTIGATE-MIB", "fgHaSystemMode"), ("FORTINET-FORTIGATE-MIB", "fgHaGroupId"), ("FORTINET-FORTIGATE-MIB", "fgHaPriority"), ("FORTINET-FORTIGATE-MIB", "fgHaOverride"), ("FORTINET-FORTIGATE-MIB", "fgHaAutoSync"), ("FORTINET-FORTIGATE-MIB", "fgHaSchedule"), ("FORTINET-FORTIGATE-MIB", "fgHaGroupName"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSerial"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsNetUsage"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSesCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsPktCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsByteCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsIdsCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsAvCount"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsHostname"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncStatus"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncDatimeSucc"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsSyncDatimeUnsucc"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsGlobalChecksum"), ("FORTINET-FORTIGATE-MIB", "fgHaStatsMasterSerial"), ("FORTINET-FORTIGATE-MIB", "fgHaTrapMemberSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgHighAvailabilityObjectGroup = fgHighAvailabilityObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgHighAvailabilityObjectGroup.setDescription('Objects pertaining to High Availability clustering of FortiGate devices.')
fgVpnObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 8)).setObjects(("FORTINET-FORTIGATE-MIB", "fgVpnDialupGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupLifetime"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupTimeout"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupSrcBegin"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupSrcEnd"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupDstAddr"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupInOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnDialupOutOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntPhase1Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntPhase2Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntRemGwyIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntRemGwyPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLocGwyIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLocGwyPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcBeginIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcEndIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorSrcPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstBeginIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstEndIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorDstPort"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntSelectorProto"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLifeSecs"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntLifeBytes"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntTimeout"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntInOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntOutOctets"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntStatus"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunEntVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslState"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsLoginUsers"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxUsers"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsActiveWebSessions"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxWebSessions"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsActiveTunnels"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslStatsMaxTunnels"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelVdom"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelUserName"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelIp"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelUpTime"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgVpnSslTunnelBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapLocalGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapRemoteGateway"), ("FORTINET-FORTIGATE-MIB", "fgVpnTrapPhase1Name"), ("FORTINET-FORTIGATE-MIB", "fgVpnTunnelUpCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgVpnObjectGroup = fgVpnObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgVpnObjectGroup.setDescription('Objects pertaining to Virtual Priavet Networking on FortiGate devices.')
fgFirewallObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 9)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFwPolPktCount"), ("FORTINET-FORTIGATE-MIB", "fgFwPolByteCount"), ("FORTINET-FORTIGATE-MIB", "fgFwUserNumber"), ("FORTINET-FORTIGATE-MIB", "fgFwPolPktCountHc"), ("FORTINET-FORTIGATE-MIB", "fgFwPolByteCountHc"), ("FORTINET-FORTIGATE-MIB", "fgFwUserAuthTimeout"), ("FORTINET-FORTIGATE-MIB", "fgFwUserName"), ("FORTINET-FORTIGATE-MIB", "fgFwUserAuth"), ("FORTINET-FORTIGATE-MIB", "fgFwUserState"), ("FORTINET-FORTIGATE-MIB", "fgFwUserVdom"), ("FORTINET-FORTIGATE-MIB", "fgIpSessProto"), ("FORTINET-FORTIGATE-MIB", "fgIpSessFromAddr"), ("FORTINET-FORTIGATE-MIB", "fgIpSessFromPort"), ("FORTINET-FORTIGATE-MIB", "fgIpSessToAddr"), ("FORTINET-FORTIGATE-MIB", "fgIpSessToPort"), ("FORTINET-FORTIGATE-MIB", "fgIpSessExp"), ("FORTINET-FORTIGATE-MIB", "fgIpSessVdom"), ("FORTINET-FORTIGATE-MIB", "fgIpSessNumber"), ("FORTINET-FORTIGATE-MIB", "fgIp6SessNumber"), ("FORTINET-FORTIGATE-MIB", "fgFwPol6PktCount"), ("FORTINET-FORTIGATE-MIB", "fgFwPol6ByteCount"), ("FORTINET-FORTIGATE-MIB", "fgFwPolLastUsed"), ("FORTINET-FORTIGATE-MIB", "fgFwPol6LastUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFirewallObjectGroup = fgFirewallObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgFirewallObjectGroup.setDescription('Objects pertaining to Firewall functionality on FortiGate devices.')
fgAppServicesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 10)).setObjects(("FORTINET-FORTIGATE-MIB", "fgApHTTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPSpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3ReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3SpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPSpamDetected"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApIMUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApIMMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApIMReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApSIPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApSIPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApSIPClientReg"), ("FORTINET-FORTIGATE-MIB", "fgApSIPCallHandling"), ("FORTINET-FORTIGATE-MIB", "fgApSIPServices"), ("FORTINET-FORTIGATE-MIB", "fgApSIPOtherReq"), ("FORTINET-FORTIGATE-MIB", "fgAppSuNumber"), ("FORTINET-FORTIGATE-MIB", "fgAppSuFileScanned"), ("FORTINET-FORTIGATE-MIB", "fgAppVoIPConn"), ("FORTINET-FORTIGATE-MIB", "fgAppVoIPCallBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PConnBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PProtEntBytes"), ("FORTINET-FORTIGATE-MIB", "fgAppP2PProtoEntLastReset"), ("FORTINET-FORTIGATE-MIB", "fgAppIMMessages"), ("FORTINET-FORTIGATE-MIB", "fgAppIMFileTransfered"), ("FORTINET-FORTIGATE-MIB", "fgAppIMFileTxBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAppIMConnBlocked"), ("FORTINET-FORTIGATE-MIB", "fgApFTPReqProcessed"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApFTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3Connections"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPConnections"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApFTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3MaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPMaxConnections"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPMaxConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAppServicesObjectGroup = fgAppServicesObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgAppServicesObjectGroup.setDescription('Objects pertaining to application proxy and filtering services on FortiGate devices.')
fgAntivirusObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 11)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAvVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvHTTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvHTTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvSMTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvSMTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvPOP3VirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvPOP3VirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvIMAPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvIMAPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvFTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvFTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvIMVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvIMVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvNNTPVirusDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvNNTPVirusBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvOversizedDetected"), ("FORTINET-FORTIGATE-MIB", "fgAvOversizedBlocked"), ("FORTINET-FORTIGATE-MIB", "fgAvTrapVirName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAntivirusObjectGroup = fgAntivirusObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgAntivirusObjectGroup.setDescription('Objects pertaining to Antivirus services on FortiGate devices.')
fgIntrusionPrevtObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 12)).setObjects(("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigId"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSrcIp"), ("FORTINET-FORTIGATE-MIB", "fgIpsTrapSigMsg"), ("FORTINET-FORTIGATE-MIB", "fgIpsIntrusionsDetected"), ("FORTINET-FORTIGATE-MIB", "fgIpsIntrusionsBlocked"), ("FORTINET-FORTIGATE-MIB", "fgIpsCritSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsHighSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsMedSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsLowSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsInfoSevDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsSignatureDetections"), ("FORTINET-FORTIGATE-MIB", "fgIpsAnomalyDetections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgIntrusionPrevtObjectGroup = fgIntrusionPrevtObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgIntrusionPrevtObjectGroup.setDescription('Objects pertaining to Intrusion Detection and Prevention services on FortiGate devices.')
fgWebFilterObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 13)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWfHTTPBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPSBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPURLBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfHTTPSURLBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfActiveXBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfCookieBlocked"), ("FORTINET-FORTIGATE-MIB", "fgWfAppletBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPExamined"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSExamined"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPAllowed"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSAllowed"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSBlocked"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPLogged"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSLogged"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPOverridden"), ("FORTINET-FORTIGATE-MIB", "fgFgWfHTTPSOverridden"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWebFilterObjectGroup = fgWebFilterObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgWebFilterObjectGroup.setDescription('Objects pertaining to FortiGate and FortiGuard based Web Filtering services on FortiGate devices.')
fgVirtualDomainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 14)).setObjects(("FORTINET-FORTIGATE-MIB", "fgVdNumber"), ("FORTINET-FORTIGATE-MIB", "fgVdMaxVdoms"), ("FORTINET-FORTIGATE-MIB", "fgVdEnabled"), ("FORTINET-FORTIGATE-MIB", "fgVdEntName"), ("FORTINET-FORTIGATE-MIB", "fgVdEntIndex"), ("FORTINET-FORTIGATE-MIB", "fgVdEntOpMode"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtAddrType"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtAddr"), ("FORTINET-FORTIGATE-MIB", "fgVdEntCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgVdEntMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgVdEntSesCount"), ("FORTINET-FORTIGATE-MIB", "fgVdEntSesRate"), ("FORTINET-FORTIGATE-MIB", "fgVdTpMgmtMask"), ("FORTINET-FORTIGATE-MIB", "fgVdEntHaState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgVirtualDomainObjectGroup = fgVirtualDomainObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgVirtualDomainObjectGroup.setDescription('Objects pertaining to Virtual Firewall Domain services on FortiGate devices.')
fgAdministrationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 15)).setObjects(("FORTINET-FORTIGATE-MIB", "fgAdminVdom"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgAdministrationObjectGroup = fgAdministrationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgAdministrationObjectGroup.setDescription('Objects pertaining to the administration of FortiGate device.')
fgIntfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 16)).setObjects(("FORTINET-FORTIGATE-MIB", "fgIntfEntVdom"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpCount"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntVrId"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntGrpId"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntIfName"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntState"), ("FORTINET-FORTIGATE-MIB", "fgIntfVrrpEntVrIp"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbCount"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntIfName"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntSerial"), ("FORTINET-FORTIGATE-MIB", "fgIntfVlanHbEntState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgIntfObjectGroup = fgIntfObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgIntfObjectGroup.setDescription('Objects pertaining to the interface table of FortiGate device.')
fgProcessorsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 17)).setObjects(("FORTINET-FORTIGATE-MIB", "fgProcessorCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUsage5sec"), ("FORTINET-FORTIGATE-MIB", "fgProcessorType"), ("FORTINET-FORTIGATE-MIB", "fgProcessorContainedIn"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktRxCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktTxCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorPktDroppedCount"), ("FORTINET-FORTIGATE-MIB", "fgProcessorUserUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorSysUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcessorModuleCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModType"), ("FORTINET-FORTIGATE-MIB", "fgProcModName"), ("FORTINET-FORTIGATE-MIB", "fgProcModDescr"), ("FORTINET-FORTIGATE-MIB", "fgProcModProcessorCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModMemCapacity"), ("FORTINET-FORTIGATE-MIB", "fgProcModMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgProcModSessionCount"), ("FORTINET-FORTIGATE-MIB", "fgProcModSACount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgProcessorsObjectGroup = fgProcessorsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgProcessorsObjectGroup.setDescription('Objects pertaining to the processors table of FortiGate device.')
fgNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 18)).setObjects(("FORTINET-FORTIGATE-MIB", "fgTrapVpnTunUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapVpnTunDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaSwitch"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaHBFail"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaMemberDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapHaMemberUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsSignature"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsAnomaly"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsPkgUpdate"), ("FORTINET-FORTIGATE-MIB", "fgTrapIpsFailOpen"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvVirus"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversize"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvPattern"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvFragmented"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvEnterConserve"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvBypass"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversizePass"), ("FORTINET-FORTIGATE-MIB", "fgTrapAvOversizeBlock"), ("FORTINET-FORTIGATE-MIB", "fgTrapFazDisconnect"), ("FORTINET-FORTIGATE-MIB", "fgTrapWcApUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapWcApDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapDeviceNew"), ("FORTINET-FORTIGATE-MIB", "fgTrapFcSwUp"), ("FORTINET-FORTIGATE-MIB", "fgTrapFcSwDown"), ("FORTINET-FORTIGATE-MIB", "fgTrapServerLoadBalanceRealServerDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgNotificationGroup = fgNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: fgNotificationGroup.setDescription('Notifications that can be generated from a FortiGate device.')
fgObsoleteNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 19)).setObjects(("FORTINET-FORTIGATE-MIB", "fgTrapHaStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsoleteNotificationsGroup = fgObsoleteNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: fgObsoleteNotificationsGroup.setDescription('Notifications that have been deprecated, but may still be generated by older models.')
fgExplicitProxyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 20)).setObjects(("FORTINET-FORTIGATE-MIB", "fgExplicitProxyUpTime"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyRequests"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyUsers"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxySessions"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyVirus"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBannedWords"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyPolicy"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyOversized"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchNest"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchSize"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchEncrypted"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchMultiPart"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchUnsupported"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchBomb"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyArchCorrupt"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredApplets"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredActiveX"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredJScript"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredJS"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredVBS"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyFilteredOthScript"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedDLP"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedConType"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyExaminedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyAllowedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyBlockedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyLoggedURLs"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyOverriddenURLs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgExplicitProxyObjectGroup = fgExplicitProxyObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgExplicitProxyObjectGroup.setDescription('Objects pertaining to explicit proxy')
fgWebCacheObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 21)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWebCacheUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMLimit"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMUsage"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMHits"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRAMMisses"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheRequests"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheBypass"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskLimit"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskHits"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheDiskMisses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWebCacheObjectGroup = fgWebCacheObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgWebCacheObjectGroup.setDescription('Objects pertaining to explicit proxy, web cache and wan optimization.')
fgWanOptObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 22)).setObjects(("FORTINET-FORTIGATE-MIB", "fgMemCacheLimit"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheUsage"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheHits"), ("FORTINET-FORTIGATE-MIB", "fgMemCacheMisses"), ("FORTINET-FORTIGATE-MIB", "fgByteCacheRAMLimit"), ("FORTINET-FORTIGATE-MIB", "fgByteCacheRAMUsage"), ("FORTINET-FORTIGATE-MIB", "fgWanOptUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWanOptReductionRate"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanInTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLanOutTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanInTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWanOutTraffic"), ("FORTINET-FORTIGATE-MIB", "fgWanOptTunnels"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLANBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgWanOptLANBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWANBytesIn"), ("FORTINET-FORTIGATE-MIB", "fgWanOptWANBytesOut"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskLimit"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskUsage"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskHits"), ("FORTINET-FORTIGATE-MIB", "fgWanOptDiskMisses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWanOptObjectGroup = fgWanOptObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgWanOptObjectGroup.setDescription('Objects pertaining to explicit proxy, web cache and wan optimization.')
fgObsoleteAppServicesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 23)).setObjects(("FORTINET-FORTIGATE-MIB", "fgApHTTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApHTTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApSMTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3UpTime"), ("FORTINET-FORTIGATE-MIB", "fgApPOP3MemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApIMAPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApNNTPMemUsage"), ("FORTINET-FORTIGATE-MIB", "fgApFTPUpTime"), ("FORTINET-FORTIGATE-MIB", "fgApFTPMemUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsoleteAppServicesObjectGroup = fgObsoleteAppServicesObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: fgObsoleteAppServicesObjectGroup.setDescription('Objects that have been deprecated, but may still be generated by older models.')
fgSystemAdvancedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 24)).setObjects(("FORTINET-FORTIGATE-MIB", "fgSIAdvMemPageCache"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemCacheActive"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemCacheInactive"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemBuffer"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemEnterKerConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemLeaveKerConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemEnterProxyConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvMemLeaveProxyConsThrsh"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesEphemeralCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesEphemeralLimit"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesClashCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesExpCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesSyncQFCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesAcceptQFCount"), ("FORTINET-FORTIGATE-MIB", "fgSIAdvSesNoListenerCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgSystemAdvancedObjectGroup = fgSystemAdvancedObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgSystemAdvancedObjectGroup.setDescription('Objects pertaining to the system advanced status of the device.')
fgWcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 25)).setObjects(("FORTINET-FORTIGATE-MIB", "fgWcApVdom"), ("FORTINET-FORTIGATE-MIB", "fgWcApSerial"), ("FORTINET-FORTIGATE-MIB", "fgWcApName"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoName"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoLocation"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpManaged"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoWtpSessions"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcInfoStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanBroadcastSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanSecurity"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanEncryption"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanAuthentication"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanRadiusServer"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanUserGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanLocalBridging"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanVlanId"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanMeshBackhaul"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWlanStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfilePlatform"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileDataChannelDtlsPolicy"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileCountryString"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioMode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioApScan"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioWidsProfile"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioDarrp"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioFrequencyHandoff"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioApHandoff"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioBeaconInterval"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioDtimPeriod"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioBand"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannelBonding"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerControl"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerLow"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioAutoTxPowerHigh"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioTxPowerLevel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioVaps"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioStationCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpProfileRadioChannelWidth"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpAdmin"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpName"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpLocation"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigWtpProfile"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioEnable"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerControl"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerLow"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioAutoTxPowerHigh"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioTxPowerLevel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioBand"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigRadioApScan"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigVapAll"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpConfigVaps"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpLocalIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpLocalIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpBaseMacAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionConnectionState"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpDaemonUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpSessionUpTime"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpProfileName"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpModelNumber"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpHwVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpSwVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpBootVersion"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpRegionCode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpByteRxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpByteTxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpCpuUsage"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpMemoryUsage"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionWtpMemoryCapacity"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioMode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioBaseBssid"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioCountryString"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioCountryCode"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioOperatingChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioOperatingPower"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionRadioStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapSsid"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapStationCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapByteRxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcWtpSessionVapByteTxCount"), ("FORTINET-FORTIGATE-MIB", "fgWcStaWlan"), ("FORTINET-FORTIGATE-MIB", "fgWcStaWtpId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaRadioId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaVlanId"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIpAddressType"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIpAddress"), ("FORTINET-FORTIGATE-MIB", "fgWcStaVci"), ("FORTINET-FORTIGATE-MIB", "fgWcStaHost"), ("FORTINET-FORTIGATE-MIB", "fgWcStaUser"), ("FORTINET-FORTIGATE-MIB", "fgWcStaGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcStaSignal"), ("FORTINET-FORTIGATE-MIB", "fgWcStaNoise"), ("FORTINET-FORTIGATE-MIB", "fgWcStaIdle"), ("FORTINET-FORTIGATE-MIB", "fgWcStaBandwidthTx"), ("FORTINET-FORTIGATE-MIB", "fgWcStaBandwidthRx"), ("FORTINET-FORTIGATE-MIB", "fgWcStaChannel"), ("FORTINET-FORTIGATE-MIB", "fgWcStaRadioType"), ("FORTINET-FORTIGATE-MIB", "fgWcStaSecurity"), ("FORTINET-FORTIGATE-MIB", "fgWcStaEncrypt"), ("FORTINET-FORTIGATE-MIB", "fgWcStaOnline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgWcObjectGroup = fgWcObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgWcObjectGroup.setDescription('Objects pertaining to wireless controller.')
fgFcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 26)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFcSwVdom"), ("FORTINET-FORTIGATE-MIB", "fgFcSwSerial"), ("FORTINET-FORTIGATE-MIB", "fgFcSwName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgFcObjectGroup = fgFcObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgFcObjectGroup.setDescription('Objects pertaining to switch controller.')
fgServerLoadBalanceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 27)).setObjects(("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceRealServerAddress"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceVirtualServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgServerLoadBalanceObjectGroup = fgServerLoadBalanceObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgServerLoadBalanceObjectGroup.setDescription('Objects pertaining to Server Load Balance group.')
fgUsbportsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 28)).setObjects(("FORTINET-FORTIGATE-MIB", "fgUsbportCount"), ("FORTINET-FORTIGATE-MIB", "fgUsbportPlugged"), ("FORTINET-FORTIGATE-MIB", "fgUsbportVersion"), ("FORTINET-FORTIGATE-MIB", "fgUsbportClass"), ("FORTINET-FORTIGATE-MIB", "fgUsbportVendId"), ("FORTINET-FORTIGATE-MIB", "fgUsbportProdId"), ("FORTINET-FORTIGATE-MIB", "fgUsbportRevision"), ("FORTINET-FORTIGATE-MIB", "fgUsbportManufacturer"), ("FORTINET-FORTIGATE-MIB", "fgUsbportProduct"), ("FORTINET-FORTIGATE-MIB", "fgUsbportSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgUsbportsObjectGroup = fgUsbportsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgUsbportsObjectGroup.setDescription('Objects pertaining to USB device group.')
fgUsbModemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 29)).setObjects(("FORTINET-FORTIGATE-MIB", "fgUsbModemSignalStrength"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemStatus"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemSimState"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemVendor"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemProduct"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemNetwork"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemId"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemSimId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgUsbModemInfoGroup = fgUsbModemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: fgUsbModemInfoGroup.setDescription('Objects pertaining to USB Modem Info group.')
fgDeviceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 30)).setObjects(("FORTINET-FORTIGATE-MIB", "fgDeviceMacAddress"), ("FORTINET-FORTIGATE-MIB", "fgDeviceCreated"), ("FORTINET-FORTIGATE-MIB", "fgDeviceLastSeen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgDeviceObjectGroup = fgDeviceObjectGroup.setStatus('current')
if mibBuilder.loadTexts: fgDeviceObjectGroup.setDescription('Objects pertaining to Device group.')
fgLinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 101, 100, 31)).setObjects(("FORTINET-FORTIGATE-MIB", "fgLinkMonitorNumber"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorName"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorState"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorLatency"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorJitter"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketSend"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketRecv"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorPacketLoss"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorVdom"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgLinkMonitorGroup = fgLinkMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: fgLinkMonitorGroup.setDescription('Objects pertaining to Link Monitor group.')
fgMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 100)).setObjects(("FORTINET-FORTIGATE-MIB", "fgFmTrapGroup"), ("FORTINET-FORTIGATE-MIB", "fgNotificationGroup"), ("FORTINET-FORTIGATE-MIB", "fgFmTrapObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAdminObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSystemObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSoftwareObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgHwSensorsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgHighAvailabilityObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgVpnObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgFirewallObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAppServicesObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAntivirusObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgIntrusionPrevtObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWebFilterObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgVirtualDomainObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgAdministrationObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgIntfObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgProcessorsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgExplicitProxyObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWebCacheObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWanOptObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgSystemAdvancedObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgWcObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgFcObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgServerLoadBalanceObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgUsbportsObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgUsbModemInfoGroup"), ("FORTINET-FORTIGATE-MIB", "fgDeviceObjectGroup"), ("FORTINET-FORTIGATE-MIB", "fgLinkMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgMIBCompliance = fgMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: fgMIBCompliance.setDescription('The compliance statement for the application MIB.')
fg300MibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 101)).setObjects(("FORTINET-FORTIGATE-MIB", "fgObsoleteNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fg300MibCompliance = fg300MibCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: fg300MibCompliance.setDescription('The backwards compatibility compliance statement for the application MIB.')
fgObsolteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 101, 100, 102)).setObjects(("FORTINET-FORTIGATE-MIB", "fgObsoleteAppServicesObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fgObsolteMIBCompliance = fgObsolteMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: fgObsolteMIBCompliance.setDescription('The compliance statement for the application MIB.')
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgHighAvailabilityObjectGroup=fgHighAvailabilityObjectGroup, fgApPOP3UpTime=fgApPOP3UpTime, fgAppP2PProtoEntry=fgAppP2PProtoEntry, fgWcWtpConfigVapAll=fgWcWtpConfigVapAll, fgHaPriority=fgHaPriority, fgApIMAPMemUsage=fgApIMAPMemUsage, fgProcessorFnNP2=fgProcessorFnNP2, fgWcWtpProfileRadioVaps=fgWcWtpProfileRadioVaps, fgWcWtpSessionRadioOperatingPower=fgWcWtpSessionRadioOperatingPower, fgProcModName=fgProcModName, fgVpnSslStatsActiveTunnels=fgVpnSslStatsActiveTunnels, fgFmTrapGroup=fgFmTrapGroup, fgVpnDialupSrcEnd=fgVpnDialupSrcEnd, fgVpnSslTunnelUpTime=fgVpnSslTunnelUpTime, fgAdministrationObjectGroup=fgAdministrationObjectGroup, fgFwUserAuthTimeout=fgFwUserAuthTimeout, fgIpsTrapSigId=fgIpsTrapSigId, fgIntfVrrps=fgIntfVrrps, fgIntfVlanHbEntry=fgIntfVlanHbEntry, fgWcWlanStationCapacity=fgWcWlanStationCapacity, FgHaStatsSyncStatusType=FgHaStatsSyncStatusType, fgWanOptWANBytesIn=fgWanOptWANBytesIn, fgVpnTunEntSelectorDstBeginIp=fgVpnTunEntSelectorDstBeginIp, fgVpnTunEntStatus=fgVpnTunEntStatus, fgVpnSslTunnelEntry=fgVpnSslTunnelEntry, fgApIMStatsEntry=fgApIMStatsEntry, fgTrapHaStateChange=fgTrapHaStateChange, fgSystem=fgSystem, fgSysVersionIps=fgSysVersionIps, fgWfCookieBlocked=fgWfCookieBlocked, fgAppScanUnit=fgAppScanUnit, fgt1000C=fgt1000C, fgWcWtpProfileRadioProfileName=fgWcWtpProfileRadioProfileName, fgWcWtpSessionWtpRegionCode=fgWcWtpSessionWtpRegionCode, fgVpnSslTunnelSrcIp=fgVpnSslTunnelSrcIp, fgVdEntSesRate=fgVdEntSesRate, fgTrapIpsAnomaly=fgTrapIpsAnomaly, fgAppProxyPOP3=fgAppProxyPOP3, fgIpSessProto=fgIpSessProto, fgt30D=fgt30D, fgIpsInfoSevDetections=fgIpsInfoSevDetections, fgProcModFnFE8=fgProcModFnFE8, fgDeviceTrapObjects=fgDeviceTrapObjects, FgWanOptProtocols=FgWanOptProtocols, fgWcWtpProfileRadioAutoTxPowerLow=fgWcWtpProfileRadioAutoTxPowerLow, fgApNNTPReqProcessed=fgApNNTPReqProcessed, fgt240D=fgt240D, fgIntfVlanHbCount=fgIntfVlanHbCount, fgExplicitProxyFilterStatsTable=fgExplicitProxyFilterStatsTable, fgWcWtpSessionRadioRadioId=fgWcWtpSessionRadioRadioId, fwf90DPOE=fwf90DPOE, fgServerLoadBalanceObjectGroup=fgServerLoadBalanceObjectGroup, fgWcWtpSessionWtpLocalIpAddressType=fgWcWtpSessionWtpLocalIpAddressType, fgWcWtpProfileRadioEntry=fgWcWtpProfileRadioEntry, fwf90D=fwf90D, fgWcWtpProfileEntry=fgWcWtpProfileEntry, fgWcStaSecurity=fgWcStaSecurity, fgt3100D=fgt3100D, fgWcWtpSessionWtpIpAddress=fgWcWtpSessionWtpIpAddress, fgFwPolTables=fgFwPolTables, fgIp6SessNumber=fgIp6SessNumber, fgUsbModemSignalStrength=fgUsbModemSignalStrength, fgAvOversizedBlocked=fgAvOversizedBlocked, fgTrapFcSwDown=fgTrapFcSwDown, fgSIAdvSesAcceptQFCount=fgSIAdvSesAcceptQFCount, fgIpsLowSevDetections=fgIpsLowSevDetections, fgWanOptInfo=fgWanOptInfo, fgWcWlanAuthentication=fgWcWlanAuthentication, fgWcWtpProfileRadioStationCapacity=fgWcWtpProfileRadioStationCapacity, fgt1500D=fgt1500D, fgWcWtpSessionWtpSwVersion=fgWcWtpSessionWtpSwVersion, fgAvNNTPVirusDetected=fgAvNNTPVirusDetected, fgUsbportProdId=fgUsbportProdId, fgInetProtoTables=fgInetProtoTables, fgAvPOP3VirusDetected=fgAvPOP3VirusDetected, fgWanOptReductionRate=fgWanOptReductionRate, fgWcApVdom=fgWcApVdom, fgWcWtpConfigTable=fgWcWtpConfigTable, fgTrapIpsFailOpen=fgTrapIpsFailOpen, fgModel=fgModel, fgWcStaIpAddress=fgWcStaIpAddress, fgTrapWcApUp=fgTrapWcApUp, fgFwPolInfo=fgFwPolInfo, fgt3HD=fgt3HD, fgProcModMemCapacity=fgProcModMemCapacity, fgSoftware=fgSoftware, fgProcModIndex=fgProcModIndex, fgVpnTunEntry=fgVpnTunEntry, fgVpnTunEntRemGwyPort=fgVpnTunEntRemGwyPort, fgAppProxyFTP=fgAppProxyFTP, fgWcWtpTables=fgWcWtpTables, fgAvStatsEntry=fgAvStatsEntry, fgWcWtpProfileRadioMode=fgWcWtpProfileRadioMode, fgtVM64SVM=fgtVM64SVM, fgProcessorModuleCount=fgProcessorModuleCount, fgAvTrapObjects=fgAvTrapObjects, fgWebCacheDiskLimit=fgWebCacheDiskLimit, fgUsbModemStatus=fgUsbModemStatus, fgLinkMonitorPacketRecv=fgLinkMonitorPacketRecv, fgObsolteMIBCompliance=fgObsolteMIBCompliance, fgProcModFnXE2=fgProcModFnXE2, fgWcWtpSessionWtpByteRxCount=fgWcWtpSessionWtpByteRxCount, fgProcModFnXD4=fgProcModFnXD4, fgWcWtpSessionVapStationCount=fgWcWtpSessionVapStationCount, FgFwUserAuthType=FgFwUserAuthType, fgWfHTTPSURLBlocked=fgWfHTTPSURLBlocked, fgWcWtpProfileRadioApScan=fgWcWtpProfileRadioApScan, fgTrapHaSwitch=fgTrapHaSwitch, fgFmTrapDeployComplete=fgFmTrapDeployComplete, fgWcWtpSessionRadioCountryCode=fgWcWtpSessionRadioCountryCode, fgSIAdvSesNoListenerCount=fgSIAdvSesNoListenerCount, fgExplicitProxyArchSize=fgExplicitProxyArchSize, fgProcessorsObjectGroup=fgProcessorsObjectGroup, fgAvTables=fgAvTables, fgAntivirus=fgAntivirus, fgTrapHaHBFail=fgTrapHaHBFail, fgAdminIdleTimeout=fgAdminIdleTimeout, fgApIMStatsTable=fgApIMStatsTable, fgExplicitProxyInfo=fgExplicitProxyInfo, fgExplicitProxyFilteredApplets=fgExplicitProxyFilteredApplets, fgProcModIntegrated=fgProcModIntegrated, fgFwPol6LastUsed=fgFwPol6LastUsed, fgWebCacheBypass=fgWebCacheBypass, fgSIAdvSesSyncQFCount=fgSIAdvSesSyncQFCount, fgWebCacheRAMMisses=fgWebCacheRAMMisses, fgServerLoadBalanceVirtualServerName=fgServerLoadBalanceVirtualServerName, fgVdEntCpuUsage=fgVdEntCpuUsage, fgt3815D=fgt3815D, fgt200D=fgt200D, fgWcWtpConfigRadioEnable=fgWcWtpConfigRadioEnable, fgHaTrapObjects=fgHaTrapObjects, fgAvPOP3VirusBlocked=fgAvPOP3VirusBlocked, fgAppVoIPStatsEntry=fgAppVoIPStatsEntry, fgApHTTPReqProcessed=fgApHTTPReqProcessed, fgLinkMonitorEntry=fgLinkMonitorEntry, fgAdminEntry=fgAdminEntry, fgWebCacheDisk=fgWebCacheDisk, fgByteCacheRAMUsage=fgByteCacheRAMUsage, fgLinkMonitorJitter=fgLinkMonitorJitter, fgIntfVrrpEntGrpId=fgIntfVrrpEntGrpId, fgSysLowMemUsage=fgSysLowMemUsage, fgProcessorModules=fgProcessorModules, fgAdminVdom=fgAdminVdom, fgWcWtpSessionWtpProfileName=fgWcWtpSessionWtpProfileName, fgAdminObjectGroup=fgAdminObjectGroup, fgt1200D=fgt1200D, fgWcStaEncrypt=fgWcStaEncrypt, fgTrapPrefix=fgTrapPrefix, fgWcWtpSessionWtpBaseMacAddress=fgWcWtpSessionWtpBaseMacAddress, fgFwUserTables=fgFwUserTables, fgWcInfoName=fgWcInfoName, fgWcWtpSessionWtpId=fgWcWtpSessionWtpId, fgFwUserName=fgFwUserName, fgWcStaWlan=fgWcStaWlan, fgApPOP3StatsEntry=fgApPOP3StatsEntry, fgApSMTPMemUsage=fgApSMTPMemUsage, fgAppP2PProtoEntLastReset=fgAppP2PProtoEntLastReset, fgVpnTunTable=fgVpnTunTable, fgExplicitProxyLoggedURLs=fgExplicitProxyLoggedURLs, fgWcWtpProfileDataChannelDtlsPolicy=fgWcWtpProfileDataChannelDtlsPolicy, fgFwPolStatsTable=fgFwPolStatsTable, fgt3000D=fgt3000D, fgApIMAPMaxConnections=fgApIMAPMaxConnections, fgVpnDialupEntry=fgVpnDialupEntry, fwf30E=fwf30E, fgIntfVrrpEntState=fgIntfVrrpEntState, fgVpnSslStatsLoginUsers=fgVpnSslStatsLoginUsers, fgt800D=fgt800D, fgFwUserAuth=fgFwUserAuth, fgIpsInfo=fgIpsInfo, fgApNNTPStatsTable=fgApNNTPStatsTable, fgWanOptTunnels=fgWanOptTunnels, fgVpnSslStatsEntry=fgVpnSslStatsEntry, fgExplicitProxyBlockedDLP=fgExplicitProxyBlockedDLP, fgtVM64VMX=fgtVM64VMX, fgWcWtpProfileRadioAutoTxPowerHigh=fgWcWtpProfileRadioAutoTxPowerHigh, fgIps=fgIps, fgWc=fgWc, fgApPOP3Connections=fgApPOP3Connections, fgAppIMStatsEntry=fgAppIMStatsEntry, fgFgWfHTTPOverridden=fgFgWfHTTPOverridden, fgVdTable=fgVdTable, fgWcWtpProfileRadioDtimPeriod=fgWcWtpProfileRadioDtimPeriod, fgAppProxyIM=fgAppProxyIM, fgSysSesRate30=fgSysSesRate30, fgLinkMonitorGroup=fgLinkMonitorGroup, fgProcessorPktTxCount=fgProcessorPktTxCount, fgIpsAnomalyDetections=fgIpsAnomalyDetections, fgProcessorUsage5sec=fgProcessorUsage5sec, fgt3600C=fgt3600C, fgHwSensorEntName=fgHwSensorEntName, fgAvIMAPVirusDetected=fgAvIMAPVirusDetected, fgVpnTunEntLifeBytes=fgVpnTunEntLifeBytes, fgApIMAPStatsTable=fgApIMAPStatsTable, fgSystemInfoAdvanced=fgSystemInfoAdvanced, fgApSMTPUpTime=fgApSMTPUpTime, fgAvVirusBlocked=fgAvVirusBlocked, fgWanOptTrafficStatsTable=fgWanOptTrafficStatsTable, fgSIAdvMemEnterKerConsThrsh=fgSIAdvMemEnterKerConsThrsh, fgSIAdvMemLeaveProxyConsThrsh=fgSIAdvMemLeaveProxyConsThrsh, fgUsbportVendId=fgUsbportVendId, fgApNNTPUpTime=fgApNNTPUpTime, fgHaOverride=fgHaOverride, fgWcWlanMeshBackhaul=fgWcWlanMeshBackhaul, FgHaState=FgHaState, fgProcessors=fgProcessors, fgWanOptWanInTraffic=fgWanOptWanInTraffic, fgUsbModemNetwork=fgUsbModemNetwork, fgInetProtoInfo=fgInetProtoInfo, fgAvStatsTable=fgAvStatsTable, fgHaStatsIdsCount=fgHaStatsIdsCount, fgTrapHaMemberDown=fgTrapHaMemberDown, fgt60D=fgt60D, fgWcWlanStationCount=fgWcWlanStationCount, fgApIMReqProcessed=fgApIMReqProcessed, fgExplicitProxyRequests=fgExplicitProxyRequests, fgApSIPCallHandling=fgApSIPCallHandling, fgIpsStatsTable=fgIpsStatsTable, fgExplicitProxyFilteredActiveX=fgExplicitProxyFilteredActiveX, fgVpnDialupIndex=fgVpnDialupIndex, fgTrapIpsSignature=fgTrapIpsSignature, fgDeviceObjectGroup=fgDeviceObjectGroup, fgWcWtpSessionRadioWtpId=fgWcWtpSessionRadioWtpId, fgWcWtpSessionVapSsid=fgWcWtpSessionVapSsid, fgUsbportTable=fgUsbportTable, fgUsbportEntry=fgUsbportEntry, fgApIMUpTime=fgApIMUpTime, fgWcWtpConfigWtpName=fgWcWtpConfigWtpName, fgWebCacheRAMHits=fgWebCacheRAMHits, fgAvTrapVirName=fgAvTrapVirName, fgFmTrapIfChange=fgFmTrapIfChange, fgObsoleteNotificationsGroup=fgObsoleteNotificationsGroup, fgVpnTunEntPhase1Name=fgVpnTunEntPhase1Name, fgWanOptDiskStatsEntry=fgWanOptDiskStatsEntry, fgApSIPStatsTable=fgApSIPStatsTable, fgExplicitProxyScanStatsEntry=fgExplicitProxyScanStatsEntry, fgUsbportPlugged=fgUsbportPlugged, fgWebfilterStatsEntry=fgWebfilterStatsEntry, fgExplicitProxySessions=fgExplicitProxySessions, fgWanOptStatsTable=fgWanOptStatsTable, fgVpnTrapLocalGateway=fgVpnTrapLocalGateway, fgWcWtpSessionRadioTable=fgWcWtpSessionRadioTable, fgWcWtpSessionTable=fgWcWtpSessionTable, fgVdEntry=fgVdEntry, fgFgWfHTTPExamined=fgFgWfHTTPExamined, fgAppP2PProtEntProto=fgAppP2PProtEntProto, fgWcWtpProfileRadioWidsProfile=fgWcWtpProfileRadioWidsProfile, fgApSIPServices=fgApSIPServices, fgExplicitProxyArchCorrupt=fgExplicitProxyArchCorrupt, fgFwPolByteCountHc=fgFwPolByteCountHc, fgSysSes6Rate60=fgSysSes6Rate60, fgApFTPReqProcessed=fgApFTPReqProcessed, fgWcWtpSessionConnectionState=fgWcWtpSessionConnectionState, fgWebCacheDiskUsage=fgWebCacheDiskUsage)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgSIAdvSesExpCount=fgSIAdvSesExpCount, fgt3700DX=fgt3700DX, fgWcStaRadioType=fgWcStaRadioType, fgProcModFnCE4=fgProcModFnCE4, fgAppIMConnBlocked=fgAppIMConnBlocked, fgWcWtpProfileRadioDarrp=fgWcWtpProfileRadioDarrp, fgtVM64=fgtVM64, fgt500D=fgt500D, fgVpn=fgVpn, fgDevice=fgDevice, fgAppProxyHTTP=fgAppProxyHTTP, FgWcWtpRadioType=FgWcWtpRadioType, fgt98DPOE=fgt98DPOE, fgWcWtpSessionWtpCpuUsage=fgWcWtpSessionWtpCpuUsage, fgWcWtpSessionVapWtpId=fgWcWtpSessionVapWtpId, fgWcWtpConfigWtpId=fgWcWtpConfigWtpId, fgt3200D=fgt3200D, fgAvVirusDetected=fgAvVirusDetected, fgVpnTunEntSelectorDstPort=fgVpnTunEntSelectorDstPort, fgAppSuStatsTable=fgAppSuStatsTable, fgProcessorTypes=fgProcessorTypes, fgAppSuStatsEntry=fgAppSuStatsEntry, fgAppVoIPConn=fgAppVoIPConn, fgLinkMonitorVdom=fgLinkMonitorVdom, fgWcWtpSessionWtpByteTxCount=fgWcWtpSessionWtpByteTxCount, fgWcWtpSessionWtpUpTime=fgWcWtpSessionWtpUpTime, fgWcInfoLocation=fgWcInfoLocation, fgExplicitProxyMemUsage=fgExplicitProxyMemUsage, fgWanOptWanTraffic=fgWanOptWanTraffic, fgVpnDialupDstAddr=fgVpnDialupDstAddr, fgAppExplicitProxy=fgAppExplicitProxy, fgt140P=fgt140P, fgWfAppletBlocked=fgWfAppletBlocked, fgTrapVpnTunUp=fgTrapVpnTunUp, fgAppP2PProtEntBytes=fgAppP2PProtEntBytes, fgLinkMonitorLatency=fgLinkMonitorLatency, fgMemCacheLimit=fgMemCacheLimit, fgAdminLcdProtection=fgAdminLcdProtection, fgAppIMMessages=fgAppIMMessages, fgVdTpTable=fgVdTpTable, fgDeviceCreated=fgDeviceCreated, fgFirewall=fgFirewall, fgIntfVrrpEntry=fgIntfVrrpEntry, fgWcTrapObjects=fgWcTrapObjects, fgIpSessTable=fgIpSessTable, FgWcWlanSecurityType=FgWcWlanSecurityType, fgVpnSslTunnelUserName=fgVpnSslTunnelUserName, fgWcStaVlanId=fgWcStaVlanId, fgIpsStatsEntry=fgIpsStatsEntry, fgtVM64KVm=fgtVM64KVm, fgFcSwName=fgFcSwName, fgWcWlanTable=fgWcWlanTable, fgVdTpMgmtMask=fgVdTpMgmtMask, fgWcStaChannel=fgWcStaChannel, fgProcessorContainedIn=fgProcessorContainedIn, FgHaLBSchedule=FgHaLBSchedule, fgProcessorModuleTypes=fgProcessorModuleTypes, fgt30E=fgt30E, fgProcessorAMD=fgProcessorAMD, fgWanOptLANBytesOut=fgWanOptLANBytesOut, fgApIMAPStatsEntry=fgApIMAPStatsEntry, fgSysSes6Rate1=fgSysSes6Rate1, FgWcWtpRadioChannelNumber=FgWcWtpRadioChannelNumber, fgFortiGuardStatsEntry=fgFortiGuardStatsEntry, fgProcessorFnSoc=fgProcessorFnSoc, fgVpnObjectGroup=fgVpnObjectGroup, fgApHTTPMaxConnections=fgApHTTPMaxConnections, fgSysSes6Rate10=fgSysSes6Rate10, fgHwSensorEntAlarmStatus=fgHwSensorEntAlarmStatus, fgFc=fgFc, fgFwUserNumber=fgFwUserNumber, fgFwPolPktCount=fgFwPolPktCount, fgWcWtpSessionVapByteRxCount=fgWcWtpSessionVapByteRxCount, fgWcWlanVlanId=fgWcWlanVlanId, fgSysSesRate60=fgSysSesRate60, fgWcWtpProfileRadioBand=fgWcWtpProfileRadioBand, fgHaStatsPktCount=fgHaStatsPktCount, fgAppProxyNNTP=fgAppProxyNNTP, fgAppVoIP=fgAppVoIP, fgIpSessToPort=fgIpSessToPort, fgIpsTrapObjects=fgIpsTrapObjects, fgInetProto=fgInetProto, fgVpnTables=fgVpnTables, fgWcWtpProfileRadioBeaconInterval=fgWcWtpProfileRadioBeaconInterval, fgIpsTables=fgIpsTables, fgExplicitProxyOversized=fgExplicitProxyOversized, fgIpSessVdom=fgIpSessVdom, fgWcWtpSessionWtpLocalIpAddress=fgWcWtpSessionWtpLocalIpAddress, fgWcWtpSessionWtpBootVersion=fgWcWtpSessionWtpBootVersion, fgFgWfHTTPSBlocked=fgFgWfHTTPSBlocked, fgWanOptObjectGroup=fgWanOptObjectGroup, fgUsbModemInfoGroup=fgUsbModemInfoGroup, fgWebfilterTables=fgWebfilterTables, fgFwUserIndex=fgFwUserIndex, fgAvOversizedDetected=fgAvOversizedDetected, fgFgWfHTTPLogged=fgFgWfHTTPLogged, fgWcWtpConfigWtpAdmin=fgWcWtpConfigWtpAdmin, fgApSMTPReqProcessed=fgApSMTPReqProcessed, fgWanOptLanInTraffic=fgWanOptLanInTraffic, fgApFTPMemUsage=fgApFTPMemUsage, fgWcStaRadioId=fgWcStaRadioId, fgt3700D=fgt3700D, fgSysDiskCapacity=fgSysDiskCapacity, fgUsbportEntIndex=fgUsbportEntIndex, fgDeviceMacAddress=fgDeviceMacAddress, fgVpnTunEntIndex=fgVpnTunEntIndex, fgWcWtpSessionWtpDaemonUpTime=fgWcWtpSessionWtpDaemonUpTime, fgHaStatsAvCount=fgHaStatsAvCount, fgFwPol6PktCount=fgFwPol6PktCount, fgWcWtpProfilePlatform=fgWcWtpProfilePlatform, fgWebCacheUpTime=fgWebCacheUpTime, fgUsbportCount=fgUsbportCount, fgAppSuFileScanned=fgAppSuFileScanned, fgWcWtpConfigWtpProfile=fgWcWtpConfigWtpProfile, fgTrapAvOversizePass=fgTrapAvOversizePass, fgUsbModemProduct=fgUsbModemProduct, fgProcessorSysUsage=fgProcessorSysUsage, fgExplicitProxyScriptStatsEntry=fgExplicitProxyScriptStatsEntry, fgr90D=fgr90D, fgWcStaTable=fgWcStaTable, fgWcInfoWtpSessions=fgWcInfoWtpSessions, fgAppIMFileTransfered=fgAppIMFileTransfered, fgApPOP3MaxConnections=fgApPOP3MaxConnections, fgVpnDialupOutOctets=fgVpnDialupOutOctets, fgWcWlanSecurity=fgWcWlanSecurity, fgWcWtpSessionRadioStationCount=fgWcWtpSessionRadioStationCount, FgWcWtpRadioBandType=FgWcWtpRadioBandType, fgIntrusionPrevtObjectGroup=fgIntrusionPrevtObjectGroup, fgWanOptLanTraffic=fgWanOptLanTraffic, fgExplicitProxyArchMultiPart=fgExplicitProxyArchMultiPart, fgSystemAdvancedObjectGroup=fgSystemAdvancedObjectGroup, fgIpSessStatsTable=fgIpSessStatsTable, fgFwPol6ByteCount=fgFwPol6ByteCount, fgIpsIntrusionsDetected=fgIpsIntrusionsDetected, fgVpnTunEntSelectorSrcBeginIp=fgVpnTunEntSelectorSrcBeginIp, fgVdEntOpMode=fgVdEntOpMode, fgWcStaMacAddress=fgWcStaMacAddress, fgWebfilterInfo=fgWebfilterInfo, fgExplicitProxyFilteredOthScript=fgExplicitProxyFilteredOthScript, fgWanOptHistoryStatsEntry=fgWanOptHistoryStatsEntry, fgProcModOther=fgProcModOther, fgExplicitProxyFilteredJScript=fgExplicitProxyFilteredJScript, fgApHTTPConnections=fgApHTTPConnections, fgSysVersionAv=fgSysVersionAv, fgManIfIp6=fgManIfIp6, fgHaStatsByteCount=fgHaStatsByteCount, fgHaStatsMasterSerial=fgHaStatsMasterSerial, FgOpMode=FgOpMode, fgWcInfo=fgWcInfo, fgIntfVlanHbEntState=fgIntfVlanHbEntState, fgExplicitProxyArchUnsupported=fgExplicitProxyArchUnsupported, fgSIAdvMemBuffer=fgSIAdvMemBuffer, fgHaStatsMemUsage=fgHaStatsMemUsage, fgVirtualDomainObjectGroup=fgVirtualDomainObjectGroup, fgFwUsers=fgFwUsers, fgProcessorCount=fgProcessorCount, fgFwPolPktCountHc=fgFwPolPktCountHc, fgProcModIntegratedNPU=fgProcModIntegratedNPU, fgProcModFnXB2=fgProcModFnXB2, fgFwPol6StatsEntry=fgFwPol6StatsEntry, fgt1000D=fgt1000D, fgExplicitProxyOverriddenURLs=fgExplicitProxyOverriddenURLs, fgWcStaVci=fgWcStaVci, fgProcessorPktDroppedCount=fgProcessorPktDroppedCount, fwf60D=fwf60D, fgVpnSslTunnelBytesOut=fgVpnSslTunnelBytesOut, fgtVM64XEN=fgtVM64XEN, fgAppProxySIP=fgAppProxySIP, fgHaSystemMode=fgHaSystemMode, fgVdNumber=fgVdNumber, fgExplicitProxyVirus=fgExplicitProxyVirus, fgHwSensorTable=fgHwSensorTable, fgTrapFcSwUp=fgTrapFcSwUp, fgSystemInfo=fgSystemInfo, fgLinkMonitorState=fgLinkMonitorState, fgFgWfHTTPSAllowed=fgFgWfHTTPSAllowed, fgSysInfoAdvSessions=fgSysInfoAdvSessions, fgFortiGuardStatsTable=fgFortiGuardStatsTable, fgWebfilterStatsTable=fgWebfilterStatsTable, fgMemCacheUsage=fgMemCacheUsage, fwf50E=fwf50E, fgWcWtpConfigRadioAutoTxPowerHigh=fgWcWtpConfigRadioAutoTxPowerHigh, fgWcWlanLocalBridging=fgWcWlanLocalBridging, fgWcApSerial=fgWcApSerial, fgHaStatsGlobalChecksum=fgHaStatsGlobalChecksum, fgLinkMonitorTable=fgLinkMonitorTable, fgMemCacheHits=fgMemCacheHits, fgVdMaxVdoms=fgVdMaxVdoms, fgApSIPOtherReq=fgApSIPOtherReq, fgApFTPUpTime=fgApFTPUpTime, fgSIAdvMemCacheInactive=fgSIAdvMemCacheInactive, fgTrapIpsPkgUpdate=fgTrapIpsPkgUpdate, fgIntfVrrpEntIndex=fgIntfVrrpEntIndex, fgWcWtpConfigRadioTxPowerLevel=fgWcWtpConfigRadioTxPowerLevel, fgUsbModemSimId=fgUsbModemSimId, fgServerLoadBalanceTrapObjects=fgServerLoadBalanceTrapObjects, fgFwPolStatsEntry=fgFwPolStatsEntry, fgWcWtpProfileName=fgWcWtpProfileName, fgFgWfHTTPAllowed=fgFgWfHTTPAllowed, fgApHTTPUpTime=fgApHTTPUpTime, fgWanOptHistoryStatsTable=fgWanOptHistoryStatsTable, fgManIfMask=fgManIfMask, fgProcessorPktRxCount=fgProcessorPktRxCount, fgProcModSACount=fgProcModSACount, fgAppP2PStatsTable=fgAppP2PStatsTable, fgWcWlanEncryption=fgWcWlanEncryption, fgSysSes6Rate30=fgSysSes6Rate30, fgHaStatsIndex=fgHaStatsIndex, fgSysSesRate1=fgSysSesRate1, fgIntfVlanHbTable=fgIntfVlanHbTable, fgHwSensors=fgHwSensors, fgHaTables=fgHaTables, fgWcStaSignal=fgWcStaSignal, fgAvIMVirusDetected=fgAvIMVirusDetected, fgVdEnabled=fgVdEnabled, fgTrapWcApDown=fgTrapWcApDown, fgAppVoIPCallBlocked=fgAppVoIPCallBlocked, fgWcWtpProfileRadioTxPowerLevel=fgWcWtpProfileRadioTxPowerLevel, fgHwSensorEntValue=fgHwSensorEntValue, fgSoftwareObjectGroup=fgSoftwareObjectGroup, fgNotificationGroup=fgNotificationGroup, fgVpnSslStatsActiveWebSessions=fgVpnSslStatsActiveWebSessions, fgt80C=fgt80C, fgt800C=fgt800C, fgApPOP3MemUsage=fgApPOP3MemUsage, fgIntfVlanHbEntSerial=fgIntfVlanHbEntSerial, fgWcWtpConfigRadioApScan=fgWcWtpConfigRadioApScan, fgWcWtpSessionWtpMemoryUsage=fgWcWtpSessionWtpMemoryUsage, fgUsbportManufacturer=fgUsbportManufacturer, fgProcessorModuleEntry=fgProcessorModuleEntry, fgIpSessNumber=fgIpSessNumber, fgApSIPMemUsage=fgApSIPMemUsage, fgProcessorFnNP4=fgProcessorFnNP4, fgSIAdvMemPageCache=fgSIAdvMemPageCache, fgExplicitProxyUpTime=fgExplicitProxyUpTime, fgt80CM=fgt80CM, fgSysUpTime=fgSysUpTime, fgApHTTPStatsTable=fgApHTTPStatsTable, fgFwUserState=fgFwUserState, fgAppSuNumber=fgAppSuNumber, fgUsbportRevision=fgUsbportRevision, fgVpnSslState=fgVpnSslState, fgWfHTTPBlocked=fgWfHTTPBlocked, fgIntfObjectGroup=fgIntfObjectGroup, fgt5001C=fgt5001C, fgWcWlanRadiusServer=fgWcWlanRadiusServer, fgLinkMonitor=fgLinkMonitor, fgWebCacheRAMUsage=fgWebCacheRAMUsage, fgApFTPStatsTable=fgApFTPStatsTable, fgProcessorType=fgProcessorType, fgr60D=fgr60D, fgSysVersion=fgSysVersion, fgUsbportProduct=fgUsbportProduct, fgVpnSslTunnelIndex=fgVpnSslTunnelIndex)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgApIMAPUpTime=fgApIMAPUpTime, fgWebCacheDiskStatsEntry=fgWebCacheDiskStatsEntry, fgWcWtpSessionRadioCountryString=fgWcWtpSessionRadioCountryString, fgTrapVpnTunDown=fgTrapVpnTunDown, fgApSMTPConnections=fgApSMTPConnections, fgWcWtpSessionWtpSessionUpTime=fgWcWtpSessionWtpSessionUpTime, fgFgWfHTTPSLogged=fgFgWfHTTPSLogged, fgFcObjectGroup=fgFcObjectGroup, fgWcWtpProfileRadioRadioId=fgWcWtpProfileRadioRadioId, fgApNNTPStatsEntry=fgApNNTPStatsEntry, fgFgWfHTTPBlocked=fgFgWfHTTPBlocked, fgVpnTunnelUpCount=fgVpnTunnelUpCount, fgWcStaEntry=fgWcStaEntry, fgAppP2P=fgAppP2P, fgApPOP3StatsTable=fgApPOP3StatsTable, fgAvFTPVirusDetected=fgAvFTPVirusDetected, fgIpsCritSevDetections=fgIpsCritSevDetections, FgWanOptHistPeriods=FgWanOptHistPeriods, fgFwUserEntry=fgFwUserEntry, fgWcWtpConfigVaps=fgWcWtpConfigVaps, fgIpSessExp=fgIpSessExp, fgAvFTPVirusBlocked=fgAvFTPVirusBlocked, fgFwUserVdom=fgFwUserVdom, fgApPOP3SpamDetected=fgApPOP3SpamDetected, fgApplications=fgApplications, fgExplicitProxyPolicy=fgExplicitProxyPolicy, fgLinkMonitorNumber=fgLinkMonitorNumber, fgApPOP3ReqProcessed=fgApPOP3ReqProcessed, fgWanOptTrafficStatsEntry=fgWanOptTrafficStatsEntry, fgTrapAvVirus=fgTrapAvVirus, fgVpnSslStatsMaxTunnels=fgVpnSslStatsMaxTunnels, fgWcWtpProfileRadioChannel=fgWcWtpProfileRadioChannel, fgFcTrapObjects=fgFcTrapObjects, fgProcModDescr=fgProcModDescr, fgProcModFnXD2=fgProcModFnXD2, fgVpnSslTunnelIp=fgVpnSslTunnelIp, fnFortiGateMib=fnFortiGateMib, fgWcWtpConfigRadioAutoTxPowerControl=fgWcWtpConfigRadioAutoTxPowerControl, fgWanOptProtocol=fgWanOptProtocol, fgIpSessToAddr=fgIpSessToAddr, fgApFTPStatsEntry=fgApFTPStatsEntry, fgWanOptDiskHits=fgWanOptDiskHits, fgAppProxyIMAP=fgAppProxyIMAP, fgProcessorModuleTable=fgProcessorModuleTable, fgVdTpMgmtAddrType=fgVdTpMgmtAddrType, fgWcWtpSessionWtpHwVersion=fgWcWtpSessionWtpHwVersion, fgt30DPOE=fgt30DPOE, fgMemCacheMisses=fgMemCacheMisses, fgAvNNTPVirusBlocked=fgAvNNTPVirusBlocked, fgMgmt=fgMgmt, fgWcStaHost=fgWcStaHost, fgVpnSslTunnelVdom=fgVpnSslTunnelVdom, fgWcWlanUserGroup=fgWcWlanUserGroup, fgIp6SessStatsTable=fgIp6SessStatsTable, fgDeviceLastSeen=fgDeviceLastSeen, fgHwSensorCount=fgHwSensorCount, fgTrapAvOversizeBlock=fgTrapAvOversizeBlock, fgExplicitProxyObjectGroup=fgExplicitProxyObjectGroup, fgWcWtpSessionRadioOperatingChannel=fgWcWtpSessionRadioOperatingChannel, fgt70D=fgt70D, fgVpnSslStatsTable=fgVpnSslStatsTable, fgWcStaUser=fgWcStaUser, fgVpnDialupVdom=fgVpnDialupVdom, fgHaAutoSync=fgHaAutoSync, fgAdminTable=fgAdminTable, fgIntfTables=fgIntfTables, fgHaInfo=fgHaInfo, FgWcWtpChannelWidthType=FgWcWtpChannelWidthType, fgProcessorIntel=fgProcessorIntel, FgSessProto=FgSessProto, fgWcStaOnline=fgWcStaOnline, fgSystemObjectGroup=fgSystemObjectGroup, fgAvSMTPVirusBlocked=fgAvSMTPVirusBlocked, fgVdInfo=fgVdInfo, fgt600C=fgt600C, fgObsoleteAppServicesObjectGroup=fgObsoleteAppServicesObjectGroup, fgFgWfHTTPSExamined=fgFgWfHTTPSExamined, fgFcSwSerial=fgFcSwSerial, fgSysMgmtVdom=fgSysMgmtVdom, fgVpnDialupLifetime=fgVpnDialupLifetime, fgHwSensorEntry=fgHwSensorEntry, fgIntfEntry=fgIntfEntry, fgWcStaWtpId=fgWcStaWtpId, fg300MibCompliance=fg300MibCompliance, fgUsbModemId=fgUsbModemId, fgWcInfoWtpCapacity=fgWcInfoWtpCapacity, fgWanOptDiskStatsTable=fgWanOptDiskStatsTable, fgWcWtpSessionVapByteTxCount=fgWcWtpSessionVapByteTxCount, fgProcModFnFB8=fgProcModFnFB8, fwf30DPOE=fwf30DPOE, fgWcWtpProfileRadioTable=fgWcWtpProfileRadioTable, fgUsbportClass=fgUsbportClass, fgVpnDialupTimeout=fgVpnDialupTimeout, fgWcWtpSessionVapEntry=fgWcWtpSessionVapEntry, fosVM64=fosVM64, fgVpnDialupSrcBegin=fgVpnDialupSrcBegin, fgSIAdvSesEphemeralLimit=fgSIAdvSesEphemeralLimit, fgAppIMFileTxBlocked=fgAppIMFileTxBlocked, fgAppIM=fgAppIM, fgSIAdvSesClashCount=fgSIAdvSesClashCount, fgVpnTunEntLocGwyPort=fgVpnTunEntLocGwyPort, fgAvSMTPVirusDetected=fgAvSMTPVirusDetected, FgP2PProto=FgP2PProto, fosVM64KVM=fosVM64KVM, fgUsbModemInfoObjects=fgUsbModemInfoObjects, fgt92D=fgt92D, fgt80D=fgt80D, fgProcModType=fgProcModType, fgVdEntMemUsage=fgVdEntMemUsage, FgWcWtpRadioId=FgWcWtpRadioId, fgWebfilter=fgWebfilter, fgWcWtpProfileRadioApHandoff=fgWcWtpProfileRadioApHandoff, fgAvInfo=fgAvInfo, fgProcessorUsage=fgProcessorUsage, fgIpsTrapSigMsg=fgIpsTrapSigMsg, fgExplicitProxyScanStatsTable=fgExplicitProxyScanStatsTable, fgServerLoadBalance=fgServerLoadBalance, fgVpnTunEntLocGwyIp=fgVpnTunEntLocGwyIp, fgWcInfoWtpManaged=fgWcInfoWtpManaged, fgApFTPConnections=fgApFTPConnections, fgIpsTrapSrcIp=fgIpsTrapSrcIp, fgAppIMStatsTable=fgAppIMStatsTable, fgFwPol6StatsTable=fgFwPol6StatsTable, fgIpsMedSevDetections=fgIpsMedSevDetections, fgt70DPOE=fgt70DPOE, fgProcModFnF20=fgProcModFnF20, fgIpsSignatureDetections=fgIpsSignatureDetections, FgWcWlanAuthenticationType=FgWcWlanAuthenticationType, fgWebCacheRAMLimit=fgWebCacheRAMLimit, fgFgWfHTTPSOverridden=fgFgWfHTTPSOverridden, fgIntfVrrpCount=fgIntfVrrpCount, fgIntfVrrpEntVrId=fgIntfVrrpEntVrId, fgWanOptWanOutTraffic=fgWanOptWanOutTraffic, fgApSMTPStatsEntry=fgApSMTPStatsEntry, fgtsoc3=fgtsoc3, fw60DP=fw60DP, fgt200DP=fgt200DP, fgt3240C=fgt3240C, fgAppWebCache=fgAppWebCache, fgVdTpMgmtAddr=fgVdTpMgmtAddr, fgAppProxySMTP=fgAppProxySMTP, fgIntfVrrpTable=fgIntfVrrpTable, fgFwPolicies=fgFwPolicies, fgFmTrapObjectGroup=fgFmTrapObjectGroup, fgLinkMonitorPacketSend=fgLinkMonitorPacketSend, fgIntfVlanHbEntIndex=fgIntfVlanHbEntIndex, fgSysDiskUsage=fgSysDiskUsage, fgSIAdvMemLeaveKerConsThrsh=fgSIAdvMemLeaveKerConsThrsh, fgVdEntName=fgVdEntName, fgVirtualDomain=fgVirtualDomain, fgExplicitProxyStatsTable=fgExplicitProxyStatsTable, fgMgmtTrapObjects=fgMgmtTrapObjects, fgAppServicesObjectGroup=fgAppServicesObjectGroup, fgServerLoadBalanceRealServerAddress=fgServerLoadBalanceRealServerAddress, fgt600D=fgt600D, fgProcModFnFB4=fgProcModFnFB4, fgWcWtpSessionWtpIpAddressType=fgWcWtpSessionWtpIpAddressType, fgHighAvailability=fgHighAvailability, fgVpnTunEntPhase2Name=fgVpnTunEntPhase2Name, fgExplicitProxyBlockedURLs=fgExplicitProxyBlockedURLs, fgHaStatsNetUsage=fgHaStatsNetUsage, fgWcWtpSessionVapTable=fgWcWtpSessionVapTable, fgIntfEntVdom=fgIntfEntVdom, fgt400D=fgt400D, fgWanOptLANBytesIn=fgWanOptLANBytesIn, fgVpnInfo=fgVpnInfo, fgFwPolByteCount=fgFwPolByteCount, fgVpnTrapPhase1Name=fgVpnTrapPhase1Name, fgWcWtpSessionWtpMemoryCapacity=fgWcWtpSessionWtpMemoryCapacity, fgVdEntHaState=fgVdEntHaState, fgExplicitProxyFilterStatsEntry=fgExplicitProxyFilterStatsEntry, fgFmTrapPrefix=fgFmTrapPrefix, fgExplicitProxyStatsEntry=fgExplicitProxyStatsEntry, fgVpnTunEntRemGwyIp=fgVpnTunEntRemGwyIp, FgVdIndex=FgVdIndex, fgExplicitProxyBlockedConType=fgExplicitProxyBlockedConType, fgHwSensorsObjectGroup=fgHwSensorsObjectGroup, fgIpsIntrusionsBlocked=fgIpsIntrusionsBlocked, fgAppVoIPStatsTable=fgAppVoIPStatsTable, fgMibConformance=fgMibConformance, fgProcessorEntry=fgProcessorEntry, fgTrapFazDisconnect=fgTrapFazDisconnect, fgFirewallObjectGroup=fgFirewallObjectGroup, fgWcStaBandwidthTx=fgWcStaBandwidthTx, fgt50E=fgt50E, fgHaStatsSerial=fgHaStatsSerial, fgt5001D=fgt5001D, fgUsbports=fgUsbports, fgIntf=fgIntf, fgSIAdvSesEphemeralCount=fgSIAdvSesEphemeralCount, fgAppP2PStatsEntry=fgAppP2PStatsEntry, fgTrapAvFragmented=fgTrapAvFragmented, fwf30D=fwf30D, fgWcWtpProfileCountryString=fgWcWtpProfileCountryString, fgWcWtpSessionRadioBaseBssid=fgWcWtpSessionRadioBaseBssid, fgProcModFnXG2=fgProcModFnXG2, fgVpnSslTunnelBytesIn=fgVpnSslTunnelBytesIn, fgWcWtpSessionRadioMode=fgWcWtpSessionRadioMode, fgApIMAPSpamDetected=fgApIMAPSpamDetected, fwf51E=fwf51E, fgWcInfoStationCount=fgWcInfoStationCount, fgWcWtpConfigRadioAutoTxPowerLow=fgWcWtpConfigRadioAutoTxPowerLow, fgFwPol6ID=fgFwPol6ID, fgtVM64HV=fgtVM64HV, fgApIMMemUsage=fgApIMMemUsage, fgApNNTPMaxConnections=fgApNNTPMaxConnections, fgExplicitProxyUsers=fgExplicitProxyUsers, fgExplicitProxyFilteredVBS=fgExplicitProxyFilteredVBS, fgApIMAPReqProcessed=fgApIMAPReqProcessed, fgVpnTunEntVdom=fgVpnTunEntVdom, fgWcWtpProfileRadioFrequencyHandoff=fgWcWtpProfileRadioFrequencyHandoff, fgWfHTTPSBlocked=fgWfHTTPSBlocked, fgUsbportsObjectGroup=fgUsbportsObjectGroup, FgScanAvDisposition=FgScanAvDisposition, fgVpnSslTunnelTable=fgVpnSslTunnelTable, fgWcWtpSessionRadioEntry=fgWcWtpSessionRadioEntry, fgSysCpuUsage=fgSysCpuUsage, fgIntfVlanHbs=fgIntfVlanHbs, fgVpnTunEntOutOctets=fgVpnTunEntOutOctets, fgIntfVrrpEntVrIp=fgIntfVrrpEntVrIp, fwf92D=fwf92D, fgIpSessEntry=fgIpSessEntry, fgVpnTunEntSelectorDstEndIp=fgVpnTunEntSelectorDstEndIp, fgUsbModemSimState=fgUsbModemSimState, fgApHTTPMemUsage=fgApHTTPMemUsage, fgWanOptDiskMisses=fgWanOptDiskMisses, fgVpnDialupTable=fgVpnDialupTable, fgProcessorUserUsage=fgProcessorUserUsage, fgVdEntSesCount=fgVdEntSesCount, fgt1500DT=fgt1500DT, fgWcWtpSessionWtpStationCount=fgWcWtpSessionWtpStationCount, fgAppP2PConnBlocked=fgAppP2PConnBlocked, fgt3810D=fgt3810D, fgWanOptWANBytesOut=fgWanOptWANBytesOut, FgWcWlanEncryptionType=FgWcWlanEncryptionType, fgUsbportSerial=fgUsbportSerial, fgWebCacheRequests=fgWebCacheRequests, fgTrapAvOversize=fgTrapAvOversize, fgProcModFnC20=fgProcModFnC20, fgTraps=fgTraps, fgApNNTPConnections=fgApNNTPConnections, fgWcStaNoise=fgWcStaNoise, fgVdTpEntry=fgVdTpEntry, fgWanOptDiskUsage=fgWanOptDiskUsage, fgtVM64AWSONDEMAND=fgtVM64AWSONDEMAND, fgTrapDeviceNew=fgTrapDeviceNew, fgWcWtpProfileRadioChannelBonding=fgWcWtpProfileRadioChannelBonding, fgApSIPUpTime=fgApSIPUpTime, fgVpnTunEntSelectorSrcEndIp=fgVpnTunEntSelectorSrcEndIp, fgt240DP=fgt240DP, fgAvIMVirusBlocked=fgAvIMVirusBlocked, fwf80CM=fwf80CM, fgWcInfoStationCapacity=fgWcInfoStationCapacity, fgAntivirusObjectGroup=fgAntivirusObjectGroup)
mibBuilder.exportSymbols("FORTINET-FORTIGATE-MIB", fgt100D=fgt100D, fgExplicitProxyArchBomb=fgExplicitProxyArchBomb, fgWebCacheDiskMisses=fgWebCacheDiskMisses, fgSysSes6Count=fgSysSes6Count, fgTrapAvEnterConserve=fgTrapAvEnterConserve, fgHaStatsSyncDatimeUnsucc=fgHaStatsSyncDatimeUnsucc, fgIp6SessStatsEntry=fgIp6SessStatsEntry, fgWcObjectGroup=fgWcObjectGroup, fgt90D=fgt90D, fgApFTPMaxConnections=fgApFTPMaxConnections, fgWebCacheDiskStatsTable=fgWebCacheDiskStatsTable, fgWebCacheObjectGroup=fgWebCacheObjectGroup, fgt90DPOE=fgt90DPOE, fgProcessorXlr=fgProcessorXlr, fgFcSwVdom=fgFcSwVdom, fgApSMTPSpamDetected=fgApSMTPSpamDetected, fgTrapAvPattern=fgTrapAvPattern, fgVdTables=fgVdTables, fgHaGroupName=fgHaGroupName, fgExplicitProxyBannedWords=fgExplicitProxyBannedWords, fgVpnSslStatsMaxUsers=fgVpnSslStatsMaxUsers, fgTrapServerLoadBalanceRealServerDown=fgTrapServerLoadBalanceRealServerDown, fgIpSessFromPort=fgIpSessFromPort, fgVpnTrapObjects=fgVpnTrapObjects, fgWcWtpProfileTable=fgWcWtpProfileTable, FgAdminPermLevel=FgAdminPermLevel, fgExplicitProxyExaminedURLs=fgExplicitProxyExaminedURLs, fgIpSessIndex=fgIpSessIndex, fgHaStatsEntry=fgHaStatsEntry, fgAppWanOpt=fgAppWanOpt, fgWcWtpProfileRadioChannelWidth=fgWcWtpProfileRadioChannelWidth, fgIpSessStatsEntry=fgIpSessStatsEntry, fgWcStaIpAddressType=fgWcStaIpAddressType, fgApHTTPStatsEntry=fgApHTTPStatsEntry, fgVpnTrapRemoteGateway=fgVpnTrapRemoteGateway, FgWcWtpRadioMode=FgWcWtpRadioMode, fgProcessorTable=fgProcessorTable, fgHaStatsHostname=fgHaStatsHostname, fgVpnTunEntSelectorProto=fgVpnTunEntSelectorProto, fgLinkMonitorPacketLoss=fgLinkMonitorPacketLoss, fgWanOptUpTime=fgWanOptUpTime, fgApSMTPStatsTable=fgApSMTPStatsTable, fgExplicitProxyArchNest=fgExplicitProxyArchNest, FgHaMode=FgHaMode, fgProcModProcessorCount=fgProcModProcessorCount, fgWcWtpSessionWtpModelNumber=fgWcWtpSessionWtpModelNumber, fgWanOptHistPeriod=fgWanOptHistPeriod, fgHaStatsSesCount=fgHaStatsSesCount, fgWanOptDisk=fgWanOptDisk, fgt51E=fgt51E, fgAdminOptions=fgAdminOptions, fgHaSchedule=fgHaSchedule, fgWcStaIdle=fgWcStaIdle, fgWcWtpConfigRadioBand=fgWcWtpConfigRadioBand, fgExplicitProxyArchEncrypted=fgExplicitProxyArchEncrypted, fgHaStatsTable=fgHaStatsTable, fgWfActiveXBlocked=fgWfActiveXBlocked, fgApSMTPMaxConnections=fgApSMTPMaxConnections, fgExplicitProxyScanStatsDisp=fgExplicitProxyScanStatsDisp, fgSysMemUsage=fgSysMemUsage, fgLinkMonitorID=fgLinkMonitorID, fgByteCacheRAMLimit=fgByteCacheRAMLimit, fgFmTrapConfChange=fgFmTrapConfChange, fgUsbModemInfo=fgUsbModemInfo, fgIntfVrrpEntIfName=fgIntfVrrpEntIfName, fgApSIPClientReg=fgApSIPClientReg, fgWebFilterObjectGroup=fgWebFilterObjectGroup, fgAppSuIndex=fgAppSuIndex, fgWcWlanBroadcastSsid=fgWcWlanBroadcastSsid, fgWcStaBandwidthRx=fgWcStaBandwidthRx, fgWfHTTPURLBlocked=fgWfHTTPURLBlocked, fgHaTrapMemberSerial=fgHaTrapMemberSerial, fgSysSesCount=fgSysSesCount, fgVpnTunEntInOctets=fgVpnTunEntInOctets, fgIntfInfo=fgIntfInfo, fgSysMemCapacity=fgSysMemCapacity, fgUsbportVersion=fgUsbportVersion, fgProcModSessionCount=fgProcModSessionCount, fgWanOptDiskLimit=fgWanOptDiskLimit, fgApSIPStatsEntry=fgApSIPStatsEntry, fgt140D=fgt140D, fgWcWtpSessionVapRadioId=fgWcWtpSessionVapRadioId, fgProcessorOther=fgProcessorOther, fgSysSesRate10=fgSysSesRate10, PYSNMP_MODULE_ID=fnFortiGateMib, fgAvHTTPVirusDetected=fgAvHTTPVirusDetected, FgWcCountryString=FgWcCountryString, fgAdminTables=fgAdminTables, fgApNNTPMemUsage=fgApNNTPMemUsage, fgMIBCompliance=fgMIBCompliance, fgApIMAPConnections=fgApIMAPConnections, fgWcWtpConfigWtpLocation=fgWcWtpConfigWtpLocation, fgManIfIp=fgManIfIp, fgt94DPOE=fgt94DPOE, fgFwPolLastUsed=fgFwPolLastUsed, fgFwUserInfo=fgFwUserInfo, fgAdmin=fgAdmin, fgVpnTunEntTimeout=fgVpnTunEntTimeout, fgWcWlanSsid=fgWcWlanSsid, fgIntfTable=fgIntfTable, fgWanOptLanOutTraffic=fgWanOptLanOutTraffic, fgWcWtpProfileRadioAutoTxPowerControl=fgWcWtpProfileRadioAutoTxPowerControl, fgWcWtpSessionEntry=fgWcWtpSessionEntry, fgtVM64AWS=fgtVM64AWS, fgHaStatsSyncStatus=fgHaStatsSyncStatus, fgWcWlanEntry=fgWcWlanEntry, fgSysInfoAdvMem=fgSysInfoAdvMem, fgAvHTTPVirusBlocked=fgAvHTTPVirusBlocked, fgFmTrapDeployInProgress=fgFmTrapDeployInProgress, fgProcessorFnNP6=fgProcessorFnNP6, fgUsbModemVendor=fgUsbModemVendor, fgSIAdvMemEnterProxyConsThrsh=fgSIAdvMemEnterProxyConsThrsh, fgWcWtpConfigEntry=fgWcWtpConfigEntry, fgHaGroupId=fgHaGroupId, fgSIAdvMemCacheActive=fgSIAdvMemCacheActive, fgVpnTunEntLifeSecs=fgVpnTunEntLifeSecs, fgFwPolID=fgFwPolID, fgVpnSslStatsMaxWebSessions=fgVpnSslStatsMaxWebSessions, fgIpSessFromAddr=fgIpSessFromAddr, fgHwSensorEntIndex=fgHwSensorEntIndex, fgProcessorEntIndex=fgProcessorEntIndex, fgWcApName=fgWcApName, fgExplicitProxyScriptStatsTable=fgExplicitProxyScriptStatsTable, fgExplicitProxyAllowedURLs=fgExplicitProxyAllowedURLs, fgHaStatsCpuUsage=fgHaStatsCpuUsage, fgLinkMonitorName=fgLinkMonitorName, fgIpsHighSevDetections=fgIpsHighSevDetections, fgHaStatsSyncDatimeSucc=fgHaStatsSyncDatimeSucc, fgVpnTunEntSelectorSrcPort=fgVpnTunEntSelectorSrcPort, fgt60DPOE=fgt60DPOE, fgVdEntIndex=fgVdEntIndex, fgAvIMAPVirusBlocked=fgAvIMAPVirusBlocked, fgFwUserTable=fgFwUserTable, fgSysLowMemCapacity=fgSysLowMemCapacity, fgTrapAvBypass=fgTrapAvBypass, fgVpnDialupInOctets=fgVpnDialupInOctets, fgTrapHaMemberUp=fgTrapHaMemberUp, fgIntfVlanHbEntIfName=fgIntfVlanHbEntIfName, fgWcStaGroup=fgWcStaGroup, fg900D=fg900D, fgt280D=fgt280D, fwf81CM=fwf81CM, fgAppP2PProtoTable=fgAppP2PProtoTable, fgExplicitProxyFilteredJS=fgExplicitProxyFilteredJS, fgWebCacheDiskHits=fgWebCacheDiskHits, fgProcModMemUsage=fgProcModMemUsage, fgWebCacheInfo=fgWebCacheInfo, fgVpnDialupGateway=fgVpnDialupGateway, fgWanOptStatsEntry=fgWanOptStatsEntry)
