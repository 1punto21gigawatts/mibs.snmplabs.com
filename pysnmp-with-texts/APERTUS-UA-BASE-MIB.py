#
# PySNMP MIB module APERTUS-UA-BASE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APERTUS-UA-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, IpAddress, Unsigned32, NotificationType, ObjectIdentity, TimeTicks, ModuleIdentity, Gauge32, Counter32, Bits, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Unsigned32", "NotificationType", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Gauge32", "Counter32", "Bits", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Counter64")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
apertus = MibIdentifier((1, 3, 6, 1, 4, 1, 543))
isg = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3))
aperua = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3))
aperbaseua = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1))
aperUaMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1))
aperUaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1))
aperUaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 1))
aperUaDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2))
aperUaConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("loading", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaConfigStatus.setDescription('Status of Universal Access server')
aperUaConfigUpTime = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaConfigUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaConfigUpTime.setDescription('This value represents the time elapsed since the server was started in 1/100nths of a second.')
aperUaConfigResetTime = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaConfigResetTime.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaConfigResetTime.setDescription('This value represents the time elapsed since the server was reset in 1/100nths of a second.')
aperUaDomainTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: aperUaDomainTable.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaDomainTable.setDescription('Domain information broken down domain name.')
aperUaDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "APERTUS-UA-BASE-MIB", "aperUaDomainName"))
if mibBuilder.loadTexts: aperUaDomainEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaDomainEntry.setDescription('This table contains information on each of the load balance domains under its control.')
aperUaDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaDomainName.setDescription('The zone name for this load-balance domain.')
aperUaDomainQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainQueries.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaDomainQueries.setDescription('The number of queries that have occured for this zone.')
aperUaDomainLastAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainLastAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaDomainLastAnswer.setDescription('The IP address for the last answer given out to a resolve request on this zone. A value of 0.0.0.0 indicates that no answer has been given yet.')
aperUaDomainLastQueryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainLastQueryTime.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaDomainLastQueryTime.setDescription('The time since the last query for this zone in 1/100nths of a second. This value is only valid if aperUaDomainLastAnswer is not 0.0.0.0.')
aperUaDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainType.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaDomainType.setDescription('A textual note as to what type of Decision Process is being used within the zone.')
aperUaDomainTypeOID = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainTypeOID.setStatus('mandatory')
if mibBuilder.loadTexts: aperUaDomainTypeOID.setDescription('The OID of the MIB area for this Decision Process type. Accessing this area will detail the decision information and host addresses.')
mibBuilder.exportSymbols("APERTUS-UA-BASE-MIB", aperUaDomainLastQueryTime=aperUaDomainLastQueryTime, experimental=experimental, aperUaDomain=aperUaDomain, aperUaDomainTable=aperUaDomainTable, aperUaConfigUpTime=aperUaConfigUpTime, aperUaDomainName=aperUaDomainName, mgmt=mgmt, aperUaDomainEntry=aperUaDomainEntry, apertus=apertus, directory=directory, aperbaseua=aperbaseua, aperUaMIBObjects=aperUaMIBObjects, internet=internet, private=private, enterprises=enterprises, aperUaDomainTypeOID=aperUaDomainTypeOID, isg=isg, aperUaConfigStatus=aperUaConfigStatus, aperUaDomainType=aperUaDomainType, aperua=aperua, aperUaConfigResetTime=aperUaConfigResetTime, aperUaMIB=aperUaMIB, aperUaConfig=aperUaConfig, aperUaDomainQueries=aperUaDomainQueries, aperUaDomainLastAnswer=aperUaDomainLastAnswer)
