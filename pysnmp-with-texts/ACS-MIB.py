#
# PySNMP MIB module ACS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, NotificationType, Bits, TimeTicks, Counter32, Unsigned32, enterprises, MibIdentifier, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "NotificationType", "Bits", "TimeTicks", "Counter32", "Unsigned32", "enterprises", "MibIdentifier", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "IpAddress", "Counter64")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
acs = ModuleIdentity((1, 3, 6, 1, 4, 1, 10418, 16))
acs.setRevisions(('2010-10-10 00:00', '2009-12-11 00:00', '2007-09-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acs.setRevisionsDescriptions(('Add products acs6004 and acs6008', 'Extended acsPowerMgmt to support data monitoring and Avocent PM-PDUs', 'First Draft',))
if mibBuilder.loadTexts: acs.setLastUpdated('201010100000Z')
if mibBuilder.loadTexts: acs.setOrganization('Avocent Corporation')
if mibBuilder.loadTexts: acs.setContactInfo('postal : Avocent Corporation 47281 Bayside Parkway Fremont, CA 94538, USA e-mail : Technical Support techsupport@avocent.com')
if mibBuilder.loadTexts: acs.setDescription('This module defines the Avocent MIB extensions to ACS60xx products.')
acsProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 1))
acsManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 2))
acs6016 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 1, 1))
acs6032 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 1, 2))
acs6048 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 1, 3))
acs6004 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 1, 4))
acs6008 = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 1, 5))
acsAppliance = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1))
acsSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2))
acsSerialPort = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3))
acsPowerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5))
acsTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 10418, 16, 2, 6))
class PowerSupplyState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 9999))
    namedValues = NamedValues(("statePowerOn", 1), ("statePowerOff", 2), ("powerNotInstaled", 9999))

class SerialPortSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 230400, 460800))
    namedValues = NamedValues(("speed300bps", 300), ("speed600bps", 600), ("speed1200bps", 1200), ("speed2400bps", 2400), ("speed4800bps", 4800), ("speed9600bps", 9600), ("speed19200bps", 19200), ("speed38400bps", 38400), ("speed57600bps", 57600), ("speed115200bps", 115200), ("speed230400bps", 230400), ("speed460800bps", 460800))

class SerialPortSignalState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class SerialPortPinOut(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cyclades", 1), ("cisco", 2))

acsHostName = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsHostName.setStatus('current')
if mibBuilder.loadTexts: acsHostName.setDescription('The appliance name')
acsProductModel = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsProductModel.setStatus('current')
if mibBuilder.loadTexts: acsProductModel.setDescription('The appliance product model')
acsPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPartNumber.setStatus('current')
if mibBuilder.loadTexts: acsPartNumber.setDescription('The part number of this appliance as shown on the label attached or imprinted on the appliance.')
acsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialNumber.setStatus('current')
if mibBuilder.loadTexts: acsSerialNumber.setDescription('The serial number of this appliance as shown on the label attached or imprinted on the appliance.')
acsEIDNumber = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsEIDNumber.setStatus('current')
if mibBuilder.loadTexts: acsEIDNumber.setDescription('The electronic ID number (EID) of this appliance as shown on the label attached or imprinted on the appliance.')
acsBootcodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsBootcodeVersion.setStatus('current')
if mibBuilder.loadTexts: acsBootcodeVersion.setDescription('The version of the bootcode of this appliance.')
acsFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: acsFirmwareVersion.setDescription('The version of the firmware of this appliance.')
acsPowerSupply = ObjectIdentity((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 8))
if mibBuilder.loadTexts: acsPowerSupply.setStatus('current')
if mibBuilder.loadTexts: acsPowerSupply.setDescription('It gives information about Power Supply of this appliance')
acsPowerSupplyNumber = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerSupplyNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerSupplyNumber.setDescription('Number of the power supplies of this appliance')
acsPowerSupplyStatePw1 = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 8, 2), PowerSupplyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerSupplyStatePw1.setStatus('current')
if mibBuilder.loadTexts: acsPowerSupplyStatePw1.setDescription('State of the first power supply')
acsPowerSupplyStatePw2 = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 8, 3), PowerSupplyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerSupplyStatePw2.setStatus('current')
if mibBuilder.loadTexts: acsPowerSupplyStatePw2.setDescription('State of the second power supply')
acsReboot = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsReboot.setStatus('current')
if mibBuilder.loadTexts: acsReboot.setDescription('A set value of reboot(2) will reboot the appliance. noAction(1) = always returned in a GET. Does nothing if SET. reboot(2) = when SET the appliance immediately reboots.')
acsActiveSessionsNumberOfSession = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsActiveSessionsNumberOfSession.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsNumberOfSession.setDescription('Number of active sessions.')
acsActiveSessionsTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2), )
if mibBuilder.loadTexts: acsActiveSessionsTable.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTable.setDescription('This table contains the list of active sessions.')
acsActiveSessionsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1), ).setIndexNames((0, "ACS-MIB", "acsActiveSessionsTableIndex"))
if mibBuilder.loadTexts: acsActiveSessionsTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableEntry.setDescription('each entry has the information about the active session')
acsActiveSessionsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsActiveSessionsTableIndex.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableIndex.setDescription('A unique index representing an entry in this table.')
acsActiveSessionsTableUser = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsActiveSessionsTableUser.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableUser.setDescription('The name of the user that opens this session.')
acsActiveSessionsTableGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsActiveSessionsTableGroup.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableGroup.setDescription('The name of the group that the user belongs to.')
acsActiveSessionsTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsActiveSessionsTableType.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableType.setDescription('The session type.')
acsActiveSessionsTableConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsActiveSessionsTableConnection.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableConnection.setDescription('Connection type.')
acsActiveSessionsTableSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsActiveSessionsTableSessionTime.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableSessionTime.setDescription('Time of the session')
acsActiveSessionsTableFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsActiveSessionsTableFrom.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableFrom.setDescription('The source IP address of the session.')
acsActiveSessionsTableKill = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("killSession", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsActiveSessionsTableKill.setStatus('current')
if mibBuilder.loadTexts: acsActiveSessionsTableKill.setDescription('A set value of killSession(2) will kill the session. noAction(1) = always returned in a GET. Does nothing if SET. killSession(2)= when SET the appliance immediately kills the session.')
acsSerialPortNumberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortNumberOfPorts.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortNumberOfPorts.setDescription('Number of Serial Ports (physical serial port plus Aux Port.')
acsSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2), )
if mibBuilder.loadTexts: acsSerialPortTable.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTable.setDescription('This table contains information about serial ports.')
acsSerialPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1), ).setIndexNames((0, "ACS-MIB", "acsSerialPortTableNumber"))
if mibBuilder.loadTexts: acsSerialPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableEntry.setDescription('each entry has the information about specific serial port.')
acsSerialPortTableNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 49))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableNumber.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableNumber.setDescription('A unique index representing an entry in this table. It is the number of the serial port. For AUX port, the number will be the number of physical serial ports plus 1.')
acsSerialPortTableDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableDeviceName.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableDeviceName.setDescription('The associated device name for the serial port.')
acsSerialPortTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("idle", 2), ("inUse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableStatus.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableStatus.setDescription('The status of the serial port: disabled(1) = it was configured as disable. idle(2) = there is not any session opened in this port. inUse(3) = there is session(s) opened in this port.')
acsSerialPortTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableName.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableName.setDescription('Name associated with this serial port.')
acsSerialPortTableProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("casProfile", 1), ("tsProfile", 2), ("dialInProfile", 3), ("powerProfile", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableProfile.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableProfile.setDescription('Configured profile for this serial port.')
acsSerialPortTablePinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 6), SerialPortPinOut()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTablePinOut.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTablePinOut.setDescription('RJ45 Pin-out configured for this serial port.')
acsSerialPortTableComSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 7), SerialPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableComSpeed.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableComSpeed.setDescription('Speed configured for this serial port.')
acsSerialPortTableComParity = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableComParity.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableComParity.setDescription('Parity configured for this serial port.')
acsSerialPortTableComDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableComDataSize.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableComDataSize.setDescription('Data Size configured for this serial port.')
acsSerialPortTableComStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableComStopBits.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableComStopBits.setDescription('Number of Stop Bits configured for this serial port.')
acsSerialPortTableComFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("software", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableComFlowControl.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableComFlowControl.setDescription('Flow Control configured for this serial port.')
acsSerialPortTableSignalStateDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 12), SerialPortSignalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableSignalStateDTR.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableSignalStateDTR.setDescription('State of the DTR RS-232C signal.')
acsSerialPortTableSignalStateDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 13), SerialPortSignalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableSignalStateDCD.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableSignalStateDCD.setDescription('State of the DCD RS-232C signal.')
acsSerialPortTableSignalStateRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 14), SerialPortSignalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableSignalStateRTS.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableSignalStateRTS.setDescription('State of the RTS RS-232C signal.')
acsSerialPortTableSignalStateCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 15), SerialPortSignalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableSignalStateCTS.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableSignalStateCTS.setDescription('State of the CTS RS-232C signal.')
acsSerialPortTableTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableTxBytes.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableTxBytes.setDescription('The number of transmited bytes by the serial port.')
acsSerialPortTableRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableRxBytes.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableRxBytes.setDescription('The number of received bytes by the serial port.')
acsSerialPortTableFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableFrameError.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableFrameError.setDescription('The number of frame error detected in the serial port.')
acsSerialPortTableParityError = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableParityError.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableParityError.setDescription('The number of parity error detected in the serial port.')
acsSerialPortTableBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableBreak.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableBreak.setDescription('The number of break detected in the serial port.')
acsSerialPortTableOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsSerialPortTableOverrun.setStatus('current')
if mibBuilder.loadTexts: acsSerialPortTableOverrun.setDescription('The number of overrun error detected in the serial port.')
acsPowerMgmtNumSerialPorts = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtNumSerialPorts.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtNumSerialPorts.setDescription('The number of Serial Ports that has PDU connected on the appliance.')
acsPowerMgmtSerialTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 2), )
if mibBuilder.loadTexts: acsPowerMgmtSerialTable.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtSerialTable.setDescription('Information about each serial port thas has PDU connect.')
acsPowerMgmtSerialTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 2, 1), ).setIndexNames((0, "ACS-MIB", "acsPowerMgmtSerialTableIndex"))
if mibBuilder.loadTexts: acsPowerMgmtSerialTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtSerialTableEntry.setDescription('Information about each serial port thas has PDU connect.')
acsPowerMgmtSerialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtSerialTableIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtSerialTableIndex.setDescription('The index of the register.')
acsPowerMgmtSerialTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtSerialTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtSerialTablePortNumber.setDescription('The number of the serial port when the PDU is connected.')
acsPowerMgmtSerialTableDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtSerialTableDeviceName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtSerialTableDeviceName.setDescription('The device name of this serial port.')
acsPowerMgmtSerialTableNumberPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtSerialTableNumberPDUs.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtSerialTableNumberPDUs.setDescription('Total number of units connected in this serial port.')
acsPowerMgmtPDUTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3), )
if mibBuilder.loadTexts: acsPowerMgmtPDUTable.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTable.setDescription('This table contains the list of detected PDUs.')
acsPowerMgmtPDUTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1), ).setIndexNames((0, "ACS-MIB", "acsPowerMgmtPDUTablePortNumber"), (0, "ACS-MIB", "acsPowerMgmtPDUTablePduIndex"))
if mibBuilder.loadTexts: acsPowerMgmtPDUTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableEntry.setDescription('each entry has the information about the PDU.')
acsPowerMgmtPDUTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePortNumber.setDescription('Number of serial port when the PDU is connected.')
acsPowerMgmtPDUTablePduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePduIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePduIndex.setDescription('A PDU position in the chain.')
acsPowerMgmtPDUTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePduId.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePduId.setDescription('PDU identification.')
acsPowerMgmtPDUTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePortName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePortName.setDescription('Name of serial port when the PDU is connected.')
acsPowerMgmtPDUTableModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableModel.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableModel.setDescription('Model of the PDU.')
acsPowerMgmtPDUTableVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVendor.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVendor.setDescription('Vendor of the PDU.')
acsPowerMgmtPDUTableFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableFirmwareVersion.setDescription('Version of the PDU firmware.')
acsPowerMgmtPDUTableNumberOfOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableNumberOfOutlets.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableNumberOfOutlets.setDescription('Number of outlets of the PDU.')
acsPowerMgmtPDUTableCurrentNOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentNOS.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentNOS.setDescription('Number of current sensors in the PDU.')
acsPowerMgmtPDUTableCurrent1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent1Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent1Value.setDescription('Current of the sensor 1 in this PDU unit in AMP. The value of this object is the actual current in AMP * 10. You need to translate the readed value (Ex. : value is 5, the current is 0.5 AMP.)')
acsPowerMgmtPDUTableCurrent1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent1Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent1Max.setDescription('Maximum current of the sensor 1 in this PDU unit in AMP. When the PDU does not have support for maximum value, the value will be 0. The value of this object is the actual current in AMP * 10. You need to translate the readed value (Ex. : value is 5, the current is 0.5 AMP.) Clear this value, set it with Zero value.')
acsPowerMgmtPDUTableCurrent2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent2Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent2Value.setDescription('Current of the sensor 2 in this PDU unit in AMP. The value of this object is the actual current in AMP * 10. You need to translate the readed value (Ex. : value is 5, the current is 0.5 AMP.)')
acsPowerMgmtPDUTableCurrent2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent2Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent2Max.setDescription('Maximum current of the sensor 2 in this PDU unit in AMP. When the PDU does not have support for maximum value, the value will be 0. The value of this object is the actual current in AMP * 10. You need to translate the readed value (Ex. : value is 5, the current is 0.5 AMP.) Clear this value, set it with Zero value.')
acsPowerMgmtPDUTableCurrent3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent3Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent3Value.setDescription('Current of the sensor 3 in this PDU unit in AMP. The value of this object is the actual current in AMP * 10. You need to translate the readed value (Ex. : value is 5, the current is 0.5 AMP.)')
acsPowerMgmtPDUTableCurrent3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent3Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrent3Max.setDescription('Maximum current of the sensor 3 in this PDU unit in AMP. When the PDU does not have support for maximum value, the value will be 0. The value of this object is the actual current in AMP * 10. You need to translate the readed value (Ex. : value is 5, the current is 0.5 AMP.) Clear this value, set it with Zero value.')
acsPowerMgmtPDUTableTemperatureNOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperatureNOS.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperatureNOS.setDescription('Number of temperature sensors in the PDU.')
acsPowerMgmtPDUTableTemperature1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature1Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature1Value.setDescription('Temperature of this PM unit in Celsius degrees. The value of this object is the actual temperature in degrees C * 10. You need to translate the readed value (Ex. : value is 240, the temperature is 24 Celsius.) If the temperature measurement is not installed this value will be 0. Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).')
acsPowerMgmtPDUTableTemperature1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature1Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature1Max.setDescription('Maximum temperature detected in this PM unit in Celsius degrees. The value will be Zero when the PDU does not have support for maximum value. The value of this object is the actual temperature in degrees C * 10. You need to translate the readed value (Ex. : value is 240, the temperature is 24 Celsius.) If the temperature measurement is not installed this value will be 0. Valid values are 5 to 999 ( 0.5 to 99.9 Celsius). Set with Zero value to clear the max. temperature.')
acsPowerMgmtPDUTableTemperature2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature2Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature2Value.setDescription('Temperature of this PM unit in Celsius degrees. The value of this object is the actual temperature in degrees C * 10. You need to translate the readed value (Ex. : value is 240, the temperature is 24 Celsius.) If the temperature measurement is not installed this value will be 0. Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).')
acsPowerMgmtPDUTableTemperature2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature2Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature2Max.setDescription('Maximum temperature detected in this PM unit in Celsius degrees. The value will be Zero when the PDU does not have support for maximum value. The value of this object is the actual temperature in degrees C * 10. You need to translate the readed value (Ex. : value is 240, the temperature is 24 Celsius.) If the temperature measurement is not installed this value will be 0. Valid values are 5 to 999 ( 0.5 to 99.9 Celsius). Set with Zero value to clear the max. temperature.')
acsPowerMgmtPDUTableTemperature3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature3Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature3Value.setDescription('Temperature of this PM unit in Celsius degrees. The value of this object is the actual temperature in degrees C * 10. You need to translate the readed value (Ex. : value is 240, the temperature is 24 Celsius.) If the temperature measurement is not installed this value will be 0. Valid values are 5 to 999 ( 0.5 to 99.9 Celsius).')
acsPowerMgmtPDUTableTemperature3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature3Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableTemperature3Max.setDescription('Maximum temperature detected in this PM unit in Celsius degrees. The value will be Zero when the PDU does not have support for maximum value. The value of this object is the actual temperature in degrees C * 10. You need to translate the readed value (Ex. : value is 240, the temperature is 24 Celsius.) If the temperature measurement is not installed this value will be 0. Valid values are 5 to 999 ( 0.5 to 99.9 Celsius). Set with Zero value to clear the max. temperature.')
acsPowerMgmtPDUTableHumidityNOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidityNOS.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidityNOS.setDescription('Number of humidity sensors in the PDU.')
acsPowerMgmtPDUTableHumidity1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity1Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity1Value.setDescription('Humidity of this PM unit . If the humidity measurement is not installed this value will be 0.')
acsPowerMgmtPDUTableHumidity1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity1Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity1Max.setDescription('Maximum humidity detected in this PM unit. If the humidity measurement is not installed or the PDU does not have support for maximum value this value will be 0. Set with Zero value to clear the max. temperature.')
acsPowerMgmtPDUTableHumidity2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity2Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity2Value.setDescription('Humidity of this PM unit . If the humidity measurement is not installed this value will be 0.')
acsPowerMgmtPDUTableHumidity2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity2Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity2Max.setDescription('Maximum humidity detected in this PM unit. If the humidity measurement is not installed or the PDU does not have support for maximum value this value will be 0. Set with Zero value to clear the max. temperature.')
acsPowerMgmtPDUTableHumidity3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity3Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity3Value.setDescription('Humidity of this PM unit . If the humidity measurement is not installed this value will be 0.')
acsPowerMgmtPDUTableHumidity3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity3Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableHumidity3Max.setDescription('Maximum humidity detected in this PM unit. If the humidity measurement is not installed or the PDU does not have support for maximum value this value will be 0. Set with Zero value to clear the max. temperature.')
acsPowerMgmtPDUTableVoltageNOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageNOS.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageNOS.setDescription('Number of voltage sensors in the PDU.')
acsPowerMgmtPDUTableVoltage1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage1Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage1Value.setDescription('Voltage of this sensor in this PDU unit.')
acsPowerMgmtPDUTableVoltage1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage1Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage1Max.setDescription('Maximum voltage of this sensor in this PDU unit. Set with Zero value to clear the maximum voltage.')
acsPowerMgmtPDUTableVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage2Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage2Value.setDescription('Voltage of this sensor in this PDU unit.')
acsPowerMgmtPDUTableVoltage2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage2Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage2Max.setDescription('Maximum voltage of this sensor in this PDU unit. Set with Zero value to clear the maximum voltage.')
acsPowerMgmtPDUTableVoltage3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage3Value.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage3Value.setDescription('Voltage of this sensor in this PDU unit.')
acsPowerMgmtPDUTableVoltage3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage3Max.setStatus('obsolete')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltage3Max.setDescription('Maximum voltage of this sensor in this PDU unit. Set with Zero value to clear the maximum voltage.')
acsPowerMgmtPDUTableNumberOfPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("single-phase", 0), ("three-phase", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableNumberOfPhases.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableNumberOfPhases.setDescription('Number of phases of this PDU unit.')
acsPowerMgmtPDUTableNumberOfBanks = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableNumberOfBanks.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableNumberOfBanks.setDescription('Number of banks of this PDU unit.')
acsPowerMgmtPDUTableCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentValue.setDescription('Actual value of current sensor in this PDU.( A x 10 )')
acsPowerMgmtPDUTableCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentMax.setDescription('Max detected value of current sensor in this PDU.( A x 10 )')
acsPowerMgmtPDUTableCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentMin.setDescription('Min detected value of current sensor in this PDU.( A x 10 )')
acsPowerMgmtPDUTableCurrentAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentAvg.setDescription('Average value for current sensor in this PDU.( A x 10 )')
acsPowerMgmtPDUTableCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableCurrentReset.setDescription('Reset max, min and avg values of current.')
acsPowerMgmtPDUTableVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageType.setDescription('Type of voltage values.')
acsPowerMgmtPDUTableVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageValue.setDescription('Actual value of voltage sensor in this PDU unit.( V )')
acsPowerMgmtPDUTableVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageMax.setDescription('Max detected value of voltage sensor in this PDU unit.( V )')
acsPowerMgmtPDUTableVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageMin.setDescription('Min detected value of voltage sensor in this PDU unit.( V )')
acsPowerMgmtPDUTableVoltageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageAvg.setDescription('Average value for voltage sensor in this PDU unit.( V )')
acsPowerMgmtPDUTableVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableVoltageReset.setDescription('Reset max, min and avg values of voltage.')
acsPowerMgmtPDUTablePowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerType.setDescription('Type of power consumption values.( W x 10 )')
acsPowerMgmtPDUTablePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerValue.setDescription('Actual value of power consumption in this PDU unit.( W x 10 )')
acsPowerMgmtPDUTablePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerMax.setDescription('Max detected value of power consumption in this PDU unit.( W x 10 )')
acsPowerMgmtPDUTablePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerMin.setDescription('Min detected value of power consumption in this PDU unit.( W x 10 )')
acsPowerMgmtPDUTablePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerAvg.setDescription('Average value for power consumption in this PDU unit.( W x 10 )')
acsPowerMgmtPDUTablePowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerReset.setDescription('Reset max, min and avg values of power consumption.')
acsPowerMgmtPDUTablePowerFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorType.setDescription('Type of power factor values.')
acsPowerMgmtPDUTablePowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorValue.setDescription('Actual value of power factor in this PDU unit.( PF x 100 )')
acsPowerMgmtPDUTablePowerFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorMax.setDescription('Max detected value of power factor in this PDU unit.( PF x 100 )')
acsPowerMgmtPDUTablePowerFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorMin.setDescription('Min detected value of power factor in this PDU unit.( PF x 100 )')
acsPowerMgmtPDUTablePowerFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorAvg.setDescription('Average value for power factor in this PDU unit.( PF x 100 )')
acsPowerMgmtPDUTablePowerFactorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTablePowerFactorReset.setDescription('Reset max, min and avg values of power factor.')
acsPowerMgmtPDUTableAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("blow-fuse", 2), ("hw-ocp", 3), ("high-critical", 4), ("high-warning", 5), ("low-warning", 6), ("low-critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableAlarm.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableAlarm.setDescription('Show the PDU alarm status.')
acsPowerMgmtPDUTableEnvSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 3, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPDUTableEnvSensors.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPDUTableEnvSensors.setDescription('Number of environmental sensor in this PDU.')
acsPowerMgmtTotalNumberOfOutlets = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtTotalNumberOfOutlets.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtTotalNumberOfOutlets.setDescription('Number of outlets managed by the appliance.')
acsPowerMgmtOutletsTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5), )
if mibBuilder.loadTexts: acsPowerMgmtOutletsTable.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTable.setDescription('This table contains the information about outlets.')
acsPowerMgmtOutletsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1), ).setIndexNames((0, "ACS-MIB", "acsPowerMgmtOutletsTablePortNumber"), (0, "ACS-MIB", "acsPowerMgmtOutletsTablePduNumber"), (0, "ACS-MIB", "acsPowerMgmtOutletsTableNumber"))
if mibBuilder.loadTexts: acsPowerMgmtOutletsTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTableEntry.setDescription('each entry has the information about the outlet.')
acsPowerMgmtOutletsTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePortNumber.setDescription('Serial Port number.')
acsPowerMgmtOutletsTablePduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePduNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePduNumber.setDescription('Index.')
acsPowerMgmtOutletsTableNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutletsTableNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTableNumber.setDescription('Number of the outlet in the PDU.')
acsPowerMgmtOutletsTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutletsTableName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTableName.setDescription('Name of the outlet.')
acsPowerMgmtOutletsTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutletsTableStatus.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTableStatus.setDescription('Status of the outlet.')
acsPowerMgmtOutletsTablePowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAction", 1), ("powerOn", 2), ("powerOff", 3), ("powerCycle", 4), ("powerLock", 5), ("powerUnlock", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePowerControl.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePowerControl.setDescription('A set value of power*(2-6) will send command to PDU. noAction(1) = always returned in a GET. Does nothing if SET. powerOn(2) = when SET the power On command is sent to PDU. powerOff(3) = when SET the power Off command is sent to PDU. powerCycle(4)=when SET the power cycle command is sent to PDU. powerLock(5)= when SET the power lock command is sent to PDU. powerUnlock(6)=when SET the power unlock command is sent to PDU. The powerLock and powerUnlock are valid only for Cyclades-PM PDUs')
acsPowerMgmtOutletsTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePortName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePortName.setDescription('Serial Port Name where the PDU is connected.')
acsPowerMgmtOutletsTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePduId.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutletsTablePduId.setDescription('PDU identification.')
acsPowerMgmtNumberOfOutletGroup = MibScalar((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtNumberOfOutletGroup.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtNumberOfOutletGroup.setDescription('Number of configured group of outlets.')
acsPowerMgmtGroupTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 7), )
if mibBuilder.loadTexts: acsPowerMgmtGroupTable.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtGroupTable.setDescription('This table contains the information about group of outlets.')
acsPowerMgmtGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 7, 1), ).setIndexNames((0, "ACS-MIB", "acsPowerMgmtGroupTableIndex"))
if mibBuilder.loadTexts: acsPowerMgmtGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtGroupTableEntry.setDescription('each entry has the information about group of outlets.')
acsPowerMgmtGroupTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 7, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtGroupTableIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtGroupTableIndex.setDescription('Index of the group.')
acsPowerMgmtGroupTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtGroupTableName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtGroupTableName.setDescription('Name of the group of outlets.')
acsPowerMgmtGroupTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtGroupTableStatus.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtGroupTableStatus.setDescription('Status of the group of outlet.')
acsPowerMgmtGroupTablePowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("powerOn", 2), ("powerOff", 3), ("powerCycle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtGroupTablePowerControl.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtGroupTablePowerControl.setDescription('A set value of power*(2-6) will send command to PDU. noAction(1) = always returned in a GET. Does nothing if SET. powerOn(2) = when SET the power On command is sent to PDU. powerOff(3) = when SET the power Off command is sent to PDU. powerCycle(4)=when SET the power cycle command is sent to PDU.')
acsPowerMgmtPhasesTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8), )
if mibBuilder.loadTexts: acsPowerMgmtPhasesTable.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTable.setDescription('This table contains data monitoring of each detected phase.')
acsPowerMgmtPhasesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1), ).setIndexNames((0, "ACS-MIB", "acsPowerMgmtPhasesTablePortNumber"), (0, "ACS-MIB", "acsPowerMgmtPhasesTablePduIndex"), (0, "ACS-MIB", "acsPowerMgmtPhasesTablePhaseIndex"))
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableEntry.setDescription('each entry has the data monitoring about phases.')
acsPowerMgmtPhasesTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePortNumber.setDescription('Number of serial port when the PDU is connected.')
acsPowerMgmtPhasesTablePduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePduIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePduIndex.setDescription('A PDU position in the chain.')
acsPowerMgmtPhasesTablePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePhaseIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePhaseIndex.setDescription('phase index in the PDU.')
acsPowerMgmtPhasesTablePhaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePhaseName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePhaseName.setDescription('phase name in the PDU.')
acsPowerMgmtPhasesTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePduId.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePduId.setDescription('PDU identification.')
acsPowerMgmtPhasesTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePortName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePortName.setDescription('Name of serial port when the PDU is connected.')
acsPowerMgmtPhasesTableCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentValue.setDescription('Actual value of current sensor in this phase.( A x 10 )')
acsPowerMgmtPhasesTableCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentMax.setDescription('Max detected value of current sensor in this phase.( A x 10 )')
acsPowerMgmtPhasesTableCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentMin.setDescription('Min detected value of current sensor in this phase.( A x 10 )')
acsPowerMgmtPhasesTableCurrentAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentAvg.setDescription('Average value for current sensor in this phase.( A x 10 )')
acsPowerMgmtPhasesTableCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableCurrentReset.setDescription('Reset max, min and avg values of current.')
acsPowerMgmtPhasesTableVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageType.setDescription('Type of voltage values.')
acsPowerMgmtPhasesTableVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageValue.setDescription('Actual value of voltage sensor in this phase.( V )')
acsPowerMgmtPhasesTableVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageMax.setDescription('Max detected value of voltage sensor in this phase.( V )')
acsPowerMgmtPhasesTableVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageMin.setDescription('Min detected value of voltage sensor in this phase.( V )')
acsPowerMgmtPhasesTableVoltageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageAvg.setDescription('Average value for voltage sensor in this phase.( V )')
acsPowerMgmtPhasesTableVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableVoltageReset.setDescription('Reset max, min and avg values of voltage.')
acsPowerMgmtPhasesTablePowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerType.setDescription('Type of power consumption values.')
acsPowerMgmtPhasesTablePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerValue.setDescription('Actual value of power consumption in this phase.( W x 10 )')
acsPowerMgmtPhasesTablePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerMax.setDescription('Max detected value of power consumption in this phase.( W x 10 )')
acsPowerMgmtPhasesTablePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerMin.setDescription('Min detected value of power consumption in this phase.( W x 10 )')
acsPowerMgmtPhasesTablePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerAvg.setDescription('Average value for power consumption in this phase.( W x 10 )')
acsPowerMgmtPhasesTablePowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerReset.setDescription('Reset max, min and avg values of power consumption.')
acsPowerMgmtPhasesTablePowerFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorType.setDescription('Type of power factor values.')
acsPowerMgmtPhasesTablePowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorValue.setDescription('Actual value of power factor in this phase.( PF x 100 )')
acsPowerMgmtPhasesTablePowerFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorMax.setDescription('Max detected value of power factor in this phase.( PF x 100 )')
acsPowerMgmtPhasesTablePowerFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorMin.setDescription('Min detected value of power factor in this phase.( PF x 100 )')
acsPowerMgmtPhasesTablePowerFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorAvg.setDescription('Average value for power factor in this phase.( PF x 100 )')
acsPowerMgmtPhasesTablePowerFactorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTablePowerFactorReset.setDescription('Reset max, min and avg values of power factor.')
acsPowerMgmtPhasesTableAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 8, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("blow-fuse", 2), ("hw-ocp", 3), ("high-critical", 4), ("high-warning", 5), ("low-warning", 6), ("low-critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableAlarm.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtPhasesTableAlarm.setDescription('Show the phase alarm status.')
acsPowerMgmtBanksTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9), )
if mibBuilder.loadTexts: acsPowerMgmtBanksTable.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTable.setDescription('This table contains data monitoring of each detected bank.')
acsPowerMgmtBanksTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1), ).setIndexNames((0, "ACS-MIB", "acsPowerMgmtBanksTablePortNumber"), (0, "ACS-MIB", "acsPowerMgmtBanksTablePduIndex"), (0, "ACS-MIB", "acsPowerMgmtBanksTableBankIndex"))
if mibBuilder.loadTexts: acsPowerMgmtBanksTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableEntry.setDescription('each entry has the data monitoring about bank.')
acsPowerMgmtBanksTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePortNumber.setDescription('Number of serial port when the PDU is connected.')
acsPowerMgmtBanksTablePduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePduIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePduIndex.setDescription('A PDU position in the chain.')
acsPowerMgmtBanksTableBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableBankIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableBankIndex.setDescription('Bank index in the PDU.')
acsPowerMgmtBanksTableBankName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableBankName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableBankName.setDescription('Bank name in the PDU.')
acsPowerMgmtBanksTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePduId.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePduId.setDescription('PDU identification.')
acsPowerMgmtBanksTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePortName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePortName.setDescription('Name of serial port when the PDU is connected.')
acsPowerMgmtBanksTableCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentValue.setDescription('Actual value of current sensor in this bank.( A x 10 )')
acsPowerMgmtBanksTableCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentMax.setDescription('Max detected value of current sensor in this bank.( A x 10 )')
acsPowerMgmtBanksTableCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentMin.setDescription('Min detected value of current sensor in this bank.( A x 10 )')
acsPowerMgmtBanksTableCurrentAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentAvg.setDescription('Average value for current sensor in this bank.( A x 10 )')
acsPowerMgmtBanksTableCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableCurrentReset.setDescription('Reset max, min and avg values of current.')
acsPowerMgmtBanksTableVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageType.setDescription('Type of voltage values.')
acsPowerMgmtBanksTableVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageValue.setDescription('Actual value of voltage sensor in this bank.( V )')
acsPowerMgmtBanksTableVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageMax.setDescription('Max detected value of voltage sensor in this bank.( V )')
acsPowerMgmtBanksTableVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageMin.setDescription('Min detected value of voltage sensor in this bank.( V )')
acsPowerMgmtBanksTableVoltageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageAvg.setDescription('Average value for voltage sensor in this bank.( V )')
acsPowerMgmtBanksTableVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableVoltageReset.setDescription('Reset max, min and avg values of voltage.')
acsPowerMgmtBanksTablePowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerType.setDescription('Type of power consumption values.')
acsPowerMgmtBanksTablePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerValue.setDescription('Actual value of power consumption in this bank.( W x 10 )')
acsPowerMgmtBanksTablePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerMax.setDescription('Max detected value of power consumption in this bank.( W x 10 )')
acsPowerMgmtBanksTablePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerMin.setDescription('Min detected value of power consumption in this bank.( W x 10 )')
acsPowerMgmtBanksTablePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerAvg.setDescription('Average value for power consumption in this bank.( W x 10 )')
acsPowerMgmtBanksTablePowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerReset.setDescription('Reset max, min and avg values of power consumption.')
acsPowerMgmtBanksTablePowerFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none-sensor", 0), ("estimated", 1), ("read", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorType.setDescription('Type of power factor values.')
acsPowerMgmtBanksTablePowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorValue.setDescription('Actual value of power factor in this bank.( PF x 100 )')
acsPowerMgmtBanksTablePowerFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorMax.setDescription('Max detected value of power factor in this bank.( PF x 100 )')
acsPowerMgmtBanksTablePowerFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorMin.setDescription('Min detected value of power factor in this bank.( PF x 100 )')
acsPowerMgmtBanksTablePowerFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorAvg.setDescription('Average value for power factor in this bank.( PF x 100 )')
acsPowerMgmtBanksTablePowerFactorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTablePowerFactorReset.setDescription('Reset max, min and avg values of power factor.')
acsPowerMgmtBanksTableAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("blow-fuse", 2), ("hw-ocp", 3), ("high-critical", 4), ("high-warning", 5), ("low-warning", 6), ("low-critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtBanksTableAlarm.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtBanksTableAlarm.setDescription('Show the bank alarm status.')
acsPowerMgmtEnvMonTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10), )
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTable.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTable.setDescription('This table contains data monitoring of each detected environmental sensor.')
acsPowerMgmtEnvMonTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1), ).setIndexNames((0, "ACS-MIB", "acsPowerMgmtEnvMonTablePortNumber"), (0, "ACS-MIB", "acsPowerMgmtEnvMonTablePduIndex"), (0, "ACS-MIB", "acsPowerMgmtEnvMonTableIndex"))
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableEntry.setDescription('each entry has the data monitoring about environmental sensors.')
acsPowerMgmtEnvMonTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTablePortNumber.setDescription('Number of serial port when the PDU is connected.')
acsPowerMgmtEnvMonTablePduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTablePduIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTablePduIndex.setDescription('A PDU position in the chain.')
acsPowerMgmtEnvMonTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableIndex.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableIndex.setDescription('envmon sensor index.')
acsPowerMgmtEnvMonTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableName.setDescription('envmon sensor name.')
acsPowerMgmtEnvMonTablePduId = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTablePduId.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTablePduId.setDescription('PDU identification.')
acsPowerMgmtEnvMonTablePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTablePortName.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTablePortName.setDescription('Name of serial port when the PDU is connected.')
acsPowerMgmtEnvMonTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("temp-internal", 1), ("temperature", 2), ("humidity", 3), ("air-flow", 4), ("smoke", 5), ("dry-concact", 6), ("water-level", 7), ("motion", 8), ("unplugged", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableType.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableType.setDescription('The type of environmental monitor.')
acsPowerMgmtEnvMonTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("triggered", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableStatus.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableStatus.setDescription('Status of digital sensors: Dry-Contact, Water level, Smoke sensor, Motion sensor.')
acsPowerMgmtEnvMonTableValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableValue.setDescription('Detected value for envmon sensors. Temperature: C x 10. Humidity: %. Air flow: afu.')
acsPowerMgmtEnvMonTableMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableMaxValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtEnvMonTableMaxValue.setDescription('Max detected value for envmon sensors. Temperature: C x 10. Humidity: %. Air flow: afu.')
acsPowerMgmtOutElecMonTable = MibTable((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11), )
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTable.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTable.setDescription('This table contains the information about data monitoring of outlets.')
acsPowerMgmtOutElecMonTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1), ).setIndexNames((0, "ACS-MIB", "acsPowerMgmtOutElecMonTablePortNumber"), (0, "ACS-MIB", "acsPowerMgmtOutElecMonTablePduNumber"), (0, "ACS-MIB", "acsPowerMgmtOutElecMonTableNumber"))
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableEntry.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableEntry.setDescription('each entry has the information about the outlet.')
acsPowerMgmtOutElecMonTablePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePortNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePortNumber.setDescription('Serial Port number.')
acsPowerMgmtOutElecMonTablePduNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePduNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePduNumber.setDescription('Index.')
acsPowerMgmtOutElecMonTableNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableNumber.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableNumber.setDescription('Number of the outlet in the PDU.')
acsPowerMgmtOutElecMonTableCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentValue.setDescription('Actual value of outlet current sensor.( A x 10 )')
acsPowerMgmtOutElecMonTableCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentMax.setDescription('Max detected value of outlet current sensor.( A x 10 )')
acsPowerMgmtOutElecMonTableCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentMin.setDescription('Min detected value of outlet current sensor.( A x 10 )')
acsPowerMgmtOutElecMonTableCurrentAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentAvg.setDescription('Average value for outlet current sensor.( A x 10 )')
acsPowerMgmtOutElecMonTableCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableCurrentReset.setDescription('Reset max, min and avertage values of outlet current.')
acsPowerMgmtOutElecMonTablePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerValue.setDescription('Actual value of outlet power comsumption sensor.( W x 10 )')
acsPowerMgmtOutElecMonTablePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerMax.setDescription('Max detected value of outlet power comsumption sensor.( W x 10 )')
acsPowerMgmtOutElecMonTablePowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerMin.setDescription('Min detected value of outlet power comsumption sensor.( W x 10 )')
acsPowerMgmtOutElecMonTablePowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerAvg.setDescription('Average value for outlet power comsumption sensor.( W x 10 )')
acsPowerMgmtOutElecMonTablePowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerReset.setDescription('Reset max, min and avertage values of outlet power comsumption.')
acsPowerMgmtOutElecMonTableVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageValue.setDescription('Actual value of outlet voltage sensor.( V )')
acsPowerMgmtOutElecMonTableVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageMax.setDescription('Max detected value of outlet voltage sensor.( V )')
acsPowerMgmtOutElecMonTableVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageMin.setDescription('Min detected value of outlet voltage sensor.( V )')
acsPowerMgmtOutElecMonTableVoltageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageAvg.setDescription('Average value for outlet voltage sensor.( V )')
acsPowerMgmtOutElecMonTableVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableVoltageReset.setDescription('Reset max, min and avertage values of outlet voltage.')
acsPowerMgmtOutElecMonTablePowerFactorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorValue.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorValue.setDescription('Actual value of outlet power-factor sensor.( PF x 100 )')
acsPowerMgmtOutElecMonTablePowerFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorMax.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorMax.setDescription('Max detected value of outlet power-factor sensor.( PF x 100 )')
acsPowerMgmtOutElecMonTablePowerFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorMin.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorMin.setDescription('Min detected value of outlet power-factor sensor.( PF x 100 )')
acsPowerMgmtOutElecMonTablePowerFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorAvg.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorAvg.setDescription('Average value for outlet power-factor sensor.( PF x 100 )')
acsPowerMgmtOutElecMonTablePowerFactorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorReset.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTablePowerFactorReset.setDescription('Reset max, min and avertage values of outlet power-factor.')
acsPowerMgmtOutElecMonTableAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 10418, 16, 2, 5, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("blow-fuse", 2), ("hw-ocp", 3), ("high-critical", 4), ("high-warning", 5), ("low-warning", 6), ("low-critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableAlarm.setStatus('current')
if mibBuilder.loadTexts: acsPowerMgmtOutElecMonTableAlarm.setDescription('Show the outlet alarm status.')
mibBuilder.exportSymbols("ACS-MIB", acsPartNumber=acsPartNumber, acsPowerMgmtSerialTableNumberPDUs=acsPowerMgmtSerialTableNumberPDUs, acsPowerMgmtPhasesTableVoltageAvg=acsPowerMgmtPhasesTableVoltageAvg, acsPowerMgmtPDUTableCurrentNOS=acsPowerMgmtPDUTableCurrentNOS, acsPowerMgmtBanksTableAlarm=acsPowerMgmtBanksTableAlarm, acsSerialPortTableOverrun=acsSerialPortTableOverrun, acsPowerMgmtPDUTableVoltageReset=acsPowerMgmtPDUTableVoltageReset, acsPowerMgmtPDUTableTemperature1Max=acsPowerMgmtPDUTableTemperature1Max, acsPowerMgmtOutletsTableName=acsPowerMgmtOutletsTableName, acsPowerMgmtPhasesTablePowerFactorValue=acsPowerMgmtPhasesTablePowerFactorValue, acsPowerMgmtPDUTableHumidity3Value=acsPowerMgmtPDUTableHumidity3Value, acsPowerMgmtOutElecMonTablePowerValue=acsPowerMgmtOutElecMonTablePowerValue, acsPowerMgmtOutletsTablePortNumber=acsPowerMgmtOutletsTablePortNumber, acsPowerMgmtOutElecMonTableCurrentReset=acsPowerMgmtOutElecMonTableCurrentReset, acsPowerMgmtSerialTableDeviceName=acsPowerMgmtSerialTableDeviceName, acsSerialPortTableSignalStateRTS=acsSerialPortTableSignalStateRTS, acsSerialPortTableTxBytes=acsSerialPortTableTxBytes, acs6048=acs6048, acsTrapObject=acsTrapObject, acsPowerMgmtPhasesTableVoltageMin=acsPowerMgmtPhasesTableVoltageMin, acsSerialPortTableBreak=acsSerialPortTableBreak, acsPowerMgmtBanksTablePduId=acsPowerMgmtBanksTablePduId, acsPowerMgmtPDUTableVoltageMin=acsPowerMgmtPDUTableVoltageMin, acsPowerMgmtOutletsTableEntry=acsPowerMgmtOutletsTableEntry, acsPowerMgmtBanksTableVoltageValue=acsPowerMgmtBanksTableVoltageValue, acsPowerSupplyStatePw2=acsPowerSupplyStatePw2, acsReboot=acsReboot, acsPowerMgmtPDUTableVoltage1Value=acsPowerMgmtPDUTableVoltage1Value, acsActiveSessionsTable=acsActiveSessionsTable, acsSessions=acsSessions, acsSerialNumber=acsSerialNumber, acsEIDNumber=acsEIDNumber, acsPowerMgmtBanksTableVoltageMin=acsPowerMgmtBanksTableVoltageMin, acsPowerMgmtEnvMonTableValue=acsPowerMgmtEnvMonTableValue, acsPowerMgmtBanksTableCurrentReset=acsPowerMgmtBanksTableCurrentReset, acsPowerMgmtPDUTableFirmwareVersion=acsPowerMgmtPDUTableFirmwareVersion, acsPowerMgmtPDUTableCurrent2Value=acsPowerMgmtPDUTableCurrent2Value, acsPowerMgmtPhasesTablePhaseName=acsPowerMgmtPhasesTablePhaseName, acsPowerMgmtPhasesTablePowerMin=acsPowerMgmtPhasesTablePowerMin, acsPowerMgmtBanksTablePowerFactorMax=acsPowerMgmtBanksTablePowerFactorMax, acsPowerMgmtPhasesTable=acsPowerMgmtPhasesTable, acsPowerMgmtBanksTableCurrentMin=acsPowerMgmtBanksTableCurrentMin, acsSerialPortTableComParity=acsSerialPortTableComParity, acsSerialPortTableProfile=acsSerialPortTableProfile, acsPowerMgmtBanksTablePortNumber=acsPowerMgmtBanksTablePortNumber, acsPowerMgmtEnvMonTable=acsPowerMgmtEnvMonTable, acsPowerMgmtPDUTableAlarm=acsPowerMgmtPDUTableAlarm, acsSerialPortTableComFlowControl=acsSerialPortTableComFlowControl, acsPowerSupply=acsPowerSupply, acsPowerMgmtPDUTableEntry=acsPowerMgmtPDUTableEntry, acsPowerMgmtPDUTablePortName=acsPowerMgmtPDUTablePortName, acsHostName=acsHostName, acsPowerMgmtPhasesTablePhaseIndex=acsPowerMgmtPhasesTablePhaseIndex, acsPowerMgmtPDUTablePowerFactorMax=acsPowerMgmtPDUTablePowerFactorMax, acsPowerMgmtNumSerialPorts=acsPowerMgmtNumSerialPorts, acsSerialPortTableStatus=acsSerialPortTableStatus, acsPowerMgmtPDUTableTemperature1Value=acsPowerMgmtPDUTableTemperature1Value, acsPowerMgmtEnvMonTablePortName=acsPowerMgmtEnvMonTablePortName, acsPowerMgmtPhasesTableVoltageMax=acsPowerMgmtPhasesTableVoltageMax, SerialPortPinOut=SerialPortPinOut, acsPowerMgmtEnvMonTablePduId=acsPowerMgmtEnvMonTablePduId, acsPowerMgmtPDUTableVoltage2Max=acsPowerMgmtPDUTableVoltage2Max, acsPowerMgmtPhasesTablePowerFactorMin=acsPowerMgmtPhasesTablePowerFactorMin, acsPowerMgmtBanksTablePowerFactorValue=acsPowerMgmtBanksTablePowerFactorValue, acsPowerMgmtOutElecMonTablePowerFactorMin=acsPowerMgmtOutElecMonTablePowerFactorMin, acsSerialPortTableFrameError=acsSerialPortTableFrameError, acsSerialPortTableSignalStateCTS=acsSerialPortTableSignalStateCTS, acsPowerMgmtOutletsTableNumber=acsPowerMgmtOutletsTableNumber, acs6004=acs6004, acsPowerMgmtPDUTableHumidity3Max=acsPowerMgmtPDUTableHumidity3Max, acsPowerMgmtOutElecMonTableVoltageAvg=acsPowerMgmtOutElecMonTableVoltageAvg, acsPowerMgmtOutletsTablePduNumber=acsPowerMgmtOutletsTablePduNumber, acsPowerMgmtBanksTableVoltageType=acsPowerMgmtBanksTableVoltageType, acsPowerMgmtOutElecMonTableCurrentAvg=acsPowerMgmtOutElecMonTableCurrentAvg, acsPowerMgmtPDUTableHumidity1Max=acsPowerMgmtPDUTableHumidity1Max, acsPowerMgmtPDUTablePowerFactorReset=acsPowerMgmtPDUTablePowerFactorReset, acsPowerMgmtOutElecMonTableAlarm=acsPowerMgmtOutElecMonTableAlarm, acsPowerMgmtEnvMonTableIndex=acsPowerMgmtEnvMonTableIndex, acsPowerMgmtPhasesTablePduId=acsPowerMgmtPhasesTablePduId, acsPowerMgmtPDUTableVoltageAvg=acsPowerMgmtPDUTableVoltageAvg, acsPowerMgmtBanksTableVoltageMax=acsPowerMgmtBanksTableVoltageMax, acsPowerMgmtOutElecMonTablePowerMax=acsPowerMgmtOutElecMonTablePowerMax, acsSerialPortTableDeviceName=acsSerialPortTableDeviceName, acsPowerMgmtPDUTableCurrentMax=acsPowerMgmtPDUTableCurrentMax, acsPowerMgmtOutletsTablePortName=acsPowerMgmtOutletsTablePortName, acsPowerMgmtPhasesTablePortName=acsPowerMgmtPhasesTablePortName, acsPowerMgmtBanksTableBankIndex=acsPowerMgmtBanksTableBankIndex, acsPowerMgmtPDUTableHumidity2Max=acsPowerMgmtPDUTableHumidity2Max, acsPowerMgmtPDUTableCurrentValue=acsPowerMgmtPDUTableCurrentValue, acsPowerMgmtPDUTableCurrentAvg=acsPowerMgmtPDUTableCurrentAvg, acsPowerMgmtOutletsTablePowerControl=acsPowerMgmtOutletsTablePowerControl, acsPowerMgmtOutElecMonTableNumber=acsPowerMgmtOutElecMonTableNumber, acsPowerMgmtBanksTablePortName=acsPowerMgmtBanksTablePortName, acsPowerMgmtPhasesTablePowerFactorType=acsPowerMgmtPhasesTablePowerFactorType, acsSerialPortTableComSpeed=acsSerialPortTableComSpeed, acsPowerMgmtOutElecMonTablePowerAvg=acsPowerMgmtOutElecMonTablePowerAvg, acsPowerMgmtEnvMonTableStatus=acsPowerMgmtEnvMonTableStatus, acsActiveSessionsTableFrom=acsActiveSessionsTableFrom, acsPowerMgmtOutElecMonTablePowerFactorAvg=acsPowerMgmtOutElecMonTablePowerFactorAvg, acsPowerMgmtPDUTable=acsPowerMgmtPDUTable, acsPowerMgmtPDUTableVoltageType=acsPowerMgmtPDUTableVoltageType, acsPowerMgmtOutElecMonTableCurrentMax=acsPowerMgmtOutElecMonTableCurrentMax, PowerSupplyState=PowerSupplyState, acsPowerMgmtPDUTableVoltageNOS=acsPowerMgmtPDUTableVoltageNOS, acsActiveSessionsTableConnection=acsActiveSessionsTableConnection, acsPowerMgmtPhasesTablePowerValue=acsPowerMgmtPhasesTablePowerValue, acsPowerMgmtBanksTableCurrentAvg=acsPowerMgmtBanksTableCurrentAvg, acsPowerMgmtPDUTableEnvSensors=acsPowerMgmtPDUTableEnvSensors, acsSerialPortTablePinOut=acsSerialPortTablePinOut, acsSerialPortTableComStopBits=acsSerialPortTableComStopBits, acsPowerMgmtBanksTableCurrentMax=acsPowerMgmtBanksTableCurrentMax, acsActiveSessionsTableSessionTime=acsActiveSessionsTableSessionTime, acsPowerMgmtOutElecMonTableVoltageValue=acsPowerMgmtOutElecMonTableVoltageValue, acsPowerMgmtPDUTableVoltage1Max=acsPowerMgmtPDUTableVoltage1Max, acsPowerMgmtPDUTableNumberOfBanks=acsPowerMgmtPDUTableNumberOfBanks, acsPowerMgmtBanksTablePowerFactorMin=acsPowerMgmtBanksTablePowerFactorMin, acsPowerMgmtOutElecMonTable=acsPowerMgmtOutElecMonTable, acsPowerMgmtPhasesTablePowerFactorAvg=acsPowerMgmtPhasesTablePowerFactorAvg, acsActiveSessionsTableType=acsActiveSessionsTableType, acsPowerMgmtBanksTablePowerFactorType=acsPowerMgmtBanksTablePowerFactorType, acsPowerMgmtPDUTablePowerReset=acsPowerMgmtPDUTablePowerReset, acsPowerMgmtPDUTablePowerMin=acsPowerMgmtPDUTablePowerMin, acsPowerMgmtGroupTableIndex=acsPowerMgmtGroupTableIndex, acsPowerMgmtPhasesTableAlarm=acsPowerMgmtPhasesTableAlarm, PYSNMP_MODULE_ID=acs, acsPowerMgmtBanksTablePduIndex=acsPowerMgmtBanksTablePduIndex, acsPowerMgmtPhasesTableCurrentMin=acsPowerMgmtPhasesTableCurrentMin, acsPowerMgmtOutElecMonTablePduNumber=acsPowerMgmtOutElecMonTablePduNumber, acsPowerMgmtEnvMonTableName=acsPowerMgmtEnvMonTableName, acsPowerMgmtOutletsTableStatus=acsPowerMgmtOutletsTableStatus, acsPowerMgmtPhasesTablePowerReset=acsPowerMgmtPhasesTablePowerReset, acsPowerMgmtPDUTableVendor=acsPowerMgmtPDUTableVendor, acsPowerMgmtBanksTablePowerValue=acsPowerMgmtBanksTablePowerValue, acsPowerMgmtPDUTableTemperature2Value=acsPowerMgmtPDUTableTemperature2Value, acsPowerMgmtEnvMonTableType=acsPowerMgmtEnvMonTableType, acsPowerMgmtOutElecMonTablePowerFactorReset=acsPowerMgmtOutElecMonTablePowerFactorReset, acsPowerMgmtPDUTableCurrent3Value=acsPowerMgmtPDUTableCurrent3Value, acsPowerMgmtPDUTableVoltage3Value=acsPowerMgmtPDUTableVoltage3Value, acsPowerMgmtSerialTableEntry=acsPowerMgmtSerialTableEntry, acsPowerMgmtPDUTablePduId=acsPowerMgmtPDUTablePduId, acsPowerMgmtPhasesTableEntry=acsPowerMgmtPhasesTableEntry, acsPowerMgmtPhasesTablePowerType=acsPowerMgmtPhasesTablePowerType, acsPowerMgmtOutletsTable=acsPowerMgmtOutletsTable, acsSerialPort=acsSerialPort, acsPowerMgmtPDUTableVoltageValue=acsPowerMgmtPDUTableVoltageValue, acsPowerMgmtEnvMonTableEntry=acsPowerMgmtEnvMonTableEntry, acsPowerMgmtOutElecMonTablePortNumber=acsPowerMgmtOutElecMonTablePortNumber, acsPowerMgmtBanksTable=acsPowerMgmtBanksTable, acsPowerMgmtOutElecMonTablePowerFactorMax=acsPowerMgmtOutElecMonTablePowerFactorMax, acsSerialPortTableComDataSize=acsSerialPortTableComDataSize, acsPowerMgmtSerialTable=acsPowerMgmtSerialTable, acsPowerMgmtPDUTableVoltage3Max=acsPowerMgmtPDUTableVoltage3Max, acsPowerMgmtNumberOfOutletGroup=acsPowerMgmtNumberOfOutletGroup, acsPowerMgmtEnvMonTablePduIndex=acsPowerMgmtEnvMonTablePduIndex, acsPowerMgmtPDUTableModel=acsPowerMgmtPDUTableModel, acsPowerMgmtOutElecMonTableVoltageMax=acsPowerMgmtOutElecMonTableVoltageMax, acs6016=acs6016, acsPowerMgmtOutletsTablePduId=acsPowerMgmtOutletsTablePduId, acsPowerMgmtPDUTableCurrentMin=acsPowerMgmtPDUTableCurrentMin, acsPowerMgmtBanksTableVoltageAvg=acsPowerMgmtBanksTableVoltageAvg, acsPowerMgmtPhasesTableVoltageValue=acsPowerMgmtPhasesTableVoltageValue, acs6032=acs6032, acsPowerMgmtGroupTableEntry=acsPowerMgmtGroupTableEntry, acsPowerMgmtPhasesTablePowerMax=acsPowerMgmtPhasesTablePowerMax, acsPowerMgmtPhasesTableVoltageType=acsPowerMgmtPhasesTableVoltageType, acsPowerMgmtOutElecMonTablePowerReset=acsPowerMgmtOutElecMonTablePowerReset, acsPowerMgmtOutElecMonTablePowerMin=acsPowerMgmtOutElecMonTablePowerMin, acs=acs, acsPowerMgmtGroupTableName=acsPowerMgmtGroupTableName, acsPowerMgmtEnvMonTablePortNumber=acsPowerMgmtEnvMonTablePortNumber, acsPowerMgmtPDUTableCurrent2Max=acsPowerMgmtPDUTableCurrent2Max, acsPowerMgmtPhasesTablePduIndex=acsPowerMgmtPhasesTablePduIndex, acsPowerMgmtPDUTablePowerFactorMin=acsPowerMgmtPDUTablePowerFactorMin, acsPowerMgmtBanksTableCurrentValue=acsPowerMgmtBanksTableCurrentValue, acs6008=acs6008, acsPowerMgmtPDUTablePowerMax=acsPowerMgmtPDUTablePowerMax, acsPowerMgmtOutElecMonTableCurrentMin=acsPowerMgmtOutElecMonTableCurrentMin, acsActiveSessionsNumberOfSession=acsActiveSessionsNumberOfSession, acsFirmwareVersion=acsFirmwareVersion, acsPowerSupplyNumber=acsPowerSupplyNumber, acsSerialPortTableSignalStateDCD=acsSerialPortTableSignalStateDCD, acsPowerMgmtPDUTableHumidityNOS=acsPowerMgmtPDUTableHumidityNOS, acsPowerMgmtPhasesTableCurrentAvg=acsPowerMgmtPhasesTableCurrentAvg, acsPowerMgmtPhasesTableVoltageReset=acsPowerMgmtPhasesTableVoltageReset, acsPowerMgmtEnvMonTableMaxValue=acsPowerMgmtEnvMonTableMaxValue, acsPowerMgmtPDUTableTemperatureNOS=acsPowerMgmtPDUTableTemperatureNOS, acsPowerMgmtPDUTableHumidity1Value=acsPowerMgmtPDUTableHumidity1Value, acsPowerMgmtOutElecMonTableEntry=acsPowerMgmtOutElecMonTableEntry, acsPowerMgmtPDUTablePowerFactorAvg=acsPowerMgmtPDUTablePowerFactorAvg, acsPowerMgmtTotalNumberOfOutlets=acsPowerMgmtTotalNumberOfOutlets, acsPowerMgmtSerialTablePortNumber=acsPowerMgmtSerialTablePortNumber, acsPowerMgmtGroupTableStatus=acsPowerMgmtGroupTableStatus, acsSerialPortTableEntry=acsSerialPortTableEntry, acsPowerMgmtPDUTableTemperature2Max=acsPowerMgmtPDUTableTemperature2Max, acsPowerMgmtBanksTablePowerFactorReset=acsPowerMgmtBanksTablePowerFactorReset, acsPowerMgmtOutElecMonTableVoltageMin=acsPowerMgmtOutElecMonTableVoltageMin, acsPowerMgmtGroupTablePowerControl=acsPowerMgmtGroupTablePowerControl, acsActiveSessionsTableUser=acsActiveSessionsTableUser, acsPowerMgmtPDUTablePowerFactorType=acsPowerMgmtPDUTablePowerFactorType, acsPowerMgmtPDUTableCurrent1Max=acsPowerMgmtPDUTableCurrent1Max, acsPowerMgmtBanksTablePowerMax=acsPowerMgmtBanksTablePowerMax, acsPowerSupplyStatePw1=acsPowerSupplyStatePw1, acsPowerMgmtSerialTableIndex=acsPowerMgmtSerialTableIndex, acsProducts=acsProducts, acsActiveSessionsTableGroup=acsActiveSessionsTableGroup, acsPowerMgmtPDUTableVoltageMax=acsPowerMgmtPDUTableVoltageMax, acsPowerMgmtBanksTablePowerType=acsPowerMgmtBanksTablePowerType, acsPowerMgmtPhasesTablePowerFactorReset=acsPowerMgmtPhasesTablePowerFactorReset, acsPowerMgmtOutElecMonTablePowerFactorValue=acsPowerMgmtOutElecMonTablePowerFactorValue, acsPowerMgmtPhasesTablePowerAvg=acsPowerMgmtPhasesTablePowerAvg, acsPowerMgmtPDUTableTemperature3Value=acsPowerMgmtPDUTableTemperature3Value, acsPowerMgmtPhasesTableCurrentValue=acsPowerMgmtPhasesTableCurrentValue, acsPowerMgmtPhasesTableCurrentReset=acsPowerMgmtPhasesTableCurrentReset, acsProductModel=acsProductModel, acsPowerMgmtPDUTableVoltage2Value=acsPowerMgmtPDUTableVoltage2Value, acsActiveSessionsTableIndex=acsActiveSessionsTableIndex, acsPowerMgmtPhasesTableCurrentMax=acsPowerMgmtPhasesTableCurrentMax, acsPowerMgmtPDUTableNumberOfPhases=acsPowerMgmtPDUTableNumberOfPhases, acsPowerMgmtPDUTablePowerAvg=acsPowerMgmtPDUTablePowerAvg, acsSerialPortTableRxBytes=acsSerialPortTableRxBytes, acsPowerMgmtPDUTableCurrentReset=acsPowerMgmtPDUTableCurrentReset, acsPowerMgmtPDUTablePowerType=acsPowerMgmtPDUTablePowerType, acsPowerMgmtBanksTableEntry=acsPowerMgmtBanksTableEntry, acsPowerMgmtPDUTableHumidity2Value=acsPowerMgmtPDUTableHumidity2Value, acsPowerMgmtPDUTablePowerFactorValue=acsPowerMgmtPDUTablePowerFactorValue, acsSerialPortTableNumber=acsSerialPortTableNumber, acsPowerMgmtBanksTableBankName=acsPowerMgmtBanksTableBankName, acsActiveSessionsTableEntry=acsActiveSessionsTableEntry, acsSerialPortTableSignalStateDTR=acsSerialPortTableSignalStateDTR, acsSerialPortNumberOfPorts=acsSerialPortNumberOfPorts, acsPowerMgmt=acsPowerMgmt, acsPowerMgmtPDUTablePduIndex=acsPowerMgmtPDUTablePduIndex, acsPowerMgmtPDUTableTemperature3Max=acsPowerMgmtPDUTableTemperature3Max, acsActiveSessionsTableKill=acsActiveSessionsTableKill, acsPowerMgmtPDUTableNumberOfOutlets=acsPowerMgmtPDUTableNumberOfOutlets, acsPowerMgmtPDUTableCurrent3Max=acsPowerMgmtPDUTableCurrent3Max, acsPowerMgmtGroupTable=acsPowerMgmtGroupTable, acsSerialPortTable=acsSerialPortTable, acsAppliance=acsAppliance, acsPowerMgmtOutElecMonTableVoltageReset=acsPowerMgmtOutElecMonTableVoltageReset, acsSerialPortTableName=acsSerialPortTableName, acsPowerMgmtPDUTablePowerValue=acsPowerMgmtPDUTablePowerValue, acsPowerMgmtBanksTableVoltageReset=acsPowerMgmtBanksTableVoltageReset, acsPowerMgmtPDUTablePortNumber=acsPowerMgmtPDUTablePortNumber, acsBootcodeVersion=acsBootcodeVersion, acsPowerMgmtPhasesTablePowerFactorMax=acsPowerMgmtPhasesTablePowerFactorMax, acsPowerMgmtPhasesTablePortNumber=acsPowerMgmtPhasesTablePortNumber, SerialPortSignalState=SerialPortSignalState, acsPowerMgmtBanksTablePowerReset=acsPowerMgmtBanksTablePowerReset, acsPowerMgmtBanksTablePowerAvg=acsPowerMgmtBanksTablePowerAvg, acsPowerMgmtOutElecMonTableCurrentValue=acsPowerMgmtOutElecMonTableCurrentValue, acsPowerMgmtPDUTableCurrent1Value=acsPowerMgmtPDUTableCurrent1Value, acsPowerMgmtBanksTablePowerMin=acsPowerMgmtBanksTablePowerMin, acsPowerMgmtBanksTablePowerFactorAvg=acsPowerMgmtBanksTablePowerFactorAvg)
mibBuilder.exportSymbols("ACS-MIB", acsSerialPortTableParityError=acsSerialPortTableParityError, acsManagement=acsManagement, SerialPortSpeed=SerialPortSpeed)
