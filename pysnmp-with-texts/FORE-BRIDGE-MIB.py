#
# PySNMP MIB module FORE-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORE-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
preDot1qVlanMIB, = mibBuilder.importSymbols("Fore-Common-MIB", "preDot1qVlanMIB")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, MibIdentifier, Counter64, Unsigned32, Counter32, ModuleIdentity, TimeTicks, NotificationType, ObjectIdentity, IpAddress, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "MibIdentifier", "Counter64", "Unsigned32", "Counter32", "ModuleIdentity", "TimeTicks", "NotificationType", "ObjectIdentity", "IpAddress", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
foreBridgeExtensions = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 8, 2))
if mibBuilder.loadTexts: foreBridgeExtensions.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreBridgeExtensions.setOrganization('FORE')
if mibBuilder.loadTexts: foreBridgeExtensions.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreBridgeExtensions.setDescription('Fore ASX ethernet bridge mib extensions.')
bridgeDataSource = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDataSource.setStatus('current')
if mibBuilder.loadTexts: bridgeDataSource.setDescription("This object specifies the name of the bridge that is currently visable via SNMP accesses to the Bridge MIB (RFC-1493). If there is no bridge of that name, then accesses to objects in the Bridge MIB will return noSuchName errors. The factory default value for this object is 'default'")
bridgeNumberOfEntities = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeNumberOfEntities.setStatus('current')
if mibBuilder.loadTexts: bridgeNumberOfEntities.setDescription('This object specifies the number of logical bridges in the system.')
bridgeStpAtmPortTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3), )
if mibBuilder.loadTexts: bridgeStpAtmPortTable.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortTable.setDescription('A table that contains atm port-specific information for the Spanning Tree Protocol.')
bridgeStpAtmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1), ).setIndexNames((0, "FORE-BRIDGE-MIB", "bridgeStpAtmPort"))
if mibBuilder.loadTexts: bridgeStpAtmPortEntry.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortEntry.setDescription('A list of information maintained by every atm port about the Spanning Tree Protocol state for that port.')
bridgeStpAtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPort.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPort.setDescription('The port number of the port for which this entry contains Spanning Tree Protocol management information.')
bridgeStpAtmPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpAtmPortPriority.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of bridgeStpAtmPort.')
bridgeStpAtmPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortState.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame.")
bridgeStpAtmPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpAtmPortEnable.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortEnable.setDescription('The enabled/disabled status of the port.')
bridgeStpAtmPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpAtmPortPathCost.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port.')
bridgeStpAtmPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
bridgeStpAtmPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
bridgeStpAtmPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
bridgeStpAtmPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
bridgeStpAtmPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: bridgeStpAtmPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
bridgeStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpEnable.setStatus('current')
if mibBuilder.loadTexts: bridgeStpEnable.setDescription('The enabled/disabled status of the bridge.')
mibBuilder.exportSymbols("FORE-BRIDGE-MIB", bridgeStpAtmPort=bridgeStpAtmPort, bridgeStpAtmPortTable=bridgeStpAtmPortTable, bridgeStpAtmPortDesignatedCost=bridgeStpAtmPortDesignatedCost, bridgeStpAtmPortForwardTransitions=bridgeStpAtmPortForwardTransitions, bridgeStpAtmPortDesignatedPort=bridgeStpAtmPortDesignatedPort, bridgeStpEnable=bridgeStpEnable, bridgeStpAtmPortEntry=bridgeStpAtmPortEntry, bridgeStpAtmPortDesignatedRoot=bridgeStpAtmPortDesignatedRoot, foreBridgeExtensions=foreBridgeExtensions, bridgeStpAtmPortEnable=bridgeStpAtmPortEnable, bridgeStpAtmPortPathCost=bridgeStpAtmPortPathCost, PYSNMP_MODULE_ID=foreBridgeExtensions, bridgeNumberOfEntities=bridgeNumberOfEntities, bridgeStpAtmPortState=bridgeStpAtmPortState, bridgeDataSource=bridgeDataSource, bridgeStpAtmPortDesignatedBridge=bridgeStpAtmPortDesignatedBridge, bridgeStpAtmPortPriority=bridgeStpAtmPortPriority)
