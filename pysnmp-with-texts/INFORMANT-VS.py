#
# PySNMP MIB module INFORMANT-VS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-VS
# Produced by pysmi-0.3.4 at Wed May  1 13:53:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, Gauge32, Counter64, TimeTicks, ObjectIdentity, Counter32, Unsigned32, ModuleIdentity, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Gauge32", "Counter64", "TimeTicks", "ObjectIdentity", "Counter32", "Unsigned32", "ModuleIdentity", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits")
TextualConvention, TruthValue, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DateAndTime", "DisplayString")
informant, WtcsDisplayString = mibBuilder.importSymbols("WTCS", "informant", "WtcsDisplayString")
wmiVirtualServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 24))
wmiVirtualServer.setRevisions(('2007-05-10 21:35',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wmiVirtualServer.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: wmiVirtualServer.setLastUpdated('200705102135Z')
if mibBuilder.loadTexts: wmiVirtualServer.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: wmiVirtualServer.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: wmiVirtualServer.setDescription('The MIB module for informant standard entities.')
vsVirtualMachineTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1), )
if mibBuilder.loadTexts: vsVirtualMachineTable.setStatus('current')
if mibBuilder.loadTexts: vsVirtualMachineTable.setDescription('The VirtualMachine WMI class allows you to obtain information about CPU, disk, and network usage by each virtual machine, as well as the number of heartbeats received.')
vsVirtualMachineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1), ).setIndexNames((0, "INFORMANT-VS", "vsvmIndex"))
if mibBuilder.loadTexts: vsVirtualMachineEntry.setStatus('current')
if mibBuilder.loadTexts: vsVirtualMachineEntry.setDescription('None')
vsvmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmIndex.setStatus('current')
if mibBuilder.loadTexts: vsvmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
vsvmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmName.setStatus('current')
if mibBuilder.loadTexts: vsvmName.setDescription('Name of the virtual machine.')
vsvmCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: vsvmCpuUtilization.setDescription('Percentage of CPU resources allocated to this virtual machine that are currently in use. A zero indicates that the virtual machine may not be running. A 100 indicates that the virtual machine is consuming all currently allocated resources.')
vsvmDiskBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 4), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmDiskBytesRead.setStatus('current')
if mibBuilder.loadTexts: vsvmDiskBytesRead.setDescription('Number of bytes read by all of the virtual hard disks assigned to this virtual machine since the virtual machine was last turned on.')
vsvmDiskSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 5), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmDiskSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: vsvmDiskSpaceUsed.setDescription('Total disk space used by this virtual machine on all of the disks that are assigned to it.')
vsvmDiskSpaceUsedK = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 6), Gauge32()).setUnits('KiloBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmDiskSpaceUsedK.setStatus('current')
if mibBuilder.loadTexts: vsvmDiskSpaceUsedK.setDescription('Total disk space used in kilobytes by this virtual machine on all of the disks that are assigned to it.')
vsvmDiskSpaceUsedM = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 7), Gauge32()).setUnits('MegaBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmDiskSpaceUsedM.setStatus('current')
if mibBuilder.loadTexts: vsvmDiskSpaceUsedM.setDescription('Total disk space used in megabytes by this virtual machine on all of the disks that are assigned to it.')
vsvmDiskBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 8), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmDiskBytesWritten.setStatus('current')
if mibBuilder.loadTexts: vsvmDiskBytesWritten.setDescription('Number of bytes written by all virtual hard disks assigned to this virtual machine.')
vsvmHeartbeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmHeartbeatCount.setStatus('current')
if mibBuilder.loadTexts: vsvmHeartbeatCount.setDescription('Number of heartbeats received since the virtual machine was last turned on.')
vsvmHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: vsvmHeartbeatInterval.setDescription('Duration of the heartbeat interval in seconds. This data is used by the HeartbeatPercentage counter.')
vsvmHeartbeatPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmHeartbeatPercentage.setStatus('current')
if mibBuilder.loadTexts: vsvmHeartbeatPercentage.setDescription('Percentage of total expected heartbeats that have been received in the last heartbeat interval. A HeartbeatPercentage of zero may indicate a problem with the guest operating system. A number greater than zero, but less than 100 may indicate that a heavy input/output (I/O) load is causing the heartbeat not to transmit.')
vsvmHeartbeatRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmHeartbeatRate.setStatus('current')
if mibBuilder.loadTexts: vsvmHeartbeatRate.setDescription('The number of heartbeats expected per heartbeat interval. This data is used by the HeartbeatPercentage counter.')
vsvmNetworkBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 13), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmNetworkBytesSent.setStatus('current')
if mibBuilder.loadTexts: vsvmNetworkBytesSent.setDescription('Total bytes sent by all virtual networks assigned to this virtual machine. This is a cumulative total.')
vsvmNetworkBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 14), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmNetworkBytesReceived.setStatus('current')
if mibBuilder.loadTexts: vsvmNetworkBytesReceived.setDescription('Total bytes received by all virtual networks assigned to this virtual machine. This is a cumulative total.')
vsvmPhysicalMemoryAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 15), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmPhysicalMemoryAllocated.setStatus('current')
if mibBuilder.loadTexts: vsvmPhysicalMemoryAllocated.setDescription("The system memory allocated to this virtual machine in bytes. This figure includes 4 MB of video RAM (VRAM). It does not include the additional 32 MB of 'overhead' memory used by each virtual machine in addition to the memory that is allocated to it. If a virtual machine is functioning poorly, you can check this number to make sure that sufficient memory is allocated.")
vsvmPhysicalMemoryAllocatedK = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 16), Gauge32()).setUnits('KiloBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmPhysicalMemoryAllocatedK.setStatus('current')
if mibBuilder.loadTexts: vsvmPhysicalMemoryAllocatedK.setDescription("The system memory allocated to this virtual machine in kilobytes. This figure includes 4 MB of video RAM (VRAM). It does not include the additional 32 MB of 'overhead' memory used by each virtual machine in addition to the memory that is allocated to it. If a virtual machine is functioning poorly, you can check this number to make sure that sufficient memory is allocated.")
vsvmPhysicalMemoryAllocatedM = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 17), Gauge32()).setUnits('MegaBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmPhysicalMemoryAllocatedM.setStatus('current')
if mibBuilder.loadTexts: vsvmPhysicalMemoryAllocatedM.setDescription("The system memory allocated to this virtual machine in megabytes. This figure includes 4 MB of video RAM (VRAM). It does not include the additional 32 MB of 'overhead' memory used by each virtual machine in addition to the memory that is allocated to it. If a virtual machine is functioning poorly, you can check this number to make sure that sufficient memory is allocated.")
vsvmUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 1, 1, 18), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvmUptime.setStatus('current')
if mibBuilder.loadTexts: vsvmUptime.setDescription('Number of seconds that the virtual machine has been running since it was last turned on.')
vsVirtualNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2), )
if mibBuilder.loadTexts: vsVirtualNetworkTable.setStatus('current')
if mibBuilder.loadTexts: vsVirtualNetworkTable.setDescription('The VirtualNetwork WMI class allows you to monitor the usage of each virtual network.')
vsVirtualNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1), ).setIndexNames((0, "INFORMANT-VS", "vsvnIndex"))
if mibBuilder.loadTexts: vsVirtualNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: vsVirtualNetworkEntry.setDescription('None')
vsvnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvnIndex.setStatus('current')
if mibBuilder.loadTexts: vsvnIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
vsvnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvnName.setStatus('current')
if mibBuilder.loadTexts: vsvnName.setDescription('Name of the physical network adapter to which this virtual network is attached.')
vsvnBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1, 3), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvnBytesDropped.setStatus('current')
if mibBuilder.loadTexts: vsvnBytesDropped.setDescription('Number of bytes dropped by this virtual network. Any number above zero indicates a virtual network failure.')
vsvnBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1, 4), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvnBytesReceived.setStatus('current')
if mibBuilder.loadTexts: vsvnBytesReceived.setDescription('Total bytes received by this virtual network since the first virtual machine attached to it was turned on.')
vsvnBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1, 5), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvnBytesSent.setStatus('current')
if mibBuilder.loadTexts: vsvnBytesSent.setDescription('Total bytes sent by this virtual network since the first virtual machine attached to it was turned on.')
vsvnPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvnPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: vsvnPacketsDropped.setDescription('Number of packets of data dropped by this virtual network. Any number above zero indicates a virtual network failure.')
vsvnPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvnPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: vsvnPacketsReceived.setDescription('Total packets of data received by this virtual network since the first virtual machine attached to it was turned on.')
vsvnPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 24, 2, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: vsvnPacketsSent.setStatus('current')
if mibBuilder.loadTexts: vsvnPacketsSent.setDescription('Total packets of data sent by this virtual network since the first virtual machine attached to it was turned on.')
mibBuilder.exportSymbols("INFORMANT-VS", vsvmDiskSpaceUsed=vsvmDiskSpaceUsed, vsvnBytesSent=vsvnBytesSent, vsVirtualNetworkEntry=vsVirtualNetworkEntry, vsvnPacketsDropped=vsvnPacketsDropped, vsvnPacketsReceived=vsvnPacketsReceived, vsvmUptime=vsvmUptime, vsvmIndex=vsvmIndex, vsvnPacketsSent=vsvnPacketsSent, vsvnBytesDropped=vsvnBytesDropped, vsVirtualMachineTable=vsVirtualMachineTable, vsvmHeartbeatCount=vsvmHeartbeatCount, vsvnBytesReceived=vsvnBytesReceived, vsvnIndex=vsvnIndex, vsvmPhysicalMemoryAllocated=vsvmPhysicalMemoryAllocated, vsVirtualNetworkTable=vsVirtualNetworkTable, vsvmHeartbeatInterval=vsvmHeartbeatInterval, vsvmDiskBytesWritten=vsvmDiskBytesWritten, vsvmCpuUtilization=vsvmCpuUtilization, vsvmNetworkBytesReceived=vsvmNetworkBytesReceived, vsvmHeartbeatPercentage=vsvmHeartbeatPercentage, vsVirtualMachineEntry=vsVirtualMachineEntry, vsvmDiskBytesRead=vsvmDiskBytesRead, vsvmName=vsvmName, vsvmNetworkBytesSent=vsvmNetworkBytesSent, vsvmDiskSpaceUsedK=vsvmDiskSpaceUsedK, vsvmDiskSpaceUsedM=vsvmDiskSpaceUsedM, PYSNMP_MODULE_ID=wmiVirtualServer, vsvnName=vsvnName, vsvmPhysicalMemoryAllocatedM=vsvmPhysicalMemoryAllocatedM, vsvmHeartbeatRate=vsvmHeartbeatRate, vsvmPhysicalMemoryAllocatedK=vsvmPhysicalMemoryAllocatedK, wmiVirtualServer=wmiVirtualServer)
