#
# PySNMP MIB module PERIPHONICS-VRU-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PERIPHONICS-VRU-NETWORK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
periphonics, = mibBuilder.importSymbols("PERIPHONICS-MIB", "periphonics")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, TimeTicks, ObjectIdentity, IpAddress, iso, MibIdentifier, Gauge32, Integer32, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "ObjectIdentity", "IpAddress", "iso", "MibIdentifier", "Gauge32", "Integer32", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "NotificationType")
TruthValue, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "DateAndTime", "TextualConvention")
vruNetwork = ModuleIdentity((1, 3, 6, 1, 4, 1, 1357, 1))
vruNetwork.setRevisions(('1998-08-05 00:00', '1998-01-05 00:00', '1997-07-29 00:00', '1997-05-06 00:00', '1997-04-08 00:00', '1997-03-26 00:00', '1997-02-24 00:00', '1997-01-18 00:00', '1997-01-15 00:00', '1996-12-17 00:00', '1996-12-04 00:00', '1996-07-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vruNetwork.setRevisionsDescriptions(('Changed notifyAlarmByComponent, componentEventsGroup, componentNotificationsGroup, and vruNetworkMIBComplianceByComponent status to deprecated. Added notifyAlarmByComponentEx, alrmLogComponentIpAddress, componentEventsGroup2, componentNotificationsGroup2, and vruNetworkMIBComplianceByComponent2. ', 'The component model has changed. The component id must be unique for all components of the same type. We no longer need to use IP (componentIpAddress) as the index into ComponentTable. alrmLogComponentIpAddress has been deleted and removed from notifyAlarmByComponent. ', 'Removed VAS support (vasTable and notifyVasStateChg). Added support for components. Change alrmLogVruId, notifyVruStateChg, notifyAlarm, vruEventsGroup and vruNotificationsGroup status to deprecated. Added alrmLogComponentId, alrmLogComponentIpAddress, alrmLogComponentType, notifyAlarmByComp, componentEventsGroup, vruNetworkMIBComplianceByComponent, and componentNotificationsGroup, ', 'Mod description of appStatsValue.', 'Mod alrmLogMax description to be more clearer. Mod description of lineState. ', 'Fix alrmLogSeverity description.', 'Added vasTable and notifyVasStateChg.', 'Mods so SMICng does not complain. remove unused imports from IMPORTS section make MODULE-IDENTITY first entry. remove - from enum constants since this is only valid in SMIv1. add enterprises, IpAddress to imports. add size restriction to DisplayStrings used as implied index. Index item cant have size of zero. mod evtObjectId and evChange MAX-ACCESS to accessible-for-notify. add OBJECT-GROUP, NOTIFICATION-GROUP, MODULE-COMPLIANCE. ', 'Added notifyTopologyChg trap.', 'Added appStats table. Added spanEnabled. ', 'Added vruLineCnt, vruSpanCnt, vruHostCnt and hostLuCnt. ', 'Creation.',))
if mibBuilder.loadTexts: vruNetwork.setLastUpdated('9808050000Z')
if mibBuilder.loadTexts: vruNetwork.setOrganization('Periphonics Corporation')
if mibBuilder.loadTexts: vruNetwork.setContactInfo('')
if mibBuilder.loadTexts: vruNetwork.setDescription('SNMP MIB module for a VRU Network.')
vruNetworkMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1357, 1, 1))
vruNetworkMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1357, 1, 1, 1))
vruNetworkMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2))
vruNetworkMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1357, 1, 1, 1, 1)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "vruNotificationsGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruEventsGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "applicationGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vruNetworkMIBCompliance = vruNetworkMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: vruNetworkMIBCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the VRU-NETWORK MIB.')
vruNetworkMIBComplianceByComponent = ModuleCompliance((1, 3, 6, 1, 4, 1, 1357, 1, 1, 1, 2)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "vruGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "applicationGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentNotificationsGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vruNetworkMIBComplianceByComponent = vruNetworkMIBComplianceByComponent.setStatus('deprecated')
if mibBuilder.loadTexts: vruNetworkMIBComplianceByComponent.setDescription('The compliance statement for SNMPv2 entities which implement the VRU-NETWORK MIB.')
vruNetworkMIBComplianceByComponent2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 1357, 1, 1, 1, 3)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "vruGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "applicationGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentGroup"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentNotificationsGroup2"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentEventsGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vruNetworkMIBComplianceByComponent2 = vruNetworkMIBComplianceByComponent2.setStatus('current')
if mibBuilder.loadTexts: vruNetworkMIBComplianceByComponent2.setDescription('The compliance statement for SNMPv2 entities which implement the VRU-NETWORK MIB.')
vruNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 1)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "notifyAlarm"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyVruStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyLineAppStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifySpanStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyHostStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyLuStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyTopologyChg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vruNotificationsGroup = vruNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vruNotificationsGroup.setDescription('A collection of notifications related to an Voice Response Unit(VRU).')
vruEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 2)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "evObjectId"), ("PERIPHONICS-VRU-NETWORK-MIB", "evChange"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMax"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogNumber"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogSeverity"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogCode"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogVruId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogLineId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogHostId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogProcName"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMessage"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vruEventsGroup = vruEventsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vruEventsGroup.setDescription('A collection of objects related to a VRU.')
vruGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 3)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "vruIpAddress"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruDescr"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruLineCnt"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruSpanCnt"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruHostCnt"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruAdminState"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruState"), ("PERIPHONICS-VRU-NETWORK-MIB", "vruStateLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vruGroup = vruGroup.setStatus('current')
if mibBuilder.loadTexts: vruGroup.setDescription('A collection of objects related to a VRU.')
lineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 4)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "lineType"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineProtocol"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineState"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineAppName"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineAppOverlay"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineAppAdminState"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineAppState"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineAppStateLastChange"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineAppCfgLastChange"), ("PERIPHONICS-VRU-NETWORK-MIB", "spanLineIdStart"), ("PERIPHONICS-VRU-NETWORK-MIB", "spanLineNumber"), ("PERIPHONICS-VRU-NETWORK-MIB", "spanEnabled"), ("PERIPHONICS-VRU-NETWORK-MIB", "spanState"), ("PERIPHONICS-VRU-NETWORK-MIB", "spanStateLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lineGroup = lineGroup.setStatus('current')
if mibBuilder.loadTexts: lineGroup.setDescription('A collection of objects related to a line on a VRU.')
applicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 5)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "appDescr"), ("PERIPHONICS-VRU-NETWORK-MIB", "appOptions"), ("PERIPHONICS-VRU-NETWORK-MIB", "appLineCnt"), ("PERIPHONICS-VRU-NETWORK-MIB", "appStatsValue"), ("PERIPHONICS-VRU-NETWORK-MIB", "appStatsLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    applicationGroup = applicationGroup.setStatus('current')
if mibBuilder.loadTexts: applicationGroup.setDescription('A collection of objects related to a VRU application.')
hostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 6)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "hostDescr"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostLuCnt"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostProtocol"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostMedia"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostAdminState"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostState"), ("PERIPHONICS-VRU-NETWORK-MIB", "hostStateLastChange"), ("PERIPHONICS-VRU-NETWORK-MIB", "luDescr"), ("PERIPHONICS-VRU-NETWORK-MIB", "luPoolName"), ("PERIPHONICS-VRU-NETWORK-MIB", "luState"), ("PERIPHONICS-VRU-NETWORK-MIB", "luStateLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hostGroup = hostGroup.setStatus('current')
if mibBuilder.loadTexts: hostGroup.setDescription('A collection of objects related to a VRU host.')
componentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 7)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "componentTypeName"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentIpAddress"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentState"), ("PERIPHONICS-VRU-NETWORK-MIB", "componentStateLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    componentGroup = componentGroup.setStatus('current')
if mibBuilder.loadTexts: componentGroup.setDescription('A collection of objects related to components.')
componentNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 8)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "notifyLineAppStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifySpanStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyHostStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyLuStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyTopologyChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyComponentStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyAlarmByComponent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    componentNotificationsGroup = componentNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: componentNotificationsGroup.setDescription('A collection of notifications related to the VPS/is network.')
componentEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 9)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "evObjectId"), ("PERIPHONICS-VRU-NETWORK-MIB", "evChange"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMax"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogNumber"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogSeverity"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogCode"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogLineId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogHostId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogProcName"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMessage"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogTime"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentType"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    componentEventsGroup = componentEventsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: componentEventsGroup.setDescription('A collection of objects related to a VRU.')
componentNotificationsGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 10)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "notifyLineAppStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifySpanStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyHostStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyLuStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyTopologyChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyComponentStateChg"), ("PERIPHONICS-VRU-NETWORK-MIB", "notifyAlarmByComponentEx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    componentNotificationsGroup2 = componentNotificationsGroup2.setStatus('current')
if mibBuilder.loadTexts: componentNotificationsGroup2.setDescription('A collection of notifications related to the VPS/is network.')
componentEventsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 1357, 1, 1, 2, 11)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "evObjectId"), ("PERIPHONICS-VRU-NETWORK-MIB", "evChange"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMax"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogNumber"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogSeverity"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogCode"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogLineId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogHostId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogProcName"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMessage"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogTime"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentType"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    componentEventsGroup2 = componentEventsGroup2.setStatus('current')
if mibBuilder.loadTexts: componentEventsGroup2.setDescription('A collection of objects related to a VRU.')
vruEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 1357, 1, 2))
vruEventVars = MibIdentifier((1, 3, 6, 1, 4, 1, 1357, 1, 2, 1))
evObjectId = MibScalar((1, 3, 6, 1, 4, 1, 1357, 1, 2, 1, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evObjectId.setStatus('current')
if mibBuilder.loadTexts: evObjectId.setDescription('Object identifier associated with the source of the trap. This object can not be retrieved from the SNMP agent.')
evChange = MibScalar((1, 3, 6, 1, 4, 1, 1357, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("del", 3), ("mod", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evChange.setStatus('current')
if mibBuilder.loadTexts: evChange.setDescription('Describes the type of change which just occurred. This object can not be retrieved from the SNMP agent.')
vruNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2))
notifyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 1)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogSeverity"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogCode"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogVruId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogLineId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogHostId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogProcName"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMessage"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogTime"))
if mibBuilder.loadTexts: notifyAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: notifyAlarm.setDescription('When a exceptional condition occurs the VRU system will generate an alarm. This trap forwards these alarms to the Network Management Station. **NOTE: this trap is deprecated and replaced by notifyAlarmByComponent trap')
notifyVruStateChg = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 2)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "vruState"))
if mibBuilder.loadTexts: notifyVruStateChg.setStatus('deprecated')
if mibBuilder.loadTexts: notifyVruStateChg.setDescription('This trap is forwarded to the Network Management Station when the VRU changes its state. **NOTE: this trap is deprecated and replaced by the notifyComponentStateChg trap.')
notifyLineAppStateChg = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 3)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "lineAppState"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineAppName"), ("PERIPHONICS-VRU-NETWORK-MIB", "lineAppOverlay"))
if mibBuilder.loadTexts: notifyLineAppStateChg.setStatus('current')
if mibBuilder.loadTexts: notifyLineAppStateChg.setDescription('This trap is forwarded to the Network Management Station when a application attached to a VRU line changes its state.')
notifySpanStateChg = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 4)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "spanState"))
if mibBuilder.loadTexts: notifySpanStateChg.setStatus('current')
if mibBuilder.loadTexts: notifySpanStateChg.setDescription('This trap is forwarded to the Network Management Station when a VRU span changes its state.')
notifyHostStateChg = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 5)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "hostState"))
if mibBuilder.loadTexts: notifyHostStateChg.setStatus('current')
if mibBuilder.loadTexts: notifyHostStateChg.setDescription('This trap is forwarded to the Network Management Station when a VRU host changes its state.')
notifyLuStateChg = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 6)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "luState"))
if mibBuilder.loadTexts: notifyLuStateChg.setStatus('current')
if mibBuilder.loadTexts: notifyLuStateChg.setDescription('This trap is forwarded to the Network Management Station when a VRU host lu changes its state.')
notifyTopologyChg = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 7)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "evObjectId"), ("PERIPHONICS-VRU-NETWORK-MIB", "evChange"))
if mibBuilder.loadTexts: notifyTopologyChg.setStatus('current')
if mibBuilder.loadTexts: notifyTopologyChg.setDescription('This trap is forwarded to the Network Management Station when a VRU Network object topology status has changed.')
notifyComponentStateChg = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 8)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "componentState"))
if mibBuilder.loadTexts: notifyComponentStateChg.setStatus('current')
if mibBuilder.loadTexts: notifyComponentStateChg.setDescription('This trap is forwarded to the Network Management Station when a VRU Network component changes its state.')
notifyAlarmByComponent = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 9)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentType"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogSeverity"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogCode"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogLineId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogHostId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogProcName"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMessage"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogTime"))
if mibBuilder.loadTexts: notifyAlarmByComponent.setStatus('deprecated')
if mibBuilder.loadTexts: notifyAlarmByComponent.setDescription('When a exceptional condition occurs the VPS/is network a component will generate an alarm. This trap forwards these these alarms to the Network Management Station. **NOTE: this trap is deprecated and replaced by the notifyAlarmByComponentEx trap.')
notifyAlarmByComponentEx = NotificationType((1, 3, 6, 1, 4, 1, 1357, 1, 2, 2, 10)).setObjects(("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentType"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogSeverity"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogCode"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogLineId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogHostId"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogProcName"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogMessage"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogTime"), ("PERIPHONICS-VRU-NETWORK-MIB", "alrmLogComponentIpAddress"))
if mibBuilder.loadTexts: notifyAlarmByComponentEx.setStatus('current')
if mibBuilder.loadTexts: notifyAlarmByComponentEx.setDescription('When a exceptional condition occurs the VPS/is network a component will generate an alarm. This trap forwards these these alarms to the Network Management Station. This is an extended version of notifyAlarmByComponent and includes the IP address of the component generating the alarm.')
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3))
alrmLogMax = MibScalar((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogMax.setStatus('current')
if mibBuilder.loadTexts: alrmLogMax.setDescription('Specifies the maximum number of alarms that may be logged in the alarm log table at once. When alrmLogNumber is equivalent to alrmLogMax, the first alarm in the table will be removed when the next alarm is added.')
alrmLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogNumber.setStatus('current')
if mibBuilder.loadTexts: alrmLogNumber.setDescription('The number of log entries currently defined.')
alrmLogTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6), )
if mibBuilder.loadTexts: alrmLogTable.setStatus('current')
if mibBuilder.loadTexts: alrmLogTable.setDescription('A list of alarm entries. The number of entries is given by alrmLogNumber. This list could be thought of as a queue. When the comonent generates an alarm, it is added to the end of the list. If the number of entries reaches alrmLogMax than the first entry will be deleted before a new one is added.')
alrmLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "alrmLogIdx"))
if mibBuilder.loadTexts: alrmLogTableEntry.setStatus('current')
if mibBuilder.loadTexts: alrmLogTableEntry.setDescription('An alarm entry containing objects that describe that alarm.')
alrmLogIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alrmLogIdx.setStatus('current')
if mibBuilder.loadTexts: alrmLogIdx.setDescription('Index into the alarm log table between one and alrmLogNumber.')
alrmLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogSeverity.setStatus('current')
if mibBuilder.loadTexts: alrmLogSeverity.setDescription('Integer describing how severe this alarm is. The lower the value, the lower the severity. A severity value of 0 indicates that no severity has been assigned to this alarm.')
alrmLogCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogCode.setStatus('current')
if mibBuilder.loadTexts: alrmLogCode.setDescription('Code assigned to identify this alarm.')
alrmLogVruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogVruId.setStatus('deprecated')
if mibBuilder.loadTexts: alrmLogVruId.setDescription('VRU identifier which generated this alarm. A value of 0 is used to indicate no VRU is associated with this alarm. **NOTE: this object is deprecated and has been replaced by alrmLogComponentId object.')
alrmLogLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogLineId.setStatus('current')
if mibBuilder.loadTexts: alrmLogLineId.setDescription('The phone line number associated with this alarm. A value of 0 indicates no phone line.')
alrmLogHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogHostId.setStatus('current')
if mibBuilder.loadTexts: alrmLogHostId.setDescription('The host identifier associated with this alarm. A value of 0 indicates that no host is associated with this alarm.')
alrmLogProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogProcName.setStatus('current')
if mibBuilder.loadTexts: alrmLogProcName.setDescription('The name of the process that generated this alarm.')
alrmLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogMessage.setStatus('current')
if mibBuilder.loadTexts: alrmLogMessage.setDescription('A message describing the alarm that occurred.')
alrmLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogTime.setStatus('current')
if mibBuilder.loadTexts: alrmLogTime.setDescription('The time that this alarm was generated.')
alrmLogComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogComponentType.setStatus('current')
if mibBuilder.loadTexts: alrmLogComponentType.setDescription('Component type of the VPS/is component which generated this alarm.')
alrmLogComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogComponentId.setStatus('current')
if mibBuilder.loadTexts: alrmLogComponentId.setDescription('Component identifier of the VPS/is component which generated this alarm.')
alrmLogComponentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 2, 3, 6, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrmLogComponentIpAddress.setStatus('current')
if mibBuilder.loadTexts: alrmLogComponentIpAddress.setDescription('Component IP address of the VPS/is component which generated this alarm.')
vruTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 3), )
if mibBuilder.loadTexts: vruTable.setStatus('current')
if mibBuilder.loadTexts: vruTable.setDescription('All Voice Response Units(VRU) a agent knows about')
vruTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "vruId"))
if mibBuilder.loadTexts: vruTableEntry.setStatus('current')
if mibBuilder.loadTexts: vruTableEntry.setDescription('A (conceptual) row entry for one VRU.')
vruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vruId.setStatus('current')
if mibBuilder.loadTexts: vruId.setDescription('The VRU number associated with this VRU entity. Note that is a unique number within VRU network.')
vruIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vruIpAddress.setStatus('current')
if mibBuilder.loadTexts: vruIpAddress.setDescription('VRU network ip address.')
vruDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vruDescr.setStatus('current')
if mibBuilder.loadTexts: vruDescr.setDescription('A textual description of this VRU entity. It is mandatory that this contain only printable ASCII characters.')
vruLineCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vruLineCnt.setStatus('current')
if mibBuilder.loadTexts: vruLineCnt.setDescription('Number of physical phone lines on this system.')
vruSpanCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vruSpanCnt.setStatus('current')
if mibBuilder.loadTexts: vruSpanCnt.setDescription('Number of spans on this system. This also indicates the number of rows in the spanTable(4) for this VRU.')
vruHostCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vruHostCnt.setStatus('current')
if mibBuilder.loadTexts: vruHostCnt.setDescription('Number of hosts defined for this system. This also indicates the number of rows in the hostTable(6) for this VRU.')
vruAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("startup", 2), ("shutdown", 3), ("recycle", 4), ("selftest", 5), ("checkpoint", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vruAdminState.setStatus('current')
if mibBuilder.loadTexts: vruAdminState.setDescription('The network managers desired state of this VRU entity.')
vruState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("init", 3), ("up", 4), ("down", 5), ("selftest", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vruState.setStatus('current')
if mibBuilder.loadTexts: vruState.setDescription('The current status of the VRU entity.')
vruStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vruStateLastChange.setStatus('current')
if mibBuilder.loadTexts: vruStateLastChange.setDescription('Date and time that this VRU entity changed its state.')
lineTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 4), )
if mibBuilder.loadTexts: lineTable.setStatus('current')
if mibBuilder.loadTexts: lineTable.setDescription('All physical and logical lines that are attached to a Voice Response Units(VRU).')
lineTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "lineVruId"), (0, "PERIPHONICS-VRU-NETWORK-MIB", "lineId"))
if mibBuilder.loadTexts: lineTableEntry.setStatus('current')
if mibBuilder.loadTexts: lineTableEntry.setDescription('A (conceptual) entry for one physical/logical line.')
lineVruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lineVruId.setStatus('current')
if mibBuilder.loadTexts: lineVruId.setDescription('The VRU identifier that this phone line is associated with.')
lineId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lineId.setStatus('current')
if mibBuilder.loadTexts: lineId.setDescription('The line number of this phone line. This number is unique for each VRU.')
lineType = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("virtual", 3), ("analog", 4), ("digital", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineType.setStatus('current')
if mibBuilder.loadTexts: lineType.setDescription('Specifies whether this line is a logical(3) or a physical(4) phone line. A line type of unknown(2) indicates that we cant determine the line type at this moment.')
lineProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineProtocol.setStatus('current')
if mibBuilder.loadTexts: lineProtocol.setDescription('A value which indicates the set of protocols this phone line offers. The value is a sum. This value initially takes the value of zero which indicates that the protocol is unknown. Then for each protocol that this line supports, its protocol value is added to the sum. Value Functionality 0x00001 Uses some other type of protocol 0x00002 Some analog protocol 0x00004 AT&T Bell release 0x00008 British Paging (BTUK/MCP) 0x00010 Channel bank with 2 wire option 0x00020 Channel bank with 2 wire FXOR else FXO 0x00040 Channel bank with 4 wire E&M 0x00080 Channel bank FSX[r] else FXO[R] 0x00100 Channel bank loop start else ground 0x00200 Channel bank standard access 0x00400 Common channel signalling (SS7) 0x00800 Galaxy 5/2 ACD 0x01000 ISDN 0x02000 Loop hangup supervision 0x04000 Mercury CAS signalling 0x08000 Network side protocol 0x10000 R1 signaling system 0x20000 R2 signaling with DTMF outdial 0x40000 R2 signaling system ')
lineState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("connected", 3), ("idle", 4), ("busy", 5), ("referral", 6), ("down", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineState.setStatus('current')
if mibBuilder.loadTexts: lineState.setDescription('Current state of this line. The line may be currently servicing a call (connected), in service but not in a call service or referral state (idle), not in service nor down (busy), referral (referral), or down (down). If we are unable to connect to the VRU than the line state will be unknown (unknown). A logical line line state will always be unknown.')
lineAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineAppName.setStatus('current')
if mibBuilder.loadTexts: lineAppName.setDescription('The name of the application that is currently assigned to this line. Any response PDU on this object will return the name of the application assigned to this line. If there is no application assigned to this line, a 0 length string is returned. Assigning a new application to this line is achieved by setting lineAppAdminState to assign and this object to the applications name.')
lineAppOverlay = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineAppOverlay.setStatus('current')
if mibBuilder.loadTexts: lineAppOverlay.setDescription('The name of the application that has been linked to this line.')
lineAppAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("startapp", 2), ("softterm", 3), ("hardterm", 4), ("assign", 5), ("unassign", 6), ("hardrestart", 7), ("softrestart", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineAppAdminState.setStatus('current')
if mibBuilder.loadTexts: lineAppAdminState.setDescription('Desired state that Network Manager wants the application in.')
lineAppState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noapp", 3), ("init", 4), ("up", 5), ("down", 6), ("config", 7), ("exit", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineAppState.setStatus('current')
if mibBuilder.loadTexts: lineAppState.setDescription('Current state of the application that is assigned to this logical line. If no applications are assigned this entry will be noapp(3)')
lineAppStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineAppStateLastChange.setStatus('current')
if mibBuilder.loadTexts: lineAppStateLastChange.setDescription('Date and time that the current application assigned to this line last changed its state.')
lineAppCfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 4, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineAppCfgLastChange.setStatus('current')
if mibBuilder.loadTexts: lineAppCfgLastChange.setDescription('Date and time of last application configure or unconfigure on this line.')
spanTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 5), )
if mibBuilder.loadTexts: spanTable.setStatus('current')
if mibBuilder.loadTexts: spanTable.setDescription('All spans which are attached to a Voice Response Unit (VRU).')
spanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 5, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "spanVruId"), (0, "PERIPHONICS-VRU-NETWORK-MIB", "spanId"))
if mibBuilder.loadTexts: spanTableEntry.setStatus('current')
if mibBuilder.loadTexts: spanTableEntry.setDescription('A (conceptual) entry for one span.')
spanVruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: spanVruId.setStatus('current')
if mibBuilder.loadTexts: spanVruId.setDescription('VRU identifier that this span is associated with.')
spanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: spanId.setStatus('current')
if mibBuilder.loadTexts: spanId.setDescription('Identifier of this span.')
spanLineIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanLineIdStart.setStatus('current')
if mibBuilder.loadTexts: spanLineIdStart.setDescription('Line id of the first line in this span.')
spanLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 24))).clone(namedValues=NamedValues(("europaLineNumber", 30), ("usaLineNumber", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanLineNumber.setStatus('current')
if mibBuilder.loadTexts: spanLineNumber.setDescription('Number of lines in this span.')
spanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanEnabled.setStatus('current')
if mibBuilder.loadTexts: spanEnabled.setDescription('Indicates whether span is enabled or disabled. A value of true(1) indicates span is enabled and a value of false(2) indicates span is disabled.')
spanState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("init", 3), ("green", 4), ("fatal", 5), ("yellow", 6), ("red", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanState.setStatus('current')
if mibBuilder.loadTexts: spanState.setDescription('Current state of this span.')
spanStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanStateLastChange.setStatus('current')
if mibBuilder.loadTexts: spanStateLastChange.setDescription('Date and time that the span last changed its state.')
appTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 6), )
if mibBuilder.loadTexts: appTable.setStatus('current')
if mibBuilder.loadTexts: appTable.setDescription('All applications that VRU currently knows about.')
appTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 6, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "appVruId"), (1, "PERIPHONICS-VRU-NETWORK-MIB", "appName"))
if mibBuilder.loadTexts: appTableEntry.setStatus('current')
if mibBuilder.loadTexts: appTableEntry.setDescription('A (conceptual) entry for one VRU application')
appVruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: appVruId.setStatus('current')
if mibBuilder.loadTexts: appVruId.setDescription('VRU id that this application has been assigned to.')
appName = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: appName.setStatus('current')
if mibBuilder.loadTexts: appName.setDescription('The name of the application that can been assigned to a line. This name must be unique for each VRU')
appDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appDescr.setStatus('current')
if mibBuilder.loadTexts: appDescr.setDescription('A textual description of this application. It is mandatory that this contain only printable ASCII characters.')
appOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appOptions.setStatus('current')
if mibBuilder.loadTexts: appOptions.setDescription('The options that are needed during this applications startup.')
appLineCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLineCnt.setStatus('current')
if mibBuilder.loadTexts: appLineCnt.setDescription('The number of lines that this application is assigned to.')
appStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 7), )
if mibBuilder.loadTexts: appStatsTable.setStatus('current')
if mibBuilder.loadTexts: appStatsTable.setDescription('All application specific stats that have been collected.')
appStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 7, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "appStatsVruId"), (1, "PERIPHONICS-VRU-NETWORK-MIB", "appStatsName"))
if mibBuilder.loadTexts: appStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: appStatsTableEntry.setDescription('A (conceptual) entry for one application stat')
appStatsVruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: appStatsVruId.setStatus('current')
if mibBuilder.loadTexts: appStatsVruId.setDescription('The VRU identifier that this application statistic is associated with.')
appStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: appStatsName.setStatus('current')
if mibBuilder.loadTexts: appStatsName.setDescription('Name which identifies this application stat.')
appStatsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appStatsValue.setStatus('current')
if mibBuilder.loadTexts: appStatsValue.setDescription('An application stats value. This value is gathered on 15 minute intervals.')
appStatsLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appStatsLastChange.setStatus('current')
if mibBuilder.loadTexts: appStatsLastChange.setDescription('Date and time when this application stat was recorded.')
hostTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 8), )
if mibBuilder.loadTexts: hostTable.setStatus('current')
if mibBuilder.loadTexts: hostTable.setDescription('All hosts defined for a VRU.')
hostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "hostVruId"), (0, "PERIPHONICS-VRU-NETWORK-MIB", "hostId"))
if mibBuilder.loadTexts: hostTableEntry.setStatus('current')
if mibBuilder.loadTexts: hostTableEntry.setDescription('A (conceptual) entry for one VRU host')
hostVruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hostVruId.setStatus('current')
if mibBuilder.loadTexts: hostVruId.setDescription('The VRU identifier that this host is associated with.')
hostId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hostId.setStatus('current')
if mibBuilder.loadTexts: hostId.setDescription('Unique identifier associated with this host.')
hostDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostDescr.setStatus('current')
if mibBuilder.loadTexts: hostDescr.setDescription('A textual description of this host. It is mandatory that this contain only printable ASCII characters.')
hostLuCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostLuCnt.setStatus('current')
if mibBuilder.loadTexts: hostLuCnt.setDescription("Number of lu's defined for this host. This also indicates the number of rows in the luTable(7) for this host.")
hostProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("atte", 3), ("async", 4), ("lu62", 5), ("sna3270", 6), ("sdlcexp", 7), ("vpstn3270", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostProtocol.setStatus('current')
if mibBuilder.loadTexts: hostProtocol.setDescription('Protocol which is used for host communications.')
hostMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("hardwarebased", 3), ("softwarebased", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMedia.setStatus('current')
if mibBuilder.loadTexts: hostMedia.setDescription('Media used for communicating with the host.')
hostAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("init", 2), ("up", 3), ("down", 4), ("recycle", 5), ("selftest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostAdminState.setStatus('current')
if mibBuilder.loadTexts: hostAdminState.setDescription('Desired state that Network Manager wants the host in.')
hostState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("init", 3), ("up", 4), ("down", 5), ("selftest", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostState.setStatus('current')
if mibBuilder.loadTexts: hostState.setDescription('Current state of the host.')
hostStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 8, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStateLastChange.setStatus('current')
if mibBuilder.loadTexts: hostStateLastChange.setDescription('Date and time this host last changed it state.')
luTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 9), )
if mibBuilder.loadTexts: luTable.setStatus('current')
if mibBuilder.loadTexts: luTable.setDescription('All logical units(LU) defined for hosts on a VRU.')
luTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 9, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "luVruId"), (0, "PERIPHONICS-VRU-NETWORK-MIB", "luHostId"), (0, "PERIPHONICS-VRU-NETWORK-MIB", "luId"))
if mibBuilder.loadTexts: luTableEntry.setStatus('current')
if mibBuilder.loadTexts: luTableEntry.setDescription('A (conceptual) entry for one LU')
luVruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: luVruId.setStatus('current')
if mibBuilder.loadTexts: luVruId.setDescription('VRU entity that this LU is associated with.')
luHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: luHostId.setStatus('current')
if mibBuilder.loadTexts: luHostId.setDescription('Host entity that this LU is associated with.')
luId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: luId.setStatus('current')
if mibBuilder.loadTexts: luId.setDescription('LU identifier that is associated with this LU.')
luDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDescr.setStatus('current')
if mibBuilder.loadTexts: luDescr.setDescription('A textual description of this LU. It is mandatory that this contain only printable ASCII characters.')
luPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luPoolName.setStatus('current')
if mibBuilder.loadTexts: luPoolName.setDescription('Pool name that this LU is assigned to.')
luState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("init", 3), ("up", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luState.setStatus('current')
if mibBuilder.loadTexts: luState.setDescription('Current state of this LU.')
luStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 9, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luStateLastChange.setStatus('current')
if mibBuilder.loadTexts: luStateLastChange.setDescription('Date and time this lu last changed it state.')
components = MibIdentifier((1, 3, 6, 1, 4, 1, 1357, 1, 10))
componentTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 10, 1), )
if mibBuilder.loadTexts: componentTypeTable.setStatus('current')
if mibBuilder.loadTexts: componentTypeTable.setDescription('All defined component types.')
componentTypeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 10, 1, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "componentTypeId"))
if mibBuilder.loadTexts: componentTypeTableEntry.setStatus('current')
if mibBuilder.loadTexts: componentTypeTableEntry.setDescription('A (conceptual) entry for one component type.')
componentTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: componentTypeId.setStatus('current')
if mibBuilder.loadTexts: componentTypeId.setDescription('Identifier for this component type.')
componentTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentTypeName.setStatus('current')
if mibBuilder.loadTexts: componentTypeName.setDescription('Name of this component type.')
componentTable = MibTable((1, 3, 6, 1, 4, 1, 1357, 1, 10, 3), )
if mibBuilder.loadTexts: componentTable.setStatus('current')
if mibBuilder.loadTexts: componentTable.setDescription('All components found in the system.')
componentTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1357, 1, 10, 3, 1), ).setIndexNames((0, "PERIPHONICS-VRU-NETWORK-MIB", "componentType"), (0, "PERIPHONICS-VRU-NETWORK-MIB", "componentId"))
if mibBuilder.loadTexts: componentTableEntry.setStatus('current')
if mibBuilder.loadTexts: componentTableEntry.setDescription('A (conceptual) entry for one component.')
componentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: componentType.setStatus('current')
if mibBuilder.loadTexts: componentType.setDescription('Type of this component.')
componentId = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: componentId.setStatus('current')
if mibBuilder.loadTexts: componentId.setDescription('Identifier of this component.')
componentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentIpAddress.setStatus('current')
if mibBuilder.loadTexts: componentIpAddress.setDescription('IP address of this component.')
componentState = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("init", 3), ("up", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentState.setStatus('current')
if mibBuilder.loadTexts: componentState.setDescription('Current state of this component.')
componentStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1357, 1, 10, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentStateLastChange.setStatus('current')
if mibBuilder.loadTexts: componentStateLastChange.setDescription('Date and time this component last changed its state.')
mibBuilder.exportSymbols("PERIPHONICS-VRU-NETWORK-MIB", appStatsTableEntry=appStatsTableEntry, lineAppState=lineAppState, lineAppOverlay=lineAppOverlay, luTable=luTable, alrmLogMessage=alrmLogMessage, hostLuCnt=hostLuCnt, componentTypeName=componentTypeName, hostTableEntry=hostTableEntry, lineType=lineType, hostGroup=hostGroup, appOptions=appOptions, vruTableEntry=vruTableEntry, notifyLuStateChg=notifyLuStateChg, vruNetwork=vruNetwork, vruEventsGroup=vruEventsGroup, hostVruId=hostVruId, componentState=componentState, vruEvents=vruEvents, vruId=vruId, hostAdminState=hostAdminState, componentTypeTableEntry=componentTypeTableEntry, luPoolName=luPoolName, lineTableEntry=lineTableEntry, vruNotificationsGroup=vruNotificationsGroup, PYSNMP_MODULE_ID=vruNetwork, vruStateLastChange=vruStateLastChange, alrmLogComponentId=alrmLogComponentId, lineAppName=lineAppName, alrmLogHostId=alrmLogHostId, vruIpAddress=vruIpAddress, vruSpanCnt=vruSpanCnt, spanLineNumber=spanLineNumber, notifyAlarmByComponent=notifyAlarmByComponent, luVruId=luVruId, luId=luId, lineGroup=lineGroup, alrmLogSeverity=alrmLogSeverity, hostProtocol=hostProtocol, appTableEntry=appTableEntry, spanTable=spanTable, componentIpAddress=componentIpAddress, componentEventsGroup=componentEventsGroup, lineVruId=lineVruId, componentNotificationsGroup=componentNotificationsGroup, alrmLogMax=alrmLogMax, vruState=vruState, componentNotificationsGroup2=componentNotificationsGroup2, alrmLogTableEntry=alrmLogTableEntry, spanState=spanState, notifySpanStateChg=notifySpanStateChg, alarms=alarms, alrmLogNumber=alrmLogNumber, alrmLogIdx=alrmLogIdx, notifyAlarmByComponentEx=notifyAlarmByComponentEx, spanEnabled=spanEnabled, componentTableEntry=componentTableEntry, appName=appName, appStatsName=appStatsName, spanTableEntry=spanTableEntry, vruTable=vruTable, luStateLastChange=luStateLastChange, vruHostCnt=vruHostCnt, applicationGroup=applicationGroup, spanId=spanId, vruDescr=vruDescr, vruNetworkMIBCompliance=vruNetworkMIBCompliance, notifyAlarm=notifyAlarm, componentType=componentType, vruEventVars=vruEventVars, hostId=hostId, luTableEntry=luTableEntry, lineAppStateLastChange=lineAppStateLastChange, lineAppAdminState=lineAppAdminState, alrmLogComponentType=alrmLogComponentType, spanStateLastChange=spanStateLastChange, appDescr=appDescr, vruNetworkMIBConformance=vruNetworkMIBConformance, lineState=lineState, alrmLogLineId=alrmLogLineId, notifyTopologyChg=notifyTopologyChg, componentId=componentId, componentEventsGroup2=componentEventsGroup2, notifyLineAppStateChg=notifyLineAppStateChg, lineAppCfgLastChange=lineAppCfgLastChange, appVruId=appVruId, appStatsVruId=appStatsVruId, alrmLogVruId=alrmLogVruId, notifyVruStateChg=notifyVruStateChg, hostDescr=hostDescr, appStatsTable=appStatsTable, lineProtocol=lineProtocol, alrmLogCode=alrmLogCode, vruNetworkMIBGroups=vruNetworkMIBGroups, spanLineIdStart=spanLineIdStart, notifyHostStateChg=notifyHostStateChg, alrmLogTime=alrmLogTime, lineId=lineId, luDescr=luDescr, alrmLogComponentIpAddress=alrmLogComponentIpAddress, evObjectId=evObjectId, alrmLogProcName=alrmLogProcName, componentStateLastChange=componentStateLastChange, alrmLogTable=alrmLogTable, vruGroup=vruGroup, hostStateLastChange=hostStateLastChange, appLineCnt=appLineCnt, hostTable=hostTable, hostState=hostState, evChange=evChange, appStatsValue=appStatsValue, luState=luState, appStatsLastChange=appStatsLastChange, componentTypeId=componentTypeId, luHostId=luHostId, appTable=appTable, vruNetworkMIBComplianceByComponent2=vruNetworkMIBComplianceByComponent2, vruLineCnt=vruLineCnt, vruNetworkMIBComplianceByComponent=vruNetworkMIBComplianceByComponent, vruAdminState=vruAdminState, hostMedia=hostMedia, componentGroup=componentGroup, componentTable=componentTable, components=components, vruNetworkMIBCompliances=vruNetworkMIBCompliances, notifyComponentStateChg=notifyComponentStateChg, spanVruId=spanVruId, vruNotifications=vruNotifications, lineTable=lineTable, componentTypeTable=componentTypeTable)
