#
# PySNMP MIB module GC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
products, = mibBuilder.importSymbols("RBT-MIB", "products")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Gauge32, ObjectIdentity, Unsigned32, Bits, NotificationType, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Gauge32", "ObjectIdentity", "Unsigned32", "Bits", "NotificationType", "MibIdentifier", "Counter64")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
gc = ModuleIdentity((1, 3, 6, 1, 4, 1, 17163, 1, 100))
gc.setRevisions(('2014-12-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gc.setRevisionsDescriptions(('Fixed SNMP traps',))
if mibBuilder.loadTexts: gc.setLastUpdated('201412090000Z')
if mibBuilder.loadTexts: gc.setOrganization('Riverbed Technology, Inc.')
if mibBuilder.loadTexts: gc.setContactInfo(' Riverbed Technical Support support@riverbed.com')
if mibBuilder.loadTexts: gc.setDescription('Riverbed Technology SteelFusion Core MIB')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 1))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 3))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5))
model = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: model.setStatus('current')
if mibBuilder.loadTexts: model.setDescription('Appliance model')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Appliance serial number')
systemVersion = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVersion.setStatus('current')
if mibBuilder.loadTexts: systemVersion.setDescription('System software version string')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
if mibBuilder.loadTexts: systemClock.setDescription('System clock time')
health = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: health.setStatus('current')
if mibBuilder.loadTexts: health.setDescription('Current health')
systemHealth = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 30000, 50000))).clone(namedValues=NamedValues(("healthy", 10000), ("degraded", 30000), ("critical", 50000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealth.setStatus('current')
if mibBuilder.loadTexts: systemHealth.setDescription('Current health of the system. This variable is identical to health except that it is of integer datatype')
systemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTemperature.setStatus('current')
if mibBuilder.loadTexts: systemTemperature.setDescription('The temperature of the system (C)')
procTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11), )
if mibBuilder.loadTexts: procTable.setStatus('current')
if mibBuilder.loadTexts: procTable.setDescription('List of managed processes')
procEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1), ).setIndexNames((0, "GC-MIB", "procIndex"))
if mibBuilder.loadTexts: procEntry.setStatus('current')
if mibBuilder.loadTexts: procEntry.setDescription('Entry for one process')
procIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: procIndex.setStatus('current')
if mibBuilder.loadTexts: procIndex.setDescription('Synthetic numeric unique ID of process')
procName = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procName.setStatus('current')
if mibBuilder.loadTexts: procName.setDescription('Unique name of process')
procStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStatus.setStatus('current')
if mibBuilder.loadTexts: procStatus.setDescription('Current state of process')
procNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 2, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procNumFailures.setStatus('current')
if mibBuilder.loadTexts: procNumFailures.setDescription('Number of times process has crashed or exited unexpectedly')
activeConfig = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeConfig.setStatus('current')
if mibBuilder.loadTexts: activeConfig.setDescription('Current active configuration')
alarmsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0))
procCrash = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1)).setObjects(("GC-MIB", "procName"))
if mibBuilder.loadTexts: procCrash.setStatus('current')
if mibBuilder.loadTexts: procCrash.setDescription('A procCrash trap signifies that a process managed by PM has crashed and left a core file. The variable sent with the notification indicates which process crashed.')
procExit = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 2)).setObjects(("GC-MIB", "procName"))
if mibBuilder.loadTexts: procExit.setStatus('current')
if mibBuilder.loadTexts: procExit.setDescription('A procExit trap signifies that a process managed by PM has exited unexpectedly, but not left a core file. The variable sent with the notification indicates which process exited.')
configChange = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 3))
if mibBuilder.loadTexts: configChange.setStatus('current')
if mibBuilder.loadTexts: configChange.setDescription("A change has been made to the system's configuration")
cpuUtil = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 4))
if mibBuilder.loadTexts: cpuUtil.setStatus('current')
if mibBuilder.loadTexts: cpuUtil.setDescription('The average CPU utilization in the past minute has gone above the acceptable threshold')
pagingActivity = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 5))
if mibBuilder.loadTexts: pagingActivity.setStatus('current')
if mibBuilder.loadTexts: pagingActivity.setDescription('The system has been paging excessively (thrashing)')
linkError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 6))
if mibBuilder.loadTexts: linkError.setStatus('current')
if mibBuilder.loadTexts: linkError.setDescription('An interface on the appliance has lost its link')
powerSupplyError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 7))
if mibBuilder.loadTexts: powerSupplyError.setStatus('current')
if mibBuilder.loadTexts: powerSupplyError.setDescription('A power supply on the appliance has failed')
fanError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 8))
if mibBuilder.loadTexts: fanError.setStatus('current')
if mibBuilder.loadTexts: fanError.setDescription('A fan has failed on this appliance')
memoryError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 9))
if mibBuilder.loadTexts: memoryError.setStatus('current')
if mibBuilder.loadTexts: memoryError.setDescription('A memory error has been detected on the appliance')
ipmi = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10))
if mibBuilder.loadTexts: ipmi.setStatus('current')
if mibBuilder.loadTexts: ipmi.setDescription('An IPMI event has been detected on the appliance. Please check the details in the alarm report on the web UI')
localFSFull = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11))
if mibBuilder.loadTexts: localFSFull.setStatus('current')
if mibBuilder.loadTexts: localFSFull.setDescription('The appliance local filesystem is full.')
temperatureCritical = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 12))
if mibBuilder.loadTexts: temperatureCritical.setStatus('current')
if mibBuilder.loadTexts: temperatureCritical.setDescription('The system temperature has reached a critical stage')
temperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 13))
if mibBuilder.loadTexts: temperatureWarning.setStatus('current')
if mibBuilder.loadTexts: temperatureWarning.setDescription('The system temperature has exceeded the threshold')
scheduledJobError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 14))
if mibBuilder.loadTexts: scheduledJobError.setStatus('current')
if mibBuilder.loadTexts: scheduledJobError.setDescription('A scheduled job has failed during execution')
confModeEnter = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 15))
if mibBuilder.loadTexts: confModeEnter.setStatus('current')
if mibBuilder.loadTexts: confModeEnter.setDescription('A user has entered configuration mode')
confModeExit = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 16))
if mibBuilder.loadTexts: confModeExit.setStatus('current')
if mibBuilder.loadTexts: confModeExit.setDescription('A user has exited configuration mode')
secureVaultLocked = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 17))
if mibBuilder.loadTexts: secureVaultLocked.setStatus('current')
if mibBuilder.loadTexts: secureVaultLocked.setDescription('Secure vault is locked. The secure datastore cannot be used.')
procRestart = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 18)).setObjects(("GC-MIB", "procName"))
if mibBuilder.loadTexts: procRestart.setStatus('current')
if mibBuilder.loadTexts: procRestart.setDescription('A procRestart trap signifies that a process managed by PM has restarted. The variable sent with the notification indicates which process restarted.')
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 19)).setObjects(("GC-MIB", "procName"))
if mibBuilder.loadTexts: testTrap.setStatus('current')
if mibBuilder.loadTexts: testTrap.setDescription('This is a test trap.')
edgeError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10500))
if mibBuilder.loadTexts: edgeError.setStatus('current')
if mibBuilder.loadTexts: edgeError.setDescription('Edge module encountered error.')
highAvailabilityError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10501))
if mibBuilder.loadTexts: highAvailabilityError.setStatus('current')
if mibBuilder.loadTexts: highAvailabilityError.setDescription('High Availability module encountered error.')
lunError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10502))
if mibBuilder.loadTexts: lunError.setStatus('current')
if mibBuilder.loadTexts: lunError.setDescription('Lun module encountered error.')
iscsiError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10503))
if mibBuilder.loadTexts: iscsiError.setStatus('current')
if mibBuilder.loadTexts: iscsiError.setDescription('iSCSI module encountered error.')
snapshotError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10505))
if mibBuilder.loadTexts: snapshotError.setStatus('current')
if mibBuilder.loadTexts: snapshotError.setDescription('Snapshot module encountered error.')
applianceUnlicensedError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10506))
if mibBuilder.loadTexts: applianceUnlicensedError.setStatus('current')
if mibBuilder.loadTexts: applianceUnlicensedError.setDescription('Appliance license expired/invalid.')
modelUnlicensedError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10507))
if mibBuilder.loadTexts: modelUnlicensedError.setStatus('current')
if mibBuilder.loadTexts: modelUnlicensedError.setDescription('Model license expired/invalid.')
blkdiskError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10508))
if mibBuilder.loadTexts: blkdiskError.setStatus('current')
if mibBuilder.loadTexts: blkdiskError.setDescription('Block-disk module encountered error.')
backupIntegrationError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10509))
if mibBuilder.loadTexts: backupIntegrationError.setStatus('current')
if mibBuilder.loadTexts: backupIntegrationError.setDescription('Backup-Integration module encountered error.')
otherHardwareError = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 10510))
if mibBuilder.loadTexts: otherHardwareError.setStatus('current')
if mibBuilder.loadTexts: otherHardwareError.setDescription('Hardware Error detected.')
cpuUtilClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1004))
if mibBuilder.loadTexts: cpuUtilClear.setStatus('current')
if mibBuilder.loadTexts: cpuUtilClear.setDescription('The average CPU utilization has fallen back within the acceptable threshold')
pagingActivityClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1005))
if mibBuilder.loadTexts: pagingActivityClear.setStatus('current')
if mibBuilder.loadTexts: pagingActivityClear.setDescription('The system has stopped paging excessively (thrashing)')
linkErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1006))
if mibBuilder.loadTexts: linkErrorClear.setStatus('current')
if mibBuilder.loadTexts: linkErrorClear.setDescription('An interface on the appliance has regained its link')
powerSupplyErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1007))
if mibBuilder.loadTexts: powerSupplyErrorClear.setStatus('current')
if mibBuilder.loadTexts: powerSupplyErrorClear.setDescription('All power supplies are now functioning normally')
fanErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1008))
if mibBuilder.loadTexts: fanErrorClear.setStatus('current')
if mibBuilder.loadTexts: fanErrorClear.setDescription('All system fans are now functioning normally')
memoryErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1009))
if mibBuilder.loadTexts: memoryErrorClear.setStatus('current')
if mibBuilder.loadTexts: memoryErrorClear.setDescription('A memory error has been rectified on the appliance')
ipmiClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1010))
if mibBuilder.loadTexts: ipmiClear.setStatus('current')
if mibBuilder.loadTexts: ipmiClear.setDescription('An IPMI event has been rectified on the appliance')
localFSFullClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1011))
if mibBuilder.loadTexts: localFSFullClear.setStatus('current')
if mibBuilder.loadTexts: localFSFullClear.setDescription('The appliance local filesystem usage is below threshold.')
temperatureNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1012))
if mibBuilder.loadTexts: temperatureNonCritical.setStatus('current')
if mibBuilder.loadTexts: temperatureNonCritical.setDescription('The system temperature is no longer in a critical stage')
temperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1013))
if mibBuilder.loadTexts: temperatureNormal.setStatus('current')
if mibBuilder.loadTexts: temperatureNormal.setDescription('The system temperature is back within the threshold')
secureVaultUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 1017))
if mibBuilder.loadTexts: secureVaultUnlocked.setStatus('current')
if mibBuilder.loadTexts: secureVaultUnlocked.setDescription('Secure vault is unlocked. The secure data store can be used now.')
edgeClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11500))
if mibBuilder.loadTexts: edgeClear.setStatus('current')
if mibBuilder.loadTexts: edgeClear.setDescription('Edge module error cleared.')
highAvailabilityClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11501))
if mibBuilder.loadTexts: highAvailabilityClear.setStatus('current')
if mibBuilder.loadTexts: highAvailabilityClear.setDescription('High Availability module error cleared.')
lunClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11502))
if mibBuilder.loadTexts: lunClear.setStatus('current')
if mibBuilder.loadTexts: lunClear.setDescription('Lun module error cleared.')
iscsiClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11503))
if mibBuilder.loadTexts: iscsiClear.setStatus('current')
if mibBuilder.loadTexts: iscsiClear.setDescription('iSCSI module error cleared.')
snapshotClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11505))
if mibBuilder.loadTexts: snapshotClear.setStatus('current')
if mibBuilder.loadTexts: snapshotClear.setDescription('Snapshot module error cleared.')
applianceUnlicensedClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11506))
if mibBuilder.loadTexts: applianceUnlicensedClear.setStatus('current')
if mibBuilder.loadTexts: applianceUnlicensedClear.setDescription('Appliance license active.')
modelUnlicensedClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11507))
if mibBuilder.loadTexts: modelUnlicensedClear.setStatus('current')
if mibBuilder.loadTexts: modelUnlicensedClear.setDescription('Model license active.')
blkdiskClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11508))
if mibBuilder.loadTexts: blkdiskClear.setStatus('current')
if mibBuilder.loadTexts: blkdiskClear.setDescription('Block-disk module error cleared.')
backupIntegrationClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11509))
if mibBuilder.loadTexts: backupIntegrationClear.setStatus('current')
if mibBuilder.loadTexts: backupIntegrationClear.setDescription('Backup-Integration module error cleared.')
otherHardwareClear = NotificationType((1, 3, 6, 1, 4, 1, 17163, 1, 100, 4, 0, 11510))
if mibBuilder.loadTexts: otherHardwareClear.setStatus('current')
if mibBuilder.loadTexts: otherHardwareClear.setDescription('Hardware error cleared.')
cpuLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1))
cpuLoad1 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad1.setStatus('current')
if mibBuilder.loadTexts: cpuLoad1.setDescription('One-minute CPU load in hundreths')
cpuLoad5 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad5.setStatus('current')
if mibBuilder.loadTexts: cpuLoad5.setDescription('One-minute CPU load in hundreths')
cpuLoad15 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuLoad15.setStatus('current')
if mibBuilder.loadTexts: cpuLoad15.setDescription('Fifteen-minute CPU load in hundreths')
cpuUtil1 = MibScalar((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtil1.setStatus('current')
if mibBuilder.loadTexts: cpuUtil1.setDescription('Percentage CPU utilization, aggregated across all CPUs, rolling average over the past minute')
cpuIndivUtilTable = MibTable((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5), )
if mibBuilder.loadTexts: cpuIndivUtilTable.setStatus('current')
if mibBuilder.loadTexts: cpuIndivUtilTable.setDescription('Details about the individual CPU utilization')
cpuIndivUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1), ).setIndexNames((0, "GC-MIB", "cpuIndivIndex"))
if mibBuilder.loadTexts: cpuIndivUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cpuIndivUtilEntry.setDescription('Entry for one cpu')
cpuIndivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpuIndivIndex.setStatus('current')
if mibBuilder.loadTexts: cpuIndivIndex.setDescription('A synthetic number numbering the cpus')
cpuIndivId = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivId.setStatus('current')
if mibBuilder.loadTexts: cpuIndivId.setDescription('Name of the cpu, also serves as the Index for the table')
cpuIndivIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivIdleTime.setStatus('current')
if mibBuilder.loadTexts: cpuIndivIdleTime.setDescription('Idle time for this CPU')
cpuIndivSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivSystemTime.setStatus('current')
if mibBuilder.loadTexts: cpuIndivSystemTime.setDescription('System time for this CPU')
cpuIndivUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17163, 1, 100, 5, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndivUserTime.setStatus('current')
if mibBuilder.loadTexts: cpuIndivUserTime.setDescription('User time for this CPU')
mibBuilder.exportSymbols("GC-MIB", blkdiskError=blkdiskError, procTable=procTable, cpuUtilClear=cpuUtilClear, lunClear=lunClear, systemHealth=systemHealth, otherHardwareClear=otherHardwareClear, powerSupplyErrorClear=powerSupplyErrorClear, temperatureNormal=temperatureNormal, cpuIndivUtilEntry=cpuIndivUtilEntry, memoryError=memoryError, cpuLoad1=cpuLoad1, serialNumber=serialNumber, highAvailabilityClear=highAvailabilityClear, backupIntegrationClear=backupIntegrationClear, linkErrorClear=linkErrorClear, cpuLoad15=cpuLoad15, statistics=statistics, confModeExit=confModeExit, procName=procName, cpuLoad5=cpuLoad5, iscsiClear=iscsiClear, procIndex=procIndex, status=status, otherHardwareError=otherHardwareError, cpuUtil1=cpuUtil1, temperatureWarning=temperatureWarning, systemTemperature=systemTemperature, systemVersion=systemVersion, activeConfig=activeConfig, modelUnlicensedClear=modelUnlicensedClear, procExit=procExit, system=system, systemClock=systemClock, snapshotError=snapshotError, alarmsPrefix=alarmsPrefix, linkError=linkError, procCrash=procCrash, powerSupplyError=powerSupplyError, lunError=lunError, procRestart=procRestart, scheduledJobError=scheduledJobError, highAvailabilityError=highAvailabilityError, modelUnlicensedError=modelUnlicensedError, temperatureCritical=temperatureCritical, configChange=configChange, procNumFailures=procNumFailures, pagingActivityClear=pagingActivityClear, edgeError=edgeError, iscsiError=iscsiError, procEntry=procEntry, testTrap=testTrap, applianceUnlicensedError=applianceUnlicensedError, blkdiskClear=blkdiskClear, applianceUnlicensedClear=applianceUnlicensedClear, PYSNMP_MODULE_ID=gc, cpuIndivSystemTime=cpuIndivSystemTime, cpuIndivUtilTable=cpuIndivUtilTable, temperatureNonCritical=temperatureNonCritical, model=model, procStatus=procStatus, pagingActivity=pagingActivity, cpuIndivId=cpuIndivId, localFSFull=localFSFull, localFSFullClear=localFSFullClear, ipmiClear=ipmiClear, secureVaultUnlocked=secureVaultUnlocked, snapshotClear=snapshotClear, fanError=fanError, gc=gc, confModeEnter=confModeEnter, secureVaultLocked=secureVaultLocked, edgeClear=edgeClear, ipmi=ipmi, config=config, cpuIndivIdleTime=cpuIndivIdleTime, cpuIndivIndex=cpuIndivIndex, backupIntegrationError=backupIntegrationError, memoryErrorClear=memoryErrorClear, cpuIndivUserTime=cpuIndivUserTime, fanErrorClear=fanErrorClear, alarms=alarms, health=health, cpuLoad=cpuLoad, cpuUtil=cpuUtil)
