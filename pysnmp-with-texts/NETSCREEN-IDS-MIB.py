#
# PySNMP MIB module NETSCREEN-IDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-IDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
netscreenIDS, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenIDS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, IpAddress, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Counter64, Bits, TimeTicks, NotificationType, MibIdentifier, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Counter64", "Bits", "TimeTicks", "NotificationType", "MibIdentifier", "ModuleIdentity", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nsIdsProtect = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 3, 1))
nsIdsProtect.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2002-04-26 00:00', '2001-09-28 00:00', '2001-01-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nsIdsProtect.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Screen option on zone setting, add new screen option (Zhong Wang)', 'No Comment', 'Creation Date',))
if mibBuilder.loadTexts: nsIdsProtect.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: nsIdsProtect.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: nsIdsProtect.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: nsIdsProtect.setDescription('This module defines NetScreen private MIBs DI Setting.')
nsIdsProtectSetTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1), )
if mibBuilder.loadTexts: nsIdsProtectSetTable.setStatus('current')
if mibBuilder.loadTexts: nsIdsProtectSetTable.setDescription("NetScreen ScreenOS can allow DI protection on each of NetScreen device's physical interface. This table collects the DI protection configuration on each physical interface.")
nsIdsProtectSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1), ).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsProtectZoneIdx"))
if mibBuilder.loadTexts: nsIdsProtectSetEntry.setStatus('current')
if mibBuilder.loadTexts: nsIdsProtectSetEntry.setDescription('Hold the DI setting attribute.')
nsIdsProtectZoneIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsProtectZoneIdx.setStatus('current')
if mibBuilder.loadTexts: nsIdsProtectZoneIdx.setDescription('unique zone id.')
nsIdsDetectPingOfDeath = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectPingOfDeath.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectPingOfDeath.setDescription('Detect Ping of Death.')
nsIdsDetectTearDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTearDrop.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectTearDrop.setDescription('Detect Tear Drop Attack.')
nsIdsDetectWinNuke = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectWinNuke.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectWinNuke.setDescription('Detect Win Nuke Attack.')
nsIdsFilterIpSrcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsFilterIpSrcRoute.setStatus('current')
if mibBuilder.loadTexts: nsIdsFilterIpSrcRoute.setDescription('Detect Filter IP Source Route Option attack.')
nsIdsDetectPortScan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectPortScan.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectPortScan.setDescription('Detect Port Scan Death attack.')
nsIdsDetectAddrSweep = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectAddrSweep.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectAddrSweep.setDescription('Detect Address Sweep Attack.')
nsIdsDetectLand = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectLand.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectLand.setDescription('Detect Land Attack.')
nsIdsBlockComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsBlockComponent.setStatus('current')
if mibBuilder.loadTexts: nsIdsBlockComponent.setDescription('Block Java/ActiveX/ZIP/EXE Component.')
nsIdsDetectIpSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpSpoof.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpSpoof.setDescription('Detect IP Spoofing attack.')
nsIdsDetectSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSyn.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectSyn.setDescription('Detect SYN attack.')
nsIdsDetectIcmpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpFlood.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIcmpFlood.setDescription('Detect ICMP Flood attack.')
nsIdsDetectUdpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectUdpFlood.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectUdpFlood.setDescription('Detect UDP Flood attack.')
nsIdsDetectSynFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSynFrag.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectSynFrag.setDescription('Detect SYN fragment')
nsIdsDetectTcpNoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpNoFlag.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectTcpNoFlag.setDescription('Detect TCP without flag set.')
nsIdsDetectIpUnknownProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpUnknownProt.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpUnknownProt.setDescription('Detect Unknown protocol IP packet.')
nsIdsDetectIpOptBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptBad.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpOptBad.setDescription('Detect IP bad option.')
nsIdsDetectIpOptRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptRecord.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpOptRecord.setDescription('Detect IP record option.')
nsIdsDetectIpOptTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptTimestamp.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpOptTimestamp.setDescription('Detect IP timestamp option.')
nsIdsDetectIpOptSCHT = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptSCHT.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpOptSCHT.setDescription('Detect IP security option.')
nsIdsDetectIpOptLSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptLSR.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpOptLSR.setDescription('Detect Loose source route.')
nsIdsDetectIpOptSSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptSSR.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpOptSSR.setDescription('Detect strict source route.')
nsIdsDetectIpOptStream = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptStream.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpOptStream.setDescription('Detect IP stream option.')
nsIdsDetectIcmpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpFrag.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIcmpFrag.setDescription('Detect ICMP fragment.')
nsIdsDetectIcmpLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpLarge.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIcmpLarge.setDescription('Detect large ICMP packet.')
nsIdsDetectTcpSynFin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpSynFin.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectTcpSynFin.setDescription('Detect TCP syn fin both set.')
nsIdsDetectTcpFinNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpFinNoAck.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectTcpFinNoAck.setDescription('Detect TCP fin set without ack bit set.')
nsIdsHttpMalUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsHttpMalUrl.setStatus('current')
if mibBuilder.loadTexts: nsIdsHttpMalUrl.setDescription('Detect malicious URL.')
nsIdsSessMalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSessMalNum.setStatus('current')
if mibBuilder.loadTexts: nsIdsSessMalNum.setDescription('Detect malicious session connection.')
nsIdsDetectSynAckAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSynAckAck.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectSynAckAck.setDescription('Detect SYN ACK ACK DoS.')
nsIdsDetectIpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpFrag.setStatus('current')
if mibBuilder.loadTexts: nsIdsDetectIpFrag.setDescription('Block IP fragment packet.')
nsIdsProtectThreshTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2), )
if mibBuilder.loadTexts: nsIdsProtectThreshTable.setStatus('current')
if mibBuilder.loadTexts: nsIdsProtectThreshTable.setDescription("NetScreen ScreenOS can allow DI protection on each of NetScreen device's physical interface. This table collects the DI protection configuration on each physical interface.")
nsIdsProtectThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1), ).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsProtectThreshZoneIdx"))
if mibBuilder.loadTexts: nsIdsProtectThreshEntry.setStatus('current')
if mibBuilder.loadTexts: nsIdsProtectThreshEntry.setDescription('Hold the DI setting attribute.')
nsIdsProtectThreshZoneIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsProtectThreshZoneIdx.setStatus('current')
if mibBuilder.loadTexts: nsIdsProtectThreshZoneIdx.setDescription('unique zone id.')
nsIdsSynAttackThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackThresh.setStatus('current')
if mibBuilder.loadTexts: nsIdsSynAttackThresh.setDescription('SYN attack threshold.')
nsIdsSynAttackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackTimeout.setStatus('current')
if mibBuilder.loadTexts: nsIdsSynAttackTimeout.setDescription('SYN attack timeout.')
nsIdsSynAttackAlmTh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackAlmTh.setStatus('current')
if mibBuilder.loadTexts: nsIdsSynAttackAlmTh.setDescription('SYN attack alarm threshold.')
nsIdsSynAttackQueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackQueSize.setStatus('current')
if mibBuilder.loadTexts: nsIdsSynAttackQueSize.setDescription('SYN attack queue size.')
nsIdsSynAttackAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackAgeTime.setStatus('current')
if mibBuilder.loadTexts: nsIdsSynAttackAgeTime.setDescription('SYN flood age time.')
nsIdsIcmpFloodThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsIcmpFloodThresh.setStatus('current')
if mibBuilder.loadTexts: nsIdsIcmpFloodThresh.setDescription('ICMP attack alarm threshold.')
nsIdsUdpFloodThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsUdpFloodThresh.setStatus('current')
if mibBuilder.loadTexts: nsIdsUdpFloodThresh.setDescription('UDP attack alarm threshold.')
nsIdsPortScanThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsPortScanThresh.setStatus('current')
if mibBuilder.loadTexts: nsIdsPortScanThresh.setDescription('ICMP attack alarm threshold.')
nsIdsIpSweepThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsIpSweepThresh.setStatus('current')
if mibBuilder.loadTexts: nsIdsIpSweepThresh.setDescription('UDP attack alarm threshold.')
nsIdsSynAckAckThres = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAckAckThres.setStatus('current')
if mibBuilder.loadTexts: nsIdsSynAckAckThres.setDescription('SYN ack ack alarm threshold.')
nsIdsAttkMonTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 2), )
if mibBuilder.loadTexts: nsIdsAttkMonTable.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonTable.setDescription('The table monitors the intrusion attack attemps amount to NetScreen Device.')
nsIdsAttkMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1), ).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsAttkMonIfIdx"))
if mibBuilder.loadTexts: nsIdsAttkMonEntry.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonEntry.setDescription('An entry containing intrusion attack couters.')
nsIdsAttkMonIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIfIdx.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonIfIdx.setDescription('unique interface id.')
nsIdsAttkMonVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonVsys.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonVsys.setDescription("according NetScreen's concepts. each interface belongs to one virtual system. This attribute displays the virtual system name an interface belongs to.")
nsIdsAttkMonSynAttk = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonSynAttk.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonSynAttk.setDescription('sync attack packet counter.')
nsIdsAttkMonTearDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonTearDrop.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonTearDrop.setDescription('tear drop attack packet counter.')
nsIdsAttkMonSrcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonSrcRoute.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonSrcRoute.setDescription('source route option attack packet counter.')
nsIdsAttkMonPingDeath = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonPingDeath.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonPingDeath.setDescription('ping of death attack packet counter.')
nsIdsAttkMonAddrSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonAddrSpoof.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonAddrSpoof.setDescription('address spoofing attack packet counter.')
nsIdsAttkMonLand = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonLand.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonLand.setDescription('land attack packet counter.')
nsIdsAttkMonIcmpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIcmpFlood.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonIcmpFlood.setDescription('ICMP flood attack packet counter.')
nsIdsAttkMonUdpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonUdpFlood.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonUdpFlood.setDescription('udp flood attack packet counter.')
nsIdsAttkMonWinnuke = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonWinnuke.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonWinnuke.setDescription('weired netbios attack packet counter.')
nsIdsAttkMonPortScan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonPortScan.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonPortScan.setDescription('port scan attempt attack packet counter.')
nsIdsAttkMonIpSweep = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIpSweep.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonIpSweep.setDescription('address sweep attemp attack packet counter.')
nsAttkMonSynFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSynFrag.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonSynFrag.setDescription('Detect SYN fragment')
nsAttkMonTcpNoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpNoFlag.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonTcpNoFlag.setDescription('Detect TCP without flag set.')
nsAttkMonIpUnknownProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpUnknownProt.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpUnknownProt.setDescription('Detect Unknown protocol IP packet.')
nsAttkMonIpOptBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptBad.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpOptBad.setDescription('Detect IP bad option.')
nsAttkMonIpOptRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptRecord.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpOptRecord.setDescription('Detect IP record option.')
nsAttkMonIpOptTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptTimestamp.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpOptTimestamp.setDescription('Detect IP timestamp option.')
nsAttkMonIpOptSCHT = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptSCHT.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpOptSCHT.setDescription('Detect IP security option.')
nsAttkMonIpOptLSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptLSR.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpOptLSR.setDescription('Detect Loose source route.')
nsAttkMonIpOptSSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptSSR.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpOptSSR.setDescription('Detect strict source route.')
nsAttkMonIpOptStream = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptStream.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpOptStream.setDescription('Detect IP stream option.')
nsAttkMonIcmpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIcmpFrag.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIcmpFrag.setDescription('Detect ICMP fragment.')
nsAttkMonIcmpLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIcmpLarge.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIcmpLarge.setDescription('Detect large ICMP packet.')
nsAttkMonTcpSynFin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpSynFin.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonTcpSynFin.setDescription('Detect TCP syn fin both set.')
nsAttkMonTcpFinNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpFinNoAck.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonTcpFinNoAck.setDescription('Detect TCP fin set without ack bit set.')
nsAttkMonHttpMalUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonHttpMalUrl.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonHttpMalUrl.setDescription('Detect malicious URL.')
nsAttkMonSessMalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSessMalNum.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonSessMalNum.setDescription('Detect malicious session connection.')
nsAttkMonSynAckAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSynAckAck.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonSynAckAck.setDescription('Detect SYN ACK ACK attack.')
nsAttkMonIpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpFrag.setStatus('current')
if mibBuilder.loadTexts: nsAttkMonIpFrag.setDescription('Block IP fragment packet.')
nsIdsAttkMonIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIfInfo.setStatus('current')
if mibBuilder.loadTexts: nsIdsAttkMonIfInfo.setDescription('Internal id assigned to this interface. Stays persistent across resets.')
mibBuilder.exportSymbols("NETSCREEN-IDS-MIB", nsIdsDetectAddrSweep=nsIdsDetectAddrSweep, nsIdsSynAttackAlmTh=nsIdsSynAttackAlmTh, nsAttkMonTcpNoFlag=nsAttkMonTcpNoFlag, nsIdsSynAttackThresh=nsIdsSynAttackThresh, nsIdsAttkMonEntry=nsIdsAttkMonEntry, nsIdsDetectIpOptBad=nsIdsDetectIpOptBad, nsAttkMonIcmpFrag=nsAttkMonIcmpFrag, nsIdsDetectTcpSynFin=nsIdsDetectTcpSynFin, nsAttkMonTcpFinNoAck=nsAttkMonTcpFinNoAck, nsIdsAttkMonIfInfo=nsIdsAttkMonIfInfo, nsAttkMonIpOptRecord=nsAttkMonIpOptRecord, nsIdsPortScanThresh=nsIdsPortScanThresh, nsIdsDetectSynAckAck=nsIdsDetectSynAckAck, nsIdsAttkMonWinnuke=nsIdsAttkMonWinnuke, nsAttkMonSynFrag=nsAttkMonSynFrag, nsIdsAttkMonAddrSpoof=nsIdsAttkMonAddrSpoof, nsIdsProtectThreshZoneIdx=nsIdsProtectThreshZoneIdx, nsIdsDetectIpOptLSR=nsIdsDetectIpOptLSR, nsAttkMonSessMalNum=nsAttkMonSessMalNum, nsIdsDetectIpSpoof=nsIdsDetectIpSpoof, PYSNMP_MODULE_ID=nsIdsProtect, nsIdsSynAckAckThres=nsIdsSynAckAckThres, nsAttkMonIpOptStream=nsAttkMonIpOptStream, nsIdsProtectThreshEntry=nsIdsProtectThreshEntry, nsAttkMonIpOptTimestamp=nsAttkMonIpOptTimestamp, nsIdsDetectIpFrag=nsIdsDetectIpFrag, nsIdsIcmpFloodThresh=nsIdsIcmpFloodThresh, nsAttkMonIpOptLSR=nsAttkMonIpOptLSR, nsIdsAttkMonSynAttk=nsIdsAttkMonSynAttk, nsIdsAttkMonTable=nsIdsAttkMonTable, nsAttkMonIpOptBad=nsAttkMonIpOptBad, nsAttkMonIpOptSSR=nsAttkMonIpOptSSR, nsIdsProtect=nsIdsProtect, nsIdsDetectIpOptTimestamp=nsIdsDetectIpOptTimestamp, nsIdsSynAttackQueSize=nsIdsSynAttackQueSize, nsIdsProtectZoneIdx=nsIdsProtectZoneIdx, nsIdsDetectIpOptSCHT=nsIdsDetectIpOptSCHT, nsIdsSynAttackTimeout=nsIdsSynAttackTimeout, nsAttkMonIpFrag=nsAttkMonIpFrag, nsIdsDetectIcmpFlood=nsIdsDetectIcmpFlood, nsIdsHttpMalUrl=nsIdsHttpMalUrl, nsIdsProtectSetEntry=nsIdsProtectSetEntry, nsAttkMonHttpMalUrl=nsAttkMonHttpMalUrl, nsIdsDetectIcmpLarge=nsIdsDetectIcmpLarge, nsIdsDetectSyn=nsIdsDetectSyn, nsIdsDetectTearDrop=nsIdsDetectTearDrop, nsIdsDetectIpUnknownProt=nsIdsDetectIpUnknownProt, nsIdsAttkMonIfIdx=nsIdsAttkMonIfIdx, nsAttkMonIcmpLarge=nsAttkMonIcmpLarge, nsIdsAttkMonPortScan=nsIdsAttkMonPortScan, nsIdsSynAttackAgeTime=nsIdsSynAttackAgeTime, nsIdsAttkMonSrcRoute=nsIdsAttkMonSrcRoute, nsIdsAttkMonPingDeath=nsIdsAttkMonPingDeath, nsIdsAttkMonIpSweep=nsIdsAttkMonIpSweep, nsIdsDetectIpOptStream=nsIdsDetectIpOptStream, nsIdsAttkMonIcmpFlood=nsIdsAttkMonIcmpFlood, nsIdsBlockComponent=nsIdsBlockComponent, nsIdsDetectIpOptSSR=nsIdsDetectIpOptSSR, nsIdsAttkMonTearDrop=nsIdsAttkMonTearDrop, nsAttkMonIpUnknownProt=nsAttkMonIpUnknownProt, nsIdsAttkMonUdpFlood=nsIdsAttkMonUdpFlood, nsIdsFilterIpSrcRoute=nsIdsFilterIpSrcRoute, nsIdsIpSweepThresh=nsIdsIpSweepThresh, nsIdsDetectLand=nsIdsDetectLand, nsIdsUdpFloodThresh=nsIdsUdpFloodThresh, nsIdsDetectPingOfDeath=nsIdsDetectPingOfDeath, nsIdsSessMalNum=nsIdsSessMalNum, nsAttkMonIpOptSCHT=nsAttkMonIpOptSCHT, nsIdsAttkMonVsys=nsIdsAttkMonVsys, nsIdsProtectThreshTable=nsIdsProtectThreshTable, nsAttkMonSynAckAck=nsAttkMonSynAckAck, nsIdsDetectTcpNoFlag=nsIdsDetectTcpNoFlag, nsIdsDetectTcpFinNoAck=nsIdsDetectTcpFinNoAck, nsIdsDetectSynFrag=nsIdsDetectSynFrag, nsIdsDetectIpOptRecord=nsIdsDetectIpOptRecord, nsIdsDetectUdpFlood=nsIdsDetectUdpFlood, nsIdsProtectSetTable=nsIdsProtectSetTable, nsIdsDetectPortScan=nsIdsDetectPortScan, nsIdsAttkMonLand=nsIdsAttkMonLand, nsIdsDetectWinNuke=nsIdsDetectWinNuke, nsIdsDetectIcmpFrag=nsIdsDetectIcmpFrag, nsAttkMonTcpSynFin=nsAttkMonTcpSynFin)
