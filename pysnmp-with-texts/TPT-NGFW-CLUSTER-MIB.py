#
# PySNMP MIB module TPT-NGFW-CLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPT-NGFW-CLUSTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter32, IpAddress, MibIdentifier, NotificationType, Gauge32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Unsigned32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "IpAddress", "MibIdentifier", "NotificationType", "Gauge32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Unsigned32", "Bits", "ObjectIdentity")
DateAndTime, DisplayString, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue", "TextualConvention", "MacAddress")
tpt_ngfw_eventsV2, Severity, tptNgfwNotifySeverity, tpt_ngfw_params, tpt_ngfw_groups, tpt_ngfw_compls, tpt_ngfw_objs = mibBuilder.importSymbols("TPT-NGFW-REG-MIB", "tpt-ngfw-eventsV2", "Severity", "tptNgfwNotifySeverity", "tpt-ngfw-params", "tpt-ngfw-groups", "tpt-ngfw-compls", "tpt-ngfw-objs")
tptNgfwSystemSerial, = mibBuilder.importSymbols("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial")
DuplexSetting, LineSpeed, AutoNegotiation = mibBuilder.importSymbols("TPT-PORT-CONFIG-MIB", "DuplexSetting", "LineSpeed", "AutoNegotiation")
tptNgfwCluster = ModuleIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2))
tptNgfwCluster.setRevisions(('2016-05-25 18:54', '2015-03-19 09:30', '2013-01-17 10:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tptNgfwCluster.setRevisionsDescriptions(('Updated copyright information. Minor MIB syntax fixes.', 'Added new HA member states.', 'Initial version of NGFW Cluster MIB.',))
if mibBuilder.loadTexts: tptNgfwCluster.setLastUpdated('201605251854Z')
if mibBuilder.loadTexts: tptNgfwCluster.setOrganization('Trend Micro, Inc.')
if mibBuilder.loadTexts: tptNgfwCluster.setContactInfo('www.trendmicro.com')
if mibBuilder.loadTexts: tptNgfwCluster.setDescription("This MIB defines TippingPoint Next-Generation Firewall Cluster and HA management information. Cluster information includes details on configuration, cluster membership, device's role (active/passive) in a cluster as well as overall health and status for monitoring purposes. High-availability information provides details on the device's membership in Fail-over Groups and the status of feature state synchronization across nodes in the group and cluster. Copyright (C) 2016 Trend Micro Incorporated. All Rights Reserved. Trend Micro makes no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. Trend Micro shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material. This document contains proprietary information, which is protected by copyright. No part of this document may be photocopied, reproduced, or translated into another language without the prior written consent of Trend Micro. The information is provided 'as is' without warranty of any kind and is subject to change without notice. The only warranties for Trend Micro products and services are set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed as constituting an additional warranty. Trend Micro shall not be liable for technical or editorial errors or omissions contained herein. TippingPoint(R), the TippingPoint logo, and Digital Vaccine(R) are registered trademarks of Trend Micro. All other company and product names may be trademarks of their respective holders. All rights reserved. This document contains confidential information, trade secrets or both, which are the property of Trend Micro. No part of this documentation may be reproduced in any form or by any means or used to make any derivative work (such as translation, transformation, or adaptation) without written permission from Trend Micro or one of its subsidiaries. All other company and product names may be trademarks of their respective holders. ")
class FailoverGrpMode(TextualConvention, Integer32):
    description = 'The operational mode of a fail-over group. There are two modes: Active/Active and Active/Passive. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("activePassive", 1), ("activeActive", 2))

class LinkState(TextualConvention, Integer32):
    description = 'The link state of a port. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class CfgControl(TextualConvention, Integer32):
    description = 'Indicates if the device in under local or remote configuration control. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 1), ("none", 2), ("local", 3), ("remote", 4))

class SyncState(TextualConvention, Integer32):
    description = 'Reports the overall feature state synchronization for a cluster. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("inSync", 1), ("outOfSync", 2), ("notInit", 3), ("error", 4), ("pending", 5))

class HaState(TextualConvention, Integer32):
    description = 'The high-availability state of a cluster member. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("active", 1), ("passive", 2), ("failed", 3), ("standby", 4), ("disabled", 5), ("unknown", 6), ("activeNoPartner", 7), ("starting", 8), ("stopping", 9))

class HealthState(TextualConvention, Integer32):
    description = 'The overall health of a hardware or software component on the device. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("normal", 1), ("warning", 2), ("critical", 3))

class ClusterMemberRejectReason(TextualConvention, Integer32):
    description = 'The reason for rejecting the membership of a device into a cluster. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("duplicateNodeId", 1))

class FailoverGroupState(TextualConvention, Integer32):
    description = 'The state of a HA fail-over group. A running state indicates that the fail-over group is active and working with both an active and passive device. Degraded state indicates that the fail-over group is active without a fail-over (or passive) device. Stopped state indicates that the fail-over group in not operational. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("running", 1), ("degraded", 2), ("stopped", 3))

class ComponentType(TextualConvention, Integer32):
    description = 'The type of physical component monitored on the device. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("swSal", 1), ("cpu", 2), ("memory", 3), ("swDisk", 4), ("swLink", 5), ("hwFan", 6), ("hwTmp", 7), ("hwVol", 8), ("hwVid", 9), ("hwAny", 10), ("hwPsu", 11), ("unknown", 12))

class ThresholdLimitType(TextualConvention, Integer32):
    description = 'Define if a threshold is an upper or a lower bound. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("upper", 1), ("lower", 2))

class ThresholdRelation(TextualConvention, Integer32):
    description = 'Indicates if a value is above or below a threshold value. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("above", 1), ("below", 2))

class ConsistencyCheckType(TextualConvention, Integer32):
    description = 'The type of consistency check. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("configuration", 1), ("software", 2), ("hardware", 3))

class MasterLocation(TextualConvention, Integer32):
    description = 'Is the master configuration reference local or remote to the device in a cluster. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("local", 1), ("remote", 2))

tptNgfwClusterName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterName.setDescription("The cluster's unique name. ")
tptNgfwClusterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterEnabled.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterEnabled.setDescription('Indicates if cluster feature support is enabled. ')
tptNgfwClusterMemberId = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberId.setDescription("This is the cluster member's unique device ID. ")
tptNgfwClusterMemberName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberName.setDescription("The cluster member's name.")
tptNgfwClusterStandby = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterStandby.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterStandby.setDescription('Is the device in a standby state and not active in the cluster.')
tptNgfwClusterSwConstChecks = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterSwConstChecks.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterSwConstChecks.setDescription('Are software consistency checks enabled. ')
tptNgfwClusterHwConstChecks = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHwConstChecks.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHwConstChecks.setDescription('Are hardware consistency checks enabled. ')
tptNgfwClusterCfgConstChecks = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterCfgConstChecks.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCfgConstChecks.setDescription('Are configuration consistency checks enabled. ')
tptNgfwClusterMemberStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9), )
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusTable.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusTable.setDescription("A table providing summary information about each cluster member's configuration, status, and health. ")
tptNgfwClusterMemberStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1), ).setIndexNames((0, "TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusId"))
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusTableEntry.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusTableEntry.setDescription('A table entry containing information for each cluster member. ')
tptNgfwClusterMemberStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusId.setDescription('The unique cluster member ID. ')
tptNgfwClusterMemberStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusName.setDescription("The cluster member's name. ")
tptNgfwClusterMemberStatusSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusSerialNo.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusSerialNo.setDescription("The cluster member's serial number. ")
tptNgfwClusterMemberStatusHwModel = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusHwModel.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusHwModel.setDescription('The members hardware model number. ')
tptNgfwClusterMemberStatusSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusSwVersion.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusSwVersion.setDescription("The member's currently running software version. ")
tptNgfwClusterMemberStatusUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusUptime.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusUptime.setDescription('The time (in 100th/second) since the system was powered on. ')
tptNgfwClusterMemberStatusJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusJoinTime.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusJoinTime.setDescription('The date and time when the device joined the cluster. ')
tptNgfwClusterMemberStatusSmsManaged = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusSmsManaged.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusSmsManaged.setDescription('Indicates if the cluster member is managed by SMS. ')
tptNgfwClusterMemberStatusCfgControl = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 9), CfgControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusCfgControl.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusCfgControl.setDescription("Reports how the device's configuration is managed. ")
tptNgfwClusterMemberStatusCfgStateSync = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 10), SyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusCfgStateSync.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusCfgStateSync.setDescription('The system wide configuration synchronization state. ')
tptNgfwClusterMemberStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusEnabled.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusEnabled.setDescription('Is clustering enabled on the member device. ')
tptNgfwClusterMemberStatusHaState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 12), HaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusHaState.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusHaState.setDescription('The state of high-availability features. ')
tptNgfwClusterMemberStatusHealthState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 13), HealthState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusHealthState.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusHealthState.setDescription('The overall health of a member in the cluster. ')
tptNgfwClusterMemberStatusHealthScore = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusHealthScore.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusHealthScore.setDescription('The numeric health score indicating the members health. ')
tptNgfwClusterMemberStatusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 9, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusMaster.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberStatusMaster.setDescription("Is the member the master node for the cluster's fail-over group. ")
tptNgfwClusterTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10))
tptNgfwClusterHa = MibIdentifier((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11))
tptNgfwClusterTctIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctIpAddrType.setDescription('The type of IP address used for cluster traffic. ')
tptNgfwClusterTctIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctIpAddr.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctIpAddr.setDescription('The IPv4 address used for cluster traffic. ')
tptNgfwClusterTctMulticastAddrType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctMulticastAddrType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctMulticastAddrType.setDescription('The HA port multicast address type. ')
tptNgfwClusterTctMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctMulticastAddr.setDescription('The IPv4 multicast address used for cluster traffic. ')
tptNgfwClusterTctPort = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctPort.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctPort.setDescription('The port used for cluster traffic. ')
tptNgfwClusterTctTtl = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctTtl.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctTtl.setDescription('The time-to-live (TTL) setting for cluster traffic. ')
tptNgfwClusterTctMtu = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(576, 9216))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctMtu.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctMtu.setDescription('IP MTU value for cluster traffic. ')
tptNgfwClusterTctTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctTimeout.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctTimeout.setDescription('Timeout in seconds for cluster traffic.')
tptNgfwClusterTctRetries = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctRetries.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctRetries.setDescription('The number retry attempts made for cluster traffic.')
tptNgfwClusterTctPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 10), LineSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctPortSpeed.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctPortSpeed.setDescription('The HA port line speed. ')
tptNgfwClusterTctPortDuplex = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 11), DuplexSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctPortDuplex.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctPortDuplex.setDescription('The current duplex state of the HA port. ')
tptNgfwClusterTctPortAutoNeg = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 12), AutoNegotiation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctPortAutoNeg.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctPortAutoNeg.setDescription('Is flow control on, off,or auto-negotiated for the HA port. ')
tptNgfwClusterTctLinkState = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 13), LinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctLinkState.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctLinkState.setDescription('Is the HA link up, or down. ')
tptNgfwClusterTctEncryptionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 10, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterTctEncryptionEnabled.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTctEncryptionEnabled.setDescription('Is cluster traffic encrypted. ')
tptNgfwClusterHaEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaEnabled.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaEnabled.setDescription('Is the High-availability feature turned on. ')
tptNgfwClusterHaGlobalStateSyncEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaGlobalStateSyncEnabled.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaGlobalStateSyncEnabled.setDescription('Is feature state synchronization globally enabled. This overrides the configuration for each individual feature. ')
tptNgfwClusterHaMode = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 3), HaState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaMode.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaMode.setDescription('what mode is the HA feature running in. ')
tptNgfwClusterHaFeatSyncTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 4), )
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncTable.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncTable.setDescription('A table containing configuration information for each feature that support state synchronization. ')
tptNgfwClusterHaFeatSyncTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 4, 1), ).setIndexNames((0, "TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncFeature"))
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncTableEntry.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncTableEntry.setDescription('A entry for each feature that supports state synchronization. ')
tptNgfwClusterHaFeatSyncFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncFeature.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncFeature.setDescription('The HA feature name. ')
tptNgfwClusterHaFeatSyncEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncEnabled.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncEnabled.setDescription('Is the HA feature have state synchronization turned on. ')
tptNgfwClusterHaFeatSyncLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 4, 1, 3), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncLogSeverity.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncLogSeverity.setDescription('What is the logging level for the feature state synchronization. ')
tptNgfwClusterHaFgTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 5), )
if mibBuilder.loadTexts: tptNgfwClusterHaFgTable.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgTable.setDescription('A table of fail-over groups within a cluster configuration. ')
tptNgfwClusterHaFgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 5, 1), ).setIndexNames((0, "TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgIndex"))
if mibBuilder.loadTexts: tptNgfwClusterHaFgEntry.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgEntry.setDescription('An entry for a fail-over group in a cluster. ')
tptNgfwClusterHaFgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tptNgfwClusterHaFgIndex.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgIndex.setDescription('The fail-over group index. ')
tptNgfwClusterHaFgId = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFgId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgId.setDescription('The fail-over group ID. ')
tptNgfwClusterHaFgName = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFgName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgName.setDescription('The fail-over group name. ')
tptNgfwClusterHaFgBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFgBaseMac.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgBaseMac.setDescription('The base MAC address for the fail-ver group. ')
tptNgfwClusterHaFgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 5, 1, 5), FailoverGrpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFgMode.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgMode.setDescription('The operational mode of the fail-over group. ')
tptNgfwClusterHaFgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 6), )
if mibBuilder.loadTexts: tptNgfwClusterHaFgMemberTable.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgMemberTable.setDescription('A table of fail-over group memberships for this device. ')
tptNgfwClusterHaFgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 6, 1), ).setIndexNames((0, "TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgId"))
if mibBuilder.loadTexts: tptNgfwClusterHaFgMemberEntry.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgMemberEntry.setDescription('A entry with a relationship to a fail-over group. ')
tptNgfwClusterHaFgMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFgMemberId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgMemberId.setDescription('The fail-over group ID this device is a member of. ')
tptNgfwClusterHaFgMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFgMemberName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgMemberName.setDescription('The fail-over group name this device is a member of. ')
tptNgfwClusterHaFeatSyncStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7), )
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusTable.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusTable.setDescription('A table of HA feature state synchronization configuration and state. ')
tptNgfwClusterHaFeatSyncStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7, 1), ).setIndexNames((0, "TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncStatusFeature"))
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusTableEntry.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusTableEntry.setDescription('A entry for a HA feature that has state synchronized within a fail-over group. ')
tptNgfwClusterHaFeatSyncStatusFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusFeature.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusFeature.setDescription('The name of the feature which support state synchronization. ')
tptNgfwClusterHaFeatSyncStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusEnabled.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusEnabled.setDescription('Is feature state synchronization enabled. ')
tptNgfwClusterHaFeatSyncStatusSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7, 1, 3), SyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusSyncState.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusSyncState.setDescription('The current condition of feature state synchronization. ')
tptNgfwClusterHaFeatSyncStatusSyncStateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusSyncStateReason.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusSyncStateReason.setDescription('A text description of they current feature state synchronization. ')
tptNgfwClusterHaFeatSyncStatusTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusTotalEntries.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusTotalEntries.setDescription('The total number of entries for the feature. ')
tptNgfwClusterHaFeatSyncStatusAddEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusAddEntries.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusAddEntries.setDescription('The number of added entries for the feature. ')
tptNgfwClusterHaFeatSyncStatusDelEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 9, 2, 2, 11, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusDelEntries.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFeatSyncStatusDelEntries.setDescription('The number of deleted entries for the feature. ')
tptNgfwClusterMemberJoinNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 1)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctIpAddrType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctIpAddr"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterMemberJoinNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberJoinNotify.setDescription('A notification indicating that a device has joined a cluster. ')
tptNgfwClusterMemberLeaveNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 2)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctIpAddrType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctIpAddr"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterMemberLeaveNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberLeaveNotify.setDescription('A notification indicating that a device has left a cluster. ')
tptNgfwClusterMemberRejectNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 3)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctIpAddrType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctIpAddr"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberRejectNotifyReason"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterMemberRejectNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberRejectNotify.setDescription("A notification indicating that a device's attempt to join a cluster failed. ")
tptNgfwClusterHaStateSyncMessageLossNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 4)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaStateSyncNotifyFeature"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterHaStateSyncMessageLossNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaStateSyncMessageLossNotify.setDescription('Feature state synchronization has lost updates with peer. ')
tptNgfwClusterHaStateSyncQueueFullNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 5)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaStateSyncNotifyFeature"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterHaStateSyncQueueFullNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaStateSyncQueueFullNotify.setDescription('Feature state synchronization Buffers have been filled. ')
tptNgfwClusterHealthChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 6)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotifyState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotifyScore"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotifyStateUpperLimit"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotifyStateLowerLimit"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotify.setDescription("A notification indicating how the device's health score has changed. ")
tptNgfwClusterHaFgStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 7)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgStateChangeNotifyState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgStateChangeNotifyActiveDeviceId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgStateChangeNotifyPassiveDeviceId"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterHaFgStateChangeNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgStateChangeNotify.setDescription('A notification indicating the state of a HA fail-over group has changed to the specified state. ')
tptNgfwClusterCmpStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 8)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyValue"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyUnits"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyThreshold"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyLimitType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyRelation"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotify.setDescription(' A notification sent when a component has exceeded a monitored threshold value. ')
tptNgfwClusterConstChkFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 0, 9)).setObjects(("TPT-NGFW-SYSTEM-INFO-MIB", "tptNgfwSystemSerial"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterConstChkFailedNotifyType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterConstChkFailedNotifyMaster"), ("TPT-NGFW-REG-MIB", "tptNgfwNotifySeverity"))
if mibBuilder.loadTexts: tptNgfwClusterConstChkFailedNotify.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterConstChkFailedNotify.setDescription(' A notification sent if any cluster configuration, software, or hardware consistency check fails. ')
tptNgfwClusterMemberRejectNotifyReason = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 1), ClusterMemberRejectReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterMemberRejectNotifyReason.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterMemberRejectNotifyReason.setDescription('The reason a device was not accepted into a cluster configuration. ')
tptNgfwClusterHaStateSyncNotifyFeature = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterHaStateSyncNotifyFeature.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaStateSyncNotifyFeature.setDescription('The name of a HA feature. ')
tptNgfwClusterHealthChangeNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 3), HealthState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotifyState.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotifyState.setDescription("The device's current state based on a health score. ")
tptNgfwClusterHealthChangeNotifyScore = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotifyScore.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotifyScore.setDescription('The current health score between 0-100. The value will be between the upper and lower bounds (inclusive). ')
tptNgfwClusterHealthChangeNotifyStateUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotifyStateUpperLimit.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotifyStateUpperLimit.setDescription('The upper bound of health score range. ')
tptNgfwClusterHealthChangeNotifyStateLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotifyStateLowerLimit.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHealthChangeNotifyStateLowerLimit.setDescription('The lower bound of health score range. ')
tptNgfwClusterHaFgStateChangeNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 7), FailoverGroupState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterHaFgStateChangeNotifyState.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgStateChangeNotifyState.setDescription('The current fail-over group state. ')
tptNgfwClusterHaFgStateChangeNotifyActiveDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterHaFgStateChangeNotifyActiveDeviceId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgStateChangeNotifyActiveDeviceId.setDescription('The ID of the active device in a fail-over group. ')
tptNgfwClusterHaFgStateChangeNotifyPassiveDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterHaFgStateChangeNotifyPassiveDeviceId.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaFgStateChangeNotifyPassiveDeviceId.setDescription('The ID of the passive device in a fail-over group. ')
tptNgfwClusterCmpStateChangeNotifyType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 10), ComponentType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyType.setDescription('The type of component on the device that has exceeded a monitored threshold level. ')
tptNgfwClusterCmpStateChangeNotifyName = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyName.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyName.setDescription('The name of the component on the device that has exceeded a monitored threshold level. ')
tptNgfwClusterCmpStateChangeNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 12), HealthState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyState.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyState.setDescription('The current state of the component. ')
tptNgfwClusterCmpStateChangeNotifyValue = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyValue.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyValue.setDescription("The current component's measured value. ")
tptNgfwClusterCmpStateChangeNotifyUnits = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyUnits.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyUnits.setDescription("The component's units of measure. ")
tptNgfwClusterCmpStateChangeNotifyThreshold = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyThreshold.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyThreshold.setDescription('The threshold value the component has exceeded. ')
tptNgfwClusterCmpStateChangeNotifyLimitType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 16), ThresholdLimitType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyLimitType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyLimitType.setDescription('Is the threshold value a upper or lower limit. ')
tptNgfwClusterCmpStateChangeNotifyRelation = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 17), ThresholdRelation()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyRelation.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCmpStateChangeNotifyRelation.setDescription("Indicates if the component's current value is above or below the specified threshold value. ")
tptNgfwClusterConstChkFailedNotifyType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 18), ConsistencyCheckType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterConstChkFailedNotifyType.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterConstChkFailedNotifyType.setDescription('The type of consistency check that failed. ')
tptNgfwClusterConstChkFailedNotifyMaster = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 9, 3, 1, 19), MasterLocation()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tptNgfwClusterConstChkFailedNotifyMaster.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterConstChkFailedNotifyMaster.setDescription('The location of the master reference. ')
tptNgfwClusterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10734, 3, 9, 1, 1, 2)).setObjects(("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterEnabled"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterStandby"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterSwConstChecks"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHwConstChecks"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCfgConstChecks"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusSerialNo"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusHwModel"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusSwVersion"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusUptime"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusJoinTime"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusSmsManaged"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusCfgControl"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusCfgStateSync"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusEnabled"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusHaState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusHealthState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusHealthScore"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberStatusMaster"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberRejectNotifyReason"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotifyState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotifyScore"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotifyStateUpperLimit"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotifyStateLowerLimit"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyValue"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyUnits"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyThreshold"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyLimitType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotifyRelation"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterConstChkFailedNotifyType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterConstChkFailedNotifyMaster"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tptNgfwClusterGroup = tptNgfwClusterGroup.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterGroup.setDescription('Compliance group for general cluster information and membership table. This group is mandatory. ')
tptNgfwClusterTrafficGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10734, 3, 9, 1, 1, 3)).setObjects(("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctIpAddrType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctIpAddr"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctMulticastAddrType"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctMulticastAddr"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctPort"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctTtl"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctMtu"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctTimeout"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctRetries"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctPortSpeed"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctPortDuplex"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctPortAutoNeg"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctLinkState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTctEncryptionEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tptNgfwClusterTrafficGroup = tptNgfwClusterTrafficGroup.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterTrafficGroup.setDescription('Compliance group for TippingPoint Cluster Traffic configuration information. This group is mandatory. ')
tptNgfwClusterHaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10734, 3, 9, 1, 1, 4)).setObjects(("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaEnabled"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaGlobalStateSyncEnabled"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaMode"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncEnabled"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncLogSeverity"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgBaseMac"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgMode"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgMemberId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgMemberName"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncStatusEnabled"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncStatusSyncState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncStatusSyncStateReason"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncStatusTotalEntries"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncStatusAddEntries"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFeatSyncStatusDelEntries"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaStateSyncNotifyFeature"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgStateChangeNotifyState"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgStateChangeNotifyActiveDeviceId"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgStateChangeNotifyPassiveDeviceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tptNgfwClusterHaGroup = tptNgfwClusterHaGroup.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterHaGroup.setDescription('Compliance group for HA related configuration. This group is mandatory. ')
tptNgfwClusterNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 10734, 3, 9, 1, 1, 5)).setObjects(("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberJoinNotify"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberLeaveNotify"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterMemberRejectNotify"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaStateSyncMessageLossNotify"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaStateSyncQueueFullNotify"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHealthChangeNotify"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaFgStateChangeNotify"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterCmpStateChangeNotify"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterConstChkFailedNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tptNgfwClusterNotificationGroup = tptNgfwClusterNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterNotificationGroup.setDescription('A group of notifications related to cluster configuration, status and health. ')
tptNgfwClusterCfgCompl = ModuleCompliance((1, 3, 6, 1, 4, 1, 10734, 3, 9, 1, 2, 2)).setObjects(("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterGroup"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterTrafficGroup"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterHaGroup"), ("TPT-NGFW-CLUSTER-MIB", "tptNgfwClusterNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tptNgfwClusterCfgCompl = tptNgfwClusterCfgCompl.setStatus('current')
if mibBuilder.loadTexts: tptNgfwClusterCfgCompl.setDescription('Compliance group for NGFW cluster MIB. ')
mibBuilder.exportSymbols("TPT-NGFW-CLUSTER-MIB", tptNgfwClusterMemberLeaveNotify=tptNgfwClusterMemberLeaveNotify, tptNgfwClusterMemberStatusHealthScore=tptNgfwClusterMemberStatusHealthScore, tptNgfwClusterHaFeatSyncEnabled=tptNgfwClusterHaFeatSyncEnabled, tptNgfwClusterMemberStatusHwModel=tptNgfwClusterMemberStatusHwModel, tptNgfwClusterMemberId=tptNgfwClusterMemberId, tptNgfwCluster=tptNgfwCluster, ComponentType=ComponentType, tptNgfwClusterConstChkFailedNotify=tptNgfwClusterConstChkFailedNotify, tptNgfwClusterGroup=tptNgfwClusterGroup, tptNgfwClusterTrafficGroup=tptNgfwClusterTrafficGroup, tptNgfwClusterMemberJoinNotify=tptNgfwClusterMemberJoinNotify, LinkState=LinkState, tptNgfwClusterMemberStatusUptime=tptNgfwClusterMemberStatusUptime, tptNgfwClusterHaFgEntry=tptNgfwClusterHaFgEntry, tptNgfwClusterHaFeatSyncFeature=tptNgfwClusterHaFeatSyncFeature, tptNgfwClusterHaFeatSyncLogSeverity=tptNgfwClusterHaFeatSyncLogSeverity, tptNgfwClusterTraffic=tptNgfwClusterTraffic, tptNgfwClusterHealthChangeNotifyStateUpperLimit=tptNgfwClusterHealthChangeNotifyStateUpperLimit, FailoverGroupState=FailoverGroupState, tptNgfwClusterMemberStatusId=tptNgfwClusterMemberStatusId, tptNgfwClusterHaFeatSyncStatusSyncState=tptNgfwClusterHaFeatSyncStatusSyncState, tptNgfwClusterCmpStateChangeNotifyRelation=tptNgfwClusterCmpStateChangeNotifyRelation, tptNgfwClusterHaFeatSyncStatusTableEntry=tptNgfwClusterHaFeatSyncStatusTableEntry, tptNgfwClusterHaFgMemberName=tptNgfwClusterHaFgMemberName, tptNgfwClusterTctPort=tptNgfwClusterTctPort, tptNgfwClusterSwConstChecks=tptNgfwClusterSwConstChecks, tptNgfwClusterHaStateSyncNotifyFeature=tptNgfwClusterHaStateSyncNotifyFeature, tptNgfwClusterHaFgTable=tptNgfwClusterHaFgTable, tptNgfwClusterHaFeatSyncTableEntry=tptNgfwClusterHaFeatSyncTableEntry, tptNgfwClusterHwConstChecks=tptNgfwClusterHwConstChecks, tptNgfwClusterHaFeatSyncStatusTotalEntries=tptNgfwClusterHaFeatSyncStatusTotalEntries, tptNgfwClusterHaFeatSyncTable=tptNgfwClusterHaFeatSyncTable, tptNgfwClusterConstChkFailedNotifyMaster=tptNgfwClusterConstChkFailedNotifyMaster, tptNgfwClusterTctIpAddrType=tptNgfwClusterTctIpAddrType, tptNgfwClusterMemberStatusCfgStateSync=tptNgfwClusterMemberStatusCfgStateSync, tptNgfwClusterTctEncryptionEnabled=tptNgfwClusterTctEncryptionEnabled, ClusterMemberRejectReason=ClusterMemberRejectReason, FailoverGrpMode=FailoverGrpMode, tptNgfwClusterEnabled=tptNgfwClusterEnabled, tptNgfwClusterHaGlobalStateSyncEnabled=tptNgfwClusterHaGlobalStateSyncEnabled, tptNgfwClusterCmpStateChangeNotifyLimitType=tptNgfwClusterCmpStateChangeNotifyLimitType, tptNgfwClusterMemberStatusEnabled=tptNgfwClusterMemberStatusEnabled, tptNgfwClusterHaMode=tptNgfwClusterHaMode, tptNgfwClusterTctMtu=tptNgfwClusterTctMtu, tptNgfwClusterHaFeatSyncStatusFeature=tptNgfwClusterHaFeatSyncStatusFeature, tptNgfwClusterMemberStatusCfgControl=tptNgfwClusterMemberStatusCfgControl, PYSNMP_MODULE_ID=tptNgfwCluster, tptNgfwClusterTctPortDuplex=tptNgfwClusterTctPortDuplex, tptNgfwClusterHaFeatSyncStatusSyncStateReason=tptNgfwClusterHaFeatSyncStatusSyncStateReason, tptNgfwClusterTctIpAddr=tptNgfwClusterTctIpAddr, ThresholdLimitType=ThresholdLimitType, tptNgfwClusterTctRetries=tptNgfwClusterTctRetries, tptNgfwClusterConstChkFailedNotifyType=tptNgfwClusterConstChkFailedNotifyType, tptNgfwClusterHaFgStateChangeNotifyActiveDeviceId=tptNgfwClusterHaFgStateChangeNotifyActiveDeviceId, tptNgfwClusterCmpStateChangeNotifyValue=tptNgfwClusterCmpStateChangeNotifyValue, CfgControl=CfgControl, tptNgfwClusterHealthChangeNotify=tptNgfwClusterHealthChangeNotify, tptNgfwClusterHealthChangeNotifyScore=tptNgfwClusterHealthChangeNotifyScore, tptNgfwClusterHaStateSyncMessageLossNotify=tptNgfwClusterHaStateSyncMessageLossNotify, HaState=HaState, tptNgfwClusterName=tptNgfwClusterName, tptNgfwClusterHaFeatSyncStatusEnabled=tptNgfwClusterHaFeatSyncStatusEnabled, tptNgfwClusterCfgCompl=tptNgfwClusterCfgCompl, tptNgfwClusterMemberStatusHaState=tptNgfwClusterMemberStatusHaState, tptNgfwClusterHaFgStateChangeNotifyState=tptNgfwClusterHaFgStateChangeNotifyState, tptNgfwClusterTctLinkState=tptNgfwClusterTctLinkState, tptNgfwClusterMemberStatusSwVersion=tptNgfwClusterMemberStatusSwVersion, tptNgfwClusterHaStateSyncQueueFullNotify=tptNgfwClusterHaStateSyncQueueFullNotify, tptNgfwClusterHaFgMemberEntry=tptNgfwClusterHaFgMemberEntry, tptNgfwClusterMemberStatusSmsManaged=tptNgfwClusterMemberStatusSmsManaged, tptNgfwClusterCmpStateChangeNotify=tptNgfwClusterCmpStateChangeNotify, tptNgfwClusterHaFgMemberTable=tptNgfwClusterHaFgMemberTable, tptNgfwClusterCfgConstChecks=tptNgfwClusterCfgConstChecks, tptNgfwClusterCmpStateChangeNotifyUnits=tptNgfwClusterCmpStateChangeNotifyUnits, tptNgfwClusterMemberStatusTable=tptNgfwClusterMemberStatusTable, tptNgfwClusterMemberStatusSerialNo=tptNgfwClusterMemberStatusSerialNo, tptNgfwClusterHaFgId=tptNgfwClusterHaFgId, tptNgfwClusterTctPortAutoNeg=tptNgfwClusterTctPortAutoNeg, tptNgfwClusterHaFgMode=tptNgfwClusterHaFgMode, tptNgfwClusterMemberStatusMaster=tptNgfwClusterMemberStatusMaster, tptNgfwClusterHaFgName=tptNgfwClusterHaFgName, tptNgfwClusterTctTtl=tptNgfwClusterTctTtl, tptNgfwClusterHaFeatSyncStatusDelEntries=tptNgfwClusterHaFeatSyncStatusDelEntries, tptNgfwClusterHa=tptNgfwClusterHa, tptNgfwClusterHealthChangeNotifyStateLowerLimit=tptNgfwClusterHealthChangeNotifyStateLowerLimit, tptNgfwClusterMemberStatusName=tptNgfwClusterMemberStatusName, tptNgfwClusterMemberStatusTableEntry=tptNgfwClusterMemberStatusTableEntry, SyncState=SyncState, tptNgfwClusterHaFgMemberId=tptNgfwClusterHaFgMemberId, tptNgfwClusterHaFgIndex=tptNgfwClusterHaFgIndex, tptNgfwClusterHaFgStateChangeNotifyPassiveDeviceId=tptNgfwClusterHaFgStateChangeNotifyPassiveDeviceId, tptNgfwClusterMemberRejectNotify=tptNgfwClusterMemberRejectNotify, tptNgfwClusterMemberStatusHealthState=tptNgfwClusterMemberStatusHealthState, tptNgfwClusterMemberName=tptNgfwClusterMemberName, tptNgfwClusterStandby=tptNgfwClusterStandby, tptNgfwClusterHaFeatSyncStatusAddEntries=tptNgfwClusterHaFeatSyncStatusAddEntries, ConsistencyCheckType=ConsistencyCheckType, tptNgfwClusterNotificationGroup=tptNgfwClusterNotificationGroup, ThresholdRelation=ThresholdRelation, tptNgfwClusterHaEnabled=tptNgfwClusterHaEnabled, tptNgfwClusterHaFgStateChangeNotify=tptNgfwClusterHaFgStateChangeNotify, tptNgfwClusterTctMulticastAddr=tptNgfwClusterTctMulticastAddr, tptNgfwClusterHealthChangeNotifyState=tptNgfwClusterHealthChangeNotifyState, tptNgfwClusterTctMulticastAddrType=tptNgfwClusterTctMulticastAddrType, tptNgfwClusterHaFgBaseMac=tptNgfwClusterHaFgBaseMac, tptNgfwClusterHaFeatSyncStatusTable=tptNgfwClusterHaFeatSyncStatusTable, tptNgfwClusterCmpStateChangeNotifyType=tptNgfwClusterCmpStateChangeNotifyType, tptNgfwClusterMemberStatusJoinTime=tptNgfwClusterMemberStatusJoinTime, tptNgfwClusterTctTimeout=tptNgfwClusterTctTimeout, tptNgfwClusterCmpStateChangeNotifyThreshold=tptNgfwClusterCmpStateChangeNotifyThreshold, HealthState=HealthState, MasterLocation=MasterLocation, tptNgfwClusterCmpStateChangeNotifyState=tptNgfwClusterCmpStateChangeNotifyState, tptNgfwClusterHaGroup=tptNgfwClusterHaGroup, tptNgfwClusterTctPortSpeed=tptNgfwClusterTctPortSpeed, tptNgfwClusterMemberRejectNotifyReason=tptNgfwClusterMemberRejectNotifyReason, tptNgfwClusterCmpStateChangeNotifyName=tptNgfwClusterCmpStateChangeNotifyName)
