#
# PySNMP MIB module Wellfleet-XNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-XNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Unsigned32, NotificationType, Bits, ObjectIdentity, IpAddress, MibIdentifier, Opaque, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "NotificationType", "Bits", "ObjectIdentity", "IpAddress", "MibIdentifier", "Opaque", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "ModuleIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfXnsGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfXnsGroup")
wfXnsBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1))
wfXnsBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete XNS.')
wfXnsBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable XNS.')
wfXnsBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseState.setDescription('The current state of the entire XNS.')
wfXnsBaseCfgHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsBaseCfgHostNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseCfgHostNumber.setDescription('Host Number of Router and potential MAC address of box.')
wfXnsBaseActiveHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseActiveHostNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseActiveHostNumber.setDescription('a legal input, else takes on a self generated unique number')
wfXnsBaseImplement = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("xerox", 1), ("ungb", 2))).clone('xerox')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsBaseImplement.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseImplement.setDescription('Implementation method. UB_XNS/XNS concurrent functionality or Vanilla XNS functionality only.')
wfXnsBaseNetCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseNetCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseNetCount.setDescription('Count the total number of nets in the box.')
wfXnsBaseHostCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseHostCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseHostCount.setDescription('Count the total number of hosts in the box.')
wfXnsBaseLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16, 3, 17, 18, 19))).clone(namedValues=NamedValues(("debug", 1), ("info", 2), ("trace", 16), ("debuginfo", 3), ("debugtrace", 17), ("infotrace", 18), ("debuginfotrace", 19))).clone('trace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsBaseLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseLogFilter.setDescription('Filter out some log messages, Default filters out debugs, info, and trace messages.')
wfXnsBaseAdjEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 8), )
if mibBuilder.loadTexts: wfXnsBaseAdjEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseAdjEntryTable.setDescription('This is used by Ungermann-Bass functionality only.')
wfXnsBaseAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 8, 1), ).setIndexNames((0, "Wellfleet-XNS-MIB", "wfXnsBaseAdjacencyNetwork"), (0, "Wellfleet-XNS-MIB", "wfXnsBaseAdjacencyHostid"))
if mibBuilder.loadTexts: wfXnsBaseAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseAdjEntry.setDescription('An entry in the Adjacency Table')
wfXnsBaseAdjacencyNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseAdjacencyNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseAdjacencyNetwork.setDescription("Adjacent Router's/Host's network address for which a hello has been received.")
wfXnsBaseAdjacencyHostid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseAdjacencyHostid.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseAdjacencyHostid.setDescription("Adjacent Router's/Host's hostid for which a hello has been received.")
wfXnsBaseAdjacencyCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseAdjacencyCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseAdjacencyCost.setDescription('Cost associated with reaching this adjacency.')
wfXnsBaseAdjacencyAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseAdjacencyAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseAdjacencyAge.setDescription('Adjacent Router/Host for which a hello has been received.')
wfXnsBaseAdjacencyIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseAdjacencyIntf.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseAdjacencyIntf.setDescription('XNS Network interface.')
wfXnsBaseAdjacencyCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseAdjacencyCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseAdjacencyCct.setDescription('Circuit on which hello was received.')
wfXnsBaseRtEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2), )
if mibBuilder.loadTexts: wfXnsBaseRtEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRtEntryTable.setDescription("The table of Elements in XNS's routing table")
wfXnsBaseRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1), ).setIndexNames((0, "Wellfleet-XNS-MIB", "wfXnsBaseRouteDest"))
if mibBuilder.loadTexts: wfXnsBaseRtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRtEntry.setDescription('An entry in the Routing Table')
wfXnsBaseRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteDest.setDescription('The destination XNS address of this route. An entry with a value of 0.0.0.0 is considered a default route. Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
wfXnsBaseRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
wfXnsBaseRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteMetric.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's XnsBaseRouteProto value. If this metric is not used, its value should be set to -1.")
wfXnsBaseRouteNextHopNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteNextHopNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteNextHopNetwork.setDescription("(In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's XNS address on that interface.)")
wfXnsBaseRouteNextHopHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteNextHopHost.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteNextHopHost.setDescription('Full network.host_id address of nexthop host for this network.')
wfXnsBaseRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteType.setDescription('The type of route. Note that the values direct(3) and indirect(4) refer to the notion of direct and indirect routing in the XNS architecture. ')
wfXnsBaseRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("rip", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteProto.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
wfXnsBaseRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
wfXnsBaseRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsBaseRouteInfo.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsBaseRouteInfo.setDescription('A user-defined string which describes this Route entry')
wfXnsInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3), )
if mibBuilder.loadTexts: wfXnsInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceTable.setDescription('The network interface record')
wfXnsInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1), ).setIndexNames((0, "Wellfleet-XNS-MIB", "wfXnsInterfaceNetworkNumber"), (0, "Wellfleet-XNS-MIB", "wfXnsInterfaceCircuit"))
if mibBuilder.loadTexts: wfXnsInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceEntry.setDescription('An entry in the Routing Table')
wfXnsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceIndex.setDescription('A unique value for each XNS interface. Its value ranges between 1 and the value of MAXCIRCUITS.')
wfXnsInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an XNS interface.')
wfXnsInterfaceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an XNS interface.')
wfXnsInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceState.setDescription('The current state of the XNS interface')
wfXnsInterfaceCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceCircuit.setDescription('The Circuit Number that this interface runs over')
wfXnsInterfaceNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceNetworkNumber.setDescription("The XNS Address to which this entry's addressing information pertains.")
wfXnsInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceCost.setDescription('The Cost associated with the XNS Address of this entry')
wfXnsInterfaceXsumOn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceXsumOn.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceXsumOn.setDescription('Flag for checksums')
wfXnsInterfaceEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2))).clone('ethernet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceEncaps.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceEncaps.setDescription('chosen by the XNS implementation according to underlying media.')
wfXnsInterfaceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceMacAddress.setDescription('The MacAddress of this interface this port will receive or transmit.')
wfXnsInterfaceSMDSGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceSMDSGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceSMDSGroupAddress.setDescription('The SMDS Group Address of this interface this port will receive or transmit.')
wfXnsInterfaceMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceMaxInfo.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
wfXnsInterfaceExtServer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceExtServer.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceExtServer.setDescription('Flag indicating if this interface has External server capabilities turned on. Allows interface to pass on defined packets, such as PEP/TP requests, to a remote server not located on local network.')
wfXnsInterfaceExServNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceExServNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceExServNetwork.setDescription('The Network address of the remote server.')
wfXnsInterfaceExServHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceExServHostId.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceExServHostId.setDescription('The Host ID of the remote server.')
wfXnsInterfaceExServPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceExServPktType.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceExServPktType.setDescription('The packet type of the requests which are to be passed on to the specified remote server.')
wfXnsInterfaceExServSockNm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceExServSockNm.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceExServSockNm.setDescription('The destination socket number of the requests which are to be passed on to the specified remote server. If no socket number is specified then all packets of the specified type that this interface receives will be forwarded to specified remote server. ')
wfXnsInterfaceInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceInReceives.setDescription('The total number of input datagrams received from interfaces, including those received in error.')
wfXnsInterfaceInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceInHdrErrors.setDescription('The number of input datagrams discarded due to errors in their XNS headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their XNS options, etc.')
wfXnsInterfaceInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceInAddrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceInAddrErrors.setDescription("The number of input datagrams discarded because the XNS address in their XNS header's destination field was not a valid address to be received at this entity.This counter includes datagrams discarded because the destination address was not a local address.")
wfXnsInterfaceForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceForwDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceForwDatagrams.setDescription('The number of input datagrams for which this entity was not their final XNS destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities which do not act as XNS Gateways, this counter will include only those packets which were Source-Routed via this entity, and the Source- Route option processing was successful.')
wfXnsInterfaceInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceInUnknownProtos.setDescription('The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.')
wfXnsInterfaceInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceInDiscards.setDescription('The number of input XNS datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly.')
wfXnsInterfaceInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceInDelivers.setDescription('The total number of input datagrams successfully delivered to XNS user-protocols (including ECHO)')
wfXnsInterfaceOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceOutRequests.setDescription('The total number of XNS datagrams which local XNS user-protocols supplied to XNS in requests for transmission. Note that this counter does not include any datagrams counted in XnsInteraceFwdDatagrams.')
wfXnsInterfaceOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceOutDiscards.setDescription('The number of output XNS datagrams for which no problem was encountered to prevent their transmission to their destination, but which were discarded (e.g., for lack of buffer space). Note that this counter would include datagrams counted in XnsForwDatagrams if any such packets met this (discretionary) discard criterion.')
wfXnsInterfaceOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsInterfaceOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceOutNoRoutes.setDescription("The number of XNS datagrams discarded because no route could be found to transmit them to their destination. Note that this counter includes any packets counted in ForwDatagrams which meet this `no-route' criterion. Note that this includes any datagarms which a host cannot route because all of its default gateways are down.")
wfXnsInterfaceFRBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceFRBcast.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceFRBcast.setDescription('Configurable Frame Relay broadcast address')
wfXnsInterfaceFRMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceFRMcast.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceFRMcast.setDescription('Configurable Frame Relay multicast address')
wfXnsInterfaceSplit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsInterfaceSplit.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsInterfaceSplit.setDescription('Enable or Disable Split Horizon algorithm for this interface Comes into to play for non full-meshed WAN networks (Frame Relay) ')
wfXnsRipIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 4), )
if mibBuilder.loadTexts: wfXnsRipIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsRipIntfTable.setDescription('The list of RIP interfaces')
wfXnsRipIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 4, 1), ).setIndexNames((0, "Wellfleet-XNS-MIB", "wfXnsRipInterfaceIndex"))
if mibBuilder.loadTexts: wfXnsRipIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsRipIntfEntry.setDescription('An entry in the Routing Table')
wfXnsRipInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsRipInterfaceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsRipInterfaceDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an RIP Interface instance.')
wfXnsRipInterfaceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsRipInterfaceDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsRipInterfaceDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable a RIP instance.')
wfXnsRipInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsRipInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsRipInterfaceState.setDescription('The current state of RIP on this interface.')
wfXnsRipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsRipInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsRipInterfaceIndex.setDescription('The XNS interface to run RIP on.')
wfXnsRipInterfaceSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsRipInterfaceSupply.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsRipInterfaceSupply.setDescription('Transmit RIP packets.')
wfXnsRipInterfaceListen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsRipInterfaceListen.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsRipInterfaceListen.setDescription('Receive RIP packets.')
wfXnsAdjacentHostTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 5), )
if mibBuilder.loadTexts: wfXnsAdjacentHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAdjacentHostTable.setDescription('must be configured for a nexthop host.')
wfXnsAdjacentHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 5, 1), ).setIndexNames((0, "Wellfleet-XNS-MIB", "wfXnsAhTargHostNetwork"), (0, "Wellfleet-XNS-MIB", "wfXnsAhTargHostId"))
if mibBuilder.loadTexts: wfXnsAdjacentHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAdjacentHostEntry.setDescription('An entry in the Adjacent Host Table')
wfXnsAhDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsAhDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAhDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the XNS Static Host.')
wfXnsAhDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsAhDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAhDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this XNS Static Route.')
wfXnsAhTargHostNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAhTargHostNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAhTargHostNetwork.setDescription('The network address of the static host.')
wfXnsAhTargHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAhTargHostId.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAhTargHostId.setDescription('The Address of this static host.')
wfXnsAhNextHopIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 5, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsAhNextHopIntf.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAhNextHopIntf.setDescription('The Next Hop Interface Network Address')
wfXnsAhDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 5, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsAhDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAhDlci.setDescription('The next Hop Host address')
wfXnsStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6), )
if mibBuilder.loadTexts: wfXnsStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsStaticRouteTable.setDescription('The list of Adjacent Hosts used for Configuring XNS')
wfXnsStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6, 1), ).setIndexNames((0, "Wellfleet-XNS-MIB", "wfXnsSrTargNetwork"), (0, "Wellfleet-XNS-MIB", "wfXnsSrNextHopNetwork"))
if mibBuilder.loadTexts: wfXnsStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsStaticRouteEntry.setDescription('An entry in the Host Table')
wfXnsSrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsSrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsSrDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the XNS Static Route.')
wfXnsSrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsSrDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsSrDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this XNS Static Route.')
wfXnsSrTargNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsSrTargNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsSrTargNetwork.setDescription('The Address of this static route')
wfXnsSrCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsSrCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsSrCost.setDescription('The Cost of this Static Route')
wfXnsSrNextHopNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsSrNextHopNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsSrNextHopNetwork.setDescription('The Next Hop XNS Address')
wfXnsSrNextHopHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsSrNextHopHost.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsSrNextHopHost.setDescription('The next Hop Host address')
wfXnsSrTargNetworkRt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsSrTargNetworkRt.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsSrTargNetworkRt.setDescription('The Route Identifier Which numbered route this is to be')
wfXnsTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7), )
if mibBuilder.loadTexts: wfXnsTrafficFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterTable.setDescription('XNS Traffic Filters')
wfXnsTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1), ).setIndexNames((0, "Wellfleet-XNS-MIB", "wfXnsTrafficFilterInterface"), (0, "Wellfleet-XNS-MIB", "wfXnsTrafficFilterCircuit"), (0, "Wellfleet-XNS-MIB", "wfXnsTrafficFilterRuleNumber"), (0, "Wellfleet-XNS-MIB", "wfXnsTrafficFilterFragment"))
if mibBuilder.loadTexts: wfXnsTrafficFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterEntry.setDescription('A traffic filter definition')
wfXnsTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsTrafficFilterCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterCreate.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfXnsTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsTrafficFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterEnable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfXnsTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsTrafficFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfXnsTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsTrafficFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfXnsTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsTrafficFilterDefinition.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterDefinition.setDescription('The filter rule definition.')
wfXnsTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsTrafficFilterReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterReserved.setDescription('Reserved field.')
wfXnsTrafficFilterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsTrafficFilterInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterInterface.setDescription('The network address of the XNS interface to which this filter is applied.')
wfXnsTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsTrafficFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterCircuit.setDescription('The ID of the Circuit to which the filter is applied.')
wfXnsTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsTrafficFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterRuleNumber.setDescription('ID for the rule.')
wfXnsTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsTrafficFilterFragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfXnsTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 7, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXnsTrafficFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsTrafficFilterName.setDescription('Name of the rule number.')
wfXnsAggrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9))
wfXnsAggrInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrInDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrInDatagrams.setDescription('The total number of datagrams received')
wfXnsAggrOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrOutDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrOutDatagrams.setDescription('The total number of datagrams sent (includes datagrams forwarded)')
wfXnsAggrFwdDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrFwdDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrFwdDatagrams.setDescription('The total number of datagrams forwarded')
wfXnsAggrInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrInDiscards.setDescription('The total number of datagrams queued for reception that were discarded for resource reasons')
wfXnsAggrInHdrErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrInHdrErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrInHdrErrs.setDescription('The total number of datagrams discarded because of errors in the XNS header.')
wfXnsAggrInAddrErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrInAddrErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrInAddrErrs.setDescription('The total nmber of datagrams received whose destination address was invalid for this entity.')
wfXnsAggrInUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrInUnknownProtos.setDescription('The total number of datagrams received locally which specified an unknown or unsupported protocol.')
wfXnsAggrOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrOutDiscards.setDescription('The total number of datagrams queued for transmission that were discarded for resource reasons.')
wfXnsAggrOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 10, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfXnsAggrOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfXnsAggrOutNoRoutes.setDescription('The total number of datagrams queued for transmission thet were discarded because the destination was unreachable.')
mibBuilder.exportSymbols("Wellfleet-XNS-MIB", wfXnsBaseAdjacencyCost=wfXnsBaseAdjacencyCost, wfXnsTrafficFilterName=wfXnsTrafficFilterName, wfXnsInterfaceMacAddress=wfXnsInterfaceMacAddress, wfXnsBaseAdjacencyHostid=wfXnsBaseAdjacencyHostid, wfXnsBaseAdjEntry=wfXnsBaseAdjEntry, wfXnsInterfaceState=wfXnsInterfaceState, wfXnsInterfaceInReceives=wfXnsInterfaceInReceives, wfXnsBaseRouteAge=wfXnsBaseRouteAge, wfXnsBaseImplement=wfXnsBaseImplement, wfXnsTrafficFilterCircuit=wfXnsTrafficFilterCircuit, wfXnsInterfaceInAddrErrors=wfXnsInterfaceInAddrErrors, wfXnsTrafficFilterEntry=wfXnsTrafficFilterEntry, wfXnsBaseRouteDest=wfXnsBaseRouteDest, wfXnsBaseRouteProto=wfXnsBaseRouteProto, wfXnsBaseRtEntry=wfXnsBaseRtEntry, wfXnsTrafficFilterRuleNumber=wfXnsTrafficFilterRuleNumber, wfXnsAdjacentHostTable=wfXnsAdjacentHostTable, wfXnsAggrInHdrErrs=wfXnsAggrInHdrErrs, wfXnsAggrInDatagrams=wfXnsAggrInDatagrams, wfXnsRipInterfaceSupply=wfXnsRipInterfaceSupply, wfXnsBaseRouteNextHopNetwork=wfXnsBaseRouteNextHopNetwork, wfXnsSrTargNetworkRt=wfXnsSrTargNetworkRt, wfXnsInterfaceSplit=wfXnsInterfaceSplit, wfXnsRipInterfaceListen=wfXnsRipInterfaceListen, wfXnsInterfaceNetworkNumber=wfXnsInterfaceNetworkNumber, wfXnsAdjacentHostEntry=wfXnsAdjacentHostEntry, wfXnsTrafficFilterCounter=wfXnsTrafficFilterCounter, wfXnsInterfaceExServSockNm=wfXnsInterfaceExServSockNm, wfXnsInterfaceIndex=wfXnsInterfaceIndex, wfXnsInterfaceDelete=wfXnsInterfaceDelete, wfXnsBaseDelete=wfXnsBaseDelete, wfXnsRipInterfaceDisable=wfXnsRipInterfaceDisable, wfXnsAggrInUnknownProtos=wfXnsAggrInUnknownProtos, wfXnsBaseRtEntryTable=wfXnsBaseRtEntryTable, wfXnsInterfaceExServNetwork=wfXnsInterfaceExServNetwork, wfXnsInterfaceInUnknownProtos=wfXnsInterfaceInUnknownProtos, wfXnsInterfaceOutNoRoutes=wfXnsInterfaceOutNoRoutes, wfXnsTrafficFilterInterface=wfXnsTrafficFilterInterface, wfXnsAggrOutDatagrams=wfXnsAggrOutDatagrams, wfXnsInterfaceFRMcast=wfXnsInterfaceFRMcast, wfXnsTrafficFilterCreate=wfXnsTrafficFilterCreate, wfXnsInterfaceInDiscards=wfXnsInterfaceInDiscards, wfXnsTrafficFilterDefinition=wfXnsTrafficFilterDefinition, wfXnsBaseLogFilter=wfXnsBaseLogFilter, wfXnsInterfaceCircuit=wfXnsInterfaceCircuit, wfXnsBaseState=wfXnsBaseState, wfXnsBase=wfXnsBase, wfXnsStaticRouteTable=wfXnsStaticRouteTable, wfXnsBaseAdjacencyAge=wfXnsBaseAdjacencyAge, wfXnsAhTargHostNetwork=wfXnsAhTargHostNetwork, wfXnsSrDisable=wfXnsSrDisable, wfXnsInterfaceInDelivers=wfXnsInterfaceInDelivers, wfXnsInterfaceInHdrErrors=wfXnsInterfaceInHdrErrors, wfXnsTrafficFilterTable=wfXnsTrafficFilterTable, wfXnsAggrStats=wfXnsAggrStats, wfXnsInterfaceDisable=wfXnsInterfaceDisable, wfXnsRipInterfaceDelete=wfXnsRipInterfaceDelete, wfXnsInterfaceFRBcast=wfXnsInterfaceFRBcast, wfXnsTrafficFilterStatus=wfXnsTrafficFilterStatus, wfXnsAggrOutNoRoutes=wfXnsAggrOutNoRoutes, wfXnsBaseAdjacencyNetwork=wfXnsBaseAdjacencyNetwork, wfXnsBaseCfgHostNumber=wfXnsBaseCfgHostNumber, wfXnsSrTargNetwork=wfXnsSrTargNetwork, wfXnsAggrFwdDatagrams=wfXnsAggrFwdDatagrams, wfXnsBaseAdjacencyIntf=wfXnsBaseAdjacencyIntf, wfXnsRipInterfaceIndex=wfXnsRipInterfaceIndex, wfXnsSrDelete=wfXnsSrDelete, wfXnsInterfaceOutDiscards=wfXnsInterfaceOutDiscards, wfXnsBaseAdjacencyCct=wfXnsBaseAdjacencyCct, wfXnsAhDelete=wfXnsAhDelete, wfXnsSrCost=wfXnsSrCost, wfXnsInterfaceCost=wfXnsInterfaceCost, wfXnsBaseRouteMetric=wfXnsBaseRouteMetric, wfXnsTrafficFilterFragment=wfXnsTrafficFilterFragment, wfXnsBaseHostCount=wfXnsBaseHostCount, wfXnsBaseRouteInfo=wfXnsBaseRouteInfo, wfXnsTrafficFilterEnable=wfXnsTrafficFilterEnable, wfXnsAggrOutDiscards=wfXnsAggrOutDiscards, wfXnsAggrInDiscards=wfXnsAggrInDiscards, wfXnsInterfaceXsumOn=wfXnsInterfaceXsumOn, wfXnsAhDisable=wfXnsAhDisable, wfXnsBaseActiveHostNumber=wfXnsBaseActiveHostNumber, wfXnsSrNextHopNetwork=wfXnsSrNextHopNetwork, wfXnsBaseRouteIfIndex=wfXnsBaseRouteIfIndex, wfXnsInterfaceEncaps=wfXnsInterfaceEncaps, wfXnsInterfaceExServPktType=wfXnsInterfaceExServPktType, wfXnsSrNextHopHost=wfXnsSrNextHopHost, wfXnsAhTargHostId=wfXnsAhTargHostId, wfXnsInterfaceExServHostId=wfXnsInterfaceExServHostId, wfXnsAggrInAddrErrs=wfXnsAggrInAddrErrs, wfXnsRipInterfaceState=wfXnsRipInterfaceState, wfXnsTrafficFilterReserved=wfXnsTrafficFilterReserved, wfXnsAhNextHopIntf=wfXnsAhNextHopIntf, wfXnsInterfaceExtServer=wfXnsInterfaceExtServer, wfXnsRipIntfEntry=wfXnsRipIntfEntry, wfXnsStaticRouteEntry=wfXnsStaticRouteEntry, wfXnsAhDlci=wfXnsAhDlci, wfXnsInterfaceOutRequests=wfXnsInterfaceOutRequests, wfXnsBaseNetCount=wfXnsBaseNetCount, wfXnsInterfaceTable=wfXnsInterfaceTable, wfXnsBaseRouteType=wfXnsBaseRouteType, wfXnsBaseRouteNextHopHost=wfXnsBaseRouteNextHopHost, wfXnsInterfaceEntry=wfXnsInterfaceEntry, wfXnsBaseDisable=wfXnsBaseDisable, wfXnsRipIntfTable=wfXnsRipIntfTable, wfXnsBaseAdjEntryTable=wfXnsBaseAdjEntryTable, wfXnsInterfaceForwDatagrams=wfXnsInterfaceForwDatagrams, wfXnsInterfaceSMDSGroupAddress=wfXnsInterfaceSMDSGroupAddress, wfXnsInterfaceMaxInfo=wfXnsInterfaceMaxInfo)
