#
# PySNMP MIB module BPDU-TUNNELING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BPDU-TUNNELING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, Unsigned32, NotificationType, ObjectIdentity, Integer32, Counter32, ModuleIdentity, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Unsigned32", "NotificationType", "ObjectIdentity", "Integer32", "Counter32", "ModuleIdentity", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "MibIdentifier")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
swBPDUTunnelMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 60))
if mibBuilder.loadTexts: swBPDUTunnelMIB.setLastUpdated('200802260000Z')
if mibBuilder.loadTexts: swBPDUTunnelMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swBPDUTunnelMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swBPDUTunnelMIB.setDescription('The structure of BPDU tunneling for the proprietary enterprise.')
swBPDUTunnelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 60, 1))
swBPDUTunnelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 60, 2))
swBPDUTunnelMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 60, 3))
swBPDUTunnelState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 60, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBPDUTunnelState.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelState.setDescription('This object indicates the state of the BPDU tunneling.')
swBPDUTunnelSTPMcastAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 60, 2, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBPDUTunnelSTPMcastAddress.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelSTPMcastAddress.setDescription('This object indicates the MAC of the STP tunnel multicast address.')
swBPDUTunnelGVRPMcastAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 60, 2, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBPDUTunnelGVRPMcastAddress.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelGVRPMcastAddress.setDescription('This object indicates the MAC of the GVRP tunnel multicast address.')
swBPDUTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 60, 3, 1), )
if mibBuilder.loadTexts: swBPDUTunnelTable.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelTable.setDescription('A table that contains BPDU tunneling information about every port.')
swBPDUTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 60, 3, 1, 1), ).setIndexNames((0, "BPDU-TUNNELING-MIB", "swBPDUTunnelPortIndex"))
if mibBuilder.loadTexts: swBPDUTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelEntry.setDescription('A list with BPDU tunneling information for each port of the device.')
swBPDUTunnelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 60, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBPDUTunnelPortIndex.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelPortIndex.setDescription("This object indicates the module's port number.")
swBPDUTunnelPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 60, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tunnel", 2), ("uplink", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBPDUTunnelPortType.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelPortType.setDescription('This object indicates the type of the port.')
swBPDUTunnelSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 60, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBPDUTunnelSTPState.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelSTPState.setDescription('This object indicates the state of the STP tunnel.')
swBPDUTunnelGVRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 60, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBPDUTunnelGVRPState.setStatus('current')
if mibBuilder.loadTexts: swBPDUTunnelGVRPState.setDescription('This object indicates the state of the GVRP tunnel.')
mibBuilder.exportSymbols("BPDU-TUNNELING-MIB", swBPDUTunnelEntry=swBPDUTunnelEntry, swBPDUTunnelGVRPMcastAddress=swBPDUTunnelGVRPMcastAddress, swBPDUTunnelMIB=swBPDUTunnelMIB, swBPDUTunnelSTPMcastAddress=swBPDUTunnelSTPMcastAddress, swBPDUTunnelGVRPState=swBPDUTunnelGVRPState, swBPDUTunnelSTPState=swBPDUTunnelSTPState, swBPDUTunnelTable=swBPDUTunnelTable, swBPDUTunnelInfo=swBPDUTunnelInfo, swBPDUTunnelMgmt=swBPDUTunnelMgmt, swBPDUTunnelPortType=swBPDUTunnelPortType, swBPDUTunnelCtrl=swBPDUTunnelCtrl, PYSNMP_MODULE_ID=swBPDUTunnelMIB, swBPDUTunnelPortIndex=swBPDUTunnelPortIndex, swBPDUTunnelState=swBPDUTunnelState)
