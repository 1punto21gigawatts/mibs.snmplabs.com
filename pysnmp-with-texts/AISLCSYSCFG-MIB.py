#
# PySNMP MIB module AISLCSYSCFG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISLCSYSCFG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Unsigned32, IpAddress, Gauge32, Integer32, ModuleIdentity, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, enterprises, NotificationType, Counter32, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "IpAddress", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "enterprises", "NotificationType", "Counter32", "TimeTicks", "Counter64")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLCSysCfg = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 21))
if mibBuilder.loadTexts: aiSLCSysCfg.setLastUpdated('0006200500Z')
if mibBuilder.loadTexts: aiSLCSysCfg.setOrganization('Applied Innovation Inc.')
if mibBuilder.loadTexts: aiSLCSysCfg.setContactInfo('Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, Ohio 43017-3271 Tel: 614-798-2000 Fax: 614-798-1770 Email: snmp@aiinet.com')
if mibBuilder.loadTexts: aiSLCSysCfg.setDescription('MIB module for SLC system parameters.')
aislcscSystemPrompt = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscSystemPrompt.setStatus('current')
if mibBuilder.loadTexts: aislcscSystemPrompt.setDescription('Prompt for login shells. Maximum length is 80 characters.')
aislcscShellMinLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscShellMinLogLevel.setStatus('current')
if mibBuilder.loadTexts: aislcscShellMinLogLevel.setDescription('Minimum message severity which will be logged to a shell connection.')
aislcscFtpPort = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscFtpPort.setStatus('current')
if mibBuilder.loadTexts: aislcscFtpPort.setDescription('TCP port for accepting FTP connections.')
aislcscTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscTelnetPort.setStatus('current')
if mibBuilder.loadTexts: aislcscTelnetPort.setDescription('TCP port for accepting Telnet connections.')
aiSLCSysCfgManagerTable = MibTable((1, 3, 6, 1, 4, 1, 539, 21, 5), )
if mibBuilder.loadTexts: aiSLCSysCfgManagerTable.setStatus('current')
if mibBuilder.loadTexts: aiSLCSysCfgManagerTable.setDescription('Table of IP addresses to which SNMP traps will be sent, indexed by an integer.')
aiSLCSysCfgManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 21, 5, 1), ).setIndexNames((0, "AISLCSYSCFG-MIB", "aislcscManagerIndex"))
if mibBuilder.loadTexts: aiSLCSysCfgManagerEntry.setStatus('current')
if mibBuilder.loadTexts: aiSLCSysCfgManagerEntry.setDescription('Entry of aiSLCSysCfgManagerTable.')
aislcscManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 5, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscManagerIndex.setStatus('current')
if mibBuilder.loadTexts: aislcscManagerIndex.setDescription('Index into this table of SNMP managers.')
aislcscManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscManagerAddress.setStatus('current')
if mibBuilder.loadTexts: aislcscManagerAddress.setDescription('SNMP manager IP address. 0.0.0.0 indicates an unused entry.')
aislcscManagerTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscManagerTrapPort.setStatus('current')
if mibBuilder.loadTexts: aislcscManagerTrapPort.setDescription('SNMP manager trap port destination number.')
aislcscReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscReadCommunity.setStatus('current')
if mibBuilder.loadTexts: aislcscReadCommunity.setDescription('SNMP community string for read-only access.')
aislcscWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: aislcscWriteCommunity.setDescription('SNMP community string for read-write access.')
aislcsctl1SourceID = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcsctl1SourceID.setStatus('current')
if mibBuilder.loadTexts: aislcsctl1SourceID.setDescription('TL1 source identifier. Maximum length is 20 characters.')
aislcsctl1LogonRequired = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcsctl1LogonRequired.setStatus('current')
if mibBuilder.loadTexts: aislcsctl1LogonRequired.setDescription('Indicates whether or not an ACT-USER command is required for TL1 access.')
aislcsctl1NumBadLogons = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 10), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcsctl1NumBadLogons.setStatus('current')
if mibBuilder.loadTexts: aislcsctl1NumBadLogons.setDescription('The number of failed TL1 logons that have occurred since the last successful logon.')
aislcscExtProbeStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscExtProbeStatus.setStatus('current')
if mibBuilder.loadTexts: aislcscExtProbeStatus.setDescription('This is the state of the external temperature probe. It is either available or unavailable.')
aislcscExtLowThreshCelsius = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-54, 124))).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscExtLowThreshCelsius.setStatus('current')
if mibBuilder.loadTexts: aislcscExtLowThreshCelsius.setDescription('The lower threshold for the external temperature probe, in degrees Celsius. When the temperature drops below this value, an SNMP trap is sent.')
aislcscExtHighThreshCelsius = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-54, 124))).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscExtHighThreshCelsius.setStatus('current')
if mibBuilder.loadTexts: aislcscExtHighThreshCelsius.setDescription('The upper threshold for the external temperature probe, in degrees Celsius. When the temperature rises above this value, an SNMP trap is sent.')
aislcscExtTempCelsius = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 125))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscExtTempCelsius.setStatus('current')
if mibBuilder.loadTexts: aislcscExtTempCelsius.setDescription('The current external temperature (Celsius).')
aislcscIntProbeStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscIntProbeStatus.setStatus('current')
if mibBuilder.loadTexts: aislcscIntProbeStatus.setDescription('This is the state of the internal temperature probe. It is either available or unavailable.')
aislcscIntLowThreshCelsius = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-54, 124))).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscIntLowThreshCelsius.setStatus('current')
if mibBuilder.loadTexts: aislcscIntLowThreshCelsius.setDescription('The lower threshold for the internal temperature probe, in degrees Celsius. When the temperature drops below this value, an SNMP trap is sent.')
aislcscIntHighThreshCelsius = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-54, 124))).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscIntHighThreshCelsius.setStatus('current')
if mibBuilder.loadTexts: aislcscIntHighThreshCelsius.setDescription('The upper threshold for the internal temperature probe, in degrees Celsius. When the temperature rises above this value, an SNMP trap is sent.')
aislcscIntTempCelsius = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 125))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscIntTempCelsius.setStatus('current')
if mibBuilder.loadTexts: aislcscIntTempCelsius.setDescription('The current internal temperature (Celsius).')
aislcscExceededThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 125))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscExceededThresholdValue.setStatus('current')
if mibBuilder.loadTexts: aislcscExceededThresholdValue.setDescription('The temperature sent with the last trap (Celsius).')
aiSLCSysCfgKeepAliveTable = MibTable((1, 3, 6, 1, 4, 1, 539, 21, 20), )
if mibBuilder.loadTexts: aiSLCSysCfgKeepAliveTable.setStatus('current')
if mibBuilder.loadTexts: aiSLCSysCfgKeepAliveTable.setDescription('Table of IP addresses which will be pinged periodically.')
aiSLCSysCfgKeepAliveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 21, 20, 1), ).setIndexNames((0, "AISLCSYSCFG-MIB", "aislcscKeepAliveIndex"))
if mibBuilder.loadTexts: aiSLCSysCfgKeepAliveEntry.setStatus('current')
if mibBuilder.loadTexts: aiSLCSysCfgKeepAliveEntry.setDescription('Entry of aiSLCSysCfgKeepAliveTable.')
aislcscKeepAliveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 20, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscKeepAliveIndex.setStatus('current')
if mibBuilder.loadTexts: aislcscKeepAliveIndex.setDescription('Index into this table.')
aislcscKeepAliveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 20, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscKeepAliveAddress.setStatus('current')
if mibBuilder.loadTexts: aislcscKeepAliveAddress.setDescription('IP address of network element to ping. 0.0.0.0 indicates an unused entry.')
aislcscKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: aislcscKeepAliveInterval.setDescription('Time between successive pings of the network element. Allowable values are 5 to 600 seconds.')
aislcscKeepAliveWarningText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscKeepAliveWarningText.setStatus('current')
if mibBuilder.loadTexts: aislcscKeepAliveWarningText.setDescription('Message sent in SNMP trap when the network element stops responding to pings. Maximum length is 64 characters.')
aislcscKeepAliveOKText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 20, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscKeepAliveOKText.setStatus('current')
if mibBuilder.loadTexts: aislcscKeepAliveOKText.setDescription('Message sent in SNMP trap when the network element begins responding to pings after a period of unresponsiveness. Maximum length is 64 characters.')
aislcscKeepAliveCommStat = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 21, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("ok", 2), ("lost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscKeepAliveCommStat.setStatus('current')
if mibBuilder.loadTexts: aislcscKeepAliveCommStat.setDescription('Determines the current communication status between the system and the target equipment. If the target equipment does not respond to pings, this object will be set to lost(3). This object will be set to disabled(1) if no IP address is configured.')
aislcscActiveConfigName = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscActiveConfigName.setStatus('current')
if mibBuilder.loadTexts: aislcscActiveConfigName.setDescription('Name of the active configuration file. Maximum length is 255 characters; additional restrictions are system-dependent.')
aislcscActiveConfigCRC = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscActiveConfigCRC.setStatus('current')
if mibBuilder.loadTexts: aislcscActiveConfigCRC.setDescription('32-bit CRC of the active configuration file.')
aislcscSoftwareUpdateName = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscSoftwareUpdateName.setStatus('current')
if mibBuilder.loadTexts: aislcscSoftwareUpdateName.setDescription('To update the system software, set this object to the name of the new image file, and monitor aislcscSoftwareUpdateStatus until it changes to ok(1) or error(3). If the update succeeds, the new software will be used after the system is rebooted. Maximum length is 255 characters; additional restrictions are system-dependent.')
aislcscSoftwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("inProgress", 2), ("ok", 3), ("error", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscSoftwareUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: aislcscSoftwareUpdateStatus.setDescription('See aislcscSoftwareUpdateName for a description of how to use this object. ready(1) -- ready to update software (read-write) inProgress(2) -- update is in progress (read-only) ok(3) -- update completed successfully (read-only) error(4) -- update failed (read-only)')
aislcscResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("coldStart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscResetSystem.setStatus('current')
if mibBuilder.loadTexts: aislcscResetSystem.setDescription('When read, this object is always none(1). Setting none(1) has no effect. Setting coldStart(2) reboots the system.')
aislcscDiscPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("trouble", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscDiscPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: aislcscDiscPowerSupplyStatus.setDescription('Status of the power supply. okay(1) or trouble(2). When the SLC is booted, this indicates okay(1) until the software determines the correct status.')
aislcsc48VSupplyAStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("underVoltage", 2), ("overVoltage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcsc48VSupplyAStatus.setStatus('current')
if mibBuilder.loadTexts: aislcsc48VSupplyAStatus.setDescription("Status of the 'A' 48V power supply.")
aislcsc48VSupplyBStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("underVoltage", 2), ("overVoltage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcsc48VSupplyBStatus.setStatus('current')
if mibBuilder.loadTexts: aislcsc48VSupplyBStatus.setDescription("Status of the 'B' 48V power supply.")
aislcscFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscFanStatus.setStatus('current')
if mibBuilder.loadTexts: aislcscFanStatus.setDescription('Status of the fan unit.')
aislcscMib2ReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscMib2ReadCommunity.setStatus('current')
if mibBuilder.loadTexts: aislcscMib2ReadCommunity.setDescription('SNMP community string for read-only access with mib-2 view.')
aislcscOverallAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscOverallAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: aislcscOverallAlarmSeverity.setDescription("Current overall alarm severity (0-7). This value can be set at the user's discretion, but will be overwritten when the next alarm is generated.")
aislcSysCfgTime = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 21, 32))
aislcscTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 32, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscTimeZone.setStatus('current')
if mibBuilder.loadTexts: aislcscTimeZone.setDescription('The current Time Zone of the system in the following format: <+|->HH:MM, where HH is the number of hours and MM is the number of minutes. <+/-> specifies the East/West direction. For example, EDT would be displayed as: -05:00 ')
aislcscDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 32, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscDayLightSaving.setStatus('current')
if mibBuilder.loadTexts: aislcscDayLightSaving.setDescription('Indicates whether Daylight saving is enabled.')
aislcscSntpPoll = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 32, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscSntpPoll.setStatus('current')
if mibBuilder.loadTexts: aislcscSntpPoll.setDescription('Indicates whether the SNTP client is enabled on this system.')
aislcscNtpServerAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 32, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscNtpServerAddr1.setStatus('current')
if mibBuilder.loadTexts: aislcscNtpServerAddr1.setDescription('IP address of the primary NTP Server')
aislcscNtpServerAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 32, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscNtpServerAddr2.setStatus('current')
if mibBuilder.loadTexts: aislcscNtpServerAddr2.setDescription('IP address of the secondary NTP Server')
aislcscSntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 32, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscSntpPollInterval.setStatus('current')
if mibBuilder.loadTexts: aislcscSntpPollInterval.setDescription('SNTP poll interval in minutes')
aislcscStandaloneStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standalone", 1), ("nonStandalone", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcscStandaloneStatus.setStatus('current')
if mibBuilder.loadTexts: aislcscStandaloneStatus.setDescription('standalone(1): The card is operating standalone (no external CLC). nonStandalone(2): The card is operating as a line card with a CLC.')
aislcscShellPromptTimeout = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscShellPromptTimeout.setStatus('current')
if mibBuilder.loadTexts: aislcscShellPromptTimeout.setDescription('Time in minutes before an idle shell is automatically closed. 0 indicates no timeout.')
aislcscDestMenuBreakSeq = MibScalar((1, 3, 6, 1, 4, 1, 539, 21, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcscDestMenuBreakSeq.setStatus('current')
if mibBuilder.loadTexts: aislcscDestMenuBreakSeq.setDescription('Sequence of characters to exit a connection made from the destination menu.')
mibBuilder.exportSymbols("AISLCSYSCFG-MIB", aiSLCSysCfgManagerEntry=aiSLCSysCfgManagerEntry, aislcscManagerIndex=aislcscManagerIndex, aislcscActiveConfigName=aislcscActiveConfigName, aislcscSoftwareUpdateName=aislcscSoftwareUpdateName, aislcscExceededThresholdValue=aislcscExceededThresholdValue, aislcscFtpPort=aislcscFtpPort, aiSLCSysCfgKeepAliveTable=aiSLCSysCfgKeepAliveTable, aislcscKeepAliveInterval=aislcscKeepAliveInterval, aislcscStandaloneStatus=aislcscStandaloneStatus, aislcsc48VSupplyAStatus=aislcsc48VSupplyAStatus, aislcscKeepAliveWarningText=aislcscKeepAliveWarningText, aislcsctl1LogonRequired=aislcsctl1LogonRequired, aislcscSoftwareUpdateStatus=aislcscSoftwareUpdateStatus, aislcscResetSystem=aislcscResetSystem, aislcscSystemPrompt=aislcscSystemPrompt, aislcscSntpPollInterval=aislcscSntpPollInterval, aislcscDestMenuBreakSeq=aislcscDestMenuBreakSeq, aislcscKeepAliveIndex=aislcscKeepAliveIndex, aislcscExtTempCelsius=aislcscExtTempCelsius, aiSLCSysCfgManagerTable=aiSLCSysCfgManagerTable, aislcscIntLowThreshCelsius=aislcscIntLowThreshCelsius, aislcscKeepAliveAddress=aislcscKeepAliveAddress, aislcscMib2ReadCommunity=aislcscMib2ReadCommunity, aislcscNtpServerAddr2=aislcscNtpServerAddr2, aislcscSntpPoll=aislcscSntpPoll, aislcscExtProbeStatus=aislcscExtProbeStatus, aislcscFanStatus=aislcscFanStatus, aislcscDayLightSaving=aislcscDayLightSaving, PositiveInteger=PositiveInteger, aislcscShellPromptTimeout=aislcscShellPromptTimeout, aislcscTimeZone=aislcscTimeZone, aislcscNtpServerAddr1=aislcscNtpServerAddr1, aiSLCSysCfgKeepAliveEntry=aiSLCSysCfgKeepAliveEntry, aislcscOverallAlarmSeverity=aislcscOverallAlarmSeverity, aislcsctl1SourceID=aislcsctl1SourceID, aislcscTelnetPort=aislcscTelnetPort, aislcscWriteCommunity=aislcscWriteCommunity, aislcsc48VSupplyBStatus=aislcsc48VSupplyBStatus, aislcscIntProbeStatus=aislcscIntProbeStatus, aislcscReadCommunity=aislcscReadCommunity, aislcscManagerTrapPort=aislcscManagerTrapPort, aislcscIntHighThreshCelsius=aislcscIntHighThreshCelsius, aii=aii, aislcscKeepAliveOKText=aislcscKeepAliveOKText, aislcscDiscPowerSupplyStatus=aislcscDiscPowerSupplyStatus, aislcscIntTempCelsius=aislcscIntTempCelsius, aislcSysCfgTime=aislcSysCfgTime, aislcsctl1NumBadLogons=aislcsctl1NumBadLogons, aislcscExtHighThreshCelsius=aislcscExtHighThreshCelsius, aiSLCSysCfg=aiSLCSysCfg, aislcscManagerAddress=aislcscManagerAddress, aislcscKeepAliveCommStat=aislcscKeepAliveCommStat, aislcscExtLowThreshCelsius=aislcscExtLowThreshCelsius, aislcscActiveConfigCRC=aislcscActiveConfigCRC, PYSNMP_MODULE_ID=aiSLCSysCfg, aislcscShellMinLogLevel=aislcscShellMinLogLevel)
