#
# PySNMP MIB module A3COM-HUAWEI-PORTAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-PORTAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Gauge32, MibIdentifier, Bits, Integer32, Counter32, NotificationType, ModuleIdentity, Unsigned32, ObjectIdentity, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Gauge32", "MibIdentifier", "Bits", "Integer32", "Counter32", "NotificationType", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "Counter64", "TimeTicks")
TruthValue, RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
h3cPortal = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99))
if mibBuilder.loadTexts: h3cPortal.setLastUpdated('201111080000Z')
if mibBuilder.loadTexts: h3cPortal.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: h3cPortal.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: h3cPortal.setDescription('The MIB module is used for managing portal.')
h3cPortalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 1))
h3cPortalMaxUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPortalMaxUserNumber.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMaxUserNumber.setDescription('Specify the maximum number of online users, the value to be set should meet the following two conditions: 1. Less than or equal to h3cPortalUserNumberUpperLimit. 2. Greater than or equal to one. The default value is equal to h3cPortalUserNumberUpperLimit.')
h3cPortalCurrentUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalCurrentUserNumber.setStatus('current')
if mibBuilder.loadTexts: h3cPortalCurrentUserNumber.setDescription('The current number of users connecting to the portal.')
h3cPortalStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatus.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatus.setDescription('It indicates the portal status. enabled: Portal is enabled on one or more interfaces. disabled: Portal is not enabled on any interface.')
h3cPortalUserNumberUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalUserNumberUpperLimit.setStatus('current')
if mibBuilder.loadTexts: h3cPortalUserNumberUpperLimit.setDescription('The upper limit of h3cPortalMaxUserNumber.')
h3cPortalNasId = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPortalNasId.setStatus('current')
if mibBuilder.loadTexts: h3cPortalNasId.setDescription('The nas id of this device.')
h3cPortalTables = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2))
h3cPortalServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 1), )
if mibBuilder.loadTexts: h3cPortalServerTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalServerTable.setDescription('This table defines the name and URL of portal server. It can not be created and destroyed by MIB.')
h3cPortalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalServerName"))
if mibBuilder.loadTexts: h3cPortalServerEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalServerEntry.setDescription('There is a row in this table for each name and URL of portal server. It is indexed using the object h3cPortalServerName.')
h3cPortalServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPortalServerName.setStatus('current')
if mibBuilder.loadTexts: h3cPortalServerName.setDescription('It is the index of the table of h3cPortalServerTable, it shows the name of the portal server.')
h3cPortalServerUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPortalServerUrl.setStatus('current')
if mibBuilder.loadTexts: h3cPortalServerUrl.setDescription('It shows the uniform resource locator to the portal server. Users which have not logon to portal will be redirected to the portal server according to h3cPortalServerUrl. The value is consisted of protocol, IP address and relative path. For example: HTTP://10.1.1.1/portal It is not configurable when the portal server has been enabled.')
h3cPortalServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPortalServerPort.setStatus('current')
if mibBuilder.loadTexts: h3cPortalServerPort.setDescription('It shows the UDP port of the portal server. The port will be used when client sends packets to portal server. Default value is 50100. It is not configurable when the portal server has been enabled.')
h3cPortalIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 2), )
if mibBuilder.loadTexts: h3cPortalIfInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfInfoTable.setDescription('This table describes the portal information on some interface.')
h3cPortalIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cPortalIfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfInfoEntry.setDescription('There is a row in this table for a interface on which portal has been enabled. It is indexed using the object ifIndex.')
h3cPortalAuthReqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalAuthReqNumber.setStatus('current')
if mibBuilder.loadTexts: h3cPortalAuthReqNumber.setDescription('It shows the number of authentication request messages which are sent by portal module to AAA module.')
h3cPortalAuthSuccNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalAuthSuccNumber.setStatus('current')
if mibBuilder.loadTexts: h3cPortalAuthSuccNumber.setDescription('It shows the number of authentication success response messages which are sent by AAA module to portal module.')
h3cPortalAuthFailNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalAuthFailNumber.setStatus('current')
if mibBuilder.loadTexts: h3cPortalAuthFailNumber.setDescription('It shows the number of authentication failure response messages which are sent by AAA module to portal module.')
h3cPortalIfServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 3), )
if mibBuilder.loadTexts: h3cPortalIfServerTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfServerTable.setDescription('This table describes the portal information on some interface.')
h3cPortalIfServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalIfServerIndex"))
if mibBuilder.loadTexts: h3cPortalIfServerEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfServerEntry.setDescription('There is a row in this table for a interface on which portal has been enabled. It is indexed using the object ifIndex.')
h3cPortalIfServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: h3cPortalIfServerIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfServerIndex.setDescription('It is the index of the table of h3cIfPtServerTable, it shows the index of the portal server.')
h3cPortalIfServerUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 3, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalIfServerUrl.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfServerUrl.setDescription('It shows the uniform resource locator to the portal server. Users which have not logon to portal will be redirected to the portal server according to h3cPortalServerIfUrl. The value is consisted of protocol, IP address and relative path. For example: HTTP://10.1.1.1/portal It is not configurable when the portal server has been enabled.')
h3cPortalIfServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalIfServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfServerRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation. To create a new row, portal server must be specified. To destroy an existent row, the portal server MUST NOT be referred by interface.')
h3cPortalIfVlanNasIDTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 4), )
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDTable.setDescription('This table describes the interface on which portal has been enabled, the Vlan that the interface belongs to and the NAS ID to which the Vlan is bound.')
h3cPortalIfVlanNasIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalIfVlanNasIDIfIndex"), (0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalIfVlanNasIDVlanID"))
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDEntry.setDescription('There is a row in this table for a interface on which portal has been enabled, the Vlan that the interface belongs to and the NAS ID to which the Vlan is bound. It is indexed using the object ifIndex and Vlan that the interface belongs to.')
h3cPortalIfVlanNasIDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDIfIndex.setDescription('It is the index of the table of h3cPortalIfVlanNasIDTable, it shows the interface on which portal has been enabled.')
h3cPortalIfVlanNasIDVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDVlanID.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDVlanID.setDescription('It is the index of the table of h3cPortalIfVlanNasIDTable, it shows the Vlan that the interface belongs to.')
h3cPortalIfVlanNasIDNasID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDNasID.setStatus('current')
if mibBuilder.loadTexts: h3cPortalIfVlanNasIDNasID.setDescription('It is the NAS ID to which the Vlan is bound to.')
h3cPortalSSIDFreeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 5), )
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleTable.setDescription('This table describes SSID portal-free rule(s) allows specified users to access specified external websites without portal authentication.')
h3cPortalSSIDFreeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalSSIDFreeRuleIndex"))
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleEntry.setDescription('There is a row in this table for SSID portal-free rule. It is indexed using the object Index.')
h3cPortalSSIDFreeRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleIndex.setDescription('It is the index of the table of h3cPortalSSIDFreeRuleTable, it shows the index of the SSID portal-free rule.')
h3cPortalSSIDFreeRuleSrcSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleSrcSSID.setStatus('current')
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleSrcSSID.setDescription("The SSID match against the packet's source SSID.")
h3cPortalSSIDFreeRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cPortalSSIDFreeRuleRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation.')
h3cPortalMacTriggerSrvTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 6), )
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvTable.setDescription('This table describes the configration of MAC Trigger Portal server.')
h3cPortalMacTriggerSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalMacTriggerSrvIndex"))
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvEntry.setDescription('There is a row in the table for MAC Trigger Portal server. It is indexed using the object Index.')
h3cPortalMacTriggerSrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvIndex.setDescription('It is the index of the table of h3cPortalMacTriggerSrvTable, it shows the index of the MAC Trigger Portal server.')
h3cPortalMacTriggerSrvIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 6, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvIPAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvIPAddrType.setDescription('The type of MAC Trigger Portal server IP address. While other types of addresses are defined in the InetAddressType textual convention, and DNS names, a classifier can only look at packets on the wire.')
h3cPortalMacTriggerSrvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 6, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvIP.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvIP.setDescription('It shows the IP address of MAC Trigger Portal server.')
h3cPortalMacTriggerSrvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvPort.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvPort.setDescription('It shows the UDP port of MAC Trigger Portal server. The port will be used when client sends packets to MAC Trigger Portal server. Default value is 50100.')
h3cPortalMacTriggerSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerSrvRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation.')
h3cPortalMacTriggerOnIfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 7), )
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfTable.setDescription('This table describes the configration of Portal MAC Trigger on interface.')
h3cPortalMacTriggerOnIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalMacTriggerOnIfIfIndex"))
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfEntry.setDescription('There is a row in the table for Portal MAC Trigger configuration on interface. It is indexed using the object Index.')
h3cPortalMacTriggerOnIfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfIfIndex.setDescription('It is the interface index and the index of h3cPortalMacTriggerOnIfTable.')
h3cPortalMacTriggerOnIfDetctFlowPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 7, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfDetctFlowPeriod.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfDetctFlowPeriod.setDescription('It shows the period of detecting the user flow when MAC Trigger and Portal is enabled. The unit is second.')
h3cPortalMacTriggerOnIfThresholdFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 7, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfThresholdFlow.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfThresholdFlow.setDescription('It shows the threshold flow of the user to triggering authentication when MAC Trigger and Portal is enabled. The unit is byte.')
h3cPortalMacTriggerOnIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cPortalMacTriggerOnIfRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation.')
h3cPortalFreeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8), )
if mibBuilder.loadTexts: h3cPortalFreeRuleTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleTable.setDescription('This table describes portal-free rule(s) allows specified users to access specified external websites without portal authentication.')
h3cPortalFreeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalFreeRuleIndex"))
if mibBuilder.loadTexts: h3cPortalFreeRuleEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleEntry.setDescription('There is a row in this table for portal-free rule. It is indexed using the object Index.')
h3cPortalFreeRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: h3cPortalFreeRuleIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleIndex.setDescription('It is the index of the table of h3cPortalFreeRuleTable, it shows the index of the portal-free rule.')
h3cPortalFreeRuleSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcIfIndex.setDescription('The index of source interface.')
h3cPortalFreeRuleSrcVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcVlanID.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcVlanID.setDescription('The identification of source vlan.')
h3cPortalFreeRuleSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcMac.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcMac.setDescription("The MAC address to match against the packet's source MAC address.")
h3cPortalFreeRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleAddrType.setDescription('The type of IP address used by this classifier entry. While other types of addresses are defined in the InetAddressType textual convention, and DNS names, a classifier can only look at packets on the wire.')
h3cPortalFreeRuleSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcAddr.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcAddr.setDescription("The IP address to match against the packet's source IP address. This may be a DNS name or an IPv4 or IPv6 prefix. h3cPortalFreeRuleSrcPrefix indicates the number of bits that are relevant.")
h3cPortalFreeRuleSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcPrefix.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcPrefix.setDescription('The length of the CIDR Prefix carried in h3cPortalFreeRuleSrcAddr. In IPv4 addresses, a length of 0 indicates a match of any address; a length of 32 indicates a match of a single host address, and a length between 0 and 32 indicates the use of a CIDR Prefix. IPv6 is similar, except that prefix lengths range from 0..128.')
h3cPortalFreeRuleDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleDstAddr.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleDstAddr.setDescription("The IP address to match against the packet's destination IP address. This may be a DNS name or an IPv4 or IPv6 prefix. h3cPortalFreeRuleDstPrefix indicates the number of bits that are relevant.")
h3cPortalFreeRuleDstPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 9), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleDstPrefix.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleDstPrefix.setDescription('The length of the CIDR Prefix carried in h3cPortalFreeRuleDstAddr. In IPv4 addresses, a length of 0 indicates a match of any address; a length of 32 indicates a match of a single host address, and a length between 0 and 32 indicates the use of a CIDR Prefix. IPv6 is similar, except that prefix lengths range from 0..128.')
h3cPortalFreeRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 17))).clone(namedValues=NamedValues(("invalid", 0), ("tcp", 6), ("udp", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleProtocol.setDescription('The protocol-type of port.')
h3cPortalFreeRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcPort.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleSrcPort.setDescription('The source port allows users to access.')
h3cPortalFreeRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleDstPort.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleDstPort.setDescription('The destination port allows users to access.')
h3cPortalFreeRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 8, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalFreeRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFreeRuleRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation.')
h3cPortalForbiddenRuleTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9), )
if mibBuilder.loadTexts: h3cPortalForbiddenRuleTable.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleTable.setDescription('This table describes a portal-forbidden rule does not allow specified users to access specified external websites.')
h3cPortalForbiddenRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1), ).setIndexNames((0, "A3COM-HUAWEI-PORTAL-MIB", "h3cPortalForbiddenRuleIndex"))
if mibBuilder.loadTexts: h3cPortalForbiddenRuleEntry.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleEntry.setDescription('There is a row in this table for portal-forbidden rule. It is indexed using the object Index.')
h3cPortalForbiddenRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: h3cPortalForbiddenRuleIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleIndex.setDescription('It is the index of the table of h3cPortalForbiddenRuleTable, it shows the index of the portal-forbidden rule.')
h3cPortalForbiddenRuleSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcIfIndex.setDescription('The index of source interface.')
h3cPortalForbiddenRuleSrcVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcVlanID.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcVlanID.setDescription('The identification of source vlan.')
h3cPortalForbiddenRuleSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcMac.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcMac.setDescription("The MAC address to match against the packet's source MAC address.")
h3cPortalForbiddenRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleAddrType.setDescription('The type of IP address used by this classifier entry. While other types of addresses are defined in the InetAddressType textual convention, and DNS names, a classifier can only look at packets on the wire.')
h3cPortalForbiddenRuleSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcAddr.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcAddr.setDescription("The IP address to match against the packet's source IP address. This may be a DNS name or an IPv4 or IPv6 prefix. h3cPortalForbiddenRuleSrcPrefix indicates the number of bits that are relevant.")
h3cPortalForbiddenRuleSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcPrefix.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcPrefix.setDescription('The length of the CIDR Prefix carried in h3cPortalFreeRuleSrcAddr. In IPv4 addresses, a length of 0 indicates a match of any address; a length of 32 indicates a match of a single host address, and a length between 0 and 32 indicates the use of a CIDR Prefix. IPv6 is similar, except that prefix lengths range from 0..128.')
h3cPortalForbiddenRuleDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleDstAddr.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleDstAddr.setDescription("The IP address to match against the packet's destination IP address. This may be a DNS name or an IPv4 or IPv6 prefix. h3cPortalForbiddenRuleDstPrefix indicates the number of bits that are relevant.")
h3cPortalForbiddenRuleDstPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 9), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleDstPrefix.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleDstPrefix.setDescription('The length of the CIDR Prefix carried in h3cPortalFreeRuleDstAddr. In IPv4 addresses, a length of 0 indicates a match of any address; a length of 32 indicates a match of a single host address, and a length between 0 and 32 indicates the use of a CIDR Prefix. IPv6 is similar, except that prefix lengths range from 0..128.')
h3cPortalForbiddenRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 17))).clone(namedValues=NamedValues(("invalid", 0), ("tcp", 6), ("udp", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleProtocol.setDescription('The protocol-type of port.')
h3cPortalForbiddenRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcPort.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleSrcPort.setDescription('The source port does not allow users to access.')
h3cPortalForbiddenRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleDstPort.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleDstPort.setDescription('The destination port does not allow users to access.')
h3cPortalForbiddenRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 2, 9, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPortalForbiddenRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cPortalForbiddenRuleRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreateAndGo, Destroy operation.')
h3cPortalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 3))
h3cPortalTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 3, 0))
h3cPortalServerLost = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 3, 0, 1)).setObjects(("A3COM-HUAWEI-PORTAL-MIB", "h3cPortalServerName"), ("A3COM-HUAWEI-PORTAL-MIB", "h3cPortalFirstTrapTime"))
if mibBuilder.loadTexts: h3cPortalServerLost.setStatus('current')
if mibBuilder.loadTexts: h3cPortalServerLost.setDescription("This trap is generated when the device finds that the portal server is unreachable, the portal server's name is h3cPortalServerName, and the portal server has been enabled.")
h3cPortalServerGet = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 3, 0, 2)).setObjects(("A3COM-HUAWEI-PORTAL-MIB", "h3cPortalServerName"), ("A3COM-HUAWEI-PORTAL-MIB", "h3cPortalFirstTrapTime"))
if mibBuilder.loadTexts: h3cPortalServerGet.setStatus('current')
if mibBuilder.loadTexts: h3cPortalServerGet.setDescription("This trap is generated when the device finds that the state of portal server changes from unreachable state to reachable, the portal server's name is h3cPortalServerName, and the portal server has been enabled.")
h3cPortalTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 3, 1))
h3cPortalFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 3, 1, 1), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPortalFirstTrapTime.setStatus('current')
if mibBuilder.loadTexts: h3cPortalFirstTrapTime.setDescription('Represents the first trap time.')
h3cPortalStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4))
h3cPortalStatAuthReq = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatAuthReq.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatAuthReq.setDescription('It shows the total number of portal authentication requests from the portal server.')
h3cPortalStatAckLogout = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatAckLogout.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatAckLogout.setDescription('It shows the number of logout requests from the portal server.')
h3cPortalStatNotifyLogout = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatNotifyLogout.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatNotifyLogout.setDescription('It shows the number of logout requests from the access device.')
h3cPortalStatChallengeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatChallengeTimeout.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatChallengeTimeout.setDescription('It shows the number of challenge from the portal server without response.')
h3cPortalStatChallengeBusy = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatChallengeBusy.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatChallengeBusy.setDescription('It shows the number of device-busy responses for challenges from the portal server.')
h3cPortalStatChallengeFail = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatChallengeFail.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatChallengeFail.setDescription('It shows the number of challenges from the portal server with failure response.')
h3cPortalStatAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatAuthTimeout.setDescription('It shows the number of authentication requests from the portal server without responses.')
h3cPortalStatAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatAuthFail.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatAuthFail.setDescription('It shows the number of authentication requests from the portal server with failure responses.')
h3cPortalStatPwdError = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatPwdError.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatPwdError.setDescription('It shows the number of password errors.')
h3cPortalStatAuthBusy = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatAuthBusy.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatAuthBusy.setDescription('It shows the number of device-busy responses to authentication requests from the portal server.')
h3cPortalStatAuthDisordered = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatAuthDisordered.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatAuthDisordered.setDescription('It shows the number of disordered authentication packets from the portal server.')
h3cPortalStatAuthUnknownError = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatAuthUnknownError.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatAuthUnknownError.setDescription('It shows the number of unknown errors.')
h3cPortalStatAuthResp = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatAuthResp.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatAuthResp.setDescription('It shows the number of authentication response messages which are sent by AC to portal server.')
h3cPortalStatChallengeReq = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatChallengeReq.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatChallengeReq.setDescription('It shows the number of challenge request messages which are sent by portal server to AC.')
h3cPortalStatChallengeResp = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalStatChallengeResp.setStatus('current')
if mibBuilder.loadTexts: h3cPortalStatChallengeResp.setDescription('It shows the number of challenge response messages which are sent by AC to portal server.')
h3cPortalPktStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5))
h3cPortalPktStaReqAuthNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaReqAuthNum.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaReqAuthNum.setDescription('It shows the total number of portal authentication requests from the portal server.')
h3cPortalPktStaAckAuthSuccess = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthSuccess.setDescription('It shows the total number of the response to REQ-AUTH packet of portal server including error code 0 in the packet, that is authentication success.')
h3cPortalPktStaAckAuthReject = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthReject.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthReject.setDescription('It shows the total number of the response to REQ-AUTH packet of portal server including error code 1 in the packet, that is rejected by server.')
h3cPortalPktStaAckAuthEstablish = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthEstablish.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthEstablish.setDescription('It shows the total number of the response to REQ-AUTH packet of portal server including error code 2 in the packet, that is the link is already established.')
h3cPortalPktStaAckAuthBusy = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthBusy.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthBusy.setDescription('It shows the total number of the response to REQ-AUTH packet of portal server including error code 3 in the packet, that is the system is busy.')
h3cPortalPktStaAckAuthAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthAuthFail.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckAuthAuthFail.setDescription('It shows the total number of the response to REQ-AUTH packet of portal server including error code 4 in the packet, that is authentication fail.')
h3cPortalPktStaReqChallengeNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaReqChallengeNum.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaReqChallengeNum.setDescription('It shows the total number of portal challenge requests from the portal server.')
h3cPortalPktStaAckChallengeSuccess = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeSuccess.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeSuccess.setDescription('It shows the total number of the response to challenge packet of portal server including error code 0 in the packet, that is challenge is success.')
h3cPortalPktStaAckChallengeReject = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeReject.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeReject.setDescription('It shows the total number of the response to challenge packet of portal server including error code 1 in the packet, that is challenge is rejected by server.')
h3cPortalPktStaAckChallengeEstablish = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeEstablish.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeEstablish.setDescription('It shows the total number of the response to challenge packet of portal server including error code 2 in the packet, that is the link is alreadys established.')
h3cPortalPktStaAckChallengeBusy = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeBusy.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeBusy.setDescription('It shows the total number of the response to challenge packet of portal server including error code 3 in the packet, that is the system is busy.')
h3cPortalPktStaAckChallengeAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 99, 5, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeAuthFail.setStatus('current')
if mibBuilder.loadTexts: h3cPortalPktStaAckChallengeAuthFail.setDescription('It shows the total number of the response to challenge packet of portal server including error code 4 in the packet, that is authentication fail.')
mibBuilder.exportSymbols("A3COM-HUAWEI-PORTAL-MIB", h3cPortalServerTable=h3cPortalServerTable, h3cPortalForbiddenRuleEntry=h3cPortalForbiddenRuleEntry, h3cPortalIfServerRowStatus=h3cPortalIfServerRowStatus, h3cPortalStatChallengeFail=h3cPortalStatChallengeFail, h3cPortalStatAuthResp=h3cPortalStatAuthResp, h3cPortalPktStaAckAuthEstablish=h3cPortalPktStaAckAuthEstablish, h3cPortalPktStaAckAuthReject=h3cPortalPktStaAckAuthReject, h3cPortalFreeRuleSrcPort=h3cPortalFreeRuleSrcPort, h3cPortalStatistic=h3cPortalStatistic, h3cPortalServerGet=h3cPortalServerGet, h3cPortalMacTriggerSrvEntry=h3cPortalMacTriggerSrvEntry, h3cPortalForbiddenRuleSrcPrefix=h3cPortalForbiddenRuleSrcPrefix, h3cPortalServerName=h3cPortalServerName, h3cPortalSSIDFreeRuleRowStatus=h3cPortalSSIDFreeRuleRowStatus, h3cPortalIfVlanNasIDTable=h3cPortalIfVlanNasIDTable, h3cPortalStatPwdError=h3cPortalStatPwdError, h3cPortalNasId=h3cPortalNasId, h3cPortal=h3cPortal, h3cPortalMacTriggerSrvTable=h3cPortalMacTriggerSrvTable, h3cPortalFreeRuleDstAddr=h3cPortalFreeRuleDstAddr, h3cPortalStatAuthDisordered=h3cPortalStatAuthDisordered, h3cPortalForbiddenRuleProtocol=h3cPortalForbiddenRuleProtocol, h3cPortalIfVlanNasIDNasID=h3cPortalIfVlanNasIDNasID, h3cPortalFreeRuleRowStatus=h3cPortalFreeRuleRowStatus, h3cPortalStatAckLogout=h3cPortalStatAckLogout, h3cPortalForbiddenRuleDstPrefix=h3cPortalForbiddenRuleDstPrefix, h3cPortalStatus=h3cPortalStatus, h3cPortalForbiddenRuleRowStatus=h3cPortalForbiddenRuleRowStatus, h3cPortalAuthSuccNumber=h3cPortalAuthSuccNumber, h3cPortalMacTriggerSrvPort=h3cPortalMacTriggerSrvPort, h3cPortalStatAuthTimeout=h3cPortalStatAuthTimeout, h3cPortalPktStaAckAuthSuccess=h3cPortalPktStaAckAuthSuccess, h3cPortalStatNotifyLogout=h3cPortalStatNotifyLogout, h3cPortalPktStaAckAuthBusy=h3cPortalPktStaAckAuthBusy, h3cPortalIfServerIndex=h3cPortalIfServerIndex, h3cPortalFreeRuleSrcVlanID=h3cPortalFreeRuleSrcVlanID, h3cPortalTrapPrefix=h3cPortalTrapPrefix, h3cPortalTrapVarObjects=h3cPortalTrapVarObjects, h3cPortalStatChallengeResp=h3cPortalStatChallengeResp, h3cPortalMacTriggerSrvRowStatus=h3cPortalMacTriggerSrvRowStatus, h3cPortalConfig=h3cPortalConfig, h3cPortalSSIDFreeRuleTable=h3cPortalSSIDFreeRuleTable, h3cPortalAuthReqNumber=h3cPortalAuthReqNumber, h3cPortalSSIDFreeRuleSrcSSID=h3cPortalSSIDFreeRuleSrcSSID, h3cPortalFirstTrapTime=h3cPortalFirstTrapTime, h3cPortalForbiddenRuleIndex=h3cPortalForbiddenRuleIndex, h3cPortalPktStaAckChallengeAuthFail=h3cPortalPktStaAckChallengeAuthFail, h3cPortalFreeRuleIndex=h3cPortalFreeRuleIndex, h3cPortalIfInfoEntry=h3cPortalIfInfoEntry, h3cPortalForbiddenRuleDstPort=h3cPortalForbiddenRuleDstPort, h3cPortalIfServerUrl=h3cPortalIfServerUrl, h3cPortalMacTriggerOnIfThresholdFlow=h3cPortalMacTriggerOnIfThresholdFlow, h3cPortalFreeRuleDstPort=h3cPortalFreeRuleDstPort, h3cPortalForbiddenRuleSrcIfIndex=h3cPortalForbiddenRuleSrcIfIndex, h3cPortalFreeRuleSrcPrefix=h3cPortalFreeRuleSrcPrefix, h3cPortalStatAuthFail=h3cPortalStatAuthFail, h3cPortalStatAuthBusy=h3cPortalStatAuthBusy, h3cPortalServerPort=h3cPortalServerPort, h3cPortalForbiddenRuleSrcMac=h3cPortalForbiddenRuleSrcMac, h3cPortalForbiddenRuleAddrType=h3cPortalForbiddenRuleAddrType, h3cPortalForbiddenRuleSrcPort=h3cPortalForbiddenRuleSrcPort, h3cPortalPktStaReqChallengeNum=h3cPortalPktStaReqChallengeNum, h3cPortalMacTriggerOnIfEntry=h3cPortalMacTriggerOnIfEntry, h3cPortalStatChallengeTimeout=h3cPortalStatChallengeTimeout, PYSNMP_MODULE_ID=h3cPortal, h3cPortalPktStaAckAuthAuthFail=h3cPortalPktStaAckAuthAuthFail, h3cPortalPktStaAckChallengeSuccess=h3cPortalPktStaAckChallengeSuccess, h3cPortalForbiddenRuleSrcVlanID=h3cPortalForbiddenRuleSrcVlanID, h3cPortalStatChallengeReq=h3cPortalStatChallengeReq, h3cPortalMacTriggerOnIfRowStatus=h3cPortalMacTriggerOnIfRowStatus, h3cPortalMacTriggerSrvIndex=h3cPortalMacTriggerSrvIndex, h3cPortalAuthFailNumber=h3cPortalAuthFailNumber, h3cPortalMacTriggerOnIfTable=h3cPortalMacTriggerOnIfTable, h3cPortalPktStaAckChallengeEstablish=h3cPortalPktStaAckChallengeEstablish, h3cPortalSSIDFreeRuleIndex=h3cPortalSSIDFreeRuleIndex, h3cPortalIfVlanNasIDVlanID=h3cPortalIfVlanNasIDVlanID, h3cPortalUserNumberUpperLimit=h3cPortalUserNumberUpperLimit, h3cPortalPktStatistic=h3cPortalPktStatistic, h3cPortalStatAuthUnknownError=h3cPortalStatAuthUnknownError, h3cPortalMaxUserNumber=h3cPortalMaxUserNumber, h3cPortalForbiddenRuleDstAddr=h3cPortalForbiddenRuleDstAddr, h3cPortalIfVlanNasIDEntry=h3cPortalIfVlanNasIDEntry, h3cPortalSSIDFreeRuleEntry=h3cPortalSSIDFreeRuleEntry, h3cPortalTables=h3cPortalTables, h3cPortalFreeRuleEntry=h3cPortalFreeRuleEntry, h3cPortalServerEntry=h3cPortalServerEntry, h3cPortalCurrentUserNumber=h3cPortalCurrentUserNumber, h3cPortalMacTriggerOnIfDetctFlowPeriod=h3cPortalMacTriggerOnIfDetctFlowPeriod, h3cPortalFreeRuleSrcIfIndex=h3cPortalFreeRuleSrcIfIndex, h3cPortalTraps=h3cPortalTraps, h3cPortalServerUrl=h3cPortalServerUrl, h3cPortalFreeRuleAddrType=h3cPortalFreeRuleAddrType, h3cPortalFreeRuleTable=h3cPortalFreeRuleTable, h3cPortalIfVlanNasIDIfIndex=h3cPortalIfVlanNasIDIfIndex, h3cPortalMacTriggerOnIfIfIndex=h3cPortalMacTriggerOnIfIfIndex, h3cPortalIfServerTable=h3cPortalIfServerTable, h3cPortalIfServerEntry=h3cPortalIfServerEntry, h3cPortalForbiddenRuleSrcAddr=h3cPortalForbiddenRuleSrcAddr, h3cPortalFreeRuleDstPrefix=h3cPortalFreeRuleDstPrefix, h3cPortalFreeRuleProtocol=h3cPortalFreeRuleProtocol, h3cPortalFreeRuleSrcMac=h3cPortalFreeRuleSrcMac, h3cPortalStatAuthReq=h3cPortalStatAuthReq, h3cPortalForbiddenRuleTable=h3cPortalForbiddenRuleTable, h3cPortalStatChallengeBusy=h3cPortalStatChallengeBusy, h3cPortalIfInfoTable=h3cPortalIfInfoTable, h3cPortalPktStaAckChallengeBusy=h3cPortalPktStaAckChallengeBusy, h3cPortalMacTriggerSrvIP=h3cPortalMacTriggerSrvIP, h3cPortalPktStaReqAuthNum=h3cPortalPktStaReqAuthNum, h3cPortalServerLost=h3cPortalServerLost, h3cPortalMacTriggerSrvIPAddrType=h3cPortalMacTriggerSrvIPAddrType, h3cPortalFreeRuleSrcAddr=h3cPortalFreeRuleSrcAddr, h3cPortalPktStaAckChallengeReject=h3cPortalPktStaAckChallengeReject)
