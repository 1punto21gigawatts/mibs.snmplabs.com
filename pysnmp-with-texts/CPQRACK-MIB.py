#
# PySNMP MIB module CPQRACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQRACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Unsigned32, MibIdentifier, NotificationType, ObjectIdentity, TimeTicks, Counter64, IpAddress, Counter32, NotificationType, iso, Gauge32, Bits, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter64", "IpAddress", "Counter32", "NotificationType", "iso", "Gauge32", "Bits", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqRackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22))
cpqRackMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 1))
cpqRackComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2))
cpqRackSysObjID = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 3))
cpqRackInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 1))
cpqRackAsset = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 2))
cpqRackEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 3))
cpqRackServer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 4))
cpqRackPower = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 5))
cpqRackNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 6))
cpqRackOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 1, 4))
cpqRackCommonEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1))
cpqRackServerEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2))
cpqRackPowerEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3))
cpqRackServerBlade = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1))
cpqRackServerNetworking = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2))
cpqRackServerTempSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3))
cpqRackPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1))
cpqRackNetConnector = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1))
cpqRackMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackMibRevMajor.setDescription('The major revision level of the MIB. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
cpqRackMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackMibRevMinor.setDescription('The minor revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqRackMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackMibCondition.setDescription('The overall condition. This object represents the overall status of the rack information represented by this MIB.')
cpqRackOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackOsCommonPollFreq.setDescription("The Management Agent's polling frequency. The frequency, in seconds, at which the Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval. If the poll frequency is zero (0) all attempts to write to this object will fail. If the poll frequency is non-zero, setting this value will change the polling frequency of the Insight Agent. Setting the poll frequency to zero (0) will always fail, an agent may also choose to fail any request to change the poll frequency to a value that would severely impact system performance.")
cpqRackAssetTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1), )
if mibBuilder.loadTexts: cpqRackAssetTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackAssetTable.setDescription('A table of rack asset information.')
cpqRackAssetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackAssetIndex"))
if mibBuilder.loadTexts: cpqRackAssetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackAssetEntry.setDescription('A rack asset description.')
cpqRackAssetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackAssetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackAssetIndex.setDescription('A number that uniquely specifies this rack table entry.')
cpqRackName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackName.setDescription('The customer changeable identifier used to identify the entire rack. The string will be empty if the system does not report this function.')
cpqRackUid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackUid.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackUid.setDescription('The rack unique identifier. The string will be empty if the rack does not report the UID or if it could not be determined.')
cpqRackSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackSerialNum.setDescription('The rack serial number. The string will be empty if the rack does not report the serial number.')
cpqRackTrapSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackTrapSequenceNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackTrapSequenceNum.setDescription('The trap sequence number for rack traps. This is used by the management application trap processing. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackHeight.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackHeight.setDescription('The internal height dimension of the useable rack space expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackWidth.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackWidth.setDescription('The internal width dimension of the useable rack space expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackDepth.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackDepth.setDescription('The internal depth dimension of the useable rack space expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackCommonEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTable.setDescription('A table of rack enclosure information.')
cpqRackCommonEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureEntry.setDescription('A rack enclosure description.')
cpqRackCommonEnclosureRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureRack.setDescription('A number that uniquely specifies this rack.')
cpqRackCommonEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureIndex.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackCommonEnclosureModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureModel.setDescription('The model name of the enclosure. The string will be empty if the enclosure does not report the model information.')
cpqRackCommonEnclosureAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureAssetTag.setDescription('The customer changeable asset identifier of the enclosure. The string will be empty if the system does not report this function or if the asset tag has not been set.')
cpqRackCommonEnclosurePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosurePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosurePartNumber.setDescription('The part number of the enclosure. The string will be empty if the enclosure does not report this function.')
cpqRackCommonEnclosureSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureSparePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureSparePartNumber.setDescription('The spare part number of the enclosure. The string will be empty if the enclosure does not report this function.')
cpqRackCommonEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNum.setDescription('The serial number of the enclosure. The string will be empty if the enclosure does not report the serial number.')
cpqRackCommonEnclosureFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFWRev.setDescription('The firmware revision of the enclosure. The string will be empty if the enclosure does not report the firmware revision or does not contain firmware.')
cpqRackCommonEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureName.setDescription('The name of the enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackCommonEnclosureNeighborNamePrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureNeighborNamePrev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureNeighborNamePrev.setDescription('The name of the enclosure immediately preceding or above this enclosure. The string will be empty if the neighbor enclosure name could not be determined or there is no enclosure preceding this one.')
cpqRackCommonEnclosureNeighborNameNext = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureNeighborNameNext.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureNeighborNameNext.setDescription('The name of the enclosure immediately following or below this enclosure. The string will be empty if the neighbor enclosure name could not be determined or there is no enclosure following this one.')
cpqRackCommonEnclosureHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHeight.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureHeight.setDescription('The height dimension of the rack space taken by the enclosure expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackCommonEnclosureWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureWidth.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureWidth.setDescription('The width dimension of the rack space taken by the enclosure expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackCommonEnclosureDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureDepth.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureDepth.setDescription('The depth dimension of the rack space taken by the enclosure expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackCommonEnclosureTrapSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTrapSequenceNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTrapSequenceNum.setDescription('The trap sequence number for the enclosure. This is used by the management application trap processing. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackCommonEnclosureCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureCondition.setDescription('The overall condition of the enclosure. This is the aggregate of the temperature sensors, fans, and fuses within the enclosure. This value will be one of the following: other(1) No temperature sensors, fans, or fuses in the enclosure or the state could no be determined. ok(2) All temperature sensors, fans, and fuses are within the normal operating range. degraded(3) One or more temperature sensors, fans, or fuses are outside of the normal operating range. None are failed. failed(4) The temperature sensor exceeded the critical threshold value, a required fan has failed, or a fuse has been tripped. The system will automatically shutdown if the failed(4) condition results, so it is unlikely that this value will ever be returned by the agent.')
cpqRackCommonEnclosureHasServerBlades = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasServerBlades.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasServerBlades.setDescription('The enclosure can contain server blades. This will be true(2) is the enclosure can house server blades. The cpqRackServerEnclosureTable will contain server enclosure specific information. Match the cpqRackCommonEnclosureSerialNum in this table to the serial number in the cpqRackServerEnclosureTable to get complete information on the server enclosure.')
cpqRackCommonEnclosureHasPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasPowerSupplies.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasPowerSupplies.setDescription('The enclosure can contain power supplies. This will be true(2) is the enclosure can house power supplies. The cpqRackEnclosurePowerTable will contain power enclosure specific information. Match the cpqRackCommonEnclosureSerialNum in this table to the serial number in the cpqRackEnclosurePowerTable to get complete information on the power enclosure.')
cpqRackCommonEnclosureHasNetConnectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasNetConnectors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasNetConnectors.setDescription('The enclosure contains network connectivity. This will be true(2) is the enclosure contains network connectivity. The cpqRackCommonEnclosureNetConnectorTable will contain network connectivity specific information. Match the cpqRackCommonEnclosureSerialNum in this table to the serial number in the cpqRackCommonEnclosureNetConnectorTable to get complete information on the network connector enclosure.')
cpqRackCommonEnclosureHasTempSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasTempSensors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasTempSensors.setDescription('The enclosure contains temperature sensors. This will be true(2) is the enclosure contains temperature sensors. The cpqRackCommonEnclosureTempTable will contain temperature sensor specific information. Match the cpqRackCommonEnclosureSerialNum in this table to the serial number in the cpqRackCommonEnclosureTempTable to get complete information on the enclosure.')
cpqRackCommonEnclosureHasFans = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasFans.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasFans.setDescription('The enclosure contains fans. This will be true(2) is the enclosure contains fans. The cpqRackCommonEnclosureFanTable will contain the fan specific information. Match the cpqRackCommonEnclosureSerialNum in this table to the serial number in the cpqRackCommonEnclosureFanTable to get complete information on the enclosure.')
cpqRackCommonEnclosureHasFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasFuses.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasFuses.setDescription('The enclosure contains fuses. This will be true(2) is the enclosure contains fuses. The cpqRackCommonEnclosureFuseTable will contain the fuse specific information. Match the cpqRackCommonEnclosureSerialNum in this table to the serial number in the cpqRackCommonEnclosureFuseTable to get complete information on the enclosure.')
cpqRackCommonEnclosureMgmtUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("ledOn", 3), ("ledOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackCommonEnclosureMgmtUID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureMgmtUID.setDescription('The Unit Identifier LED. This value will be one of the following: other(1) The state of the LED could not be determined. Setting the LED state is not allowed. none(2) The LED is not present. Setting LED state is not allowed. ledOn(3) The LED is present and ON. The LED can be turned off by setting the cpqRackCommonEnclosureMgmtUID to ledOff(4). ledOff(4) The LED is present and OFF. The LED can be turned on by setting the cpqRackCommonEnclosureMgmtUID to ledOn(3).')
cpqRackCommonEnclosureSerialNumPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNumPrev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNumPrev.setDescription('The serial number of the enclosure immediately preceding or above this enclosure. The string will be empty if the neighbor enclosure serial number could not be determined or there is no enclosure preceding this one.')
cpqRackCommonEnclosureSerialNumNext = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNumNext.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureSerialNumNext.setDescription('The serial number of the enclosure immediately following or below this enclosure. The string will be empty if the neighbor enclosure serial number could not be determined or there is no enclosure following this one.')
cpqRackCommonEnclosureAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureAddress.setDescription('The unique address of the enclosure within the rack. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackCommonEnclosureProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductId.setDescription('The product id string of the enclosure. The string will be empty if the enclosure does not report the product id string.')
cpqRackCommonEnclosureProductIdPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductIdPrev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductIdPrev.setDescription('The product id string of the enclosure immediately preceding or above this enclosure. The string will be empty if the enclosure does not report the product id string.')
cpqRackCommonEnclosureProductIdNext = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductIdNext.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureProductIdNext.setDescription('The product id string of the enclosure immediately following or below this enclosure. The string will be empty if the enclosure does not report the product id string.')
cpqRackCommonEnclosureUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUID.setDescription('The universal unique identifier string of the enclosure. The string will be empty if the enclosure does not report the UUID string.')
cpqRackCommonEnclosureUUIDPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUIDPrev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUIDPrev.setDescription('The universal unique identifier string of the enclosure immediately preceding or above this enclosure. The string will be empty if the enclosure does not report the UUID string or if there is no preceding enclosure.')
cpqRackCommonEnclosureUUIDNext = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUIDNext.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureUUIDNext.setDescription('The universal unique identifier string of the enclosure immediately following or below this enclosure. The string will be empty if the enclosure does not report the UUID string or if there is no following enclosure.')
cpqRackCommonEnclosureHasManagers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasManagers.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureHasManagers.setDescription('The enclosure contains managers. This will be true(2) is the enclosure contains managers. The cpqRackCommonEnclosureManagerTable will contain the manager specific information. Match the cpqRackCommonEnclosureSerialNum in this table to the serial number in the cpqRackCommonEnclosureManagerTable to get complete information on the enclosure.')
cpqRackCommonEnclosureTempTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempTable.setDescription('A table of rack enclosure temperature sensor information.')
cpqRackCommonEnclosureTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureTempRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureTempChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureTempSensorIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempEntry.setDescription('A rack enclosure temperature sensor description.')
cpqRackCommonEnclosureTempRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempRack.setDescription('A number that uniquely specifies this rack.')
cpqRackCommonEnclosureTempChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempChassis.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackCommonEnclosureTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorIndex.setDescription('A number that uniquely specifies this temperature sensor within this enclosure in the rack.')
cpqRackCommonEnclosureTempSensorEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorEnclosureName.setDescription('The name of the enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackCommonEnclosureTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempLocation.setDescription('The location description of the temperature sensor within the enclosure. The string will be empty if the location could not be determined.')
cpqRackCommonEnclosureTempCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempCurrent.setDescription('This is the current temperature sensor reading in degrees celsius. If this value cannot be determined by software, then a value of -1 will be returned.')
cpqRackCommonEnclosureTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempThreshold.setDescription('This is the threshold temperature sensor setting in degrees celsius. This is the temperature in which the sensor will be considered to be in a tripped state this causing some action to occur depending on the type of the sensor. The action of temperature sensor threshold will be indicated by the cpqRackCommonEnclosureTempType item. If the type is blowout(5), then the temperature sensor will cause the fans to speed up. If the type is caution(9), then the temperature sensor is in a degraded state. If the type is critical(15), then the enclosure will be considered as in a failed state. If this value cannot be determined by software, then a value of -1 will be returned.')
cpqRackCommonEnclosureTempCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempCondition.setDescription('The Temperature sensor condition. This value will be one of the following: other(1) Temperature could not be determined. ok(2) The temperature sensor is within the normal operating range. degraded(3) The temperature sensor is outside of the normal operating range. failed(4) The temperature sensor detects a condition that could possibly damage the system. The system will automatically shutdown if the failed(4) condition results, so it is unlikely that this value will ever be returned by the agent.')
cpqRackCommonEnclosureTempType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 15))).clone(namedValues=NamedValues(("other", 1), ("blowout", 5), ("caution", 9), ("critical", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempType.setDescription('This specifies the type of this instance of temperature sensor. This value will be one of the following: other(1) Temperature threshold type could not be determined. blowout(5) If a blowout(5) temperature sensor reaches its threshold, the fan or fans in the area of the temperature sensor will increase in speed in an attempt to reduce the temperature before a caution or critical threshold is reached. caution(9) If a caution(9) temperature sensor reaches its threshold, the cpqRackCommonEnclosureTempCondition will be set to degraded(3) and the system will either continue or shutdown depending on the user preferences. critical(15) If a critical(15) temperature sensor reaches its threshold, the cpqHeTemperatureCondition will be set to failed(4) and the system will shutdown.')
cpqRackCommonEnclosureTempSensorEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorEnclosureSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureTempSensorEnclosureSerialNum.setDescription('The serial number of the enclosure containing this temperature sensor. The string will be empty if the enclosure does not report the serial number or it could not be determined.')
cpqRackCommonEnclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanTable.setDescription('A table of rack enclosure fan information.')
cpqRackCommonEnclosureFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureFanRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFanChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFanIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEntry.setDescription('A rack enclosure fan description.')
cpqRackCommonEnclosureFanRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRack.setDescription('A number that uniquely specifies this rack.')
cpqRackCommonEnclosureFanChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanChassis.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackCommonEnclosureFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanIndex.setDescription('A number that uniquely specifies this fan within this enclosure in the rack.')
cpqRackCommonEnclosureFanEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEnclosureName.setDescription('The name of the enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackCommonEnclosureFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanLocation.setDescription('The location description of the fan within the enclosure. The string will be empty if the location could not be determined.')
cpqRackCommonEnclosureFanPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanPartNumber.setDescription('The part number of the enclosure fan. The string will be empty if the part number could not be determined.')
cpqRackCommonEnclosureFanSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanSparePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanSparePartNumber.setDescription('The spare part number of the enclosure fan. The string will be empty if the part number could not be determined.')
cpqRackCommonEnclosureFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanPresent.setDescription('This specifies if the fan described is present in the system.')
cpqRackCommonEnclosureFanRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRedundant.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRedundant.setDescription('This specifies if the fan is in a redundant configuration.')
cpqRackCommonEnclosureFanRedundantGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRedundantGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanRedundantGroupId.setDescription('This specifies the group number for redundant fans within this enclosure.')
cpqRackCommonEnclosureFanCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanCondition.setDescription('The condition of the fan. This value will be one of the following: other(1) Fan status detection is not supported. ok(2) The fan is operating properly. degraded(2) A redundant fan is not operating properly. failed(4) A non-redundant fan is not operating properly.')
cpqRackCommonEnclosureFanEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEnclosureSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFanEnclosureSerialNum.setDescription('The serial number of the enclosure containing the fan. The string will be empty if the enclosure does not report the serial number or it could not be determined.')
cpqRackCommonEnclosureFuseTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseTable.setDescription('A table of rack enclosure fuse information.')
cpqRackCommonEnclosureFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureFuseRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFuseChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFuseIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseEntry.setDescription('A rack enclosure fuse description.')
cpqRackCommonEnclosureFuseRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseRack.setDescription('A number that uniquely specifies this rack.')
cpqRackCommonEnclosureFuseChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseChassis.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackCommonEnclosureFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseIndex.setDescription('A number that uniquely specifies the fuse within this enclosure.')
cpqRackCommonEnclosureFuseEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseEnclosureName.setDescription('The name of the enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackCommonEnclosureFuseLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseLocation.setDescription('The location description of the fuse within the enclosure. The string will be empty if the location could not be determined.')
cpqRackCommonEnclosureFusePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFusePresent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFusePresent.setDescription('This specifies if the fuse described is present in the system.')
cpqRackCommonEnclosureFuseCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFuseCondition.setDescription('The condition of the fuse. This value will be one of the following: other(1) Fuse status detection is not supported. ok(2) The fuse is operating properly. failed(4) A fuse has been tripped or is not operating properly.')
cpqRackCommonEnclosureFruTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruTable.setDescription('A table of rack enclosure field replaceable units information.')
cpqRackCommonEnclosureFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureFruRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFruChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureFruIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruEntry.setDescription('A rack enclosure field replaceable unit description.')
cpqRackCommonEnclosureFruRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruRack.setDescription('A number that uniquely specifies this rack.')
cpqRackCommonEnclosureFruChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruChassis.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackCommonEnclosureFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruIndex.setDescription('A number that uniquely specifies the FRU within this enclosure.')
cpqRackCommonEnclosureFruEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruEnclosureName.setDescription('The name of the enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackCommonEnclosureFruDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruDescription.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruDescription.setDescription('A description of the FRU component. The string will be empty if the enclosure does not report the description information.')
cpqRackCommonEnclosureFruLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruLocation.setDescription('The location description of the FRU within the enclosure. The string will be empty if the location could not be determined.')
cpqRackCommonEnclosureFruAssemblyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruAssemblyPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruAssemblyPartNumber.setDescription('The assembly part number of the FRU within the enclosure. The string will be empty if the enclosure does not report this information.')
cpqRackCommonEnclosureFruSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruSparePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruSparePartNumber.setDescription('The spare part number of the FRU within the enclosure. The string will be empty if the enclosure does not report this information.')
cpqRackCommonEnclosureFruAutoRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruAutoRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruAutoRev.setDescription('The auto revision number of the FRU within the enclosure. The string will be empty if the enclosure does not report this information.')
cpqRackCommonEnclosureFruSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureFruSerialNum.setDescription('The serial number of the FRU within the enclosure. The string will be empty if the enclosure does not report the serial number.')
cpqRackCommonEnclosureManagerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6), )
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerTable.setDescription('A table of rack enclosure manager information.')
cpqRackCommonEnclosureManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackCommonEnclosureManagerRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureManagerChassis"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureManagerIndex"))
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEntry.setDescription('A rack enclosure manager description.')
cpqRackCommonEnclosureManagerRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRack.setDescription('A number that uniquely specifies this rack.')
cpqRackCommonEnclosureManagerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerChassis.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackCommonEnclosureManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerIndex.setDescription('A number that uniquely specifies this manager within this enclosure in the rack.')
cpqRackCommonEnclosureManagerEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEnclosureName.setDescription('The name of the enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackCommonEnclosureManagerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerLocation.setDescription('The location description of the manager within the enclosure. The string will be empty if the location could not be determined.')
cpqRackCommonEnclosureManagerPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerPartNumber.setDescription('The part number of the enclosure manager. The string will be empty if the part number could not be determined.')
cpqRackCommonEnclosureManagerSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerSparePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerSparePartNumber.setDescription('The spare part number of the enclosure manager. The string will be empty if the part number could not be determined.')
cpqRackCommonEnclosureManagerSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerSerialNum.setDescription('The serial number of the enclosure manager. The string will be empty if the enclosure does not report the serial number or it could not be determined.')
cpqRackCommonEnclosureManagerRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRole.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRole.setDescription('This specifies the current role of the manager.')
cpqRackCommonEnclosureManagerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerPresent.setDescription('This specifies if the manager described is present in the system.')
cpqRackCommonEnclosureManagerRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRedundant.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerRedundant.setDescription('This specifies if the manager is in a redundant configuration.')
cpqRackCommonEnclosureManagerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerCondition.setDescription('The condition of the manager. This value will be one of the following: other(1) Manager status detection is not supported. ok(2) The manager is operating properly. degraded(2) A redundant manager is not operating properly. failed(4) A non-redundant manager is not operating properly.')
cpqRackCommonEnclosureManagerEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEnclosureSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerEnclosureSerialNum.setDescription('The serial number of the enclosure containing the manager. The string will be empty if the enclosure does not report the serial number or it could not be determined.')
cpqRackCommonEnclosureManagerUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerUUID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerUUID.setDescription('The universal unique identifier string of the manager. The string will be empty if the enclosure does not report the UUID string.')
cpqRackCommonEnclosureManagerFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 1, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackCommonEnclosureManagerFWRev.setDescription('The firmware revision of the enclosure manager. The string will be empty if the enclosure does not report the firmware revision or does not contain firmware.')
cpqRackServerEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1), )
if mibBuilder.loadTexts: cpqRackServerEnclosureTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerEnclosureTable.setDescription('A table of rack enclosure information for servers.')
cpqRackServerEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackServerEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackServerEnclosureIndex"))
if mibBuilder.loadTexts: cpqRackServerEnclosureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerEnclosureEntry.setDescription('A server enclosure description.')
cpqRackServerEnclosureRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerEnclosureRack.setDescription('A number that uniquely specifies this rack.')
cpqRackServerEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerEnclosureIndex.setDescription('A number that uniquely specifies this server enclosure in the rack.')
cpqRackServerEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerEnclosureName.setDescription('The name of the server enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackServerEnclosureMaxNumBlades = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBlades.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBlades.setDescription('The maximum number of server blades the enclosure can contain. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackServerEnclosureMaxNumBladesX = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBladesX.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBladesX.setDescription('The maximum number of server blades in x-direction (from left to right) the enclosure can contain.')
cpqRackServerEnclosureMaxNumBladesY = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBladesY.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerEnclosureMaxNumBladesY.setDescription('The maximum number of server blades in y-direction (from top to bottom) the enclosure can contain.')
cpqRackPowerEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1), )
if mibBuilder.loadTexts: cpqRackPowerEnclosureTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureTable.setDescription('A table of rack power enclosure information.')
cpqRackPowerEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackPowerEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackPowerEnclosureIndex"))
if mibBuilder.loadTexts: cpqRackPowerEnclosureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureEntry.setDescription('A rack power enclosure description.')
cpqRackPowerEnclosureRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureRack.setDescription('A number that uniquely specifies this rack.')
cpqRackPowerEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureIndex.setDescription('A number that uniquely specifies this power enclosure in the rack.')
cpqRackPowerEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureName.setDescription('The name of the power enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackPowerEnclosureMgmtBoardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureMgmtBoardSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureMgmtBoardSerialNum.setDescription('The serial number of the enclosure. The string will be empty if the enclosure does not report the serial number.')
cpqRackPowerEnclosureRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("redundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureRedundant.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureRedundant.setDescription('This indicates if the power supply enclosure is in a redundant state.')
cpqRackPowerEnclosureLoadBalanced = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notLoadBalanced", 2), ("loadBalanced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureLoadBalanced.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureLoadBalanced.setDescription('This indicates if the power supply enclosure is in a load balanced state.')
cpqRackPowerEnclosureInputPwrType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("singlePhase", 2), ("threePhase", 3), ("directCurrent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureInputPwrType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureInputPwrType.setDescription('This indicates type of input facility power.')
cpqRackPowerEnclosurePwrFeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosurePwrFeedMax.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosurePwrFeedMax.setDescription('This is the maximum facility power in watts. The maximum facility power being fed to this power enclosure. The value will be -1 if the power enclosure does not report the value or if the value is not known.')
cpqRackPowerEnclosureCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerEnclosureCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerEnclosureCondition.setDescription('This indicates current condition of the power enclosure. other(1) The power enclosure condition could not be determined. ok(2) The power enclosure is operating normally. degraded(3) The power enclosure is in a degraded state. The power subsystem may not be load balanced or may have lost redundancy.')
cpqRackPowerEnclosureBladeAutopoweron = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackPowerEnclosureBladeAutopoweron.setStatus('optional')
if mibBuilder.loadTexts: cpqRackPowerEnclosureBladeAutopoweron.setDescription('This indicates current condition of the power enclosure. other(1) The blade auto power on feature could not be determined. disabled(2) The enclosure will not automatically power on a blade when inserted. enabled(3) The enclosure will automatically power on a blade when inserted.')
cpqRackServerBladeTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1), )
if mibBuilder.loadTexts: cpqRackServerBladeTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeTable.setDescription('A table of rack server blade information.')
cpqRackServerBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackServerBladeRack"), (0, "CPQRACK-MIB", "cpqRackServerBladeChassis"), (0, "CPQRACK-MIB", "cpqRackServerBladeIndex"))
if mibBuilder.loadTexts: cpqRackServerBladeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeEntry.setDescription('A rack server blade description.')
cpqRackServerBladeRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeRack.setDescription('A number that uniquely specifies this rack.')
cpqRackServerBladeChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeChassis.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackServerBladeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeIndex.setDescription('A number that uniquely specifies this server blade within the enclosure.')
cpqRackServerBladeName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeName.setDescription('The name of the server blade. The string will be empty if it could not be determined.')
cpqRackServerBladeEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeEnclosureName.setDescription('The name of the enclosure which contains the blade. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackServerBladePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladePartNumber.setDescription('The part number of the server blade. The string will be empty if the part number could not be determined.')
cpqRackServerBladeSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSparePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeSparePartNumber.setDescription('The spare part number of the server blade. The string will be empty if the part number could not be determined.')
cpqRackServerBladePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePosition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladePosition.setDescription('The position or slot number of the server blade within the server enclosure. This will be -1 if the server enclosure does not report the information or it could not be determined.')
cpqRackServerBladeHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeHeight.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeHeight.setDescription('The height dimension of the rack space taken by the server blade expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackServerBladeWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeWidth.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeWidth.setDescription('The width dimension of the rack space taken by the server blade expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackServerBladeDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeDepth.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeDepth.setDescription('The depth dimension of the rack space taken by the server blade expressed in millimeters. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackServerBladePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePresent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladePresent.setDescription('This specifies if the server blade described is present in the enclosure.')
cpqRackServerBladeHasFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeHasFuses.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeHasFuses.setDescription('The server blade contains fuses. This will be true(2) is the server blade contains fuses. The cpqRackCommonEnclosureFuseTable will contain the fuse specific information. Match the cpqRackServerBladeEnclosureSerialNum in this table to the serial number in the cpqRackCommonEnclosureFanTable to get complete information on the fuses.')
cpqRackServerBladeEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeEnclosureSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeEnclosureSerialNum.setDescription('The serial number of the enclosure which contains the blade. The string will be empty if the enclosure does not report the serial number or it could not be determined.')
cpqRackServerBladeSlotsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsed.setDescription('The number of slot positions occupied by this server blade. This is used to indicate a server blade which may obscure an adjacent blade slot. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackServerBladeSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeSerialNum.setDescription('The serial number of the server blade. The string will be empty if the system does not report the serial number function.')
cpqRackServerBladeProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeProductId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeProductId.setDescription('The product id string of the server blade. The string will be empty if the system does not report the product id function.')
cpqRackServerBladeUid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeUid.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeUid.setDescription('The server blade unique identifier (UUID). The string will be empty if the blade does not report the UUID or if it could not be determined.')
cpqRackServerBladeSlotsUsedX = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsedX.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsedX.setDescription('The number of slot positions in x-direction (from left to right) occupied by this server blade. This is used to indicate a server blade which may obscure an adjacent blade slot. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackServerBladeSlotsUsedY = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsedY.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerBladeSlotsUsedY.setDescription('The number of slot positions in y-direction (from top to bottom) occupied by this server blade. This is used to indicate a server blade which may obscure an adjacent blade slot. This will be -1 if the rack does not report the information or it could not be determined.')
cpqRackServerBladeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeStatus.setDescription('The health status of the blade. This will be other(1) if the rack does not report the information or if it could not be determined.')
cpqRackServerBladeFaultMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeFaultMajor.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeFaultMajor.setDescription('The major fault code of the blade fault reported by the enclosure manager. This will be -1 if the rack does not report the information or if it could not be determined.')
cpqRackServerBladeFaultMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeFaultMinor.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeFaultMinor.setDescription('The minor fault code of the blade fault reported by the enclosure manager. This will be -1 if the rack does not report the information or if it could not be determined.')
cpqRackServerBladeFaultDiagnosticString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeFaultDiagnosticString.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeFaultDiagnosticString.setDescription('The server blade fault diagnostic string. This will contain a probable cause and potential diagnostic action to be taken to remedy the fault condition. The string will be empty if the blade does not report the diagnostic string or if it could not be determined.')
cpqRackServerBladePowered = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3), ("powerStagedOff", 4), ("reboot", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackServerBladePowered.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladePowered.setDescription('The power state of the blade. This will be other(1) if the rack does not report the information or if it could not be determined.')
cpqRackServerBladeUIDState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("ledOn", 3), ("ledOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackServerBladeUIDState.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeUIDState.setDescription('The Unit Identifier LED. This value will be one of the following: other(1) The state of the LED could not be determined. Setting the LED state is not allowed. none(2) The LED is not present. Setting LED state is not allowed. ledOn(3) The LED is present and ON. The LED can be turned off by setting the cpqRackServerBladeUIDState to ledOff(4). ledOff(4) The LED is present and OFF. The LED can be turned on by setting the cpqRackServerBladeUIDState to ledOn(3). ')
cpqRackServerBladeSystemBIOSRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSystemBIOSRevision.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeSystemBIOSRevision.setDescription('The server blade system bios revision. The string will be empty if the blade does not report the system bios revision or if it could not be determined.')
cpqRackServerBladeSystemBIOSFlashingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("flashing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeSystemBIOSFlashingStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeSystemBIOSFlashingStatus.setDescription('Blade server system BIOS flashing / flash mode status indication. This will be other(1) if the rack does not report the information or if it could not be determined.')
cpqRackServerBladeHasManagementDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeHasManagementDevice.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeHasManagementDevice.setDescription("The blade server contains one or more management devices. This will be true(2) if the blade server contains managers and false (1) if not or if it can't be detected.")
cpqRackServerBladeManagementDeviceFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeManagementDeviceFirmwareRevision.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeManagementDeviceFirmwareRevision.setDescription('The server blade management device firwmware revision. The string will be empty if the blade does not report the management device firwmware revision or if it could not be determined.')
cpqRackServerBladeManagementDeviceFirmwareFlashingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("flashing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeManagementDeviceFirmwareFlashingStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeManagementDeviceFirmwareFlashingStatus.setDescription('Blade server management device firwmware flashing / flash mode status indication. This will be other(1) if the rack does not report this information or if it could not be determined.')
cpqRackServerBladeDiagnosticAdaptorPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeDiagnosticAdaptorPresence.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeDiagnosticAdaptorPresence.setDescription('This specifies if a blade diagnostic adaptor is currently plugged into the system.')
cpqRackServerBladeASREnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeASREnabled.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeASREnabled.setDescription("Indicates whether the target blade server has Automatic Service Recovery feature enabled. This will be true(2) if the blade server has this feature eanbled and false (1) if not or if it can't be detected.")
cpqRackServerBladeFrontIOBlankingModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladeFrontIOBlankingModeStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladeFrontIOBlankingModeStatus.setDescription("Indicates whether the target blade server has the front IO ports blanking feature enabled. This will be Active(3) if the blade server has this feature eanbled, Inactive (2) if not, or Unknown(1) if it can't be determined.")
cpqRackServerBladePOSTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("completed", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePOSTStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladePOSTStatus.setDescription('Blade server power-on self test (POST) status. This value will be one of the following: other(1) The state of the blade POST could not be determined. started(2) Blade has started Power-on-self-test (POST) process. completed(3) Blade has finished Power-on-self-test (POST) process. failed(4) Blade has failed to complete Power-on-self-test (POST) process and halted. This will be other(1) if the rack does not report this information or if it could not be determined.')
cpqRackServerBladePXEBootModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerBladePXEBootModeStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladePXEBootModeStatus.setDescription("Indicates whether the target blade server is in PXE boot mode. This will be Active(3) if the blade server has this feature enbled, Inactive (2) if not, or Unknown(1) if it can't be determined.")
cpqRackServerBladePendingBootOrderChange = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("firstPXE", 3), ("firstHDD", 4), ("firstRBSU", 5), ("oncePXE", 6), ("onceHDD", 7), ("onceRBSU", 8), ("alwaysPXE", 9), ("alwaysHDD", 10), ("alwaysRBSU", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqRackServerBladePendingBootOrderChange.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerBladePendingBootOrderChange.setDescription('Blade server pending boot order setting change state. This value will be one of the following: other(1) - Unknown or cannot be determined none(2) - No Changes firstPXE(3) - Boot To Pre-Boot eXecution (PXE) First firstHDD(4) - First Boot To Local HD firstRBSU(5) - First Boot To ROM Based Setup Utility oncePXE(6) - Boot To Pre-Boot eXecution (PXE) Once onceHDD(7) - Boot To Local HD Once onceRBSU(8) - Boot To ROM Based Setup Utility Once alwaysPXE(9) - Always Boot To Pre-Boot eXecution (PXE) alwaysHDD(10) - Always Boot To Local HD alwaysRBSU(11) - Always Boot To ROM Based Setup Utility This will be other(1) if the rack does not report this information or if it could not be determined.')
cpqRackServerNetworkingTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1), )
if mibBuilder.loadTexts: cpqRackServerNetworkingTable.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerNetworkingTable.setDescription('A table of rack server networking information.')
cpqRackServerNetworkingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackServerNetworkingRack"), (0, "CPQRACK-MIB", "cpqRackServerNetworkingChassis"), (0, "CPQRACK-MIB", "cpqRackServerNetworkingIndex"))
if mibBuilder.loadTexts: cpqRackServerNetworkingEntry.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerNetworkingEntry.setDescription('A rack server networking description.')
cpqRackServerNetworkingRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingRack.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerNetworkingRack.setDescription('A number that uniquely specifies this rack.')
cpqRackServerNetworkingChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackServerNetworkingChassis.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackServerNetworkingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingIndex.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerNetworkingIndex.setDescription('A number that uniquely specifies this server within the enclosure.')
cpqRackServerNetworkingName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingName.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerNetworkingName.setDescription('The name of the server. The string will be empty if it could not be determined.')
cpqRackServerNetworkingEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingEnclosureName.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerNetworkingEnclosureName.setDescription('The name of the enclosure which contains the server. The string will be empty if the enclosure does not report the name or if it could not be determined.')
cpqRackServerNetworkingEthernetInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingEthernetInterfaces.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerNetworkingEthernetInterfaces.setDescription('A number that specifies the amount of Ethernet network interfaces in the server.')
cpqRackServerNetworkingEthernetMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerNetworkingEthernetMACAddress.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerNetworkingEthernetMACAddress.setDescription('The MAC address for the Ethernet NIC populated in the server. The string will be empty if it could not be determined.')
cpqRackServerTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1), )
if mibBuilder.loadTexts: cpqRackServerTempSensorTable.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorTable.setDescription('A table of rack server temperature sensor information.')
cpqRackServerTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackServerTempSensorRack"), (0, "CPQRACK-MIB", "cpqRackServerTempSensorChassis"), (0, "CPQRACK-MIB", "cpqRackServerTempSensorIndex"))
if mibBuilder.loadTexts: cpqRackServerTempSensorEntry.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorEntry.setDescription('A rack server temperature sensor description.')
cpqRackServerTempSensorRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorRack.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorRack.setDescription('A number that uniquely specifies this rack.')
cpqRackServerTempSensorChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorChassis.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorChassis.setDescription('A number that uniquely specifies this enclosure in the rack.')
cpqRackServerTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorIndex.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorIndex.setDescription('A number that uniquely specifies this server within the enclosure.')
cpqRackServerTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorName.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorName.setDescription('The name of the server. The string will be empty if it could not be determined.')
cpqRackServerTempSensorEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorEnclosureName.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorEnclosureName.setDescription('The name of the enclosure which contains the server. The string will be empty if the enclosure does not report the name or if it could not be determined.')
cpqRackServerTempSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorCount.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorCount.setDescription('A number that specifies the amount of temperature sensors in the server.')
cpqRackServerTempSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorLocation.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorLocation.setDescription('The location description of the temperature sensor within the blade server. The string will be empty if it could not be determined.')
cpqRackServerTempSensorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorCurrent.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorCurrent.setDescription('This is the current temperature sensor reading in degrees celsius. If this value cannot be determined by software, then a value of -1 will be returned.')
cpqRackServerTempSensorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorThreshold.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorThreshold.setDescription('This is the threshold temperature sensor setting in degrees celsius. This is the temperature in which the sensor will be considered to be in a tripped state this causing some action to occur depending on the type of the sensor. The action of temperature sensor threshold will be indicated by the cpqRackServerTempSensorType item. If the type is blowout(5), then the temperature sensor will cause the fans to speed up. If the type is caution(9), then the temperature sensor is in a degraded state. If the type is critical(15), then the enclosure will be considered as in a failed state. If this value cannot be determined by software, then a value of -1 will be returned.')
cpqRackServerTempSensorCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorCondition.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorCondition.setDescription('The Temperature sensor condition. This value will be one of the following: other(1) Temperature could not be determined. ok(2) The temperature sensor is within the normal operating range. degraded(3) The temperature sensor is outside of the normal operating range. failed(4) The temperature sensor detects a condition that could possibly overheat the system. The system will automatically shutdown if the failed(4) condition results, so it is unlikely that this value will ever be returned by the agent.')
cpqRackServerTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 15))).clone(namedValues=NamedValues(("other", 1), ("blowout", 5), ("caution", 9), ("critical", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackServerTempSensorType.setStatus('optional')
if mibBuilder.loadTexts: cpqRackServerTempSensorType.setDescription('This specifies the type of this instance of temperature sensor. This value will be one of the following: other(1) Temperature threshold type could not be determined. blowout(5) If a blowout(5) temperature sensor reaches its threshold, the fan or fans in the area of the temperature sensor will increase in speed in an attempt to reduce the temperature before a caution or critical threshold is reached. caution(9) If a caution(9) temperature sensor reaches its threshold, the cpqRackServerTempSensorCondition will be set to degraded(3) and the system will either continue or shutdown depending on the local blade server policy settings. critical(15) If a critical(15) temperature sensor reaches its threshold, cpqRackServerTempSensorCondition will be set to failed(4) and the blade server will shutdown.')
cpqRackPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1), )
if mibBuilder.loadTexts: cpqRackPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyTable.setDescription('A table of rack power supply information.')
cpqRackPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackPowerSupplyRack"), (0, "CPQRACK-MIB", "cpqRackPowerSupplyChassis"), (0, "CPQRACK-MIB", "cpqRackPowerSupplyIndex"))
if mibBuilder.loadTexts: cpqRackPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyEntry.setDescription('A rack power supply description.')
cpqRackPowerSupplyRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyRack.setDescription('A number that uniquely specifies this rack.')
cpqRackPowerSupplyChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyChassis.setDescription('A number that uniquely specifies this power enclosure in the rack.')
cpqRackPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyIndex.setDescription('A number that uniquely specifies this power supply in the enclosure.')
cpqRackPowerSupplyEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyEnclosureName.setDescription('The name of the power supply enclosure in which this power supply resides. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackPowerSupplySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplySerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplySerialNum.setDescription('The serial number of the power supply. The string will be empty if the power supply does not report the serial number.')
cpqRackPowerSupplyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyPartNumber.setDescription('The part number of the power supply. The string will be empty if the power supply does not report this function.')
cpqRackPowerSupplySparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplySparePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplySparePartNumber.setDescription('The spare part number of the power supply. The string will be empty if the power supply does not report this function.')
cpqRackPowerSupplyFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyFWRev.setDescription('The firmware revision of the power supply. The string will be empty if the power supply does not report the firmware revision.')
cpqRackPowerSupplyMaxPwrOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyMaxPwrOutput.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyMaxPwrOutput.setDescription('The maximum power output of the power supply in watts. The value will be -1 if the power supply does not report the value.')
cpqRackPowerSupplyCurPwrOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyCurPwrOutput.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyCurPwrOutput.setDescription('The current power output of the power supply in watts. The value will be -1 if the power supply does not report the value.')
cpqRackPowerSupplyPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyPosition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyPosition.setDescription('The position of the power supply within the power enclosure. This will be -1 if the power enclosure does not report the power supply information or it could not be determined.')
cpqRackPowerSupplyIntakeTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyIntakeTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyIntakeTemp.setDescription('The current air temperature at the intake of the power supply in degrees celsius. The value will be -1 if the power supply does not report the value.')
cpqRackPowerSupplyExhaustTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyExhaustTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyExhaustTemp.setDescription('The current air temperature at the exhaust of the power supply in degrees celsius. The value will be -1 if the power supply does not report the value.')
cpqRackPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noError", 1), ("generalFailure", 2), ("bistFailure", 3), ("fanFailure", 4), ("tempFailure", 5), ("interlockOpen", 6), ("epromFailed", 7), ("vrefFailed", 8), ("dacFailed", 9), ("ramTestFailed", 10), ("voltageChannelFailed", 11), ("orringdiodeFailed", 12), ("brownOut", 13), ("giveupOnStartup", 14), ("nvramInvalid", 15), ("calibrationTableInvalid", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyStatus.setDescription('The status of the power supply.')
cpqRackPowerSupplyInputLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noError", 1), ("lineOverVoltage", 2), ("lineUnderVoltage", 3), ("lineHit", 4), ("brownOut", 5), ("linePowerLoss", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyInputLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyInputLineStatus.setDescription('The status of line input power.')
cpqRackPowerSupplyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyPresent.setDescription('This specifies if the power supply described is present in the enclosure.')
cpqRackPowerSupplyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyCondition.setDescription('The condition of the power supply. This value will be one of the following: other(1) The status could not be determined or not present. ok(2) The power supply is operating normally. degraded(3) A temperature sensor, fan or other power supply component is outside of normal operating range. failed(4) A power supply component detects a condition that could possibly damage the system.')
cpqRackPowerSupplyEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 5, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackPowerSupplyEnclosureSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackPowerSupplyEnclosureSerialNum.setDescription('The serial number of the power supply enclosure in which this power supply resides. The string will be empty if the enclosure does not report the serial number or it could not be determined.')
cpqRackNetConnectorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1), )
if mibBuilder.loadTexts: cpqRackNetConnectorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorTable.setDescription('A table of rack network connector information.')
cpqRackNetConnectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackNetConnectorRack"), (0, "CPQRACK-MIB", "cpqRackNetConnectorChassis"), (0, "CPQRACK-MIB", "cpqRackNetConnectorIndex"))
if mibBuilder.loadTexts: cpqRackNetConnectorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorEntry.setDescription('A rack network connector description.')
cpqRackNetConnectorRack = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorRack.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorRack.setDescription('A number that uniquely specifies this rack.')
cpqRackNetConnectorChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorChassis.setDescription('A number that uniquely specifies this server enclosure in the rack.')
cpqRackNetConnectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorIndex.setDescription('A number that uniquely specifies this network connector in the rack.')
cpqRackNetConnectorEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorEnclosureName.setDescription('The name of the network connector enclosure. The string will be empty if the enclosure does not report the name or it could not be determined.')
cpqRackNetConnectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorName.setDescription('The name of the network connector. The string will be empty if the network connector does not report the name or it could not be determined.')
cpqRackNetConnectorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorModel.setDescription('The model name of the network connector. The string will be empty if the network connector does not report the model information.')
cpqRackNetConnectorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorSerialNum.setDescription('The serial number of the network connector. The string will be empty if the network connector does not report the serial number.')
cpqRackNetConnectorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorPartNumber.setDescription('The part number of the network connector. The string will be empty if the enclosure does not report this function.')
cpqRackNetConnectorSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorSparePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorSparePartNumber.setDescription('The spare part number of the network connector. The string will be empty if the enclosure does not report this function.')
cpqRackNetConnectorFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorFWRev.setDescription('The firmware revision of the network connector. The string will be empty if the network connector does not report the firmware revision.')
cpqRackNetConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorType.setDescription('The type of network connector within the enclosure.')
cpqRackNetConnectorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorLocation.setDescription('The location of the network connector within the enclosure.')
cpqRackNetConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorPresent.setDescription('This specifies if the network connector described is present in the enclosure.')
cpqRackNetConnectorHasFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorHasFuses.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorHasFuses.setDescription('The network connector contains fuses. This will be true(2) is the network connector contains fuses. The cpqRackCommonEnclosureFuseTable will contain the fuse specific information. Match the cpqRackNetworkEnclosureSerialNum in this table to the serial number in the cpqRackCommonEnclosureFusTable to get complete information on the fuses.')
cpqRackNetConnectorEnclosureSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorEnclosureSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorEnclosureSerialNum.setDescription('The serial number of the enclosure containing the network connector. The string will be empty if the enclosure does not report the serial number or it could not be determined.')
cpqRackNetConnectorTechnologyType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorTechnologyType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorTechnologyType.setDescription('The type of network connector within the enclosure.')
cpqRackNetConnectorDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 22, 2, 6, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noconnect", 1), ("network", 2), ("fibrechannel", 3), ("sas", 4), ("inifiband", 5), ("pciexpress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackNetConnectorDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackNetConnectorDeviceType.setDescription('The type of interrconnect in the enclosure. This will be -1 if it is not reported or can not be deteremined.')
cpqRackSystemObjectIdentification = MibScalar((1, 3, 6, 1, 4, 1, 232, 22, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqRackSystemObjectIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: cpqRackSystemObjectIdentification.setDescription('The hardware identification string. The string will reported by the rack firmware.')
cpqRackNameChanged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackSerialNum"), ("CPQRACK-MIB", "cpqRackTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackNameChanged.setDescription('Rack name has changed. This trap signifies that an agent or utility has changed the name of the rack. Each of the server blades in each of the enclosure within the rack will be updated to reflect the new rack name. It may take several minutes for the rack name change to be propagated throughout the entire rack. User Action: None.')
cpqRackEnclosureNameChanged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureModel"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureNameChanged.setDescription('The enclosure name has changed. This trap signifies that an agent or utility has changed the name of an enclosure within the rack. Each of the components within the rack will be updated to reflect the new enclosure name. It may take several minutes for the enclosure name change to be propagated throughout the entire enclosure. User Action: None.')
cpqRackEnclosureRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureModel"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureRemoved.setDescription('The enclosure has been removed. This trap signifies that an enclosure has been removed from the rack. User Action: None.')
cpqRackEnclosureInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureModel"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureInserted.setDescription('The enclosure has been inserted. This trap signifies that an enclosure has been inserted into the rack. User Action: None.')
cpqRackEnclosureTempFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTempLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureTempFailed.setDescription('The enclosure temperature status has been set to failed. This trap signifies that a enclosure temperature sensor has been tripped indicating an overheat condition. User Action: Shutdown the enclosure and possibly the rack as soon as possible. Insure all fans are working properly and that air flow in the rack has not been blocked.')
cpqRackEnclosureTempDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTempLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureTempDegraded.setDescription('The enclosure temperature status has been set to degraded. This trap signifies that an enclosure temperature sensor has been tripped indicating a possible overheat condition. User Action: Shutdown the enclosure and possibly the rack as soon as possible. Insure all fans are working properly and that air flow in the rack has not been blocked.')
cpqRackEnclosureTempOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTempLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureTempOk.setDescription('The enclosure temperature status has been set to ok. This trap signifies that an enclosure temperature sensor has returned to normal. User Action: None.')
cpqRackEnclosureFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureFanFailed.setDescription('The enclosure fan status has been set to failed. This trap signifies that an enclosure fan has failed and no other fans in the redundant fan group are operating. This may result in overheating of the enclosure. User Action: Replace the fan as soon as possible.')
cpqRackEnclosureFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureFanDegraded.setDescription('The enclosure fan status has been set to degraded. This trap signifies that an enclosure fan has failed but other fans in the redundant fan group are still operating. This may result in overheating of the enclosure. User Action: Replace the fan as soon as possible.')
cpqRackEnclosureFanOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureFanOk.setDescription('The enclosure fan status has been set to ok. This trap signifies that an enclosure fan has returned to normal operation. User Action: None.')
cpqRackEnclosureFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureFanRemoved.setDescription('The enclosure fan has been removed. User Action: None.')
cpqRackEnclosureFanInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFanSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureFanInserted.setDescription('The enclosure fan has been inserted. User Action: None.')
cpqRackPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerSupplyFailed.setDescription('The power supply status has been set to failed. This trap signifies that a power supply has failed. User Action: Replace the power supply as soon as possible.')
cpqRackPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerSupplyDegraded.setDescription('The power supply status has been set to degraded. This trap signifies that a power supply has degraded. User Action: Replace the power supply as soon as possible.')
cpqRackPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerSupplyOk.setDescription('The power supply status has been set to ok. This trap signifies that a power supply has returned to normal operation. User Action: None.')
cpqRackPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerSupplyRemoved.setDescription('The power supply has been removed. User Action: None.')
cpqRackPowerSupplyInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplySerialNum"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerSupplyInserted.setDescription('The power supply has been inserted. User Action: None.')
cpqRackPowerSubsystemNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerSubsystemNotRedundant.setDescription('The rack power subsystem is no longer in a redundant state. User Action: Replace any failed power supplies as soon as possible to return the system to a redundant state.')
cpqRackPowerSubsystemLineVoltageProblem = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerSupplyEnclosureName"), ("CPQRACK-MIB", "cpqRackPowerSupplyPosition"), ("CPQRACK-MIB", "cpqRackPowerSupplyFWRev"), ("CPQRACK-MIB", "cpqRackPowerSupplyInputLineStatus"), ("CPQRACK-MIB", "cpqRackPowerSupplySparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerSubsystemLineVoltageProblem.setDescription('The rack power supply detected an input line voltage problem. User Action: Check the power input for the power supply or replace any failed power supplies as soon as possible.')
cpqRackPowerSubsystemOverloadCondition = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackPowerEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerSubsystemOverloadCondition.setDescription('The rack power subsystem overload condition. User Action: Replace any failed power supplies as soon as possible to return the system to a redundant state.')
cpqRackPowerShedAutoShutdown = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerShedAutoShutdown.setDescription('Server shutdown due to power shedding. The server blade was shutdown due to a lack of power. User Action: Check power connections or add power supplies.')
cpqRackServerPowerOnFailedNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerPowerOnFailedNotRedundant.setDescription('Server power on prevented to preserve redundancy. There is not enough power to power on the server blade and maintain redundancy for the other blades in the enclosure. User Action: Check power connections or add power supplies.')
cpqRackServerPowerOnFailedNotEnoughPower = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerPowerOnFailedNotEnoughPower.setDescription('Inadequate power to power on. There is not enough power to power on the server blade. User Action: Check power connections or add power supplies.')
cpqRackServerPowerOnFailedEnclosureNotFound = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22024)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerPowerOnFailedEnclosureNotFound.setDescription('Inadequate power to power on. There is not enough power to power on the server blade. The server enclosure micro-controller was not found. User Action: Check server enclosure connections or add power supplies.')
cpqRackServerPowerOnFailedPowerChassisNotFound = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerPowerOnFailedPowerChassisNotFound.setDescription('Inadequate power to power on. There is not enough power to power on the server blade. The power enclosure micro-controller was not found. User Action: Check power enclosure connections or add power supplies.')
cpqRackServerPowerOnManualOverride = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerPowerOnManualOverride.setDescription('Server power on via manual override. The server blade was powered on by a manual override. User Action: None.')
cpqRackFuseOpen = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22027)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureFuseLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackFuseOpen.setDescription('Fuse open. The fuse has been tripped. User Action: Check enclosure and / or blade power connections and reset the fuse.')
cpqRackServerBladeRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22028)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeRemoved.setDescription('Server blade removed. The server blade has been removed from the enclosure. User Action: None.')
cpqRackServerBladeInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22029)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeInserted.setDescription('Server blade inserted. The server blade has been inserted into the enclosure. User Action: None.')
cpqRackPowerChassisNotLoadBalanced = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22030)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerChassisNotLoadBalanced.setDescription('Power subsystem not load balanced. The power subsystem is out of balance for this power enclosure. User Action: Check the power enclosure and power supplies. Replace any failed or degraded power supplies. Add additional power supplies if needed.')
cpqRackPowerChassisDcPowerProblem = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22031)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerChassisDcPowerProblem.setDescription('Power subsystem DC power problem. There is a power subsystem DC power problem for this power enclosure. User Action: Check the power enclosure and power supplies. Replace any failed or degraded power supplies.')
cpqRackPowerChassisAcFacilityPowerExceeded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22032)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerChassisAcFacilityPowerExceeded.setDescription('Power subsystem AC facility input power exceeded. There is a power subsystem Power subsystem AC facility input power exceeded for this power enclosure. User Action: Check the power enclosure and power supplies. Replace any failed or degraded power supplies.')
cpqRackPowerUnknownPowerConsumption = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22033)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerUnknownPowerConsumption.setDescription('Unknown power consumption. There is an unknown power consumer drawing power. User Action: Check the power enclosure and power supplies. Replace any failed or degraded power supplies.')
cpqRackPowerChassisLoadBalancingWireMissing = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22034)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerChassisLoadBalancingWireMissing.setDescription('Power subsystem load balancing wire missing. The power subsystem load balancing wire missing. User Action: Connect the load balancing wire.')
cpqRackPowerChassisTooManyPowerChassis = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22035)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerChassisTooManyPowerChassis.setDescription('Power subsystem has too may power enclosures. The maximum number of power enclosures has been exceeded. User Action: Remove the extra power enclosure.')
cpqRackPowerChassisConfigError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22036)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackPowerChassisConfigError.setDescription('Power subsystem improperly configured. The power subsystem has been improperly configured. User Action: Check the cabling of the power enclosure.')
cpqRackEnclosureManagerDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22037)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureManagerDegraded.setDescription('The Onboard Administrator or other management processor status has been set to degraded. This trap signifies that either an Onboard Administrator has failed but the other Onboard Administrator is still operating, or one or more management processors is in a non-optimal operating state. User Action: For C-Class enclosures, replace the Onboard Administrator as soon as possible. For all others please refer to product documenation for possible corrective actions')
cpqRackEnclosureManagerOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22038)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureManagerOk.setDescription("The Onboard Administrator or other management processor's status has been set to ok. This trap signifies that an Onboard Administrator or other management processor has returned to normal operation. User Action: None.")
cpqRackEnclosureManagerRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22039)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureManagerRemoved.setDescription('The Onboard Administrator has been removed. User Action: None.')
cpqRackEnclosureManagerInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22040)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackEnclosureManagerInserted.setDescription('The Onboard Administrator or other management processor has been inserted. User Action: None.')
cpqRackManagerPrimaryRole = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22041)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureName"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerLocation"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureManagerSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackManagerPrimaryRole.setDescription('The Onboard Administrator or other management processor has taken the role of primary. User Action: None.')
cpqRackServerBladeEKeyingFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22042)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeEKeyingFailed.setDescription('The server blade e-keying has failed. This trap signifies that a server blade e-keying has failed and there is a port mapping problem between a server mezz card and the interconnect. User Action: Reconfigure server blade mezz cards.')
cpqRackServerBladeEKeyingOK = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22043)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeEKeyingOK.setDescription('The server blade e-keying is ok. This trap signifies that a server blade e-keying has returned to normal operation. User Action: None.')
cpqRackNetConnectorRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22044)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackNetConnectorRemoved.setDescription('Interconnect removed. The interconnect has been removed from the enclosure. User Action: None.')
cpqRackNetConnectorInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22045)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackNetConnectorInserted.setDescription('Interconnect inserted. The interconnect has been inserted into the enclosure. User Action: None.')
cpqRackNetConnectorFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22046)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackNetConnectorFailed.setDescription('The interconnect status has been set to failed. This trap signifies that a interconnect has failed. User Action: Replace the interconnect as soon as possible.')
cpqRackNetConnectorDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22047)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackNetConnectorDegraded.setDescription('The interconnect status has been set to degraded. This trap signifies that a interconnect has degraded. User Action: Replace the interconnect as soon as possible.')
cpqRackNetConnectorOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22048)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackNetConnectorEnclosureName"), ("CPQRACK-MIB", "cpqRackNetConnectorName"), ("CPQRACK-MIB", "cpqRackNetConnectorLocation"), ("CPQRACK-MIB", "cpqRackNetConnectorSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackNetConnectorOk.setDescription('The interconnect status has been set to ok. This trap signifies that a interconnect has returned to normal operation. User Action: None.')
cpqRackServerBladeToLowPower = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22049)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeToLowPower.setDescription('The server blade requested to low power. User Action: None.')
cpqRackServerBladeRemoved2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22050)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeRemoved2.setDescription('Server blade removed. The server blade has been removed from the enclosure. User Action: None.')
cpqRackServerBladeInserted2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22051)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeInserted2.setDescription('Server blade inserted. The server blade has been inserted into the enclosure. User Action: None.')
cpqRackServerBladeStatusRepaired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22052)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladeProductId"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeStatusRepaired.setDescription('Server blade repaired. The server blade status has changed to OK. User Action: None.')
cpqRackServerBladeStatusDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22053)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladeProductId"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeFaultMajor"), ("CPQRACK-MIB", "cpqRackServerBladeFaultMinor"), ("CPQRACK-MIB", "cpqRackServerBladeFaultDiagnosticString"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeStatusDegraded.setDescription('Server blade health status Degraded. The server blade health status has changed to Degraded. User Action: Check blade server and enclosure SYSLOG.')
cpqRackServerBladeStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22054)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladeProductId"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeFaultMajor"), ("CPQRACK-MIB", "cpqRackServerBladeFaultMinor"), ("CPQRACK-MIB", "cpqRackServerBladeFaultDiagnosticString"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeStatusCritical.setDescription('Server blade health status Critical. The server blade health status has changed to Critical. User Action: Check blade server and enclosure SYSLOG.')
cpqRackServerBladeGrpCapTimeout = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22055)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeGrpCapTimeout.setDescription('The server blade is not responding to the group capper. The server blade is not responding to capping requests from the enclosure group capper User Action: Reset the iLO management processor.')
cpqRackServerBladeUnexpectedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22056)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeUnexpectedShutdown.setDescription('Server blade shutdown unexpectadly. An unexpected shutdown event has occurred for this server blade. User Action: Check blade server and enclosure SYSLOG.')
cpqRackServerBladeMangementControllerFirmwareUpdating = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22057)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeManagementDeviceFirmwareFlashingStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeMangementControllerFirmwareUpdating.setDescription("Server blade's management controller firmware updating. This server blade's management controller has started updating it's firmware. User Action: None.")
cpqRackServerBladeMangementControllerFirmwareUpdateComplete = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22058)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeManagementDeviceFirmwareFlashingStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeMangementControllerFirmwareUpdateComplete.setDescription("Server blade's management controller firmware update has completed. This server blade's management controller has finished updating it's firmware. User Action: None.")
cpqRackServerBladeSystemBIOSFirmwareUpdating = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22059)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeSystemBIOSFlashingStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeSystemBIOSFirmwareUpdating.setDescription("Server blade's system BIOS firmware updating. This server blade's system BIOS has started updating. User Action: None.")
cpqRackServerBladeSystemBIOSFirmwareUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22060)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeSystemBIOSFlashingStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeSystemBIOSFirmwareUpdateCompleted.setDescription("Server blade's system BIOS firmware update complete. This server blade's system BIOS has completed updating. User Action: None.")
cpqRackServerBladeFrontIOBlankingActive = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22061)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeFrontIOBlankingModeStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeFrontIOBlankingActive.setDescription('Server blade has disabled front IO ports. Front IO blanking status has changed to active for this server blade. User Action: None.')
cpqRackServerBladeRemoteFrontIOBlankingInactive = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22062)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeFrontIOBlankingModeStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeRemoteFrontIOBlankingInactive.setDescription('Server blade has front IO blanking mode now inactive. Front IO blanking status has changed to inactive for this server blade. User Action: None.')
cpqRackServerBladeDiagnosticAdaptorInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22063)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeDiagnosticAdaptorPresence"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeDiagnosticAdaptorInserted.setDescription('Server blade diagnostic adaptor inserted. Blade diagnostic adaptor status has changed to inserted for this server blade. User Action: None.')
cpqRackServerBladeDiagnosticAdaptorRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22064)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladeDiagnosticAdaptorPresence"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeDiagnosticAdaptorRemoved.setDescription('Server blade diagnostic adaptor removed. Blade diagnostic adaptor status has changed to removed for this server blade. User Action: None.')
cpqRackServerBladeEnteredPXEBootMode = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22065)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePXEBootModeStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeEnteredPXEBootMode.setDescription('Server blade has entered PXE Boot Mode. Server blade Pre-Boot-eXecution (PXE) Mode started. User Action: None.')
cpqRackServerBladeExitedPXEBootMode = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22066)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePXEBootModeStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeExitedPXEBootMode.setDescription('Server blade has exited PXE Boot Mode. Server blade Pre-Boot-eXecution (PXE) Mode exited. User Action: None.')
cpqRackServerBladeWarmReset = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22067)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePOSTStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladeWarmReset.setDescription('Server blade has been warm reset. Server blade has experienced a warm reset. User Action: None.')
cpqRackServerBladePOSTCompleted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22068)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePOSTStatus"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladePOSTCompleted.setDescription('Server blade system BIOS POST complete. Server blade has completed system BIOS Power-On-Self-Test (POST). User Action: None.')
cpqRackServerBladePoweredOn = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22069)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePowered"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladePoweredOn.setDescription('Server blade has powered on. User Action: None.')
cpqRackServerBladePoweredOff = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,22070)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQRACK-MIB", "cpqRackName"), ("CPQRACK-MIB", "cpqRackUid"), ("CPQRACK-MIB", "cpqRackServerBladeEnclosureName"), ("CPQRACK-MIB", "cpqRackServerBladeName"), ("CPQRACK-MIB", "cpqRackServerBladePosition"), ("CPQRACK-MIB", "cpqRackServerBladeSparePartNumber"), ("CPQRACK-MIB", "cpqRackCommonEnclosureSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeSerialNum"), ("CPQRACK-MIB", "cpqRackServerBladeUid"), ("CPQRACK-MIB", "cpqRackServerBladePowered"), ("CPQRACK-MIB", "cpqRackCommonEnclosureTrapSequenceNum"))
if mibBuilder.loadTexts: cpqRackServerBladePoweredOff.setDescription('Server blade has powered off. User Action: None.')
mibBuilder.exportSymbols("CPQRACK-MIB", cpqRackEnclosureFanOk=cpqRackEnclosureFanOk, cpqRackServerTempSensorEntry=cpqRackServerTempSensorEntry, cpqRackPowerSupplyEnclosureName=cpqRackPowerSupplyEnclosureName, cpqRackServerEnclosureTable=cpqRackServerEnclosureTable, cpqRackServerBladeRack=cpqRackServerBladeRack, cpqRackEnclosureManagerOk=cpqRackEnclosureManagerOk, cpqRackServerTempSensorCount=cpqRackServerTempSensorCount, cpqRackPowerSupplyIndex=cpqRackPowerSupplyIndex, cpqRackNetConnectorType=cpqRackNetConnectorType, cpqRackCommonEnclosureManagerEntry=cpqRackCommonEnclosureManagerEntry, cpqRackCommonEnclosureManagerEnclosureName=cpqRackCommonEnclosureManagerEnclosureName, cpqRackCommonEnclosureFruIndex=cpqRackCommonEnclosureFruIndex, cpqRackCommonEnclosureFanSparePartNumber=cpqRackCommonEnclosureFanSparePartNumber, cpqRackPowerSupplyOk=cpqRackPowerSupplyOk, cpqRackServerBladePoweredOff=cpqRackServerBladePoweredOff, cpqRackPowerSupplyFWRev=cpqRackPowerSupplyFWRev, cpqRackCommonEnclosureFanCondition=cpqRackCommonEnclosureFanCondition, cpqRackCommonEnclosureFuseCondition=cpqRackCommonEnclosureFuseCondition, cpqRackServerEnclosureMaxNumBladesY=cpqRackServerEnclosureMaxNumBladesY, cpqRackCommonEnclosureFanRedundantGroupId=cpqRackCommonEnclosureFanRedundantGroupId, cpqRackCommonEnclosureFanPresent=cpqRackCommonEnclosureFanPresent, cpqRackServerBladeRemoteFrontIOBlankingInactive=cpqRackServerBladeRemoteFrontIOBlankingInactive, cpqRackCommonEnclosureFuseChassis=cpqRackCommonEnclosureFuseChassis, cpqRackServerBladeMangementControllerFirmwareUpdateComplete=cpqRackServerBladeMangementControllerFirmwareUpdateComplete, cpqRackServerEnclosureEntry=cpqRackServerEnclosureEntry, cpqRackCommonEnclosureDepth=cpqRackCommonEnclosureDepth, cpqRackCommonEnclosureFanPartNumber=cpqRackCommonEnclosureFanPartNumber, cpqRackServerBladeDiagnosticAdaptorPresence=cpqRackServerBladeDiagnosticAdaptorPresence, cpqRackCommonEnclosureFruSparePartNumber=cpqRackCommonEnclosureFruSparePartNumber, cpqRackServerBladeRemoved=cpqRackServerBladeRemoved, cpqRackServerNetworkingEthernetMACAddress=cpqRackServerNetworkingEthernetMACAddress, cpqRackServerBladeSystemBIOSFlashingStatus=cpqRackServerBladeSystemBIOSFlashingStatus, cpqRackCommonEnclosureFanEntry=cpqRackCommonEnclosureFanEntry, cpqRackServerBladeEKeyingFailed=cpqRackServerBladeEKeyingFailed, cpqRackServerBladeEKeyingOK=cpqRackServerBladeEKeyingOK, cpqRackAsset=cpqRackAsset, cpqRackServerTempSensorThreshold=cpqRackServerTempSensorThreshold, cpqRackEnclosureManagerDegraded=cpqRackEnclosureManagerDegraded, cpqRackCommonEnclosureSparePartNumber=cpqRackCommonEnclosureSparePartNumber, cpqRackServerTempSensorName=cpqRackServerTempSensorName, cpqRackServerBladeIndex=cpqRackServerBladeIndex, cpqRackPowerSupplyTable=cpqRackPowerSupplyTable, cpqRackPowerSupplyStatus=cpqRackPowerSupplyStatus, cpqRackEnclosureTempOk=cpqRackEnclosureTempOk, cpqRackCommonEnclosureTrapSequenceNum=cpqRackCommonEnclosureTrapSequenceNum, cpqRackCommonEnclosureUUIDPrev=cpqRackCommonEnclosureUUIDPrev, cpqRackCommonEnclosureSerialNumNext=cpqRackCommonEnclosureSerialNumNext, cpqRackCommonEnclosureProductId=cpqRackCommonEnclosureProductId, cpqRackPowerChassisNotLoadBalanced=cpqRackPowerChassisNotLoadBalanced, cpqRackCommonEnclosureNeighborNameNext=cpqRackCommonEnclosureNeighborNameNext, cpqRackServerBladeSlotsUsed=cpqRackServerBladeSlotsUsed, cpqRackPowerSupplyRemoved=cpqRackPowerSupplyRemoved, cpqRackAssetEntry=cpqRackAssetEntry, cpqRackCommonEnclosureFuseLocation=cpqRackCommonEnclosureFuseLocation, cpqRackCommonEnclosureManagerRedundant=cpqRackCommonEnclosureManagerRedundant, cpqRackServerBladeSparePartNumber=cpqRackServerBladeSparePartNumber, cpqRackServerBladeProductId=cpqRackServerBladeProductId, cpqRackCommonEnclosureProductIdPrev=cpqRackCommonEnclosureProductIdPrev, cpqRackServerBladeExitedPXEBootMode=cpqRackServerBladeExitedPXEBootMode, cpqRackEnclosureManagerInserted=cpqRackEnclosureManagerInserted, cpqRackPowerSupply=cpqRackPowerSupply, cpqRackCommonEnclosurePartNumber=cpqRackCommonEnclosurePartNumber, cpqRackPowerSupplyCondition=cpqRackPowerSupplyCondition, cpqRackServerTempSensorLocation=cpqRackServerTempSensorLocation, cpqRackCommonEnclosureManagerRole=cpqRackCommonEnclosureManagerRole, cpqRackServerPowerOnManualOverride=cpqRackServerPowerOnManualOverride, cpqRackNetConnector=cpqRackNetConnector, cpqRackCommonEnclosureManagerSerialNum=cpqRackCommonEnclosureManagerSerialNum, cpqRackNetConnectorEntry=cpqRackNetConnectorEntry, cpqRackPowerSupplyPartNumber=cpqRackPowerSupplyPartNumber, cpqRackCommonEnclosureTable=cpqRackCommonEnclosureTable, cpqRackCommonEnclosureName=cpqRackCommonEnclosureName, cpqRackEnclosureFanRemoved=cpqRackEnclosureFanRemoved, cpqRackPowerSupplyEntry=cpqRackPowerSupplyEntry, cpqRackPowerSupplyCurPwrOutput=cpqRackPowerSupplyCurPwrOutput, cpqRackPowerEnclosureCondition=cpqRackPowerEnclosureCondition, cpqRackCommonEnclosureSerialNum=cpqRackCommonEnclosureSerialNum, cpqRackServerBladeManagementDeviceFirmwareRevision=cpqRackServerBladeManagementDeviceFirmwareRevision, cpqRackCommonEnclosureProductIdNext=cpqRackCommonEnclosureProductIdNext, cpqRackInfo=cpqRackInfo, cpqRackPowerChassisAcFacilityPowerExceeded=cpqRackPowerChassisAcFacilityPowerExceeded, cpqRackServerBladeFaultDiagnosticString=cpqRackServerBladeFaultDiagnosticString, cpqRackCommonEnclosureFanEnclosureName=cpqRackCommonEnclosureFanEnclosureName, cpqRackServerBladeName=cpqRackServerBladeName, cpqRackServerTempSensorCondition=cpqRackServerTempSensorCondition, cpqRackServerBladeWidth=cpqRackServerBladeWidth, cpqRackCommonEnclosureManagerChassis=cpqRackCommonEnclosureManagerChassis, cpqRackCommonEnclosureFruEnclosureName=cpqRackCommonEnclosureFruEnclosureName, cpqRackPowerSupplyIntakeTemp=cpqRackPowerSupplyIntakeTemp, cpqRackServerBladeUid=cpqRackServerBladeUid, cpqRackMibRevMinor=cpqRackMibRevMinor, cpqRackServerBladeEnclosureSerialNum=cpqRackServerBladeEnclosureSerialNum, cpqRackServerBladePOSTCompleted=cpqRackServerBladePOSTCompleted, cpqRackServerBladeMangementControllerFirmwareUpdating=cpqRackServerBladeMangementControllerFirmwareUpdating, cpqRackAssetTable=cpqRackAssetTable, cpqRackNetConnectorInserted=cpqRackNetConnectorInserted, cpqRackEnclosureInserted=cpqRackEnclosureInserted, cpqRackServerEnclosureRack=cpqRackServerEnclosureRack, cpqRackServerTempSensorType=cpqRackServerTempSensorType, cpqRackCommonEnclosureFuseIndex=cpqRackCommonEnclosureFuseIndex, cpqRackServerTempSensorTable=cpqRackServerTempSensorTable, cpqRackServerBladeFaultMinor=cpqRackServerBladeFaultMinor, cpqRackServerBladePartNumber=cpqRackServerBladePartNumber, cpqRackPowerSupplyInserted=cpqRackPowerSupplyInserted, cpqRackServerEnclosureMaxNumBlades=cpqRackServerEnclosureMaxNumBlades, cpqRackServerNetworkingRack=cpqRackServerNetworkingRack, cpqRackPowerEnclosurePwrFeedMax=cpqRackPowerEnclosurePwrFeedMax, cpqRackServerEnclosureMaxNumBladesX=cpqRackServerEnclosureMaxNumBladesX, cpqRackCommonEnclosureTempRack=cpqRackCommonEnclosureTempRack, cpqRackCommonEnclosureFusePresent=cpqRackCommonEnclosureFusePresent, cpqRackCommonEnclosureUUID=cpqRackCommonEnclosureUUID, cpqRackCommonEnclosureManagerTable=cpqRackCommonEnclosureManagerTable, cpqRackCommonEnclosureManagerPresent=cpqRackCommonEnclosureManagerPresent, cpqRackPower=cpqRackPower, cpqRackNetConnectorModel=cpqRackNetConnectorModel, cpqRackServerTempSensorEnclosureName=cpqRackServerTempSensorEnclosureName, cpqRackNetConnectorPresent=cpqRackNetConnectorPresent, cpqRackServerBladePowered=cpqRackServerBladePowered, cpqRackCommonEnclosureFruLocation=cpqRackCommonEnclosureFruLocation, cpqRackCommonEnclosureTempCurrent=cpqRackCommonEnclosureTempCurrent, cpqRackServerBladeStatusCritical=cpqRackServerBladeStatusCritical, cpqRackPowerEnclosureIndex=cpqRackPowerEnclosureIndex, cpqRackServerBladeSlotsUsedX=cpqRackServerBladeSlotsUsedX, cpqRackCommonEnclosureTempCondition=cpqRackCommonEnclosureTempCondition, cpqRackPowerSubsystemNotRedundant=cpqRackPowerSubsystemNotRedundant, cpqRackServerNetworkingIndex=cpqRackServerNetworkingIndex, cpqRackServerNetworkingEnclosureName=cpqRackServerNetworkingEnclosureName, cpqRackServerBladeDiagnosticAdaptorRemoved=cpqRackServerBladeDiagnosticAdaptorRemoved, cpqRackCommonEnclosureHeight=cpqRackCommonEnclosureHeight, cpqRackServerBladeUIDState=cpqRackServerBladeUIDState, cpqRackCommonEnclosureTempLocation=cpqRackCommonEnclosureTempLocation, cpqRackCommonEnclosureTempEntry=cpqRackCommonEnclosureTempEntry, cpqRackCommonEnclosureSerialNumPrev=cpqRackCommonEnclosureSerialNumPrev, cpqRackSerialNum=cpqRackSerialNum, cpqRackServerBladePXEBootModeStatus=cpqRackServerBladePXEBootModeStatus, cpqRackCommonEnclosureFruAssemblyPartNumber=cpqRackCommonEnclosureFruAssemblyPartNumber, cpqRackNetConnectorHasFuses=cpqRackNetConnectorHasFuses, cpqRackEnclosure=cpqRackEnclosure, cpqRackOsCommon=cpqRackOsCommon, cpqRackPowerEnclosureEntry=cpqRackPowerEnclosureEntry, cpqRackManagerPrimaryRole=cpqRackManagerPrimaryRole, cpqRackCommonEnclosureModel=cpqRackCommonEnclosureModel, cpqRackCommonEnclosureManagerPartNumber=cpqRackCommonEnclosureManagerPartNumber, cpqRackName=cpqRackName, cpqRackCommonEnclosureManagerUUID=cpqRackCommonEnclosureManagerUUID, cpqRackCommonEnclosureFanEnclosureSerialNum=cpqRackCommonEnclosureFanEnclosureSerialNum, cpqRackFuseOpen=cpqRackFuseOpen, cpqRackServerTempSensorIndex=cpqRackServerTempSensorIndex, cpqRackServerBladeSerialNum=cpqRackServerBladeSerialNum, cpqRackCommonEnclosureFanRack=cpqRackCommonEnclosureFanRack, cpqRackServerNetworkingChassis=cpqRackServerNetworkingChassis, cpqRackCommonEnclosureEntry=cpqRackCommonEnclosureEntry, cpqRackCommonEnclosureManagerRack=cpqRackCommonEnclosureManagerRack, cpqRackCommonEnclosureAddress=cpqRackCommonEnclosureAddress, cpqRackCommonEnclosureWidth=cpqRackCommonEnclosureWidth, cpqRackServerPowerOnFailedPowerChassisNotFound=cpqRackServerPowerOnFailedPowerChassisNotFound, cpqRackNetConnectorTechnologyType=cpqRackNetConnectorTechnologyType, cpqRackServerBladeSystemBIOSFirmwareUpdating=cpqRackServerBladeSystemBIOSFirmwareUpdating, cpqRackPowerSupplyRack=cpqRackPowerSupplyRack, cpqRackCommonEnclosureMgmtUID=cpqRackCommonEnclosureMgmtUID, cpqRackNetConnectorChassis=cpqRackNetConnectorChassis, cpqRackSysObjID=cpqRackSysObjID, cpqRackNetConnectorRemoved=cpqRackNetConnectorRemoved, cpqRackServerNetworkingEntry=cpqRackServerNetworkingEntry, cpqRackCommonEnclosureTempSensorIndex=cpqRackCommonEnclosureTempSensorIndex, cpqRackPowerSubsystemOverloadCondition=cpqRackPowerSubsystemOverloadCondition, cpqRackOsCommonPollFreq=cpqRackOsCommonPollFreq, cpqRackServerBladeSystemBIOSFirmwareUpdateCompleted=cpqRackServerBladeSystemBIOSFirmwareUpdateCompleted, cpqRackServerBladeHasManagementDevice=cpqRackServerBladeHasManagementDevice, cpqRackCommonEnclosureManagerEnclosureSerialNum=cpqRackCommonEnclosureManagerEnclosureSerialNum, cpqRackServerBladeStatusRepaired=cpqRackServerBladeStatusRepaired, cpqRackMibRevMajor=cpqRackMibRevMajor, cpqRackServerNetworkingName=cpqRackServerNetworkingName, cpqRackInterface=cpqRackInterface, cpqRackCommonEnclosureHasFuses=cpqRackCommonEnclosureHasFuses, cpqRackServer=cpqRackServer, cpqRackNetConnectorFailed=cpqRackNetConnectorFailed, cpqRackServerBladeHasFuses=cpqRackServerBladeHasFuses, cpqRackNetConnectorRack=cpqRackNetConnectorRack, cpqRackPowerEnclosureLoadBalanced=cpqRackPowerEnclosureLoadBalanced, cpqRackCommonEnclosureTempSensorEnclosureName=cpqRackCommonEnclosureTempSensorEnclosureName, cpqRackEnclosureTempDegraded=cpqRackEnclosureTempDegraded, cpqRackCommonEnclosureTempTable=cpqRackCommonEnclosureTempTable, cpqRackPowerEnclosureRack=cpqRackPowerEnclosureRack, cpqRackServerTempSensorCurrent=cpqRackServerTempSensorCurrent, cpqRackCommonEnclosureFruTable=cpqRackCommonEnclosureFruTable, cpqRackServerBladeStatusDegraded=cpqRackServerBladeStatusDegraded, cpqRackServerBladeInserted=cpqRackServerBladeInserted, cpqRackNetConnectorDeviceType=cpqRackNetConnectorDeviceType, cpqRackCommonEnclosureFruEntry=cpqRackCommonEnclosureFruEntry, cpqRackPowerSupplyChassis=cpqRackPowerSupplyChassis, cpqRackPowerShedAutoShutdown=cpqRackPowerShedAutoShutdown, cpqRackCommonEnclosureCondition=cpqRackCommonEnclosureCondition, cpqRackPowerSupplySerialNum=cpqRackPowerSupplySerialNum, cpqRackComponent=cpqRackComponent, cpqRackCommonEnclosureFuseRack=cpqRackCommonEnclosureFuseRack, cpqRackServerNetworkingEthernetInterfaces=cpqRackServerNetworkingEthernetInterfaces, cpqRackPowerSupplyEnclosureSerialNum=cpqRackPowerSupplyEnclosureSerialNum, cpqRackNetConnectorPartNumber=cpqRackNetConnectorPartNumber, cpqRackPowerSupplySparePartNumber=cpqRackPowerSupplySparePartNumber, cpqRackCommonEnclosureHasServerBlades=cpqRackCommonEnclosureHasServerBlades, cpqRackCommonEnclosureFanIndex=cpqRackCommonEnclosureFanIndex, cpqRackNameChanged=cpqRackNameChanged, cpqRackServerBladeFrontIOBlankingModeStatus=cpqRackServerBladeFrontIOBlankingModeStatus, cpqRackCommonEnclosureTempSensorEnclosureSerialNum=cpqRackCommonEnclosureTempSensorEnclosureSerialNum, cpqRackCommonEnclosureManagerCondition=cpqRackCommonEnclosureManagerCondition, cpqRackCommonEnclosureFuseEnclosureName=cpqRackCommonEnclosureFuseEnclosureName, cpqRackPowerSupplyMaxPwrOutput=cpqRackPowerSupplyMaxPwrOutput, cpqRackPowerSupplyDegraded=cpqRackPowerSupplyDegraded, cpqRackCommonEnclosureTempChassis=cpqRackCommonEnclosureTempChassis, cpqRackServerBladeChassis=cpqRackServerBladeChassis, cpqRackNetConnectorName=cpqRackNetConnectorName, cpqRackCommonEnclosureFWRev=cpqRackCommonEnclosureFWRev, cpqRackPowerSupplyInputLineStatus=cpqRackPowerSupplyInputLineStatus, cpqRackPowerSupplyPresent=cpqRackPowerSupplyPresent, cpqRackServerBladeInserted2=cpqRackServerBladeInserted2, cpqRackAssetIndex=cpqRackAssetIndex, cpqRackServerBladeStatus=cpqRackServerBladeStatus, cpqRackNetConnectorEnclosureSerialNum=cpqRackNetConnectorEnclosureSerialNum, cpqRackCommonEnclosureManagerFWRev=cpqRackCommonEnclosureManagerFWRev, cpqRackCommonEnclosureFruChassis=cpqRackCommonEnclosureFruChassis, cpqRackPowerChassisConfigError=cpqRackPowerChassisConfigError, cpqRackNetConnectorLocation=cpqRackNetConnectorLocation, cpqRackCommonEnclosureNeighborNamePrev=cpqRackCommonEnclosureNeighborNamePrev, cpqRackServerBladeSlotsUsedY=cpqRackServerBladeSlotsUsedY, cpqRackServerBladeFaultMajor=cpqRackServerBladeFaultMajor, cpqRackCommonEnclosureManagerIndex=cpqRackCommonEnclosureManagerIndex, cpqRackServerBladePresent=cpqRackServerBladePresent, cpqRackServerNetworking=cpqRackServerNetworking, cpqRackServerPowerOnFailedEnclosureNotFound=cpqRackServerPowerOnFailedEnclosureNotFound, cpqRackServerBladeTable=cpqRackServerBladeTable, cpqRackPowerEnclosureInputPwrType=cpqRackPowerEnclosureInputPwrType, cpqRackNetConnectorSerialNum=cpqRackNetConnectorSerialNum, cpqRackNetConnectorEnclosureName=cpqRackNetConnectorEnclosureName, cpqRackEnclosureNameChanged=cpqRackEnclosureNameChanged, cpqRackPowerChassisDcPowerProblem=cpqRackPowerChassisDcPowerProblem, cpqRackServerBladeHeight=cpqRackServerBladeHeight, cpqRackCommonEnclosureHasFans=cpqRackCommonEnclosureHasFans, cpqRackServerBladeToLowPower=cpqRackServerBladeToLowPower, cpqRackUid=cpqRackUid, cpqRackCommonEnclosureHasNetConnectors=cpqRackCommonEnclosureHasNetConnectors, cpqRackServerBladePendingBootOrderChange=cpqRackServerBladePendingBootOrderChange, cpqRackServerBladeEntry=cpqRackServerBladeEntry, cpqRackServerPowerOnFailedNotRedundant=cpqRackServerPowerOnFailedNotRedundant, cpqRackPowerChassisTooManyPowerChassis=cpqRackPowerChassisTooManyPowerChassis, cpqRackDepth=cpqRackDepth, cpqRackCommonEnclosureIndex=cpqRackCommonEnclosureIndex, cpqRackSystemObjectIdentification=cpqRackSystemObjectIdentification, cpqRackServerBlade=cpqRackServerBlade, cpqRackMibRev=cpqRackMibRev, cpqRackPowerEnclosureTable=cpqRackPowerEnclosureTable, cpqRackServerPowerOnFailedNotEnoughPower=cpqRackServerPowerOnFailedNotEnoughPower, cpqRackServerBladeSystemBIOSRevision=cpqRackServerBladeSystemBIOSRevision, cpqRackPowerSupplyFailed=cpqRackPowerSupplyFailed)
mibBuilder.exportSymbols("CPQRACK-MIB", cpqRackCommonEnclosureFanRedundant=cpqRackCommonEnclosureFanRedundant, cpqRackPowerEnclosureMgmtBoardSerialNum=cpqRackPowerEnclosureMgmtBoardSerialNum, cpqRackCommonEnclosureFanLocation=cpqRackCommonEnclosureFanLocation, cpqRackCommonEnclosureUUIDNext=cpqRackCommonEnclosureUUIDNext, cpqRackCommonEnclosureFanTable=cpqRackCommonEnclosureFanTable, cpqRackServerBladePoweredOn=cpqRackServerBladePoweredOn, cpqRackCommonEnclosureFruDescription=cpqRackCommonEnclosureFruDescription, cpqRackPowerEnclosureBladeAutopoweron=cpqRackPowerEnclosureBladeAutopoweron, cpqRackEnclosureFanDegraded=cpqRackEnclosureFanDegraded, cpqRackPowerEnclosure=cpqRackPowerEnclosure, cpqRackCommonEnclosureFuseEntry=cpqRackCommonEnclosureFuseEntry, cpqRackCommonEnclosureFruSerialNum=cpqRackCommonEnclosureFruSerialNum, cpqRackCommonEnclosureFuseTable=cpqRackCommonEnclosureFuseTable, cpqRackNetConnectorSparePartNumber=cpqRackNetConnectorSparePartNumber, cpqRackPowerSubsystemLineVoltageProblem=cpqRackPowerSubsystemLineVoltageProblem, cpqRackCommonEnclosureHasManagers=cpqRackCommonEnclosureHasManagers, cpqRackHeight=cpqRackHeight, cpqRackPowerSupplyExhaustTemp=cpqRackPowerSupplyExhaustTemp, cpqRackEnclosureTempFailed=cpqRackEnclosureTempFailed, cpqRackServerBladeWarmReset=cpqRackServerBladeWarmReset, cpqRackCommonEnclosureFanChassis=cpqRackCommonEnclosureFanChassis, cpqRackNetConnectorDegraded=cpqRackNetConnectorDegraded, cpqRackServerBladeManagementDeviceFirmwareFlashingStatus=cpqRackServerBladeManagementDeviceFirmwareFlashingStatus, cpqRackNetConnectorIndex=cpqRackNetConnectorIndex, cpqRackCommonEnclosureManagerSparePartNumber=cpqRackCommonEnclosureManagerSparePartNumber, cpqRackPowerEnclosureRedundant=cpqRackPowerEnclosureRedundant, cpqRackServerBladeGrpCapTimeout=cpqRackServerBladeGrpCapTimeout, cpqRackServerBladeDiagnosticAdaptorInserted=cpqRackServerBladeDiagnosticAdaptorInserted, cpqRackServerBladePosition=cpqRackServerBladePosition, cpqRackEnclosureFanInserted=cpqRackEnclosureFanInserted, cpqRackCommonEnclosureTempThreshold=cpqRackCommonEnclosureTempThreshold, cpqRackMibCondition=cpqRackMibCondition, cpqRackCommonEnclosureFruAutoRev=cpqRackCommonEnclosureFruAutoRev, cpqRackServerEnclosureName=cpqRackServerEnclosureName, cpqRackServerEnclosureIndex=cpqRackServerEnclosureIndex, cpqRackServerBladePOSTStatus=cpqRackServerBladePOSTStatus, cpqRackServerBladeASREnabled=cpqRackServerBladeASREnabled, cpqRackEnclosureManagerRemoved=cpqRackEnclosureManagerRemoved, cpqRackCommonEnclosure=cpqRackCommonEnclosure, cpqRackCommonEnclosureHasPowerSupplies=cpqRackCommonEnclosureHasPowerSupplies, cpqRackWidth=cpqRackWidth, cpqRackServerBladeFrontIOBlankingActive=cpqRackServerBladeFrontIOBlankingActive, cpqRackServerBladeEnclosureName=cpqRackServerBladeEnclosureName, cpqRackNetwork=cpqRackNetwork, cpqRackServerTempSensorChassis=cpqRackServerTempSensorChassis, cpqRackPowerChassisLoadBalancingWireMissing=cpqRackPowerChassisLoadBalancingWireMissing, cpqRackEnclosureFanFailed=cpqRackEnclosureFanFailed, cpqRackCommonEnclosureAssetTag=cpqRackCommonEnclosureAssetTag, cpqRackTrapSequenceNum=cpqRackTrapSequenceNum, cpqRackPowerSupplyPosition=cpqRackPowerSupplyPosition, cpqRackServerTempSensor=cpqRackServerTempSensor, cpqRackCommonEnclosureHasTempSensors=cpqRackCommonEnclosureHasTempSensors, cpqRackServerBladeUnexpectedShutdown=cpqRackServerBladeUnexpectedShutdown, cpqRackPowerEnclosureName=cpqRackPowerEnclosureName, cpqRackCommonEnclosureManagerLocation=cpqRackCommonEnclosureManagerLocation, cpqRackServerBladeDepth=cpqRackServerBladeDepth, cpqRackNetConnectorOk=cpqRackNetConnectorOk, cpqRackNetConnectorTable=cpqRackNetConnectorTable, cpqRackServerNetworkingTable=cpqRackServerNetworkingTable, cpqRackServerBladeEnteredPXEBootMode=cpqRackServerBladeEnteredPXEBootMode, cpqRackEnclosureRemoved=cpqRackEnclosureRemoved, cpqRackServerBladeRemoved2=cpqRackServerBladeRemoved2, cpqRackCommonEnclosureTempType=cpqRackCommonEnclosureTempType, cpqRackServerTempSensorRack=cpqRackServerTempSensorRack, cpqRackServerEnclosure=cpqRackServerEnclosure, cpqRackCommonEnclosureFruRack=cpqRackCommonEnclosureFruRack, cpqRackCommonEnclosureRack=cpqRackCommonEnclosureRack, cpqRackNetConnectorFWRev=cpqRackNetConnectorFWRev, cpqRackPowerUnknownPowerConsumption=cpqRackPowerUnknownPowerConsumption)
