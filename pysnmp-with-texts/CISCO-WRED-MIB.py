#
# PySNMP MIB module CISCO-WRED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WRED-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, Integer32, IpAddress, ModuleIdentity, Gauge32, NotificationType, Counter64, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "IpAddress", "ModuleIdentity", "Gauge32", "NotificationType", "Counter64", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Unsigned32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoWredMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 83))
ciscoWredMIB.setRevisions(('1997-07-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWredMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWredMIB.setLastUpdated('9707180000Z')
if mibBuilder.loadTexts: ciscoWredMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWredMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: tgrennan-group@cisco.com')
if mibBuilder.loadTexts: ciscoWredMIB.setDescription('Cisco WRED MIB - Overview Cisco Weighted Random Early Detection/Drop is a method which avoids traffic congestion on an output interface. Congestion is detected by computing the average output queue size against preset thresholds. WRED support are on the IP fast switching and IP flow switching only. It does not apply to IP process switching. This MIB incorporates objects from the Cisco WRED line interfaces. Its purpose is to provide Weighted Random Early Detection/Drop packet configuration and packet filtering information. WRED are configured/enabled through the CLI command. Defaults configuration values are assigned and values can be modified through additional CLI commands. ')
ciscoWredMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 83, 1))
cwredConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1))
cwredStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2))
cwredConfigGlobTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 1), )
if mibBuilder.loadTexts: cwredConfigGlobTable.setStatus('current')
if mibBuilder.loadTexts: cwredConfigGlobTable.setDescription('A table of WRED global configuration variables.')
cwredConfigGlobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwredConfigGlobEntry.setStatus('current')
if mibBuilder.loadTexts: cwredConfigGlobEntry.setDescription('A collection of configuration entries on this interface. Entries are created and deleted via red command line interface.')
cwredConfigGlobQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredConfigGlobQueueWeight.setStatus('current')
if mibBuilder.loadTexts: cwredConfigGlobQueueWeight.setDescription("The decay factor for the queue average calculation. Numbers are 2's exponent up to 16. The smaller the number, the faster it decays.")
cwredConfigPrecedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2), )
if mibBuilder.loadTexts: cwredConfigPrecedTable.setStatus('current')
if mibBuilder.loadTexts: cwredConfigPrecedTable.setDescription('A table of WRED configuration values with respect to the IP precedence of packets.')
cwredConfigPrecedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WRED-MIB", "cwredConfigPrecedPrecedence"))
if mibBuilder.loadTexts: cwredConfigPrecedEntry.setStatus('current')
if mibBuilder.loadTexts: cwredConfigPrecedEntry.setDescription('WRED IP precedence configuration table entry. Entries are created and deleted via red command interface.')
cwredConfigPrecedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: cwredConfigPrecedPrecedence.setStatus('current')
if mibBuilder.loadTexts: cwredConfigPrecedPrecedence.setDescription('The IP precedence of this entry.')
cwredConfigPrecedMinDepthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1, 2), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredConfigPrecedMinDepthThreshold.setStatus('current')
if mibBuilder.loadTexts: cwredConfigPrecedMinDepthThreshold.setDescription('The average queue depth at which WRED begins to drop packets.')
cwredConfigPrecedMaxDepthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1, 3), Integer32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredConfigPrecedMaxDepthThreshold.setStatus('current')
if mibBuilder.loadTexts: cwredConfigPrecedMaxDepthThreshold.setDescription('The average queue depth at which WRED may begin to drop all packets.')
cwredConfigPrecedPktsDropFraction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredConfigPrecedPktsDropFraction.setStatus('current')
if mibBuilder.loadTexts: cwredConfigPrecedPktsDropFraction.setDescription('The fraction of packets to be dropped when the average queue depth is above cwredConfigPrecedMinDepthThreshold but below cwredConfigPrecedMaxDepthThreshold.')
cwredQueueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 1), )
if mibBuilder.loadTexts: cwredQueueTable.setStatus('current')
if mibBuilder.loadTexts: cwredQueueTable.setDescription('A table of WRED queue status variable.')
cwredQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 1, 1), )
cwredConfigGlobEntry.registerAugmentions(("CISCO-WRED-MIB", "cwredQueueEntry"))
cwredQueueEntry.setIndexNames(*cwredConfigGlobEntry.getIndexNames())
if mibBuilder.loadTexts: cwredQueueEntry.setStatus('current')
if mibBuilder.loadTexts: cwredQueueEntry.setDescription('A table of WRED queue status variable entry. Entries are created and deleted via the red command line interface.')
cwredQueueAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 1, 1, 1), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredQueueAverage.setStatus('current')
if mibBuilder.loadTexts: cwredQueueAverage.setDescription('The computed queue average length.')
cwredQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 1, 1, 2), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredQueueDepth.setStatus('current')
if mibBuilder.loadTexts: cwredQueueDepth.setDescription('The number of buffers/particles currently withheld in queue.')
cwredStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2), )
if mibBuilder.loadTexts: cwredStatTable.setStatus('current')
if mibBuilder.loadTexts: cwredStatTable.setDescription('A table of WRED status information with respect to the IP precedence of packets.')
cwredStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2, 1), )
cwredConfigPrecedEntry.registerAugmentions(("CISCO-WRED-MIB", "cwredStatEntry"))
cwredStatEntry.setIndexNames(*cwredConfigPrecedEntry.getIndexNames())
if mibBuilder.loadTexts: cwredStatEntry.setStatus('current')
if mibBuilder.loadTexts: cwredStatEntry.setDescription('The WRED interface status information entry. Entries are created and deleted via the red red command line interface.')
cwredStatSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredStatSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: cwredStatSwitchedPkts.setDescription('The number of packets output by WRED.')
cwredStatRandomFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredStatRandomFilteredPkts.setStatus('current')
if mibBuilder.loadTexts: cwredStatRandomFilteredPkts.setDescription('The number of packets filtered/dropped due to average queue length exceeds cwredConfigMinDepthThreshold and meet a defined random drop policy.')
cwredStatMaxFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwredStatMaxFilteredPkts.setStatus('current')
if mibBuilder.loadTexts: cwredStatMaxFilteredPkts.setDescription('The number of packets filtered/dropped due to average queue length exceeds cwredConfigMaxDepthThreshold.')
ciscoWredMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 83, 3))
ciscoWredMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 83, 3, 1))
ciscoWredMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 83, 3, 2))
ciscoWredMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 83, 3, 1, 1)).setObjects(("CISCO-WRED-MIB", "ciscoWredMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWredMIBCompliance = ciscoWredMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWredMIBCompliance.setDescription('The compliance statement for entities which implement the WRED on a Cisco RSP platform.')
ciscoWredMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 83, 3, 2, 1)).setObjects(("CISCO-WRED-MIB", "cwredConfigGlobQueueWeight"), ("CISCO-WRED-MIB", "cwredConfigPrecedMinDepthThreshold"), ("CISCO-WRED-MIB", "cwredConfigPrecedMaxDepthThreshold"), ("CISCO-WRED-MIB", "cwredConfigPrecedPktsDropFraction"), ("CISCO-WRED-MIB", "cwredQueueAverage"), ("CISCO-WRED-MIB", "cwredQueueDepth"), ("CISCO-WRED-MIB", "cwredStatSwitchedPkts"), ("CISCO-WRED-MIB", "cwredStatRandomFilteredPkts"), ("CISCO-WRED-MIB", "cwredStatMaxFilteredPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWredMIBGroup = ciscoWredMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWredMIBGroup.setDescription('A collection of objects providing WRED monitoring.')
mibBuilder.exportSymbols("CISCO-WRED-MIB", cwredConfigPrecedEntry=cwredConfigPrecedEntry, ciscoWredMIBCompliance=ciscoWredMIBCompliance, cwredConfigPrecedTable=cwredConfigPrecedTable, ciscoWredMIBGroups=ciscoWredMIBGroups, cwredStatSwitchedPkts=cwredStatSwitchedPkts, cwredQueueEntry=cwredQueueEntry, cwredStatMaxFilteredPkts=cwredStatMaxFilteredPkts, cwredConfigPrecedMinDepthThreshold=cwredConfigPrecedMinDepthThreshold, cwredStatEntry=cwredStatEntry, cwredQueueTable=cwredQueueTable, ciscoWredMIBGroup=ciscoWredMIBGroup, cwredConfigGlobEntry=cwredConfigGlobEntry, cwredConfig=cwredConfig, cwredConfigGlobTable=cwredConfigGlobTable, ciscoWredMIB=ciscoWredMIB, cwredQueueDepth=cwredQueueDepth, ciscoWredMIBConformance=ciscoWredMIBConformance, cwredQueueAverage=cwredQueueAverage, cwredStatTable=cwredStatTable, PYSNMP_MODULE_ID=ciscoWredMIB, ciscoWredMIBObjects=ciscoWredMIBObjects, cwredConfigPrecedPrecedence=cwredConfigPrecedPrecedence, cwredConfigPrecedMaxDepthThreshold=cwredConfigPrecedMaxDepthThreshold, cwredStats=cwredStats, cwredStatRandomFilteredPkts=cwredStatRandomFilteredPkts, ciscoWredMIBCompliances=ciscoWredMIBCompliances, cwredConfigPrecedPktsDropFraction=cwredConfigPrecedPktsDropFraction, cwredConfigGlobQueueWeight=cwredConfigGlobQueueWeight)
