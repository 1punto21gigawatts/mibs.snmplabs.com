#
# PySNMP MIB module CISCO-FC-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FC-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Counter32, IpAddress, MibIdentifier, ObjectIdentity, Gauge32, NotificationType, ModuleIdentity, Integer32, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Gauge32", "NotificationType", "ModuleIdentity", "Integer32", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoFcMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 999999))
ciscoFcMgmtMIB.setRevisions(('2002-09-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFcMgmtMIB.setRevisionsDescriptions(('Initial version of Cisco Fibre Channel Management MIB module.',))
if mibBuilder.loadTexts: ciscoFcMgmtMIB.setLastUpdated('200209120000Z')
if mibBuilder.loadTexts: ciscoFcMgmtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFcMgmtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dwdm@cisco.com')
if mibBuilder.loadTexts: ciscoFcMgmtMIB.setDescription("This module defines management information specific to Fibre Channel-attached devices. This module is an adaptation of IETF's IPS working group's draft, draft-ietf-ips-fcmgmt-mib-02")
cfcmgmtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1))
cfcmgmtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999999, 2))
cfcmgmtNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999999, 2, 0))
cfcmgmtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3))
class CfcmFcNameIdOrZero(TextualConvention, OctetString):
    description = 'The World Wide Name (WWN) associated with a Fibre Channel (FC) entity. WWNs were initially defined as 64-bits in length. The latest definition (for future use) is 128-bits long. The zero-length string value is used in circumstances where the WWN is unassigned/unknown.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), )
class CfcmFcAddressId(TextualConvention, OctetString):
    description = 'A Fibre Channel Address ID, a 24-bit value unique within the address space of a Fabric.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 3), )
class CfcmDomainIdOrZero(TextualConvention, Integer32):
    description = 'The Domain Id (of a FC switch), or zero if no Domain Id has been assigned.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 239)

class CfcmFcPortType(TextualConvention, Integer32):
    description = "The type of a Fibre Channel port, being one of the types described below. unknown - Fibre Channel port type is not known. other - the port type is something other than the ones described below. dynamic - the port could be one of the below port types and this varies dynamically. nPort - Any port on a node device, e.g., a disk, PC, etc. that is directly attached to a Fabric port. (Refer FC-PH, FC-FS). nlPort - An 'nPort' that also has arbitrated loop capabilities. (Refer FC-AL-2). fPort - A port on a fibre channel fabric. (Refer FC-PH, FC-FS). flPort - A 'fPort' that also has arbitrated loop capabilities. (Refer FC-AL-2). ePort - A fabric expansion port which attaches to another 'ePort' or 'bPort' to create an Inter-Switch Link. (Refer FC-SW-2). bPort - A bridge port on a device that implements FC-BBW and connects to an E_port on a switch. (Refer FC-BB)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("dynamic", 3), ("nPort", 4), ("nlPort", 5), ("fPort", 6), ("flPort", 7), ("ePort", 8), ("bPort", 9))

class CfcmFcClasses(TextualConvention, Bits):
    reference = 'Classes of service are described in FC-FS Section 13.'
    description = 'A set of Fibre Channel classes of service.'
    status = 'current'
    namedValues = NamedValues(("classF", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("class5", 5), ("class6", 6))

class CfcmFcBbCredit(TextualConvention, Integer32):
    description = 'The buffer-to-buffer credit of an FC port. i.e., the number of frames a FC device can receive at a time without causing a buffer overrun condition.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 32767)

class CfcmFcBbCreditModel(TextualConvention, Integer32):
    description = 'The buffer-to-buffer credit model of an Fx_Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("regular", 1), ("alternate", 2))

class CfcmFcDataFieldSize(TextualConvention, Integer32):
    description = 'The Receive Data Field Size associated with an FC port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(128, 2112)

class CfcmFcUnitFunctions(TextualConvention, Bits):
    description = 'A set of functions that a Fibre Channel Interconnect Element or Platform might perform. A value with no bits set, indicates the function(s) are unknown. The individual bits have the following meanings: other - none of the following. hub - a device that interconnects L_Ports, but does not operate as an FL_Port. switch - a fabric element conforming to the Fibre Channel switch fabric set of standards (e.g., FC-SW, FC-SW-2). bridge - a device that encapsulates Fibre Channel frames within another protocol (e.g., FC-BB, FC-BB-2). gateway - a device that converts an FC-4 to another protocol (e.g., FCP to iSCSI). host - a computer system that provides end users services such as computation and storage access. storageSubsys - an integrated collection of storage controllers, storage devices, and necessary software, that provides storage services to one or more hosts. storageAccessDev - a device that provides storage management and access for heterogeneous hosts and heterogeneous devices (e.g., medium changer). nas - a device that connects to a network and provides file access services. wdmux - a device that modulates/demodulates each of several data streams (e.g., Fibre Channel protocol data streams) onto/from a different part of the light spectrum in an optical fiber.'
    status = 'current'
    namedValues = NamedValues(("other", 0), ("hub", 1), ("switch", 2), ("bridge", 3), ("gateway", 4), ("host", 5), ("storageSubsys", 6), ("storageAccessDev", 7), ("nas", 8), ("wdmux", 9))

class CfcmPhysicalIndexOrZero(TextualConvention, Integer32):
    reference = 'entPhysicalTable is defined in the Entity MIB, RFC 2737.'
    description = "The index value for a physical entity's row in the Entity MIB's entPhysicalTable. A zero value indicates that no row in the entPhysicalTable is applicable."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class CfcmHrSWInstalledIndexOrZero(TextualConvention, Integer32):
    reference = 'hrSWInstalledTable is defined in the Host Resources MIB, RFC 2790.'
    description = "The index value for a software module's row in the Host Resources MIB's hrSWInstalledTable. A zero value indicates that no row in the hrSWInstalledTable is applicable."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class CfcmMilliSeconds(TextualConvention, Unsigned32):
    description = 'Time units in milliseconds.'
    status = 'current'

class CfcmMicroSeconds(TextualConvention, Unsigned32):
    description = 'Time units in microseconds.'
    status = 'current'

cfcmInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1), )
if mibBuilder.loadTexts: cfcmInstanceTable.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceTable.setDescription('Information about the local Fibre Channel management instances.')
cfcmInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1), ).setIndexNames((0, "CISCO-FC-MGMT-MIB", "cfcmInstanceIndex"))
if mibBuilder.loadTexts: cfcmInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceEntry.setDescription('A list of attributes for a particular local Fibre Channel management instance.')
cfcmInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cfcmInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceIndex.setDescription('An arbitrary integer value which uniquely identifies this instance amongst all local Fibre Channel management instances. It is mandatory that this value remain constant between restarts of the agent except, in case of certain re- configurations of the local system where it is natural for it to change. It is desirable that this value remain constant across restarts.')
cfcmInstanceWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 2), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmInstanceWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceWwn.setDescription('If the instance has one (or more) WWN(s), then this object contains that (or one of those) WWN(s). If the instance does not have a WWN associated with it, then this object contains the zero-length string.')
cfcmInstanceFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 3), CfcmFcUnitFunctions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmInstanceFunctions.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceFunctions.setDescription('One (or more) Fibre Channel unit functions being performed by this instance.')
cfcmInstancePhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 4), CfcmPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmInstancePhysicalIndex.setReference('entPhysicalIndex is defined in the Entity MIB, RFC 2737.')
if mibBuilder.loadTexts: cfcmInstancePhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cfcmInstancePhysicalIndex.setDescription("If this management instance corresponds to a physical component (or to a hierarchy of physical components), then this object's value is the value of the entPhysicalIndex of that component (or of the component at the root of that hierarchy). If there is no correspondence to a physical component (or no component which has an entPhysicalIndex value), then the value of this object is zero.")
cfcmInstanceSoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 5), CfcmHrSWInstalledIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmInstanceSoftwareIndex.setReference('hrSWInstalledIndex is defined in the Host Resources MIB, RFC 2790')
if mibBuilder.loadTexts: cfcmInstanceSoftwareIndex.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceSoftwareIndex.setDescription("If this management instance corresponds to an installed software module, then this object's value is the value of the hrSWInstalledIndex of that module. If there is no correspondence to an installed software module (or no module which has a hrSWInstalledIndex value), then the value of this object is zero.")
cfcmInstanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmInstanceStatus.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceStatus.setDescription('Overall status of the Fibre Channel entity/entities managed by this management instance. The value should reflect the most serious status of such entities.')
cfcmInstanceTextName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfcmInstanceTextName.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceTextName.setDescription('A textual name for this management instance and the Fibre Channel entity/entities that it is managing.')
cfcmInstanceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfcmInstanceDescr.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceDescr.setDescription('A textual description of this management instance and the Fibre Channel entity/entities that it is managing.')
cfcmInstanceFabricId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 1, 1, 9), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmInstanceFabricId.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceFabricId.setDescription('The globally unique Fabric Identifier which identifies the fabric to which the Fibre Channel entity/entities managed by this management instance are connected, or, of which they are a part. This is typically the Node WWN of the principal switch of a Fibre Channel fabric. The zero-length string indicates that the fabric identifier is unknown (or not applicable).')
cfcmSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 2), )
if mibBuilder.loadTexts: cfcmSwitchTable.setStatus('current')
if mibBuilder.loadTexts: cfcmSwitchTable.setDescription('A table of information about Fibre Channel switches which are managed by Fibre Channel management instances. Each Fibre Channel management instance can manage one or more Fibre Channel switches.')
cfcmSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 2, 1), ).setIndexNames((0, "CISCO-FC-MGMT-MIB", "cfcmInstanceIndex"), (0, "CISCO-FC-MGMT-MIB", "cfcmSwitchIndex"))
if mibBuilder.loadTexts: cfcmSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmSwitchEntry.setDescription('Information about a particular Fibre Channel switch which is managed by the management instance given by cfcmInstanceIndex.')
cfcmSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cfcmSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: cfcmSwitchIndex.setDescription('An arbitrary integer which uniquely identifies a Fibre Channel switch amongst those managed by one Fibre Channel management instance.')
cfcmSwitchDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 2, 1, 2), CfcmDomainIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfcmSwitchDomainId.setStatus('current')
if mibBuilder.loadTexts: cfcmSwitchDomainId.setDescription('The Domain Id of this switch. A value of zero indicates that a switch has not (yet) been assigned a Domain Id.')
cfcmSwitchPrincipal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmSwitchPrincipal.setStatus('current')
if mibBuilder.loadTexts: cfcmSwitchPrincipal.setDescription('An indication of whether this switch is the principal switch within its fabric.')
cfcmPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3), )
if mibBuilder.loadTexts: cfcmPortTable.setReference('RFC 2863, The Interfaces Group MIB, June 2000.')
if mibBuilder.loadTexts: cfcmPortTable.setStatus('current')
if mibBuilder.loadTexts: cfcmPortTable.setDescription("Information about Fibre Channel ports. Each Fibre Channel port is represented by one entry in the IF-MIB's ifTable.")
cfcmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfcmPortEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmPortEntry.setDescription('Each entry contains information about a specific port.')
cfcmPortInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: cfcmPortInstanceIndex.setDescription('The value of cfcmInstanceIndex by which the Fibre Channel management instance, which manages this port, is identified in the cfcmInstanceTable.')
cfcmPortWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 2), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmPortWwn.setDescription('The World Wide Name of the port, or the zero-length string if the port does not have a WWN.')
cfcmPortNodeWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 3), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortNodeWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmPortNodeWwn.setDescription('The World Wide Name of the Node which contains this port, or the zero-length string if the port does not have a node WWN.')
cfcmPortAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 4), CfcmFcPortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfcmPortAdminType.setStatus('current')
if mibBuilder.loadTexts: cfcmPortAdminType.setDescription('The administratively desired type of this port. Each port will typically only be able to support a subset of these types.')
cfcmPortOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 5), CfcmFcPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortOperType.setStatus('current')
if mibBuilder.loadTexts: cfcmPortOperType.setDescription('The current operational type of this port.')
cfcmPortFcCapClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 6), CfcmFcClasses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortFcCapClass.setStatus('current')
if mibBuilder.loadTexts: cfcmPortFcCapClass.setDescription('The classes of service capability of this port.')
cfcmPortFcOperClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 7), CfcmFcClasses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortFcOperClass.setStatus('current')
if mibBuilder.loadTexts: cfcmPortFcOperClass.setDescription('The classes of service that are currently operational on this port. For an FL_Port, this is the union of the classes being supported across all attached NL_Ports.')
cfcmPortTransmitterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("shortwave850nm", 3), ("longwave1550nm", 4), ("longwave1310nm", 5), ("electrical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortTransmitterType.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sect 6.1.2.2.3')
if mibBuilder.loadTexts: cfcmPortTransmitterType.setStatus('current')
if mibBuilder.loadTexts: cfcmPortTransmitterType.setDescription('The technology of the port transceiver.')
cfcmPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("gbic", 3), ("embedded", 4), ("glm", 5), ("gbicSerialId", 6), ("gbicNoSerialId", 7), ("sfpSerialId", 8), ("sfpNoSerialId", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortConnectorType.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sect 6.1.2.2.4')
if mibBuilder.loadTexts: cfcmPortConnectorType.setStatus('current')
if mibBuilder.loadTexts: cfcmPortConnectorType.setDescription("The module type of the port connector. This object refers to the hardware implementation of the port. It will be 'embedded' if the hardware equivalent to Gigabit interface card (GBIC) is part of the line card and is unremovable. It will be 'glm' if it's a gigabit link module (GLM). It will be 'gbicSerialId' if the GBIC serial id can be read, else it will be 'gbicNoSerialId'. It will be 'sfpSerialId', if the small form factor (SFP) pluggable GBICs serial id can be read, else it will be 'sfpNoSerialId'.")
cfcmPortSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortSerialNumber.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sect 6.1.2.2.4')
if mibBuilder.loadTexts: cfcmPortSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cfcmPortSerialNumber.setDescription("The serial number associated with the port (e.g., for a GBIC). If not applicable, the object's value is a zero- length string.")
cfcmPortPhysicalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortPhysicalNumber.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sect 6.1.2.2.5')
if mibBuilder.loadTexts: cfcmPortPhysicalNumber.setStatus('current')
if mibBuilder.loadTexts: cfcmPortPhysicalNumber.setDescription("This is the port's 'Physical Port Number' as defined by GS-3.")
cfcmPortAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto", 1), ("eighthGbs", 2), ("quarterGbs", 3), ("halfGbs", 4), ("oneGbs", 5), ("twoGbs", 6), ("fourGbs", 7), ("tenGbs", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfcmPortAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: cfcmPortAdminSpeed.setDescription("The speed of the interface: 'auto' - auto-negotiation 'tenGbs' - 10Gbs 'fourGbs' - 4Gbs 'twoGbs' - 2Gbs 'oneGbs' - 1Gbs 'halfGbs' - 500Mbs 'quarterGbs' - 250Mbs 'eighthGbs' - 125Mbs")
cfcmPortCapProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 13), Bits().clone(namedValues=NamedValues(("unknown", 0), ("loop", 1), ("fabric", 2), ("scsi", 3), ("tcpIp", 4), ("vi", 5), ("ficon", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortCapProtocols.setStatus('current')
if mibBuilder.loadTexts: cfcmPortCapProtocols.setDescription('A bit mask specifying the higher level protocols which are supported on this port. Note that for generic Fx_Ports, E_Ports and B_Ports, this object will indicate all protocols.')
cfcmPortOperProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 3, 1, 14), Bits().clone(namedValues=NamedValues(("unknown", 0), ("loop", 1), ("fabric", 2), ("scsi", 3), ("tcpIp", 4), ("vi", 5), ("ficon", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortOperProtocols.setStatus('current')
if mibBuilder.loadTexts: cfcmPortOperProtocols.setDescription("A bit mask specifying the higher level protocols which are currently operational on this port. For Fx_Ports, E_Ports and B_Ports, this object will typically have the value 'unknown'.")
cfcmPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4), )
if mibBuilder.loadTexts: cfcmPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: cfcmPortStatsTable.setDescription('A list of statistics for Fibre Channel ports.')
cfcmPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1), )
cfcmPortEntry.registerAugmentions(("CISCO-FC-MGMT-MIB", "cfcmPortStatsEntry"))
cfcmPortStatsEntry.setIndexNames(*cfcmPortEntry.getIndexNames())
if mibBuilder.loadTexts: cfcmPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmPortStatsEntry.setDescription('An entry containing statistics for a Fibre Channel port.')
cfcmPortBBCreditZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortBBCreditZeros.setStatus('current')
if mibBuilder.loadTexts: cfcmPortBBCreditZeros.setDescription('The number of transitions in/out of the buffer-to-buffer credit zero state. The other side is not providing any credit.')
cfcmPortFullInputBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortFullInputBuffers.setStatus('current')
if mibBuilder.loadTexts: cfcmPortFullInputBuffers.setDescription('The number of occurrences when all input buffers of a port were full and outbound buffer-to-buffer credit transitioned to zero, i.e., there became no credit to provide to other side.')
cfcmPortClass2RxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2RxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2RxFrames.setDescription('The number of Class 2 frames received at this port.')
cfcmPortClass2RxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2RxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2RxOctets.setDescription('The number of octets contained in Class 2 frames received at this port.')
cfcmPortClass2TxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2TxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2TxFrames.setDescription('The number of Class 2 frames transmitted out of this port.')
cfcmPortClass2TxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2TxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2TxOctets.setDescription('The number of octets contained in Class 2 frames transmitted out of this port.')
cfcmPortClass2Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2Discards.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2Discards.setDescription('The number of Class 2 frames that were discarded upon reception at this port.')
cfcmPortClass2RxFbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2RxFbsyFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2RxFbsyFrames.setDescription('The number of times that F_BSY was returned to this port as a result of a Class 2 frame that could not be delivered to the other end of the link. This can occur when either the fabric or the destination port is temporarily busy. Note that this counter will never increment for an F_Port.')
cfcmPortClass2RxPbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2RxPbsyFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2RxPbsyFrames.setDescription('The number of times that P_BSY was returned to this port as a result of a Class 2 frame that could not be delivered to the other end of the link. This can occur when the destination port is temporarily busy.')
cfcmPortClass2RxFrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2RxFrjtFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2RxFrjtFrames.setDescription('The number of times that F_RJT was returned to this port as a result of a Class 2 frame that was rejected by the fabric. Note that this counter will never increment for an F_Port.')
cfcmPortClass2RxPrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2RxPrjtFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2RxPrjtFrames.setDescription('The number of times that P_RJT was returned to this port as a result of a Class 2 frame that was rejected at the destination N_Port.')
cfcmPortClass2TxFbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2TxFbsyFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2TxFbsyFrames.setDescription('The number of times that F_BSY was generated by this port as a result of a Class 2 frame that could not be delivered because either the Fabric or the destination port was temporarily busy. Note that this counter will never increment for an N_Port.')
cfcmPortClass2TxPbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2TxPbsyFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2TxPbsyFrames.setDescription('The number of times that P_BSY was generated by this port as a result of a Class 2 frame that could not be delivered because the destination port was temporarily busy. Note that this counter will never increment for an F_Port.')
cfcmPortClass2TxFrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2TxFrjtFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2TxFrjtFrames.setDescription('The number of times that F_RJT was generated by this port as a result of a Class 2 frame being rejected by the fabric. Note that this counter will never increment for an N_Port.')
cfcmPortClass2TxPrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass2TxPrjtFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass2TxPrjtFrames.setDescription('The number of times that P_RJT was generated by this port as a result of a Class 2 frame being rejected at the destination N_Port. Note that this counter will never increment for an F_Port.')
cfcmPortClass3RxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass3RxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass3RxFrames.setDescription('The number of Class 3 frames received at this port.')
cfcmPortClass3RxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass3RxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass3RxOctets.setDescription('The number of octets contained in Class 3 frames received at this port.')
cfcmPortClass3TxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass3TxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass3TxFrames.setDescription('The number of Class 3 frames transmitted out of this port.')
cfcmPortClass3TxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass3TxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass3TxOctets.setDescription('The number of octets contained in Class 3 frames transmitted out of this port.')
cfcmPortClass3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClass3Discards.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass3Discards.setDescription('The number of Class 3 frames that were discarded upon reception at this port.')
cfcmPortClassFRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClassFRxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClassFRxFrames.setDescription('The number of Class F frames received at this port.')
cfcmPortClassFRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClassFRxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClassFRxOctets.setDescription('The number of octets contained in Class F frames received at this port.')
cfcmPortClassFTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClassFTxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClassFTxFrames.setDescription('The number of Class F frames transmitted out of this port.')
cfcmPortClassFTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClassFTxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClassFTxOctets.setDescription('The number of octets contained in Class F frames transmitted out of this port.')
cfcmPortClassFDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortClassFDiscards.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClassFDiscards.setDescription('The number of Class F frames that were discarded upon reception at this port.')
cfcmPortLcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5), )
if mibBuilder.loadTexts: cfcmPortLcStatsTable.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcStatsTable.setDescription('A list of Counter32-based statistics which are a shadow of the Counter64 statistics in the cfcmPortStatsTable, for systems which do not support Counter64.')
cfcmPortLcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1), )
cfcmPortEntry.registerAugmentions(("CISCO-FC-MGMT-MIB", "cfcmPortLcStatsEntry"))
cfcmPortLcStatsEntry.setIndexNames(*cfcmPortEntry.getIndexNames())
if mibBuilder.loadTexts: cfcmPortLcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcStatsEntry.setDescription('An entry containing low-capacity (i.e., based on Counter32) statistics for a Fibre Channel port.')
cfcmPortLcBBCreditZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcBBCreditZeros.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcBBCreditZeros.setDescription('The number of transitions in/out of the buffer-to-buffer credit zero state. The other side is not providing any credit.')
cfcmPortLcFullInputBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcFullInputBuffers.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcFullInputBuffers.setDescription('The number of occurrences when all input buffers of a port were full and outbound buffer-to-buffer credit transitioned to zero, i.e., there became no credit to provide to other side.')
cfcmPortLcClass2RxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2RxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2RxFrames.setDescription('The number of Class 2 frames received at this port.')
cfcmPortLcClass2RxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2RxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2RxOctets.setDescription('The number of octets contained in Class 2 frames received at this port.')
cfcmPortLcClass2TxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2TxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2TxFrames.setDescription('The number of Class 2 frames transmitted out of this port.')
cfcmPortLcClass2TxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2TxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2TxOctets.setDescription('The number of octets contained in Class 2 frames transmitted out of this port.')
cfcmPortLcClass2Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2Discards.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2Discards.setDescription('The number of Class 2 frames that were discarded upon reception at this port.')
cfcmPortLcClass2RxFbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2RxFbsyFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2RxFbsyFrames.setDescription('The number of times that F_BSY was returned to this port as a result of a Class 2 frame that could not be delivered to the other end of the link. This can occur when either the fabric or the destination port is temporarily busy. Note that this counter will never increment for an F_Port.')
cfcmPortLcClass2RxPbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2RxPbsyFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2RxPbsyFrames.setDescription('The number of times that P_BSY was returned to this port as a result of a Class 2 frame that could not be delivered to the other end of the link. This can occur when the destination port is temporarily busy.')
cfcmPortLcClass2RxFrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2RxFrjtFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2RxFrjtFrames.setDescription('The number of times that F_RJT was returned to this port as a result of a Class 2 frame that was rejected by the fabric. Note that this counter will never increment for an F_Port.')
cfcmPortLcClass2RxPrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2RxPrjtFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2RxPrjtFrames.setDescription('The number of times that P_RJT was returned to this port as a result of a Class 2 frame that was rejected at the destination N_Port.')
cfcmPortLcClass2TxFbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2TxFbsyFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2TxFbsyFrames.setDescription('The number of times that F_BSY was generated by this port as a result of a Class 2 frame that could not be delivered because either the Fabric or the destination port was temporarily busy. Note that this counter will never increment for an N_Port.')
cfcmPortLcClass2TxPbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2TxPbsyFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2TxPbsyFrames.setDescription('The number of times that P_BSY was generated by this port as a result of a Class 2 frame that could not be delivered because the destination port was temporarily busy. Note that this counter will never increment for an F_Port.')
cfcmPortLcClass2TxFrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2TxFrjtFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2TxFrjtFrames.setDescription('The number of times that F_RJT was generated by this port as a result of a Class 2 frame being rejected by the fabric. Note that this counter will never increment for an N_Port.')
cfcmPortLcClass2TxPrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass2TxPrjtFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass2TxPrjtFrames.setDescription('The number of times that P_RJT was generated by this port as a result of a Class 2 frame being rejected at the destination N_Port. Note that this counter will never increment for an F_Port.')
cfcmPortLcClass3RxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass3RxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass3RxFrames.setDescription('The number of Class 3 frames received at this port.')
cfcmPortLcClass3RxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass3RxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass3RxOctets.setDescription('The number of octets contained in Class 3 frames received at this port.')
cfcmPortLcClass3TxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass3TxFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass3TxFrames.setDescription('The number of Class 3 frames transmitted out of this port.')
cfcmPortLcClass3TxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass3TxOctets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass3TxOctets.setDescription('The number of octets contained in Class 3 frames transmitted out of this port.')
cfcmPortLcClass3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLcClass3Discards.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcClass3Discards.setDescription('The number of Class 3 frames that were discarded upon reception at this port.')
cfcmPortErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6), )
if mibBuilder.loadTexts: cfcmPortErrorsTable.setStatus('current')
if mibBuilder.loadTexts: cfcmPortErrorsTable.setDescription('Error counters for Fibre Channel ports.')
cfcmPortErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1), )
cfcmPortEntry.registerAugmentions(("CISCO-FC-MGMT-MIB", "cfcmPortErrorsEntry"))
cfcmPortErrorsEntry.setIndexNames(*cfcmPortEntry.getIndexNames())
if mibBuilder.loadTexts: cfcmPortErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmPortErrorsEntry.setDescription('Error counters for a Fibre Channel port.')
cfcmPortRxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortRxLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortRxLinkResets.setDescription('The number of Link resets (LR primitives) received.')
cfcmPortTxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortTxLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortTxLinkResets.setDescription('The number of Link resets (LRs primitive) transmitted.')
cfcmPortLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLinkResets.setDescription('The number of times the reset link protocol was initiated on this port. This includes the number of Loop Initialization Primitive (LIP) events on an arbitrated loop port.')
cfcmPortRxOfflineSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortRxOfflineSequences.setStatus('current')
if mibBuilder.loadTexts: cfcmPortRxOfflineSequences.setDescription('The number of Offline Primitive OLS received at this port.')
cfcmPortTxOfflineSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortTxOfflineSequences.setStatus('current')
if mibBuilder.loadTexts: cfcmPortTxOfflineSequences.setDescription('The number of Offline Primitive OLS transmitted by this port.')
cfcmPortLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLinkFailures.setReference('FC-PH, rev 4.3, 1 June 1994, section 29.8.')
if mibBuilder.loadTexts: cfcmPortLinkFailures.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLinkFailures.setDescription("The number of link failures. This count is part of FC-PH's Link Error Status Block (LESB).")
cfcmPortLossofSynchs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLossofSynchs.setReference('FC-PH, rev 4.3, 1 June 1994, section 29.8.')
if mibBuilder.loadTexts: cfcmPortLossofSynchs.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLossofSynchs.setDescription("The number of instances of synchronization loss detected at this port. This count is part of FC-PH's Link Error Status Block (LESB).")
cfcmPortLossofSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortLossofSignals.setReference('FC-PH, rev 4.3, 1 June 1994, section 29.8.')
if mibBuilder.loadTexts: cfcmPortLossofSignals.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLossofSignals.setDescription("The number of instances of signal loss detected at this port. This count is part of FC-PH's Link Error Status Block (LESB).")
cfcmPortPrimSeqProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortPrimSeqProtocolErrors.setReference('FC-PH, rev 4.3, 1 June 1994, section 29.8.')
if mibBuilder.loadTexts: cfcmPortPrimSeqProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: cfcmPortPrimSeqProtocolErrors.setDescription("The number of primitive sequence protocol errors detected at this port. This count is part of CFC-PH's Link Error Status Block (LESB).")
cfcmPortInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortInvalidTxWords.setReference('FC-PH, rev 4.3, 1 June 1994, section 29.8.')
if mibBuilder.loadTexts: cfcmPortInvalidTxWords.setStatus('current')
if mibBuilder.loadTexts: cfcmPortInvalidTxWords.setDescription("The number of invalid transmission words received at this port. This count is part of FC-PH's Link Error Status Block (LESB).")
cfcmPortInvalidCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortInvalidCRCs.setReference('FC-PH, rev 4.3, 1 June 1994, section 29.8.')
if mibBuilder.loadTexts: cfcmPortInvalidCRCs.setStatus('current')
if mibBuilder.loadTexts: cfcmPortInvalidCRCs.setDescription("The number of frames received with invalid CRC. This count is part of FC-PH's Link Error Status Block (LESB).")
cfcmPortInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortInvalidOrderedSets.setStatus('current')
if mibBuilder.loadTexts: cfcmPortInvalidOrderedSets.setDescription('The number of invalid ordered sets received at this port.')
cfcmPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortFrameTooLongs.setStatus('current')
if mibBuilder.loadTexts: cfcmPortFrameTooLongs.setDescription('The number of frames received at this port where the frame length was greater than what was agreed to in FLOGI/PLOGI. This could be caused by losing the end of frame delimiter.')
cfcmPortTruncatedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortTruncatedFrames.setStatus('current')
if mibBuilder.loadTexts: cfcmPortTruncatedFrames.setDescription('The number of frames received at this port where the frame length was less than the minimum indicated by the frame header - normally 24 bytes, but it could be more if the DFCTL field indicates an optional header should have been present.')
cfcmPortAddressErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortAddressErrors.setStatus('current')
if mibBuilder.loadTexts: cfcmPortAddressErrors.setDescription('The number of frames received with unknown addressing. e.x. unknown SID or DID. the SID or DID is not known to the routing algorithm.')
cfcmPortDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortDelimiterErrors.setStatus('current')
if mibBuilder.loadTexts: cfcmPortDelimiterErrors.setDescription('The number of invalid frame delimiters received at this port. An example is a frame with a class 2 start and a class 3 at the end.')
cfcmPortEncodingDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortEncodingDisparityErrors.setStatus('current')
if mibBuilder.loadTexts: cfcmPortEncodingDisparityErrors.setDescription('The number of encoding disparity errors received at this port.')
cfcmPortOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmPortOtherErrors.setStatus('current')
if mibBuilder.loadTexts: cfcmPortOtherErrors.setDescription('The number of errors which were detected on this port but which were not counted by any other error counter in this row.')
cfcmFxPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7), )
if mibBuilder.loadTexts: cfcmFxPortTable.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortTable.setDescription('Additional information about Fibre Channel ports which is specific to Fx_Ports. This table will contain one entry for each cfcmPortTable entry which represents an Fx_Port.')
cfcmFxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfcmFxPortEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortEntry.setDescription('Each entry contains information about FC protocol related timer values of a specific Fx_Port and information about buffer capacity, maximum data field size of frames handled by this port and other capability information.')
cfcmFxPortRatov = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 1), CfcmMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortRatov.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortRatov.setDescription('The Resource_Allocation_Timeout Value configured for this Fx_Port. This is used as the timeout value for determining when to reuse an Nx_Port resource such as a Recovery_Qualifier. It represents the Error_Detect_Timeout value (see cfcmFxPortEdtov) plus twice the maximum time that a frame may be delayed within the Fabric and still be delivered.')
cfcmFxPortEdtov = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 2), CfcmMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortEdtov.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortEdtov.setDescription('The Error_Detect_Timeout value configured for this Fx_Port. This is used as the timeout value for detecting an error condition.')
cfcmFxPortRttov = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 3), CfcmMilliSeconds()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortRttov.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortRttov.setDescription('The Receiver_Transmitter_Timeout value of this Fx_Port. This is used by the receiver logic to detect Loss of Synchronization.')
cfcmFxPortHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 4), CfcmMicroSeconds()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortHoldTime.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortHoldTime.setDescription('The maximum time that this Fx_Port shall hold a frame before discarding the frame if it is unable to deliver the frame. The value 0 means that this Fx_Port does not support this parameter.')
cfcmFxPortCapBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 5), CfcmFcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortCapBbCreditMax.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortCapBbCreditMax.setDescription('The maximum number of receive buffers which this port is capable of making available for holding frames from attached Nx_Port(s).')
cfcmFxPortCapBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 6), CfcmFcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortCapBbCreditMin.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortCapBbCreditMin.setDescription('The minimum number of receive buffers which this port is capable of making available for holding frames from attached Nx_Port(s).')
cfcmFxPortCapDataFieldSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 7), CfcmFcDataFieldSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortCapDataFieldSizeMax.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortCapDataFieldSizeMax.setDescription('The maximum size in bytes of the Data Field in a frame that this Fx_Port is capable of receiving from an attached Nx_Port.')
cfcmFxPortCapDataFieldSizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 8), CfcmFcDataFieldSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortCapDataFieldSizeMin.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortCapDataFieldSizeMin.setDescription('The minimum size in bytes of the Data Field in a frame that this Fx_Port is capable of receiving from an attached Nx_Port.')
cfcmFxPortCapClass2SeqDeliv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortCapClass2SeqDeliv.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortCapClass2SeqDeliv.setDescription('An indication of whether this Fx_Port is capable of supporting Class 2 Sequential Delivery.')
cfcmFxPortCapClass3SeqDeliv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortCapClass3SeqDeliv.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortCapClass3SeqDeliv.setDescription('An indication of whether this Fx_Port is capable of supporting Class 3 Sequential Delivery.')
cfcmFxPortCapHoldTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 11), CfcmMicroSeconds()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortCapHoldTimeMax.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortCapHoldTimeMax.setDescription('The maximum holding time that this Fx_Port is capable of supporting.')
cfcmFxPortCapHoldTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 7, 1, 12), CfcmMicroSeconds()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFxPortCapHoldTimeMin.setStatus('current')
if mibBuilder.loadTexts: cfcmFxPortCapHoldTimeMin.setDescription('The minimum holding time that this Fx_Port is capable of supporting.')
cfcmISPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 8), )
if mibBuilder.loadTexts: cfcmISPortTable.setStatus('current')
if mibBuilder.loadTexts: cfcmISPortTable.setDescription('Additional information about E_Ports, B_Ports, and any other type of Fibre Channel port to which inter-switch links can be connected. This table will contain one entry for each cfcmPortTable entry which represents such a port.')
cfcmISPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfcmISPortEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmISPortEntry.setDescription('Each entry contains information about a specific port connected to an inter-switch link.')
cfcmISPortClassFCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 8, 1, 1), CfcmFcBbCredit()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfcmISPortClassFCredit.setStatus('current')
if mibBuilder.loadTexts: cfcmISPortClassFCredit.setDescription('The maximum number of Class F data frames which can be transmitted by the inter-switch port without receipt of ACK or Link_Response frames.')
cfcmISPortClassFDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 8, 1, 2), CfcmFcDataFieldSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmISPortClassFDataFieldSize.setStatus('current')
if mibBuilder.loadTexts: cfcmISPortClassFDataFieldSize.setDescription('The Receive Data Field Size which the inter-switch port has agreed to support for Class F frames to/from this port. The size specifies the largest Data Field Size for an FT_1 frame.')
cfcmFLoginTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9), )
if mibBuilder.loadTexts: cfcmFLoginTable.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginTable.setDescription('A table that contains one entry for each Nx_Port logged- in/attached to a particular Fx_Port in the switch. Each entry contains the services parameters established during the most recent Fabric Login, explicit or implicit. Note that an Fx_Port may have one or more Nx_Ports attached to it.')
cfcmFLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-FC-MGMT-MIB", "cfcmFLoginNxPortIndex"))
if mibBuilder.loadTexts: cfcmFLoginEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginEntry.setDescription('An entry containing service parameters established from a successful Fabric Login.')
cfcmFLoginNxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cfcmFLoginNxPortIndex.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginNxPortIndex.setDescription('An arbitrary integer which uniquely identifies an Nx_Port amongst all those attached to the Fx_Port indicated by ifIndex.')
cfcmFLoginPortWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 2), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginPortWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginPortWwn.setDescription('The port name of the attached Nx_Port, or the zero-length string if unknown.')
cfcmFLoginNodeWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 3), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginNodeWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginNodeWwn.setDescription('The node name of the attached Nx_Port, or the zero-length string if unknown.')
cfcmFLoginBbCreditModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 4), CfcmFcBbCreditModel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginBbCreditModel.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginBbCreditModel.setDescription('The buffer-to-buffer credit model in use by the Fx_Port.')
cfcmFLoginBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 5), CfcmFcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginBbCredit.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginBbCredit.setDescription('The number of buffers available for holding frames to be transmitted to the attached Nx_Port. These buffers are for buffer-to-buffer flow control in the direction from Fx_Port to Nx_Port.')
cfcmFLoginClassesAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 6), CfcmFcClasses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginClassesAgreed.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginClassesAgreed.setDescription('The Classes of Service which the Fx_Port has agreed to support for this Nx_Port.')
cfcmFLoginClass2SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginClass2SeqDelivAgreed.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginClass2SeqDelivAgreed.setDescription('An indication of whether the Fx_Port has agreed to support Class 2 sequential delivery for this Nx_Port. This is only meaningful if Class 2 service has been agreed.')
cfcmFLoginClass2DataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 8), CfcmFcDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginClass2DataFieldSize.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginClass2DataFieldSize.setDescription('The Receive Data Field Size which the Fx_Port has agreed to support for Class 2 frames to/from this Nx_Port. The size specifies the largest Data Field Size for an FT_1 frame. This is only meaningful if Class 2 service has been agreed.')
cfcmFLoginClass3SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginClass3SeqDelivAgreed.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginClass3SeqDelivAgreed.setDescription('An indication of whether the Fx_Port has agreed to support Class 3 sequential delivery for this Nx_Port. This is only meaningful if Class 3 service has been agreed.')
cfcmFLoginClass3DataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 9, 1, 10), CfcmFcDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmFLoginClass3DataFieldSize.setStatus('current')
if mibBuilder.loadTexts: cfcmFLoginClass3DataFieldSize.setDescription('The Receive Data Field Size which the Fx_Port has agreed to support for Class 3 frames to/from this Nx_Port. The size specifies the largest Data Field Size for an FT_1 frame. This is only meaningful if Class 3 service has been agreed.')
cfcmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10), )
if mibBuilder.loadTexts: cfcmLinkTable.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkTable.setDescription("A table containing any Fibre Channel link information which is known to local Fibre Channel managed instances. One end of such a link is typically at a local port, but the table can also contain information on links for which neither end is a local port. If one end of a link terminates locally, then that end is termed 'end1'; the other end is termed 'end2'.")
cfcmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1), ).setIndexNames((0, "CISCO-FC-MGMT-MIB", "cfcmInstanceIndex"), (0, "CISCO-FC-MGMT-MIB", "cfcmLinkIndex"))
if mibBuilder.loadTexts: cfcmLinkEntry.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEntry.setDescription("An entry containing information which a particular Fibre Channel managed instance has about a Fibre Channel link. The two ends of the link are called 'end1' and 'end2'.")
cfcmLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cfcmLinkIndex.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkIndex.setDescription('An arbitrary integer which uniquely identifies one link within the set of links about which a particular managed instance has information.')
cfcmLinkEnd1NodeWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 2), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd1NodeWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd1NodeWwn.setDescription('The node name of end1, or the zero-length string if unknown.')
cfcmLinkEnd1PhysPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd1PhysPortNumber.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sect 6.1.2.2.5')
if mibBuilder.loadTexts: cfcmLinkEnd1PhysPortNumber.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd1PhysPortNumber.setDescription('The physical port number of end1, or zero if unknown.')
cfcmLinkEnd1PortWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 4), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd1PortWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd1PortWwn.setDescription("The port WWN of end1, or the zero-length string if unknown. ('end1' is local if this value is equal to the value of cfcmPortWwn in one of the rows of the cfcmPortTable.)")
cfcmLinkEnd2NodeWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 5), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd2NodeWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd2NodeWwn.setDescription('The node name of end2, or the zero-length string if unknown.')
cfcmLinkEnd2PhysPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd2PhysPortNumber.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sect 6.1.2.2.5')
if mibBuilder.loadTexts: cfcmLinkEnd2PhysPortNumber.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd2PhysPortNumber.setDescription('The physical port number of end2, or zero if unknown.')
cfcmLinkEnd2PortWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 7), CfcmFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd2PortWwn.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd2PortWwn.setDescription('The port WWN of end2, or the zero-length string if unknown.')
cfcmLinkEnd2AgentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd2AgentAddress.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sect 6.1.2.1.7')
if mibBuilder.loadTexts: cfcmLinkEnd2AgentAddress.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd2AgentAddress.setDescription('The address of the SNMP agent for the Fibre Channel Interconnect Element or Platform of which end2 is a part. If the address is unknown, the value of this object is the zero-length string.')
cfcmLinkEnd2PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 9), CfcmFcPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd2PortType.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sect 6.1.2.2.2')
if mibBuilder.loadTexts: cfcmLinkEnd2PortType.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd2PortType.setDescription('The port type of end2.')
cfcmLinkEnd2UnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 10), CfcmFcUnitFunctions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd2UnitType.setReference('FC-GS-3 Rev 7.01, 28 Nov 2000, sections 6.1.2.1.2 and 6.1.2.3.2')
if mibBuilder.loadTexts: cfcmLinkEnd2UnitType.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd2UnitType.setDescription('The type of/function(s) performed by the Fibre Channel Interconnect Element or Platform of which end2 is a part.')
cfcmLinkEnd2FcAddressId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 999999, 1, 10, 1, 11), CfcmFcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcmLinkEnd2FcAddressId.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkEnd2FcAddressId.setDescription('The Fibre Channel Address ID of end2, or the zero-length string if unknown.')
cfcmgmtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 1))
cfcmgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2))
cfcmgmtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 1, 1)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmInstanceBasicGroup"), ("CISCO-FC-MGMT-MIB", "cfcmPortBasicGroup"), ("CISCO-FC-MGMT-MIB", "cfcmPortStatsGroup"), ("CISCO-FC-MGMT-MIB", "cfcmPortErrorsGroup"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass23StatsGroup"), ("CISCO-FC-MGMT-MIB", "cfcmPortClassFStatsGroup"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcStatsGroup"), ("CISCO-FC-MGMT-MIB", "cfcmSwitchBasicGroup"), ("CISCO-FC-MGMT-MIB", "cfcmSwitchPortGroup"), ("CISCO-FC-MGMT-MIB", "cfcmSwitchLoginGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmgmtCompliance = cfcmgmtCompliance.setStatus('current')
if mibBuilder.loadTexts: cfcmgmtCompliance.setDescription('Describes the requirements for compliance to this Fibre Channel Management MIB.')
cfcmInstanceBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 1)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmInstanceWwn"), ("CISCO-FC-MGMT-MIB", "cfcmInstanceFunctions"), ("CISCO-FC-MGMT-MIB", "cfcmInstancePhysicalIndex"), ("CISCO-FC-MGMT-MIB", "cfcmInstanceSoftwareIndex"), ("CISCO-FC-MGMT-MIB", "cfcmInstanceStatus"), ("CISCO-FC-MGMT-MIB", "cfcmInstanceTextName"), ("CISCO-FC-MGMT-MIB", "cfcmInstanceDescr"), ("CISCO-FC-MGMT-MIB", "cfcmInstanceFabricId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmInstanceBasicGroup = cfcmInstanceBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmInstanceBasicGroup.setDescription('Basic information about Fibre Channel managed instances.')
cfcmSwitchBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 2)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmSwitchDomainId"), ("CISCO-FC-MGMT-MIB", "cfcmSwitchPrincipal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmSwitchBasicGroup = cfcmSwitchBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmSwitchBasicGroup.setDescription('Basic information about Fibre Channel switches.')
cfcmPortBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 3)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmPortInstanceIndex"), ("CISCO-FC-MGMT-MIB", "cfcmPortWwn"), ("CISCO-FC-MGMT-MIB", "cfcmPortNodeWwn"), ("CISCO-FC-MGMT-MIB", "cfcmPortAdminType"), ("CISCO-FC-MGMT-MIB", "cfcmPortOperType"), ("CISCO-FC-MGMT-MIB", "cfcmPortFcCapClass"), ("CISCO-FC-MGMT-MIB", "cfcmPortFcOperClass"), ("CISCO-FC-MGMT-MIB", "cfcmPortTransmitterType"), ("CISCO-FC-MGMT-MIB", "cfcmPortConnectorType"), ("CISCO-FC-MGMT-MIB", "cfcmPortSerialNumber"), ("CISCO-FC-MGMT-MIB", "cfcmPortPhysicalNumber"), ("CISCO-FC-MGMT-MIB", "cfcmPortAdminSpeed"), ("CISCO-FC-MGMT-MIB", "cfcmPortCapProtocols"), ("CISCO-FC-MGMT-MIB", "cfcmPortOperProtocols"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmPortBasicGroup = cfcmPortBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmPortBasicGroup.setDescription('Basic information about Fibre Channel ports.')
cfcmPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 4)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmPortBBCreditZeros"), ("CISCO-FC-MGMT-MIB", "cfcmPortFullInputBuffers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmPortStatsGroup = cfcmPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmPortStatsGroup.setDescription('Traffic statistics, which are not specific to any one class of service, for Fibre Channel ports.')
cfcmPortClass23StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 5)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmPortClass2RxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2RxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2TxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2TxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2Discards"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2RxFbsyFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2RxPbsyFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2RxFrjtFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2RxPrjtFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2TxFbsyFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2TxPbsyFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2TxFrjtFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass2TxPrjtFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass3RxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass3RxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass3TxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass3TxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortClass3Discards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmPortClass23StatsGroup = cfcmPortClass23StatsGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClass23StatsGroup.setDescription('Traffic statistics for Class 2 and Class 3 traffic on Fibre Channel ports.')
cfcmPortClassFStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 6)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmPortClassFRxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClassFRxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortClassFTxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortClassFTxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortClassFDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmPortClassFStatsGroup = cfcmPortClassFStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmPortClassFStatsGroup.setDescription('Traffic statistics for Class F traffic on Fibre Channel ports.')
cfcmPortLcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 7)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmPortLcBBCreditZeros"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcFullInputBuffers"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2RxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2RxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2TxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2TxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2Discards"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass3Discards"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass3RxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass3RxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass3TxFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass3TxOctets"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2RxFbsyFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2RxPbsyFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2RxFrjtFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2RxPrjtFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2TxFbsyFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2TxPbsyFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2TxFrjtFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortLcClass2TxPrjtFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmPortLcStatsGroup = cfcmPortLcStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmPortLcStatsGroup.setDescription('Low-capacity (32-bit) statistics for Fibre Channel ports.')
cfcmPortErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 8)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmPortRxLinkResets"), ("CISCO-FC-MGMT-MIB", "cfcmPortTxLinkResets"), ("CISCO-FC-MGMT-MIB", "cfcmPortLinkResets"), ("CISCO-FC-MGMT-MIB", "cfcmPortRxOfflineSequences"), ("CISCO-FC-MGMT-MIB", "cfcmPortTxOfflineSequences"), ("CISCO-FC-MGMT-MIB", "cfcmPortLinkFailures"), ("CISCO-FC-MGMT-MIB", "cfcmPortLossofSynchs"), ("CISCO-FC-MGMT-MIB", "cfcmPortLossofSignals"), ("CISCO-FC-MGMT-MIB", "cfcmPortPrimSeqProtocolErrors"), ("CISCO-FC-MGMT-MIB", "cfcmPortInvalidTxWords"), ("CISCO-FC-MGMT-MIB", "cfcmPortInvalidCRCs"), ("CISCO-FC-MGMT-MIB", "cfcmPortInvalidOrderedSets"), ("CISCO-FC-MGMT-MIB", "cfcmPortFrameTooLongs"), ("CISCO-FC-MGMT-MIB", "cfcmPortTruncatedFrames"), ("CISCO-FC-MGMT-MIB", "cfcmPortAddressErrors"), ("CISCO-FC-MGMT-MIB", "cfcmPortDelimiterErrors"), ("CISCO-FC-MGMT-MIB", "cfcmPortEncodingDisparityErrors"), ("CISCO-FC-MGMT-MIB", "cfcmPortOtherErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmPortErrorsGroup = cfcmPortErrorsGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmPortErrorsGroup.setDescription('Error statistics for Fibre Channel ports.')
cfcmSwitchPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 9)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmFxPortRatov"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortEdtov"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortRttov"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortHoldTime"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortCapBbCreditMax"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortCapBbCreditMin"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortCapDataFieldSizeMax"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortCapDataFieldSizeMin"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortCapClass2SeqDeliv"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortCapClass3SeqDeliv"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortCapHoldTimeMax"), ("CISCO-FC-MGMT-MIB", "cfcmFxPortCapHoldTimeMin"), ("CISCO-FC-MGMT-MIB", "cfcmISPortClassFCredit"), ("CISCO-FC-MGMT-MIB", "cfcmISPortClassFDataFieldSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmSwitchPortGroup = cfcmSwitchPortGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmSwitchPortGroup.setDescription('Information about ports on a Fibre Channel switch.')
cfcmSwitchLoginGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 10)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmFLoginPortWwn"), ("CISCO-FC-MGMT-MIB", "cfcmFLoginNodeWwn"), ("CISCO-FC-MGMT-MIB", "cfcmFLoginBbCreditModel"), ("CISCO-FC-MGMT-MIB", "cfcmFLoginBbCredit"), ("CISCO-FC-MGMT-MIB", "cfcmFLoginClassesAgreed"), ("CISCO-FC-MGMT-MIB", "cfcmFLoginClass2SeqDelivAgreed"), ("CISCO-FC-MGMT-MIB", "cfcmFLoginClass2DataFieldSize"), ("CISCO-FC-MGMT-MIB", "cfcmFLoginClass3SeqDelivAgreed"), ("CISCO-FC-MGMT-MIB", "cfcmFLoginClass3DataFieldSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmSwitchLoginGroup = cfcmSwitchLoginGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmSwitchLoginGroup.setDescription('Information known to a Fibre Channel switch about attached/logged-in Nx_Ports.')
cfcmLinkBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 999999, 3, 2, 11)).setObjects(("CISCO-FC-MGMT-MIB", "cfcmLinkEnd1NodeWwn"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd1PhysPortNumber"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd1PortWwn"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd2NodeWwn"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd2PhysPortNumber"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd2PortWwn"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd2AgentAddress"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd2PortType"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd2UnitType"), ("CISCO-FC-MGMT-MIB", "cfcmLinkEnd2FcAddressId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcmLinkBasicGroup = cfcmLinkBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cfcmLinkBasicGroup.setDescription('Information about Fibre Channel links.')
mibBuilder.exportSymbols("CISCO-FC-MGMT-MIB", cfcmPortClass2TxFbsyFrames=cfcmPortClass2TxFbsyFrames, cfcmPortTxLinkResets=cfcmPortTxLinkResets, cfcmPortTable=cfcmPortTable, cfcmInstanceFabricId=cfcmInstanceFabricId, cfcmLinkEnd1PhysPortNumber=cfcmLinkEnd1PhysPortNumber, CfcmFcUnitFunctions=CfcmFcUnitFunctions, cfcmPortFcOperClass=cfcmPortFcOperClass, cfcmPortClass2RxFbsyFrames=cfcmPortClass2RxFbsyFrames, cfcmFLoginNodeWwn=cfcmFLoginNodeWwn, cfcmFxPortTable=cfcmFxPortTable, cfcmLinkEnd2UnitType=cfcmLinkEnd2UnitType, cfcmPortNodeWwn=cfcmPortNodeWwn, CfcmPhysicalIndexOrZero=CfcmPhysicalIndexOrZero, cfcmPortInstanceIndex=cfcmPortInstanceIndex, cfcmPortLcStatsGroup=cfcmPortLcStatsGroup, cfcmgmtCompliances=cfcmgmtCompliances, cfcmPortLcFullInputBuffers=cfcmPortLcFullInputBuffers, cfcmPortLcClass2TxFrames=cfcmPortLcClass2TxFrames, cfcmLinkIndex=cfcmLinkIndex, cfcmLinkEnd1PortWwn=cfcmLinkEnd1PortWwn, CfcmFcAddressId=CfcmFcAddressId, cfcmSwitchIndex=cfcmSwitchIndex, cfcmInstanceEntry=cfcmInstanceEntry, CfcmFcBbCredit=CfcmFcBbCredit, cfcmPortOperProtocols=cfcmPortOperProtocols, PYSNMP_MODULE_ID=ciscoFcMgmtMIB, cfcmPortAdminType=cfcmPortAdminType, cfcmPortInvalidOrderedSets=cfcmPortInvalidOrderedSets, cfcmPortSerialNumber=cfcmPortSerialNumber, cfcmPortLossofSignals=cfcmPortLossofSignals, cfcmPortClassFStatsGroup=cfcmPortClassFStatsGroup, cfcmPortLcClass3RxFrames=cfcmPortLcClass3RxFrames, cfcmPortLcClass2TxOctets=cfcmPortLcClass2TxOctets, cfcmPortLcClass3Discards=cfcmPortLcClass3Discards, cfcmFxPortCapDataFieldSizeMax=cfcmFxPortCapDataFieldSizeMax, cfcmPortClass2RxPrjtFrames=cfcmPortClass2RxPrjtFrames, cfcmPortTransmitterType=cfcmPortTransmitterType, cfcmISPortTable=cfcmISPortTable, cfcmFLoginPortWwn=cfcmFLoginPortWwn, cfcmPortClass3RxFrames=cfcmPortClass3RxFrames, cfcmPortClass3TxOctets=cfcmPortClass3TxOctets, cfcmPortTxOfflineSequences=cfcmPortTxOfflineSequences, cfcmLinkEnd2PhysPortNumber=cfcmLinkEnd2PhysPortNumber, CfcmFcNameIdOrZero=CfcmFcNameIdOrZero, cfcmInstanceBasicGroup=cfcmInstanceBasicGroup, cfcmPortLcClass2RxFbsyFrames=cfcmPortLcClass2RxFbsyFrames, cfcmPortFrameTooLongs=cfcmPortFrameTooLongs, cfcmInstanceSoftwareIndex=cfcmInstanceSoftwareIndex, cfcmPortLossofSynchs=cfcmPortLossofSynchs, CfcmHrSWInstalledIndexOrZero=CfcmHrSWInstalledIndexOrZero, cfcmPortBasicGroup=cfcmPortBasicGroup, cfcmPortStatsEntry=cfcmPortStatsEntry, cfcmFLoginNxPortIndex=cfcmFLoginNxPortIndex, cfcmInstanceDescr=cfcmInstanceDescr, cfcmFxPortCapBbCreditMax=cfcmFxPortCapBbCreditMax, cfcmPortClassFTxFrames=cfcmPortClassFTxFrames, CfcmFcDataFieldSize=CfcmFcDataFieldSize, cfcmFLoginBbCredit=cfcmFLoginBbCredit, cfcmPortClassFRxOctets=cfcmPortClassFRxOctets, cfcmPortLinkResets=cfcmPortLinkResets, cfcmPortStatsTable=cfcmPortStatsTable, cfcmPortLcClass2TxFbsyFrames=cfcmPortLcClass2TxFbsyFrames, cfcmInstanceTextName=cfcmInstanceTextName, cfcmPortClass2TxFrjtFrames=cfcmPortClass2TxFrjtFrames, cfcmPortLcClass2RxOctets=cfcmPortLcClass2RxOctets, cfcmPortWwn=cfcmPortWwn, cfcmPortClass2RxFrjtFrames=cfcmPortClass2RxFrjtFrames, cfcmFxPortCapBbCreditMin=cfcmFxPortCapBbCreditMin, cfcmFxPortCapDataFieldSizeMin=cfcmFxPortCapDataFieldSizeMin, cfcmSwitchTable=cfcmSwitchTable, cfcmPortInvalidCRCs=cfcmPortInvalidCRCs, cfcmLinkEnd1NodeWwn=cfcmLinkEnd1NodeWwn, cfcmPortConnectorType=cfcmPortConnectorType, cfcmPortStatsGroup=cfcmPortStatsGroup, cfcmLinkBasicGroup=cfcmLinkBasicGroup, cfcmPortClass2RxPbsyFrames=cfcmPortClass2RxPbsyFrames, cfcmPortLcClass2TxPrjtFrames=cfcmPortLcClass2TxPrjtFrames, CfcmFcBbCreditModel=CfcmFcBbCreditModel, cfcmFLoginClass2DataFieldSize=cfcmFLoginClass2DataFieldSize, cfcmPortLcClass2RxPrjtFrames=cfcmPortLcClass2RxPrjtFrames, cfcmPortFullInputBuffers=cfcmPortFullInputBuffers, cfcmLinkEnd2AgentAddress=cfcmLinkEnd2AgentAddress, cfcmPortLcStatsTable=cfcmPortLcStatsTable, CfcmFcClasses=CfcmFcClasses, cfcmFLoginClassesAgreed=cfcmFLoginClassesAgreed, cfcmFLoginClass2SeqDelivAgreed=cfcmFLoginClass2SeqDelivAgreed, cfcmPortErrorsEntry=cfcmPortErrorsEntry, cfcmPortInvalidTxWords=cfcmPortInvalidTxWords, cfcmLinkEnd2PortWwn=cfcmLinkEnd2PortWwn, cfcmFLoginClass3SeqDelivAgreed=cfcmFLoginClass3SeqDelivAgreed, cfcmLinkEnd2PortType=cfcmLinkEnd2PortType, cfcmPortRxOfflineSequences=cfcmPortRxOfflineSequences, cfcmPortErrorsTable=cfcmPortErrorsTable, cfcmPortEncodingDisparityErrors=cfcmPortEncodingDisparityErrors, cfcmPortClass2TxFrames=cfcmPortClass2TxFrames, cfcmPortFcCapClass=cfcmPortFcCapClass, cfcmSwitchPrincipal=cfcmSwitchPrincipal, cfcmInstancePhysicalIndex=cfcmInstancePhysicalIndex, cfcmSwitchDomainId=cfcmSwitchDomainId, cfcmInstanceStatus=cfcmInstanceStatus, cfcmPortPhysicalNumber=cfcmPortPhysicalNumber, cfcmPortLcClass3TxOctets=cfcmPortLcClass3TxOctets, cfcmPortLinkFailures=cfcmPortLinkFailures, cfcmgmtConformance=cfcmgmtConformance, cfcmPortLcClass2RxPbsyFrames=cfcmPortLcClass2RxPbsyFrames, cfcmInstanceIndex=cfcmInstanceIndex, cfcmPortLcClass3TxFrames=cfcmPortLcClass3TxFrames, cfcmFLoginTable=cfcmFLoginTable, cfcmPortLcStatsEntry=cfcmPortLcStatsEntry, cfcmPortLcClass2TxFrjtFrames=cfcmPortLcClass2TxFrjtFrames, cfcmgmtNotifPrefix=cfcmgmtNotifPrefix, cfcmPortAdminSpeed=cfcmPortAdminSpeed, cfcmFxPortCapHoldTimeMax=cfcmFxPortCapHoldTimeMax, cfcmSwitchLoginGroup=cfcmSwitchLoginGroup, cfcmPortClass3TxFrames=cfcmPortClass3TxFrames, cfcmLinkEnd2NodeWwn=cfcmLinkEnd2NodeWwn, cfcmPortClass23StatsGroup=cfcmPortClass23StatsGroup, cfcmInstanceTable=cfcmInstanceTable, cfcmPortErrorsGroup=cfcmPortErrorsGroup, cfcmFLoginBbCreditModel=cfcmFLoginBbCreditModel, cfcmFxPortRttov=cfcmFxPortRttov, CfcmMicroSeconds=CfcmMicroSeconds, cfcmPortAddressErrors=cfcmPortAddressErrors, cfcmPortPrimSeqProtocolErrors=cfcmPortPrimSeqProtocolErrors, cfcmISPortClassFCredit=cfcmISPortClassFCredit, cfcmFLoginEntry=cfcmFLoginEntry, cfcmSwitchPortGroup=cfcmSwitchPortGroup, cfcmPortEntry=cfcmPortEntry, cfcmPortLcClass3RxOctets=cfcmPortLcClass3RxOctets, cfcmPortOtherErrors=cfcmPortOtherErrors, cfcmPortClass3Discards=cfcmPortClass3Discards, cfcmPortClass2RxOctets=cfcmPortClass2RxOctets, cfcmISPortEntry=cfcmISPortEntry, cfcmFxPortRatov=cfcmFxPortRatov, cfcmgmtCompliance=cfcmgmtCompliance, cfcmPortLcClass2RxFrames=cfcmPortLcClass2RxFrames, cfcmFxPortEntry=cfcmFxPortEntry, cfcmSwitchBasicGroup=cfcmSwitchBasicGroup, cfcmInstanceWwn=cfcmInstanceWwn, CfcmDomainIdOrZero=CfcmDomainIdOrZero, cfcmPortDelimiterErrors=cfcmPortDelimiterErrors, cfcmLinkEnd2FcAddressId=cfcmLinkEnd2FcAddressId, cfcmPortClass2TxPbsyFrames=cfcmPortClass2TxPbsyFrames, cfcmPortBBCreditZeros=cfcmPortBBCreditZeros, cfcmPortClassFDiscards=cfcmPortClassFDiscards, cfcmPortClass2Discards=cfcmPortClass2Discards, cfcmFxPortCapClass3SeqDeliv=cfcmFxPortCapClass3SeqDeliv, CfcmFcPortType=CfcmFcPortType, cfcmPortOperType=cfcmPortOperType, cfcmPortTruncatedFrames=cfcmPortTruncatedFrames, cfcmFxPortCapClass2SeqDeliv=cfcmFxPortCapClass2SeqDeliv, cfcmFLoginClass3DataFieldSize=cfcmFLoginClass3DataFieldSize, cfcmFxPortCapHoldTimeMin=cfcmFxPortCapHoldTimeMin, cfcmLinkEntry=cfcmLinkEntry, cfcmPortClassFRxFrames=cfcmPortClassFRxFrames, cfcmgmtObjects=cfcmgmtObjects, cfcmSwitchEntry=cfcmSwitchEntry, cfcmPortCapProtocols=cfcmPortCapProtocols, cfcmPortClass2TxPrjtFrames=cfcmPortClass2TxPrjtFrames, cfcmgmtGroups=cfcmgmtGroups, cfcmPortRxLinkResets=cfcmPortRxLinkResets, cfcmPortLcClass2Discards=cfcmPortLcClass2Discards, cfcmgmtNotifications=cfcmgmtNotifications, cfcmPortLcBBCreditZeros=cfcmPortLcBBCreditZeros, cfcmPortClass2TxOctets=cfcmPortClass2TxOctets, cfcmISPortClassFDataFieldSize=cfcmISPortClassFDataFieldSize, cfcmFxPortEdtov=cfcmFxPortEdtov, cfcmPortClassFTxOctets=cfcmPortClassFTxOctets, cfcmPortLcClass2TxPbsyFrames=cfcmPortLcClass2TxPbsyFrames, cfcmInstanceFunctions=cfcmInstanceFunctions, cfcmPortClass3RxOctets=cfcmPortClass3RxOctets, CfcmMilliSeconds=CfcmMilliSeconds, cfcmPortClass2RxFrames=cfcmPortClass2RxFrames, cfcmFxPortHoldTime=cfcmFxPortHoldTime, cfcmLinkTable=cfcmLinkTable, cfcmPortLcClass2RxFrjtFrames=cfcmPortLcClass2RxFrjtFrames, ciscoFcMgmtMIB=ciscoFcMgmtMIB)
