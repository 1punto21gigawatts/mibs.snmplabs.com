#
# PySNMP MIB module HP-MEMPROC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-MEMPROC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
hpProcurveCommon, = mibBuilder.importSymbols("HP-BASE-MIB", "hpProcurveCommon")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, MibIdentifier, IpAddress, iso, Counter32, Counter64, Bits, Integer32, Opaque, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "MibIdentifier", "IpAddress", "iso", "Counter32", "Counter64", "Bits", "Integer32", "Opaque", "ModuleIdentity")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hpMemprocMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5))
hpMemprocMIB.setRevisions(('2005-02-01 14:55',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpMemprocMIB.setRevisionsDescriptions(('Modified to reflect new OID hierarchy for HP J8162A XL Access Controller Module.',))
if mibBuilder.loadTexts: hpMemprocMIB.setLastUpdated('200502011455Z')
if mibBuilder.loadTexts: hpMemprocMIB.setOrganization('Hewlett Packard Company, ProCurve Networking Business')
if mibBuilder.loadTexts: hpMemprocMIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpMemprocMIB.setDescription('Memory and Process information for HP Procurve product line.')
hpMemprocMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1))
hpMemprocNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 2))
hpMemprocMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 3))
hpmpCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 1))
hpmpMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 2))
class Float(TextualConvention, Opaque):
    description = "A single precision floating-point number. The semantics and encoding are identical for type 'single' defined in IEEE Standard for Binary Floating-Point, ANSI/IEEE Std 754-1985. The value is restricted to the BER serialization of the following ASN.1 type: FLOATTYPE ::= [120] IMPLICIT FloatType (note: the value 120 is the sum of '30'h and '48'h) The BER serialization of the length for values of this type must use the definite length, short encoding form. For example, the BER serialization of value 123 of type FLOATTYPE is '9f780442f60000'h. (The tag is '9f78'h; the length is '04'h; and the value is '42f60000'h.) The BER serialization of value '9f780442f60000'h of data type Opaque is '44079f780442f60000'h. (The tag is '44'h; the length is '07'h; and the value is '9f780442f60000'h."
    status = 'current'
    subtypeSpec = Opaque.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

hpmpCPUTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 1, 1), )
if mibBuilder.loadTexts: hpmpCPUTable.setStatus('current')
if mibBuilder.loadTexts: hpmpCPUTable.setDescription('A table of per CPU load averages and utilization statistics.')
hpmpCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 1, 1, 1), ).setIndexNames((0, "HP-MEMPROC-MIB", "hpmpCPUIndex"))
if mibBuilder.loadTexts: hpmpCPUEntry.setStatus('current')
if mibBuilder.loadTexts: hpmpCPUEntry.setDescription('Information relating to CPU load and utilization.')
hpmpCPUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hpmpCPUIndex.setStatus('current')
if mibBuilder.loadTexts: hpmpCPUIndex.setDescription('An index that uniquely represents a CPU on this device. This index is assigned arbitrarily by the engine and is not saved over reboots.')
hpmpCPULoad1min = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpmpCPULoad1min.setStatus('current')
if mibBuilder.loadTexts: hpmpCPULoad1min.setDescription('The number of processes in the CPU run queue, averaged over the past 1 minute. This is computed by taking the floating point load average value and multiplying by 100, then converting the value to an integer.')
hpmpCPULoad5min = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpmpCPULoad5min.setStatus('current')
if mibBuilder.loadTexts: hpmpCPULoad5min.setDescription('The number of processes in the CPU run queue, averaged over the past 5 minutes. This is computed by taking the floating point load average value and multiplying by 100, then converting the value to an integer.')
hpmpCPULoad15min = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpmpCPULoad15min.setStatus('current')
if mibBuilder.loadTexts: hpmpCPULoad15min.setDescription('The number of processes in the CPU run queue, averaged over the past 15 minutes. This is computed by taking the floating point load average value and multiplying by 100, then converting the value to an integer.')
hpmpCPUPctBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 1, 1, 1, 5), Gauge32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpmpCPUPctBusy.setStatus('current')
if mibBuilder.loadTexts: hpmpCPUPctBusy.setDescription('This object reports the percentage time the CPU was actively engaged during the last interval.')
hpmpMemTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: hpmpMemTable.setStatus('current')
if mibBuilder.loadTexts: hpmpMemTable.setDescription('A table of memory utilization per unique memory pool.')
hpmpMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "HP-MEMPROC-MIB", "hpmpMemIndex"))
if mibBuilder.loadTexts: hpmpMemEntry.setStatus('current')
if mibBuilder.loadTexts: hpmpMemEntry.setDescription('Information relating to memory size and utilization.')
hpmpMemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hpmpMemIndex.setStatus('current')
if mibBuilder.loadTexts: hpmpMemIndex.setDescription('An index that uniquely represents a Memory pool on this device. This index is assigned arbitrarily by the engine and is not saved over reboots.')
hpmpMemDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpmpMemDescr.setStatus('current')
if mibBuilder.loadTexts: hpmpMemDescr.setDescription('This object describes the memory pool reported by hpmpMemIndex.')
hpmpMemInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 2, 1, 1, 3), Unsigned32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpmpMemInUse.setStatus('current')
if mibBuilder.loadTexts: hpmpMemInUse.setDescription('This object reports the amount of physical memory in use by this memory pool.')
hpmpMemTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 2, 1, 1, 4), Unsigned32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpmpMemTotal.setStatus('current')
if mibBuilder.loadTexts: hpmpMemTotal.setDescription('This object reports the total amount of physical memory available to this memory pool.')
hpmpMemPctInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 1, 2, 1, 1, 5), Gauge32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpmpMemPctInUse.setStatus('current')
if mibBuilder.loadTexts: hpmpMemPctInUse.setDescription('This object reports the percent of physical memory in use by this memory pool.')
hpMemprocNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 2, 0))
hpmpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 3, 1))
hpmpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 3, 2))
hpMemprocMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 3, 1, 1)).setObjects(("HP-MEMPROC-MIB", "hpmpCPUGroup"), ("HP-MEMPROC-MIB", "hpmpMemoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpMemprocMIBCompliance1 = hpMemprocMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpMemprocMIBCompliance1.setDescription('The compliance statement for entities which implement the HP-MEMPROC-MIB.')
hpmpCPUGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 3, 2, 1)).setObjects(("HP-MEMPROC-MIB", "hpmpCPULoad1min"), ("HP-MEMPROC-MIB", "hpmpCPULoad5min"), ("HP-MEMPROC-MIB", "hpmpCPULoad15min"), ("HP-MEMPROC-MIB", "hpmpCPUPctBusy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpmpCPUGroup = hpmpCPUGroup.setStatus('current')
if mibBuilder.loadTexts: hpmpCPUGroup.setDescription('A collection of objects providing CPU utilization and load information applicable to all devices.')
hpmpMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 5, 3, 2, 2)).setObjects(("HP-MEMPROC-MIB", "hpmpMemDescr"), ("HP-MEMPROC-MIB", "hpmpMemInUse"), ("HP-MEMPROC-MIB", "hpmpMemTotal"), ("HP-MEMPROC-MIB", "hpmpMemPctInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpmpMemoryGroup = hpmpMemoryGroup.setStatus('current')
if mibBuilder.loadTexts: hpmpMemoryGroup.setDescription('A collection of objects providing memory usage information applicable to all devices.')
mibBuilder.exportSymbols("HP-MEMPROC-MIB", hpmpMemIndex=hpmpMemIndex, hpmpMemPctInUse=hpmpMemPctInUse, hpmpCPUTable=hpmpCPUTable, hpmpCPUGroup=hpmpCPUGroup, hpmpCPUPctBusy=hpmpCPUPctBusy, hpmpCPULoad1min=hpmpCPULoad1min, hpmpCPULoad5min=hpmpCPULoad5min, hpmpCPULoad15min=hpmpCPULoad15min, hpmpMemTable=hpmpMemTable, hpmpGroups=hpmpGroups, hpMemprocMIB=hpMemprocMIB, hpmpMemTotal=hpmpMemTotal, hpMemprocMIBConformance=hpMemprocMIBConformance, hpMemprocMIBCompliance1=hpMemprocMIBCompliance1, hpmpMemInUse=hpmpMemInUse, hpMemprocMIBObjects=hpMemprocMIBObjects, hpmpMemoryGroup=hpmpMemoryGroup, Float=Float, hpmpCPUIndex=hpmpCPUIndex, PYSNMP_MODULE_ID=hpMemprocMIB, hpMemprocNotifications=hpMemprocNotifications, hpmpCPU=hpmpCPU, hpmpCPUEntry=hpmpCPUEntry, hpmpMemory=hpmpMemory, hpmpMemEntry=hpmpMemEntry, hpmpMemDescr=hpmpMemDescr, hpmpCompliances=hpmpCompliances, hpMemprocNotificationsPrefix=hpMemprocNotificationsPrefix)
