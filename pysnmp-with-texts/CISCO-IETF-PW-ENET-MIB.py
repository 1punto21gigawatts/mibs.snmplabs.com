#
# PySNMP MIB module CISCO-IETF-PW-ENET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-PW-ENET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
cpwVcIndex, = mibBuilder.importSymbols("CISCO-IETF-PW-MIB", "cpwVcIndex")
CpwVcVlanCfg, = mibBuilder.importSymbols("CISCO-IETF-PW-TC-MIB", "CpwVcVlanCfg")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Gauge32, Integer32, IpAddress, iso, Bits, ModuleIdentity, NotificationType, MibIdentifier, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, experimental, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Integer32", "IpAddress", "iso", "Bits", "ModuleIdentity", "NotificationType", "MibIdentifier", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "experimental", "Counter64", "Counter32")
DisplayString, TextualConvention, StorageType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "StorageType", "RowStatus")
cpwVcEnetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 108))
cpwVcEnetMIB.setRevisions(('2002-09-22 12:00', '2002-08-20 12:00', '2002-02-03 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cpwVcEnetMIB.setRevisionsDescriptions((" Submited as draft-pwe3-enet-mib-00. Changes from previous version: 1) Alignment with draft-pwe3-ethernet-encap-00.txt: removing 'rangeVLAN' mode and the associated objects. 2) Relaxing requirement on value of pwVcEnetPortVlan in port mode. ", 'Changes from previous version: 1) Add pwVcEnetVcIfIndex - Option for VC as ifIndex. 2) Change counters to 64 bits. 3) Add mode for adding/removing VLAN fields between PW and CE bound interface. 4) Referencing draft-martini instead of draft-so. 5) Editorial changes for some description clauses. 6) MPLS PRI mapping table to be independent (not augmented). 7) Adapt descriptions and rules of use to dratf-ietf-pwe3-Ethernet-encap-00. ', 'initial revision as -00 draft',))
if mibBuilder.loadTexts: cpwVcEnetMIB.setLastUpdated('200209221200Z')
if mibBuilder.loadTexts: cpwVcEnetMIB.setOrganization('IETF PWE3 Working group')
if mibBuilder.loadTexts: cpwVcEnetMIB.setContactInfo('David Zelig Postal: Corrigent Systems 126, Yigal Alon St. Tel-Aviv, ISRAEL Tel: +972-3-6945273 E-mail: davidz@corrigent.com Thomas D. Nadeau Postal: Cisco Systems, Inc. 250 Apollo Drive Chelmsford, MA 01824 Tel: +1-978-497-3051 Email: tnadeau@cisco.com ')
if mibBuilder.loadTexts: cpwVcEnetMIB.setDescription('This MIB describes a model for managing Ethernet point-to-point pseudo wire services over a Packet Switched Network (PSN).')
cpwVcEnetNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 0))
cpwVcEnetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 1))
cpwVcEnetConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 2))
cpwVcEnetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1), )
if mibBuilder.loadTexts: cpwVcEnetTable.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetTable.setDescription('This table contains the index to the Ethernet tables associated with this ETH VC, the VLAN configuration and VLAN mode.')
cpwVcEnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"), (0, "CISCO-IETF-PW-ENET-MIB", "cpwVcEnetPwVlan"))
if mibBuilder.loadTexts: cpwVcEnetEntry.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetEntry.setDescription("This table is indexed by the same index that was created for the associated entry in the PW VC Table in the CISCO-IETF-PW-MIB. The CpwVcIndex and the cpwVcEnetPwVlan are used as indexes to allow multiple VLANs to exist on the same PW. An entry is created in this table by the agent for every entry in the cpwVc table with a VcType of 'ethernetVLAN', 'ethernet' or 'ethernetVPLS'. Additional rows may be created by the operator or the agent if multiple entries are required for the same VC. This table provides Ethernet port mapping and VLAN configuration for each Ethernet VC.")
cpwVcEnetPwVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 1), CpwVcVlanCfg())
if mibBuilder.loadTexts: cpwVcEnetPwVlan.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetPwVlan.setDescription("This Object defines the VLAN on the VC. The value of 4097 is used if the object is not applicable, for example when mapping all packets from an Ethernet port to this VC. The value of 4096 is used to indicate untagged frames (at least from the PW point of view), for example if cpwVcEnetVlanMode is equal 'removeVLAN' or when cpwVcEnetVlanMode equal 'noChange' and cpwVcEnetPortVlan is equal 4096.")
cpwVcEnetVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("portBased", 1), ("noChange", 2), ("changeVlan", 3), ("addVlan", 4), ("removeVlan", 5))).clone('noChange')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetVlanMode.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetVlanMode.setDescription("Indicate the mode of VLAN handling between the port associated to the VC and the VC encapsulation itself. - 'other' indicate operation that is not defined by this MIB. - 'portBased' indicates that the forwarder will forward packets between the port and the PW independent of their structure. - 'noChange' indicates that the VC contains the original user VLAN, as specified in cpwVcEnetPortVlan. - 'changeVlan' indicates that the VLAN field on the VC may be different than the VLAN field on the user's port. - 'removeVlan' indicates that the encapsulation on the VC does not include the original VLAN field. Note that PRI bits transparency is lost in this case. - 'addVlan' indicate that a VLAN field will be added on the PSN bound direction. cpwVcEnetPwVlan indicate the value that will be added. - 'removeVlan', 'addVlan' and 'changeVlan' implementation is not required. ")
cpwVcEnetPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 3), CpwVcVlanCfg().clone(4097)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetPortVlan.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetPortVlan.setDescription("This object define the VLAN value on the physical port (or VPLS virtual port) if a change is required to the VLAN value between the VC and the physical/virtual port. The value of this object can be ignored if the whole traffic from the port is forwarded to one VC independent of the tagging on the port, but it is RECOMENDED that the value in this case will be '4097' indicating not relevant. It MUST be equal to cpwVcEnetPwVlan if 'noChange' mode is used. The value 4096 indicate that no VLAN (i.e. untagged frames) on the port are associated to this VC. This allows the same behaviors as assigning 'Default VLAN' to un-tagged frames. ")
cpwVcEnetVcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetVcIfIndex.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetVcIfIndex.setDescription('It is sometimes convenient to model the VC PW as a virtual interface in the ifTable. In these cases this object hold the value of the ifIndex in the ifTable representing this VC PW. A value of zero indicate no such association or association is not yet known.')
cpwVcEnetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetPortIfIndex.setDescription('This object is used to specify the ifIndex of the ETHERNET port associated with this VC for point-to-point Ethernet service, or the ifIndex of the virtual interface of the VPLS instance associated with the PW if the service is VPLS. Two rows in this table can point to the same ifIndex only if: 1) It is required to support multiple COS on a MPLS PSN for the same service (i.e.: a combination of ports and VLANs) by the use of multiple VC, each with a different COS. 2) There is no overlap of VLAN values specified in cpwVcEnetPortVlan that are associated with this port. A value of zero indicate that association to an ifIndex is not yet known.')
cpwVcEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetRowStatus.setDescription('Enable creating, deleting and modifying this row.')
cpwVcEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 1, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetStorageType.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetStorageType.setDescription('Indicates the storage type of this row.')
cpwVcEnetMplsPriMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2), )
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingTable.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingTable.setDescription('This table may be used for MPLS PSNs if there is a need to hold multiple VC, each with different COS, for the same user service (port + PW VLAN). Such a need may arise if the MPLS network is capable of L-LSP or E-LSP without multiple COS capabilities. Each row is indexed by the cpwVcIndex and indicate the PRI bits on the packet recieved from the user port (or VPLS virtual port) that are classified to this VC. Note that the EXP bit value of the VC is configured in the CISCO-IETF-PW-MPLS-MIB.')
cpwVcEnetMplsPriMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"))
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingTableEntry.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingTableEntry.setDescription('Each entry is created if special classification based on the PRI bits is required for this VC.')
cpwVcEnetMplsPriMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2, 1, 1), Bits().clone(namedValues=NamedValues(("pri000", 0), ("pri001", 1), ("pri010", 2), ("pri011", 3), ("pri100", 4), ("pri101", 5), ("pri110", 6), ("pri111", 7), ("untagged", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetMplsPriMapping.setReference('See appendix A of <draft-ietf-pwe3i-ethernet-encap> for mapping rules of the PRI bits to PSN COS.')
if mibBuilder.loadTexts: cpwVcEnetMplsPriMapping.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetMplsPriMapping.setDescription("This object defines the groups of user PRI mapped into this VC. Each bit set indicates that this user priority is assigned to this VC. The value 'untagged' is used to indicate that untagged frames are also associated to this VC. This object allow the use of different PSN COS based on user marking of PRI bits in MPLS PSN with L-LSP or E-LSP without multiple COS support. In all other cases, the default value MUST be used. It is REQUIRED that there is no overlap on this object between rows serving the same service (port+ PW VLAN). In case of missing BIT configuration between rows to the same service, incoming packets with PRI marking not configured should be handled by the VC with the lowest COS. ")
cpwVcEnetMplsPriMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingRowStatus.setDescription('Enable creating, deleting and modifying this row.')
cpwVcEnetMplsPriMappingStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 2, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingStorageType.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetMplsPriMappingStorageType.setDescription('Indicates the storage type of this row.')
cpwVcEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 3), )
if mibBuilder.loadTexts: cpwVcEnetStatsTable.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetStatsTable.setDescription('This table contains statistical counters specific for Ethernet PW.')
cpwVcEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"))
if mibBuilder.loadTexts: cpwVcEnetStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetStatsEntry.setDescription('Each entry represents the statistics gathered for the VC carrying the Ethernet packets since this VC was first created in the cpwVcEnetTable.')
cpwVcEnetStatsIllegalVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwVcEnetStatsIllegalVlan.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetStatsIllegalVlan.setDescription("The number of packets received (from the PSN) on this VC with an illegal VLAN field, missing VLAN field that was expected, or A VLAN field when it was not expected. This counter is not relevant if the VC type is 'ethernet' (i.e. raw mode), and should be set to 0 by the agent to indicate this.")
cpwVcEnetStatsIllegalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 108, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwVcEnetStatsIllegalLength.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetStatsIllegalLength.setDescription('The number of packets that were received with an illegal Ethernet packet length on this VC. An illegal length is defined as being greater than the value in the advertised maximum MTU supported, or shorter than the allowed Ethernet packet size.')
cpwVcEnetGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 1))
cpwVcEnetCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 2))
cpwVcEnetModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 2, 1)).setObjects(("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetGroup"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcStatsGroup"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetMplsPriGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcEnetModuleCompliance = cpwVcEnetModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetModuleCompliance.setDescription('The compliance statement for agent that support Ethernet PW.')
cpwVcEnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 1, 1)).setObjects(("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetVlanMode"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetPortVlan"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetPortIfIndex"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetVcIfIndex"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetRowStatus"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcEnetGroup = cpwVcEnetGroup.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetGroup.setDescription('Collection of objects for basic Ethernet PW config.')
cpwVcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 1, 2)).setObjects(("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetStatsIllegalVlan"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetStatsIllegalLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcStatsGroup = cpwVcStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cpwVcStatsGroup.setDescription('Collection of objects counting various PW level errors.')
cpwVcEnetMplsPriGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 108, 2, 1, 3)).setObjects(("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetMplsPriMapping"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetMplsPriMappingRowStatus"), ("CISCO-IETF-PW-ENET-MIB", "cpwVcEnetMplsPriMappingStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwVcEnetMplsPriGroup = cpwVcEnetMplsPriGroup.setStatus('current')
if mibBuilder.loadTexts: cpwVcEnetMplsPriGroup.setDescription("Collection of objects defining classification to different PW based on the user's PRI bits mapping. This group is optional, and should be implemented only for MPLS PSN where only L-LSP or single OA E-LSP exists, and different PSN COS is required based on the PRI mapping.")
mibBuilder.exportSymbols("CISCO-IETF-PW-ENET-MIB", cpwVcEnetMplsPriMappingStorageType=cpwVcEnetMplsPriMappingStorageType, cpwVcEnetMplsPriMappingTableEntry=cpwVcEnetMplsPriMappingTableEntry, cpwVcEnetPwVlan=cpwVcEnetPwVlan, cpwVcEnetVlanMode=cpwVcEnetVlanMode, cpwVcEnetMplsPriGroup=cpwVcEnetMplsPriGroup, cpwVcEnetNotifications=cpwVcEnetNotifications, cpwVcEnetConformance=cpwVcEnetConformance, cpwVcStatsGroup=cpwVcStatsGroup, cpwVcEnetMplsPriMapping=cpwVcEnetMplsPriMapping, cpwVcEnetMplsPriMappingRowStatus=cpwVcEnetMplsPriMappingRowStatus, cpwVcEnetPortIfIndex=cpwVcEnetPortIfIndex, cpwVcEnetMplsPriMappingTable=cpwVcEnetMplsPriMappingTable, cpwVcEnetStorageType=cpwVcEnetStorageType, cpwVcEnetMIB=cpwVcEnetMIB, cpwVcEnetStatsTable=cpwVcEnetStatsTable, cpwVcEnetObjects=cpwVcEnetObjects, cpwVcEnetRowStatus=cpwVcEnetRowStatus, PYSNMP_MODULE_ID=cpwVcEnetMIB, cpwVcEnetStatsEntry=cpwVcEnetStatsEntry, cpwVcEnetTable=cpwVcEnetTable, cpwVcEnetGroups=cpwVcEnetGroups, cpwVcEnetModuleCompliance=cpwVcEnetModuleCompliance, cpwVcEnetStatsIllegalLength=cpwVcEnetStatsIllegalLength, cpwVcEnetEntry=cpwVcEnetEntry, cpwVcEnetStatsIllegalVlan=cpwVcEnetStatsIllegalVlan, cpwVcEnetPortVlan=cpwVcEnetPortVlan, cpwVcEnetCompliances=cpwVcEnetCompliances, cpwVcEnetGroup=cpwVcEnetGroup, cpwVcEnetVcIfIndex=cpwVcEnetVcIfIndex)
