#
# PySNMP MIB module HPNSAECC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAECC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, iso, Integer32, Gauge32, IpAddress, enterprises, Unsigned32, ObjectIdentity, NotificationType, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "iso", "Integer32", "Gauge32", "IpAddress", "enterprises", "Unsigned32", "ObjectIdentity", "NotificationType", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaECC = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6))
hpnsaEccMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 1))
hpnsaEccAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2))
hpnsaEccLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3))
hpnsaEccMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccMibRevMajor.setDescription('The major revision level of the MIB.')
hpnsaEccMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccMibRevMinor.setDescription('The minor revision level of the MIB.')
hpnsaEccAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1), )
if mibBuilder.loadTexts: hpnsaEccAgentTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccAgentTable.setDescription('A table of SNMP Agents that satisfy requests for this MIB.')
hpnsaEccAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1), ).setIndexNames((0, "HPNSAECC-MIB", "hpnsaEccAgentIndex"))
if mibBuilder.loadTexts: hpnsaEccAgentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccAgentEntry.setDescription('A description of the agents that access ECC Memory related information.')
hpnsaEccAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccAgentIndex.setDescription('A unique index for this module description.')
hpnsaEccAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccAgentName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccAgentName.setDescription('Name of the Agent/Agents satisfying SNMP requests for this MIB.')
hpnsaEccAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccAgentVersion.setDescription('Version number of the Agent/Agents satisfying SNMP requests for this MIB.')
hpnsaEccAgentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccAgentDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccAgentDate.setDescription('The date on which this Agent was created. field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaEccStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccStatus.setDescription('ECC memory system tracking status: 1 - ECC memory is not supported in this machine 2 - ECC memory logging is disabled due to some errors (example, too many single or multiple bits error occurred in a short period of time) 3 - ECC memory logging is enabled and functioning.')
hpnsaEccEraseLog = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEccEraseLog.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccEraseLog.setDescription("Set this variable to integer value 1234 and without changing it again before hpnsaEccPollTime expired, will erase the system's Log area.")
hpnsaEccTotalErrCorrected = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccTotalErrCorrected.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccTotalErrCorrected.setDescription('Total number of ECC memory error had occurred and been corrected.')
hpnsaEccTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("trapOn", 1), ("trapOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEccTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccTrapEnable.setDescription('Set this variable to 1, the ECC memory errors are forwarded as SNMP traps. No trap are generated if this variable is set to 0.')
hpnsaEccTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEccTrapDelay.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccTrapDelay.setDescription('Delay in milliseconds between the sending of ECC traps.')
hpnsaEccPollTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2592000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEccPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccPollTime.setDescription('Seconds between checking of ECC memory error.')
hpnsaEccMemErrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7), )
if mibBuilder.loadTexts: hpnsaEccMemErrTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccMemErrTable.setDescription('A table of ECC memory error descriptions.')
hpnsaEccMemErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7, 1), ).setIndexNames((0, "HPNSAECC-MIB", "hpnsaEccMemErrIndex"))
if mibBuilder.loadTexts: hpnsaEccMemErrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccMemErrEntry.setDescription('ECC memory error description.')
hpnsaEccMemErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMemErrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccMemErrIndex.setDescription('A unique index for the ECC memory error log.')
hpnsaEccMemErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMemErrTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccMemErrTime.setDescription('The Server local time when the ECC memory error occurred.')
hpnsaEccMemErrDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMemErrDesc.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccMemErrDesc.setDescription('A string indicating the SIMM location when ECC memory error occurred.')
hpnsaEccErrorCorrected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4353))
if mibBuilder.loadTexts: hpnsaEccErrorCorrected.setDescription('An ECC single-bit error has been corrected in one of the memory modules')
hpnsaEccSBEOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4354))
if mibBuilder.loadTexts: hpnsaEccSBEOverflow.setDescription("Error logging for ECC single-bit errors has been disabled due to too many SBE's detected in a short time period")
hpnsaEccMemoryResize = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4355))
if mibBuilder.loadTexts: hpnsaEccMemoryResize.setDescription('ECC Memory size has been adjusted during the Power-On-Self-Test during the last boot due to a failed memory module')
hpnsaEccMultiBitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4357))
if mibBuilder.loadTexts: hpnsaEccMultiBitError.setDescription('An ECC double-bit error has occurred in one of the memory modules')
hpnsaEccMultiBitErrorOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4358))
if mibBuilder.loadTexts: hpnsaEccMultiBitErrorOverflow.setDescription("Error logging for ECC multiple-bit errors has been disabled due to too many MBE's detected in a short time period")
mibBuilder.exportSymbols("HPNSAECC-MIB", hpnsa=hpnsa, hpnsaEccMemErrDesc=hpnsaEccMemErrDesc, hpnsaEccAgentVersion=hpnsaEccAgentVersion, hp=hp, hpnsaEccMibRevMajor=hpnsaEccMibRevMajor, hpnsaEccMemErrTable=hpnsaEccMemErrTable, hpnsaEccLog=hpnsaEccLog, hpnsaEccAgentEntry=hpnsaEccAgentEntry, hpnsaEccAgentDate=hpnsaEccAgentDate, hpnsaEccAgentIndex=hpnsaEccAgentIndex, hpnsaEccMibRev=hpnsaEccMibRev, hpnsaEccMibRevMinor=hpnsaEccMibRevMinor, hpnsaEccMemErrEntry=hpnsaEccMemErrEntry, hpnsaEccErrorCorrected=hpnsaEccErrorCorrected, hpnsaEccAgent=hpnsaEccAgent, hpnsaEccMemErrTime=hpnsaEccMemErrTime, hpnsaEccMemErrIndex=hpnsaEccMemErrIndex, hpnsaEccMemoryResize=hpnsaEccMemoryResize, hpnsaEccMultiBitErrorOverflow=hpnsaEccMultiBitErrorOverflow, hpnsaEccMultiBitError=hpnsaEccMultiBitError, hpnsaEccTrapEnable=hpnsaEccTrapEnable, hpnsaEccAgentTable=hpnsaEccAgentTable, hpnsaEccTrapDelay=hpnsaEccTrapDelay, hpnsaEccEraseLog=hpnsaEccEraseLog, hpnsaEccSBEOverflow=hpnsaEccSBEOverflow, hpnsaEccTotalErrCorrected=hpnsaEccTotalErrCorrected, hpnsaEccAgentName=hpnsaEccAgentName, hpnsaEccPollTime=hpnsaEccPollTime, hpnsaEccStatus=hpnsaEccStatus, hpnsaECC=hpnsaECC, nm=nm)
