#
# PySNMP MIB module XEDIA-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
dot3StatsEntry, = mibBuilder.importSymbols("EtherLike-MIB", "dot3StatsEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, iso, NotificationType, Gauge32, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Bits, IpAddress, ObjectIdentity, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "NotificationType", "Gauge32", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Bits", "IpAddress", "ObjectIdentity", "TimeTicks", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaEthernetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 3))
if mibBuilder.loadTexts: xediaEthernetMIB.setLastUpdated('9701102155Z')
if mibBuilder.loadTexts: xediaEthernetMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaEthernetMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaEthernetMIB.setDescription("This module defines proprietary objects that extend those in IETF's the Ethernet-Like Interface MIB.")
xdot3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 3, 1))
xdot3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 3, 2))
xdot3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1), )
if mibBuilder.loadTexts: xdot3StatsTable.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsTable.setDescription('Additional Xedia proprietary statistics for ethernet-like interfaces.')
xdot3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1), )
dot3StatsEntry.registerAugmentions(("XEDIA-ETHERNET-MIB", "xdot3StatsEntry"))
xdot3StatsEntry.setIndexNames(*dot3StatsEntry.getIndexNames())
if mibBuilder.loadTexts: xdot3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsEntry.setDescription('Additional Xedia proprietary statistics for single ethernet-like interface.')
xdot3StatsOutUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsOutUnderflows.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsOutUnderflows.setDescription("A count of frames not transmitted on a particular interface because of underflow. An underflow occurs when the driver does not keep up with the hardware's transmit speed in providing buffers.")
xdot3StatsOutNoCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsOutNoCarriers.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsOutNoCarriers.setDescription('The number of times that the carrier signal from the transceiver was not present when a frame was to be transmitted.')
xdot3StatsOutCarrierLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsOutCarrierLosses.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsOutCarrierLosses.setDescription('The number of times the carrier was lost during transmission.')
xdot3StatsOutJabberTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsOutJabberTimeouts.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsOutJabberTimeouts.setDescription('The number of times a transmission was aborted because the jabber timer timed out.')
xdot3StatsOutTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsOutTotalCollisions.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsOutTotalCollisions.setDescription('The total number of collisions that have occurred while transmitting on this interface.')
xdot3StatsInDescriptorErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsInDescriptorErrors.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsInDescriptorErrors.setDescription('The number of frames that were truncated because they did not fit within the current desriptor buffers.')
xdot3StatsInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsInRunts.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsInRunts.setDescription('The number of runt frames. A runt frame may have been damaged by collision or premature termination before the collision window had passed.')
xdot3StatsInTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsInTotalCollisions.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsInTotalCollisions.setDescription('The number of collisions detected on incoming frames.')
xdot3StatsInDribbles = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsInDribbles.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsInDribbles.setDescription('The number of frames which were not a multiple of 8 bytes.')
xdot3StatsInOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsInOverflows.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsInOverflows.setDescription('The number of frames that were truncated due to FIFO overflow. This indicates a hardware problem (as opposed to MissedFrames which indicates the software did not keep up).')
xdot3StatsInV1EthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsInV1EthFrames.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsInV1EthFrames.setDescription('The number of Ethernet-type (version 1) frames.')
xdot3StatsInV2Dot3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsInV2Dot3Frames.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsInV2Dot3Frames.setDescription('The number of 802.3-type (version 2) frames.')
xdot3StatsInMissedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3StatsInMissedFrames.setStatus('current')
if mibBuilder.loadTexts: xdot3StatsInMissedFrames.setDescription('The number of frames that were received by the hardware but that were not picked up by the driver.')
xdot3NegotiatedConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("gbps1", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3NegotiatedConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: xdot3NegotiatedConfigSpeed.setDescription('The negotiated configured speed of the interface when the auto negotiates mode is enable.')
xdot3NegotiatedConfigDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3NegotiatedConfigDuplexMode.setStatus('current')
if mibBuilder.loadTexts: xdot3NegotiatedConfigDuplexMode.setDescription('The negotiated configured duplex mode of the interface.')
xdot3NegotiatedFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3NegotiatedFlowControl.setStatus('current')
if mibBuilder.loadTexts: xdot3NegotiatedFlowControl.setDescription('The negotiated configured flow control parameters.')
xdot3IfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3IfOperStatus.setStatus('current')
if mibBuilder.loadTexts: xdot3IfOperStatus.setDescription("This is a reference object (from the ifmib.mi2's ifOperStatus) reports the current operational states of the interface for the auto-negotiate configuration purpose.")
xdot3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 2), )
if mibBuilder.loadTexts: xdot3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: xdot3ConfigTable.setDescription('Xedia proprietary configuration parameters for ethernet-like interfaces.')
xdot3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 2, 1), )
dot3StatsEntry.registerAugmentions(("XEDIA-ETHERNET-MIB", "xdot3ConfigEntry"))
xdot3ConfigEntry.setIndexNames(*dot3StatsEntry.getIndexNames())
if mibBuilder.loadTexts: xdot3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: xdot3ConfigEntry.setDescription('Xedia proprietary configuration parameters for single ethernet-like interface.')
xdot3ConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("gbps1", 3))).clone('mbps100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdot3ConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: xdot3ConfigSpeed.setDescription('The configured speed of the interface. This may be set by the administrator or may be the result of auto-negotiation.')
xdot3ConfigDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2))).clone('half')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdot3ConfigDuplexMode.setStatus('current')
if mibBuilder.loadTexts: xdot3ConfigDuplexMode.setDescription('The configured mode of the interface.')
xdot3ConfigMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tx", 1), ("fx", 2), ("sx", 3), ("lx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdot3ConfigMedia.setStatus('current')
if mibBuilder.loadTexts: xdot3ConfigMedia.setDescription("The media type of the interface. The value 'tx(1)' indicates copper, 'fx(2)' indicates 850 nm multi-mode fiber, 'sx(3)' indicates 850 nm multi-mode fiber and lx(4) indicates 1300 nm single-mode or multi-mode fiber.")
xdot3ConfigCaptureEffectResol = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdot3ConfigCaptureEffectResol.setStatus('current')
if mibBuilder.loadTexts: xdot3ConfigCaptureEffectResol.setDescription("This object controls whether a non-standard backoff algorithm is used for collision handling in order to avoid 'capture effect'. Capture effect occurs when two stations transmit in such a way that, because of collision backoff, one station captures the channel for an unfair amount of time (and the line may remain idle for a long time after that station stops transmitting because of the second station increasing its backoff time.) The value of 'enabled(1)' indicates the enhanced algorithm will be use. The value 'disabled(2)' is the default and indicates the standard backoff algorithm is used.")
xdot3ConfigAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdot3ConfigAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: xdot3ConfigAutoNegotiate.setDescription('This object controls whether to negotiate the speed and duplex mode for 10/100 fast ethernet; and negotiate duplex mode and MAC control for gigabit ethernet interface.')
xdot3Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 3, 2, 1))
xdot3Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 3, 2, 2))
xdot3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 3, 2, 1, 1)).setObjects(("XEDIA-ETHERNET-MIB", "xdot3Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdot3Compliance = xdot3Compliance.setStatus('current')
if mibBuilder.loadTexts: xdot3Compliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xdot3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 3, 2, 2, 1)).setObjects(("XEDIA-ETHERNET-MIB", "xdot3StatsOutUnderflows"), ("XEDIA-ETHERNET-MIB", "xdot3StatsOutNoCarriers"), ("XEDIA-ETHERNET-MIB", "xdot3StatsOutCarrierLosses"), ("XEDIA-ETHERNET-MIB", "xdot3StatsOutJabberTimeouts"), ("XEDIA-ETHERNET-MIB", "xdot3StatsOutTotalCollisions"), ("XEDIA-ETHERNET-MIB", "xdot3StatsInDescriptorErrors"), ("XEDIA-ETHERNET-MIB", "xdot3StatsInRunts"), ("XEDIA-ETHERNET-MIB", "xdot3StatsInTotalCollisions"), ("XEDIA-ETHERNET-MIB", "xdot3StatsInDribbles"), ("XEDIA-ETHERNET-MIB", "xdot3StatsInOverflows"), ("XEDIA-ETHERNET-MIB", "xdot3StatsInV1EthFrames"), ("XEDIA-ETHERNET-MIB", "xdot3StatsInV2Dot3Frames"), ("XEDIA-ETHERNET-MIB", "xdot3StatsInMissedFrames"), ("XEDIA-ETHERNET-MIB", "xdot3ConfigSpeed"), ("XEDIA-ETHERNET-MIB", "xdot3ConfigDuplexMode"), ("XEDIA-ETHERNET-MIB", "xdot3ConfigMedia"), ("XEDIA-ETHERNET-MIB", "xdot3ConfigCaptureEffectResol"), ("XEDIA-ETHERNET-MIB", "xdot3ConfigAutoNegotiate"), ("XEDIA-ETHERNET-MIB", "xdot3NegotiatedConfigSpeed"), ("XEDIA-ETHERNET-MIB", "xdot3NegotiatedConfigDuplexMode"), ("XEDIA-ETHERNET-MIB", "xdot3NegotiatedFlowControl"), ("XEDIA-ETHERNET-MIB", "xdot3IfOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdot3Group = xdot3Group.setStatus('current')
if mibBuilder.loadTexts: xdot3Group.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-ETHERNET-MIB", xdot3StatsInOverflows=xdot3StatsInOverflows, xdot3StatsInDribbles=xdot3StatsInDribbles, xdot3Groups=xdot3Groups, xdot3NegotiatedConfigSpeed=xdot3NegotiatedConfigSpeed, xdot3StatsInMissedFrames=xdot3StatsInMissedFrames, xdot3Compliances=xdot3Compliances, PYSNMP_MODULE_ID=xediaEthernetMIB, xdot3ConfigSpeed=xdot3ConfigSpeed, xdot3NegotiatedConfigDuplexMode=xdot3NegotiatedConfigDuplexMode, xdot3StatsInV2Dot3Frames=xdot3StatsInV2Dot3Frames, xdot3StatsOutJabberTimeouts=xdot3StatsOutJabberTimeouts, xdot3StatsInDescriptorErrors=xdot3StatsInDescriptorErrors, xdot3StatsInRunts=xdot3StatsInRunts, xdot3ConfigEntry=xdot3ConfigEntry, xdot3ConfigAutoNegotiate=xdot3ConfigAutoNegotiate, xdot3StatsInTotalCollisions=xdot3StatsInTotalCollisions, xdot3ConfigTable=xdot3ConfigTable, xdot3Objects=xdot3Objects, xdot3StatsTable=xdot3StatsTable, xdot3ConfigMedia=xdot3ConfigMedia, xdot3StatsOutCarrierLosses=xdot3StatsOutCarrierLosses, xdot3IfOperStatus=xdot3IfOperStatus, xdot3Compliance=xdot3Compliance, xdot3StatsOutUnderflows=xdot3StatsOutUnderflows, xdot3StatsInV1EthFrames=xdot3StatsInV1EthFrames, xdot3StatsOutTotalCollisions=xdot3StatsOutTotalCollisions, xdot3ConfigDuplexMode=xdot3ConfigDuplexMode, xdot3StatsOutNoCarriers=xdot3StatsOutNoCarriers, xdot3NegotiatedFlowControl=xdot3NegotiatedFlowControl, xdot3Group=xdot3Group, xdot3ConfigCaptureEffectResol=xdot3ConfigCaptureEffectResol, xdot3StatsEntry=xdot3StatsEntry, xediaEthernetMIB=xediaEthernetMIB, xdot3Conformance=xdot3Conformance)
