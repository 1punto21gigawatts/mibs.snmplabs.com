#
# PySNMP MIB module RFC1407-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1407-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
extensions, EnableIndicator = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "extensions", "EnableIndicator")
dsx3TotalIndex, = mibBuilder.importSymbols("RFC1407-MIB", "dsx3TotalIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, Bits, Counter64, ModuleIdentity, IpAddress, MibIdentifier, Counter32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "Bits", "Counter64", "ModuleIdentity", "IpAddress", "MibIdentifier", "Counter32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cnds3e3Ext = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 6))
cndsx3Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 6, 1))
cndsx3TotalExt = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 6, 2))
cndsx3ConfigExt = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 6, 3))
cndsx3TotalExtTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 6, 2, 1), )
if mibBuilder.loadTexts: cndsx3TotalExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3TotalExtTable.setDescription('This table contains the counters that are additional to the existing dsx3TotalTable')
cndsx3TotalExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 6, 2, 1, 1), ).setIndexNames((0, "RFC1407-MIB", "dsx3TotalIndex"))
if mibBuilder.loadTexts: cndsx3TotalExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3TotalExtEntry.setDescription('An entry in the DS3/E3 TotalExt table.')
cndsx3CellPayloadHECError = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3CellPayloadHECError.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3CellPayloadHECError.setDescription('A counter of Payload HEC errors.')
cndsx3ConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 6, 3, 1), )
if mibBuilder.loadTexts: cndsx3ConfigExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3ConfigExtTable.setDescription('This table contains the configurable parameters that are additional to the existing dsx3ConfigTable')
cndsx3ConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 6, 3, 1, 1), ).setIndexNames((0, "RFC1407-EXT-MIB", "cndsx3LineIndex"))
if mibBuilder.loadTexts: cndsx3ConfigExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3ConfigExtEntry.setDescription('An entry in the DS3/E3 ConfigExt table.')
cndsx3LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 3, 1, 1, 1), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndsx3LineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3LineBuildOut.setDescription('Indicates LineBuild Out status')
cndsx3LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3LineIndex.setDescription('This object is the identifier of a DS3/E3 Interface on a managed device.')
cndsx3ScramblingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 3, 1, 1, 3), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndsx3ScramblingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3ScramblingEnable.setDescription('This field indicates if scrambing is enabled or disabled.')
cndsx3E3ConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("g751", 2), ("g832", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cndsx3E3ConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3E3ConfigType.setDescription('This object allows to switch between E3 G751 and G832 mode. The following value is read-only: other(1).......other than g751 and g832 The following value is read-write: g751(2)........E3ConfigType is G751 g832(3)........E3ConfigType is G832')
cndsx3OperTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1), )
if mibBuilder.loadTexts: cndsx3OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperTable.setDescription('This table contains the configuration information that are operational currently. This table contains all the objects defined in dsx3ConfigTable plus some additional. This table is read only')
cndsx3OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1), ).setIndexNames((0, "RFC1407-EXT-MIB", "cndsx3OperLineIndex"))
if mibBuilder.loadTexts: cndsx3OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperEntry.setDescription('An entry in the DS3/E3 Operational Configuration table.')
cndsx3OperLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperLineIndex.setDescription('This object is the identifier of a DS3/E3 Interface on a managed device.')
cndsx3OperLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dsx3other", 1), ("dsx3M23", 2), ("dsx3SYNTRAN", 3), ("dsx3CbitParity", 4), ("dsx3ClearChannel", 5), ("e3other", 6), ("e3Framed", 7), ("e3Plcp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperLineType.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperLineType.setDescription('This variable indicates the variety of DS3 C-bit or E3 application implementing this interface. The type of interface affects the interpretation of the usage and error statistics. The rate of DS3 is 44.736 Mbps and E3 is 34.368 Mbps. The dsx3ClearChannel value means that the C-bits are not used except for sending/receiving AIS. The values, in sequence, describe: TITLE: SPECIFICATION: dsx3M23 ANSI T1.107-1988 dsx3SYNTRAN ANSI T1.107-1988 dsx3CbitParity ANSI T1.107a-1989 dsx3ClearChannel ANSI T1.102-1987 e3Framed CCITT G.751 e3Plcp ETSI T/NA(91)18.')
cndsx3OperLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx3NoLoop", 1), ("dsx3PayloadLoop", 2), ("dsx3LineLoop", 3), ("dsx3OtherLoop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperLoopbackConfig.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperLoopbackConfig.setDescription("This variable represents the loopback configuration of the DS3/E3 interface. dsx3NoLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as it's value. dsx3PayloadLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for retransmission after it has passed through the device's framing function. dsx3LineLoop The received signal at this interface does not go through the device (minimum penetration) but is looped back out. dsx3OtherLoop Loopbacks that are not defined here.")
cndsx3OperLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperLineStatus.setDescription('This variable indicates the Line Status of the interface. It contains loopback state information and failure state information. The dsx3LineStatus is a bit map represented as a sum, therefore, it can represent multiple failures and a loopback (see dsx3LoopbackConfig object for the type of loopback) simultaneously. The dsx3NoAlarm should be set if and only if no other flag is set. The various bit positions are: 1 dsx3NoAlarm No alarm present 2 dsx3RcvRAIFailure Receiving Yellow/Remote Alarm Indication 4 dsx3XmitRAIAlarm Transmitting Yellow/Remote Alarm Indication 8 dsx3RcvAIS Receiving AIS failure state 16 dsx3XmitAIS Transmitting AIS 32 dsx3LOF Receiving LOF failure state 64 dsx3LOS Receiving LOS failure state 128 dsx3LoopbackState Looping the received signal 256 dsx3RcvTestCode Receiving a Test Pattern 512 dsx3OtherFailure any line status not defined here')
cndsx3OperTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperTransmitClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperTransmitClockSource.setDescription('The source of Transmit Clock. is derived from the recovered receive clock of another DS3 interface.')
cndsx3OperPlcpLOFEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperPlcpLOFEvent.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperPlcpLOFEvent.setDescription('Indicates PLCP Loss of Frame event. The following value is read-only: on(1).......Loss of Frame event is present off(2)......Loss of Frame event is not present')
cndsx3OperG832CellDelineation = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperG832CellDelineation.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperG832CellDelineation.setDescription('Indicates Cell Delineation events. The following value is read-only: on(1).......Cell Delineation event is present off(2)......Cell Delineation event is not present')
cndsx3OperLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 8), EnableIndicator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperLineBuildOut.setDescription('Indicates line buildout status')
cndsx3OperScramblingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 9), EnableIndicator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperScramblingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperScramblingEnable.setDescription('This field indicates if scrambing is enabled or disabled.')
cndsx3OperE3ConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("g751", 2), ("g832", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cndsx3OperE3ConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: cndsx3OperE3ConfigType.setDescription('This object shows E3Config mode. The following value is read-only: other(1).......other than g751 and g832 g751(2)........E3ConfigType is G751 g832(3)........E3ConfigType is G832')
mibBuilder.exportSymbols("RFC1407-EXT-MIB", cndsx3ConfigExtTable=cndsx3ConfigExtTable, cndsx3OperPlcpLOFEvent=cndsx3OperPlcpLOFEvent, cndsx3LineIndex=cndsx3LineIndex, cndsx3TotalExtTable=cndsx3TotalExtTable, cndsx3E3ConfigType=cndsx3E3ConfigType, cndsx3OperEntry=cndsx3OperEntry, cndsx3TotalExtEntry=cndsx3TotalExtEntry, cndsx3ConfigExtEntry=cndsx3ConfigExtEntry, cndsx3OperTransmitClockSource=cndsx3OperTransmitClockSource, cndsx3OperE3ConfigType=cndsx3OperE3ConfigType, cndsx3OperScramblingEnable=cndsx3OperScramblingEnable, cndsx3OperLineBuildOut=cndsx3OperLineBuildOut, cndsx3OperLineStatus=cndsx3OperLineStatus, cndsx3OperLineType=cndsx3OperLineType, cndsx3TotalExt=cndsx3TotalExt, cndsx3Oper=cndsx3Oper, cndsx3ScramblingEnable=cndsx3ScramblingEnable, cndsx3OperLoopbackConfig=cndsx3OperLoopbackConfig, cndsx3CellPayloadHECError=cndsx3CellPayloadHECError, cndsx3OperTable=cndsx3OperTable, cnds3e3Ext=cnds3e3Ext, cndsx3OperLineIndex=cndsx3OperLineIndex, cndsx3OperG832CellDelineation=cndsx3OperG832CellDelineation, cndsx3LineBuildOut=cndsx3LineBuildOut, cndsx3ConfigExt=cndsx3ConfigExt)
