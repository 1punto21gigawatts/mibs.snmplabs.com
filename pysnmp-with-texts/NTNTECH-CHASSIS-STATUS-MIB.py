#
# PySNMP MIB module NTNTECH-CHASSIS-STATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTNTECH-CHASSIS-STATUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NtnMacAddress, NtnDisplayString, ntntechChassis = mibBuilder.importSymbols("NTNTECH-ROOT-MIB", "NtnMacAddress", "NtnDisplayString", "ntntechChassis")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, ObjectIdentity, TimeTicks, IpAddress, NotificationType, MibIdentifier, ModuleIdentity, Counter32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ObjectIdentity", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "ModuleIdentity", "Counter32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ntntechChassisStatusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2))
ntntechChassisStatusMIB.setRevisions(('1902-05-06 10:54', '1902-08-06 10:45', '1902-08-28 09:35', '1902-09-24 11:24', '1902-10-11 09:00', '1902-10-22 02:00', '1902-11-04 10:36', '1903-11-14 08:42', '1904-03-15 10:16', '1904-04-27 10:42', '1904-10-11 09:19', '1904-11-17 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ntntechChassisStatusMIB.setRevisionsDescriptions(('Add Gigabit detect value to uimStaEthRxTxRate - > uimEthGig(3).', 'Added to the mumStaMgmtPortTable the OIDs mumStaMgmtPortRxTxRate and mumStaMgmtPortDuplex. Added to the mumStaTable OID mumStaType the value smD2000p24(130). Added to the uimStaTable OID uimStaType the value uimGig(6).', 'New Release - v1.01.00', 'Added to the uimStaTable OID uimStaType the value uimFx(7).', 'Added to the mumStaMgmtPortType OID the value uplink(2).', 'New Release - v1.01.01', 'Added to the uimStaTable OID uimStaType the value uim100Fx(8).', 'Added networkExtender, iPD12000E, and iPD4000E to the mumStaChassisType OID.', 'Added sne2040p4 to the mumStaType OID.', 'Added ane8420,sne2040,and bsx8000 to the mumStaType OID.', 'Adjusted the copyright statement and references to Paradyne.', 'New release version 1.02.01',))
if mibBuilder.loadTexts: ntntechChassisStatusMIB.setLastUpdated('0411170200Z')
if mibBuilder.loadTexts: ntntechChassisStatusMIB.setOrganization('Paradyne Corporation')
if mibBuilder.loadTexts: ntntechChassisStatusMIB.setContactInfo('Paradyne Corporation 8545 126th Avenue North Largo, FL 33773 phone: +1 (727) 530-2000 email: support@paradyne.com www: http://www.nettonet.com/support/')
if mibBuilder.loadTexts: ntntechChassisStatusMIB.setDescription("This mib module defines an SNMP API to manage the Paradyne Corporation's IPD12000, IPD4000, and Mini/Micro DSLAMs' chassis status. The interface types are described below, AMD8000-12 12-Port ADSL Mini DSLAMs With Full Rate and G.lite Operational Modes SMD2000-12, SMD2000Q-12, SMD2000G-12 12-Port SDSL Mini DSLAMs: AC and DC Versions with Cap, 2B1Q and G.SHDSL line encoding SuD2011_12T, SuD2011_12E, SuD2003_12T, SuD2003_12E 12-Port SDSL Micro DSLAMs: Cap, 2B1Q and G.SHDSL line encoding SuD2011_6T, SuD2011_6E, SuD2002_6T, SuD2002_6E 6-Port SDSL Micro DSLAMs: Cap, 2B1Q and G.SHDSL line encoding MUM200-2, MUM2000-2 Multiplexer Uplink Module with Dual Uplink Interface Module Capacity UIM-10/100 Uplink Interface Module UIM-DS3 DS3 Uplink Interface Module UIM-E1 E1 Uplink Interface Module UIM-E3 E3 Uplink Interface Module UIM-T1 T1 Uplink Interface Module ")
chsStaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1))
chsStaValues = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1))
valMultiplexerUplinkModule = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1))
mumStaChassisType = MibScalar((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("iPD12000", 1), ("iPD4000", 2), ("miniDSLAM", 3), ("microDSLAM", 4), ("networkExtender", 5), ("iPD12000E", 6), ("iPD4000E", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaChassisType.setStatus('current')
if mibBuilder.loadTexts: mumStaChassisType.setDescription('The physical chassis type - IPD12000, IPD4000, or Mini/Micro DSLAM.')
mumStaFanState = MibScalar((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("fault", 2), ("alert", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaFanState.setStatus('current')
if mibBuilder.loadTexts: mumStaFanState.setDescription('Check the current state of the chassis fan unit. 1 = ON (all fans operational) 2 = Fault (at least one fan within the fan system has malfunctioned) 3 = Alert (all fans within the fan system have malfunctioned)')
mumStaTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 4), )
if mibBuilder.loadTexts: mumStaTable.setStatus('current')
if mibBuilder.loadTexts: mumStaTable.setDescription('A list of MUM200-2/2000-2 module and Mini/Micro DSLAM entries.')
mumStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 4, 1), ).setIndexNames((0, "NTNTECH-CHASSIS-STATUS-MIB", "mumStaIndex"))
if mibBuilder.loadTexts: mumStaEntry.setStatus('current')
if mibBuilder.loadTexts: mumStaEntry.setDescription('An entry containing management information applicable to a MUM200-2/MUM2000-2 module and Mini/Micro DSLAM.')
mumStaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaIndex.setStatus('current')
if mibBuilder.loadTexts: mumStaIndex.setDescription("Translates to the physical slot number that a MUM200-2/2000-2 module exists within a chassis. The Mini/Micro DSLAMs' physical location is set to 1 by default. See below, chassis type physical location(s) translation ------------ -------------------------------- IPD12000 MUM in slots 13,14 = mumCfgIndex 1,2 respecitively IPD4000 MUM in slot 5 = mumCfgIndex 1 Mini DSLAM NA = mumCfgIndex 1 Micro DSLAM NA = mumCfgIndex 1")
mumStaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 4, 1, 2), NtnMacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaMacAddress.setStatus('current')
if mibBuilder.loadTexts: mumStaMacAddress.setDescription('The Mac Address of the MUM200-2/2000-2 module or Mini/Micro DSLAM.')
mumStaFirmWareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaFirmWareRev.setStatus('current')
if mibBuilder.loadTexts: mumStaFirmWareRev.setDescription('The firmware revision of the MUM200-2/2000-2 module or Mini/Micro DSLAM.')
mumStaType = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(129, 128, 11, 7, 8, 19, 130, 22, 23, 24, 25, 26, 27, 28, 29, 135, 14, 137))).clone(namedValues=NamedValues(("mum2000p2", 129), ("mum200p2", 128), ("amD8000p12", 11), ("smD2000p12", 7), ("smD2000Qp12", 8), ("smD2000Gp12", 19), ("smD2000p24", 130), ("suD2011p12T", 22), ("suD2011p12E", 23), ("suD2003p12T", 24), ("suD2003p12E", 25), ("suD2011p6T", 26), ("suD2011p6E", 27), ("suD2002p6T", 28), ("suD2002p6E", 29), ("ane8420", 135), ("sne2040", 14), ("bsx8000", 137)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaType.setStatus('current')
if mibBuilder.loadTexts: mumStaType.setDescription('The physical multiplexer uplink module type.')
mumStaMgmtPortTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 5), )
if mibBuilder.loadTexts: mumStaMgmtPortTable.setStatus('current')
if mibBuilder.loadTexts: mumStaMgmtPortTable.setDescription('A list of the hardware platform management port entries.')
mumStaMgmtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 5, 1), ).setIndexNames((0, "NTNTECH-CHASSIS-STATUS-MIB", "mumStaMgmtPortMumIndex"))
if mibBuilder.loadTexts: mumStaMgmtPortEntry.setStatus('current')
if mibBuilder.loadTexts: mumStaMgmtPortEntry.setDescription('An entry containing information about the state of the managment (ethernet type) port.')
mumStaMgmtPortMumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaMgmtPortMumIndex.setStatus('current')
if mibBuilder.loadTexts: mumStaMgmtPortMumIndex.setDescription("Translates to the physical slot number that a MUM200-2/2000-2 module exists within a chassis. The Mini/Micro DSLAMs' physical location is set to 1 by default. See below, chassis type physical location(s) translation ------------ -------------------------------- IPD12000 MUM in slots 13,14 = mumStaMgmtPortMumIndex 1,2 respecitively IPD4000 MUM in slot 5 = mumStaMgmtPortMumIndex 1 Mini DSLAM NA = mumStaMgmtPortMumIndex 1 Micro DSLAM NA = mumStaMgmtPortMumIndex 1")
mumStaMgmtPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mgmt", 1), ("uplink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaMgmtPortType.setStatus('current')
if mibBuilder.loadTexts: mumStaMgmtPortType.setDescription('The management port type installed in the MUM200-2/2000-2 module or Mini/Micro DSLAM.')
mumStaMgmtPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link", 1), ("noLink", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaMgmtPortLinkState.setStatus('current')
if mibBuilder.loadTexts: mumStaMgmtPortLinkState.setDescription('The management port Link state.')
mumStaMgmtPortRxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("uimEthNoLink", 0), ("uimEth10", 1), ("uimEth100", 2), ("uimEthGig", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaMgmtPortRxTxRate.setStatus('current')
if mibBuilder.loadTexts: mumStaMgmtPortRxTxRate.setDescription('The RxTx rate for an ethernet management port.')
mumStaMgmtPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("uimEthNoLink", 0), ("uimEthHalf", 1), ("uimEthFull", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mumStaMgmtPortDuplex.setStatus('current')
if mibBuilder.loadTexts: mumStaMgmtPortDuplex.setDescription('The current duplex setting for an ethernet UIM.')
mumStaUplinkInterfaceModule = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6))
uimStaTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 1), )
if mibBuilder.loadTexts: uimStaTable.setStatus('current')
if mibBuilder.loadTexts: uimStaTable.setDescription('A list of MUM200-2/2000-2 module or Mini/Micro DSLAM Uplink Interface Module (UIM) entries.')
uimStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 1, 1), ).setIndexNames((0, "NTNTECH-CHASSIS-STATUS-MIB", "uimStaMumIndex"), (0, "NTNTECH-CHASSIS-STATUS-MIB", "uimStaIndex"))
if mibBuilder.loadTexts: uimStaEntry.setStatus('current')
if mibBuilder.loadTexts: uimStaEntry.setDescription('An entry containing information applicable to a MUM200-2, MUM2000-2, or Mini/Micro DSLAM Uplink Interface Module (UIM).')
uimStaMumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaMumIndex.setStatus('current')
if mibBuilder.loadTexts: uimStaMumIndex.setDescription("Translates to the physical slot number that a MUM200-2/2000-2 module exists within a chassis. The Mini/Micro DSLAMs' physical location is set to 1 by default. See below, chassis type physical location(s) translation ------------ -------------------------------- IPD12000 MUM in slots 13,14 = uimStaMumIndex 1,2 respecitively IPD4000 MUM in slot 5 = uimStaMumIndex 1 Mini DSLAM NA = uimStaMumIndex 1 Micro DSLAM NA = uimStaMumIndex 1")
uimStaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaIndex.setStatus('current')
if mibBuilder.loadTexts: uimStaIndex.setDescription('The physical slot used to access the UIM in the MUM200-2/2000-2 module or Mini/Micro DSLAM.')
uimStaType = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("uimEther100", 1), ("uimT1", 2), ("uimDS3", 3), ("uimE1", 4), ("uimE3", 5), ("uimGig", 6), ("uimGigFx", 7), ("uim100Fx", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaType.setStatus('current')
if mibBuilder.loadTexts: uimStaType.setDescription('The UIM type installed in the MUM200-2/2000-2 module or Mini/Micro DSLAM. Exception: A MUM200-2 module will represent a T1 or E1 UIM with the uimT1(2) identifier. In addition, the MUM200-2 will represent a DS3 or E3 UIM with the uimDS3(3) identifier.')
uimStaLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link", 1), ("noLink", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaLinkState.setStatus('current')
if mibBuilder.loadTexts: uimStaLinkState.setDescription('The UIM Link state.')
uimStaEthTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: uimStaEthTable.setStatus('current')
if mibBuilder.loadTexts: uimStaEthTable.setDescription('A list of ethernet Uplink Interface Module (UIM) entries.')
uimStaEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "NTNTECH-CHASSIS-STATUS-MIB", "uimStaEthMumIndex"), (0, "NTNTECH-CHASSIS-STATUS-MIB", "uimStaEthIndex"))
if mibBuilder.loadTexts: uimStaEthEntry.setStatus('current')
if mibBuilder.loadTexts: uimStaEthEntry.setDescription('An entry containing information applicable to an ethernet Uplink Interface Module (UIM).')
uimStaEthMumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaEthMumIndex.setStatus('current')
if mibBuilder.loadTexts: uimStaEthMumIndex.setDescription("Translates to the physical slot number that a MUM200-2/2000-2 module exists within a chassis. The Mini/Micro DSLAMs' physical location is set to 1 by default. See below, chassis type physical location(s) translation ------------ -------------------------------- IPD12000 MUM in slots 13,14 = uimStaEthMumIndex 1,2 respecitively IPD4000 MUM in slot 5 = uimStaEthMumIndex 1 Mini DSLAM NA = uimStaEthMumIndex 1 Micro DSLAM NA = uimStaEthMumIndex 1")
uimStaEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaEthIndex.setStatus('current')
if mibBuilder.loadTexts: uimStaEthIndex.setDescription('The physical slot used to access the UIM in the MUM200-2/2000-2 module or Mini/Micro DSLAM.')
uimStaEthRxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("uimEthNoLink", 0), ("uimEth10", 1), ("uimEth100", 2), ("uimEthGig", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaEthRxTxRate.setStatus('current')
if mibBuilder.loadTexts: uimStaEthRxTxRate.setDescription('The current RxTx rate for an ethernet UIM.')
uimStaEthDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("uimEthNoLink", 0), ("uimEthHalf", 1), ("uimEthFull", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaEthDuplex.setStatus('current')
if mibBuilder.loadTexts: uimStaEthDuplex.setDescription('The current duplex setting for an ethernet UIM.')
uimStaT1Table = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 3), )
if mibBuilder.loadTexts: uimStaT1Table.setStatus('current')
if mibBuilder.loadTexts: uimStaT1Table.setDescription('A list of T1 Uplink Interface Module (UIM) entries.')
uimStaT1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 3, 1), ).setIndexNames((0, "NTNTECH-CHASSIS-STATUS-MIB", "uimStaT1MumIndex"), (0, "NTNTECH-CHASSIS-STATUS-MIB", "uimStaT1Index"))
if mibBuilder.loadTexts: uimStaT1Entry.setStatus('current')
if mibBuilder.loadTexts: uimStaT1Entry.setDescription('An entry containing information applicable to a T1 Uplink Interface Module (UIM).')
uimStaT1MumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaT1MumIndex.setStatus('current')
if mibBuilder.loadTexts: uimStaT1MumIndex.setDescription("Translates to the physical slot number that a MUM200-2/2000-2 module exists within a chassis. The Mini/Micro DSLAMs' physical location is set to 1 by default. See below, chassis type physical location(s) translation ------------ -------------------------------- IPD12000 MUM in slots 13,14 = uimStaT1MumIndex 1,2 respecitively IPD4000 MUM in slot 5 = uimStaT1MumIndex 1 Mini DSLAM NA = uimStaT1MumIndex 1 Micro DSLAM NA = uimStaT1MumIndex 1")
uimStaT1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaT1Index.setStatus('current')
if mibBuilder.loadTexts: uimStaT1Index.setDescription('The physical slot used to access the UIM in the MUM200-2/2000-2 module or Mini/Micro DSLAM.')
uimStaT1RxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("uimT1NoLink", 0), ("uimT1Rate192", 1), ("uimT1Rate384", 2), ("uimT1Rate576", 3), ("uimT1Rate768", 4), ("uimT1Rate960", 5), ("uimT1Rate1152", 6), ("uimT1Rate1344", 7), ("uimT1Rate1536", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaT1RxTxRate.setStatus('current')
if mibBuilder.loadTexts: uimStaT1RxTxRate.setDescription('The current RxTx rate for a T1 UIM.')
uimStaE1Table = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 4), )
if mibBuilder.loadTexts: uimStaE1Table.setStatus('current')
if mibBuilder.loadTexts: uimStaE1Table.setDescription('A list of E1 Uplink Interface Module (UIM) entries.')
uimStaE1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 4, 1), ).setIndexNames((0, "NTNTECH-CHASSIS-STATUS-MIB", "uimStaE1MumIndex"), (0, "NTNTECH-CHASSIS-STATUS-MIB", "uimStaE1Index"))
if mibBuilder.loadTexts: uimStaE1Entry.setStatus('current')
if mibBuilder.loadTexts: uimStaE1Entry.setDescription('An entry containing information applicable to an E1 Uplink Interface Module (UIM).')
uimStaE1MumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaE1MumIndex.setStatus('current')
if mibBuilder.loadTexts: uimStaE1MumIndex.setDescription("Translates to the physical slot number that a MUM200-2/2000-2 module exists within a chassis. The Mini/Micro DSLAMs' physical location is set to 1 by default. See below, chassis type physical location(s) translation ------------ -------------------------------- IPD12000 MUM in slots 13,14 = uimStaE1MumIndex 1,2 respecitively IPD4000 MUM in slot 5 = uimStaE1MumIndex 1 Mini DSLAM NA = uimStaE1MumIndex 1 Micro DSLAM NA = uimStaE1MumIndex 1")
uimStaE1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaE1Index.setStatus('current')
if mibBuilder.loadTexts: uimStaE1Index.setDescription('The physical slot used to access the UIM in the MUM200-2/2000-2 module or Mini/Micro DSLAM.')
uimStaE1RxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 1, 2, 1, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("uimE1NoLink", 0), ("uimE1Rate256", 1), ("uimE1Rate512", 2), ("uimE1Rate768", 3), ("uimE1Rate1024", 4), ("uimE1Rate1280", 5), ("uimE1Rate1536", 6), ("uimE1Rate1792", 7), ("uimE1Rate1984", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uimStaE1RxTxRate.setStatus('current')
if mibBuilder.loadTexts: uimStaE1RxTxRate.setDescription('The current RxTx rate for an E1 UIM.')
mibBuilder.exportSymbols("NTNTECH-CHASSIS-STATUS-MIB", mumStaMgmtPortDuplex=mumStaMgmtPortDuplex, uimStaEntry=uimStaEntry, uimStaIndex=uimStaIndex, uimStaEthDuplex=uimStaEthDuplex, uimStaT1Entry=uimStaT1Entry, uimStaLinkState=uimStaLinkState, mumStaIndex=mumStaIndex, mumStaMgmtPortEntry=mumStaMgmtPortEntry, mumStaMacAddress=mumStaMacAddress, uimStaT1Table=uimStaT1Table, uimStaT1Index=uimStaT1Index, mumStaFanState=mumStaFanState, mumStaMgmtPortLinkState=mumStaMgmtPortLinkState, chsStaMIBObjects=chsStaMIBObjects, mumStaEntry=mumStaEntry, uimStaE1RxTxRate=uimStaE1RxTxRate, uimStaType=uimStaType, valMultiplexerUplinkModule=valMultiplexerUplinkModule, uimStaEthMumIndex=uimStaEthMumIndex, uimStaT1MumIndex=uimStaT1MumIndex, uimStaE1MumIndex=uimStaE1MumIndex, mumStaMgmtPortMumIndex=mumStaMgmtPortMumIndex, uimStaMumIndex=uimStaMumIndex, uimStaE1Index=uimStaE1Index, mumStaUplinkInterfaceModule=mumStaUplinkInterfaceModule, mumStaMgmtPortRxTxRate=mumStaMgmtPortRxTxRate, mumStaType=mumStaType, mumStaChassisType=mumStaChassisType, mumStaFirmWareRev=mumStaFirmWareRev, uimStaT1RxTxRate=uimStaT1RxTxRate, uimStaE1Entry=uimStaE1Entry, PYSNMP_MODULE_ID=ntntechChassisStatusMIB, uimStaEthEntry=uimStaEthEntry, uimStaE1Table=uimStaE1Table, uimStaEthIndex=uimStaEthIndex, mumStaTable=mumStaTable, uimStaTable=uimStaTable, uimStaEthRxTxRate=uimStaEthRxTxRate, mumStaMgmtPortTable=mumStaMgmtPortTable, chsStaValues=chsStaValues, ntntechChassisStatusMIB=ntntechChassisStatusMIB, uimStaEthTable=uimStaEthTable, mumStaMgmtPortType=mumStaMgmtPortType)
