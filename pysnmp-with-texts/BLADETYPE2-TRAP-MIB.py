#
# PySNMP MIB module BLADETYPE2-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE2-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ipCurCfgGwIndex, vrrpCurCfgVirtRtrAddr, vrrpCurCfgIfIndx, ipCurCfgGwAddr, vrrpCurCfgIfPasswd, vrrpCurCfgVirtRtrIndx = mibBuilder.importSymbols("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwIndex", "vrrpCurCfgVirtRtrAddr", "vrrpCurCfgIfIndx", "ipCurCfgGwAddr", "vrrpCurCfgIfPasswd", "vrrpCurCfgVirtRtrIndx")
stgCurCfgIndex, = mibBuilder.importSymbols("BLADETYPE2-PHYSICAL-MIB", "stgCurCfgIndex")
agChassis, agRackId, agSlotNumber = mibBuilder.importSymbols("BLADETYPE2-SWITCH-MIB", "agChassis", "agRackId", "agSlotNumber")
hpSwitchBladeType2_Mgmt, = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType2-Mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysLocation, sysContact, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysContact", "sysName")
Integer32, iso, ObjectIdentity, TimeTicks, Counter64, Gauge32, NotificationType, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, MibIdentifier, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "ObjectIdentity", "TimeTicks", "Counter64", "Gauge32", "NotificationType", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bt2Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7))
bt2SwTrapDisplayString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bt2SwTrapDisplayString.setStatus('mandatory')
if mibBuilder.loadTexts: bt2SwTrapDisplayString.setDescription('Temporary string object used to store information being sent in an Bladetype2 Switch trap.')
bt2SwPrimaryPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,1))
if mibBuilder.loadTexts: bt2SwPrimaryPowerSupplyFailure.setDescription('A bt2SwPrimaryPowerSupplyFailure trap signifies that the primary power supply failed.')
bt2SwDefGwUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,2)).setObjects(("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwIndex"), ("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwDefGwUp.setDescription('A bt2SwDefGwUp trap signifies that the default gateway is alive.')
bt2SwDefGwDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,3)).setObjects(("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwIndex"), ("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwDefGwDown.setDescription('A bt2SwDefGwDown trap signifies that the default gateway is down.')
bt2SwDefGwInService = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,4)).setObjects(("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwIndex"), ("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwDefGwInService.setDescription('A bt2SwDefGwEnabled trap signifies that the default gateway is up and in service.')
bt2SwDefGwNotInService = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,5)).setObjects(("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwIndex"), ("BLADETYPE2-NETWORK-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwDefGwNotInService.setDescription('A bt2SwDefGwDisabled trap signifies that the default gateway is alive but not in service.')
bt2SwVrrpNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,16)).setObjects(("BLADETYPE2-NETWORK-MIB", "vrrpCurCfgVirtRtrIndx"), ("BLADETYPE2-NETWORK-MIB", "vrrpCurCfgVirtRtrAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwVrrpNewMaster.setDescription("The bt2SwVrrpNewMaster trap indicates that the sending agent has transitioned to 'Master' state.")
bt2SwVrrpNewBackup = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,17)).setObjects(("BLADETYPE2-NETWORK-MIB", "vrrpCurCfgVirtRtrIndx"), ("BLADETYPE2-NETWORK-MIB", "vrrpCurCfgVirtRtrAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwVrrpNewBackup.setDescription("The bt2SwVrrpNewBackup trap indicates that the sending agent has transitioned to 'Backup' state.")
bt2SwVrrpAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,18)).setObjects(("BLADETYPE2-NETWORK-MIB", "vrrpCurCfgIfIndx"), ("BLADETYPE2-NETWORK-MIB", "vrrpCurCfgIfPasswd"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwVrrpAuthFailure.setDescription("A bt2SwVrrpAuthFailure trap signifies that a packet has been received from a router whose authentication key or authentication type conflicts with this router's authentication key or authentication type. Implementation of this trap is optional.")
bt2SwLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,19)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwLoginFailure.setDescription('A bt2SwLoginFailure trap signifies that someone failed to enter a valid username/password combination.')
bt2SwTempExceedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,22)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwTempExceedThreshold.setDescription('A bt2SwTempExceedThreshold trap signifies that the switch temperature has exceeded maximum safety limits.')
bt2SwRackLocationChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,26)).setObjects(("BLADETYPE2-SWITCH-MIB", "agRackId"), ("BLADETYPE2-SWITCH-MIB", "agChassis"), ("BLADETYPE2-SWITCH-MIB", "agSlotNumber"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwRackLocationChange.setDescription('A bt2SwRackLocationChange trap signifies that the rack location has been changed.')
bt2SwApplyComplete = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,27)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwApplyComplete.setDescription('A bt2SwApplyComplete signifies that new configuration has been applied.')
bt2SwSaveComplete = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,28)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwSaveComplete.setDescription('A bt2SwApplyComplete signifies that new configuration has been saved.')
bt2SwFwDownloadSucess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,29)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwFwDownloadSucess.setDescription('A bt2SwFwDownloadSuccess signifies that firmware has been downloaded to [image1|image2|boot image].')
bt2SwFwDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,30)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwFwDownloadFailure.setDescription('A bt2SwFwDownloadFailure signifies that firmware downloaded failed to [image1|image2|boot image].')
bt2SwTempReturnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,31)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwTempReturnThreshold.setDescription('A bt2SwTempReturnThreshold trap signifies that the switch temperature has returned below maximum safety limits.')
bt2SwFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,32)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwFanFailure.setDescription('A bt2SwFanFailure trap signifies that the fan failure has been detected.')
bt2SwFanFailureFixed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,33)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwFanFailureFixed.setDescription('A bt2SwFanFailureFixed trap signifies that the fan failure has been fixed.')
bt2SwUfdfoLtMFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,34)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwUfdfoLtMFailure.setDescription('A bt2SwUfdfoLtMFailure trap signifies that a LtM link is down.')
bt2SwUfdfoLtMUP = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,35)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwUfdfoLtMUP.setDescription('A bt2SwUfdfoLtMUP trap signifies that a LtM link is up.')
bt2SwUfdfoGlobalEna = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,36)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwUfdfoGlobalEna.setDescription('A bt2SwUfdfoGlobalEna trap signifies that Global UFD is enabled.')
bt2SwUfdfoGlobalDis = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,37)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwUfdfoGlobalDis.setDescription('A bt2SwUfdfoGlobalDis trap signifies that Global UFD is disabled.')
bt2SwUfdfoLtDAutoEna = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,38)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwUfdfoLtDAutoEna.setDescription('A bt2SwUfdfoLtDAutoEna trap signifies that a LtD link is Auto Enabled.')
bt2SwUfdfoLtDAutoDis = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,39)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwUfdfoLtDAutoDis.setDescription('A bt2SwUfdfoLtDAutoDis trap signifies that a LtD link is Auto Disabled.')
bt2SwCubeInserted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,40)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwCubeInserted.setDescription('A Cube was inserted.')
bt2SwCubeRemoved = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,41)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwCubeRemoved.setDescription('A Cube was removed.')
bt2SwStgNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,42)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("BLADETYPE2-PHYSICAL-MIB", "stgCurCfgIndex"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwStgNewRoot.setDescription('A bt2SwStgNewRoot trap signifies that the bridge has become the new root of the STG.')
bt2SwCistNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,43)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwCistNewRoot.setDescription('A bt2SwCistNewRoot trap signifies that the bridge has become the new root of the CIST.')
bt2SwStgTopologyChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,44)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("BLADETYPE2-PHYSICAL-MIB", "stgCurCfgIndex"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwStgTopologyChanged.setDescription('A bt2SwStgTopologyChanged trap signifies that there was a STG topology change.')
bt2SwCistTopologyChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,45)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwCistTopologyChanged.setDescription('A bt2SwCistTopologyChanged trap signifies that there was a CIST topology change.')
bt2SwHotlinksMasterUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,46)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwHotlinksMasterUp.setDescription('A bt2SwHotlinksMasterUp trap signifies that the Master interface is active.')
bt2SwHotlinksMasterDn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,47)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwHotlinksMasterDn.setDescription('A bt2SwHotlinksMasterDn trap signifies that the Master interface is not active.')
bt2SwHotlinksBackupUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,48)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwHotlinksBackupUp.setDescription('A bt2SwHotlinksBackupUp trap signifies that the Backup interface is active.')
bt2SwHotlinksBackupDn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,49)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwHotlinksBackupDn.setDescription('A bt2SwHotlinksBackupDn trap signifies that the Backup interface is not active.')
bt2SwHotlinksNone = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 7) + (0,50)).setObjects(("BLADETYPE2-TRAP-MIB", "bt2SwTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: bt2SwHotlinksNone.setDescription('A bt2SwHotlinksNone trap signifies that there are no active interfaces.')
mibBuilder.exportSymbols("BLADETYPE2-TRAP-MIB", bt2SwFwDownloadFailure=bt2SwFwDownloadFailure, bt2SwUfdfoLtDAutoEna=bt2SwUfdfoLtDAutoEna, bt2SwPrimaryPowerSupplyFailure=bt2SwPrimaryPowerSupplyFailure, bt2SwTrapDisplayString=bt2SwTrapDisplayString, bt2SwDefGwUp=bt2SwDefGwUp, bt2SwCistTopologyChanged=bt2SwCistTopologyChanged, bt2SwDefGwNotInService=bt2SwDefGwNotInService, bt2SwUfdfoLtMFailure=bt2SwUfdfoLtMFailure, bt2SwHotlinksMasterUp=bt2SwHotlinksMasterUp, bt2SwUfdfoGlobalEna=bt2SwUfdfoGlobalEna, bt2SwVrrpNewBackup=bt2SwVrrpNewBackup, bt2SwUfdfoGlobalDis=bt2SwUfdfoGlobalDis, bt2SwTempReturnThreshold=bt2SwTempReturnThreshold, bt2SwDefGwInService=bt2SwDefGwInService, bt2SwTempExceedThreshold=bt2SwTempExceedThreshold, bt2SwFwDownloadSucess=bt2SwFwDownloadSucess, bt2SwHotlinksBackupUp=bt2SwHotlinksBackupUp, bt2SwDefGwDown=bt2SwDefGwDown, bt2SwApplyComplete=bt2SwApplyComplete, bt2SwStgTopologyChanged=bt2SwStgTopologyChanged, bt2SwLoginFailure=bt2SwLoginFailure, bt2SwUfdfoLtMUP=bt2SwUfdfoLtMUP, bt2SwCistNewRoot=bt2SwCistNewRoot, bt2SwSaveComplete=bt2SwSaveComplete, bt2SwHotlinksMasterDn=bt2SwHotlinksMasterDn, bt2SwHotlinksNone=bt2SwHotlinksNone, bt2SwUfdfoLtDAutoDis=bt2SwUfdfoLtDAutoDis, bt2SwRackLocationChange=bt2SwRackLocationChange, bt2SwStgNewRoot=bt2SwStgNewRoot, bt2SwVrrpNewMaster=bt2SwVrrpNewMaster, bt2SwCubeRemoved=bt2SwCubeRemoved, bt2SwFanFailureFixed=bt2SwFanFailureFixed, bt2SwCubeInserted=bt2SwCubeInserted, bt2SwFanFailure=bt2SwFanFailure, bt2SwHotlinksBackupDn=bt2SwHotlinksBackupDn, bt2SwVrrpAuthFailure=bt2SwVrrpAuthFailure, bt2Traps=bt2Traps)
