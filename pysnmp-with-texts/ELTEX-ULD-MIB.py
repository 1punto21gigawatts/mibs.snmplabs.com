#
# PySNMP MIB module ELTEX-ULD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-ULD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:02:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
eltexLtd, = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "eltexLtd")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Counter64, IpAddress, MibIdentifier, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Counter64", "IpAddress", "MibIdentifier", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Counter32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
eltexULDMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 34))
if mibBuilder.loadTexts: eltexULDMIB.setLastUpdated('201301280000Z')
if mibBuilder.loadTexts: eltexULDMIB.setOrganization('Eltex Ltd.')
if mibBuilder.loadTexts: eltexULDMIB.setContactInfo('http://www.eltex.nsk.ru')
if mibBuilder.loadTexts: eltexULDMIB.setDescription('The unidirectioanl link detection module MIB.')
eltexULDNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 34, 0))
eltexULDMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 34, 1))
eltexULDTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 34, 1, 1), )
if mibBuilder.loadTexts: eltexULDTable.setStatus('current')
if mibBuilder.loadTexts: eltexULDTable.setDescription('The management information of the unidirectional link detection.')
eltexULDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 34, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltexULDEntry.setStatus('current')
if mibBuilder.loadTexts: eltexULDEntry.setDescription('A list of information contained in eltexULDTable.')
eltexULDAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 34, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexULDAdminState.setStatus('current')
if mibBuilder.loadTexts: eltexULDAdminState.setDescription('This object indicates the unidirectional link detection configuration status.')
eltexULDOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 34, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexULDOperStatus.setStatus('current')
if mibBuilder.loadTexts: eltexULDOperStatus.setDescription('This object is determined by local and remote port supporting OAM and unidirectional detection. If both local and remote port support OAM and unidirectional detection, it is enabled(1),else it is disabled(2).')
eltexULDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 34, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("log", 1), ("err-disable", 2))).clone('log')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexULDMode.setStatus('current')
if mibBuilder.loadTexts: eltexULDMode.setDescription('This object indicates the mode for unidirectional link detection. shutdown: if any unidirectional link is detected, disable the port and log an event. normal: only log an event when a unidirectional link is detected.')
eltexULDDiscoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 34, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexULDDiscoveryTime.setStatus('current')
if mibBuilder.loadTexts: eltexULDDiscoveryTime.setDescription('This object indicates the neighbor discovery time for unidirectional link detection. If the discovery time ends, the unidirectional link detection starts.')
eltexULDIsAggressive = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 34, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltexULDIsAggressive.setStatus('current')
if mibBuilder.loadTexts: eltexULDIsAggressive.setDescription('This object indicates the mode for unidirectional link detection protocol. If true then port is considered to be UNIDIRECTIONAL if there is no answer from remote side during discovery timeout. If false then port is considered to be UNKNOWN.')
eltexULDLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 34, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("unidirectional", 2), ("bidirectional", 3), ("tx-rx-loop", 4), ("neighbor-mismatch", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltexULDLinkStatus.setStatus('current')
if mibBuilder.loadTexts: eltexULDLinkStatus.setDescription('This object indicates the link status, which is a result of unidirectional link detection.')
eltexULDLinkStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 35265, 34, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("ELTEX-ULD-MIB", "eltexULDLinkStatus"))
if mibBuilder.loadTexts: eltexULDLinkStatusChanged.setStatus('current')
if mibBuilder.loadTexts: eltexULDLinkStatusChanged.setDescription('A eltexULDLinkStatusChanged notification is sent when a local link status has been changed. This event should not be sent more then one per second.')
mibBuilder.exportSymbols("ELTEX-ULD-MIB", eltexULDMIB=eltexULDMIB, eltexULDOperStatus=eltexULDOperStatus, eltexULDLinkStatusChanged=eltexULDLinkStatusChanged, eltexULDLinkStatus=eltexULDLinkStatus, eltexULDDiscoveryTime=eltexULDDiscoveryTime, eltexULDNotifications=eltexULDNotifications, eltexULDAdminState=eltexULDAdminState, eltexULDMgmt=eltexULDMgmt, eltexULDEntry=eltexULDEntry, PYSNMP_MODULE_ID=eltexULDMIB, eltexULDTable=eltexULDTable, eltexULDMode=eltexULDMode, eltexULDIsAggressive=eltexULDIsAggressive)
