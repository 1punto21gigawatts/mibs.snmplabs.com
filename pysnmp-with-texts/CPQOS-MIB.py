#
# PySNMP MIB module CPQOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
cpqHoTrapFlags, compaq = mibBuilder.importSymbols("CPQHOST-MIB", "cpqHoTrapFlags", "compaq")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
NotificationType, Counter32, TimeTicks, Bits, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, iso, Integer32, ObjectIdentity, Counter64, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "TimeTicks", "Bits", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "iso", "Integer32", "ObjectIdentity", "Counter64", "IpAddress", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqWinOsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19))
cpqOsMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 1))
cpqOsComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2))
cpqOsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 1))
cpqOsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 2))
cpqOsProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 3))
cpqOsMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 4))
cpqOsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 5))
cpqOsPagingFile = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 6))
cpqOsPhysicalDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 7))
cpqOsLogicalDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 8))
cpqOsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 9))
cpqOsNetworkInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 10))
cpqOsTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 11))
cpqOsProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 12))
cpqOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 19, 2, 1, 4))
cpqOsMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMibRevMajor.setDescription('The Major Revision level of the MIB. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
cpqOsMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMibRevMinor.setDescription('The Minor Revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqOsMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMibCondition.setDescription('The overall condition. This object represents the overall status of the Operating System management system represented by this MIB.')
cpqOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCommonPollFreq.setDescription("The Management Agent's polling frequency. The frequency, in seconds, at which the Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval. If the poll frequency is zero (0) all attempts to write to this object will fail. If the poll frequency is non-zero, setting this value will change the polling frequency of the Insight Agent. Setting the poll frequency to zero (0) will always fail, an agent may also choose to fail any request to change the poll frequency to a value that would severely impact system performance.")
cpqOsSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsSystemStatus.setDescription('This value specifies the overall condition of the System Object.')
cpqOsSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSystemUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsSystemUpTime.setDescription('Total Time that the computer has been operational since it was last started.')
cpqOsSystemThreads = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSystemThreads.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsSystemThreads.setDescription('Threads is the number of threads in the computer at the time of data collection. Notice that this is an instantaneous count, not an average over the time interval. A thread is the basic executable entity that can execute instructions in a processor.')
cpqOsSysContextSwitchesPersec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSysContextSwitchesPersec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsSysContextSwitchesPersec.setDescription('Context Switches/sec is the combined rate at which all processors on the computer are switched from one thread to another. Context switches occur when a running thread voluntarily relinquishes the processor, is preempted by a higher priority ready thread, or switches between user-mode and privileged (kernel) mode to use an Executive or subsystem service. It is the sum of Thread: Context Switches/sec for all threads running on all processors in the computer and is measured in numbers of switches. There are context switch counters on the System and Thread objects.')
cpqOsSysCpuQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSysCpuQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsSysCpuQueueLength.setDescription('Processor Queue Length is the number of threads in the processor queue. There is a single queue for processor time even on computers with multiple processors. Unlike the disk counters, this counter counts ready threads only, not threads that are running. A sustained processor queue of greater than two threads generally indicates processor congestion.')
cpqOsSysProcesses = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSysProcesses.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsSysProcesses.setDescription('Processes is the number of processes in the computer at the time of data collection. Notice that this is an instantaneous count, not an average over the time interval. Each process represents the running of a program.')
cpqOsSysRegistryInUsePercent = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsSysRegistryInUsePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsSysRegistryInUsePercent.setDescription('RegistryInUsePercent is the percentage of the Total Registry Quota Allowed that is currently being used by the system. This counter displays the current percentage value only; it is not an average.')
cpqOsProcessorStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessorStatus.setDescription('This value specifies the overall condition of Processor Object instances.')
cpqOsProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2), )
if mibBuilder.loadTexts: cpqOsProcessorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessorTable.setDescription('A table of Processor Entries.')
cpqOsProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsCpuIndex"))
if mibBuilder.loadTexts: cpqOsProcessorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessorEntry.setDescription('A Processor Entry.')
cpqOsCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuIndex.setDescription('This Processor Instance number.')
cpqOsCpuInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuInstance.setDescription('This Processor Instance Name.')
cpqOsCpuInterruptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuInterruptsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuInterruptsPerSec.setDescription('Interrupts/sec is the average number of hardware interrupts the processor is receiving and servicing in each second. It does not include DPCs, which are counted separately. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended during interrupts. Most system clocks interrupt the processor every 10 milliseconds, creating a background of interrupt activity.')
cpqOsCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuTimePercent.setDescription('%Processor Time is the percentage of time that the processor is executing a non-Idle thread. This counter was designed as a primary indicator of processor activity. It is calculated by measuring the time that the processor spends executing the thread of the Idle process in each sample interval, and subtracting that value from 100%. (Each processor has an Idle thread which consumes cycles when no other threads are ready to run.) It can be viewed as the fraction of the time spent doing useful work.')
cpqOsWarCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsWarCpuTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsWarCpuTimePercent.setDescription('Warning alarm will be issued if, (cpqOsCpuTotalCpuTimePercent >= cpqOsWarCpuTotalCpuTimePercent && cpqOsCpuTotalCpuTimePercent < cpqOsCriCpuTotalCpuTimePercent) for 15 data collection intervals.')
cpqOsCriCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCriCpuTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCriCpuTimePercent.setDescription('Critical alarm will be issued if, (cpqOsCpuTotalCpuTimePercent >= cpqOsCriCpuTotalCpuTimePercent) for 15 data collection intervals.')
cpqOsCpuUserTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuUserTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuUserTimePercent.setDescription('%User Time is the percentage of non-idle processor time spent in user mode. User mode is a restricted processing mode designed for applications, environment subsystems, and integral subsystems. The alternative, privileged mode, is designed for operating system components and allows direct access to hardware and all memory. The operating system switches application threads to privileged mode to obtain operating system services.')
cpqOsCpuPrivilegedTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuPrivilegedTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuPrivilegedTimePercent.setDescription('%Privileged Time is the percentage of non-idle processor time spent in privileged mode. (Privileged mode is a processing mode designed for operating system components and hardware-manipulating drivers. It allows direct access to hardware and all memory. The alternative, user mode, is a restricted processing mode designed for applications, environment subsystems, and integral subsystems. The operating system switches application threads to privileged mode to obtain operating system services.) %Privileged Time includes time servicing interrupts and DPCs. A high rate of privileged time might be attributable to a large number of interrupts generated by a failing device.')
cpqOsCpuCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuCondition.setDescription('The condition of this Processor Object Instance.')
cpqOsCpuPercentDPCTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuPercentDPCTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuPercentDPCTime.setDescription('% DPC Time is the percentage of time that the processor spent receiving and servicing deferred procedure calls (DPCs) during the sample interval. (DPCs are interrupts that run at a lower priority than standard interrupts). % DPC Time is a component of % Privileged Time because DPCs are executed in privileged mode. They are counted separately and are not a component of the interrupt counters. This counter displays the average busy time as a percentage of the sample time.')
cpqOsCpuPercentInterruptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCpuPercentInterruptTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCpuPercentInterruptTime.setDescription('% Interrupt Time is the percentage of time the processor spent receiving and servicing hardware interrupts during the sample interval. This value is an indirect indicator of the activity of devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards and other peripheral devices. These devices normally interrupt the processor when they have completed a task or require attention. Normal thread execution is suspended during interrupts. Most system clocks interrupt the processor every 10 milliseconds, creating a background of interrupt activity. This counter displays the average busy time as a percentage of the sample time.')
cpqOsMemoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemoryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemoryStatus.setDescription('This value specifies the overall condition of Memory Object.')
cpqOsMemAvailableKBytes = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemAvailableKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemAvailableKBytes.setDescription("Available Bytes is the amount of physical memory available to processes running on the computer, in bytes. It is calculated by summing space on the Zeroed, Free, and Standby memory lists. Free memory is ready for use; Zeroed memory is pages of memory filled with zeros to prevent later processes from seeing data used by a previous process. Standby memory is memory removed from a process's working set (its physical memory) on route to disk, but is still available to be recalled.")
cpqOsMemPagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPagesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemPagesPerSec.setDescription('Pages/sec is the number of pages read from or written to disk to resolve hard page faults. (Hard page faults occur when a process requires code or data that is not in its working set or elsewhere in physical memory, and must be retrieved from disk.) This counter was designed as a primary indicator of the kinds of faults that cause system-wide delays. It is the sum of Memory: Pages Input/sec and Memory: Pages Output/sec. It is counted in numbers of pages, so it can be compared to other counts of pages, such as Memory: Page Faults/sec, without conversion. It includes pages retrieved to satisfy faults in the file system cache (usually requested by applications) non-cached mapped memory files.')
cpqOsMemPagesInputPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPagesInputPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemPagesInputPerSec.setDescription('Pages Input/sec is the number of pages read from disk to resolve hard page faults. (Hard page faults occur when a process requires code or data that is not in its working set or elsewhere in physical memory, and must be retrieved from disk.) This counter was designed as a primary indicator of the kinds of faults that cause system-wide delays. It includes pages retrieved to satisfy faults in the file system cache (usually requested by applications) and in non-cached mapped memory files. This counter counts numbers of pages, and can be compared to other counts of pages, such as Memory: Page Faults/sec, without conversion.')
cpqOsMemPagesOutputPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPagesOutputPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemPagesOutputPerSec.setDescription('Pages Output/sec is the number of pages written to disk to free up space in physical memory. Pages are written back to disk only if they are changed in physical memory, so they are likely to hold data, not code. A high rate of pages output might indicate a memory shortage. Windows NT writes more pages back to disk to free up space when physical memory is in short supply. This counter counts numbers of pages, and can be compared to other counts of pages, without conversion. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
cpqOsMemPageFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPageFaultsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemPageFaultsPerSec.setDescription('Page Faults/sec is overall rate at which of faulted pages are handled by the processor. It is measured in numbers of pages faulted. A page fault occurs when a process requires code or data that is not in its working set (its space in physical memory) in main memory. This counter includes both hard faults (those that require disk access) and soft faults (where the faulted page is found elsewhere in physical memory.) Most processors can handle large numbers of soft faults without consequence. However, hard faults can cause significant delays.')
cpqOsMemCacheFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemCacheFaultsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemCacheFaultsPerSec.setDescription('Cache Faults/sec is the number of faults which occur when a page sought in the file system cache is not found there and must be retrieved from elsewhere in memory (a soft fault) or from disk (a hard fault). The file system cache is an area of physical memory that stores recently used pages of data for applications. Cache activity is a reliable indicator of most application I/O operations. This counter counts the number of faults, without regard for the number of pages faulted in each operation. ')
cpqOsMemPageReadsPerSecx1000 = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPageReadsPerSecx1000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemPageReadsPerSecx1000.setDescription('Page Reads/sec is the number of times the disk was read to resolve hard page faults (times 1000). (Hard page faults occur when a process requires code or data that is not in its working set or elsewhere in physical memory, and must be retrieved from disk). This counter was designed as a primary indicator of the kinds of faults that cause system-wide delays. It includes reads to satisfy faults in the file system cache (usually requested by applications) and in non-cached mapped memory files. This counter counts numbers of read operations, without regard to the numbers of pages retrieved by each operation. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
cpqOsMemPageWritesPerSecx1000 = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPageWritesPerSecx1000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemPageWritesPerSecx1000.setDescription('Page Writes/sec is the number of times pages were written to disk to free up space in physical memory (times 1000). Pages are written to disk only if they are changed while in physical memory, so they are likely to hold data, not code. This counter counts write operations, without regard to the number of pages written in each operation. This counter displays the difference between the values observed in the last two samples, divided by the duration of the sample interval.')
cpqOsMemPoolNonpagedBytes = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemPoolNonpagedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemPoolNonpagedBytes.setDescription('Pool Nonpaged Bytes is the number of bytes in the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated. Memory: Pool Nonpaged Bytes is calculated differently than Process: Pool Nonpaged Bytes, so it might not equal Process: Pool Nonpaged Bytes: _Total. This counter displays the last observed value only; it is not an average.')
cpqOsMemCacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsMemCacheBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsMemCacheBytes.setDescription('Cache Bytes is the sum of the System Cache Resident Bytes, System Driver Resident Bytes, System Code Resident Bytes, and Pool Paged Resident Bytes counters. This counter displays the last observed value only; it is not an average.')
cpqOsCacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCacheStatus.setDescription('This value specifies the overall condition of Cache Object.')
cpqOsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2), )
if mibBuilder.loadTexts: cpqOsCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCacheTable.setDescription('A table of Cache Entries.')
cpqOsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsCacheIndex"))
if mibBuilder.loadTexts: cpqOsCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCacheEntry.setDescription('A Cache Entry.')
cpqOsCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCacheIndex.setDescription('The Cache Instance number.')
cpqOsCacheInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCacheInstance.setDescription('The Cache Instance Name.')
cpqOsCacheCopyReadHitsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheCopyReadHitsPercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCacheCopyReadHitsPercent.setDescription('%Copy Read Hits is the percentage of cache copy read requests that hit the cache, that is, they did not require a disk read in order to provide access to the page in the cache. A copy read is a file read operation that is satisfied by a memory copy from a page in the cache to the application buffer. The LAN Redirector uses this method for retrieving information from the cache, as does the LAN Server for small transfers. This is a method used by the disk file systems as well.')
cpqOsWarCacheCopyReadHitsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsWarCacheCopyReadHitsPercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsWarCacheCopyReadHitsPercent.setDescription('Warning alarm will be issued if, (cpqOsCacheCopyReadHitsPercent <= cpqOsWarCacheCopyReadHitsPercent && cpqOsCacheCopyReadHitsPercent > cpqOsCriCacheCopyReadsPerSec) for 15 data collection intervals.')
cpqOsCriCacheCopyReadHitsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCriCacheCopyReadHitsPercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCriCacheCopyReadHitsPercent.setDescription('Critical alarm will be issued if, (cpqOsCacheCopyReadHitsPercent <= cpqOsCriCacheCopyReadHitsPercent) for 15 data collection intervals.')
cpqOsCacheCopyReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheCopyReadsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCacheCopyReadsPerSec.setDescription("Copy Reads/sec is the frequency of reads from pages of the file system cache that involve a memory copy of the data from the cache to the application's buffer. The LAN Redirector uses this method for retrieving information from the file system cache, as does the LAN Server for small transfers.")
cpqOsCacheCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsCacheCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCacheCondition.setDescription('The condition of this Cache Object Instance.')
cpqOsPagingFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPagingFileStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPagingFileStatus.setDescription('This value specifies the overall condition of Paging File Object instances.')
cpqOsPagingFileTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2), )
if mibBuilder.loadTexts: cpqOsPagingFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPagingFileTable.setDescription('A table of Paging File Entries.')
cpqOsPagingFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsPagingFileIndex"))
if mibBuilder.loadTexts: cpqOsPagingFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPagingFileEntry.setDescription('A Paging File Entry.')
cpqOsPagingFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPagingFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPagingFileIndex.setDescription('This PagingFile Instance Number.')
cpqOsPagingFileInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPagingFileInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPagingFileInstance.setDescription('This PagingFile Instance Name.')
cpqOsPageFileUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPageFileUsagePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPageFileUsagePercent.setDescription('The Paging File usage in percent.')
cpqOsWarPageFileUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsWarPageFileUsagePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsWarPageFileUsagePercent.setDescription('Warning alarm will be issued if, (cpqOsPageFileUsagePercent >= cpqOsWarPageFileUsagePercent && cpqOsPageFileUsagePercent < cpqOsCriPageFileUsagePercent) for 15 data collection intervals.')
cpqOsCriPageFileUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCriPageFileUsagePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCriPageFileUsagePercent.setDescription('Critical alarm will be issued if, (cpqOsPageFileUsagePercent >= cpqOsCriPageFileUsagePercent) for 15 data collection intervals.')
cpqOsPagingFileCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPagingFileCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPagingFileCondition.setDescription('The condition of this Paging File Object Instance.')
cpqOsPhysicalDiskStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskStatus.setDescription('This value specifies the overall condition of Physical Disk Object instances.')
cpqOsPhysicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2), )
if mibBuilder.loadTexts: cpqOsPhysicalDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskTable.setDescription('A table of Physical Disk Entries.')
cpqOsPhysicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsPhysicalDiskIndex"))
if mibBuilder.loadTexts: cpqOsPhysicalDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskEntry.setDescription('A Physical Disk Entry.')
cpqOsPhysicalDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskIndex.setDescription('The Physical Disk Instance number.')
cpqOsPhysicalDiskInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskInstance.setDescription('The Physical Disk Instance Name.')
cpqOsPhysicalDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskQueueLength.setDescription('Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval.')
cpqOsPhysicalDiskBusyTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskBusyTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskBusyTimePercent.setDescription('%Disk Time is the percentage of elapsed time that the selected disk drive is busy servicing read or write requests.')
cpqOsPhysicalDiskCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskCondition.setDescription('The condition of this Physical Disk Object Instance.')
cpqOsPhysicalDiskBytesPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskBytesPersec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskBytesPersec.setDescription('Disk Bytes/sec is the rate bytes are transferred to or from the disk during write or read operations.')
cpqOsPhysicalDiskTransfersPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskTransfersPersecx1000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskTransfersPersecx1000.setDescription('Disk Transfers/sec is the rate of read and write operations on the disk (times 1000).')
cpqOsPhysicalDiskReadsPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskReadsPersecx1000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskReadsPersecx1000.setDescription('Disk Reads/sec is the rate of read operations on the disk (times 1000).')
cpqOsPhysicalDiskWritesPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskWritesPersecx1000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskWritesPersecx1000.setDescription('Disk Writes/sec is the rate of write operations on the disk (times 1000).')
cpqOsPhysicalDiskReadBytesPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskReadBytesPersec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskReadBytesPersec.setDescription('Disk Read Bytes/sec is the rate bytes are transferred from the disk during read operations.')
cpqOsPhysicalDiskWriteBytesPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskWriteBytesPersec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskWriteBytesPersec.setDescription('Disk Write Bytes is rate bytes are transferred to the disk during write operations.')
cpqOsPhysicalDiskAvgDisksecPerReadx10000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskAvgDisksecPerReadx10000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskAvgDisksecPerReadx10000.setDescription('Avg. Disk sec/Read is the average time in seconds of a read of data from the disk (times 10000).')
cpqOsPhysicalDiskAvgDisksecPerWritex10000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskAvgDisksecPerWritex10000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskAvgDisksecPerWritex10000.setDescription('Avg. Disk sec/Write is the average time in seconds of a write of data to the disk (times 10000).')
cpqOsPhysicalDiskCurrentDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsPhysicalDiskCurrentDiskQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsPhysicalDiskCurrentDiskQueueLength.setDescription('Current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It includes requests in service at the time of the snapshot. This is an instantaneous length, not an average over the time interval. Multi-spindle disk devices can have multiple requests active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests are experiencing delays proportional to the length of this queue minus the number of spindles on the disks. This difference should average less than 2 for good performance.')
cpqOsLogicalDiskStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskStatus.setDescription('This value specifies the overall condition of Logical Disk Object instances.')
cpqOsLogicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2), )
if mibBuilder.loadTexts: cpqOsLogicalDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskTable.setDescription('A table of Logical Disk Entries.')
cpqOsLogicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsLogicalDiskIndex"))
if mibBuilder.loadTexts: cpqOsLogicalDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskEntry.setDescription('A Logical Disk Entry.')
cpqOsLogicalDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskIndex.setDescription('The Logical Disk Instance number.')
cpqOsLogicalDiskInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskInstance.setDescription('The Logical Disk Instance Name.')
cpqOsLogicalDiskFreeSpaceMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskFreeSpaceMBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskFreeSpaceMBytes.setDescription('Free Megabytes displays the unallocated space on the disk drive in megabytes. One megabyte = 1,048,576 bytes.')
cpqOsLogicalDiskFreeSpacePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskFreeSpacePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskFreeSpacePercent.setDescription('%Free Space is the ratio of the free space available on the logical disk unit to the total usable space provided by the selected logical disk drive')
cpqOsLogicalDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskQueueLength.setDescription('Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval.')
cpqOsLogicalDiskBusyTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskBusyTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskBusyTimePercent.setDescription('%Disk Time is the percentage of elapsed time that the selected disk drive is busy servicing read or write requests.')
cpqOsWarLogicalDiskBusyTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsWarLogicalDiskBusyTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsWarLogicalDiskBusyTimePercent.setDescription('Warning alarm will be issued if, (cpqOsLogicalDiskBusyTimePercent >= cpqOsWarLogicalDiskBusyTimePercent && cpqOsLogicalDiskBusyTimePercent < cpqOsCriLogicalDiskBusyTimePercent) for 15 data collection intervals.')
cpqOsCriLogicalDiskBusyTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqOsCriLogicalDiskBusyTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsCriLogicalDiskBusyTimePercent.setDescription('Critical alarm will be issued if, (cpqOsLogicalDiskBusyTimePercent >= cpqOsCriLogicalDiskBusyTimePercent) for 15 data collection intervals.')
cpqOsLogicalDiskCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsLogicalDiskCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsLogicalDiskCondition.setDescription('The condition of this Logical Disk Object Instance.')
cpqOsServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsServerStatus.setDescription('This value specifies the overall condition of Server Object.')
cpqOsServerTotalNetworkUtilizationBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerTotalNetworkUtilizationBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsServerTotalNetworkUtilizationBytesPerSec.setDescription('The number of bytes the server has sent to and received from the network. This value provides an overall indication of how busy the server is.')
cpqOsServerSessions = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerSessions.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsServerSessions.setDescription('The number of sessions currently active in the server. Indicates current server activity.')
cpqOsServerAccessPermissionErrors = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerAccessPermissionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsServerAccessPermissionErrors.setDescription('The number of times opens on behalf of clients have failed with STATUS_ACCESS_DENIED. Can indicate whether somebody is randomly attempting to access files in hopes of getting at something that was not properly protected.')
cpqOsServerAccessGrantedErrors = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerAccessGrantedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsServerAccessGrantedErrors.setDescription('The number of times accesses to files opened successfully were denied. Can indicate attempts to access files without proper access authorization.')
cpqOsServerLogonErrors = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerLogonErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsServerLogonErrors.setDescription('The number of failed logon attempts to the server. Can indicate whether password guessing programs are being used to crack the security on the server.')
cpqOsServerSessionsErroredOut = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerSessionsErroredOut.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsServerSessionsErroredOut.setDescription('The number of sessions that have been closed due to unexpected error conditions or sessions that have reached the autodisconnect timeout and have been disconnected normally.')
cpqOsServerContextBlocksQueuePerSec = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsServerContextBlocksQueuePerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsServerContextBlocksQueuePerSec.setDescription("Context Blocks Queued per second is the rate at which work context blocks had to be placed on the server's FSP queue to await server action.")
cpqOsNetworkInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkInterfaceStatus.setDescription('This value specifies the overall condition of Network Interface Object instances.')
cpqOsNetworkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2), )
if mibBuilder.loadTexts: cpqOsNetworkInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkInterfaceTable.setDescription('A table of Network Interface Entries.')
cpqOsNetworkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsNetworkInterfaceIndex"))
if mibBuilder.loadTexts: cpqOsNetworkInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkInterfaceEntry.setDescription('A Network Interface Entry.')
cpqOsNetworkInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkInterfaceIndex.setDescription('The Network Interface Instance number.')
cpqOsNetworkInterfaceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkInterfaceInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkInterfaceInstance.setDescription('The Network Interface Instance Name.')
cpqOsNetworkTotalBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkTotalBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkTotalBytesPerSec.setDescription('Bytes Total/sec is the rate at which bytes are sent and received on the interface, including framing characters.')
cpqOsNetworkPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPacketsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkPacketsPerSec.setDescription('Packets/sec is the rate at which packets are sent and received on the network interface.')
cpqOsNetworkOutputQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkOutputQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkOutputQueueLength.setDescription('Output Queue Length is the length of the output packet queue (in packets.) If this is longer than 2, delays are being experienced and the bottleneck should be found and eliminated if possible. Since the requests are queued by NDIS in this implementations, this will always be 0.')
cpqOsNetworkPktOutboundErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPktOutboundErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkPktOutboundErrors.setDescription('Packets Outbound Errors is the number of outbound packets that could not be transmitted because of errors.')
cpqOsNetworkPktReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPktReceiveErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkPktReceiveErrors.setDescription('Packets Received Errors is the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
cpqOsNetworkCurrentBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkCurrentBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkCurrentBandWidth.setDescription("Current Bandwidth is an estimate of the interface's current bandwidth in bits per second (BPS). For interfaces that do not vary in bandwidth or for those where no accurate estimation can be made, this value is the nominal bandwidth.")
cpqOsNetworkInterfaceCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkInterfaceCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkInterfaceCondition.setDescription('The condition of this Network Interface Object Instance.')
cpqOsNetworkBytesSentPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkBytesSentPersec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkBytesSentPersec.setDescription('Bytes Sent/sec is the rate at which bytes are sent on the interface, including framing characters.')
cpqOsNetworkBytesReceivedPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkBytesReceivedPersec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkBytesReceivedPersec.setDescription('Bytes Received/sec is the rate at which bytes are received on the interface, including framing characters.')
cpqOsNetworkPacketsSentPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPacketsSentPersecx1000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkPacketsSentPersecx1000.setDescription('Packets Sent/sec is the rate (times 1000) at which packets are sent on the network interface.')
cpqOsNetworkPacketsReceivedPersecx1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsNetworkPacketsReceivedPersecx1000.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsNetworkPacketsReceivedPersecx1000.setDescription('Packets Received/sec is the rate (times 1000) at which packets are received on the network interface.')
cpqOsTcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpStatus.setDescription('This value specifies the overall condition of TCP Object instances.')
cpqOsTcpTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2), )
if mibBuilder.loadTexts: cpqOsTcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpTable.setDescription('A table of Tcp Entries.')
cpqOsTcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsTcpIndex"))
if mibBuilder.loadTexts: cpqOsTcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpEntry.setDescription('A TCP Entry.')
cpqOsTcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpIndex.setDescription('The TCP Instance number.')
cpqOsTcpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpInstance.setDescription('The TCP Instance Name.')
cpqOsTcpActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpActiveConnections.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpActiveConnections.setDescription('Connections Active is the number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state.')
cpqOsTcpEstablishedConections = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpEstablishedConections.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpEstablishedConections.setDescription('Connections Established is the number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.')
cpqOsTcpSegmentsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpSegmentsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpSegmentsPerSec.setDescription('Segments/sec is the rate at which TCP segments are sent or received using the TCP protocol.')
cpqOsTcpRetransmittedSegmentsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpRetransmittedSegmentsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpRetransmittedSegmentsPerSec.setDescription('Segments Retransmitted/sec is the rate at which segments are retransmitted, that is, segments transmitted containing one or more previously transmitted bytes.')
cpqOsTcpConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpConnectionFailures.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpConnectionFailures.setDescription('Connection Failures is the number of times TCP connections have made a direct transition to the CLOSED state from the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.')
cpqOsTcpCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsTcpCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsTcpCondition.setDescription('The condition of this Tcp Object Instance.')
cpqOsProcessStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessStatus.setDescription('This value specifies the overall condition of Process Object instances.')
cpqOsProcessTable = MibTable((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2), )
if mibBuilder.loadTexts: cpqOsProcessTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessTable.setDescription('A table of Process Entries.')
cpqOsProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1), ).setIndexNames((0, "CPQOS-MIB", "cpqOsProcessIndex"))
if mibBuilder.loadTexts: cpqOsProcessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessEntry.setDescription('A Process Entry.')
cpqOsProcessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessIndex.setDescription('The Process Instance number.')
cpqOsProcessInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessInstance.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessInstance.setDescription('The Process Instance Name.')
cpqOsProcessThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessThreadCount.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessThreadCount.setDescription('The number of threads currently active in this process. An instruction is the basic unit of execution in a processor, and a thread is the object that executes instructions. Every running process has at least one thread.')
cpqOsProcessPrivateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessPrivateBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessPrivateBytes.setDescription('Private Bytes is the current number of bytes this process has allocated that cannot be shared with other processes.')
cpqOsProcessPageFileBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessPageFileBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessPageFileBytes.setDescription('Page File Bytes is the current number of bytes this process has used in the paging file(s). Paging files are used to store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes, and lack of space in paging files can prevent other processes from allocating memory.')
cpqOsProcessWorkingSet = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessWorkingSet.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessWorkingSet.setDescription('Working Set is the current number of bytes in the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use. When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before they leave main memory.')
cpqOsProcessCpuTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessCpuTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessCpuTimePercent.setDescription('% Processor Time is the percentage of elapsed time that all of the threads of this process used the processor to execute instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count. On Multi-processor machines the maximum value of the counter is 100 % times the number of processors.')
cpqOsProcessPrivilegedTimePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessPrivilegedTimePercent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessPrivilegedTimePercent.setDescription('% Privileged Time is the percentage of elapsed time that the threads of the process have spent executing code in privileged mode. When a Windows NT system service is called, the service will often run in Privileged Mode to gain access to system-private data. Such data is protected from access by threads executing in user Mode. Calls to the system can be explicit or implicit, such as page faults or interrupts. Unlike some early operating systems, Windows NT uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes. These subsystem processes provide additional protection. Therefore, some work done by Windows NT on behalf of your application might appear in other subsystem processes in addition to the privileged time in your process.')
cpqOsProcessPageFaultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessPageFaultsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessPageFaultsPerSec.setDescription('Page Faults/sec is the rate Page Faults occur in the threads executing in this process. A page fault occurs when a thread refers to a virtual memory page that is not in its working set in main memory. This will not cause the page to be fetched from disk if it is on the standby list and hence already in main memory, or if it is in use by another process with whom the page is shared.')
cpqOsProcessCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 19, 2, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqOsProcessCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqOsProcessCondition.setDescription('The condition of this Process Object Instance.')
cpqOsCpuTimeDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsCpuIndex"), ("CPQOS-MIB", "cpqOsCpuInstance"), ("CPQOS-MIB", "cpqOsCpuTimePercent"))
if mibBuilder.loadTexts: cpqOsCpuTimeDegraded.setDescription('The Processor Time performance property is set to degraded.')
cpqOsCpuTimeFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsCpuIndex"), ("CPQOS-MIB", "cpqOsCpuInstance"), ("CPQOS-MIB", "cpqOsCpuTimePercent"))
if mibBuilder.loadTexts: cpqOsCpuTimeFailed.setDescription('The Processor Time performance property is set to critical.')
cpqOsCacheCopyReadHitsDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsCacheIndex"), ("CPQOS-MIB", "cpqOsCacheInstance"), ("CPQOS-MIB", "cpqOsCacheCopyReadHitsPercent"))
if mibBuilder.loadTexts: cpqOsCacheCopyReadHitsDegraded.setDescription('The Cache CopyReadHits performance property is set to degraded.')
cpqOsCacheCopyReadHitsFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsCacheIndex"), ("CPQOS-MIB", "cpqOsCacheInstance"), ("CPQOS-MIB", "cpqOsCacheCopyReadHitsPercent"))
if mibBuilder.loadTexts: cpqOsCacheCopyReadHitsFailed.setDescription('The Cache CopyReadHits performance property is set to critical.')
cpqOsPageFileUsageDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsPagingFileIndex"), ("CPQOS-MIB", "cpqOsPagingFileInstance"), ("CPQOS-MIB", "cpqOsPageFileUsagePercent"))
if mibBuilder.loadTexts: cpqOsPageFileUsageDegraded.setDescription('The PagingFile Usage performance property is set to degraded.')
cpqOsPageFileUsageFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsPagingFileIndex"), ("CPQOS-MIB", "cpqOsPagingFileInstance"), ("CPQOS-MIB", "cpqOsPageFileUsagePercent"))
if mibBuilder.loadTexts: cpqOsPageFileUsageFailed.setDescription('The PagingFile Usage performance property is set to critical.')
cpqOsLogicalDiskBusyTimeDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsLogicalDiskIndex"), ("CPQOS-MIB", "cpqOsLogicalDiskInstance"), ("CPQOS-MIB", "cpqOsLogicalDiskBusyTimePercent"))
if mibBuilder.loadTexts: cpqOsLogicalDiskBusyTimeDegraded.setDescription('The LogicalDisk BusyTime performance property is set to degraded.')
cpqOsLogicalDiskBusyTimeFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,19008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQOS-MIB", "cpqOsLogicalDiskIndex"), ("CPQOS-MIB", "cpqOsLogicalDiskInstance"), ("CPQOS-MIB", "cpqOsLogicalDiskBusyTimePercent"))
if mibBuilder.loadTexts: cpqOsLogicalDiskBusyTimeFailed.setDescription('The LogicalDisk BusyTime performance property is set to critical.')
mibBuilder.exportSymbols("CPQOS-MIB", cpqOsCriCpuTimePercent=cpqOsCriCpuTimePercent, cpqOsPhysicalDiskBytesPersec=cpqOsPhysicalDiskBytesPersec, cpqOsLogicalDiskStatus=cpqOsLogicalDiskStatus, cpqOsTcpEstablishedConections=cpqOsTcpEstablishedConections, cpqOsMemory=cpqOsMemory, cpqOsProcessWorkingSet=cpqOsProcessWorkingSet, cpqOsNetworkPacketsSentPersecx1000=cpqOsNetworkPacketsSentPersecx1000, cpqOsProcessTable=cpqOsProcessTable, cpqOsProcessorEntry=cpqOsProcessorEntry, cpqOsLogicalDiskEntry=cpqOsLogicalDiskEntry, cpqOsCpuCondition=cpqOsCpuCondition, cpqOsMemPageReadsPerSecx1000=cpqOsMemPageReadsPerSecx1000, cpqOsTcp=cpqOsTcp, cpqOsMibCondition=cpqOsMibCondition, cpqOsPagingFileCondition=cpqOsPagingFileCondition, cpqOsTcpRetransmittedSegmentsPerSec=cpqOsTcpRetransmittedSegmentsPerSec, cpqOsCommonPollFreq=cpqOsCommonPollFreq, cpqOsLogicalDiskBusyTimePercent=cpqOsLogicalDiskBusyTimePercent, cpqOsMemPoolNonpagedBytes=cpqOsMemPoolNonpagedBytes, cpqOsCacheIndex=cpqOsCacheIndex, cpqOsSystemUpTime=cpqOsSystemUpTime, cpqOsCacheCopyReadHitsFailed=cpqOsCacheCopyReadHitsFailed, cpqOsWarCpuTimePercent=cpqOsWarCpuTimePercent, cpqOsMibRevMajor=cpqOsMibRevMajor, cpqOsPhysicalDiskReadBytesPersec=cpqOsPhysicalDiskReadBytesPersec, cpqOsCacheCopyReadHitsPercent=cpqOsCacheCopyReadHitsPercent, cpqOsCacheCondition=cpqOsCacheCondition, cpqOsPhysicalDiskAvgDisksecPerWritex10000=cpqOsPhysicalDiskAvgDisksecPerWritex10000, cpqOsServerLogonErrors=cpqOsServerLogonErrors, cpqOsServerSessionsErroredOut=cpqOsServerSessionsErroredOut, cpqOsPhysicalDiskIndex=cpqOsPhysicalDiskIndex, cpqOsPagingFileTable=cpqOsPagingFileTable, cpqOsNetworkInterfaceStatus=cpqOsNetworkInterfaceStatus, cpqOsPagingFileInstance=cpqOsPagingFileInstance, cpqOsMemPageFaultsPerSec=cpqOsMemPageFaultsPerSec, cpqOsLogicalDiskBusyTimeDegraded=cpqOsLogicalDiskBusyTimeDegraded, cpqOsNetworkBytesReceivedPersec=cpqOsNetworkBytesReceivedPersec, cpqOsPagingFileStatus=cpqOsPagingFileStatus, cpqOsWarPageFileUsagePercent=cpqOsWarPageFileUsagePercent, cpqOsNetworkTotalBytesPerSec=cpqOsNetworkTotalBytesPerSec, cpqOsProcessEntry=cpqOsProcessEntry, cpqOsSysCpuQueueLength=cpqOsSysCpuQueueLength, cpqOsSystemStatus=cpqOsSystemStatus, cpqOsPhysicalDiskStatus=cpqOsPhysicalDiskStatus, cpqOsNetworkInterface=cpqOsNetworkInterface, cpqOsPagingFileEntry=cpqOsPagingFileEntry, cpqOsComponent=cpqOsComponent, cpqOsMemCacheFaultsPerSec=cpqOsMemCacheFaultsPerSec, cpqOsInterface=cpqOsInterface, cpqOsProcessPageFileBytes=cpqOsProcessPageFileBytes, cpqOsPhysicalDiskCurrentDiskQueueLength=cpqOsPhysicalDiskCurrentDiskQueueLength, cpqOsNetworkPktReceiveErrors=cpqOsNetworkPktReceiveErrors, cpqOsCpuIndex=cpqOsCpuIndex, cpqOsProcessorTable=cpqOsProcessorTable, cpqOsProcessStatus=cpqOsProcessStatus, cpqOsTcpTable=cpqOsTcpTable, cpqOsPhysicalDiskReadsPersecx1000=cpqOsPhysicalDiskReadsPersecx1000, cpqOsCriCacheCopyReadHitsPercent=cpqOsCriCacheCopyReadHitsPercent, cpqOsNetworkInterfaceInstance=cpqOsNetworkInterfaceInstance, cpqOsProcessThreadCount=cpqOsProcessThreadCount, cpqOsLogicalDiskTable=cpqOsLogicalDiskTable, cpqOsCpuTimeDegraded=cpqOsCpuTimeDegraded, cpqOsPhysicalDiskWriteBytesPersec=cpqOsPhysicalDiskWriteBytesPersec, cpqOsCacheInstance=cpqOsCacheInstance, cpqOsMemCacheBytes=cpqOsMemCacheBytes, cpqOsServerStatus=cpqOsServerStatus, cpqOsTcpConnectionFailures=cpqOsTcpConnectionFailures, cpqOsWarCacheCopyReadHitsPercent=cpqOsWarCacheCopyReadHitsPercent, cpqOsPageFileUsageFailed=cpqOsPageFileUsageFailed, cpqOsCacheStatus=cpqOsCacheStatus, cpqOsNetworkInterfaceEntry=cpqOsNetworkInterfaceEntry, cpqOsTcpEntry=cpqOsTcpEntry, cpqOsPhysicalDisk=cpqOsPhysicalDisk, cpqOsCpuPercentDPCTime=cpqOsCpuPercentDPCTime, cpqOsNetworkOutputQueueLength=cpqOsNetworkOutputQueueLength, cpqOsLogicalDiskFreeSpaceMBytes=cpqOsLogicalDiskFreeSpaceMBytes, cpqOsSystemThreads=cpqOsSystemThreads, cpqOsWarLogicalDiskBusyTimePercent=cpqOsWarLogicalDiskBusyTimePercent, cpqOsCacheCopyReadsPerSec=cpqOsCacheCopyReadsPerSec, cpqOsLogicalDiskIndex=cpqOsLogicalDiskIndex, cpqOsMemoryStatus=cpqOsMemoryStatus, cpqOsCpuInstance=cpqOsCpuInstance, cpqOsCacheCopyReadHitsDegraded=cpqOsCacheCopyReadHitsDegraded, cpqOsCriPageFileUsagePercent=cpqOsCriPageFileUsagePercent, cpqOsNetworkCurrentBandWidth=cpqOsNetworkCurrentBandWidth, cpqOsPhysicalDiskBusyTimePercent=cpqOsPhysicalDiskBusyTimePercent, cpqOsPhysicalDiskTransfersPersecx1000=cpqOsPhysicalDiskTransfersPersecx1000, cpqOsNetworkPktOutboundErrors=cpqOsNetworkPktOutboundErrors, cpqOsTcpSegmentsPerSec=cpqOsTcpSegmentsPerSec, cpqOsCpuTimeFailed=cpqOsCpuTimeFailed, cpqOsProcessCpuTimePercent=cpqOsProcessCpuTimePercent, cpqOsMibRev=cpqOsMibRev, cpqOsTcpCondition=cpqOsTcpCondition, cpqOsPhysicalDiskWritesPersecx1000=cpqOsPhysicalDiskWritesPersecx1000, cpqOsCacheEntry=cpqOsCacheEntry, cpqOsLogicalDiskCondition=cpqOsLogicalDiskCondition, cpqOsCpuInterruptsPerSec=cpqOsCpuInterruptsPerSec, cpqOsTcpActiveConnections=cpqOsTcpActiveConnections, cpqOsCacheTable=cpqOsCacheTable, cpqOsMemPagesOutputPerSec=cpqOsMemPagesOutputPerSec, cpqOsCpuPercentInterruptTime=cpqOsCpuPercentInterruptTime, cpqOsProcess=cpqOsProcess, cpqOsCriLogicalDiskBusyTimePercent=cpqOsCriLogicalDiskBusyTimePercent, cpqOsTcpInstance=cpqOsTcpInstance, cpqOsCpuUserTimePercent=cpqOsCpuUserTimePercent, cpqOsProcessIndex=cpqOsProcessIndex, cpqOsProcessPageFaultsPerSec=cpqOsProcessPageFaultsPerSec, cpqOsCpuTimePercent=cpqOsCpuTimePercent, cpqOsPagingFileIndex=cpqOsPagingFileIndex, cpqOsPhysicalDiskInstance=cpqOsPhysicalDiskInstance, cpqOsPhysicalDiskEntry=cpqOsPhysicalDiskEntry, cpqOsServer=cpqOsServer, cpqOsPhysicalDiskQueueLength=cpqOsPhysicalDiskQueueLength, cpqOsCpuPrivilegedTimePercent=cpqOsCpuPrivilegedTimePercent, cpqOsSystem=cpqOsSystem, cpqOsLogicalDiskFreeSpacePercent=cpqOsLogicalDiskFreeSpacePercent, cpqOsTcpStatus=cpqOsTcpStatus, cpqOsCache=cpqOsCache, cpqOsProcessorStatus=cpqOsProcessorStatus, cpqOsPageFileUsagePercent=cpqOsPageFileUsagePercent, cpqOsNetworkPacketsPerSec=cpqOsNetworkPacketsPerSec, cpqOsNetworkInterfaceCondition=cpqOsNetworkInterfaceCondition, cpqOsProcessCondition=cpqOsProcessCondition, cpqOsServerAccessGrantedErrors=cpqOsServerAccessGrantedErrors, cpqOsLogicalDiskInstance=cpqOsLogicalDiskInstance, cpqOsLogicalDiskBusyTimeFailed=cpqOsLogicalDiskBusyTimeFailed, cpqOsPagingFile=cpqOsPagingFile, cpqOsProcessInstance=cpqOsProcessInstance, cpqOsSysContextSwitchesPersec=cpqOsSysContextSwitchesPersec, cpqOsMibRevMinor=cpqOsMibRevMinor, cpqOsMemPageWritesPerSecx1000=cpqOsMemPageWritesPerSecx1000, cpqOsNetworkInterfaceIndex=cpqOsNetworkInterfaceIndex, cpqOsServerContextBlocksQueuePerSec=cpqOsServerContextBlocksQueuePerSec, cpqOsNetworkPacketsReceivedPersecx1000=cpqOsNetworkPacketsReceivedPersecx1000, cpqOsPhysicalDiskCondition=cpqOsPhysicalDiskCondition, cpqOsTcpIndex=cpqOsTcpIndex, cpqOsPageFileUsageDegraded=cpqOsPageFileUsageDegraded, cpqOsProcessor=cpqOsProcessor, cpqOsServerAccessPermissionErrors=cpqOsServerAccessPermissionErrors, cpqOsProcessPrivateBytes=cpqOsProcessPrivateBytes, cpqOsNetworkBytesSentPersec=cpqOsNetworkBytesSentPersec, cpqOsPhysicalDiskTable=cpqOsPhysicalDiskTable, cpqOsNetworkInterfaceTable=cpqOsNetworkInterfaceTable, cpqOsProcessPrivilegedTimePercent=cpqOsProcessPrivilegedTimePercent, cpqOsLogicalDisk=cpqOsLogicalDisk, cpqWinOsMgmt=cpqWinOsMgmt, cpqOsSysRegistryInUsePercent=cpqOsSysRegistryInUsePercent, cpqOsLogicalDiskQueueLength=cpqOsLogicalDiskQueueLength, cpqOsMemPagesInputPerSec=cpqOsMemPagesInputPerSec, cpqOsServerTotalNetworkUtilizationBytesPerSec=cpqOsServerTotalNetworkUtilizationBytesPerSec, cpqOsMemAvailableKBytes=cpqOsMemAvailableKBytes, cpqOsMemPagesPerSec=cpqOsMemPagesPerSec, cpqOsSysProcesses=cpqOsSysProcesses, cpqOsCommon=cpqOsCommon, cpqOsPhysicalDiskAvgDisksecPerReadx10000=cpqOsPhysicalDiskAvgDisksecPerReadx10000, cpqOsServerSessions=cpqOsServerSessions)
