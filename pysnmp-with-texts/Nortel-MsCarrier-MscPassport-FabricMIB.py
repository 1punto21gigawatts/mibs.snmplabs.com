#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-FabricMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-FabricMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
mscShelfCardIndex, mscShelf, mscShelfCard, mscShelfIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex", "mscShelf", "mscShelfCard", "mscShelfIndex")
Unsigned32, StorageType, RowStatus, Gauge32, DisplayString, Counter32, Integer32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Unsigned32", "StorageType", "RowStatus", "Gauge32", "DisplayString", "Counter32", "Integer32")
NonReplicated, AsciiString, FixedPoint1 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "AsciiString", "FixedPoint1")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, iso, Bits, TimeTicks, Counter64, NotificationType, MibIdentifier, Gauge32, IpAddress, ObjectIdentity, Counter32, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Bits", "TimeTicks", "Counter64", "NotificationType", "MibIdentifier", "Gauge32", "IpAddress", "ObjectIdentity", "Counter32", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fabricMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145))
mscShelfCardFabricPort = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5))
mscShelfCardFabricPortRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 1), )
if mibBuilder.loadTexts: mscShelfCardFabricPortRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortRowStatusTable.setDescription('This entry controls the addition and deletion of mscShelfCardFabricPort components.')
mscShelfCardFabricPortRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfCardFabricPortIndex"))
if mibBuilder.loadTexts: mscShelfCardFabricPortRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortRowStatusEntry.setDescription('A single entry in the table represents a single mscShelfCardFabricPort component.')
mscShelfCardFabricPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscShelfCardFabricPort components. These components cannot be added nor deleted.')
mscShelfCardFabricPortComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscShelfCardFabricPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortStorageType.setDescription('This variable represents the storage type value for the mscShelfCardFabricPort tables.')
mscShelfCardFabricPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x", 0), ("y", 1))))
if mibBuilder.loadTexts: mscShelfCardFabricPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortIndex.setDescription('This variable represents the index for the mscShelfCardFabricPort tables.')
mscShelfCardFabricPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10), )
if mibBuilder.loadTexts: mscShelfCardFabricPortStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
mscShelfCardFabricPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfCardFabricPortIndex"))
if mibBuilder.loadTexts: mscShelfCardFabricPortStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortStateEntry.setDescription('An entry in the mscShelfCardFabricPortStateTable.')
mscShelfCardFabricPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfCardFabricPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfCardFabricPortUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfCardFabricPortAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
mscShelfCardFabricPortProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
mscShelfCardFabricPortControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
mscShelfCardFabricPortAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
mscShelfCardFabricPortStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
mscShelfCardFabricPortUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
mscShelfCardFabricPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 11), )
if mibBuilder.loadTexts: mscShelfCardFabricPortOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortOperTable.setDescription('This attribute group contains operational attributes of a fabric port. This information outlines what the fabric port is doing and why it is doing it. It is primarily intended for use in diagnosing the cause of a fabric-related problem reported by the module.')
mscShelfCardFabricPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfCardFabricPortIndex"))
if mibBuilder.loadTexts: mscShelfCardFabricPortOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortOperEntry.setDescription('An entry in the mscShelfCardFabricPortOperTable.')
mscShelfCardFabricPortFailuresInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortFailuresInEffect.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortFailuresInEffect.setDescription('This attribute indicates the failures that prevent the fabric port from using the associated fabric. It may contain any combination of the following values: selfTest: The port has failed its self-test. hardwareError: An unrecoverable critical error has occurred on the hardware of the processor card which exchanges cells with fabric card. portProtocolError: Errors have occurred which violate the protocol between components of the fabric port in datapath. switchClockError: The fabric card clock is no longer detected by the processor card. livelinessError: A non-fatal hardware error has occurred on the component which exchanges cells with the fabric card. Excessive numbers of these errors on the fabric port may be indicating a serious hardware problem. dataCorruptionError: Cell payloads or headers are detected as being corrupted at the fabric port level. linkLivelinessError: The link between the fabric port and the fabric card is not indicating liveliness. Operator action: Run the fabric test to clear these errors. Description of bits: selfTest(0) hardwareError(1) portProtocolError(2) switchClockError(3) livelinessError(4) dataCorruptionError(5) linkLivelinessError(6)')
mscShelfCardFabricPortDependenciesInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortDependenciesInEffect.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortDependenciesInEffect.setDescription('This attribute indicates the non-hardware problems that prevent the fabric port from using the associated fabric. It may be a combination of the following values: fabricLocked: The fabric card is locked. fabricDisabled: The fabric card is disabled. portDisabled: The corresponding card port on the fabric is disabled. Description of bits: fabricLocked(0) fabricDisabled(1) portDisabled(2)')
mscShelfCardFabricPortCardsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortCardsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortCardsAvailable.setDescription("This attribute indicates the slot numbers of the cards that the fabric port considers available through the fabric; that is, the cards that have an operational port connected to the fabric. The value of this attribute is determined automatically by the fabric port by monitoring signals generated by each fabric port connected to the fabric card. Normally, every card in the module signals its availability on both fabrics. If a card does not signal its availability on a fabric, then the card is not present or its fabric port has failed. By examining this attribute for both of a card's FabricPort components, it is possible to determine which cards are present in the module and which fabric each can use. Note: If failuresInEffect has a value of selfTest, signalLoss, synchronizationLoss, or protocolError, the fabric port is unable to monitor the availability of the fabric ports on the fabric. In such cases, cardsAvailable indicates that no fabric port is available on the fabric. Description of bits: n0(0) n1(1) n2(2) n3(3) n4(4) n5(5) n6(6) n7(7) n8(8) n9(9) n10(10) n11(11) n12(12) n13(13) n14(14) n15(15)")
mscShelfCardFabricPortCardsTxTo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortCardsTxTo.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortCardsTxTo.setDescription("This attribute indicates the slot number of the cards to which the fabric port is currently configured to transmit cells. This configuration is managed automatically, and cannot be changed by the operator. By examining this attribute for both of a card's FabricPort components, it is possible to determine which fabric (if any) the card uses when it needs to transmits cells to a specific card in the module. Description of bits: n0(0) n1(1) n2(2) n3(3) n4(4) n5(5) n6(6) n7(7) n8(8) n9(9) n10(10) n11(11) n12(12) n13(13) n14(14) n15(15)")
mscShelfCardFabricPortErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12), )
if mibBuilder.loadTexts: mscShelfCardFabricPortErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortErrorsTable.setDescription('This attribute group indicates errors that the fabric port has detected since the card was last rebooted. This information is intended for use in detecting and diagnosing fabric-related problems within a module.')
mscShelfCardFabricPortErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfCardFabricPortIndex"))
if mibBuilder.loadTexts: mscShelfCardFabricPortErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortErrorsEntry.setDescription('An entry in the mscShelfCardFabricPortErrorsTable.')
mscShelfCardFabricPortSelfTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortSelfTestErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortSelfTestErrorCode.setDescription('This attribute indicates the error code generated by the most recent self-test of the port. Zero indicates that the self-test was successful. A non-zero value indicates that the self-test failed. This information is used by the service technician when a defective card is returned for repair.')
mscShelfCardFabricPortLivelinessErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortLivelinessErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortLivelinessErrors.setDescription('This attribute counts the liveliness errors detected on the port. Liveliness errors are failures to receive yellow cells within a certain period of time. The value wraps to zero when it exceeds the maximum value. Note: Yellow cells are special types of packets which are generated by the fabric port and detected by the fabric card and the fabric port in order to check the link liveness with the fabric card.')
mscShelfCardFabricPortSwitchClockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortSwitchClockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortSwitchClockErrors.setDescription('This attribute counts the clock errors which have occurred on this port. The value wraps to zero when it exceeds the maximum value.')
mscShelfCardFabricPortPortHardwareErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortPortHardwareErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortPortHardwareErrors.setDescription('This attribute counts the errors which have occurred on the hardware which exchanges cells with the fabric card. The value wraps to zero when it exceeds the maximum value.')
mscShelfCardFabricPortPortProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortPortProtocolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortPortProtocolErrors.setDescription('This attribute counts the number of errors which affect the protocol between components of the fabric port datapath. The value wraps to zero when it exceeds the maximum value.')
mscShelfCardFabricPortDataCorruptionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortDataCorruptionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortDataCorruptionErrors.setDescription('This attribute counts the errors which have occurred on the corrupted cell payloads or headers at fabric port level. The value wraps to zero when it exceeds the maximum value.')
mscShelfCardFabricPortLinkLivelinessErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 5, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardFabricPortLinkLivelinessErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardFabricPortLinkLivelinessErrors.setDescription('This attribute counts the errors which occurred on the link between the fabric port and the fabric card. The value wraps to zero when it exceeds the maximum value.')
mscShelfFabricCard = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5))
mscShelfFabricCardRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 1), )
if mibBuilder.loadTexts: mscShelfFabricCardRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardRowStatusTable.setDescription('This entry controls the addition and deletion of mscShelfFabricCard components.')
mscShelfFabricCardRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardRowStatusEntry.setDescription('A single entry in the table represents a single mscShelfFabricCard component.')
mscShelfFabricCardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscShelfFabricCard components. These components cannot be added nor deleted.')
mscShelfFabricCardComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscShelfFabricCardStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardStorageType.setDescription('This variable represents the storage type value for the mscShelfFabricCard tables.')
mscShelfFabricCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x", 0), ("y", 1))))
if mibBuilder.loadTexts: mscShelfFabricCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardIndex.setDescription('This variable represents the index for the mscShelfFabricCard tables.')
mscShelfFabricCardStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10), )
if mibBuilder.loadTexts: mscShelfFabricCardStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
mscShelfFabricCardStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardStateEntry.setDescription('An entry in the mscShelfFabricCardStateTable.')
mscShelfFabricCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfFabricCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfFabricCardUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfFabricCardAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
mscShelfFabricCardProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
mscShelfFabricCardControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
mscShelfFabricCardAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
mscShelfFabricCardStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
mscShelfFabricCardUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
mscShelfFabricCardPropTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 11), )
if mibBuilder.loadTexts: mscShelfFabricCardPropTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardPropTable.setDescription('This attribute group indicates property attributes of a fabric card.')
mscShelfFabricCardPropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardPropEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardPropEntry.setDescription('An entry in the mscShelfFabricCardPropTable.')
mscShelfFabricCardProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardProductCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardProductCode.setDescription('This attribute indicates the product code (that is the PEC and revision codes) of the fabric card.')
mscShelfFabricCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 11, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSerialNumber.setDescription('This attribute indicates the serial number of the fabric card.')
mscShelfFabricCardOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12), )
if mibBuilder.loadTexts: mscShelfFabricCardOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardOperTable.setDescription('This attribute group contains operational attributes of a FabricCard component.')
mscShelfFabricCardOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardOperEntry.setDescription('An entry in the mscShelfFabricCardOperTable.')
mscShelfFabricCardFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardFailureCause.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardFailureCause.setDescription('This attribute indicates why the fabric card has failed. This attribute is meaningful when the OSI availabilityStatus attribute is set to failed. Possible values are: queueFull: The fabric card buffers are full. notInserted: The fabric card is not inserted. failedSelfTest: The fabric card has failed its self test. internalFailure: The fabric card has internal ASIC failure. notResponding: The fabric card is not responding. highTemperature: The fabric card is running at high temperature. powerProblem: The fabric card has a power problem. fabricStateUnknown: The fabric card is inserted, but it is in an unknown state. Description of bits: queueFull(0) notInserted(1) failedSelfTest(2) internalFailure(3) notResponding(4) highTemperature(5) powerProblem(6) fabricStateUnknown(7)')
mscShelfFabricCardUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardUtilization.setDescription('This attribute indicates an approximation of the current fabric utilization.')
mscShelfFabricCardOperatingTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 3), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(1, 640))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardOperatingTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardOperatingTemperature.setDescription('This attribute indicates the current fabric operating temperature. When the temperature reaches the value specified by the temperatureThreshold attribute, the fabric card generates an alarm.')
mscShelfFabricCardSecondaryControlBusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusStatus.setDescription("This attribute indicates the state of the fabric's Secondary Control Bus (SCB). It may contain any combination of the following values: operational - The SCB is operational. locked - The SCB is being manually prevented from operating. noBus - The bus is down. failed - The SCB is disabled due to fault. bestEffort - The SCB is ignoring faults to allow a single channel to be operational. hardwareFailure - The bus failed due to an HSCX hardware error. parityOrCrcError - The bus failed due to a CRC error or a parity error. timeOutError - The bus failed due to an SSC message time-out. txOrRxError - The bus failed due to Tx or Rx problems. pollError - The bus failed an SCB poll. testMessageError - The bus failed a fabric card test. Description of bits: operational(0) locked(1) noBus(2) failed(3) bestEffort(4) hardwareFailure(5) parityOrCrcError(6) timeOutError(7) txOrRxError(8) pollError(9) testMessageError(10)")
mscShelfFabricCardSelfTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardSelfTestResults.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSelfTestResults.setDescription("This attribute indicates the result of the most recent execution of the fabric card's self-tests, performed either when it initially came up, or during operation. A value of 0 indicates success, and a non-zero value indicates a failure or and absent fabric card.")
mscShelfFabricCardDependencyInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardDependencyInEffect.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardDependencyInEffect.setDescription('This attribute indicates why the fabric card has failed. This attribute is meaningful when the OSI availabilityStatus attribute is set to depend. Possible values are: portDisabled: Card port or fabric port is disabled. fabricCardLocked: The fabric card is locked. Description of bits: portDisabled(0) fabricCardLocked(1)')
mscShelfFabricCardVoltageAFeedDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardVoltageAFeedDetected.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardVoltageAFeedDetected.setDescription('This attribute indicates if the fabric card is detecting current on power feed A. If it is not, check that the breaker is not turned off.')
mscShelfFabricCardVoltageBFeedDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardVoltageBFeedDetected.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardVoltageBFeedDetected.setDescription('This attribute indicates if the fabric card is detecting current on power feed B. If it is not, check that the breaker is not turned off.')
mscShelfFabricCardTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 12, 1, 9), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTemperatureThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTemperatureThreshold.setDescription('This attributes indicates at which temperature the fabric card generates a temperature alarm.')
mscShelfFabricCardErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 13), )
if mibBuilder.loadTexts: mscShelfFabricCardErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardErrorsTable.setDescription('This attribute group indicates errors that the fabric card has detected since the card was last rebooted. This information is intended for use in detecting and diagnosing the fabric-related problems within a module.')
mscShelfFabricCardErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardErrorsEntry.setDescription('An entry in the mscShelfFabricCardErrorsTable.')
mscShelfFabricCardVoltageErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardVoltageErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardVoltageErrors.setDescription('This attribute counts the voltage errors detected on the fabric. The value wraps to zero when it exceeds the maximum value.')
mscShelfFabricCardTemperatureErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTemperatureErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTemperatureErrors.setDescription('This attribute counts the temperature errors encountered on the fabric card. The value wraps to zero when it exceeds the maximum value.')
mscShelfFabricCardBanksTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 14), )
if mibBuilder.loadTexts: mscShelfFabricCardBanksTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardBanksTable.setDescription('This group contains the attributes that govern the operation of a fabric card banks. These attributes cannot be changed while the fabric card writable bank is loading.')
mscShelfFabricCardBanksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardBanksEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardBanksEntry.setDescription('An entry in the mscShelfFabricCardBanksTable.')
mscShelfFabricCardFixedBankVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 14, 1, 1), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardFixedBankVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardFixedBankVersion.setDescription('This attribute indicates what the fabric card software version in the fixed bank is. It is zero during start-up. After start-up it is queried from the fabric card.')
mscShelfFabricCardWritableBankVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 14, 1, 2), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardWritableBankVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardWritableBankVersion.setDescription('This attribute indicates the software version that is loaded on the writable bank. It is zero if there is no version loaded.')
mscShelfFabricCardRecommendedVersionToInstall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 14, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardRecommendedVersionToInstall.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardRecommendedVersionToInstall.setDescription('This attribute indicates the recommended fabric application version to install using the Install command. If the current active software is up-to-date, it indicates no version is needed to install.')
mscShelfFabricCardActiveBank = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fixed", 0), ("writable", 1), ("unknown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscShelfFabricCardActiveBank.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardActiveBank.setDescription('This attribute indicates which bank is the currently running. The writable bank can only be made active if it has been installed using the Install command at least once. writable: Indicates the writable bank is the active bank. fixed: Indicates the fixed bank is the active bank. unknown: The software has not yet determined which is the active bank. This normally takes a few seconds when the software is first activated.')
mscShelfFabricCardBankOnShelfRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fixed", 0), ("writable", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardBankOnShelfRestart.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardBankOnShelfRestart.setDescription('This attribute indicates which bank will be running when the shelf is reset or powered-down and then powered-up. writable: Indicates the writable bank will be the bank on the next power up or reset. fixed: Indicates the fixed bank will be the bank on the next power up or reset. unknown: The software has not yet determined which is the bank on shelf restart. This normally takes a few seconds when the software is first activated.')
mscShelfFabricCardWritableBankStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("empty", 1), ("loading", 2), ("loaded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardWritableBankStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardWritableBankStatus.setDescription('This attribute specifies the current status of the writable bank. It is set to unknown until the status is determined by the software. It takes a few seconds at software activation time to determine the status of the writable bank. unknown: The switch has not yet determined the state of the writable bank. This happens only within the first few seconds the software is activated. empty: No (valid) software is loaded in the writable bank. loading: Software is currently loading into the writable bank. loaded: The software has successfully loaded. An example of a transition sequence for the writable bank status is: unknown -> empty-> loading -> loaded-> loading. On a failure, the status reverts to the previous status that was successful. For example if the loading fails, the status returns to empty.')
mscShelfFabricCardSecondaryControlBusCardBustapsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 443), )
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusCardBustapsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusCardBustapsTable.setDescription("Each processor card has a bus tap on both of the system's secondary control buses. This indicates the state of each processor card's bus tap onto the secondary control bus for which clocking is supplied by this fabric card. Possible values are: ok - The SCB is operational. hardwareFailure - The bus failed due to an HSCX hardware error. parityOrCrcErrors - The bus failed due to a CRC error or a parity error. timeOutError - The bus failed due to an SSC message time-out. txOrRxError - The bus failed due to Tx or Rx problems. pollError - The bus failed an SCB poll. none - The processor card is not available.")
mscShelfFabricCardSecondaryControlBusCardBustapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 443, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardSecondaryControlBusCardBustapsIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusCardBustapsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusCardBustapsEntry.setDescription('An entry in the mscShelfFabricCardSecondaryControlBusCardBustapsTable.')
mscShelfFabricCardSecondaryControlBusCardBustapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 443, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusCardBustapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusCardBustapsIndex.setDescription('This variable represents the mscShelfFabricCardSecondaryControlBusCardBustapsTable specific index for the mscShelfFabricCardSecondaryControlBusCardBustapsTable.')
mscShelfFabricCardSecondaryControlBusCardBustapsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 443, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 0), ("hardwareFailure", 1), ("parityOrCrcErrors", 2), ("timeOutError", 3), ("txOrRxError", 4), ("pollError", 5), ("none", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusCardBustapsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusCardBustapsValue.setDescription('This variable represents an individual value for the mscShelfFabricCardSecondaryControlBusCardBustapsTable.')
mscShelfFabricCardSecondaryControlBusFabricBustapsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 445), )
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusFabricBustapsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusFabricBustapsTable.setDescription("Each fabric card has a bus tap on both of the system's secondary control buses. This indicates the state of each fabric card's bus tap onto the secondary control bus for which clocking is supplied by this fabric card. The enumerated values describe the state of the each bus tap. Possible values are: ok - The SCB is operational. txOrRxError - The bus failed due to Tx or Rx problems. pollError - The bus failed an SCB poll. testMessageError - The bus failed a fabric card test. none - The processor card is not available. unknown - The state cannot be determined due to faulty bustap on CP.")
mscShelfFabricCardSecondaryControlBusFabricBustapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 445, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardSecondaryControlBusFabricBustapsIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusFabricBustapsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusFabricBustapsEntry.setDescription('An entry in the mscShelfFabricCardSecondaryControlBusFabricBustapsTable.')
mscShelfFabricCardSecondaryControlBusFabricBustapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 445, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x", 0), ("y", 1))))
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusFabricBustapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusFabricBustapsIndex.setDescription('This variable represents the mscShelfFabricCardSecondaryControlBusFabricBustapsTable specific index for the mscShelfFabricCardSecondaryControlBusFabricBustapsTable.')
mscShelfFabricCardSecondaryControlBusFabricBustapsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 445, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("txOrRxError", 1), ("pollError", 2), ("testMessageError", 3), ("none", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusFabricBustapsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardSecondaryControlBusFabricBustapsValue.setDescription('This variable represents an individual value for the mscShelfFabricCardSecondaryControlBusFabricBustapsTable.')
mscShelfFabricCardTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2))
mscShelfFabricCardTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 1), )
if mibBuilder.loadTexts: mscShelfFabricCardTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestRowStatusTable.setDescription('This entry controls the addition and deletion of mscShelfFabricCardTest components.')
mscShelfFabricCardTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestRowStatusEntry.setDescription('A single entry in the table represents a single mscShelfFabricCardTest component.')
mscShelfFabricCardTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscShelfFabricCardTest components. These components cannot be added nor deleted.')
mscShelfFabricCardTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscShelfFabricCardTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestStorageType.setDescription('This variable represents the storage type value for the mscShelfFabricCardTest tables.')
mscShelfFabricCardTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscShelfFabricCardTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestIndex.setDescription('This variable represents the index for the mscShelfFabricCardTest tables.')
mscShelfFabricCardTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 10), )
if mibBuilder.loadTexts: mscShelfFabricCardTestStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscShelfFabricCardTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardTestStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestStateEntry.setDescription('An entry in the mscShelfFabricCardTestStateTable.')
mscShelfFabricCardTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscShelfFabricCardTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscShelfFabricCardTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscShelfFabricCardTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 11), )
if mibBuilder.loadTexts: mscShelfFabricCardTestSetupTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestSetupTable.setDescription('This attribute group contains the attributes that govern the operation of a fabric card test. These attributes cannot be changed while the fabric card test is running.')
mscShelfFabricCardTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardTestSetupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestSetupEntry.setDescription('An entry in the mscShelfFabricCardTestSetupTable.')
mscShelfFabricCardTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 43200)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscShelfFabricCardTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestDuration.setDescription('This attribute specifies the maximum length of time that the fabric card test is allowed to run. The maximum allowed value permits the fabric card test to be run for up to 30 days.')
mscShelfFabricCardTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 12), )
if mibBuilder.loadTexts: mscShelfFabricCardTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestResultsTable.setDescription('This attribute group contains the results of the fabric card test that is currently running; if no fabric card test is running, the attribute group contains the results of the most recently completed fabric card test. The attributes of the Results group are reset to their initial values whenever a fabric card test is started or any attribute in the Setup group is set.')
mscShelfFabricCardTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestResultsEntry.setDescription('An entry in the mscShelfFabricCardTestResultsTable.')
mscShelfFabricCardTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 43200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestElapsedTime.setDescription('This attribute indicates the length of time that the fabric card test has been running.')
mscShelfFabricCardTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 43200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestTimeRemaining.setDescription('This attribute indicates the maximum length of time that the fabric card test runs before stopping.')
mscShelfFabricCardTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("neverStarted", 0), ("testRunning", 1), ("testTimeExpired", 2), ("stoppedByOperator", 3), ("portTestFailure", 4), ("fabricSelfTestFailure", 5), ("broadcastFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestCauseOfTermination.setDescription('This attribute indicates the reason the fabric card test ended. It contains one of the following values: neverStarted: The fabric card test has not been started. testRunning: The fabric card test is currently running. testTimeExpired: The fabric card test ran for the specified duration. stoppedByOperator: A stop command was issued. portTestFailure: A failure was detected during the port test. fabricSelfTestFailure: A failure was detected during the fabric card self-test. broadcastFailure: A failure was detected during the broadcast test.')
mscShelfFabricCardTestTestsDone = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestTestsDone.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestTestsDone.setDescription('This attribute indicates the tests that have been performed during the fabric card test. It contains zero or more of the following values: selfTest: The fabric card self-test has been performed. portTest: The port test has been performed. broadcastTest: The broadcast test has been performed. pingTest: At least one ping test has been performed. Description of bits: selfTest(0) portTest(1) broadcastTest(2) pingTest(3)')
mscShelfFabricCardTestFabricSelfTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("failed", 0), ("ok", 1), ("noTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestFabricSelfTestResults.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestFabricSelfTestResults.setDescription("This attribute indicates the results of the fabric's self test. The fabric test terminates automatically if a failure is detected. ok: The fabric self test is passed. failed: The fabric self test is failed. noTest: The default value indicates no self test is performed.")
mscShelfFabricCardTestPortTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 468), )
if mibBuilder.loadTexts: mscShelfFabricCardTestPortTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPortTestResultsTable.setDescription('This attribute indicates the results of the fabric port, indexed by the slot number of the card containing the fabric port tested. Each entry contains one of the following values. +: the port passed its test X: the port failed its test .: the port was not tested The fabric card test terminates automatically if a failure is detected.')
mscShelfFabricCardTestPortTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 468, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestPortTestResultsIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardTestPortTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPortTestResultsEntry.setDescription('An entry in the mscShelfFabricCardTestPortTestResultsTable.')
mscShelfFabricCardTestPortTestResultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 468, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardTestPortTestResultsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPortTestResultsIndex.setDescription('This variable represents the mscShelfFabricCardTestPortTestResultsTable specific index for the mscShelfFabricCardTestPortTestResultsTable.')
mscShelfFabricCardTestPortTestResultsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 468, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("x", 0), ("n1", 1), ("n2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestPortTestResultsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPortTestResultsValue.setDescription('This variable represents an individual value for the mscShelfFabricCardTestPortTestResultsTable.')
mscShelfFabricCardTestBroadcastTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 469), )
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsTable.setDescription('This attribute indicates the results of the broadcast test, indexed by the slot numbers of the cards containing the fabric port tested. Each entry contains one of the following values. +: a broadcast message was successfully sent from the transmitting fabric port to the receiving fabric port X: a broadcast message was not successfully sent from the transmitting fabric port to the receiving fabric port .: the associated pair of fabric ports was not tested The fabric card test terminates automatically if a failure is detected.')
mscShelfFabricCardTestBroadcastTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 469, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestBroadcastTestResultsTxCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestBroadcastTestResultsRxCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsEntry.setDescription('An entry in the mscShelfFabricCardTestBroadcastTestResultsTable.')
mscShelfFabricCardTestBroadcastTestResultsTxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 469, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsTxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsTxCardIndex.setDescription('This variable represents the next to last index for the mscShelfFabricCardTestBroadcastTestResultsTable.')
mscShelfFabricCardTestBroadcastTestResultsRxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 469, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsRxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsRxCardIndex.setDescription('This variable represents the final index for the mscShelfFabricCardTestBroadcastTestResultsTable.')
mscShelfFabricCardTestBroadcastTestResultsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 469, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("x", 0), ("n1", 1), ("n2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestBroadcastTestResultsValue.setDescription('This variable represents an individual value for the mscShelfFabricCardTestBroadcastTestResultsTable.')
mscShelfFabricCardTestPingTestsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 470), )
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsTable.setDescription('This attribute indicates the number of ping tests performed, indexed by the slot numbers of the cards containing the fabric ports involved. Each test attempts to transmit a single low-priority frame from the transmitting fabric port to the receiving fabric port.')
mscShelfFabricCardTestPingTestsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 470, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestPingTestsTxCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestPingTestsRxCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsEntry.setDescription('An entry in the mscShelfFabricCardTestPingTestsTable.')
mscShelfFabricCardTestPingTestsTxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 470, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsTxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsTxCardIndex.setDescription('This variable represents the next to last index for the mscShelfFabricCardTestPingTestsTable.')
mscShelfFabricCardTestPingTestsRxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 470, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsRxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsRxCardIndex.setDescription('This variable represents the final index for the mscShelfFabricCardTestPingTestsTable.')
mscShelfFabricCardTestPingTestsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 470, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingTestsValue.setDescription('This variable represents an individual value for the mscShelfFabricCardTestPingTestsTable.')
mscShelfFabricCardTestPingFailuresTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 471), )
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresTable.setDescription('This attribute indicates the number of ping test failures detected, indexed by the slot numbers of the cards containing the fabric ports involved. Each failure represents a single low-priority frame that was not successfully transmitted from the transmitting fabric port to the receiving fabric port. The fabric card test does not terminate automatically if a failure is detected.')
mscShelfFabricCardTestPingFailuresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 471, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestPingFailuresTxCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardTestPingFailuresRxCardIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresEntry.setDescription('An entry in the mscShelfFabricCardTestPingFailuresTable.')
mscShelfFabricCardTestPingFailuresTxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 471, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresTxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresTxCardIndex.setDescription('This variable represents the next to last index for the mscShelfFabricCardTestPingFailuresTable.')
mscShelfFabricCardTestPingFailuresRxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 471, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresRxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresRxCardIndex.setDescription('This variable represents the final index for the mscShelfFabricCardTestPingFailuresTable.')
mscShelfFabricCardTestPingFailuresValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 2, 471, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardTestPingFailuresValue.setDescription('This variable represents an individual value for the mscShelfFabricCardTestPingFailuresTable.')
mscShelfFabricCardCardPort = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3))
mscShelfFabricCardCardPortRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 1), )
if mibBuilder.loadTexts: mscShelfFabricCardCardPortRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortRowStatusTable.setDescription('This entry controls the addition and deletion of mscShelfFabricCardCardPort components.')
mscShelfFabricCardCardPortRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardCardPortIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardCardPortRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortRowStatusEntry.setDescription('A single entry in the table represents a single mscShelfFabricCardCardPort component.')
mscShelfFabricCardCardPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscShelfFabricCardCardPort components. These components cannot be added nor deleted.')
mscShelfFabricCardCardPortComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscShelfFabricCardCardPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortStorageType.setDescription('This variable represents the storage type value for the mscShelfFabricCardCardPort tables.')
mscShelfFabricCardCardPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfFabricCardCardPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortIndex.setDescription('This variable represents the index for the mscShelfFabricCardCardPort tables.')
mscShelfFabricCardCardPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10), )
if mibBuilder.loadTexts: mscShelfFabricCardCardPortStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
mscShelfFabricCardCardPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardCardPortIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardCardPortStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortStateEntry.setDescription('An entry in the mscShelfFabricCardCardPortStateTable.')
mscShelfFabricCardCardPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfFabricCardCardPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfFabricCardCardPortUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfFabricCardCardPortAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
mscShelfFabricCardCardPortProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
mscShelfFabricCardCardPortControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
mscShelfFabricCardCardPortAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
mscShelfFabricCardCardPortStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
mscShelfFabricCardCardPortUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
mscShelfFabricCardCardPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 11), )
if mibBuilder.loadTexts: mscShelfFabricCardCardPortOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortOperTable.setDescription('This attribute group contains operational attributes of a card port. This information outlines what the card port is doing and why it is doing it and is primarily intended for use in diagnosing the cause of a port-related problem reported by the module.')
mscShelfFabricCardCardPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardCardPortIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardCardPortOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortOperEntry.setDescription('An entry in the mscShelfFabricCardCardPortOperTable.')
mscShelfFabricCardCardPortFailuresInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortFailuresInEffect.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortFailuresInEffect.setDescription("This attribute indicates the hardware problems that prevent the CardPort from using the fabric. It may contain any combination of the following values. selfTest: The port has failed its self-test. crcError: The port has detected too many CRC errors. signalLoss: The serial link receiver is not receiving a signal. That is, the electrical connection to the far end transmitter is not valid. flowControlViolation: An unacceptable number of flow control violation errors have occurred. synchronizationLoss: The serial link's phase or alignment is lost. Therefore, the port's synchronization is lost. queueFull: The output queue is full. syncLoss: The card port has lost synchronization with the fabric port. Description of bits: selfTest(0) crcError(1) signalLoss(2) flowControlViolation(3) synchronizationLoss(4) queueFull(5) syncLoss(6)")
mscShelfFabricCardCardPortDependenciesInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortDependenciesInEffect.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortDependenciesInEffect.setDescription('This attribute indicates the non-hardware problems that prevent the port from using the associated fabric. It may contain the following values: fabricLocked - The fabric card is locked. fabricDisabled - The fabric card is disabled. portDisabled - The corresponding fabric port is disabled. cardNotInserted - The corresponding processor card is not inserted. Description of bits: fabricLocked(0) fabricDisabled(1) portDisabled(2) cardNotInserted(3)')
mscShelfFabricCardCardPortCardPortErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 12), )
if mibBuilder.loadTexts: mscShelfFabricCardCardPortCardPortErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortCardPortErrorsTable.setDescription('This attribute group indicates errors that the card port has detected since the fabric card was last rebooted. This information is intended for use in detecting and diagnosing port-related problems within a module.')
mscShelfFabricCardCardPortCardPortErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardIndex"), (0, "Nortel-MsCarrier-MscPassport-FabricMIB", "mscShelfFabricCardCardPortIndex"))
if mibBuilder.loadTexts: mscShelfFabricCardCardPortCardPortErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortCardPortErrorsEntry.setDescription('An entry in the mscShelfFabricCardCardPortCardPortErrorsTable.')
mscShelfFabricCardCardPortSelfTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortSelfTestErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortSelfTestErrorCode.setDescription('This attribute indicates the error code generated by the most recent self-test of the port.')
mscShelfFabricCardCardPortDataOrAddressCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortDataOrAddressCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortDataOrAddressCrcErrors.setDescription('This attribute indicates the packet data or address CRC errors encountered on the port. The value wraps to zero when it exceeds the maximum value.')
mscShelfFabricCardCardPortFlowControlViolationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortFlowControlViolationErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortFlowControlViolationErrors.setDescription("This attribute counts the flow control violations (that is 'threshold exceeded errors') detected on the port. The value wraps to zero when it exceeds the maximum value.")
mscShelfFabricCardCardPortLivelinessErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortLivelinessErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortLivelinessErrors.setDescription('This attribute counts the liveliness errors detected on the card port. Liveliness errors are failures to receive yellow cells within a certain period of time. The value wraps to zero when it exceeds the maximum value. Note: Yellow cells are special types of packets which are generated by the fabric port and detected by the fabric card and the fabric port in order to check the link liveness with the fabric card.')
mscShelfFabricCardCardPortLossOfSignalOrSyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 5, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfFabricCardCardPortLossOfSignalOrSyncErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfFabricCardCardPortLossOfSignalOrSyncErrors.setDescription('This attribute counts the loss of signal or loss of synchronization errors on the port that caused the port to fail. The value wraps to zero when it exceeds the maximum value.')
fabricGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145, 1))
fabricGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145, 1, 1))
fabricGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145, 1, 1, 3))
fabricGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145, 1, 1, 3, 2))
fabricCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145, 3))
fabricCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145, 3, 1))
fabricCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145, 3, 1, 3))
fabricCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 145, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-FabricMIB", mscShelfFabricCardTestComponentName=mscShelfFabricCardTestComponentName, mscShelfCardFabricPortErrorsTable=mscShelfCardFabricPortErrorsTable, mscShelfFabricCardCardPortStorageType=mscShelfFabricCardCardPortStorageType, mscShelfFabricCardCardPortStandbyStatus=mscShelfFabricCardCardPortStandbyStatus, mscShelfFabricCardSecondaryControlBusStatus=mscShelfFabricCardSecondaryControlBusStatus, mscShelfCardFabricPortOperationalState=mscShelfCardFabricPortOperationalState, mscShelfFabricCardTestPingTestsValue=mscShelfFabricCardTestPingTestsValue, mscShelfFabricCardTestPingTestsEntry=mscShelfFabricCardTestPingTestsEntry, mscShelfFabricCardTemperatureThreshold=mscShelfFabricCardTemperatureThreshold, mscShelfFabricCardCardPort=mscShelfFabricCardCardPort, mscShelfFabricCardCardPortAdminState=mscShelfFabricCardCardPortAdminState, mscShelfFabricCardUnknownStatus=mscShelfFabricCardUnknownStatus, mscShelfFabricCardTestIndex=mscShelfFabricCardTestIndex, mscShelfCardFabricPortStateEntry=mscShelfCardFabricPortStateEntry, mscShelfFabricCardCardPortRowStatusTable=mscShelfFabricCardCardPortRowStatusTable, mscShelfFabricCardSecondaryControlBusFabricBustapsIndex=mscShelfFabricCardSecondaryControlBusFabricBustapsIndex, mscShelfCardFabricPortOperTable=mscShelfCardFabricPortOperTable, mscShelfFabricCardComponentName=mscShelfFabricCardComponentName, mscShelfFabricCardAvailabilityStatus=mscShelfFabricCardAvailabilityStatus, mscShelfCardFabricPortAdminState=mscShelfCardFabricPortAdminState, mscShelfFabricCardTestPingFailuresTable=mscShelfFabricCardTestPingFailuresTable, mscShelfFabricCardActiveBank=mscShelfFabricCardActiveBank, mscShelfFabricCardTestResultsEntry=mscShelfFabricCardTestResultsEntry, mscShelfCardFabricPortIndex=mscShelfCardFabricPortIndex, mscShelfFabricCardStorageType=mscShelfFabricCardStorageType, mscShelfFabricCardErrorsTable=mscShelfFabricCardErrorsTable, mscShelfFabricCardCardPortAvailabilityStatus=mscShelfFabricCardCardPortAvailabilityStatus, mscShelfFabricCardCardPortLivelinessErrors=mscShelfFabricCardCardPortLivelinessErrors, mscShelfFabricCardTestPingFailuresRxCardIndex=mscShelfFabricCardTestPingFailuresRxCardIndex, mscShelfFabricCardTestUsageState=mscShelfFabricCardTestUsageState, mscShelfFabricCardOperTable=mscShelfFabricCardOperTable, mscShelfFabricCardRowStatusEntry=mscShelfFabricCardRowStatusEntry, mscShelfCardFabricPortStateTable=mscShelfCardFabricPortStateTable, mscShelfFabricCardCardPortUnknownStatus=mscShelfFabricCardCardPortUnknownStatus, mscShelfFabricCardCardPortFailuresInEffect=mscShelfFabricCardCardPortFailuresInEffect, fabricGroupCA02=fabricGroupCA02, mscShelfFabricCardIndex=mscShelfFabricCardIndex, mscShelfFabricCardOperatingTemperature=mscShelfFabricCardOperatingTemperature, mscShelfCardFabricPortDataCorruptionErrors=mscShelfCardFabricPortDataCorruptionErrors, mscShelfFabricCardSelfTestResults=mscShelfFabricCardSelfTestResults, mscShelfFabricCardSecondaryControlBusCardBustapsValue=mscShelfFabricCardSecondaryControlBusCardBustapsValue, mscShelfFabricCardTestPingTestsTxCardIndex=mscShelfFabricCardTestPingTestsTxCardIndex, mscShelfCardFabricPortAvailabilityStatus=mscShelfCardFabricPortAvailabilityStatus, mscShelfFabricCardTestRowStatus=mscShelfFabricCardTestRowStatus, mscShelfCardFabricPortRowStatusEntry=mscShelfCardFabricPortRowStatusEntry, mscShelfFabricCardDependencyInEffect=mscShelfFabricCardDependencyInEffect, mscShelfFabricCardTestTestsDone=mscShelfFabricCardTestTestsDone, mscShelfFabricCardCardPortOperEntry=mscShelfFabricCardCardPortOperEntry, mscShelfFabricCardTestElapsedTime=mscShelfFabricCardTestElapsedTime, mscShelfFabricCardTestPortTestResultsEntry=mscShelfFabricCardTestPortTestResultsEntry, mscShelfFabricCardSecondaryControlBusFabricBustapsValue=mscShelfFabricCardSecondaryControlBusFabricBustapsValue, mscShelfCardFabricPortRowStatus=mscShelfCardFabricPortRowStatus, mscShelfFabricCardOperationalState=mscShelfFabricCardOperationalState, mscShelfCardFabricPortSelfTestErrorCode=mscShelfCardFabricPortSelfTestErrorCode, mscShelfFabricCardStandbyStatus=mscShelfFabricCardStandbyStatus, mscShelfFabricCardTest=mscShelfFabricCardTest, mscShelfFabricCardTestBroadcastTestResultsRxCardIndex=mscShelfFabricCardTestBroadcastTestResultsRxCardIndex, mscShelfCardFabricPortControlStatus=mscShelfCardFabricPortControlStatus, mscShelfFabricCardVoltageAFeedDetected=mscShelfFabricCardVoltageAFeedDetected, mscShelfFabricCardTestBroadcastTestResultsTable=mscShelfFabricCardTestBroadcastTestResultsTable, mscShelfFabricCardCardPortIndex=mscShelfFabricCardCardPortIndex, mscShelfFabricCardTestTimeRemaining=mscShelfFabricCardTestTimeRemaining, mscShelfFabricCardWritableBankVersion=mscShelfFabricCardWritableBankVersion, mscShelfFabricCardTestPortTestResultsTable=mscShelfFabricCardTestPortTestResultsTable, mscShelfCardFabricPortLivelinessErrors=mscShelfCardFabricPortLivelinessErrors, mscShelfCardFabricPortDependenciesInEffect=mscShelfCardFabricPortDependenciesInEffect, mscShelfFabricCardBankOnShelfRestart=mscShelfFabricCardBankOnShelfRestart, mscShelfFabricCardSecondaryControlBusFabricBustapsEntry=mscShelfFabricCardSecondaryControlBusFabricBustapsEntry, mscShelfFabricCardTestRowStatusTable=mscShelfFabricCardTestRowStatusTable, mscShelfFabricCardProceduralStatus=mscShelfFabricCardProceduralStatus, mscShelfFabricCardCardPortComponentName=mscShelfFabricCardCardPortComponentName, mscShelfFabricCardCardPortDataOrAddressCrcErrors=mscShelfFabricCardCardPortDataOrAddressCrcErrors, mscShelfCardFabricPortRowStatusTable=mscShelfCardFabricPortRowStatusTable, mscShelfFabricCardControlStatus=mscShelfFabricCardControlStatus, fabricGroupCA02A=fabricGroupCA02A, mscShelfCardFabricPortStorageType=mscShelfCardFabricPortStorageType, mscShelfCardFabricPortPortProtocolErrors=mscShelfCardFabricPortPortProtocolErrors, mscShelfFabricCardTestAdminState=mscShelfFabricCardTestAdminState, mscShelfFabricCardCardPortProceduralStatus=mscShelfFabricCardCardPortProceduralStatus, mscShelfFabricCardCardPortCardPortErrorsEntry=mscShelfFabricCardCardPortCardPortErrorsEntry, mscShelfFabricCardSecondaryControlBusCardBustapsIndex=mscShelfFabricCardSecondaryControlBusCardBustapsIndex, mscShelfFabricCardTestSetupEntry=mscShelfFabricCardTestSetupEntry, fabricGroupCA=fabricGroupCA, mscShelfFabricCardVoltageBFeedDetected=mscShelfFabricCardVoltageBFeedDetected, mscShelfFabricCardVoltageErrors=mscShelfFabricCardVoltageErrors, mscShelfCardFabricPortUnknownStatus=mscShelfCardFabricPortUnknownStatus, mscShelfFabricCardTestStorageType=mscShelfFabricCardTestStorageType, mscShelfFabricCardFailureCause=mscShelfFabricCardFailureCause, mscShelfFabricCardUtilization=mscShelfFabricCardUtilization, mscShelfCardFabricPort=mscShelfCardFabricPort, mscShelfCardFabricPortCardsAvailable=mscShelfCardFabricPortCardsAvailable, mscShelfCardFabricPortProceduralStatus=mscShelfCardFabricPortProceduralStatus, mscShelfFabricCardOperEntry=mscShelfFabricCardOperEntry, mscShelfFabricCardSecondaryControlBusFabricBustapsTable=mscShelfFabricCardSecondaryControlBusFabricBustapsTable, mscShelfFabricCardTestBroadcastTestResultsValue=mscShelfFabricCardTestBroadcastTestResultsValue, mscShelfFabricCardTestPingFailuresTxCardIndex=mscShelfFabricCardTestPingFailuresTxCardIndex, mscShelfFabricCardCardPortOperTable=mscShelfFabricCardCardPortOperTable, fabricCapabilitiesCA02=fabricCapabilitiesCA02, mscShelfFabricCardTestBroadcastTestResultsEntry=mscShelfFabricCardTestBroadcastTestResultsEntry, mscShelfCardFabricPortStandbyStatus=mscShelfCardFabricPortStandbyStatus, mscShelfCardFabricPortCardsTxTo=mscShelfCardFabricPortCardsTxTo, mscShelfFabricCardTestSetupTable=mscShelfFabricCardTestSetupTable, mscShelfFabricCardTestBroadcastTestResultsTxCardIndex=mscShelfFabricCardTestBroadcastTestResultsTxCardIndex, mscShelfFabricCardTestPingTestsRxCardIndex=mscShelfFabricCardTestPingTestsRxCardIndex, mscShelfFabricCardTestPingTestsTable=mscShelfFabricCardTestPingTestsTable, mscShelfFabricCardTestResultsTable=mscShelfFabricCardTestResultsTable, mscShelfFabricCardTestPortTestResultsIndex=mscShelfFabricCardTestPortTestResultsIndex, mscShelfFabricCardTestPingFailuresEntry=mscShelfFabricCardTestPingFailuresEntry, mscShelfFabricCardUsageState=mscShelfFabricCardUsageState, mscShelfFabricCardCardPortLossOfSignalOrSyncErrors=mscShelfFabricCardCardPortLossOfSignalOrSyncErrors, mscShelfFabricCardCardPortFlowControlViolationErrors=mscShelfFabricCardCardPortFlowControlViolationErrors, mscShelfCardFabricPortAlarmStatus=mscShelfCardFabricPortAlarmStatus, mscShelfFabricCardTestOperationalState=mscShelfFabricCardTestOperationalState, mscShelfFabricCardCardPortAlarmStatus=mscShelfFabricCardCardPortAlarmStatus, mscShelfCardFabricPortFailuresInEffect=mscShelfCardFabricPortFailuresInEffect, mscShelfFabricCardCardPortRowStatusEntry=mscShelfFabricCardCardPortRowStatusEntry, mscShelfCardFabricPortUsageState=mscShelfCardFabricPortUsageState, mscShelfFabricCardCardPortRowStatus=mscShelfFabricCardCardPortRowStatus, mscShelfFabricCardTestStateTable=mscShelfFabricCardTestStateTable, mscShelfFabricCardPropTable=mscShelfFabricCardPropTable, mscShelfFabricCardCardPortOperationalState=mscShelfFabricCardCardPortOperationalState, mscShelfFabricCardAdminState=mscShelfFabricCardAdminState, mscShelfCardFabricPortOperEntry=mscShelfCardFabricPortOperEntry, mscShelfFabricCardStateTable=mscShelfFabricCardStateTable, mscShelfFabricCardCardPortDependenciesInEffect=mscShelfFabricCardCardPortDependenciesInEffect, fabricMIB=fabricMIB, mscShelfFabricCardTestPortTestResultsValue=mscShelfFabricCardTestPortTestResultsValue, mscShelfFabricCardTestCauseOfTermination=mscShelfFabricCardTestCauseOfTermination, mscShelfFabricCardErrorsEntry=mscShelfFabricCardErrorsEntry, mscShelfCardFabricPortErrorsEntry=mscShelfCardFabricPortErrorsEntry, mscShelfFabricCardRowStatus=mscShelfFabricCardRowStatus, mscShelfFabricCardSerialNumber=mscShelfFabricCardSerialNumber, mscShelfFabricCardBanksTable=mscShelfFabricCardBanksTable, mscShelfFabricCardWritableBankStatus=mscShelfFabricCardWritableBankStatus, mscShelfFabricCardFixedBankVersion=mscShelfFabricCardFixedBankVersion, mscShelfFabricCardCardPortCardPortErrorsTable=mscShelfFabricCardCardPortCardPortErrorsTable, mscShelfCardFabricPortLinkLivelinessErrors=mscShelfCardFabricPortLinkLivelinessErrors, mscShelfFabricCardPropEntry=mscShelfFabricCardPropEntry, mscShelfFabricCardRecommendedVersionToInstall=mscShelfFabricCardRecommendedVersionToInstall, mscShelfFabricCardTestRowStatusEntry=mscShelfFabricCardTestRowStatusEntry, fabricCapabilitiesCA02A=fabricCapabilitiesCA02A, mscShelfFabricCardCardPortControlStatus=mscShelfFabricCardCardPortControlStatus, mscShelfFabricCardBanksEntry=mscShelfFabricCardBanksEntry, mscShelfFabricCardSecondaryControlBusCardBustapsTable=mscShelfFabricCardSecondaryControlBusCardBustapsTable, mscShelfFabricCardSecondaryControlBusCardBustapsEntry=mscShelfFabricCardSecondaryControlBusCardBustapsEntry, mscShelfFabricCardCardPortUsageState=mscShelfFabricCardCardPortUsageState, mscShelfFabricCardStateEntry=mscShelfFabricCardStateEntry, mscShelfFabricCardTemperatureErrors=mscShelfFabricCardTemperatureErrors, mscShelfFabricCard=mscShelfFabricCard, mscShelfFabricCardProductCode=mscShelfFabricCardProductCode, mscShelfFabricCardTestDuration=mscShelfFabricCardTestDuration, mscShelfCardFabricPortComponentName=mscShelfCardFabricPortComponentName, fabricGroup=fabricGroup, fabricCapabilities=fabricCapabilities, mscShelfFabricCardRowStatusTable=mscShelfFabricCardRowStatusTable, mscShelfFabricCardTestStateEntry=mscShelfFabricCardTestStateEntry, mscShelfFabricCardCardPortStateTable=mscShelfFabricCardCardPortStateTable, mscShelfFabricCardTestPingFailuresValue=mscShelfFabricCardTestPingFailuresValue, mscShelfFabricCardCardPortSelfTestErrorCode=mscShelfFabricCardCardPortSelfTestErrorCode, mscShelfFabricCardAlarmStatus=mscShelfFabricCardAlarmStatus, mscShelfCardFabricPortPortHardwareErrors=mscShelfCardFabricPortPortHardwareErrors, mscShelfCardFabricPortSwitchClockErrors=mscShelfCardFabricPortSwitchClockErrors, fabricCapabilitiesCA=fabricCapabilitiesCA, mscShelfFabricCardCardPortStateEntry=mscShelfFabricCardCardPortStateEntry, mscShelfFabricCardTestFabricSelfTestResults=mscShelfFabricCardTestFabricSelfTestResults)
