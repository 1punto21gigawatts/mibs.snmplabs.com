#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-BaseRoutingMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-BaseRoutingMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:29:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
DisplayString, Gauge32, StorageType, Counter32, Integer32, RowPointer, RowStatus, Unsigned32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "DisplayString", "Gauge32", "StorageType", "Counter32", "Integer32", "RowPointer", "RowStatus", "Unsigned32")
FixedPoint1, NonReplicated, AsciiStringIndex, DigitString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "FixedPoint1", "NonReplicated", "AsciiStringIndex", "DigitString")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, ObjectIdentity, MibIdentifier, TimeTicks, Counter32, Integer32, iso, Counter64, IpAddress, NotificationType, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Integer32", "iso", "Counter64", "IpAddress", "NotificationType", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
baseRoutingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18))
mscRtg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40))
mscRtgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 1), )
if mibBuilder.loadTexts: mscRtgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgRowStatusTable.setDescription('This entry controls the addition and deletion of mscRtg components.')
mscRtgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"))
if mibBuilder.loadTexts: mscRtgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgRowStatusEntry.setDescription('A single entry in the table represents a single mscRtg component.')
mscRtgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscRtg components. These components can be added.')
mscRtgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscRtgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgStorageType.setDescription('This variable represents the storage type value for the mscRtg tables.')
mscRtgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscRtgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgIndex.setDescription('This variable represents the index for the mscRtg tables.')
mscRtgProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 12), )
if mibBuilder.loadTexts: mscRtgProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgProvTable.setDescription('This group contains the provisioning data for the routing system.')
mscRtgProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"))
if mibBuilder.loadTexts: mscRtgProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgProvEntry.setDescription('An entry in the mscRtgProvTable.')
mscRtgTandemTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allowed", 0), ("denied", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgTandemTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTandemTraffic.setDescription('This attribute specifies whether tandem traffic is permitted through the node. Tandem traffic is traffic which arrives at the node on a trunk and leaves the node on a trunk. Traffic to or from a gateway (internal or external) is not affected by the setting of this attribute. The default value of this attribute is allowed, which permits tandem traffic to be routed through the node. When this attribute is set to denied, DPN, VNS, and PORS traffic are not permitted to tandem through the node. Changing this attribute has no effect on PORS calls which were set up before the change. These calls can be manually forced to reroute using the new setting by clearing the calls or locking the trunks on which they are routed.')
mscRtgSplittingRegionIdsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 407), )
if mibBuilder.loadTexts: mscRtgSplittingRegionIdsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgSplittingRegionIdsTable.setDescription("This attribute is used only when splitting or merging existing topology regions. It specifies which topology regions are in a migration status. A node will only exchange topological information with a connected node under the following conditions: (i) the nodes belong to the same topology region, (ii) one of the nodes is provisioned with the default regionId of 0, (iii) the connected node's splittingRegionIds attribute is provisioned to contain the local node's regionId value and the local node's splittingRegionIds is also provisioned to contain the connected node's regionId value when both two nodes' regionIds are different and non-zero. When this attribute is used during migration of regions, values for the attribute are normally the old and new regionIds for the node. Use of this attribute makes it possible to migrate existing topology regions in the following cases: (i) splitting a topology region into two without isolating a node, (ii) merging two different topology regions into one without introducing an extra topological barrier. The attribute should be cleaned when all migration activities are complete. At this point, the region boundary will take effect.")
mscRtgSplittingRegionIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 407, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgSplittingRegionIdsValue"))
if mibBuilder.loadTexts: mscRtgSplittingRegionIdsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgSplittingRegionIdsEntry.setDescription('An entry in the mscRtgSplittingRegionIdsTable.')
mscRtgSplittingRegionIdsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 407, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgSplittingRegionIdsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgSplittingRegionIdsValue.setDescription('This variable represents both the value and the index for the mscRtgSplittingRegionIdsTable.')
mscRtgSplittingRegionIdsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 407, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscRtgSplittingRegionIdsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgSplittingRegionIdsRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscRtgSplittingRegionIdsTable.')
mscRtgTop = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5))
mscRtgTopRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 1), )
if mibBuilder.loadTexts: mscRtgTopRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopRowStatusTable.setDescription('This entry controls the addition and deletion of mscRtgTop components.')
mscRtgTopRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"))
if mibBuilder.loadTexts: mscRtgTopRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopRowStatusEntry.setDescription('A single entry in the table represents a single mscRtgTop component.')
mscRtgTopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscRtgTop components. These components cannot be added nor deleted.')
mscRtgTopComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscRtgTopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopStorageType.setDescription('This variable represents the storage type value for the mscRtgTop tables.')
mscRtgTopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscRtgTopIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopIndex.setDescription('This variable represents the index for the mscRtgTop tables.')
mscRtgTopStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 11), )
if mibBuilder.loadTexts: mscRtgTopStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopStatsTable.setDescription('Rtg Top Statistics This group contains operational data stored and maintained by this component for recording statistics of Passport routing control packets which have been sent or received by Topology.')
mscRtgTopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"))
if mibBuilder.loadTexts: mscRtgTopStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopStatsEntry.setDescription('An entry in the mscRtgTopStatsTable.')
mscRtgTopControlPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopControlPktRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopControlPktRx.setDescription('This attribute shows the total number of topology routing control packets which have been received by this node from other Passport nodes in the network.')
mscRtgTopControlBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopControlBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopControlBytesRx.setDescription('This attribute shows the total number of topology routing control packet bytes received by this node from other Passport nodes in the network.')
mscRtgTopControlPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopControlPktTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopControlPktTx.setDescription('This attribute shows the total number of topology routing control packets which have been sent by this node to other Passport nodes in the network.')
mscRtgTopControlBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopControlBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopControlBytesTx.setDescription('This attribute shows the total number of topology routing control packet bytes sent by this node to other Passport nodes in the network.')
mscRtgTopNode = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2))
mscRtgTopNodeRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 1), )
if mibBuilder.loadTexts: mscRtgTopNodeRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscRtgTopNode components.')
mscRtgTopNodeRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeIndex"))
if mibBuilder.loadTexts: mscRtgTopNodeRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeRowStatusEntry.setDescription('A single entry in the table represents a single mscRtgTopNode component.')
mscRtgTopNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscRtgTopNode components. These components cannot be added nor deleted.')
mscRtgTopNodeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscRtgTopNodeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeStorageType.setDescription('This variable represents the storage type value for the mscRtgTopNode tables.')
mscRtgTopNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 12)))
if mibBuilder.loadTexts: mscRtgTopNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeIndex.setDescription('This variable represents the index for the mscRtgTopNode tables.')
mscRtgTopNodeOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 10), )
if mibBuilder.loadTexts: mscRtgTopNodeOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** Rtg Top Node/<neighborNodeName> Operational This group contains operational data about each node in the Passport network and its connectivity to its neighbours.')
mscRtgTopNodeOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeIndex"))
if mibBuilder.loadTexts: mscRtgTopNodeOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeOperEntry.setDescription('An entry in the mscRtgTopNodeOperTable.')
mscRtgTopNodeNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeNodeId.setDescription('The nodeId is a number that uniquely identifies the Node component instance in the Passport network. It is the identifier used in the routing control packets sent by this node to other Passport nodes in the network. The nodeId, for each node in the network, is learned from the Passport routing protocol packets.')
mscRtgTopNodeLg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2))
mscRtgTopNodeLgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 1), )
if mibBuilder.loadTexts: mscRtgTopNodeLgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscRtgTopNodeLg components.')
mscRtgTopNodeLgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgIndex"))
if mibBuilder.loadTexts: mscRtgTopNodeLgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgRowStatusEntry.setDescription('A single entry in the table represents a single mscRtgTopNodeLg component.')
mscRtgTopNodeLgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscRtgTopNodeLg components. These components cannot be added nor deleted.')
mscRtgTopNodeLgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscRtgTopNodeLgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgStorageType.setDescription('This variable represents the storage type value for the mscRtgTopNodeLg tables.')
mscRtgTopNodeLgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 12)))
if mibBuilder.loadTexts: mscRtgTopNodeLgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgIndex.setDescription('This variable represents the index for the mscRtgTopNodeLg tables.')
mscRtgTopNodeLgOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 10), )
if mibBuilder.loadTexts: mscRtgTopNodeLgOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** Rtg Top Node/<neighborNodeName> LinkGroup/ <neighborNodeName> Operational This group contains the operational data stored and maintained by TrunkGroup component for each trunk group attached to a node in the Passport network.')
mscRtgTopNodeLgOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgIndex"))
if mibBuilder.loadTexts: mscRtgTopNodeLgOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgOperEntry.setDescription('An entry in the mscRtgTopNodeLgOperTable.')
mscRtgTopNodeLgDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgDelayMetric.setDescription('This attribute specifies the outbound cost to forward packets across the trunk group for a delay class of service. It represents the trunk in the trunk group with the lowest round trip delay. A low outbound cost is preferable to a higher value as it is associated with higher speed facilities. A metric value of 2147483647 means that the trunk group is unusable for the delay class of service.')
mscRtgTopNodeLgTputMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTputMetric.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTputMetric.setDescription('This attribute specifies the outbound cost to forward packets across the trunk group for a throughput class of service. It is computed from the combined speed of each link in the trunk group. A low outbound cost is preferable to a higher value as it is associated with higher speed facilities. A metric value of 2147483647 means that the trunk group is unusable for the throughput class of service.')
mscRtgTopNodeLgLnnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 235), )
if mibBuilder.loadTexts: mscRtgTopNodeLgLnnTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgLnnTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This attribute is a list of integers which specify the logical network numbers supported by the trunk group. Each of these numbers corresponds with a particular instance of network protocol supported on this switch. LNN 0 is present on all trunks by default to allow Passport control traffic on the trunk.')
mscRtgTopNodeLgLnnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 235, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgLnnValue"))
if mibBuilder.loadTexts: mscRtgTopNodeLgLnnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgLnnEntry.setDescription('An entry in the mscRtgTopNodeLgLnnTable.')
mscRtgTopNodeLgLnnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 235, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgLnnValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgLnnValue.setDescription('This variable represents both the value and the index for the mscRtgTopNodeLgLnnTable.')
mscRtgTopNodeLgTrkObj = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2))
mscRtgTopNodeLgTrkObjRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscRtgTopNodeLgTrkObj components.')
mscRtgTopNodeLgTrkObjRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgTrkObjIndex"))
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjRowStatusEntry.setDescription('A single entry in the table represents a single mscRtgTopNodeLgTrkObj component.')
mscRtgTopNodeLgTrkObjRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscRtgTopNodeLgTrkObj components. These components cannot be added nor deleted.')
mscRtgTopNodeLgTrkObjComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscRtgTopNodeLgTrkObjStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjStorageType.setDescription('This variable represents the storage type value for the mscRtgTopNodeLgTrkObj tables.')
mscRtgTopNodeLgTrkObjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)))
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjIndex.setDescription('This variable represents the index for the mscRtgTopNodeLgTrkObj tables.')
mscRtgTopNodeLgTrkObjOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10), )
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** Rtg Top Node/<neighborNodeName> LinkGroup/ <neighborNodeName> Trunk/<Trm Lk Id> Operational This group contains the operational data stored and maintained by TplPorTrunk component.')
mscRtgTopNodeLgTrkObjOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgTrkObjIndex"))
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjOperEntry.setDescription('An entry in the mscRtgTopNodeLgTrkObjOperTable.')
mscRtgTopNodeLgTrkObjMaxReservableBwOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjMaxReservableBwOut.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjMaxReservableBwOut.setDescription('This attribute displays trunk bandwidth which can be used for reservations on behalf of connections requiring path oriented routing. This bandwidth is displayed in bit/s and has been calculated by concerned trunk path administrator from the trunk bandwidth and from the percentage of trunk bandwidth provisioned for reservations by PORS.')
mscRtgTopNodeLgTrkObjTrunkCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjTrunkCost.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjTrunkCost.setDescription('This attribute displays trunk cost metric provisioned as trunkCost attribute of a concerned trunk path administrator.')
mscRtgTopNodeLgTrkObjTrunkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjTrunkDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjTrunkDelay.setDescription('This attribute displays one-directional trunk delay measured by trunk during staging. This is half (rounded down to an integer) of delay displayable by attribute of ID aTrmLinkDelay_c.')
mscRtgTopNodeLgTrkObjTrunkSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjTrunkSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjTrunkSecurity.setDescription('This attribute displays trunk security metric provisioned as trunkSecurity attribute of a concerned trunk path administrator.')
mscRtgTopNodeLgTrkObjSupportedTrafficTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjSupportedTrafficTypes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjSupportedTrafficTypes.setDescription('This attribute indicates the type of traffic that can be transmitted on the trunk. There are eight(8) possible traffic types, and the trunk can transmit all of them if desired. The voice, data and video traffic types are defined, and five(5) other traffic types can be defined in concerned trunk path administrator. This attribute is used in the route selection process to limit the route to trunks that support the traffic to be carried by the path. Description of bits: voice(0) data(1) video(2) trafficType1(3) trafficType2(4) trafficType3(5) trafficType4(6) trafficType5(7)')
mscRtgTopNodeLgTrkObjTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("terrestrial", 0), ("satellite", 1), ("trunkType1", 2), ("trunkType2", 3), ("trunkType3", 4), ("trunkType4", 5), ("trunkType5", 6), ("trunkType6", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjTrunkType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjTrunkType.setDescription('This attribute lists the type of the trunk. There can be up to eight(8) types of trunks. The terrestrial and satellite trunk types have been defined, leaving six(6) remaining types that can be defined by the network administration. The set of allowed trunk types for a path is indicated in the permittedTrunkType attribute of the PLC. When selecting a route, PORS only chooses trunks whose PA trunkType are in the permittedTrunkTypes set of the path.')
mscRtgTopNodeLgTrkObjCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjCustomerParameter.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjCustomerParameter.setDescription('This attribute indicates the customer defined parameter for the trunk. Its value, a number from zero(0) to seven(7), is chosen by a network administration to have a meaning specific to their network, thus allowing them to customize the use of their trunks. A complementary PLC attribute, requiredCustomerParameter, also has a value from zero(0) to seven(7). The Route Selector does not consider trunks whose PA customerParameter is greater than the requiredCustomParameter of the path.')
mscRtgTopNodeLgTrkObjFarEndTrmLkInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjFarEndTrmLkInstance.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjFarEndTrmLkInstance.setDescription('This attribute indicates identification of the corresponding trunk providing the reverse direction of transmission.')
mscRtgTopNodeLgTrkObjUnresTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 234), )
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This attribute displays a table. In the first row there are setup priorities. In the second row there are numerators of parts of unreserved bandwidth corresponding to setup priority 0 (first column) through 4 (fifth column). The denominator is 255.')
mscRtgTopNodeLgTrkObjUnresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 234, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgTrkObjIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgTrkObjUnresSetupPriorityIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgTopNodeLgTrkObjUnresUnreservedBwPartsIndex"))
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresEntry.setDescription('An entry in the mscRtgTopNodeLgTrkObjUnresTable.')
mscRtgTopNodeLgTrkObjUnresSetupPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 234, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("bwPartOver255", 0))))
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresSetupPriorityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresSetupPriorityIndex.setDescription('This variable represents the next to last index for the mscRtgTopNodeLgTrkObjUnresTable.')
mscRtgTopNodeLgTrkObjUnresUnreservedBwPartsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 234, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresUnreservedBwPartsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresUnreservedBwPartsIndex.setDescription('This variable represents the final index for the mscRtgTopNodeLgTrkObjUnresTable.')
mscRtgTopNodeLgTrkObjUnresValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 5, 2, 2, 2, 234, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgTopNodeLgTrkObjUnresValue.setDescription('This variable represents an individual value for the mscRtgTopNodeLgTrkObjUnresTable.')
mscTrm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41))
mscTrmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 1), )
if mibBuilder.loadTexts: mscTrmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmRowStatusTable.setDescription('This entry controls the addition and deletion of mscTrm components.')
mscTrmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"))
if mibBuilder.loadTexts: mscTrmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmRowStatusEntry.setDescription('A single entry in the table represents a single mscTrm component.')
mscTrmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscTrm components. These components cannot be added nor deleted.')
mscTrmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscTrmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmStorageType.setDescription('This variable represents the storage type value for the mscTrm tables.')
mscTrmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTrmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmIndex.setDescription('This variable represents the index for the mscTrm tables.')
mscTrmLk = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2))
mscTrmLkRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 1), )
if mibBuilder.loadTexts: mscTrmLkRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscTrmLk components.')
mscTrmLkRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLkIndex"))
if mibBuilder.loadTexts: mscTrmLkRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkRowStatusEntry.setDescription('A single entry in the table represents a single mscTrmLk component.')
mscTrmLkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscTrmLk components. These components cannot be added nor deleted.')
mscTrmLkComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscTrmLkStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkStorageType.setDescription('This variable represents the storage type value for the mscTrmLk tables.')
mscTrmLkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)))
if mibBuilder.loadTexts: mscTrmLkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkIndex.setDescription('This variable represents the index for the mscTrmLk tables.')
mscTrmLkOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 10), )
if mibBuilder.loadTexts: mscTrmLkOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** Trm Lk/<n> Operational This group of attributes is used to list links. These links are all registered with Transport Resource Manager. They have a status which reflects the current view of the link.')
mscTrmLkOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLkIndex"))
if mibBuilder.loadTexts: mscTrmLkOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkOperEntry.setDescription('An entry in the mscTrmLkOperTable.')
mscTrmLkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("joining", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkStatus.setDescription('This attribute indicates if the inactive link is disabled, joining, waiting to join, or in standby mode. inactive - The link is known to TRM but is not active. This can mean that it is disabled, or has not yet started to join. joining - The link has requested to join the routing systems. online- The link is active and has joined one or more routing systems.')
mscTrmLkThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 10, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 640000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkThroughput.setDescription("This attribute indicates the throughput of the link in kbit/s. This value represents a nominal bandwidth available for connectionless traffic, after the maximum reserved for path-oriented traffic has been subtracted from trunk bandwidth. If a trunk speed override is specified, it is used instead. The 'throughput' value can be exceeded by connectionless traffic whenever path-oriented traffic is not using it's reserved bandwidth.")
mscTrmLkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkDelay.setStatus('obsolete')
if mibBuilder.loadTexts: mscTrmLkDelay.setDescription('This is the round trip delay of the link in milliseconds. This value represents a nominal delay for connectionless traffic. Connectionless traffic is biased away from trunks carrying path- oriented traffic by increasing this value. The value of this attribute is a function of the percentage of reserved path-oriented bandwidth and takes a maximum value of 1500 msec for 100% path-oriented trunks. If an override delay is specified, it will be used instead.')
mscTrmLkMaxTxUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkMaxTxUnit.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkMaxTxUnit.setDescription('This attribute indicates the maximum data unit in bytes of this link. It represents the maximum frame length (including user data and routing headers) that can be sent on the link.')
mscTrmLkLinkComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 10, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkLinkComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkLinkComponentName.setDescription("This attribute indicates the link's component name. A link is either a trunk or a gateway to another module. The component name may be used to obtain additional information from the link system.")
mscTrmLkDelayUsec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 10, 1, 6), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(10, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkDelayUsec.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkDelayUsec.setDescription('This attribute indicates the round trip delay of the link in milliseconds. This value represents a nominal delay for connectionless traffic. Connectionless traffic is biased away from trunks carrying path-oriented traffic by increasing this value. The value of this attribute is a function of the percentage of reserved path-oriented bandwidth and takes a maximum value of 1500 msec for 100% path-oriented trunks. If a delay override is specified, it will be used instead.')
mscTrmLkFwdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 11), )
if mibBuilder.loadTexts: mscTrmLkFwdStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkFwdStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group of attributes is used to display egress statistics collected by packet forwarding on this link. The statistics can be used to monitor congestion conditions and packet discards on a link.')
mscTrmLkFwdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLkIndex"))
if mibBuilder.loadTexts: mscTrmLkFwdStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkFwdStatsEntry.setDescription('An entry in the mscTrmLkFwdStatsTable.')
mscTrmLkFciSet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkFciSet.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkFciSet.setDescription('This attribute counts the packets whose FCI bits are set by packet forwarding due to congestion on this link, and when the forwardingPolicy attribute of Routing DpnAddressPlan is set to loadshare or loadspread. This counter wraps around to zero when the maximum value is reached.')
mscTrmLkOverflowAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkOverflowAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkOverflowAttempts.setDescription('This attribute counts the number of times DPRS packet forwarding attempts to overflow packets to another link in a link group due to congestion on this link. It is used only when the attribute forwardingPolicy in component rtg dpn is set to the value loadspreading. This counter wraps around to zero when the maximum value is reached.')
mscTrmLkPathOverflowAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkPathOverflowAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkPathOverflowAttempts.setDescription('This attribute counts the number of times DPRS packet forwarding attempts to overflow packets to another link group due to congestion on the link group of this link. This counter wraps around to zero when the maximum value is reached.')
mscTrmLkDiscardCongestedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 280), )
if mibBuilder.loadTexts: mscTrmLkDiscardCongestedTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkDiscardCongestedTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This attribute counts the packets that have been discarded by packet forwarding due to congestion on this link and when the forwardingPolicy attribute of Routing DpnAddressPlan is set to loadshare or loadspread. This attribute is a vector with three entries. Each entry corresponds to a discard priority of the packet. The first entry represents the discard count of packets with discard priority 1, the second entry discard priority 2, and the third entry discard priority 3. Each entry (counter) wraps around to zero when the maximum value is reached.')
mscTrmLkDiscardCongestedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 280, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLkIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLkDiscardCongestedIndex"))
if mibBuilder.loadTexts: mscTrmLkDiscardCongestedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkDiscardCongestedEntry.setDescription('An entry in the mscTrmLkDiscardCongestedTable.')
mscTrmLkDiscardCongestedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 280, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discardPriority1", 0), ("discardPriority2", 1), ("discardPriority3", 2))))
if mibBuilder.loadTexts: mscTrmLkDiscardCongestedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkDiscardCongestedIndex.setDescription('This variable represents the mscTrmLkDiscardCongestedTable specific index for the mscTrmLkDiscardCongestedTable.')
mscTrmLkDiscardCongestedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 2, 280, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLkDiscardCongestedValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLkDiscardCongestedValue.setDescription('This variable represents an individual value for the mscTrmLkDiscardCongestedTable.')
mscTrmLg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3))
mscTrmLgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 1), )
if mibBuilder.loadTexts: mscTrmLgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscTrmLg components.')
mscTrmLgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgIndex"))
if mibBuilder.loadTexts: mscTrmLgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgRowStatusEntry.setDescription('A single entry in the table represents a single mscTrmLg component.')
mscTrmLgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscTrmLg components. These components cannot be added nor deleted.')
mscTrmLgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscTrmLgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgStorageType.setDescription('This variable represents the storage type value for the mscTrmLg tables.')
mscTrmLgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 12)))
if mibBuilder.loadTexts: mscTrmLgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgIndex.setDescription('This variable represents the index for the mscTrmLg tables.')
mscTrmLgLk = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2))
mscTrmLgLkRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 1), )
if mibBuilder.loadTexts: mscTrmLgLkRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscTrmLgLk components.')
mscTrmLgLkRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgLkIndex"))
if mibBuilder.loadTexts: mscTrmLgLkRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkRowStatusEntry.setDescription('A single entry in the table represents a single mscTrmLgLk component.')
mscTrmLgLkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscTrmLgLk components. These components cannot be added nor deleted.')
mscTrmLgLkComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscTrmLgLkStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkStorageType.setDescription('This variable represents the storage type value for the mscTrmLgLk tables.')
mscTrmLgLkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)))
if mibBuilder.loadTexts: mscTrmLgLkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkIndex.setDescription('This variable represents the index for the mscTrmLgLk tables.')
mscTrmLgLkOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 10), )
if mibBuilder.loadTexts: mscTrmLgLkOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** Trm Lk/<n> Operational This group of attributes is used to list links. These links are all registered with Transport Resource Manager. They have a status which reflects the current view of the link.')
mscTrmLgLkOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgLkIndex"))
if mibBuilder.loadTexts: mscTrmLgLkOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkOperEntry.setDescription('An entry in the mscTrmLgLkOperTable.')
mscTrmLgLkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("joining", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkStatus.setDescription('This attribute indicates if the inactive link is disabled, joining, waiting to join, or in standby mode. inactive - The link is known to TRM but is not active. This can mean that it is disabled, or has not yet started to join. joining - The link has requested to join the routing systems. online- The link is active and has joined one or more routing systems.')
mscTrmLgLkThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 10, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 640000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkThroughput.setDescription("This attribute indicates the throughput of the link in kbit/s. This value represents a nominal bandwidth available for connectionless traffic, after the maximum reserved for path-oriented traffic has been subtracted from trunk bandwidth. If a trunk speed override is specified, it is used instead. The 'throughput' value can be exceeded by connectionless traffic whenever path-oriented traffic is not using it's reserved bandwidth.")
mscTrmLgLkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkDelay.setStatus('obsolete')
if mibBuilder.loadTexts: mscTrmLgLkDelay.setDescription('This is the round trip delay of the link in milliseconds. This value represents a nominal delay for connectionless traffic. Connectionless traffic is biased away from trunks carrying path- oriented traffic by increasing this value. The value of this attribute is a function of the percentage of reserved path-oriented bandwidth and takes a maximum value of 1500 msec for 100% path-oriented trunks. If an override delay is specified, it will be used instead.')
mscTrmLgLkMaxTxUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkMaxTxUnit.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkMaxTxUnit.setDescription('This attribute indicates the maximum data unit in bytes of this link. It represents the maximum frame length (including user data and routing headers) that can be sent on the link.')
mscTrmLgLkLinkComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 10, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkLinkComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkLinkComponentName.setDescription("This attribute indicates the link's component name. A link is either a trunk or a gateway to another module. The component name may be used to obtain additional information from the link system.")
mscTrmLgLkDelayUsec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 10, 1, 6), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(10, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkDelayUsec.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkDelayUsec.setDescription('This attribute indicates the round trip delay of the link in milliseconds. This value represents a nominal delay for connectionless traffic. Connectionless traffic is biased away from trunks carrying path-oriented traffic by increasing this value. The value of this attribute is a function of the percentage of reserved path-oriented bandwidth and takes a maximum value of 1500 msec for 100% path-oriented trunks. If a delay override is specified, it will be used instead.')
mscTrmLgLkFwdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 11), )
if mibBuilder.loadTexts: mscTrmLgLkFwdStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkFwdStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group of attributes is used to display egress statistics collected by packet forwarding on this link. The statistics can be used to monitor congestion conditions and packet discards on a link.')
mscTrmLgLkFwdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgLkIndex"))
if mibBuilder.loadTexts: mscTrmLgLkFwdStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkFwdStatsEntry.setDescription('An entry in the mscTrmLgLkFwdStatsTable.')
mscTrmLgLkFciSet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkFciSet.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkFciSet.setDescription('This attribute counts the packets whose FCI bits are set by packet forwarding due to congestion on this link, and when the forwardingPolicy attribute of Routing DpnAddressPlan is set to loadshare or loadspread. This counter wraps around to zero when the maximum value is reached.')
mscTrmLgLkOverflowAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkOverflowAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkOverflowAttempts.setDescription('This attribute counts the number of times DPRS packet forwarding attempts to overflow packets to another link in a link group due to congestion on this link. It is used only when the attribute forwardingPolicy in component rtg dpn is set to the value loadspreading. This counter wraps around to zero when the maximum value is reached.')
mscTrmLgLkPathOverflowAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkPathOverflowAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkPathOverflowAttempts.setDescription('This attribute counts the number of times DPRS packet forwarding attempts to overflow packets to another link group due to congestion on the link group of this link. This counter wraps around to zero when the maximum value is reached.')
mscTrmLgLkDiscardCongestedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 280), )
if mibBuilder.loadTexts: mscTrmLgLkDiscardCongestedTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkDiscardCongestedTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This attribute counts the packets that have been discarded by packet forwarding due to congestion on this link and when the forwardingPolicy attribute of Routing DpnAddressPlan is set to loadshare or loadspread. This attribute is a vector with three entries. Each entry corresponds to a discard priority of the packet. The first entry represents the discard count of packets with discard priority 1, the second entry discard priority 2, and the third entry discard priority 3. Each entry (counter) wraps around to zero when the maximum value is reached.')
mscTrmLgLkDiscardCongestedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 280, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgLkIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgLkDiscardCongestedIndex"))
if mibBuilder.loadTexts: mscTrmLgLkDiscardCongestedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkDiscardCongestedEntry.setDescription('An entry in the mscTrmLgLkDiscardCongestedTable.')
mscTrmLgLkDiscardCongestedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 280, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discardPriority1", 0), ("discardPriority2", 1), ("discardPriority3", 2))))
if mibBuilder.loadTexts: mscTrmLgLkDiscardCongestedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkDiscardCongestedIndex.setDescription('This variable represents the mscTrmLgLkDiscardCongestedTable specific index for the mscTrmLgLkDiscardCongestedTable.')
mscTrmLgLkDiscardCongestedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 2, 280, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLkDiscardCongestedValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLkDiscardCongestedValue.setDescription('This variable represents an individual value for the mscTrmLgLkDiscardCongestedTable.')
mscTrmLgLNN = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3))
mscTrmLgLNNRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 1), )
if mibBuilder.loadTexts: mscTrmLgLNNRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscTrmLgLNN components.')
mscTrmLgLNNRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgLNNIndex"))
if mibBuilder.loadTexts: mscTrmLgLNNRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNRowStatusEntry.setDescription('A single entry in the table represents a single mscTrmLgLNN component.')
mscTrmLgLNNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLNNRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscTrmLgLNN components. These components cannot be added nor deleted.')
mscTrmLgLNNComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLNNComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscTrmLgLNNStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLNNStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNStorageType.setDescription('This variable represents the storage type value for the mscTrmLgLNN tables.')
mscTrmLgLNNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047)))
if mibBuilder.loadTexts: mscTrmLgLNNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNIndex.setDescription('This variable represents the index for the mscTrmLgLNN tables.')
mscTrmLgLNNOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 10), )
if mibBuilder.loadTexts: mscTrmLgLNNOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** Trm Lg/<neighborNodeName> LNN/<logical network number> Operational This group of attributes is the information associated with an address plan.')
mscTrmLgLNNOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscTrmLgLNNIndex"))
if mibBuilder.loadTexts: mscTrmLgLNNOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNOperEntry.setDescription('An entry in the mscTrmLgLNNOperTable.')
mscTrmLgLNNLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("trunk", 0), ("internalGateway", 1), ("externalGateway", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLNNLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNLinkType.setDescription('This attribute indicates how the LNN is transported over the link group. It can be one of three types: trunk - the LNN is supported by Topology over a Passport to Passport link internal gateway - the LNN is supported by an address plan (but not Topology) over a Passport to Passport link external gateway - the LNN is supported by an address plan (but not Topology) over a Passport to non-Passport link')
mscTrmLgLNNAddressPlanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 41, 3, 3, 10, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTrmLgLNNAddressPlanComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscTrmLgLNNAddressPlanComponentName.setDescription('This attribute indicates the component name of the address plan which owns the logical network number of this component.')
mscNpi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43))
mscNpiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 1), )
if mibBuilder.loadTexts: mscNpiRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiRowStatusTable.setDescription('This entry controls the addition and deletion of mscNpi components.')
mscNpiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscNpiIndex"))
if mibBuilder.loadTexts: mscNpiRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiRowStatusEntry.setDescription('A single entry in the table represents a single mscNpi component.')
mscNpiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNpiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNpi components. These components cannot be added nor deleted.')
mscNpiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNpiComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNpiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNpiStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiStorageType.setDescription('This variable represents the storage type value for the mscNpi tables.')
mscNpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))))
if mibBuilder.loadTexts: mscNpiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiIndex.setDescription('This variable represents the index for the mscNpi tables.')
mscNpiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 10), )
if mibBuilder.loadTexts: mscNpiStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiStatsTable.setDescription('Npi/<x121,e164> Statistics This group of attributes contains the statistics kept for a particular numbering plan indicator. The only statistic present is the total number of DNAs provisioned for the numbering plan.')
mscNpiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscNpiIndex"))
if mibBuilder.loadTexts: mscNpiStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiStatsEntry.setDescription('An entry in the mscNpiStatsTable.')
mscNpiTotalDnas = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNpiTotalDnas.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiTotalDnas.setDescription('This attribute holds the total number of Dnas that are in the numbering plan. If this attribute is displayed in provisioning mode, the number includes the Dnas that have been added/deleted in that provisioning session, otherwise the number only includes the Dnas that have been activated.')
mscNpiDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2))
mscNpiDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 1), )
if mibBuilder.loadTexts: mscNpiDnaRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscNpiDna components.')
mscNpiDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscNpiIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscNpiDnaIndex"))
if mibBuilder.loadTexts: mscNpiDnaRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaRowStatusEntry.setDescription('A single entry in the table represents a single mscNpiDna component.')
mscNpiDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNpiDnaRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNpiDna components. These components cannot be added nor deleted.')
mscNpiDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNpiDnaComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNpiDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNpiDnaStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaStorageType.setDescription('This variable represents the storage type value for the mscNpiDna tables.')
mscNpiDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 1, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: mscNpiDnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaIndex.setDescription('This variable represents the index for the mscNpiDna tables.')
mscNpiDnaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 10), )
if mibBuilder.loadTexts: mscNpiDnaInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaInfoTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** Npi/<x121,e164> Dna/<BCD(1..15)> Information This group of attributes contains the attributes for a DNA in the numbering plan.')
mscNpiDnaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscNpiIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscNpiDnaIndex"))
if mibBuilder.loadTexts: mscNpiDnaInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaInfoEntry.setDescription('An entry in the mscNpiDnaInfoTable.')
mscNpiDnaDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 43, 2, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNpiDnaDestinationName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNpiDnaDestinationName.setDescription('This attribute holds the Component Name of the application to which the DNA belongs.')
baseRoutingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18, 1))
baseRoutingGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18, 1, 1))
baseRoutingGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18, 1, 1, 3))
baseRoutingGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18, 1, 1, 3, 2))
baseRoutingCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18, 3))
baseRoutingCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18, 3, 1))
baseRoutingCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18, 3, 1, 3))
baseRoutingCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 18, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-BaseRoutingMIB", mscTrmLgRowStatus=mscTrmLgRowStatus, mscNpiDnaRowStatus=mscNpiDnaRowStatus, mscTrmLgLk=mscTrmLgLk, mscTrmStorageType=mscTrmStorageType, mscRtgTopNodeLgTrkObjRowStatus=mscRtgTopNodeLgTrkObjRowStatus, mscRtgTopStatsEntry=mscRtgTopStatsEntry, mscRtgTopNodeLgTputMetric=mscRtgTopNodeLgTputMetric, mscTrmLkDiscardCongestedEntry=mscTrmLkDiscardCongestedEntry, mscRtgTopNodeLgLnnEntry=mscRtgTopNodeLgLnnEntry, mscRtgTopNodeLgTrkObjRowStatusTable=mscRtgTopNodeLgTrkObjRowStatusTable, mscTrmLgLkPathOverflowAttempts=mscTrmLgLkPathOverflowAttempts, mscRtgTopRowStatus=mscRtgTopRowStatus, mscRtgTopNodeLgRowStatusEntry=mscRtgTopNodeLgRowStatusEntry, mscRtgProvTable=mscRtgProvTable, mscNpiStorageType=mscNpiStorageType, mscRtgTopNodeNodeId=mscRtgTopNodeNodeId, mscTrmLgLNNOperEntry=mscTrmLgLNNOperEntry, mscNpiDnaIndex=mscNpiDnaIndex, mscTrmLgLkDelay=mscTrmLgLkDelay, mscTrmLgLNNRowStatusEntry=mscTrmLgLNNRowStatusEntry, mscRtgTopNodeLgComponentName=mscRtgTopNodeLgComponentName, mscRtgTopRowStatusEntry=mscRtgTopRowStatusEntry, mscTrmLkFwdStatsEntry=mscTrmLkFwdStatsEntry, mscTrmLgRowStatusTable=mscTrmLgRowStatusTable, baseRoutingCapabilities=baseRoutingCapabilities, mscRtgRowStatusEntry=mscRtgRowStatusEntry, baseRoutingCapabilitiesCA02A=baseRoutingCapabilitiesCA02A, mscRtgProvEntry=mscRtgProvEntry, mscTrmLkOperTable=mscTrmLkOperTable, mscRtgTopControlBytesTx=mscRtgTopControlBytesTx, mscTrmLgRowStatusEntry=mscTrmLgRowStatusEntry, mscRtgSplittingRegionIdsTable=mscRtgSplittingRegionIdsTable, mscRtgTopNodeRowStatus=mscRtgTopNodeRowStatus, mscNpiStatsEntry=mscNpiStatsEntry, mscTrmLgLkOperTable=mscTrmLgLkOperTable, mscNpiComponentName=mscNpiComponentName, mscTrmLkDelayUsec=mscTrmLkDelayUsec, baseRoutingMIB=baseRoutingMIB, mscTrmLgLkStatus=mscTrmLgLkStatus, mscTrmLgLNNOperTable=mscTrmLgLNNOperTable, mscTrmLkRowStatus=mscTrmLkRowStatus, mscRtgIndex=mscRtgIndex, mscTrmLgLkOperEntry=mscTrmLgLkOperEntry, mscTrmLgLkMaxTxUnit=mscTrmLgLkMaxTxUnit, mscTrmLkOverflowAttempts=mscTrmLkOverflowAttempts, mscTrmRowStatus=mscTrmRowStatus, mscTrmLgLkDiscardCongestedIndex=mscTrmLgLkDiscardCongestedIndex, mscRtgTop=mscRtgTop, mscTrmRowStatusTable=mscTrmRowStatusTable, mscTrmLkDelay=mscTrmLkDelay, mscTrmLkPathOverflowAttempts=mscTrmLkPathOverflowAttempts, mscNpiDnaStorageType=mscNpiDnaStorageType, mscTrmLgLkComponentName=mscTrmLgLkComponentName, mscTrmLkStorageType=mscTrmLkStorageType, mscTrmLgLkIndex=mscTrmLgLkIndex, mscRtgTopNodeLgTrkObj=mscRtgTopNodeLgTrkObj, mscNpiDnaRowStatusEntry=mscNpiDnaRowStatusEntry, mscTrmLgComponentName=mscTrmLgComponentName, mscRtgTopNodeLgLnnValue=mscRtgTopNodeLgLnnValue, mscNpiTotalDnas=mscNpiTotalDnas, mscRtgTopStorageType=mscRtgTopStorageType, mscTrmLgLkThroughput=mscTrmLgLkThroughput, mscRtgTopNodeLgTrkObjOperEntry=mscRtgTopNodeLgTrkObjOperEntry, mscRtgTopNodeLgTrkObjTrunkType=mscRtgTopNodeLgTrkObjTrunkType, mscRtgTopNodeLgOperTable=mscRtgTopNodeLgOperTable, mscRtgTopRowStatusTable=mscRtgTopRowStatusTable, mscRtgRowStatus=mscRtgRowStatus, mscTrmLgLNN=mscTrmLgLNN, mscNpiDnaComponentName=mscNpiDnaComponentName, mscRtgTopNodeRowStatusEntry=mscRtgTopNodeRowStatusEntry, baseRoutingCapabilitiesCA02=baseRoutingCapabilitiesCA02, mscRtgTopNodeLgTrkObjMaxReservableBwOut=mscRtgTopNodeLgTrkObjMaxReservableBwOut, mscNpi=mscNpi, mscRtgTopNodeLgTrkObjCustomerParameter=mscRtgTopNodeLgTrkObjCustomerParameter, mscRtgTopNodeLgTrkObjOperTable=mscRtgTopNodeLgTrkObjOperTable, mscTrmLgLkDiscardCongestedTable=mscTrmLgLkDiscardCongestedTable, mscTrmLgLNNIndex=mscTrmLgLNNIndex, mscTrmLg=mscTrmLg, mscRtgStorageType=mscRtgStorageType, mscRtgTopNodeLgTrkObjUnresValue=mscRtgTopNodeLgTrkObjUnresValue, mscRtgSplittingRegionIdsValue=mscRtgSplittingRegionIdsValue, mscTrmLgLkFwdStatsEntry=mscTrmLgLkFwdStatsEntry, mscTrmLkComponentName=mscTrmLkComponentName, mscRtgTopNodeLgTrkObjTrunkDelay=mscRtgTopNodeLgTrkObjTrunkDelay, mscRtgComponentName=mscRtgComponentName, mscRtgTopNodeLgTrkObjFarEndTrmLkInstance=mscRtgTopNodeLgTrkObjFarEndTrmLkInstance, mscNpiDnaDestinationName=mscNpiDnaDestinationName, mscTrmLgIndex=mscTrmLgIndex, mscTrmRowStatusEntry=mscTrmRowStatusEntry, mscRtgTopNodeLgLnnTable=mscRtgTopNodeLgLnnTable, mscRtgTopNodeLgTrkObjUnresTable=mscRtgTopNodeLgTrkObjUnresTable, mscNpiRowStatusTable=mscNpiRowStatusTable, mscRtgTopNodeLgIndex=mscRtgTopNodeLgIndex, mscTrmLgLkDelayUsec=mscTrmLgLkDelayUsec, mscTrmLgLkOverflowAttempts=mscTrmLgLkOverflowAttempts, mscRtgSplittingRegionIdsRowStatus=mscRtgSplittingRegionIdsRowStatus, mscTrmLkMaxTxUnit=mscTrmLkMaxTxUnit, baseRoutingGroupCA=baseRoutingGroupCA, mscRtgTopNodeLgTrkObjIndex=mscRtgTopNodeLgTrkObjIndex, mscNpiRowStatusEntry=mscNpiRowStatusEntry, mscRtgSplittingRegionIdsEntry=mscRtgSplittingRegionIdsEntry, mscTrmLgLkRowStatusTable=mscTrmLgLkRowStatusTable, mscTrmLgLNNStorageType=mscTrmLgLNNStorageType, mscTrmLkOperEntry=mscTrmLkOperEntry, mscNpiStatsTable=mscNpiStatsTable, mscTrm=mscTrm, mscTrmLkFciSet=mscTrmLkFciSet, mscRtgTopStatsTable=mscRtgTopStatsTable, baseRoutingGroupCA02A=baseRoutingGroupCA02A, mscRtgTopNodeLgTrkObjComponentName=mscRtgTopNodeLgTrkObjComponentName, mscNpiRowStatus=mscNpiRowStatus, mscRtgTopIndex=mscRtgTopIndex, mscRtgTopNodeRowStatusTable=mscRtgTopNodeRowStatusTable, mscTrmComponentName=mscTrmComponentName, mscNpiDnaInfoTable=mscNpiDnaInfoTable, mscTrmLkRowStatusTable=mscTrmLkRowStatusTable, baseRoutingGroupCA02=baseRoutingGroupCA02, mscTrmLk=mscTrmLk, mscTrmLgLkRowStatusEntry=mscTrmLgLkRowStatusEntry, mscTrmLkThroughput=mscTrmLkThroughput, mscTrmLkIndex=mscTrmLkIndex, mscTrmLgLNNRowStatusTable=mscTrmLgLNNRowStatusTable, mscTrmLgLkLinkComponentName=mscTrmLgLkLinkComponentName, mscRtgTandemTraffic=mscRtgTandemTraffic, mscRtgTopNodeLgTrkObjUnresUnreservedBwPartsIndex=mscRtgTopNodeLgTrkObjUnresUnreservedBwPartsIndex, mscRtgTopNodeLgRowStatus=mscRtgTopNodeLgRowStatus, mscTrmLkDiscardCongestedTable=mscTrmLkDiscardCongestedTable, mscRtgTopNodeStorageType=mscRtgTopNodeStorageType, mscNpiDnaInfoEntry=mscNpiDnaInfoEntry, mscRtgTopNodeIndex=mscRtgTopNodeIndex, mscTrmLgLkRowStatus=mscTrmLgLkRowStatus, mscTrmLkLinkComponentName=mscTrmLkLinkComponentName, mscRtgTopNodeLgTrkObjUnresEntry=mscRtgTopNodeLgTrkObjUnresEntry, mscTrmLkDiscardCongestedValue=mscTrmLkDiscardCongestedValue, mscTrmLgLkDiscardCongestedEntry=mscTrmLgLkDiscardCongestedEntry, mscTrmLgLkFciSet=mscTrmLgLkFciSet, mscRtgRowStatusTable=mscRtgRowStatusTable, mscRtgTopControlPktTx=mscRtgTopControlPktTx, mscRtgTopNodeLgStorageType=mscRtgTopNodeLgStorageType, baseRoutingGroup=baseRoutingGroup, mscRtg=mscRtg, mscTrmIndex=mscTrmIndex, mscTrmLgLNNComponentName=mscTrmLgLNNComponentName, mscRtgTopNodeLgOperEntry=mscRtgTopNodeLgOperEntry, baseRoutingCapabilitiesCA=baseRoutingCapabilitiesCA, mscNpiDnaRowStatusTable=mscNpiDnaRowStatusTable, mscRtgTopNodeLgTrkObjRowStatusEntry=mscRtgTopNodeLgTrkObjRowStatusEntry, mscTrmLgLNNLinkType=mscTrmLgLNNLinkType, mscTrmLkRowStatusEntry=mscTrmLkRowStatusEntry, mscRtgTopNode=mscRtgTopNode, mscRtgTopNodeComponentName=mscRtgTopNodeComponentName, mscRtgTopNodeLgTrkObjSupportedTrafficTypes=mscRtgTopNodeLgTrkObjSupportedTrafficTypes, mscRtgTopNodeLgTrkObjUnresSetupPriorityIndex=mscRtgTopNodeLgTrkObjUnresSetupPriorityIndex, mscRtgTopNodeLg=mscRtgTopNodeLg, mscTrmLkFwdStatsTable=mscTrmLkFwdStatsTable, mscTrmLgStorageType=mscTrmLgStorageType, mscTrmLgLNNRowStatus=mscTrmLgLNNRowStatus, mscRtgTopNodeLgTrkObjStorageType=mscRtgTopNodeLgTrkObjStorageType, mscTrmLgLkFwdStatsTable=mscTrmLgLkFwdStatsTable, mscNpiDna=mscNpiDna, mscRtgTopNodeLgDelayMetric=mscRtgTopNodeLgDelayMetric, mscRtgTopNodeOperTable=mscRtgTopNodeOperTable, mscTrmLgLkDiscardCongestedValue=mscTrmLgLkDiscardCongestedValue, mscRtgTopNodeOperEntry=mscRtgTopNodeOperEntry, mscTrmLkDiscardCongestedIndex=mscTrmLkDiscardCongestedIndex, mscRtgTopNodeLgTrkObjTrunkCost=mscRtgTopNodeLgTrkObjTrunkCost, mscRtgTopControlPktRx=mscRtgTopControlPktRx, mscTrmLgLkStorageType=mscTrmLgLkStorageType, mscNpiIndex=mscNpiIndex, mscRtgTopNodeLgRowStatusTable=mscRtgTopNodeLgRowStatusTable, mscRtgTopNodeLgTrkObjTrunkSecurity=mscRtgTopNodeLgTrkObjTrunkSecurity, mscTrmLgLNNAddressPlanComponentName=mscTrmLgLNNAddressPlanComponentName, mscRtgTopControlBytesRx=mscRtgTopControlBytesRx, mscTrmLkStatus=mscTrmLkStatus, mscRtgTopComponentName=mscRtgTopComponentName)
