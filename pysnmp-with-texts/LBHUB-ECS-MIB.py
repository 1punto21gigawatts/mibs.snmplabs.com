#
# PySNMP MIB module LBHUB-ECS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LBHUB-ECS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:05:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, ObjectIdentity, NotificationType, iso, Gauge32, Unsigned32, enterprises, TimeTicks, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, NotificationType, MibIdentifier, mgmt = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "iso", "Gauge32", "Unsigned32", "enterprises", "TimeTicks", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "NotificationType", "MibIdentifier", "mgmt")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

system = MibIdentifier((1, 3, 6, 1, 2, 1, 1))
interfaces = MibIdentifier((1, 3, 6, 1, 2, 1, 2))
at = MibIdentifier((1, 3, 6, 1, 2, 1, 3))
ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
tcp = MibIdentifier((1, 3, 6, 1, 2, 1, 6))
udp = MibIdentifier((1, 3, 6, 1, 2, 1, 7))
egp = MibIdentifier((1, 3, 6, 1, 2, 1, 8))
transmission = MibIdentifier((1, 3, 6, 1, 2, 1, 10))
snmp = MibIdentifier((1, 3, 6, 1, 2, 1, 11))
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1))
terminalServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 1))
dedicatedBridgeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 2))
dedicatedRouteServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 3))
brouter = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 4))
genericMSWorkstation = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 5))
genericMSServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 6))
genericUnixServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 7))
hub = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8))
cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9))
linkBuilder3GH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 1))
linkBuilder10BTi = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 2))
linkBuilderECS = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 3))
linkBuilderMSH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 4))
linkBuilderFMS = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 5))
linkBuilderFMSLBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 10))
linkBuilderFMSII = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 7))
linkBuilder3GH_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 1)).setLabel("linkBuilder3GH-cards")
linkBuilder10BTi_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2)).setLabel("linkBuilder10BTi-cards")
linkBuilderECS_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 3)).setLabel("linkBuilderECS-cards")
linkBuilderMSH_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 4)).setLabel("linkBuilderMSH-cards")
linkBuilderFMS_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5)).setLabel("linkBuilderFMS-cards")
linkBuilderFMSII_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6)).setLabel("linkBuilderFMSII-cards")
linkBuilder10BTi_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2, 1)).setLabel("linkBuilder10BTi-cards-utp")
linkBuilder10BT_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2, 2)).setLabel("linkBuilder10BT-cards-utp")
linkBuilderFMS_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 1)).setLabel("linkBuilderFMS-cards-utp")
linkBuilderFMS_cards_coax = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 2)).setLabel("linkBuilderFMS-cards-coax")
linkBuilderFMS_cards_fiber = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 3)).setLabel("linkBuilderFMS-cards-fiber")
linkBuilderFMS_cards_12fiber = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 4)).setLabel("linkBuilderFMS-cards-12fiber")
linkBuilderFMS_cards_24utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 5)).setLabel("linkBuilderFMS-cards-24utp")
linkBuilderFMSII_cards_12tp_rj45 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 1)).setLabel("linkBuilderFMSII-cards-12tp-rj45")
linkBuilderFMSII_cards_10coax_bnc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 2)).setLabel("linkBuilderFMSII-cards-10coax-bnc")
linkBuilderFMSII_cards_6fiber_st = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 3)).setLabel("linkBuilderFMSII-cards-6fiber-st")
linkBuilderFMSII_cards_12fiber_st = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 4)).setLabel("linkBuilderFMSII-cards-12fiber-st")
linkBuilderFMSII_cards_24tp_rj45 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 5)).setLabel("linkBuilderFMSII-cards-24tp-rj45")
linkBuilderFMSII_cards_24tp_telco = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 6)).setLabel("linkBuilderFMSII-cards-24tp-telco")
amp_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 3)).setLabel("amp-mib")
genericTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 4))
viewBuilderApps = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 5))
specificTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 6))
linkBuilder3GH_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7)).setLabel("linkBuilder3GH-mib")
linkBuilder10BTi_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8)).setLabel("linkBuilder10BTi-mib")
linkBuilderECS_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9)).setLabel("linkBuilderECS-mib")
generic = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10))
genExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1))
setup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 2))
sysLoader = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 3))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 4))
gauges = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 5))
asciiAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 6))
serialIf = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 7))
repeaterMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8))
endStation = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 9))
localSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 10))
manager = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 11))
unusedGeneric12 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 12))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 14))
mrmResilience = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 15))
tokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 16))
multiRepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17))
bridgeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 18))
fault = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 19))
poll = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 20))
powerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 21))
testData = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1, 1))
ifExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1, 2))
netBuilder_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 11)).setLabel("netBuilder-mib")
lBridgeECS_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 12)).setLabel("lBridgeECS-mib")
deskMan_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 13)).setLabel("deskMan-mib")
linkBuilderMSH_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 14)).setLabel("linkBuilderMSH-mib")
ecsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 1))
ecsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 2))
ecsRLCResilientLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 3))
ecsSecureRepeaterLineCards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 4))
ecsRepeaterLineCard = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 5))
ecsRLCStationLocate = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 6))
ecsHubStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 8))
ecsVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 9))
lbecsXENDOFMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 255))
ecsAgentSystemIdentifier = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 1, 1))
ecsManufacturerId = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsManufacturerId.setStatus('deprecated')
if mibBuilder.loadTexts: ecsManufacturerId.setDescription('An atrribute to identify the manufacturer')
ecsManufacturerProductId = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsManufacturerProductId.setStatus('mandatory')
if mibBuilder.loadTexts: ecsManufacturerProductId.setDescription('An attribute to identify the product id.')
ecsSoftwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSoftwareVersionNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ecsSoftwareVersionNumber.setDescription('An atrribute to identify the software version.')
ecsHardwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHardwareVersionNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ecsHardwareVersionNumber.setDescription('An atrribute to identify the hardware version.')
ecsAgentSystemName = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentSystemName.setStatus('deprecated')
if mibBuilder.loadTexts: ecsAgentSystemName.setDescription('This is an informational string that could be used to show the name of the ECSAgent or management agent.')
ecsAgentSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentSystemLocation.setStatus('deprecated')
if mibBuilder.loadTexts: ecsAgentSystemLocation.setDescription('This is an informational string that could be used to show the physical location (i.e., area) of the ecsAgent or management agent.')
ecsAgentSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentSystemTime.setStatus('deprecated')
if mibBuilder.loadTexts: ecsAgentSystemTime.setDescription('A representation of the system time of the management system, taken from the epoch.')
ecsAgentStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentStatus.setDescription('Indicates that the management agent is on line and operating.')
ecsAgentAuthenticationStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentAuthenticationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentAuthenticationStatus.setDescription('Indicates whether management frames are checked against entries in the management tranmiter table.')
ecsAgentSecureManagementStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("secure-menu-entered", 3), ("secure-password-violation", 4), ("secure-config-update", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentSecureManagementStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentSecureManagementStatus.setDescription('Indicates whether the remote management of the security features of the ECS are enabled or not.')
ecsAgentFrontPanelSetupPassword = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelSetupPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentFrontPanelSetupPassword.setDescription('The password used to gain access to the configuration features of the front panel control of the device.')
ecsAgentFrontPanelDisplay = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentFrontPanelDisplay.setDescription('The string displayed on the front panel.')
ecsAgentFrontPanelPassword = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentFrontPanelPassword.setDescription('The password used to gain access to the front panel control of the device.')
ecsAgentFrontPanelSecurePassword = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelSecurePassword.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentFrontPanelSecurePassword.setDescription('The password used to gain access to the security features of the front panel control of the device. This attribute is not viewable until secure remote management is enabled.')
ecsAgentFrontPanelLock = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelLock.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentFrontPanelLock.setDescription('The station front panel status.')
ecsAgentResetDevice = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notreset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentResetDevice.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentResetDevice.setDescription('Network management module reset status. Writing a 2 to this object will reset the management agent.')
ecsAgentRestart = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notrestart", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentRestart.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentRestart.setDescription('Network management module restart status. Writing a 2 to his object will restart the management agent. This initializes all the counters, rereads the NVRAM data structure, and starts executing from the beginning of the code.')
ecsAgentDefaultConfig = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reverting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentDefaultConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentDefaultConfig.setDescription('The device is returned to its factory settings.')
ecsAgentManagementTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 1, 20), )
if mibBuilder.loadTexts: ecsAgentManagementTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentManagementTable.setDescription("This entity's management address table. (10 entries)")
ecsAgentManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 1, 20, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsAgentManagementAddr"))
if mibBuilder.loadTexts: ecsAgentManagementEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentManagementEntry.setDescription(' A source address address and privileges of a particular management station.')
ecsAgentManagementAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 20, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentManagementAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentManagementAddr.setDescription('IpAddress of the management station. ')
ecsAgentManagementAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("invalid", 1), ("off", 2), ("superread", 3), ("superreadwrite", 4), ("readonly", 5), ("readwrite", 6), ("readonlysecure", 7), ("readwritesecure", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentManagementAccess.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentManagementAccess.setDescription('Setting this object to the value invalid(1) invalidates the corresponding entry in the ecsAgentManagementTable. That is, it effectively disassociates the address identified with the entry by removing the entry from the table.')
ecsAgentManAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 20, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentManAccessLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentManAccessLevel.setDescription('The level of aceess attributed to tthis entry in the table.')
ecsAgentTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 1, 21), )
if mibBuilder.loadTexts: ecsAgentTrapReceiverTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentTrapReceiverTable.setDescription("This entity's Trap Receiver Table. (10 entries)")
ecsAgentTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsAgentTrapReceiverAddr"))
if mibBuilder.loadTexts: ecsAgentTrapReceiverEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentTrapReceiverEntry.setDescription(' A destination address and community string for a particular trap receiver.')
ecsAgentTrapReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentTrapReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentTrapReceiverAddr.setDescription('IpAddress for trap receiver.')
ecsAgentTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("invalid", 1), ("off-on", 2), ("generic", 3), ("psu", 4), ("fanfail", 5), ("configuractionchange", 6), ("port", 7), ("resilience", 8), ("rate", 9), ("stationlocate", 10), ("secure", 11), ("secureport", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentTrapType.setDescription('Setting this object to the value invalid(1) invalidates the corresponding entry in the ECSAgentTrapReceiverTable. That is, it effectively disassociates the address identified with the entry by removing the entry from the table.')
ecsAgentTrapReceiverComm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentTrapReceiverComm.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentTrapReceiverComm.setDescription('Community string used for traps.')
ecsAgentTrapLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentTrapLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentTrapLevel.setDescription('Indicates the type of traps that will be sent to this address.')
ecsAgentAuthTrapState = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentAuthTrapState.setStatus('deprecated')
if mibBuilder.loadTexts: ecsAgentAuthTrapState.setDescription('Enable or disable the use of authentication error trap generation.')
ecsAgentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentIpAddr.setDescription("The network management module's administrative IpAddress. The current operational IpAddress can be obtained from the ipAdEntAddr entry in the ipAddrTable.")
ecsAgentIpNetmask = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentIpNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentIpNetmask.setDescription("The network management module's administrative subnet mask. The current operational subnet mask can be obtained from the ipAdEntNetMask entry in the ipAddrTable.")
ecsAgentDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentDefaultGateway.setDescription("The network management module's administrative default gateway IpAddress. The current operational default gateway's IpAddress can be obtained from the ipRoutingTable.")
ecsAgentIpBroadAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentIpBroadAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentIpBroadAddr.setDescription("The network management module's adminstrative default broadcast address")
ecsAgentMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentMACAddress.setDescription('The MAC address of the ECS Agent.')
ecsAgentSecureTrapState = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentSecureTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentSecureTrapState.setDescription('Enable or disable the generation of security traps.')
ecsAgentLastSystemError = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentLastSystemError.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentLastSystemError.setDescription('The error number of the last system error.')
ecsAgentLastTrap = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 30), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentLastTrap.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAgentLastTrap.setDescription('The time, taken from the epoch when the last trap or event would have been generated.')
ecsRackType = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ecs4", 2), ("ecs10", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRackType.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRackType.setDescription('The rack type of the LinkBuilder ECS.')
ecsRackConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 2, 2), )
if mibBuilder.loadTexts: ecsRackConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRackConfigurationTable.setDescription('The current configuration of the Ether Connect System rack.')
ecsSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsSlotConfigIndex"))
if mibBuilder.loadTexts: ecsSlotConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSlotConfigEntry.setDescription('The description of the type of module in each slot.')
ecsSlotConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSlotConfigIndex.setDescription('The device type found in a slot.')
ecsSlotCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSlotCardName.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSlotCardName.setDescription('This is an informational string that could be used to show the name of a card.')
ecsSlotDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("empty", 1), ("unknown", 2), ("managementcard", 3), ("thinEthernetCard", 4), ("thinEthernetCardpAUI", 5), ("unshieldedTwistedPair", 6), ("fibre", 7), ("bridge-Line-Card", 8), ("monitor", 9), ("shieldedTwistedPair", 10), ("fanout", 11), ("secureUnshieldedTP", 12), ("secureSheildedTP", 13), ("secureFibre", 14), ("secureFanout", 15), ("secureThinEthernet", 16), ("terminalserver", 17), ("remotebridge", 18), ("videoswitch", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSlotDeviceType.setDescription('The device type found in a slot.')
ecsSlotSoftVerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotSoftVerNum.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSlotSoftVerNum.setDescription('A description of the software version number.')
ecsSlotHardVerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotHardVerNum.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSlotHardVerNum.setDescription('Hardware version number of the card.')
ecsSlotNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotNumOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSlotNumOfPorts.setDescription('The number of repeater ports on the card.')
ecsSlotMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSlotMediaType.setDescription('The media type associated with this slot can take on the following values: No port, AUI, Cheapernet, FOIRL, UTP, STP, FOASTAR, Through air, Plastic Fibre.')
ecsCardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCardReset.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCardReset.setDescription('The hardware for specified repeater line card is reset.')
ecsLampOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsLampOverRide.setStatus('mandatory')
if mibBuilder.loadTexts: ecsLampOverRide.setDescription('The lamps on the specified repeater line card are forced on for normal operation.')
ecsCardIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-isolated", 1), ("isolated", 2), ("cant-isolate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCardIsolated.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCardIsolated.setDescription('The LinkBuilder ECS card is isolated from the chassis backplane.')
ecsCardIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCardIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCardIpAddress.setDescription('For some devices the LinkBuilder ECS may be able to determine the IP address of a intelligent card that is in the slot. If the value returned is 0.0.0.0 then this indicates that the address can not be determined.')
ecsPSUStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("psu1failed", 2), ("psu2failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsPSUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPSUStatus.setDescription('The status of the PSUs in the LinkBuilder ECS.')
ecsFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ecsFanStatus.setDescription('The status of the fans in the LinkBuilder ECS.')
ecsRLCNumberOfResilientLinks = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNumberOfResilientLinks.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCNumberOfResilientLinks.setDescription('The number of resilient links currently configured on the LinkBuilder ECS.')
ecsRLCNumberOfDOBPorts = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNumberOfDOBPorts.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCNumberOfDOBPorts.setDescription('The total number of ports that are disabled on boot, making them suitable for use with resilient links.')
ecsRLCResilientLinkTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 3, 3), )
if mibBuilder.loadTexts: ecsRLCResilientLinkTable.setStatus('mandatory')
ecsRLCResilientLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLMainLinkSlot"), (0, "LBHUB-ECS-MIB", "ecsRLMainLinkPort"))
if mibBuilder.loadTexts: ecsRLCResilientLinkEntry.setStatus('mandatory')
ecsRLMainLinkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLMainLinkSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLMainLinkSlot.setDescription('The Slot Number for the main link of this resilient link.')
ecsRLMainLinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLMainLinkPort.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLMainLinkPort.setDescription('The Port Number for the main link of this resilient link.')
ecsRLStandbySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLStandbySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLStandbySlot.setDescription('The Slot Number for the standby link of this resilient link.')
ecsRLStandbyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLStandbyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLStandbyPort.setDescription('The Port Number for the standby link of this resilient link.')
ecsRLActiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("main", 3), ("standby", 4), ("both", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLActiveLink.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLActiveLink.setDescription('The resilient link currently in use for traffic transmission. For a read the attribute indicates which link is active. A new link will always be configured with the main link being the active link. If the link status cannot be determined, the value unknown(1) is returned.')
ecsResLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("operational", 2), ("non-operational", 3), ("switchlink", 4), ("standby-jumperfault", 5), ("main-absent", 6), ("standby-absent", 7), ("main-failed", 8), ("standby-failed", 9), ("both-failed", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsResLinkState.setStatus('mandatory')
ecsSecureRLCMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSecureRLCMode.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecureRLCMode.setDescription('Determines whether the management of Secure Repeater Line Cards is disabled or not.')
ecsSecureTrapRepRate = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("continuous", 1), ("one-minute", 2), ("fifteen-mins", 3), ("sixty-minutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecureTrapRepRate.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecureTrapRepRate.setDescription('Determines the rate at which secure traps are sent for a security violation.')
ecsSecureRLCTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 4, 3), )
if mibBuilder.loadTexts: ecsSecureRLCTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecureRLCTable.setDescription('A table which allows management of the secure Repeater Line Cards.')
ecsSecureRLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsSecRLCSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsSecRLCPortIndex"))
if mibBuilder.loadTexts: ecsSecureRLCEntry.setStatus('mandatory')
ecsSecRLCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSecRLCSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCSlotIndex.setDescription('The secure repeater line card slot index')
ecsSecRLCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSecRLCPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCPortIndex.setDescription('The secure repeater line card port index')
ecsSecRLCLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("secure", 2), ("repeater", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSecRLCLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCLinkState.setDescription('Attribute to determine whether the security features are enabled on this port of the secure Repeater Line Card.')
ecsSecRLCPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("unauthorised-station-seen", 4), ("unauthorised-station-port-disabled", 5), ("authorised-station-learnt", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCPortState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCPortState.setDescription('Attribute to determine whether the port can be normally enabled.')
ecsSecRLCNTKState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCNTKState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCNTKState.setDescription('Attribute to determine whether the Need to Know feature is enabled on the secure Repeater Line Card.')
ecsSecRLCBroadState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCBroadState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCBroadState.setDescription('Attribute to determine whether broadcasts are allowed or not allowed to be transmitted.')
ecsSecRLCMultiState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCMultiState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCMultiState.setDescription('Attribute to determine whether multicasts are allowed or not allowed to be transmitted.')
ecsSecRLCLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("single", 2), ("continual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCLearnMode.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCLearnMode.setDescription('Attribute to determine the learning mode of the secure repeater line card.')
ecsSecRLCReportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("reportonly", 2), ("disconnectandreport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCReportMode.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCReportMode.setDescription('Attribute to determine the reporting mode of the secure repeater line card.')
ecsSecRLCMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ecsSecRLCMACAddress.setDescription('The MAC address in use by the secure repeater line card.')
ecsRLCPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 1), )
if mibBuilder.loadTexts: ecsRLCPortStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCPortStatisticsTable.setDescription('A table which summaries the statistics for each active port/slot')
ecsRLCPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRepeaterSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsRepeaterPortIndex"))
if mibBuilder.loadTexts: ecsRLCPortStatisticsEntry.setStatus('mandatory')
ecsRepeaterSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRepeaterSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRepeaterSlotIndex.setDescription('The repeater slot index.')
ecsRepeaterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRepeaterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRepeaterPortIndex.setDescription('The repeater port index.')
ecsRepeaterPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("disabled-linkdown", 3), ("enabled-linkdown", 4), ("disabled-linkup", 5), ("enabled-linkup", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRepeaterPortState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRepeaterPortState.setDescription('The repeater port state.')
ecsRepeaterPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("partitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRepeaterPartitionState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRepeaterPartitionState.setDescription('The repeater port partition state.')
ecsGoodRcvdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsGoodRcvdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ecsGoodRcvdFrames.setDescription('The number of good frames which have been received and repeted by the specified port.')
ecsTotalByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTotalByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTotalByteCount.setDescription('The summation of the total number of bytes which have been received in good frames and repeated by the specified port.')
ecsTotalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTotalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTotalErrorCount.setDescription('The summaration of all of the errors recorded in the PortErrors table for the specified port')
ecsRxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRxBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRxBroadcastFrames.setDescription('The number of broadcast frames received on this port.')
ecsRxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRxMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRxMulticastFrames.setDescription('The number of broadcast frames received on this port.')
ecsRLCPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 2), )
if mibBuilder.loadTexts: ecsRLCPortErrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCPortErrorTable.setDescription('A table which summaries the error counts for each active port and slot')
ecsRLCPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsErrorSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsErrorPortIndex"))
if mibBuilder.loadTexts: ecsRLCPortErrorEntry.setStatus('mandatory')
ecsErrorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsErrorSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsErrorSlotIndex.setDescription('The repeater slot index')
ecsErrorPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsErrorPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsErrorPortIndex.setDescription('The repeater port index.')
ecsCollisionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCollisionsCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCollisionsCount.setDescription('A count of every attempt to transmit a frame that involved a collision.')
ecsPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPartitions.setDescription('The count of the number of partitions which have been detected by the specified port.')
ecsCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCarrierSenseErrors.setDescription('The number of carrier sense errors which have been detected by the specified port.')
ecsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAlignErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAlignErrors.setDescription('The number of frames with alignment errors which have been received by the specified port.')
ecsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCRCErrors.setDescription('The number of frames with CRC errors which have been received by the specified port.')
ecsJabberErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsJabberErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberErrors.setDescription('The number of jabber errors which have been detected by the specified port.')
ecsRLCPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 3), )
if mibBuilder.loadTexts: ecsRLCPortInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCPortInfoTable.setDescription('A table which summaries the status information for each active port/slot')
ecsRLCPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsInfoSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsInfoPortIndex"))
if mibBuilder.loadTexts: ecsRLCPortInfoEntry.setStatus('mandatory')
ecsInfoSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsInfoSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsInfoSlotIndex.setDescription('The repeater slot index')
ecsInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsInfoPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsInfoPortIndex.setDescription('The repeater port index')
ecsInfoPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsInfoPortName.setStatus('mandatory')
if mibBuilder.loadTexts: ecsInfoPortName.setDescription('This is an informational string that could be used to show the name of a port.')
ecsRepeaterPartitionAlgor = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRepeaterPartitionAlgor.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRepeaterPartitionAlgor.setDescription('The current state of the repeater port algorithm.')
ecsJabberLockProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberLockProtect.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberLockProtect.setDescription('The current state of the jabber protect switch. This affects all ports on the repeater ULA (not necessarily all ports on the card).')
ecsPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-in-test", 1), ("test", 2), ("passed", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortTest.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPortTest.setDescription('The Loopback test is performed on the specified port. This will interrupt traffic on all ports on the repeater ULA (not necessarily all ports on the card in a specified slot) while the test is in progress.')
ecsPortErrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 255))).clone(namedValues=NamedValues(("none", 1), ("normal", 2), ("hi-collision", 3), ("partition", 4), ("high-crc-errorrate", 5), ("high-alignment-errorrate", 6), ("high-traffic-rate", 7), ("high-jabber-errorrate", 8), ("high-carriersense-errorrate", 9), ("unpartitioned", 10), ("linkstatechange-up", 11), ("linkstatechange-down", 12), ("acknowledged", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortErrorState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPortErrorState.setDescription("The error status of the specified port. Under normal conditions this takes the value 'normal' specifying that no error condition has been detected.")
ecsPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortReset.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPortReset.setDescription('The specified port is reset. This will interrupt traffic on all ports on the repeater ULA (not necessarily all ports on the card in a specified slot) while the reset is in progress.')
ecsPortPartitionTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortPartitionTraps.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPortPartitionTraps.setDescription('Determines whether partition traps will be sent for this port.')
ecsPortLinkTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortLinkTraps.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPortLinkTraps.setDescription('Determines whether link traps will be sent for this port.')
ecsPortBootState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsPortBootState.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPortBootState.setDescription('Determines whether the port is disabled on boot (DOB), and therefore suitable for resilient link use.')
ecsPortSLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortSLMode.setStatus('mandatory')
if mibBuilder.loadTexts: ecsPortSLMode.setDescription('Determines whether station locate is enabled for this port.')
ecsRLCcrcTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 4), )
if mibBuilder.loadTexts: ecsRLCcrcTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCcrcTable.setDescription('Level at which port rate error rate trap is produced.')
ecsRLCcrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsCRCSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsCRCPortIndex"))
if mibBuilder.loadTexts: ecsRLCcrcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCcrcEntry.setDescription('The number of frames with CRC errors which have been received by the specified port.')
ecsCRCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCRCSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCRCSlotIndex.setDescription('The repeater slot index')
ecsCRCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCRCPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCRCPortIndex.setDescription('The repeater port index')
ecsCRCErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCRCErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCRCErrorRate.setDescription('The gauge representing the CRC error rate. This is configured using the CRC error rate configuration.')
ecsCRCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCRCThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCRCThreshold.setDescription('Level at which port rate error rate trap is produced.')
ecsCRCDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCRCDecRateValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCRCDecRateValue.setDescription('VALUE that, along with Rate Units, determines the Rate Interval, (in ns) between decrements of the CRC error guage, Rate Interval = ( Units * Value ).')
ecsCRCDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCRCDecRateUnits.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCRCDecRateUnits.setDescription('UNITS that, along with Rate value, determine the Rate Interval Rate Interval = ( Units * Value )')
ecsCRCHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCRCHysteresisValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCRCHysteresisValue.setDescription('Specifies the value to which the CRC error guage must fall before another crossing of the threshold results in a trap.')
ecsRLCtrafficTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 5), )
if mibBuilder.loadTexts: ecsRLCtrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCtrafficTable.setDescription('The configuration parameters which must be set up in order to use the traffic rate guage.')
ecsRLCtrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsTrafficSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsTrafficPortIndex"))
if mibBuilder.loadTexts: ecsRLCtrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCtrafficEntry.setDescription('')
ecsTrafficSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTrafficSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTrafficSlotIndex.setDescription('The repeater slot index')
ecsTrafficPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTrafficPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTrafficPortIndex.setDescription('The repeater port index')
ecsTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTrafficRate.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTrafficRate.setDescription('The gauge representing the rate at which good frames have been received and repeated. This is configured using the traffic rate configuration.')
ecsTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsTrafficThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTrafficThreshold.setDescription('Level at which port rate error rate trap is produced.')
ecsTrafficDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsTrafficDecRateValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTrafficDecRateValue.setDescription('VALUE that, along with Rate Units, determines the Rate Interval, (in ns) between decrements of the CRC error guage, Rate Interval = ( Units * Value ).')
ecsTrafficDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsTrafficDecRateUnits.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTrafficDecRateUnits.setDescription('UNITS that, along with Rate value, determine the Rate Interval Rate Interval = ( Units * Value )')
ecsTrafficHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsTrafficHysteresisValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsTrafficHysteresisValue.setDescription('Specifies the value to which the CRC error guage must fall before another crossing of the threshold results in a trap.')
ecsRLCcollisionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 6), )
if mibBuilder.loadTexts: ecsRLCcollisionTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCcollisionTable.setDescription('The configuration parameters which must be set up in order to use the collision rate guage.')
ecsRLCcollisionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsCollisionSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsCollisionPortIndex"))
if mibBuilder.loadTexts: ecsRLCcollisionEntry.setStatus('mandatory')
ecsCollisionSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCollisionSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCollisionSlotIndex.setDescription('The repeater slot index')
ecsCollisionPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCollisionPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCollisionPortIndex.setDescription('The repeater port index')
ecsCollisionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCollisionRate.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCollisionRate.setDescription('The gauge representing the rate at which collisions have been detected. This is configured using the collision rate configuration.')
ecsCollisionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCollisionThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCollisionThreshold.setDescription('Level at which the collision rate guage will produce a High Collision rate trap.')
ecsCollisionDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCollisionDecRateValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCollisionDecRateValue.setDescription('VALUE that, along with Rate Units, determines the Rate Interval, (in ns) between decrements of the CRC error guage, Rate Interval = ( Units * Value ).')
ecsCollisionDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCollisionDecRateUnits.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCollisionDecRateUnits.setDescription('UNITS that, along with Rate value, determine the Rate Interval Rate Interval = ( Units * Value )')
ecsCollisionHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCollisionHysteresisValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCollisionHysteresisValue.setDescription('Specifies the value to which the Collision guage must fall before another crossing of the threshold results in a trap.')
ecsRLCjabberTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 7), )
if mibBuilder.loadTexts: ecsRLCjabberTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCjabberTable.setDescription('The configuration parameters which must be set up in order to use the jabber rate guage.')
ecsRLCjabberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsJabberSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsJabberPortIndex"))
if mibBuilder.loadTexts: ecsRLCjabberEntry.setStatus('mandatory')
ecsJabberSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsJabberSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberSlotIndex.setDescription('The repeater slot index')
ecsJabberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsJabberPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberPortIndex.setDescription('The repeater port index')
ecsJabberErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsJabberErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberErrorRate.setDescription('The gauge representing the rate at which jabber errors have been detected. This is configured using the jabber rate configuration.')
ecsJabberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberThreshold.setDescription('Level at which port rate error rate trap is produced.')
ecsJabberDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberDecRateValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberDecRateValue.setDescription('VALUE that, along with Rate Units, determine the Rate Interval, Rate Interval = ( Units * Value )')
ecsJabberDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberDecRateUnits.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberDecRateUnits.setDescription('UNITS that, along with Rate value, determine the Rate Interval Rate Interval = ( Units * Value )')
ecsJabberHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberHysteresisValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsJabberHysteresisValue.setDescription('Specifies the value to which the jabber error guage must fall before another crossing of the threshold results in a trap.')
ecsRLCalignTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 8), )
if mibBuilder.loadTexts: ecsRLCalignTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCalignTable.setDescription('The configuration parameters which must be set up in order to use the alignment error rate guage.')
ecsRLCalignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsAlignSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsAlignPortIndex"))
if mibBuilder.loadTexts: ecsRLCalignEntry.setStatus('mandatory')
ecsAlignSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAlignSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAlignSlotIndex.setDescription('The repeater slot index')
ecsAlignPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAlignPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAlignPortIndex.setDescription('The repeater port index')
ecsAlignErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAlignErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAlignErrorRate.setDescription('The gauge representing the alignment error rate. This is configured using the alignment error rate configuration.')
ecsAlignThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAlignThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAlignThreshold.setDescription('Level at which port rate error rate trap is produced.')
ecsAlignDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAlignDecRateValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAlignDecRateValue.setDescription('VALUE that, along with Rate Units, determines the Rate Interval, (in ns) between decrements of the CRC error guage, Rate Interval = ( Units * Value ), where UNITS are in ns')
ecsAlignDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAlignDecRateUnits.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAlignDecRateUnits.setDescription('UNITS that, along with Rate value, determine the Rate Interval Rate Interval = ( Units * Value )')
ecsAlignHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAlignHysteresisValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsAlignHysteresisValue.setDescription('Specifies the value to which the CRC error guage must fall before another crossing of the threshold results in a trap.')
ecsRLCcarrierTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 9), )
if mibBuilder.loadTexts: ecsRLCcarrierTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCcarrierTable.setDescription('The configuration parameters which must be set up in order to use the carrier sense error rate guage.')
ecsRLCcarrierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsCarrierSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsCarrierPortIndex"))
if mibBuilder.loadTexts: ecsRLCcarrierEntry.setStatus('mandatory')
ecsCarrierSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCarrierSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCarrierSlotIndex.setDescription('The repeater slot index')
ecsCarrierPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCarrierPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCarrierPortIndex.setDescription('The repeater port index')
ecsCarrierSenseErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCarrierSenseErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCarrierSenseErrorRate.setDescription('The gauge representing the rate at which jabber errors have been detected. This is configured using the jabber rate configuration.')
ecsCarrierSenseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCarrierSenseThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCarrierSenseThreshold.setDescription('Level at which port rate error rate trap is produced.')
ecsCarrierSenseRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCarrierSenseRateValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCarrierSenseRateValue.setDescription('VALUE that, along with Rate Units, determines the Rate Interval, (in ns) between decrements of the CRC error guage, Rate Interval = ( Units * Value ).')
ecsCarrierSenseRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCarrierSenseRateUnits.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCarrierSenseRateUnits.setDescription('UNITS that, along with Rate value, determine the Rate Interval Rate Interval = ( Units * Value )')
ecsCarrierSenseHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCarrierSenseHysteresisValue.setStatus('mandatory')
if mibBuilder.loadTexts: ecsCarrierSenseHysteresisValue.setDescription('Specifies the value to which the carrier sense error guage must fall before another crossing of the threshold results in a trap.')
ecsRLCSlotStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 10), )
if mibBuilder.loadTexts: ecsRLCSlotStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCSlotStatisticsTable.setDescription('A table which summaries the statistics for each active slot')
ecsRLCSlotStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLCSlotIndex"))
if mibBuilder.loadTexts: ecsRLCSlotStatisticsEntry.setStatus('mandatory')
ecsRLCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCSlotIndex.setDescription('The slot number of the Repeater Line Card.')
ecsRLCGoodRcvdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCGoodRcvdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCGoodRcvdFrames.setDescription('The number of readable frames received by this slot.')
ecsRLCTotalByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCTotalByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCTotalByteCount.setDescription('The number of readable octets received by this Repeater Line Card.')
ecsRLCTotalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCTotalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCTotalErrorCount.setDescription('The total number of errors received on this slot.')
ecsRLCTotalBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCTotalBroadcasts.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCTotalBroadcasts.setDescription('The total number of broadcast frames received on this slot.')
ecsRLCTotalMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCTotalMulticasts.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCTotalMulticasts.setDescription('The total number of multicast frames received on this slot.')
ecsRLCSlotErrorTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 11), )
if mibBuilder.loadTexts: ecsRLCSlotErrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCSlotErrorTable.setDescription('A table which summaries the error statistics for each active slot')
ecsRLCSlotErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLCErrorSlotIndex"))
if mibBuilder.loadTexts: ecsRLCSlotErrorEntry.setStatus('mandatory')
ecsRLCErrorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCErrorSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCErrorSlotIndex.setDescription('The slot number of the Repeater Line Card for which these error statistics pertain.')
ecsRLCCollisionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCCollisionsCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCCollisionsCount.setDescription('The total number of Collisions Reported for this slot.')
ecsRLCPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCPartitions.setDescription('The total number of Partitions Reported for this slot.')
ecsRLCCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCCarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCCarrierSenseErrors.setDescription('The total number of Carrier Sense erros reported for this slot.')
ecsRLCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCAlignErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCAlignErrors.setDescription('The total number of Alignement errors Reported for this slot.')
ecsRLCCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCCRCErrors.setDescription('The total number of CRC errors reported for this slot.')
ecsRLCJabberErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCJabberErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCJabberErrors.setDescription('The total number of jabber errors reported for this slot.')
ecsHubTotalGoodRcvdFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalGoodRcvdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalGoodRcvdFrames.setDescription('The number of readable frames received by this slot.')
ecsHubTotalByteCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalByteCount.setDescription('The number of readable octets received by this hub.')
ecsHubTotalErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalErrorCount.setDescription('The total number of errored packets detected on the hub.')
ecsHubTotalBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalBroadcasts.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalBroadcasts.setDescription('The total number of brodcast packets detected on the hub.')
ecsHubTotalMultiFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalMultiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalMultiFrames.setDescription('The total number of multicast packets detected on the hub.')
ecsHubTotalCollisionsCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalCollisionsCount.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalCollisionsCount.setDescription('The total number of Collisions Reported for the hub.')
ecsHubTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalPartitions.setDescription('The total number of Partitions Reported for this hub.')
ecsHubTotalCarrierSenseErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalCarrierSenseErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalCarrierSenseErrors.setDescription('The total number of Carrier Sense erros reported for this hub.')
ecsHubTotalAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalAlignErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalAlignErrors.setDescription('The total number of Alignement errors reported for this hub.')
ecsHubTotalCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalCRCErrors.setDescription('The total number of CRC errors reported for this hub.')
ecsHubTotalJabberErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalJabberErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ecsHubTotalJabberErrors.setDescription('The total number of jabber errors reported for this hub.')
ecsRLCSizeOfStationLocateDB = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSizeOfStationLocateDB.setStatus('mandatory')
ecsRLCNumbOfSLEntries = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNumbOfSLEntries.setStatus('mandatory')
ecsRLCSLDataBaseStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("changed", 1), ("unchanged", 2), ("clear", 3), ("full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLCSLDataBaseStatus.setStatus('mandatory')
ecsRLCSLowFilterAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLCSLowFilterAddress.setStatus('mandatory')
ecsRLCSLhighFilterAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLCSLhighFilterAddress.setStatus('mandatory')
ecsRLCStationLocateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 6, 6), )
if mibBuilder.loadTexts: ecsRLCStationLocateTable.setStatus('mandatory')
ecsRLCStationLocateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLCSLAddress"))
if mibBuilder.loadTexts: ecsRLCStationLocateEntry.setStatus('mandatory')
ecsRLCSLAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSLAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCSLAddress.setDescription('The MAC Address for which one wishes to locate the slot and port.')
ecsRLCSLSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSLSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCSLSlotIndex.setDescription('The slot number for this MAC address declared in ecsRLCStationAddress.')
ecsRLCSLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCSLPortIndex.setDescription('The port number for this MAC address declared in ecsRLCStationAddress.')
ecsRLCSLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLCSLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCSLStatus.setDescription('Writing clear(1) will clear the entry in the LinkBuilder ECS DataBase.')
ecsRLCNewStationLocateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 6, 7), )
if mibBuilder.loadTexts: ecsRLCNewStationLocateTable.setStatus('mandatory')
ecsRLCNewStationLocateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 6, 7, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLCNewSLAddress"))
if mibBuilder.loadTexts: ecsRLCNewStationLocateEntry.setStatus('mandatory')
ecsRLCNewSLAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNewSLAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCNewSLAddress.setDescription('The MAC Address for which one wishes to locate the slot and port.')
ecsRLCNewSLSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNewSLSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCNewSLSlotIndex.setDescription('The slot number for this MAC address declared in ecsRLCNewSLAddress.')
ecsRLCNewSLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNewSLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ecsRLCNewSLPortIndex.setDescription('The port number for this MAC address declared in ecsRLCNewSLAddress.')
xecsDummyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 255, 1), )
if mibBuilder.loadTexts: xecsDummyTable.setStatus('mandatory')
if mibBuilder.loadTexts: xecsDummyTable.setDescription('A dummy table which allows management of all tables (an snm bug).')
ecsDummyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 255, 1, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsDummyIndex"))
if mibBuilder.loadTexts: ecsDummyEntry.setStatus('mandatory')
ecsDummyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 255, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsDummyIndex.setStatus('mandatory')
ecsDummyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 255, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsDummyValue.setStatus('mandatory')
powerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,0)).setObjects(("LBHUB-ECS-MIB", "ecsPSUStatus"))
if mibBuilder.loadTexts: powerSupplyFailure.setDescription('One of the PSUs has failed, the value of ecsPSUStatus is returned to indicate which PSU has failed.')
fanFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,1))
if mibBuilder.loadTexts: fanFailure.setDescription('A LinkBuilder ECS Fan has failed, requiring immediate attenstion.')
configurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,2))
if mibBuilder.loadTexts: configurationChanged.setDescription('The LinkBuilder ECS configuartion has changed. Either a card has been added or removed, a port disabled or enabled from the front panel or a AUI port has been selected/deselected.')
portTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,3)).setObjects(("LBHUB-ECS-MIB", "ecsInfoSlotIndex"), ("LBHUB-ECS-MIB", "ecsInfoPortIndex"), ("LBHUB-ECS-MIB", "ecsPortErrorState"))
if mibBuilder.loadTexts: portTrap.setDescription('A port has partitioned/unpartitioned or has changed link state. The values of ecsInfoSlotIndex and ecsInfoPortIndex are returned to indicate the slot and port, the ecsPortErrorState is returned to indicate the type or port error.')
resilientLinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,4)).setObjects(("LBHUB-ECS-MIB", "ecsRLMainLinkSlot"), ("LBHUB-ECS-MIB", "ecsRLMainLinkPort"), ("LBHUB-ECS-MIB", "ecsRLStandbySlot"), ("LBHUB-ECS-MIB", "ecsRLStandbyPort"), ("LBHUB-ECS-MIB", "ecsRLActiveLink"), ("LBHUB-ECS-MIB", "ecsResLinkState"))
if mibBuilder.loadTexts: resilientLinkTrap.setDescription('The LinkBuilder ECS Resilient Link system has operated. The resilient link is returned to determine the action taken.')
rateTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,5)).setObjects(("LBHUB-ECS-MIB", "ecsInfoSlotIndex"), ("LBHUB-ECS-MIB", "ecsInfoPortIndex"), ("LBHUB-ECS-MIB", "ecsPortErrorState"))
if mibBuilder.loadTexts: rateTrap.setDescription('A Guage threshold has been exceeded. The slot and port number are given by the vakues if ecsInfoSlotIndex and ecsInfoPortIndex and the guage that has been exceeded is given by the value of ecsPortErrorState.')
stationlocateTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,6)).setObjects(("LBHUB-ECS-MIB", "ecsRLCSLDataBaseStatus"))
if mibBuilder.loadTexts: stationlocateTrap.setDescription('The Station Locate databse has either changed or has become full. The particular condition is shown by the value of ecsRLCSLDataBAseStatus returned.')
secureRLCTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,7)).setObjects(("LBHUB-ECS-MIB", "ecsAgentSecureManagementStatus"))
if mibBuilder.loadTexts: secureRLCTrap.setDescription('There has been access to the security menus from the front panel menus. The value of ecsAgentSecureManagementStatus reports whether the trap was generated beacuse the security menus were entered, the secure password was violated or the security configuration has been changed.')
secureRLCportTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,8)).setObjects(("LBHUB-ECS-MIB", "ecsSecRLCSlotIndex"), ("LBHUB-ECS-MIB", "ecsSecRLCPortIndex"), ("LBHUB-ECS-MIB", "ecsSecRLCPortState"), ("LBHUB-ECS-MIB", "ecsSecRLCMACAddress"))
if mibBuilder.loadTexts: secureRLCportTrap.setDescription('A secure port has either detected an authorised port and taken appropriate action or has learnt an authorised station on the slot and port indicated.')
mibBuilder.exportSymbols("LBHUB-ECS-MIB", linkBuilderFMSII_cards_12tp_rj45=linkBuilderFMSII_cards_12tp_rj45, ecsAgentFrontPanelSetupPassword=ecsAgentFrontPanelSetupPassword, asciiAgent=asciiAgent, ecsPortBootState=ecsPortBootState, ecsAgentTrapReceiverEntry=ecsAgentTrapReceiverEntry, brouter=brouter, ecsAlignDecRateUnits=ecsAlignDecRateUnits, ecsPSUStatus=ecsPSUStatus, ecsRLCcollisionEntry=ecsRLCcollisionEntry, ecsRLCSLhighFilterAddress=ecsRLCSLhighFilterAddress, genericMSWorkstation=genericMSWorkstation, gauges=gauges, ecsHubTotalCRCErrors=ecsHubTotalCRCErrors, linkBuilderECS=linkBuilderECS, ecsJabberLockProtect=ecsJabberLockProtect, ecsSecRLCLearnMode=ecsSecRLCLearnMode, ecsCRCThreshold=ecsCRCThreshold, ecsAgentDefaultConfig=ecsAgentDefaultConfig, linkBuilder10BTi=linkBuilder10BTi, ecsAgentResetDevice=ecsAgentResetDevice, ecsRxMulticastFrames=ecsRxMulticastFrames, ecsSlotCardName=ecsSlotCardName, ecsRLMainLinkSlot=ecsRLMainLinkSlot, linkBuilderFMS_cards_24utp=linkBuilderFMS_cards_24utp, ecsLampOverRide=ecsLampOverRide, ecsRLCjabberTable=ecsRLCjabberTable, ecsManufacturerId=ecsManufacturerId, endStation=endStation, ecsSecRLCPortIndex=ecsSecRLCPortIndex, products=products, ecsAgentRestart=ecsAgentRestart, ecsAgentLastSystemError=ecsAgentLastSystemError, ecsCRCPortIndex=ecsCRCPortIndex, ecsCRCDecRateValue=ecsCRCDecRateValue, ecsRLCCRCErrors=ecsRLCCRCErrors, linkBuilderFMSLBridge=linkBuilderFMSLBridge, ecsHubTotalByteCount=ecsHubTotalByteCount, ecsCardIsolated=ecsCardIsolated, dedicatedRouteServer=dedicatedRouteServer, tcp=tcp, linkBuilderFMSII=linkBuilderFMSII, ecsManufacturerProductId=ecsManufacturerProductId, icmp=icmp, ecsSecRLCNTKState=ecsSecRLCNTKState, ecsPortSLMode=ecsPortSLMode, terminalServer=terminalServer, ecsRepeaterPartitionState=ecsRepeaterPartitionState, ecsSecRLCReportMode=ecsSecRLCReportMode, ecsRLCPortInfoTable=ecsRLCPortInfoTable, ecsCollisionDecRateValue=ecsCollisionDecRateValue, ecsRepeaterSlotIndex=ecsRepeaterSlotIndex, powerSupplyFailure=powerSupplyFailure, ecsDummyValue=ecsDummyValue, ecsAgentSystemName=ecsAgentSystemName, ecsAlignErrors=ecsAlignErrors, ecsHubTotalJabberErrors=ecsHubTotalJabberErrors, ecsRepeaterPortState=ecsRepeaterPortState, ecsRLCcrcEntry=ecsRLCcrcEntry, security=security, ecsPortLinkTraps=ecsPortLinkTraps, ecsRLCSlotErrorTable=ecsRLCSlotErrorTable, generic=generic, xecsDummyTable=xecsDummyTable, ecsRLCTotalByteCount=ecsRLCTotalByteCount, ecsRLCtrafficTable=ecsRLCtrafficTable, ecsRLCStationLocate=ecsRLCStationLocate, specificTrap=specificTrap, secureRLCportTrap=secureRLCportTrap, configurationChanged=configurationChanged, mib_2=mib_2, ecsRxBroadcastFrames=ecsRxBroadcastFrames, ecsSecRLCLinkState=ecsSecRLCLinkState, ip=ip, ecsAlignHysteresisValue=ecsAlignHysteresisValue, ecsCRCSlotIndex=ecsCRCSlotIndex, ecsHubTotalCollisionsCount=ecsHubTotalCollisionsCount, ecsInfoPortName=ecsInfoPortName, ecsRLCPortErrorEntry=ecsRLCPortErrorEntry, ecsAgentTrapReceiverTable=ecsAgentTrapReceiverTable, localSnmp=localSnmp, ecsRLCSLDataBaseStatus=ecsRLCSLDataBaseStatus, linkBuilderFMSII_cards_24tp_telco=linkBuilderFMSII_cards_24tp_telco, ifExtensions=ifExtensions, ecsRLCNewSLPortIndex=ecsRLCNewSLPortIndex, ecsAgentMACAddress=ecsAgentMACAddress, ecsRLCcarrierTable=ecsRLCcarrierTable, ecsAgentAuthenticationStatus=ecsAgentAuthenticationStatus, mrmResilience=mrmResilience, ecsAgentTrapLevel=ecsAgentTrapLevel, ecsAgentFrontPanelPassword=ecsAgentFrontPanelPassword, ecsAgentFrontPanelLock=ecsAgentFrontPanelLock, ecsCarrierSenseRateValue=ecsCarrierSenseRateValue, ecsDummyIndex=ecsDummyIndex, PhysAddress=PhysAddress, sysLoader=sysLoader, linkBuilderFMSII_cards_12fiber_st=linkBuilderFMSII_cards_12fiber_st, ecsAgentSystemLocation=ecsAgentSystemLocation, ecsCarrierSenseErrors=ecsCarrierSenseErrors, ecsRLCPortErrorTable=ecsRLCPortErrorTable, ecsAgentStatus=ecsAgentStatus, ecsRLCalignTable=ecsRLCalignTable, ecsJabberErrorRate=ecsJabberErrorRate, egp=egp, ecsRLCErrorSlotIndex=ecsRLCErrorSlotIndex, ecsSecureRLCMode=ecsSecureRLCMode, hub=hub, ecsRLStandbyPort=ecsRLStandbyPort, ecsAgentLastTrap=ecsAgentLastTrap, ecsRLMainLinkPort=ecsRLMainLinkPort, ecsInfoSlotIndex=ecsInfoSlotIndex, linkBuilderFMS_cards_fiber=linkBuilderFMS_cards_fiber, ecsSecureRepeaterLineCards=ecsSecureRepeaterLineCards, linkBuilder3GH_cards=linkBuilder3GH_cards, linkBuilderFMS_cards_coax=linkBuilderFMS_cards_coax, resilientLinkTrap=resilientLinkTrap, ecsRLCcollisionTable=ecsRLCcollisionTable, ecsAgentFrontPanelSecurePassword=ecsAgentFrontPanelSecurePassword, powerSupply=powerSupply, ecsAgentAuthTrapState=ecsAgentAuthTrapState, udp=udp, a3Com=a3Com, ecsSecRLCPortState=ecsSecRLCPortState, ecsRLCjabberEntry=ecsRLCjabberEntry, linkBuilderFMSII_cards_24tp_rj45=linkBuilderFMSII_cards_24tp_rj45, ecsPartitions=ecsPartitions, ecsSecureRLCEntry=ecsSecureRLCEntry, ecsRLCPortStatisticsTable=ecsRLCPortStatisticsTable, ecsCollisionPortIndex=ecsCollisionPortIndex, ecsHubTotalAlignErrors=ecsHubTotalAlignErrors, ecsSlotMediaType=ecsSlotMediaType, ecsAgent=ecsAgent, serialIf=serialIf, ecsSecRLCMACAddress=ecsSecRLCMACAddress, snmp=snmp, ecsHubTotalMultiFrames=ecsHubTotalMultiFrames, ecsAlignErrorRate=ecsAlignErrorRate, secureRLCTrap=secureRLCTrap, ecsRLCSlotErrorEntry=ecsRLCSlotErrorEntry, ecsCarrierSenseRateUnits=ecsCarrierSenseRateUnits, ecsRLActiveLink=ecsRLActiveLink, netBuilder_mib=netBuilder_mib, ecsRLCalignEntry=ecsRLCalignEntry, ecsAgentManAccessLevel=ecsAgentManAccessLevel, ecsRLCTotalBroadcasts=ecsRLCTotalBroadcasts, ecsHubTotalPartitions=ecsHubTotalPartitions, ecsSecRLCSlotIndex=ecsSecRLCSlotIndex, ecsCarrierSenseErrorRate=ecsCarrierSenseErrorRate, ecsSlotDeviceType=ecsSlotDeviceType, ecsCarrierSenseHysteresisValue=ecsCarrierSenseHysteresisValue, interfaces=interfaces, ecsAgentManagementAddr=ecsAgentManagementAddr, ecsRLCTotalMulticasts=ecsRLCTotalMulticasts, linkBuilder3GH_mib=linkBuilder3GH_mib, linkBuilderECS_cards=linkBuilderECS_cards, ecsCollisionThreshold=ecsCollisionThreshold, ecsRLCSLPortIndex=ecsRLCSLPortIndex, ecsRLCNumberOfDOBPorts=ecsRLCNumberOfDOBPorts, ecsRLCPartitions=ecsRLCPartitions, lBridgeECS_mib=lBridgeECS_mib, ecsAgentSystemTime=ecsAgentSystemTime, linkBuilder10BTi_cards_utp=linkBuilder10BTi_cards_utp, ecsRLCSLAddress=ecsRLCSLAddress, ecsCRCErrorRate=ecsCRCErrorRate, ecsAgentManagementEntry=ecsAgentManagementEntry, repeaterMgmt=repeaterMgmt, ecsPortTest=ecsPortTest, ecsAlignPortIndex=ecsAlignPortIndex, ecsAgentIpAddr=ecsAgentIpAddr, linkBuilderFMS_cards=linkBuilderFMS_cards, linkBuilderMSH_mib=linkBuilderMSH_mib, multiRepeater=multiRepeater, ecsAgentManagementAccess=ecsAgentManagementAccess, ecsRLCPortStatisticsEntry=ecsRLCPortStatisticsEntry, ecsPortErrorState=ecsPortErrorState, ecsRLCSlotStatisticsEntry=ecsRLCSlotStatisticsEntry, ecsRLCNumberOfResilientLinks=ecsRLCNumberOfResilientLinks, linkBuilderFMS=linkBuilderFMS, ecsRLCResilientLinks=ecsRLCResilientLinks, system=system, ecsDummyEntry=ecsDummyEntry, ecsTrafficDecRateValue=ecsTrafficDecRateValue, ecsAlignDecRateValue=ecsAlignDecRateValue, ecsJabberErrors=ecsJabberErrors, ecsAgentTrapReceiverAddr=ecsAgentTrapReceiverAddr, ecsHardwareVersionNumber=ecsHardwareVersionNumber, ecsJabberDecRateUnits=ecsJabberDecRateUnits, manager=manager, ecsRLCNumbOfSLEntries=ecsRLCNumbOfSLEntries, ecsCRCErrors=ecsCRCErrors, ecsAgentSystemIdentifier=ecsAgentSystemIdentifier, ecsJabberHysteresisValue=ecsJabberHysteresisValue, ecsHubTotalCarrierSenseErrors=ecsHubTotalCarrierSenseErrors, ecsAgentDefaultGateway=ecsAgentDefaultGateway, ecsCardReset=ecsCardReset, ecsSecureTrapRepRate=ecsSecureTrapRepRate, ecsCarrierSenseThreshold=ecsCarrierSenseThreshold, ecsRLCSLSlotIndex=ecsRLCSLSlotIndex, ecsAgentTrapReceiverComm=ecsAgentTrapReceiverComm, setup=setup, ecsJabberSlotIndex=ecsJabberSlotIndex, ecsVideo=ecsVideo, ecsPortPartitionTraps=ecsPortPartitionTraps, ecsRLCStationLocateEntry=ecsRLCStationLocateEntry, linkBuilderFMSII_cards_6fiber_st=linkBuilderFMSII_cards_6fiber_st, fault=fault, ecsRLCSizeOfStationLocateDB=ecsRLCSizeOfStationLocateDB, ecsSlotSoftVerNum=ecsSlotSoftVerNum, ecsSlotConfigEntry=ecsSlotConfigEntry, genExperimental=genExperimental, ecsSlotNumOfPorts=ecsSlotNumOfPorts, ecsTotalByteCount=ecsTotalByteCount, ecsSoftwareVersionNumber=ecsSoftwareVersionNumber, ecsRLCResilientLinkTable=ecsRLCResilientLinkTable, bridgeMgmt=bridgeMgmt, ecsAgentTrapType=ecsAgentTrapType, poll=poll, ecsRLCAlignErrors=ecsRLCAlignErrors, portTrap=portTrap, linkBuilder10BTi_cards=linkBuilder10BTi_cards, chassis=chassis, ecsSlotHardVerNum=ecsSlotHardVerNum, ecsHubTotalGoodRcvdFrames=ecsHubTotalGoodRcvdFrames, rateTrap=rateTrap, ecsRLCPortInfoEntry=ecsRLCPortInfoEntry, ecsResLinkState=ecsResLinkState, ecsErrorSlotIndex=ecsErrorSlotIndex, ecsRLCNewSLAddress=ecsRLCNewSLAddress, tokenRing=tokenRing, linkBuilder3GH=linkBuilder3GH, linkBuilderFMSII_cards_10coax_bnc=linkBuilderFMSII_cards_10coax_bnc, ecsRLCCarrierSenseErrors=ecsRLCCarrierSenseErrors, ecsAlignThreshold=ecsAlignThreshold, unusedGeneric12=unusedGeneric12, ecsRackConfigurationTable=ecsRackConfigurationTable, ecsTrafficPortIndex=ecsTrafficPortIndex, ecsCarrierSlotIndex=ecsCarrierSlotIndex, linkBuilderECS_mib=linkBuilderECS_mib, ecsRLCJabberErrors=ecsRLCJabberErrors, ecsAgentSecureTrapState=ecsAgentSecureTrapState, dedicatedBridgeServer=dedicatedBridgeServer, ecsAgentSecureManagementStatus=ecsAgentSecureManagementStatus, ecsGoodRcvdFrames=ecsGoodRcvdFrames, ecsRLCcarrierEntry=ecsRLCcarrierEntry, ecsJabberDecRateValue=ecsJabberDecRateValue, stationlocateTrap=stationlocateTrap, ecsRLCNewSLSlotIndex=ecsRLCNewSLSlotIndex, testData=testData, ecsRLCResilientLinkEntry=ecsRLCResilientLinkEntry, ecsRLStandbySlot=ecsRLStandbySlot, transmission=transmission, ecsTrafficDecRateUnits=ecsTrafficDecRateUnits, ecsCollisionHysteresisValue=ecsCollisionHysteresisValue, DisplayString=DisplayString, genericUnixServer=genericUnixServer)
mibBuilder.exportSymbols("LBHUB-ECS-MIB", ecsSecRLCMultiState=ecsSecRLCMultiState, ecsRLCStationLocateTable=ecsRLCStationLocateTable, ecsCollisionsCount=ecsCollisionsCount, ecsRLCSLowFilterAddress=ecsRLCSLowFilterAddress, ecsCRCDecRateUnits=ecsCRCDecRateUnits, ecsHubStatistics=ecsHubStatistics, cards=cards, ecsRLCCollisionsCount=ecsRLCCollisionsCount, amp_mib=amp_mib, lbecsXENDOFMIB=lbecsXENDOFMIB, fanFailure=fanFailure, at=at, ecsRLCNewStationLocateEntry=ecsRLCNewStationLocateEntry, ecsSecRLCBroadState=ecsSecRLCBroadState, deskMan_mib=deskMan_mib, ecsCardIpAddress=ecsCardIpAddress, ecsAgentIpBroadAddr=ecsAgentIpBroadAddr, linkBuilder10BTi_mib=linkBuilder10BTi_mib, ecsCollisionDecRateUnits=ecsCollisionDecRateUnits, ecsFanStatus=ecsFanStatus, ecsRLCTotalErrorCount=ecsRLCTotalErrorCount, ecsTotalErrorCount=ecsTotalErrorCount, ecsTrafficHysteresisValue=ecsTrafficHysteresisValue, ecsAlignSlotIndex=ecsAlignSlotIndex, ecsRLCNewStationLocateTable=ecsRLCNewStationLocateTable, linkBuilderMSH_cards=linkBuilderMSH_cards, ecsPortReset=ecsPortReset, ecsHubTotalErrorCount=ecsHubTotalErrorCount, ecsAgentFrontPanelDisplay=ecsAgentFrontPanelDisplay, ecsCarrierPortIndex=ecsCarrierPortIndex, ecsSecureRLCTable=ecsSecureRLCTable, ecsCRCHysteresisValue=ecsCRCHysteresisValue, ecsRLCSlotIndex=ecsRLCSlotIndex, ecsRLCSLStatus=ecsRLCSLStatus, ecsTrafficRate=ecsTrafficRate, linkBuilder10BT_cards_utp=linkBuilder10BT_cards_utp, ecsAgentManagementTable=ecsAgentManagementTable, ecsAgentIpNetmask=ecsAgentIpNetmask, genericTrap=genericTrap, viewBuilderApps=viewBuilderApps, linkBuilderFMSII_cards=linkBuilderFMSII_cards, linkBuilderFMS_cards_utp=linkBuilderFMS_cards_utp, ecsRLCtrafficEntry=ecsRLCtrafficEntry, ecsRLCSlotStatisticsTable=ecsRLCSlotStatisticsTable, ecsCollisionRate=ecsCollisionRate, ecsCollisionSlotIndex=ecsCollisionSlotIndex, ecsRLCGoodRcvdFrames=ecsRLCGoodRcvdFrames, ecsSlotConfigIndex=ecsSlotConfigIndex, ecsRepeaterPartitionAlgor=ecsRepeaterPartitionAlgor, ecsRepeaterLineCard=ecsRepeaterLineCard, ecsRLCcrcTable=ecsRLCcrcTable, ecsErrorPortIndex=ecsErrorPortIndex, ecsHubTotalBroadcasts=ecsHubTotalBroadcasts, linkBuilderFMS_cards_12fiber=linkBuilderFMS_cards_12fiber, ecsJabberPortIndex=ecsJabberPortIndex, linkBuilderMSH=linkBuilderMSH, ecsInfoPortIndex=ecsInfoPortIndex, ecsEnvironment=ecsEnvironment, ecsTrafficThreshold=ecsTrafficThreshold, ecsRepeaterPortIndex=ecsRepeaterPortIndex, ecsJabberThreshold=ecsJabberThreshold, genericMSServer=genericMSServer, ecsRackType=ecsRackType, ecsTrafficSlotIndex=ecsTrafficSlotIndex)
