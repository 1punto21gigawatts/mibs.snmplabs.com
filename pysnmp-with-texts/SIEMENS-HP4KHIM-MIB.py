#
# PySNMP MIB module SIEMENS-HP4KHIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SIEMENS-HP4KHIM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, enterprises, Counter32, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Bits, Counter64, Integer32, iso, ModuleIdentity, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "Counter32", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Bits", "Counter64", "Integer32", "iso", "ModuleIdentity", "MibIdentifier", "IpAddress")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
siemens = MibIdentifier((1, 3, 6, 1, 4, 1, 4329))
iandcAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2))
hp4khim = ModuleIdentity((1, 3, 6, 1, 4, 1, 4329, 2, 51))
hp4khim.setRevisions(('2006-06-07 07:47',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hp4khim.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hp4khim.setLastUpdated('200611100000Z')
if mibBuilder.loadTexts: hp4khim.setOrganization('Siemens')
if mibBuilder.loadTexts: hp4khim.setContactInfo('David Nemeskey')
if mibBuilder.loadTexts: hp4khim.setDescription('')
class HimPEN(TextualConvention, OctetString):
    description = 'Octet String for storing PEN numbers. The format is The PEN is displayed in the following format: [LTG]-[LTU]-[EBT]. LTG: Line/Trunk Group: always 1 LTU: Line/Trunk Unit: a number between 1 and 99 EBT: a three-digit number.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 9)

class HimPabxId(TextualConvention, Integer32):
    description = 'Textual convention for the Pabx Id.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class HimSwitchNumber(TextualConvention, OctetString):
    description = 'Data type of the switch number.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 17)

class HimYesNo(TextualConvention, Integer32):
    description = 'Boolean data type: 1. no 2. yes The order is set like this to comply with the definition of data leaves in the hicom MIB that use this convention implicitly.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 0))
    namedValues = NamedValues(("yes", 1), ("no", 2), ("other", 0))

class DiscoveryStates(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("done", 1), ("error", 2), ("busy", 3), ("finok", 4), ("finerr", 5), ("kill", 6))

class DiscoveryModes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 9))
    namedValues = NamedValues(("man", 1), ("auto", 2), ("undef", 9))

class HimPhoneNumber(TextualConvention, OctetString):
    description = 'Convention that represents phone numbers in a HiPath system.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 22)

class HimShelfNWType(TextualConvention, Integer32):
    description = 'Network type of the shelf.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))
    namedValues = NamedValues(("flex", 1), ("local", 2), ("apnw", 3), ("apdl", 4), ("other", 0))

himWelcomePage = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1))
himWelPgTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1), )
if mibBuilder.loadTexts: himWelPgTable.setStatus('current')
if mibBuilder.loadTexts: himWelPgTable.setDescription('')
himWelPgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himWelPgPabxId"))
if mibBuilder.loadTexts: himWelPgEntry.setStatus('current')
if mibBuilder.loadTexts: himWelPgEntry.setDescription('')
himWelPgPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himWelPgPabxId.setStatus('current')
if mibBuilder.loadTexts: himWelPgPabxId.setDescription('')
himWelPgSysNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 2), HimSwitchNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himWelPgSysNo.setStatus('current')
if mibBuilder.loadTexts: himWelPgSysNo.setDescription('This field contains the system number (max. 17 characters).')
himHP4KVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHP4KVersion.setStatus('current')
if mibBuilder.loadTexts: himHP4KVersion.setDescription('This field contains the Hicom/HiPath version number of the system (max. 4 characters).')
himSystemRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSystemRelease.setStatus('current')
if mibBuilder.loadTexts: himSystemRelease.setDescription('This field contains the system release number of the system (max. 2 characters).')
himRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: himRevisionLevel.setDescription('This field contains the revision number of the system software (max. 2 characters).')
himHWArchitecture = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWArchitecture.setStatus('current')
if mibBuilder.loadTexts: himHWArchitecture.setDescription("This field contains the information on hardware architecture in the format [hw-architecture][system-variant][hw-design] [hw-architecture] Abbreviation describing hardware architecture. F.i '4300', '350E', etc. [system-variant] H40: SYSTEM VARIANT 40 H80: SYSTEM VARIANT 80 H600: SYSTEM VARIANT 600 [hw-design] ECX: HARDWARE DESIGN EXTENDED COMPACT EXTENDED ECDSC: HARDWARE DESIGN EXTENDED COMPACT DSC CXE: HARDWARE DESIGN EXTENDED COMPACT CXE")
himHWArchitectureType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWArchitectureType.setStatus('current')
if mibBuilder.loadTexts: himHWArchitectureType.setDescription('This field contains abbreviation describing hardware architecture type (max. 3 characters).')
himOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himOperationMode.setStatus('current')
if mibBuilder.loadTexts: himOperationMode.setDescription('This field contains the operating mode of the system. Possible Values: SIMPLEX: OPERATING MODE SIMPLEX DUPLEX: OPERATING MODE DUPLEX REDUNDANCY')
himSWUProc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUProc1.setStatus('current')
if mibBuilder.loadTexts: himSWUProc1.setDescription('These fields contains the name of the SWU processor board (max. 8 characters). SWU = Switching Unit Possible values: - CC-A - CC-B')
himSWUMemory1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUMemory1.setStatus('current')
if mibBuilder.loadTexts: himSWUMemory1.setDescription('These fields contain the size of the SWU memory for each processor card. SWU = Switching Unit')
himSWUProc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUProc2.setStatus('current')
if mibBuilder.loadTexts: himSWUProc2.setDescription('These fields contains the name of the SWU processor board (max. 8 characters). SWU = Switching Unit Possible values: - CC-A - CC-B')
himSWUMemory2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUMemory2.setStatus('current')
if mibBuilder.loadTexts: himSWUMemory2.setDescription('These fields contain the size of the SWU memory for each processor card. SWU = Switching Unit')
himSwitchData = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2))
himTechInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 1), )
if mibBuilder.loadTexts: himTechInfoTable.setStatus('current')
if mibBuilder.loadTexts: himTechInfoTable.setDescription('')
himTechInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himTechInfoPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himTechInfoInfoNo"))
if mibBuilder.loadTexts: himTechInfoEntry.setStatus('current')
if mibBuilder.loadTexts: himTechInfoEntry.setDescription('')
himTechInfoPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechInfoPabxId.setStatus('current')
if mibBuilder.loadTexts: himTechInfoPabxId.setDescription('')
himTechInfoInfoNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechInfoInfoNo.setStatus('current')
if mibBuilder.loadTexts: himTechInfoInfoNo.setDescription('This field contains the number of the subsystem. This number can be assigned as required when configuring the subsystem.')
himTechInfoDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechInfoDate.setStatus('current')
if mibBuilder.loadTexts: himTechInfoDate.setDescription('This field contains the date on which the subsystem was configured.')
himTechInfoTechnicalData = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechInfoTechnicalData.setStatus('current')
if mibBuilder.loadTexts: himTechInfoTechnicalData.setDescription('This field contains the technical data of the subsystem.')
himTechInfoNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechInfoNumber.setStatus('current')
if mibBuilder.loadTexts: himTechInfoNumber.setDescription('This field contains the number of each subsystem configured.')
himTechInfoExtraText = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechInfoExtraText.setStatus('current')
if mibBuilder.loadTexts: himTechInfoExtraText.setDescription('This field contains additional text.')
himNotepadDataTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 2), )
if mibBuilder.loadTexts: himNotepadDataTable.setStatus('current')
if mibBuilder.loadTexts: himNotepadDataTable.setDescription('This node contains the system data entered in a notepad. The table for notepad entries holds a maximum of 30 data records.')
himNotepadDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 2, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himNotepadDataPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himNotepadDataInfoNo"))
if mibBuilder.loadTexts: himNotepadDataEntry.setStatus('current')
if mibBuilder.loadTexts: himNotepadDataEntry.setDescription('')
himNotepadDataPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 2, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himNotepadDataPabxId.setStatus('current')
if mibBuilder.loadTexts: himNotepadDataPabxId.setDescription('')
himNotepadDataInfoNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himNotepadDataInfoNo.setStatus('current')
if mibBuilder.loadTexts: himNotepadDataInfoNo.setDescription('This field contains the number of the subsystem. This number is assigned permanently when configuring the subsystem.')
himNotepadDataDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himNotepadDataDate.setStatus('current')
if mibBuilder.loadTexts: himNotepadDataDate.setDescription('This field contains the date on which the subsystem was configured.')
himNotepadDataText = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 77))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himNotepadDataText.setStatus('current')
if mibBuilder.loadTexts: himNotepadDataText.setDescription('This field contains the technical data of the subsystem.')
himProjPlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 3), )
if mibBuilder.loadTexts: himProjPlanInfoTable.setStatus('current')
if mibBuilder.loadTexts: himProjPlanInfoTable.setDescription('This screen makes it possible to generate a file with project planning data.')
himProjPlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 3, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himProjPlanPabxId"))
if mibBuilder.loadTexts: himProjPlanInfoEntry.setStatus('current')
if mibBuilder.loadTexts: himProjPlanInfoEntry.setDescription('')
himProjPlanPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 3, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himProjPlanPabxId.setStatus('current')
if mibBuilder.loadTexts: himProjPlanPabxId.setDescription('')
himProjPlanInfoFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12)).clone('ProjPlan.txt')).setMaxAccess("readonly")
if mibBuilder.loadTexts: himProjPlanInfoFile.setStatus('current')
if mibBuilder.loadTexts: himProjPlanInfoFile.setDescription('This field contains the name of the project planning file.')
himProjPlanInfoCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himProjPlanInfoCreationDate.setStatus('current')
if mibBuilder.loadTexts: himProjPlanInfoCreationDate.setDescription('This field contains the date on which the project planning file was generated.')
himProjPlanInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himProjPlanInfoCreationTime.setStatus('current')
if mibBuilder.loadTexts: himProjPlanInfoCreationTime.setDescription('This field contains the time at which the project planning file was generated.')
himSpecSwitchData = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3))
himSpecShelfDataTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1), )
if mibBuilder.loadTexts: himSpecShelfDataTable.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataTable.setDescription('All subscriber and trunk-related lines are grouped within LTU (Line/Trunk Unit) frames. Each frame has several slots for modules. The frame is connected to the system via the LTUC control board. This table contains the frame configuration.')
himSpecShelfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSpecShelfDataPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSpecShelfDataAddress"))
if mibBuilder.loadTexts: himSpecShelfDataEntry.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataEntry.setDescription('')
himSpecShelfDataPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataPabxId.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataPabxId.setDescription('')
himSpecShelfDataAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataAddress.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataAddress.setDescription('This field contains the address of the shelf in format LTG.LTU. LTG:Line/Trunk Group LTU: Line/Trunk Unit')
himSpecShelfDataFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataFrameType.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataFrameType.setDescription('This field contains the part number of the frame.')
himSpecShelfDataLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0))).clone(namedValues=NamedValues(("preatl", 1), ("cc40f", 2), ("cc80w", 3), ("cc80f", 4), ("l80xf", 5), ("l80xw", 6), ("ltuw", 7), ("inch19", 8), ("ap37009", 9), ("ap370013", 10), ("ext-comp-x", 11), ("other", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataLTU.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataLTU.setDescription('This field contains type of LTU (Line/Trunk Unit) frame. Possible values for LTU frame type: - PREATL - frametype for Preatlantic Hicom Types - CC40F - basisframe for 40CMX - CC80W - basisframe for 80CMX - CC80F - basisframe for 80CMX/DSC and CXE - L80XF - for 80CMX/DSC, CXE, 600ECS and AP shelves - L80XW - extension frame for 80CMX/DSC - LTUW - frame for 600ECX and AP shelves Possible values for AP shelf type: - L80XF - for 80CMX/DSC, CXE, 600ECS and AP shelves - LTUW - frame for 600ECX and AP shelves - INCH19 - 19 inch frame for AP shelves')
himSpecShelfDataNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 5), HimShelfNWType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataNetworkType.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataNetworkType.setDescription('This field contains connection type of LTU frame / AP shelf.')
himSpecShelfDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataNetworkAddress.setDescription('This field contains network IP address.')
himSpecShelfDataRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataRemote.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataRemote.setDescription('This field shows if frame is remote. Possible values: - yes - frame is remote - no - frame is not remote')
himSpecShelfDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataLocation.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataLocation.setDescription('This field contains postal address (city, street, building, ..) , where a FLEX LTU or an AP shelf is located.')
himSpecShelfDataLTUC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSpecShelfDataLTUC.setStatus('current')
if mibBuilder.loadTexts: himSpecShelfDataLTUC.setDescription('This field contains part number adding LTUC module. LTUC: Line/Trunk Unit Control.')
himSWUBoardTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2), )
if mibBuilder.loadTexts: himSWUBoardTable.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardTable.setDescription('This table contains the configuration of the peripheral boards. Periphery Assemblies Peripheral and ring generator assemblies as well as SIU are configured in the LTU. The board is entered in the SWU database. LTU = Line/Trunk Unit SIU = Signaling Interface Unit SWU = Switching Unit')
himSWUBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSWUBoardPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSWUBoardPEN"))
if mibBuilder.loadTexts: himSWUBoardEntry.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardEntry.setDescription('')
himSWUBoardPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardPabxId.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardPabxId.setDescription('')
himSWUBoardPEN = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 2), HimPEN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardPEN.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardPEN.setDescription('This field contains the name of the board PEN. PEN: Port Equipment Number The PEN is displayed in the following format: [LTG]-[LTU]-[EBT]. LTG: Line/Trunk Group LTU: Line/Trunk Unit EBT: Slot')
himSWUBoardOverlayLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardOverlayLTU.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardOverlayLTU.setDescription('This field contains the name of the overlay LTU (Line/Trunk Unit).')
himSWUBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardType.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardType.setDescription('This field contains the name of the configured board.')
himSWUBoardNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardNominal.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardNominal.setDescription('This field contains the name of the nominal board.')
himSWUBoardActual = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardActual.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardActual.setDescription('This field contains part number of the board that is plugged in.')
hhimSWUBoardFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhimSWUBoardFirmware.setStatus('current')
if mibBuilder.loadTexts: hhimSWUBoardFirmware.setDescription('This field contains the name of the firmware.')
himSWUBoardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardRev.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardRev.setDescription('This field contains the revision of the board.')
himSWUBoardFunctId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardFunctId.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardFunctId.setDescription('Function identification number for boards with more than one functions (e.g. SIUX, STMA, SLMO24).')
himSWUBoardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardMode.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardMode.setDescription('This field contains the mode of the board. The mode is only displayed for the RG/ACGEN board.')
himSWUBoardLWNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardLWNo.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardLWNo.setDescription('This field contains the number of the loadware.')
himSWUBoardLWInterVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardLWInterVer.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardLWInterVer.setDescription('This field contains the interface version of the board.')
himSWUBoardLWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardLWName.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardLWName.setDescription('This field contains the file name of the loadware file or of the initialization file.')
himSWUBoardLWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 3, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWUBoardLWDate.setStatus('current')
if mibBuilder.loadTexts: himSWUBoardLWDate.setDescription('This field contains the date on which the loadware or the initialization file was generated.')
himSWUPeriphery = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4))
himPSIOAssTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 1), )
if mibBuilder.loadTexts: himPSIOAssTable.setStatus('current')
if mibBuilder.loadTexts: himPSIOAssTable.setDescription('This table contains the PSIO assemblies data.')
himPSIOAssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himPSIOAssPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himPSIOAssPEN"))
if mibBuilder.loadTexts: himPSIOAssEntry.setStatus('current')
if mibBuilder.loadTexts: himPSIOAssEntry.setDescription('')
himPSIOAssPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPSIOAssPabxId.setStatus('current')
if mibBuilder.loadTexts: himPSIOAssPabxId.setDescription('')
himPSIOAssAssembly = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPSIOAssAssembly.setStatus('current')
if mibBuilder.loadTexts: himPSIOAssAssembly.setDescription('This field contains the name of the PSIO board. PSIO: Peripheral Serial Input Output')
himPSIOAssPEN = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 1, 1, 2), HimPEN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPSIOAssPEN.setStatus('current')
if mibBuilder.loadTexts: himPSIOAssPEN.setDescription('This field contains the name of the board PEN. PEN: Port Equipment Number The PEN is displayed in the following format: [LTG]-[LTU]-[EBT]. LTG: Line/Trunk Group LTU: Line/Trunk Unit EBT: Slot')
himPSIOAssActual = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPSIOAssActual.setStatus('current')
if mibBuilder.loadTexts: himPSIOAssActual.setDescription('This field contains the part number of the PSIO board.')
himPSIOAssFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPSIOAssFirmware.setStatus('current')
if mibBuilder.loadTexts: himPSIOAssFirmware.setDescription('This field contains the firmware name of the PSIO board.')
himSerialLineTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2), )
if mibBuilder.loadTexts: himSerialLineTable.setStatus('current')
if mibBuilder.loadTexts: himSerialLineTable.setDescription('This table contains the serial interfaces data.')
himSerialLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSerialLinePabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSerialLineNumber"))
if mibBuilder.loadTexts: himSerialLineEntry.setStatus('current')
if mibBuilder.loadTexts: himSerialLineEntry.setDescription('')
himSerialLinePabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSerialLinePabxId.setStatus('current')
if mibBuilder.loadTexts: himSerialLinePabxId.setDescription('')
himSerialLineBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSerialLineBoardType.setStatus('current')
if mibBuilder.loadTexts: himSerialLineBoardType.setDescription('This field contains abbreviation name of the board type.')
himSerialLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSerialLineNumber.setStatus('current')
if mibBuilder.loadTexts: himSerialLineNumber.setDescription('This field contains the physical line number of the interface. Possible Values: numeric, 8-63')
himSerialLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSerialLineSpeed.setStatus('current')
if mibBuilder.loadTexts: himSerialLineSpeed.setDescription('This field contains standardized transmission speed (baud rate). Possible Values: 50, 100, 200, 300, 600, 1200, 2400, 4800, 9600, 19200.')
himSerialLineLogDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSerialLineLogDevName.setStatus('current')
if mibBuilder.loadTexts: himSerialLineLogDevName.setDescription('This field contains the logical device name of the line. Possible Values: Value - Description CON1 - LOGICAL DEVICE CONNECTION,TERMINAL 1 CON2 - LOGICAL DEVICE CONNECTION,TERMINAL 2 CON3 - LOGICAL DEVICE CONNECTION,TERMINAL 3 CON4 - LOGICAL DEVICE CONNECTION,TERMINAL 4 CON5 - LOGICAL DEVICE CONNECTION 5 CON6 - LOGICAL DEVICE CONNECTION 6 PR1 - LOGICAL DEVICE:LINE PRINTER 1 PR2 - LOGICAL DEVICE:LINE PRINTER 2 PR3 - LOGICAL DEVICE:LINE PRINTER 3 PR4 - LOGICAL DEVICE:LINE PRINTER 4')
himSerialLineDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSerialLineDevType.setStatus('current')
if mibBuilder.loadTexts: himSerialLineDevType.setDescription('This field contains the device type of the line. Possible Values: Value - Description PT88 - DEVICE TYPE QUOSC - QUME-ONLY-SCREEN QUOPT - QUME-ONLY-PT88 QUSCAPT - QUME-SCREEN-AND-PT88 PCOSC - PC-D-ONLY-SCREEN PCOPT - PC-D-ONLY-PT88 PCSCAPT - PC-D-SCREEN-AND-PT88 ASC - ASCII-CODE EBC - EBCDIC CODE RSV1 - RESERVED DEVICE TYPE 1 RSV2 - RESERVED DEVICE TYPE 2 RSV3 - RESERVED DEVICE TYPE 3')
himSerialLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("asy", 1), ("v24", 2), ("other", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSerialLineType.setStatus('current')
if mibBuilder.loadTexts: himSerialLineType.setDescription('This field contains the line type (operation of synchronous lines (terminals) connected via V24 modems). Possible values: - ASY: asynchronous line type - V24: ccitt rec v24')
himSCSIDevTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 3), )
if mibBuilder.loadTexts: himSCSIDevTable.setStatus('current')
if mibBuilder.loadTexts: himSCSIDevTable.setDescription('This table contains the data for the SCSI devices connected.')
himSCSIDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 3, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSCSIDevPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSCSIDevId"))
if mibBuilder.loadTexts: himSCSIDevEntry.setStatus('current')
if mibBuilder.loadTexts: himSCSIDevEntry.setDescription('')
himSCSIDevPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 3, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSCSIDevPabxId.setStatus('current')
if mibBuilder.loadTexts: himSCSIDevPabxId.setDescription('')
himSCSIDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSCSIDevId.setStatus('current')
if mibBuilder.loadTexts: himSCSIDevId.setDescription('This field contains the type of SCSI device.')
himSCSIDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSCSIDevType.setStatus('current')
if mibBuilder.loadTexts: himSCSIDevType.setDescription('This field contains the SCSI ID of the device.')
himSCSIDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSCSIDevName.setStatus('current')
if mibBuilder.loadTexts: himSCSIDevName.setDescription('This field contains the name of the SCSI device in format: [vendor] [product number].')
himSCSIDevFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSCSIDevFirmware.setStatus('current')
if mibBuilder.loadTexts: himSCSIDevFirmware.setDescription('This field contains the firmware name of the SCSI device.')
himSCSIDevLoadDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSCSIDevLoadDrive.setStatus('current')
if mibBuilder.loadTexts: himSCSIDevLoadDrive.setDescription('This field displays (if activity is in progress) the device from which the operating system and the database are started.')
himCentralSwitchData = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5))
himCabinetTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1), )
if mibBuilder.loadTexts: himCabinetTable.setStatus('current')
if mibBuilder.loadTexts: himCabinetTable.setDescription('This table contains the data for configuring the cabinets and frames in a system. They reflect the physical structure of the system.')
himCabinetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himCabPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himCabAddr"))
if mibBuilder.loadTexts: himCabinetEntry.setStatus('current')
if mibBuilder.loadTexts: himCabinetEntry.setDescription('')
himCabPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabPabxId.setStatus('current')
if mibBuilder.loadTexts: himCabPabxId.setDescription('')
himCabAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabAddr.setStatus('current')
if mibBuilder.loadTexts: himCabAddr.setDescription('This field contains the cabinet address. Structure of cabinet address: P 1 01 | | |__Number of cabinet in cabinet row | |_____Units, position of cabinet row |_______Tens (P=0, Q=1), position of the cabinet')
himCabPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabPhysAddr.setStatus('current')
if mibBuilder.loadTexts: himCabPhysAddr.setDescription('')
himCabCabinet = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabCabinet.setStatus('current')
if mibBuilder.loadTexts: himCabCabinet.setDescription('This field contains the name of the cabinet.')
himCabPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabPartNo.setStatus('current')
if mibBuilder.loadTexts: himCabPartNo.setDescription('This field contains the part number of the cabinet.')
himCabShelfNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabShelfNo.setStatus('current')
if mibBuilder.loadTexts: himCabShelfNo.setDescription('This field contains the number of the shelf.')
himCabFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabFrame.setStatus('current')
if mibBuilder.loadTexts: himCabFrame.setDescription('This field contains the name of the frame.')
himCabPid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabPid1.setStatus('current')
if mibBuilder.loadTexts: himCabPid1.setDescription('This field contains the processor ID 1.')
himCabPid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabPid2.setStatus('current')
if mibBuilder.loadTexts: himCabPid2.setDescription('This field contains the processor ID 2.')
himCabPid3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabPid3.setStatus('current')
if mibBuilder.loadTexts: himCabPid3.setDescription('This field contains the processor ID 2.')
himCabLTUNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himCabLTUNo.setStatus('current')
if mibBuilder.loadTexts: himCabLTUNo.setDescription('This field contains the number of the LTU (Line/Trunk Unit). The LTU range is divided in two parts: HHS (HICOM Host System) and AP (Access Point). The available values of the ranges are: HHS 1-15 and AP 17-99. The LTU 16 is forbidden. There are existing shelfes which are allowed only in HHS and others which are allowed only in the AP range.')
himMemScalingTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2), )
if mibBuilder.loadTexts: himMemScalingTable.setStatus('current')
if mibBuilder.loadTexts: himMemScalingTable.setDescription('This screen contains the memory parameters for each of the devices or features specified. The values are only displayed in Configuration Management. See also DIMSU parameter list.')
himMemScalingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himMemScalingPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himMemScalingUnit"))
if mibBuilder.loadTexts: himMemScalingEntry.setStatus('current')
if mibBuilder.loadTexts: himMemScalingEntry.setDescription('')
himMemScalingPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMemScalingPabxId.setStatus('current')
if mibBuilder.loadTexts: himMemScalingPabxId.setDescription('')
himMemScalingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMemScalingUnit.setStatus('current')
if mibBuilder.loadTexts: himMemScalingUnit.setDescription('This field contains the parameter name (AMO DIMSU).')
himMemScalingUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMemScalingUsed.setStatus('current')
if mibBuilder.loadTexts: himMemScalingUsed.setDescription('This value specifies the number of memory elements already used up. The comparison with the value in the Maximum field indicates how much of the allocated memory is still available for configuring devices or features.')
himMemScalingMaxUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMemScalingMaxUsed.setStatus('current')
if mibBuilder.loadTexts: himMemScalingMaxUsed.setDescription('This field contains the number of memory elements allocated.')
himMemScalingAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMemScalingAllocated.setStatus('current')
if mibBuilder.loadTexts: himMemScalingAllocated.setDescription("This field displays the maximum number of memory elements that once have been used up during the lifetime of the switch ('high water mark'). It gives an indication how much memory was necessary at one time, so it is advised to not reduce the Maximum value below this value.")
himMemScalingStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMemScalingStandard.setStatus('current')
if mibBuilder.loadTexts: himMemScalingStandard.setDescription("Standard is the advised value to be set in the Maximum field, if you don't have special needs to set it to a specific value. If you set all devices and features to the standard values it is guaranteed that you don't run out of DIMSU memory.")
himMemScalingSysMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMemScalingSysMax.setStatus('current')
if mibBuilder.loadTexts: himMemScalingSysMax.setDescription('This field contains the maximum number of possible memory elements.')
himGeneralSwitchData = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6))
himDBConfSys = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1))
himDBConfSysTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1), )
if mibBuilder.loadTexts: himDBConfSysTable.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysTable.setDescription('')
himDBConfSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himDBConfSysPabxId"))
if mibBuilder.loadTexts: himDBConfSysEntry.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysEntry.setDescription('')
himDBConfSysPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysPabxId.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysPabxId.setDescription('')
himDBConfSysClass1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysClass1.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysClass1.setDescription('This field contains the name of the system.')
himDBConfSysClass2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysClass2.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysClass2.setDescription('This field contains the coded name of the system.')
himDBConfSysHWAss1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysHWAss1.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysHWAss1.setDescription('This field contains the hardware ID of the system.')
himDBConfSysHWAss2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysHWAss2.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysHWAss2.setDescription('This field contains the shortened hardware ID of the system.')
himDBConfSysDevLine1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysDevLine1.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysDevLine1.setDescription('This field contains the name of the product line.')
himDBConfSysDevLine2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysDevLine2.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysDevLine2.setDescription('This field contains the shortened name of the product line. Possible values: - H300: EUROPE DEVELOPMENT - HUSA: US DEVELOPMENT')
himDBConfSysOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("simplex", 1), ("duplex", 2), ("other", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysOpMode.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysOpMode.setDescription('This field contains the operating mode of the system. Possible Values: - SIMPLEX: OPERATING MODE SIMPLEX - DUPLEX: OPERATING MODE DUPLEX REDUNDANCY')
himDBConfSysResType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysResType.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysResType.setDescription('This field contains the restart identifier.')
himDBConfSysHWArch = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysHWArch.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysHWArch.setDescription('This field contains the name of the hardware architecture.')
himDBConfSysHWArchType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysHWArchType.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysHWArchType.setDescription('This field contains the name of the hardware architecture type.')
himDBConfSysNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 12), HimSwitchNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysNo.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysNo.setDescription('This field contains the number of the system.')
himDBConfSysLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("customer", 1), ("support", 2), ("testlab", 3), ("other", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysLoc.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysLoc.setDescription('This field contains the name of the location in which the system is installed. Possible Values: - CUSTOMER (customer) - SUPPORT (support) - TESTLAB (testlab)')
himDBConfSysBaseApp = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysBaseApp.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysBaseApp.setDescription('This field contains the name of the base application.')
himDBConfSysDBApp = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysDBApp.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysDBApp.setDescription('This field contains the name of the database application.')
himDBConfSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 1, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfSysID.setStatus('current')
if mibBuilder.loadTexts: himDBConfSysID.setDescription('This field contains the system identification.')
himDBConfHW = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2))
himDBConfHWTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1), )
if mibBuilder.loadTexts: himDBConfHWTable.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWTable.setDescription('')
himDBConfHWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himDBConfHWPabxId"))
if mibBuilder.loadTexts: himDBConfHWEntry.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWEntry.setDescription('')
himDBConfHWPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWPabxId.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWPabxId.setDescription('')
himDBConfHWLTG = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWLTG.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWLTG.setDescription('This field contains the number of LTGs in the system. LTG: Line/Trunk Group')
himDBConfHWLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 15), ValueRangeConstraint(17, 99), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWLTU.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWLTU.setDescription('This field contains the number of LTUs in the system. LTU: Line/Trunk Unit')
himDBConfHWLines = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWLines.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWLines.setDescription('This field contains the number of lines in the system.')
himDBConfHWPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWPorts.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWPorts.setDescription('This field contains the number of ports in the system.')
himDBConfHWPBC = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWPBC.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWPBC.setDescription('This field contains the number of peripheral board controllers (PBC) in the system.')
himDBConfHWMTSBdPerGSN = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWMTSBdPerGSN.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWMTSBdPerGSN.setDescription('This field contains the number of memory time switches (MTS) per group switching network (GSN).')
himDBConfHWSIUPPerLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWSIUPPerLTU.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWSIUPPerLTU.setDescription('This field contains the number of SIUP boards per LTU (Line/Trunk Unit).')
himDBConfHWDIUCPerLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWDIUCPerLTU.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWDIUCPerLTU.setDescription('This field contains the number of DIUC boards per LTU (Line/Trunk Unit).')
himDBConfHWHwyPerMTSBd = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWHwyPerMTSBd.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWHwyPerMTSBd.setDescription('This field contains the number highways (HYW) per MTS board.')
himDBConfHWHDLCPerDCL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWHDLCPerDCL.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWHDLCPerDCL.setDescription('This field contains the number of high level data link control (HDLC) channels per data communication link (DCL).')
himDBConfHWPBCPerDCL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWPBCPerDCL.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWPBCPerDCL.setDescription('This field contains the number of peripheral board controllers (PBC) per data communication link (DCL).')
himDBConfHWStdSIULine = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWStdSIULine.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWStdSIULine.setDescription('This field contains the number of signaling unit lines. SIU: Signaling-Unit')
himDBConfHWConfLine = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWConfLine.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWConfLine.setDescription('This field contains the number of lines in the CONFERENCE board.')
himDBConfHWDBDim = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWDBDim.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWDBDim.setDescription('This field contains the name of the database dimensioning.')
himDBConfHWTableVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDBConfHWTableVer.setStatus('current')
if mibBuilder.loadTexts: himDBConfHWTableVer.setDescription('This field contains the version of the Conf table.')
himHWData = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3))
himHWDataTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1), )
if mibBuilder.loadTexts: himHWDataTable.setStatus('current')
if mibBuilder.loadTexts: himHWDataTable.setDescription('')
himHWDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himHWDataPabxId"))
if mibBuilder.loadTexts: himHWDataEntry.setStatus('current')
if mibBuilder.loadTexts: himHWDataEntry.setDescription('')
himHWDataPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWDataPabxId.setStatus('current')
if mibBuilder.loadTexts: himHWDataPabxId.setDescription('')
himHWArch = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWArch.setReference('Same as himDBConfSysHWArch.')
if mibBuilder.loadTexts: himHWArch.setStatus('current')
if mibBuilder.loadTexts: himHWArch.setDescription('This field contains the name of the hardware architecture.')
himHWArchType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWArchType.setReference('Same as himDBConfSysHWArchType.')
if mibBuilder.loadTexts: himHWArchType.setStatus('current')
if mibBuilder.loadTexts: himHWArchType.setDescription('This field contains the name of the hardware architecture type.')
himHWOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWOpMode.setReference('Should be the same as himDBConfSysOpMode.')
if mibBuilder.loadTexts: himHWOpMode.setStatus('current')
if mibBuilder.loadTexts: himHWOpMode.setDescription('This field contains the name of the operating mode.')
himHWSWUProc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWSWUProc1.setStatus('current')
if mibBuilder.loadTexts: himHWSWUProc1.setDescription('These fields contain the name of the SWU processor board (max. 8 characters). SWU = Switching Unit Possible values: - CC-A - CC-B ')
himHWSWUMem1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWSWUMem1.setStatus('current')
if mibBuilder.loadTexts: himHWSWUMem1.setDescription('These fields contain the size of the SWU memory for each processor board. SWU = Switching Unit')
himHWSWUProc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWSWUProc2.setStatus('current')
if mibBuilder.loadTexts: himHWSWUProc2.setDescription('These fields contain the name of the SWU processor board (max. 8 characters). SWU = Switching Unit Possible values: - CC-A - CC-B ')
himHWSWUMem2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWSWUMem2.setStatus('current')
if mibBuilder.loadTexts: himHWSWUMem2.setDescription('These fields contain the size of the SWU memory for each processor board. SWU = Switching Unit')
himHWADPProc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWADPProc.setStatus('current')
if mibBuilder.loadTexts: himHWADPProc.setDescription('This field contains the name of the ADP processor.')
himHWADPMem = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himHWADPMem.setStatus('current')
if mibBuilder.loadTexts: himHWADPMem.setDescription('This field contains the size of memory used by the ADP.')
himLWDataOnCB = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 4))
himLWDataOnCBTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 4, 1), )
if mibBuilder.loadTexts: himLWDataOnCBTable.setStatus('current')
if mibBuilder.loadTexts: himLWDataOnCBTable.setDescription('')
himLWDataOnCBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 4, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himLWDataOnCBPabxId"))
if mibBuilder.loadTexts: himLWDataOnCBEntry.setStatus('current')
if mibBuilder.loadTexts: himLWDataOnCBEntry.setDescription('')
himLWDataOnCBPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 4, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWDataOnCBPabxId.setStatus('current')
if mibBuilder.loadTexts: himLWDataOnCBPabxId.setDescription('')
himLWOnCBAss = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCBAss.setStatus('current')
if mibBuilder.loadTexts: himLWOnCBAss.setDescription('This field contains the hardware ID of the board. Note: Certain types of processor boards (e. g. DPC5) are using only firmware. Therefore, no loadware data is displayed and this field remains empty.')
himLWOnCBPBCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCBPBCAddr.setStatus('current')
if mibBuilder.loadTexts: himLWOnCBPBCAddr.setDescription('This field contains the peripheral board controller (PBC) address of the module. Note: Certain types of processor boards (e. g. DPC5) are using only firmware. Therefore, no loadware data is displayed and this field remains empty.')
himLWOnCBFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCBFileName.setStatus('current')
if mibBuilder.loadTexts: himLWOnCBFileName.setDescription('This field contains the filename of the loadware file. Note: Certain types of processor boards (e. g. DPC5) are using only firmware. Therefore, no loadware data is displayed and this field remains empty.')
himLWOnCBProdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCBProdTime.setStatus('current')
if mibBuilder.loadTexts: himLWOnCBProdTime.setDescription('This field contains the production date of the loadware. Note:Certain types of processor boards (e. g. DPC5) are using only firmware. Therefore, no loadware data is displayed and this field remains empty.')
himLWDataOnProc = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5))
himLWOnProcTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5, 1), )
if mibBuilder.loadTexts: himLWOnProcTable.setStatus('current')
if mibBuilder.loadTexts: himLWOnProcTable.setDescription('')
himLWOnProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himLWOnProcPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himLWOnProcAss"), (0, "SIEMENS-HP4KHIM-MIB", "himLWOnProcInfoType"))
if mibBuilder.loadTexts: himLWOnProcEntry.setStatus('current')
if mibBuilder.loadTexts: himLWOnProcEntry.setDescription('')
himLWOnProcPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnProcPabxId.setStatus('current')
if mibBuilder.loadTexts: himLWOnProcPabxId.setDescription('')
himLWOnProcAss = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnProcAss.setStatus('current')
if mibBuilder.loadTexts: himLWOnProcAss.setDescription('This field contains the name of the directory where the file with information on Loadware resides, e. g. CCA, CCB or ADP (max. 3 characters).')
himLWOnProcInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnProcInfoType.setStatus('current')
if mibBuilder.loadTexts: himLWOnProcInfoType.setDescription('This field contains the boot type. It represents the file name also.')
himLWOnProcLWId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnProcLWId.setStatus('current')
if mibBuilder.loadTexts: himLWOnProcLWId.setDescription('This field contains the name of the loadware.')
himLWOnProcLWIdCMP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnProcLWIdCMP.setStatus('current')
if mibBuilder.loadTexts: himLWOnProcLWIdCMP.setDescription("This field contains the name of the loadware ID for the CMP. This field contains the '-' character if it is not relevant to this board.")
himLWOnProcLWIdLP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 5, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnProcLWIdLP.setStatus('current')
if mibBuilder.loadTexts: himLWOnProcLWIdLP.setDescription("This field contains the name of the loadware ID for the LP. This field contains the '-' character if it is not relevant to this board.")
himLWDataOnCSIU = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6))
himLWOnCSIUTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1), )
if mibBuilder.loadTexts: himLWOnCSIUTable.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUTable.setDescription('This table contains the loadware data on the central SIU (Signaling Interface Unit).')
himLWOnCSIUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himLWOnCSIUPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himLWOnCSIUNominal"), (0, "SIEMENS-HP4KHIM-MIB", "himLWOnCSIULWNo"))
if mibBuilder.loadTexts: himLWOnCSIUEntry.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUEntry.setDescription('')
himLWOnCSIUPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCSIUPabxId.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUPabxId.setDescription('')
himLWOnCSIUNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCSIUNominal.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUNominal.setDescription('This field contains the name of the nominal SIU (Signaling Interface Unit).')
himLWOnCSIULWNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCSIULWNo.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIULWNo.setDescription('This field contains the name of the SIU (Signaling Interface Unit) loadware.')
himLWOnCSIUProc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCSIUProc.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUProc.setDescription('This field contains the name of the processor in the SIU (Signaling Interface Unit).')
himLWOnCSIUSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCSIUSlot.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUSlot.setDescription('This field contains the name of the SIU (Signaling Interface Unit) slot.')
himLWOnCSIUActual = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCSIUActual.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUActual.setDescription('This field contains the name of the current SIU (Signaling Interface Unit).')
himLWOnCSIUFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCSIUFileName.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUFileName.setDescription('This field contains the file name of the loadware file or of the initialization file.')
himLWOnCSIUFileProd = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 6, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himLWOnCSIUFileProd.setStatus('current')
if mibBuilder.loadTexts: himLWOnCSIUFileProd.setDescription('This field contains the date on which the loadware or the initialization file was generated.')
himMacAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 7))
himMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 7, 1), )
if mibBuilder.loadTexts: himMacAddrTable.setStatus('current')
if mibBuilder.loadTexts: himMacAddrTable.setDescription('This table contains the C-LAN and IPDA MAC addresses which are read during the boot process.')
himMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 7, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himMacAddrPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himMacAddrProc"), (0, "SIEMENS-HP4KHIM-MIB", "himMacAddrInfoType"))
if mibBuilder.loadTexts: himMacAddrEntry.setStatus('current')
if mibBuilder.loadTexts: himMacAddrEntry.setDescription('')
himMacAddrPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 7, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMacAddrPabxId.setStatus('current')
if mibBuilder.loadTexts: himMacAddrPabxId.setDescription('')
himMacAddrProc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMacAddrProc.setStatus('current')
if mibBuilder.loadTexts: himMacAddrProc.setDescription('This field contains the name of the processor (CCA, CCB or ADP - max 3 characters). It is also the name of the Unix directory where the file with information on MAC address resides.')
himMacAddrInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMacAddrInfoType.setStatus('current')
if mibBuilder.loadTexts: himMacAddrInfoType.setDescription('This field contains the condition on which the mac addresses are available.')
himMacAddrCLan = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 7, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMacAddrCLan.setStatus('current')
if mibBuilder.loadTexts: himMacAddrCLan.setDescription("This field contains the MAC address for UW7 part. The format is following: 'xx xx xx xx xx xx'.")
himMacAddrIPDA = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 6, 7, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMacAddrIPDA.setStatus('current')
if mibBuilder.loadTexts: himMacAddrIPDA.setDescription("This field contains the MAC address for RMX part. The format is following: 'xx xx xx xx xx xx'.")
himFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7))
himMarketingFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1))
himMarkFeatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1), )
if mibBuilder.loadTexts: himMarkFeatTable.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatTable.setDescription('')
himMarkFeatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himMarkFeatPabxId"))
if mibBuilder.loadTexts: himMarkFeatEntry.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatEntry.setDescription('')
himMarkFeatPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatPabxId.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatPabxId.setDescription('')
himMarkFeatVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatVer.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatVer.setDescription('This field contains the version of the software package. Format explanation: H 2 04 | |__SW version (01=EV1.0; 02=EV2.0; 03=EV3.0; 04=HiPath 4000 V1.0; 05=HiPath 4000 V2.0; 06=HiPath 4000 V3.0) | |_____Marketing concept (1=Old, 2=New)')
himMarkFeatSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatSerNo.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatSerNo.setDescription('This field contains the serial number of the software package.')
himMarkFeatHWId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatHWId.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatHWId.setDescription('This field contains the dongle ID of the hardware dongle connected.')
himMarkFeatInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatInstallDate.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatInstallDate.setDescription('This field contains the date on which the code word was entered.')
himMarkFeatExpiryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatExpiryDate.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatExpiryDate.setDescription('This field contains the date on which the code word will expire.')
himMarkFeatConfCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatConfCode.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatConfCode.setDescription('This field contains codeword entry confirmation code.')
himMarkFeatTrialModeAct = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 8), HimYesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatTrialModeAct.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatTrialModeAct.setDescription('This field shows whether trial mode is active. Possible values: - yes - trial mode is activated - no - trial mode is not activated')
himMarkFeatTrialRemDays = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himMarkFeatTrialRemDays.setStatus('current')
if mibBuilder.loadTexts: himMarkFeatTrialRemDays.setDescription('This field contains number of remaining days of an active trial mode.')
himSalesFeatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2), )
if mibBuilder.loadTexts: himSalesFeatTable.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatTable.setDescription('')
himSalesFeatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSalesFeatPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSalesFeatMarketPackId"))
if mibBuilder.loadTexts: himSalesFeatEntry.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatEntry.setDescription('')
himSalesFeatPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSalesFeatPabxId.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatPabxId.setDescription('')
himSalesFeatMarketPackId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSalesFeatMarketPackId.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatMarketPackId.setDescription('This column contains the CM ids of the marketing packages.')
himSalesFeatMarketPack = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSalesFeatMarketPack.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatMarketPack.setDescription('This column contains the names of the marketing packages.')
himSalesFeatContract = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSalesFeatContract.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatContract.setDescription('This column indicates whether the marketing packages have been purchased.')
himSalesFeatUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSalesFeatUsed.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatUsed.setDescription('This column indicates whether the marketing packages have been used.')
himSalesFeatFree = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSalesFeatFree.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatFree.setDescription('This field contains the number of free packages.')
himSalesFeatMarkForTrial = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSalesFeatMarkForTrial.setStatus('current')
if mibBuilder.loadTexts: himSalesFeatMarkForTrial.setDescription('This field contains the number of packages (entites) marked for trial or blocked (if the trial mode is not active).')
himTechFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 2))
himTechFeatTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 2, 1), )
if mibBuilder.loadTexts: himTechFeatTable.setStatus('current')
if mibBuilder.loadTexts: himTechFeatTable.setDescription('')
himTechFeatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 2, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himTechFeatPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himTechFeatId"))
if mibBuilder.loadTexts: himTechFeatEntry.setStatus('current')
if mibBuilder.loadTexts: himTechFeatEntry.setDescription('This table contains all enabled and disabled customer-specific features. Use the Object List view to display a list of all features availavle.')
himTechFeatPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 2, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechFeatPabxId.setStatus('current')
if mibBuilder.loadTexts: himTechFeatPabxId.setDescription('')
himTechFeatId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechFeatId.setStatus('current')
if mibBuilder.loadTexts: himTechFeatId.setDescription('This field contains the CM id of the customer-specific feature.')
himTechFeatName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechFeatName.setStatus('current')
if mibBuilder.loadTexts: himTechFeatName.setDescription('This field contains the name of the customer-specific feature.')
himTechFeatState = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 7, 2, 1, 1, 4), HimYesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himTechFeatState.setStatus('current')
if mibBuilder.loadTexts: himTechFeatState.setDescription('This field contains the status of the customer-specific feature.')
himAPSPatches = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8))
himSwitchAPS = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 1))
himSwitchAPSTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 1, 1), )
if mibBuilder.loadTexts: himSwitchAPSTable.setStatus('current')
if mibBuilder.loadTexts: himSwitchAPSTable.setDescription('')
himSwitchAPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 1, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSwitchAPSPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSwitchAPSName"))
if mibBuilder.loadTexts: himSwitchAPSEntry.setStatus('current')
if mibBuilder.loadTexts: himSwitchAPSEntry.setDescription('')
himSwitchAPSPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 1, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSwitchAPSPabxId.setStatus('current')
if mibBuilder.loadTexts: himSwitchAPSPabxId.setDescription('')
himSwitchAPSName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSwitchAPSName.setStatus('current')
if mibBuilder.loadTexts: himSwitchAPSName.setDescription('')
himSwitchAPSCorrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSwitchAPSCorrVer.setStatus('current')
if mibBuilder.loadTexts: himSwitchAPSCorrVer.setDescription('')
himSwitchAPSPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSwitchAPSPartNo.setStatus('current')
if mibBuilder.loadTexts: himSwitchAPSPartNo.setDescription('')
himReplacedAMOs = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 2))
himReplAMOTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 2, 1), )
if mibBuilder.loadTexts: himReplAMOTable.setStatus('current')
if mibBuilder.loadTexts: himReplAMOTable.setDescription('This table displays those AMOs that have been changed since the last system correction version.')
himReplAMOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 2, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himReplAMOPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himReplAMOAPS"), (0, "SIEMENS-HP4KHIM-MIB", "himReplAMOName"))
if mibBuilder.loadTexts: himReplAMOEntry.setStatus('current')
if mibBuilder.loadTexts: himReplAMOEntry.setDescription('')
himReplAMOPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 2, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himReplAMOPabxId.setStatus('current')
if mibBuilder.loadTexts: himReplAMOPabxId.setDescription('')
himReplAMOAPS = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himReplAMOAPS.setStatus('current')
if mibBuilder.loadTexts: himReplAMOAPS.setDescription('The APS in which the change has been made.')
himReplAMOName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himReplAMOName.setStatus('current')
if mibBuilder.loadTexts: himReplAMOName.setDescription('This field contains the name of the AMO command.')
himReplAMOInAPSDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himReplAMOInAPSDir.setStatus('current')
if mibBuilder.loadTexts: himReplAMOInAPSDir.setDescription('This field contains the name of the subsystem in the DIR file.')
himReplAMOSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himReplAMOSubsystem.setStatus('current')
if mibBuilder.loadTexts: himReplAMOSubsystem.setDescription('This field contains the name of the current subsystem.')
himPatchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3))
himPatchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1), )
if mibBuilder.loadTexts: himPatchInfoTable.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoTable.setDescription('This table contains information on the software patches that have been implemented.')
himPatchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himPatchInfoPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himPatchInfoPatchNo"))
if mibBuilder.loadTexts: himPatchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoEntry.setDescription('')
himPatchInfoPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPatchInfoPabxId.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoPabxId.setDescription('')
himPatchInfoPatchNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPatchInfoPatchNo.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoPatchNo.setDescription('This field contains the number of the patch.')
himPatchInfoPatchGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPatchInfoPatchGroup.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoPatchGroup.setDescription('This field contains the name of the patch group.')
himPatchInfoOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1, 1, 4), HimYesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPatchInfoOpt.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoOpt.setDescription('This field represents an indicator that the patch is: - optional: not part of patch packet, - not optional: a part of patch packet (represents the whole list of internal activated/deactivated patches). The purpose of this field is to give user an option to display all patches as well as only optional ones.')
himPatchInfoActHD = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPatchInfoActHD.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoActHD.setDescription('This field indicates whether the patch is enabled on the hard disk.')
himPatchInfoActADP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPatchInfoActADP.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoActADP.setDescription('This field indicates whether the patch is enabled on the ADP.')
himPatchInfoActBP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 8, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himPatchInfoActBP.setStatus('current')
if mibBuilder.loadTexts: himPatchInfoActBP.setDescription('This field indicates whether the patch is enabled on the A/B processor.')
himSWVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9))
himSWVerOnProcTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1), )
if mibBuilder.loadTexts: himSWVerOnProcTable.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcTable.setDescription('This table contains data on the software versions loaded on the processor boards.')
himSWVerOnProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSWVerOnProcPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSWVerOnProcSrc"))
if mibBuilder.loadTexts: himSWVerOnProcEntry.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcEntry.setDescription('')
himSWVerOnProcPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcPabxId.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcPabxId.setDescription('')
himSWVerOnProcSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcSrc.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcSrc.setDescription('This field contains the name of the software source.')
himSWVerOnProcSWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcSWVer.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcSWVer.setDescription('This field contains the name of the software version of the ADP software. The software version is displayed in the following format: [item-code-prefix][hipath-version][release-no][country-id][country-code][revision-no] e. g. P30252N 43 08 B 000 10')
himSWVerOnProcItemCodeNoPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcItemCodeNoPrefix.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcItemCodeNoPrefix.setDescription('This field contains the prefix of the software.')
himSWVerOnProcHP4KVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcHP4KVer.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcHP4KVer.setDescription('This field contains the Hicom/HiPath version.')
himSWVerOnProcSysRel = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcSysRel.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcSysRel.setDescription('This field contains the system release number.')
himSWVerOnProcCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcCountry.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcCountry.setDescription('This field contains the country identifier.')
himSWVerOnProcCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcCountryCode.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcCountryCode.setDescription('This field contains the country encoding.')
himSWVerOnProcRevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 9, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWVerOnProcRevNo.setStatus('current')
if mibBuilder.loadTexts: himSWVerOnProcRevNo.setDescription('This field contains the revision number of the ADP software.')
himSwPkgVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10))
himSWPkgVerTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10, 1), )
if mibBuilder.loadTexts: himSWPkgVerTable.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVerTable.setDescription('This table contains the software versions of the service functions. This data is retrieved using the UNIX command pgkinfo -l.')
himSWPkgVerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSWPkgVerPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSWPkgVerPkgAbbr"))
if mibBuilder.loadTexts: himSWPkgVerEntry.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVerEntry.setDescription('')
himSWPkgVerPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWPkgVerPabxId.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVerPabxId.setDescription('')
himSWPkgVerPkgAbbr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWPkgVerPkgAbbr.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVerPkgAbbr.setDescription('This field contains the abbreviation of the software package.')
himSWPkgVerPkgName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWPkgVerPkgName.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVerPkgName.setDescription('This field contains the name of the software package.')
himSWPkgVerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWPkgVerVersion.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVerVersion.setDescription('This field contains the version of the software package.')
himSWPkgVerInstAt = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWPkgVerInstAt.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVerInstAt.setDescription('This field contains the date on which the software package was installed.')
himSWPkgVerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("partial", 1), ("complete", 2), ("other", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSWPkgVerStatus.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVerStatus.setDescription('This field contains the status of the software package.')
himSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11))
himSysBasicTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 1), )
if mibBuilder.loadTexts: himSysBasicTable.setStatus('current')
if mibBuilder.loadTexts: himSysBasicTable.setDescription('This table complements the information about the HiPath 4000 system that is stored in the hicomSystem branch of the hicom MIB.')
himSysBasicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSysBasicPabxId"))
if mibBuilder.loadTexts: himSysBasicEntry.setStatus('current')
if mibBuilder.loadTexts: himSysBasicEntry.setDescription('')
himSysBasicPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysBasicPabxId.setStatus('current')
if mibBuilder.loadTexts: himSysBasicPabxId.setDescription('')
himSysBasicDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysBasicDomain.setStatus('current')
if mibBuilder.loadTexts: himSysBasicDomain.setDescription('This field contains the name of the domain to which the system is belonging.')
himSysBasicNodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysBasicNodeNo.setStatus('current')
if mibBuilder.loadTexts: himSysBasicNodeNo.setDescription("HiPath node number. This field contains the globally unique number of your own PABX. This has a hierarchical structure containing different levels in Version V1.0 and later. Up to three values of the format: L2- L1- L0 can be used for numbering a system. - L2: area number in level 2 - L1: area number in level 1 - L0: area number in level 0 or node number in the old sense. If the value '0' is selected for a level, this means that the relevant hierarchical level is not being used for node numbering: '0' is equal to 'nothing' or 'level is not set'. With the help of this new node number format it is now possible to implement node numbers in networks in which - just as with dial numbers - the network hierarchy is reflected in the node numbers. The same numbering level (= number of levels set in the node number) must be used for all nodes in a network. This field will always show a three-level display with leading zeroes for levels not used for systems in Version V1.0 and later. Example: - 0-0-100 for 1-level numbering - 0-1-101 for 2-level numbering - 1-2-300 for 3-level numbering Values: 0-9 and '-' with format 22-111-000 Level 0 (000) 0-999 Level 1 (111) 0-253 Level 2 (22) 0-29 Max. 10 digits")
himSysBasicLEGK = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 1, 1, 4), HimYesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysBasicLEGK.setStatus('current')
if mibBuilder.loadTexts: himSysBasicLEGK.setDescription("This field tells if the 'LEGK' feature is activated on the system. LEGK is a process within the call processing of HiPath 4000 with the following functions: - Gate keeper function: IP address resolution mechanism for IP trunking requiring the HG3550 board as hardware. - Resource Management: This function monitors network component usage for controlling IP trunking, IPDA scenarios, HFA and direct media connections. The LEGK can be activated at every HiPath 4000 in the network. Alternatively, it can be configured on a specific HiPath 4000 system only.")
himSysLANCardsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 2), )
if mibBuilder.loadTexts: himSysLANCardsTable.setStatus('current')
if mibBuilder.loadTexts: himSysLANCardsTable.setDescription('')
himSysLANCardsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 2, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSysLANCardsPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSysLANCardsIPAddr"))
if mibBuilder.loadTexts: himSysLANCardsEntry.setStatus('current')
if mibBuilder.loadTexts: himSysLANCardsEntry.setDescription('')
himSysLANCardsPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 2, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysLANCardsPabxId.setStatus('current')
if mibBuilder.loadTexts: himSysLANCardsPabxId.setDescription('')
himSysLANCardsIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysLANCardsIPAddr.setStatus('current')
if mibBuilder.loadTexts: himSysLANCardsIPAddr.setDescription('Unique IP address within the Customer LAN.')
himSysLANCardsNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysLANCardsNetMask.setStatus('current')
if mibBuilder.loadTexts: himSysLANCardsNetMask.setDescription('The netmask of the LAN card. It depends on the class of the LAN Card address.')
himSysLANCardsBroadCast = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysLANCardsBroadCast.setStatus('current')
if mibBuilder.loadTexts: himSysLANCardsBroadCast.setDescription('The broadcast address is used to send a datagram packet to all hosts of a network or subnetwork, e.g. for address propagation from a router. The broadcast address also depends on the LAN Card address.')
himSysLANCardsType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenring", 2), ("other", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysLANCardsType.setStatus('current')
if mibBuilder.loadTexts: himSysLANCardsType.setDescription('Type of the LAN card. Possible values are Ethernet and Token Ring.')
himSysLANCardsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("stale", 3), ("configured", 4), ("unconfigured", 5), ("other", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysLANCardsStatus.setStatus('current')
if mibBuilder.loadTexts: himSysLANCardsStatus.setDescription('The status of the configured LAN card. Can be one of the following: - Unknown (no traffic light lit): The LAN Card is configured, but no reboot has been performed. - Enabled (green traffic light lit): The LAN Card is active. - Disabled (red traffic light lit): The LAN Card is not active.')
himSysHostsTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 3), )
if mibBuilder.loadTexts: himSysHostsTable.setStatus('current')
if mibBuilder.loadTexts: himSysHostsTable.setDescription('')
himSysHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 3, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSysHostsPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSysHostsNo"))
if mibBuilder.loadTexts: himSysHostsEntry.setStatus('current')
if mibBuilder.loadTexts: himSysHostsEntry.setDescription('')
himSysHostsPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 3, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysHostsPabxId.setStatus('current')
if mibBuilder.loadTexts: himSysHostsPabxId.setDescription('')
himSysHostsNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysHostsNo.setStatus('current')
if mibBuilder.loadTexts: himSysHostsNo.setDescription('Index of the host entry.')
himSysHostsIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysHostsIPAddr.setStatus('current')
if mibBuilder.loadTexts: himSysHostsIPAddr.setDescription('The IP address of the host.')
himSysHostsName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysHostsName.setStatus('current')
if mibBuilder.loadTexts: himSysHostsName.setDescription('Unique name of the host.')
himSysWAMLConn = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4))
himSysWAMLConnTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1), )
if mibBuilder.loadTexts: himSysWAMLConnTable.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnTable.setDescription('')
himSysWAMLConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnLTG"), (0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnLTU"), (0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnSlot"))
if mibBuilder.loadTexts: himSysWAMLConnEntry.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnEntry.setDescription('')
himSysWAMLConnPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnPabxId.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnPabxId.setDescription('')
himSysWAMLConnLTG = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnLTG.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnLTG.setDescription('Line/trunk group number. Valid values: 1-1')
himSysWAMLConnLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnLTU.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnLTU.setDescription('Line/trunk unit. Valid values: 1-15, for IP Gateway DSP HW of NCUI STMI STMA WAML 1-99, for RG/ACGEN PER DIU SIUP TMD 17-99, for NCUI STMA WAML')
himSysWAMLConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnSlot.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnSlot.setDescription('Slot number of LTU (Line/Trunk Unit). Valid values: 1-121, for STMI, IP gateway, PER, RG, ACGEN, DIU, SIUP, TMD 1-145, for STMA, WAML')
himSysWAMLConnRufNr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1, 1, 5), HimPhoneNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnRufNr.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnRufNr.setDescription('Phone number of the WAML board.')
himSysWAMLConnBChl = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnBChl.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnBChl.setDescription('Number of b-channels on the WAML board.')
himSysWAMLConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnStatus.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnStatus.setDescription('Status of the WAML board.')
himSysWAMLConnIPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2), )
if mibBuilder.loadTexts: himSysWAMLConnIPTable.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPTable.setDescription('')
himSysWAMLConnIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPLTG"), (0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPLTU"), (0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPSlot"), (0, "SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPIfName"))
if mibBuilder.loadTexts: himSysWAMLConnIPEntry.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPEntry.setDescription('')
himSysWAMLConnIPPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnIPPabxId.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPPabxId.setDescription('')
himSysWAMLConnIPLTG = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnIPLTG.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPLTG.setDescription('Line/trunk group number. Valid values: 1-1')
himSysWAMLConnIPLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnIPLTU.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPLTU.setDescription('Line/trunk unit. Valid values: 1-15, for IP Gateway DSP HW of NCUI STMI STMA WAML 1-99, for RG/ACGEN PER DIU SIUP TMD 17-99, for NCUI STMA WAML')
himSysWAMLConnIPSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnIPSlot.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPSlot.setDescription('Slot number of LTU (Line/Trunk Unit). Valid values: 1-121, for STMI, IP gateway, PER, RG, ACGEN, DIU, SIUP, TMD 1-145, for STMA, WAML')
himSysWAMLConnIPIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnIPIfName.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPIfName.setDescription('Name of the interface.')
himSysWAMLConnIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnIPAddr.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPAddr.setDescription('IP address of the WAML connection.')
himSysWAMLConnIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 11, 4, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSysWAMLConnIPNetMask.setStatus('current')
if mibBuilder.loadTexts: himSysWAMLConnIPNetMask.setDescription('Net mask of the WAML connection.')
himBoards = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12))
himBoardBasicTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1), )
if mibBuilder.loadTexts: himBoardBasicTable.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicTable.setDescription('This table contains the boards that are managed by CM. It can be viewed as an extension of hicomBCSUTable. Please note that the PEN (LTG, LTU, Slot) of LTU boards is different from what is contained in CM, and uses the same format as in the hicom MIB.')
himBoardBasicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himBoardBasicPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himBoardBasicLTG"), (0, "SIEMENS-HP4KHIM-MIB", "himBoardBasicLTU"), (0, "SIEMENS-HP4KHIM-MIB", "himBoardBasicSlot"))
if mibBuilder.loadTexts: himBoardBasicEntry.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicEntry.setDescription('')
himBoardBasicPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicPabxId.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicPabxId.setDescription('')
himBoardBasicLTG = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicLTG.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicLTG.setDescription('Line/trunk group number. Valid values: 1-1')
himBoardBasicLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicLTU.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicLTU.setDescription('Line/trunk unit. Valid values: 1-15, for IP Gateway DSP HW of NCUI STMI STMA WAML 1-99, for RG/ACGEN PER DIU SIUP TMD 17-99, for NCUI STMA WAML')
himBoardBasicSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 145))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicSlot.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicSlot.setDescription('Slot number of LTU (Line/Trunk Unit). Valid values: 1-121, for STMI, IP gateway, PER, RG, ACGEN, DIU, SIUP, TMD 1-145, for STMA, WAML')
himBoardBasicFuncId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicFuncId.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicFuncId.setDescription('Function ID Valid values: 0-255 2 for SIU type 2 (MFV) 3 for SIU type 3 (MFC) 4 for SIU - RDS functionality 5 for SIU - ANI signaling 6 for SIU - CIS multifrequency (MFS) 7 for SIU - line testing')
himBoardBasicCat = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0))).clone(namedValues=NamedValues(("ltg", 1), ("ltu", 2), ("per", 3), ("perhw", 4), ("acgen", 5), ("diu", 6), ("ipgw", 7), ("rg", 8), ("siup", 9), ("tmd", 10), ("other", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicCat.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicCat.setDescription('Category The board type includes: LTG -- line/trunk group LTU -- line/trunk unit PER -- peripheral module PERHW -- load peripheral hardware ACGEN -- alternating current generator DIU -- digital interface unit IPGW -- IP gateway RG -- ring generator SIUP -- signalling unit periphery TMD -- T1 boards')
himBoardBasicName = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicName.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicName.setDescription('Name of the setup the board is configured to.')
himBoardBasicVOIPSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 8), HimYesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicVOIPSec.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicVOIPSec.setDescription('')
himBoardBasicLWVar = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicLWVar.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicLWVar.setDescription('The loadware variant. Default value: 0 Valid values: 0-9, A-D')
himBoardBasicNoCirc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardBasicNoCirc.setStatus('current')
if mibBuilder.loadTexts: himBoardBasicNoCirc.setDescription('Number of circuits to be configured. Valid values: 1-255')
himBoardIPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2), )
if mibBuilder.loadTexts: himBoardIPTable.setStatus('current')
if mibBuilder.loadTexts: himBoardIPTable.setDescription('This table contains the IP address configuration of the boards. Please note that not all fields are used for all boards.')
himBoardIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1), )
himBoardBasicEntry.registerAugmentions(("SIEMENS-HP4KHIM-MIB", "himBoardIPEntry"))
himBoardIPEntry.setIndexNames(*himBoardBasicEntry.getIndexNames())
if mibBuilder.loadTexts: himBoardIPEntry.setStatus('current')
if mibBuilder.loadTexts: himBoardIPEntry.setDescription('')
himBoardIPGwyIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPGwyIPAddr.setStatus('current')
if mibBuilder.loadTexts: himBoardIPGwyIPAddr.setDescription('IP address of the gateway. Valid for: STMI')
himBoardIPSrcIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPSrcIPAddr.setStatus('current')
if mibBuilder.loadTexts: himBoardIPSrcIPAddr.setDescription('Source IP address of STMI-HFA board. A valid Source IP address must always be specified in order to enable the IP phones to address the system (SWU) Default: 0.0.0.0 Valid for: HFA')
himBoardIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPNetMask.setStatus('current')
if mibBuilder.loadTexts: himBoardIPNetMask.setDescription('IP network mask. Valid for: HFA')
himBoardIPDefRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPDefRouter.setStatus('current')
if mibBuilder.loadTexts: himBoardIPDefRouter.setDescription('IP address of the default router within the LAN segment. The default router takes care of routing forward all packets with a destination address with a network part different from the own LAN segment. Default: 0.0.0.0 Valid for: HFA')
himBoardIPCustLANIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPCustLANIP.setStatus('current')
if mibBuilder.loadTexts: himBoardIPCustLANIP.setDescription('IP address of customer LAN. Default: 0.0.0.0 Valid for: IGW, SIP')
himBoardIPSTMI2IGWSubMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPSTMI2IGWSubMask.setStatus('current')
if mibBuilder.loadTexts: himBoardIPSTMI2IGWSubMask.setDescription('IP subnet mask of LAN segment. Default: 0.0.0.0 Valid for: IGW, SIP')
himBoardIPDefGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPDefGWIP.setStatus('current')
if mibBuilder.loadTexts: himBoardIPDefGWIP.setDescription('Default gateway IP address. Default: 0.0.0.0 Valid for: IGW, SIP')
himBoardIPManStatIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPManStatIP.setStatus('current')
if mibBuilder.loadTexts: himBoardIPManStatIP.setDescription('IP address of management station. Default: 0.0.0.0 Valid for: IGW, SIP')
himBoardIPManStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPManStatPort.setStatus('current')
if mibBuilder.loadTexts: himBoardIPManStatPort.setDescription('Port number of management station. Valid values: 1024 - 65535 Default: 0 Valid for: IGW, SIP')
himBoardIPBckpServIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPBckpServIP.setStatus('current')
if mibBuilder.loadTexts: himBoardIPBckpServIP.setDescription('IP address of backup server. Default: 0.0.0.0 Valid for: IGW, SIP')
himBoardIPBckpServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardIPBckpServPort.setStatus('current')
if mibBuilder.loadTexts: himBoardIPBckpServPort.setDescription("Port number of backup server. Default: 0 (0 means 'undefined port number') Valid for: IGW, SIP")
himBoardLocTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 3), )
if mibBuilder.loadTexts: himBoardLocTable.setStatus('current')
if mibBuilder.loadTexts: himBoardLocTable.setDescription('This table contains the location data of the boards. It is only available for boards of type DSX, LTUCA, LTUCE and LTUCX.')
himBoardLocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 3, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himBoardBasicPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himBoardBasicLTG"), (0, "SIEMENS-HP4KHIM-MIB", "himBoardBasicLTU"), (0, "SIEMENS-HP4KHIM-MIB", "himBoardBasicSlot"))
if mibBuilder.loadTexts: himBoardLocEntry.setStatus('current')
if mibBuilder.loadTexts: himBoardLocEntry.setDescription('')
himBoardLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardLocId.setStatus('current')
if mibBuilder.loadTexts: himBoardLocId.setDescription('Describes the location of the switch for the system configurator. Valid values: 0-999')
himBoardLocLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardLocLoc.setStatus('current')
if mibBuilder.loadTexts: himBoardLocLoc.setDescription('Postal address of the LTU (Line/Trunk Unit) shelf. Applies to the Local Connection Type. Valid values: text, up to 45 characters')
himBoardLocPhoneNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 3, 1, 3), HimPhoneNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardLocPhoneNo.setStatus('current')
if mibBuilder.loadTexts: himBoardLocPhoneNo.setDescription('Phone number at the shelf location. Valid values: 0-9, *, #, A-D, up to 22 characters')
himBoardLocFaxNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 12, 3, 1, 4), HimPhoneNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himBoardLocFaxNo.setStatus('current')
if mibBuilder.loadTexts: himBoardLocFaxNo.setDescription('Fax number at the shelf location. Valid values: 0-9, *, #, A-D, up to 22 characters')
himIPDA = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13))
himIPDAGenData = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1))
himIPDAGenTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 1), )
if mibBuilder.loadTexts: himIPDAGenTable.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenTable.setDescription('General settings that are true for all IPDAs.')
himIPDAGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himIPDAGenPabxId"))
if mibBuilder.loadTexts: himIPDAGenEntry.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenEntry.setDescription('')
himIPDAGenPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenPabxId.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenPabxId.setDescription('')
himIPDAGenSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenSpeed.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenSpeed.setDescription('Indicates the bit-rate speed. Valid values: 10 Mbits/s; 100 Mbits/s')
himIPDAGenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullduplex", 1), ("halfduplex", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenMode.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenMode.setDescription('Indicates the bit-rate mode. Valid values: Full Duplex, Half Duplex')
himIPDAGenPayConn = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenPayConn.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenPayConn.setDescription('TOS for VoIP payload connections to APs (CP). Valid values: 0-255')
himIPDAGenSigConn = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenSigConn.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenSigConn.setDescription('TOS for signalling connections to APs (FA). Valid values: 0-255')
himIPDAGenIPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 2), )
if mibBuilder.loadTexts: himIPDAGenIPTable.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenIPTable.setDescription('General IP settings that are true for all IPDAs.')
himIPDAGenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 2, 1), )
himIPDAGenEntry.registerAugmentions(("SIEMENS-HP4KHIM-MIB", "himIPDAGenIPEntry"))
himIPDAGenIPEntry.setIndexNames(*himIPDAGenEntry.getIndexNames())
if mibBuilder.loadTexts: himIPDAGenIPEntry.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenIPEntry.setDescription('')
himIPDAGenIPNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenIPNetAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenIPNetAddr.setDescription('IP net address of HiPath LAN segment.')
himIPDAGenIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenIPNetMask.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenIPNetMask.setDescription('IP net mask of HiPath LAN segment.')
himIPDAGenIPCCAAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenIPCCAAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenIPCCAAddr.setDescription('Address of the CC-A processor within the HiPath LAN segment.')
himIPDAGenIPCCBAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenIPCCBAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenIPCCBAddr.setDescription('Address of the CC-B processor within the HiPath LAN segment. Default value: 0.0.0.0')
himIPDAGenIPDefRoutAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenIPDefRoutAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenIPDefRoutAddr.setDescription('IP address of the default router within the HiPath LAN segment.')
himIPDAGenIPSurvNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAGenIPSurvNetAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAGenIPSurvNetAddr.setDescription('The IP address of the survivability net. Default value: 0.0.0.0')
himIPDAAPData = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2))
himIPDABasicTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 1), )
if mibBuilder.loadTexts: himIPDABasicTable.setStatus('current')
if mibBuilder.loadTexts: himIPDABasicTable.setDescription('This table stores IPDA information from CM.')
himIPDABasicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 1, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himIPDABasicPabxId"), (0, "SIEMENS-HP4KHIM-MIB", "himIPDABasicLTU"))
if mibBuilder.loadTexts: himIPDABasicEntry.setStatus('current')
if mibBuilder.loadTexts: himIPDABasicEntry.setDescription('')
himIPDABasicPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 1, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDABasicPabxId.setStatus('current')
if mibBuilder.loadTexts: himIPDABasicPabxId.setDescription('')
himIPDABasicLTU = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDABasicLTU.setStatus('current')
if mibBuilder.loadTexts: himIPDABasicLTU.setDescription('Line/trunk unit. Valid values: 17-99')
himIPDABasicConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 1, 1, 3), HimShelfNWType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDABasicConnType.setStatus('current')
if mibBuilder.loadTexts: himIPDABasicConnType.setDescription('Connection type of the shelf. Valid values: APDL -- AP shelf via IP - direct linked APNW -- AP shelf via IP - network')
himIPDABasicBChanNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDABasicBChanNo.setStatus('current')
if mibBuilder.loadTexts: himIPDABasicBChanNo.setDescription('Amount of B-Channels. Valid values: 1- 120')
himIPDABasicConvAMLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 1, 1, 5), HimYesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDABasicConvAMLaw.setStatus('current')
if mibBuilder.loadTexts: himIPDABasicConvAMLaw.setDescription('')
himIPDAIPTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 2), )
if mibBuilder.loadTexts: himIPDAIPTable.setStatus('current')
if mibBuilder.loadTexts: himIPDAIPTable.setDescription('This table contains the IP address configuration of the IPDAs.')
himIPDAIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 2, 1), )
himIPDABasicEntry.registerAugmentions(("SIEMENS-HP4KHIM-MIB", "himIPDAIPEntry"))
himIPDAIPEntry.setIndexNames(*himIPDABasicEntry.getIndexNames())
if mibBuilder.loadTexts: himIPDAIPEntry.setStatus('current')
if mibBuilder.loadTexts: himIPDAIPEntry.setDescription('')
himIPDAIPAccPtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAIPAccPtAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAIPAccPtAddr.setDescription('IP address of the access point in the AP network.')
himIPDAIPTAccPtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAIPTAccPtAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAIPTAccPtAddr.setDescription('IP address for the TAP/Service PC link at the access point. This IP address must be in the same network as the access point in the AP network.')
himIPDAIPAccPtRoutAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAIPAccPtRoutAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAIPAccPtRoutAddr.setDescription('IP address of the gateway (IP address of the router in the AP network).')
himIPDAIPNetMaskNW = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAIPNetMaskNW.setStatus('current')
if mibBuilder.loadTexts: himIPDAIPNetMaskNW.setDescription('Netmask of the network to which the respective Access Point in AP network belongs.')
himIPDAIPAccPtPriRoutAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAIPAccPtPriRoutAddr.setStatus('current')
if mibBuilder.loadTexts: himIPDAIPAccPtPriRoutAddr.setDescription('IP address of the primary signalling router for NCUI board (IP address of the router in the HiPath 4000 LAN segment). Required if the connection type is APDL.')
himIPDAIPNetMaskDL = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDAIPNetMaskDL.setStatus('current')
if mibBuilder.loadTexts: himIPDAIPNetMaskDL.setDescription('Netmask of the network to which the Access Point in AP internal network belongs.')
himIPDALocTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 3), )
if mibBuilder.loadTexts: himIPDALocTable.setStatus('current')
if mibBuilder.loadTexts: himIPDALocTable.setDescription('This table contains the location data of the boards. It is only available for boards of type DSX, LTUCA, LTUCE and LTUCX.')
himIPDALocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 3, 1), )
himIPDABasicEntry.registerAugmentions(("SIEMENS-HP4KHIM-MIB", "himIPDALocEntry"))
himIPDALocEntry.setIndexNames(*himIPDABasicEntry.getIndexNames())
if mibBuilder.loadTexts: himIPDALocEntry.setStatus('current')
if mibBuilder.loadTexts: himIPDALocEntry.setDescription('')
himIPDALocId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDALocId.setStatus('current')
if mibBuilder.loadTexts: himIPDALocId.setDescription('Describes the location of the switch for the system configurator. Valid values: 0-999')
himIPDALocLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDALocLoc.setStatus('current')
if mibBuilder.loadTexts: himIPDALocLoc.setDescription('Postal address of the LTU (Line/Trunk Unit) shelf. Applies to the Local Connection Type. Valid values: text, up to 45 characters')
himIPDALocPhoneNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 3, 1, 3), HimPhoneNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDALocPhoneNo.setStatus('current')
if mibBuilder.loadTexts: himIPDALocPhoneNo.setDescription('Phone number at the shelf location. Valid values: 0-9, *, #, A-D, up to 22 characters')
himIPDALocFaxNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 13, 2, 3, 1, 4), HimPhoneNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himIPDALocFaxNo.setStatus('current')
if mibBuilder.loadTexts: himIPDALocFaxNo.setDescription('Fax number at the shelf location. Valid values: 0-9, *, #, A-D, up to 22 characters')
himInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 14))
himSubagentLastMsgNo = MibScalar((1, 3, 6, 1, 4, 1, 4329, 2, 51, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSubagentLastMsgNo.setStatus('current')
if mibBuilder.loadTexts: himSubagentLastMsgNo.setDescription('The last message, warning or error number issued by the Him subagent.')
himSubagentLastMsgText = MibScalar((1, 3, 6, 1, 4, 1, 4329, 2, 51, 14, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himSubagentLastMsgText.setStatus('current')
if mibBuilder.loadTexts: himSubagentLastMsgText.setDescription('The last message, warning or error text issued by the Him subagent.')
himResultData = MibScalar((1, 3, 6, 1, 4, 1, 4329, 2, 51, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: himResultData.setStatus('current')
if mibBuilder.loadTexts: himResultData.setDescription("Is used for agent internal communication. Contains the PabxId of a Hicom for which the last discovery process was conveyed. Is SET by the discovery agent and indicates the availability of new discovered data. The new data is to be incorporated by the subagent into the subagent's data base.")
himDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15))
himChanges = MibScalar((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himChanges.setStatus('current')
if mibBuilder.loadTexts: himChanges.setDescription('Indicates the number of finished HIM discoveries - corresponds to the number of hicomHWDiscovXXX traps sent out.')
himDiscovTable = MibTable((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 2), )
if mibBuilder.loadTexts: himDiscovTable.setStatus('current')
if mibBuilder.loadTexts: himDiscovTable.setDescription('The table describing the status concerning discovery of HIM information.')
himDiscovEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 2, 1), ).setIndexNames((0, "SIEMENS-HP4KHIM-MIB", "himDiscovPabxId"))
if mibBuilder.loadTexts: himDiscovEntry.setStatus('current')
if mibBuilder.loadTexts: himDiscovEntry.setDescription('The entry describes the status of the discovery process. It is designed to comply with the structure of discovery entries in the hicom MIB, even though data is only provided for one switch.')
himDiscovPabxId = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 2, 1, 1), HimPabxId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDiscovPabxId.setStatus('current')
if mibBuilder.loadTexts: himDiscovPabxId.setDescription('Unique identifier of the Hicom being discovered.')
himDiscovPabxMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDiscovPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: himDiscovPabxMnemonic.setDescription('Name of the Hicom system.')
himDiscovStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 2, 1, 3), DiscoveryStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: himDiscovStatus.setStatus('current')
if mibBuilder.loadTexts: himDiscovStatus.setDescription('Status of discovery process. A managment station may initiate a discovery by setting this variable to value busy. The other values are set by the agent.')
himDiscovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 2, 1, 4), DiscoveryModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: himDiscovMode.setStatus('current')
if mibBuilder.loadTexts: himDiscovMode.setDescription('Mode of discovery process.')
himDiscovTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDiscovTimDat.setStatus('current')
if mibBuilder.loadTexts: himDiscovTimDat.setDescription('Date and time (year, month, day, hour, minute, second) the last successful discovery action was performed for the Hicom.')
himDiscovErrTimDat = MibTableColumn((1, 3, 6, 1, 4, 1, 4329, 2, 51, 15, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: himDiscovErrTimDat.setStatus('current')
if mibBuilder.loadTexts: himDiscovErrTimDat.setDescription('Date and time (year, month, day, hour, minute, second) the last failed discovery action was performed for the Hicom.')
himMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20))
himMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1))
himWelcomePageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 1)).setObjects(("SIEMENS-HP4KHIM-MIB", "himWelPgPabxId"), ("SIEMENS-HP4KHIM-MIB", "himWelPgSysNo"), ("SIEMENS-HP4KHIM-MIB", "himHP4KVersion"), ("SIEMENS-HP4KHIM-MIB", "himSystemRelease"), ("SIEMENS-HP4KHIM-MIB", "himRevisionLevel"), ("SIEMENS-HP4KHIM-MIB", "himHWArchitecture"), ("SIEMENS-HP4KHIM-MIB", "himHWArchitectureType"), ("SIEMENS-HP4KHIM-MIB", "himOperationMode"), ("SIEMENS-HP4KHIM-MIB", "himSWUProc1"), ("SIEMENS-HP4KHIM-MIB", "himSWUMemory1"), ("SIEMENS-HP4KHIM-MIB", "himSWUProc2"), ("SIEMENS-HP4KHIM-MIB", "himSWUMemory2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himWelcomePageGroup = himWelcomePageGroup.setStatus('current')
if mibBuilder.loadTexts: himWelcomePageGroup.setDescription('')
himSwitchDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 2)).setObjects(("SIEMENS-HP4KHIM-MIB", "himTechInfoPabxId"), ("SIEMENS-HP4KHIM-MIB", "himTechInfoInfoNo"), ("SIEMENS-HP4KHIM-MIB", "himTechInfoDate"), ("SIEMENS-HP4KHIM-MIB", "himTechInfoTechnicalData"), ("SIEMENS-HP4KHIM-MIB", "himTechInfoNumber"), ("SIEMENS-HP4KHIM-MIB", "himTechInfoExtraText"), ("SIEMENS-HP4KHIM-MIB", "himNotepadDataPabxId"), ("SIEMENS-HP4KHIM-MIB", "himNotepadDataInfoNo"), ("SIEMENS-HP4KHIM-MIB", "himNotepadDataDate"), ("SIEMENS-HP4KHIM-MIB", "himNotepadDataText"), ("SIEMENS-HP4KHIM-MIB", "himProjPlanPabxId"), ("SIEMENS-HP4KHIM-MIB", "himProjPlanInfoFile"), ("SIEMENS-HP4KHIM-MIB", "himProjPlanInfoCreationDate"), ("SIEMENS-HP4KHIM-MIB", "himProjPlanInfoCreationTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himSwitchDataGroup = himSwitchDataGroup.setStatus('current')
if mibBuilder.loadTexts: himSwitchDataGroup.setDescription('')
himSpecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 3)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataAddress"), ("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataFrameType"), ("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataLTU"), ("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataNetworkType"), ("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataNetworkAddress"), ("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataRemote"), ("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataLocation"), ("SIEMENS-HP4KHIM-MIB", "himSpecShelfDataLTUC"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardPEN"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardOverlayLTU"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardType"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardNominal"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardActual"), ("SIEMENS-HP4KHIM-MIB", "hhimSWUBoardFirmware"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardRev"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardFunctId"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardMode"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardLWNo"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardLWInterVer"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardLWName"), ("SIEMENS-HP4KHIM-MIB", "himSWUBoardLWDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himSpecGroup = himSpecGroup.setStatus('current')
if mibBuilder.loadTexts: himSpecGroup.setDescription('')
himSWUPeripheryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 4)).setObjects(("SIEMENS-HP4KHIM-MIB", "himPSIOAssPabxId"), ("SIEMENS-HP4KHIM-MIB", "himPSIOAssAssembly"), ("SIEMENS-HP4KHIM-MIB", "himPSIOAssPEN"), ("SIEMENS-HP4KHIM-MIB", "himPSIOAssActual"), ("SIEMENS-HP4KHIM-MIB", "himPSIOAssFirmware"), ("SIEMENS-HP4KHIM-MIB", "himSerialLinePabxId"), ("SIEMENS-HP4KHIM-MIB", "himSerialLineBoardType"), ("SIEMENS-HP4KHIM-MIB", "himSerialLineNumber"), ("SIEMENS-HP4KHIM-MIB", "himSerialLineSpeed"), ("SIEMENS-HP4KHIM-MIB", "himSerialLineLogDevName"), ("SIEMENS-HP4KHIM-MIB", "himSerialLineDevType"), ("SIEMENS-HP4KHIM-MIB", "himSerialLineType"), ("SIEMENS-HP4KHIM-MIB", "himSCSIDevPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSCSIDevId"), ("SIEMENS-HP4KHIM-MIB", "himSCSIDevType"), ("SIEMENS-HP4KHIM-MIB", "himSCSIDevName"), ("SIEMENS-HP4KHIM-MIB", "himSCSIDevFirmware"), ("SIEMENS-HP4KHIM-MIB", "himSCSIDevLoadDrive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himSWUPeripheryGroup = himSWUPeripheryGroup.setStatus('current')
if mibBuilder.loadTexts: himSWUPeripheryGroup.setDescription('')
himCentralSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 5)).setObjects(("SIEMENS-HP4KHIM-MIB", "himCabPabxId"), ("SIEMENS-HP4KHIM-MIB", "himCabAddr"), ("SIEMENS-HP4KHIM-MIB", "himCabPhysAddr"), ("SIEMENS-HP4KHIM-MIB", "himCabCabinet"), ("SIEMENS-HP4KHIM-MIB", "himCabPartNo"), ("SIEMENS-HP4KHIM-MIB", "himCabShelfNo"), ("SIEMENS-HP4KHIM-MIB", "himCabFrame"), ("SIEMENS-HP4KHIM-MIB", "himCabPid1"), ("SIEMENS-HP4KHIM-MIB", "himCabPid2"), ("SIEMENS-HP4KHIM-MIB", "himCabPid3"), ("SIEMENS-HP4KHIM-MIB", "himCabLTUNo"), ("SIEMENS-HP4KHIM-MIB", "himMemScalingPabxId"), ("SIEMENS-HP4KHIM-MIB", "himMemScalingUnit"), ("SIEMENS-HP4KHIM-MIB", "himMemScalingUsed"), ("SIEMENS-HP4KHIM-MIB", "himMemScalingMaxUsed"), ("SIEMENS-HP4KHIM-MIB", "himMemScalingAllocated"), ("SIEMENS-HP4KHIM-MIB", "himMemScalingStandard"), ("SIEMENS-HP4KHIM-MIB", "himMemScalingSysMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himCentralSwitchGroup = himCentralSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: himCentralSwitchGroup.setDescription('')
himGeneralSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 6)).setObjects(("SIEMENS-HP4KHIM-MIB", "himDBConfSysPabxId"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysClass1"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysClass2"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysHWAss1"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysHWAss2"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysDevLine1"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysDevLine2"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysOpMode"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysResType"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysHWArch"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysHWArchType"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysNo"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysLoc"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysBaseApp"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysDBApp"), ("SIEMENS-HP4KHIM-MIB", "himDBConfSysID"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWPabxId"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWLTG"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWLTU"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWLines"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWPorts"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWPBC"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWMTSBdPerGSN"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWSIUPPerLTU"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWDIUCPerLTU"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWHwyPerMTSBd"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWHDLCPerDCL"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWPBCPerDCL"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWStdSIULine"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWConfLine"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWDBDim"), ("SIEMENS-HP4KHIM-MIB", "himDBConfHWTableVer"), ("SIEMENS-HP4KHIM-MIB", "himHWDataPabxId"), ("SIEMENS-HP4KHIM-MIB", "himHWArch"), ("SIEMENS-HP4KHIM-MIB", "himHWArchType"), ("SIEMENS-HP4KHIM-MIB", "himHWOpMode"), ("SIEMENS-HP4KHIM-MIB", "himHWSWUProc1"), ("SIEMENS-HP4KHIM-MIB", "himHWSWUMem1"), ("SIEMENS-HP4KHIM-MIB", "himHWSWUProc2"), ("SIEMENS-HP4KHIM-MIB", "himHWSWUMem2"), ("SIEMENS-HP4KHIM-MIB", "himHWADPProc"), ("SIEMENS-HP4KHIM-MIB", "himHWADPMem"), ("SIEMENS-HP4KHIM-MIB", "himLWDataOnCBPabxId"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCBAss"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCBPBCAddr"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCBFileName"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCBProdTime"), ("SIEMENS-HP4KHIM-MIB", "himLWOnProcPabxId"), ("SIEMENS-HP4KHIM-MIB", "himLWOnProcAss"), ("SIEMENS-HP4KHIM-MIB", "himLWOnProcInfoType"), ("SIEMENS-HP4KHIM-MIB", "himLWOnProcLWId"), ("SIEMENS-HP4KHIM-MIB", "himLWOnProcLWIdCMP"), ("SIEMENS-HP4KHIM-MIB", "himLWOnProcLWIdLP"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCSIUPabxId"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCSIUProc"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCSIUSlot"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCSIUNominal"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCSIUActual"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCSIULWNo"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCSIUFileName"), ("SIEMENS-HP4KHIM-MIB", "himLWOnCSIUFileProd"), ("SIEMENS-HP4KHIM-MIB", "himMacAddrPabxId"), ("SIEMENS-HP4KHIM-MIB", "himMacAddrProc"), ("SIEMENS-HP4KHIM-MIB", "himMacAddrInfoType"), ("SIEMENS-HP4KHIM-MIB", "himMacAddrCLan"), ("SIEMENS-HP4KHIM-MIB", "himMacAddrIPDA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himGeneralSwitchGroup = himGeneralSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: himGeneralSwitchGroup.setDescription('')
himFeaturesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 7)).setObjects(("SIEMENS-HP4KHIM-MIB", "himMacAddrPabxId"), ("SIEMENS-HP4KHIM-MIB", "himMacAddrProc"), ("SIEMENS-HP4KHIM-MIB", "himMacAddrCLan"), ("SIEMENS-HP4KHIM-MIB", "himMacAddrIPDA"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatPabxId"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatVer"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatSerNo"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatHWId"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatInstallDate"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatExpiryDate"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatConfCode"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatTrialModeAct"), ("SIEMENS-HP4KHIM-MIB", "himMarkFeatTrialRemDays"), ("SIEMENS-HP4KHIM-MIB", "himSalesFeatPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSalesFeatMarketPackId"), ("SIEMENS-HP4KHIM-MIB", "himSalesFeatMarketPack"), ("SIEMENS-HP4KHIM-MIB", "himSalesFeatContract"), ("SIEMENS-HP4KHIM-MIB", "himSalesFeatUsed"), ("SIEMENS-HP4KHIM-MIB", "himSalesFeatFree"), ("SIEMENS-HP4KHIM-MIB", "himSalesFeatMarkForTrial"), ("SIEMENS-HP4KHIM-MIB", "himTechFeatPabxId"), ("SIEMENS-HP4KHIM-MIB", "himTechFeatId"), ("SIEMENS-HP4KHIM-MIB", "himTechFeatName"), ("SIEMENS-HP4KHIM-MIB", "himTechFeatState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himFeaturesGroup = himFeaturesGroup.setStatus('current')
if mibBuilder.loadTexts: himFeaturesGroup.setDescription('')
himAPSPatchesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 8)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSwitchAPSPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSwitchAPSName"), ("SIEMENS-HP4KHIM-MIB", "himSwitchAPSCorrVer"), ("SIEMENS-HP4KHIM-MIB", "himSwitchAPSPartNo"), ("SIEMENS-HP4KHIM-MIB", "himReplAMOPabxId"), ("SIEMENS-HP4KHIM-MIB", "himReplAMOAPS"), ("SIEMENS-HP4KHIM-MIB", "himReplAMOName"), ("SIEMENS-HP4KHIM-MIB", "himReplAMOInAPSDir"), ("SIEMENS-HP4KHIM-MIB", "himReplAMOSubsystem"), ("SIEMENS-HP4KHIM-MIB", "himPatchInfoPabxId"), ("SIEMENS-HP4KHIM-MIB", "himPatchInfoPatchNo"), ("SIEMENS-HP4KHIM-MIB", "himPatchInfoPatchGroup"), ("SIEMENS-HP4KHIM-MIB", "himPatchInfoOpt"), ("SIEMENS-HP4KHIM-MIB", "himPatchInfoActHD"), ("SIEMENS-HP4KHIM-MIB", "himPatchInfoActADP"), ("SIEMENS-HP4KHIM-MIB", "himPatchInfoActBP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himAPSPatchesGroup = himAPSPatchesGroup.setStatus('current')
if mibBuilder.loadTexts: himAPSPatchesGroup.setDescription('')
himSWVersionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 9)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcSrc"), ("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcSWVer"), ("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcItemCodeNoPrefix"), ("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcHP4KVer"), ("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcSysRel"), ("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcCountry"), ("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcCountryCode"), ("SIEMENS-HP4KHIM-MIB", "himSWVerOnProcRevNo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himSWVersionGroup = himSWVersionGroup.setStatus('current')
if mibBuilder.loadTexts: himSWVersionGroup.setDescription('')
himSWPkgVersionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 10)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSWPkgVerPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSWPkgVerPkgAbbr"), ("SIEMENS-HP4KHIM-MIB", "himSWPkgVerPkgName"), ("SIEMENS-HP4KHIM-MIB", "himSWPkgVerVersion"), ("SIEMENS-HP4KHIM-MIB", "himSWPkgVerInstAt"), ("SIEMENS-HP4KHIM-MIB", "himSWPkgVerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himSWPkgVersionGroup = himSWPkgVersionGroup.setStatus('current')
if mibBuilder.loadTexts: himSWPkgVersionGroup.setDescription('')
himSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 11)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSysBasicPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSysBasicDomain"), ("SIEMENS-HP4KHIM-MIB", "himSysBasicNodeNo"), ("SIEMENS-HP4KHIM-MIB", "himSysBasicLEGK"), ("SIEMENS-HP4KHIM-MIB", "himSysLANCardsPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSysLANCardsIPAddr"), ("SIEMENS-HP4KHIM-MIB", "himSysLANCardsNetMask"), ("SIEMENS-HP4KHIM-MIB", "himSysLANCardsBroadCast"), ("SIEMENS-HP4KHIM-MIB", "himSysLANCardsType"), ("SIEMENS-HP4KHIM-MIB", "himSysLANCardsStatus"), ("SIEMENS-HP4KHIM-MIB", "himSysHostsPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSysHostsNo"), ("SIEMENS-HP4KHIM-MIB", "himSysHostsIPAddr"), ("SIEMENS-HP4KHIM-MIB", "himSysHostsName"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnLTG"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnLTU"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnSlot"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnRufNr"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnBChl"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnStatus"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPPabxId"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPLTG"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPLTU"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPSlot"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPIfName"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPAddr"), ("SIEMENS-HP4KHIM-MIB", "himSysWAMLConnIPNetMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himSystemGroup = himSystemGroup.setStatus('current')
if mibBuilder.loadTexts: himSystemGroup.setDescription('')
himBoardsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 12)).setObjects(("SIEMENS-HP4KHIM-MIB", "himBoardBasicPabxId"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicLTG"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicLTU"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicSlot"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicFuncId"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicCat"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicName"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicVOIPSec"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicLWVar"), ("SIEMENS-HP4KHIM-MIB", "himBoardBasicNoCirc"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPGwyIPAddr"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPSrcIPAddr"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPNetMask"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPDefRouter"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPCustLANIP"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPSTMI2IGWSubMask"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPDefGWIP"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPManStatIP"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPManStatPort"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPBckpServIP"), ("SIEMENS-HP4KHIM-MIB", "himBoardIPBckpServPort"), ("SIEMENS-HP4KHIM-MIB", "himBoardLocId"), ("SIEMENS-HP4KHIM-MIB", "himBoardLocLoc"), ("SIEMENS-HP4KHIM-MIB", "himBoardLocPhoneNo"), ("SIEMENS-HP4KHIM-MIB", "himBoardLocFaxNo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himBoardsGroup = himBoardsGroup.setStatus('current')
if mibBuilder.loadTexts: himBoardsGroup.setDescription('')
himIPDAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 13)).setObjects(("SIEMENS-HP4KHIM-MIB", "himIPDABasicPabxId"), ("SIEMENS-HP4KHIM-MIB", "himIPDABasicLTU"), ("SIEMENS-HP4KHIM-MIB", "himIPDABasicConnType"), ("SIEMENS-HP4KHIM-MIB", "himIPDABasicBChanNo"), ("SIEMENS-HP4KHIM-MIB", "himIPDABasicConvAMLaw"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenPabxId"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenSpeed"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenMode"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenPayConn"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenSigConn"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenIPNetAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenIPNetMask"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenIPCCAAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenIPCCBAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenIPDefRoutAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAGenIPSurvNetAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAIPAccPtAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAIPTAccPtAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAIPAccPtRoutAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAIPNetMaskNW"), ("SIEMENS-HP4KHIM-MIB", "himIPDAIPAccPtPriRoutAddr"), ("SIEMENS-HP4KHIM-MIB", "himIPDAIPNetMaskDL"), ("SIEMENS-HP4KHIM-MIB", "himIPDALocId"), ("SIEMENS-HP4KHIM-MIB", "himIPDALocLoc"), ("SIEMENS-HP4KHIM-MIB", "himIPDALocPhoneNo"), ("SIEMENS-HP4KHIM-MIB", "himIPDALocFaxNo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himIPDAGroup = himIPDAGroup.setStatus('current')
if mibBuilder.loadTexts: himIPDAGroup.setDescription('')
himInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 14)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSubagentLastMsgNo"), ("SIEMENS-HP4KHIM-MIB", "himSubagentLastMsgText"), ("SIEMENS-HP4KHIM-MIB", "himResultData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himInfoGroup = himInfoGroup.setStatus('current')
if mibBuilder.loadTexts: himInfoGroup.setDescription('')
himDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 15)).setObjects(("SIEMENS-HP4KHIM-MIB", "himChanges"), ("SIEMENS-HP4KHIM-MIB", "himDiscovPabxId"), ("SIEMENS-HP4KHIM-MIB", "himDiscovPabxMnemonic"), ("SIEMENS-HP4KHIM-MIB", "himDiscovStatus"), ("SIEMENS-HP4KHIM-MIB", "himDiscovMode"), ("SIEMENS-HP4KHIM-MIB", "himDiscovTimDat"), ("SIEMENS-HP4KHIM-MIB", "himDiscovErrTimDat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himDiscoveryGroup = himDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: himDiscoveryGroup.setDescription('')
himTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4329, 2, 51, 20, 1, 16)).setObjects(("SIEMENS-HP4KHIM-MIB", "internalMessageHimSubagent"), ("SIEMENS-HP4KHIM-MIB", "internalWarningHimSubagent"), ("SIEMENS-HP4KHIM-MIB", "internalErrorHimSubagent"), ("SIEMENS-HP4KHIM-MIB", "himDiscovSucc"), ("SIEMENS-HP4KHIM-MIB", "himDiscovErr"), ("SIEMENS-HP4KHIM-MIB", "himDiscovBusy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    himTrapsGroup = himTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: himTrapsGroup.setDescription('')
himTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21))
himTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 1))
himTrapPabxId = MibScalar((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 1, 1), Integer32())
if mibBuilder.loadTexts: himTrapPabxId.setStatus('current')
if mibBuilder.loadTexts: himTrapPabxId.setDescription('Unique identifier of a Hicom system.')
himTrapPabxMnemonic = MibScalar((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 1, 2), DisplayString())
if mibBuilder.loadTexts: himTrapPabxMnemonic.setStatus('current')
if mibBuilder.loadTexts: himTrapPabxMnemonic.setDescription('Mnemonic name of the Hicom system.')
himTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 2))
internalMessageHimSubagent = NotificationType((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 2, 0)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSubagentLastMsgNo"), ("SIEMENS-HP4KHIM-MIB", "himSubagentLastMsgText"))
if mibBuilder.loadTexts: internalMessageHimSubagent.setStatus('current')
if mibBuilder.loadTexts: internalMessageHimSubagent.setDescription('An internalMessage trap contains an informational message generated by the subagent.')
internalWarningHimSubagent = NotificationType((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 2, 1)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSubagentLastMsgNo"), ("SIEMENS-HP4KHIM-MIB", "himSubagentLastMsgText"))
if mibBuilder.loadTexts: internalWarningHimSubagent.setStatus('current')
if mibBuilder.loadTexts: internalWarningHimSubagent.setDescription('An internalWarning trap contains a warning message generated by a subagent.')
internalErrorHimSubagent = NotificationType((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 2, 2)).setObjects(("SIEMENS-HP4KHIM-MIB", "himSubagentLastMsgNo"), ("SIEMENS-HP4KHIM-MIB", "himSubagentLastMsgText"))
if mibBuilder.loadTexts: internalErrorHimSubagent.setStatus('current')
if mibBuilder.loadTexts: internalErrorHimSubagent.setDescription('An internalError trap contains an error message generated by a subagent. After issuing this trap, the agent terminates.')
himDiscovSucc = NotificationType((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 2, 10)).setObjects(("SIEMENS-HP4KHIM-MIB", "himTrapPabxId"), ("SIEMENS-HP4KHIM-MIB", "himTrapPabxMnemonic"))
if mibBuilder.loadTexts: himDiscovSucc.setStatus('current')
if mibBuilder.loadTexts: himDiscovSucc.setDescription('A himDiscovSucc trap indicates the successful termination of a discovery process.')
himDiscovErr = NotificationType((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 2, 11)).setObjects(("SIEMENS-HP4KHIM-MIB", "himTrapPabxId"), ("SIEMENS-HP4KHIM-MIB", "himTrapPabxMnemonic"))
if mibBuilder.loadTexts: himDiscovErr.setStatus('current')
if mibBuilder.loadTexts: himDiscovErr.setDescription('A himDiscovErr trap signifies the unsuccessful termination of a discovery process.')
himDiscovBusy = NotificationType((1, 3, 6, 1, 4, 1, 4329, 2, 51, 21, 2, 19)).setObjects(("SIEMENS-HP4KHIM-MIB", "himTrapPabxId"), ("SIEMENS-HP4KHIM-MIB", "himTrapPabxMnemonic"))
if mibBuilder.loadTexts: himDiscovBusy.setStatus('current')
if mibBuilder.loadTexts: himDiscovBusy.setDescription('A himDiscovBusy trap signifies that a sw discovery process is running.')
mibBuilder.exportSymbols("SIEMENS-HP4KHIM-MIB", himBoardLocEntry=himBoardLocEntry, himIPDABasicLTU=himIPDABasicLTU, himIPDALocId=himIPDALocId, himMemScalingMaxUsed=himMemScalingMaxUsed, himMacAddrEntry=himMacAddrEntry, himSerialLineLogDevName=himSerialLineLogDevName, himIPDAGenIPNetMask=himIPDAGenIPNetMask, himDBConfHWMTSBdPerGSN=himDBConfHWMTSBdPerGSN, internalErrorHimSubagent=internalErrorHimSubagent, himDBConfSysOpMode=himDBConfSysOpMode, himSysHostsTable=himSysHostsTable, himLWOnCSIUEntry=himLWOnCSIUEntry, himIPDAGroup=himIPDAGroup, himDBConfSysLoc=himDBConfSysLoc, himTrapVariables=himTrapVariables, himLWOnProcInfoType=himLWOnProcInfoType, himSpecShelfDataNetworkAddress=himSpecShelfDataNetworkAddress, himProjPlanInfoCreationTime=himProjPlanInfoCreationTime, himDBConfSysID=himDBConfSysID, himTechInfoDate=himTechInfoDate, himSysWAMLConn=himSysWAMLConn, himSysLANCardsNetMask=himSysLANCardsNetMask, himIPDAIPAccPtAddr=himIPDAIPAccPtAddr, himSysWAMLConnPabxId=himSysWAMLConnPabxId, himMemScalingUsed=himMemScalingUsed, himTechInfoInfoNo=himTechInfoInfoNo, himDBConfSysDBApp=himDBConfSysDBApp, himSerialLineDevType=himSerialLineDevType, himMibConformance=himMibConformance, himDiscovPabxId=himDiscovPabxId, himPatchInfoTable=himPatchInfoTable, himBoardIPSrcIPAddr=himBoardIPSrcIPAddr, himSysHostsIPAddr=himSysHostsIPAddr, himHP4KVersion=himHP4KVersion, himSWUPeriphery=himSWUPeriphery, himTechFeatName=himTechFeatName, himDBConfSysClass2=himDBConfSysClass2, himSWVerOnProcEntry=himSWVerOnProcEntry, PYSNMP_MODULE_ID=hp4khim, himSWUBoardLWName=himSWUBoardLWName, himLWOnProcLWId=himLWOnProcLWId, himIPDAIPNetMaskDL=himIPDAIPNetMaskDL, himSWPkgVerPkgAbbr=himSWPkgVerPkgAbbr, himBoardLocTable=himBoardLocTable, himBoardIPBckpServPort=himBoardIPBckpServPort, himDBConfHWPBCPerDCL=himDBConfHWPBCPerDCL, himSpecShelfDataTable=himSpecShelfDataTable, himHWArchitecture=himHWArchitecture, himTechInfoTable=himTechInfoTable, himNotepadDataText=himNotepadDataText, himSWUBoardLWInterVer=himSWUBoardLWInterVer, himIPDABasicEntry=himIPDABasicEntry, himTrapPabxMnemonic=himTrapPabxMnemonic, himBoardIPGwyIPAddr=himBoardIPGwyIPAddr, himNotepadDataDate=himNotepadDataDate, himHWArch=himHWArch, himSWVerOnProcSrc=himSWVerOnProcSrc, himSpecShelfDataPabxId=himSpecShelfDataPabxId, himBoardIPManStatIP=himBoardIPManStatIP, himPSIOAssAssembly=himPSIOAssAssembly, himProjPlanInfoTable=himProjPlanInfoTable, himLWOnCSIUProc=himLWOnCSIUProc, himSWUPeripheryGroup=himSWUPeripheryGroup, himHWArchitectureType=himHWArchitectureType, himTechInfoExtraText=himTechInfoExtraText, himDBConfHWHwyPerMTSBd=himDBConfHWHwyPerMTSBd, himSCSIDevTable=himSCSIDevTable, himLWDataOnCB=himLWDataOnCB, himBoardBasicPabxId=himBoardBasicPabxId, himSWUProc2=himSWUProc2, himMarkFeatTrialRemDays=himMarkFeatTrialRemDays, himSWUBoardType=himSWUBoardType, himMarkFeatPabxId=himMarkFeatPabxId, himSWVerOnProcItemCodeNoPrefix=himSWVerOnProcItemCodeNoPrefix, himIPDABasicConvAMLaw=himIPDABasicConvAMLaw, himSwitchAPSName=himSwitchAPSName, himReplAMOPabxId=himReplAMOPabxId, himBoardBasicName=himBoardBasicName, HimPhoneNumber=HimPhoneNumber, himBoardBasicVOIPSec=himBoardBasicVOIPSec, himLWOnCSIUActual=himLWOnCSIUActual, himSCSIDevEntry=himSCSIDevEntry, himSWPkgVerStatus=himSWPkgVerStatus, himSpecShelfDataRemote=himSpecShelfDataRemote, himPSIOAssPabxId=himPSIOAssPabxId, himLWOnProcTable=himLWOnProcTable, himSalesFeatEntry=himSalesFeatEntry, himSalesFeatMarketPack=himSalesFeatMarketPack, himDBConfSysNo=himDBConfSysNo, himIPDAGenMode=himIPDAGenMode, himIPDAGenIPDefRoutAddr=himIPDAGenIPDefRoutAddr, himSysHostsEntry=himSysHostsEntry, himTechFeatures=himTechFeatures, himGeneralSwitchGroup=himGeneralSwitchGroup, himCabPabxId=himCabPabxId, himSpecShelfDataLTU=himSpecShelfDataLTU, himPatchInfoPatchNo=himPatchInfoPatchNo, himDBConfHWDIUCPerLTU=himDBConfHWDIUCPerLTU, himSWPkgVerTable=himSWPkgVerTable, himInfoGroup=himInfoGroup, himSysWAMLConnIPPabxId=himSysWAMLConnIPPabxId, himProjPlanInfoCreationDate=himProjPlanInfoCreationDate, himSerialLineBoardType=himSerialLineBoardType, himSWVerOnProcRevNo=himSWVerOnProcRevNo, himTechInfoPabxId=himTechInfoPabxId, himDiscovery=himDiscovery, himFeatures=himFeatures, himIPDAGenSpeed=himIPDAGenSpeed, himIPDAIPAccPtPriRoutAddr=himIPDAIPAccPtPriRoutAddr, himDBConfSysEntry=himDBConfSysEntry, himDBConfSysClass1=himDBConfSysClass1, himDBConfSysDevLine2=himDBConfSysDevLine2, himWelPgPabxId=himWelPgPabxId, himMarkFeatVer=himMarkFeatVer, himSysWAMLConnTable=himSysWAMLConnTable, himDBConfHWLTG=himDBConfHWLTG, himReplAMOTable=himReplAMOTable, himMarketingFeatures=himMarketingFeatures, himProjPlanInfoEntry=himProjPlanInfoEntry, himSalesFeatContract=himSalesFeatContract, himGeneralSwitchData=himGeneralSwitchData, himDBConfSysResType=himDBConfSysResType, himDiscovSucc=himDiscovSucc, hhimSWUBoardFirmware=hhimSWUBoardFirmware, himTechFeatEntry=himTechFeatEntry, himHWSWUMem1=himHWSWUMem1, himHWADPProc=himHWADPProc, himOperationMode=himOperationMode, himPSIOAssEntry=himPSIOAssEntry, himSwitchAPSEntry=himSwitchAPSEntry, himSerialLinePabxId=himSerialLinePabxId, himSysLANCardsTable=himSysLANCardsTable, himDBConfSysTable=himDBConfSysTable, himPatchInfoActADP=himPatchInfoActADP, himLWOnCBPBCAddr=himLWOnCBPBCAddr, himIPDABasicTable=himIPDABasicTable, himSCSIDevType=himSCSIDevType, himSWUBoardTable=himSWUBoardTable, himSWPkgVerInstAt=himSWPkgVerInstAt, himIPDALocEntry=himIPDALocEntry, himMarkFeatTable=himMarkFeatTable, himReplAMOSubsystem=himReplAMOSubsystem, himPatchInfoEntry=himPatchInfoEntry, himLWDataOnCBTable=himLWDataOnCBTable, himSysWAMLConnLTG=himSysWAMLConnLTG, himLWOnCSIUPabxId=himLWOnCSIUPabxId, himDBConfHWPBC=himDBConfHWPBC, himDBConfHWPorts=himDBConfHWPorts, himMacAddrInfoType=himMacAddrInfoType, DiscoveryModes=DiscoveryModes, himSysLANCardsIPAddr=himSysLANCardsIPAddr, himLWOnCSIULWNo=himLWOnCSIULWNo, himIPDAIPEntry=himIPDAIPEntry, himSpecShelfDataLocation=himSpecShelfDataLocation, himDBConfSysPabxId=himDBConfSysPabxId, himSpecShelfDataNetworkType=himSpecShelfDataNetworkType, himSWUBoardPEN=himSWUBoardPEN, himSalesFeatFree=himSalesFeatFree, himPatchInfo=himPatchInfo, himSysHostsNo=himSysHostsNo, himSWPkgVerEntry=himSWPkgVerEntry, himDiscovStatus=himDiscovStatus, himReplacedAMOs=himReplacedAMOs, himReplAMOInAPSDir=himReplAMOInAPSDir, himMacAddrProc=himMacAddrProc, himNotepadDataEntry=himNotepadDataEntry, himCabPhysAddr=himCabPhysAddr, himLWOnCSIUFileName=himLWOnCSIUFileName, himWelcomePageGroup=himWelcomePageGroup, himSerialLineNumber=himSerialLineNumber, himLWOnProcAss=himLWOnProcAss, himDBConfSysHWArch=himDBConfSysHWArch, himSWVerOnProcCountry=himSWVerOnProcCountry, himSwitchAPSPartNo=himSwitchAPSPartNo, himIPDAGenTable=himIPDAGenTable, himDBConfHWEntry=himDBConfHWEntry, himDBConfHWTable=himDBConfHWTable, himSCSIDevId=himSCSIDevId, himMacAddrTable=himMacAddrTable, himCabShelfNo=himCabShelfNo, himMemScalingTable=himMemScalingTable, himSWPkgVerPabxId=himSWPkgVerPabxId, himBoardLocLoc=himBoardLocLoc, himIPDAAPData=himIPDAAPData, himIPDAIPTAccPtAddr=himIPDAIPTAccPtAddr, himIPDAGenPabxId=himIPDAGenPabxId, himBoardBasicCat=himBoardBasicCat, himIPDAGenIPCCAAddr=himIPDAGenIPCCAAddr, himTechFeatPabxId=himTechFeatPabxId, himDBConfHWLines=himDBConfHWLines, himMarkFeatInstallDate=himMarkFeatInstallDate, himSysBasicTable=himSysBasicTable, himIPDAGenData=himIPDAGenData, himSysLANCardsEntry=himSysLANCardsEntry, himHWDataPabxId=himHWDataPabxId, himBoardBasicLTG=himBoardBasicLTG, himBoardLocFaxNo=himBoardLocFaxNo, himLWOnProcLWIdLP=himLWOnProcLWIdLP, himMemScalingPabxId=himMemScalingPabxId, himSCSIDevFirmware=himSCSIDevFirmware, himTechInfoNumber=himTechInfoNumber, himSpecGroup=himSpecGroup, himBoardBasicLWVar=himBoardBasicLWVar, himMarkFeatHWId=himMarkFeatHWId, himCabinetTable=himCabinetTable, himSWPkgVersionGroup=himSWPkgVersionGroup, himDBConfSysHWArchType=himDBConfSysHWArchType, himSwPkgVersion=himSwPkgVersion, himSysWAMLConnStatus=himSysWAMLConnStatus, hp4khim=hp4khim, himIPDA=himIPDA, himCabinetEntry=himCabinetEntry, himRevisionLevel=himRevisionLevel, himSWPkgVerVersion=himSWPkgVerVersion, himSpecSwitchData=himSpecSwitchData, himCabFrame=himCabFrame, himSysHostsName=himSysHostsName, himIPDAIPNetMaskNW=himIPDAIPNetMaskNW, himWelPgSysNo=himWelPgSysNo, himSWUBoardMode=himSWUBoardMode, himDiscovTimDat=himDiscovTimDat, himSystemRelease=himSystemRelease, himWelPgEntry=himWelPgEntry, himResultData=himResultData, himSysBasicEntry=himSysBasicEntry, himSerialLineTable=himSerialLineTable, himSysWAMLConnIPLTU=himSysWAMLConnIPLTU, himProjPlanPabxId=himProjPlanPabxId, himSCSIDevName=himSCSIDevName, himMemScalingEntry=himMemScalingEntry, himSysWAMLConnIPAddr=himSysWAMLConnIPAddr, himBoardIPBckpServIP=himBoardIPBckpServIP, himCentralSwitchData=himCentralSwitchData, himTechInfoTechnicalData=himTechInfoTechnicalData, himBoardBasicLTU=himBoardBasicLTU, himDBConfHWTableVer=himDBConfHWTableVer, himPSIOAssActual=himPSIOAssActual, himBoardBasicEntry=himBoardBasicEntry, himPSIOAssTable=himPSIOAssTable, himIPDABasicConnType=himIPDABasicConnType, himSWUBoardPabxId=himSWUBoardPabxId, himSubagentLastMsgNo=himSubagentLastMsgNo, himSWPkgVerPkgName=himSWPkgVerPkgName, himDBConfSysHWAss2=himDBConfSysHWAss2, himHWSWUProc2=himHWSWUProc2, internalMessageHimSubagent=internalMessageHimSubagent, himHWADPMem=himHWADPMem, HimPEN=HimPEN, himPSIOAssPEN=himPSIOAssPEN, himPatchInfoActHD=himPatchInfoActHD, himSalesFeatMarketPackId=himSalesFeatMarketPackId, himSalesFeatPabxId=himSalesFeatPabxId, himIPDAGenIPCCBAddr=himIPDAGenIPCCBAddr, himCentralSwitchGroup=himCentralSwitchGroup)
mibBuilder.exportSymbols("SIEMENS-HP4KHIM-MIB", himSWUBoardActual=himSWUBoardActual, himTechFeatTable=himTechFeatTable, himSWUBoardOverlayLTU=himSWUBoardOverlayLTU, himBoardBasicNoCirc=himBoardBasicNoCirc, himSysLANCardsStatus=himSysLANCardsStatus, himIPDAGenPayConn=himIPDAGenPayConn, himSWUBoardLWNo=himSWUBoardLWNo, himLWOnProcEntry=himLWOnProcEntry, himSystemGroup=himSystemGroup, himSpecShelfDataFrameType=himSpecShelfDataFrameType, himLWDataOnProc=himLWDataOnProc, himLWOnCBAss=himLWOnCBAss, himDBConfHWLTU=himDBConfHWLTU, himSwitchAPSCorrVer=himSwitchAPSCorrVer, himDiscovErr=himDiscovErr, himSwitchAPSPabxId=himSwitchAPSPabxId, himIPDAGenIPTable=himIPDAGenIPTable, himBoardBasicTable=himBoardBasicTable, himSwitchData=himSwitchData, himIPDAGenIPNetAddr=himIPDAGenIPNetAddr, himSysBasicPabxId=himSysBasicPabxId, himIPDALocTable=himIPDALocTable, himMemScalingUnit=himMemScalingUnit, himPatchInfoPabxId=himPatchInfoPabxId, himSysLANCardsPabxId=himSysLANCardsPabxId, himIPDALocLoc=himIPDALocLoc, himPSIOAssFirmware=himPSIOAssFirmware, himSysWAMLConnIPTable=himSysWAMLConnIPTable, himPatchInfoPatchGroup=himPatchInfoPatchGroup, himDBConfHWHDLCPerDCL=himDBConfHWHDLCPerDCL, himReplAMOAPS=himReplAMOAPS, himSysLANCardsType=himSysLANCardsType, himCabPid3=himCabPid3, himBoardIPNetMask=himBoardIPNetMask, himLWOnCSIUTable=himLWOnCSIUTable, himPatchInfoOpt=himPatchInfoOpt, himBoardBasicSlot=himBoardBasicSlot, himIPDALocPhoneNo=himIPDALocPhoneNo, himBoardIPDefGWIP=himBoardIPDefGWIP, himIPDAGenEntry=himIPDAGenEntry, himMacAddress=himMacAddress, himLWOnCSIUSlot=himLWOnCSIUSlot, himMarkFeatExpiryDate=himMarkFeatExpiryDate, himHWSWUMem2=himHWSWUMem2, himBoardIPEntry=himBoardIPEntry, himSWVersionGroup=himSWVersionGroup, himSpecShelfDataLTUC=himSpecShelfDataLTUC, himIPDAGenIPEntry=himIPDAGenIPEntry, siemens=siemens, himMibGroups=himMibGroups, himBoards=himBoards, himLWDataOnCBPabxId=himLWDataOnCBPabxId, HimYesNo=HimYesNo, himIPDABasicBChanNo=himIPDABasicBChanNo, himSCSIDevLoadDrive=himSCSIDevLoadDrive, himSWVerOnProcSysRel=himSWVerOnProcSysRel, himSWVerOnProcSWVer=himSWVerOnProcSWVer, himSWUBoardLWDate=himSWUBoardLWDate, himDBConfSysBaseApp=himDBConfSysBaseApp, himSwitchAPS=himSwitchAPS, himInfo=himInfo, himWelcomePage=himWelcomePage, himSWUProc1=himSWUProc1, himSysWAMLConnRufNr=himSysWAMLConnRufNr, himLWOnCSIUFileProd=himLWOnCSIUFileProd, himIPDAGenSigConn=himIPDAGenSigConn, himSysWAMLConnIPNetMask=himSysWAMLConnIPNetMask, himSWVerOnProcTable=himSWVerOnProcTable, himCabPartNo=himCabPartNo, himSalesFeatTable=himSalesFeatTable, himSysWAMLConnIPEntry=himSysWAMLConnIPEntry, himNotepadDataPabxId=himNotepadDataPabxId, iandcAdmin=iandcAdmin, internalWarningHimSubagent=internalWarningHimSubagent, himSWUBoardNominal=himSWUBoardNominal, himSysWAMLConnIPLTG=himSysWAMLConnIPLTG, himHWDataEntry=himHWDataEntry, himSysWAMLConnEntry=himSysWAMLConnEntry, himDiscovErrTimDat=himDiscovErrTimDat, himHWData=himHWData, himLWDataOnCBEntry=himLWDataOnCBEntry, himIPDALocFaxNo=himIPDALocFaxNo, himMacAddrIPDA=himMacAddrIPDA, himBoardBasicFuncId=himBoardBasicFuncId, himSysBasicDomain=himSysBasicDomain, himSysBasicNodeNo=himSysBasicNodeNo, himMacAddrPabxId=himMacAddrPabxId, himMarkFeatTrialModeAct=himMarkFeatTrialModeAct, himSysBasicLEGK=himSysBasicLEGK, himDBConfHWStdSIULine=himDBConfHWStdSIULine, himIPDAGenIPSurvNetAddr=himIPDAGenIPSurvNetAddr, himBoardsGroup=himBoardsGroup, himSalesFeatUsed=himSalesFeatUsed, himBoardIPCustLANIP=himBoardIPCustLANIP, himTechFeatId=himTechFeatId, himIPDAIPAccPtRoutAddr=himIPDAIPAccPtRoutAddr, himBoardIPSTMI2IGWSubMask=himBoardIPSTMI2IGWSubMask, himFeaturesGroup=himFeaturesGroup, himCabLTUNo=himCabLTUNo, himCabAddr=himCabAddr, himDiscovTable=himDiscovTable, himMemScalingStandard=himMemScalingStandard, himLWOnCBProdTime=himLWOnCBProdTime, himDBConfHWSIUPPerLTU=himDBConfHWSIUPPerLTU, himHWSWUProc1=himHWSWUProc1, himNotepadDataInfoNo=himNotepadDataInfoNo, himAPSPatchesGroup=himAPSPatchesGroup, himSWUBoardFunctId=himSWUBoardFunctId, himReplAMOEntry=himReplAMOEntry, himLWDataOnCSIU=himLWDataOnCSIU, himSpecShelfDataAddress=himSpecShelfDataAddress, himSysWAMLConnIPSlot=himSysWAMLConnIPSlot, himTrapPabxId=himTrapPabxId, himSubagentLastMsgText=himSubagentLastMsgText, himSWVerOnProcCountryCode=himSWVerOnProcCountryCode, himSpecShelfDataEntry=himSpecShelfDataEntry, himMacAddrCLan=himMacAddrCLan, himSwitchAPSTable=himSwitchAPSTable, himDBConfSysHWAss1=himDBConfSysHWAss1, himSWVersion=himSWVersion, himChanges=himChanges, himMarkFeatEntry=himMarkFeatEntry, himMemScalingAllocated=himMemScalingAllocated, himLWOnCBFileName=himLWOnCBFileName, himSWUBoardEntry=himSWUBoardEntry, himLWOnCSIUNominal=himLWOnCSIUNominal, himSCSIDevPabxId=himSCSIDevPabxId, himCabPid1=himCabPid1, himSerialLineType=himSerialLineType, HimShelfNWType=HimShelfNWType, himSysLANCardsBroadCast=himSysLANCardsBroadCast, himSysWAMLConnBChl=himSysWAMLConnBChl, himDBConfSysDevLine1=himDBConfSysDevLine1, himDiscovMode=himDiscovMode, himSerialLineSpeed=himSerialLineSpeed, himBoardLocPhoneNo=himBoardLocPhoneNo, DiscoveryStates=DiscoveryStates, himSalesFeatMarkForTrial=himSalesFeatMarkForTrial, himSysHostsPabxId=himSysHostsPabxId, himDBConfHWConfLine=himDBConfHWConfLine, himCabCabinet=himCabCabinet, himLWOnProcPabxId=himLWOnProcPabxId, himIPDAIPTable=himIPDAIPTable, himSWVerOnProcHP4KVer=himSWVerOnProcHP4KVer, himDBConfHWPabxId=himDBConfHWPabxId, himTraps=himTraps, himBoardIPManStatPort=himBoardIPManStatPort, himDBConfSys=himDBConfSys, himReplAMOName=himReplAMOName, himSerialLineEntry=himSerialLineEntry, himSWUBoardRev=himSWUBoardRev, himTechInfoEntry=himTechInfoEntry, himMemScalingSysMax=himMemScalingSysMax, himDiscovBusy=himDiscovBusy, himWelPgTable=himWelPgTable, himSWUMemory2=himSWUMemory2, himHWArchType=himHWArchType, himSysWAMLConnIPIfName=himSysWAMLConnIPIfName, himCabPid2=himCabPid2, himProjPlanInfoFile=himProjPlanInfoFile, HimPabxId=HimPabxId, himSysWAMLConnLTU=himSysWAMLConnLTU, himIPDABasicPabxId=himIPDABasicPabxId, HimSwitchNumber=HimSwitchNumber, himSystem=himSystem, himSysWAMLConnSlot=himSysWAMLConnSlot, himBoardIPTable=himBoardIPTable, himSWUMemory1=himSWUMemory1, himTrapsGroup=himTrapsGroup, himSwitchDataGroup=himSwitchDataGroup, himDiscoveryGroup=himDiscoveryGroup, himHWDataTable=himHWDataTable, himTrapGroup=himTrapGroup, himSWVerOnProcPabxId=himSWVerOnProcPabxId, himDBConfHWDBDim=himDBConfHWDBDim, himAPSPatches=himAPSPatches, himTechFeatState=himTechFeatState, himNotepadDataTable=himNotepadDataTable, himMarkFeatConfCode=himMarkFeatConfCode, himHWOpMode=himHWOpMode, himMarkFeatSerNo=himMarkFeatSerNo, himLWOnProcLWIdCMP=himLWOnProcLWIdCMP, himDBConfHW=himDBConfHW, himDiscovEntry=himDiscovEntry, himDiscovPabxMnemonic=himDiscovPabxMnemonic, himBoardIPDefRouter=himBoardIPDefRouter, himPatchInfoActBP=himPatchInfoActBP, himBoardLocId=himBoardLocId)
