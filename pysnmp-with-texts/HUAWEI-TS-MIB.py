#
# PySNMP MIB module HUAWEI-TS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-TS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
huawei, mlsr = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "huawei", "mlsr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, ModuleIdentity, TimeTicks, Bits, IpAddress, MibIdentifier, Counter64, Gauge32, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ModuleIdentity", "TimeTicks", "Bits", "IpAddress", "MibIdentifier", "Counter64", "Gauge32", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
terminalServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1))
class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

tsAppTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1), )
if mibBuilder.loadTexts: tsAppTable.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppTable.setDescription('A table containing how to set the application.')
tsAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1), ).setIndexNames((0, "HUAWEI-TS-MIB", "tsAppID"))
if mibBuilder.loadTexts: tsAppEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppEntry.setDescription('Management information about how to set the application.')
tsAppID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 515))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppID.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppID.setDescription('Set the ID of application.')
tsAppIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAppIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppIPAddress.setDescription('Set the IP Address of UNIX that offer terminal server,0 indicate no ip address.')
tsAppPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAppPort.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppPort.setDescription('Set the port of application,0 indicate no port.')
tsAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("special", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAppType.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppType.setDescription('Set the type of application.')
tsAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAppName.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppName.setDescription('Set the name of application.')
tsAppSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAppSourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppSourceIP.setDescription('Set the tcp/ip that will be bound,0 indicate no source ip.')
tsAppLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1025, 65535), ValueRangeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppLocalPort.setDescription('Display the port of router,0 indicate no port.')
tsAppTtyServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noset", 1), ("kept", 2), ("linking", 3), ("linked", 4), ("removed", 5), ("overcast", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppTtyServerState.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppTtyServerState.setDescription('Display the connection-state on the UNIX.')
tsAppSocketRecvBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppSocketRecvBufSize.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppSocketRecvBufSize.setDescription('Display the size of recvbuf for socket.')
tsAppSocketSendBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppSocketSendBufSize.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppSocketSendBufSize.setDescription('Display the size of sendbuf for socket.')
tsAppSockRecvByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppSockRecvByte.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppSockRecvByte.setDescription('Display the byte number that has already received from socket.')
tsAppSockSendByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppSockSendByte.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppSockSendByte.setDescription('Display the byte number that has already sent from socket.')
tsAppLastRecvTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppLastRecvTime.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppLastRecvTime.setDescription('Display the time when the tty received from socket for last time.')
tsAppLastSendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppLastSendTime.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppLastSendTime.setDescription('Display the time when the tty sent from socket for last time.')
tsAppClearStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tsAppClearStatistic.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppClearStatistic.setDescription("Clear APP's statistic information.")
tsAppUnixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAppUnixIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppUnixIndex.setDescription('Display the channel number.')
tsAppStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 1, 1, 17), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAppStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tsAppStatus.setDescription('set the state on terminal server.If you will create a row,the values of tsAppIPAddress,tsAppPort,tsAppType,tsAppName must be not null. You can delete a exist row and you can modify a exist row.If you modify a row under the status of row,you change the status from valid to undercreation.when you have changed them,you change the status to valid')
tsAsyModeTtyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2), )
if mibBuilder.loadTexts: tsAsyModeTtyTable.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyTable.setDescription('A table containing how to set the tty mode on interface.')
tsAsyModeTtyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1), ).setIndexNames((0, "HUAWEI-TS-MIB", "tsAsyModeTtyID"), (0, "HUAWEI-TS-MIB", "tsAsyModeTtyVtyID"))
if mibBuilder.loadTexts: tsAsyModeTtyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyEntry.setDescription('Management information about how to set the tty mode on interface.')
tsAsyModeTtyID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAsyModeTtyID.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyID.setDescription('Set the tty ID.')
tsAsyModeTtyVtyID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAsyModeTtyVtyID.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyVtyID.setDescription('Set the vty ID.')
tsAsyModeTtyIFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAsyModeTtyIFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyIFIndex.setDescription('Select the current interface.')
tsAsyModeTtyAppID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 515))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAsyModeTtyAppID.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyAppID.setDescription('Set the application ID,-1 indicate no app.')
tsAsyModeTtyDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disconnect", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tsAsyModeTtyDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyDisconnect.setDescription("Disconnect current VTY's tcp.")
tsAsyModeTtyVtyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("waitaaa", 3), ("ok", 4), ("menu", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAsyModeTtyVtyState.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyVtyState.setDescription('Display the state of the unix.')
tsAsyModeTtyFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsAsyModeTtyFlowCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyFlowCtrlState.setDescription('Display whether set flow control mode.')
tsAsyModeTtyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 2, 1, 8), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsAsyModeTtyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tsAsyModeTtyStatus.setDescription('Set the tty state in the interface.It can create a new row and delete a row.But when creat a new row,the application must be set.If you modify a row under the status of row, you change the status from valid to undercreation.when you have changed them,you change the status to valid.And if you will create a row,the values of tsAsyModeTtyIFIndex,tsAsyModeTtyAppID must be not null.')
tsTtyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3), )
if mibBuilder.loadTexts: tsTtyTable.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyTable.setDescription("A table containing how to set something about the tty.If the tty no set,you can't set the values")
tsTtyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1), ).setIndexNames((0, "HUAWEI-TS-MIB", "tsTtyID"))
if mibBuilder.loadTexts: tsTtyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyEntry.setDescription('Management information about how to set something about the tty.')
tsTtyID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyID.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyID.setDescription('Set the tty ID.')
tsTtyBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4096, 204800)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyBufferSize.setDescription('Set the buffer size(byte).')
tsTtyAutoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 3600), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyAutoLink.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyAutoLink.setDescription('Set auto link interval(second).')
tsTtyCloseLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 3600), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyCloseLink.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyCloseLink.setDescription('Set auto close link interval(second).')
tsTtyConnPrint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("english", 1), ("chinese", 2), ("none", 3))).clone('chinese')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyConnPrint.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyConnPrint.setDescription('Print connection information.')
tsTtyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyDelay.setDescription('Print connection information(second).')
tsTtyLogoPrint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyLogoPrint.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyLogoPrint.setDescription('Display the logo of terminal server.')
tsTtyMenuKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyMenuKey1.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyMenuKey1.setDescription('Set the hotkey to start-up terminal server.')
tsTtyMenuKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyMenuKey2.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyMenuKey2.setDescription('Set the hotkey to start-up terminal server.')
tsTtyMenuKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyMenuKey3.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyMenuKey3.setDescription('Set the hotkey to start-up terminal server.')
tsTtyReadBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("noSet", 2))).clone('noSet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyReadBlock.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyReadBlock.setDescription('Set read TTY data block.')
tsTtyRedrawkey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyRedrawkey1.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyRedrawkey1.setDescription('Set redraw screen hot-key.')
tsTtyRedrawkey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyRedrawkey2.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyRedrawkey2.setDescription('Set redraw screen hot-key.')
tsTtyRedrawkey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyRedrawkey3.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyRedrawkey3.setDescription('Set redraw screen hot-key.')
tsTtyResetKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyResetKey1.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyResetKey1.setDescription('Set reset hot-key.')
tsTtyResetKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyResetKey2.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyResetKey2.setDescription('Set reset hot-key.')
tsTtyResetKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyResetKey3.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyResetKey3.setDescription('Set reset hot-key.')
tsTtyTcpNoDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyTcpNoDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyTcpNoDelay.setDescription('Set tcp NODELAY option.')
tsTtyTcpRecvBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 16384)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyTcpRecvBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyTcpRecvBufferSize.setDescription('Set tcp recv buffer size(byte).')
tsTtyTcpSendBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 16384)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyTcpSendBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyTcpSendBufferSize.setDescription('Set tcp send buffer size(byte).')
tsTtyTestKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyTestKey1.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyTestKey1.setDescription('Set test hot-key.')
tsTtyTestKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyTestKey2.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyTestKey2.setDescription('Set test hot-key.')
tsTtyTestKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTtyTestKey3.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyTestKey3.setDescription('Set test hot-key.')
tsTtyBufferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyBufferRate.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyBufferRate.setDescription('Display the rate of flow control(%).')
tsTtyRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyRecvBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyRecvBytes.setDescription('Display the byte number of the tty that has received.')
tsTtySendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtySendBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtySendBytes.setDescription('Display the byte number of the tty that has sent.')
tsTtyLastRecvTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyLastRecvTime.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyLastRecvTime.setDescription('Display the last time of the tty that received.')
tsTtyLastSendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyLastSendTime.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyLastSendTime.setDescription('Display the last time of the tty that sent.')
tsTtyCurrentVtyID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyCurrentVtyID.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyCurrentVtyID.setDescription('Display the ID of the current vty.')
tsTtyCurrentVtyRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyCurrentVtyRecv.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyCurrentVtyRecv.setDescription('Display the byte number of the vty that received.')
tsTtyCurrentVtySend = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyCurrentVtySend.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyCurrentVtySend.setDescription('Display the byte number of the vty that sent.')
tsTtyCurrentAppID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyCurrentAppID.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyCurrentAppID.setDescription('Display the ID of the current vty.')
tsTtyCurrentAppRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyCurrentAppRecv.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyCurrentAppRecv.setDescription('Display the byte number of the app that received.')
tsTtyCurrentAppSend = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyCurrentAppSend.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyCurrentAppSend.setDescription('Display the byte number of the app that sent.')
tsTtyClearStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tsTtyClearStatistic.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyClearStatistic.setDescription("Clear TTY's statistic information.")
tsDebugTtyAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsDebugTtyAll.setStatus('mandatory')
if mibBuilder.loadTexts: tsDebugTtyAll.setDescription("Open/close specify tty's all debug information.")
tsDebugTtyBrief = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsDebugTtyBrief.setStatus('mandatory')
if mibBuilder.loadTexts: tsDebugTtyBrief.setDescription('Open/close tty brief debug information.')
tsDebugTtySock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("recv", 2), ("send", 3), ("none", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsDebugTtySock.setStatus('mandatory')
if mibBuilder.loadTexts: tsDebugTtySock.setDescription('socket data debug information.')
tsDebugTtyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsDebugTtyTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: tsDebugTtyTimeStamp.setDescription('dataflow timestamp debug information.')
tsDebugTtyTty = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("recv", 2), ("send", 3), ("none", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsDebugTtyTty.setStatus('mandatory')
if mibBuilder.loadTexts: tsDebugTtyTty.setDescription('Open/close the debug tty switch of the tty.')
tsTtyManageTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 4), )
if mibBuilder.loadTexts: tsTtyManageTable.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyManageTable.setDescription('A table containing the information about the channel.')
tsTtyManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 4, 1), ).setIndexNames((0, "HUAWEI-TS-MIB", "tsTtyManageUnixIndex"))
if mibBuilder.loadTexts: tsTtyManageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyManageEntry.setDescription('Management information about how to bind tcp/ip.')
tsTtyManageUnixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyManageUnixIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyManageUnixIndex.setDescription('An index for unix.')
tsTtyManageUnixSockid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyManageUnixSockid.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyManageUnixSockid.setDescription('Display the sock ID that the channel is using.')
tsTtyManageLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyManageLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyManageLocalIP.setDescription('Display the Local IP address.')
tsTtyManageItemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTtyManageItemNum.setStatus('mandatory')
if mibBuilder.loadTexts: tsTtyManageItemNum.setDescription('Display the number of unix item.')
tsEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tsEnable.setDescription('Decide whether to have the function of terminal server.')
tsEnableTrap = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsEnableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: tsEnableTrap.setDescription('Decide whether to send terminal server trap.')
tsClearTtyAll = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tsClearTtyAll.setStatus('mandatory')
if mibBuilder.loadTexts: tsClearTtyAll.setDescription('Clear the information of the app and tty.')
tsLoginTty = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsLoginTty.setStatus('obsolete')
if mibBuilder.loadTexts: tsLoginTty.setDescription('Enable HWTTY EXEC Authentication.')
tsDebugTtyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 9))
tsDebugTtyError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsDebugTtyError.setStatus('mandatory')
if mibBuilder.loadTexts: tsDebugTtyError.setDescription('tty exception error information.')
tsDebugTtyManage = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsDebugTtyManage.setStatus('mandatory')
if mibBuilder.loadTexts: tsDebugTtyManage.setDescription('manage channel debug information.')
tsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 10))
tsAppStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 10, 1)).setObjects(("HUAWEI-TS-MIB", "tsAppID"), ("HUAWEI-TS-MIB", "tsAppTtyServerState"))
if mibBuilder.loadTexts: tsAppStatusTrap.setStatus('current')
if mibBuilder.loadTexts: tsAppStatusTrap.setDescription('send a value when the state of application change.')
tsTtyStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 10, 2)).setObjects(("HUAWEI-TS-MIB", "tsAsyModeTtyID"), ("HUAWEI-TS-MIB", "tsAsyModeTtyVtyID"), ("HUAWEI-TS-MIB", "tsAsyModeTtyVtyState"))
if mibBuilder.loadTexts: tsTtyStatusTrap.setStatus('current')
if mibBuilder.loadTexts: tsTtyStatusTrap.setDescription('send a value when the state of tty change.')
tsExceptionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 10, 3))
if mibBuilder.loadTexts: tsExceptionTrap.setStatus('current')
if mibBuilder.loadTexts: tsExceptionTrap.setDescription('send a Exception when the terminal server has exception.')
tsClearSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 10, 4))
if mibBuilder.loadTexts: tsClearSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: tsClearSuccessTrap.setDescription('Clear statistic successfully.')
tsDisconnectSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 1, 10, 5))
if mibBuilder.loadTexts: tsDisconnectSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: tsDisconnectSuccessTrap.setDescription('Disconnect vty successfully.')
mibBuilder.exportSymbols("HUAWEI-TS-MIB", tsTtyEntry=tsTtyEntry, tsAsyModeTtyTable=tsAsyModeTtyTable, tsTtyCurrentAppSend=tsTtyCurrentAppSend, tsTtyMenuKey2=tsTtyMenuKey2, tsTtyRecvBytes=tsTtyRecvBytes, tsTtyCurrentVtyRecv=tsTtyCurrentVtyRecv, tsTtyBufferRate=tsTtyBufferRate, tsTtyManageItemNum=tsTtyManageItemNum, tsTtyBufferSize=tsTtyBufferSize, tsAsyModeTtyVtyID=tsAsyModeTtyVtyID, tsTtyReadBlock=tsTtyReadBlock, tsTtyMenuKey3=tsTtyMenuKey3, tsAppEntry=tsAppEntry, tsTtyTestKey1=tsTtyTestKey1, tsAsyModeTtyIFIndex=tsAsyModeTtyIFIndex, tsTtyDelay=tsTtyDelay, tsTtySendBytes=tsTtySendBytes, tsTtyTcpRecvBufferSize=tsTtyTcpRecvBufferSize, tsTtyManageLocalIP=tsTtyManageLocalIP, tsAppSocketRecvBufSize=tsAppSocketRecvBufSize, tsTtyCurrentAppID=tsTtyCurrentAppID, tsTtyResetKey2=tsTtyResetKey2, tsClearTtyAll=tsClearTtyAll, tsAsyModeTtyAppID=tsAsyModeTtyAppID, tsTtyRedrawkey1=tsTtyRedrawkey1, tsDebugTtyManage=tsDebugTtyManage, tsDebugTtyAll=tsDebugTtyAll, tsTtyLogoPrint=tsTtyLogoPrint, tsTtyLastRecvTime=tsTtyLastRecvTime, tsAsyModeTtyFlowCtrlState=tsAsyModeTtyFlowCtrlState, tsAppSockSendByte=tsAppSockSendByte, tsTtyTestKey2=tsTtyTestKey2, tsAppPort=tsAppPort, tsAppTtyServerState=tsAppTtyServerState, tsTtyConnPrint=tsTtyConnPrint, tsAsyModeTtyDisconnect=tsAsyModeTtyDisconnect, tsTtyAutoLink=tsTtyAutoLink, tsAsyModeTtyStatus=tsAsyModeTtyStatus, tsTtyManageTable=tsTtyManageTable, tsTtyCurrentVtySend=tsTtyCurrentVtySend, tsEnable=tsEnable, EntryStatus=EntryStatus, tsTtyLastSendTime=tsTtyLastSendTime, tsTtyManageUnixIndex=tsTtyManageUnixIndex, tsAppStatus=tsAppStatus, tsTtyID=tsTtyID, tsTtyStatusTrap=tsTtyStatusTrap, tsAppLastRecvTime=tsAppLastRecvTime, tsEnableTrap=tsEnableTrap, tsAppID=tsAppID, tsDisconnectSuccessTrap=tsDisconnectSuccessTrap, tsDebugTtyGroup=tsDebugTtyGroup, tsTtyManageEntry=tsTtyManageEntry, tsAppLastSendTime=tsAppLastSendTime, tsAppSockRecvByte=tsAppSockRecvByte, tsAppLocalPort=tsAppLocalPort, tsDebugTtyTimeStamp=tsDebugTtyTimeStamp, tsAppClearStatistic=tsAppClearStatistic, tsTtyRedrawkey2=tsTtyRedrawkey2, tsAsyModeTtyID=tsAsyModeTtyID, tsAppUnixIndex=tsAppUnixIndex, tsTtyCurrentVtyID=tsTtyCurrentVtyID, tsTtyManageUnixSockid=tsTtyManageUnixSockid, tsAppName=tsAppName, tsTtyResetKey1=tsTtyResetKey1, tsAppTable=tsAppTable, tsTtyCloseLink=tsTtyCloseLink, tsDebugTtyError=tsDebugTtyError, tsTrap=tsTrap, tsAsyModeTtyVtyState=tsAsyModeTtyVtyState, tsTtyResetKey3=tsTtyResetKey3, tsAppType=tsAppType, tsDebugTtyBrief=tsDebugTtyBrief, tsExceptionTrap=tsExceptionTrap, tsTtyTable=tsTtyTable, terminalServer=terminalServer, tsAppIPAddress=tsAppIPAddress, tsDebugTtyTty=tsDebugTtyTty, tsDebugTtySock=tsDebugTtySock, tsTtyClearStatistic=tsTtyClearStatistic, tsTtyTcpSendBufferSize=tsTtyTcpSendBufferSize, tsTtyTcpNoDelay=tsTtyTcpNoDelay, tsTtyCurrentAppRecv=tsTtyCurrentAppRecv, tsAppStatusTrap=tsAppStatusTrap, tsAsyModeTtyEntry=tsAsyModeTtyEntry, tsAppSourceIP=tsAppSourceIP, tsLoginTty=tsLoginTty, tsTtyMenuKey1=tsTtyMenuKey1, tsTtyRedrawkey3=tsTtyRedrawkey3, tsTtyTestKey3=tsTtyTestKey3, tsClearSuccessTrap=tsClearSuccessTrap, tsAppSocketSendBufSize=tsAppSocketSendBufSize)
