#
# PySNMP MIB module SONUS-EVENT-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-EVENT-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, ObjectIdentity, Bits, iso, NotificationType, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, Gauge32, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Bits", "iso", "NotificationType", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "Gauge32", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonusEventLevel, sonusShelfIndex, sonusEventDescription, sonusEventClass = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusEventLevel", "sonusShelfIndex", "sonusEventDescription", "sonusEventClass")
sonusSystemMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusSystemMIBs")
SonusEventClass, SonusEventFilterLevel, SonusSlotIndex, SonusShelfIndex, SonusEventString = mibBuilder.importSymbols("SONUS-TC", "SonusEventClass", "SonusEventFilterLevel", "SonusSlotIndex", "SonusShelfIndex", "SonusEventString")
sonusEventLogMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2))
if mibBuilder.loadTexts: sonusEventLogMIB.setLastUpdated('200107310000Z')
if mibBuilder.loadTexts: sonusEventLogMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusEventLogMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusEventLogMIB.setDescription('The MIB Module for Event Log Management.')
sonusEventLogMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1))
sonusEvLogTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1), )
if mibBuilder.loadTexts: sonusEvLogTypeTable.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeTable.setDescription('Event Log configuration table for configuration items related to each Event Log type.')
sonusEvLogTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1), ).setIndexNames((0, "SONUS-EVENT-LOG-MIB", "sonusEvLogType"))
if mibBuilder.loadTexts: sonusEvLogTypeEntry.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeEntry.setDescription('An entry of Event Log configuration related to each event log type.')
sonusEvLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("system", 1), ("debug", 2), ("trace", 3), ("acct", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogType.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogType.setDescription('The type of the event log. Each type has separate configuration parameters and logs to a separate file.')
sonusEvLogTypeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("rollfile", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogTypeAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeAdminState.setDescription('The requested state of the given Event Log type. Rollfile will close an enabled log file and reopen, incrementing the suffix. If a file is disabled and rolled, the command is ignored.')
sonusEvLogTypeFileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogTypeFileCount.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeFileCount.setDescription('The number of event log files that will be maintained for this event type. All event types except accounting will overwrite the oldest file when the file count is exceeded. Accounting will issue warnings as the file count approaches the maximum and shutdown if it is exceeded.')
sonusEvLogTypeFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 65535)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogTypeFileSize.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeFileSize.setDescription('The maximum size (in KB) that a single event log file will ever grow to.')
sonusEvLogTypeFileMsgQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogTypeFileMsgQueue.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeFileMsgQueue.setDescription('The number of event log message entries to buffer before writing them to disk. The size may be a value between 2 and 32 (inclusive).')
sonusEvLogTypeBaseDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeBaseDirectory.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeBaseDirectory.setDescription('The directory in which to place the event log files. Each event log type has its own base directory')
sonusEvLogTypeSaveTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("disk", 1), ("memory", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogTypeSaveTo.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeSaveTo.setDescription('Save events to memory, disk, both, or neither.')
sonusEvLogTypeMaxEventMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogTypeMaxEventMemSize.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeMaxEventMemSize.setDescription('The maximum size of the memory event log buffer (in KB).')
sonusEvLogTypeFilterLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 1, 1, 9), SonusEventFilterLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogTypeFilterLevel.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeFilterLevel.setDescription('Events that are at least as severe as the designated level will be logged. noevents suppresses all events of this type from being logged.')
sonusEvLogTypeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2), )
if mibBuilder.loadTexts: sonusEvLogTypeStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusTable.setDescription('Event Log status table for status items related to each Event Log type.')
sonusEvLogTypeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1), ).setIndexNames((0, "SONUS-EVENT-LOG-MIB", "sonusEvLogTypeStatusShelf"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogTypeStatusType"))
if mibBuilder.loadTexts: sonusEvLogTypeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusEntry.setDescription('An entry of Event Log status related to each event log type.')
sonusEvLogTypeStatusShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusShelf.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusShelf.setDescription('The shelf number for which these table entries apply.')
sonusEvLogTypeStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("system", 1), ("debug", 2), ("trace", 3), ("acct", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusType.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusType.setDescription('The type of the event log. Each type has separate configuration parameters and logs to a separate file.')
sonusEvLogTypeStatusCurrentFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusCurrentFile.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusCurrentFile.setDescription('The filename that is currently being used for logging. No name is displayed when disk logging is disabled. The name RECOVERING is displayed when an attempt to automatically restart disk logging is in progress.')
sonusEvLogTypeStatusFileRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusFileRecs.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusFileRecs.setDescription('Count of the number of event records written to the current event log file.')
sonusEvLogTypeStatusFileBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusFileBytes.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusFileBytes.setDescription('Count of the number of bytes written to the current event log file.')
sonusEvLogTypeStatusMemRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusMemRecs.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusMemRecs.setDescription('Count of the number of event records written to the event log memory buffer.')
sonusEvLogTypeStatusMemBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusMemBytes.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusMemBytes.setDescription('Count of the number of bytes written to the event log memory buffer.')
sonusEvLogTypeStatusFileDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusFileDropped.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusFileDropped.setDescription('Count of the number of event records dropped when writing to an Event Log file.')
sonusEvLogTypeStatusMemDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogTypeStatusMemDropped.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogTypeStatusMemDropped.setDescription('Count of the number of event records dropped when writing to an Event Log memory buffer.')
sonusEvLogMemTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 3), )
if mibBuilder.loadTexts: sonusEvLogMemTable.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogMemTable.setDescription('Events logged to memory.')
sonusEvLogMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 3, 1), ).setIndexNames((0, "SONUS-EVENT-LOG-MIB", "sonusEvLogMemShelf"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogMemType"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogMemIndex"))
if mibBuilder.loadTexts: sonusEvLogMemEntry.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogMemEntry.setDescription('An entry of the Event Log memory table.')
sonusEvLogMemShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogMemShelf.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogMemShelf.setDescription('The shelf number for which these table entries apply.')
sonusEvLogMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("system", 1), ("debug", 2), ("trace", 3), ("acct", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogMemType.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogMemType.setDescription('The Event Log Type to which these table entries apply.')
sonusEvLogMemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogMemIndex.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogMemIndex.setDescription('The index for the entry.')
sonusEvLogMemText = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 3, 1, 4), SonusEventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogMemText.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogMemText.setDescription('The event log text.')
sonusEvLogFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 6), )
if mibBuilder.loadTexts: sonusEvLogFilterTable.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterTable.setDescription('Event Log Class Filter configuration table per card.')
sonusEvLogFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 6, 1), ).setIndexNames((0, "SONUS-EVENT-LOG-MIB", "sonusEvLogFilterShelf"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogFilterSlot"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogFilterType"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogFilterEventClass"))
if mibBuilder.loadTexts: sonusEvLogFilterEntry.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterEntry.setDescription('An entry of Event Log Class Filter configuration per card.')
sonusEvLogFilterShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 6, 1, 1), SonusShelfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogFilterShelf.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterShelf.setDescription('The shelf number for which these table entries apply.')
sonusEvLogFilterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 6, 1, 2), SonusSlotIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogFilterSlot.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterSlot.setDescription('The slot number for which these table entries apply.')
sonusEvLogFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("debug", 2), ("trace", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogFilterType.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterType.setDescription('The event log type for which these filter table entries apply.')
sonusEvLogFilterEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 6, 1, 4), SonusEventClass()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogFilterEventClass.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterEventClass.setDescription('The class of events to which the filter entry applies.')
sonusEvLogFilterLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 6, 1, 5), SonusEventFilterLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogFilterLevel.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterLevel.setDescription('Events that are at least as severe as the designated level will be logged. noevents suppresses all events of this type from being logged.')
sonusEvLogFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEvLogFilterState.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterState.setDescription('On if this filter entry should take precedence over the per-node settings.')
sonusEvLogFilterStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 7), )
if mibBuilder.loadTexts: sonusEvLogFilterStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterStatusTable.setDescription('Event Log Class Filter status table per card.')
sonusEvLogFilterStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 7, 1), ).setIndexNames((0, "SONUS-EVENT-LOG-MIB", "sonusEvLogFilterStatusShelf"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogFilterStatusSlot"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogFilterStatusType"), (0, "SONUS-EVENT-LOG-MIB", "sonusEvLogFilterStatusEventClass"))
if mibBuilder.loadTexts: sonusEvLogFilterStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterStatusEntry.setDescription('An entry of Event Log Class Filter status per card.')
sonusEvLogFilterStatusShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogFilterStatusShelf.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterStatusShelf.setDescription('The shelf number for which these table entries apply.')
sonusEvLogFilterStatusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogFilterStatusSlot.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterStatusSlot.setDescription('The slot number for which these table entries apply.')
sonusEvLogFilterStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("debug", 2), ("trace", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogFilterStatusType.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterStatusType.setDescription('The event log type for which these table entries apply.')
sonusEvLogFilterStatusEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 7, 1, 4), SonusEventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogFilterStatusEventClass.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterStatusEventClass.setDescription('The event class to which the filter entry applies.')
sonusEvLogFilterStatusFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogFilterStatusFiltered.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilterStatusFiltered.setDescription('The number of events that were filtered.')
sonusEventLogMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2))
sonusEventLogMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0))
sonusEventLogMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 1))
sonusEvLogAdminState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("rollfile", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogAdminState.setDescription('The requested state of the given Event Log type. Rollfile will close an enabled log file and reopen, incrementing the suffix. If a file is disabled and rolled, the command is ignored.')
sonusEvLogShutdownReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("fileWriteFailed", 1), ("nfsError", 2), ("createDirectoryFailed", 3), ("maximumFileCountReached", 4), ("fileRemoveFailed", 5), ("fileOpenFailed", 6), ("fileHeaderWriteFailed", 7), ("memoryAllocationFailed", 8), ("administrativeShutdown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogShutdownReason.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogShutdownReason.setDescription('The reason that event file logging has been shutdown.')
sonusEvLogDirName = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogDirName.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogDirName.setDescription('The event file log directory name.')
sonusEvLogFilePercentage = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogFilePercentage.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogFilePercentage.setDescription('The percentage the event log directory is full based on file count.')
sonusEvLogCurFileCount = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEvLogCurFileCount.setStatus('current')
if mibBuilder.loadTexts: sonusEvLogCurFileCount.setDescription('The current count of event files.')
sonusEventLogFileStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 1)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogAdminState"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileStateNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileStateNotification.setDescription('This trap indicates the current state of event file logging.')
sonusEventLogFileCreatedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 2)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeStatusCurrentFile"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileCreatedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileCreatedNotification.setDescription('This trap indicates the name of the event file which has been created for logging.')
sonusEventLogAcctFileCreatedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 3)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeStatusCurrentFile"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogAcctFileCreatedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogAcctFileCreatedNotification.setDescription('This trap indicates the name of the accounting event file which has been created for logging.')
sonusEventLogFileRestartNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 4)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileRestartNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileRestartNotification.setDescription('This trap indicates that file event logging has been automatically restarted.')
sonusEventLogAcctFileRestartNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 5)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogAcctFileRestartNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogAcctFileRestartNotification.setDescription('This trap indicates that accounting file event logging has been automatically restarted.')
sonusEventLogFileClosedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 6)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeStatusCurrentFile"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileClosedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileClosedNotification.setDescription('This trap indicates the name of the event file which has been closed.')
sonusEventLogAcctFileClosedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 7)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeStatusCurrentFile"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogAcctFileClosedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogAcctFileClosedNotification.setDescription('This trap indicates the name of the accounting event file which has been closed.')
sonusEventLogFileShutdownNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 8)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogShutdownReason"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogAdminState"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileShutdownNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileShutdownNotification.setDescription('This trap indicates that a shutdown of file event logging has occurred.')
sonusEventLogFileCountNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 9)).setObjects(("SONUS-EVENT-LOG-MIB", "sonusEvLogDirName"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogFilePercentage"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogCurFileCount"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeFileCount"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileCountNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileCountNotification.setDescription('This trap indicates that the number of event log files is approaching the configured maximum.')
sonusEventLogFileCountChngNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 10)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeFileCount"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileCountChngNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileCountChngNotification.setDescription('This trap indicates the number of Event Log files that will be maintained for this event type is changed')
sonusEventLogFileSizeChngNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 11)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeFileSize"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileSizeChngNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileSizeChngNotification.setDescription('This trap indicates that the maximum size of a single event log file has changed.')
sonusEventLogFileMsgQueueChngNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 12)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeFileMsgQueue"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileMsgQueueChngNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileMsgQueueChngNotification.setDescription('This trap indicates that the number event log message entries to the buffer changed')
sonusEventLogSaveToChngNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 13)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeSaveTo"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogSaveToChngNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogSaveToChngNotification.setDescription('This Trap indicates that the location where events are saved is being changed ')
sonusEventLogFileMaxEventMemSizeChngNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 14)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeMaxEventMemSize"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileMaxEventMemSizeChngNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileMaxEventMemSizeChngNotification.setDescription('This trap indicates that the maximum size of the memory event log buffer is changed')
sonusEventLogFileFilterLevelChngNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 2, 2, 0, 15)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogType"), ("SONUS-EVENT-LOG-MIB", "sonusEvLogTypeFilterLevel"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusEventLogFileFilterLevelChngNotification.setStatus('current')
if mibBuilder.loadTexts: sonusEventLogFileFilterLevelChngNotification.setDescription('This trap indicates that the level of event logging for this event type is changed')
mibBuilder.exportSymbols("SONUS-EVENT-LOG-MIB", sonusEventLogFileFilterLevelChngNotification=sonusEventLogFileFilterLevelChngNotification, sonusEvLogTypeStatusEntry=sonusEvLogTypeStatusEntry, sonusEvLogTypeFileSize=sonusEvLogTypeFileSize, sonusEvLogFilterEventClass=sonusEvLogFilterEventClass, sonusEventLogAcctFileCreatedNotification=sonusEventLogAcctFileCreatedNotification, sonusEvLogDirName=sonusEvLogDirName, sonusEvLogTypeStatusCurrentFile=sonusEvLogTypeStatusCurrentFile, sonusEventLogFileClosedNotification=sonusEventLogFileClosedNotification, sonusEvLogTypeSaveTo=sonusEvLogTypeSaveTo, sonusEventLogFileCountChngNotification=sonusEventLogFileCountChngNotification, sonusEvLogFilterStatusType=sonusEvLogFilterStatusType, sonusEventLogFileCountNotification=sonusEventLogFileCountNotification, sonusEvLogTypeAdminState=sonusEvLogTypeAdminState, sonusEvLogTypeMaxEventMemSize=sonusEvLogTypeMaxEventMemSize, sonusEventLogFileSizeChngNotification=sonusEventLogFileSizeChngNotification, sonusEvLogShutdownReason=sonusEvLogShutdownReason, sonusEventLogFileCreatedNotification=sonusEventLogFileCreatedNotification, sonusEvLogAdminState=sonusEvLogAdminState, sonusEvLogFilterStatusFiltered=sonusEvLogFilterStatusFiltered, sonusEvLogFilePercentage=sonusEvLogFilePercentage, sonusEvLogMemShelf=sonusEvLogMemShelf, sonusEventLogFileStateNotification=sonusEventLogFileStateNotification, sonusEvLogTypeEntry=sonusEvLogTypeEntry, sonusEvLogTypeFileMsgQueue=sonusEvLogTypeFileMsgQueue, sonusEvLogTypeFilterLevel=sonusEvLogTypeFilterLevel, sonusEvLogFilterStatusTable=sonusEvLogFilterStatusTable, sonusEventLogAcctFileClosedNotification=sonusEventLogAcctFileClosedNotification, sonusEvLogTypeStatusMemBytes=sonusEvLogTypeStatusMemBytes, sonusEvLogMemText=sonusEvLogMemText, sonusEvLogTypeTable=sonusEvLogTypeTable, sonusEvLogFilterStatusShelf=sonusEvLogFilterStatusShelf, sonusEvLogTypeStatusFileRecs=sonusEvLogTypeStatusFileRecs, sonusEventLogFileShutdownNotification=sonusEventLogFileShutdownNotification, sonusEvLogFilterLevel=sonusEvLogFilterLevel, sonusEvLogTypeStatusFileDropped=sonusEvLogTypeStatusFileDropped, sonusEventLogFileMsgQueueChngNotification=sonusEventLogFileMsgQueueChngNotification, sonusEvLogFilterType=sonusEvLogFilterType, sonusEvLogMemTable=sonusEvLogMemTable, sonusEvLogMemEntry=sonusEvLogMemEntry, sonusEventLogMIBNotificationsObjects=sonusEventLogMIBNotificationsObjects, sonusEventLogMIB=sonusEventLogMIB, sonusEvLogType=sonusEvLogType, PYSNMP_MODULE_ID=sonusEventLogMIB, sonusEvLogTypeStatusShelf=sonusEvLogTypeStatusShelf, sonusEvLogTypeStatusMemRecs=sonusEvLogTypeStatusMemRecs, sonusEvLogFilterTable=sonusEvLogFilterTable, sonusEvLogTypeStatusTable=sonusEvLogTypeStatusTable, sonusEvLogTypeStatusFileBytes=sonusEvLogTypeStatusFileBytes, sonusEvLogTypeStatusMemDropped=sonusEvLogTypeStatusMemDropped, sonusEvLogMemIndex=sonusEvLogMemIndex, sonusEvLogFilterEntry=sonusEvLogFilterEntry, sonusEvLogFilterStatusEventClass=sonusEvLogFilterStatusEventClass, sonusEventLogFileRestartNotification=sonusEventLogFileRestartNotification, sonusEventLogFileMaxEventMemSizeChngNotification=sonusEventLogFileMaxEventMemSizeChngNotification, sonusEventLogMIBObjects=sonusEventLogMIBObjects, sonusEventLogMIBNotifications=sonusEventLogMIBNotifications, sonusEvLogFilterState=sonusEvLogFilterState, sonusEvLogTypeBaseDirectory=sonusEvLogTypeBaseDirectory, sonusEvLogFilterShelf=sonusEvLogFilterShelf, sonusEvLogCurFileCount=sonusEvLogCurFileCount, sonusEvLogTypeFileCount=sonusEvLogTypeFileCount, sonusEvLogMemType=sonusEvLogMemType, sonusEventLogMIBNotificationsPrefix=sonusEventLogMIBNotificationsPrefix, sonusEventLogAcctFileRestartNotification=sonusEventLogAcctFileRestartNotification, sonusEvLogFilterSlot=sonusEvLogFilterSlot, sonusEvLogTypeStatusType=sonusEvLogTypeStatusType, sonusEvLogFilterStatusEntry=sonusEvLogFilterStatusEntry, sonusEvLogFilterStatusSlot=sonusEvLogFilterStatusSlot, sonusEventLogSaveToChngNotification=sonusEventLogSaveToChngNotification)
