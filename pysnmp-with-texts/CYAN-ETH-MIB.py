#
# PySNMP MIB module CYAN-ETH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYAN-ETH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
cyanEntityModules, = mibBuilder.importSymbols("CYAN-MIB", "cyanEntityModules")
CyanEnDisabledTc, CyanFppSubTypeTc, CyanAdminStateTc, CyanOpStateTc, CyanSecServiceStateTc, CyanFppTypeTc, CyanOpStateQualTc = mibBuilder.importSymbols("CYAN-TC-MIB", "CyanEnDisabledTc", "CyanFppSubTypeTc", "CyanAdminStateTc", "CyanOpStateTc", "CyanSecServiceStateTc", "CyanFppTypeTc", "CyanOpStateQualTc")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Unsigned32, Bits, Counter32, TimeTicks, Gauge32, NotificationType, IpAddress, ModuleIdentity, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Unsigned32", "Bits", "Counter32", "TimeTicks", "Gauge32", "NotificationType", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cyanEthModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180))
cyanEthModule.setRevisions(('2014-12-07 05:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cyanEthModule.setRevisionsDescriptions(('Release 6.0 build 1416362081',))
if mibBuilder.loadTexts: cyanEthModule.setLastUpdated('201412070545Z')
if mibBuilder.loadTexts: cyanEthModule.setOrganization('Cyan, Inc.')
if mibBuilder.loadTexts: cyanEthModule.setContactInfo(' E-mail: support@cyaninc.com Postal: Cyan, Inc. 1390 N. McDowell Blvd., # G-327 Petaluma, CA 94954 USA Tel: +1-707-735-2300')
if mibBuilder.loadTexts: cyanEthModule.setDescription('MIB module for Ethrnet Termination')
cyanEthMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1))
cyanEthTable = MibTable((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1), )
if mibBuilder.loadTexts: cyanEthTable.setStatus('current')
if mibBuilder.loadTexts: cyanEthTable.setDescription('A list of Eth entries.')
cyanEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1), ).setIndexNames((0, "CYAN-ETH-MIB", "cyanEthShelfId"), (0, "CYAN-ETH-MIB", "cyanEthModuleId"), (0, "CYAN-ETH-MIB", "cyanEthEthTermId"))
if mibBuilder.loadTexts: cyanEthEntry.setStatus('current')
if mibBuilder.loadTexts: cyanEthEntry.setDescription('An entry of Eth.')
cyanEthShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cyanEthShelfId.setStatus('current')
if mibBuilder.loadTexts: cyanEthShelfId.setDescription('Shelf Id')
cyanEthModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cyanEthModuleId.setStatus('current')
if mibBuilder.loadTexts: cyanEthModuleId.setDescription('Module Id')
cyanEthEthTermId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: cyanEthEthTermId.setStatus('current')
if mibBuilder.loadTexts: cyanEthEthTermId.setDescription('Ethernet Termination Id')
cyanEthAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 4), CyanAdminStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthAdminState.setStatus('current')
if mibBuilder.loadTexts: cyanEthAdminState.setDescription('Administrative state')
cyanEthAutoinserviceSoakTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthAutoinserviceSoakTimeSec.setStatus('current')
if mibBuilder.loadTexts: cyanEthAutoinserviceSoakTimeSec.setDescription('Auto-In-Service soak time')
cyanEthFarEndPtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthFarEndPtpId.setStatus('current')
if mibBuilder.loadTexts: cyanEthFarEndPtpId.setDescription('Port or Termination Point Id')
cyanEthFarEndShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthFarEndShelfId.setStatus('current')
if mibBuilder.loadTexts: cyanEthFarEndShelfId.setDescription('Shelf Id')
cyanEthFarEndSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthFarEndSlotId.setStatus('current')
if mibBuilder.loadTexts: cyanEthFarEndSlotId.setDescription('Slot Id')
cyanEthFarEndSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthFarEndSystemId.setStatus('current')
if mibBuilder.loadTexts: cyanEthFarEndSystemId.setDescription('System Id')
cyanEthFlowPointPoolSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 10), CyanFppSubTypeTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthFlowPointPoolSubtype.setStatus('current')
if mibBuilder.loadTexts: cyanEthFlowPointPoolSubtype.setDescription('')
cyanEthFppType = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 11), CyanFppTypeTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthFppType.setStatus('current')
if mibBuilder.loadTexts: cyanEthFppType.setDescription('')
cyanEthIpForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 12), CyanEnDisabledTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthIpForwarding.setStatus('current')
if mibBuilder.loadTexts: cyanEthIpForwarding.setDescription('Enable/disable IP forwarding')
cyanEthLinkOamEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 13), CyanEnDisabledTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthLinkOamEnableState.setStatus('current')
if mibBuilder.loadTexts: cyanEthLinkOamEnableState.setDescription('Ethernet 802.3ah Clause 57 link OAM')
cyanEthOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 14), CyanOpStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthOperState.setStatus('current')
if mibBuilder.loadTexts: cyanEthOperState.setDescription('Primary Operation State')
cyanEthOperStateQual = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 15), CyanOpStateQualTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthOperStateQual.setStatus('current')
if mibBuilder.loadTexts: cyanEthOperStateQual.setDescription('Operation state qualifier')
cyanEthPortSpeedMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthPortSpeedMbps.setStatus('current')
if mibBuilder.loadTexts: cyanEthPortSpeedMbps.setDescription('Operating speed')
cyanEthRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 17), CyanEnDisabledTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthRouting.setStatus('current')
if mibBuilder.loadTexts: cyanEthRouting.setDescription('Enable/disable Routing')
cyanEthSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 18), CyanSecServiceStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthSecServState.setStatus('current')
if mibBuilder.loadTexts: cyanEthSecServState.setDescription('Secondary service state')
cyanEthTopologyDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 1, 1, 1, 19), CyanEnDisabledTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanEthTopologyDiscovery.setStatus('current')
if mibBuilder.loadTexts: cyanEthTopologyDiscovery.setDescription('Enable/disable Physical Topology Discovery')
cyanEthObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 20)).setObjects(("CYAN-ETH-MIB", "cyanEthAdminState"), ("CYAN-ETH-MIB", "cyanEthAutoinserviceSoakTimeSec"), ("CYAN-ETH-MIB", "cyanEthFarEndPtpId"), ("CYAN-ETH-MIB", "cyanEthFarEndShelfId"), ("CYAN-ETH-MIB", "cyanEthFarEndSlotId"), ("CYAN-ETH-MIB", "cyanEthFarEndSystemId"), ("CYAN-ETH-MIB", "cyanEthFlowPointPoolSubtype"), ("CYAN-ETH-MIB", "cyanEthFppType"), ("CYAN-ETH-MIB", "cyanEthIpForwarding"), ("CYAN-ETH-MIB", "cyanEthLinkOamEnableState"), ("CYAN-ETH-MIB", "cyanEthOperState"), ("CYAN-ETH-MIB", "cyanEthOperStateQual"), ("CYAN-ETH-MIB", "cyanEthPortSpeedMbps"), ("CYAN-ETH-MIB", "cyanEthRouting"), ("CYAN-ETH-MIB", "cyanEthSecServState"), ("CYAN-ETH-MIB", "cyanEthTopologyDiscovery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanEthObjectGroup = cyanEthObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cyanEthObjectGroup.setDescription('Group of objects that comes with Eth module')
cyanEthCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 28533, 5, 30, 180, 30)).setObjects(("CYAN-ETH-MIB", "cyanEthObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanEthCompliance = cyanEthCompliance.setStatus('current')
if mibBuilder.loadTexts: cyanEthCompliance.setDescription('The basic info needed to be a cyan Eth')
mibBuilder.exportSymbols("CYAN-ETH-MIB", cyanEthFppType=cyanEthFppType, cyanEthModuleId=cyanEthModuleId, cyanEthModule=cyanEthModule, cyanEthTopologyDiscovery=cyanEthTopologyDiscovery, cyanEthAdminState=cyanEthAdminState, cyanEthEthTermId=cyanEthEthTermId, cyanEthFarEndShelfId=cyanEthFarEndShelfId, cyanEthOperState=cyanEthOperState, PYSNMP_MODULE_ID=cyanEthModule, cyanEthFarEndSystemId=cyanEthFarEndSystemId, cyanEthShelfId=cyanEthShelfId, cyanEthSecServState=cyanEthSecServState, cyanEthMibObjects=cyanEthMibObjects, cyanEthPortSpeedMbps=cyanEthPortSpeedMbps, cyanEthRouting=cyanEthRouting, cyanEthIpForwarding=cyanEthIpForwarding, cyanEthObjectGroup=cyanEthObjectGroup, cyanEthFarEndSlotId=cyanEthFarEndSlotId, cyanEthFlowPointPoolSubtype=cyanEthFlowPointPoolSubtype, cyanEthLinkOamEnableState=cyanEthLinkOamEnableState, cyanEthEntry=cyanEthEntry, cyanEthCompliance=cyanEthCompliance, cyanEthTable=cyanEthTable, cyanEthFarEndPtpId=cyanEthFarEndPtpId, cyanEthOperStateQual=cyanEthOperStateQual, cyanEthAutoinserviceSoakTimeSec=cyanEthAutoinserviceSoakTimeSec)
