#
# PySNMP MIB module CADANT-LICENSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-LICENSE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
cadLicense, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadLicense")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, ModuleIdentity, NotificationType, iso, Integer32, Counter64, ObjectIdentity, MibIdentifier, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "ModuleIdentity", "NotificationType", "iso", "Integer32", "Counter64", "ObjectIdentity", "MibIdentifier", "Gauge32", "TimeTicks")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
cadLicenseMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1))
cadLicenseMib.setRevisions(('2015-06-17 00:00', '2015-06-09 00:00', '2014-08-20 00:00', '2014-08-14 00:00', '2014-07-17 00:00', '2014-07-10 00:00', '2014-06-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadLicenseMib.setRevisionsDescriptions(('Change maximum value of cadLicenseSpareChannelCount from 5000 to 250000.', 'Add docsisDownstreamOfdm and docsisUpstreamOfdma as possible chassis license types. Rename docsisUpstream to docsisUpstream30 to better delineate the docsisUpstream30 license type from the docsisUpstreamofdma license type. Update maximum cadLicenseChannelCount value to 500000. Update cadLicenseChannelCount and cadLicenseSpareChannelCount descriptions.', 'Change cadLicenseKey from 16 hex digits to 20 hex digits to accommodate a version number.', 'Add the cadChassisLicensesApplied and cadChassisLicensesValid objects to the cadChassisLicenseStatusTable.', 'Update MIB object names based on PSA changes.', 'Fix enumeration values for CadChassisLicenseIndexType.', 'Add chassis-based and CAM-based license objects and counts.',))
if mibBuilder.loadTexts: cadLicenseMib.setLastUpdated('201506170000Z')
if mibBuilder.loadTexts: cadLicenseMib.setOrganization('ARRIS Group, Inc.')
if mibBuilder.loadTexts: cadLicenseMib.setContactInfo('Arris Technical Support Phone: +1 630 281 3000 E-Mail: support@arris.com')
if mibBuilder.loadTexts: cadLicenseMib.setDescription('Arris E6000 licensing parameters')
class CadChassisLicenseIndexType(TextualConvention, Integer32):
    description = 'The Type of Chassis License: videoNarrowcastB - Annex B QAM configured for SDV and/or VOD videoReplicaNarrowcastB - QAM replication channel of a videoNarrowcastB base channel videoNarrowcastA - Annex A QAM configured for SDV and/or VOD videoReplicaNarrowcastA - QAM replication channel of a videoNarrowcastA base channel docsisDownstreamOfdm - 1MHz of frequency spectrum for a downstream OFDM channel'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("reserved", 1), ("videoNarrowcastB", 2), ("videoReplicaNarrowcastB", 3), ("videoBroadcastB", 4), ("videoReplicaBroadcastB", 5), ("videoNarrowcastA", 6), ("videoReplicaNarrowcastA", 7), ("videoBroadcastA", 8), ("videoReplicaBroadcastA", 9), ("docsisUpstream30", 10), ("docsisDownstream30B", 11), ("docsisDownstream30A", 12), ("docsisDownstreamOfdm", 13), ("docsisUpstreamOfdma", 14))

cadChassisLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 1), )
if mibBuilder.loadTexts: cadChassisLicenseTable.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicenseTable.setDescription('This table stores licensing configuration data on a per license type basis.')
cadChassisLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 1, 1), ).setIndexNames((0, "CADANT-LICENSE-MIB", "cadLicenseIndex"))
if mibBuilder.loadTexts: cadChassisLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicenseEntry.setDescription('Chassis License related data.')
cadLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 1, 1, 1), CadChassisLicenseIndexType())
if mibBuilder.loadTexts: cadLicenseIndex.setStatus('current')
if mibBuilder.loadTexts: cadLicenseIndex.setDescription('This object is the type of license.')
cadLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadLicenseKey.setStatus('current')
if mibBuilder.loadTexts: cadLicenseKey.setDescription('This object indicates the 20 hex digit license key (ASCII). The first 16 hex digits are the license key and the last 4 hex digits are the version number.')
cadLicenseChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadLicenseChannelCount.setStatus('current')
if mibBuilder.loadTexts: cadLicenseChannelCount.setDescription('This object indicates the number of licenses configured, i.e., the license level, for the license type.')
cadLicenseSpareChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 250000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadLicenseSpareChannelCount.setStatus('current')
if mibBuilder.loadTexts: cadLicenseSpareChannelCount.setDescription('This object indicates the number of spare licenses configured for the license type.')
cadLicenseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadLicenseRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadLicenseRowStatus.setDescription('This object is for controlling entries in this table.')
cadChassisLicenseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 2), )
if mibBuilder.loadTexts: cadChassisLicenseStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicenseStatusTable.setDescription('This table stores the number of each license type requested and the number used within the chassis.')
cadChassisLicenseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 2, 1), ).setIndexNames((0, "CADANT-LICENSE-MIB", "cadChassisLicenseStatusType"))
if mibBuilder.loadTexts: cadChassisLicenseStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicenseStatusEntry.setDescription('Chassis license counts across all CAMs.')
cadChassisLicenseStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 2, 1, 1), CadChassisLicenseIndexType())
if mibBuilder.loadTexts: cadChassisLicenseStatusType.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicenseStatusType.setDescription('This object is the type of license.')
cadChassisLicensesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChassisLicensesUsed.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicensesUsed.setDescription('This object provides a total of the licenses in use for the license type.')
cadChassisLicensesRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChassisLicensesRequested.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicensesRequested.setDescription('This object provides a total for the number of licenses requested for the license type.')
cadChassisLicensesApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChassisLicensesApplied.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicensesApplied.setDescription('This object shows the total for the number of valid licenses associated with the configured license key. A value of 0 implies the configured license is invalid.')
cadChassisLicensesValid = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadChassisLicensesValid.setStatus('current')
if mibBuilder.loadTexts: cadChassisLicensesValid.setDescription('Set to TRUE to indicate that the license key was properly formed and was able to be successfully parsed, else set to FALSE.')
cerCardDataLicenseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 3), )
if mibBuilder.loadTexts: cerCardDataLicenseStatusTable.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicenseStatusTable.setDescription('This table stores the number of each license type requested and the number used in each CAM in the chassis.')
cerCardDataLicenseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 3, 1), ).setIndexNames((0, "CADANT-LICENSE-MIB", "cerCardDataLicenseSlot"), (0, "CADANT-LICENSE-MIB", "cerCardDataLicenseType"))
if mibBuilder.loadTexts: cerCardDataLicenseStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicenseStatusEntry.setDescription('Chassis and Card license usage counts.')
cerCardDataLicenseSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(9, 14), )))
if mibBuilder.loadTexts: cerCardDataLicenseSlot.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicenseSlot.setDescription('This object defines the CAM slot number.')
cerCardDataLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 3, 1, 2), CadChassisLicenseIndexType())
if mibBuilder.loadTexts: cerCardDataLicenseType.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicenseType.setDescription('This object is the type of license.')
cerCardDataLicensesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLicensesUsed.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicensesUsed.setDescription('This object provides a total for the number of licenses in use for the license type.')
cerCardDataLicensesRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 135, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLicensesRequested.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicensesRequested.setDescription('This object provides a total for the number licenses requested for the license type.')
mibBuilder.exportSymbols("CADANT-LICENSE-MIB", cadLicenseMib=cadLicenseMib, CadChassisLicenseIndexType=CadChassisLicenseIndexType, cadChassisLicenseEntry=cadChassisLicenseEntry, cadChassisLicenseTable=cadChassisLicenseTable, cadLicenseRowStatus=cadLicenseRowStatus, cadLicenseKey=cadLicenseKey, cerCardDataLicensesUsed=cerCardDataLicensesUsed, PYSNMP_MODULE_ID=cadLicenseMib, cadChassisLicensesUsed=cadChassisLicensesUsed, cadChassisLicenseStatusEntry=cadChassisLicenseStatusEntry, cadLicenseSpareChannelCount=cadLicenseSpareChannelCount, cerCardDataLicenseStatusTable=cerCardDataLicenseStatusTable, cerCardDataLicenseType=cerCardDataLicenseType, cadLicenseIndex=cadLicenseIndex, cerCardDataLicenseSlot=cerCardDataLicenseSlot, cadChassisLicensesRequested=cadChassisLicensesRequested, cerCardDataLicensesRequested=cerCardDataLicensesRequested, cadChassisLicensesValid=cadChassisLicensesValid, cadChassisLicenseStatusType=cadChassisLicenseStatusType, cadLicenseChannelCount=cadLicenseChannelCount, cadChassisLicensesApplied=cadChassisLicensesApplied, cerCardDataLicenseStatusEntry=cerCardDataLicenseStatusEntry, cadChassisLicenseStatusTable=cadChassisLicenseStatusTable)
