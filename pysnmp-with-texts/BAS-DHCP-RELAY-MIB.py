#
# PySNMP MIB module BAS-DHCP-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-DHCP-RELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
BasSubnetClass, basDhcpRelay, BasSlotId, BasInterfaceId, BasChassisId, BasLogicalPortId = mibBuilder.importSymbols("BAS-MIB", "BasSubnetClass", "basDhcpRelay", "BasSlotId", "BasInterfaceId", "BasChassisId", "BasLogicalPortId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, MibIdentifier, ObjectIdentity, iso, IpAddress, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, TimeTicks, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "MibIdentifier", "ObjectIdentity", "iso", "IpAddress", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "TimeTicks", "Integer32", "Unsigned32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
basDhcpRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1))
if mibBuilder.loadTexts: basDhcpRelayMIB.setLastUpdated('9902031415Z')
if mibBuilder.loadTexts: basDhcpRelayMIB.setOrganization('Broadband Access Systems, Inc.')
if mibBuilder.loadTexts: basDhcpRelayMIB.setContactInfo(' Tech Support Broadband Access Systems, Inc. 201 Forest Street Marlborough, MA 01752 USA 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basDhcpRelayMIB.setDescription('The MIB module defines the configuration MIB objects for Broadband Access Systems, Inc. DHCP Relay functionality extensions.')
basDhcpRelayTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1), )
if mibBuilder.loadTexts: basDhcpRelayTable.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayTable.setDescription('A list of DHCP Relay entries.')
basDhcpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1), ).setIndexNames((0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayChassis"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelaySlot"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayIf"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayLPort"))
if mibBuilder.loadTexts: basDhcpRelayEntry.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayEntry.setDescription('An entry containing management information applicable to a particular DHCP Relay.')
basDhcpRelayChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basDhcpRelayChassis.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayChassis.setDescription('The BAS Chassis ID of the Card.')
basDhcpRelaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basDhcpRelaySlot.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelaySlot.setDescription('The BAS Slot ID of the Card.')
basDhcpRelayIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basDhcpRelayIf.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayIf.setDescription('The BAS interface ID of the Card.')
basDhcpRelayLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basDhcpRelayLPort.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayLPort.setDescription('The BAS logical port ID of the Card.')
basDhcpRelayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayEnable.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayEnable.setDescription('Enable and disable DHCP relay on the card.')
basDhcpRelayDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayDiscover.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayDiscover.setDescription('Number of Discover messages.')
basDhcpRelayOffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayOffer.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayOffer.setDescription('Number of Offer messages.')
basDhcpRelayRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayRequest.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayRequest.setDescription('Number of Request messages.')
basDhcpRelayDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayDecline.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayDecline.setDescription('Number of Decline messages.')
basDhcpRelayNak = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayNak.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayNak.setDescription('Number of Nak messages.')
basDhcpRelayInform = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayInform.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayInform.setDescription('Number of Inform messages.')
basDhcpRelayAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayAck.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayAck.setDescription('Number of Ack messages.')
basDhcpRelayRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayRelease.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayRelease.setDescription('Number of Release messages.')
basDhcpRelayHelper = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayHelper.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayHelper.setDescription('Enable gateway selection based on primary/secondary interface address.')
basDhcpRelayAlwaysBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayAlwaysBroadcast.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayAlwaysBroadcast.setDescription('Enable always broadcasting response to the client.')
basDhcpRelayDuplicateResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayDuplicateResponse.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayDuplicateResponse.setDescription('Enable sending response to client in unicast and broadcast mode.')
basDhcpRelayBasEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayBasEnable.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayBasEnable.setDescription('Enable BAS proprietory solution.')
basDhcpRelayBogusAgentDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayBogusAgentDrops.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayBogusAgentDrops.setDescription("Packets dropped because agent option field was specified and we're not relaying packets that already have an agent option specified.")
basDhcpRelayBogusGiaddrDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayBogusGiaddrDrops.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayBogusGiaddrDrops.setDescription('Packets sent to us to relay back to a client, but with a bogus giaddr.')
basDhcpRelayServerPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayServerPacketErrors.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerPacketErrors.setDescription('Errors sending packets to servers.')
basDhcpRelayClientPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayClientPacketErrors.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayClientPacketErrors.setDescription('Errors sending packets to clients.')
basDhcpRelayAddAgentOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayAddAgentOptions.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayAddAgentOptions.setDescription('If nonzero, add relay agent options.')
basDhcpRelayDropAgentMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayDropAgentMismatch.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayDropAgentMismatch.setDescription("If nonzero, drop server replies that don't contain a Relay Agent Information option whose Agent ID suboption matches our giaddr.")
basDhcpRelayCorruptAgentOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayCorruptAgentOptions.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayCorruptAgentOptions.setDescription('Number of packets dropped because relay agent information option was bad.')
basDhcpRelayMissingAgentOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayMissingAgentOption.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayMissingAgentOption.setDescription('Number of packets dropped because no RAI option matching our ID was found.')
basDhcpRelayBadCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayBadCircuitId.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayBadCircuitId.setDescription('Circuit ID option in matching RAI option did not match any known circuit ID')
basDhcpRelayMissingCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayMissingCircuitId.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayMissingCircuitId.setDescription('Circuit ID option in matching RAI option was missing.')
basDhcpRelayMaxAgentOptionPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayMaxAgentOptionPacketLength.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayMaxAgentOptionPacketLength.setDescription("If nonzero, drop server replies that don't contain a Relay Agent Information option whose Agent ID suboption matches our giaddr.")
basDhcpRelayAgentRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forwardAndAppend", 1), ("forwardAndReplace", 2), ("forwardUntouched", 3), ("discard", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayAgentRelayMode.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayAgentRelayMode.setDescription("What to do about packets we're asked to relay that already have a relay option: forward_and_append, /* Forward and append our own relay option. */ forward_and_replace, /* Forward, but replace theirs with ours. */ forward_untouched, /* Forward without changes. */ discard } agent_relay_mode = forward_and_replace")
basDhcpRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2), )
if mibBuilder.loadTexts: basDhcpRelayServerTable.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerTable.setDescription('A list of DHCP Relay Server entries.')
basDhcpRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1), ).setIndexNames((0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerChassis"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerSlot"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerIf"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerLPort"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerAddress"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerType"))
if mibBuilder.loadTexts: basDhcpRelayServerEntry.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerEntry.setDescription('An entry containing management information applicable to a particular DHCP Relay Server.')
basDhcpRelayServerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basDhcpRelayServerChassis.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerChassis.setDescription('The BAS Chassis ID of the Card.')
basDhcpRelayServerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basDhcpRelayServerSlot.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerSlot.setDescription('The BAS Slot ID of the Card.')
basDhcpRelayServerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basDhcpRelayServerIf.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerIf.setDescription('The BAS interface ID of the Card.')
basDhcpRelayServerLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basDhcpRelayServerLPort.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerLPort.setDescription('The BAS logical port ID of the Card.')
basDhcpRelayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 5), IpAddress().clone(2))
if mibBuilder.loadTexts: basDhcpRelayServerAddress.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerAddress.setDescription('Address of DHCP Relay Server on this forwarder.')
basDhcpRelayServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 6), BasSubnetClass().clone(1))
if mibBuilder.loadTexts: basDhcpRelayServerType.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerType.setDescription('Type of DHCP server. When picking a DHCP server, \\ choice is made depending on type.')
basDhcpRelayServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 7), RowStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDhcpRelayServerStatus.setStatus('current')
if mibBuilder.loadTexts: basDhcpRelayServerStatus.setDescription('Adding and deleting the Server.')
mibBuilder.exportSymbols("BAS-DHCP-RELAY-MIB", basDhcpRelayBogusAgentDrops=basDhcpRelayBogusAgentDrops, basDhcpRelayServerIf=basDhcpRelayServerIf, basDhcpRelayIf=basDhcpRelayIf, basDhcpRelayDecline=basDhcpRelayDecline, basDhcpRelayNak=basDhcpRelayNak, basDhcpRelayAck=basDhcpRelayAck, basDhcpRelayBasEnable=basDhcpRelayBasEnable, basDhcpRelayServerPacketErrors=basDhcpRelayServerPacketErrors, basDhcpRelaySlot=basDhcpRelaySlot, basDhcpRelayDropAgentMismatch=basDhcpRelayDropAgentMismatch, basDhcpRelayDuplicateResponse=basDhcpRelayDuplicateResponse, basDhcpRelayOffer=basDhcpRelayOffer, basDhcpRelayMaxAgentOptionPacketLength=basDhcpRelayMaxAgentOptionPacketLength, basDhcpRelayDiscover=basDhcpRelayDiscover, basDhcpRelayEnable=basDhcpRelayEnable, basDhcpRelayRequest=basDhcpRelayRequest, basDhcpRelayRelease=basDhcpRelayRelease, basDhcpRelayServerChassis=basDhcpRelayServerChassis, basDhcpRelayMissingCircuitId=basDhcpRelayMissingCircuitId, basDhcpRelayInform=basDhcpRelayInform, basDhcpRelayLPort=basDhcpRelayLPort, PYSNMP_MODULE_ID=basDhcpRelayMIB, basDhcpRelayAddAgentOptions=basDhcpRelayAddAgentOptions, basDhcpRelayServerStatus=basDhcpRelayServerStatus, basDhcpRelayClientPacketErrors=basDhcpRelayClientPacketErrors, basDhcpRelayAgentRelayMode=basDhcpRelayAgentRelayMode, basDhcpRelayMIB=basDhcpRelayMIB, basDhcpRelayAlwaysBroadcast=basDhcpRelayAlwaysBroadcast, basDhcpRelayServerSlot=basDhcpRelayServerSlot, basDhcpRelayMissingAgentOption=basDhcpRelayMissingAgentOption, basDhcpRelayServerTable=basDhcpRelayServerTable, basDhcpRelayServerLPort=basDhcpRelayServerLPort, basDhcpRelayHelper=basDhcpRelayHelper, basDhcpRelayBogusGiaddrDrops=basDhcpRelayBogusGiaddrDrops, basDhcpRelayEntry=basDhcpRelayEntry, basDhcpRelayChassis=basDhcpRelayChassis, basDhcpRelayServerType=basDhcpRelayServerType, basDhcpRelayServerEntry=basDhcpRelayServerEntry, basDhcpRelayBadCircuitId=basDhcpRelayBadCircuitId, basDhcpRelayCorruptAgentOptions=basDhcpRelayCorruptAgentOptions, basDhcpRelayServerAddress=basDhcpRelayServerAddress, basDhcpRelayTable=basDhcpRelayTable)
