#
# PySNMP MIB module NE-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NE-STAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
allotCom, = mibBuilder.importSymbols("COMPANY-MIB", "allotCom")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Gauge32, Bits, Counter64, TimeTicks, Unsigned32, iso, IpAddress, Counter32, MibIdentifier, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Gauge32", "Bits", "Counter64", "TimeTicks", "Unsigned32", "iso", "IpAddress", "Counter32", "MibIdentifier", "ModuleIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
neStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 2603, 1))
if mibBuilder.loadTexts: neStatistics.setLastUpdated('0103130000Z')
if mibBuilder.loadTexts: neStatistics.setOrganization('Allot Communications')
if mibBuilder.loadTexts: neStatistics.setContactInfo('Allot Communications postal: 5 Hanagar St. Industrial Zone Neve Neeman Hod Hasharon 45800 Israel phone: +972-(0)9-761-9200 fax: +972-(0)9-744-3626 email: support@allot.com')
if mibBuilder.loadTexts: neStatistics.setDescription('Allot NE Statistics MIB.')
neStatMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2603, 1, 1))
neStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1))
neByteCountIn = MibScalar((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neByteCountIn.setStatus('current')
if mibBuilder.loadTexts: neByteCountIn.setDescription('Bytes in on NE')
neByteCountOut = MibScalar((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neByteCountOut.setStatus('current')
if mibBuilder.loadTexts: neByteCountOut.setDescription('Bytes out on NE')
neByteCountTotal = MibScalar((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neByteCountTotal.setStatus('current')
if mibBuilder.loadTexts: neByteCountTotal.setDescription('Total Bytes on NE')
neLiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neLiveConnections.setStatus('current')
if mibBuilder.loadTexts: neLiveConnections.setDescription('Live Connections on NE')
neNewConnections = MibScalar((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neNewConnections.setStatus('current')
if mibBuilder.loadTexts: neNewConnections.setDescription('New Connections on NE')
nePacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nePacketsIn.setStatus('current')
if mibBuilder.loadTexts: nePacketsIn.setDescription('Packets in on NE')
nePacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nePacketsOut.setStatus('current')
if mibBuilder.loadTexts: nePacketsOut.setDescription('Packets out on NE')
nePacketsTotal = MibScalar((1, 3, 6, 1, 4, 1, 2603, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nePacketsTotal.setStatus('current')
if mibBuilder.loadTexts: nePacketsTotal.setDescription('Total Packets on NE')
neByteCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2603, 1, 1, 2)).setObjects(("NE-STAT-MIB", "neByteCountIn"), ("NE-STAT-MIB", "neByteCountOut"), ("NE-STAT-MIB", "neByteCountTotal"), ("NE-STAT-MIB", "neLiveConnections"), ("NE-STAT-MIB", "neNewConnections"), ("NE-STAT-MIB", "nePacketsIn"), ("NE-STAT-MIB", "nePacketsOut"), ("NE-STAT-MIB", "nePacketsTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    neByteCountersGroup = neByteCountersGroup.setStatus('current')
if mibBuilder.loadTexts: neByteCountersGroup.setDescription('A collection of objects providing NE counters.')
mibBuilder.exportSymbols("NE-STAT-MIB", neStat=neStat, neByteCountOut=neByteCountOut, nePacketsTotal=nePacketsTotal, neStatMIB=neStatMIB, neByteCountIn=neByteCountIn, neByteCountTotal=neByteCountTotal, nePacketsIn=nePacketsIn, neLiveConnections=neLiveConnections, neNewConnections=neNewConnections, neStatistics=neStatistics, PYSNMP_MODULE_ID=neStatistics, nePacketsOut=nePacketsOut, neByteCountersGroup=neByteCountersGroup)
