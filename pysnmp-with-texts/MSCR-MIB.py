#
# PySNMP MIB module MSCR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MSCR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, Counter32, TimeTicks, ObjectIdentity, Unsigned32, Integer32, IpAddress, Counter64, iso, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, NotificationType, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Counter32", "TimeTicks", "ObjectIdentity", "Unsigned32", "Integer32", "IpAddress", "Counter64", "iso", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "NotificationType", "MibIdentifier", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbSwitchG1Il = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50))
nbMacScr = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 1))
nbMacScrRun = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1))
nbMacScrPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2))
nbMacScrRunSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("perPort", 2), ("perSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunSecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunSecurityLevel.setDescription('MAC security Level')
nbMacScrRunSaveMS = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunSaveMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunSaveMS.setDescription("MAC security address learning: 'manual' - user updates the MAC security table manually; 'save' - user wants 'to freeze' current learned addresses as runtime MAC security table. This object always returns 'manual'.")
nbMacScrRunClearMS = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunClearMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunClearMS.setDescription("MAC security address clearing: 'running' - the MAC security table acts as is; 'clear' - user wants 'to clear' all security addresses from runtime MAC security table. This object always returns 'running'.")
nbMacScrRunPortsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 4), )
if mibBuilder.loadTexts: nbMacScrRunPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunPortsTable.setDescription('A table that contains MAC security Ports configuration.')
nbMacScrRunPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 4, 1), ).setIndexNames((0, "MSCR-MIB", "nbMacScrRunPort"))
if mibBuilder.loadTexts: nbMacScrRunPortsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunPortsEntry.setDescription('The entry describes MAC security Port Configuration.')
nbMacScrRunPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrRunPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunPort.setDescription('Number of port to be managed.')
nbMacScrRunPortScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunPortScrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunPortScrStatus.setDescription("The MAC security status of the port. If port's status is 'disable', it works as regular port. If port's status is 'enable' and [nbMacScrRunSecurityLevel] is not 'none', all ingoing to this port frames will be checked on security. If the frames are not allowed - they will be dropped and port will be really disabled.")
nbMacScrRunPortSaveMS = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunPortSaveMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunPortSaveMS.setDescription("MAC security address learning: 'manual' - user updates the MAC security table manually; 'save' - user wants 'to freeze' current learned addresses for port [nbMacScrRunPort] as runtime MAC security table. This object always returns 'manual'.")
nbMacScrRunPortClearMS = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunPortClearMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunPortClearMS.setDescription("MAC security address clearing: 'running' - the MAC security table acts as is; 'clear' - user wants 'to clear' all security addresses for port [nbMacScrRunPort] from runtime MAC security table. This object always returns 'running'.")
nbMacScrRunPortLockingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrRunPortLockingMAC.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunPortLockingMAC.setDescription("Last MAC address which locked this Port (prohibited access). In this case Agent will Disable this Port and will send 'unresolvedMAC' TRAP. To improve this situation, manager must: to add the locking MAC Address for the MAC Addresses list alowed for this Port in the MAC Security Data Base or to prevent coming of the prohibited MAC Address on this Port in the future and then to Enable this Port.")
nbMacScrRunMsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 5), )
if mibBuilder.loadTexts: nbMacScrRunMsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunMsTable.setDescription('A table that contains information about MAC addresses for ports which the user has entered. This information is used by the MAC security mechanism in determining how to learn a new address of received frame.')
nbMacScrRunMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 5, 1), ).setIndexNames((0, "MSCR-MIB", "nbMacScrRunMsIndex"))
if mibBuilder.loadTexts: nbMacScrRunMsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunMsEntry.setDescription("Information about a specific MAC security address. While the MAC table is implemented as a hash table, for 'next' and 'get' operations the index is [nbMacScrRunMsIndex], but for 'set' operations the PDU must contain the [nbMacScrRunMsAddress] and [nbMacScrRunMsPort] fields (see [nbMacScrRunMsState] DESCRIPTION).")
nbMacScrRunMsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrRunMsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunMsIndex.setDescription('Index of the entry.')
nbMacScrRunMsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 5, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunMsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunMsAddress.setDescription('MAC address which will be learned.')
nbMacScrRunMsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunMsPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunMsPort.setDescription("Port of the entry. '0' value indicates that the MAC address of the entry applies to all device ports and not to particular one.")
nbMacScrRunMsState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrRunMsState.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunMsState.setDescription("State of the entry: Only 'valid' entries participate in the MAC security process. The new entry is created when PDU with [nbMacScrRunMsState]='valid'(1), [nbMacScrRunMsAddress], and optionally [nbMacScrRunMsPort] (default='0') comes. If [nbMacScrRunMsAddress] and [nbMacScrRunMsPort] exists, the switch replaces it. The old entry is deleted when PDU with [nbMacScrRunMsState]='invalid'(2), [nbMacScrRunMsAddress], [nbMacScrRunMsPort] comes. The old entry is modified when PDU with [nbMacScrRunMsAddress] and new value of field [nbMacScrRunMsPort] comes.")
nbMacScrRunMsMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrRunMsMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunMsMaxNum.setDescription('MAX possible quantity of entries in the MAC Security Running Table.')
nbMacScrRunTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrRunTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrRunTableSize.setDescription('Real quantity of entries in the MAC Security Running Table.')
nbMacScrPermSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("perPort", 2), ("perSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermSecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermSecurityLevel.setDescription('MAC security Level')
nbMacScrPermSaveMS = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermSaveMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermSaveMS.setDescription("MAC security address learning: 'manual' - user updates the MAC security table manually; 'save' - user wants 'to freeze' current learned addresses as permanent MAC security table. This object always returns 'manual'.")
nbMacScrPermClearMS = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermClearMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermClearMS.setDescription("MAC security address clearing: 'running' - the MAC security table acts as is; 'clear' - user wants 'to clear' all security addresses from permanent MAC security table. This object always returns 'running'.")
nbMacScrPermPortsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 4), )
if mibBuilder.loadTexts: nbMacScrPermPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermPortsTable.setDescription('A table that contains MAC security Ports configuration.')
nbMacScrPermPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 4, 1), ).setIndexNames((0, "MSCR-MIB", "nbMacScrPermPort"))
if mibBuilder.loadTexts: nbMacScrPermPortsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermPortsEntry.setDescription('The entry describes MAC security Port Configuration.')
nbMacScrPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrPermPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermPort.setDescription('Number of port to be managed.')
nbMacScrPermPortScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermPortScrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermPortScrStatus.setDescription("The MAC security status of the port. If port's status is 'disable', it works as regular port. If port's status is 'enable' and [nbMacScrPermSecurityLevel] is not 'none', all ingoing to this port frames will be checked on security. If the frames are not allowed - they will be dropped and port will be really disabled.")
nbMacScrPermPortSaveMS = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermPortSaveMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermPortSaveMS.setDescription("MAC security address learning: 'manual' - user updates the MAC security table manually; 'save' - user wants 'to freeze' current learned addresses for port [nbMacScrRunPort] as permanent MAC security table. The set is for DRAM data base only. The updating of NVRAM data base executes after set to the object [nbMacScrPermLoadMS]. This object always returns 'manual'.")
nbMacScrPermPortClearMS = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermPortClearMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermPortClearMS.setDescription("MAC security address clearing: 'running' - the MAC security table acts as is; 'clear' - user wants 'to clear' all security addresses for port [nbMacScrPermPort] from permanent MAC security table. The set is for DRAM data base only. The updating of NVRAM data base executes after set to the object [nbMacScrPermLoadMS]. This object always returns 'running'.")
nbMacScrPermMsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 5), )
if mibBuilder.loadTexts: nbMacScrPermMsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermMsTable.setDescription('A table that contains information about MAC addresses for ports which the user has entered. This information is used by the MAC security mechanism in determining how to learn a new address of received frame.')
nbMacScrPermMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 5, 1), ).setIndexNames((0, "MSCR-MIB", "nbMacScrPermMsIndex"))
if mibBuilder.loadTexts: nbMacScrPermMsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermMsEntry.setDescription("Information about a specific MAC security address. While the MAC table is implemented as a hash table, for 'next' and 'get' operations the index is [nbMacScrPermMsIndex], but for 'set' operations the PDU must contain the [nbMacScrPermMsAddress] and [nbMacScrPermMsPort] fields (see [nbMacScrPermMsState] DESCRIPTION).")
nbMacScrPermMsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrPermMsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermMsIndex.setDescription('Index of the entry.')
nbMacScrPermMsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 5, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermMsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermMsAddress.setDescription('MAC address which will be learned.')
nbMacScrPermMsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermMsPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermMsPort.setDescription("Port of the entry. '0' value indicates that the MAC address of the entry applies to all device ports and not to particular one.")
nbMacScrPermMsState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermMsState.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermMsState.setDescription("State of the entry: Only 'valid' entries participate in the MAC security process. The new entry is created when PDU with [nbMacScrPermMsState]='valid'(1), [nbMacScrPermMsAddress], and optionally [nbMacScrPermMsPort] (default='0') comes. If [nbMacScrPermMsAddress] and [nbMacScrPermMsPort] exists, the switch replaces it. The old entry is deleted when PDU with [nbMacScrPermMsState]='invalid'(2), [nbMacScrPermMsAddress], [nbMacScrPermMsPort] comes. The old entry is modified when PDU with [nbMacScrPermMsAddress] and new value of field [nbMacScrPermMsPort] comes. The set is for DRAM data base only. The updating of NVRAM data base executes after set to the object [nbMacScrPermLoadMS].")
nbMacScrPermMsMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrPermMsMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermMsMaxNum.setDescription('MAX possible quantity of entries in the MAC Security Permanent Table.')
nbMacScrPermTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbMacScrPermTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermTableSize.setDescription('Real quantity of entries in the MAC Security Permanent Table.')
nbMacScrPermLoadMS = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("load", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbMacScrPermLoadMS.setStatus('mandatory')
if mibBuilder.loadTexts: nbMacScrPermLoadMS.setDescription("MAC security address loading: 'manual' - user updates the MAC security table manually; 'load' - user wants 'to load' permanent MAC security table from the DRAM to the NVRAM. This object always returns 'manual'.")
unresolvedMAC = NotificationType((1, 3, 6, 1, 4, 1, 629, 1, 50, 1) + (0,1)).setObjects(("MSCR-MIB", "nbMacScrRunPort"), ("MSCR-MIB", "nbMacScrRunPortLockingMAC"))
if mibBuilder.loadTexts: unresolvedMAC.setDescription("The SNMP trap that is generated when the Port receives frame with source address not included in this port's MAC security table.")
mibBuilder.exportSymbols("MSCR-MIB", MacAddress=MacAddress, nbMacScrRunMsTable=nbMacScrRunMsTable, nbMacScrPermTableSize=nbMacScrPermTableSize, nbMacScrPermPortsEntry=nbMacScrPermPortsEntry, nbMacScrRunPort=nbMacScrRunPort, nbMacScrPermPort=nbMacScrPermPort, nbMacScrRunPortScrStatus=nbMacScrRunPortScrStatus, nbMacScrRunMsAddress=nbMacScrRunMsAddress, nbMacScrPermMsEntry=nbMacScrPermMsEntry, nbMacScrPermLoadMS=nbMacScrPermLoadMS, nbMacScrRunPortsEntry=nbMacScrRunPortsEntry, nbMacScrRunMsIndex=nbMacScrRunMsIndex, nbMacScrPermPortsTable=nbMacScrPermPortsTable, nbMacScrPermPortScrStatus=nbMacScrPermPortScrStatus, nbMacScrPermSaveMS=nbMacScrPermSaveMS, nbase=nbase, nbMacScrPermMsAddress=nbMacScrPermMsAddress, nbMacScrRunMsMaxNum=nbMacScrRunMsMaxNum, nbMacScr=nbMacScr, nbMacScrPermMsTable=nbMacScrPermMsTable, nbMacScrRunSaveMS=nbMacScrRunSaveMS, nbMacScrPermMsIndex=nbMacScrPermMsIndex, nbMacScrPermMsPort=nbMacScrPermMsPort, nbMacScrRunClearMS=nbMacScrRunClearMS, nbMacScrRunPortLockingMAC=nbMacScrRunPortLockingMAC, nbMacScrPermPortClearMS=nbMacScrPermPortClearMS, nbMacScrRun=nbMacScrRun, nbMacScrPerm=nbMacScrPerm, nbMacScrPermPortSaveMS=nbMacScrPermPortSaveMS, unresolvedMAC=unresolvedMAC, nbSwitchG1=nbSwitchG1, nbMacScrRunTableSize=nbMacScrRunTableSize, nbMacScrPermMsState=nbMacScrPermMsState, nbMacScrPermMsMaxNum=nbMacScrPermMsMaxNum, nbSwitchG1Il=nbSwitchG1Il, nbMacScrRunMsEntry=nbMacScrRunMsEntry, nbMacScrRunMsPort=nbMacScrRunMsPort, nbMacScrPermClearMS=nbMacScrPermClearMS, nbMacScrRunSecurityLevel=nbMacScrRunSecurityLevel, nbMacScrRunPortSaveMS=nbMacScrRunPortSaveMS, nbMacScrRunMsState=nbMacScrRunMsState, nbMacScrRunPortClearMS=nbMacScrRunPortClearMS, nbMacScrPermSecurityLevel=nbMacScrPermSecurityLevel, nbMacScrRunPortsTable=nbMacScrRunPortsTable)
