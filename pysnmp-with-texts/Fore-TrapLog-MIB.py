#
# PySNMP MIB module Fore-TrapLog-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-TrapLog-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
snmpTrapLog, TrapNumber = mibBuilder.importSymbols("Fore-Common-MIB", "snmpTrapLog", "TrapNumber")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, ObjectIdentity, IpAddress, Unsigned32, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, iso, Bits, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "ObjectIdentity", "IpAddress", "Unsigned32", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "iso", "Bits", "Integer32", "ModuleIdentity")
TextualConvention, TimeStamp, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TimeInterval", "DisplayString")
foreTrapLogModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 9, 1))
if mibBuilder.loadTexts: foreTrapLogModule.setLastUpdated('9610010000Z')
if mibBuilder.loadTexts: foreTrapLogModule.setOrganization('FORE')
if mibBuilder.loadTexts: foreTrapLogModule.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreTrapLogModule.setDescription('This MIB module defines the FORE Systems specific Log information for Traps. It provides for a Log table, Var table and Threshold table. Each Log table entry contains general information on the traps that occured, number of times and the last time they occured. The Var table contains information on the trap variables reported with specific traps. The Threshold table is a fully populated table which has the thresholds & timeperiods defined for all the traps.')
trapLogTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 9, 2), )
if mibBuilder.loadTexts: trapLogTable.setStatus('current')
if mibBuilder.loadTexts: trapLogTable.setDescription('A table consisting of entries with trap information')
trapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1), ).setIndexNames((0, "Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: trapLogEntry.setStatus('current')
if mibBuilder.loadTexts: trapLogEntry.setDescription('A table entry containing a trap number, and some information on the trap.')
trapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogIndex.setStatus('current')
if mibBuilder.loadTexts: trapLogIndex.setDescription('The sequence number of this trap occurence. This entry uniquely identifies an entry in the trapLogTable')
trapLogEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogEnterprise.setStatus('current')
if mibBuilder.loadTexts: trapLogEnterprise.setDescription('The enterprise oid of this trap. This used with the trapLogGenericId and trapLogId uniquely identifies the trap type which occured.')
trapLogGenericId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1, 3), TrapNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogGenericId.setStatus('current')
if mibBuilder.loadTexts: trapLogGenericId.setDescription('The value of this object identifies the generic trap type that occured.')
trapLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1, 4), TrapNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogId.setStatus('current')
if mibBuilder.loadTexts: trapLogId.setDescription('The value of this object identifies the specific trap type that occured.')
trapLogXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogXmits.setStatus('current')
if mibBuilder.loadTexts: trapLogXmits.setDescription('The number of times this trap was transmitted out on the network to trap destinations.')
trapLogLastXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogLastXmit.setStatus('current')
if mibBuilder.loadTexts: trapLogLastXmit.setDescription('The sysUptime at which this trap was last transmitted to trap destinations.')
trapLogEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogEvents.setStatus('current')
if mibBuilder.loadTexts: trapLogEvents.setDescription('The number of times this trap event occured.')
trapLogLastEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogLastEvent.setStatus('current')
if mibBuilder.loadTexts: trapLogLastEvent.setDescription('The sysUptime at which this trap event last occured.')
trapLogVarTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 9, 3), )
if mibBuilder.loadTexts: trapLogVarTable.setStatus('current')
if mibBuilder.loadTexts: trapLogVarTable.setDescription('A table of trap variables corresponding to trap occurences.')
trapLogVarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 9, 3, 1), ).setIndexNames((0, "Fore-TrapLog-MIB", "trapLogIndex"), (0, "Fore-TrapLog-MIB", "trapLogVarIndex"))
if mibBuilder.loadTexts: trapLogVarEntry.setStatus('current')
if mibBuilder.loadTexts: trapLogVarEntry.setDescription('A table entry containing informaiton about a trap variable reported for one of the trap occurences.')
trapLogVarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trapLogVarIndex.setStatus('current')
if mibBuilder.loadTexts: trapLogVarIndex.setDescription('The Variable index. This number identifies the index of this variable in a list of variables reported with one trap occurence. The list of variables are in the order of the variables given in the TRAP definition for this trap.')
trapLogVarOID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogVarOID.setStatus('current')
if mibBuilder.loadTexts: trapLogVarOID.setDescription('This is the OID of the trap variable.')
trapLogVarValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogVarValue.setStatus('current')
if mibBuilder.loadTexts: trapLogVarValue.setDescription('This is the value of the trap variable.')
trapThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 9, 4), )
if mibBuilder.loadTexts: trapThresholdTable.setStatus('current')
if mibBuilder.loadTexts: trapThresholdTable.setDescription('A table of thresholds and time periods for the switch traps, which determine when a trap is transmitted to the trap destinations')
trapThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 9, 4, 1), ).setIndexNames((0, "Fore-TrapLog-MIB", "trapThresholdTrapEnterprise"), (0, "Fore-TrapLog-MIB", "trapThresholdGenericTrapId"), (0, "Fore-TrapLog-MIB", "trapThresholdTrapId"))
if mibBuilder.loadTexts: trapThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: trapThresholdEntry.setDescription('A table entry containing the trap type and the threshold value and the time period for the trap.')
trapThresholdTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 4, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: trapThresholdTrapEnterprise.setStatus('current')
if mibBuilder.loadTexts: trapThresholdTrapEnterprise.setDescription('The enterprise OID of this trap.')
trapThresholdGenericTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 4, 1, 2), TrapNumber())
if mibBuilder.loadTexts: trapThresholdGenericTrapId.setStatus('current')
if mibBuilder.loadTexts: trapThresholdGenericTrapId.setDescription('A generic trap type.')
trapThresholdTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 4, 1, 3), TrapNumber())
if mibBuilder.loadTexts: trapThresholdTrapId.setStatus('current')
if mibBuilder.loadTexts: trapThresholdTrapId.setDescription('An enterprise specific trap type.')
trapThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapThresholdValue.setStatus('current')
if mibBuilder.loadTexts: trapThresholdValue.setDescription('The value of the threshold for the number of trap occurences after which the trap gets sent to the destinations.')
trapThresholdTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 9, 4, 1, 5), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapThresholdTimePeriod.setStatus('current')
if mibBuilder.loadTexts: trapThresholdTimePeriod.setDescription("This value has to be used in conjuntion with the trapThresholdValue. It gives the time period over which the threshold is valid. i.e if trapThresholdValue trap events occur, Or if the time since the last transmission is greater than this object's value, the trap gets transmitted out.")
trapThresholdTableReset = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapThresholdTableReset.setStatus('current')
if mibBuilder.loadTexts: trapThresholdTableReset.setDescription('When user sets this object to enable(1), all the threshold table values are reset to default values. The value of this object would be disable(2), after the reconfiguration.')
mibBuilder.exportSymbols("Fore-TrapLog-MIB", trapLogLastXmit=trapLogLastXmit, trapLogIndex=trapLogIndex, trapLogEnterprise=trapLogEnterprise, trapLogEvents=trapLogEvents, trapLogGenericId=trapLogGenericId, trapThresholdValue=trapThresholdValue, foreTrapLogModule=foreTrapLogModule, trapLogLastEvent=trapLogLastEvent, trapLogVarIndex=trapLogVarIndex, PYSNMP_MODULE_ID=foreTrapLogModule, trapThresholdTrapEnterprise=trapThresholdTrapEnterprise, trapLogTable=trapLogTable, trapThresholdTableReset=trapThresholdTableReset, trapLogId=trapLogId, trapLogVarValue=trapLogVarValue, trapLogXmits=trapLogXmits, trapLogVarOID=trapLogVarOID, trapLogVarEntry=trapLogVarEntry, trapThresholdTrapId=trapThresholdTrapId, trapThresholdTable=trapThresholdTable, trapThresholdGenericTrapId=trapThresholdGenericTrapId, trapThresholdEntry=trapThresholdEntry, trapLogEntry=trapLogEntry, trapLogVarTable=trapLogVarTable, trapThresholdTimePeriod=trapThresholdTimePeriod)
