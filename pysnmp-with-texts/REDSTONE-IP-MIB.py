#
# PySNMP MIB module REDSTONE-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
ipCidrRouteEntry, = mibBuilder.importSymbols("IP-FORWARD-MIB", "ipCidrRouteEntry")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
RsNextIfIndex, RsIpAddrLessIf, RsEnable = mibBuilder.importSymbols("REDSTONE-TC", "RsNextIfIndex", "RsIpAddrLessIf", "RsEnable")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, iso, TimeTicks, Counter32, IpAddress, ModuleIdentity, Counter64, Bits, Gauge32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "TimeTicks", "Counter32", "IpAddress", "ModuleIdentity", "Counter64", "Bits", "Gauge32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
rsIpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 12))
rsIpMIB.setRevisions(('1999-09-16 00:00', '1999-08-13 00:00', '1998-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsIpMIB.setRevisionsDescriptions(('In rsIpAddrTable, added rsIpAdEntUnnumLoopbackIfIndex, rsIpAdEntIrdpEnable, rsIpAdEntAccessRouteEnable, rsIpAdEntAccessRouteHost.', 'In rsIpRouteStaticTable, changed Tos to Preference, and added Tag. Added rsIpCidrRouteTable (proprietary extensions to standard ipCidrRouteTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: rsIpMIB.setLastUpdated('9909160000Z')
if mibBuilder.loadTexts: rsIpMIB.setOrganization('Redstone Communications, Inc.')
if mibBuilder.loadTexts: rsIpMIB.setContactInfo(' Redstone Communications, Inc. 5 Carlisle Road Westford MA 01886 USA Tel: +1-978-692-1999 Email: mib@redstonecom.com ')
if mibBuilder.loadTexts: rsIpMIB.setDescription('The IP Protocol MIB for the Redstone Communications Inc. enterprise.')
rsIpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1))
rsIpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 1))
rsIpAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2))
rsIpRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3))
rsIpNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 1, 1), RsNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsIpNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in rsIpIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously. ')
rsIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 1, 2), )
if mibBuilder.loadTexts: rsIpIfTable.setStatus('current')
if mibBuilder.loadTexts: rsIpIfTable.setDescription('This table contains entries for IP interfaces present in the system.')
rsIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 1, 2, 1), ).setIndexNames((0, "REDSTONE-IP-MIB", "rsIpIfIndex"))
if mibBuilder.loadTexts: rsIpIfEntry.setStatus('current')
if mibBuilder.loadTexts: rsIpIfEntry.setDescription('Each entry describes the characteristics of an IP interface. Creating/deleting entries in this table causes corresponding entries for be created /deleted in ifTable/ifXTable/rsIfTable.')
rsIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rsIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsIpIfIndex.setDescription('The ifIndex of the IP interface. When creating entries in this table, suitable values for this object are determined by reading rsIpNextIfIndex.')
rsIpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsIpIfRowStatus.setDescription("Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: rsIpIfRowStatus rsIpIfLowerIfIndex In addition, when creating an entry the following conditions must hold: A value for rsIpIfIndex must have been determined previously, by reading rsIpNextIfIndex. The interface identified by a nonzero rsIpIfLowerIfIndex must exist. If rsIpIfType is configured to be 'loopback', rsIpIfLowerIfIndex must be set to zero. The selected value of rsIpIfType must be compatible with the underlying media interface identified by rsIpIfLowerIfIndex. A corresponding entry in ifTable/ifXTable/rsIfTable is created/destroyed as a result of creating/destroying an entry in this table. ")
rsIpIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpIfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsIpIfLowerIfIndex.setDescription('The ifIndex of a media interface over which this IP interface is to be layered. A value of zero is used when rsIpIfType is specified to be loopback(4).')
rsIpIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("broadcast", 1), ("pointToPoint", 2), ("nbma", 3), ("loopback", 4))).clone('pointToPoint')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpIfType.setStatus('current')
if mibBuilder.loadTexts: rsIpIfType.setDescription('The type of network interface.')
rsIpAddrGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 1))
rsIpArpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpArpTimeout.setStatus('current')
if mibBuilder.loadTexts: rsIpArpTimeout.setDescription('Timeout, in seconds, for ARP requests issued by this entity.')
rsIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2), )
if mibBuilder.loadTexts: rsIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: rsIpAddrTable.setDescription("IP addressing information for this entity's IP network interfaces. Representation of both numbered and unnumbered IP interfaces is supported.")
rsIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1), ).setIndexNames((0, "REDSTONE-IP-MIB", "rsIpAdEntAddr"))
if mibBuilder.loadTexts: rsIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: rsIpAddrEntry.setDescription("IP addressing information for one of this entity's IP network interfaces. This interface could be either numbered or unnumbered. The following objects correspond to (read-only) counterparts in the IP-MIB ipAddrTable: rsIpAdEntAddr rsIpAdEntIfIndex rsIpAdEntNetMask rsIpAdEntBcastAddr rsIpAdEntReasmMaxSize ")
rsIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 1), RsIpAddrLessIf())
if mibBuilder.loadTexts: rsIpAdEntAddr.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntAddr.setDescription("The IP address for a numbered IP network interface, if this object's value has the form 'a.b.c.d', where 'a' is nonzero; or, the ifIndex (interpreting the low 24 bits of this value as an integer) of an unnumbered ('address-less') IP interface, if this object's value has the form '0.b.c.d'.")
rsIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntIfIndex.setDescription("The ifIndex of the network interface to which this entry's IP addressing mode pertains.")
rsIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 3), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntNetMask.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntNetMask.setDescription("The IP subnet mask associated with the IP address of this entry. The network and host bit fields of the mask are filled with 1's and 0's, respectively. If this entry represents an unnumbered IP interface, this object should have a value of all ones.")
rsIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAdEntBcastAddr.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the IP network interface associated with this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this interface.')
rsIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAdEntReasmMaxSize.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
rsIpAdEntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntRowStatus.setDescription('Controls the creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create entries for both numbered and unnumbered IP interfaces, the following entry objects MUST be explicitly configured: rsIpAdEntRowStatus rsIpAdEntIfIndex To create an entry for a numbered IP interface, the following conditions must also hold: <none> To create an entry for an unnumbered IP interface, the following conditions must also hold: rsIpAdEntUnnumLoopbackIfIndex must be configured with a nonzero ifIndex value of an IP loopback interface.')
rsIpAdEntAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 7), RsEnable().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntAdminStatus.setDescription('Enable/disable operation of IP on this IP network interface.')
rsIpAdEntArpRspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 8), RsEnable().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntArpRspEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntArpRspEnable.setDescription('Enable/disable ARP response on this IP network interface.')
rsIpAdEntProxyArpRspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 9), RsEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntProxyArpRspEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntProxyArpRspEnable.setDescription('Enable/disable proxy ARP response on this IP network interface.')
rsIpAdEntIgmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 10), RsEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntIgmpEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntIgmpEnable.setDescription('Enable/disable IGMP operation on this IP network interface.')
rsIpAdEntDirectedBcastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 11), RsEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntDirectedBcastEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntDirectedBcastEnable.setDescription('Enable/disable forwarding of directed broadcasts on this IP network interface.')
rsIpAdEntIcmpRedirectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 12), RsEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntIcmpRedirectEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntIcmpRedirectEnable.setDescription('Enable/disable transmission of ICMP Redirect messages on this IP network interface.')
rsIpAdEntIcmpMaskReplyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 13), RsEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntIcmpMaskReplyEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntIcmpMaskReplyEnable.setDescription('Enable/disable transmission of ICMP Mask Reply messages on this IP network interface.')
rsIpAdEntIcmpUnreachEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 14), RsEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntIcmpUnreachEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntIcmpUnreachEnable.setDescription('Enable/disable transmission of ICMP Unreachable messages on this IP network interface.')
rsIpAdEntMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntMtu.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntMtu.setDescription('The configured MTU size for this IP network interface. If set to zero, the default MTU size, as determined by the underlying network media, is used.')
rsIpAdEntUnnumLoopbackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntUnnumLoopbackIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntUnnumLoopbackIfIndex.setDescription('For unnumbered interfaces, the ifIndex of the IP loopback interface whose IP address is used as the source IP address for IP packets transmitted on the unnumbered network. For numbered interfaces, this object has a value of zero.')
rsIpAdEntIrdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 17), RsEnable().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntIrdpEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntIrdpEnable.setDescription('Controls whether ICMP Router Discovery Protocol operation is permitted to be sent on this network.')
rsIpAdEntAccessRouteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 18), RsEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpAdEntAccessRouteEnable.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntAccessRouteEnable.setDescription('If enabled, then establishment/loss of a point-to-point network connection causes a host route for the remote host to be created/deleted automatically.')
rsIpAdEntAccessRouteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 2, 2, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAdEntAccessRouteHost.setStatus('current')
if mibBuilder.loadTexts: rsIpAdEntAccessRouteHost.setDescription('If an access route has been established, the IP address of the remote host is reported by this object; otherwise, this object contains the value 0.0.0.0.')
rsIpRouteGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 1))
rsIpRouteLimit = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpRouteLimit.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteLimit.setDescription('Maximum number of IP routes maintained by this entity. Setting a value lower than the current number of routes prevents additional routes from being learned or configured, but does not cause existing excess routes to be deleted to enforce the new limit.')
rsIpRouteStaticTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2), )
if mibBuilder.loadTexts: rsIpRouteStaticTable.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticTable.setDescription("Table of static routes configured on this entity. The object definitions and indexing for this table are chosen to closely align with RFC2096 IP-FORWARD-MIB's ipCidrRouteTable. This table serves three purposes: 1. Provide the means for configuring static routes. 2. Provide an efficient view of static routes (otherwise they must be observed by traversing the entire routing table). 3. Provide view of static routes configured on network interfaces that are currently inactive. (In this implementation, static routes configured on inactive interfaces are not visible in the routing table.)")
rsIpRouteStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1), ).setIndexNames((0, "REDSTONE-IP-MIB", "rsIpRouteStaticDest"), (0, "REDSTONE-IP-MIB", "rsIpRouteStaticMask"), (0, "REDSTONE-IP-MIB", "rsIpRouteStaticPref"), (0, "REDSTONE-IP-MIB", "rsIpRouteStaticNextHop"))
if mibBuilder.loadTexts: rsIpRouteStaticEntry.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticEntry.setDescription('A static route.')
rsIpRouteStaticDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRouteStaticDest.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticDest.setDescription('The destination IP address of this route. This object may not take a Multicast (Class D) address value. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the rsIpRouteStaticMask object is not equal to x.')
rsIpRouteStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRouteStaticMask.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the rsIpRouteStaticDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the rsIpRouteStaticMask by reference to the IP Address Class. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the rsIpRouteStaticDest object is not equal to rsIpRouteStaticDest.')
rsIpRouteStaticPref = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRouteStaticPref.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticPref.setDescription('The preference of this static route. Higher values correspond to higher preference. A static route with preference of zero will never be installed as an active route.')
rsIpRouteStaticNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRouteStaticNextHop.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticNextHop.setDescription('The address of the next hop toward the destination.')
rsIpRouteStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpRouteStaticRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rsIpRouteStaticIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpRouteStaticIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticIfIndex.setDescription('The ifIndex value which identifies the local interface through which the next hop of this route should be reached. A value of zero means the router should automatically determine the interface through which the specified next-hop address is reached. An implementation may disallow non-zero values from being configured.')
rsIpRouteStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1), ("incomplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpRouteStaticStatus.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticStatus.setDescription('The operational status of this static route. active(0) indicates this route is currently being used to reach the specified destination. inactive(1) indicates this route is considered valid, but currently is superseded by another routing table entry for the destination, having a higher preference value. incomplete(2) indicates this route entry contains information that is incomplete, or is inconsistent with other system configuration (for example, the interface specified in rsIpRouteStaticIfIndex does not exist).')
rsIpRouteStaticNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpRouteStaticNextHopAS.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticNextHopAS.setDescription("The Autonomous System Number of the Next Hop. The semantics of this object are determined by the routing-protocol specified in the route's ipCidrRouteProto value. When this object is unknown or not relevant its value should be set to zero.")
rsIpRouteStaticMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 9), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpRouteStaticMetric.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticMetric.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipCidrRouteProto value. If this metric is not used, its value should be set to -1.")
rsIpRouteStaticTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsIpRouteStaticTag.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteStaticTag.setDescription('A tag value for this static route.')
rsIpCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 3), )
if mibBuilder.loadTexts: rsIpCidrRouteTable.setStatus('current')
if mibBuilder.loadTexts: rsIpCidrRouteTable.setDescription("Table of routes active on this entity. This table is an augmentation of RFC2096 IP-FORWARD-MIB's ipCidrRouteTable.")
rsIpCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 3, 1), )
ipCidrRouteEntry.registerAugmentions(("REDSTONE-IP-MIB", "rsIpCidrRouteEntry"))
rsIpCidrRouteEntry.setIndexNames(*ipCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: rsIpCidrRouteEntry.setStatus('current')
if mibBuilder.loadTexts: rsIpCidrRouteEntry.setDescription('Additional attributes of an active route.')
rsIpCidrRoutePref = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpCidrRoutePref.setStatus('current')
if mibBuilder.loadTexts: rsIpCidrRoutePref.setDescription('The preference of this route. Higher values correspond to higher preference.')
rsIpCidrRouteArea = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpCidrRouteArea.setStatus('current')
if mibBuilder.loadTexts: rsIpCidrRouteArea.setDescription('The Area to which this route pertains. A value of 0.0.0.0 indicates no area is identified.')
rsIpCidrRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 12, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpCidrRouteTag.setStatus('current')
if mibBuilder.loadTexts: rsIpCidrRouteTag.setDescription('A tag value for this route.')
rsIpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 4))
rsIpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 4, 1))
rsIpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 12, 4, 2))
rsIpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 12, 4, 1, 1)).setObjects(("REDSTONE-IP-MIB", "rsIpInterfaceGroup"), ("REDSTONE-IP-MIB", "rsIpAddressGroup"), ("REDSTONE-IP-MIB", "rsIpRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsIpCompliance = rsIpCompliance.setStatus('current')
if mibBuilder.loadTexts: rsIpCompliance.setDescription('The compliance statement for entities which implement the Redstone Xxx MIB.')
rsIpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 12, 4, 2, 1)).setObjects(("REDSTONE-IP-MIB", "rsIpNextIfIndex"), ("REDSTONE-IP-MIB", "rsIpIfRowStatus"), ("REDSTONE-IP-MIB", "rsIpIfLowerIfIndex"), ("REDSTONE-IP-MIB", "rsIpIfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsIpInterfaceGroup = rsIpInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: rsIpInterfaceGroup.setDescription('A collection of objects for managing general IP capabilities in a Redstone product.')
rsIpAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 12, 4, 2, 2)).setObjects(("REDSTONE-IP-MIB", "rsIpArpTimeout"), ("REDSTONE-IP-MIB", "rsIpAdEntRowStatus"), ("REDSTONE-IP-MIB", "rsIpAdEntIfIndex"), ("REDSTONE-IP-MIB", "rsIpAdEntNetMask"), ("REDSTONE-IP-MIB", "rsIpAdEntAdminStatus"), ("REDSTONE-IP-MIB", "rsIpAdEntArpRspEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntProxyArpRspEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntIgmpEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntDirectedBcastEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntIcmpRedirectEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntIcmpMaskReplyEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntIcmpUnreachEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntMtu"), ("REDSTONE-IP-MIB", "rsIpAdEntUnnumLoopbackIfIndex"), ("REDSTONE-IP-MIB", "rsIpAdEntIrdpEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntAccessRouteEnable"), ("REDSTONE-IP-MIB", "rsIpAdEntAccessRouteHost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsIpAddressGroup = rsIpAddressGroup.setStatus('current')
if mibBuilder.loadTexts: rsIpAddressGroup.setDescription('A collection of objects for managing general IP capabilities in a Redstone product.')
rsIpRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 12, 4, 2, 3)).setObjects(("REDSTONE-IP-MIB", "rsIpRouteLimit"), ("REDSTONE-IP-MIB", "rsIpRouteStaticDest"), ("REDSTONE-IP-MIB", "rsIpRouteStaticMask"), ("REDSTONE-IP-MIB", "rsIpRouteStaticPref"), ("REDSTONE-IP-MIB", "rsIpRouteStaticNextHop"), ("REDSTONE-IP-MIB", "rsIpRouteStaticRowStatus"), ("REDSTONE-IP-MIB", "rsIpRouteStaticIfIndex"), ("REDSTONE-IP-MIB", "rsIpRouteStaticStatus"), ("REDSTONE-IP-MIB", "rsIpRouteStaticNextHopAS"), ("REDSTONE-IP-MIB", "rsIpRouteStaticMetric"), ("REDSTONE-IP-MIB", "rsIpRouteStaticTag"), ("REDSTONE-IP-MIB", "rsIpCidrRoutePref"), ("REDSTONE-IP-MIB", "rsIpCidrRouteArea"), ("REDSTONE-IP-MIB", "rsIpCidrRouteTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsIpRouteGroup = rsIpRouteGroup.setStatus('current')
if mibBuilder.loadTexts: rsIpRouteGroup.setDescription('A collection of objects for managing IP routing capabilities in a Redstone product.')
mibBuilder.exportSymbols("REDSTONE-IP-MIB", rsIpAdEntIgmpEnable=rsIpAdEntIgmpEnable, rsIpAdEntIcmpUnreachEnable=rsIpAdEntIcmpUnreachEnable, rsIpAdEntBcastAddr=rsIpAdEntBcastAddr, rsIpRouteStaticNextHopAS=rsIpRouteStaticNextHopAS, rsIpAdEntIcmpRedirectEnable=rsIpAdEntIcmpRedirectEnable, rsIpIfLowerIfIndex=rsIpIfLowerIfIndex, rsIpAddrGlobals=rsIpAddrGlobals, rsIpAdEntDirectedBcastEnable=rsIpAdEntDirectedBcastEnable, rsIpAdEntAccessRouteHost=rsIpAdEntAccessRouteHost, rsIpRouteStaticMask=rsIpRouteStaticMask, rsIpCidrRouteArea=rsIpCidrRouteArea, rsIpInterfaceGroup=rsIpInterfaceGroup, rsIpCidrRouteTable=rsIpCidrRouteTable, rsIpIfRowStatus=rsIpIfRowStatus, rsIpRouteStaticNextHop=rsIpRouteStaticNextHop, rsIpIfEntry=rsIpIfEntry, rsIpRouteLimit=rsIpRouteLimit, rsIpInterface=rsIpInterface, rsIpCidrRouteEntry=rsIpCidrRouteEntry, rsIpAdEntIrdpEnable=rsIpAdEntIrdpEnable, rsIpConformance=rsIpConformance, rsIpRouteStaticStatus=rsIpRouteStaticStatus, rsIpGroups=rsIpGroups, rsIpIfIndex=rsIpIfIndex, rsIpAdEntUnnumLoopbackIfIndex=rsIpAdEntUnnumLoopbackIfIndex, rsIpRouteStaticEntry=rsIpRouteStaticEntry, rsIpRouteStaticPref=rsIpRouteStaticPref, rsIpArpTimeout=rsIpArpTimeout, rsIpAdEntReasmMaxSize=rsIpAdEntReasmMaxSize, rsIpCidrRoutePref=rsIpCidrRoutePref, rsIpRouteStaticMetric=rsIpRouteStaticMetric, rsIpIfTable=rsIpIfTable, rsIpRouteGlobals=rsIpRouteGlobals, rsIpAdEntAdminStatus=rsIpAdEntAdminStatus, rsIpCidrRouteTag=rsIpCidrRouteTag, rsIpAdEntRowStatus=rsIpAdEntRowStatus, rsIpCompliances=rsIpCompliances, rsIpAdEntProxyArpRspEnable=rsIpAdEntProxyArpRspEnable, rsIpRoute=rsIpRoute, rsIpAddrEntry=rsIpAddrEntry, rsIpRouteStaticDest=rsIpRouteStaticDest, rsIpAdEntAddr=rsIpAdEntAddr, rsIpObjects=rsIpObjects, rsIpAddrTable=rsIpAddrTable, rsIpAdEntNetMask=rsIpAdEntNetMask, rsIpRouteStaticTag=rsIpRouteStaticTag, rsIpRouteStaticRowStatus=rsIpRouteStaticRowStatus, PYSNMP_MODULE_ID=rsIpMIB, rsIpRouteStaticTable=rsIpRouteStaticTable, rsIpAdEntIcmpMaskReplyEnable=rsIpAdEntIcmpMaskReplyEnable, rsIpAddress=rsIpAddress, rsIpRouteGroup=rsIpRouteGroup, rsIpMIB=rsIpMIB, rsIpAddressGroup=rsIpAddressGroup, rsIpIfType=rsIpIfType, rsIpRouteStaticIfIndex=rsIpRouteStaticIfIndex, rsIpCompliance=rsIpCompliance, rsIpAdEntArpRspEnable=rsIpAdEntArpRspEnable, rsIpNextIfIndex=rsIpNextIfIndex, rsIpAdEntMtu=rsIpAdEntMtu, rsIpAdEntAccessRouteEnable=rsIpAdEntAccessRouteEnable, rsIpAdEntIfIndex=rsIpAdEntIfIndex)
