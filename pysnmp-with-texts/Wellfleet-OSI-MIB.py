#
# PySNMP MIB module Wellfleet-OSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-OSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Unsigned32, MibIdentifier, Gauge32, Counter32, iso, Bits, Opaque, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "Gauge32", "Counter32", "iso", "Bits", "Opaque", "IpAddress", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfOsiGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfOsiGroup")
wfOsi = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1))
wfOsiDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDelete.setDescription('This value determines whether OSI is configured on this slot.')
wfOsiDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDisable.setDescription('This value determines whether OSI is to startup.')
wfOsiState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiState.setDescription('This value determines whether OSI is to startup.')
wfOsiIsisVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiIsisVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiIsisVersion.setDescription('This read-only parameter identifies the version number of the IS-IS protocol to which this node conforms to. ')
wfOsiRouterType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("l1only", 1), ("l1l2", 3))).clone('l1l2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiRouterType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiRouterType.setDescription('This value determines whether this system is an L1-only router or L1-L2 IS.')
wfOsiRouterId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiRouterId.setDescription('This value contains the system ID of this Intermediate System. If no value is entered by the user, Site Manager should supply a 6-byte value that will be unique (a MAC address would work). ')
wfOsiLoadBal = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiLoadBal.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiLoadBal.setDescription('This Boolean defines whether or not we are doing load balancing over multiple paths.')
wfOsiMaxAreas = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiMaxAreas.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiMaxAreas.setDescription('This value defines the maximum allowable number of areas addresses for the domain that this router exists in.')
wfOsiMaxEs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiMaxEs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiMaxEs.setDescription('This value defines the maximum allowable number of End Systems for the area that this router exists in.')
wfOsiMaxL1Is = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiMaxL1Is.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiMaxL1Is.setDescription('This value defines the maximum allowable number of L1 Intermediate Systems for the area that this router exists in.')
wfOsiMaxL2Is = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiMaxL2Is.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiMaxL2Is.setDescription('This value defines the maximum allowable number of L2 Intermediate Systems for the domain that this router exists in.')
wfOsiMaxExtAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiMaxExtAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiMaxExtAddr.setDescription('This value defines the maximum allowable number of External Addresses for the domain that this router exists in. The default value of this field is 0.')
wfOsiCksumIsPdus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCksumIsPdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCksumIsPdus.setDescription('This value indicates whether ISIS PDUs will carry a checksum.')
wfOsiL1LspPassword = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiL1LspPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspPassword.setDescription('This assigns a password such that only L1 Lsps with the matching password will be accepted. All L1 Lsps generated by this system will contain this string in the password option.')
wfOsiL2LspPassword = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiL2LspPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspPassword.setDescription('This assigns a password such that only L2 Lsps with the matching password will be accepted. All L2 Lsps generated by this system will contain this string in the password option.')
wfOsiAreaAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiAreaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiAreaAddr.setDescription("This Assigns the area address for this router. This field must be filled in. If the user doesn't enter a value, then assign 490040. Site Manager must force the user to enter at least a 3-byte value for this field. ")
wfOsiAreaAddrAlias1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiAreaAddrAlias1.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiAreaAddrAlias1.setDescription('This Assigns the first area address alias for this router. This field does no have to be filled in, but if the user tries to enter a value, Site Manager must make sure that it is at least 3-bytes in length.')
wfOsiAreaAddrAlias2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiAreaAddrAlias2.setStatus('obsolete')
if mibBuilder.loadTexts: wfOsiAreaAddrAlias2.setDescription('This Assigns the second area address alias for this router. This field does no have to be filled in, but if the user tries to enter a value, Site Manager must make sure that it is at least 3-bytes in length.')
wfOsiCorruptedLsps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCorruptedLsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCorruptedLsps.setDescription('Number of Corrupted Lsps Detected.')
wfOsiL1LspDbOverloads = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1LspDbOverloads.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspDbOverloads.setDescription('Number of times the L1 Lsp Database Overload event has been generated. ')
wfOsiL2LspDbOverloads = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2LspDbOverloads.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspDbOverloads.setDescription('Number of times the L2 Lsp Database Overload event has been generated. ')
wfOsiManAddrDroppedAreas = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiManAddrDroppedAreas.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiManAddrDroppedAreas.setDescription('Number of times the Manual Address Dropped from Area event has been generated. ')
wfOsiSeqNumberSkips = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiSeqNumberSkips.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiSeqNumberSkips.setDescription('Number of times the Sequence Number Skipped event has been generated. ')
wfOsiOwnLspPurges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiOwnLspPurges.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiOwnLspPurges.setDescription('Number of times the Own Lsp Purged event has been generated. ')
wfOsiOthLspPurges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiOthLspPurges.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiOthLspPurges.setDescription('Number of times the Other Lsp Purged event has been generated. ')
wfOsiExceedMaxSeqNums = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiExceedMaxSeqNums.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExceedMaxSeqNums.setDescription('Number of times the Attempt tp Exceed Maximum Sequence Number event has been generated. ')
wfOsiNearestL2Is = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNearestL2Is.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNearestL2Is.setDescription('This is the ID of the Nearest L2 system in this area.')
wfOsiMaxDynEs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiMaxDynEs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiMaxDynEs.setDescription('This is the maximum number of dynamically learned (via Hello) End Systems allowed per slot.')
wfOsiMaxDynL1Is = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiMaxDynL1Is.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiMaxDynL1Is.setDescription('This is the maximum number of dynamically learned (via Hello) Level 1 Intermediate Systems allowed per slot.')
wfOsiMaxDynL2Is = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiMaxDynL2Is.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiMaxDynL2Is.setDescription('This is the maximum number of dynamically learned (via Hello) Level 2 Intermediate Systems allowed per slot.')
wfOsiNumDynEsAdjs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumDynEsAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumDynEsAdjs.setDescription('Number of Dynamic ES adjs the osi master gate receives from the cct gate. ')
wfOsiNumDynL1Adjs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumDynL1Adjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumDynL1Adjs.setDescription('Number of Dynamic L1 adjs the osi master gate receives from the cct gate. ')
wfOsiNumDynL2Adjs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumDynL2Adjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumDynL2Adjs.setDescription('Number of Dynamic L2 adjs the osi master gate receives from the cct gate. ')
wfOsiNumL1Routes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumL1Routes.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumL1Routes.setDescription('Number of L1 Routes. WL 2.27.93')
wfOsiNumL2Routes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumL2Routes.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumL2Routes.setDescription('Number of L2 Routes. WL 2.27.93')
wfOsiNumDynPtpEsAdjs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumDynPtpEsAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumDynPtpEsAdjs.setDescription('Number of Dynamic Point-to-Point ES adjs the osi master gate receives on.')
wfOsiNumDynPtpIsAdjs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumDynPtpIsAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumDynPtpIsAdjs.setDescription('Number of Dynamic Point-to-Point IS adjs the osi master gate receives on .')
wfOsiClnpSrcRtOptionDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiClnpSrcRtOptionDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiClnpSrcRtOptionDisable.setDescription('Enable/Disable processing of Source Route options in CLNP PDUs. This is required for GOSIP v2 support. GOSIP prohibits processing Source Routing options. ')
wfOsiNumL1Lsps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumL1Lsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumL1Lsps.setDescription('Number of L1 LSPs stored in database.')
wfOsiNumL2Lsps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiNumL2Lsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiNumL2Lsps.setDescription('Number of L2 LSPs stored in database.')
wfOsiFletchRelaxedEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiFletchRelaxedEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiFletchRelaxedEnable.setDescription("Enable/Disable whether non-standard Fletcher Checksums are allowed in LSP's. If enabled, a log message will be generated, otherwise the LSP will be rejected.")
wfOsiStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2), )
if mibBuilder.loadTexts: wfOsiStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteTable.setDescription('This table contains all the static routes for this system.')
wfOsiStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiStaticRouteAddr"))
if mibBuilder.loadTexts: wfOsiStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteEntry.setDescription('This is the Static Route Entry for the Static Route Table.')
wfOsiStaticRouteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticRouteDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteDelete.setDescription('Create/Delete parameter for Osi Static Route Record.')
wfOsiStaticRouteDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticRouteDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteDisable.setDescription('Enable/Disable parameter for this Static Route.')
wfOsiStaticRouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiStaticRouteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteAddr.setDescription('This specifies the address of the static route. It is also the inst_id.')
wfOsiStaticRouteNibbleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticRouteNibbleLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteNibbleLength.setDescription('This is the length in nibbles of the static route address. It is necessary to specify it in nibbles since the static route may be an external address which can be specified in nibbles.')
wfOsiStaticRouteNextHopIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticRouteNextHopIs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteNextHopIs.setDescription('This is the 6-octet ID of the next Hop IS that all data destined to wfOsiStaticRouteAddr will be forwarded to.')
wfOsiStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 11, 13))).clone(namedValues=NamedValues(("es", 9), ("areaaddr", 11), ("extaddr", 13))).clone('es')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteType.setDescription('This specifies whether the destination is an End System, an area, or an external Domain.')
wfOsiStaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticRouteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticRouteCost.setDescription('This value is the cost to get to this address.')
wfOsiCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3), )
if mibBuilder.loadTexts: wfOsiCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitTable.setDescription('This Table contains all circuit configuration info counters available on a per circuit basis.')
wfOsiCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiCircuitId"))
if mibBuilder.loadTexts: wfOsiCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitEntry.setDescription('This is the circuit entry record that appears in the Circuit Table.')
wfOsiCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitDelete.setDescription('This value determines whether this circuit is configured.')
wfOsiCircuitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitDisable.setDescription('Enable/Disable parameter for this circuit.')
wfOsiCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitState.setDescription('This indicates whether the circuit state is up or down.')
wfOsiCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitId.setDescription('A unique value for each known circuit.')
wfOsiCircuitRouterLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8))).clone(namedValues=NamedValues(("l1", 1), ("l2", 2), ("l1l2", 3), ("ext", 4), ("l2ext", 6), ("l1l2ext", 7), ("esisonly", 8))).clone('l1l2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitRouterLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitRouterLevel.setDescription('This is the level protocol that the circuit runs. Its a bit mask to allow for some combination of L1, L2, External, ES-IS-only.')
wfOsiCircuitL1DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitL1DefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitL1DefaultMetric.setDescription('This is the default cost of using this circuit for L1 traffic.')
wfOsiCircuitL2DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitL2DefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitL2DefaultMetric.setDescription('This is the default cost of using this circuit for L2 traffic.')
wfOsiCircuitL1DrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitL1DrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitL1DrPriority.setDescription('This is the priority for this system to become L1 designated router on this LAN circuit.')
wfOsiCircuitL2DrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitL2DrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitL2DrPriority.setDescription('This is the priority for this system to become L2 designated router on this LAN circuit.')
wfOsiCircuitIsisHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitIsisHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitIsisHelloTimer.setDescription('This is the period (secs) between IIH hello transmissions.')
wfOsiCircuitEsisHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitEsisHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitEsisHelloTimer.setDescription('This is the period (secs) between ISH hello transmissions.')
wfOsiCircuitEshConfigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitEshConfigTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitEshConfigTime.setDescription('This is the suggested time between ESH transmissions from an ES went in ISHs (ESCT).')
wfOsiCircuitPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitPassword.setDescription('This is Circuit Password for this circuit. Used to filter out Hellos from systems without the correct password.')
wfOsiCircuitReceivedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitReceivedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitReceivedPkts.setDescription('This is the number of pkts that have been received on this circuit.')
wfOsiCircuitSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitSentPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitSentPkts.setDescription('This is the number of pkts sent out this circuit.')
wfOsiCircuitDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitDroppedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitDroppedPkts.setDescription('This is the number of pkts dropped on this circuit.')
wfOsiCircuitFragmentedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitFragmentedPdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitFragmentedPdus.setDescription('This is the number of pdus that had to be fragmented when forwarded out this circuit.')
wfOsiCircuitCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitCongestionDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitCongestionDiscards.setDescription('This is the number of PDUs dropped because of congestion.')
wfOsiCircuitAddrUnreachDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitAddrUnreachDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitAddrUnreachDiscards.setDescription('This is the number of PDUs dropped because the destination is unreachable.')
wfOsiCircuitAgedPduDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitAgedPduDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitAgedPduDiscards.setDescription('This is the number of PDUs dropped because of aging.')
wfOsiCircuitPduFormatErrDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitPduFormatErrDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitPduFormatErrDiscards.setDescription('This is the number of PDUs dropped because of Format Error.')
wfOsiCircuitUnsuppOptsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitUnsuppOptsDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitUnsuppOptsDiscards.setDescription('This is the number of PDUs dropped because they contain unsupported options.')
wfOsiCircuitSentErrorReports = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitSentErrorReports.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitSentErrorReports.setDescription('This is the number of error reports sent out this circuit.')
wfOsiCircuitReceivedControlPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitReceivedControlPdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitReceivedControlPdus.setDescription('This is the number of ESIS or ISIS PDUs received on this circuit.')
wfOsiCircuitSentControlPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitSentControlPdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitSentControlPdus.setDescription('This is the number of ESIS or ISIS PDUs sent out this circuit.')
wfOsiCircuitStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitStateChanges.setDescription('This is the number of times the circuit goes from down to up or from up to down.')
wfOsiCircuitAdjStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitAdjStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitAdjStateChanges.setDescription('This is the number of times an adjacency off of this circuit goes from down to up or from up to down state.')
wfOsiCircuitInitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitInitFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitInitFailures.setDescription('This is the number of times this circuit fails to initialize.')
wfOsiCircuitRejectedAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitRejectedAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitRejectedAdjs.setDescription('This is the number of Adjacencies that were rejected on this circuit.')
wfOsiCircuitReceivedBadLsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadLsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadLsps.setDescription('This is the number of bad Lsps received on this circuit.')
wfOsiCircuitReceivedBadSnps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadSnps.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadSnps.setDescription('This is the number of BAD Sequence Number Pdus received on this circuit.')
wfOsiCircuitReceivedBadEshs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadEshs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadEshs.setDescription('This is the number of bad ESHs received on this circuit.')
wfOsiCircuitReceivedBadL1Iihs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadL1Iihs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadL1Iihs.setDescription('This is the number of bad L1 IIHs received on this circuit.')
wfOsiCircuitReceivedBadL2Iihs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadL2Iihs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitReceivedBadL2Iihs.setDescription('This is the number of bad L2 IIHs received on this circuit.')
wfOsiCircuitL1DrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitL1DrChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitL1DrChanges.setDescription('This is the number of times the L1 Designated Router has been elected on this circuit.')
wfOsiCircuitL2DrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitL2DrChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitL2DrChanges.setDescription('This is the number of times the L2 Designated Router has been elected on this circuit.')
wfOsiCircuitClnpForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpForwarding.setDescription('This shows whether forwarding is enabled over this circuit.')
wfOsiCircuitClnpDefaultLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpDefaultLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpDefaultLifeTime.setDescription('This is the lifetime included in clnp pdus generated by this router (i.e. echo and echo reply pdus, error report pdus).')
wfOsiCircuitClnpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpInReceives.setDescription('This is the number of CLNP pdus received from this circuit.')
wfOsiCircuitClnpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpInAddrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpInAddrErrors.setDescription('This is the number of CLNP pdus recived from this circuit with Address format errors.')
wfOsiCircuitClnpForwPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpForwPdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpForwPdus.setDescription('This is the number of Clnp PDUs received on this circuit that are forwarded.')
wfOsiCircuitClnpInUnknownNlps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpInUnknownNlps.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpInUnknownNlps.setDescription('This is the number of Clnp PDUs received on this circuit where the network layer addressed is unknown (Bad NLPID).')
wfOsiCircuitClnpInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpInDelivers.setDescription('This is the number of Clnp PDUs received on this circuit whose destination is this router.')
wfOsiCircuitClnpInUnknownUlps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpInUnknownUlps.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpInUnknownUlps.setDescription('This is number of Clnp PDUs received on this circuit addressed to this router where the upper layer is unknown.')
wfOsiCircuitClnpSegCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpSegCreates.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpSegCreates.setDescription('This is the number of CLNP segments created from pdus received on this circuit.')
wfOsiCircuitClnpInOpts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpInOpts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpInOpts.setDescription('This is the number of CLNP pdus received with an options portion.')
wfOsiCircuitClnpOutOpts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpOutOpts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpOutOpts.setDescription('This is the number of CLNP pdus sent with an options portion.')
wfOsiCircuitEsisEshIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitEsisEshIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitEsisEshIns.setDescription('This is the number of ESHs received from this circuit.')
wfOsiCircuitEsisIshOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitEsisIshOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitEsisIshOuts.setDescription('This is the number of ISHs sent out this circuit.')
wfOsiCircuitEsisRduOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitEsisRduOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitEsisRduOuts.setDescription('This is the number of Redirects sent out this circuit.')
wfOsiCircuitL1DesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitL1DesignatedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitL1DesignatedRouter.setDescription('This is the ID of the L1 Designated Router on this circuit.')
wfOsiCircuitL2DesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitL2DesignatedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitL2DesignatedRouter.setDescription('This is the ID of the L2 Designated Router on this circuit.')
wfOsiCircuitClnpOutEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpOutEchoReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpOutEchoReplies.setDescription('This is the number of CLNP Echo Replies sent out this circuit.')
wfOsiCircuitClnpOutEchoRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpOutEchoRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpOutEchoRequests.setDescription('This is the number of Clnp Echo Requests sent out this circuit.')
wfOsiCircuitClnpInEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpInEchoReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpInEchoReplies.setDescription('This is the number of CLNP Echo Replies received on this circuit.')
wfOsiCircuitClnpInEchoRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitClnpInEchoRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitClnpInEchoRequests.setDescription('This is the number of CLNP Echo Requests recived on this circuit.')
wfOsiCircuitNumDynEsAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitNumDynEsAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitNumDynEsAdjs.setDescription('This is the number of Dynamic End System Adjacencies formed on this circuit.')
wfOsiCircuitNumDynL1Adjs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitNumDynL1Adjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitNumDynL1Adjs.setDescription('This is the number of Dynamic Level 1 Intermediate System Adjacencies formed on this circuit. ')
wfOsiCircuitNumDynL2Adjs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitNumDynL2Adjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitNumDynL2Adjs.setDescription('This is the number of Dynamic Level 2 Intermediate System Adjacencies formed on this circuit.')
wfOsiCircuitNumDynPtpIsAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitNumDynPtpIsAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitNumDynPtpIsAdjs.setDescription('This is the number of Dynamic Intermediate System Point-to-Point Adjacencies formed on this circuit.')
wfOsiCircuitNumDynPtpEsAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitNumDynPtpEsAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitNumDynPtpEsAdjs.setDescription('This is the number of Dynamic End System Point-to-Point Adjaciences formed on this circuit.')
wfOsiCircuitBadIshReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitBadIshReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitBadIshReceived.setDescription('This is the number of bad Intermediate System Hellos received on this circuit. These will only be received on Point-to-Point circuits.')
wfOsiCircuitEsisIshIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiCircuitEsisIshIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitEsisIshIns.setDescription('This is the number of good Intermediate System Hellos received on this circuit. These will only be received on Point-to-Point circuits.')
wfOsiCircuitIihHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitIihHoldMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitIihHoldMultiplier.setDescription('This is the multiplier value used to compute the hold time set in the IIH PDUs transmitted from this router. Hold time equals IIH Timer times IIH Hold Multiplier.')
wfOsiCircuitIshHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitIshHoldMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitIshHoldMultiplier.setDescription('This is the multiplier value used to compute the hold time set in the ISH PDUs transmitted from this router. Hold time equals IIH Timer times IIH Hold Multiplier.')
wfOsiCircuitDisableRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 3, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiCircuitDisableRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiCircuitDisableRedirect.setDescription('Allow Redirects to be disabled. This is required when operating over Frame Relay in group mode in a partial mesh topology.')
wfOsiExternalAddressTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4), )
if mibBuilder.loadTexts: wfOsiExternalAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExternalAddressTable.setDescription('This is the table of External Addresses for this Router.')
wfOsiExternalAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiExtAddrCircuit"), (0, "Wellfleet-OSI-MIB", "wfOsiExtAddr"))
if mibBuilder.loadTexts: wfOsiExternalAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExternalAddressEntry.setDescription('This is the External Address Record for this Router.')
wfOsiExtAddrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiExtAddrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExtAddrDelete.setDescription('This is the Create/Delete parameter for this ExtAddr entry.')
wfOsiExtAddrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiExtAddrDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExtAddrDisable.setDescription('Enable/Disable parameter for this ExtAddr.')
wfOsiExtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiExtAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExtAddr.setDescription('This is the prefix external address. It is also the inst_id.')
wfOsiExtAddrCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiExtAddrCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExtAddrCircuit.setDescription('This is the circuit to go out for this adj.')
wfOsiExtAddrNibbleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiExtAddrNibbleLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExtAddrNibbleLength.setDescription('This is the length in nibbles of the external address.')
wfOsiExtAddrSnpa = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiExtAddrSnpa.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExtAddrSnpa.setDescription('This is the SNPA of the neighbor on this circuit.')
wfOsiExtAddrCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiExtAddrCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiExtAddrCost.setDescription('This is the external metric cost to this address.')
wfOsiStaticEsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 5), )
if mibBuilder.loadTexts: wfOsiStaticEsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticEsTable.setDescription('This is the Static ES Table for this router.')
wfOsiStaticEsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 5, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiStaticEsCircuit"), (0, "Wellfleet-OSI-MIB", "wfOsiStaticEsId"))
if mibBuilder.loadTexts: wfOsiStaticEsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticEsEntry.setDescription('This is the Static ES entry for the Static ES Table.')
wfOsiStaticEsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticEsDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticEsDelete.setDescription('This is the Create/Delete parameter for this Static ES entry.')
wfOsiStaticEsDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticEsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticEsDisable.setDescription('Enable/Disable parameter for this Static ES.')
wfOsiStaticEsId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiStaticEsId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticEsId.setDescription('This is the ESID of the neighbor.')
wfOsiStaticEsCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiStaticEsCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticEsCircuit.setDescription('This is the circuit to go out for this adj.')
wfOsiStaticEsSnpa = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 5, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiStaticEsSnpa.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiStaticEsSnpa.setDescription('This is the SNPA of the neighbor on this circuit.')
wfOsiTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6), )
if mibBuilder.loadTexts: wfOsiTrafficFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterTable.setDescription('OSI Traffic Filters')
wfOsiTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiTrafficFilterCircuit"), (0, "Wellfleet-OSI-MIB", "wfOsiTrafficFilterRuleNumber"), (0, "Wellfleet-OSI-MIB", "wfOsiTrafficFilterFragment"))
if mibBuilder.loadTexts: wfOsiTrafficFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterEntry.setDescription('A traffic filter definition')
wfOsiTrafficFilterDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTrafficFilterDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterDelete.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfOsiTrafficFilterDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTrafficFilterDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterDisable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfOsiTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTrafficFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfOsiTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTrafficFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfOsiTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTrafficFilterDefinition.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterDefinition.setDescription('The filter rule definition.')
wfOsiTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTrafficFilterReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterReserved.setDescription('Reserved field.')
wfOsiTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTrafficFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterCircuit.setDescription('The ID of the Circuit to which the filter is applied.')
wfOsiTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTrafficFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterRuleNumber.setDescription('ID for the rule.')
wfOsiTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTrafficFilterFragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfOsiTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 6, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTrafficFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTrafficFilterName.setDescription('name of the rule number')
wfOsiL1LspHdrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 7), )
if mibBuilder.loadTexts: wfOsiL1LspHdrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspHdrTable.setDescription("2 u_int32's so the inst_id len is 2.")
wfOsiL1LspHdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 7, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiL1LspHdrLspId"))
if mibBuilder.loadTexts: wfOsiL1LspHdrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspHdrEntry.setDescription('A Record in the Level 1 Lsp Header Table')
wfOsiL1LspHdrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1LspHdrLspId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspHdrLspId.setDescription('LSPID = Source ID + Pseudo-node ID + LSP number')
wfOsiL1LspHdrLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1LspHdrLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspHdrLifetime.setDescription('Lsp Lifetime')
wfOsiL1LspHdrSeqnum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1LspHdrSeqnum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspHdrSeqnum.setDescription('Lsp sequence number')
wfOsiL1LspHdrFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1LspHdrFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspHdrFlags.setDescription('Flags: P/ATT/LSPDBOL/IS type')
wfOsiL1LspHdrCksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1LspHdrCksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1LspHdrCksum.setDescription('Checksum')
wfOsiL2LspHdrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 8), )
if mibBuilder.loadTexts: wfOsiL2LspHdrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspHdrTable.setDescription("2 u_int32's so the inst_id len is 2.")
wfOsiL2LspHdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 8, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiL2LspHdrLspId"))
if mibBuilder.loadTexts: wfOsiL2LspHdrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspHdrEntry.setDescription('A Record in the Lsp Header Table')
wfOsiL2LspHdrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2LspHdrLspId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspHdrLspId.setDescription('LSPID = Source ID + Pseudo-node ID + LSP number')
wfOsiL2LspHdrLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2LspHdrLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspHdrLifetime.setDescription('Lsp Lifetime')
wfOsiL2LspHdrSeqnum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2LspHdrSeqnum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspHdrSeqnum.setDescription('Lsp sequence number')
wfOsiL2LspHdrFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 8, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2LspHdrFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspHdrFlags.setDescription('Flags: P/ATT/LSPDBOL/IS type')
wfOsiL2LspHdrCksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2LspHdrCksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2LspHdrCksum.setDescription('Checksum')
wfOsiDynAdjTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9), )
if mibBuilder.loadTexts: wfOsiDynAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjTable.setDescription('Dynamic Adjacency Table')
wfOsiDynAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiDynAdjId"))
if mibBuilder.loadTexts: wfOsiDynAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjEntry.setDescription('Adjacency Table - the real index is the adjacency id')
wfOsiDynAdjId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjId.setDescription('Index in the Adjacency Table')
wfOsiDynAdjDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjDatabase.setDescription('Database into which the Adjacency is stored, 1=ES, 2=Level 1 IS, 3=Level 2 IS.')
wfOsiDynAdjType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjType.setDescription('The type of adjacency. (see Osi_const.h)')
wfOsiDynAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjState.setDescription('The state of the adjacency. INITIALIZING, UP or FAILED')
wfOsiDynAdjCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjCircuitId.setDescription('A unique value for each known circuit.')
wfOsiDynAdjHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjHoldTime.setDescription('Hold Time received from neighbor.')
wfOsiDynAdjPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjPriority.setDescription('Priority to become designated router. IS only.')
wfOsiDynAdjSnpaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjSnpaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjSnpaAddr.setDescription('SNAP address for neighbor.')
wfOsiDynAdjNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjNsapAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjNsapAddr.setDescription('Neighbor address (NSAP).')
wfOsiDynAdjLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 9, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDynAdjLanId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDynAdjLanId.setDescription('LAN ID from Designated Router. IS only.')
wfOsiL1RoutesTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10), )
if mibBuilder.loadTexts: wfOsiL1RoutesTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RoutesTable.setDescription('This is the L1 Routes Table for this router.')
wfOsiL1RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiL1RouteType"), (0, "Wellfleet-OSI-MIB", "wfOsiL1RoutePathSplit"), (0, "Wellfleet-OSI-MIB", "wfOsiL1RouteId"))
if mibBuilder.loadTexts: wfOsiL1RouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RouteEntry.setDescription('This is the L1 Route entry for the Routes Table.')
wfOsiL1RouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1RouteId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RouteId.setDescription('This is the SysID of the L1 Destination.')
wfOsiL1RoutePathSplit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1RoutePathSplit.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RoutePathSplit.setDescription('This assigns a number to each equal cost path to the destination. There can be up to 2 equal cost paths to a destination.')
wfOsiL1RouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1RouteType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RouteType.setDescription('This tells what kind of a route this entry is.')
wfOsiL1RouteNextHopSnpa = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1RouteNextHopSnpa.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RouteNextHopSnpa.setDescription('This is the SNPA of the next hop adj for this route.')
wfOsiL1RouteNextHopId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1RouteNextHopId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RouteNextHopId.setDescription('This is the ID of the next hop adjacency to this route. If its just an ES then it is the 6byte System ID. If the next HOP is an IS then it is the NET. ')
wfOsiL1RouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1RouteNextHopType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RouteNextHopType.setDescription('This is the adj type of the next hop for this route.')
wfOsiL1RouteNextHopCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1RouteNextHopCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RouteNextHopCircuit.setDescription('This is the circuit to forward out for this route.')
wfOsiL1RouteDefaultMetricCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL1RouteDefaultMetricCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL1RouteDefaultMetricCost.setDescription('This is the cost to from this system to this destination.')
wfOsiL2RoutesTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11), )
if mibBuilder.loadTexts: wfOsiL2RoutesTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RoutesTable.setDescription('This is the L2 Routes Table for this router.')
wfOsiL2RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiL2RouteType"), (0, "Wellfleet-OSI-MIB", "wfOsiL2RoutePathSplit"), (0, "Wellfleet-OSI-MIB", "wfOsiL2RouteId"))
if mibBuilder.loadTexts: wfOsiL2RouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RouteEntry.setDescription('This is the L2 Route entry for the Routes Table.')
wfOsiL2RouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2RouteId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RouteId.setDescription('This is the SysID of the L2 Destination.')
wfOsiL2RoutePathSplit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2RoutePathSplit.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RoutePathSplit.setDescription('This assigns a number to each equal cost path to the destination. There can be up to 2 equal cost paths to a destination.')
wfOsiL2RouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2RouteType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RouteType.setDescription('This tells what kind of a route this entry is.')
wfOsiL2RouteNextHopSnpa = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2RouteNextHopSnpa.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RouteNextHopSnpa.setDescription('This is the SNPA of the neighbor on this circuit.')
wfOsiL2RouteNextHopId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2RouteNextHopId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RouteNextHopId.setDescription('This is the ID of the next hop adjacency to this route. If its just an ES then it is the 6byte System ID. If the next HOP is an IS then it is the NET. ')
wfOsiL2RouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2RouteNextHopType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RouteNextHopType.setDescription('This is the adj type of the next hop for this route.')
wfOsiL2RouteNextHopCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2RouteNextHopCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RouteNextHopCircuit.setDescription('This is the circuit to go out for this adj.')
wfOsiL2RouteDefaultMetricCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiL2RouteDefaultMetricCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiL2RouteDefaultMetricCost.setDescription('This is the cost to from this system to this destination.')
wfOsiDecnetTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12))
wfOsiDecnetTransDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiDecnetTransDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDecnetTransDelete.setDescription('This value determines whether DECnet Phase 4 to Phase 5 Transition functions are configured.')
wfOsiDecnetTransDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiDecnetTransDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDecnetTransDisable.setDescription('This value determines whether DECnet Phase 4 to Phase 5 Transition functions are enabled.')
wfOsiDecnetTransState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDecnetTransState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDecnetTransState.setDescription('This value displays the state of the DECnet Phase 4 to Phase 5 Transition function.')
wfOsiDecnetTransPhase4Pkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDecnetTransPhase4Pkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDecnetTransPhase4Pkts.setDescription('Number of successfully translated Phase 4 packets')
wfOsiDecnetTransSegFail = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDecnetTransSegFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDecnetTransSegFail.setDescription('Number of times Phase 5 translation failed because the packet was segmented.')
wfOsiDecnetTransNselFail = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDecnetTransNselFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDecnetTransNselFail.setDescription('Number of times Phase 5 translation failed because the NSELs were not the same.')
wfOsiDecnetTransUnrFail = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDecnetTransUnrFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDecnetTransUnrFail.setDescription('Number of times Phase 5 failed to find a route to the destination.')
wfOsiDecnetTransNumPhase4Es = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 12, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiDecnetTransNumPhase4Es.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiDecnetTransNumPhase4Es.setDescription('Number of Phase 4 ES Adjacencies announced by the Phase 4 (DECnet IV) router.')
wfOsiAreaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 13), )
if mibBuilder.loadTexts: wfOsiAreaAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiAreaAddressTable.setDescription('This is the table of Area Addresses for this Router.')
wfOsiAreaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 13, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiAreaAddress"))
if mibBuilder.loadTexts: wfOsiAreaAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiAreaAddressEntry.setDescription('This is the Area Address Record for this Router.')
wfOsiAreaAddrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiAreaAddrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiAreaAddrDelete.setDescription('This is the Create/Delete parameter for this AreaAddr entry.')
wfOsiAreaAddrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiAreaAddrDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiAreaAddrDisable.setDescription('Enable/Disable parameter for this AreaAddr.')
wfOsiAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiAreaAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiAreaAddress.setDescription('This is the prefix area address. It is also the inst_id.')
wfOsiTarpEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14))
wfOsiTarpCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCreate.setDescription('This value determines whether OSI Tarp is configured on this slot.')
wfOsiTarpEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpEnable.setDescription('This value dtermines if OSI Tarp is to startup.')
wfOsiTarpState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpState.setDescription('This value describes the state of OSI Tarp.')
wfOsiTarpTID = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpTID.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpTID.setDescription('This value contains the Target Identifier assigned to the router (Network Entity).')
wfOsiTarpOriginate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpOriginate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpOriginate.setDescription('This value determines if TARP is allowed to originate any tarp requests.')
wfOsiTarpLifetime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLifetime.setDescription('This value determines what the lifetime of of TARP packets originated by this router will be.')
wfOsiTarpStartSeq = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpStartSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpStartSeq.setDescription('This value determines what the starting sequence number of TARP packets originated by this router will be.')
wfOsiTarpNextSeq = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpNextSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpNextSeq.setDescription('This value determines what the next sequence number of TARP packets originated by this router will be.')
wfOsiTarpTarPro = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpTarPro.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpTarPro.setDescription("This value describes what the Protocol Address Type field within the TARP packet must be. A value of 'FE' describes a CLNP address type.")
wfOsiTarpTDC = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpTDC.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpTDC.setDescription('This value determines whether or not TARP uses and maintains a Tarp Data Cache.')
wfOsiTarpL2TDC = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpL2TDC.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpL2TDC.setDescription('This value determines whether or not TARP uses and maintains a Level 2 Tarp Data Cache.')
wfOsiTarpT1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpT1.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpT1.setDescription('This value configures the Tarp T1 Timer - how many seconds to wait for a response to a Type1 Request PDU.')
wfOsiTarpT2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpT2.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpT2.setDescription('This value configures the Tarp T2 Timer - how many seconds to wait for a response to a Type2 Request PDU.')
wfOsiTarpT3 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpT3.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpT3.setDescription('This value configures the Tarp T3 Timer - how many seconds to wait for a response to a Type5 Request PDU.')
wfOsiTarpT4 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpT4.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpT4.setDescription('This value configures the Tarp T4 Timer, which is used during the Error Recovery process after T2 expires.')
wfOsiTarpLDBTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpLDBTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBTimer.setDescription("This value configures the Loop Detection Buffer's Entry Timer.")
wfOsiTarpLDBFlush = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpLDBFlush.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBFlush.setDescription('This value configures the timer that signals the flushing of the Loop Detection Buffer.')
wfOsiTarpLDBSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpLDBSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBSize.setDescription('This value specifies the maximum number of entries the the Loop Detection Buffer can hold.')
wfOsiTarpType1Rcv = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType1Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType1Rcv.setDescription('This value counts the number of Type 1 Tarp packets received by this interface.')
wfOsiTarpType1Xmt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType1Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType1Xmt.setDescription('This value counts the number of Type 1 Tarp packets transmitted by this interface.')
wfOsiTarpType2Rcv = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType2Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType2Rcv.setDescription('This value counts the number of Type 2 Tarp packets received by this interface.')
wfOsiTarpType2Xmt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType2Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType2Xmt.setDescription('This value counts the number of Type 2 Tarp packets transmitted by this interface.')
wfOsiTarpType3Rcv = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType3Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType3Rcv.setDescription('This value counts the number of Type 3 Tarp packets received by this interface.')
wfOsiTarpType3Xmt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType3Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType3Xmt.setDescription('This value counts the number of Type 3 Tarp packets transmitted by this interface.')
wfOsiTarpType4Rcv = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType4Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType4Rcv.setDescription('This value counts the number of Type 4 Tarp packets received by this interface.')
wfOsiTarpType4Xmt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType4Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType4Xmt.setDescription('This value counts the number of Type 4 Tarp packets transmitted by this interface.')
wfOsiTarpType5Rcv = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType5Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType5Rcv.setDescription('This value counts the number of Type 5 Tarp packets received by this interface.')
wfOsiTarpType5Xmt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 14, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpType5Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpType5Xmt.setDescription('This value counts the number of Type 5 Tarp packets transmitted by this interface.')
wfOsiTarpCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15), )
if mibBuilder.loadTexts: wfOsiTarpCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitTable.setDescription('This table contains all of the Tarp interfaces for this system.')
wfOsiTarpCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiTarpCircuitCct"))
if mibBuilder.loadTexts: wfOsiTarpCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitEntry.setDescription('This is the Tarp Interface Entry for the Tarp Interface Table.')
wfOsiTarpCircuitCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpCircuitCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitCreate.setDescription('This value determines if the Tarp Interface is to be created for this OSI interface.')
wfOsiTarpCircuitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpCircuitEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitEnable.setDescription('This value determines if the Tarp Interface is to be enabled for this OSI interface.')
wfOsiTarpCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitState.setDescription('This value reflects the state of the Tarp interface.')
wfOsiTarpCircuitCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitCct.setDescription('Circuit number for this Tarp Interface.')
wfOsiTarpCircuitPropagate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpCircuitPropagate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitPropagate.setDescription('This value determines if this interface will propagate transit Tarp packets out this interface.')
wfOsiTarpCircuitOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpCircuitOriginate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitOriginate.setDescription('This value determines if this interface will send out Tarp packets originated by the router.')
wfOsiTarpCircuitType1Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType1Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType1Rcv.setDescription('This value counts the number of Type 1 Tarp packets received by this interface.')
wfOsiTarpCircuitType1Xmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType1Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType1Xmt.setDescription('This value counts the number of Type 1 Tarp packets transmitted by this interface.')
wfOsiTarpCircuitType2Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType2Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType2Rcv.setDescription('This value counts the number of Type 2 Tarp packets received by this interface.')
wfOsiTarpCircuitType2Xmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType2Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType2Xmt.setDescription('This value counts the number of Type 2 Tarp packets transmitted by this interface.')
wfOsiTarpCircuitType3Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType3Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType3Rcv.setDescription('This value counts the number of Type 3 Tarp packets received by this interface.')
wfOsiTarpCircuitType3Xmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType3Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType3Xmt.setDescription('This value counts the number of Type 3 Tarp packets transmitted by this interface.')
wfOsiTarpCircuitType4Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType4Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType4Rcv.setDescription('This value counts the number of Type 4 Tarp packets received by this interface.')
wfOsiTarpCircuitType4Xmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType4Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType4Xmt.setDescription('This value counts the number of Type 4 Tarp packets transmitted by this interface.')
wfOsiTarpCircuitType5Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType5Rcv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType5Rcv.setDescription('This value counts the number of Type 5 Tarp packets received by this interface.')
wfOsiTarpCircuitType5Xmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitType5Xmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitType5Xmt.setDescription('This value counts the number of Type 5 Tarp packets transmitted by this interface.')
wfOsiTarpCircuitNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpCircuitNoBufs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpCircuitNoBufs.setDescription('This value represents the number of times Tarp tried to allocate a buffer but was unable.')
wfOsiTarpLDBTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 16), )
if mibBuilder.loadTexts: wfOsiTarpLDBTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBTable.setDescription("Table of wfOsiTarpLDBEntry's.")
wfOsiTarpLDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 16, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiTarpLDBNSAP"))
if mibBuilder.loadTexts: wfOsiTarpLDBEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBEntry.setDescription('Each entry in the Loop Detection Buffer.')
wfOsiTarpLDBCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpLDBCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBCreate.setDescription('Specifies the creation or deletion of the instance.')
wfOsiTarpLDBNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 16, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpLDBNSAP.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBNSAP.setDescription('The NSAP address for this entry.')
wfOsiTarpLDBSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpLDBSequence.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBSequence.setDescription('The sequence number for this LDB entry.')
wfOsiTarpLDBCurrentTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpLDBCurrentTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpLDBCurrentTimer.setDescription('Current timer for this LDB Entry.')
wfOsiTarpStaticAdjTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 17), )
if mibBuilder.loadTexts: wfOsiTarpStaticAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpStaticAdjTable.setDescription("Table of wfOsiTarpStaticAdjEntry's.")
wfOsiTarpStaticAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 17, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiTarpStaticAdjNSAP"))
if mibBuilder.loadTexts: wfOsiTarpStaticAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpStaticAdjEntry.setDescription('This is the static adjacency record that appears in the adjacency table.')
wfOsiTarpStaticAdjCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpStaticAdjCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpStaticAdjCreate.setDescription('This value determines if this instance should be created or deleted.')
wfOsiTarpStaticAdjEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpStaticAdjEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpStaticAdjEnable.setDescription('This value determines if the Static Adjacency should be enabled.')
wfOsiTarpStaticAdjNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpStaticAdjNSAP.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpStaticAdjNSAP.setDescription('This specifies the address of the Static Adjacency. It is also the instance ID.')
wfOsiTarpStaticNibbleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 17, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpStaticNibbleLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpStaticNibbleLength.setDescription('Describes the number of nibbles in the Static NSAP Address.')
wfOsiTarpIgnoreAdjTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 18), )
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjTable.setDescription('This table contains all the adjacency entries that should be ignored.')
wfOsiTarpIgnoreAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 18, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiTarpIgnoreAdjNSAP"))
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjEntry.setDescription('This is the ignore static route entry for the wfOsiTarpIgnoreAdj table.')
wfOsiTarpIgnoreAdjCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjCreate.setDescription('Signifies this instance should be created.')
wfOsiTarpIgnoreAdjEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjEnable.setDescription('This value determines if this instance should be enabled or disabled.')
wfOsiTarpIgnoreAdjNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 18, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjNSAP.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpIgnoreAdjNSAP.setDescription('Identifies the OSI Adjacency that should be ignored.')
wfOsiTarpIgnoreNibbleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 18, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiTarpIgnoreNibbleLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiTarpIgnoreNibbleLength.setDescription('Describes the number of nibbles in the Static NSAP Address for the Ignore Static Route.')
wfOsiGreAdjTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 19), )
if mibBuilder.loadTexts: wfOsiGreAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiGreAdjTable.setDescription('Gre Adjacency Table')
wfOsiGreAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 19, 1), ).setIndexNames((0, "Wellfleet-OSI-MIB", "wfOsiGreAdjTnlNum"), (0, "Wellfleet-OSI-MIB", "wfOsiGreAdjConnNum"))
if mibBuilder.loadTexts: wfOsiGreAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiGreAdjEntry.setDescription('GRE Adjacency Entry')
wfOsiGreAdjDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiGreAdjDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiGreAdjDelete.setDescription('Delete/Create parameter.')
wfOsiGreAdjDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiGreAdjDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiGreAdjDisable.setDescription('Enable/Disable parameter')
wfOsiGreAdjTnlNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiGreAdjTnlNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiGreAdjTnlNum.setDescription('GRE tunnel number from GRE MIB')
wfOsiGreAdjConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOsiGreAdjConnNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiGreAdjConnNum.setDescription('GRE remote tunnel connection number from GRE MIB.')
wfOsiGreAdjRemoteISId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 19, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiGreAdjRemoteISId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiGreAdjRemoteISId.setDescription('This is the Physical IP address of the Destination.')
wfOsiGreAdjCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 6, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOsiGreAdjCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOsiGreAdjCircuitId.setDescription('Circuit number on which this link in configured.')
mibBuilder.exportSymbols("Wellfleet-OSI-MIB", wfOsiCircuitClnpSegCreates=wfOsiCircuitClnpSegCreates, wfOsiDecnetTransDisable=wfOsiDecnetTransDisable, wfOsiCircuitL2DesignatedRouter=wfOsiCircuitL2DesignatedRouter, wfOsiL1RoutePathSplit=wfOsiL1RoutePathSplit, wfOsiDecnetTransSegFail=wfOsiDecnetTransSegFail, wfOsiCircuitNumDynPtpIsAdjs=wfOsiCircuitNumDynPtpIsAdjs, wfOsiTarpCircuitCreate=wfOsiTarpCircuitCreate, wfOsiTarpLDBCreate=wfOsiTarpLDBCreate, wfOsiNumL1Lsps=wfOsiNumL1Lsps, wfOsiTarpIgnoreAdjEnable=wfOsiTarpIgnoreAdjEnable, wfOsiCircuitClnpInEchoRequests=wfOsiCircuitClnpInEchoRequests, wfOsiState=wfOsiState, wfOsiTarpIgnoreAdjNSAP=wfOsiTarpIgnoreAdjNSAP, wfOsiTarpNextSeq=wfOsiTarpNextSeq, wfOsiCircuitNumDynEsAdjs=wfOsiCircuitNumDynEsAdjs, wfOsiTarpTID=wfOsiTarpTID, wfOsiTarpLDBNSAP=wfOsiTarpLDBNSAP, wfOsiL1RouteType=wfOsiL1RouteType, wfOsiL2RouteType=wfOsiL2RouteType, wfOsiTarpLDBSequence=wfOsiTarpLDBSequence, wfOsiMaxAreas=wfOsiMaxAreas, wfOsiAreaAddressTable=wfOsiAreaAddressTable, wfOsiL1LspHdrLifetime=wfOsiL1LspHdrLifetime, wfOsiCircuitClnpInAddrErrors=wfOsiCircuitClnpInAddrErrors, wfOsiTrafficFilterDisable=wfOsiTrafficFilterDisable, wfOsiDynAdjDatabase=wfOsiDynAdjDatabase, wfOsiLoadBal=wfOsiLoadBal, wfOsiCircuitPassword=wfOsiCircuitPassword, wfOsiDynAdjSnpaAddr=wfOsiDynAdjSnpaAddr, wfOsiCircuitEshConfigTime=wfOsiCircuitEshConfigTime, wfOsiCircuitSentPkts=wfOsiCircuitSentPkts, wfOsiSeqNumberSkips=wfOsiSeqNumberSkips, wfOsiCircuitEsisRduOuts=wfOsiCircuitEsisRduOuts, wfOsiDecnetTransPhase4Pkts=wfOsiDecnetTransPhase4Pkts, wfOsiL1RouteDefaultMetricCost=wfOsiL1RouteDefaultMetricCost, wfOsiTarpLDBTimer=wfOsiTarpLDBTimer, wfOsiTrafficFilterCounter=wfOsiTrafficFilterCounter, wfOsiExceedMaxSeqNums=wfOsiExceedMaxSeqNums, wfOsiL1RouteNextHopSnpa=wfOsiL1RouteNextHopSnpa, wfOsiL1RoutesTable=wfOsiL1RoutesTable, wfOsiTarpCircuitType2Rcv=wfOsiTarpCircuitType2Rcv, wfOsiTrafficFilterCircuit=wfOsiTrafficFilterCircuit, wfOsiTarpType1Xmt=wfOsiTarpType1Xmt, wfOsiExtAddrCircuit=wfOsiExtAddrCircuit, wfOsiStaticEsTable=wfOsiStaticEsTable, wfOsiTarpLDBCurrentTimer=wfOsiTarpLDBCurrentTimer, wfOsiL1LspHdrSeqnum=wfOsiL1LspHdrSeqnum, wfOsiCircuitL1DrChanges=wfOsiCircuitL1DrChanges, wfOsiTarpEnable=wfOsiTarpEnable, wfOsiCircuitNumDynL1Adjs=wfOsiCircuitNumDynL1Adjs, wfOsiMaxL1Is=wfOsiMaxL1Is, wfOsiTarpStaticAdjEnable=wfOsiTarpStaticAdjEnable, wfOsiTarpStaticAdjCreate=wfOsiTarpStaticAdjCreate, wfOsiDynAdjPriority=wfOsiDynAdjPriority, wfOsiTarpIgnoreNibbleLength=wfOsiTarpIgnoreNibbleLength, wfOsiStaticRouteTable=wfOsiStaticRouteTable, wfOsiL2RouteDefaultMetricCost=wfOsiL2RouteDefaultMetricCost, wfOsiTrafficFilterDefinition=wfOsiTrafficFilterDefinition, wfOsiCircuitInitFailures=wfOsiCircuitInitFailures, wfOsiCircuitEsisEshIns=wfOsiCircuitEsisEshIns, wfOsiStaticEsEntry=wfOsiStaticEsEntry, wfOsiCircuitPduFormatErrDiscards=wfOsiCircuitPduFormatErrDiscards, wfOsiL2RouteNextHopId=wfOsiL2RouteNextHopId, wfOsiTarpType3Rcv=wfOsiTarpType3Rcv, wfOsiStaticRouteDisable=wfOsiStaticRouteDisable, wfOsiFletchRelaxedEnable=wfOsiFletchRelaxedEnable, wfOsiCircuitL1DrPriority=wfOsiCircuitL1DrPriority, wfOsiCircuitClnpForwarding=wfOsiCircuitClnpForwarding, wfOsiGreAdjEntry=wfOsiGreAdjEntry, wfOsiCircuitEsisIshOuts=wfOsiCircuitEsisIshOuts, wfOsiAreaAddrDisable=wfOsiAreaAddrDisable, wfOsiDynAdjLanId=wfOsiDynAdjLanId, wfOsiCircuitStateChanges=wfOsiCircuitStateChanges, wfOsiNumDynPtpIsAdjs=wfOsiNumDynPtpIsAdjs, wfOsiDynAdjType=wfOsiDynAdjType, wfOsiNumL2Lsps=wfOsiNumL2Lsps, wfOsiTarpT4=wfOsiTarpT4, wfOsiCircuitSentControlPdus=wfOsiCircuitSentControlPdus, wfOsiDecnetTransState=wfOsiDecnetTransState, wfOsiStaticEsDelete=wfOsiStaticEsDelete, wfOsiL2RoutePathSplit=wfOsiL2RoutePathSplit, wfOsiCircuitAgedPduDiscards=wfOsiCircuitAgedPduDiscards, wfOsiCircuitReceivedBadSnps=wfOsiCircuitReceivedBadSnps, wfOsiStaticRouteDelete=wfOsiStaticRouteDelete, wfOsiTarpT1=wfOsiTarpT1, wfOsiL2LspPassword=wfOsiL2LspPassword, wfOsiNumDynPtpEsAdjs=wfOsiNumDynPtpEsAdjs, wfOsiTrafficFilterRuleNumber=wfOsiTrafficFilterRuleNumber, wfOsiTarpStaticAdjEntry=wfOsiTarpStaticAdjEntry, wfOsiRouterId=wfOsiRouterId, wfOsiRouterType=wfOsiRouterType, wfOsiL1LspPassword=wfOsiL1LspPassword, wfOsiTarpCircuitType4Xmt=wfOsiTarpCircuitType4Xmt, wfOsiCircuitReceivedBadL1Iihs=wfOsiCircuitReceivedBadL1Iihs, wfOsiTrafficFilterReserved=wfOsiTrafficFilterReserved, wfOsiL1RouteNextHopId=wfOsiL1RouteNextHopId, wfOsiTrafficFilterEntry=wfOsiTrafficFilterEntry, wfOsiStaticRouteNextHopIs=wfOsiStaticRouteNextHopIs, wfOsiL2LspHdrFlags=wfOsiL2LspHdrFlags, wfOsiTarpLDBFlush=wfOsiTarpLDBFlush, wfOsiAreaAddrAlias1=wfOsiAreaAddrAlias1, wfOsiTarpType2Rcv=wfOsiTarpType2Rcv, wfOsiOwnLspPurges=wfOsiOwnLspPurges, wfOsiMaxDynL2Is=wfOsiMaxDynL2Is, wfOsiL2RouteNextHopSnpa=wfOsiL2RouteNextHopSnpa, wfOsiDynAdjTable=wfOsiDynAdjTable, wfOsiCircuitClnpInEchoReplies=wfOsiCircuitClnpInEchoReplies, wfOsiTarpEntry=wfOsiTarpEntry, wfOsiGreAdjTnlNum=wfOsiGreAdjTnlNum, wfOsiNearestL2Is=wfOsiNearestL2Is, wfOsiCircuitL1DefaultMetric=wfOsiCircuitL1DefaultMetric, wfOsiCircuitIshHoldMultiplier=wfOsiCircuitIshHoldMultiplier, wfOsiDecnetTransNselFail=wfOsiDecnetTransNselFail, wfOsiTarpLifetime=wfOsiTarpLifetime, wfOsiNumDynEsAdjs=wfOsiNumDynEsAdjs, wfOsiDynAdjNsapAddr=wfOsiDynAdjNsapAddr, wfOsiTarpType4Rcv=wfOsiTarpType4Rcv, wfOsiStaticRouteType=wfOsiStaticRouteType, wfOsiDynAdjCircuitId=wfOsiDynAdjCircuitId, wfOsiTarpCircuitType2Xmt=wfOsiTarpCircuitType2Xmt, wfOsiCircuitEsisIshIns=wfOsiCircuitEsisIshIns, wfOsiMaxDynEs=wfOsiMaxDynEs, wfOsiTarpCircuitType3Xmt=wfOsiTarpCircuitType3Xmt, wfOsiCircuitClnpForwPdus=wfOsiCircuitClnpForwPdus, wfOsiTarpStaticAdjNSAP=wfOsiTarpStaticAdjNSAP, wfOsiGreAdjConnNum=wfOsiGreAdjConnNum, wfOsiTarpCircuitType4Rcv=wfOsiTarpCircuitType4Rcv, wfOsiCircuitDisableRedirect=wfOsiCircuitDisableRedirect, wfOsiDelete=wfOsiDelete, wfOsiGreAdjDisable=wfOsiGreAdjDisable, wfOsiL2LspHdrTable=wfOsiL2LspHdrTable, wfOsiCircuitState=wfOsiCircuitState, wfOsiCircuitL1DesignatedRouter=wfOsiCircuitL1DesignatedRouter, wfOsiExtAddr=wfOsiExtAddr, wfOsiTrafficFilterName=wfOsiTrafficFilterName, wfOsiTarpCircuitPropagate=wfOsiTarpCircuitPropagate, wfOsiTarpType1Rcv=wfOsiTarpType1Rcv, wfOsiTarpOriginate=wfOsiTarpOriginate, wfOsiCircuitClnpInReceives=wfOsiCircuitClnpInReceives, wfOsiTarpCircuitNoBufs=wfOsiTarpCircuitNoBufs, wfOsiTrafficFilterStatus=wfOsiTrafficFilterStatus, wfOsiTarpStaticAdjTable=wfOsiTarpStaticAdjTable, wfOsiCircuitClnpInUnknownNlps=wfOsiCircuitClnpInUnknownNlps, wfOsiExtAddrSnpa=wfOsiExtAddrSnpa, wfOsiCksumIsPdus=wfOsiCksumIsPdus, wfOsiCircuitId=wfOsiCircuitId, wfOsiTarpType4Xmt=wfOsiTarpType4Xmt, wfOsiMaxDynL1Is=wfOsiMaxDynL1Is, wfOsiDynAdjHoldTime=wfOsiDynAdjHoldTime, wfOsiCircuitL2DrPriority=wfOsiCircuitL2DrPriority, wfOsiGreAdjCircuitId=wfOsiGreAdjCircuitId, wfOsiL2LspDbOverloads=wfOsiL2LspDbOverloads, wfOsiCircuitRouterLevel=wfOsiCircuitRouterLevel, wfOsiExtAddrNibbleLength=wfOsiExtAddrNibbleLength, wfOsiL2RouteId=wfOsiL2RouteId, wfOsiDecnetTransNumPhase4Es=wfOsiDecnetTransNumPhase4Es, wfOsiCircuitAddrUnreachDiscards=wfOsiCircuitAddrUnreachDiscards, wfOsiCircuitReceivedBadEshs=wfOsiCircuitReceivedBadEshs, wfOsiCircuitReceivedBadL2Iihs=wfOsiCircuitReceivedBadL2Iihs, wfOsiMaxExtAddr=wfOsiMaxExtAddr, wfOsiTarpCircuitType5Xmt=wfOsiTarpCircuitType5Xmt, wfOsiTarpCircuitState=wfOsiTarpCircuitState, wfOsiTarpIgnoreAdjEntry=wfOsiTarpIgnoreAdjEntry, wfOsiTrafficFilterTable=wfOsiTrafficFilterTable, wfOsiTarpType5Xmt=wfOsiTarpType5Xmt, wfOsiTarpCircuitEntry=wfOsiTarpCircuitEntry, wfOsiTarpLDBTable=wfOsiTarpLDBTable, wfOsiTarpStaticNibbleLength=wfOsiTarpStaticNibbleLength, wfOsiL2RouteEntry=wfOsiL2RouteEntry, wfOsiAreaAddrAlias2=wfOsiAreaAddrAlias2, wfOsiTarpCircuitCct=wfOsiTarpCircuitCct, wfOsiCircuitDroppedPkts=wfOsiCircuitDroppedPkts, wfOsiAreaAddressEntry=wfOsiAreaAddressEntry, wfOsiNumL1Routes=wfOsiNumL1Routes, wfOsiTarpCircuitType1Rcv=wfOsiTarpCircuitType1Rcv, wfOsiTarpStartSeq=wfOsiTarpStartSeq, wfOsiCircuitL2DrChanges=wfOsiCircuitL2DrChanges, wfOsiTrafficFilterFragment=wfOsiTrafficFilterFragment, wfOsiTarpLDBEntry=wfOsiTarpLDBEntry, wfOsiCircuitBadIshReceived=wfOsiCircuitBadIshReceived, wfOsiDynAdjEntry=wfOsiDynAdjEntry, wfOsiCircuitClnpOutEchoRequests=wfOsiCircuitClnpOutEchoRequests, wfOsiNumDynL1Adjs=wfOsiNumDynL1Adjs, wfOsiL1RouteNextHopType=wfOsiL1RouteNextHopType, wfOsiTarpCircuitType5Rcv=wfOsiTarpCircuitType5Rcv, wfOsiTrafficFilterDelete=wfOsiTrafficFilterDelete, wfOsiTarpT2=wfOsiTarpT2, wfOsiTarpType3Xmt=wfOsiTarpType3Xmt, wfOsiNumDynL2Adjs=wfOsiNumDynL2Adjs, wfOsiCircuitDelete=wfOsiCircuitDelete, wfOsiExtAddrDelete=wfOsiExtAddrDelete, wfOsiCircuitIsisHelloTimer=wfOsiCircuitIsisHelloTimer, wfOsiCircuitIihHoldMultiplier=wfOsiCircuitIihHoldMultiplier, wfOsiL2LspHdrEntry=wfOsiL2LspHdrEntry, wfOsiStaticEsCircuit=wfOsiStaticEsCircuit, wfOsiTarpCircuitOriginate=wfOsiTarpCircuitOriginate, wfOsiL1LspDbOverloads=wfOsiL1LspDbOverloads, wfOsiOthLspPurges=wfOsiOthLspPurges, wfOsiCircuitReceivedControlPdus=wfOsiCircuitReceivedControlPdus, wfOsiL1LspHdrLspId=wfOsiL1LspHdrLspId, wfOsiDecnetTransUnrFail=wfOsiDecnetTransUnrFail, wfOsiDisable=wfOsiDisable, wfOsiTarpT3=wfOsiTarpT3, wfOsiTarpIgnoreAdjTable=wfOsiTarpIgnoreAdjTable, wfOsiGreAdjDelete=wfOsiGreAdjDelete, wfOsiAreaAddr=wfOsiAreaAddr, wfOsiL2RoutesTable=wfOsiL2RoutesTable, wfOsiGreAdjTable=wfOsiGreAdjTable, wfOsiL2RouteNextHopType=wfOsiL2RouteNextHopType, wfOsiAreaAddrDelete=wfOsiAreaAddrDelete, wfOsiManAddrDroppedAreas=wfOsiManAddrDroppedAreas, wfOsiDecnetTransDelete=wfOsiDecnetTransDelete, wfOsiMaxEs=wfOsiMaxEs, wfOsiTarpTarPro=wfOsiTarpTarPro, wfOsiL1RouteNextHopCircuit=wfOsiL1RouteNextHopCircuit, wfOsiCircuitClnpInUnknownUlps=wfOsiCircuitClnpInUnknownUlps, wfOsiStaticEsSnpa=wfOsiStaticEsSnpa, wfOsiAreaAddress=wfOsiAreaAddress, wfOsiExternalAddressTable=wfOsiExternalAddressTable, wfOsiMaxL2Is=wfOsiMaxL2Is, wfOsiTarpCircuitType1Xmt=wfOsiTarpCircuitType1Xmt, wfOsiStaticRouteCost=wfOsiStaticRouteCost, wfOsiCircuitClnpOutEchoReplies=wfOsiCircuitClnpOutEchoReplies, wfOsiCircuitEntry=wfOsiCircuitEntry, wfOsiL1LspHdrFlags=wfOsiL1LspHdrFlags, wfOsiL1LspHdrCksum=wfOsiL1LspHdrCksum, wfOsiCircuitFragmentedPdus=wfOsiCircuitFragmentedPdus, wfOsiCircuitTable=wfOsiCircuitTable, wfOsiExtAddrCost=wfOsiExtAddrCost, wfOsiTarpLDBSize=wfOsiTarpLDBSize, wfOsiCircuitClnpDefaultLifeTime=wfOsiCircuitClnpDefaultLifeTime, wfOsiStaticRouteAddr=wfOsiStaticRouteAddr, wfOsiL1LspHdrTable=wfOsiL1LspHdrTable, wfOsiL1RouteEntry=wfOsiL1RouteEntry, wfOsiGreAdjRemoteISId=wfOsiGreAdjRemoteISId, wfOsiCircuitCongestionDiscards=wfOsiCircuitCongestionDiscards, wfOsiCircuitAdjStateChanges=wfOsiCircuitAdjStateChanges, wfOsiStaticRouteNibbleLength=wfOsiStaticRouteNibbleLength, wfOsiCircuitNumDynPtpEsAdjs=wfOsiCircuitNumDynPtpEsAdjs, wfOsiExternalAddressEntry=wfOsiExternalAddressEntry, wfOsiNumL2Routes=wfOsiNumL2Routes, wfOsiCircuitEsisHelloTimer=wfOsiCircuitEsisHelloTimer, wfOsiL2LspHdrLspId=wfOsiL2LspHdrLspId, wfOsiL2LspHdrLifetime=wfOsiL2LspHdrLifetime, wfOsiTarpCircuitTable=wfOsiTarpCircuitTable, wfOsiTarpCircuitType3Rcv=wfOsiTarpCircuitType3Rcv, wfOsiCircuitL2DefaultMetric=wfOsiCircuitL2DefaultMetric, wfOsiTarpState=wfOsiTarpState, wfOsiTarpTDC=wfOsiTarpTDC, wfOsiTarpType2Xmt=wfOsiTarpType2Xmt, wfOsiIsisVersion=wfOsiIsisVersion, wfOsiCircuitSentErrorReports=wfOsiCircuitSentErrorReports, wfOsiStaticEsDisable=wfOsiStaticEsDisable, wfOsiL2RouteNextHopCircuit=wfOsiL2RouteNextHopCircuit)
mibBuilder.exportSymbols("Wellfleet-OSI-MIB", wfOsiL1RouteId=wfOsiL1RouteId, wfOsiL2LspHdrCksum=wfOsiL2LspHdrCksum, wfOsiTarpL2TDC=wfOsiTarpL2TDC, wfOsiL2LspHdrSeqnum=wfOsiL2LspHdrSeqnum, wfOsiTarpCreate=wfOsiTarpCreate, wfOsiL1LspHdrEntry=wfOsiL1LspHdrEntry, wfOsiCircuitRejectedAdjs=wfOsiCircuitRejectedAdjs, wfOsiCircuitReceivedBadLsps=wfOsiCircuitReceivedBadLsps, wfOsiCircuitClnpOutOpts=wfOsiCircuitClnpOutOpts, wfOsiClnpSrcRtOptionDisable=wfOsiClnpSrcRtOptionDisable, wfOsiCircuitUnsuppOptsDiscards=wfOsiCircuitUnsuppOptsDiscards, wfOsiCircuitReceivedPkts=wfOsiCircuitReceivedPkts, wfOsiDynAdjId=wfOsiDynAdjId, wfOsiCircuitNumDynL2Adjs=wfOsiCircuitNumDynL2Adjs, wfOsiStaticRouteEntry=wfOsiStaticRouteEntry, wfOsiTarpCircuitEnable=wfOsiTarpCircuitEnable, wfOsiTarpIgnoreAdjCreate=wfOsiTarpIgnoreAdjCreate, wfOsiTarpType5Rcv=wfOsiTarpType5Rcv, wfOsi=wfOsi, wfOsiCircuitClnpInDelivers=wfOsiCircuitClnpInDelivers, wfOsiDynAdjState=wfOsiDynAdjState, wfOsiCircuitClnpInOpts=wfOsiCircuitClnpInOpts, wfOsiExtAddrDisable=wfOsiExtAddrDisable, wfOsiStaticEsId=wfOsiStaticEsId, wfOsiCircuitDisable=wfOsiCircuitDisable, wfOsiDecnetTrans=wfOsiDecnetTrans, wfOsiCorruptedLsps=wfOsiCorruptedLsps)
