#
# PySNMP MIB module WAN-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WAN-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, NotificationType, TimeTicks, ObjectIdentity, Bits, Unsigned32, Counter64, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "NotificationType", "TimeTicks", "ObjectIdentity", "Bits", "Unsigned32", "Counter64", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTLANConnectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500ContWANAdaptor = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1))
class Counter8(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500GCTLANConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16), )
if mibBuilder.loadTexts: cdx6500GCTLANConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GCTLANConnectionTable.setDescription('A list of parameters for configuring LAN Connections.')
cdx6500GCTLANConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WAEntryNumber"))
if mibBuilder.loadTexts: cdx6500GCTLANConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GCTLANConnectionEntry.setDescription('Each entry contains the Configuration parameters for each LAN Connection.')
cdx6500WAEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAEntryNumber.setDescription('This is a standard table entry number. It identifies a specific LAN Connection Record within the table.')
cdx6500WALanForwarderType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50, 100))).clone(namedValues=NamedValues(("brid", 0), ("rout", 1), ("brout", 2), ("newvalBrid", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALanForwarderType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALanForwarderType.setDescription("This parameter specifies the type of forwarders communicating over this LAN Connection. brid - Bridging Forwarders. rout - Routing Forwarders. brout - Bridging and Routing Forwarders. nc - Skipped during configuration. newvalBrid - same functionality as 'brid', new enumeration added for RFC1155 compatibility.")
cdx6500WABridgeLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WABridgeLinkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WABridgeLinkNumber.setDescription('This parameter specifies the Bridge-Link that is using this LAN Connection.')
cdx6500WARouterInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WARouterInterfaceNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WARouterInterfaceNum.setDescription('This parameter specifies the Router Interface that is using this LAN Connection.')
cdx6500WACfgEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deprecatedObj", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgEncapsulationType.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500WACfgEncapsulationType.setDescription('This parameter specifies the data encapsulation type used over this LAN Connection. This object has been deprecated, use cdx6500WACfgEncapType instead.')
cdx6500WAAutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAAutocallMnemonic.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAAutocallMnemonic.setDescription('If configured, the Autocall Mnemonic references a remote address which will be called by the LAN Connection.')
cdx6500WAAutocallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAAutocallTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAAutocallTimeout.setDescription('This is the time interval in seconds between call attempts when auto calling.')
cdx6500WAMaxAutocallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAMaxAutocallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAMaxAutocallAttempts.setDescription('This parameter is used to specify the number of times that the LAN Connection will attempt to autocall a remote destination. A value of zero will allow unlimited attempts.')
cdx6500WARemoteConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WARemoteConnectionId.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WARemoteConnectionId.setDescription('This parameter specifies the number of the remote LAN Connection or the FRA Station number that this LAN connection will attempt to connect to if configured for autocall.')
cdx6500WABillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 100))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WABillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WABillingRecords.setDescription("This controls whether billing (accounting) records will be created for calls on this LAN Connection. off : Billing records will not be created. on : Billing records will be created. nc : Skipped during configuration. newvalOff : same functionality as 'off', new enumeration added for RFC1155 compatibility.")
cdx6500WADataPassingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50, 100))).clone(namedValues=NamedValues(("low", 0), ("med", 1), ("high", 2), ("exp", 3), ("newvalLow", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WADataPassingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WADataPassingPriority.setDescription("This parameter specifies the Traffic Priority of this LAN Connection. low - Low Priority. med - Medium Priority. high - High Priority. exp - Expedite Priority. nc - Skipped during configuration. newvalLow - same functionality as 'low', new enumeration added for RFC1155 compatibility.")
cdx6500WALCONQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALCONQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALCONQueueLimit.setDescription('This parameter specifies the maximum number of bytes that will be queued for this LCON befor transmission on the WAN link. It is recommended that this parameter be set for two seconds of data on the WAN link.')
cdx6500WACfgEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50, 100))).clone(namedValues=NamedValues(("codex", 0), ("rfc1294", 1), ("rfc877", 2), ("newvalCodex", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgEncapType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgEncapType.setDescription("This parameter specifies the data encapsulation type used over this LAN Connection. codex - Codex Proprietary Encapsulation. rfc1294 - RFC 1294 Multiprotocol Encapsulation. rfc877 - RFC 877 Multiprotocol Encapsulation. nc - Skipped during configuration. newvalCodex - same functionality as 'codex', new enumeration added for RFC1155 compatibility.")
cdx6500WACfgOnDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 100))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgOnDemand.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgOnDemand.setDescription("This parameter controls whether the circuit is established at startup or established when required for data passing. disabled - Circuit is established at start up. enabled - Circuit is established on demand. nc - Skipped during configuration. newvalDisabled - same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500WACfgIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgIdleTimeout.setDescription('This parameter specifies the amount of time in seconds the circuit will remain connected without passing any data before being brought down. Setting the parameter to zero keeps the circuit up indefinitely')
cdx6500WACfgLanConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 100))).clone(namedValues=NamedValues(("ptToPt", 0), ("group", 1), ("newvalPtToPt", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgLanConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgLanConnectionType.setDescription("This parameter specifies whether the LAN Connection defines a point to point connection across the WAN, or is part of a group of LAN Connections. ptToPt - Point to Point LAN Connection. group - Member of a LAN Connection Group. nc - Skipped during configuration. newvalPtToPt - same functionality as 'ptToPt', new enumeration added for RFC1155 compatibility.")
cdx6500WACfgNexthopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgNexthopIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgNexthopIpAddress.setDescription('This parameter specifies the IP address of the Router Interface on the other end of this LAN Connection, which is the next hop on the path to the final destination. A setting of 0.0.0.0 causes this parameter to be ignored.')
cdx6500WACfgNexthopIpxNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgNexthopIpxNodeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgNexthopIpxNodeNumber.setDescription('This parameter specifies the IPX node number of the Router on the other end of this LAN Connection, which is the next hop on the path to the final destination. A setting of 0 causes this parameter to be ignored.')
cdx6500WACfgParallelSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgParallelSvc.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgParallelSvc.setDescription('This parameter specifies the maximum number of parallel connections that can be established to the remote destination. Parallel SVCs are established when congestion thresholds are reached on active connections.')
cdx6500WACfgParallelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgParallelThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgParallelThreshold.setDescription('This parameter specifies the number of outstanding data bytes that will trigger the establishment of a Parallel SVC. If this number of data bytes has been transmitted without acknowledgment, the receipt of additional data for transmission will trigger Parallel SVC establishment. Note that this parameter must be configured with a value less than the LCON Queue Limit parameter.')
cdx6500WACfgParallelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgParallelPort.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgParallelPort.setDescription('This parameter specifies the port that Parallel SVCs should be brought up over. The parameter can be in two forms. It can be in the form of a port identifier string. For example, to bring Parallel SVCs up over X25 port number 8, enter the string X25-8. It can also be in the form of a Switched Services Table destination name, if the port that the Parallel SVCs are to come up over is a dial on demand port. A value of (blank) will cause Parallel SVCs to be brought up over the same port as the main connection.')
cdx6500WACfgBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 100))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACfgBroadcast.setDescription("This parameter specifies whether broadcast datagrams should be transmitted over this LAN Connection to the remote destination. disabled : Broadcast datagrams will not be transmitted over this LAN Connection. enabled : Broadcast datagrams will be transmitted over this LAN Connection. nc : Skipped during configuration. newvalDisabled : same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500GCTWanAdaptorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 17))
cdx6500GCMaxLCON = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GCMaxLCON.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GCMaxLCON.setDescription('Defines the maximum number of LAN Connections that may be configured.')
cdx6500LCTDataSummaryStats = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1), )
if mibBuilder.loadTexts: cdx6500LCTDataSummaryStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500LCTDataSummaryStats.setDescription('Data summary statstics provides the information on data packets transmitted, received, queued and discarded.')
cdx6500WADataStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WALanConnNumberData"))
if mibBuilder.loadTexts: cdx6500WADataStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WADataStatEntry.setDescription('LAN Connection Record number.')
cdx6500WALanConnNumberData = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALanConnNumberData.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALanConnNumberData.setDescription('It identifies a specific LAN Connection Record.')
cdx6500WALastStatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALastStatResetTime.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALastStatResetTime.setDescription('The date and time of the last statistics reset.')
cdx6500WAAvgPktSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 3), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAAvgPktSizeTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAAvgPktSizeTx.setDescription('Specifies the average size of the packets sent on the WAN, in bytes.')
cdx6500WACurTxQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACurTxQueueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACurTxQueueDepth.setDescription('Specifies the current number of packets queued awaiting transmission on the WAN, in packets.')
cdx6500WAMaxTxQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAMaxTxQueueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAMaxTxQueueDepth.setDescription('Specifies the maximum number of packets queued awaiting transmission on the WAN, in packets.')
cdx6500WAMaxTxQDepthTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAMaxTxQDepthTime.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAMaxTxQDepthTime.setDescription('The date and time when the number of packets queued awaiting transmission on the WAN reached its maximum.')
cdx6500WAAvgPktSizeRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 7), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAAvgPktSizeRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAAvgPktSizeRcv.setDescription('Specifies the average size of the packets received on the WAN, in bytes.')
cdx6500WATxPktDiscardFrwdReq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardFrwdReq.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500WATxPktDiscardFrwdReq.setDescription('This is a non-supported object.')
cdx6500WATxPktDiscardTransDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardTransDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WATxPktDiscardTransDelay.setDescription('Specifies the number of packets discarded due to packets exceeding the maximum allowed delay through the node.')
cdx6500WATxPktDiscardCong = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCong.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCong.setDescription('Specifies the number of packets discarded due to severe congestion.')
cdx6500WATxPktDiscardMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardMaxFrame.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WATxPktDiscardMaxFrame.setDescription('Specifies the number of packets discarded due to packets exceeding the maximum allowed frame size.')
cdx6500WATxPktDiscardCLrReq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCLrReq.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCLrReq.setDescription('Specifies the number of packets discarded due to Clear Requests Received.')
cdx6500WATxPktDiscardCallEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCallEstab.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCallEstab.setDescription('Specifies the number of packets discarded due to Call Establishment Failure.')
cdx6500WABytesOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WABytesOutstanding.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WABytesOutstanding.setDescription('Count of outstanding transmit bytes .')
cdx6500LCTCallSummaryStats = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2), )
if mibBuilder.loadTexts: cdx6500LCTCallSummaryStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500LCTCallSummaryStats.setDescription('A list of Call Summary Statistics for LAN connection.')
cdx6500WACallStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WALanConnNumberCall"))
if mibBuilder.loadTexts: cdx6500WACallStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACallStatEntry.setDescription('LAN Connection Record number.')
cdx6500WALanConnNumberCall = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALanConnNumberCall.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALanConnNumberCall.setDescription('It identifies a specific LAN Connection Record.')
cdx6500WAConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAConnectionType.setDescription('Specifies whether the connection is a Permanent Virtual Circuit (PVC) or a Switched Virtual Circuit (SVC).')
cdx6500WAStatEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("codex", 0), ("rfc1294", 1), ("rfc877", 2), ("newvalCodex", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAStatEncapsulationType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAStatEncapsulationType.setDescription("This parameter specifies the data encapsulation type used over this LAN Connection. codex - Codex Proprietary Encapsulation. rfc1294 - RFC 1294 Multiprotocol Encapsulation. rfc877 - RFC 877 Multiprotocol Encapsulation. newvalCodex - same functionality as 'codex', new enumeration added for RFC1155 compatibility.")
cdx6500WAConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 17, 18, 50))).clone(namedValues=NamedValues(("unconfigured", 0), ("backinHeap", 1), ("notConnected", 2), ("disabled", 3), ("handshaking", 4), ("waitForCall", 6), ("wfccRecall", 7), ("wfccWaitForCall", 8), ("wfccDisabled", 9), ("calling", 11), ("connected", 17), ("connectedCongested", 18), ("newvalUnconfigured", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAConnectionState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAConnectionState.setDescription("Specifies the current state of the Permanent Virtual Circuit (PVC) or a Switched Virtual Circuit (SVC). unconfigured : Init state. backinHeap : LCONCB has been returned to memory heap. notConnected : Completed Init, waiting for startup, or failed autocall SVC. disabled : Connection is Disabled. calling : Autocall SVC trying to complete call. waitForCall : Non-autocall SVC waiting for call. handshaking : PVC in reset handshake process. connected : Connection is established. connectedCongested : Connection has reached congestion thresh. wfccRecall : Wait for Clr Conf Re-Call, autocall SVC. wfccWaitForCall : Wait for Clr Conf Wait for Call non-auto : calling SVC. wfccDisabled : Wait for Clr Conf goto Disabled. newvalUnconfigured : same functionality as 'unconfigured', new enumeration added for RFC1155 compatibility.")
cdx6500WAForwardersConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAForwardersConnected.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAForwardersConnected.setDescription('Specifies which forwarders are currently connected to this LAN Connection .')
cdx6500WARemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WARemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WARemoteAddress.setDescription('Specifies the called address of the remote WAN Adaptor LAN Connection for connected SVCs.')
cdx6500WANumAutocallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 7), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WANumAutocallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WANumAutocallAttempts.setDescription('Specifies the number of times attempted to autocall before either succeeded or failed in establishing the connection.')
cdx6500WALastClearCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALastClearCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALastClearCauseCode.setDescription('This is the cause code in the call clear packet last received by the LAN connection and explains why the last call was cleared.')
cdx6500WALastClearDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALastClearDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALastClearDiagCode.setDescription('This is the diagnostic code in the call clear packet last received by the LAN connection and explains why the last call was cleared.')
cdx6500WAParallelSvcsEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 10), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAParallelSvcsEstab.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAParallelSvcsEstab.setDescription('Count of parallel SVCs with calls established.')
cdx6500WAParallelSvcsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 11), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAParallelSvcsConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAParallelSvcsConfigured.setDescription('Number of Parallel SVCs.')
cdx6500LCTPacketSummaryStats = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3), )
if mibBuilder.loadTexts: cdx6500LCTPacketSummaryStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500LCTPacketSummaryStats.setDescription('A list of Packet Summary Statistics for LAN connection.')
cdx6500WAPktStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WALanConnNumberPkt"))
if mibBuilder.loadTexts: cdx6500WAPktStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAPktStatEntry.setDescription('LAN Connection Record number.')
cdx6500WALanConnNumberPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALanConnNumberPkt.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALanConnNumberPkt.setDescription('It identifies a specific LAN Connection Record.')
cdx6500WADataPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WADataPktTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WADataPktTx.setDescription('Specifies the total number of Data Packets sent on the WAN.')
cdx6500WADataPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WADataPktRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WADataPktRcv.setDescription('Specifies the total number of Data Packets received from the WAN.')
cdx6500WACallReqPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACallReqPktsTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACallReqPktsTx.setDescription('Specifies the total number of Call Request Packets sent on the WAN.')
cdx6500WACallReqPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACallReqPktsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACallReqPktsRcv.setDescription('Specifies the total number of Call Request Packets received from the WAN.')
cdx6500WACallAcceptPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACallAcceptPktsTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACallAcceptPktsTx.setDescription('Specifies the total number of Call Accept Packets sent on the WAN.')
cdx6500WACallAcceptPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACallAcceptPktsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WACallAcceptPktsRcv.setDescription('Specifies the total number of Call Accept Packets received from the WAN.')
cdx6500WAClearReqPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAClearReqPktsTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAClearReqPktsTx.setDescription('Specifies the total number of Clear Request Packets sent on the WAN.')
cdx6500WAClearReqPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAClearReqPktsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAClearReqPktsRcv.setDescription('Specifies the total number of Clear Request Packets received from the WAN.')
cdx6500WAClearConfPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAClearConfPktsTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAClearConfPktsTx.setDescription('Specifies the total number of Clear Confirm Packets sent on the WAN.')
cdx6500WAClearConfPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAClearConfPktsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAClearConfPktsRcv.setDescription('Specifies the total number of Clear Confirm Packets received from the WAN.')
cdx6500WAResetReqPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAResetReqPktsTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAResetReqPktsTx.setDescription('Specifies the total number of Reset Request Packets sent on the WAN.')
cdx6500WAResetReqPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAResetReqPktsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAResetReqPktsRcv.setDescription('Specifies the total number of Reset Request Packets received from the WAN.')
cdx6500WAResetConfPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAResetConfPktsTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAResetConfPktsTx.setDescription('Specifies the total number of Reset Confirm Packets sent on the WAN.')
cdx6500WAResetConfPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAResetConfPktsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAResetConfPktsRcv.setDescription('Specifies the total number of Reset Confirm Packets received from the WAN.')
cdx6500ContWANAdaptorTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1), )
if mibBuilder.loadTexts: cdx6500ContWANAdaptorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContWANAdaptorTable.setDescription('Control parameters for the LAN Connection.')
cdx6500ContWANAdaptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WAControlLanConnNumber"))
if mibBuilder.loadTexts: cdx6500ContWANAdaptorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContWANAdaptorEntry.setDescription('Each control applies to a single LAN Connection.')
cdx6500WAControlLanConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAControlLanConnNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WAControlLanConnNumber.setDescription('This identifies a specific LAN Connection Record.')
cdx6500WALanConnEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("newvalEnable", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500WALanConnEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALanConnEnableDisable.setDescription("This command enables or disables a specified LAN connection. newvalEnable : same functionality as 'enable', new enumeration added for RFC1155 compatibility.")
cdx6500WALanConnBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("boot", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500WALanConnBoot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALanConnBoot.setDescription('This command causes the LAN connection record to be booted.')
cdx6500WALanConnResetStat = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500WALanConnResetStat.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500WALanConnResetStat.setDescription('When this command is entered the resettable statistics parameters are reset for the specified LAN Connection Number.')
mibBuilder.exportSymbols("WAN-OPT-MIB", cdx6500WABridgeLinkNumber=cdx6500WABridgeLinkNumber, cdx6500WALanForwarderType=cdx6500WALanForwarderType, cdx6500ContWANAdaptorEntry=cdx6500ContWANAdaptorEntry, cdx6500WACfgLanConnectionType=cdx6500WACfgLanConnectionType, cdx6500WAParallelSvcsConfigured=cdx6500WAParallelSvcsConfigured, cdx6500WAClearConfPktsRcv=cdx6500WAClearConfPktsRcv, cdx6500WANumAutocallAttempts=cdx6500WANumAutocallAttempts, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500GCMaxLCON=cdx6500GCMaxLCON, cdx6500WALastStatResetTime=cdx6500WALastStatResetTime, cdx6500WAClearConfPktsTx=cdx6500WAClearConfPktsTx, cdx6500WAAvgPktSizeRcv=cdx6500WAAvgPktSizeRcv, cdx6500WAAutocallMnemonic=cdx6500WAAutocallMnemonic, cdx6500WATxPktDiscardMaxFrame=cdx6500WATxPktDiscardMaxFrame, cdx6500WALanConnNumberCall=cdx6500WALanConnNumberCall, cdx6500WAPktStatEntry=cdx6500WAPktStatEntry, cdx6500GCTLANConnectionTable=cdx6500GCTLANConnectionTable, Counter8=Counter8, cdx6500Controls=cdx6500Controls, cdx6500WAClearReqPktsRcv=cdx6500WAClearReqPktsRcv, cdx6500WADataPassingPriority=cdx6500WADataPassingPriority, cdx6500WACallReqPktsRcv=cdx6500WACallReqPktsRcv, cdx6500WAMaxAutocallAttempts=cdx6500WAMaxAutocallAttempts, cdx6500WAMaxTxQDepthTime=cdx6500WAMaxTxQDepthTime, cdx6500WAMaxTxQueueDepth=cdx6500WAMaxTxQueueDepth, cdx6500WALanConnNumberData=cdx6500WALanConnNumberData, cdx6500WALanConnResetStat=cdx6500WALanConnResetStat, cdx6500WAAvgPktSizeTx=cdx6500WAAvgPktSizeTx, cdx6500WADataStatEntry=cdx6500WADataStatEntry, cdx6500WAResetConfPktsRcv=cdx6500WAResetConfPktsRcv, cdx6500PSTLANConnectionGroup=cdx6500PSTLANConnectionGroup, cdx6500LCTPacketSummaryStats=cdx6500LCTPacketSummaryStats, cdx6500WATxPktDiscardCallEstab=cdx6500WATxPktDiscardCallEstab, cdx6500ContWANAdaptor=cdx6500ContWANAdaptor, cdx6500WAForwardersConnected=cdx6500WAForwardersConnected, cdx6500WAResetReqPktsRcv=cdx6500WAResetReqPktsRcv, cdx6500WACfgIdleTimeout=cdx6500WACfgIdleTimeout, cdx6500WACallAcceptPktsTx=cdx6500WACallAcceptPktsTx, cdx6500WAAutocallTimeout=cdx6500WAAutocallTimeout, cdx6500WACallStatEntry=cdx6500WACallStatEntry, cdx6500WACfgParallelPort=cdx6500WACfgParallelPort, cdx6500WAParallelSvcsEstab=cdx6500WAParallelSvcsEstab, cdx6500WADataPktRcv=cdx6500WADataPktRcv, cdxProductSpecific=cdxProductSpecific, cdx6500WAConnectionState=cdx6500WAConnectionState, cdx6500WAResetConfPktsTx=cdx6500WAResetConfPktsTx, cdx6500WAClearReqPktsTx=cdx6500WAClearReqPktsTx, codex=codex, cdx6500WARouterInterfaceNum=cdx6500WARouterInterfaceNum, cdx6500WALanConnNumberPkt=cdx6500WALanConnNumberPkt, cdx6500WALanConnBoot=cdx6500WALanConnBoot, cdx6500LCTCallSummaryStats=cdx6500LCTCallSummaryStats, cdx6500WAStatEncapsulationType=cdx6500WAStatEncapsulationType, cdx6500WALCONQueueLimit=cdx6500WALCONQueueLimit, cdx6500WABillingRecords=cdx6500WABillingRecords, cdx6500WALastClearCauseCode=cdx6500WALastClearCauseCode, cdx6500WATxPktDiscardFrwdReq=cdx6500WATxPktDiscardFrwdReq, cdx6500WATxPktDiscardCLrReq=cdx6500WATxPktDiscardCLrReq, cdx6500WACfgEncapsulationType=cdx6500WACfgEncapsulationType, cdx6500Statistics=cdx6500Statistics, cdx6500WACfgOnDemand=cdx6500WACfgOnDemand, cdx6500ContWANAdaptorTable=cdx6500ContWANAdaptorTable, cdx6500WACallReqPktsTx=cdx6500WACallReqPktsTx, cdx6500WATxPktDiscardCong=cdx6500WATxPktDiscardCong, cdx6500GCTLANConnectionEntry=cdx6500GCTLANConnectionEntry, cdx6500LCTDataSummaryStats=cdx6500LCTDataSummaryStats, Counter16=Counter16, cdx6500WAControlLanConnNumber=cdx6500WAControlLanConnNumber, cdx6500WACfgParallelThreshold=cdx6500WACfgParallelThreshold, cdx6500WACallAcceptPktsRcv=cdx6500WACallAcceptPktsRcv, cdx6500WACurTxQueueDepth=cdx6500WACurTxQueueDepth, cdx6500=cdx6500, cdx6500WABytesOutstanding=cdx6500WABytesOutstanding, cdx6500WALastClearDiagCode=cdx6500WALastClearDiagCode, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdx6500WAConnectionType=cdx6500WAConnectionType, cdx6500GCTWanAdaptorGroup=cdx6500GCTWanAdaptorGroup, cdx6500WACfgBroadcast=cdx6500WACfgBroadcast, cdx6500WATxPktDiscardTransDelay=cdx6500WATxPktDiscardTransDelay, cdx6500WACfgNexthopIpxNodeNumber=cdx6500WACfgNexthopIpxNodeNumber, cdx6500WAResetReqPktsTx=cdx6500WAResetReqPktsTx, cdx6500WARemoteConnectionId=cdx6500WARemoteConnectionId, cdx6500WARemoteAddress=cdx6500WARemoteAddress, cdx6500Configuration=cdx6500Configuration, cdx6500WADataPktTx=cdx6500WADataPktTx, cdx6500WALanConnEnableDisable=cdx6500WALanConnEnableDisable, DisplayString=DisplayString, cdx6500WACfgNexthopIpAddress=cdx6500WACfgNexthopIpAddress, cdx6500WACfgParallelSvc=cdx6500WACfgParallelSvc, cdx6500WAEntryNumber=cdx6500WAEntryNumber, cdx6500WACfgEncapType=cdx6500WACfgEncapType)
