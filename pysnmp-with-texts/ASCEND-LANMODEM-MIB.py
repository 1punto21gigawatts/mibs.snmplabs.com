#
# PySNMP MIB module ASCEND-LANMODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-LANMODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
slots, lanModemGroup = mibBuilder.importSymbols("ASCEND-MIB", "slots", "lanModemGroup")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Counter64, ModuleIdentity, ObjectIdentity, Bits, TimeTicks, MibIdentifier, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Counter64", "ModuleIdentity", "ObjectIdentity", "Bits", "TimeTicks", "MibIdentifier", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

class ModemSpeedType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))
    namedValues = NamedValues(("baud300", 1), ("baud600", 2), ("baud1200", 3), ("baud2400", 4), ("baud4800", 5), ("baud9600", 6), ("baud12000", 7), ("baud14400", 8), ("baud7200", 9), ("baud16800", 10), ("baud19200", 11), ("baud21600", 12), ("baud24000", 13), ("baud26400", 14), ("baud28800", 15), ("baud31200", 16), ("baud33600", 17), ("baud32000", 18), ("baud34000", 19), ("baud36000", 20), ("baud38000", 21), ("baud40000", 22), ("baud42000", 23), ("baud44000", 24), ("baud46000", 25), ("baud48000", 26), ("baud50000", 27), ("baud52000", 28), ("baud54000", 29), ("baud56000", 30), ("baud28000", 31), ("baud29333", 32), ("baud30667", 33), ("baud33333", 34), ("baud34667", 35), ("baud37333", 36), ("baud38667", 37), ("baud41333", 38), ("baud42667", 39), ("baud45333", 40), ("baud46667", 41), ("baud49333", 42), ("baud50667", 43), ("baud53333", 44), ("baud54667", 45))

slotMdmTable = MibTable((1, 3, 6, 1, 4, 1, 529, 2, 5), )
if mibBuilder.loadTexts: slotMdmTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotMdmTable.setDescription('A list of mdmIndex and the slot/item entry that the mdmIndex is associated with.')
slotMdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 2, 5, 1), ).setIndexNames((0, "ASCEND-LANMODEM-MIB", "slotMdmIndex"))
if mibBuilder.loadTexts: slotMdmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotMdmEntry.setDescription('A slot interface entry containing the slot and item that the mdmIndex is associated with.')
slotMdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMdmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotMdmIndex.setDescription('The mdmIndex, ranging from 1 to the number of modems specified in the RFC1696 variable mdmNumber. The mdmIndex identified by a particular value of this index is the same mdmIndex as identified by the same value of mdmIndex.')
slotMdmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMdmSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotMdmSlotIndex.setDescription('The slot index, ranging from 0 to the number of slots specified in slotNumber.')
slotMdmItemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMdmItemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotMdmItemIndex.setDescription('The item index, ranging from 1 to the number of items (modems) supported on the slot indicated by slotMdmSlotIndex. ')
slotMdmItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("modemStateNonExist", 1), ("modemStateFailPost", 2), ("modemStateIdle", 3), ("modemStateAwaitingRlsd", 4), ("modemStateAwaitingCodes", 5), ("modemStateOnline", 6), ("modemStateInit", 7), ("modemStateInitOpenQueued", 8), ("modemStateInitOpenQueuedVc", 9), ("modemStateInitDialstr2", 10), ("modemStateInitDialstr3", 11), ("modemStateVirtualConnect", 12), ("modemStateDisabled", 13), ("modemStateDisabledChan", 14), ("modemStateDtrDrop", 15), ("modemStateDiag", 16), ("modemStateVcInitStr", 17), ("modemStateInitDialstr4", 18), ("modemStateCsum", 19), ("modemStateRedownloadFailed", 20), ("modemStateCsmxExtraDelay", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMdmItemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotMdmItemStatus.setDescription('The status of the modem.')
slotMdmItemStatusChar = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMdmItemStatusChar.setStatus('mandatory')
if mibBuilder.loadTexts: slotMdmItemStatusChar.setDescription('The status of the modem as displayed in the menu system.')
slotMdmItemConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3), ("disableAndChannel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotMdmItemConfig.setStatus('mandatory')
if mibBuilder.loadTexts: slotMdmItemConfig.setDescription('The modem configuration state. SETs are allowed only if the corresponding modem slot card is enabled.')
availLanModem = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availLanModem.setStatus('mandatory')
if mibBuilder.loadTexts: availLanModem.setDescription('The number of lan modems in the availLanModemTable.')
availLanModemTable = MibTable((1, 3, 6, 1, 4, 1, 529, 15, 2), )
if mibBuilder.loadTexts: availLanModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: availLanModemTable.setDescription('The lan modems in this table are used for answering or placing calls. This table is searched before the suspectLanModemTable.')
availLanModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 15, 2, 1), ).setIndexNames((0, "ASCEND-LANMODEM-MIB", "availLanModemSlotIndex"), (0, "ASCEND-LANMODEM-MIB", "availLanModemPortIndex"))
if mibBuilder.loadTexts: availLanModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: availLanModemEntry.setDescription('The properties associated with the entries in the availLanModemTable.')
availLanModemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availLanModemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: availLanModemSlotIndex.setDescription('The slot number corresponding to the lan modem.')
availLanModemPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availLanModemPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: availLanModemPortIndex.setDescription('The port number corresponding to the lan modem.')
availLanModemUsedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availLanModemUsedCount.setStatus('mandatory')
if mibBuilder.loadTexts: availLanModemUsedCount.setDescription('The number of times the lan modem was utilized.')
availLanModemBadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availLanModemBadCount.setStatus('mandatory')
if mibBuilder.loadTexts: availLanModemBadCount.setDescription('The number of times the lan modem failed.')
availLanModemLast32 = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availLanModemLast32.setStatus('mandatory')
if mibBuilder.loadTexts: availLanModemLast32.setDescription("A 32-bit mask of the last 32 times the lan modem was tried. A '0' in the bit position indicates failure while a '1' indicates success.")
suspectLanModem = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suspectLanModem.setStatus('mandatory')
if mibBuilder.loadTexts: suspectLanModem.setDescription('The number of lan modems in the suspectLanModemTable.')
suspectLanModemTable = MibTable((1, 3, 6, 1, 4, 1, 529, 15, 4), )
if mibBuilder.loadTexts: suspectLanModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: suspectLanModemTable.setDescription('The lan modems in the suspectLanModemTable are tried after the availLanModemTable is exhausted.')
suspectLanModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 15, 4, 1), ).setIndexNames((0, "ASCEND-LANMODEM-MIB", "suspectLanModemSlotIndex"), (0, "ASCEND-LANMODEM-MIB", "suspectLanModemPortIndex"))
if mibBuilder.loadTexts: suspectLanModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: suspectLanModemEntry.setDescription('The properties associated with the entries in the suspectLanModemTable.')
suspectLanModemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suspectLanModemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: suspectLanModemSlotIndex.setDescription('The slot number corresponding to the lan modem.')
suspectLanModemPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suspectLanModemPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: suspectLanModemPortIndex.setDescription('The port number corresponding to the lan modem.')
suspectLanModemUsedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suspectLanModemUsedCount.setStatus('mandatory')
if mibBuilder.loadTexts: suspectLanModemUsedCount.setDescription('The number of times the lan modem was utilized.')
suspectLanModemBadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suspectLanModemBadCount.setStatus('mandatory')
if mibBuilder.loadTexts: suspectLanModemBadCount.setDescription('The number of times the lan modem failed.')
suspectLanModemLast32 = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suspectLanModemLast32.setStatus('mandatory')
if mibBuilder.loadTexts: suspectLanModemLast32.setDescription("A 32-bit mask of the last 32 times the lan modem was tried. A '0' in the bit position indicates failure while a '1' indicates success.")
disabledLanModem = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disabledLanModem.setStatus('mandatory')
if mibBuilder.loadTexts: disabledLanModem.setDescription('The number of lan modems in the disabledLanModemTable.')
disabledLanModemTable = MibTable((1, 3, 6, 1, 4, 1, 529, 15, 6), )
if mibBuilder.loadTexts: disabledLanModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: disabledLanModemTable.setDescription('The table of lan modems disabled using the console.')
disabledLanModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 15, 6, 1), ).setIndexNames((0, "ASCEND-LANMODEM-MIB", "disabledLanModemSlotIndex"), (0, "ASCEND-LANMODEM-MIB", "disabledLanModemPortIndex"))
if mibBuilder.loadTexts: disabledLanModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: disabledLanModemEntry.setDescription('The properties associated with the entries in the disabledLanModemTable.')
disabledLanModemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disabledLanModemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: disabledLanModemSlotIndex.setDescription('The slot number corresponding to the lan modem.')
disabledLanModemPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disabledLanModemPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: disabledLanModemPortIndex.setDescription('The port number corresponding to the lan modem.')
disabledLanModemUsedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disabledLanModemUsedCount.setStatus('mandatory')
if mibBuilder.loadTexts: disabledLanModemUsedCount.setDescription('The number of times the lan modem was utilized.')
disabledLanModemBadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disabledLanModemBadCount.setStatus('mandatory')
if mibBuilder.loadTexts: disabledLanModemBadCount.setDescription('The number of times the lan modem failed.')
disabledLanModemLast32 = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disabledLanModemLast32.setStatus('mandatory')
if mibBuilder.loadTexts: disabledLanModemLast32.setDescription("A 32-bit mask of the last 32 times the lan modem was tried. A '0' in the bit position indicates failure while a '1' indicates success.")
deadLanModem = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deadLanModem.setStatus('mandatory')
if mibBuilder.loadTexts: deadLanModem.setDescription('The number of lan modems in the deadLanModemTable.')
deadLanModemTable = MibTable((1, 3, 6, 1, 4, 1, 529, 15, 8), )
if mibBuilder.loadTexts: deadLanModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: deadLanModemTable.setDescription('The table of lan modems which are considered as dead.')
deadLanModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 15, 8, 1), ).setIndexNames((0, "ASCEND-LANMODEM-MIB", "deadLanModemSlotIndex"), (0, "ASCEND-LANMODEM-MIB", "deadLanModemPortIndex"))
if mibBuilder.loadTexts: deadLanModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deadLanModemEntry.setDescription('The properties associated with the entries in the deadLanModemTable.')
deadLanModemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deadLanModemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deadLanModemSlotIndex.setDescription('The slot number corresponding to the lan modem.')
deadLanModemPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deadLanModemPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deadLanModemPortIndex.setDescription('The port number corresponding to the lan modem.')
deadLanModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("failedPost", 2), ("nonExistent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deadLanModemState.setStatus('mandatory')
if mibBuilder.loadTexts: deadLanModemState.setDescription('The reason for the lan modem to be place in the deadLanModemTable.')
busyLanModem = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyLanModem.setStatus('mandatory')
if mibBuilder.loadTexts: busyLanModem.setDescription('The number of lan modems in the busyLanModemTable.')
busyLanModemTable = MibTable((1, 3, 6, 1, 4, 1, 529, 15, 10), )
if mibBuilder.loadTexts: busyLanModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: busyLanModemTable.setDescription('The lan modems in this table are busy answering or placing calls.')
busyLanModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 15, 10, 1), ).setIndexNames((0, "ASCEND-LANMODEM-MIB", "busyLanModemSlotIndex"), (0, "ASCEND-LANMODEM-MIB", "busyLanModemPortIndex"))
if mibBuilder.loadTexts: busyLanModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: busyLanModemEntry.setDescription('The properties associated with the entries in the busyLanModemTable.')
busyLanModemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyLanModemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: busyLanModemSlotIndex.setDescription('The slot number corresponding to the lan modem.')
busyLanModemPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyLanModemPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: busyLanModemPortIndex.setDescription('The port number corresponding to the lan modem.')
busyLanModemUsedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyLanModemUsedCount.setStatus('mandatory')
if mibBuilder.loadTexts: busyLanModemUsedCount.setDescription('The number of times the lan modem was utilized.')
busyLanModemBadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyLanModemBadCount.setStatus('mandatory')
if mibBuilder.loadTexts: busyLanModemBadCount.setDescription('The number of times the lan modem failed.')
busyLanModemLast32 = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyLanModemLast32.setStatus('mandatory')
if mibBuilder.loadTexts: busyLanModemLast32.setDescription("A 32-bit mask of the last 32 times the lan modem was tried. A '0' in the bit position indicates failure while a '1' indicates success.")
busyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("callUnknown", 1), ("callOriginated", 2), ("callAnswered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyDirection.setStatus('mandatory')
if mibBuilder.loadTexts: busyDirection.setDescription('Distinguishes incoming from outgoing calls.')
suspectTrapState = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suspectTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: suspectTrapState.setDescription('This variable indicates whether the system produces the lanModemMovedToSuspectList trap. It will be automatically enabled after restart.')
csmLanMdmDiagAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csmLanMdmDiagAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagAdminStatus.setDescription("The administrative status of CSM modem diag table. The value 'enabled' enables csmLanModemDiagTable and 'disabled' stops csmLanModemDiagTable from continuing collecting diagnostic information. GenError is returned when trying to enable this object if no JDEC card present. This object can also be set via parameter 'cms-modem-diag' in TNT snmp profile.")
csmLanMdmDiagMaxNumberOfDiagEntries = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagMaxNumberOfDiagEntries.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagMaxNumberOfDiagEntries.setDescription('The maximum number of CSM diag entries that can exist in the csmLanMdmDiagTable. A value of zero (0) indicates there is no CSM modem exist in the system or the diagnostic capability is currently disabled.')
csmLanMdmDiagFirstIndexNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagFirstIndexNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagFirstIndexNumber.setDescription('The first index number currently in csmLanMdmDiagTable. This value will be 0 until the first call occurs.')
csmLanMdmDiagLastIndexNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 15, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagLastIndexNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagLastIndexNumber.setDescription('The last index number currently in csmLanMdmDiagTable.')
csmLanMdmDiagTable = MibTable((1, 3, 6, 1, 4, 1, 529, 15, 16), )
if mibBuilder.loadTexts: csmLanMdmDiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagTable.setDescription('Lan modem diagnostic table for Ascend CSM-1 and CSM-3 modem cards only.')
csmLanMdmDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 15, 16, 1), ).setIndexNames((0, "ASCEND-LANMODEM-MIB", "csmLanMdmDiagIndexNumber"))
if mibBuilder.loadTexts: csmLanMdmDiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagEntry.setDescription('The properties associated with the entries in the csmLanMdmDiagTable.')
csmLanMdmDiagIndexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagIndexNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagIndexNumber.setDescription('A unique number assigned to every diag entry. Numbers are assigned incrementally starting with 1 and will wraparound if the upper limit (2147483648) is reached. Until number wraps around, it represents the total number of diag entries generated.')
csmLanMdmDiagCallReferenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagCallReferenceNum.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagCallReferenceNum.setDescription('A unique number assigned to identify a particular session. It is identical to the eventCallReferenceNum in the eventTable. ')
csmLanMdmDiagSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagSlotIndex.setDescription('The slot number corresponding to this modem call.')
csmLanMdmDiagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagPortIndex.setDescription('The port number corresponding to this modem call.')
csmLanMdmDiagCurrentXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 5), ModemSpeedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagCurrentXmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagCurrentXmitRate.setDescription('The current link transmit rate of a modem connection. Rate is given as bit-per-second.')
csmLanMdmDiagMinXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 6), ModemSpeedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagMinXmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagMinXmitRate.setDescription('The minimum link transmit rate of a modem connection. Rate is given as bit-per-second.')
csmLanMdmDiagMaxXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 7), ModemSpeedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagMaxXmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagMaxXmitRate.setDescription('The maximum link transmit rate of a modem connection. Rate is given as bit-per-second.')
csmLanMdmDiagCurrentRecvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 8), ModemSpeedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagCurrentRecvRate.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagCurrentRecvRate.setDescription('The current link receive rate of a modem connection. Rate is given as bit-per-second.')
csmLanMdmDiagMinRcvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 9), ModemSpeedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagMinRcvRate.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagMinRcvRate.setDescription('The minimum link receive rate of a modem connection. Rate is given as bit-per-second.')
csmLanMdmDiagMaxRcvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 10), ModemSpeedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagMaxRcvRate.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagMaxRcvRate.setDescription('The maximum link receive rate of a modem connection. Rate is given as bit-per-second.')
csmLanMdmDiagProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("lap-m", 2), ("mnp4", 3), ("mnp10", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagProtocol.setDescription('Error correction protocol used by a modem connection.')
csmLanMdmDiagCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mnp5", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagCompression.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagCompression.setDescription('Data compression used by a modem connection.')
csmLanMdmDiagModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("v90", 1), ("v34", 2), ("v17", 3), ("v23", 4), ("v21", 5), ("k56flex", 6), ("v22bis", 7), ("v32", 8), ("bell212", 9), ("bell103", 10), ("v22", 11), ("vFC", 12), ("v33", 13), ("bell208", 14), ("v29", 15), ("v27", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagModulation.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagModulation.setDescription('The modulation scheme of the current modem connection.')
csmLanMdmDiagSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("sym2400", 2), ("sym2800", 3), ("sym3000", 4), ("sym3200", 5), ("sym3429", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagSymbolRate.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagSymbolRate.setDescription('The symbol rate of a connected modem . This field applies only to V.34, K56flex and V.90 connections.')
csmLanMdmDiagCurrentRcvLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagCurrentRcvLevel.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagCurrentRcvLevel.setDescription('The receive level of the current modem connection. The value given is in negative dBs.')
csmLanMdmDiagCurrentXmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagCurrentXmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagCurrentXmitLevel.setDescription('The transmit level of the current modem connection. The value given is in negative dBs.')
csmLanMdmDiagCurrentLineQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagCurrentLineQuality.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagCurrentLineQuality.setDescription('The line quality of a modem connection.')
csmLanMdmDiagCurrentSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagCurrentSNR.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagCurrentSNR.setDescription('The SNR value obtained during a modem connection.')
csmLanMdmDiagSNRMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagSNRMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagSNRMinimum.setDescription('The minimum SNR value obtained during a modem connection.')
csmLanMdmDiagSNRMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagSNRMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagSNRMaximum.setDescription('The maximum SNR value obtained during a modem connection.')
csmLanMdmDiagLocalRetrainRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagLocalRetrainRequested.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagLocalRetrainRequested.setDescription('The number of retrains requested by this modem during this session.')
csmLanMdmDiagRemoteRetrainRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagRemoteRetrainRequested.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagRemoteRetrainRequested.setDescription('The number of retrains requested by remote modem during this session.')
csmLanMdmDiagHighestSPXRcvState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagHighestSPXRcvState.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagHighestSPXRcvState.setDescription('The highest SPX receive state reached for a modem.')
csmLanMdmDiagHighestSPXTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagHighestSPXTxState.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagHighestSPXTxState.setDescription('The highest SPX transmit state reached for a modem.')
csmLanMdmDiagNonlinearEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagNonlinearEncode.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagNonlinearEncode.setDescription('Non-linear encoing is on or off during a modem connection.')
csmLanMdmDiagPrecode = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagPrecode.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagPrecode.setDescription('Modem precoding is on or off during a modem connection.')
csmLanMdmDiagShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagShaping.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagShaping.setDescription('Modem shaping is on or off during a modem connection.')
csmLanMdmDiagConnectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagConnectionTime.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagConnectionTime.setDescription('Total connected time of this modem connection. The value given is in seconds.')
csmLanMdmDiagDisconnectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23))).clone(namedValues=NamedValues(("none", 1), ("localRequest", 2), ("callWaiting", 3), ("carrierLost", 4), ("noErrorCorrection", 6), ("incompatibleProtocol", 7), ("linkDisconnect", 12), ("excessiveRetransmissions", 13), ("noRemoteResponse", 15), ("gstnCleardown", 16), ("inactivityTimer", 17), ("incompatibleSpeeds", 18), ("breakDisconnect", 19), ("keyAbort", 20), ("noConnect", 22), ("retrainFailure", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagDisconnectReason.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagDisconnectReason.setDescription('The object describes the reason for disconnection.')
csmLanMdmDiagRetrainReason = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 15, 16, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 1), ("retrainOrRateRenegSuccess", 2), ("localRetrainDueToATO1", 3), ("localRetrainDueToHiEQM", 4), ("localRateRenegDueToHiEQM", 5), ("localRateRenegDueToLowEQM", 6), ("localRetrainDueTo2RateRenegs", 7), ("carrierLostButLineActive", 8), ("lostConnection", 9), ("fallbackToV34", 10), ("localRateRenegDueToMN10", 11), ("localRetrainDueToMN10", 12), ("remoteRetrain", 13), ("remoteRateReneg", 14), ("v34RetrainAt24K", 15), ("v42RetrainDueToExcessiveReTx", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csmLanMdmDiagRetrainReason.setStatus('mandatory')
if mibBuilder.loadTexts: csmLanMdmDiagRetrainReason.setDescription('This object shows where the last request for a retrain or rate renegotiation originated from.')
mibBuilder.exportSymbols("ASCEND-LANMODEM-MIB", csmLanMdmDiagSlotIndex=csmLanMdmDiagSlotIndex, slotMdmItemStatusChar=slotMdmItemStatusChar, csmLanMdmDiagEntry=csmLanMdmDiagEntry, busyLanModemPortIndex=busyLanModemPortIndex, disabledLanModemPortIndex=disabledLanModemPortIndex, availLanModemTable=availLanModemTable, busyLanModemUsedCount=busyLanModemUsedCount, deadLanModem=deadLanModem, csmLanMdmDiagPortIndex=csmLanMdmDiagPortIndex, suspectLanModemSlotIndex=suspectLanModemSlotIndex, slotMdmIndex=slotMdmIndex, csmLanMdmDiagIndexNumber=csmLanMdmDiagIndexNumber, csmLanMdmDiagSNRMinimum=csmLanMdmDiagSNRMinimum, deadLanModemSlotIndex=deadLanModemSlotIndex, disabledLanModemSlotIndex=disabledLanModemSlotIndex, disabledLanModemEntry=disabledLanModemEntry, csmLanMdmDiagConnectionTime=csmLanMdmDiagConnectionTime, csmLanMdmDiagNonlinearEncode=csmLanMdmDiagNonlinearEncode, slotMdmItemIndex=slotMdmItemIndex, deadLanModemState=deadLanModemState, csmLanMdmDiagPrecode=csmLanMdmDiagPrecode, csmLanMdmDiagMaxRcvRate=csmLanMdmDiagMaxRcvRate, slotMdmEntry=slotMdmEntry, csmLanMdmDiagCurrentXmitRate=csmLanMdmDiagCurrentXmitRate, slotMdmItemStatus=slotMdmItemStatus, suspectLanModemTable=suspectLanModemTable, disabledLanModemLast32=disabledLanModemLast32, availLanModemBadCount=availLanModemBadCount, csmLanMdmDiagHighestSPXTxState=csmLanMdmDiagHighestSPXTxState, disabledLanModemTable=disabledLanModemTable, csmLanMdmDiagMinRcvRate=csmLanMdmDiagMinRcvRate, disabledLanModemBadCount=disabledLanModemBadCount, busyLanModemSlotIndex=busyLanModemSlotIndex, csmLanMdmDiagRetrainReason=csmLanMdmDiagRetrainReason, slotMdmSlotIndex=slotMdmSlotIndex, csmLanMdmDiagFirstIndexNumber=csmLanMdmDiagFirstIndexNumber, busyLanModem=busyLanModem, csmLanMdmDiagLastIndexNumber=csmLanMdmDiagLastIndexNumber, csmLanMdmDiagShaping=csmLanMdmDiagShaping, suspectLanModemLast32=suspectLanModemLast32, csmLanMdmDiagDisconnectReason=csmLanMdmDiagDisconnectReason, csmLanMdmDiagAdminStatus=csmLanMdmDiagAdminStatus, suspectLanModem=suspectLanModem, csmLanMdmDiagSNRMaximum=csmLanMdmDiagSNRMaximum, csmLanMdmDiagHighestSPXRcvState=csmLanMdmDiagHighestSPXRcvState, csmLanMdmDiagSymbolRate=csmLanMdmDiagSymbolRate, csmLanMdmDiagCurrentRecvRate=csmLanMdmDiagCurrentRecvRate, suspectLanModemEntry=suspectLanModemEntry, csmLanMdmDiagCompression=csmLanMdmDiagCompression, DisplayString=DisplayString, availLanModemSlotIndex=availLanModemSlotIndex, suspectLanModemBadCount=suspectLanModemBadCount, availLanModemPortIndex=availLanModemPortIndex, deadLanModemEntry=deadLanModemEntry, csmLanMdmDiagCurrentSNR=csmLanMdmDiagCurrentSNR, availLanModemLast32=availLanModemLast32, suspectLanModemUsedCount=suspectLanModemUsedCount, availLanModem=availLanModem, disabledLanModem=disabledLanModem, slotMdmItemConfig=slotMdmItemConfig, busyLanModemTable=busyLanModemTable, ModemSpeedType=ModemSpeedType, csmLanMdmDiagTable=csmLanMdmDiagTable, csmLanMdmDiagCallReferenceNum=csmLanMdmDiagCallReferenceNum, csmLanMdmDiagMaxNumberOfDiagEntries=csmLanMdmDiagMaxNumberOfDiagEntries, disabledLanModemUsedCount=disabledLanModemUsedCount, csmLanMdmDiagCurrentLineQuality=csmLanMdmDiagCurrentLineQuality, busyDirection=busyDirection, csmLanMdmDiagCurrentRcvLevel=csmLanMdmDiagCurrentRcvLevel, csmLanMdmDiagCurrentXmitLevel=csmLanMdmDiagCurrentXmitLevel, busyLanModemLast32=busyLanModemLast32, suspectLanModemPortIndex=suspectLanModemPortIndex, availLanModemEntry=availLanModemEntry, csmLanMdmDiagProtocol=csmLanMdmDiagProtocol, csmLanMdmDiagLocalRetrainRequested=csmLanMdmDiagLocalRetrainRequested, csmLanMdmDiagMaxXmitRate=csmLanMdmDiagMaxXmitRate, suspectTrapState=suspectTrapState, busyLanModemEntry=busyLanModemEntry, slotMdmTable=slotMdmTable, busyLanModemBadCount=busyLanModemBadCount, csmLanMdmDiagMinXmitRate=csmLanMdmDiagMinXmitRate, csmLanMdmDiagModulation=csmLanMdmDiagModulation, availLanModemUsedCount=availLanModemUsedCount, deadLanModemTable=deadLanModemTable, csmLanMdmDiagRemoteRetrainRequested=csmLanMdmDiagRemoteRetrainRequested, deadLanModemPortIndex=deadLanModemPortIndex)
