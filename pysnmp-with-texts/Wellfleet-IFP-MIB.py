#
# PySNMP MIB module Wellfleet-IFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IFP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Gauge32, TimeTicks, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, NotificationType, MibIdentifier, iso, Unsigned32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "TimeTicks", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "NotificationType", "MibIdentifier", "iso", "Unsigned32", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIfpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIfpGroup")
wfIfpDrvCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1), )
if mibBuilder.loadTexts: wfIfpDrvCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgTable.setDescription('Internet Fowarding Processor(IFP) Configuration Record')
wfIfpDrvCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1), ).setIndexNames((0, "Wellfleet-IFP-MIB", "wfIfpDrvCfgSlot"))
if mibBuilder.loadTexts: wfIfpDrvCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgEntry.setDescription('Information about a particular driver')
wfIfpDrvCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgState.setDescription('Driver state parameter. ')
wfIfpDrvCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpDrvCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgSlot.setDescription('Slot number -- instance id.')
wfIfpDrvCfgHeartbeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 3), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgHeartbeatPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgHeartbeatPeriod.setDescription('The timer period, in seconds, which defines how often heartbeat messages are send to the IFP. A value of zero disables the heartbeat service.')
wfIfpDrvCfgHiPriQueRdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1023))).clone(namedValues=NamedValues(("enablehicap1", 1), ("enablehicap2", 2), ("enablehicap3", 4), ("enablehicap4", 8), ("enablehicap5", 16), ("enablehissp0", 32), ("enablehissp1", 64), ("enablehiatmp120", 128), ("enablehiatmp121", 256), ("enablehimcast", 512), ("enablehiall", 1023))).clone('enablehiall')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgHiPriQueRdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgHiPriQueRdEnable.setDescription('Debug mode parameter enables reading and process of hi priority outbound queues. The queue enable is a bit mask [9:0] and is described as the following Enable CAP1 0x00000001 Enable CAP2 0x00000002 Enable CAP3 0x00000004 Enable CAP4 0x00000008 Enable CAP5 0x00000010 Enable SSP0 0x00000020 Enable SSP1 0x00000040 Enable Atm0 0x00000080 Enable Atm1 0x00000100 Enable Mcast 0x00000200 Multiple queues can be enabled by oring the selected bits together')
wfIfpDrvCfgLoPriQueRdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1023))).clone(namedValues=NamedValues(("enablelocap1", 1), ("enablelocap2", 2), ("enablelocap3", 4), ("enablelocap4", 8), ("enablelocap5", 16), ("enablelossp0", 32), ("enablelossp1", 64), ("enableloatm0", 128), ("enableloatm1", 256), ("enablelomcast", 512), ("enableloall", 1023))).clone('enableloall')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgLoPriQueRdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgLoPriQueRdEnable.setDescription('Debug mode parameter enables reading and process of lo priority outbound queues. The queue enable is a bit mask [9:0] and is described as the following Enable CAP1 0x00000001 Enable CAP2 0x00000002 Enable CAP3 0x00000004 Enable CAP4 0x00000008 Enable CAP5 0x00000010 Enable SSP0 0x00000020 Enable SSP1 0x00000040 Enable Atm0 0x00000080 Enable Atm1 0x00000100 Enable Mcast 0x00000200 Multiple queues can be enabled by oring the selected bits together')
wfIfpDrvCfgPortDrainEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1023))).clone(namedValues=NamedValues(("enabledraincap1", 1), ("enabledraincap2", 2), ("enabledraincap3", 4), ("enabledraincap4", 8), ("enabledraincap5", 16), ("enabledrainssp0", 32), ("enabledrainssp1", 64), ("enabledrainatm0", 128), ("enabledrainatm1", 256), ("enabledrainmcast", 512), ("enabledrainalll", 1023)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgPortDrainEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgPortDrainEnable.setDescription('Debug mode parameter enables the draining of outbound queues for a given port without sending data to the linecard. 1 bit per output port. Enable drain CAP1 0x00000001 Enable drain CAP2 0x00000002 Enable drain CAP3 0x00000004 Enable drain CAP4 0x00000008 Enable drain CAP5 0x00000010 Enable drain SSP0 0x00000020 Enable drain SSP1 0x00000040 Enable drain Atm0 0x00000080 Enable drain Atm1 0x00000100 Multiple queues can be enabled by oring the selected bits together')
wfIfpDrvCfgSspPktTypeI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgSspPktTypeI.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgSspPktTypeI.setDescription(' ')
wfIfpDrvCfgSspPktTypeII = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgSspPktTypeII.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgSspPktTypeII.setDescription(' ')
wfIfpDrvCfgCap0PktTypeI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgCap0PktTypeI.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgCap0PktTypeI.setDescription(' ')
wfIfpDrvCfgCap0PktTypeII = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgCap0PktTypeII.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgCap0PktTypeII.setDescription(' ')
wfIfpDrvCfgCap1PktTypeI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgCap1PktTypeI.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgCap1PktTypeI.setDescription(' ')
wfIfpDrvCfgCap1PktTypeII = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgCap1PktTypeII.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgCap1PktTypeII.setDescription(' ')
wfIfpDrvCfgAtmPktTypeI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgAtmPktTypeI.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgAtmPktTypeI.setDescription(' ')
wfIfpDrvCfgAtmPktTypeII = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(34525)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgAtmPktTypeII.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgAtmPktTypeII.setDescription(' ')
wfIfpDrvCfgMax2kBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(1536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgMax2kBufferCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgMax2kBufferCnt.setDescription('Number of 2Kbyte buffers to carve from Buffer Memory')
wfIfpDrvCfgMax8kBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgMax8kBufferCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgMax8kBufferCnt.setDescription('Number of 8Kbyte buffers to carve from buffer memory')
wfIfpDrvCfgBufferOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgBufferOffset.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgBufferOffset.setDescription('Buffer offset in bytes, where forwarding engine begins to process received frames')
wfIfpDrvCfgCapHiPriQueClip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgCapHiPriQueClip.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgCapHiPriQueClip.setDescription('The queue clip threshold for all high priority outbound queues destined for channelized access slots')
wfIfpDrvCfgCapLoPriQueClip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgCapLoPriQueClip.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgCapLoPriQueClip.setDescription('The queue clip threshold for all low priority outbound queues destined for channelized access slots')
wfIfpDrvCfgAtmHiPriQueClip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgAtmHiPriQueClip.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgAtmHiPriQueClip.setDescription('The queue clip threshold for all high priority outbound queues destined for ATM OC-12 slots')
wfIfpDrvCfgAtmLoPriQueClip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgAtmLoPriQueClip.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgAtmLoPriQueClip.setDescription('The queue clip threshold for all low priority outbound queues destined for ATM OC-12 slots')
wfIfpDrvCfgSspHiPriQueClip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgSspHiPriQueClip.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgSspHiPriQueClip.setDescription('The queue clip threshold for all high priority outbound queues destined for system service processor slots')
wfIfpDrvCfgSspLoPriQueClip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgSspLoPriQueClip.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgSspLoPriQueClip.setDescription('The queue clip threshold for all low priority outbound queues destined for system service processor slots')
wfIfpDrvCfgMcastHiPriClip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(2047)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgMcastHiPriClip.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgMcastHiPriClip.setDescription('The queue clip threshold for all high priority outbound multicast traffic')
wfIfpDrvCfgMcastLoPriClip = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(2047)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgMcastLoPriClip.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgMcastLoPriClip.setDescription('The queue clip threshold for all low priority outbound multicast traffic')
wfIfpDrvCfgRspActiveStreamMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 26), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgRspActiveStreamMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgRspActiveStreamMask.setDescription('Bitmask 1 to 31, each bit representing a RSP instruction stream. If a bit is set the corresponding RSP stream is started')
wfIfpDrvCfgToSspLoPriInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgToSspLoPriInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgToSspLoPriInterval.setDescription('Interval (msec) for Rate control of Lo Priority Packets destined for the SSP. Maximim of wfIfpDrvCfgToSspLoPriPktCnt packets transmitted to SSP during the interval')
wfIfpDrvCfgToSspLoPriPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCfgToSspLoPriPktCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCfgToSspLoPriPktCnt.setDescription('Maximum number of packets sent to the SSP during the wfIfpDrvCfgToSspLoPriInterval Rate control interval')
wfIfpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2), )
if mibBuilder.loadTexts: wfIfpStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsTable.setDescription('Internet Fowarding Processor(IFP) Statistics Record')
wfIfpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1), ).setIndexNames((0, "Wellfleet-IFP-MIB", "wfIfpStatsSlot"))
if mibBuilder.loadTexts: wfIfpStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsEntry.setDescription('Information about a particular driver')
wfIfpStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSlot.setDescription('The slot number of the Internet Fowarding Processor which is the instance id of the statistics record.')
wfIfpStatsCap0HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap0HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap0HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port zero high priority queue')
wfIfpStatsCap0LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap0LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap0LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port zero low priority queue')
wfIfpStatsCap1HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap1HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap1HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port one high priority queue')
wfIfpStatsCap1LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap1LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap1LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port one low priority queue')
wfIfpStatsCap2HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap2HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap2HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port two high priority queue')
wfIfpStatsCap2LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap2LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap2LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port two low priority queue')
wfIfpStatsCap3HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap3HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap3HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port three high priority queue')
wfIfpStatsCap3LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap3LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap3LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port three low priority queue')
wfIfpStatsCap4HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap4HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap4HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port four high priority queue')
wfIfpStatsCap4LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap4LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap4LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the access port four low priority queue')
wfIfpStatsAtm0HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsAtm0HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsAtm0HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of trunk port zero high priority queue')
wfIfpStatsAtm0LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsAtm0LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsAtm0LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the trunk port zero low priority queue')
wfIfpStatsAtm1HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsAtm1HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsAtm1HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of trunk port one high priority queue')
wfIfpStatsAtm1LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsAtm1LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsAtm1LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the trunk port one low priority queue')
wfIfpStatsSsp0HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSsp0HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSsp0HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of SSP port zero high priority queue')
wfIfpStatsSsp0LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSsp0LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSsp0LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of SSP port zero low priority queue')
wfIfpStatsSsp1HiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSsp1HiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSsp1HiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of SSP port one high priority queue')
wfIfpStatsSsp1LoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSsp1LoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSsp1LoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of SSP port one low priority queue')
wfIfpStatsMcastHiPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsMcastHiPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsMcastHiPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the multicast high priority queue')
wfIfpStatsMcastLoPriQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsMcastLoPriQueDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsMcastLoPriQueDepth.setDescription('The instantaneous queue depth, as measured in descriptors, of the multicast low priority queue')
wfIfpStatsCap0HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap0HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap0HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port zero high priority queue.')
wfIfpStatsCap0LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap0LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap0LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port zero low priority queue.')
wfIfpStatsCap1HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap1HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap1HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port one high priority queue.')
wfIfpStatsCap1LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap1LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap1LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port one low priority queue.')
wfIfpStatsCap2HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap2HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap2HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port two high priority queue.')
wfIfpStatsCap2LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap2LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap2LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port two low priority queue.')
wfIfpStatsCap3HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap3HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap3HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port three high priority queue.')
wfIfpStatsCap3LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap3LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap3LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port three low priority queue.')
wfIfpStatsCap4HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap4HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap4HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port four high priority queue.')
wfIfpStatsCap4LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap4LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap4LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the access port four low priority queue.')
wfIfpStatsAtm0HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsAtm0HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsAtm0HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the trunk port zero high priority queue.')
wfIfpStatsAtm0LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsAtm0LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsAtm0LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the trunk port zero low priority queue.')
wfIfpStatsAtm1HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsAtm1HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsAtm1HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the trunk port one high priority queue.')
wfIfpStatsAtm1LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsAtm1LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsAtm1LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the trunk port one low priority queue.')
wfIfpStatsSsp0HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSsp0HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSsp0HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the SSP port zero high priority queue.')
wfIfpStatsSsp0LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSsp0LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSsp0LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the SSP port zero low priority queue.')
wfIfpStatsSsp1HiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSsp1HiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSsp1HiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the SSP port one high priority queue.')
wfIfpStatsSsp1LoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSsp1LoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSsp1LoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the SSP port one low priority queue.')
wfIfpStatsMcastHiPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsMcastHiPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsMcastHiPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the multicast low priority queue.')
wfIfpStatsMcastLoPriQueClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsMcastLoPriQueClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsMcastLoPriQueClips.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the multicast low priority queue.')
wfIfpStatsSspLoPriDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspLoPriDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspLoPriDrops.setDescription('The number of descriptors clipped because the clip threshold was execeeded for the SSP port one low priority queue.')
wfIfpStatsRecvCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsRecvCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsRecvCrcErrors.setDescription('The number of CRC errors detected on incomming packets from all ports CAP0,CAP1,ATMP12 & all SSP paths')
wfIfpStatsBuf2kStackPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsBuf2kStackPtr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsBuf2kStackPtr.setDescription('The 2Kbyte buffer pool stack pointer, indicating how many 2Kbyte buffers are presently available')
wfIfpStatsBuf8kStackPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsBuf8kStackPtr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsBuf8kStackPtr.setDescription('The 8Kbyte buffer pool stack pointer, indicating how many 8Kbyte buffers are presently available')
wfIfpStatsBuf2kStackLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsBuf2kStackLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsBuf2kStackLimit.setDescription('The 2Kbyte buffer pool stack limit, indicating the maximum number of 2Kbyte buffers available for this pool')
wfIfpStatsBuf8kStackLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsBuf8kStackLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsBuf8kStackLimit.setDescription('The 8Kbyte buffer pool stack limit, indicating the maximum number of 8Kbyte buffers available for this pool')
wfIfpStatsRspState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 3, 2, 1))).clone(namedValues=NamedValues(("down", 4), ("nofwd", 3), ("init", 2), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsRspState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsRspState.setDescription(' Reflects the actual state of the RSP forwarding engine 0:dead, 1:Up, 2:init, -1:fwd streams down')
wfIfpStatsRspActiveStreamMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsRspActiveStreamMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsRspActiveStreamMask.setDescription(' Bit mask of active RSP instruction streams. Each bit set to a one indicates the stream is active')
wfIfpStatsBadDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsBadDesc.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsBadDesc.setDescription(' Number of packets read by the RSP with the error bit set which are dropped')
wfIfpStatsDispatchMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsDispatchMiss.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsDispatchMiss.setDescription(' Number of packets received, which miss the fowarding dispatch table lookup and are dropped')
wfIfpStatsSspDeliversHi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspDeliversHi.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspDeliversHi.setDescription(' Number of packets received, which are sent to the SSP for processing - Hi Priority')
wfIfpStatsSspDeliversLo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspDeliversLo.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspDeliversLo.setDescription(' Number of packets received, which are sent to the SSP for processing - Lo Priority')
wfIfpStatsSspIpDeliversHi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspIpDeliversHi.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspIpDeliversHi.setDescription(' Number of IP packets recieved, which are sent to the SSP for further processing - Hi Priority')
wfIfpStatsSspIpDeliversLo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspIpDeliversLo.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspIpDeliversLo.setDescription(' Number of IP packets recieved, which are sent to the SSP for further processing - Lo Priority')
wfIfpStatsIpBlackHoleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsIpBlackHoleDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsIpBlackHoleDrops.setDescription(' Total number of Packets Dropped as a result of the IP DA Lookup determining a next hop host that has yet been resolved. ')
wfIfpStatsRspBypassSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsRspBypassSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsRspBypassSent.setDescription(' Number of outboud packets received which have the Bypass bit set in the descriptor (i.e. host originated traffic)')
wfIfpStatsDpiBoflsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsDpiBoflsSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsDpiBoflsSent.setDescription(' Number of data path interconnect BOFL frames sent to the SSP')
wfIfpStatsSspRspQosTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspRspQosTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspRspQosTx.setDescription(' Number of SSP packets sent to RSP for delivery to the Network via the TX Qos Path')
wfIfpStatsSspRspBcastQosTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspRspBcastQosTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspRspBcastQosTx.setDescription(' Number of SSP packets sent to RSP for Broadcast delivery to the Network via the TX Qos Path')
wfIfpStatsCongCtrlClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCongCtrlClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCongCtrlClips.setDescription(' Total number of Packets Clipped by the Congestion Ctrl clip mechanism on this IFP CXP.')
wfIfpStatsCap0CrcInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap0CrcInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap0CrcInterrupts.setDescription(' Number of CRC interrupt indications on CAP0 DPI port')
wfIfpStatsSspCrcInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspCrcInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspCrcInterrupts.setDescription(' Number of CRC interrupt indications on SSP DPI port')
wfIfpStatsCap1CrcInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsCap1CrcInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsCap1CrcInterrupts.setDescription(' Number of CRC interrupt indications on CAP1 DPI port')
wfIfpStatsTpCrcInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsTpCrcInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsTpCrcInterrupts.setDescription(' Number of CRC interrupt indications on the Trunk DPI port')
wfIfpStatsMaxEofInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsMaxEofInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsMaxEofInterrupts.setDescription(' Total number of interrupt indications for frames received in excess of 7168 bytes')
wfIfpStats2kFlowControlInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStats2kFlowControlInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStats2kFlowControlInd.setDescription(' Total number of flow control indications received for the 2K buffer pool. This is essentially a count of the number of times the 2K buffer pool was depleted.')
wfIfpStats8kFlowControlInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStats8kFlowControlInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStats8kFlowControlInd.setDescription(' Total number of flow control indications received for the 8K buffer pool. This is essentially a count of the number of times the 8K buffer pool was depleted.')
wfIfpStatsPrimInputSlotMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsPrimInputSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsPrimInputSlotMask.setDescription(' Bit mask of primary input slots handled by this IFP driver.')
wfIfpStatsSecInputSlotMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSecInputSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSecInputSlotMask.setDescription(' Bit mask of secondary input slots handled by this IFP driver.')
wfIfpStatsSspLongFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsSspLongFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsSspLongFlowCtrl.setDescription(' Total number of Indications that the SSP Flow Control has been set for an long period of time.')
wfIfpStatsToSspRateCtrlClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpStatsToSspRateCtrlClips.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpStatsToSspRateCtrlClips.setDescription(' Total number of SSP destined Lo Priority Packets Clipped by RSP ToSSP Rate Control.')
wfIfpDrvCongCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 3), )
if mibBuilder.loadTexts: wfIfpDrvCongCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCongCfgTable.setDescription('Internet Forwarding Processor (IFP) Congestion Table.')
wfIfpDrvCongCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 3, 1), ).setIndexNames((0, "Wellfleet-IFP-MIB", "wfIfpDrvCongCfgIndex"))
if mibBuilder.loadTexts: wfIfpDrvCongCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCongCfgEntry.setDescription('An entry in the Congestion Table.')
wfIfpDrvCongCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCongCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCongCfgDelete.setDescription('Create/delete MIB instance parameter.')
wfIfpDrvCongCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIfpDrvCongCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCongCfgIndex.setDescription('Index of entry -- instance id.')
wfIfpDrvCongCfgInternServClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCongCfgInternServClass.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCongCfgInternServClass.setDescription('Internal Service Class parameter.')
wfIfpDrvCongCfgDropPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCongCfgDropPreference.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCongCfgDropPreference.setDescription('Drop Preference parameter.')
wfIfpDrvCongCfgWmDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIfpDrvCongCfgWmDropThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfIfpDrvCongCfgWmDropThreshold.setDescription('Watermark Drop Threshold parameter. Entries will be written to the internal congestion control table for all watermark values between 0 and wfIfpDrvCongCfgWmDropThreshold.')
mibBuilder.exportSymbols("Wellfleet-IFP-MIB", wfIfpStatsRspState=wfIfpStatsRspState, wfIfpDrvCfgCap0PktTypeI=wfIfpDrvCfgCap0PktTypeI, wfIfpDrvCfgState=wfIfpDrvCfgState, wfIfpStatsCap4LoPriQueDepth=wfIfpStatsCap4LoPriQueDepth, wfIfpStatsCap0HiPriQueClips=wfIfpStatsCap0HiPriQueClips, wfIfpDrvCfgSspLoPriQueClip=wfIfpDrvCfgSspLoPriQueClip, wfIfpStatsCap3HiPriQueClips=wfIfpStatsCap3HiPriQueClips, wfIfpStatsCap1CrcInterrupts=wfIfpStatsCap1CrcInterrupts, wfIfpDrvCongCfgDelete=wfIfpDrvCongCfgDelete, wfIfpDrvCongCfgInternServClass=wfIfpDrvCongCfgInternServClass, wfIfpStatsCap4HiPriQueClips=wfIfpStatsCap4HiPriQueClips, wfIfpStats2kFlowControlInd=wfIfpStats2kFlowControlInd, wfIfpStatsSsp0HiPriQueDepth=wfIfpStatsSsp0HiPriQueDepth, wfIfpStatsSsp1LoPriQueDepth=wfIfpStatsSsp1LoPriQueDepth, wfIfpStatsSspIpDeliversHi=wfIfpStatsSspIpDeliversHi, wfIfpStatsSspRspBcastQosTx=wfIfpStatsSspRspBcastQosTx, wfIfpDrvCfgCapLoPriQueClip=wfIfpDrvCfgCapLoPriQueClip, wfIfpStatsCap3LoPriQueClips=wfIfpStatsCap3LoPriQueClips, wfIfpStatsCap2LoPriQueClips=wfIfpStatsCap2LoPriQueClips, wfIfpDrvCfgSspHiPriQueClip=wfIfpDrvCfgSspHiPriQueClip, wfIfpStatsAtm0LoPriQueDepth=wfIfpStatsAtm0LoPriQueDepth, wfIfpDrvCongCfgTable=wfIfpDrvCongCfgTable, wfIfpStatsCap0HiPriQueDepth=wfIfpStatsCap0HiPriQueDepth, wfIfpStatsRecvCrcErrors=wfIfpStatsRecvCrcErrors, wfIfpStatsSsp0LoPriQueClips=wfIfpStatsSsp0LoPriQueClips, wfIfpStatsMcastLoPriQueClips=wfIfpStatsMcastLoPriQueClips, wfIfpDrvCfgRspActiveStreamMask=wfIfpDrvCfgRspActiveStreamMask, wfIfpStatsCap2HiPriQueDepth=wfIfpStatsCap2HiPriQueDepth, wfIfpStatsSecInputSlotMask=wfIfpStatsSecInputSlotMask, wfIfpDrvCongCfgEntry=wfIfpDrvCongCfgEntry, wfIfpStatsSsp0LoPriQueDepth=wfIfpStatsSsp0LoPriQueDepth, wfIfpStatsSspLoPriDrops=wfIfpStatsSspLoPriDrops, wfIfpStatsSspIpDeliversLo=wfIfpStatsSspIpDeliversLo, wfIfpDrvCfgCap0PktTypeII=wfIfpDrvCfgCap0PktTypeII, wfIfpStatsBuf8kStackLimit=wfIfpStatsBuf8kStackLimit, wfIfpDrvCfgMcastLoPriClip=wfIfpDrvCfgMcastLoPriClip, wfIfpStatsAtm0HiPriQueDepth=wfIfpStatsAtm0HiPriQueDepth, wfIfpStatsToSspRateCtrlClips=wfIfpStatsToSspRateCtrlClips, wfIfpStatsCap0LoPriQueClips=wfIfpStatsCap0LoPriQueClips, wfIfpDrvCfgAtmLoPriQueClip=wfIfpDrvCfgAtmLoPriQueClip, wfIfpStatsCap1HiPriQueClips=wfIfpStatsCap1HiPriQueClips, wfIfpDrvCfgToSspLoPriPktCnt=wfIfpDrvCfgToSspLoPriPktCnt, wfIfpStatsRspBypassSent=wfIfpStatsRspBypassSent, wfIfpDrvCfgHeartbeatPeriod=wfIfpDrvCfgHeartbeatPeriod, wfIfpStatsCap1LoPriQueClips=wfIfpStatsCap1LoPriQueClips, wfIfpStatsCap2HiPriQueClips=wfIfpStatsCap2HiPriQueClips, wfIfpStatsMaxEofInterrupts=wfIfpStatsMaxEofInterrupts, wfIfpStatsBuf8kStackPtr=wfIfpStatsBuf8kStackPtr, wfIfpDrvCfgSlot=wfIfpDrvCfgSlot, wfIfpStatsRspActiveStreamMask=wfIfpStatsRspActiveStreamMask, wfIfpStatsBuf2kStackPtr=wfIfpStatsBuf2kStackPtr, wfIfpStatsPrimInputSlotMask=wfIfpStatsPrimInputSlotMask, wfIfpStatsCap0LoPriQueDepth=wfIfpStatsCap0LoPriQueDepth, wfIfpStatsMcastLoPriQueDepth=wfIfpStatsMcastLoPriQueDepth, wfIfpStatsCap3HiPriQueDepth=wfIfpStatsCap3HiPriQueDepth, wfIfpStatsCap2LoPriQueDepth=wfIfpStatsCap2LoPriQueDepth, wfIfpStatsTable=wfIfpStatsTable, wfIfpDrvCfgBufferOffset=wfIfpDrvCfgBufferOffset, wfIfpStatsEntry=wfIfpStatsEntry, wfIfpStatsSspRspQosTx=wfIfpStatsSspRspQosTx, wfIfpDrvCfgToSspLoPriInterval=wfIfpDrvCfgToSspLoPriInterval, wfIfpStatsBadDesc=wfIfpStatsBadDesc, wfIfpStatsCongCtrlClips=wfIfpStatsCongCtrlClips, wfIfpDrvCfgHiPriQueRdEnable=wfIfpDrvCfgHiPriQueRdEnable, wfIfpStatsSlot=wfIfpStatsSlot, wfIfpStatsSspDeliversLo=wfIfpStatsSspDeliversLo, wfIfpStatsAtm1LoPriQueDepth=wfIfpStatsAtm1LoPriQueDepth, wfIfpDrvCfgEntry=wfIfpDrvCfgEntry, wfIfpDrvCfgSspPktTypeII=wfIfpDrvCfgSspPktTypeII, wfIfpDrvCfgAtmHiPriQueClip=wfIfpDrvCfgAtmHiPriQueClip, wfIfpDrvCfgMax2kBufferCnt=wfIfpDrvCfgMax2kBufferCnt, wfIfpStatsAtm0HiPriQueClips=wfIfpStatsAtm0HiPriQueClips, wfIfpDrvCfgAtmPktTypeI=wfIfpDrvCfgAtmPktTypeI, wfIfpDrvCfgMax8kBufferCnt=wfIfpDrvCfgMax8kBufferCnt, wfIfpDrvCfgCap1PktTypeI=wfIfpDrvCfgCap1PktTypeI, wfIfpStatsCap4HiPriQueDepth=wfIfpStatsCap4HiPriQueDepth, wfIfpStatsSspLongFlowCtrl=wfIfpStatsSspLongFlowCtrl, wfIfpStatsSspDeliversHi=wfIfpStatsSspDeliversHi, wfIfpStatsAtm1HiPriQueClips=wfIfpStatsAtm1HiPriQueClips, wfIfpDrvCfgCap1PktTypeII=wfIfpDrvCfgCap1PktTypeII, wfIfpStatsCap1LoPriQueDepth=wfIfpStatsCap1LoPriQueDepth, wfIfpDrvCfgSspPktTypeI=wfIfpDrvCfgSspPktTypeI, wfIfpStatsIpBlackHoleDrops=wfIfpStatsIpBlackHoleDrops, wfIfpStatsCap0CrcInterrupts=wfIfpStatsCap0CrcInterrupts, wfIfpStatsSspCrcInterrupts=wfIfpStatsSspCrcInterrupts, wfIfpDrvCfgPortDrainEnable=wfIfpDrvCfgPortDrainEnable, wfIfpDrvCfgAtmPktTypeII=wfIfpDrvCfgAtmPktTypeII, wfIfpStatsAtm0LoPriQueClips=wfIfpStatsAtm0LoPriQueClips, wfIfpStatsSsp1HiPriQueDepth=wfIfpStatsSsp1HiPriQueDepth, wfIfpStatsDispatchMiss=wfIfpStatsDispatchMiss, wfIfpStatsBuf2kStackLimit=wfIfpStatsBuf2kStackLimit, wfIfpDrvCongCfgDropPreference=wfIfpDrvCongCfgDropPreference, wfIfpDrvCongCfgIndex=wfIfpDrvCongCfgIndex, wfIfpDrvCfgTable=wfIfpDrvCfgTable, wfIfpStatsCap4LoPriQueClips=wfIfpStatsCap4LoPriQueClips, wfIfpDrvCfgLoPriQueRdEnable=wfIfpDrvCfgLoPriQueRdEnable, wfIfpStatsMcastHiPriQueClips=wfIfpStatsMcastHiPriQueClips, wfIfpStatsCap3LoPriQueDepth=wfIfpStatsCap3LoPriQueDepth, wfIfpStatsCap1HiPriQueDepth=wfIfpStatsCap1HiPriQueDepth, wfIfpDrvCfgCapHiPriQueClip=wfIfpDrvCfgCapHiPriQueClip, wfIfpStats8kFlowControlInd=wfIfpStats8kFlowControlInd, wfIfpStatsSsp1LoPriQueClips=wfIfpStatsSsp1LoPriQueClips, wfIfpStatsMcastHiPriQueDepth=wfIfpStatsMcastHiPriQueDepth, wfIfpDrvCfgMcastHiPriClip=wfIfpDrvCfgMcastHiPriClip, wfIfpStatsSsp1HiPriQueClips=wfIfpStatsSsp1HiPriQueClips, wfIfpStatsDpiBoflsSent=wfIfpStatsDpiBoflsSent, wfIfpStatsAtm1HiPriQueDepth=wfIfpStatsAtm1HiPriQueDepth, wfIfpDrvCongCfgWmDropThreshold=wfIfpDrvCongCfgWmDropThreshold, wfIfpStatsTpCrcInterrupts=wfIfpStatsTpCrcInterrupts, wfIfpStatsSsp0HiPriQueClips=wfIfpStatsSsp0HiPriQueClips, wfIfpStatsAtm1LoPriQueClips=wfIfpStatsAtm1LoPriQueClips)
