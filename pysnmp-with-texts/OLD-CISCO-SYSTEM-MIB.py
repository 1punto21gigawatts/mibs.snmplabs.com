#
# PySNMP MIB module OLD-CISCO-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:24:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
local, = mibBuilder.importSymbols("CISCO-SMI", "local")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Gauge32, ModuleIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, Integer32, Bits, NotificationType, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Gauge32", "ModuleIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "Integer32", "Bits", "NotificationType", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 1))
romId = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romId.setStatus('mandatory')
if mibBuilder.loadTexts: romId.setDescription('This variable contains a printable octet string which contains the System Bootstrap description and version identification.')
whyReload = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whyReload.setStatus('mandatory')
if mibBuilder.loadTexts: whyReload.setDescription('This variable contains a printable octet string which contains the reason why the system was last restarted.')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
if mibBuilder.loadTexts: hostName.setDescription('This variable represents the name of the host in printable ascii characters.')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
if mibBuilder.loadTexts: domainName.setDescription('This variable is the domain portion of the domain name of the host.')
authAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authAddr.setStatus('mandatory')
if mibBuilder.loadTexts: authAddr.setDescription('This variable contains the last SNMP authorization failure IP address.')
bootHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootHost.setStatus('mandatory')
if mibBuilder.loadTexts: bootHost.setDescription('Contains the IP address of the host that supplied the currently running software.')
netConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 48), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigAddr.setDescription('Holds the address of the host that supplied the network-confg file.')
netConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigName.setDescription('Holds the name of the network configuration file.')
netConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 50), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: netConfigSet.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigSet.setDescription('Cause the loading of a new network-confg file using TFTP.')
hostConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 51), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigAddr.setStatus('obsolete')
if mibBuilder.loadTexts: hostConfigAddr.setDescription('Contains the address of the host that provided the host-config file.')
hostConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigName.setStatus('obsolete')
if mibBuilder.loadTexts: hostConfigName.setDescription('Contains the name of the last configured host-confg file.')
hostConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 53), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: hostConfigSet.setStatus('obsolete')
if mibBuilder.loadTexts: hostConfigSet.setDescription('Cause the loading of a new host-confg file using TFTP.')
writeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 54), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeMem.setStatus('mandatory')
if mibBuilder.loadTexts: writeMem.setDescription('Write configuration into non-volatile memory / erase config memory if 0.')
writeNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 55), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeNet.setStatus('mandatory')
if mibBuilder.loadTexts: writeNet.setDescription('Write configuration to host using TFTP.')
ciscoContactInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoContactInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ciscoContactInfo.setDescription("cisco's name and address")
netConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigProto.setDescription('Holds the protocol that supplied the network-confg file.')
hostConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: hostConfigProto.setDescription('Holds the protocol that supplied the host- confg file.')
sysConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 72), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigAddr.setDescription('Holds the address of the host that supplied the system boot image.')
sysConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigName.setDescription('Holds the name of the system boot image.')
sysConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("rom", 2), ("flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigProto.setDescription('Holds the protocol or media that supplied the system boot image.')
sysClearARP = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 75), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysClearARP.setStatus('mandatory')
if mibBuilder.loadTexts: sysClearARP.setDescription('Perform a clearing of the entire ARP cache and invalidation of route caches.')
sysClearInt = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 76), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysClearInt.setStatus('mandatory')
if mibBuilder.loadTexts: sysClearInt.setDescription('Clear interface given IfIndex as value.')
mibBuilder.exportSymbols("OLD-CISCO-SYSTEM-MIB", lsystem=lsystem, sysConfigName=sysConfigName, sysClearARP=sysClearARP, romId=romId, netConfigProto=netConfigProto, writeMem=writeMem, hostConfigName=hostConfigName, sysConfigAddr=sysConfigAddr, hostName=hostName, hostConfigAddr=hostConfigAddr, domainName=domainName, writeNet=writeNet, ciscoContactInfo=ciscoContactInfo, authAddr=authAddr, netConfigAddr=netConfigAddr, whyReload=whyReload, sysConfigProto=sysConfigProto, netConfigSet=netConfigSet, hostConfigSet=hostConfigSet, sysClearInt=sysClearInt, bootHost=bootHost, netConfigName=netConfigName, hostConfigProto=hostConfigProto)
