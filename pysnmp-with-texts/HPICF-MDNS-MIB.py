#
# PySNMP MIB module HPICF-MDNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPICF-MDNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
VidList, = mibBuilder.importSymbols("HP-ICF-FTRCO", "VidList")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Counter32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Bits, Integer32, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Bits", "Integer32", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hpicfMdns = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124))
hpicfMdns.setRevisions(('2015-05-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfMdns.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: hpicfMdns.setLastUpdated('201505190000Z')
if mibBuilder.loadTexts: hpicfMdns.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfMdns.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfMdns.setDescription('This MIB module describes objects for managing the mDNS gateway feature in the HP Integrated Communication Facility product line.')
hpicfMdnsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 0))
hpicfMdnsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1))
hpicfMdnsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 2))
hpicfMdnsAdminState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMdnsAdminState.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsAdminState.setDescription('Indicates whether the mDNS admin state is enabled or disabled.')
hpicfMdnsDefaultFilterInAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMdnsDefaultFilterInAction.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsDefaultFilterInAction.setDescription('Action type defined for default filters.')
hpicfMdnsDefaultFilterOutAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMdnsDefaultFilterOutAction.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsDefaultFilterOutAction.setDescription('Action type defined for default filters.')
hpicfMdnsGatewayVIDList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 4), VidList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMdnsGatewayVIDList.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsGatewayVIDList.setDescription('The list of mDNS gateway-enabled VLANs.')
hpicfMdnsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 5), )
if mibBuilder.loadTexts: hpicfMdnsProfileTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileTable.setDescription('This table lists the mDNS profiles that are configured on the device.')
hpicfMdnsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 5, 1), ).setIndexNames((0, "HPICF-MDNS-MIB", "hpicfMdnsProfileName"))
if mibBuilder.loadTexts: hpicfMdnsProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileEntry.setDescription('An entry in the hpicfMdnsProfileTable.')
hpicfMdnsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hpicfMdnsProfileName.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileName.setDescription('Specifies the name of the mDNS profile.')
hpicfMdnsProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfMdnsProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRowStatus.setDescription('The status of this table entry. The supported values are createAndGo, destroy, and active.')
hpicfMdnsProfileVIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 5, 1, 3), VidList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfMdnsProfileVIDList.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileVIDList.setDescription('The profile is associated to list of VLANs.')
hpicfMdnsProfileRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 6), )
if mibBuilder.loadTexts: hpicfMdnsProfileRuleTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRuleTable.setDescription('This table contains lists rules per mDNS profile.')
hpicfMdnsProfileRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 6, 1), ).setIndexNames((0, "HPICF-MDNS-MIB", "hpicfMdnsProfileName"), (0, "HPICF-MDNS-MIB", "hpicfMdnsProfileRuleIndex"))
if mibBuilder.loadTexts: hpicfMdnsProfileRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRuleEntry.setDescription('An entry in the hpicfMdnsProfileRuleTable.')
hpicfMdnsProfileRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: hpicfMdnsProfileRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRuleIndex.setDescription('Uniquely identifies the mdns profile rule within the mdns profile.')
hpicfMdnsProfileRuleService = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfMdnsProfileRuleService.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRuleService.setDescription('Specifies the service name of the mdns profile rule.')
hpicfMdnsProfileRuleInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfMdnsProfileRuleInstance.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRuleInstance.setDescription('Specifies the instance name of the mdns profile rule.')
hpicfMdnsProfileRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfMdnsProfileRuleAction.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRuleAction.setDescription('Specifies the action associated with the mDNS profile rule.')
hpicfMdnsProfileRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfMdnsProfileRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRuleRowStatus.setDescription('The status of this table entry. The supported values are createAndGo, destroy, and active.')
hpicfMdnsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 2, 1))
hpicfMdnsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 2, 2))
hpicfMdnsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 2, 1, 1)).setObjects(("HPICF-MDNS-MIB", "hpicfMdnsScalarGroup"), ("HPICF-MDNS-MIB", "hpicfMdnsProfileGroup"), ("HPICF-MDNS-MIB", "hpicfMdnsProfileRuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMdnsCompliance = hpicfMdnsCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsCompliance.setDescription('The compliance statement for HP switches implementing the HPICF-MDNS MIB.')
hpicfMdnsScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 2, 2, 1)).setObjects(("HPICF-MDNS-MIB", "hpicfMdnsAdminState"), ("HPICF-MDNS-MIB", "hpicfMdnsDefaultFilterInAction"), ("HPICF-MDNS-MIB", "hpicfMdnsDefaultFilterOutAction"), ("HPICF-MDNS-MIB", "hpicfMdnsGatewayVIDList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMdnsScalarGroup = hpicfMdnsScalarGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsScalarGroup.setDescription('A collection of objects that provides the mDNS scalar configuration.')
hpicfMdnsProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 2, 2, 2)).setObjects(("HPICF-MDNS-MIB", "hpicfMdnsProfileRowStatus"), ("HPICF-MDNS-MIB", "hpicfMdnsProfileVIDList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMdnsProfileGroup = hpicfMdnsProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileGroup.setDescription('A collection of objects that provides the mDNS profile configuration.')
hpicfMdnsProfileRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 124, 2, 2, 3)).setObjects(("HPICF-MDNS-MIB", "hpicfMdnsProfileRuleService"), ("HPICF-MDNS-MIB", "hpicfMdnsProfileRuleInstance"), ("HPICF-MDNS-MIB", "hpicfMdnsProfileRuleAction"), ("HPICF-MDNS-MIB", "hpicfMdnsProfileRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMdnsProfileRuleGroup = hpicfMdnsProfileRuleGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMdnsProfileRuleGroup.setDescription('A collection of objects that provides the mDNS profile rule configuration.')
mibBuilder.exportSymbols("HPICF-MDNS-MIB", hpicfMdnsProfileRuleIndex=hpicfMdnsProfileRuleIndex, hpicfMdnsGroups=hpicfMdnsGroups, hpicfMdns=hpicfMdns, hpicfMdnsProfileTable=hpicfMdnsProfileTable, hpicfMdnsProfileName=hpicfMdnsProfileName, hpicfMdnsObjects=hpicfMdnsObjects, hpicfMdnsProfileRuleInstance=hpicfMdnsProfileRuleInstance, hpicfMdnsProfileVIDList=hpicfMdnsProfileVIDList, hpicfMdnsScalarGroup=hpicfMdnsScalarGroup, hpicfMdnsProfileRuleTable=hpicfMdnsProfileRuleTable, hpicfMdnsDefaultFilterOutAction=hpicfMdnsDefaultFilterOutAction, hpicfMdnsCompliances=hpicfMdnsCompliances, hpicfMdnsNotifications=hpicfMdnsNotifications, hpicfMdnsProfileGroup=hpicfMdnsProfileGroup, PYSNMP_MODULE_ID=hpicfMdns, hpicfMdnsGatewayVIDList=hpicfMdnsGatewayVIDList, hpicfMdnsProfileRuleGroup=hpicfMdnsProfileRuleGroup, hpicfMdnsProfileRuleService=hpicfMdnsProfileRuleService, hpicfMdnsCompliance=hpicfMdnsCompliance, hpicfMdnsProfileEntry=hpicfMdnsProfileEntry, hpicfMdnsProfileRowStatus=hpicfMdnsProfileRowStatus, hpicfMdnsProfileRuleEntry=hpicfMdnsProfileRuleEntry, hpicfMdnsDefaultFilterInAction=hpicfMdnsDefaultFilterInAction, hpicfMdnsAdminState=hpicfMdnsAdminState, hpicfMdnsConformance=hpicfMdnsConformance, hpicfMdnsProfileRuleRowStatus=hpicfMdnsProfileRuleRowStatus, hpicfMdnsProfileRuleAction=hpicfMdnsProfileRuleAction)
