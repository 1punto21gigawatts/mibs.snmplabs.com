#
# PySNMP MIB module WATCHGUARD-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WATCHGUARD-POLICY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Counter32, MibIdentifier, IpAddress, NotificationType, Counter64, TimeTicks, Bits, Unsigned32, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Counter32", "MibIdentifier", "IpAddress", "NotificationType", "Counter64", "TimeTicks", "Bits", "Unsigned32", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
watchguard, = mibBuilder.importSymbols("WATCHGUARD-MIB", "watchguard")
wgPolicyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3097, 4))
wgPolicyMIB.setRevisions(('2007-01-25 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wgPolicyMIB.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: wgPolicyMIB.setLastUpdated('200701251200Z')
if mibBuilder.loadTexts: wgPolicyMIB.setOrganization('WatchGuard Technologies, Inc.')
if mibBuilder.loadTexts: wgPolicyMIB.setContactInfo(' Ella Yu WatchGuard Technologies, Inc. 1841 Zanker Road San Jose, CA 95112 USA 408-519-4888 ella.yu@watchguard.com ')
if mibBuilder.loadTexts: wgPolicyMIB.setDescription('The MIB module describes various policy objects of WatchGuard system.')
wgPolicyToTunnel = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 4, 1))
if mibBuilder.loadTexts: wgPolicyToTunnel.setStatus('current')
if mibBuilder.loadTexts: wgPolicyToTunnel.setDescription('This is the base object identifier for all tunnels information of the policies.')
wgPolicyStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 4, 2))
if mibBuilder.loadTexts: wgPolicyStatistics.setStatus('current')
if mibBuilder.loadTexts: wgPolicyStatistics.setDescription('This is the base object identifier for all policy related statistical counters.')
wgPolicyToTunnelNum = MibScalar((1, 3, 6, 1, 4, 1, 3097, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyToTunnelNum.setStatus('current')
if mibBuilder.loadTexts: wgPolicyToTunnelNum.setDescription('The total number of tunnels in the policytotunnel table. ')
wgPolicyToTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 4, 1, 2), )
if mibBuilder.loadTexts: wgPolicyToTunnelTable.setStatus('current')
if mibBuilder.loadTexts: wgPolicyToTunnelTable.setDescription('This is the policytotunnel table of all the policies.')
wgPolicyToTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 4, 1, 2, 1), ).setIndexNames((0, "WATCHGUARD-POLICY-MIB", "wgPolicyToTunnelPolicyID"), (0, "WATCHGUARD-POLICY-MIB", "wgPolicyToTunnelTunnelID"))
if mibBuilder.loadTexts: wgPolicyToTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: wgPolicyToTunnelEntry.setDescription('An entry (conceptual row) containing the tunnels information.')
wgPolicyToTunnelPolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyToTunnelPolicyID.setStatus('current')
if mibBuilder.loadTexts: wgPolicyToTunnelPolicyID.setDescription('The policy identifier of this entity.')
wgPolicyToTunnelTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyToTunnelTunnelID.setStatus('current')
if mibBuilder.loadTexts: wgPolicyToTunnelTunnelID.setDescription('The tunnel identifier of this entity.')
wgPolicyTableNum = MibScalar((1, 3, 6, 1, 4, 1, 3097, 4, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyTableNum.setStatus('current')
if mibBuilder.loadTexts: wgPolicyTableNum.setDescription('The total number of policies in the policy table. ')
wgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2), )
if mibBuilder.loadTexts: wgPolicyTable.setStatus('current')
if mibBuilder.loadTexts: wgPolicyTable.setDescription('This is the policytotunnel table of the policies.')
wgPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1), ).setIndexNames((0, "WATCHGUARD-POLICY-MIB", "wgPolicyID"))
if mibBuilder.loadTexts: wgPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: wgPolicyEntry.setDescription('An entry (conceptual row) containing the policy information.')
wgPolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyID.setStatus('current')
if mibBuilder.loadTexts: wgPolicyID.setDescription('The policy identifier of this policy.')
wgPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyName.setStatus('current')
if mibBuilder.loadTexts: wgPolicyName.setDescription('The policy name of this policy')
wgPolicyBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyBytes.setStatus('current')
if mibBuilder.loadTexts: wgPolicyBytes.setDescription('Total traffic in bytes since setting up this policy.')
wgPolicyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyPackets.setStatus('current')
if mibBuilder.loadTexts: wgPolicyPackets.setDescription('Total traffic in packets since setting up this policy.')
wgPolicyIpsecDecryptErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyIpsecDecryptErr.setStatus('current')
if mibBuilder.loadTexts: wgPolicyIpsecDecryptErr.setDescription('Total number of packets discarded due to decryption errors since setting up this policy.')
wgPolicyIpsecAuthErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyIpsecAuthErr.setStatus('current')
if mibBuilder.loadTexts: wgPolicyIpsecAuthErr.setDescription('Total number of packets discarded due to authentication errors since setting up this policy.')
wgPolicyIpsecReplayErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyIpsecReplayErr.setStatus('current')
if mibBuilder.loadTexts: wgPolicyIpsecReplayErr.setDescription('Total number of packets discarded due to replay errors since setting up this policy.')
wgPolicyIpsecPadErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyIpsecPadErr.setStatus('current')
if mibBuilder.loadTexts: wgPolicyIpsecPadErr.setDescription('Total number of packets discarded due to pad value errors since setting up this policy.')
wgPolicyIpsecPolicyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyIpsecPolicyErr.setStatus('current')
if mibBuilder.loadTexts: wgPolicyIpsecPolicyErr.setDescription('Total number of packets discarded due to policy errors since setting up this policy.')
wgPolicyFwDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyFwDisc.setStatus('current')
if mibBuilder.loadTexts: wgPolicyFwDisc.setDescription('Total number of packets discarded by firewall policies since setting up this policy.')
wgPolicyOtherDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyOtherDisc.setStatus('current')
if mibBuilder.loadTexts: wgPolicyOtherDisc.setDescription('Total number of packets discarded due to errors other than firewall errors, ipsec errors since setting up this policy.')
wgPolicyActiveStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyActiveStreams.setStatus('current')
if mibBuilder.loadTexts: wgPolicyActiveStreams.setDescription('Total number of the active connections since setting up this policy.')
wgPolicyIpsecDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyIpsecDisc.setStatus('current')
if mibBuilder.loadTexts: wgPolicyIpsecDisc.setDescription('Total number of packets discarded by IPSEC errors (decryption error, authentication error, replay error) since setting up this policy.')
wgPolicyDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyDisc.setStatus('current')
if mibBuilder.loadTexts: wgPolicyDisc.setDescription('Total number of packets discarded since setting up this policy.')
wgPolicyNumTunl = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyNumTunl.setStatus('current')
if mibBuilder.loadTexts: wgPolicyNumTunl.setDescription('Total number of tunnels belong to this policy')
wgPolicySingleCntrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicySingleCntrNum.setStatus('current')
if mibBuilder.loadTexts: wgPolicySingleCntrNum.setDescription('Total number of single counters handled by this policy.')
wgPolicyLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyLogging.setStatus('current')
if mibBuilder.loadTexts: wgPolicyLogging.setDescription('Indicates whether if the logging of this policy has been enabled. ')
wgPolicyCurrActiveConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 4, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgPolicyCurrActiveConns.setStatus('current')
if mibBuilder.loadTexts: wgPolicyCurrActiveConns.setDescription('Total number of currently active connections for this policy.')
mibBuilder.exportSymbols("WATCHGUARD-POLICY-MIB", wgPolicyCurrActiveConns=wgPolicyCurrActiveConns, wgPolicyIpsecPadErr=wgPolicyIpsecPadErr, wgPolicyIpsecAuthErr=wgPolicyIpsecAuthErr, wgPolicyToTunnelTunnelID=wgPolicyToTunnelTunnelID, wgPolicyID=wgPolicyID, wgPolicyLogging=wgPolicyLogging, wgPolicyToTunnelNum=wgPolicyToTunnelNum, wgPolicyIpsecReplayErr=wgPolicyIpsecReplayErr, wgPolicyIpsecPolicyErr=wgPolicyIpsecPolicyErr, wgPolicyActiveStreams=wgPolicyActiveStreams, wgPolicyNumTunl=wgPolicyNumTunl, wgPolicyIpsecDisc=wgPolicyIpsecDisc, wgPolicyDisc=wgPolicyDisc, wgPolicyToTunnelEntry=wgPolicyToTunnelEntry, wgPolicyBytes=wgPolicyBytes, wgPolicyToTunnelTable=wgPolicyToTunnelTable, wgPolicyOtherDisc=wgPolicyOtherDisc, wgPolicyPackets=wgPolicyPackets, wgPolicyTable=wgPolicyTable, wgPolicyToTunnelPolicyID=wgPolicyToTunnelPolicyID, wgPolicyMIB=wgPolicyMIB, wgPolicyTableNum=wgPolicyTableNum, PYSNMP_MODULE_ID=wgPolicyMIB, wgPolicyFwDisc=wgPolicyFwDisc, wgPolicyName=wgPolicyName, wgPolicyToTunnel=wgPolicyToTunnel, wgPolicyEntry=wgPolicyEntry, wgPolicyIpsecDecryptErr=wgPolicyIpsecDecryptErr, wgPolicySingleCntrNum=wgPolicySingleCntrNum, wgPolicyStatistics=wgPolicyStatistics)
