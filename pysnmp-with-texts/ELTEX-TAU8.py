#
# PySNMP MIB module ELTEX-TAU8 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-TAU8
# Produced by pysmi-0.3.4 at Wed May  1 13:02:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
elHardware, = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "elHardware")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, ObjectIdentity, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Bits, IpAddress, Integer32, Gauge32, Counter32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Bits", "IpAddress", "Integer32", "Gauge32", "Counter32", "NotificationType", "Counter64")
TextualConvention, TimeStamp, RowStatus, TruthValue, DisplayString, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "RowStatus", "TruthValue", "DisplayString", "TimeInterval")
tau8 = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 55))
tau8.setRevisions(('2013-08-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tau8.setRevisionsDescriptions(('first version',))
if mibBuilder.loadTexts: tau8.setLastUpdated('201308280000Z')
if mibBuilder.loadTexts: tau8.setOrganization('Eltex Enterprise Ltd')
if mibBuilder.loadTexts: tau8.setContactInfo(' ')
if mibBuilder.loadTexts: tau8.setDescription('TAU-4/8.IP MIB')
class CallerIdType(TextualConvention, Integer32):
    description = 'Caller-Id generation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("bell", 0), ("v23", 1), ("dtmf", 2), ("off", 3))

class CallTransferType(TextualConvention, Integer32):
    description = 'Flash mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("transmitFlash", 0), ("attendedCT", 1), ("unattendedCT", 2), ("localCT", 3))

class RsrvModeType(TextualConvention, Integer32):
    description = 'Proxy mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("homing", 1), ("parking", 2))

class RsrvCheckMethodType(TextualConvention, Integer32):
    description = 'Check method'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invite", 0), ("register", 1), ("options", 2))

class OutboundType(TextualConvention, Integer32):
    description = 'Outbound mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("outbound", 1), ("outboundWithBusy", 2))

class EarlyMediaType(TextualConvention, Integer32):
    description = 'User call (SIP) (180 Ringing (0), 183 Progress (Early media) (1))'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ringing180", 0), ("progress183EarlyMedia", 1))

class Option100relType(TextualConvention, Integer32):
    description = '100rel (supported, required, off)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("supported", 0), ("required", 1), ("off", 2))

class KeepAliveModeType(TextualConvention, Integer32):
    description = ' '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("options", 1), ("notify", 2), ("clrf", 3))

class DtmfTransferType(TextualConvention, Integer32):
    description = 'DTMF transfer'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inband", 0), ("rfc2833", 1), ("info", 2))

class FaxDirectionType(TextualConvention, Integer32):
    description = 'Fax Direction'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("callerAndCallee", 0), ("caller", 1), ("callee", 2), ("noDetectFax", 3))

class FaxtransferType(TextualConvention, Integer32):
    description = 'Fax Direction'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("g711a", 0), ("g711u", 1), ("t38", 2), ("none", 3))

class FlashtransferType(TextualConvention, Integer32):
    description = 'Flash transfer'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("rfc2833", 1), ("info", 2))

class FlashMimeType(TextualConvention, Integer32):
    description = 'Hook flash MIME Type (if flashtransfer = info)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("hookflash", 0), ("dtmfRelay", 1), ("broadsoft", 2), ("sscc", 3))

class ModemType(TextualConvention, Integer32):
    description = 'Modem transfer (V.152)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("g711a", 0), ("g711u", 1), ("g711aNse", 2), ("g711uNse", 3), ("off", 4))

class GroupType(TextualConvention, Integer32):
    description = 'Type of group (group(0),serial(1),cyclic(2))'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("group", 0), ("serial", 1), ("cyclic", 2))

class TraceOutputType(TextualConvention, Integer32):
    description = 'Output trace to'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("console", 0), ("syslogd", 1), ("disable", 2))

class ConferenceMode(TextualConvention, Integer32):
    description = 'sip profile conference settings'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("local", 0), ("remote", 1))

pbxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1))
fxsPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1))
fxsPortsUseFxsProfile = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortsUseFxsProfile.setStatus('current')
if mibBuilder.loadTexts: fxsPortsUseFxsProfile.setDescription('Use FXS profiles settings')
fxsPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2), )
if mibBuilder.loadTexts: fxsPortTable.setStatus('current')
if mibBuilder.loadTexts: fxsPortTable.setDescription(' ')
fxsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1), ).setIndexNames((0, "ELTEX-TAU8", "fxsPortIndex"))
if mibBuilder.loadTexts: fxsPortEntry.setStatus('current')
if mibBuilder.loadTexts: fxsPortEntry.setDescription(' ')
fxsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: fxsPortIndex.setStatus('current')
if mibBuilder.loadTexts: fxsPortIndex.setDescription('FXS port index (from 1)')
fxsPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortEnabled.setStatus('current')
if mibBuilder.loadTexts: fxsPortEnabled.setDescription('Enabled')
fxsPortSipProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortSipProfileId.setStatus('current')
if mibBuilder.loadTexts: fxsPortSipProfileId.setDescription('SIP profile')
fxsPortProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortProfile.setStatus('current')
if mibBuilder.loadTexts: fxsPortProfile.setDescription('FXS profile')
fxsPortPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortPhone.setStatus('current')
if mibBuilder.loadTexts: fxsPortPhone.setDescription('Phone')
fxsPortUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortUsername.setStatus('current')
if mibBuilder.loadTexts: fxsPortUsername.setDescription('Username')
fxsPortAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortAuthName.setStatus('current')
if mibBuilder.loadTexts: fxsPortAuthName.setDescription('Login')
fxsPortAuthPass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortAuthPass.setStatus('current')
if mibBuilder.loadTexts: fxsPortAuthPass.setDescription('Password')
fxsPortSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortSipPort.setStatus('current')
if mibBuilder.loadTexts: fxsPortSipPort.setDescription('SIP Port')
fxsPortUseAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortUseAltNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortUseAltNumber.setDescription('Use alternative number')
fxsPortAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortAltNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortAltNumber.setDescription('Alternative number')
fxsPortCpcRus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCpcRus.setStatus('current')
if mibBuilder.loadTexts: fxsPortCpcRus.setDescription('Calling party category')
fxsPortMinOnhookTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortMinOnhookTime.setStatus('current')
if mibBuilder.loadTexts: fxsPortMinOnhookTime.setDescription('Minimal on-hook time')
fxsPortMinFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortMinFlash.setStatus('current')
if mibBuilder.loadTexts: fxsPortMinFlash.setDescription('Min flash time')
fxsPortGainR = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortGainR.setStatus('current')
if mibBuilder.loadTexts: fxsPortGainR.setDescription('Gain receive (x0.1dB)')
fxsPortGainT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortGainT.setStatus('current')
if mibBuilder.loadTexts: fxsPortGainT.setDescription('Gain transmit (x0.1dB)')
fxsPortMinPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortMinPulse.setStatus('current')
if mibBuilder.loadTexts: fxsPortMinPulse.setDescription('Min pulse')
fxsPortInterdigit = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortInterdigit.setStatus('current')
if mibBuilder.loadTexts: fxsPortInterdigit.setDescription('Interdigit')
fxsPortCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 19), CallerIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCallerId.setStatus('current')
if mibBuilder.loadTexts: fxsPortCallerId.setDescription('Caller-Id generation')
fxsPortHangupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortHangupTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortHangupTimeout.setDescription('Hangup timeout')
fxsPortRbTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortRbTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortRbTimeout.setDescription('Ringback timeout')
fxsPortBusyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortBusyTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortBusyTimeout.setDescription('Busy timeout')
fxsPortPolarityReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortPolarityReverse.setStatus('current')
if mibBuilder.loadTexts: fxsPortPolarityReverse.setDescription('Polarity reversal')
fxsPortCallTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 24), CallTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCallTransfer.setStatus('current')
if mibBuilder.loadTexts: fxsPortCallTransfer.setDescription('Flash mode')
fxsPortCallWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCallWaiting.setStatus('current')
if mibBuilder.loadTexts: fxsPortCallWaiting.setDescription('Callwaiting')
fxsPortDirectnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortDirectnumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortDirectnumber.setDescription('Direct number')
fxsPortStopDial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortStopDial.setStatus('current')
if mibBuilder.loadTexts: fxsPortStopDial.setDescription('Stop dialing at #')
fxsPortHotLine = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortHotLine.setStatus('current')
if mibBuilder.loadTexts: fxsPortHotLine.setDescription('Hotline')
fxsPortHotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortHotNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortHotNumber.setDescription('Hot number (if Hotline is enabled)')
fxsPortHotTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortHotTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortHotTimeout.setDescription('Hot timeout (if Hotline is enabled)')
fxsPortCtUnconditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCtUnconditional.setStatus('current')
if mibBuilder.loadTexts: fxsPortCtUnconditional.setDescription('CFU')
fxsPortCfuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCfuNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortCfuNumber.setDescription('CGU number (if CFU is enabled)')
fxsPortCtBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCtBusy.setStatus('current')
if mibBuilder.loadTexts: fxsPortCtBusy.setDescription('CFB')
fxsPortCfbNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCfbNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortCfbNumber.setDescription('CFB number (if CFB is enabled)')
fxsPortCtNoanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCtNoanswer.setStatus('current')
if mibBuilder.loadTexts: fxsPortCtNoanswer.setDescription('CFNA')
fxsPortCfnaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCfnaNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortCfnaNumber.setDescription('CFNA number (if CFNA is enabled)')
fxsPortCtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortCtTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortCtTimeout.setDescription('CFNA timeout (if CFNA is enabled)')
fxsPortDndEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortDndEnable.setStatus('current')
if mibBuilder.loadTexts: fxsPortDndEnable.setDescription('DND')
fxsPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 2, 1, 39), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: fxsPortRowStatus.setDescription('RowStatus')
fxsPortsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortsMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: fxsPortsMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
fxsProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2))
fxsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1), )
if mibBuilder.loadTexts: fxsProfileTable.setStatus('current')
if mibBuilder.loadTexts: fxsProfileTable.setDescription(' ')
fxsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1), ).setIndexNames((0, "ELTEX-TAU8", "fxsProfileIndex"))
if mibBuilder.loadTexts: fxsProfileEntry.setStatus('current')
if mibBuilder.loadTexts: fxsProfileEntry.setDescription(' ')
fxsProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fxsProfileIndex.setStatus('current')
if mibBuilder.loadTexts: fxsProfileIndex.setDescription('FXS Profile index (from 1)')
fxsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileName.setStatus('current')
if mibBuilder.loadTexts: fxsProfileName.setDescription('Profile name')
fxsProfileMinOnhookTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileMinOnhookTime.setStatus('current')
if mibBuilder.loadTexts: fxsProfileMinOnhookTime.setDescription('Minimal on-hook time')
fxsProfileMinFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileMinFlash.setStatus('current')
if mibBuilder.loadTexts: fxsProfileMinFlash.setDescription('Min flash time (from 80 to 1000 ms)')
fxsProfileGainR = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileGainR.setStatus('current')
if mibBuilder.loadTexts: fxsProfileGainR.setDescription('Gain receive (x0.1dB)')
fxsProfileGainT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileGainT.setStatus('current')
if mibBuilder.loadTexts: fxsProfileGainT.setDescription('Gain transmit (x0.1dB)')
fxsProfileMinPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileMinPulse.setStatus('current')
if mibBuilder.loadTexts: fxsProfileMinPulse.setDescription('Minimal pulse time (from 20 to 100 ms)')
fxsProfileInterdigit = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileInterdigit.setStatus('current')
if mibBuilder.loadTexts: fxsProfileInterdigit.setDescription('Interdigit interval (from 100 to 400 ms)')
fxsProfileCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 9), CallerIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileCallerId.setStatus('current')
if mibBuilder.loadTexts: fxsProfileCallerId.setDescription('Caller-Id generation')
fxsProfileHangupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileHangupTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsProfileHangupTimeout.setDescription('Hangup timeout')
fxsProfileRbTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileRbTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsProfileRbTimeout.setDescription('Ringback timeout')
fxsProfileBusyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfileBusyTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsProfileBusyTimeout.setDescription('Busy timeout')
fxsProfilePolarityReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsProfilePolarityReverse.setStatus('current')
if mibBuilder.loadTexts: fxsProfilePolarityReverse.setDescription('Polarity reversal')
fxsProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: fxsProfileRowStatus.setDescription('RowStatus')
fxsProfilesMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsProfilesMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: fxsProfilesMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
sipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3))
sipCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1))
sipCommonStunEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonStunEnable.setStatus('current')
if mibBuilder.loadTexts: sipCommonStunEnable.setDescription('STUN enable')
sipCommonStunServer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonStunServer.setStatus('current')
if mibBuilder.loadTexts: sipCommonStunServer.setDescription('STUN server address (:port)')
sipCommonStunInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonStunInterval.setStatus('current')
if mibBuilder.loadTexts: sipCommonStunInterval.setDescription('STUN request sending interval (sec)')
sipCommonPublicIp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonPublicIp.setStatus('current')
if mibBuilder.loadTexts: sipCommonPublicIp.setDescription('Public IP')
sipCommonNotUseNAPTR = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonNotUseNAPTR.setStatus('current')
if mibBuilder.loadTexts: sipCommonNotUseNAPTR.setDescription('Disable NAPTR DNS queries')
sipCommonNotUseSRV = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonNotUseSRV.setStatus('current')
if mibBuilder.loadTexts: sipCommonNotUseSRV.setDescription('Disable SRV DNS queries')
sipProfileTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2), )
if mibBuilder.loadTexts: sipProfileTable.setStatus('current')
if mibBuilder.loadTexts: sipProfileTable.setDescription(' ')
sipProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1), ).setIndexNames((0, "ELTEX-TAU8", "sipProfileIndex"))
if mibBuilder.loadTexts: sipProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sipProfileEntry.setDescription(' ')
sipProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: sipProfileIndex.setStatus('current')
if mibBuilder.loadTexts: sipProfileIndex.setDescription('SIP Profile index (from 1)')
sipProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileName.setStatus('current')
if mibBuilder.loadTexts: sipProfileName.setDescription('Profile name')
sipProEnablesip = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProEnablesip.setStatus('current')
if mibBuilder.loadTexts: sipProEnablesip.setDescription('Activate profile')
sipProRsrvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 4), RsrvModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRsrvMode.setStatus('current')
if mibBuilder.loadTexts: sipProRsrvMode.setDescription('Proxy mode')
sipProProxyip = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyip.setStatus('current')
if mibBuilder.loadTexts: sipProProxyip.setDescription('Proxy address (:port)')
sipProRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistration.setStatus('current')
if mibBuilder.loadTexts: sipProRegistration.setDescription('Registration')
sipProRegistrarip = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrarip.setStatus('current')
if mibBuilder.loadTexts: sipProRegistrarip.setDescription('Registrar address (:port) (if Registration is enabled)')
sipProProxyipRsrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyipRsrv1.setStatus('current')
if mibBuilder.loadTexts: sipProProxyipRsrv1.setDescription('Proxy address (:port)')
sipProRegistrationRsrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrationRsrv1.setStatus('current')
if mibBuilder.loadTexts: sipProRegistrationRsrv1.setDescription('Registration')
sipProRegistraripRsrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistraripRsrv1.setStatus('current')
if mibBuilder.loadTexts: sipProRegistraripRsrv1.setDescription('Registrar address (:port) (if Registration is enabled)')
sipProProxyipRsrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyipRsrv2.setStatus('current')
if mibBuilder.loadTexts: sipProProxyipRsrv2.setDescription('Proxy address (:port)')
sipProRegistrationRsrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrationRsrv2.setStatus('current')
if mibBuilder.loadTexts: sipProRegistrationRsrv2.setDescription('Registration')
sipProRegistraripRsrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistraripRsrv2.setStatus('current')
if mibBuilder.loadTexts: sipProRegistraripRsrv2.setDescription('Registrar address (:port) (if Registration is enabled)')
sipProProxyipRsrv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyipRsrv3.setStatus('current')
if mibBuilder.loadTexts: sipProProxyipRsrv3.setDescription('Proxy address (:port)')
sipProRegistrationRsrv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrationRsrv3.setStatus('current')
if mibBuilder.loadTexts: sipProRegistrationRsrv3.setDescription('Registration')
sipProRegistraripRsrv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistraripRsrv3.setStatus('current')
if mibBuilder.loadTexts: sipProRegistraripRsrv3.setDescription('Registrar address (:port) (if Registration is enabled)')
sipProProxyipRsrv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProProxyipRsrv4.setStatus('current')
if mibBuilder.loadTexts: sipProProxyipRsrv4.setDescription('Proxy address (:port)')
sipProRegistrationRsrv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistrationRsrv4.setStatus('current')
if mibBuilder.loadTexts: sipProRegistrationRsrv4.setDescription('Registration')
sipProRegistraripRsrv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRegistraripRsrv4.setStatus('current')
if mibBuilder.loadTexts: sipProRegistraripRsrv4.setDescription('Registrar address (:port) (if Registration is enabled)')
sipProRsrvCheckMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 20), RsrvCheckMethodType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRsrvCheckMethod.setStatus('current')
if mibBuilder.loadTexts: sipProRsrvCheckMethod.setDescription('Check method')
sipProRsrvKeepaliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRsrvKeepaliveTime.setStatus('current')
if mibBuilder.loadTexts: sipProRsrvKeepaliveTime.setDescription('Keepalive timeout (s)')
sipProDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDomain.setStatus('current')
if mibBuilder.loadTexts: sipProDomain.setDescription('SIP domain')
sipProOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 23), OutboundType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProOutbound.setStatus('current')
if mibBuilder.loadTexts: sipProOutbound.setDescription('Outbound mode')
sipProExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProExpires.setStatus('current')
if mibBuilder.loadTexts: sipProExpires.setDescription('Expires')
sipProRri = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRri.setStatus('current')
if mibBuilder.loadTexts: sipProRri.setDescription('Registration Retry Interval')
sipProDomainToReg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDomainToReg.setStatus('current')
if mibBuilder.loadTexts: sipProDomainToReg.setDescription('Use domain to register')
sipProEarlyMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 27), EarlyMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProEarlyMedia.setStatus('current')
if mibBuilder.loadTexts: sipProEarlyMedia.setDescription('User call (SIP) (180 Ringing (0), 183 Progress (Early media) (1))')
sipProDisplayToReg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDisplayToReg.setStatus('current')
if mibBuilder.loadTexts: sipProDisplayToReg.setDescription('Use SIP Display info in Register')
sipProRingback = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRingback.setStatus('current')
if mibBuilder.loadTexts: sipProRingback.setDescription('Ringback at 183 Progress')
sipProReduceSdpMediaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProReduceSdpMediaCount.setStatus('current')
if mibBuilder.loadTexts: sipProReduceSdpMediaCount.setDescription('Remove rejected media')
sipProOption100rel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 31), Option100relType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProOption100rel.setStatus('current')
if mibBuilder.loadTexts: sipProOption100rel.setDescription('100rel (supported, required, off)')
sipProCodecOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProCodecOrder.setStatus('current')
if mibBuilder.loadTexts: sipProCodecOrder.setDescription('List of codecs in preferred order (g711a,g711u,g723,g729x,g729a,g729b)')
sipProG711pte = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProG711pte.setStatus('current')
if mibBuilder.loadTexts: sipProG711pte.setDescription('G.711 PTE, ms')
sipProDtmfTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 34), DtmfTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDtmfTransfer.setStatus('current')
if mibBuilder.loadTexts: sipProDtmfTransfer.setDescription('DTMF transfer')
sipProFaxDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 35), FaxDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFaxDirection.setStatus('current')
if mibBuilder.loadTexts: sipProFaxDirection.setDescription('Fax Direction')
sipProFaxTransfer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 36), FaxtransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFaxTransfer1.setStatus('current')
if mibBuilder.loadTexts: sipProFaxTransfer1.setDescription('Codec 1')
sipProFaxTransfer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 37), FaxtransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFaxTransfer2.setStatus('current')
if mibBuilder.loadTexts: sipProFaxTransfer2.setDescription('Codec 2')
sipProFaxTransfer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 38), FaxtransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFaxTransfer3.setStatus('current')
if mibBuilder.loadTexts: sipProFaxTransfer3.setDescription('Codec 3')
sipProEnableInT38 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProEnableInT38.setStatus('current')
if mibBuilder.loadTexts: sipProEnableInT38.setDescription('Take the transition to T.38')
sipProFlashTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 40), FlashtransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFlashTransfer.setStatus('current')
if mibBuilder.loadTexts: sipProFlashTransfer.setDescription('Flash transfer')
sipProFlashMime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 41), FlashMimeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProFlashMime.setStatus('current')
if mibBuilder.loadTexts: sipProFlashMime.setDescription('Hook flash MIME Type (if flashtransfer = info)')
sipProModem = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 42), ModemType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProModem.setStatus('current')
if mibBuilder.loadTexts: sipProModem.setDescription('Modem transfer (V.152)')
sipProPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProPayload.setStatus('current')
if mibBuilder.loadTexts: sipProPayload.setDescription('Payload ((96..127))')
sipProSilenceDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProSilenceDetector.setStatus('current')
if mibBuilder.loadTexts: sipProSilenceDetector.setDescription('Silencedetector')
sipProEchoCanceler = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProEchoCanceler.setStatus('current')
if mibBuilder.loadTexts: sipProEchoCanceler.setDescription('Echocanceller')
sipProRtcp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 46), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRtcp.setStatus('current')
if mibBuilder.loadTexts: sipProRtcp.setDescription('RTCP')
sipProRtcpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRtcpTimer.setStatus('current')
if mibBuilder.loadTexts: sipProRtcpTimer.setDescription('Sending interval (if rtcp on)')
sipProRtcpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProRtcpCount.setStatus('current')
if mibBuilder.loadTexts: sipProRtcpCount.setDescription('Receiving period (if rtcp on)')
sipProDialplanRegexp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProDialplanRegexp.setStatus('current')
if mibBuilder.loadTexts: sipProDialplanRegexp.setDescription('The regular expression for dialplan')
sipProRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProRowStatus.setStatus('current')
if mibBuilder.loadTexts: sipProRowStatus.setDescription('RowStatus')
sipProKeepAliveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 51), KeepAliveModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProKeepAliveMode.setStatus('current')
if mibBuilder.loadTexts: sipProKeepAliveMode.setDescription(' ')
sipProKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: sipProKeepAliveInterval.setDescription('sec')
sipProConferenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 53), ConferenceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProConferenceMode.setStatus('current')
if mibBuilder.loadTexts: sipProConferenceMode.setDescription(' ')
sipProConferenceServer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProConferenceServer.setStatus('current')
if mibBuilder.loadTexts: sipProConferenceServer.setDescription(' ')
sipProImsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProImsEnable.setStatus('current')
if mibBuilder.loadTexts: sipProImsEnable.setDescription(' ')
sipProXcapCallholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 56), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProXcapCallholdName.setStatus('current')
if mibBuilder.loadTexts: sipProXcapCallholdName.setDescription(' ')
sipProXcapCwName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProXcapCwName.setStatus('current')
if mibBuilder.loadTexts: sipProXcapCwName.setDescription(' ')
sipProXcapConferenceName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 58), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProXcapConferenceName.setStatus('current')
if mibBuilder.loadTexts: sipProXcapConferenceName.setDescription(' ')
sipProXcapHotlineName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 2, 1, 59), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProXcapHotlineName.setStatus('current')
if mibBuilder.loadTexts: sipProXcapHotlineName.setDescription(' ')
sipProfilesMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipProfilesMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: sipProfilesMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
groupsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4))
huntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1), )
if mibBuilder.loadTexts: huntGroupTable.setStatus('current')
if mibBuilder.loadTexts: huntGroupTable.setDescription(' ')
huntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1), ).setIndexNames((0, "ELTEX-TAU8", "huntGrIndex"))
if mibBuilder.loadTexts: huntGroupEntry.setStatus('current')
if mibBuilder.loadTexts: huntGroupEntry.setDescription(' ')
huntGrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: huntGrIndex.setStatus('current')
if mibBuilder.loadTexts: huntGrIndex.setDescription('Hunt group index (from 1)')
huntGrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrEnable.setStatus('current')
if mibBuilder.loadTexts: huntGrEnable.setDescription('Enable group')
huntGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGroupName.setStatus('current')
if mibBuilder.loadTexts: huntGroupName.setDescription('Group name')
huntGrSipProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrSipProfileId.setStatus('current')
if mibBuilder.loadTexts: huntGrSipProfileId.setDescription('SIP profile')
huntGrPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrPhone.setStatus('current')
if mibBuilder.loadTexts: huntGrPhone.setDescription('Phone')
huntGrRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrRegistration.setStatus('current')
if mibBuilder.loadTexts: huntGrRegistration.setDescription('Registration')
huntGrUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrUserName.setStatus('current')
if mibBuilder.loadTexts: huntGrUserName.setDescription('User Name')
huntGrPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrPassword.setStatus('current')
if mibBuilder.loadTexts: huntGrPassword.setDescription('Password')
huntGrType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 9), GroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrType.setStatus('current')
if mibBuilder.loadTexts: huntGrType.setDescription('Type of group (group(0),serial(1),cyclic(2))')
huntGrCallQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrCallQueueSize.setStatus('current')
if mibBuilder.loadTexts: huntGrCallQueueSize.setDescription('Call queue size')
huntGrWaitingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrWaitingTime.setStatus('current')
if mibBuilder.loadTexts: huntGrWaitingTime.setDescription('Call reply timeout, sec')
huntGrSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrSipPort.setStatus('current')
if mibBuilder.loadTexts: huntGrSipPort.setDescription('SIP Port of group')
huntGrPickupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrPickupEnable.setStatus('current')
if mibBuilder.loadTexts: huntGrPickupEnable.setDescription('Group call pickup enable')
huntGrPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: huntGrPorts.setStatus('current')
if mibBuilder.loadTexts: huntGrPorts.setDescription('List of the ports in the group')
huntGrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: huntGrRowStatus.setStatus('current')
if mibBuilder.loadTexts: huntGrRowStatus.setDescription('RowStatus')
huntGroupsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: huntGroupsMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: huntGroupsMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
suppServices = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5))
dvoCfuPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCfuPrefix.setStatus('current')
if mibBuilder.loadTexts: dvoCfuPrefix.setDescription('Unconditional forward')
dvoCfbPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCfbPrefix.setStatus('current')
if mibBuilder.loadTexts: dvoCfbPrefix.setDescription('CT busy')
dvoCfnaPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCfnaPrefix.setStatus('current')
if mibBuilder.loadTexts: dvoCfnaPrefix.setDescription('CT noanswer')
dvoCallPickupPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCallPickupPrefix.setStatus('current')
if mibBuilder.loadTexts: dvoCallPickupPrefix.setDescription('Permit to pickup incoming calls')
dvoHotNumberPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoHotNumberPrefix.setStatus('current')
if mibBuilder.loadTexts: dvoHotNumberPrefix.setDescription('Hotline')
dvoCallwaitingPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoCallwaitingPrefix.setStatus('current')
if mibBuilder.loadTexts: dvoCallwaitingPrefix.setDescription('Callwaiting')
dvoDndPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 1, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dvoDndPrefix.setStatus('current')
if mibBuilder.loadTexts: dvoDndPrefix.setDescription('DND')
networkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2))
snmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1))
snmpRoCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRoCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpRoCommunity.setDescription('roCommunity')
snmpRwCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRwCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpRwCommunity.setDescription('rwCommunity')
snmpTrapsink = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsink.setStatus('current')
if mibBuilder.loadTexts: snmpTrapsink.setDescription('TrapSink, usage: HOST [COMMUNITY [PORT]]')
snmpTrap2sink = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrap2sink.setStatus('current')
if mibBuilder.loadTexts: snmpTrap2sink.setDescription('Trap2Sink, usage: HOST [COMMUNITY [PORT]]')
snmpInformsink = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInformsink.setStatus('current')
if mibBuilder.loadTexts: snmpInformsink.setDescription('InformSink, usage: HOST [COMMUNITY [PORT]]')
snmpSysname = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSysname.setStatus('current')
if mibBuilder.loadTexts: snmpSysname.setDescription('System name')
snmpSyscontact = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyscontact.setStatus('current')
if mibBuilder.loadTexts: snmpSyscontact.setDescription('System contact')
snmpSyslocation = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyslocation.setStatus('current')
if mibBuilder.loadTexts: snmpSyslocation.setDescription('System location')
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapCommunity.setDescription('TrapCommunity')
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3))
traceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1))
traceOutput = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 1), TraceOutputType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traceOutput.setStatus('current')
if mibBuilder.loadTexts: traceOutput.setDescription('Output trace to')
syslogdIpaddr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogdIpaddr.setStatus('current')
if mibBuilder.loadTexts: syslogdIpaddr.setDescription('Syslog server address')
syslogdPort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogdPort.setStatus('current')
if mibBuilder.loadTexts: syslogdPort.setDescription('Syslog server port')
logLocalFile = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logLocalFile.setStatus('current')
if mibBuilder.loadTexts: logLocalFile.setDescription('Log file name')
logLocalSize = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logLocalSize.setStatus('current')
if mibBuilder.loadTexts: logLocalSize.setDescription('Log file size (kB)')
logVoipPbxEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipPbxEnable.setStatus('current')
if mibBuilder.loadTexts: logVoipPbxEnable.setDescription('VoIP trace enable')
logVoipError = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipError.setStatus('current')
if mibBuilder.loadTexts: logVoipError.setDescription('Errors')
logVoipWarning = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipWarning.setStatus('current')
if mibBuilder.loadTexts: logVoipWarning.setDescription('Warnings')
logVoipDebug = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipDebug.setStatus('current')
if mibBuilder.loadTexts: logVoipDebug.setDescription('Debug')
logVoipInfo = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipInfo.setStatus('current')
if mibBuilder.loadTexts: logVoipInfo.setDescription('Info')
logVoipSipLevel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logVoipSipLevel.setStatus('current')
if mibBuilder.loadTexts: logVoipSipLevel.setDescription('SIP trace level')
logIgmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logIgmpEnable.setStatus('current')
if mibBuilder.loadTexts: logIgmpEnable.setDescription('IGMP trace enable')
actionCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 55, 10))
actionSave = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 10, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionSave.setStatus('current')
if mibBuilder.loadTexts: actionSave.setDescription('set true(1) to save all config files')
actionReboot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 55, 10, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionReboot.setStatus('current')
if mibBuilder.loadTexts: actionReboot.setDescription('set true(1) to reboot')
tau8Group = ObjectGroup((1, 3, 6, 1, 4, 1, 35265, 1, 55, 200)).setObjects(("ELTEX-TAU8", "fxsPortsUseFxsProfile"), ("ELTEX-TAU8", "fxsPortEnabled"), ("ELTEX-TAU8", "fxsPortSipProfileId"), ("ELTEX-TAU8", "fxsPortProfile"), ("ELTEX-TAU8", "fxsPortPhone"), ("ELTEX-TAU8", "fxsPortUsername"), ("ELTEX-TAU8", "fxsPortAuthName"), ("ELTEX-TAU8", "fxsPortAuthPass"), ("ELTEX-TAU8", "fxsPortSipPort"), ("ELTEX-TAU8", "fxsPortUseAltNumber"), ("ELTEX-TAU8", "fxsPortAltNumber"), ("ELTEX-TAU8", "fxsPortCpcRus"), ("ELTEX-TAU8", "fxsPortMinOnhookTime"), ("ELTEX-TAU8", "fxsPortMinFlash"), ("ELTEX-TAU8", "fxsPortGainR"), ("ELTEX-TAU8", "fxsPortGainT"), ("ELTEX-TAU8", "fxsPortMinPulse"), ("ELTEX-TAU8", "fxsPortInterdigit"), ("ELTEX-TAU8", "fxsPortCallerId"), ("ELTEX-TAU8", "fxsPortHangupTimeout"), ("ELTEX-TAU8", "fxsPortRbTimeout"), ("ELTEX-TAU8", "fxsPortBusyTimeout"), ("ELTEX-TAU8", "fxsPortPolarityReverse"), ("ELTEX-TAU8", "fxsPortCallTransfer"), ("ELTEX-TAU8", "fxsPortCallWaiting"), ("ELTEX-TAU8", "fxsPortDirectnumber"), ("ELTEX-TAU8", "fxsPortStopDial"), ("ELTEX-TAU8", "fxsPortHotLine"), ("ELTEX-TAU8", "fxsPortHotNumber"), ("ELTEX-TAU8", "fxsPortHotTimeout"), ("ELTEX-TAU8", "fxsPortCtUnconditional"), ("ELTEX-TAU8", "fxsPortCfuNumber"), ("ELTEX-TAU8", "fxsPortCtBusy"), ("ELTEX-TAU8", "fxsPortCfbNumber"), ("ELTEX-TAU8", "fxsPortCtNoanswer"), ("ELTEX-TAU8", "fxsPortCfnaNumber"), ("ELTEX-TAU8", "fxsPortCtTimeout"), ("ELTEX-TAU8", "fxsPortDndEnable"), ("ELTEX-TAU8", "fxsPortRowStatus"), ("ELTEX-TAU8", "fxsPortsMIBBoundary"), ("ELTEX-TAU8", "fxsProfileName"), ("ELTEX-TAU8", "fxsProfileMinOnhookTime"), ("ELTEX-TAU8", "fxsProfileMinFlash"), ("ELTEX-TAU8", "fxsProfileGainR"), ("ELTEX-TAU8", "fxsProfileGainT"), ("ELTEX-TAU8", "fxsProfileMinPulse"), ("ELTEX-TAU8", "fxsProfileInterdigit"), ("ELTEX-TAU8", "fxsProfileCallerId"), ("ELTEX-TAU8", "fxsProfileHangupTimeout"), ("ELTEX-TAU8", "fxsProfileRbTimeout"), ("ELTEX-TAU8", "fxsProfileBusyTimeout"), ("ELTEX-TAU8", "fxsProfilePolarityReverse"), ("ELTEX-TAU8", "fxsProfileRowStatus"), ("ELTEX-TAU8", "fxsProfilesMIBBoundary"), ("ELTEX-TAU8", "sipCommonStunEnable"), ("ELTEX-TAU8", "sipCommonStunServer"), ("ELTEX-TAU8", "sipCommonStunInterval"), ("ELTEX-TAU8", "sipCommonPublicIp"), ("ELTEX-TAU8", "sipCommonNotUseNAPTR"), ("ELTEX-TAU8", "sipCommonNotUseSRV"), ("ELTEX-TAU8", "sipProfileName"), ("ELTEX-TAU8", "sipProEnablesip"), ("ELTEX-TAU8", "sipProRsrvMode"), ("ELTEX-TAU8", "sipProProxyip"), ("ELTEX-TAU8", "sipProRegistration"), ("ELTEX-TAU8", "sipProRegistrarip"), ("ELTEX-TAU8", "sipProProxyipRsrv1"), ("ELTEX-TAU8", "sipProRegistrationRsrv1"), ("ELTEX-TAU8", "sipProRegistraripRsrv1"), ("ELTEX-TAU8", "sipProProxyipRsrv2"), ("ELTEX-TAU8", "sipProRegistrationRsrv2"), ("ELTEX-TAU8", "sipProRegistraripRsrv2"), ("ELTEX-TAU8", "sipProProxyipRsrv3"), ("ELTEX-TAU8", "sipProRegistrationRsrv3"), ("ELTEX-TAU8", "sipProRegistraripRsrv3"), ("ELTEX-TAU8", "sipProProxyipRsrv4"), ("ELTEX-TAU8", "sipProRegistrationRsrv4"), ("ELTEX-TAU8", "sipProRegistraripRsrv4"), ("ELTEX-TAU8", "sipProRsrvCheckMethod"), ("ELTEX-TAU8", "sipProRsrvKeepaliveTime"), ("ELTEX-TAU8", "sipProDomain"), ("ELTEX-TAU8", "sipProOutbound"), ("ELTEX-TAU8", "sipProExpires"), ("ELTEX-TAU8", "sipProRri"), ("ELTEX-TAU8", "sipProDomainToReg"), ("ELTEX-TAU8", "sipProEarlyMedia"), ("ELTEX-TAU8", "sipProDisplayToReg"), ("ELTEX-TAU8", "sipProRingback"), ("ELTEX-TAU8", "sipProReduceSdpMediaCount"), ("ELTEX-TAU8", "sipProOption100rel"), ("ELTEX-TAU8", "sipProCodecOrder"), ("ELTEX-TAU8", "sipProG711pte"), ("ELTEX-TAU8", "sipProDtmfTransfer"), ("ELTEX-TAU8", "sipProFaxDirection"), ("ELTEX-TAU8", "sipProFaxTransfer1"), ("ELTEX-TAU8", "sipProFaxTransfer2"), ("ELTEX-TAU8", "sipProFaxTransfer3"), ("ELTEX-TAU8", "sipProEnableInT38"), ("ELTEX-TAU8", "sipProFlashTransfer"), ("ELTEX-TAU8", "sipProFlashMime"), ("ELTEX-TAU8", "sipProModem"), ("ELTEX-TAU8", "sipProPayload"), ("ELTEX-TAU8", "sipProSilenceDetector"), ("ELTEX-TAU8", "sipProEchoCanceler"), ("ELTEX-TAU8", "sipProRtcp"), ("ELTEX-TAU8", "sipProRtcpTimer"), ("ELTEX-TAU8", "sipProRtcpCount"), ("ELTEX-TAU8", "sipProDialplanRegexp"), ("ELTEX-TAU8", "sipProRowStatus"), ("ELTEX-TAU8", "sipProKeepAliveMode"), ("ELTEX-TAU8", "sipProKeepAliveInterval"), ("ELTEX-TAU8", "sipProConferenceMode"), ("ELTEX-TAU8", "sipProConferenceServer"), ("ELTEX-TAU8", "sipProImsEnable"), ("ELTEX-TAU8", "sipProXcapCallholdName"), ("ELTEX-TAU8", "sipProXcapCwName"), ("ELTEX-TAU8", "sipProXcapConferenceName"), ("ELTEX-TAU8", "sipProXcapHotlineName"), ("ELTEX-TAU8", "sipProfilesMIBBoundary"), ("ELTEX-TAU8", "huntGrEnable"), ("ELTEX-TAU8", "huntGroupName"), ("ELTEX-TAU8", "huntGrSipProfileId"), ("ELTEX-TAU8", "huntGrPhone"), ("ELTEX-TAU8", "huntGrRegistration"), ("ELTEX-TAU8", "huntGrUserName"), ("ELTEX-TAU8", "huntGrPassword"), ("ELTEX-TAU8", "huntGrType"), ("ELTEX-TAU8", "huntGrCallQueueSize"), ("ELTEX-TAU8", "huntGrWaitingTime"), ("ELTEX-TAU8", "huntGrSipPort"), ("ELTEX-TAU8", "huntGrPickupEnable"), ("ELTEX-TAU8", "huntGrPorts"), ("ELTEX-TAU8", "huntGrRowStatus"), ("ELTEX-TAU8", "huntGroupsMIBBoundary"), ("ELTEX-TAU8", "dvoCfuPrefix"), ("ELTEX-TAU8", "dvoCfbPrefix"), ("ELTEX-TAU8", "dvoCfnaPrefix"), ("ELTEX-TAU8", "dvoCallPickupPrefix"), ("ELTEX-TAU8", "dvoHotNumberPrefix"), ("ELTEX-TAU8", "dvoCallwaitingPrefix"), ("ELTEX-TAU8", "dvoDndPrefix"), ("ELTEX-TAU8", "snmpRoCommunity"), ("ELTEX-TAU8", "snmpRwCommunity"), ("ELTEX-TAU8", "snmpTrapsink"), ("ELTEX-TAU8", "snmpTrap2sink"), ("ELTEX-TAU8", "snmpInformsink"), ("ELTEX-TAU8", "snmpSysname"), ("ELTEX-TAU8", "snmpSyscontact"), ("ELTEX-TAU8", "snmpSyslocation"), ("ELTEX-TAU8", "snmpTrapCommunity"), ("ELTEX-TAU8", "traceOutput"), ("ELTEX-TAU8", "syslogdIpaddr"), ("ELTEX-TAU8", "syslogdPort"), ("ELTEX-TAU8", "logLocalFile"), ("ELTEX-TAU8", "logLocalSize"), ("ELTEX-TAU8", "logVoipPbxEnable"), ("ELTEX-TAU8", "logVoipError"), ("ELTEX-TAU8", "logVoipWarning"), ("ELTEX-TAU8", "logVoipDebug"), ("ELTEX-TAU8", "logVoipInfo"), ("ELTEX-TAU8", "logVoipSipLevel"), ("ELTEX-TAU8", "logIgmpEnable"), ("ELTEX-TAU8", "actionReboot"), ("ELTEX-TAU8", "actionSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tau8Group = tau8Group.setStatus('current')
if mibBuilder.loadTexts: tau8Group.setDescription(' ')
mibBuilder.exportSymbols("ELTEX-TAU8", GroupType=GroupType, sipProRegistraripRsrv1=sipProRegistraripRsrv1, sipProFaxTransfer3=sipProFaxTransfer3, sipProRtcpTimer=sipProRtcpTimer, traceConfig=traceConfig, ConferenceMode=ConferenceMode, sipProRegistrationRsrv2=sipProRegistrationRsrv2, actionCommands=actionCommands, sipProRegistration=sipProRegistration, dvoCallPickupPrefix=dvoCallPickupPrefix, sipProEarlyMedia=sipProEarlyMedia, logVoipPbxEnable=logVoipPbxEnable, sipProDomainToReg=sipProDomainToReg, FlashtransferType=FlashtransferType, fxsPortProfile=fxsPortProfile, fxsPortSipPort=fxsPortSipPort, sipProfileEntry=sipProfileEntry, sipProOutbound=sipProOutbound, fxsPortGainT=fxsPortGainT, snmpRoCommunity=snmpRoCommunity, fxsPortGainR=fxsPortGainR, snmpTrapsink=snmpTrapsink, sipProModem=sipProModem, snmpTrapCommunity=snmpTrapCommunity, sipProFaxTransfer2=sipProFaxTransfer2, snmpConfig=snmpConfig, sipProRegistrationRsrv3=sipProRegistrationRsrv3, fxsPortDndEnable=fxsPortDndEnable, sipProReduceSdpMediaCount=sipProReduceSdpMediaCount, traceOutput=traceOutput, TraceOutputType=TraceOutputType, RsrvModeType=RsrvModeType, fxsPortHotLine=fxsPortHotLine, sipProDomain=sipProDomain, huntGrCallQueueSize=huntGrCallQueueSize, logVoipError=logVoipError, sipProExpires=sipProExpires, sipProProxyipRsrv4=sipProProxyipRsrv4, fxsPortCfbNumber=fxsPortCfbNumber, huntGrEnable=huntGrEnable, CallTransferType=CallTransferType, logIgmpEnable=logIgmpEnable, fxsProfilesMIBBoundary=fxsProfilesMIBBoundary, sipProConferenceServer=sipProConferenceServer, tau8Group=tau8Group, fxsPortInterdigit=fxsPortInterdigit, fxsPortRowStatus=fxsPortRowStatus, sipProFlashMime=sipProFlashMime, sipProXcapConferenceName=sipProXcapConferenceName, suppServices=suppServices, fxsProfileCallerId=fxsProfileCallerId, RsrvCheckMethodType=RsrvCheckMethodType, EarlyMediaType=EarlyMediaType, fxsPortCallTransfer=fxsPortCallTransfer, sipProRegistraripRsrv4=sipProRegistraripRsrv4, huntGrSipProfileId=huntGrSipProfileId, networkConfig=networkConfig, dvoHotNumberPrefix=dvoHotNumberPrefix, fxsPortMinOnhookTime=fxsPortMinOnhookTime, snmpSysname=snmpSysname, FaxtransferType=FaxtransferType, fxsProfileRowStatus=fxsProfileRowStatus, sipProRowStatus=sipProRowStatus, systemConfig=systemConfig, fxsProfileRbTimeout=fxsProfileRbTimeout, fxsPortPhone=fxsPortPhone, fxsPortSipProfileId=fxsPortSipProfileId, fxsPortDirectnumber=fxsPortDirectnumber, fxsPortMinPulse=fxsPortMinPulse, fxsPortHotNumber=fxsPortHotNumber, CallerIdType=CallerIdType, huntGrUserName=huntGrUserName, sipProRegistraripRsrv3=sipProRegistraripRsrv3, sipProXcapHotlineName=sipProXcapHotlineName, fxsProfileTable=fxsProfileTable, actionReboot=actionReboot, ModemType=ModemType, fxsProfilePolarityReverse=fxsProfilePolarityReverse, sipProDialplanRegexp=sipProDialplanRegexp, sipProImsEnable=sipProImsEnable, sipProProxyipRsrv2=sipProProxyipRsrv2, fxsPortCtNoanswer=fxsPortCtNoanswer, fxsProfileGainR=fxsProfileGainR, sipProRegistrationRsrv4=sipProRegistrationRsrv4, sipProProxyipRsrv3=sipProProxyipRsrv3, huntGrPorts=huntGrPorts, huntGrWaitingTime=huntGrWaitingTime, sipProProxyipRsrv1=sipProProxyipRsrv1, fxsPortMinFlash=fxsPortMinFlash, sipCommonStunInterval=sipCommonStunInterval, dvoCfnaPrefix=dvoCfnaPrefix, snmpTrap2sink=snmpTrap2sink, sipCommonStunServer=sipCommonStunServer, fxsProfileName=fxsProfileName, fxsPortBusyTimeout=fxsPortBusyTimeout, snmpSyscontact=snmpSyscontact, huntGroupName=huntGroupName, sipProfileIndex=sipProfileIndex, actionSave=actionSave, sipProRingback=sipProRingback, logVoipSipLevel=logVoipSipLevel, logVoipDebug=logVoipDebug, sipProRtcp=sipProRtcp, fxsProfiles=fxsProfiles, sipProRegistraripRsrv2=sipProRegistraripRsrv2, huntGroupEntry=huntGroupEntry, fxsPortUseAltNumber=fxsPortUseAltNumber, sipProRsrvKeepaliveTime=sipProRsrvKeepaliveTime, sipProKeepAliveMode=sipProKeepAliveMode, OutboundType=OutboundType, huntGrRegistration=huntGrRegistration, fxsPortCtBusy=fxsPortCtBusy, fxsProfileInterdigit=fxsProfileInterdigit, sipProDtmfTransfer=sipProDtmfTransfer, logVoipInfo=logVoipInfo, fxsPortHotTimeout=fxsPortHotTimeout, fxsProfileEntry=fxsProfileEntry, fxsPorts=fxsPorts, fxsPortCtTimeout=fxsPortCtTimeout, logVoipWarning=logVoipWarning, fxsPortRbTimeout=fxsPortRbTimeout, huntGrPickupEnable=huntGrPickupEnable, snmpInformsink=snmpInformsink, fxsPortTable=fxsPortTable, fxsPortHangupTimeout=fxsPortHangupTimeout, sipProRri=sipProRri, sipCommonNotUseNAPTR=sipCommonNotUseNAPTR, huntGrIndex=huntGrIndex, sipProRtcpCount=sipProRtcpCount, fxsPortCfnaNumber=fxsPortCfnaNumber, fxsPortEntry=fxsPortEntry, sipProRsrvCheckMethod=sipProRsrvCheckMethod, fxsProfileMinOnhookTime=fxsProfileMinOnhookTime, huntGrRowStatus=huntGrRowStatus, sipCommon=sipCommon, sipCommonPublicIp=sipCommonPublicIp, PYSNMP_MODULE_ID=tau8, huntGroupsMIBBoundary=huntGroupsMIBBoundary, sipProSilenceDetector=sipProSilenceDetector, fxsPortCfuNumber=fxsPortCfuNumber, fxsProfileIndex=fxsProfileIndex, sipProDisplayToReg=sipProDisplayToReg, sipProEnableInT38=sipProEnableInT38, huntGrPhone=huntGrPhone, fxsPortCpcRus=fxsPortCpcRus, fxsPortCallerId=fxsPortCallerId, groupsConfig=groupsConfig, fxsPortsMIBBoundary=fxsPortsMIBBoundary, fxsPortAltNumber=fxsPortAltNumber, sipCommonNotUseSRV=sipCommonNotUseSRV, tau8=tau8, fxsPortStopDial=fxsPortStopDial, sipProEnablesip=sipProEnablesip, sipProXcapCallholdName=sipProXcapCallholdName, huntGrSipPort=huntGrSipPort, sipProFaxDirection=sipProFaxDirection, fxsPortPolarityReverse=fxsPortPolarityReverse, sipProKeepAliveInterval=sipProKeepAliveInterval, Option100relType=Option100relType, syslogdPort=syslogdPort, sipProFlashTransfer=sipProFlashTransfer, huntGroupTable=huntGroupTable, sipProConferenceMode=sipProConferenceMode, FaxDirectionType=FaxDirectionType, KeepAliveModeType=KeepAliveModeType, sipProRsrvMode=sipProRsrvMode, huntGrType=huntGrType, sipProXcapCwName=sipProXcapCwName, fxsProfileBusyTimeout=fxsProfileBusyTimeout, syslogdIpaddr=syslogdIpaddr, fxsPortAuthName=fxsPortAuthName, sipProCodecOrder=sipProCodecOrder, sipProfileName=sipProfileName, logLocalSize=logLocalSize, DtmfTransferType=DtmfTransferType, logLocalFile=logLocalFile, fxsPortsUseFxsProfile=fxsPortsUseFxsProfile, sipProProxyip=sipProProxyip, fxsProfileHangupTimeout=fxsProfileHangupTimeout, huntGrPassword=huntGrPassword, sipProfilesMIBBoundary=sipProfilesMIBBoundary, snmpSyslocation=snmpSyslocation, fxsPortUsername=fxsPortUsername, fxsPortCtUnconditional=fxsPortCtUnconditional, dvoCfbPrefix=dvoCfbPrefix, fxsProfileMinFlash=fxsProfileMinFlash, sipProPayload=sipProPayload, sipCommonStunEnable=sipCommonStunEnable, fxsPortCallWaiting=fxsPortCallWaiting, sipProOption100rel=sipProOption100rel, dvoCfuPrefix=dvoCfuPrefix, sipProRegistrationRsrv1=sipProRegistrationRsrv1, fxsProfileGainT=fxsProfileGainT, fxsPortEnabled=fxsPortEnabled, fxsProfileMinPulse=fxsProfileMinPulse, sipConfig=sipConfig, sipProEchoCanceler=sipProEchoCanceler, pbxConfig=pbxConfig, fxsPortIndex=fxsPortIndex, fxsPortAuthPass=fxsPortAuthPass, dvoCallwaitingPrefix=dvoCallwaitingPrefix, snmpRwCommunity=snmpRwCommunity, dvoDndPrefix=dvoDndPrefix, sipProRegistrarip=sipProRegistrarip, sipProFaxTransfer1=sipProFaxTransfer1, sipProG711pte=sipProG711pte, FlashMimeType=FlashMimeType, sipProfileTable=sipProfileTable)
