#
# PySNMP MIB module CISCO-WAN-BBIF-ILMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-BBIF-ILMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
AtmIlmiNetworkPrefix, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmIlmiNetworkPrefix")
bbIfCnt, bbIfCnf = mibBuilder.importSymbols("BASIS-MIB", "bbIfCnt", "bbIfCnf")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Integer32, iso, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Bits, Counter64, ModuleIdentity, Counter32, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "iso", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Bits", "Counter64", "ModuleIdentity", "Counter32", "MibIdentifier", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoWanBbifIlmiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 33))
ciscoWanBbifIlmiMIB.setRevisions(('2002-12-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanBbifIlmiMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoWanBbifIlmiMIB.setLastUpdated('200212200000Z')
if mibBuilder.loadTexts: ciscoWanBbifIlmiMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanBbifIlmiMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanBbifIlmiMIB.setDescription('The MIB module for ILMI configuration and ILMI statistics for broad band interface ports in PXM1 service module. PXM1 service module is supported in MGX82xx series products. The broadband interface referred to in this mib is for ATM logical ports.')
bbIfCnfSigILMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2))
bbIfCntSigILMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2))
bbIfCnfSigILMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1), )
if mibBuilder.loadTexts: bbIfCnfSigILMIGrpTable.setStatus('current')
if mibBuilder.loadTexts: bbIfCnfSigILMIGrpTable.setDescription('This table contains ILMI configuration parameters for a broadband interface.')
bbIfCnfSigILMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-BBIF-ILMI-MIB", "bbIfSigPortNum"))
if mibBuilder.loadTexts: bbIfCnfSigILMIGrpEntry.setStatus('current')
if mibBuilder.loadTexts: bbIfCnfSigILMIGrpEntry.setDescription('An entry for a boradband interface used as a UNI port. Each entry contains ILMI configuration parameters and variables for a broadband interface.')
bbIfSigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfSigPortNum.setReference('CISCO-WAN-BBIF-PORT-MIB')
if mibBuilder.loadTexts: bbIfSigPortNum.setStatus('current')
if mibBuilder.loadTexts: bbIfSigPortNum.setDescription('This object refers to the broadband interface. The value for this object is same as value specified in bbIfNum object from bbIfCnfGrpTable.')
bbIfIlmiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfIlmiEnable.setStatus('current')
if mibBuilder.loadTexts: bbIfIlmiEnable.setDescription("The logical interface is a generic entity, it can be used as either a virtual trunk, or user port with UNI support. This variable is provided to enable/disable ILMI. ILMI should only be enabled on 'user ports' and not on 'virtual trunks' 1 - disable 2 - enable")
bbIfSignallingProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSignalling", 2), ("iLMI", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfSignallingProtocolType.setStatus('current')
if mibBuilder.loadTexts: bbIfSignallingProtocolType.setDescription('This will set the signalling protocol other(1) : other noSignalling(2) : noSignalling iLMI(3) : ILMI')
bbIfSignallingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfSignallingVpi.setStatus('current')
if mibBuilder.loadTexts: bbIfSignallingVpi.setDescription('This object specifies the VPI on which signalling cells received.')
bbIfSignallingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfSignallingVci.setStatus('current')
if mibBuilder.loadTexts: bbIfSignallingVci.setDescription('This object specifies the VPI on which signalling cells received.')
bbIfAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 6), AtmIlmiNetworkPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: bbIfAddrPrefix.setDescription('Network Prefix for the ATM address.')
bbIfCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfCustomerId.setStatus('current')
if mibBuilder.loadTexts: bbIfCustomerId.setDescription('This represents the customer Id.')
bbIfProtocolRevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfProtocolRevNo.setStatus('current')
if mibBuilder.loadTexts: bbIfProtocolRevNo.setDescription('This object represents the protocol revision number.')
bbIfIlmiTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfIlmiTrapEnable.setStatus('current')
if mibBuilder.loadTexts: bbIfIlmiTrapEnable.setDescription('This object is used for enabling/disabling the sending of ILMI traps.')
bbIfMinTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMinTrapInterval.setStatus('current')
if mibBuilder.loadTexts: bbIfMinTrapInterval.setDescription('This object specifies the minimum throttling period of notification generation. The notificaton events should be suppressed by the agent until the current throttling period expires.')
bbIfKeepAlivePollingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfKeepAlivePollingEnable.setStatus('current')
if mibBuilder.loadTexts: bbIfKeepAlivePollingEnable.setDescription('Enable/disable Keep Alive Polling.')
bbIfErrorThresholdN491 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfErrorThresholdN491.setStatus('current')
if mibBuilder.loadTexts: bbIfErrorThresholdN491.setDescription('This object specifies Error Threshold (N491) value. The number of keep alive polls that must fail within a window of N491 polls, before the port is placed in the failed state. This attribute is applicable only when bbIfSignallingProtocolType set to iLMI(3).')
bbIfEventThresholdN492 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfEventThresholdN492.setStatus('current')
if mibBuilder.loadTexts: bbIfEventThresholdN492.setDescription('This object specifies Error Threshold (N492) value. The number of keep alive polls that must fail within a window of N492 polls, before the port is placed in the failed state. This attribute is applicable only when bbIfSignallingProtocolType set to iLMI(3).')
bbIfPollingIntervalT491 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60))).clone(namedValues=NamedValues(("v1", 5), ("v2", 10), ("v3", 15), ("v4", 20), ("v5", 25), ("v6", 30), ("v7", 35), ("v8", 40), ("v9", 45), ("v10", 50), ("v11", 55), ("v12", 60)))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfPollingIntervalT491.setStatus('current')
if mibBuilder.loadTexts: bbIfPollingIntervalT491.setDescription('This object specifies Polling Interval (T491) value. The T491 value is the number of seconds between each keep alive poll transmitted by port. This attribute is applicable only when bbIfSignallingProtocolType set to iLMI(3).')
bbIfMinEnquiryIntervalT493 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMinEnquiryIntervalT493.setStatus('current')
if mibBuilder.loadTexts: bbIfMinEnquiryIntervalT493.setDescription('This object specifies minimum Enquiry Interval(T493) value. The T493 value is the number of seconds between each keep alive poll transmitted by port. This attribute is applicable only when bbIfSignallingProtocolType set to iLMI(3).')
bbIfAddrRegEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfAddrRegEnable.setStatus('current')
if mibBuilder.loadTexts: bbIfAddrRegEnable.setDescription('Enable/disable ILMI Address Registration.')
bbIfCntSigILMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1), )
if mibBuilder.loadTexts: bbIfCntSigILMIGrpTable.setStatus('current')
if mibBuilder.loadTexts: bbIfCntSigILMIGrpTable.setDescription('This table contains statistics related to ILMI.')
bbIfCntSigILMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-BBIF-ILMI-MIB", "sigCntBbIfNum"))
if mibBuilder.loadTexts: bbIfCntSigILMIGrpEntry.setStatus('current')
if mibBuilder.loadTexts: bbIfCntSigILMIGrpEntry.setDescription('An entry for a boradband interface used as a UNI port.')
sigCntBbIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigCntBbIfNum.setStatus('current')
if mibBuilder.loadTexts: sigCntBbIfNum.setDescription('This object refers to the broadband interface. The value for this object is same as value specified in bbIfSigPortNum object from bbIfCnfSigILMIGrpTable.')
bbIfSnmpPduReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfSnmpPduReceived.setStatus('current')
if mibBuilder.loadTexts: bbIfSnmpPduReceived.setDescription('The number of snmp packets received on this logical interface.')
bbIfGetRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetRequestReceived.setStatus('current')
if mibBuilder.loadTexts: bbIfGetRequestReceived.setDescription('The number of get request messages received.')
bbIfGetNextRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetNextRequestReceived.setStatus('current')
if mibBuilder.loadTexts: bbIfGetNextRequestReceived.setDescription('The number of get-next messages received.')
bbIfSetRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfSetRequestReceived.setStatus('current')
if mibBuilder.loadTexts: bbIfSetRequestReceived.setDescription('The number of set messages received.')
bbIfTrapReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfTrapReceived.setStatus('current')
if mibBuilder.loadTexts: bbIfTrapReceived.setDescription('The number of traps received.')
bbIfGetResponseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetResponseReceived.setStatus('current')
if mibBuilder.loadTexts: bbIfGetResponseReceived.setDescription('The number of Keep Alive response messages received.')
bbIfGetResponseTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetResponseTransmitted.setStatus('current')
if mibBuilder.loadTexts: bbIfGetResponseTransmitted.setDescription('The number of response messages transmitted.')
bbIfGetRequestTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetRequestTransmitted.setStatus('current')
if mibBuilder.loadTexts: bbIfGetRequestTransmitted.setDescription('The number of Keep Alive get request messages transmitted.')
bbIfTrapTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfTrapTransmitted.setStatus('current')
if mibBuilder.loadTexts: bbIfTrapTransmitted.setDescription('The number of trap messages transmitted.')
bbIfInvalidPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfInvalidPDUReceived.setStatus('current')
if mibBuilder.loadTexts: bbIfInvalidPDUReceived.setDescription('The number of invalid PDUs received.')
bbIfAsn1ParseError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfAsn1ParseError.setStatus('current')
if mibBuilder.loadTexts: bbIfAsn1ParseError.setDescription('The number of parse errors on ASN.1.')
bbIfNoSuchNameError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfNoSuchNameError.setStatus('current')
if mibBuilder.loadTexts: bbIfNoSuchNameError.setDescription('The number of errors for name not present.')
bbIfTooBigError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfTooBigError.setStatus('current')
if mibBuilder.loadTexts: bbIfTooBigError.setDescription('The number of messages received with len > 484.')
bbIfSigCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfSigCntClrButton.setStatus('current')
if mibBuilder.loadTexts: bbIfSigCntClrButton.setDescription('Writing a value of 2 resets all the counters from bbIfCntSigILMIGrpTable.')
cwbIlmiMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 33, 2))
cwbIlmiMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 33, 2, 1))
cwbIlmiMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 33, 2, 2))
cwbIlmiCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 33, 2, 2, 1)).setObjects(("CISCO-WAN-BBIF-ILMI-MIB", "cwbIlmiConfGroup"), ("CISCO-WAN-BBIF-ILMI-MIB", "cwbIlmiStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbIlmiCompliance = cwbIlmiCompliance.setStatus('current')
if mibBuilder.loadTexts: cwbIlmiCompliance.setDescription('The compliance statement for objects related to SRM MIB.')
cwbIlmiConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 33, 2, 1, 1)).setObjects(("CISCO-WAN-BBIF-ILMI-MIB", "bbIfSigPortNum"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfIlmiEnable"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfSignallingProtocolType"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfSignallingVpi"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfSignallingVci"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfAddrPrefix"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfCustomerId"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfProtocolRevNo"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfIlmiTrapEnable"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfMinTrapInterval"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfKeepAlivePollingEnable"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfErrorThresholdN491"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfEventThresholdN492"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfPollingIntervalT491"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfMinEnquiryIntervalT493"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfAddrRegEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbIlmiConfGroup = cwbIlmiConfGroup.setStatus('current')
if mibBuilder.loadTexts: cwbIlmiConfGroup.setDescription('The collection of objects which are used for configuring ILMI on broad band interface ports.')
cwbIlmiStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 33, 2, 1, 2)).setObjects(("CISCO-WAN-BBIF-ILMI-MIB", "sigCntBbIfNum"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfSnmpPduReceived"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfGetRequestReceived"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfGetNextRequestReceived"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfSetRequestReceived"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfTrapReceived"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfGetResponseReceived"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfGetResponseTransmitted"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfGetRequestTransmitted"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfTrapTransmitted"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfInvalidPDUReceived"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfAsn1ParseError"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfNoSuchNameError"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfTooBigError"), ("CISCO-WAN-BBIF-ILMI-MIB", "bbIfSigCntClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbIlmiStatsGroup = cwbIlmiStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwbIlmiStatsGroup.setDescription('The collection of objects containing the ILMI statistics on broad band interface ports.')
mibBuilder.exportSymbols("CISCO-WAN-BBIF-ILMI-MIB", bbIfGetNextRequestReceived=bbIfGetNextRequestReceived, bbIfCntSigILMIGrpEntry=bbIfCntSigILMIGrpEntry, bbIfCustomerId=bbIfCustomerId, cwbIlmiStatsGroup=cwbIlmiStatsGroup, bbIfNoSuchNameError=bbIfNoSuchNameError, bbIfTrapTransmitted=bbIfTrapTransmitted, cwbIlmiConfGroup=cwbIlmiConfGroup, bbIfSignallingProtocolType=bbIfSignallingProtocolType, bbIfSignallingVci=bbIfSignallingVci, cwbIlmiMIBConformance=cwbIlmiMIBConformance, bbIfMinTrapInterval=bbIfMinTrapInterval, bbIfTrapReceived=bbIfTrapReceived, bbIfGetResponseReceived=bbIfGetResponseReceived, bbIfProtocolRevNo=bbIfProtocolRevNo, bbIfGetRequestTransmitted=bbIfGetRequestTransmitted, cwbIlmiCompliance=cwbIlmiCompliance, bbIfCnfSigILMIGrpTable=bbIfCnfSigILMIGrpTable, bbIfEventThresholdN492=bbIfEventThresholdN492, bbIfCntSigILMIGrpTable=bbIfCntSigILMIGrpTable, cwbIlmiMIBCompliances=cwbIlmiMIBCompliances, bbIfGetRequestReceived=bbIfGetRequestReceived, bbIfSigPortNum=bbIfSigPortNum, bbIfSetRequestReceived=bbIfSetRequestReceived, bbIfErrorThresholdN491=bbIfErrorThresholdN491, bbIfPollingIntervalT491=bbIfPollingIntervalT491, bbIfAsn1ParseError=bbIfAsn1ParseError, bbIfIlmiTrapEnable=bbIfIlmiTrapEnable, bbIfKeepAlivePollingEnable=bbIfKeepAlivePollingEnable, bbIfIlmiEnable=bbIfIlmiEnable, sigCntBbIfNum=sigCntBbIfNum, bbIfCnfSigILMIGrpEntry=bbIfCnfSigILMIGrpEntry, cwbIlmiMIBGroups=cwbIlmiMIBGroups, ciscoWanBbifIlmiMIB=ciscoWanBbifIlmiMIB, bbIfAddrPrefix=bbIfAddrPrefix, bbIfSnmpPduReceived=bbIfSnmpPduReceived, bbIfGetResponseTransmitted=bbIfGetResponseTransmitted, bbIfTooBigError=bbIfTooBigError, bbIfCnfSigILMIGrp=bbIfCnfSigILMIGrp, bbIfAddrRegEnable=bbIfAddrRegEnable, bbIfSignallingVpi=bbIfSignallingVpi, bbIfCntSigILMIGrp=bbIfCntSigILMIGrp, bbIfInvalidPDUReceived=bbIfInvalidPDUReceived, bbIfSigCntClrButton=bbIfSigCntClrButton, PYSNMP_MODULE_ID=ciscoWanBbifIlmiMIB, bbIfMinEnquiryIntervalT493=bbIfMinEnquiryIntervalT493)
