#
# PySNMP MIB module Zhone-VOICE-ANALOG-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Zhone-VOICE-ANALOG-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:52:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Bits, Gauge32, Unsigned32, TimeTicks, IpAddress, ObjectIdentity, Counter64, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Bits", "Gauge32", "Unsigned32", "TimeTicks", "IpAddress", "ObjectIdentity", "Counter64", "Counter32", "iso")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
zhonePhysical, zhoneModules = mibBuilder.importSymbols("Zhone", "zhonePhysical", "zhoneModules")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhoneVoiceAnalogIf_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 13)).setLabel("zhoneVoiceAnalogIf-MIB")
zhoneVoiceAnalogIf_MIB.setRevisions(('2009-05-05 02:36', '2008-03-26 17:45', '2007-11-01 02:30', '2005-09-06 11:14', '2005-08-08 15:00', '2005-05-11 15:20', '2005-05-02 17:22', '2004-10-07 11:34', '2001-10-10 11:19', '2001-02-15 18:52', '2000-09-12 14:21',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneVoiceAnalogIf_MIB.setRevisionsDescriptions(('V01.00.10 - Added new field if-cfg-loop-current in table analog-if-cfg-profile', 'Add ebs to zhoneValIfCfgLineType field.', 'V01.00.08 - Edited IfCfgImpedance field descriptions that ohmscomplex1 and ohmscomplex2 are Not Supported.', 'Deprecate zhonePotsRingTable. Move to zhoneVoiceRingTable in genVoiceStatMib.', 'Add zhonePotsRing table.', 'Changed zhoneVaIfCfgImpedance default value description from ohms900Complex to ohms600Complex.', 'Add default value descriptions for zhoneVAIfCfgImpedance, zhoneVAIffgReceivelp, zhoneVaIfCfgTransmitTlp.', 'zhoneVaIfEMCfgEntry change SignalType, CfgOperation and DialType from read-write to read-only', 'V01.00.02 - Removed Mark-Up for the zhoneVaIfFXSTimingDigitDuration and zhoneVaIfFXSTimingInterDigitDuration OIDs. Also added comment for the zhoneVaIfStatusSignalError OID.', 'V01.00.01 - Add DEFVAL for TruthValue types.', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: zhoneVoiceAnalogIf_MIB.setLastUpdated('200911171030Z')
if mibBuilder.loadTexts: zhoneVoiceAnalogIf_MIB.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhoneVoiceAnalogIf_MIB.setContactInfo('Postal: Zhone Technologies, Inc. @Zhone Way 7001 Oakport Oakland, Ca 94621 Toll-Free 877-ZHONE20 (+1 877-946-6320) Tel: +1 510-777-7000 Fax: +1 510-777-7001 Email: support@zhone.com ')
if mibBuilder.loadTexts: zhoneVoiceAnalogIf_MIB.setDescription("Analog Voice Interface MIB module. This MIB manages the E&M, FXO, FXS Interfaces in the Zhone's product. ")
zhoneVaIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 6))
zhoneVaIfGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1))
zhoneVaIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1), )
if mibBuilder.loadTexts: zhoneVaIfCfgTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgTable.setDescription('The Analog Voice Standard Configuration Table. It contains the standard configuration information of the analog telephony interface. ')
zhoneVaIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVaIfCfgEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgEntry.setDescription('An entry in the configuration table for each voice analog interface. The entry is created when the voice analog hardware is detected. ')
zhoneVaIfCfgImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ohms600Real", 2), ("ohms600Complex", 3), ("ohms900Complex", 4), ("ohmsComplex1", 5), ("ohmsComplex2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgImpedance.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgImpedance.setDescription('Specifies the terminating impedance of voice analog interfaces. other - none of the following; arbitrary, within limits, for special cases. ohms600Real - 600 Ohms. ohms600Complex - 600 Ohms + 2.16uF ohms900Complex - 900 Ohms + 2.16uF. ohmsComplex1 - Not Supported. ohmsComplex2 - Not Supported. Default value is ohms600Complex. ')
zhoneVaIfCfgReceiveTLP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("fxsRtlpN9db", 1), ("fxsRtlpN8db", 2), ("fxsRtlpN7db", 3), ("fxsRtlpN6db", 4), ("fxsRtlpN5db", 5), ("fxsRtlpN4db", 6), ("fxsRtlpN3db", 7), ("fxsRtlpN2db", 8), ("fxsRtlpN1db", 9), ("fxsRtlp0db", 10), ("fxsRtlp1db", 11), ("fxsRtlp2db", 12), ("fxsRtlp3db", 13), ("rTlpNummeric", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgReceiveTLP.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgReceiveTLP.setDescription(' Receive Transmission Level Point (RTLP) settings control the amount gain or loss added to the incoming signal after it is decoded to analog. to increase the signal level set the RTLP setting to higher values. The default is fxsRtlpN6db. Rtlpnummeric selects entering the actual value in zhoneVaIFCfgReceiveTLPNum.')
zhoneVaIfCfgTransmitTLP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("fxsTtlp9db", 1), ("fxsTtlp8db", 2), ("fxsTtlp7db", 3), ("fxsTtlp6db", 4), ("fxsTtlp5db", 5), ("fxsTtlp4db", 6), ("fxsTtlp3db", 7), ("fxsTtlp2db", 8), ("fxsTtlp1db", 9), ("fxsTtlp0db", 10), ("fxsTtlpN1db", 11), ("fxsTtlpN2db", 12), ("fxsTtlpN3db", 13), ("tTlpNummeric", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgTransmitTLP.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgTransmitTLP.setDescription(' In case of FXO, it specifies FXO attenuation and default value is 0dB(fxsTtlp0db). In case of FXS this setting controls the amount of gain or loss added to a voice signal from CPE before it is encoded to digital PCM. To increase the signal level, reduce the TTLP setting to lower value. The default is fxsTtlp0db. Ttlpnummeric selects entering the actual value in zhoneVaIFCfgTransmitTLPNum.')
zhoneVaIfCfgTrunkConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("idle", 2), ("busy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgTrunkConditioning.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgTrunkConditioning.setDescription(' The trunk conditioning setting specifies whether the FXS/FXO port should send the idle pattern to the network upon declaration of a Carrier Group Alarm(CGA) on the WAN link to which the port is assigned . In most cases leave the trunk conditioning setting at its default setting(off).')
zhoneVaIfCfgLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fxs", 1), ("fxo", 2), ("em", 3), ("ebs", 4))).clone('fxs')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfCfgLineType.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgLineType.setDescription('The Card type FXS, FXO, EM, EBS. Entries in the table will be created or deleted on the basis of zhoneVaIfCfgLineType in the zhoneVaIfCfgTable and we are not using rowStatus entry for this . The tables which are augument to the above mentioned table will be created by RP only and they can be read or modified by user later.')
zhoneVaIfCfgIntegratedDSP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfCfgIntegratedDSP.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgIntegratedDSP.setDescription('Indicates whether the interface has an integrated Digital Signal processing (DSP) unit. ')
zhoneVaIfCfgLineCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("fxs", 0), ("fxo", 1), ("em", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfCfgLineCapabilities.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgLineCapabilities.setDescription('The Interface types supported on this interface. This is a bit-map of possible types. This variable can be used to determine zhoneVaIfCfgLineType.')
zhoneVaIfCfgMaintenanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("ifDigitalLoopback", 2), ("ifAnalogLoopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgMaintenanceMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgMaintenanceMode.setDescription('Indicates the maintenance modes of the Analog voice interface. loopback options for Fxo and Fxs cards (Zhone specific) ------------------------------------------------------- CODEC T1/E1 DS0 --------------------------- <------- <--------------- ----------------- Network PCM Bus ^ Digital ^ | to analog Converter| | | | | | | Digital loopback Analog loopback | | -------> -------- ->---------------------------------------------> off(1) - the interface is not in maintenance mode. ifDigitalLoopback(2) This mode is set by the managed system to perform the Digital loopback test. ifAnalogLoopback(3) This mode is set by the managed system to perform the Analog loopback test. ')
zhoneVaIfCfgPCMEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alaw", 1), ("mulaw", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgPCMEncoding.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgPCMEncoding.setDescription('alaw(1) :for E1 mulaw(2) : for T1 ')
zhoneVaIfCfgReceiveTLPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-160, 85)).clone(0)).setUnits('dB/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgReceiveTLPNum.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgReceiveTLPNum.setDescription('Receive Transmission Level Point (RTLP) settings control the amount gain or loss added to the incoming signal after it is decoded to analog. to incrase the signal level set the RTLP setting to higher values. The default is 0 dB.')
zhoneVaIfCfgTransmitTLPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-175, 70))).setUnits('dB/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgTransmitTLPNum.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgTransmitTLPNum.setDescription('Transmit Transmission Level Point controls the amount of gain or loss added to a voice signal from CPE before it is encoded to digital PCM. To increase the signal level, reduce the TTLP setting to lower value. The default is 0dB.')
zhoneVaIfCfgLoopCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 44)).clone(30)).setUnits('mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgLoopCurrent.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgLoopCurrent.setDescription('To set the loop current value for a subscriber')
zhoneVaIfCfgRingVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b85vrms", 1), ("b75vrms", 2), ("b92vrms", 3))).clone('b85vrms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfCfgRingVoltage.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfCfgRingVoltage.setDescription('To set the ring voltage for a subscriber.')
zhoneVaIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 2), )
if mibBuilder.loadTexts: zhoneVaIfStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfStatusTable.setDescription('The Analog Voice Status Table. It contains general information about the status of Analog Telephony interface including the error statistics. ')
zhoneVaIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 2, 1), )
zhoneVaIfCfgEntry.registerAugmentions(("Zhone-VOICE-ANALOG-IF-MIB", "zhoneVaIfStatusEntry"))
zhoneVaIfStatusEntry.setIndexNames(*zhoneVaIfCfgEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneVaIfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfStatusEntry.setDescription('An entry in the status table for each Analog voice interface. ')
zhoneVaIfStatusSignalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfStatusSignalErrors.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfStatusSignalErrors.setDescription('Accumulated number of signaling protocol errors that are detected in the interface since system startup.')
zhoneVaIfStatusInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notype", 1), ("voice", 2), ("g3Fax", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfStatusInfoType.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfStatusInfoType.setDescription('The information transfer services for the current call. none - no information transfer service, this is set befgore the first call is made on the interface. voice - analog voice. g3Fax - Group 3 FAX. ')
zhoneVaIfFXSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2))
zhoneVaIfFXSCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 1), )
if mibBuilder.loadTexts: zhoneVaIfFXSCfgTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSCfgTable.setDescription('The FXS standard configuration table. It contains FXS configuration parameters, one entry per FXS interface. The configuration information of this table is set by hardware with its default setting or CLI during the hardware installation time. ')
zhoneVaIfFXSCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVaIfFXSCfgEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSCfgEntry.setDescription('An entry in the standard configuration table for each FXS interface.')
zhoneVaIfFXSCfgSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("fxsLoopStart", 1), ("fxsGroundStart", 2), ("fxsLoopStartFd", 3), ("fxsGroundStartAutomatic", 4), ("fxsGroundStartImmediate", 5), ("fxsdnLoopStart", 6), ("fxsdnLoopStartFd", 7), ("fxsdnGroundStart", 8), ("fxsdnGroundStartImmediate", 9), ("fxsdnwinkLoopStart", 10), ("fxsdnwinkLoopStartFd", 11), ("fxsdnwinkGroundStart", 12), ("fxsdnwinkGroundStartImmediate", 13), ("fxstr08SingleParty", 14), ("fxstr08UniversalVoiceGrade", 15), ("fxstr08UniversalVoiceGradeAutomatic", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXSCfgSignalType.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSCfgSignalType.setDescription('the signaling type of FXS interface. fxsLoopStart - loop start. fxsGroundStart - ground start. fxsLoopStartFd fxsGroundStartAutomatic - Used with equipment requiring fast response time to the Central Office. fxsGroundStartImmediate - Used with equipment requiring fast response time to the station or PBX. fxsdnLoopStart- loop start in fxsdn mode fxsdnLoopStartFd fxsdnGroundStart- Ground start in fxsdn mode fxsdnGroundStartImmediate - Ground start immediate in fxsdn mode fxsdnwinkLoopStart - loop start in fxsdnwink (foreign exchange subscriber - defined wink start operation) this option proved the same type of signalling as FXSDN and provides 150 millisecond delay then 200 ms wink ack to the central office when fxs port sees an off hook condition from central office . The system requires a ringing generator for this option. fxsdnwinkLoopStartFd fxsdnwinkGroundStart- Ground start in FXSDNWINK mode fxsdnwinkGroundStartImmediate - Ground start immediate in FXSDNWINK mode. fxstr08SingleParty - TR08 is Frame format signalling and data link as defined in TR-TSY-00008 Mode 1 for circuits using AT & T SLC-96 facilities. this option is for single party service , this option connects the port to one way out going trunks from a PBX , CENTEREX, key system , ot telephone set to an SLC channel. The SLC96 mode also must be active on the associated WAN interface. fxstr08UniversalVoiceGrade - Toll quality voice for SLC-96 fxstr08UniversalVoiceGradeAutomatic- Used with some non - Bell switches for SLC-96 The default value of this object is fxsLoopStart(1). ')
zhoneVaIfFXSRingFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ringFrequency25", 1), ("ringFrequency50", 2), ("ringFrequency20", 3), ("ringFrequency30", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXSRingFrequency.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSRingFrequency.setDescription('the ring frequency to be used in the FXS interface. ringFrequency25 - ring frequency 25 Hertz. ringFrequency50 - ring frequency 50 Hertz. ringFrequency20 - ring frequency 20 Hertz.(Default) ringFrequency30 - ring frequency 30 Hertz. ')
zhoneVaIfFXSRingBack = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXSRingBack.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSRingBack.setDescription('the ring back is requested if this variable is set to on.')
zhoneVaIfFXSStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 2), )
if mibBuilder.loadTexts: zhoneVaIfFXSStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSStatusTable.setDescription('The Foreign Exchange Station (FXS) interface Status Table. It contains hook status, ring active and other states of the interface. ')
zhoneVaIfFXSStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 2, 1), )
zhoneVaIfFXSCfgEntry.registerAugmentions(("Zhone-VOICE-ANALOG-IF-MIB", "zhoneVaIfFXSStatusEntry"))
zhoneVaIfFXSStatusEntry.setIndexNames(*zhoneVaIfFXSCfgEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneVaIfFXSStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSStatusEntry.setDescription('An entry in the status table for each FXS interface. ')
zhoneVaIfFXSHookStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onHook", 1), ("offHook", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfFXSHookStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSHookStatus.setDescription('This object contains the hook status of FXS interface. onHook - the connected equipment(e.g., phone) is onHook. offHook - the connected equipment is offHook. ')
zhoneVaIfFXSRingActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfFXSRingActive.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSRingActive.setDescription("This object contains the outgoing ring active indication. If the object value is true, then the interface is currently generating ring out to the Key Telephone System (KTS) or Plain Old Telephone (POT); otherwise, it doesn't. ")
zhoneVaIfFXSRingGround = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfFXSRingGround.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSRingGround.setDescription("This object contains the incoming ring ground indication. It is only valid when the zvaIfFXSCfgSignalType is fxsGroundStart. If the object is true, then the interface is presenting a ring ground to the connected equipment; otherwise, it doesn't. ")
zhoneVaIfFXSTipGround = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfFXSTipGround.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSTipGround.setDescription("This object contains the incoming tip ground indication. It is only valid when the zvaIfFXSCfgSignalType is fxsGroundStart. If the object is true, then the interface is detecting a tip ground at the interface; otherwise, it doesn't. ")
zhoneVaIfFXSTimingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 3), )
if mibBuilder.loadTexts: zhoneVaIfFXSTimingTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSTimingTable.setDescription('The FXS interface Timing Parameters table. It contains the configuration of the various FXS signaling protocol timing parameters. ')
zhoneVaIfFXSTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 3, 1), )
zhoneVaIfFXSCfgEntry.registerAugmentions(("Zhone-VOICE-ANALOG-IF-MIB", "zhoneVaIfFXSTimingEntry"))
zhoneVaIfFXSTimingEntry.setIndexNames(*zhoneVaIfFXSCfgEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneVaIfFXSTimingEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSTimingEntry.setDescription('An entry in the FXS Timing Parameters Table for each FXS interface.')
zhoneVaIfFXSTimingDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXSTimingDigitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSTimingDigitDuration.setDescription('Outgoing DTMF digit duration in milliseconds. The default value of this object is 100 milliseconds. This field is not supported. ')
zhoneVaIfFXSTimingInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXSTimingInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXSTimingInterDigitDuration.setDescription('Outgoing DTMF inter-digit duration in milliseconds. The default value of this object is 100 milliseconds. This field is not supported. ')
zhonePotsRingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 4), )
if mibBuilder.loadTexts: zhonePotsRingTable.setStatus('deprecated')
if mibBuilder.loadTexts: zhonePotsRingTable.setDescription('Table to execute diagnostic potsring command. Row in table with non-zero timer will ring pots port. Currently, maximum of 4 rows at a time are supported.')
zhonePotsRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 4, 1), ).setIndexNames((0, "Zhone-VOICE-ANALOG-IF-MIB", "zhonePotsRingIfIndex"))
if mibBuilder.loadTexts: zhonePotsRingEntry.setStatus('deprecated')
if mibBuilder.loadTexts: zhonePotsRingEntry.setDescription('potsring table entry')
zhonePotsRingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhonePotsRingIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: zhonePotsRingIfIndex.setDescription('Physical pots interface.')
zhonePotsRingRingingCadence = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ring-cadence-r0", 1), ("ring-cadence-r1", 2), ("ring-cadence-r2", 3), ("ring-cadence-r3", 4), ("ring-cadence-r4", 5), ("ring-cadence-r5", 6), ("ring-cadence-r6", 7), ("ring-cadence-r7", 8), ("ring-cadence-common", 9), ("ring-cadence-splash", 10))).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePotsRingRingingCadence.setStatus('deprecated')
if mibBuilder.loadTexts: zhonePotsRingRingingCadence.setDescription('Ring cadence to use in test.')
zhonePotsRingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePotsRingTimer.setStatus('deprecated')
if mibBuilder.loadTexts: zhonePotsRingTimer.setDescription('Time in seconds to continue ringing.')
zhonePotsRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 2, 4, 1, 4), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePotsRingRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: zhonePotsRingRowStatus.setDescription('Row status')
zhoneVaIfFXOObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3))
zhoneVaIfFXOCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 1), )
if mibBuilder.loadTexts: zhoneVaIfFXOCfgTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOCfgTable.setDescription('The FXO standard configuration table. It contains FXO configuration parameters, one entry per FXO interface. The configuration information of this table is set by hardware with its default setting or CLI during the hardware installation time. ')
zhoneVaIfFXOCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVaIfFXOCfgEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOCfgEntry.setDescription('An entry in the standard configuration table for each FXO interface.')
zhoneVaIfFXOCfgSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fxoLoopStart", 1), ("fxoGroundStart", 2), ("fxodpt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXOCfgSignalType.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOCfgSignalType.setDescription('the signaling type of FXO interface. fxoLoopStart - loop start. fxoGroundStart - ground start. fxodpt- Dial Pulse Terminating , this option allows the unit to attach to incoming one way trunks from a PBX , key system or a telephone set.. The default value of this object is fxoLoopStart(1). ')
zhoneVaIfFXOCfgNumberRings = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXOCfgNumberRings.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOCfgNumberRings.setDescription('The number of rings detected before closing loop. The default value of this object is 1 ring.')
zhoneVaIfFXOCfgSupDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXOCfgSupDisconnect.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOCfgSupDisconnect.setDescription(" Specifies whether a supervisory disconnect signal (CPC) will be presented to the interface when the connected party at the interface hangs up. The default value of this object is 'true'. ")
zhoneVaIfFXOCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXOCfgDialType.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOCfgDialType.setDescription('Specifies the out dialing type of FXO interface. dtmf - DTMF digit. pulse - pulse. The default value of this object is dtmf(1). ')
zhoneVaIfFXOStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 2), )
if mibBuilder.loadTexts: zhoneVaIfFXOStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOStatusTable.setDescription('The Foreign Exchange Office (FXO) interface Status Table. It contains hook status, ring detection and other states of the interface. ')
zhoneVaIfFXOStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 2, 1), )
zhoneVaIfFXOCfgEntry.registerAugmentions(("Zhone-VOICE-ANALOG-IF-MIB", "zhoneVaIfFXOStatusEntry"))
zhoneVaIfFXOStatusEntry.setIndexNames(*zhoneVaIfFXOCfgEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneVaIfFXOStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOStatusEntry.setDescription('An entry in the status table for each FXO interface. ')
zhoneVaIfFXOHookStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onHook", 1), ("offHook", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfFXOHookStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOHookStatus.setDescription('This object contains the hook status of FXO interface. onHook - Present the onHook to the connected equipment. offHook - Present the offHook to the connected equipment. ')
zhoneVaIfFXORingDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfFXORingDetect.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXORingDetect.setDescription("This object contains the ring detect indication. If the value is true, then the interface detects ring from PBX or CO; otherwise, it doesn't.")
zhoneVaIfFXORingGround = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfFXORingGround.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXORingGround.setDescription("This object contains the incoming ring ground indication. It is only valid when the zvaIfFXOCfgSignalType is fxoGroundStart. If the object is true, then the interface is presenting a ring ground to the connected equipment; otherwise, it doesn't. ")
zhoneVaIfFXOTipGround = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfFXOTipGround.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOTipGround.setDescription("This object contains the incoming tip ground indication. It is only valid when the zvaIfFXOCfgSignalType is fxoGroundStart. If the object is true, then the interface is detecting a tip ground at the interface; otherwise, it doesn't. ")
zhoneVaIfFXOTimingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 3), )
if mibBuilder.loadTexts: zhoneVaIfFXOTimingTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOTimingTable.setDescription('The FXO interface Timing Parameters table. It contains the configuration of the various FXO signaling protocol timing parameters. ')
zhoneVaIfFXOTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 3, 1), )
zhoneVaIfFXOCfgEntry.registerAugmentions(("Zhone-VOICE-ANALOG-IF-MIB", "zhoneVaIfFXOTimingEntry"))
zhoneVaIfFXOTimingEntry.setIndexNames(*zhoneVaIfFXOCfgEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneVaIfFXOTimingEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOTimingEntry.setDescription('An entry in the FXO Timing Parameters Table for each FXO interface.')
zhoneVaIfFXOTimingDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXOTimingDigitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOTimingDigitDuration.setDescription('Outgoing DTMF digit duration in milliseconds. The default value of this object is 100 msec. ')
zhoneVaIfFXOTimingInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXOTimingInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOTimingInterDigitDuration.setDescription('Outgoing DTMF inter-digit duration in milliseconds. The default value of this object is 100 msec. ')
zhoneVaIfFXOTimingPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXOTimingPulseRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOTimingPulseRate.setDescription('Outgoing pulse dialing rate in pulses per second (pps). The default value of this object is 10 pps. ')
zhoneVaIfFXOTimingPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfFXOTimingPulseInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfFXOTimingPulseInterDigitDuration.setDescription('Outgoing pulse dialing inter-digit timing in milliseconds. The default value of this object is 500 milliseconds. ')
zhoneVaIfEMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4))
zhoneVaIfEMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 1), )
if mibBuilder.loadTexts: zhoneVaIfEMCfgTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMCfgTable.setDescription('The E&M standard configuration table. It contains the current setting of E&M configurable parameters. ')
zhoneVaIfEMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVaIfEMCfgEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMCfgEntry.setDescription('An entry in the standard configuration table for each E&M tie trunk interface.')
zhoneVaIfEMCfgSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("winkStart", 1), ("immediateDial", 2), ("delayDial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfEMCfgSignalType.setReference('EIA/TIA-464B: Sections 4.1.3.4.1 Signaling Protocols. ')
if mibBuilder.loadTexts: zhoneVaIfEMCfgSignalType.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMCfgSignalType.setDescription("The signaling type of E&M tie trunk interface. winkStart - the calling side seizes the line by going off-hook on its E lead but waits for a short off-hook 'wink' indication on its M lead from the called side before sending address information as DTMF digits. immediateDial - the calling side seizes the line by going off-hook on its E lead and sends sends address information as DTMF digits. delayDial - the calling side seizes the line by going off-hook on its E lead. After a timing interval, the calling side looks at the supervision from the called side. If the supervision is on-hook, the calling side starts sending information as DTMF digits; otherwise, the calling side waits until the called side goes on-hook and then starts sending address information. The default value of this object is winkStart(1). ")
zhoneVaIfEMCfgOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoWires", 1), ("fourWires", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfEMCfgOperation.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMCfgOperation.setDescription('Specify the operation of the E&M signal. twoWires - 2-wire operation. fourWires - 4-wire operation. The default value of this object is twoWires(1). ')
zhoneVaIfEMCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("typeI", 1), ("typeII", 2), ("typeIII", 3), ("typeIV", 4), ("typeV", 5), ("typeIIE", 6), ("typeIIM", 7), ("typeTO", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMCfgType.setReference('EIA/TIA-464B: Sections 4.2.3 E&M Lead Signaling. ')
if mibBuilder.loadTexts: zhoneVaIfEMCfgType.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMCfgType.setDescription('Specifies the E&M Lead Signaling type. LEGEND: V = -48V /\\/\\/ = detector/resister X = normally open relay contact + = normally closed relay contact G = ground SB = Signal Battery SG = Signal Ground typeI - Leads: E (output, relay to ground) M (input, referenced to ground) The tie line equipment (switch/router/etc) generates the E-signal to the PBX type grounding the E-lead. The tie line equipment detects the M-signal by detecting current flow to ground. A common ground must exist between the line equipment and the PBX. PBX | TIE LINE | E: V--/\\/\\/---|-----X----G | M: V----X-----|---/\\/\\/--G typeII - Leads: E (output, relay to SG) M (input, referenced to ground) SB (feed for M, connected to -48V) SG (return for E, galvanically isolated from ground) This interface requires no common ground between the equipment, thus avoiding ground loop noise problems. E-signal is generated toward the PBX by connecting it to SG. M-signal is indicated by the PBX connecting it to SB. While this interface does NOT require a common ground, it does have the tendency to inject noise into the audio paths since it is asymmetrical with respect to current flow between devices. PBX | TIE LINE | E: V--/\\/\\/---|-----X---- | | SG: G----------|---------- | M: ----X-----|---/\\/\\/--G | | SB: ----------|----------V typeIII - Leads: E (output, relay to ground) M (input, referenced to ground) SB (connected to -48V) SG (connected to ground) This interface operates similar to type I with respect to the E-signal. The M-signal, however, is indicated by the PBX connecting it to SB on assertion, and alternately connecting it to SG during inactivity. Unfortunately, a common ground must be shared between the equipment. PBX | TIE LINE | E: V--/\\/\\/---|-----X----G | SG: ----------|----------G + | M: ----------|---/\\/\\/--G X | SB: ----------|----------V typeIV - Leads: E (output, relay to SG) M (input, referenced to -48V) SB (feed for M, connected to ground) SG (return for E, galvanically isolated from ground) This interface is fully symmetrical; it does not require a common ground, does not inject noise into audio paths, and can be connected back to back by swapping E/SG for M/SB. E-signal is indicated to the PBX by connecting it to SG. M-signal is provided by the PBX connecting it to SB. PBX | TIE LINE | E: V--/\\/\\/---|-----X---- | | SG: G----------|---------- | M: ----------|---/\\/\\/--V X | SB: ----------|----------G typeV - Leads: E (output, relay to ground) M (input, referenced to -48V) Type V line equipment indicates E-signal to the PBX by grounding the E-lead. The PBX indicates M-signal by grounding the M-lead. This interface does require a common ground, but does allow back to back connections by swapping E for M. This interface is quasi-symmetric in that while the line is up, current flow is more or less equal between the PBX and line equipment. But noise injection is still a problem. PBX | TIE LINE | E: V--/\\/\\/---|-----X----G | M: G-----X----|---/\\/\\/--V | The default value of this object is typeI(1). ')
zhoneVaIfEMCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfEMCfgDialType.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMCfgDialType.setDescription('Specifies the out dialing type of E&M interface. dtmf - DTMF digit. pulse - pulse. The default value of this object is dtmf(1). ')
zhoneVaIfEMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 2), )
if mibBuilder.loadTexts: zhoneVaIfEMStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMStatusTable.setDescription('The E&M interface Table. The table contains the status of the E&M tie trunk interface. ')
zhoneVaIfEMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 2, 1), )
zhoneVaIfEMCfgEntry.registerAugmentions(("Zhone-VOICE-ANALOG-IF-MIB", "zhoneVaIfEMStatusEntry"))
zhoneVaIfEMStatusEntry.setIndexNames(*zhoneVaIfEMCfgEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneVaIfEMStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMStatusEntry.setDescription('An entry in the status table for each E&M interface. ')
zhoneVaIfEMInSeizureActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfEMInSeizureActive.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMInSeizureActive.setDescription("This object contains the incoming seizure state of the E&M interface. If the value is true, then the interface has an incoming trunk seizure active; otherwise, it doesn't. ")
zhoneVaIfEMOutSeizureActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVaIfEMOutSeizureActive.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMOutSeizureActive.setDescription("This object contains the outgoing seizure state of the E&M interface. If the value is true, then the interface has an outgoing trunk seizure active; otherwise, it doesn't. ")
zhoneVaIfEMTimingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3), )
if mibBuilder.loadTexts: zhoneVaIfEMTimingTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingTable.setDescription('The E&M tie trunk Timing Parameters table. It contains the configuration of the various E&M signaling protocol timing parameters. ')
zhoneVaIfEMTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1), )
zhoneVaIfEMCfgEntry.registerAugmentions(("Zhone-VOICE-ANALOG-IF-MIB", "zhoneVaIfEMTimingEntry"))
zhoneVaIfEMTimingEntry.setIndexNames(*zhoneVaIfEMCfgEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneVaIfEMTimingEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingEntry.setDescription('An entry in the E&M Timing Parameters Table for each E&M interface.')
zhoneVaIfEMTimingDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingDigitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingDigitDuration.setDescription('Outgoing DTMF digit duration in milliseconds. The default value of this object is 100 milliseconds. ')
zhoneVaIfEMTimingInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingInterDigitDuration.setDescription('Outgoing DTMF inter-digit duration in milliseconds. The default value of this object is 100 milliseconds. ')
zhoneVaIfEMTimingPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setUnits('pps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingPulseRate.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingPulseRate.setDescription('Outgoing pulse dialing rate in pulses per second (pps). The default value of this object is 10 pps. ')
zhoneVaIfEMTimingPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingPulseInterDigitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingPulseInterDigitDuration.setDescription('Outgoing Pulse dialing inter-digit timing in milliseconds. The default value of this object is 500 milliseconds. ')
zhoneVaIfEMTimingClearWaitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 2000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingClearWaitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingClearWaitDuration.setDescription('Time of Inactive seizure signal to declare call cleared. The default value of this object is 400 milliseconds.')
zhoneVaIfEMTimingMaxWinkWaitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingMaxWinkWaitDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingMaxWinkWaitDuration.setDescription('Maximum time to wait from the outgoing seizure of the line to the time of sending out a wink-pulse. The default value of this object is 200 milliseconds.')
zhoneVaIfEMTimingMaxWinkDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingMaxWinkDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingMaxWinkDuration.setDescription('Maximum outgoing wink duration (between the wink-pulse leading edge and trailing edge) for wink start signaling. The default value of this object is 200 milliseconds.')
zhoneVaIfEMTimingDelayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 2000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingDelayStart.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingDelayStart.setDescription('Minimum time to wait from outgoing seizure to out-dialing digits for delay start signaling. The default value of this object is 300 milliseconds. ')
zhoneVaIfEMTimingMaxDelayDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingMaxDelayDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingMaxDelayDuration.setDescription('Maximum time to wait from outgoing seizure to out-dialing digits. If the far end does not allow to send digits after the duration specified in the object, a reorder tone will be sent to the calling party. The default value of this object is 2000 milliseconds.')
zhoneVaIfEMTimingMinDelayPulseWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 6, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(140, 5000), ))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVaIfEMTimingMinDelayPulseWidth.setStatus('current')
if mibBuilder.loadTexts: zhoneVaIfEMTimingMinDelayPulseWidth.setDescription('Minimum delay-dial pulse duration for incoming call. If the value of this object is 0, then no delay-dial is sent to the far end for the incoming call. The default value of this object is 140 milliseconds.')
mibBuilder.exportSymbols("Zhone-VOICE-ANALOG-IF-MIB", zhoneVaIfFXSCfgSignalType=zhoneVaIfFXSCfgSignalType, zhoneVaIfFXOCfgDialType=zhoneVaIfFXOCfgDialType, zhonePotsRingRowStatus=zhonePotsRingRowStatus, zhoneVaIfCfgReceiveTLPNum=zhoneVaIfCfgReceiveTLPNum, zhoneVaIfCfgImpedance=zhoneVaIfCfgImpedance, zhonePotsRingEntry=zhonePotsRingEntry, zhoneVaIfFXOTimingInterDigitDuration=zhoneVaIfFXOTimingInterDigitDuration, zhoneVaIfEMTimingTable=zhoneVaIfEMTimingTable, zhoneVoiceAnalogIf_MIB=zhoneVoiceAnalogIf_MIB, zhonePotsRingTimer=zhonePotsRingTimer, zhoneVaIfFXOCfgSupDisconnect=zhoneVaIfFXOCfgSupDisconnect, zhoneVaIfEMTimingPulseInterDigitDuration=zhoneVaIfEMTimingPulseInterDigitDuration, zhoneVaIfEMCfgType=zhoneVaIfEMCfgType, zhoneVaIfEMCfgSignalType=zhoneVaIfEMCfgSignalType, zhoneVaIfFXOTimingEntry=zhoneVaIfFXOTimingEntry, zhoneVaIfEMCfgDialType=zhoneVaIfEMCfgDialType, zhoneVaIfEMTimingMaxDelayDuration=zhoneVaIfEMTimingMaxDelayDuration, zhoneVaIfEMTimingClearWaitDuration=zhoneVaIfEMTimingClearWaitDuration, zhoneVaIfFXSTimingDigitDuration=zhoneVaIfFXSTimingDigitDuration, zhoneVaIfFXSObjects=zhoneVaIfFXSObjects, zhoneVaIfFXOHookStatus=zhoneVaIfFXOHookStatus, zhoneVaIfEMTimingEntry=zhoneVaIfEMTimingEntry, zhoneVaIfEMCfgEntry=zhoneVaIfEMCfgEntry, zhoneVaIfEMStatusEntry=zhoneVaIfEMStatusEntry, zhoneVaIfCfgReceiveTLP=zhoneVaIfCfgReceiveTLP, zhoneVaIfFXOStatusEntry=zhoneVaIfFXOStatusEntry, zhoneVaIfStatusInfoType=zhoneVaIfStatusInfoType, zhoneVaIfCfgTransmitTLP=zhoneVaIfCfgTransmitTLP, zhoneVaIfStatusTable=zhoneVaIfStatusTable, zhoneVaIfGeneralObjects=zhoneVaIfGeneralObjects, zhoneVaIfFXSTimingInterDigitDuration=zhoneVaIfFXSTimingInterDigitDuration, zhoneVaIfCfgLoopCurrent=zhoneVaIfCfgLoopCurrent, zhoneVaIfEMCfgTable=zhoneVaIfEMCfgTable, zhoneVaIfFXSStatusTable=zhoneVaIfFXSStatusTable, zhoneVaIfCfgTrunkConditioning=zhoneVaIfCfgTrunkConditioning, zhoneVaIfCfgMaintenanceMode=zhoneVaIfCfgMaintenanceMode, zhoneVaIfEMOutSeizureActive=zhoneVaIfEMOutSeizureActive, zhoneVaIfCfgTable=zhoneVaIfCfgTable, zhoneVaIfFXOCfgNumberRings=zhoneVaIfFXOCfgNumberRings, zhoneVaIfFXSTimingTable=zhoneVaIfFXSTimingTable, zhoneVaIfFXOStatusTable=zhoneVaIfFXOStatusTable, zhoneVaIfEMObjects=zhoneVaIfEMObjects, zhonePotsRingTable=zhonePotsRingTable, zhoneVaIfStatusSignalErrors=zhoneVaIfStatusSignalErrors, zhoneVaIfFXSRingBack=zhoneVaIfFXSRingBack, zhoneVaIfEMStatusTable=zhoneVaIfEMStatusTable, zhoneVaIfFXOCfgSignalType=zhoneVaIfFXOCfgSignalType, zhoneVaIfFXORingGround=zhoneVaIfFXORingGround, PYSNMP_MODULE_ID=zhoneVoiceAnalogIf_MIB, zhoneVaIfObjects=zhoneVaIfObjects, zhoneVaIfFXSStatusEntry=zhoneVaIfFXSStatusEntry, zhoneVaIfFXORingDetect=zhoneVaIfFXORingDetect, zhoneVaIfEMTimingPulseRate=zhoneVaIfEMTimingPulseRate, zhoneVaIfFXSTipGround=zhoneVaIfFXSTipGround, zhoneVaIfFXOTimingPulseInterDigitDuration=zhoneVaIfFXOTimingPulseInterDigitDuration, zhoneVaIfCfgRingVoltage=zhoneVaIfCfgRingVoltage, zhoneVaIfEMTimingMaxWinkWaitDuration=zhoneVaIfEMTimingMaxWinkWaitDuration, zhoneVaIfFXOTimingDigitDuration=zhoneVaIfFXOTimingDigitDuration, zhoneVaIfCfgLineCapabilities=zhoneVaIfCfgLineCapabilities, zhoneVaIfFXSHookStatus=zhoneVaIfFXSHookStatus, zhoneVaIfEMTimingInterDigitDuration=zhoneVaIfEMTimingInterDigitDuration, zhoneVaIfFXSRingActive=zhoneVaIfFXSRingActive, zhoneVaIfCfgLineType=zhoneVaIfCfgLineType, zhoneVaIfFXOCfgEntry=zhoneVaIfFXOCfgEntry, zhoneVaIfEMTimingDigitDuration=zhoneVaIfEMTimingDigitDuration, zhoneVaIfEMTimingMaxWinkDuration=zhoneVaIfEMTimingMaxWinkDuration, zhoneVaIfEMCfgOperation=zhoneVaIfEMCfgOperation, zhoneVaIfFXSRingGround=zhoneVaIfFXSRingGround, zhoneVaIfFXOObjects=zhoneVaIfFXOObjects, zhoneVaIfCfgTransmitTLPNum=zhoneVaIfCfgTransmitTLPNum, zhoneVaIfFXSTimingEntry=zhoneVaIfFXSTimingEntry, zhonePotsRingIfIndex=zhonePotsRingIfIndex, zhoneVaIfCfgPCMEncoding=zhoneVaIfCfgPCMEncoding, zhonePotsRingRingingCadence=zhonePotsRingRingingCadence, zhoneVaIfEMInSeizureActive=zhoneVaIfEMInSeizureActive, zhoneVaIfEMTimingDelayStart=zhoneVaIfEMTimingDelayStart, zhoneVaIfCfgIntegratedDSP=zhoneVaIfCfgIntegratedDSP, zhoneVaIfFXOCfgTable=zhoneVaIfFXOCfgTable, zhoneVaIfCfgEntry=zhoneVaIfCfgEntry, zhoneVaIfFXSCfgEntry=zhoneVaIfFXSCfgEntry, zhoneVaIfFXSRingFrequency=zhoneVaIfFXSRingFrequency, zhoneVaIfFXSCfgTable=zhoneVaIfFXSCfgTable, zhoneVaIfFXOTimingPulseRate=zhoneVaIfFXOTimingPulseRate, zhoneVaIfEMTimingMinDelayPulseWidth=zhoneVaIfEMTimingMinDelayPulseWidth, zhoneVaIfFXOTimingTable=zhoneVaIfFXOTimingTable, zhoneVaIfStatusEntry=zhoneVaIfStatusEntry, zhoneVaIfFXOTipGround=zhoneVaIfFXOTipGround)
