#
# PySNMP MIB module MITEL-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MITEL-DHCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, enterprises, Bits, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Counter64, TimeTicks, iso, NotificationType, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "enterprises", "Bits", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Counter64", "TimeTicks", "iso", "NotificationType", "Integer32", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
mitelRouterDhcpGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3))
mitelRouterDhcpGroup.setRevisions(('2005-11-07 12:00', '2003-03-21 12:31', '1999-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mitelRouterDhcpGroup.setRevisionsDescriptions(('Addition of vendor-specific-information Table', 'Update to SMIv2', 'DHCP MIB Version 1.0',))
if mibBuilder.loadTexts: mitelRouterDhcpGroup.setLastUpdated('200511071200Z')
if mibBuilder.loadTexts: mitelRouterDhcpGroup.setOrganization('MITEL Corporation')
if mibBuilder.loadTexts: mitelRouterDhcpGroup.setContactInfo('Standards Group, Postal: MITEL Corporation 350 Legget Drive, PO Box 13089 Kanata, Ontario Canada K2K 1X3 Tel: +1 613 592 2122 Fax: +1 613 592 4784 E-mail: std@mitel.com')
if mibBuilder.loadTexts: mitelRouterDhcpGroup.setDescription('The MITEL DHCP MIB module.')
class MitelDhcpServerProtocol(TextualConvention, Integer32):
    description = 'The MITEL-defined DHCP Protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3), ("bootp-or-dhcp", 4))

class MitelDhcpServerOptionList(TextualConvention, Integer32):
    description = 'The MITEL-defined DHCP Options.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 1))
    namedValues = NamedValues(("time-offset", 2), ("default-router", 3), ("time-server", 4), ("name-server", 5), ("dns-server", 6), ("log-server", 7), ("cookie-server", 8), ("lpr-server", 9), ("impress-server", 10), ("resource-location-server", 11), ("host-name", 12), ("boot-file-size", 13), ("merit-dump-file-name", 14), ("domain-name", 15), ("swap-server", 16), ("root-path", 17), ("extension-path", 18), ("ip-forwarding", 19), ("non-local-source-routing", 20), ("policy-filter", 21), ("max-datagram-reassembly", 22), ("default-ip-time-to-live", 23), ("path-MTU-aging-timeout", 24), ("path-MTU-plateau-table", 25), ("interface-MTU-value", 26), ("all-subnets-are-local", 27), ("broadcast-address", 28), ("perform-mask-discovery", 29), ("mask-supplier", 30), ("perform-router-discovery", 31), ("router-solicitation-address", 32), ("static-route", 33), ("trailer-encapsulation", 34), ("arp-cache-timeout", 35), ("ethernet-encapsulation", 36), ("tcp-default-ttl", 37), ("tcp-keepalive-interval", 38), ("tcp-keepalive-garbage", 39), ("nis-domain-name", 40), ("nis-server", 41), ("ntp-server", 42), ("vendor-specific-information", 43), ("netbios-ip-name-server", 44), ("netbios-ip-dgram-distrib-server", 45), ("netbios-ip-node-type", 46), ("netbios-ip-scope", 47), ("x-window-font-server", 48), ("x-window-display-manager", 49), ("nis-plus-domain", 64), ("nis-plus-server", 65), ("tftp-server-name", 66), ("bootfile-name", 67), ("mobile-ip-home-agent", 68), ("smtp-server", 69), ("pop3-server", 70), ("nntp-server", 71), ("www-server", 72), ("finger-server", 73), ("irc-server", 74), ("streettalk-server", 75), ("streettalk-directory-assistance-server", 76), ("requested-ip", 50), ("lease-time", 51), ("option-overload", 52), ("message-type", 53), ("server-identifier", 54), ("parameter-request-list", 55), ("message", 56), ("max-dhcp-message-size", 57), ("renewal-time-value-t1", 58), ("rebinding-time-value-t2", 59), ("vendor-class-identifier", 60), ("client-identifier", 61), ("subnet-mask", 1))

mitel = MibIdentifier((1, 3, 6, 1, 4, 1, 1027))
mitelProprietary = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4))
mitelPropIpNetworking = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8))
mitelIpNetRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1))
mitelIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 1))
mitelIdCallServers = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 1, 2))
mitelIdCsIpera1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 1, 2, 4))
mitelDhcpRelayAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpRelayAgentEnable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpRelayAgentEnable.setDescription('Configures the router to enable the DHCP/BOOTP relay agent. The default is disabled.')
mitelDhcpRelayAgentMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpRelayAgentMaxHops.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpRelayAgentMaxHops.setDescription('This object determines the maximum allowed value the hops field of the received DHCP/BOOTP packet can have. Packets with higher values will be rejected.')
mitelDhcpRelayAgentBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpRelayAgentBroadcast.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpRelayAgentBroadcast.setDescription('Determines wether or not the DHCP Relay Agent should retransmit received BOOTP requests using local broadcast on each IP interface. The default is disabled.')
mitelDhcpRelayAgentServerTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 3), )
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerTable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerTable.setDescription('This table is used to display and configure the list of servers to which the relay agent will relay DHCP/BOOTP REQUEST packets.')
mitelDhcpRelayAgentServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 3, 1), ).setIndexNames((0, "MITEL-DHCP-MIB", "mitelDhcpRelayAgentServerAddr"))
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerEntry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerEntry.setDescription('Each entry in this table contains information on a DHCP/BOOTP server.')
mitelDhcpRelayAgentServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerAddr.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerAddr.setDescription('The IP address of the DHCP/BOOTP server.')
mitelDhcpRelayAgentServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerName.setDescription("This object indicates the associated name of the DHCP/BOOTP server. It's main purpose is to be used as a reference name.")
mitelDhcpRelayAgentServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerStatus.setReference('Textual Conventions for Version 2 of the Simple Network Management Protocol (RFC 1443).')
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerStatus.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpRelayAgentServerStatus.setDescription('The current status of this entry.')
mitelDhcpServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5))
mitelDhcpServerGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 1))
mitelDhcpServerGeneralEnable = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("autoconfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerGeneralEnable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerGeneralEnable.setDescription('Configures the router to enable the DHCP/BOOTP server The default is disabled.')
mitelDhcpServerGeneralGateway = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("this-if-first", 1), ("this-if-last", 2), ("not-this-if", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerGeneralGateway.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerGeneralGateway.setDescription('Determines wether or not the local IP address associated with the interface on which the DHCP request was received should be advertised as a default gateway, and if yes with which priority.')
mitelDhcpServerGeneralRefDhcpServer = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerGeneralRefDhcpServer.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerGeneralRefDhcpServer.setDescription('Indicates if unknown requested options values should be obtained from another DHCP server (if possible). Adequate values are: - a specific IP address of a known DHCP server - a IP address specifiying the interface on which the DHCP server should be found (using broadcast). i.e. 0.0.0.x where x is the interface logical ID. - 255.255.255.255: broadcast on all interfaces. - 0.0.0.0: the feature is disabled.')
mitelDhcpServerGeneralPingStatus = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerGeneralPingStatus.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerGeneralPingStatus.setDescription('Enable/disable PING server functionality when passing out leases.')
mitelDhcpServerSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2), )
if mibBuilder.loadTexts: mitelDhcpServerSubnetTable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetTable.setDescription('This table is used to configure the group of IP addresses that can be handed out by the DHCP server.')
mitelDhcpServerSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2, 1), ).setIndexNames((0, "MITEL-DHCP-MIB", "mitelDhcpServerSubnetAddr"), (0, "MITEL-DHCP-MIB", "mitelDhcpServerSubnetSharedNet"))
if mibBuilder.loadTexts: mitelDhcpServerSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetEntry.setDescription('Each entry in this table contains information on a subnet serverd by the DHCP server.')
mitelDhcpServerSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerSubnetAddr.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetAddr.setDescription('The IP address of the subnet (key).')
mitelDhcpServerSubnetSharedNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerSubnetSharedNet.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetSharedNet.setDescription('The IP address of another subnet that is on the same shared media as this subnet. The address of the shared subnet MUST also be configured on this server. The address 0.0.0.0 should be used if this subnet is not shared. (key)')
mitelDhcpServerSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerSubnetMask.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetMask.setDescription('The subnet mask of the subnet.')
mitelDhcpServerSubnetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("this-if-first", 1), ("this-if-last", 2), ("not-this-if", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerSubnetGateway.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetGateway.setDescription('Indicate whether or not the IP address configured on the interface which received the DHCP request should be advertised as a default gateway. If yes, this also indicate the relative priority compared to additional gateways that might be configured (DHCP option 3).')
mitelDhcpServerSubnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerSubnetName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetName.setDescription('The name of the configured subnet (informational only).')
mitelDhcpServerSubnetDeleteTree = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerSubnetDeleteTree.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetDeleteTree.setDescription('If this flag is set to enable, when the object is deleted, all the DHCP server configuration objects that depend on it will be deleted at the same time.')
mitelDhcpServerSubnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelDhcpServerSubnetStatus.setReference('Textual Conventions for Version 2 of the Simple Network Management Protocol (RFC 1443).')
if mibBuilder.loadTexts: mitelDhcpServerSubnetStatus.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerSubnetStatus.setDescription('The current status of this entry.')
mitelDhcpServerRangeTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3), )
if mibBuilder.loadTexts: mitelDhcpServerRangeTable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeTable.setDescription('A list of ranges that are configured on this server.')
mitelDhcpServerRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1), ).setIndexNames((0, "MITEL-DHCP-MIB", "mitelDhcpServerRangeStart"), (0, "MITEL-DHCP-MIB", "mitelDhcpServerRangeEnd"), (0, "MITEL-DHCP-MIB", "mitelDhcpServerRangeSubnet"))
if mibBuilder.loadTexts: mitelDhcpServerRangeEntry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeEntry.setDescription('A logical row in the mitelServerGrpRangeTblTable.')
mitelDhcpServerRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerRangeStart.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeStart.setDescription('The IP address of the first address in the range (key).')
mitelDhcpServerRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerRangeEnd.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeEnd.setDescription('The IP address of the last address in the range.')
mitelDhcpServerRangeSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerRangeSubnet.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeSubnet.setDescription('The IP address of the subnet which includes this range. This IP address is used to find the corresponding mitelDhcpServerSubnetEntry')
mitelDhcpServerRangeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 4), MitelDhcpServerProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerRangeProtocol.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeProtocol.setDescription('How the addresses in that group should be assigned. none = the address are reserved by the administrator (do we need this ?).')
mitelDhcpServerRangeGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("this-if-first", 1), ("this-if-last", 2), ("not-this-if", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerRangeGateway.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeGateway.setDescription('Indicate whether or not the IP address configured on the interface which received the DHCP request should be advertised as a default gateway. If yes, this also indicate the relative priority compared to additional gateways that might be configured (DHCP option 3).')
mitelDhcpServerRangeLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerRangeLeaseTime.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeLeaseTime.setDescription('The duration of the lease of IP addressed in this range in seconds. A value of 4294967295 (0xFFFFFFFF) means that the lease is permanent. A value of 0 (0x00000000) means that the address in that range can not be assigned.')
mitelDhcpServerRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerRangeName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeName.setDescription('The name of the configured range (informational only).')
mitelDhcpServerRangeMatchClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerRangeMatchClassId.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeMatchClassId.setDescription('If this flag is set to enable, IP addresses in this range will only be assigned to clients indicating a class ID identical to the range name.')
mitelDhcpServerRangeDeleteTree = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerRangeDeleteTree.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeDeleteTree.setDescription('If this flag is set to enable, when the object is deleted, all the DHCP server configuration objects that depend on it will be deleted at the same time.')
mitelDhcpServerRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelDhcpServerRangeStatus.setReference('Textual Conventions for Version 2 of the Simple Network Management Protocol (RFC 1443).')
if mibBuilder.loadTexts: mitelDhcpServerRangeStatus.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerRangeStatus.setDescription('The current status of this entry.')
mitelDhcpServerStaticIpTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4), )
if mibBuilder.loadTexts: mitelDhcpServerStaticIpTable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpTable.setDescription('A list of the addresses that are statically configured.')
mitelDhcpServerStaticIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1), ).setIndexNames((0, "MITEL-DHCP-MIB", "mitelDhcpServerStaticIpAddr"), (0, "MITEL-DHCP-MIB", "mitelDhcpServerStaticIpSubnet"))
if mibBuilder.loadTexts: mitelDhcpServerStaticIpEntry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpEntry.setDescription('A logical row in the mitelDhcpServerStaticIpTable.')
mitelDhcpServerStaticIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpAddr.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpAddr.setDescription('The IP address of the entry (key). This IP address has to be unique across the DHCP server configuration. It can not be duplicated in another mitelDhcpServerStaticIpEntry and it can not be part of a mitelDhcpServerRangeEntry.')
mitelDhcpServerStaticIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpSubnet.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpSubnet.setDescription('The IP address of the subnet which includes this IP address. This IP address is used to find the corresponding mitelDhcpServerSubnetEntry')
mitelDhcpServerStaticIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 3), MitelDhcpServerProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpProtocol.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpProtocol.setDescription('How the addresses in that group should be assigned. none = the address are reserved by the administrator (do we need this ?).')
mitelDhcpServerStaticIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("this-if-first", 1), ("this-if-last", 2), ("not-this-if", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpGateway.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpGateway.setDescription('Indicate whether or not the IP address configured on the interface which received the DHCP request should be advertised as a default gateway. If yes, this also indicate the relative priority compared to additional gateways that might be configured (DHCP option 3).')
mitelDhcpServerStaticIpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpMacAddress.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpMacAddress.setDescription("The hardware type and hardware address of the client that has been assigned this IP address. The first octet of this object contains the hardware type from the 'htype' field of the BOOTP packet and the remaining octets contain the hardware address from the 'chaddr' field of the BOOTP packet. Either the mitelDhcpServerStaticIpClientId or the mitelDhcpServerStaticIpMacAddress field has to have a valid value. If none of them are configured, then the IP address is just not assignable by this server.")
mitelDhcpServerStaticIpClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpClientId.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpClientId.setDescription('The client-id of the client that has been assigned this lease. The client-id is the value specified in option 61 (client-id option) when the lease was assigned. This object may be empty if the lease has not been previously assigned or if the client- id option was not specified when the lease was assigned. Either the mitelDhcpServerStaticIpClientId or the mitelDhcpServerStaticIpMacAddress field has to have a valid value. If none of them are configured, then the IP address is just not assignable by this server.')
mitelDhcpServerStaticIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpName.setDescription('The name of the configured range (informational only).')
mitelDhcpServerStaticIpDeleteTree = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpDeleteTree.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpDeleteTree.setDescription('If this flag is set to enable, when the object is deleted, all the DHCP server configuration objects that depend on it will be deleted at the same time.')
mitelDhcpServerStaticIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelDhcpServerStaticIpStatus.setReference('Textual Conventions for Version 2 of the Simple Network Management Protocol (RFC 1443).')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpStatus.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStaticIpStatus.setDescription('The current status of this entry.')
mitelDhcpServerOptionTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 5), )
if mibBuilder.loadTexts: mitelDhcpServerOptionTable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerOptionTable.setDescription('This table contain list of options that will be sent to clients requesting IP addresses.')
mitelDhcpServerOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 5, 1), ).setIndexNames((0, "MITEL-DHCP-MIB", "mitelDhcpServerOptionAddr"), (0, "MITEL-DHCP-MIB", "mitelDhcpServerOptionNumber"))
if mibBuilder.loadTexts: mitelDhcpServerOptionEntry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerOptionEntry.setDescription('Each entry in this list contains information about a specific DHCP option.')
mitelDhcpServerOptionAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerOptionAddr.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerOptionAddr.setDescription('This IP address keys in either the mitelDhcpServerRangeTable or the mitelDhcpServerStaticIpTable or the mitelDhcpServerSubnetTable. It indicates the realm in which that particular option/value pair is to be handed out. If the IP address key is 0.0.0.0 this means that the option is valid for any of the range/static IP configured. In the case where the same option number is configured for different realms, the selection will go from the most specific to the most generic according to the following scheme: 1. mitelDhcpGrpStaticIpTable or mitelDhcpServerRangeTable 2. mitelDhcpServerSubnetTable 3. global definition (i.e. mitelDhcpGrpOptionIp = 0.0.0.0)')
mitelDhcpServerOptionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 5, 1, 2), MitelDhcpServerOptionList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerOptionNumber.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerOptionNumber.setDescription("This is the option number as specified in RFC 2132: 'DHCP Options and BOOTP Vendor Extensions'. Some of the options are not configurable that way (like subnet mask). The options that are not configurable are the ones that can be derived from the general configuration (from either the mitelDhcpServerSubnetTableor mitelDhcpServerRangeTable or mitelDhcpServerStaticIpTable) or that have a meaning only from the client to the server (such as the client ID (option 61)). Range: 1..254")
mitelDhcpServerOptionDisplayFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("ip-address", 2), ("ascii-string", 3), ("integer", 4), ("octet-string", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerOptionDisplayFormat.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerOptionDisplayFormat.setDescription('This indicates how the value should be formated. This is informational only and may be ignored. If something else than default is specified, the system will attempt to display the value field according to the setting. Otherwise, it will try to establish the correct way to display it based on the option number.')
mitelDhcpServerOptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerOptionValue.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerOptionValue.setDescription('This contains the value of the option encoded as it will be sent in the DHCP packets.')
mitelDhcpServerOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelDhcpServerOptionStatus.setReference('Textual Conventions for Version 2 of the Simple Network Management Protocol (RFC 1443).')
if mibBuilder.loadTexts: mitelDhcpServerOptionStatus.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerOptionStatus.setDescription('The current status of this entry.')
mitelDhcpServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6), )
if mibBuilder.loadTexts: mitelDhcpServerLeaseTable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseTable.setDescription('This table contain a list of all the assigned leases and their current status.')
mitelDhcpServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1), ).setIndexNames((0, "MITEL-DHCP-MIB", "mitelDhcpServerLeaseAddr"))
if mibBuilder.loadTexts: mitelDhcpServerLeaseEntry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseEntry.setDescription('Each entry in this list contains information about a specific lease.')
mitelDhcpServerLeaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseAddr.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseAddr.setDescription('The IP address described in that lease.')
mitelDhcpServerLeaseSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseSubnet.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseSubnet.setDescription('The IP address indicating the subnet to which the IP address belongs. That IP address can be used as a key in the mitelDhcpServerSubnetTable.')
mitelDhcpServerLeaseRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseRange.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseRange.setDescription('A reference the the IP address Range from which this IP address has been assigned. This IP address can be used as a key for the mitelDhcpServerRangeTable.')
mitelDhcpServerLeaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("configuration-reserved", 3), ("server-reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseType.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseType.setDescription('The type of this address.')
mitelDhcpServerLeaseEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseEndTime.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseEndTime.setDescription("The value that sysUpTime will be when the lease expires. A value of 4294967295 (i.e.: 0xFFFFFFFF) should be used for leases that have a lease time which is 'infinite' and for BOOTP leases.")
mitelDhcpServerLeaseAllowedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3), ("bootp-or-dhcp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseAllowedProtocol.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseAllowedProtocol.setDescription('The type of protocol that is allowed to be used to serve this address. A type of none(1) indicates that the address is not available to be served (e.g.: a reserved address).')
mitelDhcpServerLeaseServedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseServedProtocol.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseServedProtocol.setDescription('The type of protocol that was used when this address was assigned. This object will have the value of none(1) if the lease has not been served.')
mitelDhcpServerLeaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseMacAddress.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseMacAddress.setDescription("The hardware type and hardware address of the client that has been assigned this lease. The first octet of this object contains the hardware type from the 'htype' field of the BOOTP packet and the remaining octets contain the hardware address from the 'chaddr' field of the BOOTP packet. This object may be empty if the lease has not been previously served.")
mitelDhcpServerLeaseClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseClientId.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseClientId.setDescription('The client-id of the client that has been assigned this lease. The client-id is the value specified in option 61 (client-id option) when the lease was assigned. This object may be empty if the lease has not been previously assigned or if the client- id option was not specified when the lease was assigned.')
mitelDhcpServerLeaseHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseHostName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseHostName.setDescription('The host name the client is configured with or if no host name was configured then the host name that the client supplied when requesting an address.')
mitelDhcpServerLeaseDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseDomainName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseDomainName.setDescription('The domain name assigned to the client.')
mitelDhcpServerLeaseServedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerLeaseServedTime.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseServedTime.setDescription('The system time at which this entry was created.')
mitelDhcpServerLeaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 6, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelDhcpServerLeaseStatus.setReference('Textual Conventions for Version 2 of the Simple Network Management Protocol (RFC 1443).')
if mibBuilder.loadTexts: mitelDhcpServerLeaseStatus.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerLeaseStatus.setDescription('The current status of this entry.')
mitelDhcpServerStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 7))
mitelDhcpServerStatsNumServers = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerStatsNumServers.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStatsNumServers.setDescription('This indicates the number of configured DHCP servers which are used for the DHCP Relay Agent.')
mitelDhcpServerStatsConfSubnets = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerStatsConfSubnets.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStatsConfSubnets.setDescription('This indicates the number of configured DHCP subnets.')
mitelDhcpServerStatsConfRanges = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerStatsConfRanges.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStatsConfRanges.setDescription('This indicates the number of configured DHCP ranges.')
mitelDhcpServerStatsConfStatic = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerStatsConfStatic.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStatsConfStatic.setDescription('This indicates the number of configured static IP addresses.')
mitelDhcpServerStatsConfOptions = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerStatsConfOptions.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStatsConfOptions.setDescription('This indicates the number of configured DHCP Options.')
mitelDhcpServerStatsConfLeases = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerStatsConfLeases.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerStatsConfLeases.setDescription('This indicates the number of served leases.')
mitelDhcpServerVendorInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 8), )
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoTable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoTable.setDescription('This table contain list of vendor-specific-options that will be sent to clients when requesting an IP addresses.')
mitelDhcpServerVendorInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 8, 1), ).setIndexNames((0, "MITEL-DHCP-MIB", "mitelDhcpServerOptionAddr"), (0, "MITEL-DHCP-MIB", "mitelDhcpServerOptionNumber"), (0, "MITEL-DHCP-MIB", "mitelDhcpServerVendorInfoID"))
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoEntry.setDescription('Each entry in this list contains information about a vendor specific DHCP option.')
mitelDhcpServerVendorInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoID.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoID.setDescription('The unique vendor Identifier. May or not make sense to someone viewing the data.')
mitelDhcpServerVendorInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoName.setDescription('The unique name of the vendor. The suggestion is that this value be recognizable to someone viewing the data.')
mitelDhcpServerVendorInfoOptionDisplayFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("ip-address", 2), ("ascii-string", 3), ("integer", 4), ("octet-string", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoOptionDisplayFormat.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoOptionDisplayFormat.setDescription('This indicates how the value should be formated. This is informational only and may be ignored. If something else than default is specified, the system will attempt to display the value field according to the setting. Otherwise, it will try to establish the correct way to display it based on the option number.')
mitelDhcpServerVendorInfoOptionValue = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoOptionValue.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoOptionValue.setDescription("The options that the vendor, the vendor specified in VendorInfoID, would want to send to it's clients. All content of this object would only make sense to the receiving client, no syntax or sematics of the content is specifed by this definition, that information would be specified by the vendor.")
mitelDhcpServerVendorInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 5, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoStatus.setReference('Textual Conventions for Version 2 of the Simple Network Management Protocol (RFC 1443).')
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoStatus.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpServerVendorInfoStatus.setDescription('The current status of this entry.')
mitelDhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6), )
if mibBuilder.loadTexts: mitelDhcpClientTable.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientTable.setDescription('This table contains a list of all DHCP Clients.')
mitelDhcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1), ).setIndexNames((0, "MITEL-DHCP-MIB", "mitelDhcpClientIndex"))
if mibBuilder.loadTexts: mitelDhcpClientEntry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientEntry.setDescription('Each entry in this list contains information for a DHCP client.')
mitelDhcpClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientIndex.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientIndex.setDescription("The Index of this Client. This object's value has a direct correlation to the interface on which DHCP client has been defined.")
mitelDhcpClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelDhcpClientId.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientId.setDescription('The ID of this client')
mitelDhcpClientLeaseAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("release", 2), ("renew", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientLeaseAction.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientLeaseAction.setDescription('The object allows the user to release the current IP address assigned to this DHCP client. The user can also conduct a renew action to obtain an IP address for this client. By default this object will return none(1).')
mitelDhcpClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientIpAddress.setDescription('The IP of this client assigned by the DHCP server.')
mitelDhcpClientLeaseObtained = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientLeaseObtained.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientLeaseObtained.setDescription('The time the lease was acquired')
mitelDhcpClientLeaseExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientLeaseExpired.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientLeaseExpired.setDescription('The time the current lease expires.')
mitelDhcpClientDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientDefaultGateway.setDescription('The default gateway IP for this client learned from the DHCP server.')
mitelDhcpClientServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientServerIp.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientServerIp.setDescription("The IP of this client's DHCP server.")
mitelDhcpClientPrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientPrimaryDns.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientPrimaryDns.setDescription('The primary DNS IP address of the client learned from the DHCP server.')
mitelDhcpClientSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientSecondaryDns.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientSecondaryDns.setDescription('The secondary DNS IP address of the client learned from the DHCP server.')
mitelDhcpClientPrimaryWins = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientPrimaryWins.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientPrimaryWins.setDescription('The primary WINS IP address of the client learned from the DHCP server.')
mitelDhcpClientSecondaryWins = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientSecondaryWins.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientSecondaryWins.setDescription('The secondary WINS IP address of the client learned from the DHCP server.')
mitelDhcpClientDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientDomainName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientDomainName.setDescription('The domain name of this client learned from the DHCP server.')
mitelDhcpClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientName.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientName.setDescription('The name of this client.')
mitelDhcpClientAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelDhcpClientAdminState.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientAdminState.setDescription('The admin status of this client.')
mitelIpera1000Notifications = NotificationGroup((1, 3, 6, 1, 4, 1, 1027, 1, 2, 4, 0)).setObjects(("MITEL-DHCP-MIB", "mitelDhcpClientObtainedIp"), ("MITEL-DHCP-MIB", "mitelDhcpClientLeaseExpiry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mitelIpera1000Notifications = mitelIpera1000Notifications.setStatus('current')
if mibBuilder.loadTexts: mitelIpera1000Notifications.setDescription('Call Server Ipera 1000 Notifications.')
mitelDhcpClientObtainedIp = NotificationType((1, 3, 6, 1, 4, 1, 1027, 1, 2, 4, 0, 404)).setObjects(("MITEL-DHCP-MIB", "mitelDhcpClientIndex"), ("MITEL-DHCP-MIB", "mitelDhcpClientIpAddress"), ("MITEL-DHCP-MIB", "mitelDhcpClientServerIp"))
if mibBuilder.loadTexts: mitelDhcpClientObtainedIp.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientObtainedIp.setDescription('The mitelDhcpClientObtainedIP trap indicates that the router has obtained a lease for an IP address from a DHCP server.')
mitelDhcpClientLeaseExpiry = NotificationType((1, 3, 6, 1, 4, 1, 1027, 1, 2, 4, 0, 405)).setObjects(("MITEL-DHCP-MIB", "mitelDhcpClientIndex"))
if mibBuilder.loadTexts: mitelDhcpClientLeaseExpiry.setStatus('current')
if mibBuilder.loadTexts: mitelDhcpClientLeaseExpiry.setDescription("The mitelDhcpClientLeaseExpiry trap indicates that the router's DHCP client lease has expired.")
mibBuilder.exportSymbols("MITEL-DHCP-MIB", mitelDhcpServerSubnetGateway=mitelDhcpServerSubnetGateway, mitelDhcpServerRangeProtocol=mitelDhcpServerRangeProtocol, mitelDhcpRelayAgentServerStatus=mitelDhcpRelayAgentServerStatus, mitelDhcpServerStatsConfStatic=mitelDhcpServerStatsConfStatic, mitelDhcpServerLeaseEndTime=mitelDhcpServerLeaseEndTime, mitelDhcpServerVendorInfoTable=mitelDhcpServerVendorInfoTable, mitelProprietary=mitelProprietary, mitelDhcpServerOptionAddr=mitelDhcpServerOptionAddr, mitelDhcpServerStaticIpDeleteTree=mitelDhcpServerStaticIpDeleteTree, mitelDhcpRelayAgentEnable=mitelDhcpRelayAgentEnable, mitelDhcpServerOptionEntry=mitelDhcpServerOptionEntry, mitelIpera1000Notifications=mitelIpera1000Notifications, mitelDhcpClientTable=mitelDhcpClientTable, mitelIdCallServers=mitelIdCallServers, mitelDhcpServerGeneralPingStatus=mitelDhcpServerGeneralPingStatus, mitelDhcpServerLeaseHostName=mitelDhcpServerLeaseHostName, mitelDhcpRelayAgentServerName=mitelDhcpRelayAgentServerName, mitelDhcpServerStatsGroup=mitelDhcpServerStatsGroup, mitelDhcpServerGeneralGateway=mitelDhcpServerGeneralGateway, mitelDhcpServerGeneralGroup=mitelDhcpServerGeneralGroup, mitelDhcpServerLeaseRange=mitelDhcpServerLeaseRange, mitelDhcpRelayAgentMaxHops=mitelDhcpRelayAgentMaxHops, mitelDhcpServerSubnetName=mitelDhcpServerSubnetName, mitelDhcpClientLeaseAction=mitelDhcpClientLeaseAction, mitelDhcpServerOptionStatus=mitelDhcpServerOptionStatus, mitelDhcpServerGeneralEnable=mitelDhcpServerGeneralEnable, mitelDhcpServerStaticIpGateway=mitelDhcpServerStaticIpGateway, mitelPropIpNetworking=mitelPropIpNetworking, mitelDhcpServerVendorInfoName=mitelDhcpServerVendorInfoName, mitelDhcpClientPrimaryDns=mitelDhcpClientPrimaryDns, mitelDhcpServerSubnetSharedNet=mitelDhcpServerSubnetSharedNet, mitelIpNetRouter=mitelIpNetRouter, mitelDhcpClientObtainedIp=mitelDhcpClientObtainedIp, mitelDhcpServerLeaseAllowedProtocol=mitelDhcpServerLeaseAllowedProtocol, mitelDhcpServerStaticIpStatus=mitelDhcpServerStaticIpStatus, mitelDhcpServerOptionValue=mitelDhcpServerOptionValue, mitelDhcpServerRangeLeaseTime=mitelDhcpServerRangeLeaseTime, mitelDhcpServerLeaseAddr=mitelDhcpServerLeaseAddr, mitelDhcpServerStaticIpTable=mitelDhcpServerStaticIpTable, mitelDhcpServerStaticIpSubnet=mitelDhcpServerStaticIpSubnet, mitelIdCsIpera1000=mitelIdCsIpera1000, mitelDhcpServerVendorInfoStatus=mitelDhcpServerVendorInfoStatus, mitelDhcpServerLeaseSubnet=mitelDhcpServerLeaseSubnet, mitelDhcpClientId=mitelDhcpClientId, mitelDhcpClientLeaseExpiry=mitelDhcpClientLeaseExpiry, mitel=mitel, mitelDhcpServerStatsConfRanges=mitelDhcpServerStatsConfRanges, mitelDhcpServerLeaseClientId=mitelDhcpServerLeaseClientId, MitelDhcpServerProtocol=MitelDhcpServerProtocol, mitelDhcpServerGroup=mitelDhcpServerGroup, mitelDhcpServerRangeMatchClassId=mitelDhcpServerRangeMatchClassId, mitelDhcpServerRangeStart=mitelDhcpServerRangeStart, mitelDhcpServerLeaseTable=mitelDhcpServerLeaseTable, mitelDhcpClientSecondaryWins=mitelDhcpClientSecondaryWins, mitelDhcpClientDefaultGateway=mitelDhcpClientDefaultGateway, mitelDhcpServerRangeStatus=mitelDhcpServerRangeStatus, mitelDhcpClientLeaseObtained=mitelDhcpClientLeaseObtained, mitelDhcpServerStaticIpAddr=mitelDhcpServerStaticIpAddr, mitelDhcpServerVendorInfoOptionValue=mitelDhcpServerVendorInfoOptionValue, mitelDhcpClientSecondaryDns=mitelDhcpClientSecondaryDns, MitelDhcpServerOptionList=MitelDhcpServerOptionList, mitelDhcpServerSubnetMask=mitelDhcpServerSubnetMask, mitelDhcpServerLeaseDomainName=mitelDhcpServerLeaseDomainName, mitelDhcpClientEntry=mitelDhcpClientEntry, mitelDhcpServerVendorInfoOptionDisplayFormat=mitelDhcpServerVendorInfoOptionDisplayFormat, mitelDhcpServerSubnetDeleteTree=mitelDhcpServerSubnetDeleteTree, mitelDhcpServerVendorInfoID=mitelDhcpServerVendorInfoID, mitelDhcpServerStatsConfLeases=mitelDhcpServerStatsConfLeases, mitelDhcpServerOptionDisplayFormat=mitelDhcpServerOptionDisplayFormat, mitelDhcpServerStaticIpMacAddress=mitelDhcpServerStaticIpMacAddress, mitelDhcpServerStaticIpClientId=mitelDhcpServerStaticIpClientId, mitelDhcpServerStaticIpName=mitelDhcpServerStaticIpName, mitelDhcpServerSubnetEntry=mitelDhcpServerSubnetEntry, PYSNMP_MODULE_ID=mitelRouterDhcpGroup, mitelDhcpServerLeaseServedTime=mitelDhcpServerLeaseServedTime, mitelDhcpServerLeaseStatus=mitelDhcpServerLeaseStatus, mitelDhcpClientDomainName=mitelDhcpClientDomainName, mitelDhcpServerVendorInfoEntry=mitelDhcpServerVendorInfoEntry, mitelDhcpServerSubnetStatus=mitelDhcpServerSubnetStatus, mitelDhcpServerStaticIpEntry=mitelDhcpServerStaticIpEntry, mitelDhcpServerLeaseEntry=mitelDhcpServerLeaseEntry, mitelDhcpServerRangeSubnet=mitelDhcpServerRangeSubnet, mitelDhcpClientAdminState=mitelDhcpClientAdminState, mitelDhcpRelayAgentServerEntry=mitelDhcpRelayAgentServerEntry, mitelDhcpServerStatsNumServers=mitelDhcpServerStatsNumServers, mitelDhcpServerRangeTable=mitelDhcpServerRangeTable, mitelDhcpClientServerIp=mitelDhcpClientServerIp, mitelDhcpClientName=mitelDhcpClientName, mitelDhcpServerStatsConfOptions=mitelDhcpServerStatsConfOptions, mitelDhcpServerOptionTable=mitelDhcpServerOptionTable, mitelDhcpServerRangeEnd=mitelDhcpServerRangeEnd, mitelDhcpClientIndex=mitelDhcpClientIndex, mitelDhcpServerRangeGateway=mitelDhcpServerRangeGateway, mitelDhcpRelayAgentBroadcast=mitelDhcpRelayAgentBroadcast, mitelRouterDhcpGroup=mitelRouterDhcpGroup, mitelDhcpServerRangeEntry=mitelDhcpServerRangeEntry, mitelDhcpServerOptionNumber=mitelDhcpServerOptionNumber, mitelDhcpServerRangeName=mitelDhcpServerRangeName, mitelDhcpClientIpAddress=mitelDhcpClientIpAddress, mitelDhcpClientLeaseExpired=mitelDhcpClientLeaseExpired, mitelDhcpServerSubnetAddr=mitelDhcpServerSubnetAddr, mitelDhcpServerLeaseServedProtocol=mitelDhcpServerLeaseServedProtocol, mitelDhcpServerStaticIpProtocol=mitelDhcpServerStaticIpProtocol, mitelDhcpServerGeneralRefDhcpServer=mitelDhcpServerGeneralRefDhcpServer, mitelDhcpRelayAgentServerAddr=mitelDhcpRelayAgentServerAddr, mitelDhcpRelayAgentServerTable=mitelDhcpRelayAgentServerTable, mitelDhcpServerRangeDeleteTree=mitelDhcpServerRangeDeleteTree, mitelDhcpServerLeaseType=mitelDhcpServerLeaseType, mitelDhcpServerLeaseMacAddress=mitelDhcpServerLeaseMacAddress, mitelDhcpServerSubnetTable=mitelDhcpServerSubnetTable, mitelDhcpServerStatsConfSubnets=mitelDhcpServerStatsConfSubnets, mitelDhcpClientPrimaryWins=mitelDhcpClientPrimaryWins, mitelIdentification=mitelIdentification)
