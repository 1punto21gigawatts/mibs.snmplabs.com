#
# PySNMP MIB module NMS-ERPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-ERPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
nmslocal, = mibBuilder.importSymbols("NMS-SMI", "nmslocal")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, NotificationType, Bits, Gauge32, ModuleIdentity, ObjectIdentity, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "NotificationType", "Bits", "Gauge32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "Unsigned32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nmsERPS = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231))
nmsERPSRings = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRings.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRings.setDescription('The number of ethernet ring instances.')
nmsERPSInconsistenceCheck = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSInconsistenceCheck.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSInconsistenceCheck.setDescription('A value indicates that the ring-port inconsistence check is enabled or disabled.')
nmsERPSPduRx = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSPduRx.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSPduRx.setDescription('The total number of input PDUs.')
nmsERPSPduRxDropped = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSPduRxDropped.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSPduRxDropped.setDescription('The number of input discarded PDUs.')
nmsERPSPduTx = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSPduTx.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSPduTx.setDescription('The total number of output PDUs.')
nmsERPSRingTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6), )
if mibBuilder.loadTexts: nmsERPSRingTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingTable.setDescription('A table that contains information of rings.')
nmsERPSRingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1), ).setIndexNames((0, "NMS-ERPS-MIB", "nmsERPSRingID"))
if mibBuilder.loadTexts: nmsERPSRingTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingTableEntry.setDescription('A table that contains information of rings.')
nmsERPSRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingID.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingID.setDescription('The index of ring instances.')
nmsERPSRingNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingNodeID.setDescription('The ring node identifier composed of a priority value and the bridge MAC address.')
nmsERPSRingPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPorts.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPorts.setDescription('The number of interfaces which are configured in a ring.')
nmsERPSRingRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRplOwner", 0), ("rplOwner", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingRole.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingRole.setDescription('A value indicates whether one port of the ring node is the Ring protection link(RPL).')
nmsERPSRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("protection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingState.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingState.setDescription('The ring protection state machine value.')
nmsERPSRingWTR = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notWaitToRestore", 0), ("waitToRestore", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingWTR.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingWTR.setDescription('This value from the RPL-Owner indicates whether it is Waiting to restore.')
nmsERPSRingWtrWhile = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingWtrWhile.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingWtrWhile.setDescription('The Wait-to-restore timer value, in seconds, which is the time left before the RPL-Owner restores from Protection state.')
nmsERPSRingSignalFail = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSignalFail", 0), ("signalFail", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingSignalFail.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingSignalFail.setDescription('A value indicates if a ring port is failed.')
nmsERPSRingSending = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingSending.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingSending.setDescription('The type of PDUs being sent.')
nmsERPSRingRplOwnerID = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingRplOwnerID.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingRplOwnerID.setDescription("The RPL-Owner's identifier, recorded from a superior discovery PDU.")
nmsERPSRingRplOwnerMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingRplOwnerMAC.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingRplOwnerMAC.setDescription("The RPL-Owner's bridge MAC address, recorded from a NR-RB PDU.")
nmsERPSRingDiscovering = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notDiscovering", 0), ("discovering", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingDiscovering.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingDiscovering.setDescription('A value indicates if the ring discovery process is running.')
nmsERPSRingDiscoverWhile = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingDiscoverWhile.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingDiscoverWhile.setDescription('The discovery timer value, in seconds. Remaining time of the discovery process.')
nmsERPSRingPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingPriorityValue.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPriorityValue.setDescription('The configured ring node priority value. The lowest priority makes a node RPL-Owner in the ring. Available range is from 0 to 61440, in steps of 4096.')
nmsERPSRingWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingWtrTime.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingWtrTime.setDescription('The configured Wait-to-restore time, in seconds.')
nmsERPSRingGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingGuardTime.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingGuardTime.setDescription('The configured Guard-time, in 10ms.')
nmsERPSRingSendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingSendTime.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingSendTime.setDescription('The configured interval of ring protection PDUs, in seconds.')
nmsERPSRingDiscoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingDiscoveryTime.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingDiscoveryTime.setDescription('The duration configured for discovery process, in seconds.')
nmsERPSRingDpduInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingDpduInterval.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingDpduInterval.setDescription('The configured interval of ring discovery PDUs, in seconds.')
nmsERPSRingDiscoveryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingDiscoveryCount.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingDiscoveryCount.setDescription('The total number of discovery process ever started.')
nmsERPSRingDiscoveryLastDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingDiscoveryLastDuration.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingDiscoveryLastDuration.setDescription('Runtime of the last discovery process, in 10 ms.')
nmsERPSRingDiscoveryLastElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingDiscoveryLastElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingDiscoveryLastElapsed.setDescription('Elapsed time since last discovery started, in seconds.')
nmsERPSRingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsERPSRingAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingAdminStatus.setDescription("A read-create value that indicates the configuration status of the ring instance. Set this value to 'enabled' to start the ring or 'disabled' to stop it.")
nmsERPSRingPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsERPSRingPort1.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort1.setDescription('The interface index of the first ring port. Value 0 indicates that the first port is not configured. This value is read-write.')
nmsERPSRingPort1AdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ring-port", 0), ("rpl", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingPort1AdminType.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort1AdminType.setDescription("The configured type of the first ring port. Set this value to 'rpl' to configure the Ring-Protection-Link.")
nmsERPSRingPort1OperType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ring-port", 0), ("rpl", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPort1OperType.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort1OperType.setDescription('The running type of the first ring port.')
nmsERPSRingPort1State = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("blocking", 0), ("forwarding", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPort1State.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort1State.setDescription('Forwarding state of the first ring port.')
nmsERPSRingPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("link-down", 0), ("link-up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPort1Status.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort1Status.setDescription('Link status of the first ring port.')
nmsERPSRingPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 29), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nmsERPSRingPort2.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort2.setDescription('The interface index of the second ring port. Value 0 indicates that the second port is not configured. This value is read-write..')
nmsERPSRingPort2AdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ring-port", 0), ("rpl", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsERPSRingPort2AdminType.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort2AdminType.setDescription("The configured type of the second ring port. Set this value to 'rpl' to configure the Ring-Protection-Link.")
nmsERPSRingPort2OperType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ring-port", 0), ("rpl", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPort2OperType.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort2OperType.setDescription('The running type of the second ring port.')
nmsERPSRingPort2State = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("blocking", 0), ("forwarding", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPort2State.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort2State.setDescription('Forwarding state of the second ring port.')
nmsERPSRingPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 6, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("link-down", 0), ("link-up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPort2Status.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort2Status.setDescription('Link status of the second ring port.')
nmsERPSRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7), )
if mibBuilder.loadTexts: nmsERPSRingPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortTable.setDescription('A table that contains informations of ring ports.')
nmsERPSRingPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1), ).setIndexNames((0, "NMS-ERPS-MIB", "nmsERPSRingPortRingID"), (0, "NMS-ERPS-MIB", "nmsERPSRingPort"))
if mibBuilder.loadTexts: nmsERPSRingPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortTableEntry.setDescription('A table that contains informations of ring ports.')
nmsERPSRingPortRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortRingID.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortRingID.setDescription('The index of ring instance, in which this port is configured.')
nmsERPSRingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPort.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPort.setDescription('Interface index of the ring port.')
nmsERPSRingPortAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ring-port", 0), ("rpl", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortAdminType.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortAdminType.setDescription('A value indicates that if the port is configured as the Ring Protection Link(RPL).')
nmsERPSRingPortOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ring-port", 0), ("rpl", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortOperType.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortOperType.setDescription("A value indicates that if the port is running as the Ring Protection Link(RPL). This value may be different with the value of 'nmsERPSRingPortAdminType'")
nmsERPSRingPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("blocking", 0), ("forwarding", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortState.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortState.setDescription('State of a ring port, forwarding or blocking.')
nmsERPSRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("link-down", 0), ("link-up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortStatus.setDescription('Link status of a ring port.')
nmsERPSRingPortForwards = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortForwards.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortForwards.setDescription('The number of times this port transitioned to forwarding state.')
nmsERPSRingPortForwardLastElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortForwardLastElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortForwardLastElapsed.setDescription('Elapsed time since the port became forwarding, in seconds.')
nmsERPSRingPortRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortRx.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortRx.setDescription('The number of received PDUs on this port.')
nmsERPSRingPortTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsERPSRingPortTx.setStatus('mandatory')
if mibBuilder.loadTexts: nmsERPSRingPortTx.setDescription('The number of transmitted PDUs on this port.')
nmsERPSRingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 8))
nmsERPSRingRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 8, 1)).setObjects(("NMS-ERPS-MIB", "nmsERPSRingID"), ("NMS-ERPS-MIB", "nmsERPSRingNodeID"), ("NMS-ERPS-MIB", "nmsERPSRingRole"))
if mibBuilder.loadTexts: nmsERPSRingRoleChange.setStatus('current')
if mibBuilder.loadTexts: nmsERPSRingRoleChange.setDescription('The notification is generated when ring node role changes.')
nmsERPSRingStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11606, 10, 2, 231, 8, 2)).setObjects(("NMS-ERPS-MIB", "nmsERPSRingID"), ("NMS-ERPS-MIB", "nmsERPSRingNodeID"), ("NMS-ERPS-MIB", "nmsERPSRingRole"), ("NMS-ERPS-MIB", "nmsERPSRingState"))
if mibBuilder.loadTexts: nmsERPSRingStateChange.setStatus('current')
if mibBuilder.loadTexts: nmsERPSRingStateChange.setDescription('The notification is generated when a RPL-Owner detects that the state of ring changed.')
mibBuilder.exportSymbols("NMS-ERPS-MIB", nmsERPS=nmsERPS, nmsERPSRingPorts=nmsERPSRingPorts, nmsERPSInconsistenceCheck=nmsERPSInconsistenceCheck, nmsERPSRings=nmsERPSRings, nmsERPSPduRx=nmsERPSPduRx, nmsERPSRingSignalFail=nmsERPSRingSignalFail, nmsERPSRingPort1OperType=nmsERPSRingPort1OperType, nmsERPSRingPortOperType=nmsERPSRingPortOperType, nmsERPSRingDiscoverWhile=nmsERPSRingDiscoverWhile, nmsERPSRingDiscoveryTime=nmsERPSRingDiscoveryTime, nmsERPSRingNodeID=nmsERPSRingNodeID, nmsERPSRingDiscoveryCount=nmsERPSRingDiscoveryCount, nmsERPSRingPortForwards=nmsERPSRingPortForwards, nmsERPSRingTableEntry=nmsERPSRingTableEntry, nmsERPSRingTable=nmsERPSRingTable, nmsERPSRingPort=nmsERPSRingPort, nmsERPSRingPort2State=nmsERPSRingPort2State, nmsERPSRingPort2Status=nmsERPSRingPort2Status, nmsERPSRingDiscovering=nmsERPSRingDiscovering, nmsERPSRingDiscoveryLastDuration=nmsERPSRingDiscoveryLastDuration, nmsERPSRingPortAdminType=nmsERPSRingPortAdminType, nmsERPSRingID=nmsERPSRingID, nmsERPSRingNotifications=nmsERPSRingNotifications, nmsERPSRingWTR=nmsERPSRingWTR, nmsERPSRingDpduInterval=nmsERPSRingDpduInterval, nmsERPSRingPort2=nmsERPSRingPort2, nmsERPSRingPort2OperType=nmsERPSRingPort2OperType, nmsERPSRingGuardTime=nmsERPSRingGuardTime, nmsERPSRingPort1AdminType=nmsERPSRingPort1AdminType, nmsERPSRingPort1Status=nmsERPSRingPort1Status, nmsERPSPduRxDropped=nmsERPSPduRxDropped, nmsERPSRingPriorityValue=nmsERPSRingPriorityValue, nmsERPSRingState=nmsERPSRingState, nmsERPSRingSending=nmsERPSRingSending, nmsERPSRingPort1=nmsERPSRingPort1, nmsERPSRingSendTime=nmsERPSRingSendTime, nmsERPSRingPortTx=nmsERPSRingPortTx, nmsERPSRingPortRingID=nmsERPSRingPortRingID, nmsERPSRingRplOwnerID=nmsERPSRingRplOwnerID, nmsERPSRingWtrTime=nmsERPSRingWtrTime, nmsERPSRingPort1State=nmsERPSRingPort1State, nmsERPSRingPortTable=nmsERPSRingPortTable, nmsERPSRingPortState=nmsERPSRingPortState, nmsERPSRingPortForwardLastElapsed=nmsERPSRingPortForwardLastElapsed, nmsERPSRingDiscoveryLastElapsed=nmsERPSRingDiscoveryLastElapsed, nmsERPSRingPortTableEntry=nmsERPSRingPortTableEntry, nmsERPSRingWtrWhile=nmsERPSRingWtrWhile, nmsERPSRingPortStatus=nmsERPSRingPortStatus, nmsERPSRingAdminStatus=nmsERPSRingAdminStatus, nmsERPSRingPortRx=nmsERPSRingPortRx, nmsERPSRingStateChange=nmsERPSRingStateChange, nmsERPSRingPort2AdminType=nmsERPSRingPort2AdminType, nmsERPSRingRoleChange=nmsERPSRingRoleChange, nmsERPSPduTx=nmsERPSPduTx, nmsERPSRingRole=nmsERPSRingRole, nmsERPSRingRplOwnerMAC=nmsERPSRingRplOwnerMAC)
