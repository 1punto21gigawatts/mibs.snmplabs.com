#
# PySNMP MIB module ELTEX-MES-PHYSICAL-DESCRIPTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-PHYSICAL-DESCRIPTION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:01:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
eltMes, = mibBuilder.importSymbols("ELTEX-MES", "eltMes")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
JackType, = mibBuilder.importSymbols("MAU-MIB", "JackType")
rlPhdUnitGenParamEntry, rlCascadeEntry = mibBuilder.importSymbols("RADLAN-Physicaldescription-MIB", "rlPhdUnitGenParamEntry", "rlCascadeEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibIdentifier, IpAddress, TimeTicks, iso, Gauge32, Counter32, Counter64, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "iso", "Gauge32", "Counter32", "Counter64", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "ModuleIdentity")
DisplayString, TruthValue, PhysAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "PhysAddress", "TextualConvention", "RowStatus")
eltMesPhysicalDescription = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53))
eltMesPhysicalDescription.setRevisions(('2015-09-14 00:00', '2013-03-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eltMesPhysicalDescription.setRevisionsDescriptions(('Added eltPhdUnitGenParamTable.', 'Initial revision.',))
if mibBuilder.loadTexts: eltMesPhysicalDescription.setLastUpdated('201509140000Z')
if mibBuilder.loadTexts: eltMesPhysicalDescription.setOrganization('Eltex Ltd.')
if mibBuilder.loadTexts: eltMesPhysicalDescription.setContactInfo('eltex.nsk.ru')
if mibBuilder.loadTexts: eltMesPhysicalDescription.setDescription('The private MIB module definition for physical device configuration and information.')
eltMesPhdTransceiver = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1))
eltPhdTransceiverInfoTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1), )
if mibBuilder.loadTexts: eltPhdTransceiverInfoTable.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoTable.setDescription('This table show the information of transceiver on interface.')
eltPhdTransceiverInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltPhdTransceiverInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoEntry.setDescription('The entry of the eltPhdTransceiverInfoTable.')
eltPhdTransceiverInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 32, 33, 34, 127, 255))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("fibre-ch-st1", 2), ("fibre-ch-st2", 3), ("bnc-tnc", 4), ("fibre-ch-coaxial-headers", 5), ("fibrejack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("optical-pigtail", 11), ("mpo-parallel-optic", 12), ("hssdc-ii", 32), ("copper-pigtail", 33), ("rj45", 34), ("unallocated", 127), ("vendorspec", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoConnectorType.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoConnectorType.setDescription('Connector type of the interface.')
eltPhdTransceiverInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 127, 255))).clone(namedValues=NamedValues(("unknown", 0), ("gbic", 1), ("sff", 2), ("sfp-sfpplus", 3), ("xbi-300-pin", 4), ("xenpak", 5), ("xfp", 6), ("xff", 7), ("xfp-e", 8), ("xpak", 9), ("x2", 10), ("dwdm-sfp", 11), ("qsfp", 12), ("reserved", 127), ("vendorspec", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoType.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoType.setDescription('Type of the interface, such as SFP/XFP/GBIC.')
eltPhdTransceiverInfoComplianceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoComplianceCode.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoComplianceCode.setDescription('Compliance code read from the transceiver.')
eltPhdTransceiverInfoWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoWaveLength.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoWaveLength.setDescription('Wave length of the interface, measured in nanometer.')
eltPhdTransceiverInfoVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoVendorName.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoVendorName.setDescription('Vendor name of the interface.')
eltPhdTransceiverInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoSerialNumber.setDescription('Serial number of the interface.')
eltPhdTransceiverInfoFiberDiameterType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 65535))).clone(namedValues=NamedValues(("fiber9", 1), ("fiber50", 2), ("fiber625", 3), ("copper", 4), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoFiberDiameterType.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoFiberDiameterType.setDescription('The diameter of the fiber, measured in micron. fiber9 - 9 micron multi-mode fiber fiber50 - 50 micron multi-mode fiber fiber625 - 62.5 micron multi-mode fiber copper - copper cable.')
eltPhdTransceiverInfoTransferDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoTransferDistance.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoTransferDistance.setDescription('The maximal distance which the interface could transmit, measured in meter.')
eltPhdTransceiverInfoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoDiagnostic.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverInfoDiagnostic.setDescription('Indicating whether the digital diagnostic monitoring function is supported or not.')
eltPhdTransceiverThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2), )
if mibBuilder.loadTexts: eltPhdTransceiverThresholdTable.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdTable.setDescription('This table contains the threshold information of transceiver.')
eltPhdTransceiverThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ELTEX-MES-PHYSICAL-DESCRIPTION-MIB", "eltPhdTransceiverThresholdType"))
if mibBuilder.loadTexts: eltPhdTransceiverThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdEntry.setDescription('The entry of the eltPhdTransceiverThresholdTable.')
eltPhdTransceiverThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("temperature", 0), ("supply", 1), ("txBias", 2), ("txOutput", 3), ("rxOpticalPower", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdType.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdType.setDescription('A value indicating the threshold to configure. temperature - degree (Celsius) -127-127, voltage - microVolt 0-6550000, current - microAmper 0-131000, output power or input power - microWatt 0-6553')
eltPhdTransceiverThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("log", 1), ("send-trap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdAction.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdAction.setDescription('What action to perform when value is bad.')
eltPhdTransceiverThresholdHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdHighAlarm.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdHighAlarm.setDescription('See eltPhdTransceiverThresholdType for details')
eltPhdTransceiverThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdHighWarning.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdHighWarning.setDescription('See eltPhdTransceiverThresholdType for details')
eltPhdTransceiverThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdLowWarning.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdLowWarning.setDescription('See eltPhdTransceiverThresholdType for details')
eltPhdTransceiverThresholdLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdLowAlarm.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdLowAlarm.setDescription('See eltPhdTransceiverThresholdType for details')
eltPhdTransceiverThresholdTimer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 3), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdTimer.setStatus('current')
if mibBuilder.loadTexts: eltPhdTransceiverThresholdTimer.setDescription('Time between 2 generation of snmp/syslog alarm/warning messages in seconds (30-3600) Timer value must be in multiples of 10.')
eltPhdUnitGenParamTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 2), )
if mibBuilder.loadTexts: eltPhdUnitGenParamTable.setStatus('current')
if mibBuilder.loadTexts: eltPhdUnitGenParamTable.setDescription('For each module (board) there is an entry describing it in this module')
eltPhdUnitGenParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 2, 1), )
rlPhdUnitGenParamEntry.registerAugmentions(("ELTEX-MES-PHYSICAL-DESCRIPTION-MIB", "eltPhdUnitGenParamEntry"))
eltPhdUnitGenParamEntry.setIndexNames(*rlPhdUnitGenParamEntry.getIndexNames())
if mibBuilder.loadTexts: eltPhdUnitGenParamEntry.setStatus('current')
if mibBuilder.loadTexts: eltPhdUnitGenParamEntry.setDescription('This table augments existing RADLAN table rlPhdUnitGenParamTable')
eltPhdUnitGenParamCommitHash = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdUnitGenParamCommitHash.setStatus('current')
if mibBuilder.loadTexts: eltPhdUnitGenParamCommitHash.setDescription('Hash of current commit.')
eltCascadeTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 3), )
if mibBuilder.loadTexts: eltCascadeTable.setStatus('current')
if mibBuilder.loadTexts: eltCascadeTable.setDescription('This table augments existing RADLAN table rlCascadeTable.')
eltCascadeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 3, 1), )
rlCascadeEntry.registerAugmentions(("ELTEX-MES-PHYSICAL-DESCRIPTION-MIB", "eltCascadeEntry"))
eltCascadeEntry.setIndexNames(*rlCascadeEntry.getIndexNames())
if mibBuilder.loadTexts: eltCascadeEntry.setStatus('current')
if mibBuilder.loadTexts: eltCascadeEntry.setDescription('An entry of this table specifies a cascaded link information in a unit')
eltCascadeLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 3, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltCascadeLastChange.setStatus('current')
if mibBuilder.loadTexts: eltCascadeLastChange.setDescription('The value of sysUpTime at the time the cascade interface entered its current operational state.')
mibBuilder.exportSymbols("ELTEX-MES-PHYSICAL-DESCRIPTION-MIB", eltMesPhdTransceiver=eltMesPhdTransceiver, PYSNMP_MODULE_ID=eltMesPhysicalDescription, eltCascadeEntry=eltCascadeEntry, eltPhdTransceiverInfoSerialNumber=eltPhdTransceiverInfoSerialNumber, eltPhdUnitGenParamTable=eltPhdUnitGenParamTable, eltPhdTransceiverInfoType=eltPhdTransceiverInfoType, eltPhdTransceiverThresholdHighAlarm=eltPhdTransceiverThresholdHighAlarm, eltPhdTransceiverInfoEntry=eltPhdTransceiverInfoEntry, eltPhdTransceiverInfoFiberDiameterType=eltPhdTransceiverInfoFiberDiameterType, eltPhdUnitGenParamEntry=eltPhdUnitGenParamEntry, eltPhdTransceiverThresholdLowWarning=eltPhdTransceiverThresholdLowWarning, eltPhdTransceiverThresholdEntry=eltPhdTransceiverThresholdEntry, eltPhdTransceiverInfoConnectorType=eltPhdTransceiverInfoConnectorType, eltPhdTransceiverInfoComplianceCode=eltPhdTransceiverInfoComplianceCode, eltPhdTransceiverThresholdType=eltPhdTransceiverThresholdType, eltPhdTransceiverThresholdHighWarning=eltPhdTransceiverThresholdHighWarning, eltPhdTransceiverThresholdAction=eltPhdTransceiverThresholdAction, eltPhdTransceiverThresholdLowAlarm=eltPhdTransceiverThresholdLowAlarm, eltMesPhysicalDescription=eltMesPhysicalDescription, eltPhdTransceiverThresholdTimer=eltPhdTransceiverThresholdTimer, eltPhdTransceiverThresholdTable=eltPhdTransceiverThresholdTable, eltCascadeLastChange=eltCascadeLastChange, eltPhdTransceiverInfoTable=eltPhdTransceiverInfoTable, eltPhdTransceiverInfoTransferDistance=eltPhdTransceiverInfoTransferDistance, eltPhdTransceiverInfoWaveLength=eltPhdTransceiverInfoWaveLength, eltPhdUnitGenParamCommitHash=eltPhdUnitGenParamCommitHash, eltCascadeTable=eltCascadeTable, eltPhdTransceiverInfoVendorName=eltPhdTransceiverInfoVendorName, eltPhdTransceiverInfoDiagnostic=eltPhdTransceiverInfoDiagnostic)
