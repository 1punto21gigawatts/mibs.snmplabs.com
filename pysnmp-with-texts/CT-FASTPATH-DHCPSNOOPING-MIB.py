#
# PySNMP MIB module CT-FASTPATH-DHCPSNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-FASTPATH-DHCPSNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ctDhcpSnoopingExpMib, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctDhcpSnoopingExpMib")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, MibIdentifier, Unsigned32, NotificationType, ModuleIdentity, Bits, Integer32, Counter32, Counter64, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "MibIdentifier", "Unsigned32", "NotificationType", "ModuleIdentity", "Bits", "Integer32", "Counter32", "Counter64", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
RowPointer, DisplayString, StorageType, TextualConvention, PhysAddress, TruthValue, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "DisplayString", "StorageType", "TextualConvention", "PhysAddress", "TruthValue", "MacAddress", "RowStatus")
ctFastPathDHCPSnoopingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1))
if mibBuilder.loadTexts: ctFastPathDHCPSnoopingMIB.setLastUpdated('200807231519Z')
if mibBuilder.loadTexts: ctFastPathDHCPSnoopingMIB.setOrganization('Enterasys Networks, Inc.')
if mibBuilder.loadTexts: ctFastPathDHCPSnoopingMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: ctFastPathDHCPSnoopingMIB.setDescription('The Enterasys MIB for FASTPATH DHCP Snooping')
ctAgentDhcpSnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1))
ctAgentDhcpSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingAdminMode.setDescription("This object indicates whether DHCP Snooping is enabled globally. If this object is set to 'true',admin mode is enabled globally. If this object is set to 'false',admin mode is disabled globally.")
ctAgentDhcpSnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVerifyMac.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVerifyMac.setDescription("This object indicates whether source Mac address in the received DHCP Message needs to be verified or not. If this object is set to 'true',verifyMac is enabled globally. If this object is set to 'false',verifyMac is disabled globally.")
ctAgentDhcpSnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 3), )
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVlanConfigTable.setDescription('A table provides the mechanism to control DHCP SNOOPING per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
ctAgentDhcpSnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 3, 1), ).setIndexNames((0, "CT-FASTPATH-DHCPSNOOPING-MIB", "ctAgentDhcpSnoopingVlanIndex"))
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVlanConfigEntry.setDescription('A row instance contains the configuration for DHCP SNOOPING at each existing VLAN.')
ctAgentDhcpSnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVlanIndex.setDescription('This object indicates the VLAN number on which DHCP SNOOPING Inspection feature is configured.')
ctAgentDhcpSnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVlanEnable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingVlanEnable.setDescription("This object indicates whether DHCP SNOOPING is enabled in this VLAN. If this object is set to 'true', DHCP SNOOPING is enabled. If this object is set to 'false', DHCP SNOOPING is disabled.")
ctAgentDhcpSnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 4), )
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for DHCP snooping purpose at each physical interface capable of this feature.')
ctAgentDhcpSnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfConfigEntry.setDescription('A row instance contains the configuration for DHCP snooping at each physical interface capable of this feature.')
ctAgentDhcpSnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfTrustEnable.setDescription('This object indicates whether the interface is trusted for DHCP snooping purpose.')
ctAgentDhcpSnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfLogEnable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfLogEnable.setDescription('This object indicates whether the Logging needs on DHCP snooping validations or not')
ctAgentDhcpSnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(15)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfRateLimit.setDescription('This object indicates rate limit value for DHCP Snooping purpose. If the incoming rate of DHCP packets exceeds the value of this object for consecutively burst interval seconds, DHCP packets will be dropped. ')
ctAgentDhcpSnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingIfBurstInterval.setDescription('This object indicates the burst interval value for rate limiting purpose on this interface.')
ctAgentDhcpSnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingStatsReset.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingStatsReset.setDescription('Clear the DHCP snooping statistics on all ports. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
ctAgentDhcpSnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 7), )
if mibBuilder.loadTexts: ctAgentDhcpSnoopingStatsTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingStatsTable.setDescription('A table provides the mechanism for statics of DHCP snooping.')
ctAgentDhcpSnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctAgentDhcpSnoopingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingStatsEntry.setDescription('A row instance contains the DHCP snooping statistics per VLAN.')
ctAgentDhcpSnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingMacVerifyFailures.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingMacVerifyFailures.setDescription('This object indicates the number of failure verifications of client mac address with source mac address')
ctAgentDhcpSnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingInvalidClientMessages.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingInvalidClientMessages.setDescription('This object indicates the number of invalid DHCP releases and denay messages')
ctAgentDhcpSnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDhcpSnoopingInvalidServerMessages.setStatus('current')
if mibBuilder.loadTexts: ctAgentDhcpSnoopingInvalidServerMessages.setDescription('This object indicates the number of invalid DHCP server mesaages')
ctAgentStaticDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 10), )
if mibBuilder.loadTexts: ctAgentStaticDsBindingTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentStaticDsBindingTable.setDescription('A table of the DHCP SNOOPING static entries')
ctAgentStaticDsBinding = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 10, 1), ).setIndexNames((0, "CT-FASTPATH-DHCPSNOOPING-MIB", "ctAgentStaticDsBindingMacAddr"))
if mibBuilder.loadTexts: ctAgentStaticDsBinding.setStatus('current')
if mibBuilder.loadTexts: ctAgentStaticDsBinding.setDescription('Represents a binding in DHCP SNOOPING table')
ctAgentStaticDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 10, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctAgentStaticDsBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: ctAgentStaticDsBindingIfIndex.setDescription('Interface on which this DHCP SNOOPING binding is going to be added.')
ctAgentStaticDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 10, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctAgentStaticDsBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: ctAgentStaticDsBindingVlanId.setDescription(' VLAN to whcig this DHCP SNOOPING binding is going to be added.')
ctAgentStaticDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctAgentStaticDsBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: ctAgentStaticDsBindingMacAddr.setDescription('MAC address match value for the DHCP SNOOPING Binding.')
ctAgentStaticDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctAgentStaticDsBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: ctAgentStaticDsBindingIpAddr.setDescription('IP address match value for the DHCP SNOOPING Binding.')
ctAgentStaticDsBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctAgentStaticDsBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctAgentStaticDsBindingRowStatus.setDescription('The status of this conceptual row. active(1) - this DHCP SNOOPING Binding is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
ctAgentDynamicDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 11), )
if mibBuilder.loadTexts: ctAgentDynamicDsBindingTable.setStatus('current')
if mibBuilder.loadTexts: ctAgentDynamicDsBindingTable.setDescription('A table of the DHCP SNOOPING Dynamic entries')
ctAgentDynamicDsBinding = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 11, 11), ).setIndexNames((0, "CT-FASTPATH-DHCPSNOOPING-MIB", "ctAgentDynamicDsBindingMacAddr"))
if mibBuilder.loadTexts: ctAgentDynamicDsBinding.setStatus('current')
if mibBuilder.loadTexts: ctAgentDynamicDsBinding.setDescription('Represents a binding in DHCP SNOOPING table')
ctAgentDynamicDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 11, 11, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDynamicDsBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: ctAgentDynamicDsBindingIfIndex.setDescription('Interface on which this DHCP SNOOPING binding is going to be added.')
ctAgentDynamicDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 11, 11, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDynamicDsBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: ctAgentDynamicDsBindingVlanId.setDescription(' VLAN to whcig this DHCP SNOOPING binding is going to be added.')
ctAgentDynamicDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 11, 11, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDynamicDsBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: ctAgentDynamicDsBindingMacAddr.setDescription('MAC address match value for the DHCP SNOOPING Binding.')
ctAgentDynamicDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 11, 11, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAgentDynamicDsBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: ctAgentDynamicDsBindingIpAddr.setDescription('IP address match value for the DHCP SNOOPING Binding.')
ctDhcpSnoopingIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 52, 4, 2, 35, 1, 1, 12)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctDhcpSnoopingIntfErrorDisabledTrap.setStatus('current')
if mibBuilder.loadTexts: ctDhcpSnoopingIntfErrorDisabledTrap.setDescription('Trap is sent once an interface is error disabled by DHCP Snooping when the incoming packet rate exceeded configured rate limit during a burst-interval.')
mibBuilder.exportSymbols("CT-FASTPATH-DHCPSNOOPING-MIB", PYSNMP_MODULE_ID=ctFastPathDHCPSnoopingMIB, ctAgentDhcpSnoopingStatsTable=ctAgentDhcpSnoopingStatsTable, ctAgentDhcpSnoopingMacVerifyFailures=ctAgentDhcpSnoopingMacVerifyFailures, ctAgentDhcpSnoopingStatsEntry=ctAgentDhcpSnoopingStatsEntry, ctAgentDhcpSnoopingVlanIndex=ctAgentDhcpSnoopingVlanIndex, ctAgentDhcpSnoopingVlanEnable=ctAgentDhcpSnoopingVlanEnable, ctFastPathDHCPSnoopingMIB=ctFastPathDHCPSnoopingMIB, ctAgentStaticDsBindingIfIndex=ctAgentStaticDsBindingIfIndex, ctAgentDhcpSnoopingIfBurstInterval=ctAgentDhcpSnoopingIfBurstInterval, ctAgentDhcpSnoopingStatsReset=ctAgentDhcpSnoopingStatsReset, ctAgentDynamicDsBindingIpAddr=ctAgentDynamicDsBindingIpAddr, ctAgentDhcpSnoopingIfTrustEnable=ctAgentDhcpSnoopingIfTrustEnable, ctAgentStaticDsBinding=ctAgentStaticDsBinding, ctAgentDhcpSnoopingIfConfigEntry=ctAgentDhcpSnoopingIfConfigEntry, ctAgentDhcpSnoopingVerifyMac=ctAgentDhcpSnoopingVerifyMac, ctAgentStaticDsBindingMacAddr=ctAgentStaticDsBindingMacAddr, ctAgentDynamicDsBindingIfIndex=ctAgentDynamicDsBindingIfIndex, ctAgentDynamicDsBindingMacAddr=ctAgentDynamicDsBindingMacAddr, ctAgentDhcpSnoopingIfLogEnable=ctAgentDhcpSnoopingIfLogEnable, ctAgentStaticDsBindingIpAddr=ctAgentStaticDsBindingIpAddr, ctDhcpSnoopingIntfErrorDisabledTrap=ctDhcpSnoopingIntfErrorDisabledTrap, ctAgentStaticDsBindingRowStatus=ctAgentStaticDsBindingRowStatus, ctAgentDhcpSnoopingIfRateLimit=ctAgentDhcpSnoopingIfRateLimit, ctAgentDhcpSnoopingConfigGroup=ctAgentDhcpSnoopingConfigGroup, ctAgentDhcpSnoopingVlanConfigEntry=ctAgentDhcpSnoopingVlanConfigEntry, ctAgentStaticDsBindingTable=ctAgentStaticDsBindingTable, ctAgentStaticDsBindingVlanId=ctAgentStaticDsBindingVlanId, ctAgentDynamicDsBindingVlanId=ctAgentDynamicDsBindingVlanId, ctAgentDynamicDsBinding=ctAgentDynamicDsBinding, ctAgentDhcpSnoopingIfConfigTable=ctAgentDhcpSnoopingIfConfigTable, ctAgentDhcpSnoopingInvalidClientMessages=ctAgentDhcpSnoopingInvalidClientMessages, ctAgentDhcpSnoopingInvalidServerMessages=ctAgentDhcpSnoopingInvalidServerMessages, ctAgentDynamicDsBindingTable=ctAgentDynamicDsBindingTable, ctAgentDhcpSnoopingAdminMode=ctAgentDhcpSnoopingAdminMode, ctAgentDhcpSnoopingVlanConfigTable=ctAgentDhcpSnoopingVlanConfigTable)
