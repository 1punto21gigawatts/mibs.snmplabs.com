#
# PySNMP MIB module WG302 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WG302
# Produced by pysmi-0.3.4 at Wed May  1 15:36:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, MibIdentifier, enterprises, IpAddress, Bits, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, iso, Counter32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "MibIdentifier", "enterprises", "IpAddress", "Bits", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "iso", "Counter32", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString, RowStatus, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue", "MacAddress")
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4))
wg302 = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 4, 6))
if mibBuilder.loadTexts: wg302.setLastUpdated('200512131300Z')
if mibBuilder.loadTexts: wg302.setOrganization('NETGEAR Inc.')
if mibBuilder.loadTexts: wg302.setContactInfo('4500 Great America Parkway Santa Clara, California 95054 Phone: (408) 907-8000 Fax: (408) 907-8097 Web Site: http://www.netgear.com')
if mibBuilder.loadTexts: wg302.setDescription('The MIB module for 802.11g ProSafe Wireless Access Point entities. iso(1).org(3).dod(6).internet(1).private(4). enterprises(1).netgear(4526).wireless(4).wg302(6)')
lanSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1))
apName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apName.setStatus('current')
if mibBuilder.loadTexts: apName.setDescription('The field indicates the name of AP.')
sysMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMacAddress.setStatus('current')
if mibBuilder.loadTexts: sysMacAddress.setDescription('This field indicates the system MAC Address.')
sysVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVersion.setStatus('current')
if mibBuilder.loadTexts: sysVersion.setDescription('This field indicates the system firmware version.')
sysCountryRegion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(784, 8, 51, 32, 40, 36, 31, 56, 100, 48, 96, 68, 76, 112, 84, 124, 756, 152, 156, 170, 188, 196, 203, 276, 208, 214, 12, 218, 233, 818, 724, 246, 250, 826, 268, 300, 320, 344, 340, 191, 348, 360, 372, 376, 356, 364, 352, 380, 400, 392, 408, 410, 414, 398, 422, 438, 440, 442, 428, 504, 492, 807, 446, 470, 484, 458, 528, 578, 554, 512, 591, 604, 608, 586, 616, 630, 620, 634, 642, 643, 682, 752, 702, 703, 705, 222, 760, 764, 788, 792, 780, 158, 804, 840, 858, 860, 862, 704, 887, 710, 716))).clone(namedValues=NamedValues(("unitedArabEmirates", 784), ("albania", 8), ("armenia", 51), ("argentina", 32), ("austria", 40), ("australia", 36), ("azerbaijan", 31), ("belgium", 56), ("bulgaria", 100), ("bahrain", 48), ("brunei", 96), ("bolivia", 68), ("brazil", 76), ("belarus", 112), ("belize", 84), ("canada", 124), ("switzerland", 756), ("chile", 152), ("china", 156), ("colombia", 170), ("costaRica", 188), ("cyprus", 196), ("czechRepublic", 203), ("germany", 276), ("denmark", 208), ("dominicanRepublic", 214), ("algeria", 12), ("ecuador", 218), ("estonia", 233), ("egypt", 818), ("spain", 724), ("finland", 246), ("france", 250), ("unitedKingdom", 826), ("georgia", 268), ("greece", 300), ("guatemala", 320), ("hongkong", 344), ("honduras", 340), ("croatia", 191), ("hungary", 348), ("indonesia", 360), ("ireland", 372), ("israel", 376), ("india", 356), ("iran", 364), ("iceland", 352), ("italy", 380), ("jordan", 400), ("japan", 392), ("northKorea", 408), ("koreaRepublic", 410), ("kuwait", 414), ("kazakhstan", 398), ("lebanon", 422), ("liechtenstein", 438), ("lithuania", 440), ("luxembourg", 442), ("latvia", 428), ("marocco", 504), ("monaco", 492), ("macedonia", 807), ("macau", 446), ("malta", 470), ("mexico", 484), ("malaysia", 458), ("netherlands", 528), ("norway", 578), ("newZealand", 554), ("oman", 512), ("panama", 591), ("peru", 604), ("philippines", 608), ("pakistan", 586), ("poland", 616), ("puertoRico", 630), ("portugal", 620), ("qatar", 634), ("romania", 642), ("russia", 643), ("saudiArabia", 682), ("sweden", 752), ("singapore", 702), ("slovakRepublic", 703), ("slovenia", 705), ("elSalvador", 222), ("syria", 760), ("thailand", 764), ("tunisia", 788), ("turkey", 792), ("trinidadandTobago", 780), ("taiwan", 158), ("ukraine", 804), ("unitedStates", 840), ("uruguay", 858), ("uzbekistan", 860), ("venezuela", 862), ("vietnam", 704), ("yemen", 887), ("southAfrica", 710), ("zimbabwe", 716)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCountryRegion.setStatus('current')
if mibBuilder.loadTexts: sysCountryRegion.setDescription('This attribute shall indicate the region of operation for which which the wireless interface is intended. =752: sweden =826: unitedKingdom =840: usa')
adminName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: adminName.setStatus('obsolete')
if mibBuilder.loadTexts: adminName.setDescription('The field indicates the administrator name.')
adminPasswd = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: adminPasswd.setStatus('obsolete')
if mibBuilder.loadTexts: adminPasswd.setDescription('The field indicates the administrator password. The AP can be managed in such way as utility,telnet and so on.')
dhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcpclient", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpStatus.setDescription('This attribute shall indicate whether dhcp client status.')
ipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
if mibBuilder.loadTexts: ipAddr.setDescription('The field indicates the IP address of AP on the wireless interface,when worked in router or router/bridge mode. Ethernet and wireless interface share the same IP address, when worked in bridge mode. ')
netmaskAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netmaskAddr.setStatus('current')
if mibBuilder.loadTexts: netmaskAddr.setDescription('The field indicates the netmask of AP on the wireless interface,when worked in router or router/bridge mode. Ethernet and wireless interface share the same netmask address,when worked in bridge mode. ')
gatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayAddr.setStatus('current')
if mibBuilder.loadTexts: gatewayAddr.setDescription('The field indicates the gateway of AP on the wireless interface,when worked in router or router/bridge mode. Ethernet and wireless interface share the same gateway address,when worked in bridge mode. ')
pridnsipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pridnsipAddr.setStatus('current')
if mibBuilder.loadTexts: pridnsipAddr.setDescription('This attributes shall indicates the IP address of the primary DNS server. ***The value can only be set to an IP address in dot format.')
snddnsipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snddnsipAddr.setStatus('current')
if mibBuilder.loadTexts: snddnsipAddr.setDescription('This attributes shall indicates the IP address of the secondary DNS server. ***The value can only be set to an IP address in dot format.')
spantree = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spantree.setStatus('current')
if mibBuilder.loadTexts: spantree.setDescription('This attribute shall indicate spanning tree.')
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
if mibBuilder.loadTexts: vlanEnable.setDescription('This attribute shall indicate whether enable VLAN(802.1Q).')
managementVlanID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementVlanID.setStatus('current')
if mibBuilder.loadTexts: managementVlanID.setDescription('This attribute shall indicate the Management VLAN ID. ')
untaggedVlanID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: untaggedVlanID.setStatus('current')
if mibBuilder.loadTexts: untaggedVlanID.setDescription('This attribute shall indicate the Untagged VLAN ID. ')
wlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2), )
if mibBuilder.loadTexts: wlanSettingTable.setStatus('current')
if mibBuilder.loadTexts: wlanSettingTable.setDescription('wlanSettingsallow for multiple instances on an agent.')
wlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanSettingEntry.setStatus('current')
if mibBuilder.loadTexts: wlanSettingEntry.setDescription('An entry in the wlanSettingTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet-standard MIB is one-to-one. As such, the value of an ifIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
operatemode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatemode.setStatus('current')
if mibBuilder.loadTexts: operatemode.setDescription('This attribute shall indicate the desired wireless operating mode. The option are: auto - Both 802.11g and 802.11b wireless stations can be used. dot11b - All 802.11b wireless stations can be used. 802.11g wireless stations can still be used if they can operate in 802.11b mode. dot11g - Only 802.11g wireless stations can be used.')
radioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEnable.setStatus('current')
if mibBuilder.loadTexts: radioEnable.setDescription('This attribute shall indicate whether the radio is enabled.')
channel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channel.setStatus('current')
if mibBuilder.loadTexts: channel.setDescription('This attribute shall indicate the channel number to be used.')
datarate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1000, 2000, 5500, 6000, 9000, 11000, 12000, 18000, 24000, 36000, 48000, 54000))).clone(namedValues=NamedValues(("best", 0), ("rate1Mbps", 1000), ("rate2Mbps", 2000), ("rate5dot5Mbps", 5500), ("rate6Mbps", 6000), ("rate9Mbps", 9000), ("rate11Mbps", 11000), ("rate12Mbps", 12000), ("rate18Mbps", 18000), ("rate24Mbps", 24000), ("rate36Mbps", 36000), ("rate48Mbps", 48000), ("rate54Mbps", 54000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datarate.setStatus('current')
if mibBuilder.loadTexts: datarate.setDescription('This attribute shall indicate the transmite rate. When the operatemode is: auto(0) - can set to 0:best, 1:1Mb/s, 2:2Mb/s, 5.5:5.5Mb/s, 11:11 Mb/s, 6:6Mb/s, 9:9Mb/s, 12:12Mb/s, 18:18Mb/s, 24:24Mb/s, 36:36Mb/s, 48:48Mb/s, and 54:54Mb/s. dot11a(1) - can set to 0:best, 6:6Mb/s, 9:9Mb/s, 12:12Mb/s, 18:18Mb/s, 24:24Mb/s, 36:36Mb/s, 48:48Mb/s and 54:54Mb/s. dot11b(2) - can set to 0:best, 1:1Mb/s, 2:2Mb/s, 5.5:5.5Mb/s, and 11:11 Mb/s. dot11g(3) - can set to 0:best, 6:6Mb/s, 9:9Mb/s, 12:12Mb/s, 18:18Mb/s, 24:24Mb/s, 36:36Mb/s, 48:48Mb/s and 54:54Mb/s.')
wmmSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wmmSupport.setStatus('current')
if mibBuilder.loadTexts: wmmSupport.setDescription('This field indicates whether support WMM(Wireless Multimedia).')
beaconinterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setUnits('1024 microsecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: beaconinterval.setStatus('current')
if mibBuilder.loadTexts: beaconinterval.setDescription('This attribute shall indicate the Beacon Interval.')
rtsthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsthreshold.setStatus('current')
if mibBuilder.loadTexts: rtsthreshold.setDescription('This attribute shall indicate the RTS threshold.')
fraglength = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraglength.setStatus('current')
if mibBuilder.loadTexts: fraglength.setDescription('This attribute shall indicate the fragmentation threshold.')
dtiminterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiminterval.setStatus('current')
if mibBuilder.loadTexts: dtiminterval.setDescription('This attribute shall indicate the DTIM period.')
preambletype = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: preambletype.setStatus('current')
if mibBuilder.loadTexts: preambletype.setDescription('This attribute shall indicate the preamble setting. This setting is only applicable to 802.11b mode.')
txpower = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3), ("min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txpower.setStatus('current')
if mibBuilder.loadTexts: txpower.setDescription('This attribute shall indicate the tranmiste power.')
superG = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superG.setStatus('current')
if mibBuilder.loadTexts: superG.setDescription('This attribute shall indicate whether super mode (super-A for 11a radio, Super-G for 11g radio) is enabled.')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("local", 2), ("server", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlMode.setStatus('current')
if mibBuilder.loadTexts: accessControlMode.setDescription('The field indicates whether the access control list is enabled and the source of the database of the access control list.')
antenna = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antenna.setStatus('obsolete')
if mibBuilder.loadTexts: antenna.setDescription('This attribute shall indicate the tranmistted power.')
vapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3))
vapWepAndGlobalSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 1), )
if mibBuilder.loadTexts: vapWepAndGlobalSettingTable.setStatus('current')
if mibBuilder.loadTexts: vapWepAndGlobalSettingTable.setDescription('VAP attributes setting table.')
vapWepAndGlobalSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vapWepAndGlobalSettingEntry.setStatus('current')
if mibBuilder.loadTexts: vapWepAndGlobalSettingEntry.setDescription(' VAP attributes setting table.')
wepKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40, 104, 128))).clone(namedValues=NamedValues(("hex64", 40), ("hex128", 104), ("hex152", 128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyType.setStatus('current')
if mibBuilder.loadTexts: wepKeyType.setDescription('The field shall indicate the type of WEP key.')
key1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key1.setStatus('current')
if mibBuilder.loadTexts: key1.setDescription('The field indicates the key value of the first default wep key.')
key2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key2.setStatus('current')
if mibBuilder.loadTexts: key2.setDescription('The field indicates the key value of the second default wep key.')
key3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key3.setStatus('current')
if mibBuilder.loadTexts: key3.setDescription('The field indicates the key value of the third default wep key.')
key4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key4.setStatus('current')
if mibBuilder.loadTexts: key4.setDescription('The field indicates the key value of the fourth default wep key.')
wepPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepPassPhrase.setStatus('current')
if mibBuilder.loadTexts: wepPassPhrase.setDescription('This attribute shall indicate WEP pass phrase, used to generate four WEP keys.')
vapSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2), )
if mibBuilder.loadTexts: vapSettingTable.setStatus('current')
if mibBuilder.loadTexts: vapSettingTable.setDescription('VAP attributes setting table.')
vapSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "WG302", "vapIndex"))
if mibBuilder.loadTexts: vapSettingEntry.setStatus('current')
if mibBuilder.loadTexts: vapSettingEntry.setDescription('VAP attributes setting table.')
vapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vapIndex.setStatus('current')
if mibBuilder.loadTexts: vapIndex.setDescription('Description.')
vapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vapEnable.setStatus('current')
if mibBuilder.loadTexts: vapEnable.setDescription('This attribute shall indicate whether enable VAP. ')
ssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssid.setStatus('current')
if mibBuilder.loadTexts: ssid.setDescription("This attribute shall indicate SSID.Its length can't be large than 33 .")
hidenetworkname = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hidenetworkname.setStatus('current')
if mibBuilder.loadTexts: hidenetworkname.setDescription('This attribute shall indicate whether broadcast wireless network Name (SSID).')
vlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanID.setStatus('current')
if mibBuilder.loadTexts: vlanID.setDescription('This attribute shall indicate the VLAN ID. ')
securityProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfileName.setStatus('current')
if mibBuilder.loadTexts: securityProfileName.setDescription('Description.')
presharekey = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: presharekey.setStatus('current')
if mibBuilder.loadTexts: presharekey.setDescription('This attribute shall indicate preshare key.')
authenticationtype = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 12, 16, 32, 48))).clone(namedValues=NamedValues(("open", 0), ("shared", 1), ("legacy802dot1x", 2), ("wpa", 4), ("wpa2", 8), ("wpaORwpa2", 12), ("wpapsk", 16), ("wpa2psk", 32), ("wpapskORwpa2psk", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenticationtype.setStatus('current')
if mibBuilder.loadTexts: authenticationtype.setDescription('The field indicates how to authenticate the station.')
encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("tkip", 2), ("aes", 4), ("tkipORaes", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryption.setStatus('current')
if mibBuilder.loadTexts: encryption.setDescription('The field indicates how to encryption the station.')
keyno = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keyno.setStatus('current')
if mibBuilder.loadTexts: keyno.setDescription('The field indicates the number of default wep key.')
wlanseparator = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 3, 2, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanseparator.setStatus('current')
if mibBuilder.loadTexts: wlanseparator.setDescription('This attribute shall indicate whether enable No see.')
remoteSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 4))
sshd = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshd.setStatus('current')
if mibBuilder.loadTexts: sshd.setDescription('This attribute shall indicate whether the SSH is enabled.')
snmpenable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 4, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpenable.setStatus('current')
if mibBuilder.loadTexts: snmpenable.setDescription('This attribute shall indicate whether the SNMP agent is enabled.')
trapServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerIP.setStatus('current')
if mibBuilder.loadTexts: trapServerIP.setDescription('The field indicates the trap server IP address. ***The value can only be set to an IP address in dot format.')
trapServerCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerCommunity.setStatus('current')
if mibBuilder.loadTexts: trapServerCommunity.setDescription('The field indicates the trap server community name. ***The value can only be set to 1 to 32 readable string.')
readOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readOnlyCommunity.setStatus('current')
if mibBuilder.loadTexts: readOnlyCommunity.setDescription('The field indicates the read only community name. ***The value can only be set to 1 to 32 readable string.')
readWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: readWriteCommunity.setDescription('The field indicates the read write community name. ***The value can only be set to 1 to 32 readable string.')
statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5))
wiredethernetstat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 1))
lanrecvpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanrecvpacket.setStatus('current')
if mibBuilder.loadTexts: lanrecvpacket.setDescription('the field indicates the sum of received packets.')
lantranspacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lantranspacket.setStatus('current')
if mibBuilder.loadTexts: lantranspacket.setDescription('the field indicates the sum of transmitted packets.')
lanrecvbytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanrecvbytes.setStatus('current')
if mibBuilder.loadTexts: lanrecvbytes.setDescription('the field indicates the sum of received bytes.')
lantransbytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lantransbytes.setStatus('current')
if mibBuilder.loadTexts: lantransbytes.setDescription('the field indicates the sum of transmitted bytes.')
wirelessStatTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2), )
if mibBuilder.loadTexts: wirelessStatTable.setStatus('current')
if mibBuilder.loadTexts: wirelessStatTable.setDescription('Description.')
wirelessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wirelessStatEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessStatEntry.setDescription('Description.')
wlanrecvunicastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvunicastpacket.setStatus('current')
if mibBuilder.loadTexts: wlanrecvunicastpacket.setDescription('the field indicates the sum of received unicast packets.')
wlantransunicastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransunicastpacket.setStatus('current')
if mibBuilder.loadTexts: wlantransunicastpacket.setDescription('the field indicates the sum of transmitted unicast packets.')
wlanrecvbroadcastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvbroadcastpacket.setStatus('current')
if mibBuilder.loadTexts: wlanrecvbroadcastpacket.setDescription('the field indicates the sum of received broadcast packets.')
wlantransbroadcastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransbroadcastpacket.setStatus('current')
if mibBuilder.loadTexts: wlantransbroadcastpacket.setDescription('the field indicates the sum of transmitted broadcast packets.')
wlanrecvmulticastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvmulticastpacket.setStatus('current')
if mibBuilder.loadTexts: wlanrecvmulticastpacket.setDescription('the field indicates the sum of received multicast packets.')
wlantransmulticastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransmulticastpacket.setStatus('current')
if mibBuilder.loadTexts: wlantransmulticastpacket.setDescription('the field indicates the sum of transmitted multicast packets.')
wlanrecvpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvpacket.setStatus('current')
if mibBuilder.loadTexts: wlanrecvpacket.setDescription('the field indicates the sum of received packets.')
wlantranspacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantranspacket.setStatus('current')
if mibBuilder.loadTexts: wlantranspacket.setDescription('the field indicates the sum of transmitted packets.')
wlanrecvbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvbytes.setStatus('current')
if mibBuilder.loadTexts: wlanrecvbytes.setDescription('the field indicates the sum of received bytes.')
wlantransbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 5, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransbytes.setStatus('current')
if mibBuilder.loadTexts: wlantransbytes.setDescription('the field indicates the sum of transmitted bytes.')
stationListTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 6), )
if mibBuilder.loadTexts: stationListTable.setStatus('current')
if mibBuilder.loadTexts: stationListTable.setDescription('stationList Table show multiple instances on an agent.')
stationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "WG302", "macaddress"))
if mibBuilder.loadTexts: stationListEntry.setStatus('current')
if mibBuilder.loadTexts: stationListEntry.setDescription('An entry in the wlanClientsTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an ifIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
macaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macaddress.setStatus('current')
if mibBuilder.loadTexts: macaddress.setDescription('This attribute shall indicate MAC address of the associated stationID.')
clientIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIpaddr.setStatus('current')
if mibBuilder.loadTexts: clientIpaddr.setDescription('This attribute shall indicate Ip address of the associated stationID.')
clientWirelessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientWirelessMode.setStatus('current')
if mibBuilder.loadTexts: clientWirelessMode.setDescription('This attribute shall indicate the wireless mode of the associated stationID.')
stationstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("authenticating", 1), ("authenticated", 2), ("associating", 3), ("associated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationstatus.setStatus('current')
if mibBuilder.loadTexts: stationstatus.setDescription('This attribute shall indicate the status of station.')
wlanWdsTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7), )
if mibBuilder.loadTexts: wlanWdsTable.setStatus('current')
if mibBuilder.loadTexts: wlanWdsTable.setDescription('WDS attributes in tablular form to allow for multiple instances on an agent.')
wlanWdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanWdsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanWdsEntry.setDescription('An entry in the wlanWdsTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an ifIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
apmode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ap", 0), ("ptp", 2), ("ptp-ap", 3), ("pxp", 4), ("pxp-ap", 5), ("repeater", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apmode.setStatus('current')
if mibBuilder.loadTexts: apmode.setDescription('This a command field for conntrol AP operation mode. ')
ptpremotemacaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpremotemacaddress.setStatus('current')
if mibBuilder.loadTexts: ptpremotemacaddress.setDescription('This attribute shall indicate the stationID.')
pxpremotemacaddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress1.setStatus('current')
if mibBuilder.loadTexts: pxpremotemacaddress1.setDescription('This attribute shall indicate the stationID.')
pxpremotemacaddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress2.setStatus('current')
if mibBuilder.loadTexts: pxpremotemacaddress2.setDescription('This attribute shall indicate the stationID.')
pxpremotemacaddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress3.setStatus('current')
if mibBuilder.loadTexts: pxpremotemacaddress3.setDescription('This attribute shall indicate the stationID.')
pxpremotemacaddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress4.setStatus('current')
if mibBuilder.loadTexts: pxpremotemacaddress4.setDescription('This attribute shall indicate the stationID.')
repremotemacaddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress1.setStatus('current')
if mibBuilder.loadTexts: repremotemacaddress1.setDescription('This attribute shall indicate the stationID.')
repremotemacaddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress2.setStatus('current')
if mibBuilder.loadTexts: repremotemacaddress2.setDescription('This attribute shall indicate the stationID.')
repremotemacaddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress3.setStatus('current')
if mibBuilder.loadTexts: repremotemacaddress3.setDescription('This attribute shall indicate the stationID.')
repremotemacaddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress4.setStatus('current')
if mibBuilder.loadTexts: repremotemacaddress4.setDescription('This attribute shall indicate the stationID.')
localMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 7, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localMacAddress.setStatus('current')
if mibBuilder.loadTexts: localMacAddress.setDescription('This attribute shall indicate the local MAC Address.')
info802dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8))
authinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 1))
priradipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradipaddr.setStatus('current')
if mibBuilder.loadTexts: priradipaddr.setDescription('Internet address of the Primary Radius Server.')
priradport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradport.setStatus('current')
if mibBuilder.loadTexts: priradport.setDescription('Port number used for authentication at the Primary Radius Server.')
priradsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradsharedsecret.setStatus('current')
if mibBuilder.loadTexts: priradsharedsecret.setDescription('Secret shared between NAS and the Primary Radius Server.')
sndradipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradipaddr.setStatus('current')
if mibBuilder.loadTexts: sndradipaddr.setDescription('Internet address of the Second Radius Server.')
sndradport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradport.setStatus('current')
if mibBuilder.loadTexts: sndradport.setDescription('Port number used for authentication at the Second Radius Server.')
sndradsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradsharedsecret.setStatus('current')
if mibBuilder.loadTexts: sndradsharedsecret.setDescription('Secret shared between NAS and the Second Radius Server.')
accntinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 2))
priacntipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntipaddr.setStatus('current')
if mibBuilder.loadTexts: priacntipaddr.setDescription('IP address of the Primary radius account server.')
priacntport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntport.setStatus('current')
if mibBuilder.loadTexts: priacntport.setDescription('port number of the Primary radius account server.')
priacntsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntsharedsecret.setStatus('current')
if mibBuilder.loadTexts: priacntsharedsecret.setDescription('password used by the ap to connect to the Primary radius account serve.')
sndacntipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntipaddr.setStatus('current')
if mibBuilder.loadTexts: sndacntipaddr.setDescription('IP address of the Second radius account server.')
sndacntport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntport.setStatus('current')
if mibBuilder.loadTexts: sndacntport.setDescription('port number of the Second radius account server.')
sndacntsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 8, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntsharedsecret.setStatus('current')
if mibBuilder.loadTexts: sndacntsharedsecret.setDescription('password used by the ap to connect to the Second radius account server.')
userCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 9))
resetAP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAP.setStatus('current')
if mibBuilder.loadTexts: resetAP.setDescription('This a command field for conntrol AP action. Write value 1 to reset the AP.')
timeSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 10))
currenttime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currenttime.setStatus('current')
if mibBuilder.loadTexts: currenttime.setDescription('This field indicates the current system time in a format: YYYY/MM/DD hh:mm:ss.')
timezone = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279))).clone(namedValues=NamedValues(("afghanistan", 0), ("albania", 1), ("algeria", 2), ("american-samoa", 3), ("andorra", 4), ("angola", 5), ("anguilla", 6), ("antigua-and-barbuda", 7), ("argentina", 8), ("armenia", 9), ("aruba", 10), ("australia-lordHoweIsland", 11), ("australia-new-south-wales-capitol-territory-victoria", 12), ("australia-northern-territory", 13), ("australia-queensland", 14), ("australia-south-australia-and-broken-hill", 15), ("australia-tasmania", 16), ("australia-western", 17), ("austria", 18), ("azerbaijan", 19), ("bahamas", 20), ("bahrain", 21), ("bangladesh", 22), ("barbados", 23), ("belarus", 24), ("belgium", 25), ("belize", 26), ("benin", 27), ("bermuda", 28), ("bhutan", 29), ("bolivia", 30), ("bonaire", 31), ("bosnia-herzegovina", 32), ("botswana", 33), ("brazil-east-including-all-coast-and-brasilia", 34), ("brazil-fernando-de-noronha", 35), ("brazil-trinity-of-acre", 36), ("brazil-west", 37), ("british-virgin-islands", 38), ("brunei", 39), ("bulgaria", 40), ("burkina-faso", 41), ("burma", 42), ("burundi", 43), ("cambodia", 44), ("cameroon", 45), ("canada-atlantic", 46), ("canada-central", 47), ("canada-eastern", 48), ("canada-mountain", 49), ("canada-newfoundland", 50), ("canada-pacific-and-yukon", 51), ("canada-saskatchewan", 52), ("cape-verde", 53), ("cayman-islands", 54), ("central-african-republic", 55), ("chad", 56), ("chile", 57), ("chile-easter-island", 58), ("china", 59), ("christmas-islands", 60), ("cocos-keeling-islands", 61), ("colombia", 62), ("congo", 63), ("cook-islands", 64), ("costa-rica", 65), ("cote-d-ivoire", 66), ("croatia", 67), ("cuba", 68), ("curacao", 69), ("cyprus", 70), ("czech-republic", 71), ("denmark", 72), ("djibouti", 73), ("dominica", 74), ("the-dominican-republic", 75), ("ecuador", 76), ("ecuador-galapagos-islands", 77), ("egypt", 78), ("el-salvador", 79), ("equatorial-guinea", 80), ("eritrea", 81), ("estonia", 82), ("ethiopia", 83), ("faroe-islands", 84), ("fiji", 85), ("finland", 86), ("france", 87), ("french-guiana", 88), ("french-polynesia", 89), ("gabon", 90), ("the-gambia", 91), ("georgia", 92), ("germany", 93), ("ghana", 94), ("gibraltar", 95), ("greece", 96), ("greenland-scorsbysund", 97), ("greenland-thule", 98), ("grenada", 99), ("guadeloupe", 100), ("guam", 101), ("guatemala", 102), ("guinea-bissau", 103), ("guyana", 104), ("haiti", 105), ("hawaii", 106), ("honduras", 107), ("hong-kong", 108), ("hungary", 109), ("iceland", 110), ("india", 111), ("indonesia-central", 112), ("indonesia-east", 113), ("indonesia-west", 114), ("iran", 115), ("iraq", 116), ("ireland", 117), ("israel", 118), ("italy", 119), ("jamaica", 120), ("japan", 121), ("johnston-islands", 122), ("jordan", 123), ("juan-fernandez-islands", 124), ("kazakhstan", 125), ("kenya", 126), ("kiribati", 127), ("kuwait", 128), ("kyrgyzstan", 129), ("laos", 130), ("latvia", 131), ("lebanon", 132), ("leeward-islands", 133), ("lesotho", 134), ("liberia", 135), ("libya", 136), ("liechtenstein", 137), ("lithuania", 138), ("luxembourg", 139), ("macao", 140), ("macedonia", 141), ("madagascar", 142), ("malawi", 143), ("malaysia", 144), ("maldives", 145), ("mali", 146), ("malta", 147), ("mariana-Islands", 148), ("martinique", 149), ("mauritania", 150), ("mauritius", 151), ("mayotte", 152), ("mexico", 153), ("mexico-baj-n", 154), ("mexico-baj-s", 155), ("midway-islands", 156), ("moldova", 157), ("monaco", 158), ("mongolia", 159), ("montenegro", 160), ("montserrat", 161), ("morocco", 162), ("mozambique", 163), ("namibia", 164), ("nauru", 165), ("nepal", 166), ("the-netherlands-antilles", 167), ("the-netherlands", 168), ("new-caledonia", 169), ("new-hebrides", 170), ("new-zealand9", 171), ("new-zealand-chatham-island", 172), ("nicaragua", 173), ("niger", 174), ("nigeria", 175), ("niue-islands", 176), ("norfolk-island", 177), ("north-korea", 178), ("norway", 179), ("oman", 180), ("pakistan", 181), ("palau", 182), ("panama", 183), ("papua-new-guinea", 184), ("paraguay", 185), ("peru", 186), ("philippines", 187), ("pitcairn-island", 188), ("poland", 189), ("portugal-azores", 190), ("portugal-madeira", 191), ("puerto-rico", 192), ("qatar", 193), ("reunion", 194), ("romania", 195), ("russia-moscow", 196), ("russian-fed-zone-1-kaliningrad", 197), ("russian-fed-zone-10-magadan", 198), ("russian-fed-zone-11-petropavlovsk-kamchatsky", 199), ("russian-fed-zone-2-st-petersburg", 200), ("russian-fed-zone-3-izhevsk", 201), ("russian-fed-zone-4-ekaterinburg", 202), ("russian-fed-zone-5-novosibirsk", 203), ("russian-fed-zone-6-krasnojarsk", 204), ("russian-fed-zone-7-irkutsk", 205), ("russian-fed-zone-8-yakatsk", 206), ("russian-fed-zone-9-vladivostok", 207), ("rwanda", 208), ("saint-pierre-and-miquelon", 209), ("san-marino", 210), ("sao-tome-and-principe", 211), ("saudi-arabia", 212), ("senegal", 213), ("serbia", 214), ("the-seychelles", 215), ("sierra-leone", 216), ("singapore", 217), ("slovakia", 218), ("slovenia", 219), ("solomon-islands", 220), ("somalia", 221), ("south-africa", 222), ("south-georgia", 223), ("south-korea", 224), ("spain", 225), ("spain-canary-islands", 226), ("sri-lanka", 227), ("st-helena", 228), ("st-kitts-nevis", 229), ("st-lucia", 230), ("st-vincent-and-the-grenadines", 231), ("sudan", 232), ("suriname", 233), ("swaziland", 234), ("sweden", 235), ("switzerland", 236), ("syria", 237), ("tahiti", 238), ("taiwan", 239), ("tajikistan", 240), ("tanzania", 241), ("thailand", 242), ("togo", 243), ("tonga", 244), ("trinidad-and-tobago", 245), ("tunisia", 246), ("turkey", 247), ("turkmenistan", 248), ("turks-and-caicos-islands", 249), ("tuvalu", 250), ("uganda", 251), ("ukraine", 252), ("ukraine-simferopol", 253), ("united-arab-emirates", 254)) + NamedValues(("united-kingdom", 255), ("uruguay", 256), ("us-virgin-islands", 257), ("usa-alaska", 258), ("usa-aleutian-islands", 259), ("usa-arizona", 260), ("usa-central", 261), ("usa-eastern", 262), ("usa-indiana", 263), ("usa-mountain", 264), ("usa-pacific", 265), ("uzbekistan", 266), ("vanuatu", 267), ("vatican-city", 268), ("venezuela", 269), ("vietnam", 270), ("wake-islands", 271), ("wallis-and-futana-islands", 272), ("western-samoa", 273), ("windward-islands", 274), ("yemen", 275), ("zaire-kasai", 276), ("zaire-kinshasa", 277), ("zambia", 278), ("zimbabwe", 279)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timezone.setStatus('current')
if mibBuilder.loadTexts: timezone.setDescription('This field indicates the timezone of the system.')
daylightsaving = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 10, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightsaving.setStatus('current')
if mibBuilder.loadTexts: daylightsaving.setDescription('This attribute shall indicate the Daylight Saving time.')
dhcpsSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11))
dhcpserver = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpserver.setStatus('current')
if mibBuilder.loadTexts: dhcpserver.setDescription('This attribute shall indicate whether DHCP server is enable or disable.')
dhcpsipstart = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsipstart.setStatus('current')
if mibBuilder.loadTexts: dhcpsipstart.setDescription('This attribute indicates the starting IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpsipend = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsipend.setStatus('current')
if mibBuilder.loadTexts: dhcpsipend.setDescription('This attribute indicates the ending IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpnetmask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpnetmask.setStatus('current')
if mibBuilder.loadTexts: dhcpnetmask.setDescription('This attribute indicates the net mask of DHCP server will give. ***The value can only be set to the net mask address in dot format.')
dhcpsgateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsgateway.setStatus('current')
if mibBuilder.loadTexts: dhcpsgateway.setDescription('This attribute indicates the gateway IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpspridns = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspridns.setStatus('current')
if mibBuilder.loadTexts: dhcpspridns.setDescription('This attribute indicates the primary DNS IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpspsnddns = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspsnddns.setStatus('current')
if mibBuilder.loadTexts: dhcpspsnddns.setDescription('This attribute indicates the secondary DNS IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpspriwins = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspriwins.setStatus('current')
if mibBuilder.loadTexts: dhcpspriwins.setDescription('This attribute indicates the primary WINS IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpspsndwins = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspsndwins.setStatus('current')
if mibBuilder.loadTexts: dhcpspsndwins.setDescription('This attribute indicates the secondary WINS IP address of DHCP server will give. ***The value can only be set to a IP address in dot format.')
dhcpsleasetime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsleasetime.setStatus('current')
if mibBuilder.loadTexts: dhcpsleasetime.setDescription('This attribute shall indicate the IP lease time of DHCP server will give to DHCP clients in minutes')
logSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 12))
syslog = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 12, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslog.setStatus('current')
if mibBuilder.loadTexts: syslog.setDescription('This attribute shall indicate whether syslog is enable or disable.')
syslogsrvip = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogsrvip.setStatus('current')
if mibBuilder.loadTexts: syslogsrvip.setDescription('This attributes shall indicates the IP address of the syslog server. ***The value can only be set to a IP address in dot format.')
syslogsrvport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogsrvport.setStatus('current')
if mibBuilder.loadTexts: syslogsrvport.setDescription('This attributes shall indicates the Port of the Syslog server. *** The value can only be set to a port in dot format.')
httpRedirectSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 6, 13))
httpRedirectEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectEnable.setStatus('current')
if mibBuilder.loadTexts: httpRedirectEnable.setDescription('Description.')
httpRedirectURL = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 6, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectURL.setStatus('current')
if mibBuilder.loadTexts: httpRedirectURL.setDescription('Description.')
detectedApTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14), )
if mibBuilder.loadTexts: detectedApTable.setStatus('current')
if mibBuilder.loadTexts: detectedApTable.setDescription('detectedAp Table shows list of detected neighbouring APs.')
detectedApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1), ).setIndexNames((0, "WG302", "apmac"))
if mibBuilder.loadTexts: detectedApEntry.setStatus('current')
if mibBuilder.loadTexts: detectedApEntry.setDescription('An entry in the detectedApTable.')
apmac = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apmac.setStatus('current')
if mibBuilder.loadTexts: apmac.setDescription('This attribute shall indicate MAC address of the detected AP.')
apssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apssid.setStatus('current')
if mibBuilder.loadTexts: apssid.setDescription('This attribute shall indicate ssid of the detected AP.')
apprivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apprivacy.setStatus('current')
if mibBuilder.loadTexts: apprivacy.setDescription('This attribute shall indicate whether privacy is enabled.')
apband = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apband.setStatus('current')
if mibBuilder.loadTexts: apband.setDescription('This attribute shall indicate the operating band of detected AP.')
apchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apchannel.setStatus('current')
if mibBuilder.loadTexts: apchannel.setDescription('This attribute shall indicate the channel number used.')
aprate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aprate.setStatus('current')
if mibBuilder.loadTexts: aprate.setDescription('This attribute shall indicate the rate.')
apbeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apbeaconInterval.setStatus('current')
if mibBuilder.loadTexts: apbeaconInterval.setDescription('This attribute shall indicate the beacon interval in kus (1.024 ms).')
apnumBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnumBeacons.setStatus('current')
if mibBuilder.loadTexts: apnumBeacons.setDescription('This attribute shall indicate the number of beacons received.')
aplastBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aplastBeacon.setStatus('current')
if mibBuilder.loadTexts: aplastBeacon.setDescription('This attribute shall indicate the time of the last beacon.')
knownApTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15), )
if mibBuilder.loadTexts: knownApTable.setStatus('current')
if mibBuilder.loadTexts: knownApTable.setDescription('knownAp Table shows list of known APs.')
knownApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1), ).setIndexNames((0, "WG302", "knownapmac"))
if mibBuilder.loadTexts: knownApEntry.setStatus('current')
if mibBuilder.loadTexts: knownApEntry.setDescription('An entry in the knownApTable.')
knownapmac = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapmac.setStatus('current')
if mibBuilder.loadTexts: knownapmac.setDescription('This attribute shall indicate MAC address of the known AP.')
knownapssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapssid.setStatus('current')
if mibBuilder.loadTexts: knownapssid.setDescription('This attribute shall indicate ssid of the known AP.')
knownapprivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapprivacy.setStatus('current')
if mibBuilder.loadTexts: knownapprivacy.setDescription('This attribute shall indicate whether privacy is enabled.')
knownapband = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapband.setStatus('current')
if mibBuilder.loadTexts: knownapband.setDescription('This attribute shall indicate the operating band of known AP.')
knownapchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapchannel.setStatus('current')
if mibBuilder.loadTexts: knownapchannel.setDescription('This attribute shall indicate the channel number used.')
knownaprate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownaprate.setStatus('current')
if mibBuilder.loadTexts: knownaprate.setDescription('This attribute shall indicate the rate.')
knownapbeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapbeaconInterval.setStatus('current')
if mibBuilder.loadTexts: knownapbeaconInterval.setDescription('This attribute shall indicate the beacon interval in kus (1.024 ms).')
knownapnumBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapnumBeacons.setStatus('current')
if mibBuilder.loadTexts: knownapnumBeacons.setDescription('This attribute shall indicate the number of beacons received.')
knownaplastBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownaplastBeacon.setStatus('current')
if mibBuilder.loadTexts: knownaplastBeacon.setDescription('This attribute shall indicate the time of the last beacon.')
knownapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 15, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: knownapEntryStatus.setStatus('current')
if mibBuilder.loadTexts: knownapEntryStatus.setDescription('The Known AP Entry status. Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
unknownApTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16), )
if mibBuilder.loadTexts: unknownApTable.setStatus('current')
if mibBuilder.loadTexts: unknownApTable.setDescription('unknownAp Table shows list of unknown APs.')
unknownApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1), ).setIndexNames((0, "WG302", "unknownapmac"))
if mibBuilder.loadTexts: unknownApEntry.setStatus('current')
if mibBuilder.loadTexts: unknownApEntry.setDescription('An entry in the unknownApTable.')
unknownapmac = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapmac.setStatus('current')
if mibBuilder.loadTexts: unknownapmac.setDescription('This attribute shall indicate MAC address of the unknown AP.')
unknownapssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapssid.setStatus('current')
if mibBuilder.loadTexts: unknownapssid.setDescription('This attribute shall indicate ssid of the unknown AP.')
unknownapprivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapprivacy.setStatus('current')
if mibBuilder.loadTexts: unknownapprivacy.setDescription('This attribute shall indicate whether privacy is enabled.')
unknownapband = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapband.setStatus('current')
if mibBuilder.loadTexts: unknownapband.setDescription('This attribute shall indicate the operating band of unknown AP.')
unknownapchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapchannel.setStatus('current')
if mibBuilder.loadTexts: unknownapchannel.setDescription('This attribute shall indicate the channel number used.')
unknownaprate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownaprate.setStatus('current')
if mibBuilder.loadTexts: unknownaprate.setDescription('This attribute shall indicate the rate.')
unknownapbeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapbeaconInterval.setStatus('current')
if mibBuilder.loadTexts: unknownapbeaconInterval.setDescription('This attribute shall indicate the beacon interval in kus (1.024 ms).')
unknownapnumBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapnumBeacons.setStatus('current')
if mibBuilder.loadTexts: unknownapnumBeacons.setDescription('This attribute shall indicate the number of beacons received.')
unknownaplastBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownaplastBeacon.setStatus('current')
if mibBuilder.loadTexts: unknownaplastBeacon.setDescription('This attribute shall indicate the time of the last beacon.')
wlanAccessControlLocalTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 6, 17), )
if mibBuilder.loadTexts: wlanAccessControlLocalTable.setStatus('current')
if mibBuilder.loadTexts: wlanAccessControlLocalTable.setDescription('ACL attributes in tablular form to allow for multiple instances on an agent.')
wlanAccessControlLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 6, 17, 1), ).setIndexNames((0, "WG302", "aclMAC"))
if mibBuilder.loadTexts: wlanAccessControlLocalEntry.setStatus('current')
if mibBuilder.loadTexts: wlanAccessControlLocalEntry.setDescription('An entry in the wlanAccessControlListTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet-standard MIB is one-to-one. As such, the value of an ifIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
aclMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 17, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMAC.setStatus('current')
if mibBuilder.loadTexts: aclMAC.setDescription('This field should indicate an MAC address entry in the access control local database. When write this field aclMAC=000000000000, shall remove current MAC address from local database. Otherwise, shall update the MAC address.')
aclMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 6, 17, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacStatus.setStatus('current')
if mibBuilder.loadTexts: aclMacStatus.setDescription('The ACL Mac status. Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
mibBuilder.exportSymbols("WG302", wlanAccessControlLocalTable=wlanAccessControlLocalTable, macaddress=macaddress, pxpremotemacaddress2=pxpremotemacaddress2, unknownApTable=unknownApTable, channel=channel, vapSettingTable=vapSettingTable, clientWirelessMode=clientWirelessMode, PYSNMP_MODULE_ID=wg302, userCommand=userCommand, httpRedirectURL=httpRedirectURL, sndacntport=sndacntport, repremotemacaddress2=repremotemacaddress2, adminPasswd=adminPasswd, wepKeyType=wepKeyType, operatemode=operatemode, pxpremotemacaddress4=pxpremotemacaddress4, vlanID=vlanID, wireless=wireless, readWriteCommunity=readWriteCommunity, sndradport=sndradport, pxpremotemacaddress3=pxpremotemacaddress3, wepPassPhrase=wepPassPhrase, knownaplastBeacon=knownaplastBeacon, priradport=priradport, wirelessStatEntry=wirelessStatEntry, dtiminterval=dtiminterval, wlantranspacket=wlantranspacket, apName=apName, knownapbeaconInterval=knownapbeaconInterval, gatewayAddr=gatewayAddr, timezone=timezone, authinfo=authinfo, wiredethernetstat=wiredethernetstat, wlantransunicastpacket=wlantransunicastpacket, wlanSettingTable=wlanSettingTable, spantree=spantree, knownapssid=knownapssid, wlanseparator=wlanseparator, unknownapprivacy=unknownapprivacy, daylightsaving=daylightsaving, statistic=statistic, hidenetworkname=hidenetworkname, wmmSupport=wmmSupport, wlanrecvbytes=wlanrecvbytes, knownapband=knownapband, accntinfo=accntinfo, unknownaprate=unknownaprate, vapSetting=vapSetting, stationstatus=stationstatus, knownapEntryStatus=knownapEntryStatus, wlanrecvmulticastpacket=wlanrecvmulticastpacket, fraglength=fraglength, priacntport=priacntport, syslog=syslog, lanrecvpacket=lanrecvpacket, wlantransmulticastpacket=wlantransmulticastpacket, dhcpsSettings=dhcpsSettings, key2=key2, untaggedVlanID=untaggedVlanID, rtsthreshold=rtsthreshold, aprate=aprate, vapIndex=vapIndex, stationListTable=stationListTable, pxpremotemacaddress1=pxpremotemacaddress1, sshd=sshd, apprivacy=apprivacy, aclMacStatus=aclMacStatus, priradsharedsecret=priradsharedsecret, priacntipaddr=priacntipaddr, antenna=antenna, snddnsipAddr=snddnsipAddr, knownapprivacy=knownapprivacy, radioEnable=radioEnable, txpower=txpower, sysVersion=sysVersion, netgear=netgear, datarate=datarate, apmac=apmac, wlanrecvpacket=wlanrecvpacket, repremotemacaddress3=repremotemacaddress3, sndacntipaddr=sndacntipaddr, httpRedirectEnable=httpRedirectEnable, wirelessStatTable=wirelessStatTable, unknownaplastBeacon=unknownaplastBeacon, unknownapbeaconInterval=unknownapbeaconInterval, localMacAddress=localMacAddress, knownapmac=knownapmac, beaconinterval=beaconinterval, dhcpsleasetime=dhcpsleasetime, apchannel=apchannel, managementVlanID=managementVlanID, lantransbytes=lantransbytes, wlanrecvbroadcastpacket=wlanrecvbroadcastpacket, priacntsharedsecret=priacntsharedsecret, dhcpspsndwins=dhcpspsndwins, knownapchannel=knownapchannel, pridnsipAddr=pridnsipAddr, ptpremotemacaddress=ptpremotemacaddress, wlantransbytes=wlantransbytes, sndradsharedsecret=sndradsharedsecret, dhcpsgateway=dhcpsgateway, httpRedirectSettings=httpRedirectSettings, accessControlMode=accessControlMode, aclMAC=aclMAC, trapServerCommunity=trapServerCommunity, lanrecvbytes=lanrecvbytes, vapSettingEntry=vapSettingEntry, wlanSettingEntry=wlanSettingEntry, key1=key1, adminName=adminName, wlanrecvunicastpacket=wlanrecvunicastpacket, apband=apband, wg302=wg302, unknownApEntry=unknownApEntry, keyno=keyno, unknownapband=unknownapband, apbeaconInterval=apbeaconInterval, knownaprate=knownaprate, ssid=ssid, syslogsrvip=syslogsrvip, netmaskAddr=netmaskAddr, priradipaddr=priradipaddr, dhcpspsnddns=dhcpspsnddns, apssid=apssid, unknownapnumBeacons=unknownapnumBeacons, dhcpStatus=dhcpStatus, snmpenable=snmpenable, readOnlyCommunity=readOnlyCommunity, vapEnable=vapEnable, presharekey=presharekey, wlantransbroadcastpacket=wlantransbroadcastpacket, wlanAccessControlLocalEntry=wlanAccessControlLocalEntry, currenttime=currenttime, wlanWdsTable=wlanWdsTable, dhcpsipend=dhcpsipend, logSettings=logSettings, knownApEntry=knownApEntry, knownApTable=knownApTable, key4=key4, repremotemacaddress1=repremotemacaddress1, clientIpaddr=clientIpaddr, vapWepAndGlobalSettingTable=vapWepAndGlobalSettingTable, ipAddr=ipAddr, detectedApTable=detectedApTable, stationListEntry=stationListEntry, aplastBeacon=aplastBeacon, dhcpserver=dhcpserver, authenticationtype=authenticationtype, preambletype=preambletype, sysMacAddress=sysMacAddress, key3=key3, detectedApEntry=detectedApEntry, dhcpsipstart=dhcpsipstart, info802dot1x=info802dot1x, vapWepAndGlobalSettingEntry=vapWepAndGlobalSettingEntry, securityProfileName=securityProfileName, sndacntsharedsecret=sndacntsharedsecret, dhcpspridns=dhcpspridns, apmode=apmode, timeSettings=timeSettings, trapServerIP=trapServerIP, syslogsrvport=syslogsrvport, sndradipaddr=sndradipaddr, lanSettings=lanSettings, remoteSettings=remoteSettings, superG=superG, unknownapssid=unknownapssid, knownapnumBeacons=knownapnumBeacons, dhcpnetmask=dhcpnetmask, lantranspacket=lantranspacket, resetAP=resetAP, wlanWdsEntry=wlanWdsEntry, sysCountryRegion=sysCountryRegion, encryption=encryption, unknownapchannel=unknownapchannel, vlanEnable=vlanEnable, unknownapmac=unknownapmac, repremotemacaddress4=repremotemacaddress4, dhcpspriwins=dhcpspriwins, apnumBeacons=apnumBeacons)
