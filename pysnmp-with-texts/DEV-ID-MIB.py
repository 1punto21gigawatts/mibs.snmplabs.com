#
# PySNMP MIB module DEV-ID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEV-ID-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Integer32, MibIdentifier, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, NotificationType, Counter64, IpAddress, Counter32, ObjectIdentity, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "MibIdentifier", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises", "NotificationType", "Counter64", "IpAddress", "Counter32", "ObjectIdentity", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nbDevId = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 1, 50, 16))
nbDevId.setRevisions(('2006-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nbDevId.setRevisionsDescriptions(('Initial edition.',))
if mibBuilder.loadTexts: nbDevId.setLastUpdated('200602220000Z')
if mibBuilder.loadTexts: nbDevId.setOrganization('MRV Communications, Inc.')
if mibBuilder.loadTexts: nbDevId.setContactInfo('Alex Rozin MRV Communication, Inc http://www.mrv.com Email: ARozin@mrv.com')
if mibBuilder.loadTexts: nbDevId.setDescription('Supports information about device identifiaction.')
nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbSwitchG1Il = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50))
nbDevIdHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4))
nbDevIdSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5))
nbDevIdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 101))
nbDevIdHardwareSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 3))
nbDevIdTypeName = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdTypeName.setStatus('current')
if mibBuilder.loadTexts: nbDevIdTypeName.setDescription("The name of the device type, for example 'OptiSwitch 9024-4C'.")
nbDevIdSysName = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbDevIdSysName.setStatus('current')
if mibBuilder.loadTexts: nbDevIdSysName.setDescription("An administratively-assigned name for this managed node. By convention, this is the node's fully-qualified domain name. If the name is unknown, the value is the zero-length string. See also sysName=mib-2.system.5")
nbDevIdBaseMAC = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdBaseMAC.setStatus('current')
if mibBuilder.loadTexts: nbDevIdBaseMAC.setDescription('Base MAC address.')
nbDevIdHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: nbDevIdHardwareVersion.setDescription('Hardware version.')
nbDevIdHardwareSerialBoard = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdHardwareSerialBoard.setStatus('current')
if mibBuilder.loadTexts: nbDevIdHardwareSerialBoard.setDescription('Board serial number.')
nbDevIdHardwareSerialUnit = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdHardwareSerialUnit.setStatus('current')
if mibBuilder.loadTexts: nbDevIdHardwareSerialUnit.setDescription('Unit serial number.')
nbDevIdHardwareCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdHardwareCpuNumber.setStatus('current')
if mibBuilder.loadTexts: nbDevIdHardwareCpuNumber.setDescription('Number of CPUs.')
nbDevIdCpuTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 5), )
if mibBuilder.loadTexts: nbDevIdCpuTable.setStatus('current')
if mibBuilder.loadTexts: nbDevIdCpuTable.setDescription('List of supported standard MIBs.')
nbDevIdCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 5, 1), ).setIndexNames((0, "DEV-ID-MIB", "nbDevIdCpuIndex"))
if mibBuilder.loadTexts: nbDevIdCpuEntry.setStatus('current')
if mibBuilder.loadTexts: nbDevIdCpuEntry.setDescription('.')
nbDevIdCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nbDevIdCpuIndex.setStatus('current')
if mibBuilder.loadTexts: nbDevIdCpuIndex.setDescription('1-base index of CPU entry.')
nbDevIdCpuSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdCpuSerial.setStatus('current')
if mibBuilder.loadTexts: nbDevIdCpuSerial.setDescription('CPU serial number.')
nbDevIdCpuDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 4, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdCpuDescr.setStatus('current')
if mibBuilder.loadTexts: nbDevIdCpuDescr.setDescription("CPU description, let's say 'MPC8245, 266MHz with 64MB flash and 128MB Dram memory'.")
nbDevIdSoftwareMasterOSVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdSoftwareMasterOSVers.setStatus('current')
if mibBuilder.loadTexts: nbDevIdSoftwareMasterOSVers.setDescription("Software version description, let's say '1_0_6'.")
nbDevIdSoftwareBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdSoftwareBuildTime.setStatus('current')
if mibBuilder.loadTexts: nbDevIdSoftwareBuildTime.setDescription('Build time, for example: Tue Jun 14 23:03:09 IDT 2005.')
nbDevIdMibTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5, 3), )
if mibBuilder.loadTexts: nbDevIdMibTable.setStatus('current')
if mibBuilder.loadTexts: nbDevIdMibTable.setDescription('List of supported standard MIBs.')
nbDevIdMibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5, 3, 1), ).setIndexNames((0, "DEV-ID-MIB", "nbDevIdMibStdName"))
if mibBuilder.loadTexts: nbDevIdMibEntry.setStatus('current')
if mibBuilder.loadTexts: nbDevIdMibEntry.setDescription('.')
nbDevIdMibStdName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32)))
if mibBuilder.loadTexts: nbDevIdMibStdName.setStatus('current')
if mibBuilder.loadTexts: nbDevIdMibStdName.setDescription('Name of the standart, like RFC2819.')
nbDevIdMibName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdMibName.setStatus('current')
if mibBuilder.loadTexts: nbDevIdMibName.setDescription('Name of the MIB, like RMON-MIB.')
nbDevIdMibTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdMibTitle.setStatus('current')
if mibBuilder.loadTexts: nbDevIdMibTitle.setDescription("Title of standart, like 'Remote Network Monitoring Management Information Base'.")
nbDevIdMibNote = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 5, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdMibNote.setStatus('current')
if mibBuilder.loadTexts: nbDevIdMibNote.setDescription('Note about level of support on the current device.')
nbDevIdFirmware = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevIdFirmware.setStatus('current')
if mibBuilder.loadTexts: nbDevIdFirmware.setDescription('Firmware version.')
nbDevIdMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 101, 1))
nbDevIdMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 101, 2))
nbDevIdMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 101, 1, 1)).setObjects(("DEV-ID-MIB", "nbDevIdGroup"), ("DEV-ID-MIB", "nbDevIOptionaldGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nbDevIdMIBCompliance = nbDevIdMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: nbDevIdMIBCompliance.setDescription("The core compliance statement for all 'nbDevId' MIB implementations.")
nbDevIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 101, 2, 1)).setObjects(("DEV-ID-MIB", "nbDevIdTypeName"), ("DEV-ID-MIB", "nbDevIdSysName"), ("DEV-ID-MIB", "nbDevIdBaseMAC"), ("DEV-ID-MIB", "nbDevIdHardwareVersion"), ("DEV-ID-MIB", "nbDevIdHardwareSerialBoard"), ("DEV-ID-MIB", "nbDevIdHardwareSerialUnit"), ("DEV-ID-MIB", "nbDevIdSoftwareMasterOSVers"), ("DEV-ID-MIB", "nbDevIdSoftwareBuildTime"), ("DEV-ID-MIB", "nbDevIdHardwareCpuNumber"), ("DEV-ID-MIB", "nbDevIdCpuSerial"), ("DEV-ID-MIB", "nbDevIdCpuDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nbDevIdGroup = nbDevIdGroup.setStatus('current')
if mibBuilder.loadTexts: nbDevIdGroup.setDescription('Mandatory objects for grouping of Device Id parameters.')
nbDevIOptionaldGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 629, 1, 50, 16, 101, 2, 2)).setObjects(("DEV-ID-MIB", "nbDevIdMibName"), ("DEV-ID-MIB", "nbDevIdMibTitle"), ("DEV-ID-MIB", "nbDevIdMibNote"), ("DEV-ID-MIB", "nbDevIdFirmware"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nbDevIOptionaldGroup = nbDevIOptionaldGroup.setStatus('current')
if mibBuilder.loadTexts: nbDevIOptionaldGroup.setDescription('Optional objects for grouping of Device Id parameters.')
mibBuilder.exportSymbols("DEV-ID-MIB", nbDevIdSoftwareMasterOSVers=nbDevIdSoftwareMasterOSVers, nbDevIdMIBGroups=nbDevIdMIBGroups, nbDevIdMibName=nbDevIdMibName, nbDevIdCpuIndex=nbDevIdCpuIndex, PYSNMP_MODULE_ID=nbDevId, nbDevIdCpuTable=nbDevIdCpuTable, nbDevIdTypeName=nbDevIdTypeName, nbase=nbase, nbDevIdSoftwareBuildTime=nbDevIdSoftwareBuildTime, nbDevIdCpuDescr=nbDevIdCpuDescr, nbDevIdMibTable=nbDevIdMibTable, nbDevIdSysName=nbDevIdSysName, nbDevIdHardware=nbDevIdHardware, nbDevIdMibStdName=nbDevIdMibStdName, nbDevIdMibEntry=nbDevIdMibEntry, nbDevIdHardwareSerial=nbDevIdHardwareSerial, nbDevIdMibTitle=nbDevIdMibTitle, nbDevIdHardwareCpuNumber=nbDevIdHardwareCpuNumber, nbSwitchG1Il=nbSwitchG1Il, nbDevIdSoftware=nbDevIdSoftware, nbDevIdHardwareVersion=nbDevIdHardwareVersion, nbSwitchG1=nbSwitchG1, nbDevId=nbDevId, nbDevIdCpuSerial=nbDevIdCpuSerial, nbDevIdCpuEntry=nbDevIdCpuEntry, nbDevIdGroup=nbDevIdGroup, nbDevIdMibNote=nbDevIdMibNote, nbDevIdMIBCompliances=nbDevIdMIBCompliances, nbDevIdHardwareSerialUnit=nbDevIdHardwareSerialUnit, nbDevIdBaseMAC=nbDevIdBaseMAC, nbDevIdHardwareSerialBoard=nbDevIdHardwareSerialBoard, nbDevIdFirmware=nbDevIdFirmware, nbDevIdMIBCompliance=nbDevIdMIBCompliance, nbDevIdConformance=nbDevIdConformance, nbDevIOptionaldGroup=nbDevIOptionaldGroup)
