#
# PySNMP MIB module RT-CFG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RT-CFG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso, ModuleIdentity, Bits, Counter32, Gauge32, IpAddress, Counter64, NotificationType, Unsigned32, ObjectIdentity, MibIdentifier, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso", "ModuleIdentity", "Bits", "Counter32", "Gauge32", "IpAddress", "Counter64", "NotificationType", "Unsigned32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ActionListName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 20)

class DirectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("ingress", 2), ("egress", 3))

class AccountCouter(Counter32):
    pass

class AccountCounter64(Counter64):
    pass

nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbSwitchG1Il = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50))
nbRouterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12))
nbRtConfigGen = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 1))
nbRtDevDiffServMode = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("byTOS", 3), ("byTag", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDevDiffServMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDevDiffServMode.setDescription('The Global DiffServ mode of the Router.')
nbRtDevDiffServMappingSupport = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDevDiffServMappingSupport.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDevDiffServMappingSupport.setDescription('The DiffServ Mapping feature support.')
nbRtVifTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2), )
if mibBuilder.loadTexts: nbRtVifTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifTable.setDescription('.')
nbRtVifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtVifId"))
if mibBuilder.loadTexts: nbRtVifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifEntry.setDescription('The entries (records).')
nbRtVifId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtVifId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifId.setDescription("For example 'vif7' or 'vif11:3' (last case if for alias).")
nbRtVifIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifIpAddress.setDescription('.')
nbRtVifMask = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifMask.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifMask.setDescription('.')
nbRtVifProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ipV4IF", 2), ("ipxIF", 3), ("portsIF", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifProtocol.setDescription('The routing mechanism via which this route was learned.')
nbRtVifName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifName.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifName.setDescription('The name of this group (can be setted by the Manager).')
nbRtVifPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifPortList.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifPortList.setDescription('.')
nbRtVifMac = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifMac.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifMac.setDescription('.')
nbRtVifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifAdminStatus.setDescription("Use 'valid' (1) value by ADDind new Entry or EDITting of existing Entry. Use 'inValid' (2) value by DELETting of existing Entry.")
nbRtVifConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifConfigType.setDescription("Wether we want 'auto' configuration or not.")
nbRtVifSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("unsecure", 2), ("secure", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifSecurity.setDescription('.')
nbRtVifIsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifIsTagged.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifIsTagged.setDescription('.')
nbRtVifTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifTag.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifTag.setDescription('If nbRtVifIsTagged=yes(1) this field may not be 0; else it may have any value. Important: actual upper limit is 4080 - 2 * ports_capacity')
nbRtVifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3))
nbVifTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifTableSize.setDescription('The number of Entries in the VIF Table. Value = 0 says, that VIF Table is not supported.')
nbVifDeviceLimitTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 2), )
if mibBuilder.loadTexts: nbVifDeviceLimitTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifDeviceLimitTable.setDescription('.')
nbVifDeviceLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 2, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifLimitType"))
if mibBuilder.loadTexts: nbVifDeviceLimitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifDeviceLimitEntry.setDescription('The Entries (records).')
nbVifLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("lanEthernet", 2), ("wanPPP", 3), ("wanFrameRelay", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifLimitType.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifLimitType.setDescription('Type of the interface; (index # 1 of the Table).')
nbVifDevNoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifDevNoMin.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifDevNoMin.setDescription('Minimum valid Value of [nbVifDevNo] Object for the corresponding Value of the [nbVifType] interface Type.')
nbVifDevNoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifDevNoMax.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifDevNoMax.setDescription('Maximum valid Value of [nbVifDevNo] Object for the corresponding Value of the [nbVifType] interface Type.')
nbVifDevNoFirstEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifDevNoFirstEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifDevNoFirstEmpty.setDescription("Valid 'First empty' Value of [nbVifDevNo] Object for the corresponding Value of the [nbVifType] interface Type.")
nbVifAliasDLimitTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 3), )
if mibBuilder.loadTexts: nbVifAliasDLimitTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAliasDLimitTable.setDescription('.')
nbVifAliasDLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 3, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifAliasLimitType"), (0, "RT-CFG-MIB", "nbVifAliasLimitDevNo"))
if mibBuilder.loadTexts: nbVifAliasDLimitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAliasDLimitEntry.setDescription('The Entries (records).')
nbVifAliasLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("lanEthernet", 2), ("wanPPP", 3), ("wanFrameRelay", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifAliasLimitType.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAliasLimitType.setDescription('Type of the interface; (index # 1 of the Table).')
nbVifAliasLimitDevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifAliasLimitDevNo.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAliasLimitDevNo.setDescription('VIF Device Number; (index #2 of the table).')
nbVifAliasLimitDevAliasMin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifAliasLimitDevAliasMin.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAliasLimitDevAliasMin.setDescription('Minimum valid Value of [nbVifAliasDev] Object for the corresponding Values of the [nbVifType] interface Type and [nbVifDevNo] Device Number.')
nbVifAliasLimitDevAliasMax = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifAliasLimitDevAliasMax.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAliasLimitDevAliasMax.setDescription('Maximum valid Value of [nbVifAliasDev] Object for the corresponding Values of the [nbVifType] interface Type and [nbVifDevNo] Device Number.')
nbVifAliasLimitDevAliasFirstEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifAliasLimitDevAliasFirstEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAliasLimitDevAliasFirstEmpty.setDescription("Valid 'First empty' Value of [nbVifAliasDev] Object for the corresponding Values of the [nbVifType] interface Type and [nbVifDevNo] Device Number.")
nbVifTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11), )
if mibBuilder.loadTexts: nbVifTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifTable.setDescription('.')
nbVifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifType"), (0, "RT-CFG-MIB", "nbVifDevNo"), (0, "RT-CFG-MIB", "nbVifIsAlias"), (0, "RT-CFG-MIB", "nbVifAliasDev"))
if mibBuilder.loadTexts: nbVifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifEntry.setDescription('The Entries (records).')
nbVifType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 12))).clone(namedValues=NamedValues(("other", 1), ("lanEthernet", 2), ("wanPPP", 3), ("wanFrameRelay", 4), ("bridge", 5), ("loopback", 6), ("dummy", 7), ("logical", 8), ("outOfBand", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifType.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifType.setDescription('Type of the interface; (index # 1 of the Table).')
nbVifDevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifDevNo.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifDevNo.setDescription('VIF Device Number; (index # 2 of the Table).')
nbVifIsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("alias", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifIsAlias.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifIsAlias.setDescription('Primary/Alias mode of the VIF Entry; (index # 3 of the Table). Note : VIF Entry for the corresponding Device Number with Alias mode can be created only after VIF Entry with Primary mode have been already created.')
nbVifAliasDev = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifAliasDev.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAliasDev.setDescription('VIF Device Alias Number; (index # 4 of the Table). If it is a primary interface - [nbVifIsAlias] == 2, [nbVifAliasDev] must be zerro.')
nbVifDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifDevName.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifDevName.setDescription("Name of the VIF Device in the special format. For example : - 'vif7' (VIF Device #7 primary Entry.) - 'vif11:3' (VIF Device #11 Entry with alias # 3).")
nbVifIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifIpAddress.setDescription('.')
nbVifMask = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifMask.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifMask.setDescription('.')
nbVifPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifPeer.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifPeer.setDescription('This Object will be used only for the [nbVifType]=3 - wanPPP or [nbVifType]=4 - wanFrameRelay VIF configuration.')
nbVifPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("eth0", 2), ("wp1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifPhysType.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifPhysType.setDescription('The Card Type for the Physical Connection.')
nbVifProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ipV4IF", 2), ("ipxIF", 3), ("portsIF", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifProtocol.setDescription('The routing mechanism via which this route was learned.')
nbVifName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifName.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifName.setDescription('The name of this group (can be setted by the Manager).')
nbVifPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifPortList.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifPortList.setDescription('.')
nbVifMac = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 13), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifMac.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifMac.setDescription('.')
nbVifState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("adminDown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifState.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifState.setDescription('This Object will be used only for the [nbVifType]=3 - wanPPP or [nbVifType]=4 - wanFrameRelay VIF configuration.')
nbVifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifAdminStatus.setDescription("Use 'valid' (1) value by ADDind new Entry or EDITting of existing Entry. Use 'inValid' (2) value by DELETting of existing Entry.")
nbVifConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifConfigType.setDescription("Wether we want 'auto' configuration or not.")
nbVifSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("unsecure", 2), ("secure", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifSecurity.setDescription('.')
nbVifIsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifIsTagged.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifIsTagged.setDescription('.')
nbVifTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifTag.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifTag.setDescription('If nbVifIsTagged=yes(1) this field may not be 0; else it may have any value. Important: actual upper limit is 4080 - 2 * ports_capacity')
nbVifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifDescr.setDescription('A textual string containing information about the interface.')
nbVifLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbVifLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
nbVifL2SwitchingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("interfaceTagFlood", 3), ("unicastToLinux", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifL2SwitchingMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifL2SwitchingMode.setDescription('Controls the mode of Layer 2 tag switching between subscribers.')
nbVifProxyArpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifProxyArpMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifProxyArpMode.setDescription('Controls the enable/disable of proxy-arp for the interface.')
nbVifIpOnlyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifIpOnlyMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifIpOnlyMode.setDescription('Controls the enable/disable of only IP packets forwarding for the interface.')
nbVifIpForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 3, 11, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbVifIpForwardingMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbVifIpForwardingMode.setDescription('Controls the enable/disable of IP forwarding for the interface.')
nbRtFib = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4))
nbRtFibNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtFibNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibNumEntries.setDescription('The number of entries in this table.')
nbRtFibTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2), )
if mibBuilder.loadTexts: nbRtFibTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibTable.setDescription('This table shows all the hosts that are attached to the Accelerouter. For each host it shows its port#, IP address, Network Mask and its MAC address.')
nbRtFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtFibEntryIpAddress"), (0, "RT-CFG-MIB", "nbRtFibEntryIpMask"), (0, "RT-CFG-MIB", "nbRtFibEntryProtocol"))
if mibBuilder.loadTexts: nbRtFibEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntry.setDescription('The entries (records).')
nbRtFibEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtFibEntryIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryIpAddress.setDescription('The IP address. ')
nbRtFibEntryIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtFibEntryIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryIpMask.setDescription('The IP subnet mask. ')
nbRtFibEntryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("direct", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("arp", 15), ("larp", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtFibEntryProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryProtocol.setDescription('The routing mechanism via which this entry was learned.')
nbRtFibEntryNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtFibEntryNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryNextHop.setDescription('The next hop IP address. ')
nbRtFibEntryNextPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtFibEntryNextPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryNextPhysAddress.setDescription('The host or next hop MAC address.')
nbRtFibEntryNextPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtFibEntryNextPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryNextPort.setDescription('The port number that the host or next hope is connected to.')
nbRtFibEntryLastChTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtFibEntryLastChTime.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryLastChTime.setDescription('The last change time of this entry. ')
nbRtFibEntryAge = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtFibEntryAge.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryAge.setDescription('Age of this entry. ')
nbRtFibEntryMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtFibEntryMetric.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryMetric.setDescription('Metric of this entry. ')
nbRtFibEntryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtFibEntryAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryAdminStatus.setDescription('Controls the Add/Delete of this entry. ')
nbRtFibEntryTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtFibEntryTag.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtFibEntryTag.setDescription('Tag 0 means untagged entry.')
nbRtDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5))
nbRtDiffServTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 2), )
if mibBuilder.loadTexts: nbRtDiffServTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServTable.setDescription('The table configures Diff Server for VIF.')
nbRtDiffServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 2, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifType"), (0, "RT-CFG-MIB", "nbVifDevNo"), (0, "RT-CFG-MIB", "nbVifIsAlias"), (0, "RT-CFG-MIB", "nbVifAliasDev"))
if mibBuilder.loadTexts: nbRtDiffServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServEntry.setDescription('The Entries (records).')
nbRtDiffServMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("byTOS", 3), ("byTag", 4), ("asGlobal", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServMode.setDescription('The Diff Serv mode for VIF or/and Subscriber.')
nbRtDiffServVptMapNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServVptMapNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapNameIndex.setDescription('The Index of the Diff Server VPT Mapping Name that is binded to the VIF.')
nbRtDiffServDscpMapNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServDscpMapNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapNameIndex.setDescription('The Index of the Diff Server DSCP Mapping Name that is binded to the VIF.')
nbRtDiffServMgmtVptMapNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServMgmtVptMapNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServMgmtVptMapNameIndex.setDescription('The Index of the Management Diff Server VPT Mapping Name that is binded to the VIF. Value equals to 0 means that this kind of mapping is not applicable to this kind of Vif.')
nbRtDiffServMgmtDscpMapNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServMgmtDscpMapNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServMgmtDscpMapNameIndex.setDescription('The Index of the Management Diff Server DSCP Mapping Name that is binded to the VIF. Value equals to 0 means that this kind of mapping is not applicable to this kind of Vif.')
nbRtVifDiffServRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 4), )
if mibBuilder.loadTexts: nbRtVifDiffServRateLimitTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifDiffServRateLimitTable.setDescription('.')
nbRtVifDiffServRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 4, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifType"), (0, "RT-CFG-MIB", "nbVifDevNo"), (0, "RT-CFG-MIB", "nbVifIsAlias"), (0, "RT-CFG-MIB", "nbVifAliasDev"), (0, "IF-MIB", "ifIndex"), (0, "RT-CFG-MIB", "nbRtVifDiffServDirect"))
if mibBuilder.loadTexts: nbRtVifDiffServRateLimitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifDiffServRateLimitEntry.setDescription('The Entries (records).')
nbRtVifDiffServDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 4, 1, 1), DirectionType())
if mibBuilder.loadTexts: nbRtVifDiffServDirect.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifDiffServDirect.setDescription('The Diff Serv ingress/egress direction.')
nbRtVifDiffServBuckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifDiffServBuckRate.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifDiffServBuckRate.setDescription('The Diff Serv Bucket Rate.')
nbRtVifDiffServBuckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifDiffServBuckSize.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifDiffServBuckSize.setDescription("The Diff Serv Bucket Size. The value '0' means - 'optimize'.")
nbRtVifDiffServREDmode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifDiffServREDmode.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifDiffServREDmode.setDescription('The Diff Serv Random Early Detection (RED) for Rate Limit Mode.')
nbRtVifDiffServAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("createOrModify", 2), ("delete", 3), ("exist", 4), ("absent", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtVifDiffServAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifDiffServAdminStatus.setDescription('The Diff Serv Rate Limit Admin Status.')
nbRtDiffServVptMapTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 6), )
if mibBuilder.loadTexts: nbRtDiffServVptMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapTable.setDescription('The table configures Diff Server VPT Mapping for Device.')
nbRtDiffServVptMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 6, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtDiffServVptMapNameId"))
if mibBuilder.loadTexts: nbRtDiffServVptMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapEntry.setDescription('The Entries (records).')
nbRtDiffServVptMapNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServVptMapNameId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapNameId.setDescription('The Diff Server VPT Mapping Name Id.')
nbRtDiffServVptMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServVptMapName.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapName.setDescription('The Diff Server VPT Mapping Name.')
nbRtDiffServVptMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServVptMapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapStatus.setDescription('The activity Status of the Diff Server VPT Mapping Entry.')
nbRtDiffServVptMapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("restoreDefaultConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServVptMapAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapAdminStatus.setDescription("GET or GET_NEXT Operation : - Responds 'valid' (1) value when the Entry is already exists. - Responds 'inValid' (2) value in case of no existing Entry. SET Operation : - Use 'valid' (1) value for new Entry creation. - Use 'inValid' (2) value for deleting of existing Entry. - Use 'restoreDefaultConfig' (5) value for restoring the default Profile configuration of existing Entry.")
nbRtDiffServVptMapPrflTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 8), )
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflTable.setDescription('The table configures Diff Server VPT Mapping Profiles for Device.')
nbRtDiffServVptMapPrflEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 8, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtDiffServVptMapPrflNameId"), (0, "RT-CFG-MIB", "nbRtDiffServVptMapPrflInValueId"))
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflEntry.setDescription('The Entries (records).')
nbRtDiffServVptMapPrflNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflNameId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflNameId.setDescription('The Diff Server VPT Mapping Profile Name Id.')
nbRtDiffServVptMapPrflInValueId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflInValueId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflInValueId.setDescription('The Diff Server Mapping Profile Input VPT Value Id.')
nbRtDiffServVptMapPrflInValue = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflInValue.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflInValue.setDescription('The Diff Server Mapping Profile Input VPT Value.')
nbRtDiffServVptMapPrflSl = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflSl.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflSl.setDescription('The Diff Server VPT Mapping Profile Service Level.')
nbRtDiffServVptMapPrflOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflOutValue.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServVptMapPrflOutValue.setDescription('The Diff Server Mapping Profile Output VPT Value.')
nbRtDiffServDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 10), )
if mibBuilder.loadTexts: nbRtDiffServDscpMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapTable.setDescription('The table configures Diff Server DSCP Mapping for Device.')
nbRtDiffServDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 10, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtDiffServDscpMapNameId"))
if mibBuilder.loadTexts: nbRtDiffServDscpMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapEntry.setDescription('The Entries (records).')
nbRtDiffServDscpMapNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServDscpMapNameId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapNameId.setDescription('The Diff Server Dscp Mapping Name Id.')
nbRtDiffServDscpMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServDscpMapName.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapName.setDescription('The Diff Server DSCP Mapping Name.')
nbRtDiffServDscpMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServDscpMapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapStatus.setDescription('The Status of the Diff Server DSCP Mapping Entry.')
nbRtDiffServDscpMapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("restoreDefaultConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServDscpMapAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapAdminStatus.setDescription("GET or GET_NEXT Operation : - Responds 'valid' (1) value when the Entry is already exists. - Responds 'inValid' (2) value in case of not existing Entry. SET Operation : - Use 'valid' (1) value for new Entry creation. - Use 'inValid' (2) value for deleting of existing Entry. - Use 'restoreDefaultConfig' (5) value for restoring the default Profile configuration of existing Entry.")
nbRtDiffServDscpMapPrflTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 12), )
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflTable.setDescription('The table configures Diff Server DSCP Mapping Profiles for Device.')
nbRtDiffServDscpMapPrflEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 12, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtDiffServDscpMapPrflNameId"), (0, "RT-CFG-MIB", "nbRtDiffServDscpMapPrflInValueId"))
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflEntry.setDescription('The Entries (records).')
nbRtDiffServDscpMapPrflNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflNameId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflNameId.setDescription('The Diff Server DSCP Mapping Profile Name Id.')
nbRtDiffServDscpMapPrflInValueId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflInValueId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflInValueId.setDescription('The Diff Server Mapping Profile Input DSCP Value Id.')
nbRtDiffServDscpMapPrflInValue = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflInValue.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflInValue.setDescription('The Diff Server Mapping Profile Input DSCP Value.')
nbRtDiffServDscpMapPrflSl = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflSl.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflSl.setDescription('The Diff Server DSCP Mapping Profile Service Level.')
nbRtDiffServDscpMapPrflOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 5, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflOutValue.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtDiffServDscpMapPrflOutValue.setDescription('The Diff Server Mapping Profile Output DSCP Value.')
nbRtAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6))
nbRtAccVifTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10), )
if mibBuilder.loadTexts: nbRtAccVifTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifTable.setDescription('.')
nbRtAccVifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifType"), (0, "RT-CFG-MIB", "nbVifDevNo"), (0, "RT-CFG-MIB", "nbVifIsAlias"), (0, "RT-CFG-MIB", "nbVifAliasDev"), (0, "RT-CFG-MIB", "nbRtAccVifDirection"))
if mibBuilder.loadTexts: nbRtAccVifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifEntry.setDescription('The Entries (records).')
nbRtAccVifDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 1), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifDirection.setDescription('The ingress/egress direction.')
nbRtAccVifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3), ("pause", 4), ("resume", 5), ("clear", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtAccVifAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifAdminStatus.setDescription('VIF Accounting Admin Status.')
nbRtAccVifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("paused", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifOperStatus.setDescription('VIF Accounting Oper Status.')
nbRtAccVifConformingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 6), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifConformingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifConformingBytes.setDescription('The Conforming Bytes Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccVifExceedingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 7), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifExceedingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifExceedingBytes.setDescription('The Exceeding Bytes Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccVifConformingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 8), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifConformingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifConformingPackets.setDescription('The Conforming Packets Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccVifExceedingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 9), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifExceedingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifExceedingPackets.setDescription('The Exceeding Packets Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccVifHighConformingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifHighConformingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifHighConformingBytes.setDescription('The Conforming Bytes Counter (High part) for VIF.')
nbRtAccVifHighExceedingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifHighExceedingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifHighExceedingBytes.setDescription('The Exceeding Bytes Counter (High part) for VIF.')
nbRtAccVifHighConformingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifHighConformingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifHighConformingPackets.setDescription('The Conforming Packets Counter (High part) for VIF.')
nbRtAccVifHighExceedingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifHighExceedingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifHighExceedingPackets.setDescription('The Exceeding Packets Counter (High part) for VIF.')
nbRtAccVifLowConformingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifLowConformingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifLowConformingBytes.setDescription('The Conforming Bytes Counter (Low part) for VIF.')
nbRtAccVifLowExceedingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifLowExceedingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifLowExceedingBytes.setDescription('The Exceeding Bytes Counter (Low part) for VIF.')
nbRtAccVifLowConformingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifLowConformingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifLowConformingPackets.setDescription('The Conforming Packets Counter (Low part) for VIF.')
nbRtAccVifLowExceedingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifLowExceedingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifLowExceedingPackets.setDescription('The Exceeding Packets Counter (Low part) for VIF.')
nbRtAccVif64ConformingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 19), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVif64ConformingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVif64ConformingBytes.setDescription('The Conforming Bytes Counter (64 bits) for VIF.')
nbRtAccVif64ExceedingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 20), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVif64ExceedingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVif64ExceedingBytes.setDescription('The Exceeding Bytes Counter (64 bits) for VIF.')
nbRtAccVifConformingUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 21), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifConformingUcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifConformingUcastPackets.setDescription('The Conforming Unicast Packets Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccVifHighConformingUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifHighConformingUcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifHighConformingUcastPackets.setDescription('The Conforming Unicast Packets Counter (High part) for VIF.')
nbRtAccVifLowConformingUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifLowConformingUcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifLowConformingUcastPackets.setDescription('The Conforming Unicast Packets Counter (Low part) for VIF.')
nbRtAccVif64ConformingUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 24), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVif64ConformingUcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVif64ConformingUcastPackets.setDescription('The Conforming Unicast Bytes Counter (64 bits) for VIF.')
nbRtAccVifConformingMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 25), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifConformingMcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifConformingMcastPackets.setDescription('The Conforming Multicast Packets Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccVifHighConformingMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifHighConformingMcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifHighConformingMcastPackets.setDescription('The Conforming Multicast Packets Counter (High part) for VIF.')
nbRtAccVifLowConformingMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifLowConformingMcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifLowConformingMcastPackets.setDescription('The Conforming Multicast Packets Counter (Low part) for VIF.')
nbRtAccVif64ConformingMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 28), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVif64ConformingMcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVif64ConformingMcastPackets.setDescription('The Conforming Multicast Bytes Counter (64 bits) for VIF.')
nbRtAccVifConformingBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 29), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifConformingBcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifConformingBcastPackets.setDescription('The Conforming Broadcast Packets Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccVifHighConformingBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifHighConformingBcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifHighConformingBcastPackets.setDescription('The Conforming Broadcast Packets Counter (High part) for VIF.')
nbRtAccVifLowConformingBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVifLowConformingBcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifLowConformingBcastPackets.setDescription('The Conforming Broadcast Packets Counter (Low part) for VIF.')
nbRtAccVif64ConformingBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 10, 1, 32), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccVif64ConformingBcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVif64ConformingBcastPackets.setDescription('The Conforming Broadcast Bytes Counter (64 bits) for VIF.')
nbRtAccVifPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12), )
if mibBuilder.loadTexts: nbRtAccVifPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifPortTable.setDescription('.')
nbRtAccVifPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifType"), (0, "RT-CFG-MIB", "nbVifDevNo"), (0, "RT-CFG-MIB", "nbVifIsAlias"), (0, "RT-CFG-MIB", "nbVifAliasDev"), (0, "RT-CFG-MIB", "nbRtVifPortId"), (0, "RT-CFG-MIB", "nbRtAccVifDirection"))
if mibBuilder.loadTexts: nbRtAccVifPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccVifPortEntry.setDescription('The Entries (records).')
nbRtVifPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtVifPortId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtVifPortId.setDescription('VIF per Port Accounting Port Id.')
nbRtAccPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3), ("pause", 4), ("resume", 5), ("clear", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtAccPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortAdminStatus.setDescription('VIF per Port Accounting Admin Status.')
nbRtAccPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("paused", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortOperStatus.setDescription('VIF per Port Accounting Oper Status.')
nbRtAccPortConformingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 6), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortConformingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortConformingBytes.setDescription('Port Conforming Bytes Counter in blocks (1 block = 64k bytes) for Port.')
nbRtAccPortExceedingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 7), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortExceedingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortExceedingBytes.setDescription('Port Exceeding Bytes Counter in blocks (1 block = 64k bytes) for Port.')
nbRtAccPortConformingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 8), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortConformingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortConformingPackets.setDescription('Port Conforming Packets Counter in blocks (1 block = 64k bytes) for Port.')
nbRtAccPortExceedingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 9), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortExceedingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortExceedingPackets.setDescription('Port Exceeding Packets Counter in blocks (1 block = 64k bytes) for Port.')
nbRtAccPortHighConformingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortHighConformingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortHighConformingBytes.setDescription('Port Conforming Bytes Counter (High part) for Port.')
nbRtAccPortHighExceedingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortHighExceedingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortHighExceedingBytes.setDescription('Port Exceeding Bytes Counter (High part) for Port.')
nbRtAccPortHighConformingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortHighConformingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortHighConformingPackets.setDescription('Port Conforming Packets Counter (High part) for Port.')
nbRtAccPortHighExceedingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortHighExceedingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortHighExceedingPackets.setDescription('Port Exceeding Packets Counter (High part) for Port.')
nbRtAccPortLowConformingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortLowConformingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortLowConformingBytes.setDescription('Port Conforming Bytes Counter (Low part) for Port.')
nbRtAccPortLowExceedingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortLowExceedingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortLowExceedingBytes.setDescription('Port Exceeding Bytes Counter (Low part) for Port.')
nbRtAccPortLowConformingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortLowConformingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortLowConformingPackets.setDescription('Port Conforming Packets Counter (Low part) for Port.')
nbRtAccPortLowExceedingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortLowExceedingPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortLowExceedingPackets.setDescription('Port Exceeding Packets Counter (Low part) for Port.')
nbRtAccPortVif64ConformingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 19), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortVif64ConformingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortVif64ConformingBytes.setDescription('The Conforming Bytes Counter (64 bits) for Port.')
nbRtAccPortVif64ExceedingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 20), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortVif64ExceedingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortVif64ExceedingBytes.setDescription('The Exceeding Bytes Counter (64 bits) for Port.')
nbRtAccPortConformingUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 21), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortConformingUcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortConformingUcastPackets.setDescription('The Conforming Unicast Packets Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccPortHighConformingUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortHighConformingUcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortHighConformingUcastPackets.setDescription('The Conforming Unicast Packets Counter (High part) for VIF.')
nbRtAccPortLowConformingUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortLowConformingUcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortLowConformingUcastPackets.setDescription('The Conforming Unicast Packets Counter (Low part) for VIF.')
nbRtAccPort64ConformingUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 24), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPort64ConformingUcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPort64ConformingUcastPackets.setDescription('The Conforming Unicast Bytes Counter (64 bits) for VIF.')
nbRtAccPortConformingMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 25), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortConformingMcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortConformingMcastPackets.setDescription('The Conforming Multicast Packets Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccPortHighConformingMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortHighConformingMcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortHighConformingMcastPackets.setDescription('The Conforming Multicast Packets Counter (High part) for VIF.')
nbRtAccPortLowConformingMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortLowConformingMcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortLowConformingMcastPackets.setDescription('The Conforming Multicast Packets Counter (Low part) for VIF.')
nbRtAccPort64ConformingMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 28), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPort64ConformingMcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPort64ConformingMcastPackets.setDescription('The Conforming Multicast Bytes Counter (64 bits) for VIF.')
nbRtAccPortConformingBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 29), AccountCouter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortConformingBcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortConformingBcastPackets.setDescription('The Conforming Broadcast Packets Counter in blocks (1 block = 64k bytes) for VIF.')
nbRtAccPortHighConformingBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortHighConformingBcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortHighConformingBcastPackets.setDescription('The Conforming Broadcast Packets Counter (High part) for VIF.')
nbRtAccPortLowConformingBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPortLowConformingBcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPortLowConformingBcastPackets.setDescription('The Conforming Broadcast Packets Counter (Low part) for VIF.')
nbRtAccPort64ConformingBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 6, 12, 1, 32), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtAccPort64ConformingBcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtAccPort64ConformingBcastPackets.setDescription('The Conforming Broadcast Bytes Counter (64 bits) for VIF.')
nbRtAccessLists = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 7))
nbAclVifTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 7, 5), )
if mibBuilder.loadTexts: nbAclVifTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbAclVifTable.setDescription('.')
nbAclVifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 7, 5, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifType"), (0, "RT-CFG-MIB", "nbVifDevNo"), (0, "RT-CFG-MIB", "nbVifIsAlias"), (0, "RT-CFG-MIB", "nbVifAliasDev"), (0, "RT-CFG-MIB", "nbAclVifDirection"), (0, "RT-CFG-MIB", "nbAclVifId"))
if mibBuilder.loadTexts: nbAclVifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbAclVifEntry.setDescription('The Entries (records).')
nbAclVifDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 7, 5, 1, 5), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbAclVifDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nbAclVifDirection.setDescription('The ingress/egress direction.')
nbAclVifId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 7, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbAclVifId.setStatus('mandatory')
if mibBuilder.loadTexts: nbAclVifId.setDescription('The consequent number of the Access List binded to the VIF.')
nbAclVifAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 7, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbAclVifAccessListName.setStatus('mandatory')
if mibBuilder.loadTexts: nbAclVifAccessListName.setDescription('Access List name corresponding with VIF.')
nbAclVifBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 7, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bind", 1), ("unbind", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbAclVifBindingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbAclVifBindingStatus.setDescription('Enable or disable the binding of an acl to a VIF entry.')
nbRtPortTagGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8))
nbRtPortTagTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5), )
if mibBuilder.loadTexts: nbRtPortTagTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagTable.setDescription('.')
nbRtPortTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtPortTagId"))
if mibBuilder.loadTexts: nbRtPortTagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagEntry.setDescription('The Entries (records).')
nbRtPortTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPortTagId.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagId.setDescription('Port Tag Outbound Id.')
nbRtPortTagAwareMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("tagged", 2), ("untagged", 3), ("hybrid", 4), ("qInQtagged", 5), ("qInQuntagged", 6), ("qInQuntagged2", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPortTagAwareMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagAwareMode.setDescription("Port Tag Outbound mode. Type 'hybrid' means tagged with defaults. VMAN Types 'qInQ...' permit the stack of tags.")
nbRtPortTagEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPortTagEtherType.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagEtherType.setDescription('Ethernet type used for Q in Q packets (hex value).')
nbRtPortTagIpDefTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPortTagIpDefTag.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagIpDefTag.setDescription('Tag Default value for IP Interface.')
nbRtPortTagPortDefTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPortTagPortDefTag.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagPortDefTag.setDescription('Tag Default value for Port Interface.')
nbRtPortTagVmanDefTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPortTagVmanDefTag.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagVmanDefTag.setDescription('Tag Default value for VMAN Access Port.')
nbRtPortTagNumberOfTags = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPortTagNumberOfTags.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagNumberOfTags.setDescription('Number of Tags')
nbRtPortTagMplsForceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mplsForceTag", 2), ("noMplsForceTag", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPortTagMplsForceMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPortTagMplsForceMode.setDescription('MPLS Force Tag Mode.')
nbRtActionLists = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9))
nbRtActionListSupport = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtActionListSupport.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtActionListSupport.setDescription('The Action List feature support.')
nbRtActionListTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 2), )
if mibBuilder.loadTexts: nbRtActionListTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtActionListTable.setDescription('.')
nbRtActionListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 2, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtActionListName"))
if mibBuilder.loadTexts: nbRtActionListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtActionListEntry.setDescription('The Entries (records).')
nbRtActionListName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 2, 1, 1), ActionListName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtActionListName.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtActionListName.setDescription('Action List name.')
nbRtActionListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtActionListAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtActionListAdminStatus.setDescription('Controls the Add/Edit/Delete of the Action List.')
nbRtActionListOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtActionListOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtActionListOperStatus.setDescription('Binding status of the Action List.')
nbRtActionListPoliceType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtActionListPoliceType.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtActionListPoliceType.setDescription('Police action inside the Action List.')
nbRtActionListMplsType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtActionListMplsType.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtActionListMplsType.setDescription('MPLS action inside the Action List.')
nbRtPoliceAction = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3))
nbRtPoliceActionTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1), )
if mibBuilder.loadTexts: nbRtPoliceActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionTable.setDescription('.')
nbRtPoliceActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtPoliceActionName"))
if mibBuilder.loadTexts: nbRtPoliceActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionEntry.setDescription('The Entries (records).')
nbRtPoliceActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 1), ActionListName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionName.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionName.setDescription('Police Action List name.')
nbRtPoliceActionOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noREDnoCoS", 2), ("redTCPnoCoS", 3), ("redAllnoCoS", 4), ("coSaware", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceActionOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionOperMode.setDescription('The Police Action Rate Limit RED Mode.')
nbRtPoliceActionSharingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceActionSharingMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionSharingMode.setDescription('The Police Action Sharing Mode.')
nbRtPoliceActionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceActionAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionAdminStatus.setDescription('Controls the Add/Edit/Delete of the Police Action.')
nbRtPoliceActionExceedCntAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3), ("pause", 4), ("resume", 5), ("clear", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceActionExceedCntAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionExceedCntAdminStatus.setDescription('Police Exceeding Accounting Admin Status.')
nbRtPoliceActionExceedCntOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("paused", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionExceedCntOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionExceedCntOperStatus.setDescription('Police Exceeding Accounting Oper Status.')
nbRtPoliceActionTotalExceedBytesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 7), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionTotalExceedBytesCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionTotalExceedBytesCnt.setDescription('The Exceeding Bytes Counter (64 bits) for Police Action.')
nbRtPoliceActionTotalExceedFramesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 8), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionTotalExceedFramesCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionTotalExceedFramesCnt.setDescription('The Exceeding Frames Counter (64 bits) for Police Action.')
nbRtPoliceActionTotalHighExceedBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionTotalHighExceedBytes32.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionTotalHighExceedBytes32.setDescription('The High part of Exceeding Bytes Counter (32 bits) for Police Action.')
nbRtPoliceActionTotalLowExceedBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionTotalLowExceedBytes32.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionTotalLowExceedBytes32.setDescription('The Low part of Exceeding Bytes Counter (32 bits) for Police Action.')
nbRtPoliceActionTotalHighExceedFrames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionTotalHighExceedFrames32.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionTotalHighExceedFrames32.setDescription('The High part of Exceeding Frames Counter (32 bits) for Police Action.')
nbRtPoliceActionTotalLowExceedFrames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionTotalLowExceedFrames32.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionTotalLowExceedFrames32.setDescription('The Low part of Exceeding Frames Counter (32 bits) for Police Action.')
nbRtPoliceRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2), )
if mibBuilder.loadTexts: nbRtPoliceRateLimitTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitTable.setDescription('.')
nbRtPoliceRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbRtPoliceRateLimitName"), (0, "RT-CFG-MIB", "nbRtPoliceRateLimitCoSlevel"))
if mibBuilder.loadTexts: nbRtPoliceRateLimitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitEntry.setDescription('The Entries (records).')
nbRtPoliceRateLimitName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 1), ActionListName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceRateLimitName.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitName.setDescription('Police Action List name.')
nbRtPoliceRateLimitCoSlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceRateLimitCoSlevel.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitCoSlevel.setDescription('The Police Action CoS Level.')
nbRtPoliceRateLimitBuckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceRateLimitBuckRate.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitBuckRate.setDescription('The Token Bucket Rate parameter (in Kbit/sec).')
nbRtPoliceRateLimitBuckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceRateLimitBuckSize.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitBuckSize.setDescription("The Token Bucket burst Size parameter (in bytes). The value '0' means - 'optimize'.")
nbRtPoliceRateLimitOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("noREDnoCoS", 2), ("redTCPnoCoS", 3), ("redAllnoCoS", 4), ("coSnoRED", 5), ("coSguarantee", 6), ("coSREDtcp", 7), ("coSREDall", 8), ("coSguaranteeREDtcp", 9), ("coSguaranteeREDall", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceRateLimitOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitOperMode.setDescription('The Police Action Rate Limit Operation Mode.')
nbRtPoliceRateLimitExceedBytesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 6), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceRateLimitExceedBytesCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitExceedBytesCnt.setDescription('The Exceeding Bytes Counter (64 bits) for Police Action CoS Level.')
nbRtPoliceRateLimitExceedFramesCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 7), AccountCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceRateLimitExceedFramesCnt.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitExceedFramesCnt.setDescription('The Exceeding Frames Counter (64 bits) for Police Action CoS Level.')
nbRtPoliceRateLimitHighExceedBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceRateLimitHighExceedBytes32.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitHighExceedBytes32.setDescription('The High part of Exceeding Bytes Counter (32 bits) for Police Action CoS Level.')
nbRtPoliceRateLimitLowExceedBytes32 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceRateLimitLowExceedBytes32.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitLowExceedBytes32.setDescription('The Low part of Exceeding Bytes Counter (32 bits) for Police Action CoS Level.')
nbRtPoliceRateLimitHighExceedFrames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceRateLimitHighExceedFrames32.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitHighExceedFrames32.setDescription('The High part of Exceeding Frames Counter (32 bits) for Police Action CoS Level.')
nbRtPoliceRateLimitLowExceedFrames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceRateLimitLowExceedFrames32.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceRateLimitLowExceedFrames32.setDescription('The Low part of Exceeding Frames Counter (32 bits) for Police Action CoS Level.')
nbRtPoliceActionVifTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 4), )
if mibBuilder.loadTexts: nbRtPoliceActionVifTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionVifTable.setDescription('.')
nbRtPoliceActionVifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 4, 1), ).setIndexNames((0, "RT-CFG-MIB", "nbVifType"), (0, "RT-CFG-MIB", "nbVifDevNo"), (0, "RT-CFG-MIB", "nbVifIsAlias"), (0, "RT-CFG-MIB", "nbVifAliasDev"), (0, "RT-CFG-MIB", "nbRtPoliceActionVifDirection"), (0, "RT-CFG-MIB", "nbRtPoliceActionVifName"))
if mibBuilder.loadTexts: nbRtPoliceActionVifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionVifEntry.setDescription('The Entries (records).')
nbRtPoliceActionVifDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 4, 1, 1), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionVifDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionVifDirection.setDescription('The ingress/egress direction.')
nbRtPoliceActionVifName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 4, 1, 2), ActionListName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbRtPoliceActionVifName.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionVifName.setDescription('The Name of the Police Action, binded to the VIF.')
nbRtPoliceActionVifPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 4, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceActionVifPortList.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionVifPortList.setDescription('The list of ports Police Action List is binded to.')
nbRtPoliceActionVifBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("addNewBind", 1), ("unbind", 2), ("editExistingBind", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbRtPoliceActionVifBindingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbRtPoliceActionVifBindingStatus.setDescription('Add New, Edit Existing, Delete the Binding of an Police Action to a VIF entry.')
nbRtMplsAction = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 12, 9, 5))
nbVifModify = NotificationType((1, 3, 6, 1, 4, 1, 629, 1, 50, 12) + (0,11)).setObjects(("RT-CFG-MIB", "nbVifDevName"), ("RT-CFG-MIB", "nbVifAdminStatus"), ("RT-CFG-MIB", "nbVifPhysType"), ("RT-CFG-MIB", "nbVifProtocol"), ("RT-CFG-MIB", "nbVifState"), ("RT-CFG-MIB", "nbVifName"), ("RT-CFG-MIB", "nbVifIpAddress"), ("RT-CFG-MIB", "nbVifMask"), ("RT-CFG-MIB", "nbVifPortList"), ("RT-CFG-MIB", "nbVifMac"), ("RT-CFG-MIB", "nbVifPeer"), ("RT-CFG-MIB", "nbVifConfigType"), ("RT-CFG-MIB", "nbVifSecurity"))
if mibBuilder.loadTexts: nbVifModify.setDescription('The SNMP trap that is generated when any VIF is created/modified/deleted... NOTE: the index fields are : - [nbVifType], - [nbVifDevNo], - [nbVifIsAlias], - [nbVifAliasDev].')
mibBuilder.exportSymbols("RT-CFG-MIB", nbRtAccVifEntry=nbRtAccVifEntry, nbRtAccPortHighConformingBcastPackets=nbRtAccPortHighConformingBcastPackets, nbVifIsAlias=nbVifIsAlias, nbRtAccVifConformingMcastPackets=nbRtAccVifConformingMcastPackets, nbRtPoliceRateLimitBuckSize=nbRtPoliceRateLimitBuckSize, nbRtPortTagId=nbRtPortTagId, ActionListName=ActionListName, nbRtDiffServVptMapName=nbRtDiffServVptMapName, nbRtDiffServMgmtDscpMapNameIndex=nbRtDiffServMgmtDscpMapNameIndex, nbVifIpAddress=nbVifIpAddress, nbRtDiffServVptMapTable=nbRtDiffServVptMapTable, nbRtAccVifConformingPackets=nbRtAccVifConformingPackets, nbRtPoliceRateLimitExceedBytesCnt=nbRtPoliceRateLimitExceedBytesCnt, nbVifDevNoFirstEmpty=nbVifDevNoFirstEmpty, nbRtAccPortConformingMcastPackets=nbRtAccPortConformingMcastPackets, nbRtActionListPoliceType=nbRtActionListPoliceType, nbVifAliasLimitDevAliasMax=nbVifAliasLimitDevAliasMax, nbVifIpForwardingMode=nbVifIpForwardingMode, nbRtPoliceActionTotalLowExceedFrames32=nbRtPoliceActionTotalLowExceedFrames32, nbVifPhysType=nbVifPhysType, nbRtDiffServDscpMapPrflTable=nbRtDiffServDscpMapPrflTable, nbRtFibEntryMetric=nbRtFibEntryMetric, nbVifL2SwitchingMode=nbVifL2SwitchingMode, nbRtVifDiffServBuckRate=nbRtVifDiffServBuckRate, nbRtPoliceActionName=nbRtPoliceActionName, nbVifType=nbVifType, nbRtAccVifConformingUcastPackets=nbRtAccVifConformingUcastPackets, nbRtPoliceAction=nbRtPoliceAction, nbRtVifConfigType=nbRtVifConfigType, nbVifTable=nbVifTable, nbRtPoliceActionVifName=nbRtPoliceActionVifName, nbRtDiffServVptMapPrflNameId=nbRtDiffServVptMapPrflNameId, nbRtVifDiffServDirect=nbRtVifDiffServDirect, nbRtDiffServDscpMapNameId=nbRtDiffServDscpMapNameId, nbRtFibTable=nbRtFibTable, nbRtPoliceRateLimitHighExceedBytes32=nbRtPoliceRateLimitHighExceedBytes32, nbRtAccVif64ConformingMcastPackets=nbRtAccVif64ConformingMcastPackets, nbVifIpOnlyMode=nbVifIpOnlyMode, nbRtPoliceActionExceedCntOperStatus=nbRtPoliceActionExceedCntOperStatus, nbRtAccVifLowConformingUcastPackets=nbRtAccVifLowConformingUcastPackets, nbRtAccPortLowConformingPackets=nbRtAccPortLowConformingPackets, nbRtAccPortLowConformingUcastPackets=nbRtAccPortLowConformingUcastPackets, nbRtAccPortVif64ConformingBytes=nbRtAccPortVif64ConformingBytes, AccountCounter64=AccountCounter64, nbRtAccVifLowExceedingBytes=nbRtAccVifLowExceedingBytes, nbRtPoliceActionVifPortList=nbRtPoliceActionVifPortList, nbRtVifAdminStatus=nbRtVifAdminStatus, nbRtVifTag=nbRtVifTag, nbRtVifDiffServRateLimitEntry=nbRtVifDiffServRateLimitEntry, nbRtAccVifExceedingPackets=nbRtAccVifExceedingPackets, nbRtPoliceActionExceedCntAdminStatus=nbRtPoliceActionExceedCntAdminStatus, nbVifPortList=nbVifPortList, nbRtPoliceActionVifTable=nbRtPoliceActionVifTable, nbRtActionListEntry=nbRtActionListEntry, nbVifAliasDev=nbVifAliasDev, nbRtVifIpAddress=nbRtVifIpAddress, nbRtDiffServDscpMapNameIndex=nbRtDiffServDscpMapNameIndex, nbRtAccPortLowConformingBytes=nbRtAccPortLowConformingBytes, nbRtAccVif64ExceedingBytes=nbRtAccVif64ExceedingBytes, nbRtPoliceActionVifDirection=nbRtPoliceActionVifDirection, nbRtDiffServVptMapPrflEntry=nbRtDiffServVptMapPrflEntry, nbRtDiffServVptMapPrflInValue=nbRtDiffServVptMapPrflInValue, nbVifDeviceLimitEntry=nbVifDeviceLimitEntry, nbRtPoliceRateLimitBuckRate=nbRtPoliceRateLimitBuckRate, nbRtAccPortHighConformingBytes=nbRtAccPortHighConformingBytes, nbVifDevNoMin=nbVifDevNoMin, nbRtAccVifLowConformingMcastPackets=nbRtAccVifLowConformingMcastPackets, nbVifEntry=nbVifEntry, nbRtAccPort64ConformingUcastPackets=nbRtAccPort64ConformingUcastPackets, nbRtVifIsTagged=nbRtVifIsTagged, nbRtAccVif64ConformingBcastPackets=nbRtAccVif64ConformingBcastPackets, nbRtFibEntryTag=nbRtFibEntryTag, nbVifLimitType=nbVifLimitType, nbRtPoliceActionAdminStatus=nbRtPoliceActionAdminStatus, nbRtVifMask=nbRtVifMask, nbRtAccessLists=nbRtAccessLists, nbRtPoliceRateLimitEntry=nbRtPoliceRateLimitEntry, nbRtAccVifConformingBytes=nbRtAccVifConformingBytes, nbRtAccPortConformingUcastPackets=nbRtAccPortConformingUcastPackets, nbRtAccVifLowConformingBcastPackets=nbRtAccVifLowConformingBcastPackets, nbAclVifAccessListName=nbAclVifAccessListName, nbRtPortTagPortDefTag=nbRtPortTagPortDefTag, nbRtDiffServVptMapPrflOutValue=nbRtDiffServVptMapPrflOutValue, nbVifMask=nbVifMask, nbase=nbase, nbRtPortTagEntry=nbRtPortTagEntry, nbVifIsTagged=nbVifIsTagged, nbRtPoliceRateLimitTable=nbRtPoliceRateLimitTable, nbRtFibEntryLastChTime=nbRtFibEntryLastChTime, nbVifAliasLimitDevNo=nbVifAliasLimitDevNo, AccountCouter=AccountCouter, nbRtAccVifHighConformingUcastPackets=nbRtAccVifHighConformingUcastPackets, nbRtPoliceActionTotalHighExceedFrames32=nbRtPoliceActionTotalHighExceedFrames32, nbRtVifGroup=nbRtVifGroup, nbRtVifDiffServRateLimitTable=nbRtVifDiffServRateLimitTable, nbVifAliasLimitDevAliasFirstEmpty=nbVifAliasLimitDevAliasFirstEmpty, DirectionType=DirectionType, nbRtDiffServTable=nbRtDiffServTable, nbRtAccounting=nbRtAccounting, nbRtPortTagNumberOfTags=nbRtPortTagNumberOfTags, nbRtFibEntryAdminStatus=nbRtFibEntryAdminStatus, nbRtAccVifOperStatus=nbRtAccVifOperStatus, nbRtDiffServDscpMapPrflNameId=nbRtDiffServDscpMapPrflNameId, nbRtAccVifLowConformingPackets=nbRtAccVifLowConformingPackets, nbRtPortTagGroup=nbRtPortTagGroup, nbRtAccPortExceedingPackets=nbRtAccPortExceedingPackets, nbRtDevDiffServMappingSupport=nbRtDevDiffServMappingSupport, nbRtVifPortId=nbRtVifPortId, nbRtActionListTable=nbRtActionListTable, nbRtDiffServDscpMapPrflSl=nbRtDiffServDscpMapPrflSl, nbRtVifDiffServBuckSize=nbRtVifDiffServBuckSize, nbRtDiffServMode=nbRtDiffServMode, nbRtDiffServVptMapNameIndex=nbRtDiffServVptMapNameIndex, nbRtActionListName=nbRtActionListName, nbVifState=nbVifState, nbRtAccVifHighExceedingBytes=nbRtAccVifHighExceedingBytes, nbRtAccVifDirection=nbRtAccVifDirection, nbVifAliasLimitType=nbVifAliasLimitType, nbRtDiffServDscpMapPrflEntry=nbRtDiffServDscpMapPrflEntry, nbRtPoliceActionSharingMode=nbRtPoliceActionSharingMode, nbRtPoliceActionVifEntry=nbRtPoliceActionVifEntry, nbRtAccPortLowConformingMcastPackets=nbRtAccPortLowConformingMcastPackets, nbVifLastChange=nbVifLastChange, nbAclVifDirection=nbAclVifDirection, nbVifModify=nbVifModify, nbVifAliasLimitDevAliasMin=nbVifAliasLimitDevAliasMin, nbRtAccPortOperStatus=nbRtAccPortOperStatus, nbRtAccPortLowExceedingPackets=nbRtAccPortLowExceedingPackets, nbRtPoliceRateLimitLowExceedFrames32=nbRtPoliceRateLimitLowExceedFrames32, nbRtDiffServDscpMapPrflInValue=nbRtDiffServDscpMapPrflInValue, nbRtPortTagIpDefTag=nbRtPortTagIpDefTag, nbRtVifDiffServAdminStatus=nbRtVifDiffServAdminStatus, nbVifProtocol=nbVifProtocol, nbRtDiffServDscpMapAdminStatus=nbRtDiffServDscpMapAdminStatus, nbAclVifBindingStatus=nbAclVifBindingStatus, nbVifDeviceLimitTable=nbVifDeviceLimitTable, nbRtPortTagAwareMode=nbRtPortTagAwareMode, nbRtActionListAdminStatus=nbRtActionListAdminStatus, nbVifAliasDLimitEntry=nbVifAliasDLimitEntry, nbVifMac=nbVifMac, nbRtAccVifHighConformingBcastPackets=nbRtAccVifHighConformingBcastPackets, nbRtAccVif64ConformingBytes=nbRtAccVif64ConformingBytes, nbRtVifProtocol=nbRtVifProtocol, nbRtFibEntryProtocol=nbRtFibEntryProtocol, nbRtAccPortConformingBytes=nbRtAccPortConformingBytes, nbRtAccVifHighExceedingPackets=nbRtAccVifHighExceedingPackets, MacAddress=MacAddress, nbSwitchG1Il=nbSwitchG1Il, nbVifDescr=nbVifDescr, nbRtDiffServEntry=nbRtDiffServEntry, nbRtDevDiffServMode=nbRtDevDiffServMode, nbRtAccVifAdminStatus=nbRtAccVifAdminStatus, nbVifAliasDLimitTable=nbVifAliasDLimitTable, nbRtFibEntryIpAddress=nbRtFibEntryIpAddress, nbRtAccPortHighConformingMcastPackets=nbRtAccPortHighConformingMcastPackets, nbVifAdminStatus=nbVifAdminStatus, nbRtVifSecurity=nbRtVifSecurity, nbRtAccPortConformingBcastPackets=nbRtAccPortConformingBcastPackets, nbVifSecurity=nbVifSecurity, nbRtActionListOperStatus=nbRtActionListOperStatus, nbVifTag=nbVifTag, nbRtDiffServDscpMapPrflOutValue=nbRtDiffServDscpMapPrflOutValue, nbRtAccVifExceedingBytes=nbRtAccVifExceedingBytes, nbRtDiffServ=nbRtDiffServ, nbRtAccVifPortTable=nbRtAccVifPortTable, nbRtVifId=nbRtVifId, nbRtPoliceRateLimitHighExceedFrames32=nbRtPoliceRateLimitHighExceedFrames32, nbVifName=nbVifName, nbRtPoliceActionEntry=nbRtPoliceActionEntry, nbRtDiffServVptMapNameId=nbRtDiffServVptMapNameId, nbRtPoliceRateLimitCoSlevel=nbRtPoliceRateLimitCoSlevel, nbRtAccVifHighConformingPackets=nbRtAccVifHighConformingPackets, nbVifPeer=nbVifPeer, nbVifDevNo=nbVifDevNo, nbRtFib=nbRtFib, nbRtDiffServVptMapStatus=nbRtDiffServVptMapStatus, nbAclVifId=nbAclVifId, nbRtFibEntryNextHop=nbRtFibEntryNextHop, nbRtAccVifConformingBcastPackets=nbRtAccVifConformingBcastPackets, nbRtAccPort64ConformingBcastPackets=nbRtAccPort64ConformingBcastPackets, nbRtVifName=nbRtVifName, nbRtAccPortHighExceedingBytes=nbRtAccPortHighExceedingBytes, nbRtAccPortHighConformingUcastPackets=nbRtAccPortHighConformingUcastPackets, nbRtDiffServVptMapAdminStatus=nbRtDiffServVptMapAdminStatus, nbVifDevNoMax=nbVifDevNoMax, nbRtVifPortList=nbRtVifPortList, nbRtDiffServMgmtVptMapNameIndex=nbRtDiffServMgmtVptMapNameIndex, nbRtDiffServDscpMapStatus=nbRtDiffServDscpMapStatus, nbAclVifTable=nbAclVifTable, nbSwitchG1=nbSwitchG1, nbRtPoliceActionTable=nbRtPoliceActionTable, nbRtAccPort64ConformingMcastPackets=nbRtAccPort64ConformingMcastPackets, nbRouterConfig=nbRouterConfig, nbRtDiffServDscpMapPrflInValueId=nbRtDiffServDscpMapPrflInValueId, nbRtPortTagVmanDefTag=nbRtPortTagVmanDefTag, nbRtFibEntry=nbRtFibEntry, nbRtPortTagMplsForceMode=nbRtPortTagMplsForceMode, nbRtAccVifLowConformingBytes=nbRtAccVifLowConformingBytes, nbRtPortTagTable=nbRtPortTagTable, nbVifConfigType=nbVifConfigType, nbRtPoliceActionVifBindingStatus=nbRtPoliceActionVifBindingStatus, nbRtAccPortExceedingBytes=nbRtAccPortExceedingBytes, nbRtDiffServVptMapPrflInValueId=nbRtDiffServVptMapPrflInValueId, nbRtPoliceRateLimitOperMode=nbRtPoliceRateLimitOperMode, nbRtDiffServDscpMapName=nbRtDiffServDscpMapName, nbRtAccVif64ConformingUcastPackets=nbRtAccVif64ConformingUcastPackets, nbRtMplsAction=nbRtMplsAction, nbRtPortTagEtherType=nbRtPortTagEtherType, nbRtDiffServDscpMapTable=nbRtDiffServDscpMapTable, nbAclVifEntry=nbAclVifEntry, nbRtPoliceActionTotalHighExceedBytes32=nbRtPoliceActionTotalHighExceedBytes32, nbRtPoliceRateLimitExceedFramesCnt=nbRtPoliceRateLimitExceedFramesCnt, nbRtVifTable=nbRtVifTable, nbRtDiffServVptMapEntry=nbRtDiffServVptMapEntry, nbRtAccPortAdminStatus=nbRtAccPortAdminStatus, nbRtAccVifLowExceedingPackets=nbRtAccVifLowExceedingPackets, nbRtAccPortHighConformingPackets=nbRtAccPortHighConformingPackets, nbRtPoliceActionTotalLowExceedBytes32=nbRtPoliceActionTotalLowExceedBytes32, nbRtFibEntryNextPort=nbRtFibEntryNextPort, nbVifDevName=nbVifDevName, nbRtDiffServDscpMapEntry=nbRtDiffServDscpMapEntry, nbRtAccVifPortEntry=nbRtAccVifPortEntry, nbRtFibEntryIpMask=nbRtFibEntryIpMask, nbRtDiffServVptMapPrflSl=nbRtDiffServVptMapPrflSl, nbRtAccPortHighExceedingPackets=nbRtAccPortHighExceedingPackets, nbRtAccPortVif64ExceedingBytes=nbRtAccPortVif64ExceedingBytes, nbRtConfigGen=nbRtConfigGen, nbRtPoliceActionOperMode=nbRtPoliceActionOperMode, nbRtDiffServVptMapPrflTable=nbRtDiffServVptMapPrflTable, nbRtAccPortConformingPackets=nbRtAccPortConformingPackets, nbRtPoliceActionTotalExceedBytesCnt=nbRtPoliceActionTotalExceedBytesCnt, nbRtPoliceActionTotalExceedFramesCnt=nbRtPoliceActionTotalExceedFramesCnt, nbRtAccVifHighConformingMcastPackets=nbRtAccVifHighConformingMcastPackets, nbRtActionLists=nbRtActionLists, nbRtVifMac=nbRtVifMac, nbRtVifDiffServREDmode=nbRtVifDiffServREDmode, nbRtFibEntryNextPhysAddress=nbRtFibEntryNextPhysAddress, nbRtAccVifHighConformingBytes=nbRtAccVifHighConformingBytes, nbRtAccPortLowConformingBcastPackets=nbRtAccPortLowConformingBcastPackets, nbRtVifEntry=nbRtVifEntry, nbVifProxyArpMode=nbVifProxyArpMode, nbRtFibNumEntries=nbRtFibNumEntries, nbRtFibEntryAge=nbRtFibEntryAge, nbRtPoliceRateLimitLowExceedBytes32=nbRtPoliceRateLimitLowExceedBytes32, nbRtPoliceRateLimitName=nbRtPoliceRateLimitName, nbRtAccVifTable=nbRtAccVifTable, nbRtAccPortLowExceedingBytes=nbRtAccPortLowExceedingBytes, nbRtActionListSupport=nbRtActionListSupport, nbRtActionListMplsType=nbRtActionListMplsType, nbVifTableSize=nbVifTableSize)
