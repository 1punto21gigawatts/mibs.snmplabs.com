#
# PySNMP MIB module RARITANCCv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RARITANCCv2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, iso, ModuleIdentity, NotificationType, MibIdentifier, internet, Counter32, IpAddress, Bits, mgmt, enterprises, Unsigned32, TimeTicks, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "iso", "ModuleIdentity", "NotificationType", "MibIdentifier", "internet", "Counter32", "IpAddress", "Bits", "mgmt", "enterprises", "Unsigned32", "TimeTicks", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2011-04-11 11:08',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: raritan.setRevisionsDescriptions(('The version of this MIB module modified for release 5.2.0.',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201104111108Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan Inc.')
if mibBuilder.loadTexts: raritan.setContactInfo(' Derek Finch Raritan Inc. 400 Cottontail Lane Somerset New Jersey, 08873 E-mail: derekf@raritan.com')
if mibBuilder.loadTexts: raritan.setDescription("The MIB modules representing Raritan Inc.' implementation of enterprise specific MIBs supported by a single SNMP agent.")
products = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 1))
enterpriseManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 1, 1))
commandCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1))
ccObject = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0))
ccNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1))
ccObjectName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccObjectName.setStatus('current')
if mibBuilder.loadTexts: ccObjectName.setDescription(' Object class name - CC ')
ccObjectInstance = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccObjectInstance.setStatus('current')
if mibBuilder.loadTexts: ccObjectInstance.setDescription(' Object class instance - datacenter- CC1 ')
ccUserName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUserName.setStatus('current')
if mibBuilder.loadTexts: ccUserName.setDescription(' User Name ')
ccUserSessionId = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUserSessionId.setStatus('current')
if mibBuilder.loadTexts: ccUserSessionId.setDescription(' User name session ID ')
ccUserNameInitiated = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUserNameInitiated.setStatus('current')
if mibBuilder.loadTexts: ccUserNameInitiated.setDescription(' User Name, who initiated the session termination ')
ccUserNameTerminated = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUserNameTerminated.setStatus('current')
if mibBuilder.loadTexts: ccUserNameTerminated.setDescription(' User Name, whose session got terminated ')
ccImageType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccImageType.setStatus('current')
if mibBuilder.loadTexts: ccImageType.setDescription(' Image Type to tftp ')
ccImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccImageVersion.setStatus('current')
if mibBuilder.loadTexts: ccImageVersion.setDescription(' Image version ')
ccImageVersionStatus = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccImageVersionStatus.setStatus('current')
if mibBuilder.loadTexts: ccImageVersionStatus.setDescription(' Download image status ')
ccUserWhoAdded = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUserWhoAdded.setStatus('current')
if mibBuilder.loadTexts: ccUserWhoAdded.setDescription(' CC User who added an User to the system')
ccUserWhoDeleted = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUserWhoDeleted.setStatus('current')
if mibBuilder.loadTexts: ccUserWhoDeleted.setDescription(' CC User who Deleted an User to the system')
ccUserWhoModified = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUserWhoModified.setStatus('current')
if mibBuilder.loadTexts: ccUserWhoModified.setDescription(' CC User who added an User to the system')
ccNodeName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNodeName.setStatus('current')
if mibBuilder.loadTexts: ccNodeName.setDescription('CC Leaf Node Name ')
ccLanCard = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLanCard.setStatus('current')
if mibBuilder.loadTexts: ccLanCard.setDescription('CC Lan Card ')
ccHardDisk = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccHardDisk.setStatus('current')
if mibBuilder.loadTexts: ccHardDisk.setDescription('CC Disk ')
ccSessionType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serial", 1), ("kvm", 2), ("powerOutlet", 3), ("admin", 4), ("diagnostics", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSessionType.setStatus('current')
if mibBuilder.loadTexts: ccSessionType.setDescription('CC Lan Card ')
ccClusterState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("standAlone", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClusterState.setStatus('current')
if mibBuilder.loadTexts: ccClusterState.setDescription('CC Cluster State ')
ccLeafNodeName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLeafNodeName.setStatus('current')
if mibBuilder.loadTexts: ccLeafNodeName.setDescription('CC Leaf Node Name ')
ccLeafNodeIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLeafNodeIPAddress.setStatus('current')
if mibBuilder.loadTexts: ccLeafNodeIPAddress.setDescription('CC Leaf Node IP address ')
ccLeafNodeFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLeafNodeFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: ccLeafNodeFirmwareVersion.setDescription('CC Leaf Node Firmware Version ')
ccScheduledTaskDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccScheduledTaskDescription.setStatus('current')
if mibBuilder.loadTexts: ccScheduledTaskDescription.setDescription('CC Scheduled Task Description ')
ccScheduledTaskFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccScheduledTaskFailureReason.setStatus('current')
if mibBuilder.loadTexts: ccScheduledTaskFailureReason.setDescription('CC Scheduled Task Failure Reason ')
ccDiagnosticConsoleMAX_ACCESSLevel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 23), DisplayString()).setLabel("ccDiagnosticConsoleMAX-ACCESSLevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDiagnosticConsoleMAX_ACCESSLevel.setStatus('current')
if mibBuilder.loadTexts: ccDiagnosticConsoleMAX_ACCESSLevel.setDescription('CC Diagnostic Console MAX-ACCESS Level ')
ccDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDeviceName.setStatus('current')
if mibBuilder.loadTexts: ccDeviceName.setDescription(' Device Name ')
ccUserGroupName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUserGroupName.setStatus('current')
if mibBuilder.loadTexts: ccUserGroupName.setDescription(' User Group Name ')
ccBannerChanges = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("modified", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccBannerChanges.setStatus('current')
if mibBuilder.loadTexts: ccBannerChanges.setDescription('CC Banner Changes ')
ccMOTDChanges = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("modified", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccMOTDChanges.setStatus('current')
if mibBuilder.loadTexts: ccMOTDChanges.setDescription('CC MOTD Changes ')
ccOldNumberOfOutlets = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOldNumberOfOutlets.setStatus('current')
if mibBuilder.loadTexts: ccOldNumberOfOutlets.setDescription(' Old number of outlets ')
ccNewNumberOfOutlets = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccNewNumberOfOutlets.setStatus('current')
if mibBuilder.loadTexts: ccNewNumberOfOutlets.setDescription(' New number of outlets ')
ccSystemMonitorNotificationLevel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSystemMonitorNotificationLevel.setStatus('current')
if mibBuilder.loadTexts: ccSystemMonitorNotificationLevel.setDescription(' Notification Level ')
ccSystemMonitorNotificationMessage = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSystemMonitorNotificationMessage.setStatus('current')
if mibBuilder.loadTexts: ccSystemMonitorNotificationMessage.setDescription(' Notification message ')
ccDominionPXFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDominionPXFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: ccDominionPXFirmwareVersion.setDescription(' Dominion PX Firmware Version ')
ccClusterPeer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClusterPeer.setStatus('current')
if mibBuilder.loadTexts: ccClusterPeer.setDescription(' Cluster peer ')
ccClusterOperation = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClusterOperation.setStatus('current')
if mibBuilder.loadTexts: ccClusterOperation.setDescription(' Cluster operation ')
ccClusterOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClusterOperationStatus.setStatus('current')
if mibBuilder.loadTexts: ccClusterOperationStatus.setDescription(' Cluster operation status ')
ccTransferOperation = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("export", 1), ("import", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccTransferOperation.setStatus('current')
if mibBuilder.loadTexts: ccTransferOperation.setDescription(' File Transfer Action ')
ccFileType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccFileType.setStatus('current')
if mibBuilder.loadTexts: ccFileType.setDescription('CSV File Type')
ccLicensedFeature = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 38), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLicensedFeature.setStatus('current')
if mibBuilder.loadTexts: ccLicensedFeature.setDescription(' Licensed Feature ')
ccLicenseServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLicenseServer.setStatus('current')
if mibBuilder.loadTexts: ccLicenseServer.setDescription(' License Server ')
ccPortName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPortName.setStatus('current')
if mibBuilder.loadTexts: ccPortName.setDescription(' Name of a port ')
ccLicenseTerminatedReason = MibScalar((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 0, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLicenseTerminatedReason.setStatus('current')
if mibBuilder.loadTexts: ccLicenseTerminatedReason.setDescription('CC License Terminated Reason ')
ccUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 1)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccClusterState"))
if mibBuilder.loadTexts: ccUnavailable.setStatus('current')
if mibBuilder.loadTexts: ccUnavailable.setDescription('CC Application is unavailable')
ccAvailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 2)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccClusterState"))
if mibBuilder.loadTexts: ccAvailable.setStatus('current')
if mibBuilder.loadTexts: ccAvailable.setDescription('CC Application is Available ')
ccUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 3)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"))
if mibBuilder.loadTexts: ccUserLogin.setStatus('current')
if mibBuilder.loadTexts: ccUserLogin.setDescription('CC User Log in ')
ccUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 4)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"))
if mibBuilder.loadTexts: ccUserLogout.setStatus('current')
if mibBuilder.loadTexts: ccUserLogout.setDescription('CC User Log out ')
ccSPortConnectionStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 5)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccSessionType"), ("RARITANCCv2-MIB", "ccUserSessionId"), ("RARITANCCv2-MIB", "ccNodeName"), ("RARITANCCv2-MIB", "ccPortName"))
if mibBuilder.loadTexts: ccSPortConnectionStarted.setStatus('current')
if mibBuilder.loadTexts: ccSPortConnectionStarted.setDescription('CC Session started ')
ccPortConnectionStopped = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 6)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccSessionType"), ("RARITANCCv2-MIB", "ccUserSessionId"), ("RARITANCCv2-MIB", "ccNodeName"), ("RARITANCCv2-MIB", "ccPortName"))
if mibBuilder.loadTexts: ccPortConnectionStopped.setStatus('current')
if mibBuilder.loadTexts: ccPortConnectionStopped.setDescription('CC Session stopped ')
ccPortConnectionTerminated = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 7)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserNameInitiated"), ("RARITANCCv2-MIB", "ccUserNameTerminated"), ("RARITANCCv2-MIB", "ccSessionType"), ("RARITANCCv2-MIB", "ccUserSessionId"), ("RARITANCCv2-MIB", "ccNodeName"), ("RARITANCCv2-MIB", "ccPortName"))
if mibBuilder.loadTexts: ccPortConnectionTerminated.setStatus('current')
if mibBuilder.loadTexts: ccPortConnectionTerminated.setDescription('CC Session Terminated ')
ccImageUpgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 8)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccImageType"), ("RARITANCCv2-MIB", "ccImageVersion"))
if mibBuilder.loadTexts: ccImageUpgradeStarted.setStatus('current')
if mibBuilder.loadTexts: ccImageUpgradeStarted.setDescription('CC Image Upgrade started ')
ccImageUpgradeResults = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 9)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccImageType"), ("RARITANCCv2-MIB", "ccImageVersion"), ("RARITANCCv2-MIB", "ccImageVersionStatus"))
if mibBuilder.loadTexts: ccImageUpgradeResults.setStatus('current')
if mibBuilder.loadTexts: ccImageUpgradeResults.setDescription('CC Image Upgrade results')
ccUserAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 10)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccUserWhoAdded"))
if mibBuilder.loadTexts: ccUserAdded.setStatus('current')
if mibBuilder.loadTexts: ccUserAdded.setDescription('CC - A new user added ')
ccUserDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 11)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccUserWhoDeleted"))
if mibBuilder.loadTexts: ccUserDeleted.setStatus('current')
if mibBuilder.loadTexts: ccUserDeleted.setDescription('CC - A user deleted ')
ccUserModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 12)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccUserWhoModified"))
if mibBuilder.loadTexts: ccUserModified.setStatus('current')
if mibBuilder.loadTexts: ccUserModified.setDescription('CC user modified ')
ccUserAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 13)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"))
if mibBuilder.loadTexts: ccUserAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: ccUserAuthenticationFailure.setDescription('CC user authentication failure ')
ccRootPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 14)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserWhoModified"))
if mibBuilder.loadTexts: ccRootPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: ccRootPasswordChanged.setDescription('CC root password changed ')
ccLanCardFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 15)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLanCard"), ("RARITANCCv2-MIB", "ccClusterState"))
if mibBuilder.loadTexts: ccLanCardFailure.setStatus('current')
if mibBuilder.loadTexts: ccLanCardFailure.setDescription('CC detected a Lan Card Failure')
ccHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 16)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccHardDisk"), ("RARITANCCv2-MIB", "ccClusterState"))
if mibBuilder.loadTexts: ccHardDiskFailure.setStatus('current')
if mibBuilder.loadTexts: ccHardDiskFailure.setDescription('CC detected a Hard Disk Failure')
ccLeafNodeUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 17)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLeafNodeName"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"))
if mibBuilder.loadTexts: ccLeafNodeUnavailable.setStatus('current')
if mibBuilder.loadTexts: ccLeafNodeUnavailable.setDescription('CC detected a connection failure to a leaf node')
ccLeafNodeAvailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 18)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLeafNodeName"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"))
if mibBuilder.loadTexts: ccLeafNodeAvailable.setStatus('current')
if mibBuilder.loadTexts: ccLeafNodeAvailable.setDescription('CC detected leaf node reachable ')
ccIncompatibleDeviceFirmware = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 19)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"), ("RARITANCCv2-MIB", "ccLeafNodeFirmwareVersion"))
if mibBuilder.loadTexts: ccIncompatibleDeviceFirmware.setStatus('current')
if mibBuilder.loadTexts: ccIncompatibleDeviceFirmware.setDescription('CC detected device with incompatible firmware ')
ccDeviceUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 20)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"), ("RARITANCCv2-MIB", "ccLeafNodeFirmwareVersion"), ("RARITANCCv2-MIB", "ccImageVersionStatus"))
if mibBuilder.loadTexts: ccDeviceUpgrade.setStatus('current')
if mibBuilder.loadTexts: ccDeviceUpgrade.setDescription('CC has upgraded the firmware on a device ')
ccEnterMaintenanceMode = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 21)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"))
if mibBuilder.loadTexts: ccEnterMaintenanceMode.setStatus('current')
if mibBuilder.loadTexts: ccEnterMaintenanceMode.setDescription('CC entered maintenance mode ')
ccExitMaintenanceMode = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 22)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"))
if mibBuilder.loadTexts: ccExitMaintenanceMode.setStatus('current')
if mibBuilder.loadTexts: ccExitMaintenanceMode.setDescription('CC exited maintenance mode ')
ccUserLockedOut = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 23)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"))
if mibBuilder.loadTexts: ccUserLockedOut.setStatus('current')
if mibBuilder.loadTexts: ccUserLockedOut.setDescription('CC user has been locked out ')
ccDeviceAddedAfterCCNOCNotification = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 24)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccDeviceName"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"))
if mibBuilder.loadTexts: ccDeviceAddedAfterCCNOCNotification.setStatus('current')
if mibBuilder.loadTexts: ccDeviceAddedAfterCCNOCNotification.setDescription('CC has added a Generic Device after receiving a notification from CC-NOCupgraded the firmware on a device ')
ccScheduledTaskExecutionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 25)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccScheduledTaskDescription"), ("RARITANCCv2-MIB", "ccScheduledTaskFailureReason"))
if mibBuilder.loadTexts: ccScheduledTaskExecutionFailure.setStatus('current')
if mibBuilder.loadTexts: ccScheduledTaskExecutionFailure.setDescription('The reason why the execution of a scheduled task failed. ')
ccDiagnosticConsoleLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 26)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccDiagnosticConsoleMAX_ACCESSLevel"))
if mibBuilder.loadTexts: ccDiagnosticConsoleLogin.setStatus('current')
if mibBuilder.loadTexts: ccDiagnosticConsoleLogin.setDescription(' User has logged into the CC Diagnostic Console ')
ccDiagnosticConsoleLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 27)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccDiagnosticConsoleMAX_ACCESSLevel"))
if mibBuilder.loadTexts: ccDiagnosticConsoleLogout.setStatus('current')
if mibBuilder.loadTexts: ccDiagnosticConsoleLogout.setDescription(' User has logged out of the CC Diagnostic Console ')
ccNOCAvailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 28)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"))
if mibBuilder.loadTexts: ccNOCAvailable.setStatus('current')
if mibBuilder.loadTexts: ccNOCAvailable.setDescription(' CC has detected that CC-NOC is available ')
ccNOCUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 29)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"))
if mibBuilder.loadTexts: ccNOCUnavailable.setStatus('current')
if mibBuilder.loadTexts: ccNOCUnavailable.setDescription(' CC has detected that CC-NOC is unavailable ')
ccUserGroupAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 30)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserGroupName"), ("RARITANCCv2-MIB", "ccUserWhoAdded"))
if mibBuilder.loadTexts: ccUserGroupAdded.setStatus('current')
if mibBuilder.loadTexts: ccUserGroupAdded.setDescription('CC-SG - A new user group has been added ')
ccUserGroupDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 31)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserGroupName"), ("RARITANCCv2-MIB", "ccUserWhoDeleted"))
if mibBuilder.loadTexts: ccUserGroupDeleted.setStatus('current')
if mibBuilder.loadTexts: ccUserGroupDeleted.setDescription('CC-SG - A user group has been deleted ')
ccUserGroupModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 32)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserGroupName"), ("RARITANCCv2-MIB", "ccUserWhoModified"))
if mibBuilder.loadTexts: ccUserGroupModified.setStatus('current')
if mibBuilder.loadTexts: ccUserGroupModified.setDescription('CC-SG - A user group has been modified ')
ccSuperuserNameChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 33)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserWhoModified"))
if mibBuilder.loadTexts: ccSuperuserNameChanged.setStatus('current')
if mibBuilder.loadTexts: ccSuperuserNameChanged.setDescription('CC-SG Superuser name has changed ')
ccSuperuserPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 34)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserWhoModified"))
if mibBuilder.loadTexts: ccSuperuserPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: ccSuperuserPasswordChanged.setDescription('CC-SG Superuser password has changed ')
ccLoginBannerChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 35)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserWhoModified"), ("RARITANCCv2-MIB", "ccBannerChanges"))
if mibBuilder.loadTexts: ccLoginBannerChanged.setStatus('current')
if mibBuilder.loadTexts: ccLoginBannerChanged.setDescription('CC-SG Login Banner has changed ')
ccMOTDChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 36)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserWhoModified"), ("RARITANCCv2-MIB", "ccMOTDChanges"))
if mibBuilder.loadTexts: ccMOTDChanged.setStatus('current')
if mibBuilder.loadTexts: ccMOTDChanged.setDescription('CC-SG Messsage of the Day (MOTD) has changed ')
ccDominionPXReplaced = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 37)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccOldNumberOfOutlets"), ("RARITANCCv2-MIB", "ccNewNumberOfOutlets"))
if mibBuilder.loadTexts: ccDominionPXReplaced.setStatus('current')
if mibBuilder.loadTexts: ccDominionPXReplaced.setDescription('CC-SG - A Dominion PX has been replaced ')
ccSystemMonitorNotification = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 38)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccSystemMonitorNotificationLevel"), ("RARITANCCv2-MIB", "ccSystemMonitorNotificationMessage"))
if mibBuilder.loadTexts: ccSystemMonitorNotification.setStatus('current')
if mibBuilder.loadTexts: ccSystemMonitorNotification.setDescription('CC-SG SystemMonitor notification')
ccNeighborhoodActivated = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 39)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"))
if mibBuilder.loadTexts: ccNeighborhoodActivated.setStatus('current')
if mibBuilder.loadTexts: ccNeighborhoodActivated.setDescription('CC-SG - Network neighborhood has been activated ')
ccNeighborhoodUpdated = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 40)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"))
if mibBuilder.loadTexts: ccNeighborhoodUpdated.setStatus('current')
if mibBuilder.loadTexts: ccNeighborhoodUpdated.setDescription('CC-SG - Network neighborhood has been updated ')
ccDominionPXFirmwareChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 41)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccDominionPXFirmwareVersion"))
if mibBuilder.loadTexts: ccDominionPXFirmwareChanged.setStatus('current')
if mibBuilder.loadTexts: ccDominionPXFirmwareChanged.setDescription('CC-SG - A Dominion PX firmware version has been changed ')
ccClusterFailover = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 42)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccClusterPeer"))
if mibBuilder.loadTexts: ccClusterFailover.setStatus('current')
if mibBuilder.loadTexts: ccClusterFailover.setDescription('CC-SG - The Primary has failed and the Backup is now operational as the new Primary ')
ccClusterBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 43)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccClusterPeer"))
if mibBuilder.loadTexts: ccClusterBackupFailed.setStatus('current')
if mibBuilder.loadTexts: ccClusterBackupFailed.setDescription('CC-SG - The Backup has failed ')
ccClusterWaitingPeerDetected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 44)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccClusterPeer"))
if mibBuilder.loadTexts: ccClusterWaitingPeerDetected.setStatus('current')
if mibBuilder.loadTexts: ccClusterWaitingPeerDetected.setDescription('CC-SG - The Primary detected a peer in Waiting mode ')
ccClusterAction = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 45)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccClusterOperation"), ("RARITANCCv2-MIB", "ccClusterOperationStatus"))
if mibBuilder.loadTexts: ccClusterAction.setStatus('current')
if mibBuilder.loadTexts: ccClusterAction.setDescription('CC-SG - A cluster operation has been executed ')
ccCSVFileTransferred = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 46)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccFileType"), ("RARITANCCv2-MIB", "ccTransferOperation"))
if mibBuilder.loadTexts: ccCSVFileTransferred.setStatus('current')
if mibBuilder.loadTexts: ccCSVFileTransferred.setDescription('CC-SG - CSV File Transferred ')
ccPIQUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 47)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLeafNodeName"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"))
if mibBuilder.loadTexts: ccPIQUnavailable.setStatus('current')
if mibBuilder.loadTexts: ccPIQUnavailable.setDescription('CC-SG has detected that Power IQ is unavailable')
ccPIQAvailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 48)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLeafNodeName"), ("RARITANCCv2-MIB", "ccLeafNodeIPAddress"))
if mibBuilder.loadTexts: ccPIQAvailable.setStatus('current')
if mibBuilder.loadTexts: ccPIQAvailable.setDescription('CC-SG has detected that Power IQ is available')
ccLicenseServerUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 49)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLicenseServer"))
if mibBuilder.loadTexts: ccLicenseServerUnavailable.setStatus('current')
if mibBuilder.loadTexts: ccLicenseServerUnavailable.setDescription('CC-SG License Server Unavailable notification')
ccLicenseServerFailover = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 50)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLicenseServer"))
if mibBuilder.loadTexts: ccLicenseServerFailover.setStatus('current')
if mibBuilder.loadTexts: ccLicenseServerFailover.setDescription('CC-SG License Server Fail-Over notification')
ccLicenseServerAvailable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 51)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLicenseServer"))
if mibBuilder.loadTexts: ccLicenseServerAvailable.setStatus('current')
if mibBuilder.loadTexts: ccLicenseServerAvailable.setDescription('CC-SG License Server Available notification')
ccLicenseTerminated = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 52)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"))
if mibBuilder.loadTexts: ccLicenseTerminated.setStatus('current')
if mibBuilder.loadTexts: ccLicenseTerminated.setDescription('CC-SG License Terminated notification')
ccAddLicenseFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 53)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"))
if mibBuilder.loadTexts: ccAddLicenseFailure.setStatus('current')
if mibBuilder.loadTexts: ccAddLicenseFailure.setDescription('Add CC-SG License Failed')
ccAddFeatureFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 54)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLicensedFeature"))
if mibBuilder.loadTexts: ccAddFeatureFailure.setStatus('current')
if mibBuilder.loadTexts: ccAddFeatureFailure.setDescription('CC-SG Licensed Feature Check-out Failed')
ccLicenseTerminatedWithReason = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 55)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccLicenseTerminatedReason"))
if mibBuilder.loadTexts: ccLicenseTerminatedWithReason.setStatus('current')
if mibBuilder.loadTexts: ccLicenseTerminatedWithReason.setDescription('The reason why CC-SG Licenses were terminated. ')
ccUserPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 1, 1, 1, 1, 56)).setObjects(("RARITANCCv2-MIB", "ccObjectName"), ("RARITANCCv2-MIB", "ccObjectInstance"), ("RARITANCCv2-MIB", "ccUserName"), ("RARITANCCv2-MIB", "ccUserWhoModified"))
if mibBuilder.loadTexts: ccUserPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: ccUserPasswordChanged.setDescription('CC user password changed ')
mibBuilder.exportSymbols("RARITANCCv2-MIB", products=products, ccUserNameInitiated=ccUserNameInitiated, ccObjectName=ccObjectName, ccClusterFailover=ccClusterFailover, ccUserWhoDeleted=ccUserWhoDeleted, ccSystemMonitorNotificationMessage=ccSystemMonitorNotificationMessage, ccClusterState=ccClusterState, ccHardDiskFailure=ccHardDiskFailure, ccTransferOperation=ccTransferOperation, ccLoginBannerChanged=ccLoginBannerChanged, ccSystemMonitorNotificationLevel=ccSystemMonitorNotificationLevel, ccSessionType=ccSessionType, ccDeviceUpgrade=ccDeviceUpgrade, ccLeafNodeAvailable=ccLeafNodeAvailable, ccFileType=ccFileType, ccUserAdded=ccUserAdded, enterpriseManagement=enterpriseManagement, ccUserGroupName=ccUserGroupName, ccScheduledTaskExecutionFailure=ccScheduledTaskExecutionFailure, ccUserGroupAdded=ccUserGroupAdded, ccScheduledTaskDescription=ccScheduledTaskDescription, ccPIQAvailable=ccPIQAvailable, ccDiagnosticConsoleMAX_ACCESSLevel=ccDiagnosticConsoleMAX_ACCESSLevel, ccLicenseServer=ccLicenseServer, ccPortName=ccPortName, ccLicenseServerFailover=ccLicenseServerFailover, ccUserWhoAdded=ccUserWhoAdded, ccUserLogout=ccUserLogout, ccUserName=ccUserName, ccLeafNodeName=ccLeafNodeName, ccDiagnosticConsoleLogout=ccDiagnosticConsoleLogout, commandCenter=commandCenter, ccLeafNodeIPAddress=ccLeafNodeIPAddress, ccLanCard=ccLanCard, ccScheduledTaskFailureReason=ccScheduledTaskFailureReason, ccUserSessionId=ccUserSessionId, ccNeighborhoodUpdated=ccNeighborhoodUpdated, ccMOTDChanged=ccMOTDChanged, ccSystemMonitorNotification=ccSystemMonitorNotification, ccAvailable=ccAvailable, ccDeviceName=ccDeviceName, ccLicenseServerUnavailable=ccLicenseServerUnavailable, ccNOCAvailable=ccNOCAvailable, ccDiagnosticConsoleLogin=ccDiagnosticConsoleLogin, ccIncompatibleDeviceFirmware=ccIncompatibleDeviceFirmware, ccUserLockedOut=ccUserLockedOut, ccImageType=ccImageType, raritan=raritan, ccObjectInstance=ccObjectInstance, ccRootPasswordChanged=ccRootPasswordChanged, ccDominionPXFirmwareVersion=ccDominionPXFirmwareVersion, ccAddFeatureFailure=ccAddFeatureFailure, ccObject=ccObject, ccImageVersionStatus=ccImageVersionStatus, ccImageUpgradeStarted=ccImageUpgradeStarted, ccPortConnectionStopped=ccPortConnectionStopped, ccAddLicenseFailure=ccAddLicenseFailure, ccNOCUnavailable=ccNOCUnavailable, ccLicenseTerminated=ccLicenseTerminated, ccClusterOperationStatus=ccClusterOperationStatus, ccPortConnectionTerminated=ccPortConnectionTerminated, ccUserModified=ccUserModified, ccLeafNodeUnavailable=ccLeafNodeUnavailable, ccBannerChanges=ccBannerChanges, ccClusterOperation=ccClusterOperation, ccNotify=ccNotify, ccClusterAction=ccClusterAction, ccUserGroupDeleted=ccUserGroupDeleted, ccLanCardFailure=ccLanCardFailure, ccUnavailable=ccUnavailable, ccLicenseServerAvailable=ccLicenseServerAvailable, ccImageUpgradeResults=ccImageUpgradeResults, ccPIQUnavailable=ccPIQUnavailable, ccNewNumberOfOutlets=ccNewNumberOfOutlets, ccDeviceAddedAfterCCNOCNotification=ccDeviceAddedAfterCCNOCNotification, ccClusterPeer=ccClusterPeer, ccClusterBackupFailed=ccClusterBackupFailed, ccLicenseTerminatedWithReason=ccLicenseTerminatedWithReason, ccUserWhoModified=ccUserWhoModified, ccSuperuserPasswordChanged=ccSuperuserPasswordChanged, ccNeighborhoodActivated=ccNeighborhoodActivated, ccUserLogin=ccUserLogin, ccNodeName=ccNodeName, ccLicensedFeature=ccLicensedFeature, ccEnterMaintenanceMode=ccEnterMaintenanceMode, ccCSVFileTransferred=ccCSVFileTransferred, ccUserGroupModified=ccUserGroupModified, ccUserDeleted=ccUserDeleted, ccMOTDChanges=ccMOTDChanges, ccUserAuthenticationFailure=ccUserAuthenticationFailure, ccSPortConnectionStarted=ccSPortConnectionStarted, ccLeafNodeFirmwareVersion=ccLeafNodeFirmwareVersion, ccExitMaintenanceMode=ccExitMaintenanceMode, ccImageVersion=ccImageVersion, PYSNMP_MODULE_ID=raritan, ccOldNumberOfOutlets=ccOldNumberOfOutlets, ccLicenseTerminatedReason=ccLicenseTerminatedReason, ccSuperuserNameChanged=ccSuperuserNameChanged, ccDominionPXReplaced=ccDominionPXReplaced, ccClusterWaitingPeerDetected=ccClusterWaitingPeerDetected, ccUserPasswordChanged=ccUserPasswordChanged, ccUserNameTerminated=ccUserNameTerminated, ccHardDisk=ccHardDisk, ccDominionPXFirmwareChanged=ccDominionPXFirmwareChanged)
