#
# PySNMP MIB module F10-Z-SERIES-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-Z-SERIES-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
F10HundredthdB, F10SwDate, F10CardOperStatus, F10MfgDate, F10ChassisType, F10ProcessorModuleType, F10SSeriesPortType = mibBuilder.importSymbols("FORCE10-TC", "F10HundredthdB", "F10SwDate", "F10CardOperStatus", "F10MfgDate", "F10ChassisType", "F10ProcessorModuleType", "F10SSeriesPortType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, iso, ModuleIdentity, MibIdentifier, Counter32, IpAddress, NotificationType, Unsigned32, Gauge32, ObjectIdentity, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "ModuleIdentity", "MibIdentifier", "Counter32", "IpAddress", "NotificationType", "Unsigned32", "Gauge32", "ObjectIdentity", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
f10ZSerChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 25))
f10ZSerChassisMib.setRevisions(('2014-04-16 12:00', '2013-10-10 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f10ZSerChassisMib.setRevisionsDescriptions(('Updated Contact info and Description.', 'Initial version of this mib.',))
if mibBuilder.loadTexts: f10ZSerChassisMib.setLastUpdated('201404161200Z')
if mibBuilder.loadTexts: f10ZSerChassisMib.setOrganization('Dell Inc.')
if mibBuilder.loadTexts: f10ZSerChassisMib.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: f10ZSerChassisMib.setDescription('Dell Networking OS Z-Series Chassis MIB.')
f10ZSerChassisObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1))
chObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1))
chSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2))
chType = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 1), F10ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chType.setStatus('current')
if mibBuilder.loadTexts: chType.setDescription('The type of chassis.')
chSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSwVersion.setStatus('current')
if mibBuilder.loadTexts: chSwVersion.setDescription('Current FTOS image version running in the system. The version string will be in following format major_ver.minor_ver(maintenance_ver.patch_ver)')
chMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chMacAddr.setStatus('current')
if mibBuilder.loadTexts: chMacAddr.setDescription('A 6-octet MAC Address assigned to this Chassis.')
chSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chSerialNumber.setDescription("The chassis's serial number.")
chPartNum = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPartNum.setStatus('current')
if mibBuilder.loadTexts: chPartNum.setDescription("The chassis manufacturer's part number.")
chProductRev = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chProductRev.setStatus('current')
if mibBuilder.loadTexts: chProductRev.setDescription("The chassis manufacturer's product revision.")
chVendorId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chVendorId.setStatus('current')
if mibBuilder.loadTexts: chVendorId.setDescription("The chassis manufacturer vendor's id.")
chMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 8), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chMfgDate.setStatus('current')
if mibBuilder.loadTexts: chMfgDate.setDescription('The date the chassis was manufactured.')
chCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCountryCode.setStatus('current')
if mibBuilder.loadTexts: chCountryCode.setDescription("The chassis manufacturer's country code.")
chPiecePartID = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPiecePartID.setStatus('current')
if mibBuilder.loadTexts: chPiecePartID.setDescription("The chassis's piece part ID.")
chPPIDRevision = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPPIDRevision.setStatus('current')
if mibBuilder.loadTexts: chPPIDRevision.setDescription("The chassis's piece part ID revision.")
chServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chServiceTag.setStatus('current')
if mibBuilder.loadTexts: chServiceTag.setDescription("The chassis's service tag.")
chExpressServiceCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chExpressServiceCode.setStatus('current')
if mibBuilder.loadTexts: chExpressServiceCode.setDescription("The chassis's express service code.")
chNum10GigEtherPorts = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNum10GigEtherPorts.setStatus('current')
if mibBuilder.loadTexts: chNum10GigEtherPorts.setDescription('The number of 10G Ethernet/802.3 interfaces in the chassis.')
chNum40GigEtherPorts = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNum40GigEtherPorts.setStatus('current')
if mibBuilder.loadTexts: chNum40GigEtherPorts.setDescription('The number of 40G Ethernet/802.3 interfaces in the chassis.')
chNumLineCards = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumLineCards.setStatus('current')
if mibBuilder.loadTexts: chNumLineCards.setDescription('The number of line cards currently supported in the chassis.')
chNumFanTrays = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumFanTrays.setStatus('current')
if mibBuilder.loadTexts: chNumFanTrays.setDescription('Number of Fan trays in the chassis.')
chNumPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: chNumPowerSupplies.setDescription('Number of Power supplies in the chassis.')
chSysProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 1), )
if mibBuilder.loadTexts: chSysProcessorTable.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorTable.setDescription('A list of Processors resident in the chassis. The card table contains the Processor information of each Processor in the chassis.')
chSysProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 1, 1), ).setIndexNames((0, "F10-Z-SERIES-CHASSIS-MIB", "chSysProcessorIndex"))
if mibBuilder.loadTexts: chSysProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorEntry.setDescription("A list of Processor's entries containing information for Processors in the system.")
chSysProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: chSysProcessorIndex.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorIndex.setDescription('A unique index for each Processor within the chassis. The valid entries are 1 to the value of number of processors. In Z9500, Index 1 - Control Processor Index 2 - Routing Processor Index 3 - LineCard Processor 0 Index 4 - LineCard Processor 1 Index 5 - LineCard Processor 2')
chSysProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 1, 1, 2), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorType.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorType.setDescription('The type of module running on the Processor.')
chSysProcessorUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorUpTime.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorUpTime.setDescription('The SysUpTime for this Processor.')
chSysProcessorMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorMemSize.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorMemSize.setDescription('The size of the RAM in MB.')
chSysSwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2), )
if mibBuilder.loadTexts: chSysSwModuleTable.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleTable.setDescription('A list of software version information in a processor.')
chSysSwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1), ).setIndexNames((0, "F10-Z-SERIES-CHASSIS-MIB", "chSysProcessorIndex"))
if mibBuilder.loadTexts: chSysSwModuleEntry.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleEntry.setDescription('A software module entry containing version number information for a particular processor.')
chSysSwModuleRuntimeImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwModuleRuntimeImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleRuntimeImgVersion.setDescription('Current FTOS image version running in the system. The version string will be in following format major_ver.minor_ver(maintenance_ver.patch_ver)')
chSysSwModuleRuntimeImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1, 2), F10SwDate().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwModuleRuntimeImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleRuntimeImgDate.setDescription('The release date of this software module.')
chSysSwModuleBootFlashImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwModuleBootFlashImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleBootFlashImgVersion.setDescription('This provides the Grub image version that is currently running in the processor.')
chSysSwModuleBootSelectorImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwModuleBootSelectorImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleBootSelectorImgVersion.setDescription('This provides the BIOS image version that is currently running in the processor.')
chSysSwModuleNextRebootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partitionA", 1), ("partitionB", 2), ("networkBoot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwModuleNextRebootImage.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleNextRebootImage.setDescription('The image selection, when the chassis is rebooted. partitionA - Image stored in bootflash partition A: partitionB - Image stored in bootflash partition B: networkBoot - will be booted via network.')
chSysSwModuleCurrentBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partitionA", 1), ("partitionB", 2), ("networkBoot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwModuleCurrentBootImage.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleCurrentBootImage.setDescription('The current image is booted from. partitionA - Image stored in bootflash partition A: partitionB - Image stored in bootflash partition B: networkBoot - Booted via network.')
chSysSwModuleInPartitionAImgVers = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwModuleInPartitionAImgVers.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleInPartitionAImgVers.setDescription('This provides the FTOS system image version that is stored in partition A: and The version string has Major and Minor release numbers. It also denotes if the release is Maintenance, Technical, Patch, Beta, or Generally Available')
chSysSwModuleInPartitionBImgVers = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwModuleInPartitionBImgVers.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleInPartitionBImgVers.setDescription('This provides the FTOS system image version that is stored in partition B: and The version string has Major and Minor release numbers. It also denotes if the release is Maintenance, Technical, Patch, Beta, or Generally Available')
chSysCpuUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 3), )
if mibBuilder.loadTexts: chSysCpuUtilTable.setStatus('current')
if mibBuilder.loadTexts: chSysCpuUtilTable.setDescription('A table listing the processor and memory utilization of of each CPU in the system.')
chSysCpuUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 3, 1), ).setIndexNames((0, "F10-Z-SERIES-CHASSIS-MIB", "chSysProcessorIndex"))
if mibBuilder.loadTexts: chSysCpuUtilEntry.setStatus('current')
if mibBuilder.loadTexts: chSysCpuUtilEntry.setDescription('Processor and Memory Utilization entry for a particular CPU.')
chSysCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 3, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCpuUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: chSysCpuUtil5Sec.setDescription('CPU utilization in percentage for last 5 seconds.')
chSysCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 3, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCpuUtil1Min.setStatus('current')
if mibBuilder.loadTexts: chSysCpuUtil1Min.setDescription('CPU utilization in percentage for last 1 minute.')
chSysCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 3, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCpuUtil5Min.setStatus('current')
if mibBuilder.loadTexts: chSysCpuUtil5Min.setDescription('CPU utilization in percentage for last 5 minutes.')
chSysCpuUtilMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCpuUtilMemUsage.setStatus('current')
if mibBuilder.loadTexts: chSysCpuUtilMemUsage.setDescription('Total Memory usage in percentage.')
chSysCpuUtilFlashUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 3, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCpuUtilFlashUsage.setStatus('current')
if mibBuilder.loadTexts: chSysCpuUtilFlashUsage.setDescription('Total Flash usage in percentage.')
chSysLineCardTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4), )
if mibBuilder.loadTexts: chSysLineCardTable.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardTable.setDescription('A list of line cards resident in the chassis. This table contains the information on each linecard in the chassis.')
chSysLineCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4, 1), ).setIndexNames((0, "F10-Z-SERIES-CHASSIS-MIB", "chSysLineCardIndex"))
if mibBuilder.loadTexts: chSysLineCardEntry.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardEntry.setDescription('Entry for each line card in the chassis.')
chSysLineCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: chSysLineCardIndex.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardIndex.setDescription('A unique index for each line card in the chassis.')
chSysLineCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("z9500LC36", 1), ("z9500LC48", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysLineCardType.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardType.setDescription("Line card's type. In Z9500, there is 36 40G port line card and 48 40G port line card. z9500LC36 - 36 (40G) port LC z9500LC48 - 48 (40G) port LC.")
chSysLineCardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysLineCardDescription.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardDescription.setDescription('A short description of the line card.')
chSysLineCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4, 1, 4), F10CardOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysLineCardStatus.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardStatus.setDescription('The current operational state of the line card.')
chSysLineCardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4, 1, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysLineCardTemp.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardTemp.setDescription('Temperature of the Line card.')
chSysLineCardNum10GigEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysLineCardNum10GigEtherPorts.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardNum10GigEtherPorts.setDescription('The number of 10G Ethernet/802.3 interfaces in the line card.')
chSysLineCardNum40GigEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysLineCardNum40GigEtherPorts.setStatus('current')
if mibBuilder.loadTexts: chSysLineCardNum40GigEtherPorts.setDescription('The number of 40G Ethernet/802.3 interfaces in the line card.')
chSysPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5), )
if mibBuilder.loadTexts: chSysPortTable.setStatus('current')
if mibBuilder.loadTexts: chSysPortTable.setDescription('A list of ports in the Z-series chassis.')
chSysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1), ).setIndexNames((0, "F10-Z-SERIES-CHASSIS-MIB", "chSysLineCardIndex"), (0, "F10-Z-SERIES-CHASSIS-MIB", "chSysPortIndex"))
if mibBuilder.loadTexts: chSysPortEntry.setStatus('current')
if mibBuilder.loadTexts: chSysPortEntry.setDescription('A port entry containing objects for a particular port.')
chSysPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: chSysPortIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortIndex.setDescription('A unique index for each port within the Line Card. Line card 0 will have index from 1 to 144 Line card 1 will have index from 1 to 192 Line card 2 will have index from 1 to 192.')
chSysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1, 2), F10SSeriesPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortType.setStatus('current')
if mibBuilder.loadTexts: chSysPortType.setDescription('The type of port in the unit.')
chSysPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPortAdminStatus.setDescription('The admin status of the port. The port admin status is Up if the user has configured it to be up otherwise, the admin status is Down.')
chSysPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 1), ("portDown", 2), ("portProblem", 3), ("cardProblem", 4), ("cardDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPortOperStatus.setDescription("The operational status provides further condition of the port. If the chSysPortAdminStatus is 'up', the valid state is 'ready' - the card is present and ready and the chSysPortAdminStatus status is 'up'. 'portDown' - the port is down or not enabled. 'portProblem' - port hardware problems. 'cardProblem' - not used. Same as cardDown. 'cardDown' - the card is downed. 'notPresent' - the card is not present.")
chSysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortIfIndex.setDescription('The index of ifIndex in the Interface Mib. This index can link to the ifEntry to get this interface/port information')
chSysPortXfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1, 6), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpRxPower.setStatus('current')
if mibBuilder.loadTexts: chSysPortXfpRxPower.setDescription('The power signal strength (dB) received for 1G/10G/40G Ethernet/802.3 interface.')
chSysPortXfpRxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1, 7), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpRxTemp.setStatus('current')
if mibBuilder.loadTexts: chSysPortXfpRxTemp.setDescription('The temperature value received for the optics.')
chSysPortXfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 5, 1, 8), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpTxPower.setStatus('current')
if mibBuilder.loadTexts: chSysPortXfpTxPower.setDescription('The power signal strength (dB) Transmitted for 1G/10G/40G Ethernet/802.3 interface.')
chSysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6), )
if mibBuilder.loadTexts: chSysPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyTable.setDescription('A list of power supply resident in the Z-series chassis.')
chSysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1), ).setIndexNames((0, "F10-Z-SERIES-CHASSIS-MIB", "chSysPowerSupplyIndex"))
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setDescription('A power supply entry containing objects for a particular power supply.')
chSysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setDescription('The unique index of the power supply.')
chSysPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("absent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setDescription('The status of the power supply.')
chSysPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyType.setDescription('The type of the power supply.')
chSysPowerSupplyPiecePartID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyPiecePartID.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyPiecePartID.setDescription("The power supply's piece part id.")
chSysPowerSupplyPPIDRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyPPIDRevision.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyPPIDRevision.setDescription("The power supply's PPID revision.")
chSysPowerSupplyServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyServiceTag.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyServiceTag.setDescription("The power supply's service tag.")
chSysPowerSupplyExpressServiceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyExpressServiceCode.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyExpressServiceCode.setDescription("The power supply's express service code.")
chSysPowerSupplyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyUsage.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyUsage.setDescription('Power usage of this Power Supply in Watts.')
chSysFanTrayTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 7), )
if mibBuilder.loadTexts: chSysFanTrayTable.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayTable.setDescription('A list of fan tray resident in the Z-series chassis.')
chSysFanTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 7, 1), ).setIndexNames((0, "F10-Z-SERIES-CHASSIS-MIB", "chSysFanTrayIndex"))
if mibBuilder.loadTexts: chSysFanTrayEntry.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayEntry.setDescription('A fan entry containing objects for a particular fan tray.')
chSysFanTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: chSysFanTrayIndex.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayIndex.setDescription('The unique index of the fan tray.')
chSysFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("absent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setDescription('The status of the fan tray.')
chSysFanTrayPiecePartID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayPiecePartID.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayPiecePartID.setDescription("The fan tray's piece part id.")
chSysFanTrayPPIDRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayPPIDRevision.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayPPIDRevision.setDescription("The fan tray's PPID revision.")
chSysFanTrayServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayServiceTag.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayServiceTag.setDescription("The fan tray's service tag.")
chSysFanTrayExpressServiceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayExpressServiceCode.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayExpressServiceCode.setDescription("The fan tray's express service code.")
chSysSwCoresTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 8), )
if mibBuilder.loadTexts: chSysSwCoresTable.setStatus('current')
if mibBuilder.loadTexts: chSysSwCoresTable.setDescription('A table containing information about the software cores that have been generated as a result of system failures.')
chSysCoresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 8, 1), ).setIndexNames((0, "F10-Z-SERIES-CHASSIS-MIB", "chSysProcessorIndex"), (0, "F10-Z-SERIES-CHASSIS-MIB", "chSysCoresInstance"))
if mibBuilder.loadTexts: chSysCoresEntry.setStatus('current')
if mibBuilder.loadTexts: chSysCoresEntry.setDescription('A row in the software core table representing information about a core that has been generated.')
chSysCoresInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresInstance.setStatus('current')
if mibBuilder.loadTexts: chSysCoresInstance.setDescription('The instance of the core for the process which which generated the core since the same process may have generated multiple cores.')
chSysCoresFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresFileName.setStatus('current')
if mibBuilder.loadTexts: chSysCoresFileName.setDescription('The name of the core file including the core.')
chSysCoresTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 8, 1, 3), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresTimeCreated.setStatus('current')
if mibBuilder.loadTexts: chSysCoresTimeCreated.setDescription('The time at which the core file was created.')
chSysCoresProcessorName = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresProcessorName.setStatus('current')
if mibBuilder.loadTexts: chSysCoresProcessorName.setDescription('The processor which generated the core.')
chSysCoresProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 25, 1, 2, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresProcess.setStatus('current')
if mibBuilder.loadTexts: chSysCoresProcess.setDescription('The name of the process which generated the core.')
f10ZSeriesChassisMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 25, 2))
f10ZSeriesChassisMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 25, 2, 1))
f10ZSeriesChassisMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 25, 2, 2))
f10ZSeriesChassisMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 25, 2, 1, 1)).setObjects(("F10-Z-SERIES-CHASSIS-MIB", "f10ZSeriesComponentGroup"), ("F10-Z-SERIES-CHASSIS-MIB", "f10ZSeriesSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ZSeriesChassisMibCompliance = f10ZSeriesChassisMibCompliance.setStatus('current')
if mibBuilder.loadTexts: f10ZSeriesChassisMibCompliance.setDescription('The compliance statement for Dell Networking product which implement the Z-Series Chassis MIB.')
f10ZSeriesComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 25, 2, 2, 1)).setObjects(("F10-Z-SERIES-CHASSIS-MIB", "chType"), ("F10-Z-SERIES-CHASSIS-MIB", "chSwVersion"), ("F10-Z-SERIES-CHASSIS-MIB", "chMacAddr"), ("F10-Z-SERIES-CHASSIS-MIB", "chSerialNumber"), ("F10-Z-SERIES-CHASSIS-MIB", "chPartNum"), ("F10-Z-SERIES-CHASSIS-MIB", "chProductRev"), ("F10-Z-SERIES-CHASSIS-MIB", "chVendorId"), ("F10-Z-SERIES-CHASSIS-MIB", "chMfgDate"), ("F10-Z-SERIES-CHASSIS-MIB", "chCountryCode"), ("F10-Z-SERIES-CHASSIS-MIB", "chPiecePartID"), ("F10-Z-SERIES-CHASSIS-MIB", "chPPIDRevision"), ("F10-Z-SERIES-CHASSIS-MIB", "chServiceTag"), ("F10-Z-SERIES-CHASSIS-MIB", "chExpressServiceCode"), ("F10-Z-SERIES-CHASSIS-MIB", "chNum10GigEtherPorts"), ("F10-Z-SERIES-CHASSIS-MIB", "chNum40GigEtherPorts"), ("F10-Z-SERIES-CHASSIS-MIB", "chNumLineCards"), ("F10-Z-SERIES-CHASSIS-MIB", "chNumFanTrays"), ("F10-Z-SERIES-CHASSIS-MIB", "chNumPowerSupplies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ZSeriesComponentGroup = f10ZSeriesComponentGroup.setStatus('current')
if mibBuilder.loadTexts: f10ZSeriesComponentGroup.setDescription('A collection of objects providing the overall Z-series chassis information.')
f10ZSeriesSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 25, 2, 2, 2)).setObjects(("F10-Z-SERIES-CHASSIS-MIB", "chSysProcessorType"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysProcessorUpTime"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysProcessorMemSize"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysSwModuleRuntimeImgVersion"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysSwModuleRuntimeImgDate"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysSwModuleBootFlashImgVersion"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysSwModuleBootSelectorImgVersion"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysSwModuleNextRebootImage"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysSwModuleCurrentBootImage"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysSwModuleInPartitionAImgVers"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysSwModuleInPartitionBImgVers"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCpuUtil5Sec"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCpuUtil1Min"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCpuUtil5Min"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCpuUtilMemUsage"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCpuUtilFlashUsage"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysLineCardType"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysLineCardDescription"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysLineCardStatus"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysLineCardTemp"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysLineCardNum10GigEtherPorts"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysLineCardNum40GigEtherPorts"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPortType"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPortAdminStatus"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPortOperStatus"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPortIfIndex"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPortXfpRxPower"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPortXfpRxTemp"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPortXfpTxPower"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPowerSupplyOperStatus"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPowerSupplyType"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPowerSupplyPiecePartID"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPowerSupplyPPIDRevision"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPowerSupplyServiceTag"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPowerSupplyExpressServiceCode"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysPowerSupplyUsage"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysFanTrayOperStatus"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysFanTrayPiecePartID"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysFanTrayPPIDRevision"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysFanTrayServiceTag"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysFanTrayExpressServiceCode"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCoresInstance"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCoresFileName"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCoresTimeCreated"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCoresProcessorName"), ("F10-Z-SERIES-CHASSIS-MIB", "chSysCoresProcess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ZSeriesSystemGroup = f10ZSeriesSystemGroup.setStatus('current')
if mibBuilder.loadTexts: f10ZSeriesSystemGroup.setDescription('A collection of objects providing the chassis system hardware information.')
mibBuilder.exportSymbols("F10-Z-SERIES-CHASSIS-MIB", PYSNMP_MODULE_ID=f10ZSerChassisMib, chSysPowerSupplyOperStatus=chSysPowerSupplyOperStatus, chSysProcessorMemSize=chSysProcessorMemSize, f10ZSerChassisMib=f10ZSerChassisMib, chSysSwModuleEntry=chSysSwModuleEntry, chSysSwModuleRuntimeImgDate=chSysSwModuleRuntimeImgDate, chNumFanTrays=chNumFanTrays, chSysCpuUtilTable=chSysCpuUtilTable, chSysPowerSupplyExpressServiceCode=chSysPowerSupplyExpressServiceCode, chMacAddr=chMacAddr, chSysPortXfpTxPower=chSysPortXfpTxPower, chSysCoresProcessorName=chSysCoresProcessorName, f10ZSeriesChassisMibCompliance=f10ZSeriesChassisMibCompliance, chSysCpuUtilFlashUsage=chSysCpuUtilFlashUsage, chSysSwModuleBootFlashImgVersion=chSysSwModuleBootFlashImgVersion, chSysLineCardNum10GigEtherPorts=chSysLineCardNum10GigEtherPorts, f10ZSerChassisObject=f10ZSerChassisObject, chSerialNumber=chSerialNumber, chSysPortType=chSysPortType, chSysProcessorEntry=chSysProcessorEntry, chSysLineCardType=chSysLineCardType, chSysPortTable=chSysPortTable, chSysPowerSupplyEntry=chSysPowerSupplyEntry, chType=chType, chSysCoresEntry=chSysCoresEntry, f10ZSeriesChassisMibConformance=f10ZSeriesChassisMibConformance, chSysCoresTimeCreated=chSysCoresTimeCreated, chPPIDRevision=chPPIDRevision, chSysProcessorIndex=chSysProcessorIndex, chSysCoresInstance=chSysCoresInstance, chSysPowerSupplyServiceTag=chSysPowerSupplyServiceTag, chSysLineCardEntry=chSysLineCardEntry, chSysPortOperStatus=chSysPortOperStatus, chSysFanTrayOperStatus=chSysFanTrayOperStatus, chExpressServiceCode=chExpressServiceCode, chSysFanTrayExpressServiceCode=chSysFanTrayExpressServiceCode, chPartNum=chPartNum, chSysLineCardIndex=chSysLineCardIndex, chSysSwModuleRuntimeImgVersion=chSysSwModuleRuntimeImgVersion, chNum40GigEtherPorts=chNum40GigEtherPorts, chSysCpuUtilMemUsage=chSysCpuUtilMemUsage, chSysLineCardTable=chSysLineCardTable, f10ZSeriesChassisMibCompliances=f10ZSeriesChassisMibCompliances, chSysSwModuleInPartitionBImgVers=chSysSwModuleInPartitionBImgVers, chNumPowerSupplies=chNumPowerSupplies, chSysFanTrayPiecePartID=chSysFanTrayPiecePartID, f10ZSeriesChassisMibGroups=f10ZSeriesChassisMibGroups, chSysPowerSupplyPPIDRevision=chSysPowerSupplyPPIDRevision, chSysFanTrayPPIDRevision=chSysFanTrayPPIDRevision, chSysCoresFileName=chSysCoresFileName, chSysSwModuleTable=chSysSwModuleTable, chObjects=chObjects, chNum10GigEtherPorts=chNum10GigEtherPorts, chSysFanTrayTable=chSysFanTrayTable, chSysLineCardTemp=chSysLineCardTemp, f10ZSeriesComponentGroup=f10ZSeriesComponentGroup, chSysPortEntry=chSysPortEntry, chMfgDate=chMfgDate, chPiecePartID=chPiecePartID, chSysFanTrayServiceTag=chSysFanTrayServiceTag, chSysCpuUtilEntry=chSysCpuUtilEntry, chSysProcessorTable=chSysProcessorTable, chVendorId=chVendorId, chSysPortXfpRxPower=chSysPortXfpRxPower, chSysCpuUtil5Min=chSysCpuUtil5Min, chSysProcessorType=chSysProcessorType, chSysFanTrayIndex=chSysFanTrayIndex, chCountryCode=chCountryCode, chNumLineCards=chNumLineCards, chSysObjects=chSysObjects, chSysPortIfIndex=chSysPortIfIndex, chSysPortIndex=chSysPortIndex, chSysCpuUtil1Min=chSysCpuUtil1Min, chSysPowerSupplyIndex=chSysPowerSupplyIndex, chSysSwModuleBootSelectorImgVersion=chSysSwModuleBootSelectorImgVersion, chProductRev=chProductRev, chSysLineCardNum40GigEtherPorts=chSysLineCardNum40GigEtherPorts, chSysProcessorUpTime=chSysProcessorUpTime, chSwVersion=chSwVersion, chSysCpuUtil5Sec=chSysCpuUtil5Sec, chSysSwCoresTable=chSysSwCoresTable, f10ZSeriesSystemGroup=f10ZSeriesSystemGroup, chSysPortXfpRxTemp=chSysPortXfpRxTemp, chSysPowerSupplyTable=chSysPowerSupplyTable, chSysCoresProcess=chSysCoresProcess, chSysSwModuleNextRebootImage=chSysSwModuleNextRebootImage, chSysPowerSupplyPiecePartID=chSysPowerSupplyPiecePartID, chSysLineCardStatus=chSysLineCardStatus, chSysPowerSupplyUsage=chSysPowerSupplyUsage, chServiceTag=chServiceTag, chSysSwModuleCurrentBootImage=chSysSwModuleCurrentBootImage, chSysLineCardDescription=chSysLineCardDescription, chSysPortAdminStatus=chSysPortAdminStatus, chSysSwModuleInPartitionAImgVers=chSysSwModuleInPartitionAImgVers, chSysPowerSupplyType=chSysPowerSupplyType, chSysFanTrayEntry=chSysFanTrayEntry)
