#
# PySNMP MIB module VRTS-SNMP-MIBv1 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VRTS-SNMP-MIBv1
# Produced by pysmi-0.3.4 at Wed May  1 15:35:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, Bits, ObjectIdentity, ModuleIdentity, MibIdentifier, NotificationType, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Gauge32, enterprises, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "Bits", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Gauge32", "enterprises", "Counter32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
veritas = MibIdentifier((1, 3, 6, 1, 4, 1, 1035))
netbackup = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1))
vxvm = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 2))
vxfs = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 3))
vcs = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 7))
commonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301))
job = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 1))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 2))
media = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 4))
dr = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 6))
pysmi_class = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 2, 2)).setLabel("class")
client = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 2, 4))
sched = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 2, 6))
stu = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 2, 8))
mediaTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1), )
if mibBuilder.loadTexts: mediaTable.setStatus('mandatory')
if mibBuilder.loadTexts: mediaTable.setDescription('A table of NetBackup media configuration information.')
mediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "mediaIndex"))
if mibBuilder.loadTexts: mediaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mediaEntry.setDescription('An NBU media entry containing a media related information.')
mediaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mediaIndex.setDescription('It is Reference Index for media table.')
mediaPool = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaPool.setStatus('mandatory')
if mibBuilder.loadTexts: mediaPool.setDescription('The volume pool name where the media belongs to.')
mediaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaId.setStatus('mandatory')
if mibBuilder.loadTexts: mediaId.setDescription('It is media id for media table.')
mediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaType.setStatus('mandatory')
if mibBuilder.loadTexts: mediaType.setDescription('The type of the media, 8MM etc.')
mediaRobotType = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaRobotType.setStatus('mandatory')
if mibBuilder.loadTexts: mediaRobotType.setDescription('The type of the robot where the media resides, TS8 etc.')
mediaRobotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaRobotNum.setStatus('mandatory')
if mibBuilder.loadTexts: mediaRobotNum.setDescription('It is robot number where the media resides.')
mediaRobotSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaRobotSlot.setStatus('mandatory')
if mibBuilder.loadTexts: mediaRobotSlot.setDescription('It is robot slot number where the media resides.')
mediaSideFace = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaSideFace.setStatus('mandatory')
if mibBuilder.loadTexts: mediaSideFace.setDescription('It is the robot face where the media resides.')
mediaRetLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaRetLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mediaRetLevel.setDescription('It is the retention level of the media.')
mediaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaSize.setStatus('mandatory')
if mibBuilder.loadTexts: mediaSize.setDescription('It is media size in kbytes.')
mediaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mediaStatus.setDescription('It is the status of the media eg, available, frozen, full etc.')
volpool = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 4, 2))
robot = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 4, 4))
drive = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 4, 6))
tape = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 4, 8))
vault = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 6, 2))
classTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 2, 2, 1), )
if mibBuilder.loadTexts: classTable.setStatus('mandatory')
if mibBuilder.loadTexts: classTable.setDescription('A table of NetBackup class configuration information.')
classEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 2, 2, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "classIndex"))
if mibBuilder.loadTexts: classEntry.setStatus('mandatory')
if mibBuilder.loadTexts: classEntry.setDescription('An NBU class entry containing a class related information.')
classIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: classIndex.setStatus('mandatory')
if mibBuilder.loadTexts: classIndex.setDescription('It is Reference Index for class table.')
className = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: className.setStatus('mandatory')
if mibBuilder.loadTexts: className.setDescription('The class name.')
clientTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 2, 4, 1), )
if mibBuilder.loadTexts: clientTable.setStatus('mandatory')
if mibBuilder.loadTexts: clientTable.setDescription('A table of NetBackup client configuration information.')
clientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 2, 4, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "clientIndex"))
if mibBuilder.loadTexts: clientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clientEntry.setDescription('An NBU client entry containing a client related information.')
clientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clientIndex.setDescription('It is Reference Index for client table.')
clientName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientName.setStatus('mandatory')
if mibBuilder.loadTexts: clientName.setDescription('The client name.')
schedTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 2, 6, 1), )
if mibBuilder.loadTexts: schedTable.setStatus('mandatory')
if mibBuilder.loadTexts: schedTable.setDescription('A table of NetBackup sched configuration information.')
schedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 2, 6, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "schedIndex"))
if mibBuilder.loadTexts: schedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: schedEntry.setDescription('An NBU sched entry containing a sched related information.')
schedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: schedIndex.setDescription('It is Reference Index for sched table.')
schedName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedName.setStatus('mandatory')
if mibBuilder.loadTexts: schedName.setDescription('The sched name.')
stuTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 2, 8, 1), )
if mibBuilder.loadTexts: stuTable.setStatus('mandatory')
if mibBuilder.loadTexts: stuTable.setDescription('A table of NetBackup stu configuration information.')
stuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 2, 8, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "stuIndex"))
if mibBuilder.loadTexts: stuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: stuEntry.setDescription('An NBU stu entry containing a stu related information.')
stuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: stuIndex.setDescription('It is Reference Index for stu table.')
stuName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 2, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuName.setStatus('mandatory')
if mibBuilder.loadTexts: stuName.setDescription('The stu name.')
volpoolTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 4, 2, 1), )
if mibBuilder.loadTexts: volpoolTable.setStatus('mandatory')
if mibBuilder.loadTexts: volpoolTable.setDescription('A table of NetBackup volpool configuration information.')
volpoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 4, 2, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "volpoolIndex"))
if mibBuilder.loadTexts: volpoolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: volpoolEntry.setDescription('An NBU volpool entry containing a volpool related information.')
volpoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volpoolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: volpoolIndex.setDescription('It is Reference Index for volpool table.')
volpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volpoolName.setStatus('mandatory')
if mibBuilder.loadTexts: volpoolName.setDescription('The volpool name.')
robotTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 4, 4, 1), )
if mibBuilder.loadTexts: robotTable.setStatus('mandatory')
if mibBuilder.loadTexts: robotTable.setDescription('A table of NetBackup robot configuration information.')
robotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 4, 4, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "robotIndex"))
if mibBuilder.loadTexts: robotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: robotEntry.setDescription('An NBU robot entry containing a robot related information.')
robotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: robotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: robotIndex.setDescription('It is Reference Index for robot table.')
robotName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: robotName.setStatus('mandatory')
if mibBuilder.loadTexts: robotName.setDescription('The robot name.')
driveTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 4, 6, 1), )
if mibBuilder.loadTexts: driveTable.setStatus('mandatory')
if mibBuilder.loadTexts: driveTable.setDescription('A table of NetBackup drive configuration information.')
driveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 4, 6, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "driveIndex"))
if mibBuilder.loadTexts: driveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: driveEntry.setDescription('An NBU drive entry containing a drive related information.')
driveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: driveIndex.setDescription('It is Reference Index for drive table.')
driveName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveName.setStatus('mandatory')
if mibBuilder.loadTexts: driveName.setDescription('The drive name.')
tapeTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 4, 8, 1), )
if mibBuilder.loadTexts: tapeTable.setStatus('mandatory')
if mibBuilder.loadTexts: tapeTable.setDescription('A table of NetBackup tape configuration information.')
tapeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 4, 8, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "tapeIndex"))
if mibBuilder.loadTexts: tapeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tapeEntry.setDescription('An NBU tape entry containing a tape related information.')
tapeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tapeIndex.setDescription('It is Reference Index for tape table.')
tapeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 4, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeName.setStatus('mandatory')
if mibBuilder.loadTexts: tapeName.setDescription('The tape name.')
vaultTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 6, 2, 1), )
if mibBuilder.loadTexts: vaultTable.setStatus('mandatory')
if mibBuilder.loadTexts: vaultTable.setDescription('A table of NetBackup vault configuration information.')
vaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 6, 2, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "vaultIndex"))
if mibBuilder.loadTexts: vaultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vaultEntry.setDescription('An NBU vault entry containing a vault related information.')
vaultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vaultIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vaultIndex.setDescription('It is Reference Index for vault table.')
vaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vaultName.setStatus('mandatory')
if mibBuilder.loadTexts: vaultName.setDescription('The vault name.')
jobTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1), )
if mibBuilder.loadTexts: jobTable.setStatus('mandatory')
if mibBuilder.loadTexts: jobTable.setDescription('A table of NetBackup jobs information.')
jobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "jobIndex"))
if mibBuilder.loadTexts: jobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: jobEntry.setDescription('An NBU job entry containing a job related information.')
jobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobIndex.setStatus('mandatory')
if mibBuilder.loadTexts: jobIndex.setDescription('It is the standard index for SNMP job table, the actual NetBackup job id is represented by jobId field.')
jobType = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobType.setStatus('mandatory')
if mibBuilder.loadTexts: jobType.setDescription('The Backup type of NetBackup job, eg Backup or Restore etc.')
jobState = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobState.setStatus('mandatory')
if mibBuilder.loadTexts: jobState.setDescription('The State of NetBackup job, eg Done or Active etc.')
jobClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobClass.setStatus('mandatory')
if mibBuilder.loadTexts: jobClass.setDescription('The Class of NetBackup job.')
jobClient = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobClient.setStatus('mandatory')
if mibBuilder.loadTexts: jobClient.setDescription('The Client name of NetBackup job.')
jobSched = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobSched.setStatus('mandatory')
if mibBuilder.loadTexts: jobSched.setDescription('The Backup type of NetBackup job, eg Backup or Restore etc.')
jobSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobSchedType.setStatus('mandatory')
if mibBuilder.loadTexts: jobSchedType.setDescription('The Backup type of NetBackup job, eg Backup or Restore etc.')
jobStu = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobStu.setStatus('mandatory')
if mibBuilder.loadTexts: jobStu.setDescription('The Backup storage unit name of NetBackup job.')
jobVolpool = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobVolpool.setStatus('mandatory')
if mibBuilder.loadTexts: jobVolpool.setDescription('The Backup volume pool name of NetBackup job.')
jobKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobKbytes.setStatus('mandatory')
if mibBuilder.loadTexts: jobKbytes.setDescription('The Backup Kilo-bytes information of NetBackup job.')
jobMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobMaster.setStatus('mandatory')
if mibBuilder.loadTexts: jobMaster.setDescription('The master server hostname of NetBackup job.')
jobErrExpl = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobErrExpl.setStatus('mandatory')
if mibBuilder.loadTexts: jobErrExpl.setDescription('The error message explanation of NetBackup job.')
jobErrReco = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobErrReco.setStatus('mandatory')
if mibBuilder.loadTexts: jobErrReco.setDescription('The recommended action to correct error of NetBackup job.')
jobId = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobId.setStatus('mandatory')
if mibBuilder.loadTexts: jobId.setDescription('It is job Id for each NetBackup job, also served as Reference Index .')
jobErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: jobErrCode.setDescription('It is job exit status code for the NetBackup job. 0 means no error.')
jobErrMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jobErrMsg.setStatus('mandatory')
if mibBuilder.loadTexts: jobErrMsg.setDescription('The backup job error message of the NetBackup job.')
jobErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jobErrFix.setStatus('mandatory')
if mibBuilder.loadTexts: jobErrFix.setDescription('Setting this error fix flag to 1 to kick off the jobErrFixCmd.')
jobErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 1, 1, 1, 103), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jobErrFixCmd.setStatus('mandatory')
if mibBuilder.loadTexts: jobErrFixCmd.setDescription('The command that gets run when the jobErrFix column is set to 1.')
nbuExtTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 1, 100), )
if mibBuilder.loadTexts: nbuExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbuExtTable.setDescription("A table of extensible commands to control NetBackup from SNMP framework via SNMP get and set protocol. The commands can start and stop NetBackup/Media Manager, start and kill backup jobs etc. These commands map can be configured in ENE agent's snmpd.conf file.")
nbuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "nbuIndex"))
if mibBuilder.loadTexts: nbuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbuEntry.setDescription('An NBU entry containing an extensible modules and the results.')
class OpEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("other", 1), ("startNbu", 2), ("stopNbu", 3), ("startMm", 4), ("stopMm", 5), ("userDef0", 20), ("userDef1", 21), ("userDef2", 22), ("userDef3", 23), ("userDef4", 24), ("userDef5", 25), ("userDef6", 26), ("userDef7", 27), ("userDef8", 28), ("userDef9", 29))

nbuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 1), OpEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbuIndex.setDescription('Reference Index for extensible NBU scripts. It is an integer row number. A predefined map is available in snmpd.conf to map and customize the map from index to the command.')
nbuNames = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbuNames.setStatus('mandatory')
if mibBuilder.loadTexts: nbuNames.setDescription('A description of the extensible NBU command.')
nbuCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbuCommand.setStatus('mandatory')
if mibBuilder.loadTexts: nbuCommand.setDescription('The NBU command or scripts to be executed.')
nbuCtlFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbuCtlFlag.setStatus('mandatory')
if mibBuilder.loadTexts: nbuCtlFlag.setDescription('When the flag is set to 1, the extensible NBU scripts in nbuCommand will be executed. Exit code will go to nbuResult, output go to nbuOutput.')
nbuResFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuResFile.setStatus('mandatory')
if mibBuilder.loadTexts: nbuResFile.setDescription('The result file path for excuting the nbuCommand scripts. It contains the exit status of the command in the first line. The stdout in the second line. So the Agent can pick it up after executing the command and set exit code to nbuResult, output go to nbuOutput.')
nbuLockFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuLockFile.setStatus('mandatory')
if mibBuilder.loadTexts: nbuLockFile.setDescription('The lock file path during excuting the nbuCommand scripts. Its presence indicate the nbuCommand is still in execution.')
nbuTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nbuTimeout.setDescription('The timeout before waiting for result of the executed NBU command.')
nbuFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuFreq.setStatus('mandatory')
if mibBuilder.loadTexts: nbuFreq.setDescription('The result checking frequency during waiting of the executed NBU command.')
nbuResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuResult.setStatus('mandatory')
if mibBuilder.loadTexts: nbuResult.setDescription('The exit status of the executed NBU command.')
nbuOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuOutput.setStatus('mandatory')
if mibBuilder.loadTexts: nbuOutput.setDescription('The firstline output of the executed NBU command.')
nbuErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbuErrFix.setStatus('mandatory')
if mibBuilder.loadTexts: nbuErrFix.setDescription('Setting this error fix flag to 1 to kick off the nbuErrFixCmd.')
nbuErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 1, 100, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuErrFixCmd.setStatus('mandatory')
if mibBuilder.loadTexts: nbuErrFixCmd.setDescription('The NBU command that gets run when the nbuErrFix column is set to 1.')
vcsEventAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 7, 250))
vcsTag = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsTag.setStatus('mandatory')
if mibBuilder.loadTexts: vcsTag.setDescription('A Tag describe the severity of the event: TAG_A: VCS internal message. Contact Customer Support. TAG_B: Messages indicating errors and exceptions. TAG_C: Messages indicating warnings. TAG_D: Messages indicating normal operations. TAG_E: Messages from agents indicating status, etc. ')
vcsHost = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsHost.setStatus('mandatory')
if mibBuilder.loadTexts: vcsHost.setDescription('The host name where the event occured.')
vcsRes = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsRes.setStatus('mandatory')
if mibBuilder.loadTexts: vcsRes.setDescription('The event related resource name.')
vcsResStat = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsResStat.setStatus('mandatory')
if mibBuilder.loadTexts: vcsResStat.setDescription('The state of the resource: online or offline.')
vcsAgent = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsAgent.setStatus('mandatory')
if mibBuilder.loadTexts: vcsAgent.setDescription('The event related Agent name.')
vcsNode = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsNode.setStatus('mandatory')
if mibBuilder.loadTexts: vcsNode.setDescription('The event related node name.')
vcsDate = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsDate.setStatus('mandatory')
if mibBuilder.loadTexts: vcsDate.setDescription('The date when event occur.')
vcsTime = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsTime.setStatus('mandatory')
if mibBuilder.loadTexts: vcsTime.setDescription('The time when event occur.')
vcsErrExpl = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 98), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsErrExpl.setStatus('mandatory')
if mibBuilder.loadTexts: vcsErrExpl.setDescription('The error explanation.')
vcsErrReco = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 99), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsErrReco.setStatus('mandatory')
if mibBuilder.loadTexts: vcsErrReco.setDescription('The recommended action to correct VCS error.')
vcsErrCode = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: vcsErrCode.setDescription('The error code of the event.')
vcsErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 1035, 7, 250, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsErrMsg.setStatus('mandatory')
if mibBuilder.loadTexts: vcsErrMsg.setDescription('The detailed error message of the event.')
vrtsVcsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 7, 251))
errorVcsEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 7, 251) + (0,1)).setObjects(("VRTS-SNMP-MIBv1", "vcsTag"), ("VRTS-SNMP-MIBv1", "vcsDate"), ("VRTS-SNMP-MIBv1", "vcsTime"), ("VRTS-SNMP-MIBv1", "vcsErrMsg"), ("VRTS-SNMP-MIBv1", "vcsErrCode"), ("VRTS-SNMP-MIBv1", "vcsHost"), ("VRTS-SNMP-MIBv1", "vcsRes"), ("VRTS-SNMP-MIBv1", "vcsAgent"), ("VRTS-SNMP-MIBv1", "vcsNode"))
if mibBuilder.loadTexts: errorVcsEvent.setDescription('The VCS error event with TAG_A, TAG_B and TAG_C. Detailed error and corrective action information can be found from the objects associated with this event.')
normalVcsEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 7, 251) + (0,2)).setObjects(("VRTS-SNMP-MIBv1", "vcsTag"), ("VRTS-SNMP-MIBv1", "vcsDate"), ("VRTS-SNMP-MIBv1", "vcsTime"), ("VRTS-SNMP-MIBv1", "vcsErrMsg"), ("VRTS-SNMP-MIBv1", "vcsErrCode"), ("VRTS-SNMP-MIBv1", "vcsHost"), ("VRTS-SNMP-MIBv1", "vcsRes"), ("VRTS-SNMP-MIBv1", "vcsAgent"), ("VRTS-SNMP-MIBv1", "vcsNode"))
if mibBuilder.loadTexts: normalVcsEvent.setDescription('The normal VCS event with TAG_D, TAG_E. Detailed event information can be found from the objects associated with this event.')
vcsExtTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 7, 100), )
if mibBuilder.loadTexts: vcsExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: vcsExtTable.setDescription("A table of extensible commands to control VCS from SNMP framework via SNMP get and set protocol. The commands can start and stop VCS and its components, start and kill services, bring resource online and offline etc. These commands can be configured in ENE agent's snmpd.conf file.")
vcsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "vcsIndex"))
if mibBuilder.loadTexts: vcsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vcsEntry.setDescription('An VCS entry containing an extensible modules and the results.')
vcsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vcsIndex.setDescription('Reference Index for extensible VCS scripts. It is an integer row number.')
vcsNames = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsNames.setStatus('mandatory')
if mibBuilder.loadTexts: vcsNames.setDescription('A description of the extensible VCS command.')
vcsCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsCommand.setStatus('mandatory')
if mibBuilder.loadTexts: vcsCommand.setDescription('The VCS command or scripts to be executed.')
vcsCtlFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcsCtlFlag.setStatus('mandatory')
if mibBuilder.loadTexts: vcsCtlFlag.setDescription('When the flag is set to 1, the extensible VCS scripts in vcsCommand will be executed. Exit code will go to vcsResult, output go to vcsOutput.')
vcsResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsResult.setStatus('mandatory')
if mibBuilder.loadTexts: vcsResult.setDescription('The exit status of the executed VCS command.')
vcsOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsOutput.setStatus('mandatory')
if mibBuilder.loadTexts: vcsOutput.setDescription('The firstlinw output of the executed VCS command.')
vcsErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcsErrFix.setStatus('mandatory')
if mibBuilder.loadTexts: vcsErrFix.setDescription('Setting this error fix flag to 1 to kick off the vcsErrFixCmd.')
vcsErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 7, 100, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcsErrFixCmd.setStatus('mandatory')
if mibBuilder.loadTexts: vcsErrFixCmd.setDescription('The VCS command that gets run when the vcsErrFix column is set to 1.')
vrtsNbuJobEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 1, 251))
abnormalJobEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 1, 251) + (0,1)).setObjects(("VRTS-SNMP-MIBv1", "jobId"), ("VRTS-SNMP-MIBv1", "jobClass"), ("VRTS-SNMP-MIBv1", "jobClient"), ("VRTS-SNMP-MIBv1", "jobSched"), ("VRTS-SNMP-MIBv1", "jobSchedType"), ("VRTS-SNMP-MIBv1", "jobStu"), ("VRTS-SNMP-MIBv1", "jobVolpool"), ("VRTS-SNMP-MIBv1", "jobErrCode"), ("VRTS-SNMP-MIBv1", "jobErrMsg"), ("VRTS-SNMP-MIBv1", "jobMaster"), ("VRTS-SNMP-MIBv1", "jobErrExpl"), ("VRTS-SNMP-MIBv1", "jobErrReco"))
if mibBuilder.loadTexts: abnormalJobEvent.setDescription('The NetBackup job failed with error. Detailed job, error and corrective action information can be found from the objects associated with this event.')
normalJobEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 1, 251) + (0,2)).setObjects(("VRTS-SNMP-MIBv1", "jobId"), ("VRTS-SNMP-MIBv1", "jobClass"), ("VRTS-SNMP-MIBv1", "jobClient"), ("VRTS-SNMP-MIBv1", "jobSched"), ("VRTS-SNMP-MIBv1", "jobSchedType"), ("VRTS-SNMP-MIBv1", "jobStu"), ("VRTS-SNMP-MIBv1", "jobVolpool"), ("VRTS-SNMP-MIBv1", "jobErrCode"), ("VRTS-SNMP-MIBv1", "jobErrMsg"), ("VRTS-SNMP-MIBv1", "jobMaster"), ("VRTS-SNMP-MIBv1", "jobErrExpl"), ("VRTS-SNMP-MIBv1", "jobErrReco"))
if mibBuilder.loadTexts: normalJobEvent.setDescription('The NetBackup job finished successfully. Detailed job information can be found from the objects associated with this event.')
vrtsNbuExtEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 101))
nbuExtEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 101) + (0,1)).setObjects(("VRTS-SNMP-MIBv1", "nbuIndex"), ("VRTS-SNMP-MIBv1", "nbuNames"), ("VRTS-SNMP-MIBv1", "nbuCommand"), ("VRTS-SNMP-MIBv1", "nbuResult"), ("VRTS-SNMP-MIBv1", "nbuOutput"))
if mibBuilder.loadTexts: nbuExtEvent.setDescription('The NetBackup extensiable script execution result notificaiton with given exit status and output.')
vrtsNbuEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 251))
nbuTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 1, 250))
nbuHost = MibScalar((1, 3, 6, 1, 4, 1, 1035, 1, 250, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuHost.setStatus('mandatory')
if mibBuilder.loadTexts: nbuHost.setDescription('The hostname where NetBackup error event happened.')
nbuErrcode = MibScalar((1, 3, 6, 1, 4, 1, 1035, 1, 250, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuErrcode.setStatus('mandatory')
if mibBuilder.loadTexts: nbuErrcode.setDescription('The error code of NetBackup error. 0 means no error.')
nbuErrmsg = MibScalar((1, 3, 6, 1, 4, 1, 1035, 1, 250, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbuErrmsg.setStatus('mandatory')
if mibBuilder.loadTexts: nbuErrmsg.setDescription('The error message of NetBackup error.')
dbBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,300)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: dbBackupFailed.setDescription('Description: The backup of the NB database failed. Resolution: Investigate why the NB database backup failed. Usually the All Log Entries Report will give you some idea as to why this failed.')
dbBackupIsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,301)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: dbBackupIsDisabled.setDescription('Description: Backup of the NetBackup database is mandatoryly disabled. Resolution: No Immediate action is required. Periodically NetBackup will disable the ability to perform a NBU database backup while it is performing house-cleaning activities. Should the NB database backup be disabled for an extended period time, review the All Log Entries report to help determine why.')
freezingMedia = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,302)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: freezingMedia.setDescription("Description: NetBackup has issued a 'freezing media' message. Resolution: A piece of media (tape or optical) has been frozen either manually by an administrator or automatically by NetBackup. NetBackup will freeze media that has been previously written in another tape format (tar, ANSI,). NetBackup, by default will not overwrite these tapes unless a bp.conf entry to ALLOW_MEDIA_OVERWRITE is added, see the NetBackup Administrators Guide. Also investigate the All log Entries report and bptm logs for more information.")
suspendingMedia = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,303)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: suspendingMedia.setDescription("Description: NetBackup has issued a 'suspending media' message. Resolution: NetBackup tried to use the identified media but had problems reading or writing to the tape. Investigate the cause through the All Log Entries report and / or bptm log.")
mediaRequiredForRestore = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,304)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: mediaRequiredForRestore.setDescription('Description: Media is needed for an NBU restore operation. The event is sent via a user alarm in the action script. Resolution: The media identified is required for a restore that has been initiated. The media id is also identified in the Device Management Window. Locate the required tape, place it in the library or tape drive and satisfy the tape mount request through the Device Manager window. You may also deny the request through the Device Manager window.')
downedDrive = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,305)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: downedDrive.setDescription('Description: The operator or Media Manager has downed a drive. Resolution: A tape drive is suspected of having problems. Investigate the All Log Entries report, bptm log, Operating System messages log (/var/adm/messages) to determine the cause. NetBackup may down a drive when having trouble reading a tape, if the tape is used in another drive and also has problems then the tape is suspended and the original downed drive is automatically brough up.')
exceededCleaningFrequency = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,306)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: exceededCleaningFrequency.setDescription("Description: A drive has exceeded its cleaning frequency. Resolution: This should not normally occur with most TLD devices such as with STK Silo's and DLT tape drives, which automatically handle cleanings. This error message only occurs when NetBackup is handling tape cleanings manually.")
exceededMaxMounts = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,307)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: exceededMaxMounts.setDescription("Description: A media has exceeded its maximum number of mounts. Resolution: When the media was added to NetBackups' Media Manager, a maximum number of mounts was assigned. The media has reached this limit which normally signals that it should be retired and replaced with another piece of media. Data on the tape is still tracked on the tape and expires once the retention period of the image has passed.")
mountRequest = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,308)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: mountRequest.setDescription("Description: A mount request is posted to the system log for a non-robotic device. It may be either for the mount itself or because the media needs 'write enabled'. Resolution: This message will also be displayed in the Device Manager window. Place the tape in the required non-robotic drive and satisfy the request through the Device Manager window. Deny the request through the Device Manager window. Or remove the media from the tape drive, write enable it and return it to the tape drive. This message is normally issued for tape drives under Operator control rather than AVR or Robotic control.")
noCleaningTape = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,309)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: noCleaningTape.setDescription('Description: There is no cleaning tape or the cleaning tape is used up. Resolution: This message only occurs when NetBackup is handling tape drive cleanings and should not normally occur with most TLD devices.')
zeroCleaningsLeft = NotificationType((1, 3, 6, 1, 4, 1, 1035, 1, 251) + (0,310)).setObjects(("VRTS-SNMP-MIBv1", "nbuHost"), ("VRTS-SNMP-MIBv1", "nbuErrcode"), ("VRTS-SNMP-MIBv1", "nbuErrmsg"))
if mibBuilder.loadTexts: zeroCleaningsLeft.setDescription('Description: The cleaning tape has no cleanings left. Resolution: This message only occurs when NetBackup is handling tape drive cleanings and the cleaning tape(s) have been used to their capacity. This should not normally occur with most TLD devices.')
log = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301, 1))
logTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1), )
if mibBuilder.loadTexts: logTable.setStatus('mandatory')
if mibBuilder.loadTexts: logTable.setDescription('A table of error log and error message based event management information configured in the logfile.conf and messages.conf of the ENE SNMP agent. ')
logEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "logIndex"))
if mibBuilder.loadTexts: logEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logEntry.setDescription('An log entry containing a log monitoring related information.')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndex.setStatus('mandatory')
if mibBuilder.loadTexts: logIndex.setDescription('It is the unique index of error log and message to be monitored.')
logHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logHost.setStatus('mandatory')
if mibBuilder.loadTexts: logHost.setDescription('The hostname where log error event happened.')
logPrdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logPrdCode.setStatus('mandatory')
if mibBuilder.loadTexts: logPrdCode.setDescription('The VERITAS product code of which the error log event is associated, it can be 0: NetBackup, 1: VxVM, 2: VxFS, 7: VCS etc.')
logPrdName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logPrdName.setStatus('mandatory')
if mibBuilder.loadTexts: logPrdName.setDescription('The VERITAS product name of which the error log event is associated, it can be NetBackup, VxVM, VxFS, VCS etc.')
logObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logObjName.setStatus('mandatory')
if mibBuilder.loadTexts: logObjName.setDescription("The object name of which the error log event is associated. For example, it can be NetBackup job, tape drive, or VxVM's subdisk, or VCS's service etc.")
logAttrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAttrName.setStatus('mandatory')
if mibBuilder.loadTexts: logAttrName.setDescription("The attribute name of which the error log event is associated. For example, it can be NetBackup job's Kbytes attribute, tape drive's number of drives, or VxVM's subdisk's size, or VCS's service's status etc.")
logFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFile.setStatus('mandatory')
if mibBuilder.loadTexts: logFile.setDescription('The log file name where the error strings are detected.')
logErrStrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logErrStrs.setStatus('mandatory')
if mibBuilder.loadTexts: logErrStrs.setDescription('The error strings to monitor.')
logDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDesc.setStatus('mandatory')
if mibBuilder.loadTexts: logDesc.setDescription('The description of the error log event.')
logResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logResolution.setStatus('mandatory')
if mibBuilder.loadTexts: logResolution.setDescription('The resolution of the error log event.')
logErrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logErrFlag.setStatus('mandatory')
if mibBuilder.loadTexts: logErrFlag.setDescription(' Set the flag to 1 to indicate the error strings is found in the specified error log. 0 means no error.')
logErrcode = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logErrcode.setStatus('mandatory')
if mibBuilder.loadTexts: logErrcode.setDescription('The error code of log error.')
logErrmsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logErrmsg.setStatus('mandatory')
if mibBuilder.loadTexts: logErrmsg.setDescription('The error message of log error.')
logErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logErrFix.setStatus('mandatory')
if mibBuilder.loadTexts: logErrFix.setDescription('Setting this error fix flag to 1 to kick off the logErrFixCmd.')
logErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 1, 1, 1, 103), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logErrFixCmd.setStatus('mandatory')
if mibBuilder.loadTexts: logErrFixCmd.setDescription('The command that gets run when the logErrFix column is set to 1.')
vrtsLogMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301, 1, 251))
logEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 301, 1, 251) + (0,1)).setObjects(("VRTS-SNMP-MIBv1", "logHost"), ("VRTS-SNMP-MIBv1", "logObjName"), ("VRTS-SNMP-MIBv1", "logFile"), ("VRTS-SNMP-MIBv1", "logErrStrs"), ("VRTS-SNMP-MIBv1", "logDesc"), ("VRTS-SNMP-MIBv1", "logResolution"), ("VRTS-SNMP-MIBv1", "logErrcode"), ("VRTS-SNMP-MIBv1", "logErrmsg"))
if mibBuilder.loadTexts: logEvent.setDescription('The sequences of specific error strings are detected in given error log file on given host.')
process = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301, 2))
psTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1), )
if mibBuilder.loadTexts: psTable.setStatus('mandatory')
if mibBuilder.loadTexts: psTable.setDescription('A table containing information on running programs/daemons/service configured for monitoring in the process.conf file of the ENE SNMP agent. Processes violating the available number of running processes or CPU, IO threshold configured in process.conf, or services.conf on NT are flagged with numerical and textual errors.')
psEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "psIndex"))
if mibBuilder.loadTexts: psEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psEntry.setDescription('An entry containing a process and its statistics.')
psIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psIndex.setDescription('Reference Index for each observed process or service.')
psId = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psId.setStatus('mandatory')
if mibBuilder.loadTexts: psId.setDescription('Actual process id for each observed process.')
psName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psName.setStatus('mandatory')
if mibBuilder.loadTexts: psName.setDescription('The process or service name that agent is counting and checking.')
psAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAttr.setStatus('mandatory')
if mibBuilder.loadTexts: psAttr.setDescription('The process or service attribute name that agent is checking. It can be: existence, hanging or runaway.')
psMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMin.setStatus('mandatory')
if mibBuilder.loadTexts: psMin.setDescription('The min threshold number of instances of monitored process that should be running. An error is generated if threshold is violated.')
psMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMax.setStatus('mandatory')
if mibBuilder.loadTexts: psMax.setDescription('The max threshold number of instances of monitored process that should be running. An error is generated if threshold is violated.')
psCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCount.setStatus('mandatory')
if mibBuilder.loadTexts: psCount.setDescription('The current number of process instances with the specified name.')
psCpuPct = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCpuPct.setStatus('mandatory')
if mibBuilder.loadTexts: psCpuPct.setDescription('The Percentage CPU threshold of the monitored process.')
psBytesIO = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBytesIO.setStatus('mandatory')
if mibBuilder.loadTexts: psBytesIO.setDescription('The Bytes I/O threshold of the monitored process.')
psSlpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSlpMax.setStatus('mandatory')
if mibBuilder.loadTexts: psSlpMax.setDescription('The Maximum sleeping time threshold of the monitored process.')
psHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHost.setStatus('mandatory')
if mibBuilder.loadTexts: psHost.setDescription('The hostname of the monitored process.')
psErrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psErrFlag.setStatus('mandatory')
if mibBuilder.loadTexts: psErrFlag.setDescription('Set the flag to 1 to indicate the error with the process. 0 means no error.')
psErrcode = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psErrcode.setStatus('mandatory')
if mibBuilder.loadTexts: psErrcode.setDescription('The error code of process error.')
psErrmsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psErrmsg.setStatus('mandatory')
if mibBuilder.loadTexts: psErrmsg.setDescription('The error message of the process error.')
psErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psErrFix.setStatus('mandatory')
if mibBuilder.loadTexts: psErrFix.setDescription('Setting this error fix flag to 1 to kick off the psErrFixCmd.')
psErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 2, 1, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psErrFixCmd.setStatus('mandatory')
if mibBuilder.loadTexts: psErrFixCmd.setDescription('The command that will be executed when the psErrFix column is set to 1.')
vrtsProcessMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301, 2, 251))
processEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 301, 2, 251) + (0,1)).setObjects(("VRTS-SNMP-MIBv1", "psHost"), ("VRTS-SNMP-MIBv1", "psId"), ("VRTS-SNMP-MIBv1", "psName"), ("VRTS-SNMP-MIBv1", "psAttr"), ("VRTS-SNMP-MIBv1", "psErrcode"), ("VRTS-SNMP-MIBv1", "psErrmsg"))
if mibBuilder.loadTexts: processEvent.setDescription('The monitored process has violated threshold condition of specified monitored attribute(existence, hanging or runaway) on given host.')
collector = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301, 4))
clTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1), )
if mibBuilder.loadTexts: clTable.setStatus('mandatory')
if mibBuilder.loadTexts: clTable.setDescription('A table of collector based event management information configured in the collector.conf file of the ENE SNMP agent.')
clEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "clIndex"))
if mibBuilder.loadTexts: clEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clEntry.setDescription('An entry containing a collector information.')
clIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clIndex.setDescription('Reference Index for each the collector.')
clName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clName.setStatus('mandatory')
if mibBuilder.loadTexts: clName.setDescription('The collector name.')
clHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clHost.setStatus('mandatory')
if mibBuilder.loadTexts: clHost.setDescription('The hostname where collector is running.')
clScript = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clScript.setStatus('mandatory')
if mibBuilder.loadTexts: clScript.setDescription('The collector script file name, if will be prefixed with $ENEDir\\config\\Scripts directory')
clSampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clSampFreq.setStatus('mandatory')
if mibBuilder.loadTexts: clSampFreq.setDescription('The frequency in seconds that the collector script is executed.')
clFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clFreq.setStatus('mandatory')
if mibBuilder.loadTexts: clFreq.setDescription('The frequency in seconds which specifies how frequent should ENE agent check whether the collected data is ready. The optimal value can be obtained by finding out how long a collector session is usually taking.')
clTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: clTimeout.setDescription('If no data after clTimeout seconds, then the collecting session is aborted.')
clPrdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPrdCode.setStatus('mandatory')
if mibBuilder.loadTexts: clPrdCode.setDescription('The VERITAS product code of which the collector is associated, it can be 0: NetBackup, 1: VxVM, 2: VxFS, 7: VCS etc.')
clPrdName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPrdName.setStatus('mandatory')
if mibBuilder.loadTexts: clPrdName.setDescription('The VERITAS product name of which the collector is associated, it can be NetBackup, VxVM, VxFS, VCS etc.')
clObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clObjName.setStatus('mandatory')
if mibBuilder.loadTexts: clObjName.setDescription("The object name of the collection. For example, it can be NetBackup job, tape drive, or VxVM's subdisk, or VCS's service etc.")
clAttrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clAttrName.setStatus('mandatory')
if mibBuilder.loadTexts: clAttrName.setDescription("The attribute name of which the collection is associated. For example, it can be NetBackup job's Kbytes attribute, tape drive's number of drives, or VxVM's subdisk's size, or VCS's service's status etc.")
clLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clLow.setStatus('mandatory')
if mibBuilder.loadTexts: clLow.setDescription('Indicate low threshold for the collected attribute value. If violated, event will be sent.')
clHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clHigh.setStatus('mandatory')
if mibBuilder.loadTexts: clHigh.setDescription('Indicate high threshold for the collected attribute value. If violated, event will be sent.')
clCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clCount.setStatus('mandatory')
if mibBuilder.loadTexts: clCount.setDescription('The number of objects which we care about whether its attribute value is within low and high threshold. 0 means we are all object.')
clObjNames = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clObjNames.setStatus('mandatory')
if mibBuilder.loadTexts: clObjNames.setDescription("List of object names, seperated by ';', which we care when threshold is violated. Leave name empty make it a wild card, means we care all objects.")
clResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clResolution.setStatus('mandatory')
if mibBuilder.loadTexts: clResolution.setDescription('Text resulotion when threshold value is violated.')
clErrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clErrFlag.setStatus('mandatory')
if mibBuilder.loadTexts: clErrFlag.setDescription('Set the flag to 1 to indicate the threshold is violated. 0 means no error.')
clErrcode = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clErrcode.setStatus('mandatory')
if mibBuilder.loadTexts: clErrcode.setDescription('The error code of for errors from this collector.')
clErrmsg = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clErrmsg.setStatus('mandatory')
if mibBuilder.loadTexts: clErrmsg.setDescription('The error message of the threshold violation.')
clErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clErrFix.setStatus('mandatory')
if mibBuilder.loadTexts: clErrFix.setDescription('Setting this error fix flag to 1 to kick off the clErrFixCmd.')
clErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 301, 4, 1, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clErrFixCmd.setStatus('mandatory')
if mibBuilder.loadTexts: clErrFixCmd.setDescription('The command that will be executed when the clErrFix column is set to 1. ')
vrtsCollectorMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301, 4, 251))
collectorEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 301, 4, 251) + (0,1)).setObjects(("VRTS-SNMP-MIBv1", "clName"), ("VRTS-SNMP-MIBv1", "clHost"), ("VRTS-SNMP-MIBv1", "clPrdName"), ("VRTS-SNMP-MIBv1", "clObjName"), ("VRTS-SNMP-MIBv1", "clAttrName"), ("VRTS-SNMP-MIBv1", "clErrcode"), ("VRTS-SNMP-MIBv1", "clErrmsg"), ("VRTS-SNMP-MIBv1", "clResolution"))
if mibBuilder.loadTexts: collectorEvent.setDescription('The collection has detected a threshold violation condition of specified objects attribute on given host.')
frequency = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301, 8))
messagefreq = MibScalar((1, 3, 6, 1, 4, 1, 1035, 301, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: messagefreq.setStatus('mandatory')
if mibBuilder.loadTexts: messagefreq.setDescription('Number of seconds interval for message log checking, you can set it here based on your event notification requirements. The default value is 30 seconds.')
processfreq = MibScalar((1, 3, 6, 1, 4, 1, 1035, 301, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processfreq.setStatus('mandatory')
if mibBuilder.loadTexts: processfreq.setDescription('Number of seconds interval for process checking, you can set it here based on your event notification requirements. The default value is 300 seconds.')
vxvmSamplefreq = MibScalar((1, 3, 6, 1, 4, 1, 1035, 301, 8, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxvmSamplefreq.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmSamplefreq.setDescription('Set how frequent, in seconds, should a vxvm collector be executed.you can set it here based on your event notification requirements. The default value is 50 minutes or 3000 seconds.')
vxvmCheckfreq = MibScalar((1, 3, 6, 1, 4, 1, 1035, 301, 8, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxvmCheckfreq.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmCheckfreq.setDescription('Set how frequent, in seconds, should ENE agent check whether the vxvm collected data is ready. The optimal value can be obtained by finding out how long a collector session is usually taking. The default value is 100 seconds.')
vxvmTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1035, 301, 8, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxvmTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmTimeout.setDescription('If no vxvm collection data ready after vxvmTimeout seconds in the same collection session, then the collecting session is aborted. The default value is 350 seconds.')
vxfsSamplefreq = MibScalar((1, 3, 6, 1, 4, 1, 1035, 301, 8, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxfsSamplefreq.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsSamplefreq.setDescription('Set how frequent, in seconds, should a vxfs collector be executed.you can set it here based on your event notification requirements. The default value is 40 minutes or 2400 seconds.')
vxfsCheckfreq = MibScalar((1, 3, 6, 1, 4, 1, 1035, 301, 8, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxfsCheckfreq.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsCheckfreq.setDescription('Set how frequent, in seconds, should ENE agent check whether the vxfs collected data is ready. The optimal value can be obtained by finding out how long a collector session is usually taking. The default value is 100 seconds.')
vxfsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1035, 301, 8, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxfsTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsTimeout.setDescription('If no vxfs collection data ready after vxfsTimeout seconds in the same collection session, then the collecting session is aborted. The default value is 350 seconds.')
vrtsEneMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 301, 251))
coldStart = NotificationType((1, 3, 6, 1, 4, 1, 1035, 301, 251) + (0,1))
if mibBuilder.loadTexts: coldStart.setDescription('The SNMP ENE agent has started.')
heartBeat = NotificationType((1, 3, 6, 1, 4, 1, 1035, 301, 251) + (0,3))
if mibBuilder.loadTexts: heartBeat.setDescription('The SNMP ENE agent heart beat event to signal it is alive.')
shutDown = NotificationType((1, 3, 6, 1, 4, 1, 1035, 301, 251) + (0,5))
if mibBuilder.loadTexts: shutDown.setDescription('The SNMP ENE agent shut down.')
vmExtTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 2, 100), )
if mibBuilder.loadTexts: vmExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmExtTable.setDescription("A table of extensible commands to control VxVM from SNMP framework via SNMP get and set protocol. These commands can be configured in ENE agent's snmpd.conf file.")
vmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "vmIndex"))
if mibBuilder.loadTexts: vmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmEntry.setDescription('A VM entry containing an extensible modules and the results.')
vmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vmIndex.setDescription('Reference Index for extensible VM scripts. It is an integer row number. A predefined map is available in snmpd.conf to map the index to the command.')
vmNames = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmNames.setStatus('mandatory')
if mibBuilder.loadTexts: vmNames.setDescription('A description of the extensible VM command.')
vmCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmCommand.setStatus('mandatory')
if mibBuilder.loadTexts: vmCommand.setDescription('A valid VM script path to be executed when vmCtlFlag is set to 1.')
vmCtlFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmCtlFlag.setStatus('mandatory')
if mibBuilder.loadTexts: vmCtlFlag.setDescription('When the flag is set to 1, the extensible VM scripts in vmCommand will be executed. Exit code will go to vmResult, output go to vmOutput.')
vmResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmResult.setStatus('mandatory')
if mibBuilder.loadTexts: vmResult.setDescription('The exit status of the executed VM command.')
vmOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmOutput.setStatus('mandatory')
if mibBuilder.loadTexts: vmOutput.setDescription('The firstline output of the executed VM command.')
vmErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmErrFix.setStatus('mandatory')
if mibBuilder.loadTexts: vmErrFix.setDescription('Setting this error fix flag to 1 to kick off the vmErrFixCmd.')
vmErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 2, 100, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmErrFixCmd.setStatus('mandatory')
if mibBuilder.loadTexts: vmErrFixCmd.setDescription('The VM command that gets run when the vmErrFix column is set to 1.')
fsExtTable = MibTable((1, 3, 6, 1, 4, 1, 1035, 3, 100), )
if mibBuilder.loadTexts: fsExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: fsExtTable.setDescription("A table of extensible commands to control VxFS from SNMP framework via SNMP get and set protocol. These commands can be configured in ENE agent's snmpd.conf file.")
fsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1), ).setIndexNames((0, "VRTS-SNMP-MIBv1", "fsIndex"))
if mibBuilder.loadTexts: fsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fsEntry.setDescription('A FS entry containing an extensible modules and the results.')
fsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fsIndex.setDescription('Reference Index for extensible FS scripts. It is an integer row number. A predefined map is available in snmpd.conf to map the index to the command.')
fsNames = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsNames.setStatus('mandatory')
if mibBuilder.loadTexts: fsNames.setDescription('A description of the extensible FS command.')
fsCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsCommand.setStatus('mandatory')
if mibBuilder.loadTexts: fsCommand.setDescription('A valid FS script path to be executed when fsCtlFlag is set to 1.')
fsCtlFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsCtlFlag.setStatus('mandatory')
if mibBuilder.loadTexts: fsCtlFlag.setDescription('When the flag is set to 1, the extensible FS scripts in fsCommand will be executed. Exit code will go to fsResult, output go to fsOutput.')
fsResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsResult.setStatus('mandatory')
if mibBuilder.loadTexts: fsResult.setDescription('The exit status of the executed FS command.')
fsOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsOutput.setStatus('mandatory')
if mibBuilder.loadTexts: fsOutput.setDescription('The firstline output of the executed FS command.')
fsErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsErrFix.setStatus('mandatory')
if mibBuilder.loadTexts: fsErrFix.setDescription('Setting this error fix flag to 1 to kick off the fsErrFixCmd.')
fsErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1035, 3, 100, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsErrFixCmd.setStatus('mandatory')
if mibBuilder.loadTexts: fsErrFixCmd.setDescription('The FS command that gets run when the fsErrFix column is set to 1.')
vxvmEventAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 2, 250))
vxvmHost = MibScalar((1, 3, 6, 1, 4, 1, 1035, 2, 250, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxvmHost.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmHost.setDescription('The host name where the event occured.')
vxvmType = MibScalar((1, 3, 6, 1, 4, 1, 1035, 2, 250, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxvmType.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmType.setDescription('The event category: vxio, vxconfigd, vxdmp, vxdmpadm etc.')
vxvmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 1035, 2, 250, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxvmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmSeverity.setDescription('The severity of the event occured. Possible values are Critical, Major, Minor, Warning and Normal.')
vxvmErrExpl = MibScalar((1, 3, 6, 1, 4, 1, 1035, 2, 250, 98), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxvmErrExpl.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmErrExpl.setDescription('The error explanation.')
vxvmErrReco = MibScalar((1, 3, 6, 1, 4, 1, 1035, 2, 250, 99), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxvmErrReco.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmErrReco.setDescription('The recommended action to correct VXVM error.')
vxvmErrCode = MibScalar((1, 3, 6, 1, 4, 1, 1035, 2, 250, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxvmErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmErrCode.setDescription('The error code of the event.')
vxvmErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 1035, 2, 250, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxvmErrMsg.setStatus('mandatory')
if mibBuilder.loadTexts: vxvmErrMsg.setDescription('The detailed error message of the event.')
vrtsVxvmEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 2, 251))
errorVxvmEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 2, 251) + (0,1)).setObjects(("VRTS-SNMP-MIBv1", "vxvmHost"), ("VRTS-SNMP-MIBv1", "vxvmType"), ("VRTS-SNMP-MIBv1", "vxvmSeverity"), ("VRTS-SNMP-MIBv1", "vxvmErrMsg"))
if mibBuilder.loadTexts: errorVxvmEvent.setDescription('The VXVM error event. Detailed error and corrective action information can be found from the objects associated with this event.')
normalVxvmEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 2, 251) + (0,2)).setObjects(("VRTS-SNMP-MIBv1", "vxvmHost"), ("VRTS-SNMP-MIBv1", "vxvmType"), ("VRTS-SNMP-MIBv1", "vxvmSeverity"), ("VRTS-SNMP-MIBv1", "vxvmErrMsg"))
if mibBuilder.loadTexts: normalVxvmEvent.setDescription('The normal VXVM event. Detailed event information can be found from the objects associated with this event.')
vxfsEventAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 3, 250))
vxfsHost = MibScalar((1, 3, 6, 1, 4, 1, 1035, 3, 250, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxfsHost.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsHost.setDescription('The host name where the event occured.')
vxfsMsgcnt = MibScalar((1, 3, 6, 1, 4, 1, 1035, 3, 250, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxfsMsgcnt.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsMsgcnt.setDescription('The event count for sequence purpose.')
vxfsSeverity = MibScalar((1, 3, 6, 1, 4, 1, 1035, 3, 250, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxfsSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsSeverity.setDescription('The severity of the event occured. Possible values are Critical, Major, Minor, Warning and Normal.')
vxfsErrExpl = MibScalar((1, 3, 6, 1, 4, 1, 1035, 3, 250, 98), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxfsErrExpl.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsErrExpl.setDescription('The error explanation.')
vxfsErrReco = MibScalar((1, 3, 6, 1, 4, 1, 1035, 3, 250, 99), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxfsErrReco.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsErrReco.setDescription('The recommended action to correct VXFS error.')
vxfsErrCode = MibScalar((1, 3, 6, 1, 4, 1, 1035, 3, 250, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxfsErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsErrCode.setDescription('The error code of the event.')
vxfsErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 1035, 3, 250, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vxfsErrMsg.setStatus('mandatory')
if mibBuilder.loadTexts: vxfsErrMsg.setDescription('The detailed error message of the event.')
vrtsVxfsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1035, 3, 251))
errorVxfsEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 3, 251) + (0,1)).setObjects(("VRTS-SNMP-MIBv1", "vxfsHost"), ("VRTS-SNMP-MIBv1", "vxfsMsgcnt"), ("VRTS-SNMP-MIBv1", "vxfsSeverity"), ("VRTS-SNMP-MIBv1", "vxfsErrCode"), ("VRTS-SNMP-MIBv1", "vxfsErrMsg"))
if mibBuilder.loadTexts: errorVxfsEvent.setDescription('The VXFS error event. Detailed error and corrective action information can be found from the objects associated with this event.')
normalVxfsEvent = NotificationType((1, 3, 6, 1, 4, 1, 1035, 3, 251) + (0,2)).setObjects(("VRTS-SNMP-MIBv1", "vxfsHost"), ("VRTS-SNMP-MIBv1", "vxfsMsgcnt"), ("VRTS-SNMP-MIBv1", "vxfsSeverity"), ("VRTS-SNMP-MIBv1", "vxfsErrCode"), ("VRTS-SNMP-MIBv1", "vxfsErrMsg"))
if mibBuilder.loadTexts: normalVxfsEvent.setDescription('The normal VXFS event. Detailed event information can be found from the objects associated with this event.')
mibBuilder.exportSymbols("VRTS-SNMP-MIBv1", tapeName=tapeName, job=job, mediaRequiredForRestore=mediaRequiredForRestore, classEntry=classEntry, vcs=vcs, mediaRobotType=mediaRobotType, vcsRes=vcsRes, vmCommand=vmCommand, psIndex=psIndex, vxfsHost=vxfsHost, className=className, pysmi_class=pysmi_class, jobErrExpl=jobErrExpl, vmNames=vmNames, jobSched=jobSched, schedIndex=schedIndex, vcsResStat=vcsResStat, logAttrName=logAttrName, vmCtlFlag=vmCtlFlag, tapeTable=tapeTable, logTable=logTable, netbackup=netbackup, psSlpMax=psSlpMax, media=media, clErrmsg=clErrmsg, zeroCleaningsLeft=zeroCleaningsLeft, logErrmsg=logErrmsg, coldStart=coldStart, vmExtTable=vmExtTable, psTable=psTable, logFile=logFile, schedName=schedName, vmIndex=vmIndex, exceededCleaningFrequency=exceededCleaningFrequency, vmErrFixCmd=vmErrFixCmd, fsIndex=fsIndex, mediaRobotSlot=mediaRobotSlot, mountRequest=mountRequest, clTable=clTable, fsResult=fsResult, vcsErrMsg=vcsErrMsg, errorVxvmEvent=errorVxvmEvent, messagefreq=messagefreq, sched=sched, stuTable=stuTable, fsCommand=fsCommand, jobVolpool=jobVolpool, vcsErrFixCmd=vcsErrFixCmd, vcsExtTable=vcsExtTable, vxfsErrCode=vxfsErrCode, vcsTime=vcsTime, clErrcode=clErrcode, frequency=frequency, volpoolTable=volpoolTable, robotTable=robotTable, vrtsLogMonitor=vrtsLogMonitor, jobMaster=jobMaster, vcsOutput=vcsOutput, vxfsErrReco=vxfsErrReco, vxfs=vxfs, schedTable=schedTable, fsExtTable=fsExtTable, psId=psId, logPrdName=logPrdName, freezingMedia=freezingMedia, volpoolIndex=volpoolIndex, vcsIndex=vcsIndex, fsEntry=fsEntry, psBytesIO=psBytesIO, mediaSize=mediaSize, vmOutput=vmOutput, vxvmEventAttrs=vxvmEventAttrs, jobIndex=jobIndex, vaultIndex=vaultIndex, logEvent=logEvent, errorVxfsEvent=errorVxfsEvent, mediaEntry=mediaEntry, clientTable=clientTable, jobStu=jobStu, vxfsCheckfreq=vxfsCheckfreq, vxvmCheckfreq=vxvmCheckfreq, robotName=robotName, clPrdCode=clPrdCode, robotEntry=robotEntry, stuEntry=stuEntry, jobSchedType=jobSchedType, nbuTrapVars=nbuTrapVars, heartBeat=heartBeat, vcsHost=vcsHost, vcsResult=vcsResult, drive=drive, jobKbytes=jobKbytes, vrtsNbuEvents=vrtsNbuEvents, vcsCtlFlag=vcsCtlFlag, clObjName=clObjName, logObjName=logObjName, jobClient=jobClient, vrtsVcsEvent=vrtsVcsEvent, vxvmSamplefreq=vxvmSamplefreq, nbuErrcode=nbuErrcode, jobId=jobId, tapeEntry=tapeEntry, normalVcsEvent=normalVcsEvent, clScript=clScript, clSampFreq=clSampFreq, robotIndex=robotIndex, jobEntry=jobEntry, clPrdName=clPrdName, processfreq=processfreq, nbuHost=nbuHost, vcsCommand=vcsCommand, vrtsNbuExtEvent=vrtsNbuExtEvent, vxvmErrExpl=vxvmErrExpl, classTable=classTable, nbuIndex=nbuIndex, logErrcode=logErrcode, normalVxfsEvent=normalVxfsEvent, mediaSideFace=mediaSideFace, vxvmErrReco=vxvmErrReco, nbuErrFix=nbuErrFix, downedDrive=downedDrive, log=log, vxfsSeverity=vxfsSeverity, robot=robot, nbuLockFile=nbuLockFile, vcsEntry=vcsEntry, clHigh=clHigh, jobErrReco=jobErrReco, nbuTimeout=nbuTimeout, jobType=jobType, logErrStrs=logErrStrs, clIndex=clIndex, jobErrCode=jobErrCode, vcsTag=vcsTag, vmErrFix=vmErrFix, jobErrMsg=jobErrMsg, suspendingMedia=suspendingMedia, nbuResFile=nbuResFile, nbuEntry=nbuEntry, shutDown=shutDown, jobTable=jobTable, volpoolEntry=volpoolEntry, volpoolName=volpoolName, vcsErrFix=vcsErrFix, nbuExtEvent=nbuExtEvent, processEvent=processEvent, logHost=logHost, logEntry=logEntry, mediaRetLevel=mediaRetLevel, clErrFixCmd=clErrFixCmd, clHost=clHost, logResolution=logResolution, noCleaningTape=noCleaningTape, tape=tape, vcsAgent=vcsAgent, clientEntry=clientEntry, fsOutput=fsOutput, vxvmHost=vxvmHost, nbuCommand=nbuCommand, jobErrFix=jobErrFix, vxfsTimeout=vxfsTimeout, fsErrFixCmd=fsErrFixCmd, vxvmSeverity=vxvmSeverity, normalVxvmEvent=normalVxvmEvent, client=client, logIndex=logIndex, fsCtlFlag=fsCtlFlag, psCpuPct=psCpuPct, logErrFlag=logErrFlag, vcsEventAttrs=vcsEventAttrs, vrtsCollectorMonitor=vrtsCollectorMonitor, vaultTable=vaultTable, nbuFreq=nbuFreq, vcsErrCode=vcsErrCode, psEntry=psEntry, psAttr=psAttr, vxvmType=vxvmType, clName=clName, vrtsVxfsEvent=vrtsVxfsEvent, mediaPool=mediaPool, tapeIndex=tapeIndex, vxfsErrMsg=vxfsErrMsg, mediaTable=mediaTable, vcsNames=vcsNames, dbBackupIsDisabled=dbBackupIsDisabled, psErrmsg=psErrmsg, psName=psName, clAttrName=clAttrName, normalJobEvent=normalJobEvent, abnormalJobEvent=abnormalJobEvent, driveTable=driveTable, collector=collector, clObjNames=clObjNames, fsErrFix=fsErrFix, vmEntry=vmEntry, psErrFix=psErrFix, commonObjects=commonObjects, nbuResult=nbuResult, jobClass=jobClass, vaultEntry=vaultEntry, vaultName=vaultName, psCount=psCount, classIndex=classIndex, vcsErrReco=vcsErrReco, stuName=stuName, stuIndex=stuIndex, clCount=clCount, mediaRobotNum=mediaRobotNum, mediaType=mediaType, clErrFix=clErrFix, schedEntry=schedEntry, vxvmErrCode=vxvmErrCode, psMin=psMin, nbuErrFixCmd=nbuErrFixCmd, mediaIndex=mediaIndex, vxfsSamplefreq=vxfsSamplefreq, jobErrFixCmd=jobErrFixCmd, dr=dr, stu=stu, vxfsEventAttrs=vxfsEventAttrs, OpEnum=OpEnum, psMax=psMax, vrtsEneMonitor=vrtsEneMonitor, vmResult=vmResult, clResolution=clResolution, clientIndex=clientIndex, config=config, driveEntry=driveEntry, driveIndex=driveIndex, dbBackupFailed=dbBackupFailed, vcsErrExpl=vcsErrExpl, clFreq=clFreq, logErrFix=logErrFix, vcsDate=vcsDate, nbuCtlFlag=nbuCtlFlag, mediaStatus=mediaStatus, nbuErrmsg=nbuErrmsg, exceededMaxMounts=exceededMaxMounts, collectorEvent=collectorEvent, clErrFlag=clErrFlag, volpool=volpool, driveName=driveName, clientName=clientName, vrtsProcessMonitor=vrtsProcessMonitor, clTimeout=clTimeout, veritas=veritas, nbuExtTable=nbuExtTable, fsNames=fsNames, vrtsVxvmEvent=vrtsVxvmEvent, logErrFixCmd=logErrFixCmd, psErrcode=psErrcode, process=process, vcsNode=vcsNode, clLow=clLow)
mibBuilder.exportSymbols("VRTS-SNMP-MIBv1", logDesc=logDesc, clEntry=clEntry, mediaId=mediaId, vxvmTimeout=vxvmTimeout, nbuOutput=nbuOutput, vxfsMsgcnt=vxfsMsgcnt, psErrFixCmd=psErrFixCmd, vxvmErrMsg=vxvmErrMsg, psHost=psHost, nbuNames=nbuNames, vxfsErrExpl=vxfsErrExpl, psErrFlag=psErrFlag, vxvm=vxvm, vault=vault, vrtsNbuJobEvent=vrtsNbuJobEvent, jobState=jobState, logPrdCode=logPrdCode, errorVcsEvent=errorVcsEvent)
