#
# PySNMP MIB module Wellfleet-SR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-SR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, IpAddress, iso, ModuleIdentity, MibIdentifier, Bits, NotificationType, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "IpAddress", "iso", "ModuleIdentity", "MibIdentifier", "Bits", "NotificationType", "TimeTicks", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfBridgeGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfBridgeGroup")
wfBrSourceRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2))
wfBrSr = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1))
wfBrSrBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the bridge.')
wfBrSrBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable the bridge.')
wfBrSrBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseState.setDescription('The current state of the SR bridge.')
wfBrSrBaseInternalLanId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseInternalLanId.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseInternalLanId.setDescription('The SR bridge internal LAN ID')
wfBrSrBaseBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseBridgeId.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseBridgeId.setDescription('The SR bridge Id')
wfBrSrBaseGroupLanId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 6), Integer32().clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseGroupLanId.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseGroupLanId.setDescription('The SR bridge Group LAN ID')
wfBrSrBaseIpEncapsDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseIpEncapsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseIpEncapsDisable.setDescription('IP Encapsulation Enable/Disable')
wfBrSrBaseIpNetworkRingId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseIpNetworkRingId.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseIpNetworkRingId.setDescription('The ring number of a connected IP network')
wfBrSrBaseIpInReceives = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseIpInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseIpInReceives.setDescription('The number IP frames received by the network')
wfBrSrBaseIpSeqErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseIpSeqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseIpSeqErrors.setDescription('The number IP frames received by the network')
wfBrSrBaseIpMtuSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 11), Integer32().clone(4562)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseIpMtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseIpMtuSize.setDescription('The mtu size in bytes to be negotiated for the IP network. This size will be converted to the LF code in the Route Control field')
wfBrSrBaseNbServerRifCacheDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbServerRifCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbServerRifCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Server rif cache')
wfBrSrBaseNbClientRifCacheDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbClientRifCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbClientRifCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Client rif cache')
wfBrSrBaseNbDatagramRifCacheDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbDatagramRifCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbDatagramRifCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Datagram rif cache')
wfBrSrBaseNb15CharacterDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNb15CharacterDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNb15CharacterDisable.setDescription('Enable/Disable parameter for 15-character NetBIOS name caching')
wfBrSrBaseNbRifMibDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbRifMibDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbRifMibDisable.setDescription('Enable/Disable creation of MIB instances for each cached name')
wfBrSrBaseNbMaximumRifEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 17), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbMaximumRifEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbMaximumRifEntries.setDescription('The maximum number of entries allowed in the NetBIOS server/client rif cache')
wfBrSrBaseNbCurrentRifEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseNbCurrentRifEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbCurrentRifEntries.setDescription('The number of entries currently in the NetBIOS server/client cache')
wfBrSrBaseNbRifAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 19), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbRifAgeTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbRifAgeTime.setDescription('The age in seconds when inactive NetBIOS names will be aged out of the rif cache')
wfBrSrBaseNbRifHashEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(253, 2147483647)).clone(253)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbRifHashEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbRifHashEntries.setDescription('The number of entries in the RIF hash table')
wfBrSrBaseNbRifCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseNbRifCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbRifCacheHits.setDescription('The number of times the NetBIOS rif cache has been used')
wfBrSrBaseNbRifCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseNbRifCacheMisses.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbRifCacheMisses.setDescription('The number of failed lookups on the NetBIOS rif cache')
wfBrSrBaseNbRifDroppedFrames = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseNbRifDroppedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbRifDroppedFrames.setDescription('The number of NB frames dropped because the rif stored in the rif cache indicated that this frame traveled a sub-optimal route')
wfBrSrBaseNbQueryCacheDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbQueryCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbQueryCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Query cache')
wfBrSrBaseNbQueryMibDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbQueryMibDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbQueryMibDisable.setDescription('Enable/Disable creation of MIB instances for each cached query')
wfBrSrBaseNbMaximumQueryEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 26), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbMaximumQueryEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbMaximumQueryEntries.setDescription('The maximum number of entries allowed in the NetBIOS query cache')
wfBrSrBaseNbCurrentQueryEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseNbCurrentQueryEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbCurrentQueryEntries.setDescription('The number of entries currently in the NetBIOS query cache')
wfBrSrBaseNbQueryAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 28), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbQueryAgeTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbQueryAgeTime.setDescription('The age in seconds when NetBIOS queries will be aged out of the query cache')
wfBrSrBaseNbQueryFilteredFrames = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseNbQueryFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbQueryFilteredFrames.setDescription('The number of duplicate NetBIOS queries filtered')
wfBrSrBaseStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseStpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpEnable.setDescription('Spanning Tree Enable/Disable')
wfBrSrBaseStpState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpState.setDescription('Spanning Tree State')
wfBrSrBaseStpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("declb100", 2), ("ieee8021d", 3))).clone('ieee8021d')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseStpProtocolSpecification.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpProtocolSpecification.setDescription('The version of the Spanning Tree protocol being run')
wfBrSrBaseStpBridgeID = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseStpBridgeID.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpBridgeID.setDescription('The Spanning Tree Bridge ID assigned to this bridge. It is a 8-octet string. The first two octets make up the bridge priority, and the last six are the MAC address of this bridge, which is commonly the MAC address of the first port on the bridge.')
wfBrSrBaseStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpTimeSinceTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last topology change was detected by the bridge.')
wfBrSrBaseStpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpTopChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpTopChanges.setDescription('The total number of topology changes detected by this bridge since it was last reset or initialized')
wfBrSrBaseStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpDesignatedRoot.setDescription('The bridge ID of the root of the Spanning Tree as determined by the Spanning Tree Protocol as executed by the bridge. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node. It is a 8-octet string. The first two octets make up the priority, and the last six are the MAC address of the designated root bridge.')
wfBrSrBaseStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
wfBrSrBaseStpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpRootPort.setDescription('The port identifier of the port which offers the lowest cost path from this bridge to the root bridge.')
wfBrSrBaseStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpMaxAge.setDescription('The maximum age of the Spanning Tree Protocol information learned from the network on any port before it is discarded, in hundredths of a second. This represents the value actually in use by the bridge.')
wfBrSrBaseStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpHelloTime.setDescription('The amount of time between transmission of configuration BPDUs by this bridge on any port, when it is the root of the Spanning Tree or trying to become so, in hundreths of a second. This represents the value actually in use by the bridge.')
wfBrSrBaseStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("time", 100))).clone('time')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpHoldTime.setDescription('The value that determines the interval length during which no more than two configuration BPDUs shall be transmitted by this bridge, in hundredths of a second.')
wfBrSrBaseStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBaseStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpForwardDelay.setDescription('The time, in hundredths of a second, that a port on this bridge will stay in a transitional state (e.g. LISTENING) before moving to the next state (e.g. LEARNING). This value is also used to age all dynamic entries in the Forwarding Database when a topology changed has been detected and is underway. This represents the value actually in use by the bridge.')
wfBrSrBaseStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge acting as the root.')
wfBrSrBaseStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpBridgeHelloTime.setDescription('The value that all bridges use for HelloTime when this bridge acting as the root.')
wfBrSrBaseStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseStpBridgeForwardDelay.setDescription('The value that all bridges use for Forward Delay when this bridge acting as the root.')
wfBrSrBaseNbNameQueryCacheDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseNbNameQueryCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseNbNameQueryCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Name Query cache')
wfBrSrBaseAreHopCntLimit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("areonly", 1), ("areste", 2))).clone('areonly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBaseAreHopCntLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBaseAreHopCntLimit.setDescription('Based on hop count limit restrict AREs only(STEs still travel 7 hops) or restrict both AREs and STEs.')
wfBrSrInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wfBrSrInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceTable.setDescription('A table that contains information about every interface that is associated with this source routing bridge. inst_id[1] = wfBrSrInterfaceCircuit')
wfBrSrInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrInterfaceCircuit"))
if mibBuilder.loadTexts: wfBrSrInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceEntry.setDescription('An entry in wfBrSrInterface.')
wfBrSrInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an interface.')
wfBrSrInterfaceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an interface.')
wfBrSrInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceState.setDescription('The current state of the interface.')
wfBrSrInterfaceCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceCircuit.setDescription('The circuit that this interface runs over.')
wfBrSrInterfaceMaxRds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceMaxRds.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceMaxRds.setDescription('The maximum number of RDs permitted in incoming explorer frames')
wfBrSrInterfaceRing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceRing.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceRing.setDescription('The ring number of the source routing circuit. Even non-ring circuit need a ring number if it is to do source routing')
wfBrSrInterfaceBlockOutSte = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceBlockOutSte.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceBlockOutSte.setDescription('Enables blocking of outbound STEs')
wfBrSrInterfaceBlockInSte = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceBlockInSte.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceBlockInSte.setDescription('Enables blocking of inbound STEs')
wfBrSrInterfaceBlockIp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceBlockIp.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceBlockIp.setDescription('Enables blocking of inbound explorers that have have already been through the IP network')
wfBrSrInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceIpAddress.setDescription('Ip address for this ring. This should match the the IP address in the IP MIB')
wfBrSrInterfaceInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceInFrames.setDescription('The number of frames that have been received by this interface from its circuit.')
wfBrSrInterfaceOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceOutFrames.setDescription('The number of frames that have been transmitted by this interface')
wfBrSrInterfaceOutIpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceOutIpFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceOutIpFrames.setDescription('The number of frames that have been transmitted by this interface to the IP network')
wfBrSrInterfaceDropInvalidRcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceDropInvalidRcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceDropInvalidRcs.setDescription('Count of frames received which were discarded because of a bad Route Control field')
wfBrSrInterfaceDropInvalidRings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceDropInvalidRings.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceDropInvalidRings.setDescription('Count of frames received which were discarded because of a invalid incoming ring')
wfBrSrInterfaceDropSrfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceDropSrfs.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceDropSrfs.setDescription('Count of specifically routed frames received which were discarded due to filtering or no next circuit')
wfBrSrInterfaceNbServerRifCacheDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceNbServerRifCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceNbServerRifCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Server cache')
wfBrSrInterfaceNbClientRifCacheDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceNbClientRifCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceNbClientRifCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Client cache')
wfBrSrInterfaceNbDatagramRifCacheDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceNbDatagramRifCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceNbDatagramRifCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Datagram cache')
wfBrSrInterfaceNbQueryCacheDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceNbQueryCacheDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceNbQueryCacheDisable.setDescription('Enable/Disable parameter for the NetBIOS Query cache')
wfBrSrInterfaceXbInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceXbInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceXbInFrames.setDescription('The number of frames that have been received by this interface')
wfBrSrInterfaceXbDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceXbDropFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceXbDropFrames.setDescription('The number of frames that were dropped because they were too large')
wfBrSrInterfaceFrBcastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 23), Integer32().clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceFrBcastDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceFrBcastDlci.setDescription('The Frame Relay broadcast dlci')
wfBrSrInterfaceEncapsFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proprietary", 1), ("standard", 2))).clone('proprietary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceEncapsFormat.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceEncapsFormat.setDescription('Non-Token Ring encapsulation format')
wfBrSrInterfaceStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceStpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an interface for the Spanning Tree.')
wfBrSrInterfaceStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpState.setDescription('The current state of the port as defined by the application of the Spanning Tree Protocol.')
wfBrSrInterfaceStpMultiCastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpMultiCastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpMultiCastAddr.setDescription('The MAC address used as the destination for all BPDU packets generated out this port.')
wfBrSrInterfaceStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceStpPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpPathCost.setDescription('The contribution of this port the root path cost of paths toward the Spanning Tree root which include this port.')
wfBrSrInterfaceStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which this port is attached. Bridge IDs are made up of a 2-byte priority field, and a 6-byte MAC address.')
wfBrSrInterfaceStpDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
wfBrSrInterfaceStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
wfBrSrInterfaceStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
wfBrSrInterfaceStpForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpForwardTransitions.setDescription('The number of times this port has transitioned from the Learning State to the Forwarding state.')
wfBrSrInterfaceStpPktsXmitd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpPktsXmitd.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpPktsXmitd.setDescription('The number of BPDU packets transmitted out this port')
wfBrSrInterfaceStpPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrInterfaceStpPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpPktsRcvd.setDescription('The number of BPDU packets transmitted out this port')
wfBrSrInterfaceStpTranslationDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceStpTranslationDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceStpTranslationDisable.setDescription('Enable/Disable translation bridging parameter. Default is disabled.')
wfBrSrInterfaceMaxLfField = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sr1500", 1), ("sr2052", 2), ("sr4472", 3))).clone('sr4472')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceMaxLfField.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceMaxLfField.setDescription('The maximum size of the Lf Field. This was added to restrict the packet size when using FDDI. Note: The BR_SR_INTERFACE_SR4472 setting is for IBM use only. This packet size is not normally supported on the FDDI. The default setting is for IBM. This will need to be set to 1 or 2 for all other vendors.')
wfBrSrInterfaceFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("groupaddress", 1), ("destinationaddress", 2))).clone('groupaddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrInterfaceFilterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrInterfaceFilterAddress.setDescription("Selection of Filter Address type when filtering SRF's. Filtering can be performed on the Wellfleet Group Address or on the Destination Address in the frame.")
wfBrSrBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 3), )
if mibBuilder.loadTexts: wfBrSrBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBridgeTable.setDescription('A table that contains the bridge numbers used by Wellfleet bridges in a source routing network inst_id[2] = wfBrSrBridgeId')
wfBrSrBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 3, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrBridgeId"))
if mibBuilder.loadTexts: wfBrSrBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBridgeEntry.setDescription('An entry in wfBrSrBridge.')
wfBrSrBridgeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrBridgeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBridgeDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an IP encapsulation peer record.')
wfBrSrBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrBridgeId.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrBridgeId.setDescription('The Bridge Id reserved for Wellfleet bridges')
wfBrSrIpExplorerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 4), )
if mibBuilder.loadTexts: wfBrSrIpExplorerTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpExplorerTable.setDescription('A table that contains the table of IP addresses to which source routing explorers should be sent inst_id[2] = wfBrSrIpExplorerAddress')
wfBrSrIpExplorerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 4, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrIpExplorerAddr"))
if mibBuilder.loadTexts: wfBrSrIpExplorerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpExplorerEntry.setDescription('An entry in wfBrSrIpExplorer.')
wfBrSrIpExplorerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrIpExplorerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpExplorerDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an IP encapsulation peer record.')
wfBrSrIpExplorerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrIpExplorerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpExplorerAddr.setDescription('The IP address of this encapsulation peer.')
wfBrSrIpExplorerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrIpExplorerProtocol.setStatus('obsolete')
if mibBuilder.loadTexts: wfBrSrIpExplorerProtocol.setDescription('Which IP Encaps protocols to use, 0 = old, 1 = new. The value 1 = new is no longer valid.')
wfBrSrIpEncapsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 5), )
if mibBuilder.loadTexts: wfBrSrIpEncapsTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfBrSrIpEncapsTable.setDescription("A table that contains information about IP Encapsulation ring-to-IP Address mappings. This information is used to make the 'next ring' IP Address decision. inst = wfBrSrIpEncapsRing")
wfBrSrIpEncapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 5, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrIpEncapsRing"))
if mibBuilder.loadTexts: wfBrSrIpEncapsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wfBrSrIpEncapsEntry.setDescription('An entry in the wfBrSrIpEncapsTable.')
wfBrSrIpEncapsRing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrIpEncapsRing.setStatus('obsolete')
if mibBuilder.loadTexts: wfBrSrIpEncapsRing.setDescription('The remote ring number for which we have a ring to IP Address mapping.')
wfBrSrIpEncapsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrIpEncapsIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: wfBrSrIpEncapsIpAddress.setDescription('The IP Address of the Wellfleet IP Encapsulation peer to which this ring is connected.')
wfBrSrIpEncapsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("learned", 3))).clone('learned')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrIpEncapsStatus.setStatus('obsolete')
if mibBuilder.loadTexts: wfBrSrIpEncapsStatus.setDescription('The status of this entry. The meanings of the values are: learned(3) : the value of the corresponding instance of wfBrSrIpEncapsRing was learned, and is being used.')
wfBrSrTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6), )
if mibBuilder.loadTexts: wfBrSrTrafficFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterTable.setDescription('SR Bridge Traffic Filters')
wfBrSrTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrTrafficFilterCircuit"), (0, "Wellfleet-SR-MIB", "wfBrSrTrafficFilterRuleNumber"), (0, "Wellfleet-SR-MIB", "wfBrSrTrafficFilterFragment"))
if mibBuilder.loadTexts: wfBrSrTrafficFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterEntry.setDescription('An entry in WfBrSrTrafficFilterTable.')
wfBrSrTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrTrafficFilterCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterCreate.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfBrSrTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrTrafficFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterEnable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfBrSrTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrTrafficFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfBrSrTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrTrafficFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfBrSrTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrTrafficFilterDefinition.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterDefinition.setDescription('The filter rule definition.')
wfBrSrTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrTrafficFilterReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterReserved.setDescription('Reserved field.')
wfBrSrTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrTrafficFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterCircuit.setDescription('The ID of the Bridge Circuit to which the filter is applied.')
wfBrSrTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrTrafficFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterRuleNumber.setDescription('ID for the rule.')
wfBrSrTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrTrafficFilterFragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfBrSrTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 6, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrTrafficFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrTrafficFilterName.setDescription('name of the rule number')
wfBrSrEsRifTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 7), )
if mibBuilder.loadTexts: wfBrSrEsRifTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrEsRifTable.setDescription('A table that contains the currently active RIFs in use by Router End Station Support inst_id[9] = wfBrSrIpExplorerAddress')
wfBrSrEsRifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 7, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrEsRifCircuit"), (0, "Wellfleet-SR-MIB", "wfBrSrEsRifProtocol"), (0, "Wellfleet-SR-MIB", "wfBrSrEsRifMacAddr"))
if mibBuilder.loadTexts: wfBrSrEsRifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrEsRifEntry.setDescription('An entry in wfBrSrEsRif.')
wfBrSrEsRifCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrEsRifCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrEsRifCircuit.setDescription('The circuit on which this entry was learned')
wfBrSrEsRifProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrEsRifProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrEsRifProtocol.setDescription('The protocol in use at end station corresponding to this RIF. If the protocol uses LLC encapsulation this field will contain the DSAP/SSAP pair. If a SNAP encapsulation is used, it will contain the protocol type.')
wfBrSrEsRifMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrEsRifMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrEsRifMacAddr.setDescription('The Mac address of the end station corresponding to this RIF.')
wfBrSrEsRifRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 7, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrEsRifRoute.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrEsRifRoute.setDescription('The route contained in the RIF field')
wfBrSrNbRifTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 8), )
if mibBuilder.loadTexts: wfBrSrNbRifTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbRifTable.setDescription('The NetBIOS server/client rif cache table')
wfBrSrNbRifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 8, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrNbName"))
if mibBuilder.loadTexts: wfBrSrNbRifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbRifEntry.setDescription('An entry in the NetBIOS rif cache table')
wfBrSrNbName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbName.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbName.setDescription('The NetBIOS name of this station. It is a maximum of 16 characters. Names that are shorter are padded with ASCII spaces - 0x20')
wfBrSrNbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 8, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbMacAddress.setDescription('The Mac Address of the NetBIOS station')
wfBrSrNbStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("learned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbStatic.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStatic.setDescription('Indicates whether this entry is a static or learned entry')
wfBrSrNbRif = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 8, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbRif.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbRif.setDescription('Cached RIF to get to this station')
wfBrSrNbRifCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbRifCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbRifCacheHits.setDescription('The number of AREs that have been converted by this station')
wfBrSrNbQueryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 9), )
if mibBuilder.loadTexts: wfBrSrNbQueryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbQueryTable.setDescription('The NetBIOS Query cache table')
wfBrSrNbQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 9, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrNbQueryMacAddress"), (0, "Wellfleet-SR-MIB", "wfBrSrNbRspCorrelator"))
if mibBuilder.loadTexts: wfBrSrNbQueryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbQueryEntry.setDescription('An entry in the NetBIOS Query cache table')
wfBrSrNbQueryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbQueryMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbQueryMacAddress.setDescription('The MAC Address of the NetBIOS station')
wfBrSrNbRspCorrelator = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbRspCorrelator.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbRspCorrelator.setDescription('NetBIOS query sequence number')
wfBrSrNbQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbQuery.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbQuery.setDescription('Cached NetBIOS query')
wfBrSrNbQueryFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbQueryFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbQueryFilteredFrames.setDescription('The number of identical Queries which have been filtered')
wfBrSrNbStaticTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 10), )
if mibBuilder.loadTexts: wfBrSrNbStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStaticTable.setDescription('The NetBIOS static server/client entry table')
wfBrSrNbStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 10, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrNbStaticName"))
if mibBuilder.loadTexts: wfBrSrNbStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStaticEntry.setDescription('An entry in the NetBIOS static entry table')
wfBrSrNbStaticDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrNbStaticDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStaticDelete.setDescription('Create/Delete parameter for the NetBIOS static entry')
wfBrSrNbStaticDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrNbStaticDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStaticDisable.setDescription('Enable/Disable parameter for the NetBIOS static entry')
wfBrSrNbStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbStaticState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStaticState.setDescription('The state of this NetBIOS static entry')
wfBrSrNbStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrNbStaticName.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStaticName.setDescription('The NetBIOS name of this station. It is a maximum of 16 characters. Names that are shorter are padded with ASCII spaces - 0x20')
wfBrSrNbStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 10, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrNbStaticMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStaticMacAddress.setDescription('The Mac Address of the NetBIOS station')
wfBrSrNbStaticRif = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 10, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrSrNbStaticRif.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrNbStaticRif.setDescription('The RIF to get to this station')
wfBrXb = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11))
wfBrXbBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the bridge.')
wfBrXbBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable the bridge.')
wfBrXbBaseEthernetLanId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseEthernetLanId.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseEthernetLanId.setDescription("Ethernet pseudo 'Ring' number")
wfBrXbBaseMaxRifEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 4), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseMaxRifEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseMaxRifEntries.setDescription('Maximum number of entries in the token-ring station address/RIF database')
wfBrXbBaseCurrentRifEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrXbBaseCurrentRifEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseCurrentRifEntries.setDescription('Current number of entries in the token-ring station address/RIF database')
wfBrXbBaseAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 6), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseAgeTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseAgeTime.setDescription('Aging values for token-ring and Ethernet/802.3 MAC address databases')
wfBrXbBaseBcastAddressConversionDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseBcastAddressConversionDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseBcastAddressConversionDisable.setDescription('Enable/disable conversion from Ethernet Broadcast address to Token-ring broadcast address')
wfBrXbBaseDefaultMode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8023", 2))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseDefaultMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseDefaultMode.setDescription('default mode indicates whether nodes should be assumed to be Ethernet version 2 or 802.3 nodes, if no other information is available. This parameter applies to Ethernet/802.3 interfaces only.')
wfBrXbBaseBcastMode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("are", 1), ("ste", 2))).clone('ste')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseBcastMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseBcastMode.setDescription('this parameter governs whether frames to be broadcast on the token-ring interface (because the destination address was not recognized) should go out as All-routes-explorers or as Spanning-tree-explorers. This parameter applies to token-ring interfaces only.')
wfBrXbBaseSaps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbBaseSaps.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbBaseSaps.setDescription('this parameter is the list of SAPS to bridge')
wfBrXbFddiBridge = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbFddiBridge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbFddiBridge.setDescription('Enable/disable larger size packets (FDDI and TokenRing) to pass through the bridge if no ethernet or sync ports are configured for XB.')
wfBrXbAddressMapTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 12), )
if mibBuilder.loadTexts: wfBrXbAddressMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbAddressMapTable.setDescription('users may configure specific Functional<->Multicast address conversions or specific MAC address conversions to be performed. This table keeps these mappings (on a per-system basis).')
wfBrXbAddressMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 12, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrXbAddressMapEthernetAddress"))
if mibBuilder.loadTexts: wfBrXbAddressMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbAddressMapEntry.setDescription('An entry in the MAC address mapping table')
wfBrXbAddressMapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbAddressMapDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbAddressMapDelete.setDescription('Create/Delete parameter for the station type static entry')
wfBrXbAddressMapEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrXbAddressMapEthernetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbAddressMapEthernetAddress.setDescription('The ethernet MAC Address of the station')
wfBrXbAddressMapTokenRingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 12, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbAddressMapTokenRingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbAddressMapTokenRingAddress.setDescription('The token-ring MAC Address of the station')
wfBrXbRifTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 13), )
if mibBuilder.loadTexts: wfBrXbRifTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbRifTable.setDescription('The token-ring RIF cache table')
wfBrXbRifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 13, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrXbRifMacAddress"))
if mibBuilder.loadTexts: wfBrXbRifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbRifEntry.setDescription('An entry in the token-ring RIF cache table')
wfBrXbRifMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrXbRifMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbRifMacAddress.setDescription('The Mac Address of the token-ring station')
wfBrXbRifField = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrXbRifField.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbRifField.setDescription('The RIF to get to this station')
wfBrXbStationTypeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 14), )
if mibBuilder.loadTexts: wfBrXbStationTypeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbStationTypeTable.setDescription('The station type (Ethernet or 802.3) static entry table')
wfBrXbStationTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 14, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrXbStationTypeEthernetAddress"))
if mibBuilder.loadTexts: wfBrXbStationTypeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbStationTypeEntry.setDescription('An entry in the station type static entry table')
wfBrXbStationTypeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbStationTypeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbStationTypeDelete.setDescription('Create/Delete parameter for the station type static entry')
wfBrXbStationTypeEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrXbStationTypeEthernetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbStationTypeEthernetAddress.setDescription('The Mac Address of the station')
wfBrXbStationTypeIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8023", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrXbStationTypeIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrXbStationTypeIndicator.setDescription('The station type (Ethernet or 802.3)')
wfBrSrIpEncapsRBTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 15), )
if mibBuilder.loadTexts: wfBrSrIpEncapsRBTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpEncapsRBTable.setDescription("A table that contains information about IP Encapsulation ring/bridge-to-IP Address mappings. This information is used to make the 'next ring/bridge' IP Address decision. inst = wfBrSrIpEncapsRing.wfBrSrIpEncapsBridge")
wfBrSrIpEncapsRBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 15, 1), ).setIndexNames((0, "Wellfleet-SR-MIB", "wfBrSrIpEncapsRBRing"), (0, "Wellfleet-SR-MIB", "wfBrSrIpEncapsRBBridge"))
if mibBuilder.loadTexts: wfBrSrIpEncapsRBEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpEncapsRBEntry.setDescription('An entry in the wfBrSrIpEncapsRBTable.')
wfBrSrIpEncapsRBRing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrIpEncapsRBRing.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpEncapsRBRing.setDescription('The remote ring number for which we have a ring-bridge to IP Address mapping.')
wfBrSrIpEncapsRBBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrIpEncapsRBBridge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpEncapsRBBridge.setDescription('The Bridge ID for which we have a ring-bridge to IP Address mapping.')
wfBrSrIpEncapsRBIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrIpEncapsRBIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpEncapsRBIpAddress.setDescription('The IP Address of the Wellfleet IP Encapsulation peer to which this ring-bridge is connected.')
wfBrSrIpEncapsRBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("learned", 3))).clone('learned')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrSrIpEncapsRBStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrSrIpEncapsRBStatus.setDescription('The status of this entry. The meanings of the values are: learned(3) : the value of the corresponding instance of wfBrSrIpEncapsRing and wfBrSrIpEncapsBridge was learned, and is being used.')
mibBuilder.exportSymbols("Wellfleet-SR-MIB", wfBrSrBaseStpRootCost=wfBrSrBaseStpRootCost, wfBrSrBaseState=wfBrSrBaseState, wfBrSrBaseStpTimeSinceTopologyChange=wfBrSrBaseStpTimeSinceTopologyChange, wfBrSrBaseStpBridgeHelloTime=wfBrSrBaseStpBridgeHelloTime, wfBrSrNbName=wfBrSrNbName, wfBrSrInterfaceInFrames=wfBrSrInterfaceInFrames, wfBrSrInterfaceMaxLfField=wfBrSrInterfaceMaxLfField, wfBrSrIpExplorerDelete=wfBrSrIpExplorerDelete, wfBrSrNbStaticDisable=wfBrSrNbStaticDisable, wfBrSrInterfaceStpTranslationDisable=wfBrSrInterfaceStpTranslationDisable, wfBrSrIpEncapsStatus=wfBrSrIpEncapsStatus, wfBrSrBaseStpDesignatedRoot=wfBrSrBaseStpDesignatedRoot, wfBrSrBaseNbNameQueryCacheDisable=wfBrSrBaseNbNameQueryCacheDisable, wfBrXbBaseCurrentRifEntries=wfBrXbBaseCurrentRifEntries, wfBrSrInterfaceDelete=wfBrSrInterfaceDelete, wfBrSrBaseStpForwardDelay=wfBrSrBaseStpForwardDelay, wfBrSrBaseNbRifHashEntries=wfBrSrBaseNbRifHashEntries, wfBrXbStationTypeTable=wfBrXbStationTypeTable, wfBrSrBaseStpProtocolSpecification=wfBrSrBaseStpProtocolSpecification, wfBrXbBaseDelete=wfBrXbBaseDelete, wfBrSrBaseBridgeId=wfBrSrBaseBridgeId, wfBrSrTrafficFilterDefinition=wfBrSrTrafficFilterDefinition, wfBrSrTrafficFilterRuleNumber=wfBrSrTrafficFilterRuleNumber, wfBrSrTrafficFilterCreate=wfBrSrTrafficFilterCreate, wfBrSrBaseGroupLanId=wfBrSrBaseGroupLanId, wfBrSrBridgeDelete=wfBrSrBridgeDelete, wfBrSrIpEncapsRing=wfBrSrIpEncapsRing, wfBrSrNbStaticTable=wfBrSrNbStaticTable, wfBrSrTrafficFilterFragment=wfBrSrTrafficFilterFragment, wfBrSrBaseNbRifMibDisable=wfBrSrBaseNbRifMibDisable, wfBrSrBaseStpBridgeMaxAge=wfBrSrBaseStpBridgeMaxAge, wfBrSrBaseNbRifAgeTime=wfBrSrBaseNbRifAgeTime, wfBrXbBaseMaxRifEntries=wfBrXbBaseMaxRifEntries, wfBrSrBaseAreHopCntLimit=wfBrSrBaseAreHopCntLimit, wfBrSrInterfaceEntry=wfBrSrInterfaceEntry, wfBrSrNbRif=wfBrSrNbRif, wfBrSrInterfaceStpPktsXmitd=wfBrSrInterfaceStpPktsXmitd, wfBrSrInterfaceFilterAddress=wfBrSrInterfaceFilterAddress, wfBrSrBaseNbServerRifCacheDisable=wfBrSrBaseNbServerRifCacheDisable, wfBrSrBaseStpHelloTime=wfBrSrBaseStpHelloTime, wfBrSourceRouting=wfBrSourceRouting, wfBrSrBaseNbRifDroppedFrames=wfBrSrBaseNbRifDroppedFrames, wfBrSrBaseDisable=wfBrSrBaseDisable, wfBrSrBaseNbCurrentRifEntries=wfBrSrBaseNbCurrentRifEntries, wfBrSrEsRifMacAddr=wfBrSrEsRifMacAddr, wfBrSrBridgeEntry=wfBrSrBridgeEntry, wfBrXbBaseAgeTime=wfBrXbBaseAgeTime, wfBrSrTrafficFilterReserved=wfBrSrTrafficFilterReserved, wfBrSrInterfaceStpDesignatedRoot=wfBrSrInterfaceStpDesignatedRoot, wfBrSrIpEncapsTable=wfBrSrIpEncapsTable, wfBrSrEsRifCircuit=wfBrSrEsRifCircuit, wfBrSrNbStaticState=wfBrSrNbStaticState, wfBrSrBaseStpState=wfBrSrBaseStpState, wfBrSrInterfaceOutFrames=wfBrSrInterfaceOutFrames, wfBrSrBaseNbQueryCacheDisable=wfBrSrBaseNbQueryCacheDisable, wfBrSrNbQueryMacAddress=wfBrSrNbQueryMacAddress, wfBrSrInterfaceXbDropFrames=wfBrSrInterfaceXbDropFrames, wfBrSrIpExplorerEntry=wfBrSrIpExplorerEntry, wfBrSrNbRifEntry=wfBrSrNbRifEntry, wfBrSrBaseNbQueryFilteredFrames=wfBrSrBaseNbQueryFilteredFrames, wfBrSrInterfaceFrBcastDlci=wfBrSrInterfaceFrBcastDlci, wfBrSrNbQueryFilteredFrames=wfBrSrNbQueryFilteredFrames, wfBrSrInterfaceStpMultiCastAddr=wfBrSrInterfaceStpMultiCastAddr, wfBrSrInterfaceStpState=wfBrSrInterfaceStpState, wfBrSrInterfaceStpPktsRcvd=wfBrSrInterfaceStpPktsRcvd, wfBrSrTrafficFilterName=wfBrSrTrafficFilterName, wfBrXbAddressMapEntry=wfBrXbAddressMapEntry, wfBrSrInterfaceNbClientRifCacheDisable=wfBrSrInterfaceNbClientRifCacheDisable, wfBrSrBaseNbCurrentQueryEntries=wfBrSrBaseNbCurrentQueryEntries, wfBrSrInterfaceMaxRds=wfBrSrInterfaceMaxRds, wfBrXbFddiBridge=wfBrXbFddiBridge, wfBrSrNbMacAddress=wfBrSrNbMacAddress, wfBrSrBaseStpEnable=wfBrSrBaseStpEnable, wfBrSrBaseNbMaximumQueryEntries=wfBrSrBaseNbMaximumQueryEntries, wfBrSrInterfaceXbInFrames=wfBrSrInterfaceXbInFrames, wfBrXbStationTypeEntry=wfBrXbStationTypeEntry, wfBrSrTrafficFilterCircuit=wfBrSrTrafficFilterCircuit, wfBrSrBaseInternalLanId=wfBrSrBaseInternalLanId, wfBrSrTrafficFilterEnable=wfBrSrTrafficFilterEnable, wfBrSrEsRifEntry=wfBrSrEsRifEntry, wfBrSrInterfaceIpAddress=wfBrSrInterfaceIpAddress, wfBrSrNbQuery=wfBrSrNbQuery, wfBrSrIpEncapsRBRing=wfBrSrIpEncapsRBRing, wfBrSrIpExplorerTable=wfBrSrIpExplorerTable, wfBrSrNbStaticName=wfBrSrNbStaticName, wfBrSrBaseStpHoldTime=wfBrSrBaseStpHoldTime, wfBrSrBaseIpMtuSize=wfBrSrBaseIpMtuSize, wfBrSrInterfaceState=wfBrSrInterfaceState, wfBrSrInterfaceDropInvalidRings=wfBrSrInterfaceDropInvalidRings, wfBrXbBaseSaps=wfBrXbBaseSaps, wfBrSrBaseNbQueryAgeTime=wfBrSrBaseNbQueryAgeTime, wfBrSrInterfaceStpEnable=wfBrSrInterfaceStpEnable, wfBrSrBaseIpSeqErrors=wfBrSrBaseIpSeqErrors, wfBrSrEsRifProtocol=wfBrSrEsRifProtocol, wfBrSrNbStaticDelete=wfBrSrNbStaticDelete, wfBrSrInterfaceRing=wfBrSrInterfaceRing, wfBrSrBaseNbDatagramRifCacheDisable=wfBrSrBaseNbDatagramRifCacheDisable, wfBrXbBaseEthernetLanId=wfBrXbBaseEthernetLanId, wfBrXbRifMacAddress=wfBrXbRifMacAddress, wfBrXbStationTypeDelete=wfBrXbStationTypeDelete, wfBrSrNbStaticEntry=wfBrSrNbStaticEntry, wfBrSrBridgeTable=wfBrSrBridgeTable, wfBrSrInterfaceBlockInSte=wfBrSrInterfaceBlockInSte, wfBrSrInterfaceNbDatagramRifCacheDisable=wfBrSrInterfaceNbDatagramRifCacheDisable, wfBrSrInterfaceNbServerRifCacheDisable=wfBrSrInterfaceNbServerRifCacheDisable, wfBrSr=wfBrSr, wfBrSrBaseNbMaximumRifEntries=wfBrSrBaseNbMaximumRifEntries, wfBrSrBaseNb15CharacterDisable=wfBrSrBaseNb15CharacterDisable, wfBrSrNbQueryTable=wfBrSrNbQueryTable, wfBrSrNbStaticMacAddress=wfBrSrNbStaticMacAddress, wfBrXb=wfBrXb, wfBrXbStationTypeIndicator=wfBrXbStationTypeIndicator, wfBrSrBaseNbQueryMibDisable=wfBrSrBaseNbQueryMibDisable, wfBrXbRifField=wfBrXbRifField, wfBrSrIpExplorerProtocol=wfBrSrIpExplorerProtocol, wfBrSrEsRifTable=wfBrSrEsRifTable, wfBrSrEsRifRoute=wfBrSrEsRifRoute, wfBrSrBaseNbRifCacheHits=wfBrSrBaseNbRifCacheHits, wfBrSrInterfaceCircuit=wfBrSrInterfaceCircuit, wfBrSrInterfaceEncapsFormat=wfBrSrInterfaceEncapsFormat, wfBrSrInterfaceDropSrfs=wfBrSrInterfaceDropSrfs, wfBrXbAddressMapTable=wfBrXbAddressMapTable, wfBrSrTrafficFilterCounter=wfBrSrTrafficFilterCounter, wfBrSrBaseIpEncapsDisable=wfBrSrBaseIpEncapsDisable, wfBrSrTrafficFilterStatus=wfBrSrTrafficFilterStatus, wfBrSrNbRifCacheHits=wfBrSrNbRifCacheHits, wfBrXbBaseDefaultMode=wfBrXbBaseDefaultMode, wfBrSrTrafficFilterEntry=wfBrSrTrafficFilterEntry, wfBrSrInterfaceStpDesignatedCost=wfBrSrInterfaceStpDesignatedCost, wfBrSrBaseIpInReceives=wfBrSrBaseIpInReceives, wfBrSrBaseStpBridgeForwardDelay=wfBrSrBaseStpBridgeForwardDelay, wfBrSrInterfaceStpDesignatedBridge=wfBrSrInterfaceStpDesignatedBridge, wfBrSrBaseStpBridgeID=wfBrSrBaseStpBridgeID, wfBrXbRifTable=wfBrXbRifTable, wfBrSrBaseDelete=wfBrSrBaseDelete, wfBrSrBaseNbClientRifCacheDisable=wfBrSrBaseNbClientRifCacheDisable, wfBrSrNbRifTable=wfBrSrNbRifTable, wfBrXbRifEntry=wfBrXbRifEntry, wfBrSrIpEncapsRBEntry=wfBrSrIpEncapsRBEntry, wfBrSrInterfaceTable=wfBrSrInterfaceTable, wfBrSrInterfaceDropInvalidRcs=wfBrSrInterfaceDropInvalidRcs, wfBrSrInterfaceBlockOutSte=wfBrSrInterfaceBlockOutSte, wfBrSrInterfaceNbQueryCacheDisable=wfBrSrInterfaceNbQueryCacheDisable, wfBrSrNbQueryEntry=wfBrSrNbQueryEntry, wfBrSrIpEncapsRBBridge=wfBrSrIpEncapsRBBridge, wfBrSrNbRspCorrelator=wfBrSrNbRspCorrelator, wfBrSrBaseStpTopChanges=wfBrSrBaseStpTopChanges, wfBrSrBridgeId=wfBrSrBridgeId, wfBrSrIpEncapsEntry=wfBrSrIpEncapsEntry, wfBrSrIpEncapsIpAddress=wfBrSrIpEncapsIpAddress, wfBrSrBaseStpRootPort=wfBrSrBaseStpRootPort, wfBrSrInterfaceDisable=wfBrSrInterfaceDisable, wfBrXbAddressMapEthernetAddress=wfBrXbAddressMapEthernetAddress, wfBrSrBaseIpNetworkRingId=wfBrSrBaseIpNetworkRingId, wfBrSrInterfaceStpPathCost=wfBrSrInterfaceStpPathCost, wfBrSrBaseStpMaxAge=wfBrSrBaseStpMaxAge, wfBrSrInterfaceOutIpFrames=wfBrSrInterfaceOutIpFrames, wfBrSrInterfaceBlockIp=wfBrSrInterfaceBlockIp, wfBrXbBaseBcastMode=wfBrXbBaseBcastMode, wfBrXbAddressMapDelete=wfBrXbAddressMapDelete, wfBrXbBaseBcastAddressConversionDisable=wfBrXbBaseBcastAddressConversionDisable, wfBrSrIpEncapsRBTable=wfBrSrIpEncapsRBTable, wfBrSrNbStaticRif=wfBrSrNbStaticRif, wfBrSrNbStatic=wfBrSrNbStatic, wfBrXbStationTypeEthernetAddress=wfBrXbStationTypeEthernetAddress, wfBrSrTrafficFilterTable=wfBrSrTrafficFilterTable, wfBrSrInterfaceStpDesignatedPort=wfBrSrInterfaceStpDesignatedPort, wfBrSrInterfaceStpForwardTransitions=wfBrSrInterfaceStpForwardTransitions, wfBrSrBaseNbRifCacheMisses=wfBrSrBaseNbRifCacheMisses, wfBrSrIpEncapsRBIpAddress=wfBrSrIpEncapsRBIpAddress, wfBrSrIpEncapsRBStatus=wfBrSrIpEncapsRBStatus, wfBrXbAddressMapTokenRingAddress=wfBrXbAddressMapTokenRingAddress, wfBrSrIpExplorerAddr=wfBrSrIpExplorerAddr, wfBrXbBaseDisable=wfBrXbBaseDisable)
