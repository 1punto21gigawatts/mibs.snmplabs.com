#
# PySNMP MIB module DRAFT-IETF-SYSLOG-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DRAFT-IETF-SYSLOG-DEVICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
rlSyslog, = mibBuilder.importSymbols("CISCOSB-MIB", "rlSyslog")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, snmpModules, TimeTicks, Counter32, ModuleIdentity, Gauge32, iso, Counter64, Integer32, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "snmpModules", "TimeTicks", "Counter32", "ModuleIdentity", "Gauge32", "iso", "Counter64", "Integer32", "NotificationType", "Unsigned32")
DisplayString, RowStatus, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TimeStamp")
snmpSyslogDeviceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1))
snmpSyslogDeviceMIB.setRevisions(('2002-06-06 18:41',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snmpSyslogDeviceMIB.setRevisionsDescriptions(('The initial version of this MIB module.',))
if mibBuilder.loadTexts: snmpSyslogDeviceMIB.setLastUpdated('200206061841Z')
if mibBuilder.loadTexts: snmpSyslogDeviceMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: snmpSyslogDeviceMIB.setContactInfo('Postal: 170 West Tasman Drive San Jose , CA 95134-1706 USA Website: Cisco Small Business Support Community <http://www.cisco.com/go/smallbizsupport>')
if mibBuilder.loadTexts: snmpSyslogDeviceMIB.setDescription('This MIB module defines a portion of the SNMP enterprise MIBs pertaining to the configuration and generation of Syslog compatible diagnostic messages.')
class SyslogUdpPort(TextualConvention, Unsigned32):
    description = 'The UDP port number the syslog device is using to send requests to this syslog collector. 514 is the IANA assigned port number for syslog.'
    status = 'current'

class SyslogFacility(TextualConvention, Integer32):
    description = 'This textual convention maps out to the facilities available for syslog messages. The value no-map(24) indicates that the appropriate facility will be provided by the individual applications on the managed entity. If this option is not available on a particular entity the set of this value will fail with an error-status of wrongValue.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23), ("no-map", 24))

class SyslogSeverity(TextualConvention, Integer32):
    description = 'This textual convention maps out to the severity levels of syslog messages. The syslog protocol uses the values 0 (emergency), to 7 (debug).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7))

snmpSyslogDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 1))
snmpSyslogCollector = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2))
snmpSyslogApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 3))
snmpSyslogDeviceMessages = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogDeviceMessages.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogDeviceMessages.setDescription('The number of messages successfully delivered to the upstream side of the syslog device software for processing.')
snmpSyslogDeviceMessagesDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogDeviceMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogDeviceMessagesDropped.setDescription('The number of messages unable to be queued to the downstream side of the syslog device software for transmitting.')
snmpSyslogDeviceLastMessageTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogDeviceLastMessageTime.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogDeviceLastMessageTime.setDescription('The sysUpTime of the last attempt, successful or otherwise, to queue a message to the downstream side of the syslog device software.')
snmpSyslogDeviceControl = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 1, 4), Bits().clone(namedValues=NamedValues(("snmpSyslogDeviceControlConsoleLogging", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyslogDeviceControl.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogDeviceControl.setDescription('A list of attributes to control the operation of the syslog device.')
snmpSyslogCollectorMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogCollectorMaxEntries.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorMaxEntries.setDescription('The maximum number of entries allowed in the snmpSyslogCollectorTable.')
snmpSyslogCollectorNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogCollectorNumEntries.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorNumEntries.setDescription('The number of entries currently in the snmpSyslogCollectorTable.')
snmpSyslogCollectorTableNextAvailableIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogCollectorTableNextAvailableIndex.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorTableNextAvailableIndex.setDescription('This object indicates the numerically lowest available index within this entity, which may be used for the value of snmpSyslogCollectorIndex in the creation of a new entry in the snmpSyslogCollectorTable. An index is considered available if the index value falls within the range of 1 to 8 and is not being used to index an existing entry in the snmpSyslogCollectorTable contained within this entity. A value of zero indicates that all of the entries in the snmpSyslogCollectorTable are currently in use. This value SHOULD only be considered a guideline for management creation of snmpSyslogCollectorEntries, there is no requirement on management to create entries based upon this index value.')
snmpSyslogCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4), )
if mibBuilder.loadTexts: snmpSyslogCollectorTable.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorTable.setDescription('A table containing Syslog collector information.')
snmpSyslogCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1), ).setIndexNames((0, "DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorIndex"))
if mibBuilder.loadTexts: snmpSyslogCollectorEntry.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorEntry.setDescription('Defines the information to generate syslog messages to an aggregating agent or collector. Entries within this table with an access level of read- create MUST be considered non-volatile and MUST be maintained across entity resets.')
snmpSyslogCollectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: snmpSyslogCollectorIndex.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorIndex.setDescription('A unique arbitrary identifier for this syslog collector.')
snmpSyslogCollectorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSyslogCollectorDescription.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorDescription.setDescription('Administratively assigned textual description of this syslog collector.')
snmpSyslogCollectorAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSyslogCollectorAddressType.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorAddressType.setDescription('The type of Internet address by which the Syslog collector is specified in snmpSyslogCollectorAddress. Not all address types may be supported.')
snmpSyslogCollectorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSyslogCollectorAddress.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorAddress.setDescription('The Internet address for the Syslog message collector. The use of DNS domain names is discouraged, and agent support for them is optional. Deciding when, and how often, to resolve them is an issue. Not resolving them often enough means you might lose synchronization with the associated entry in the DNS server, and resolving them too often might leave you without access to the Syslog collector during critical network events.')
snmpSyslogCollectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 5), SyslogUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSyslogCollectorUdpPort.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorUdpPort.setDescription('The UDP port number the syslog device is using to send requests to this syslog collector. If an entity only supports sending messages using a single UDP port to all collectors then this may optionally be implemented read-only, in which case the current value of snmpSyslogCollectorDefaultUdpPort will be used.')
snmpSyslogCollectorFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 6), SyslogFacility()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSyslogCollectorFacility.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorFacility.setDescription('The syslog facility (local0-local7) that will be encoded in messages sent to this collector. If an entity only supports encoding a single facility in all messages to all collectors then this may optionally be implemented read-only, in which case the current value of snmpSyslogCollectorDefaultFacility will be used.')
snmpSyslogCollectorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 7), SyslogSeverity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSyslogCollectorSeverity.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorSeverity.setDescription('The maximum severity level of the messages that SHOULD be forwarded to the syslog collector. The higher the level, the lower the severity. If an entity only supports filtering based on a single severity level for all collectors then this may optionally be implemented read-only, in which case the current value of snmpSyslogCollectorDefaultSeverity will be used.')
snmpSyslogCollectorMessagesIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogCollectorMessagesIgnored.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorMessagesIgnored.setDescription('This is a count of messages not sent to this collector because the severity level of the message was above snmpSyslogCollectorSeverity, the higher the level, the lower the severity.')
snmpSyslogCollectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpSyslogCollectorRowStatus.setReference('RFC2579 (Textual Conventions for SMIv2)')
if mibBuilder.loadTexts: snmpSyslogCollectorRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorRowStatus.setDescription("This object allows for the dynamic creation and deletion of entries within the snmpSyslogCollectorTable as well as the activation and deactivation of these entries. When this object's value is set to notInService(2) this collector will not be sent any messages, nor will any of its counters be incremented. The agent SHOULD not delete a row, except in the case of the loss of persistent storage. Refer to the RowStatus convention for further details on the behavior of this object.")
snmpSyslogCollectorDefaultUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 5), SyslogUdpPort().clone(514)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyslogCollectorDefaultUdpPort.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorDefaultUdpPort.setDescription('The default UDP port number that the managed entity is using to send syslog messages. This value will be used as the default value for snmpSyslogCollectorUdpPort when creating rows in the snmpSyslogCollectorTable and either: 1.) no value is specified for snmpSyslogCollectorUdpPort, or 2.) snmpSyslogCollectorUdpPort is implemented read-only. If snmpSyslogCollectorUdpPort is implemented read-only, and this value is changed, it SHOULD affect the UDP port that is used to send syslog messages to all collectors as soon as it is practical. This parameter value is maintained across system reboots.')
snmpSyslogCollectorDefaultFacility = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 6), SyslogFacility().clone('local7')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyslogCollectorDefaultFacility.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorDefaultFacility.setDescription('The default syslog facility (local0-local7) that will be encoded in syslog messages. This value will be used as the default value for snmpSyslogCollectorFacility when creating rows in the snmpSyslogCollectorTable and either: 1.) no value is specified for snmpSyslogCollectorFacility, or 2.) snmpSyslogCollectorFacility is implemented read-only. If snmpSyslogCollectorFacility is implemented read-only, and this value is changed, it SHOULD affect the syslog facility that is encoded in all syslog messages as soon as it is practical. This parameter value is maintained across system reboots.')
snmpSyslogCollectorDefaultSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 2, 7), SyslogSeverity().clone('error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyslogCollectorDefaultSeverity.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorDefaultSeverity.setDescription('The default syslog message severity level that will be used to filter all syslog messages. This value will be used as the default value for snmpSyslogCollectorSeverity when creating rows in the snmpSyslogCollectorTable and either: 1.) no value is specified for snmpSyslogCollectorSeverity, or 2.) snmpSyslogCollectorSeverity is implemented read-only. The higher the severity level, the less critical it is. If snmpSyslogCollectorSeverity is implemented read-only, and this value is changed, it SHOULD affect the syslog message severity level that will be used to filter all syslog messages as soon as it is practical. This parameter value is maintained across system reboots.')
snmpSyslogApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 3, 1), )
if mibBuilder.loadTexts: snmpSyslogApplicationTable.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogApplicationTable.setDescription('This is a table of applications on the managed entity that provide individual control over the severity level of the messages that they will generate.')
snmpSyslogApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 3, 1, 1), ).setIndexNames((0, "DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogApplicationIndex"))
if mibBuilder.loadTexts: snmpSyslogApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogApplicationEntry.setDescription('An individual application that provides that ability to control the messages that it generates based on a severity level. MUST be considered non-volatile and MUST be maintained across entity resets.')
snmpSyslogApplicationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: snmpSyslogApplicationIndex.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogApplicationIndex.setDescription('A unique arbitrary identifier for this application.')
snmpSyslogApplicationDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogApplicationDescription.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogApplicationDescription.setDescription('Textual description of this application, assigned by the managed entity.')
snmpSyslogApplicationMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSyslogApplicationMnemonic.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogApplicationMnemonic.setDescription("An abbreviation of the textual description for this application, assigned by the managed entity. i.e. 'STP' for 'Spanning Tree Protocol', etc. This provides a mapping between the textual descriptions and the mnemonics used in the syslog messages.")
snmpSyslogApplicationSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 3, 1, 1, 4), SyslogSeverity().clone('error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSyslogApplicationSeverity.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogApplicationSeverity.setDescription('The maximum severity level of the messages from this application that SHOULD be forwarded to the syslog device software for processing. The higher the severity level, the more verbose the messages.')
snmpSyslogDeviceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 4))
snmpSyslogDeviceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 4, 1))
snmpSyslogDeviceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 4, 2))
snmpSyslogDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 4, 1, 1)).setObjects(("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogDeviceMessages"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogDeviceMessagesDropped"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogDeviceLastMessageTime"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogDeviceControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpSyslogDeviceGroup = snmpSyslogDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogDeviceGroup.setDescription('A collection of objects providing syslog message statistics.')
snmpSyslogCollectorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 4, 1, 2)).setObjects(("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorMaxEntries"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorNumEntries"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorTableNextAvailableIndex"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorDescription"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorAddressType"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorAddress"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorUdpPort"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorFacility"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorSeverity"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorMessagesIgnored"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpSyslogCollectorGroup = snmpSyslogCollectorGroup.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorGroup.setDescription('A collection of objects providing descriptions of syslog collectors for sending system messages to.')
snmpSyslogApplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 4, 1, 3)).setObjects(("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogApplicationDescription"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogApplicationMnemonic"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogApplicationSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpSyslogApplicationGroup = snmpSyslogApplicationGroup.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogApplicationGroup.setDescription('A collection of objects providing a mechanism to control the severity level of the messages individual application may generate.')
snmpSyslogCollectorDefaultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 4, 1, 4)).setObjects(("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorDefaultUdpPort"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorDefaultFacility"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorDefaultSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpSyslogCollectorDefaultsGroup = snmpSyslogCollectorDefaultsGroup.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogCollectorDefaultsGroup.setDescription('A collection of objects providing default values for the syslog collectors that can optionally be overridden on a per collector basis with snmpSyslogCollectorFacility, snmpSyslogCollectorSeverity, or snmpSyslogCollectorUdpPort.')
snmpSyslogDeviceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 82, 1, 4, 2, 1)).setObjects(("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogDeviceGroup"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorGroup"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogCollectorDefaultsGroup"), ("DRAFT-IETF-SYSLOG-DEVICE-MIB", "snmpSyslogApplicationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpSyslogDeviceCompliance = snmpSyslogDeviceCompliance.setStatus('current')
if mibBuilder.loadTexts: snmpSyslogDeviceCompliance.setDescription('The compliance statement for devices that support sending system messages to a syslog collector.')
mibBuilder.exportSymbols("DRAFT-IETF-SYSLOG-DEVICE-MIB", snmpSyslogApplicationEntry=snmpSyslogApplicationEntry, snmpSyslogCollectorDefaultFacility=snmpSyslogCollectorDefaultFacility, SyslogFacility=SyslogFacility, snmpSyslogApplicationMnemonic=snmpSyslogApplicationMnemonic, PYSNMP_MODULE_ID=snmpSyslogDeviceMIB, snmpSyslogDeviceMIB=snmpSyslogDeviceMIB, snmpSyslogCollectorMaxEntries=snmpSyslogCollectorMaxEntries, snmpSyslogDeviceMessages=snmpSyslogDeviceMessages, snmpSyslogDeviceControl=snmpSyslogDeviceControl, snmpSyslogDeviceGroup=snmpSyslogDeviceGroup, snmpSyslogCollectorGroup=snmpSyslogCollectorGroup, snmpSyslogCollectorAddress=snmpSyslogCollectorAddress, snmpSyslogCollector=snmpSyslogCollector, snmpSyslogCollectorDefaultUdpPort=snmpSyslogCollectorDefaultUdpPort, snmpSyslogDeviceCompliance=snmpSyslogDeviceCompliance, snmpSyslogCollectorUdpPort=snmpSyslogCollectorUdpPort, snmpSyslogApplicationGroup=snmpSyslogApplicationGroup, snmpSyslogApplicationSeverity=snmpSyslogApplicationSeverity, snmpSyslogCollectorNumEntries=snmpSyslogCollectorNumEntries, snmpSyslogDeviceConformance=snmpSyslogDeviceConformance, snmpSyslogCollectorDefaultsGroup=snmpSyslogCollectorDefaultsGroup, snmpSyslogCollectorTableNextAvailableIndex=snmpSyslogCollectorTableNextAvailableIndex, snmpSyslogApplicationTable=snmpSyslogApplicationTable, snmpSyslogCollectorTable=snmpSyslogCollectorTable, snmpSyslogDevice=snmpSyslogDevice, snmpSyslogDeviceGroups=snmpSyslogDeviceGroups, snmpSyslogCollectorMessagesIgnored=snmpSyslogCollectorMessagesIgnored, snmpSyslogApplicationDescription=snmpSyslogApplicationDescription, snmpSyslogCollectorAddressType=snmpSyslogCollectorAddressType, snmpSyslogCollectorSeverity=snmpSyslogCollectorSeverity, snmpSyslogDeviceLastMessageTime=snmpSyslogDeviceLastMessageTime, snmpSyslogDeviceCompliances=snmpSyslogDeviceCompliances, snmpSyslogApplicationIndex=snmpSyslogApplicationIndex, SyslogSeverity=SyslogSeverity, snmpSyslogCollectorFacility=snmpSyslogCollectorFacility, snmpSyslogCollectorIndex=snmpSyslogCollectorIndex, snmpSyslogCollectorEntry=snmpSyslogCollectorEntry, snmpSyslogCollectorRowStatus=snmpSyslogCollectorRowStatus, SyslogUdpPort=SyslogUdpPort, snmpSyslogCollectorDescription=snmpSyslogCollectorDescription, snmpSyslogDeviceMessagesDropped=snmpSyslogDeviceMessagesDropped, snmpSyslogApplication=snmpSyslogApplication, snmpSyslogCollectorDefaultSeverity=snmpSyslogCollectorDefaultSeverity)
