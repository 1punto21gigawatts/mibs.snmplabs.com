#
# PySNMP MIB module BAS-ANALYZER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-ANALYZER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
basAnalyzer, = mibBuilder.importSymbols("BAS-MIB", "basAnalyzer")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, IpAddress, TimeTicks, iso, Counter32, MibIdentifier, NotificationType, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "IpAddress", "TimeTicks", "iso", "Counter32", "MibIdentifier", "NotificationType", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Gauge32")
TextualConvention, MacAddress, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "TruthValue")
basAnalyzerMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 17, 1))
if mibBuilder.loadTexts: basAnalyzerMib.setLastUpdated('9908190000Z')
if mibBuilder.loadTexts: basAnalyzerMib.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basAnalyzerMib.setContactInfo(' Tech Support Broadband Access Systems 8 Technology Drive Westborough, MA 01581 U.S.A. (508)366-8833 support@basystems.com')
if mibBuilder.loadTexts: basAnalyzerMib.setDescription('This is the MIB Module for the BAS Analyzer.')
basAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 17, 1, 1), )
if mibBuilder.loadTexts: basAnalyzerTable.setStatus('current')
if mibBuilder.loadTexts: basAnalyzerTable.setDescription('')
basAnalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 17, 1, 1, 1), ).setIndexNames((0, "BAS-ANALYZER-MIB", "basAnalyzerIndex"))
if mibBuilder.loadTexts: basAnalyzerEntry.setStatus('current')
if mibBuilder.loadTexts: basAnalyzerEntry.setDescription('Per interface analyzer attributes.')
basAnalyzerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 17, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: basAnalyzerIndex.setStatus('current')
if mibBuilder.loadTexts: basAnalyzerIndex.setDescription('Identifies source interface for packet capture.')
basAnalyzerClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 17, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basAnalyzerClient.setStatus('current')
if mibBuilder.loadTexts: basAnalyzerClient.setDescription('Identifies destination interface for packet capture. The value must represent the ifIndex value of that BAS chassis/slot/interface through which capture packets will be forwarded.')
basAnalyzerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 17, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basAnalyzerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: basAnalyzerAdminStatus.setDescription('Used to enable/disable packet capture mirroring on the source interface.')
basAnalyzerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 17, 1, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basAnalyzerMacAddress.setStatus('current')
if mibBuilder.loadTexts: basAnalyzerMacAddress.setDescription(' The Physical address of the cable modem.')
basAnalyzerMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 17, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basAnalyzerMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: basAnalyzerMacAddressMask.setDescription(' The Physical mask address indicates which byte to compare.')
mibBuilder.exportSymbols("BAS-ANALYZER-MIB", basAnalyzerTable=basAnalyzerTable, basAnalyzerMib=basAnalyzerMib, basAnalyzerMacAddressMask=basAnalyzerMacAddressMask, basAnalyzerEntry=basAnalyzerEntry, basAnalyzerAdminStatus=basAnalyzerAdminStatus, basAnalyzerIndex=basAnalyzerIndex, PYSNMP_MODULE_ID=basAnalyzerMib, basAnalyzerMacAddress=basAnalyzerMacAddress, basAnalyzerClient=basAnalyzerClient)
