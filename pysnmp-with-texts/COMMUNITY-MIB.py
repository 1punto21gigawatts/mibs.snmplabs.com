#
# PySNMP MIB module COMMUNITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COMMUNITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Bits, Counter64, ModuleIdentity, NotificationType, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, enterprises, MibIdentifier, TimeTicks, IpAddress, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Counter64", "ModuleIdentity", "NotificationType", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "enterprises", "MibIdentifier", "TimeTicks", "IpAddress", "Gauge32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
commsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1))
community = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 52))
communityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 1, 52, 2), )
if mibBuilder.loadTexts: communityTable.setStatus('mandatory')
if mibBuilder.loadTexts: communityTable.setDescription('This table houses the information needed for trivial authentication and sending traps.')
communityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 1, 52, 2, 1), ).setIndexNames((0, "COMMUNITY-MIB", "communityIndex"))
if mibBuilder.loadTexts: communityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: communityEntry.setDescription('Each entry contains a community name and access code for SNMP trivial authentication, an enable/disable traps option, as well as network and physical addressing information for traps.')
communityName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 1, 52, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityName.setStatus('mandatory')
if mibBuilder.loadTexts: communityName.setDescription('The community name that will be used for trivial authentication for SNMP get/set requests. This is also the community name used within an SNMP trap pdu. Each community name is associated with an access code of either NO_ACCESS, RO, RW, or SU.')
communityTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 1, 52, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityTrap.setStatus('mandatory')
if mibBuilder.loadTexts: communityTrap.setDescription('This object is checked to determine if traps should be sent to the corresponding network address associated with it. The possible values are: trapOff (0), trapOn (1)')
communityIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 1, 52, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: communityIPAddr.setDescription('The network address of the device that will receive traps from this agent.')
communityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 1, 52, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: communityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: communityIndex.setDescription('A unique value for each community entry. ')
mibBuilder.exportSymbols("COMMUNITY-MIB", cabletron=cabletron, communityTable=communityTable, communityIPAddr=communityIPAddr, communityEntry=communityEntry, communityTrap=communityTrap, communityName=communityName, communityIndex=communityIndex, commsDevice=commsDevice, community=community)
