#
# PySNMP MIB module ELTEX-MES-IF-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-IF-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:01:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
eltMesIfExtensionMIB, = mibBuilder.importSymbols("ELTEX-MES-MNG-MIB", "eltMesIfExtensionMIB")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, ObjectIdentity, Counter32, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Integer32, MibIdentifier, ModuleIdentity, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "ObjectIdentity", "Counter32", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Integer32", "MibIdentifier", "ModuleIdentity", "Unsigned32", "iso")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
eltMesIfExtensionMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1))
eltMesIfExtDot1qCustomEtherType = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3))
eltMesIfExtDot1q = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 4))
eltIfDot1qCustomEgressEtherTypeTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 1), )
if mibBuilder.loadTexts: eltIfDot1qCustomEgressEtherTypeTable.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomEgressEtherTypeTable.setDescription('A list of the interfaces that support the 802.1q custom egress ethertype feature.')
eltIfDot1qCustomEgressEtherTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltIfDot1qCustomEgressEtherTypeEntry.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomEgressEtherTypeEntry.setDescription('An entry containing the custom egress EtherType information for the interface. Only interfaces with custom 802.1q ethertype control are listed in the table.')
eltIfDot1qCustomEgressEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qCustomEgressEtherType.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomEgressEtherType.setDescription("The Dot1qEtherType allow administrator to select a non-standard (other than 0x8100) 2-byte ethertype for the interface to interoperate with third party vendor's system that do not use the standard 0x8100 ethertype to identify 802.1q-tagged frames. The current administrative value of the 802.1q ethertype for the interface. The administrative 802.1q ethertype value may differ from the operational 802.1q ethertype value. On some platforms, 802.1q ethertype may be assigned per group rather than per port. If multiple ports belong to a port group, the 802.1q ethertype assigned to any of the ports in such group will apply to all ports in the same group. To configure non-standard dot1q egress ethertype is only recommended when the Eltex device is connected to any third party vendor device.")
eltIfDot1qIngressCvlanTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 4, 1), )
if mibBuilder.loadTexts: eltIfDot1qIngressCvlanTable.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qIngressCvlanTable.setDescription('A list of the interfaces ingress C-VLAN settings.')
eltIfDot1qIngressCvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltIfDot1qIngressCvlanEntry.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qIngressCvlanEntry.setDescription('An entry containing ingress C-VLAN assignment for the interface.')
eltIfDot1qIngressCvlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qIngressCvlanTag.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qIngressCvlanTag.setDescription('C-VLAN tag for the interface assigned in ingress pipe. 0 means no C-VLAN assignment.')
eltIfDot1qCustomIngressEtherTypeTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2), )
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherTypeTable.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherTypeTable.setDescription('A list of the interfaces that support the 802.1q custom ingress ethertype feature.')
eltIfDot1qCustomIngressEtherTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherTypeEntry.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherTypeEntry.setDescription('An entry containing the custom ingress EtherTypes set for the interface to classify stag and ctag. Only interfaces with custom 802.1q ethertype control are listed in the table.')
eltIfDot1qCustomIngressEtherType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(33024, 33024), )).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType1.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType1.setDescription('This fields holds default ethertype 0x8100 or zero if ethertype 0x8100 is not used to classify SVLAN on current interface.')
eltIfDot1qCustomIngressEtherType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 33023), ValueRangeConstraint(33025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType2.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType2.setDescription("The custom ethertype to classify ingress vlan tags (SVLAN) for the interface to interoperate with third party vendor's system that do not use the standard 0x8100 ethertype to identify 802.1q-tagged frames.")
eltIfDot1qCustomIngressEtherType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 33023), ValueRangeConstraint(33025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType3.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType3.setDescription("The custom ethertype to classify ingress vlan tags (SVLAN) for the interface to interoperate with third party vendor's system that do not use the standard 0x8100 ethertype to identify 802.1q-tagged frames.")
eltIfDot1qCustomIngressEtherType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 33023), ValueRangeConstraint(33025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType4.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType4.setDescription("The custom ethertype to classify ingress vlan tags (SVLAN) for the interface to interoperate with third party vendor's system that do not use the standard 0x8100 ethertype to identify 802.1q-tagged frames.")
eltIfDot1qCustomIngressEtherType5 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 33023), ValueRangeConstraint(33025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType5.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType5.setDescription("The custom ethertype to classify ingress vlan tags (SVLAN) for the interface to interoperate with third party vendor's system that do not use the standard 0x8100 ethertype to identify 802.1q-tagged frames.")
eltIfDot1qCustomIngressEtherType6 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 33023), ValueRangeConstraint(33025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType6.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType6.setDescription("The custom ethertype to classify ingress vlan tags (SVLAN) for the interface to interoperate with third party vendor's system that do not use the standard 0x8100 ethertype to identify 802.1q-tagged frames.")
eltIfDot1qCustomIngressEtherType7 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 276, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 33023), ValueRangeConstraint(33025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType7.setStatus('current')
if mibBuilder.loadTexts: eltIfDot1qCustomIngressEtherType7.setDescription("The custom ethertype to classify ingress vlan tags (SVLAN) for the interface to interoperate with third party vendor's system that do not use the standard 0x8100 ethertype to identify 802.1q-tagged frames.")
mibBuilder.exportSymbols("ELTEX-MES-IF-EXTENSION-MIB", eltMesIfExtDot1q=eltMesIfExtDot1q, eltIfDot1qCustomIngressEtherTypeEntry=eltIfDot1qCustomIngressEtherTypeEntry, eltIfDot1qCustomIngressEtherType2=eltIfDot1qCustomIngressEtherType2, eltMesIfExtDot1qCustomEtherType=eltMesIfExtDot1qCustomEtherType, eltIfDot1qCustomIngressEtherType3=eltIfDot1qCustomIngressEtherType3, eltIfDot1qCustomIngressEtherType1=eltIfDot1qCustomIngressEtherType1, eltIfDot1qIngressCvlanTable=eltIfDot1qIngressCvlanTable, eltIfDot1qCustomIngressEtherType7=eltIfDot1qCustomIngressEtherType7, eltMesIfExtensionMIBObjects=eltMesIfExtensionMIBObjects, eltIfDot1qCustomEgressEtherTypeTable=eltIfDot1qCustomEgressEtherTypeTable, eltIfDot1qIngressCvlanEntry=eltIfDot1qIngressCvlanEntry, eltIfDot1qIngressCvlanTag=eltIfDot1qIngressCvlanTag, eltIfDot1qCustomIngressEtherType5=eltIfDot1qCustomIngressEtherType5, eltIfDot1qCustomIngressEtherType6=eltIfDot1qCustomIngressEtherType6, eltIfDot1qCustomIngressEtherTypeTable=eltIfDot1qCustomIngressEtherTypeTable, eltIfDot1qCustomEgressEtherType=eltIfDot1qCustomEgressEtherType, eltIfDot1qCustomIngressEtherType4=eltIfDot1qCustomIngressEtherType4, eltIfDot1qCustomEgressEtherTypeEntry=eltIfDot1qCustomEgressEtherTypeEntry)
