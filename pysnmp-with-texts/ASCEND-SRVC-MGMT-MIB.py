#
# PySNMP MIB module ASCEND-SRVC-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-SRVC-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
srvcMgmtGroup, = mibBuilder.importSymbols("ASCEND-MIB", "srvcMgmtGroup")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, MibIdentifier, Bits, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, iso, Counter32, NotificationType, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "MibIdentifier", "Bits", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "iso", "Counter32", "NotificationType", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dnisMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 26, 1))
dnisMgmtGlobalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnisMgmtGlobalEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: dnisMgmtGlobalEnabled.setDescription("This is to enable the DNIS global management. If the 'dnisGlobalEnabled' is set to true then the DNIS management is controlled by the policy set up on the Network Management station to manage the resource plant as a whole. If the 'dnisGlobalEnabled' is set to false, then the DNIS limitation is controlled by the policy set up in the local profile under Ethernet->Mod Config->DNIS options. Note that this option only exist on the MAX 400x/600x Series. As for TNT all incoming calls will be accepted.")
dnisMgmtGlobalNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 529, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnisMgmtGlobalNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: dnisMgmtGlobalNumEntries.setDescription('The number of entries present in the dnisGlobalTable.')
dnisMgmtGlobalLastChange = MibScalar((1, 3, 6, 1, 4, 1, 529, 26, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnisMgmtGlobalLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: dnisMgmtGlobalLastChange.setDescription('The value of sysUpTime at the time of the last creation or deletion of an entry in the dnisMgmtGlobalTable. If the number of entries has been unchanged since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
dnisMgmtGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 529, 26, 1, 4), )
if mibBuilder.loadTexts: dnisMgmtGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: dnisMgmtGlobalTable.setDescription('This table contains one entry for each DNIS that has connected with a NAS.')
dnisMgmtGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 26, 1, 4, 1), ).setIndexNames((0, "ASCEND-SRVC-MGMT-MIB", "dnisGlobalPhoneNumber"))
if mibBuilder.loadTexts: dnisMgmtGlobalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dnisMgmtGlobalEntry.setDescription('An entry in the DNIS Management global table.')
dnisGlobalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 26, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnisGlobalIndex.setStatus('deprecated')
if mibBuilder.loadTexts: dnisGlobalIndex.setDescription("An unique value, greater than zero, for each DNIS phone number. The value ranges from 1 to 'dnisMgmtGlobalNumEntries' and identifies which DNIS phone number is associated with. It is recommended that the value are assigned continuously starting from 1. The value must remain constant at least from one re-intialization of the entity's network management system to the next re-intialization. Note: This attribute is no longer used as an index in this table. It always returns 1.")
dnisGlobalPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 26, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnisGlobalPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dnisGlobalPhoneNumber.setDescription('4 to 24 digits number. The DNIS is the phone number dialed to access to the hunt group. This number is extracted from incoming calls or from dnisGlobalActioni. Note that if this number contains characters other than digits, the agent returns error. ')
dnisGlobalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 26, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnisGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dnisGlobalStatus.setDescription('The status of this DNIS phone number. When set to enabled, calls on this DNIS will be answered. When set to disabled, calls will be dropped and the fast busy signal will be generated. Applied only when the dnisMgmtGlobalEnabled is set to true(1).')
dnisGlobalCallsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 26, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnisGlobalCallsAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: dnisGlobalCallsAccepted.setDescription('The number of calls that has been accepted by this DNIS.')
dnisGlobalCallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 26, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnisGlobalCallsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: dnisGlobalCallsDropped.setDescription('The number of calls that has been dropped by this DNIS.')
dnisGlobalAction = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 26, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnisGlobalAction.setStatus('mandatory')
if mibBuilder.loadTexts: dnisGlobalAction.setDescription('To add/delete an entry (row) in the dnisGlobalTable.')
dnisGlobalStatusTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 26, 1, 4, 1, 7), TimeTicks().clone(360000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnisGlobalStatusTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: dnisGlobalStatusTimeout.setDescription('This timeout is applied to the dnis if its dnisGlobalStatus is set to disabled(2). After the timeout expires, this dnis changes its dnisGlobalStatus to enabled(1). This timeout may be set at any time, even if the previous one has not yet expired. If this timeout is not set by user at the time dnisGlobalStatus set to disabled(2), it is set to its default value. Note: When being read, this attribute shows the time interval remaining till expiration.')
mibBuilder.exportSymbols("ASCEND-SRVC-MGMT-MIB", dnisGlobalAction=dnisGlobalAction, dnisGlobalPhoneNumber=dnisGlobalPhoneNumber, dnisMgmtGlobalLastChange=dnisMgmtGlobalLastChange, dnisGlobalIndex=dnisGlobalIndex, dnisGlobalStatusTimeout=dnisGlobalStatusTimeout, dnisGlobalCallsAccepted=dnisGlobalCallsAccepted, dnisGlobalCallsDropped=dnisGlobalCallsDropped, dnisMgmtGlobalEnabled=dnisMgmtGlobalEnabled, dnisMgmt=dnisMgmt, dnisMgmtGlobalNumEntries=dnisMgmtGlobalNumEntries, dnisMgmtGlobalTable=dnisMgmtGlobalTable, dnisGlobalStatus=dnisGlobalStatus, dnisMgmtGlobalEntry=dnisMgmtGlobalEntry)
