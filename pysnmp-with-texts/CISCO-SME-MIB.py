#
# PySNMP MIB module CISCO-SME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SME-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcNameId, = mibBuilder.importSymbols("CISCO-ST-TC", "FcNameId")
ifDescr, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, ModuleIdentity, Bits, Integer32, Unsigned32, ObjectIdentity, Counter32, Counter64, IpAddress, MibIdentifier, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Bits", "Integer32", "Unsigned32", "ObjectIdentity", "Counter32", "Counter64", "IpAddress", "MibIdentifier", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
StorageType, RowStatus, DisplayString, TruthValue, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "DisplayString", "TruthValue", "TextualConvention", "TimeStamp")
ciscoSmeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 632))
ciscoSmeMIB.setRevisions(('2008-03-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSmeMIB.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: ciscoSmeMIB.setLastUpdated('200803280000Z')
if mibBuilder.loadTexts: ciscoSmeMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoSmeMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoSmeMIB.setDescription('MIB module to manage Storage Media Encryption (SME) service. SME is an encryption service provided by an encryption node residing on a linecard in a storage device. It receives clear-text data from host, encrypts it, then sends it to be written to tape or disk. It does the reverse in the opposite direction so the service is completely transparent to the host. The purpose of this service is to enhance data security in case the tape or disk is lost or stolen. As with any important service, user requires that it provides some level of fault tolerant in a graceful manner. SME provides this by allowing encryption nodes to be grouped into cluster. Nodes in the same cluster immediately pick up the work of a failed node so user does not see service disruption.')
ciscoSmeMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 632, 0))
ciscoSmeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 632, 1))
ciscoSmeMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 632, 2))
cSmeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1))
class CiscoSmeInterfaceStatus(TextualConvention, Integer32):
    description = "Operational state of the SME interface. 'unknown(1)' -- interface is in an unknown state 'initializing(2)' -- interface is being initialized 'offline(3)' -- interface is not active 'online(4)' -- interface is online and can be used"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("initializing", 2), ("offline", 3), ("online", 4))

class CiscoSmeClusterStatus(TextualConvention, Integer32):
    description = "Operational state of the SME cluster 'unknown(1)' -- cluster is in an unknown state 'inactive(2)' -- cluster is not active 'degraded(3)' -- cluster has lost some of its members 'recovery(4)' -- cluster is recovering from membership lost 'active(5)' -- cluster is active"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("inactive", 2), ("degraded", 3), ("recovery", 4), ("active", 5))

class CiscoSmeClusterIndex(TextualConvention, OctetString):
    description = 'This denotes the globally unique index for a SME cluster. The value of the CiscoSmeClusterIndex is a thirty-two-octet unsigned integer value encoded in a network-byte order.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(32, 32)
    fixedLength = 32

cSmeClusterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1), )
if mibBuilder.loadTexts: cSmeClusterTable.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterTable.setDescription('This table lists all the SME clusters that are configured on this device. As with any important service, user requires that it provides some level of fault tolerant in a graceful manner. SME provides this by allowing encryption nodes to be grouped into cluster. Nodes in the same cluster immediately pick up the work of a failed node so user does not see service disruption.')
cSmeClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-SME-MIB", "cSmeClusterId"))
if mibBuilder.loadTexts: cSmeClusterEntry.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterEntry.setDescription('A conceptual row in the cSmeClusterTable. Each row represents a SME cluster in the system and provides the runtime and configuration information of a cluster.')
cSmeClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1, 1, 1), CiscoSmeClusterIndex())
if mibBuilder.loadTexts: cSmeClusterId.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterId.setDescription('Globally unique index that identifies a SME cluster. This index must be generated in such a way that the same value is never reused even after cluster has been deleted.')
cSmeClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeClusterName.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterName.setDescription('The name of the SME cluster.')
cSmeClusterState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1, 1, 3), CiscoSmeClusterStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeClusterState.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterState.setDescription('The operational state of the SME cluster.')
cSmeClusterMasterInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeClusterMasterInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterMasterInetAddrType.setDescription('The type of Internet address of the SME cluster master. The Internet address of SME cluster master is specified by the value of the corresponding instance of cSmeClusterMasterInetAddr.')
cSmeClusterMasterInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeClusterMasterInetAddr.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterMasterInetAddr.setDescription('The Internet address of the SME cluster master device. The type of this Internet address is determined by the value of the corresponding instance of cSmeClusterMasterInetAddrType.')
cSmeClusterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeClusterStorageType.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cSmeClusterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeClusterRowStatus.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterRowStatus.setDescription('The status of this conceptual row. There is no restriction on the value of other columns before a newly created row can be made active.')
cSmeClusterMembersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2), )
if mibBuilder.loadTexts: cSmeClusterMembersTable.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterMembersTable.setDescription('This table lists the information of devices, local or remote, which are members of SME clusters configured on a device.')
cSmeClusterMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-SME-MIB", "cSmeClusterId"), (0, "CISCO-SME-MIB", "cSmeMemberInetAddrType"), (0, "CISCO-SME-MIB", "cSmeMemberInetAddr"))
if mibBuilder.loadTexts: cSmeClusterMembersEntry.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterMembersEntry.setDescription('A conceptual row in the cSmeClusterMembersTable. Each row represents a member device within a specified SME Cluster.')
cSmeMemberInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cSmeMemberInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cSmeMemberInetAddrType.setDescription('The type of Internet address of a cluster member within a specified SME cluster. The Internet address of this device is specified by the value of the corresponding instance of cSmeMemberInetAddr.')
cSmeMemberInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: cSmeMemberInetAddr.setStatus('current')
if mibBuilder.loadTexts: cSmeMemberInetAddr.setDescription('The Internet address of the cluster member device within a specified SME cluster. The type of this Internet address is determined by the value of the corresponding instance of cSmeMemberInetAddrType.')
cSmeFabric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeFabric.setStatus('current')
if mibBuilder.loadTexts: cSmeFabric.setDescription('Refers to the name of physical fibre channel fabric in the SAN. A typical SAN deployment consists of a dual fabric topology which corresponds to two physical fabrics. In such a deployment, a VSAN and a cluster is configured in both fabrics to allow multi-pathing and redundancy. The user specifies the physical fabric to which a device belongs to when the cluster is configured.')
cSmeIsMemberLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeIsMemberLocal.setStatus('current')
if mibBuilder.loadTexts: cSmeIsMemberLocal.setDescription("Identifies if the device is a local or remote member of this cluster. 'true' means this device is a local device. 'false' means this device is a remote device.")
cSmeMemberIsMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeMemberIsMaster.setStatus('current')
if mibBuilder.loadTexts: cSmeMemberIsMaster.setDescription("Indicates if this device is currently the master of the SME cluster. The value 'true' means this device is the master. The value 'false' means this device is not the master. Devices in a cluster select one of the cluster member to be a master. The master is responsible for handling cluster membership.")
cSmeClusterMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeClusterMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterMemberStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cSmeClusterMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeClusterMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterMemberRowStatus.setDescription('The status of this conceptual row. There is no restriction on the value of other columns before a newly created row can be made active. When a cluster is deleted, all entries in this table should be purged automatically.')
cSmeClusterMemberIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 3), )
if mibBuilder.loadTexts: cSmeClusterMemberIfTable.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterMemberIfTable.setDescription('This table lists the information of SME interfaces on all devices, local or remote, which are members of SME clusters configured on a device.')
cSmeClusterMemberIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-SME-MIB", "cSmeClusterId"), (0, "CISCO-SME-MIB", "cSmeMemberInetAddrType"), (0, "CISCO-SME-MIB", "cSmeMemberInetAddr"), (0, "CISCO-SME-MIB", "cSmeClusterInterfaceIndex"))
if mibBuilder.loadTexts: cSmeClusterMemberIfEntry.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterMemberIfEntry.setDescription('A conceptual row in the cSmeClusterMemberIfTable. Each row represents a participating interface on local/remote device member within the specified SME cluster.')
cSmeClusterInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cSmeClusterInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterInterfaceIndex.setDescription('A unique Interface index for a SME interface on a device in this cluster. This is the same as ifIndex of the ifTable of RFC1213.')
cSmeClusterInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 3, 1, 2), CiscoSmeInterfaceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeClusterInterfaceState.setStatus('current')
if mibBuilder.loadTexts: cSmeClusterInterfaceState.setDescription('The operational state of this SME interface.')
cSmeInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 4), )
if mibBuilder.loadTexts: cSmeInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cSmeInterfaceTable.setDescription('This table lists all SME interfaces on the local device and its corresponding information.')
cSmeInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-SME-MIB", "cSmeInterfaceIndex"))
if mibBuilder.loadTexts: cSmeInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cSmeInterfaceEntry.setDescription('A conceptual row in the cSmeInterfaceTable. Each row represents a particular SME interface on a local device.')
cSmeInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cSmeInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cSmeInterfaceIndex.setDescription('A unique Interface index for a SME interface on this device. This is the same as ifIndex of the ifTable of RFC1213.')
cSmeInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 4, 1, 2), CiscoSmeInterfaceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeInterfaceState.setStatus('current')
if mibBuilder.loadTexts: cSmeInterfaceState.setDescription('Operational state of this SME interface.')
cSmeInterfaceClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 4, 1, 3), CiscoSmeClusterIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeInterfaceClusterId.setStatus('current')
if mibBuilder.loadTexts: cSmeInterfaceClusterId.setDescription('Identifies the cluster to which this SME interface belongs.')
cSmeInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 4, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeInterfaceStorageType.setStatus('current')
if mibBuilder.loadTexts: cSmeInterfaceStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cSmeInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cSmeInterfaceRowStatus.setDescription('The status of this conceptual row. There is no restriction on the value of other columns before a newly created row can be made active. For example, cSmeInterfaceClusterId column can be set independently later.')
cSmeHostPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 5), )
if mibBuilder.loadTexts: cSmeHostPortTable.setStatus('current')
if mibBuilder.loadTexts: cSmeHostPortTable.setDescription('This table lists the hosts that are configured for SME. In the case of application servers, the disks that are accessed by the hosts may be encrypted. In the case of backup/restore master/media servers, the tapes accessed by the hosts may be encrypted.')
cSmeHostPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-SME-MIB", "cSmeHostPortName"))
if mibBuilder.loadTexts: cSmeHostPortEntry.setStatus('current')
if mibBuilder.loadTexts: cSmeHostPortEntry.setDescription('A conceptual row in the cSmeHostPortTable. Each row represents a particular host configured for SME service in a particular cluster.')
cSmeHostPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 5, 1, 1), FcNameId())
if mibBuilder.loadTexts: cSmeHostPortName.setStatus('current')
if mibBuilder.loadTexts: cSmeHostPortName.setDescription('Fibre-channel Port name (P_WWN) of the Host Nx_Port.')
cSmeHostPortClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 5, 1, 2), CiscoSmeClusterIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeHostPortClusterId.setStatus('current')
if mibBuilder.loadTexts: cSmeHostPortClusterId.setDescription('Identifies the cluster to which this host port belongs.')
cSmeHostPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 5, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeHostPortStorageType.setStatus('current')
if mibBuilder.loadTexts: cSmeHostPortStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cSmeHostPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cSmeHostPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: cSmeHostPortRowStatus.setDescription('The status of this conceptual row. There is no restriction on the value of other columns before a newly created row can be made active.')
cSmeConfigTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeConfigTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: cSmeConfigTableLastChanged.setDescription('The value of sysUpTime when a change to any SME MIB table other than the cSmeHostPortTable last occurred.')
cSmeHostPortTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSmeHostPortTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: cSmeHostPortTableLastChanged.setDescription('The value of sysUpTime when a change to cSmeHostPortTable last occurred.')
cSmeNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 632, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSmeNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cSmeNotifyEnable.setDescription("This object specifies if the SME notifications should be generated or not. If the value of this object is 'true', then the notifications are generated. If the value of this object is 'false, then the notifications are not generated.")
ciscoSmeInterfaceCreate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 632, 0, 1)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSmeInterfaceCreate.setStatus('current')
if mibBuilder.loadTexts: ciscoSmeInterfaceCreate.setDescription('This notification is generated when a SME interface associated with a local device is created.')
ciscoSmeInterfaceDelete = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 632, 0, 2)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSmeInterfaceDelete.setStatus('current')
if mibBuilder.loadTexts: ciscoSmeInterfaceDelete.setDescription('This notification is generated when a SME interface associated with a local device is deleted.')
ciscoSmeClusterNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 632, 0, 3)).setObjects(("CISCO-SME-MIB", "cSmeClusterName"), ("CISCO-SME-MIB", "cSmeClusterMasterInetAddrType"), ("CISCO-SME-MIB", "cSmeClusterMasterInetAddr"))
if mibBuilder.loadTexts: ciscoSmeClusterNewMaster.setStatus('current')
if mibBuilder.loadTexts: ciscoSmeClusterNewMaster.setDescription('This notification is generated when the sending device who is participating in a SME cluster has transitioned to be the master of the cluster.')
ciscoSmeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 632, 2, 1))
ciscoSmeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 632, 2, 2))
ciscoSmeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 632, 2, 1, 1)).setObjects(("CISCO-SME-MIB", "ciscoSmeConfigGroup"), ("CISCO-SME-MIB", "ciscoSmeNotifControlGroup"), ("CISCO-SME-MIB", "ciscoSmeNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmeMIBCompliance = ciscoSmeMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSmeMIBCompliance.setDescription('The compliance statement for entities that implement SME.')
ciscoSmeConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 632, 2, 2, 1)).setObjects(("CISCO-SME-MIB", "cSmeClusterState"), ("CISCO-SME-MIB", "cSmeClusterMasterInetAddrType"), ("CISCO-SME-MIB", "cSmeClusterMasterInetAddr"), ("CISCO-SME-MIB", "cSmeIsMemberLocal"), ("CISCO-SME-MIB", "cSmeClusterInterfaceState"), ("CISCO-SME-MIB", "cSmeInterfaceState"), ("CISCO-SME-MIB", "cSmeInterfaceClusterId"), ("CISCO-SME-MIB", "cSmeHostPortClusterId"), ("CISCO-SME-MIB", "cSmeConfigTableLastChanged"), ("CISCO-SME-MIB", "cSmeHostPortTableLastChanged"), ("CISCO-SME-MIB", "cSmeFabric"), ("CISCO-SME-MIB", "cSmeClusterName"), ("CISCO-SME-MIB", "cSmeInterfaceRowStatus"), ("CISCO-SME-MIB", "cSmeClusterRowStatus"), ("CISCO-SME-MIB", "cSmeMemberIsMaster"), ("CISCO-SME-MIB", "cSmeClusterMemberRowStatus"), ("CISCO-SME-MIB", "cSmeClusterStorageType"), ("CISCO-SME-MIB", "cSmeClusterMemberStorageType"), ("CISCO-SME-MIB", "cSmeInterfaceStorageType"), ("CISCO-SME-MIB", "cSmeHostPortStorageType"), ("CISCO-SME-MIB", "cSmeHostPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmeConfigGroup = ciscoSmeConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSmeConfigGroup.setDescription('A collection of objects for SME configuration.')
ciscoSmeNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 632, 2, 2, 2)).setObjects(("CISCO-SME-MIB", "cSmeNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmeNotifControlGroup = ciscoSmeNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSmeNotifControlGroup.setDescription('A collection of objects for controlling SME notification.')
ciscoSmeNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 632, 2, 2, 3)).setObjects(("CISCO-SME-MIB", "ciscoSmeInterfaceCreate"), ("CISCO-SME-MIB", "ciscoSmeInterfaceDelete"), ("CISCO-SME-MIB", "ciscoSmeClusterNewMaster"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmeNotifsGroup = ciscoSmeNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSmeNotifsGroup.setDescription('A collection of objects for notification of SME events.')
mibBuilder.exportSymbols("CISCO-SME-MIB", cSmeClusterMemberStorageType=cSmeClusterMemberStorageType, cSmeClusterTable=cSmeClusterTable, cSmeHostPortStorageType=cSmeHostPortStorageType, PYSNMP_MODULE_ID=ciscoSmeMIB, ciscoSmeNotifsGroup=ciscoSmeNotifsGroup, ciscoSmeConfigGroup=ciscoSmeConfigGroup, cSmeClusterStorageType=cSmeClusterStorageType, ciscoSmeInterfaceCreate=ciscoSmeInterfaceCreate, cSmeClusterEntry=cSmeClusterEntry, cSmeHostPortTable=cSmeHostPortTable, cSmeClusterMembersEntry=cSmeClusterMembersEntry, cSmeIsMemberLocal=cSmeIsMemberLocal, cSmeHostPortName=cSmeHostPortName, cSmeConfigTableLastChanged=cSmeConfigTableLastChanged, cSmeInterfaceIndex=cSmeInterfaceIndex, cSmeClusterInterfaceIndex=cSmeClusterInterfaceIndex, cSmeClusterMemberRowStatus=cSmeClusterMemberRowStatus, ciscoSmeClusterNewMaster=ciscoSmeClusterNewMaster, ciscoSmeMIB=ciscoSmeMIB, cSmeClusterInterfaceState=cSmeClusterInterfaceState, cSmeMemberIsMaster=cSmeMemberIsMaster, ciscoSmeInterfaceDelete=ciscoSmeInterfaceDelete, ciscoSmeMIBGroups=ciscoSmeMIBGroups, cSmeClusterMemberIfEntry=cSmeClusterMemberIfEntry, cSmeClusterMasterInetAddr=cSmeClusterMasterInetAddr, CiscoSmeClusterStatus=CiscoSmeClusterStatus, cSmeMemberInetAddrType=cSmeMemberInetAddrType, ciscoSmeNotifControlGroup=ciscoSmeNotifControlGroup, cSmeClusterMasterInetAddrType=cSmeClusterMasterInetAddrType, cSmeClusterName=cSmeClusterName, cSmeHostPortEntry=cSmeHostPortEntry, ciscoSmeMIBCompliance=ciscoSmeMIBCompliance, cSmeConfig=cSmeConfig, cSmeClusterId=cSmeClusterId, CiscoSmeInterfaceStatus=CiscoSmeInterfaceStatus, cSmeFabric=cSmeFabric, ciscoSmeMIBNotifs=ciscoSmeMIBNotifs, CiscoSmeClusterIndex=CiscoSmeClusterIndex, cSmeInterfaceState=cSmeInterfaceState, cSmeInterfaceStorageType=cSmeInterfaceStorageType, cSmeInterfaceTable=cSmeInterfaceTable, cSmeNotifyEnable=cSmeNotifyEnable, cSmeMemberInetAddr=cSmeMemberInetAddr, cSmeClusterMemberIfTable=cSmeClusterMemberIfTable, cSmeInterfaceEntry=cSmeInterfaceEntry, cSmeClusterMembersTable=cSmeClusterMembersTable, cSmeHostPortRowStatus=cSmeHostPortRowStatus, cSmeInterfaceRowStatus=cSmeInterfaceRowStatus, cSmeInterfaceClusterId=cSmeInterfaceClusterId, cSmeHostPortClusterId=cSmeHostPortClusterId, ciscoSmeMIBConform=ciscoSmeMIBConform, ciscoSmeMIBObjects=ciscoSmeMIBObjects, cSmeHostPortTableLastChanged=cSmeHostPortTableLastChanged, ciscoSmeMIBCompliances=ciscoSmeMIBCompliances, cSmeClusterState=cSmeClusterState, cSmeClusterRowStatus=cSmeClusterRowStatus)
