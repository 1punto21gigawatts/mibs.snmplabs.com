#
# PySNMP MIB module A3COM-HUAWEI-CBQOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-CBQOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:03:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
hwQoS, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "hwQoS")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Integer32, ObjectIdentity, TimeTicks, MibIdentifier, NotificationType, Gauge32, IpAddress, Counter32, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "ObjectIdentity", "TimeTicks", "MibIdentifier", "NotificationType", "Gauge32", "IpAddress", "Counter32", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits")
RowStatus, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TextualConvention", "DisplayString")
hwCBQoSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1))
if mibBuilder.loadTexts: hwCBQoSMIB.setLastUpdated('200404100000Z')
if mibBuilder.loadTexts: hwCBQoSMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwCBQoSMIB.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwCBQoSMIB.setDescription('The A3COM-HUAWEI-CBQOS-MIB contains objects to Manage configuration and Monitor running state for Class Based QoS feature. ********************************* MIB Tables ********************************** This MIB consists of the following tables: 1 : hwCBQoSClassifierCfgInfoTable 2 : hwCBQoSMatchRuleCfgInfoTable 3 : hwCBQoSBehaviorCfgInfoTable 4 : hwCBQoSCarCfgInfoTable 5 : hwCBQoSGtsCfgInfoTable 6 : hwCBQoSRemarkCfgInfoTable 7 : hwCBQoSQueueCfgInfoTable 8 : hwCBQoSWredCfgInfoTable 9 : hwCBQoSWredClassCfgInfoTable 10: hwCBQoSPolicyRouteCfgInfoTable 11: hwCBQoSNatCfgInfoTable 12: hwCBQoSFirewallCfgInfoTable 13: hwCBQoSSamplingCfgInfoTable 14: hwCBQoSPolicyCfgInfoTable 15: hwCBQoSPolicyClassCfgInfoTable 16: hwCBQoSIfApplyPolicyTable 17: hwCBQoSAtmPvcApplyPolicyTable 18: hwCBQoSIfVlanApplyPolicyTable 19: hwCBQoSFrClassApplyPolicyTable 20: hwCBQoSFrPvcApplyPolicyTable 21: hwCBQoSIfCbqRunInfoTable 22: hwCBQoSIfClassMatchRunInfoTable 23: hwCBQoSIfCarRunInfoTable 24: hwCBQoSIfGtsRunInfoTable 25: hwCBQoSIfRemarkRunInfoTable 26: hwCBQoSIfQueueRunInfoTable 27: hwCBQoSIfWredRunInfoTable 28: hwCBQoSAtmPvcCbqRunInfoTable 29: hwCBQoSAtmPvcClassMatchRunInfoTable 30: hwCBQoSAtmPvcCarRunInfoTable 31: hwCBQoSAtmPvcGtsRunInfoTable 32: hwCBQoSAtmPvcRemarkRunInfoTable 33: hwCBQoSAtmPvcQueueRunInfoTable 34: hwCBQoSAtmPvcWredRunInfoTable 35: hwCBQoSFrPvcCbqRunInfoTable 36: hwCBQoSFrPvcClassMatchRunInfoTable 37: hwCBQoSFrPvcCarRunInfoTable 38: hwCBQoSFrPvcGtsRunInfoTable 39: hwCBQoSFrPvcRemarkRunInfoTable 40: hwCBQoSFrPvcQueueRunInfoTable 41: hwCBQoSFrPvcWredRunInfoTable 42: hwCBQoSIfVlanClassMatchRunInfoTable Software QoS supports the following tables: 1 : hwCBQoSClassifierCfgInfoTable 2 : hwCBQoSMatchRuleCfgInfoTable 3 : hwCBQoSBehaviorCfgInfoTable 4 : hwCBQoSCarCfgInfoTable 5 : hwCBQoSGtsCfgInfoTable 6 : hwCBQoSRemarkCfgInfoTable 7 : hwCBQoSQueueCfgInfoTable 8 : hwCBQoSWredCfgInfoTable 9 : hwCBQoSWredClassCfgInfoTable 14: hwCBQoSPolicyCfgInfoTable 15: hwCBQoSPolicyClassCfgInfoTable 16: hwCBQoSIfApplyPolicyTable 17: hwCBQoSAtmPvcApplyPolicyTable 19: hwCBQoSFrClassApplyPolicyTable 20: hwCBQoSFrPvcApplyPolicyTable 21: hwCBQoSIfCbqRunInfoTable 22: hwCBQoSIfClassMatchRunInfoTable 23: hwCBQoSIfCarRunInfoTable 24: hwCBQoSIfGtsRunInfoTable 25: hwCBQoSIfRemarkRunInfoTable 26: hwCBQoSIfQueueRunInfoTable 27: hwCBQoSIfWredRunInfoTable 28: hwCBQoSAtmPvcCbqRunInfoTable 29: hwCBQoSAtmPvcClassMatchRunInfoTable 30: hwCBQoSAtmPvcCarRunInfoTable 31: hwCBQoSAtmPvcGtsRunInfoTable 32: hwCBQoSAtmPvcRemarkRunInfoTable 33: hwCBQoSAtmPvcQueueRunInfoTable 34: hwCBQoSAtmPvcWredRunInfoTable 35: hwCBQoSFrPvcCbqRunInfoTable 36: hwCBQoSFrPvcClassMatchRunInfoTable 37: hwCBQoSFrPvcCarRunInfoTable 38: hwCBQoSFrPvcGtsRunInfoTable 39: hwCBQoSFrPvcRemarkRunInfoTable 40: hwCBQoSFrPvcQueueRunInfoTable 41: hwCBQoSFrPvcWredRunInfoTable Hardware QoS supports the following tables: 1 : hwCBQoSClassifierCfgInfoTable 2 : hwCBQoSMatchRuleCfgInfoTable 3 : hwCBQoSBehaviorCfgInfoTable 4 : hwCBQoSCarCfgInfoTable 6 : hwCBQoSRemarkCfgInfoTable 10: hwCBQoSPolicyRouteCfgInfoTable 11: hwCBQoSNatCfgInfoTable 12: hwCBQoSFirewallCfgInfoTable 13: hwCBQoSSamplingCfgInfoTable 14: hwCBQoSPolicyCfgInfoTable 15: hwCBQoSPolicyClassCfgInfoTable 16: hwCBQoSIfApplyPolicyTable 18: hwCBQoSIfVlanApplyPolicyTable 22: hwCBQoSIfClassMatchRunInfoTable 42: hwCBQoSIfVlanClassMatchRunInfoTable ')
class MatchRuleType(TextualConvention, Integer32):
    description = 'Type of Match Rule.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 25))
    namedValues = NamedValues(("typeAny", 1), ("typeAcl", 2), ("typeRtpPort", 3), ("typeProtocol", 4), ("typeIpPrec", 5), ("typeDscp", 6), ("typeVlan8021p", 7), ("typeMplsExp", 8), ("typeSourceMac", 9), ("typeDestinationMac", 10), ("typeClassifier", 11), ("typeInboundInterface", 12), ("typeMacGroup", 13), ("typeMatchDe", 16), ("typeMatchClp", 17), ("typeOutboundInterface", 25))

class CarAction(TextualConvention, Integer32):
    description = 'The actions taken when packets conforming or exceeding the configured CIR: pass (1), discard (2), remark IP Precedence (3), remark DSCP(4), remark Mpls Exp(5), remark (6) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("pass", 1), ("discard", 2), ("remarkIpPrec", 3), ("remarkDscp", 4), ("remarkMplsExp", 5), ("remark", 6))

class RemarkType(TextualConvention, Integer32):
    description = 'typeIpPrec(1) typeDscp(2) typeMplsExp(3) typeVlan8021p(4) typeAtmClp(5) typeFrDe(6) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("typeIpPrec", 1), ("typeDscp", 2), ("typeMplsExp", 3), ("typeVlan8021p", 4), ("typeAtmClp", 5), ("typeFrDe", 6))

class WredType(TextualConvention, Integer32):
    description = 'IpPrec Based (1) DSCP Based (2) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("typeIpPrecbased", 1), ("typeDscpbased", 2))

class QueueType(TextualConvention, Integer32):
    description = 'Queueing Type: EF: (1) AF: (2) WFQ: (3) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ef", 1), ("af", 2), ("wfq", 3))

class QueueBandwidthUnit(TextualConvention, Integer32):
    description = 'Bandwidth Unit: Absolute, Unit Kbps (1) Percent, Unit % (2), means the percentage of the reserved bandwidth besides the part configured for RTP queue. Remaining percent, Unit % (3), means the percentage of the reserved bandwidth besides the parts configured for EF and RTP queue. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))
    namedValues = NamedValues(("unitUnavailable", -1), ("unitAbsolute", 1), ("unitPercent", 2), ("unitRemainPercent", 3))

class LrCirUnit(TextualConvention, Integer32):
    description = 'CIR Unit: Absolute, Unit bps (1) Percent, Unit % (2) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("absoluteUnitBps", 1), ("percentUnit", 2))

class DirectionType(TextualConvention, Integer32):
    description = 'The Direction Policy apply on.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

hwCBQoSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1))
hwCBQoSClassifierObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1))
hwCBQoSClassifierIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierIndexNext.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierIndexNext.setDescription('This object contains an appropriate value to be used for hwCBQoSClassifierIndex when creating rows in the hwCBQoSClassifierCfgInfoTable. Begin with 0.')
hwCBQoSClassifierCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoTable.setDescription('A table of Traffic Classifier configuration information.')
hwCBQoSClassifierCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSClassifierIndex"))
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierCfgInfoEntry.setDescription('Traffic Classifier Configuration Information Entry.')
hwCBQoSClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierIndex.setDescription('Index of Traffic Classifier. Begin with 0.')
hwCBQoSClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierName.setDescription('Name of Traffic Classifier.')
hwCBQoSClassifierRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSClassifierRuleCount.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierRuleCount.setDescription('The count of match rules of Traffic classifier. It can be used for hwCBQoSMatchRuleIndex when creating rows in the hwCBQoSMatchRuleCfgInfoTable. Begin with 0.')
hwCBQoSClassifierOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("and", 1), ("or", 2))).clone('and')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierOperator.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierOperator.setDescription('Operator of the match rules of traffic classifier. Software QoS support and,or. Hardware QoS support and.')
hwCBQoSClassifierLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("unavailable", -1), ("l2", 1), ("l3", 2), ("both", 3))).clone('l3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierLayer.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierLayer.setDescription("Configuration layer of traffic classifier. Only hardware QoS support it. -1(unavailable) is returned only when getting value from software QoS. -1(unavailable) can't be set.")
hwCBQoSClassifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSClassifierRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSClassifierRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSMatchRuleCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3), )
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoTable.setDescription('A table of Match Rule configuration information.')
hwCBQoSMatchRuleCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSClassifierIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleCfgInfoEntry.setDescription('Match Rule Configuration Information Entry.')
hwCBQoSMatchRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSMatchRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleIndex.setDescription('Index of Match Rule.')
hwCBQoSMatchRuleIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("match-Not", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIfNot.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleIfNot.setDescription('whether the if-match rule is a Match or Match-Not statement. Software QoS support match,match-Not. Hardware QoS support match.')
hwCBQoSMatchRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 3), MatchRuleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleType.setDescription('Type of Match Rule. typeAny(1) typeAcl(2), typeRtpPort(3), typeProtocol(4), typeIpPrec(5), typeDscp(6), typeVlan8021p(7), typeMplsExp(8), typeSourceMac(9), typeDestinationMac(10), typeClassifier(11), typeInboundInterface(12), typeMacGroup(13), typeMatchDe(16), /* the match rule is FR DE */ typeMatchClp(17), /* the match rule is ATM CLP */ typeOutboundInterface(25) Software QoS supports any type except typeMacGroup. Hardware QoS supports typeAcl,typeDscp,typeMacGroup. ')
hwCBQoSMatchRuleStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleStringValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleStringValue.setDescription("Value of Match Rule. SourceMAC(9): SIZE (12) HHHHHHHHHHHH for example: 010102020303 means the match rule is 'if-match source-mac 0101-0202-0303' DestinationMAC(10): SIZE (12) HHHHHHHHHHHH for example: 010102020303 means the match rule is 'if-match destination-mac 0101-0202-0303' Classifier(11): SIZE (1..31) InboundInterface(12): SIZE (1..47) typeOutboundInterface(25): SIZE (1..47) other type: Set is not permitted. Zero-length String will be returned when getting. ")
hwCBQoSMatchRuleIntValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue1.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue1.setDescription("Value of Match Rule. Acl(2): Software QoS: 2000~3999 Hardware Qos: 10000~42767 RtpPort(3): start-port: 2000~65535 Protocol(4): 1(Ip) IpPrec(5): value:0~7, up to 8 value can be input. The bit set to 1 of the last 8 bits of hwCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. For example: 0x00000053(Binary format is 01010011) means the match rule is 'if-match ip-prec 0 1 4 6' Dscp(6): value:0~63,up to 8 value can be input. The bit set to 1 of hwCBQoSMatchRuleIntValue1 is used to indicate the value 32~63. The bit set to 1 of hwCBQoSMatchRuleIntValue2 is used to indicate the value 0~31. For example: 0x80000003 means the match rule is 'if-match dscp 32 33 63' Vlan8021p(7): value:0~7, up to 8 value can be input. The bit set to 1 of the last 8 bits of hwCBQoSMatchRuleIntValue1 is used to indicate the 8 value 0~7. For example: 0x53(Binary format is 01010011) means the match rule is 'if-match vlan 0 1 4 6' MplsExp(8): value:0~7, up to 8 value can be input. The bit set to 1 of the last 8 bits of hwCBQoSMatchRuleIntValue1 is used to indicate the 8 value 0~7. For example: 0x53(Binary format is 01010011) means the match rule is 'if-match mpls 0 1 4 6' MacGroup(13): 1~63 other type: Set is not permitted. 0xffffffff will be returned when getting. ")
hwCBQoSMatchRuleIntValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue2.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleIntValue2.setDescription("Value of Match Rule. RtpPort(3): end-port: 2000~65535 Dscp(6): value:0~63,up to 8 value can be input. The bit set to 1 of hwCBQoSMatchRuleIntValue1 is used to indicate the value 32~63. The bit set to 1 of hwCBQoSMatchRuleIntValue2 is used to indicate the value 0~31. for example: 0x80000003 means the match rule is 'if-match dscp 0 1 31' other type: Set is not permitted. 0xffffffff will be returned when getting. ")
hwCBQoSMatchRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSMatchRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSMatchRuleRowStatus.setDescription('RowStatus for Match Rule Table. Three actions are used: active, createAndGo, destroy')
hwCBQoSBehaviorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2))
hwCBQoSBehaviorIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSBehaviorIndexNext.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorIndexNext.setDescription('This object contains an appropriate value to be used for hwCBQoSBehaviorIndex when creating rows in the hwCBQoSBehaviorCfgInfoTable. Begin with 0.')
hwCBQoSBehaviorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoTable.setDescription('A table of Traffic Behavior configuration information.')
hwCBQoSBehaviorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorCfgInfoEntry.setDescription('Traffic Behavior Configuration Information Entry.')
hwCBQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorIndex.setDescription('Index of Traffic Behavior.')
hwCBQoSBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSBehaviorName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorName.setDescription('Name of Traffic Behavior.')
hwCBQoSBehaviorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSBehaviorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSBehaviorRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3), )
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoTable.setDescription('A table of CAR feature configuration information.')
hwCBQoSCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarCfgInfoEntry.setDescription('CAR Configuration Information Entry.')
hwCBQoSCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarCir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarCir.setDescription('Committed Information Rate. Unit: kbps. software QoS: 8..155000 hardware QoS: 100..10000000')
hwCBQoSCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 19375000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarCbs.setDescription('Committed Burst Size. Unit: byte software QoS: 1875..19375000 (default:max(cir*125/2,1875)) hardware QoS: 64..131071(default:12288)')
hwCBQoSCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 19375000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarEbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarEbs.setDescription("Excess Burst Size. Unit: byte. 0..19375000 Only software QoS support this node. -1 is returned only when getting value from hardware QoS. -1 can't be set.")
hwCBQoSCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(100, 10000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarPir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarPir.setDescription("Peak Information Rate. Unit: kbps. 100..10000000 Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwCBQoSCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(64, 4000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarPbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarPbs.setDescription("Peak Burst Size. Unit: byte. 64..4000000.(default:cbs when Peak Information Rate configured) Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwCBQoSCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 6), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarGreenAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarGreenAction.setDescription('Green Action: pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark IP Precedence, remark DSCP, remark MPLS EXP. ')
hwCBQoSCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarGreenRemarkValue.setDescription("The value is to remark When green action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. -1 can't be set.")
hwCBQoSCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unavailable", -1), ("pass", 1), ("discard", 2), ("remarkIpPrec", 3), ("remarkDscp", 4), ("remarkMplsExp", 5), ("remark", 6))).clone('remark')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarYellowAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarYellowAction.setDescription("Yellow Action: unavailable(-1) pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark(6) Only hardware QoS support this node. Hardware QoS support pass, discard, remark. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwCBQoSCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 9), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRedAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarRedAction.setDescription('Red Action: pass (1) discard (2) remark IP Precedence (3) remark DSCP (4) remark MPLS EXP (5) remark (6) Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark IP Precedence, remark DSCP, remark MPLS EXP. ')
hwCBQoSCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. -1 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. -1 can't be set.")
hwCBQoSCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSCarRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSGtsCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4), )
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoTable.setDescription('A table of GTS feature configuration information.')
hwCBQoSGtsCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsCfgInfoEntry.setDescription('GTS Configuration Information Entry.')
hwCBQoSGtsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsCir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsCir.setDescription('Committed Information Rate. Unit: bps')
hwCBQoSGtsCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15000, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsCbs.setDescription('Committed Burst Size. Unit: bit default: max(cir*1/2,15000)')
hwCBQoSGtsEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsEbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsEbs.setDescription('Excess Burst Size. Unit: bit')
hwCBQoSGtsQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsQueueLength.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsQueueLength.setDescription('The length of GTS buffer.')
hwCBQoSGtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSGtsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSGtsRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSRemarkCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5), )
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoTable.setDescription('A table of Remarking feature configuration information.')
hwCBQoSRemarkCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSRemarkType"))
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkCfgInfoEntry.setDescription('Remarking Configuration Information Entry.')
hwCBQoSRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5, 1, 1), RemarkType())
if mibBuilder.loadTexts: hwCBQoSRemarkType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkType.setDescription('IpPrec(1) Dscp(2) MplsExp(3) Vlan8021p(4) AtmClp(5) FrDe(6) Hardware QoS support IpPrec, Dscp,MplsExp, Vlan8021p. Software QoS support each type. ')
hwCBQoSRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkValue.setDescription('Value to remark: for IpPrec: 0~7; for Dscp: 0~63; for Vlan8021p: 0~7; for AtmClp: 0~1; for FrDe: 0~1; for MplsExp: 0~7')
hwCBQoSRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSRemarkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSRemarkRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSQueueCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6), )
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoTable.setDescription('A table of queueing feature configuration information.')
hwCBQoSQueueCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueCfgInfoEntry.setDescription('Queue Configuration Information Entry.')
hwCBQoSQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 1), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueType.setDescription('Queueing Type: EF: (1) AF: (2) WFQ: (3)')
hwCBQoSQueueDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("typeUnavailable", -1), ("typeTailDrop", 1), ("typeWred", 2))).clone('typeTailDrop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueDropType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueDropType.setDescription("The drop type of queue. Only valid for AF and WFQ queue. -1 is returned only when getting value about EF queue. -1 can't be set.")
hwCBQoSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 512), )).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueLength.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueLength.setDescription("The length of QueueLength. Only valid for tail-drop type of AF and WFQ queue. -1 is returned only when getting value about EF queue or wred type of AF and WFQ queue. -1 can't be set.")
hwCBQoSQueueBandwidthUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 4), QueueBandwidthUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthUnit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthUnit.setDescription("Bandwidth Unit: Absolute, Unit Kbps (1) Percent, Unit % (2) Remaining percent, Unit % (3) Absolute unit and percent unit are valid for EF and AF queue, but remaining percent unit is only valid for AF queue. -1 is returned only when getting value about WFQ queue. -1 can't be set.")
hwCBQoSQueueBandwidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueBandwidthValue.setDescription("Bandwidth value: Absolute value: 8~1000000. Unit: Kbps Percent value: 1~100. Remaining percent value: 1~100. Absolute value and percent value are valid for EF and AF queue, but remaining percent value is only valid for AF queue. -1 is returned only when getting value about WFQ queue. -1 can't be set.")
hwCBQoSQueueCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(32, 2000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueCbs.setDescription("Committed Burst Size. Unit: byte. Only valid for EF queue. Default:min( Bandwidth*25 , 2000000) -1 is returned only when getting value about AF or WFQ queue. -1 can't be set.")
hwCBQoSQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("unavailable", -1), ("a16", 16), ("a32", 32), ("a64", 64), ("a128", 128), ("a256", 256), ("a512", 512), ("a1024", 1024), ("a2048", 2048), ("a4096", 4096))).clone('a256')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueQueueNumber.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueQueueNumber.setDescription("Max number of hashed queues (a power of 2). Only valid for WFQ. -1 is returned only when getting value about AF or EF queue. -1 can't be set.")
hwCBQoSQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSQueueCbsRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(25, 500), )).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSQueueCbsRatio.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSQueueCbsRatio.setDescription("Committed Burst Size Ratio. Unit: byte. CBS = CBS_Ratio * Bandwidth(kbps) Only valid for EF queue. -1 is returned only when getting value about AF or WFQ queue. -1 can't be set.")
hwCBQoSWredCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 7), )
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoTable.setDescription('A table of WRED configuration information.')
hwCBQoSWredCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredCfgInfoEntry.setDescription('WRED Configuration Information Entry.')
hwCBQoSWredType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 7, 1, 1), WredType().clone('typeIpPrecbased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredType.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredType.setDescription('IP-Prec Based (1) DSCP Based (2)')
hwCBQoSWredWeightConst = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredWeightConst.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredWeightConst.setDescription('Specify weight for calculating mean queue depth.')
hwCBQoSWredClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8), )
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoTable.setDescription('A table of WRED configuration information.')
hwCBQoSWredClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassCfgInfoEntry.setDescription('WRED Class Configuration Information Entry.')
hwCBQoSWredClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwCBQoSWredClassValue.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassValue.setDescription('The class value. For IP precedence based WRED, the class is IP precedence, and range is 0~7. For DSCP based WRED, the class is DSCP, and range is 0~63.')
hwCBQoSWredClassLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassLowLimit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassLowLimit.setDescription('The low limit of queue depth.')
hwCBQoSWredClassHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassHighLimit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassHighLimit.setDescription('The high limit of queue depth.')
hwCBQoSWredClassDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCBQoSWredClassDiscardProb.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSWredClassDiscardProb.setDescription('The discard probability denominator.')
hwCBQoSPolicyRouteCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9), )
if mibBuilder.loadTexts: hwCBQoSPolicyRouteCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyRouteCfgInfoTable.setDescription('A table of Policy Routeing configuration information.')
hwCBQoSPolicyRouteCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyRouteCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyRouteCfgInfoEntry.setDescription('Policy Routeing Configuration Information Entry.')
hwCBQoSPolicyRouteNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRouteNexthop.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyRouteNexthop.setDescription('The next-hop ip address for redirection')
hwCBQoSPolicyRouteBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("notbackup", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRouteBackup.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyRouteBackup.setDescription('Whether forward the packet according to the routing table When the next-hop ip address for redirection is not valid. Backup means forwarding. NoBackup means not forwarding')
hwCBQoSPolicyRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyRouteRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSNatCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10), )
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoTable.setDescription('A table of Nat configuration information.')
hwCBQoSNatCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatCfgInfoEntry.setDescription('Nat Configuration Information Entry.')
hwCBQoSNatMainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatMainNumber.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatMainNumber.setDescription('The main ISP number')
hwCBQoSNatBackupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatBackupNumber.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatBackupNumber.setDescription('The backup ISP number')
hwCBQoSNatServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatServiceClass.setDescription('The service class. DEFVAL: 2')
hwCBQoSNatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNatRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNatRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSFirewallCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 11), )
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoTable.setDescription('A table of Firewall configuration information.')
hwCBQoSFirewallCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 11, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallCfgInfoEntry.setDescription('Firewall Configuration Information Entry.')
hwCBQoSFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFirewallAction.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallAction.setDescription('The firewall action ')
hwCBQoSFirewallRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFirewallRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFirewallRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSSamplingCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 12), )
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoTable.setDescription('A table of Sampling configuration information.')
hwCBQoSSamplingCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 12, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingCfgInfoEntry.setDescription('Sampling Configuration Information Entry.')
hwCBQoSSamplingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSamplingNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingNum.setDescription('The sampling number')
hwCBQoSSamplingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSSamplingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSSamplingRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSLrCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13), )
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoTable.setDescription('A table of Line Rate configuration information.')
hwCBQoSLrCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrCfgInfoEntry.setDescription('LR Configuration Information Entry.')
hwCBQoSLrUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 1), LrCirUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrUnit.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrUnit.setDescription('CIR Unit: Absolute, Unit bps (1) Percent, Unit % (2)')
hwCBQoSLrCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrCir.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrCir.setDescription('Committed Information Rate. Absolute value: 8000..1000000000. Unit: bps Percent value: 1~100.')
hwCBQoSLrCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1000000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrCbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrCbs.setDescription('Committed Burst Size. When CIR is absolute value, CBS value: 15000..1000000000, default value: max(cir*1/2,15000), Unit: bit; When CIR is percent value, CBS value: 50..2000, default value: 500, Unit: ms. ')
hwCBQoSLrEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrEbs.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrEbs.setDescription('Excess Burst Size. When CIR is absolute value, EBS value: 0..1000000000, Unit: bit; When CIR is percent value, EBS value: 0..2000, Unit: ms.')
hwCBQoSLrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSLrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSLrRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSNestPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 14), )
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoTable.setDescription('A table of Hierachical Policy configuration information.')
hwCBQoSNestPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 14, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyCfgInfoEntry.setDescription('Hierachical Policy Configuration Information Entry.')
hwCBQoSNestPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNestPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyName.setDescription('Name of hierachical traffic policy.')
hwCBQoSNestPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSNestPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSNestPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3))
hwCBQoSPolicyIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyIndexNext.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyIndexNext.setDescription('This object contains an appropriate value to be used for hwCBQoSPolicyIndex when creating rows in the hwCBQoSPolicyCfgInfoTable. Begin with 0.')
hwCBQoSPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2), )
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoTable.setDescription('A table of QoS policy configuration information.')
hwCBQoSPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyCfgInfoEntry.setDescription('Traffic Policy Configuration Information Entry.')
hwCBQoSPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyIndex.setDescription('Index of Traffic Policy.')
hwCBQoSPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSPolicyClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassCount.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassCount.setDescription('The count of policy classes of policy. It can be used for hwCBQoSPolicyClassIndex when creating rows in the hwCBQoSPolicyClassCfgInfoTable. Begin with 0.')
hwCBQoSPolicyConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unavailable", -1), ("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyConfigMode.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyConfigMode.setDescription("Configuration mode of Traffic Policy. Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwCBQoSPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSPolicyClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3), )
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoTable.setDescription('A table of QoS Policy classifier-behavior configuration information.')
hwCBQoSPolicyClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassCfgInfoEntry.setDescription('Traffic Policy classifier-behavior Configuration Information Entry.')
hwCBQoSPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSPolicyClassIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassIndex.setDescription('PolicyClass Index in a QoS policy.')
hwCBQoSPolicyClassClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierIndex.setDescription('Index of classifier applied by a policy. It should exist in hwCBQoSClassifierCfgInfoTable.')
hwCBQoSPolicyClassClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassClassifierName.setDescription('Name of classifier applied by a policy. It is corresponding to hwCBQoSPolicyClassClassifierIndex.')
hwCBQoSPolicyClassBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorIndex.setDescription('Index of Behavior applied by a policy. It should exist in hwCBQoSBehaviorCfgInfoTable.')
hwCBQoSPolicyClassBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassBehaviorName.setDescription('Name of Behavior applied by a policy. It is corresponding to hwCBQoSPolicyClassBehaviorIndex.')
hwCBQoSPolicyClassPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16383), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassPrecedence.setDescription("The Precedence of the class in the policy. Only hardware QoS support this node. -1 is returned only when getting value from software QoS. -1 can't be set.")
hwCBQoSPolicyClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSPolicyClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSPolicyClassRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSApplyPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4))
hwCBQoSIfApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1), )
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSIfApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hwCBQoSIfApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyIfIndex.setDescription('Interface Index, equal to ifIndex.')
hwCBQoSIfApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 2), DirectionType())
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSIfApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSIfApplyPolicyEnableDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unavailable", -1), ("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyEnableDynamic.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyEnableDynamic.setDescription(" If the value of it is specified 'true', enable dynamic qos policy. -1(unavailable) is returned if device doesn't support dynamic QoS. -1(unavailable) can't be set. ")
hwCBQoSIfApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSAtmPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSAtmPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyEntry.setDescription('Policy applied on ATM PVC Configuration Information Entry.')
hwCBQoSAtmPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyIfIndex.setDescription('ATM Interface Index, equal to ifIndex.')
hwCBQoSAtmPvcApplyPolicyVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVPI.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVPI.setDescription('VPI value of ATM Interface.')
hwCBQoSAtmPvcApplyPolicyVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVCI.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyVCI.setDescription('VCI value of ATM Interface.')
hwCBQoSAtmPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 4), DirectionType())
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSAtmPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSAtmPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSIfVlanApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3), )
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSIfVlanApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyEntry.setDescription('Policy applied on Ethernet Vlan Configuration Information Entry.')
hwCBQoSIfVlanApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyIfIndex.setDescription('Ethernet Interface Index, equal to ifIndex.')
hwCBQoSIfVlanApplyPolicyVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyVlanid.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyVlanid.setDescription('Vlan of Ethernet Interface.')
hwCBQoSIfVlanApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 3), DirectionType())
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSIfVlanApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSIfVlanApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSFrClassApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4), )
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSFrClassApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyFrClassName"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrClassApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyEntry.setDescription('Policy applied on fr class Configuration Information Entry.')
hwCBQoSFrClassApplyPolicyFrClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyFrClassName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyFrClassName.setDescription('The name of fr class.')
hwCBQoSFrClassApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1, 2), DirectionType())
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSFrClassApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSFrClassApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrClassApplyPolicyRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwCBQoSFrPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5), )
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyTable.setDescription('A table of QoS policy instance.')
hwCBQoSFrPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyEntry.setDescription('Policy applied on FR PVC Configuration Information Entry.')
hwCBQoSFrPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyIfIndex.setDescription('Fr Interface Index, equal to ifIndex.')
hwCBQoSFrPvcApplyPolicyDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDlciNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDlciNum.setDescription('Fr DLCI number.')
hwCBQoSFrPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1, 3), DirectionType())
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hwCBQoSFrPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcApplyPolicyName.setDescription('Name of Traffic Policy.')
hwCBQoSApplyPolicyStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5))
hwCBQoSIfStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1))
hwCBQoSIfCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1), )
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoTable.setDescription('A table of interface CBQ Running statistics. When policy using queue behavior is applied on interface the interface will using Class Based Queuing.')
hwCBQoSIfCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"))
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqRunInfoEntry.setDescription('Interface CBQ statistics entry.')
hwCBQoSIfCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqQueueSize.setDescription('Packet number of CBQ queue')
hwCBQoSIfCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqDiscard.setDescription("The number of discarded packets which coundn't be enqueued.")
hwCBQoSIfCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqEfQueueSize.setDescription('Packet number of EF queue')
hwCBQoSIfCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqAfQueueSize.setDescription('Packet number of of AF queue')
hwCBQoSIfCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqBeQueueSize.setDescription('Packet number of BE queue')
hwCBQoSIfCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqBeActiveQueueNum.setDescription('the Packet number of Active Be Queue')
hwCBQoSIfCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqBeMaxActiveQueueNum.setDescription('the max Packet number of Active Be Queue')
hwCBQoSIfCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqBeTotalQueueNum.setDescription('the total Packet number of Be Queue')
hwCBQoSIfCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCbqAfAllocatedQueueNum.setDescription('the Allocated Packet number of Af Queue')
hwCBQoSIfClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on the interface.')
hwCBQoSIfClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchRunInfoEntry.setDescription("Classifier's matching statistics information entry.")
hwCBQoSIfClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hwCBQoSIfClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy. Only software QoS support this node.')
hwCBQoSIfClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfClassAverageRate.setDescription('Average rate matching a class of the last 5 minutes.')
hwCBQoSIfCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3), )
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on the interface.')
hwCBQoSIfCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRunInfoEntry.setDescription('CAR statistics information entry.')
hwCBQoSIfCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenPackets.setDescription('Number of packets conforming CIR.')
hwCBQoSIfCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarGreenBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarGreenBytes.setDescription('Number of bytes conforming CIR.')
hwCBQoSIfCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedPackets.setDescription('Number of packets exceeding CIR.')
hwCBQoSIfCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfCarRedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfCarRedBytes.setDescription('Number of bytes exceeding CIR.')
hwCBQoSIfGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4), )
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on the interface.')
hwCBQoSIfGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsRunInfoEntry.setDescription('GTS statistics entry.')
hwCBQoSIfGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hwCBQoSIfGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hwCBQoSIfGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hwCBQoSIfGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hwCBQoSIfGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hwCBQoSIfGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hwCBQoSIfGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfGtsQueueSize.setDescription('Packet number of GTS queue.')
hwCBQoSIfRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 5), )
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on the interface.')
hwCBQoSIfRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hwCBQoSIfRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfRemarkedPackets.setDescription('Number of packets remarked.')
hwCBQoSIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6), )
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on the interface.')
hwCBQoSIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueRunInfoEntry.setDescription('Queue statistics entry.')
hwCBQoSIfQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hwCBQoSIfQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
hwCBQoSIfQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
hwCBQoSIfQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hwCBQoSIfQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
hwCBQoSIfQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfQueueDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
hwCBQoSIfWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 7), )
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on the interface.')
hwCBQoSIfWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredRunInfoEntry.setDescription('WRED statistics entry.')
hwCBQoSIfWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredRandomDiscardedPackets.setDescription('Number of packets that random-discarded by WRED.')
hwCBQoSIfWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfWredTailDiscardedPackets.setDescription('Number of packets that tail-discarded by WRED.')
hwCBQoSIfLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8), )
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoTable.setDescription('A table of Running statistics for LR in a QoS policy applied on the interface.')
hwCBQoSIfLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrRunInfoEntry.setDescription('LR statistics entry.')
hwCBQoSIfLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrPassedPackets.setDescription('Number of packets passed by LR.')
hwCBQoSIfLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrPassedBytes.setDescription('Number of bytes passed by LR.')
hwCBQoSIfLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedPackets.setDescription('Number of packets discarded by LR.')
hwCBQoSIfLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrDiscardedBytes.setDescription('Number of bytes discarded by LR.')
hwCBQoSIfLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedPackets.setDescription('Number of packets delayed by LR.')
hwCBQoSIfLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrDelayedBytes.setDescription('Number of bytes delayed by LR.')
hwCBQoSIfLrQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfLrQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfLrQueueSize.setDescription('Packet number of LR queue')
hwCBQoSAtmPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2))
hwCBQoSAtmPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoTable.setDescription('A table of atm pvc CBQ Running statistics. When policy using queue behavior is applied on atm pvc atm pvc will using Class Based Queuing.')
hwCBQoSAtmPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqRunInfoEntry.setDescription('FR PVC CBQ statistics entry.')
hwCBQoSAtmPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqQueueSize.setDescription('Packet number of CBQ queue')
hwCBQoSAtmPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqDiscard.setDescription("The number of discarded packets which coundn't be enqueued.")
hwCBQoSAtmPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqEfQueueSize.setDescription('Packet number of EF queue')
hwCBQoSAtmPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfQueueSize.setDescription('Packet number of AF queue')
hwCBQoSAtmPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeQueueSize.setDescription('Packet number of BE queue')
hwCBQoSAtmPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeActiveQueueNum.setDescription('the packet number of Active Be Queue')
hwCBQoSAtmPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeMaxActiveQueueNum.setDescription('the max packet number of Active Be Queue')
hwCBQoSAtmPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqBeTotalQueueNum.setDescription('the total packet number of Be Queue')
hwCBQoSAtmPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCbqAfAllocatedQueueNum.setDescription('the Allocated packet number of Af Queue')
hwCBQoSAtmPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hwCBQoSAtmPvcClassMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchPackets.setDescription('Number of packets matching a class in a QoS policy.')
hwCBQoSAtmPvcClassMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassMatchBytes.setDescription('Number of bytes matching a class in a QoS policy.')
hwCBQoSAtmPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcClassAverageRate.setDescription('Average rate matching a class in the last 5 minutes.')
hwCBQoSAtmPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarRunInfoEntry.setDescription('CAR statistics entry.')
hwCBQoSAtmPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformPackets.setDescription('Number of packets that conforming specified CIR.')
hwCBQoSAtmPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarConformBytes.setDescription('Number of bytes that conforming specified CIR.')
hwCBQoSAtmPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedPackets.setDescription('Number of packets exceeded CIR.')
hwCBQoSAtmPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcCarExceedBytes.setDescription('Number of bytes exceeded CIR.')
hwCBQoSAtmPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsRunInfoEntry.setDescription('GTS statistics entry.')
hwCBQoSAtmPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hwCBQoSAtmPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hwCBQoSAtmPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hwCBQoSAtmPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hwCBQoSAtmPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hwCBQoSAtmPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hwCBQoSAtmPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcGtsQueueSize.setDescription('packet number of GTS queue.')
hwCBQoSAtmPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 5), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hwCBQoSAtmPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcRemarkedPackets.setDescription('Number of packets remarked.')
hwCBQoSAtmPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueRunInfoEntry.setDescription('Queue statistics entry.')
hwCBQoSAtmPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hwCBQoSAtmPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
hwCBQoSAtmPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
hwCBQoSAtmPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hwCBQoSAtmPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedPackets.setDescription('Number of packets discard when enqueued by discard method.')
hwCBQoSAtmPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcQueueDiscardedBytes.setDescription('Number of bytes discard when enqueued by discard method.')
hwCBQoSAtmPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 7), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRunInfoEntry.setDescription('WRED statistics entry.')
hwCBQoSAtmPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredRandomDiscardedPackets.setDescription('Number of packets randomly discarded by WRED.')
hwCBQoSAtmPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
hwCBQoSAtmPvcLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8), )
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoTable.setDescription('A table of Running statistics for LR in a QoS policy applied on ATM PVC.')
hwCBQoSAtmPvcLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrRunInfoEntry.setDescription('LR statistics entry.')
hwCBQoSAtmPvcLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedPackets.setDescription('Number of packets passed by LR.')
hwCBQoSAtmPvcLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrPassedBytes.setDescription('Number of bytes passed by LR.')
hwCBQoSAtmPvcLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedPackets.setDescription('Number of packets discarded by LR.')
hwCBQoSAtmPvcLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDiscardedBytes.setDescription('Number of bytes discarded by LR.')
hwCBQoSAtmPvcLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedPackets.setDescription('Number of packets delayed by LR.')
hwCBQoSAtmPvcLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrDelayedBytes.setDescription('Number of bytes delayed by LR.')
hwCBQoSAtmPvcLrQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSAtmPvcLrQueueSize.setDescription('Packet number of LR queue')
hwCBQoSFrPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3))
hwCBQoSFrPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1), )
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoTable.setDescription('A table of fr pvc CBQ Running statistics. When policy using queue behavior is applied on fr pvc fr pvc will using Class Based Queuing.')
hwCBQoSFrPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"))
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqRunInfoEntry.setDescription('FR PVC CBQ statistics entry.')
hwCBQoSFrPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqQueueSize.setDescription('packet number of CBQ queue')
hwCBQoSFrPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqDiscard.setDescription("The number of discarded packets which coundn't be enqueued.")
hwCBQoSFrPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqEfQueueSize.setDescription('packet number of EF queue')
hwCBQoSFrPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfQueueSize.setDescription('packet number of AF queue')
hwCBQoSFrPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeQueueSize.setDescription('packet number of BE queue')
hwCBQoSFrPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeActiveQueueNum.setDescription('the packet number of Active Be Queue')
hwCBQoSFrPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeMaxActiveQueueNum.setDescription('the max packet number of Active Be Queue')
hwCBQoSFrPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqBeTotalQueueNum.setDescription('the total packet number of Be Queue')
hwCBQoSFrPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCbqAfAllocatedQueueNum.setDescription('the Allocated packet number of Af Queue')
hwCBQoSFrPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2), )
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hwCBQoSFrPvcClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hwCBQoSFrPvcClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy.')
hwCBQoSFrPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcClassAverageRate.setDescription('Average rate matching a class of the last 5 minutes.')
hwCBQoSFrPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3), )
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarRunInfoEntry.setDescription('CAR statistics entry.')
hwCBQoSFrPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformPackets.setDescription('Number of packets conform CIR.')
hwCBQoSFrPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarConformBytes.setDescription('Number of bytes conform CIR.')
hwCBQoSFrPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedPackets.setDescription('Number of packets exceed CIR.')
hwCBQoSFrPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcCarExceedBytes.setDescription('Number of bytes exceed CIR.')
hwCBQoSFrPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4), )
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsRunInfoEntry.setDescription('GTS statistics entry.')
hwCBQoSFrPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hwCBQoSFrPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hwCBQoSFrPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hwCBQoSFrPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hwCBQoSFrPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hwCBQoSFrPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hwCBQoSFrPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcGtsQueueSize.setDescription('packet number of GTS queue.')
hwCBQoSFrPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 5), )
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hwCBQoSFrPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcRemarkedPackets.setDescription('Number of packets remarked.')
hwCBQoSFrPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6), )
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueRunInfoEntry.setDescription('Queue statistics entry.')
hwCBQoSFrPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hwCBQoSFrPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
hwCBQoSFrPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
hwCBQoSFrPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hwCBQoSFrPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
hwCBQoSFrPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcQueueDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
hwCBQoSFrPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 7), )
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSWredClassValue"))
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRunInfoEntry.setDescription('WRED statistics entry.')
hwCBQoSFrPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredRandomDiscardedPackets.setDescription('Number of packets randomly discarded by WRED.')
hwCBQoSFrPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
hwCBQoSFrPvcLrRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8), )
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoTable.setDescription('A table of Running statistics for LR in a QoS policy applied on FR PVC.')
hwCBQoSFrPvcLrRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrRunInfoEntry.setDescription('LR statistics entry.')
hwCBQoSFrPvcLrPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedPackets.setDescription('Number of packets passed by LR.')
hwCBQoSFrPvcLrPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrPassedBytes.setDescription('Number of bytes passed by LR.')
hwCBQoSFrPvcLrDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedPackets.setDescription('Number of packets discarded by LR.')
hwCBQoSFrPvcLrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDiscardedBytes.setDescription('Number of bytes discarded by LR.')
hwCBQoSFrPvcLrDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedPackets.setDescription('Number of packets delayed by LR.')
hwCBQoSFrPvcLrDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrDelayedBytes.setDescription('Number of bytes delayed by LR.')
hwCBQoSFrPvcLrQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 3, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSFrPvcLrQueueSize.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSFrPvcLrQueueSize.setDescription('Packet number of LR queue')
hwCBQoSIfVlanStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 4))
hwCBQoSIfVlanClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 4, 1), )
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on ethernet vlan.')
hwCBQoSIfVlanClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 4, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyVlanid"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSIfVlanApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS-MIB", "hwCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hwCBQoSIfVlanClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 32, 1, 1, 5, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hwCBQoSIfVlanClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
mibBuilder.exportSymbols("A3COM-HUAWEI-CBQOS-MIB", hwCBQoSQueueLength=hwCBQoSQueueLength, hwCBQoSIfVlanApplyPolicyTable=hwCBQoSIfVlanApplyPolicyTable, hwCBQoSQueueQueueNumber=hwCBQoSQueueQueueNumber, hwCBQoSWredClassValue=hwCBQoSWredClassValue, hwCBQoSPolicyRouteBackup=hwCBQoSPolicyRouteBackup, hwCBQoSIfVlanApplyPolicyEntry=hwCBQoSIfVlanApplyPolicyEntry, hwCBQoSFrPvcGtsDiscardedPackets=hwCBQoSFrPvcGtsDiscardedPackets, hwCBQoSCarCfgInfoEntry=hwCBQoSCarCfgInfoEntry, hwCBQoSBehaviorCfgInfoTable=hwCBQoSBehaviorCfgInfoTable, hwCBQoSIfVlanApplyPolicyVlanid=hwCBQoSIfVlanApplyPolicyVlanid, hwCBQoSFrPvcCbqAfQueueSize=hwCBQoSFrPvcCbqAfQueueSize, hwCBQoSAtmPvcLrQueueSize=hwCBQoSAtmPvcLrQueueSize, hwCBQoSAtmPvcGtsRunInfoEntry=hwCBQoSAtmPvcGtsRunInfoEntry, hwCBQoSAtmPvcCbqBeActiveQueueNum=hwCBQoSAtmPvcCbqBeActiveQueueNum, hwCBQoSAtmPvcGtsPassedBytes=hwCBQoSAtmPvcGtsPassedBytes, hwCBQoSAtmPvcWredTailDiscardedPackets=hwCBQoSAtmPvcWredTailDiscardedPackets, hwCBQoSFrPvcApplyPolicyIfIndex=hwCBQoSFrPvcApplyPolicyIfIndex, hwCBQoSAtmPvcCarExceedBytes=hwCBQoSAtmPvcCarExceedBytes, hwCBQoSAtmPvcLrDelayedPackets=hwCBQoSAtmPvcLrDelayedPackets, hwCBQoSIfStaticsObjects=hwCBQoSIfStaticsObjects, hwCBQoSIfRemarkRunInfoEntry=hwCBQoSIfRemarkRunInfoEntry, hwCBQoSApplyPolicyStaticsObjects=hwCBQoSApplyPolicyStaticsObjects, hwCBQoSPolicyClassPrecedence=hwCBQoSPolicyClassPrecedence, hwCBQoSMatchRuleIntValue2=hwCBQoSMatchRuleIntValue2, hwCBQoSGtsCir=hwCBQoSGtsCir, hwCBQoSClassifierCfgInfoTable=hwCBQoSClassifierCfgInfoTable, hwCBQoSRemarkRowStatus=hwCBQoSRemarkRowStatus, hwCBQoSFrPvcGtsPassedBytes=hwCBQoSFrPvcGtsPassedBytes, hwCBQoSFrPvcCbqEfQueueSize=hwCBQoSFrPvcCbqEfQueueSize, hwCBQoSFrPvcCbqQueueSize=hwCBQoSFrPvcCbqQueueSize, hwCBQoSIfApplyPolicyName=hwCBQoSIfApplyPolicyName, hwCBQoSIfGtsQueueSize=hwCBQoSIfGtsQueueSize, hwCBQoSIfVlanClassMatchRunInfoTable=hwCBQoSIfVlanClassMatchRunInfoTable, hwCBQoSIfGtsRunInfoTable=hwCBQoSIfGtsRunInfoTable, hwCBQoSLrCbs=hwCBQoSLrCbs, hwCBQoSAtmPvcCbqDiscard=hwCBQoSAtmPvcCbqDiscard, hwCBQoSFrPvcCarRunInfoEntry=hwCBQoSFrPvcCarRunInfoEntry, hwCBQoSIfClassMatchRunInfoTable=hwCBQoSIfClassMatchRunInfoTable, hwCBQoSAtmPvcQueueEnqueuedPackets=hwCBQoSAtmPvcQueueEnqueuedPackets, hwCBQoSFrPvcGtsDelayedBytes=hwCBQoSFrPvcGtsDelayedBytes, hwCBQoSPolicyRouteCfgInfoTable=hwCBQoSPolicyRouteCfgInfoTable, hwCBQoSFrPvcRemarkRunInfoEntry=hwCBQoSFrPvcRemarkRunInfoEntry, hwCBQoSFrPvcQueueDiscardedBytes=hwCBQoSFrPvcQueueDiscardedBytes, hwCBQoSAtmPvcApplyPolicyName=hwCBQoSAtmPvcApplyPolicyName, hwCBQoSIfCbqBeTotalQueueNum=hwCBQoSIfCbqBeTotalQueueNum, hwCBQoSAtmPvcRemarkedPackets=hwCBQoSAtmPvcRemarkedPackets, hwCBQoSCarCir=hwCBQoSCarCir, hwCBQoSAtmPvcCarRunInfoTable=hwCBQoSAtmPvcCarRunInfoTable, hwCBQoSAtmPvcGtsPassedPackets=hwCBQoSAtmPvcGtsPassedPackets, hwCBQoSMatchRuleRowStatus=hwCBQoSMatchRuleRowStatus, hwCBQoSFrPvcWredTailDiscardedPackets=hwCBQoSFrPvcWredTailDiscardedPackets, hwCBQoSNestPolicyName=hwCBQoSNestPolicyName, hwCBQoSAtmPvcApplyPolicyTable=hwCBQoSAtmPvcApplyPolicyTable, hwCBQoSNatCfgInfoEntry=hwCBQoSNatCfgInfoEntry, hwCBQoSIfGtsDiscardedBytes=hwCBQoSIfGtsDiscardedBytes, hwCBQoSBehaviorRowStatus=hwCBQoSBehaviorRowStatus, hwCBQoSAtmPvcCbqBeQueueSize=hwCBQoSAtmPvcCbqBeQueueSize, QueueType=QueueType, hwCBQoSBehaviorIndexNext=hwCBQoSBehaviorIndexNext, hwCBQoSFrPvcWredRandomDiscardedPackets=hwCBQoSFrPvcWredRandomDiscardedPackets, hwCBQoSNestPolicyCfgInfoEntry=hwCBQoSNestPolicyCfgInfoEntry, hwCBQoSFrPvcClassAverageRate=hwCBQoSFrPvcClassAverageRate, hwCBQoSLrCfgInfoTable=hwCBQoSLrCfgInfoTable, hwCBQoSFrPvcCbqRunInfoEntry=hwCBQoSFrPvcCbqRunInfoEntry, hwCBQoSFrPvcClassMatchedPackets=hwCBQoSFrPvcClassMatchedPackets, CarAction=CarAction, hwCBQoSIfLrRunInfoEntry=hwCBQoSIfLrRunInfoEntry, hwCBQoSQueueType=hwCBQoSQueueType, hwCBQoSBehaviorCfgInfoEntry=hwCBQoSBehaviorCfgInfoEntry, hwCBQoSWredClassCfgInfoEntry=hwCBQoSWredClassCfgInfoEntry, hwCBQoSAtmPvcQueueRunInfoEntry=hwCBQoSAtmPvcQueueRunInfoEntry, hwCBQoSIfApplyPolicyRowStatus=hwCBQoSIfApplyPolicyRowStatus, hwCBQoSIfQueueMatchedBytes=hwCBQoSIfQueueMatchedBytes, hwCBQoSQueueDropType=hwCBQoSQueueDropType, hwCBQoSFrPvcWredRunInfoEntry=hwCBQoSFrPvcWredRunInfoEntry, hwCBQoSIfGtsDelayedBytes=hwCBQoSIfGtsDelayedBytes, hwCBQoSMatchRuleIfNot=hwCBQoSMatchRuleIfNot, hwCBQoSFirewallAction=hwCBQoSFirewallAction, hwCBQoSIfLrQueueSize=hwCBQoSIfLrQueueSize, hwCBQoSIfClassMatchRunInfoEntry=hwCBQoSIfClassMatchRunInfoEntry, hwCBQoSClassifierRuleCount=hwCBQoSClassifierRuleCount, hwCBQoSIfApplyPolicyTable=hwCBQoSIfApplyPolicyTable, hwCBQoSPolicyConfigMode=hwCBQoSPolicyConfigMode, RemarkType=RemarkType, hwCBQoSPolicyIndexNext=hwCBQoSPolicyIndexNext, hwCBQoSAtmPvcClassMatchRunInfoTable=hwCBQoSAtmPvcClassMatchRunInfoTable, hwCBQoSIfQueueEnqueuedPackets=hwCBQoSIfQueueEnqueuedPackets, hwCBQoSFrPvcCbqRunInfoTable=hwCBQoSFrPvcCbqRunInfoTable, hwCBQoSFrPvcLrDelayedBytes=hwCBQoSFrPvcLrDelayedBytes, hwCBQoSPolicyRouteRowStatus=hwCBQoSPolicyRouteRowStatus, hwCBQoSQueueCbsRatio=hwCBQoSQueueCbsRatio, hwCBQoSLrRowStatus=hwCBQoSLrRowStatus, hwCBQoSAtmPvcCbqBeTotalQueueNum=hwCBQoSAtmPvcCbqBeTotalQueueNum, hwCBQoSFrPvcGtsRunInfoEntry=hwCBQoSFrPvcGtsRunInfoEntry, hwCBQoSFrClassApplyPolicyName=hwCBQoSFrClassApplyPolicyName, hwCBQoSCarGreenRemarkValue=hwCBQoSCarGreenRemarkValue, hwCBQoSAtmPvcCbqRunInfoTable=hwCBQoSAtmPvcCbqRunInfoTable, hwCBQoSCarRowStatus=hwCBQoSCarRowStatus, hwCBQoSIfClassMatchedBytes=hwCBQoSIfClassMatchedBytes, hwCBQoSPolicyClassRowStatus=hwCBQoSPolicyClassRowStatus, hwCBQoSAtmPvcQueueMatchedBytes=hwCBQoSAtmPvcQueueMatchedBytes, hwCBQoSAtmPvcCbqEfQueueSize=hwCBQoSAtmPvcCbqEfQueueSize, hwCBQoSIfQueueDiscardedPackets=hwCBQoSIfQueueDiscardedPackets, hwCBQoSQueueRowStatus=hwCBQoSQueueRowStatus, hwCBQoSNatServiceClass=hwCBQoSNatServiceClass, hwCBQoSBehaviorName=hwCBQoSBehaviorName, hwCBQoSPolicyClassClassifierIndex=hwCBQoSPolicyClassClassifierIndex, hwCBQoSWredClassDiscardProb=hwCBQoSWredClassDiscardProb, hwCBQoSCarRedAction=hwCBQoSCarRedAction, hwCBQoSAtmPvcCarRunInfoEntry=hwCBQoSAtmPvcCarRunInfoEntry, hwCBQoSGtsCfgInfoTable=hwCBQoSGtsCfgInfoTable, hwCBQoSAtmPvcStaticsObjects=hwCBQoSAtmPvcStaticsObjects, hwCBQoSCarYellowAction=hwCBQoSCarYellowAction, hwCBQoSFrPvcGtsQueueSize=hwCBQoSFrPvcGtsQueueSize, hwCBQoSClassifierCfgInfoEntry=hwCBQoSClassifierCfgInfoEntry, hwCBQoSLrCfgInfoEntry=hwCBQoSLrCfgInfoEntry, hwCBQoSAtmPvcCbqRunInfoEntry=hwCBQoSAtmPvcCbqRunInfoEntry, hwCBQoSIfCbqBeMaxActiveQueueNum=hwCBQoSIfCbqBeMaxActiveQueueNum, hwCBQoSPolicyClassBehaviorIndex=hwCBQoSPolicyClassBehaviorIndex, hwCBQoSIfCbqQueueSize=hwCBQoSIfCbqQueueSize, hwCBQoSPolicyClassCfgInfoTable=hwCBQoSPolicyClassCfgInfoTable, hwCBQoSWredClassCfgInfoTable=hwCBQoSWredClassCfgInfoTable, hwCBQoSAtmPvcCarConformBytes=hwCBQoSAtmPvcCarConformBytes, hwCBQoSFrPvcCbqBeTotalQueueNum=hwCBQoSFrPvcCbqBeTotalQueueNum, hwCBQoSAtmPvcLrDelayedBytes=hwCBQoSAtmPvcLrDelayedBytes, hwCBQoSAtmPvcLrDiscardedPackets=hwCBQoSAtmPvcLrDiscardedPackets, hwCBQoSFirewallRowStatus=hwCBQoSFirewallRowStatus, hwCBQoSFrPvcRemarkRunInfoTable=hwCBQoSFrPvcRemarkRunInfoTable, hwCBQoSIfGtsPassedBytes=hwCBQoSIfGtsPassedBytes, hwCBQoSFrPvcApplyPolicyName=hwCBQoSFrPvcApplyPolicyName, hwCBQoSIfLrDiscardedBytes=hwCBQoSIfLrDiscardedBytes, hwCBQoSPolicyIndex=hwCBQoSPolicyIndex, hwCBQoSAtmPvcRemarkRunInfoEntry=hwCBQoSAtmPvcRemarkRunInfoEntry, hwCBQoSClassifierIndexNext=hwCBQoSClassifierIndexNext, hwCBQoSIfQueueEnqueuedBytes=hwCBQoSIfQueueEnqueuedBytes, hwCBQoSFrClassApplyPolicyEntry=hwCBQoSFrClassApplyPolicyEntry, hwCBQoSPolicyClassCount=hwCBQoSPolicyClassCount, hwCBQoSFirewallCfgInfoTable=hwCBQoSFirewallCfgInfoTable, hwCBQoSFrPvcCbqAfAllocatedQueueNum=hwCBQoSFrPvcCbqAfAllocatedQueueNum, hwCBQoSIfCarGreenPackets=hwCBQoSIfCarGreenPackets, hwCBQoSRemarkCfgInfoEntry=hwCBQoSRemarkCfgInfoEntry, hwCBQoSMIB=hwCBQoSMIB, hwCBQoSFrPvcApplyPolicyDirection=hwCBQoSFrPvcApplyPolicyDirection, hwCBQoSAtmPvcGtsRunInfoTable=hwCBQoSAtmPvcGtsRunInfoTable, hwCBQoSAtmPvcGtsDiscardedBytes=hwCBQoSAtmPvcGtsDiscardedBytes, hwCBQoSAtmPvcWredRandomDiscardedPackets=hwCBQoSAtmPvcWredRandomDiscardedPackets, LrCirUnit=LrCirUnit, hwCBQoSIfCbqBeQueueSize=hwCBQoSIfCbqBeQueueSize, hwCBQoSIfLrPassedPackets=hwCBQoSIfLrPassedPackets, hwCBQoSIfLrDelayedBytes=hwCBQoSIfLrDelayedBytes, hwCBQoSFrPvcLrPassedBytes=hwCBQoSFrPvcLrPassedBytes, hwCBQoSFrPvcQueueEnqueuedBytes=hwCBQoSFrPvcQueueEnqueuedBytes, hwCBQoSIfRemarkedPackets=hwCBQoSIfRemarkedPackets, hwCBQoSQueueBandwidthValue=hwCBQoSQueueBandwidthValue, hwCBQoSIfGtsDelayedPackets=hwCBQoSIfGtsDelayedPackets, hwCBQoSIfApplyPolicyEntry=hwCBQoSIfApplyPolicyEntry, hwCBQoSIfApplyPolicyDirection=hwCBQoSIfApplyPolicyDirection, hwCBQoSFrPvcQueueMatchedBytes=hwCBQoSFrPvcQueueMatchedBytes, hwCBQoSWredType=hwCBQoSWredType, hwCBQoSClassifierObjects=hwCBQoSClassifierObjects, hwCBQoSFrPvcGtsDiscardedBytes=hwCBQoSFrPvcGtsDiscardedBytes, hwCBQoSFrPvcCarConformPackets=hwCBQoSFrPvcCarConformPackets, hwCBQoSFrPvcCbqBeMaxActiveQueueNum=hwCBQoSFrPvcCbqBeMaxActiveQueueNum, hwCBQoSGtsCbs=hwCBQoSGtsCbs, hwCBQoSFrPvcQueueRunInfoEntry=hwCBQoSFrPvcQueueRunInfoEntry, hwCBQoSClassifierIndex=hwCBQoSClassifierIndex, hwCBQoSQueueBandwidthUnit=hwCBQoSQueueBandwidthUnit, hwCBQoSAtmPvcCbqBeMaxActiveQueueNum=hwCBQoSAtmPvcCbqBeMaxActiveQueueNum, hwCBQoSFrPvcStaticsObjects=hwCBQoSFrPvcStaticsObjects, hwCBQoSFrPvcApplyPolicyDlciNum=hwCBQoSFrPvcApplyPolicyDlciNum, hwCBQoSFrPvcCbqDiscard=hwCBQoSFrPvcCbqDiscard, hwCBQoSBehaviorIndex=hwCBQoSBehaviorIndex, hwCBQoSMatchRuleIntValue1=hwCBQoSMatchRuleIntValue1, hwCBQoSMatchRuleCfgInfoEntry=hwCBQoSMatchRuleCfgInfoEntry, hwCBQoSIfCarRedBytes=hwCBQoSIfCarRedBytes, hwCBQoSIfClassMatchedPackets=hwCBQoSIfClassMatchedPackets, WredType=WredType, hwCBQoSWredWeightConst=hwCBQoSWredWeightConst, hwCBQoSNatRowStatus=hwCBQoSNatRowStatus, hwCBQoSAtmPvcRemarkRunInfoTable=hwCBQoSAtmPvcRemarkRunInfoTable, hwCBQoSFrPvcLrPassedPackets=hwCBQoSFrPvcLrPassedPackets, hwCBQoSIfApplyPolicyEnableDynamic=hwCBQoSIfApplyPolicyEnableDynamic, hwCBQoSIfCarRunInfoEntry=hwCBQoSIfCarRunInfoEntry, hwCBQoSClassifierOperator=hwCBQoSClassifierOperator, hwCBQoSIfVlanStaticsObjects=hwCBQoSIfVlanStaticsObjects, hwCBQoSQueueCfgInfoTable=hwCBQoSQueueCfgInfoTable, hwCBQoSAtmPvcCarConformPackets=hwCBQoSAtmPvcCarConformPackets, hwCBQoSIfCbqAfQueueSize=hwCBQoSIfCbqAfQueueSize, hwCBQoSFrClassApplyPolicyDirection=hwCBQoSFrClassApplyPolicyDirection, hwCBQoSAtmPvcCarExceedPackets=hwCBQoSAtmPvcCarExceedPackets, hwCBQoSFirewallCfgInfoEntry=hwCBQoSFirewallCfgInfoEntry, hwCBQoSFrPvcCarExceedPackets=hwCBQoSFrPvcCarExceedPackets, hwCBQoSGtsQueueLength=hwCBQoSGtsQueueLength, hwCBQoSPolicyClassClassifierName=hwCBQoSPolicyClassClassifierName, hwCBQoSBehaviorObjects=hwCBQoSBehaviorObjects, hwCBQoSIfCbqDiscard=hwCBQoSIfCbqDiscard, hwCBQoSAtmPvcQueueMatchedPackets=hwCBQoSAtmPvcQueueMatchedPackets, hwCBQoSWredClassLowLimit=hwCBQoSWredClassLowLimit, hwCBQoSFrPvcQueueMatchedPackets=hwCBQoSFrPvcQueueMatchedPackets, hwCBQoSCarGreenAction=hwCBQoSCarGreenAction, hwCBQoSSamplingNum=hwCBQoSSamplingNum, hwCBQoSApplyPolicyObjects=hwCBQoSApplyPolicyObjects, hwCBQoSPolicyClassCfgInfoEntry=hwCBQoSPolicyClassCfgInfoEntry, hwCBQoSAtmPvcLrRunInfoTable=hwCBQoSAtmPvcLrRunInfoTable, hwCBQoSAtmPvcGtsDelayedPackets=hwCBQoSAtmPvcGtsDelayedPackets, hwCBQoSIfCarGreenBytes=hwCBQoSIfCarGreenBytes, hwCBQoSAtmPvcApplyPolicyVCI=hwCBQoSAtmPvcApplyPolicyVCI, hwCBQoSFrPvcQueueDiscardedPackets=hwCBQoSFrPvcQueueDiscardedPackets, hwCBQoSCarCbs=hwCBQoSCarCbs, hwCBQoSAtmPvcGtsQueueSize=hwCBQoSAtmPvcGtsQueueSize, hwCBQoSNatMainNumber=hwCBQoSNatMainNumber, hwCBQoSLrEbs=hwCBQoSLrEbs, hwCBQoSNatBackupNumber=hwCBQoSNatBackupNumber, hwCBQoSAtmPvcLrPassedPackets=hwCBQoSAtmPvcLrPassedPackets, hwCBQoSSamplingCfgInfoTable=hwCBQoSSamplingCfgInfoTable, hwCBQoSIfQueueRunInfoTable=hwCBQoSIfQueueRunInfoTable, hwCBQoSNestPolicyCfgInfoTable=hwCBQoSNestPolicyCfgInfoTable, hwCBQoSFrClassApplyPolicyFrClassName=hwCBQoSFrClassApplyPolicyFrClassName, hwCBQoSFrPvcLrDelayedPackets=hwCBQoSFrPvcLrDelayedPackets, hwCBQoSIfWredRunInfoEntry=hwCBQoSIfWredRunInfoEntry, hwCBQoSIfQueueDiscardedBytes=hwCBQoSIfQueueDiscardedBytes, hwCBQoSIfCbqAfAllocatedQueueNum=hwCBQoSIfCbqAfAllocatedQueueNum, hwCBQoSAtmPvcClassMatchPackets=hwCBQoSAtmPvcClassMatchPackets, hwCBQoSRemarkValue=hwCBQoSRemarkValue, DirectionType=DirectionType, QueueBandwidthUnit=QueueBandwidthUnit, hwCBQoSFrPvcCarExceedBytes=hwCBQoSFrPvcCarExceedBytes, hwCBQoSAtmPvcApplyPolicyVPI=hwCBQoSAtmPvcApplyPolicyVPI, hwCBQoSIfClassAverageRate=hwCBQoSIfClassAverageRate, hwCBQoSAtmPvcApplyPolicyEntry=hwCBQoSAtmPvcApplyPolicyEntry, hwCBQoSWredCfgInfoTable=hwCBQoSWredCfgInfoTable, hwCBQoSNestPolicyRowStatus=hwCBQoSNestPolicyRowStatus, hwCBQoSNatCfgInfoTable=hwCBQoSNatCfgInfoTable, hwCBQoSCarRedRemarkValue=hwCBQoSCarRedRemarkValue, hwCBQoSWredClassHighLimit=hwCBQoSWredClassHighLimit, hwCBQoSFrPvcApplyPolicyTable=hwCBQoSFrPvcApplyPolicyTable, hwCBQoSRemarkCfgInfoTable=hwCBQoSRemarkCfgInfoTable, hwCBQoSIfLrDiscardedPackets=hwCBQoSIfLrDiscardedPackets, hwCBQoSPolicyClassBehaviorName=hwCBQoSPolicyClassBehaviorName, hwCBQoSAtmPvcGtsDelayedBytes=hwCBQoSAtmPvcGtsDelayedBytes, hwCBQoSIfGtsRunInfoEntry=hwCBQoSIfGtsRunInfoEntry, hwCBQoSLrUnit=hwCBQoSLrUnit, hwCBQoSFrPvcGtsDelayedPackets=hwCBQoSFrPvcGtsDelayedPackets, hwCBQoSLrCir=hwCBQoSLrCir, hwCBQoSFrPvcQueueRunInfoTable=hwCBQoSFrPvcQueueRunInfoTable, hwCBQoSIfQueueRunInfoEntry=hwCBQoSIfQueueRunInfoEntry, hwCBQoSAtmPvcGtsDiscardedPackets=hwCBQoSAtmPvcGtsDiscardedPackets, hwCBQoSPolicyRouteCfgInfoEntry=hwCBQoSPolicyRouteCfgInfoEntry, hwCBQoSMatchRuleIndex=hwCBQoSMatchRuleIndex, hwCBQoSPolicyRowStatus=hwCBQoSPolicyRowStatus, hwCBQoSMatchRuleStringValue=hwCBQoSMatchRuleStringValue, hwCBQoSAtmPvcQueueDiscardedBytes=hwCBQoSAtmPvcQueueDiscardedBytes, hwCBQoSIfGtsDiscardedPackets=hwCBQoSIfGtsDiscardedPackets, hwCBQoSGtsRowStatus=hwCBQoSGtsRowStatus)
mibBuilder.exportSymbols("A3COM-HUAWEI-CBQOS-MIB", hwCBQoSPolicyRouteNexthop=hwCBQoSPolicyRouteNexthop, hwCBQoSIfQueueMatchedPackets=hwCBQoSIfQueueMatchedPackets, hwCBQoSIfCbqRunInfoTable=hwCBQoSIfCbqRunInfoTable, hwCBQoSFrPvcLrRunInfoTable=hwCBQoSFrPvcLrRunInfoTable, hwCBQoSAtmPvcLrRunInfoEntry=hwCBQoSAtmPvcLrRunInfoEntry, hwCBQoSIfCbqRunInfoEntry=hwCBQoSIfCbqRunInfoEntry, hwCBQoSPolicyCfgInfoEntry=hwCBQoSPolicyCfgInfoEntry, hwCBQoSClassifierRowStatus=hwCBQoSClassifierRowStatus, hwCBQoSAtmPvcClassMatchBytes=hwCBQoSAtmPvcClassMatchBytes, hwCBQoSIfVlanApplyPolicyIfIndex=hwCBQoSIfVlanApplyPolicyIfIndex, hwCBQoSFrPvcGtsRunInfoTable=hwCBQoSFrPvcGtsRunInfoTable, hwCBQoSAtmPvcQueueRunInfoTable=hwCBQoSAtmPvcQueueRunInfoTable, hwCBQoSIfCbqEfQueueSize=hwCBQoSIfCbqEfQueueSize, hwCBQoSFrPvcWredRunInfoTable=hwCBQoSFrPvcWredRunInfoTable, hwCBQoSWredCfgInfoEntry=hwCBQoSWredCfgInfoEntry, hwCBQoSIfCbqBeActiveQueueNum=hwCBQoSIfCbqBeActiveQueueNum, hwCBQoSFrPvcLrDiscardedPackets=hwCBQoSFrPvcLrDiscardedPackets, hwCBQoSAtmPvcClassMatchRunInfoEntry=hwCBQoSAtmPvcClassMatchRunInfoEntry, hwCBQoSIfVlanClassMatchRunInfoEntry=hwCBQoSIfVlanClassMatchRunInfoEntry, hwCBQoSQueueCbs=hwCBQoSQueueCbs, hwCBQoSFrPvcClassMatchRunInfoTable=hwCBQoSFrPvcClassMatchRunInfoTable, hwCBQoSIfWredRandomDiscardedPackets=hwCBQoSIfWredRandomDiscardedPackets, hwCBQoSIfVlanApplyPolicyDirection=hwCBQoSIfVlanApplyPolicyDirection, hwCBQoSIfLrRunInfoTable=hwCBQoSIfLrRunInfoTable, hwCBQoSAtmPvcClassAverageRate=hwCBQoSAtmPvcClassAverageRate, hwCBQoSFrPvcCbqBeQueueSize=hwCBQoSFrPvcCbqBeQueueSize, hwCBQoSIfApplyPolicyIfIndex=hwCBQoSIfApplyPolicyIfIndex, hwCBQoSCarEbs=hwCBQoSCarEbs, hwCBQoSPolicyObjects=hwCBQoSPolicyObjects, hwCBQoSFrPvcQueueEnqueuedPackets=hwCBQoSFrPvcQueueEnqueuedPackets, hwCBQoSFrPvcCarRunInfoTable=hwCBQoSFrPvcCarRunInfoTable, hwCBQoSIfVlanApplyPolicyName=hwCBQoSIfVlanApplyPolicyName, hwCBQoSQueueCfgInfoEntry=hwCBQoSQueueCfgInfoEntry, hwCBQoSIfCarRedPackets=hwCBQoSIfCarRedPackets, hwCBQoSFrPvcLrDiscardedBytes=hwCBQoSFrPvcLrDiscardedBytes, hwCBQoSIfWredTailDiscardedPackets=hwCBQoSIfWredTailDiscardedPackets, hwCBQoSAtmPvcCbqAfAllocatedQueueNum=hwCBQoSAtmPvcCbqAfAllocatedQueueNum, hwCBQoSAtmPvcApplyPolicyRowStatus=hwCBQoSAtmPvcApplyPolicyRowStatus, hwCBQoSAtmPvcLrPassedBytes=hwCBQoSAtmPvcLrPassedBytes, hwCBQoSIfVlanClassMatchedPackets=hwCBQoSIfVlanClassMatchedPackets, hwCBQoSAtmPvcWredRunInfoEntry=hwCBQoSAtmPvcWredRunInfoEntry, hwCBQoSCarPir=hwCBQoSCarPir, hwCBQoSFrPvcCbqBeActiveQueueNum=hwCBQoSFrPvcCbqBeActiveQueueNum, hwCBQoSSamplingRowStatus=hwCBQoSSamplingRowStatus, hwCBQoSFrClassApplyPolicyRowStatus=hwCBQoSFrClassApplyPolicyRowStatus, hwCBQoSFrPvcLrRunInfoEntry=hwCBQoSFrPvcLrRunInfoEntry, hwCBQoSIfVlanApplyPolicyRowStatus=hwCBQoSIfVlanApplyPolicyRowStatus, hwCBQoSIfLrPassedBytes=hwCBQoSIfLrPassedBytes, hwCBQoSCarPbs=hwCBQoSCarPbs, hwCBQoSFrPvcCarConformBytes=hwCBQoSFrPvcCarConformBytes, hwCBQoSIfRemarkRunInfoTable=hwCBQoSIfRemarkRunInfoTable, hwCBQoSObjects=hwCBQoSObjects, hwCBQoSPolicyName=hwCBQoSPolicyName, hwCBQoSPolicyClassIndex=hwCBQoSPolicyClassIndex, hwCBQoSCarCfgInfoTable=hwCBQoSCarCfgInfoTable, hwCBQoSAtmPvcQueueDiscardedPackets=hwCBQoSAtmPvcQueueDiscardedPackets, hwCBQoSIfLrDelayedPackets=hwCBQoSIfLrDelayedPackets, hwCBQoSFrClassApplyPolicyTable=hwCBQoSFrClassApplyPolicyTable, hwCBQoSAtmPvcLrDiscardedBytes=hwCBQoSAtmPvcLrDiscardedBytes, MatchRuleType=MatchRuleType, hwCBQoSGtsEbs=hwCBQoSGtsEbs, hwCBQoSMatchRuleCfgInfoTable=hwCBQoSMatchRuleCfgInfoTable, hwCBQoSAtmPvcWredRunInfoTable=hwCBQoSAtmPvcWredRunInfoTable, hwCBQoSFrPvcApplyPolicyEntry=hwCBQoSFrPvcApplyPolicyEntry, hwCBQoSIfWredRunInfoTable=hwCBQoSIfWredRunInfoTable, hwCBQoSFrPvcClassMatchRunInfoEntry=hwCBQoSFrPvcClassMatchRunInfoEntry, hwCBQoSFrPvcGtsPassedPackets=hwCBQoSFrPvcGtsPassedPackets, hwCBQoSFrPvcLrQueueSize=hwCBQoSFrPvcLrQueueSize, hwCBQoSClassifierLayer=hwCBQoSClassifierLayer, hwCBQoSAtmPvcQueueEnqueuedBytes=hwCBQoSAtmPvcQueueEnqueuedBytes, hwCBQoSAtmPvcApplyPolicyIfIndex=hwCBQoSAtmPvcApplyPolicyIfIndex, hwCBQoSAtmPvcCbqQueueSize=hwCBQoSAtmPvcCbqQueueSize, hwCBQoSMatchRuleType=hwCBQoSMatchRuleType, hwCBQoSIfGtsPassedPackets=hwCBQoSIfGtsPassedPackets, hwCBQoSFrPvcClassMatchedBytes=hwCBQoSFrPvcClassMatchedBytes, hwCBQoSClassifierName=hwCBQoSClassifierName, hwCBQoSRemarkType=hwCBQoSRemarkType, PYSNMP_MODULE_ID=hwCBQoSMIB, hwCBQoSIfCarRunInfoTable=hwCBQoSIfCarRunInfoTable, hwCBQoSFrPvcRemarkedPackets=hwCBQoSFrPvcRemarkedPackets, hwCBQoSGtsCfgInfoEntry=hwCBQoSGtsCfgInfoEntry, hwCBQoSAtmPvcCbqAfQueueSize=hwCBQoSAtmPvcCbqAfQueueSize, hwCBQoSPolicyCfgInfoTable=hwCBQoSPolicyCfgInfoTable, hwCBQoSSamplingCfgInfoEntry=hwCBQoSSamplingCfgInfoEntry, hwCBQoSAtmPvcApplyPolicyDirection=hwCBQoSAtmPvcApplyPolicyDirection)
