#
# PySNMP MIB module ALCATEL-IND1-ISIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-ISIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
routingIND1ISIS, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1ISIS")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
isisManAreaAddrExistState, isisSysInstance, isisSysL2State, SNPAAddress, isisISAdjEntry, SystemID, isisSysL1State, isisISAdjState = mibBuilder.importSymbols("ISIS-MIB", "isisManAreaAddrExistState", "isisSysInstance", "isisSysL2State", "SNPAAddress", "isisISAdjEntry", "SystemID", "isisSysL1State", "isisISAdjState")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, NotificationType, Unsigned32, TimeTicks, Bits, Gauge32, Counter32, Counter64, iso, ModuleIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "NotificationType", "Unsigned32", "TimeTicks", "Bits", "Gauge32", "Counter32", "Counter64", "iso", "ModuleIdentity", "Integer32", "MibIdentifier")
DisplayString, RowStatus, TimeInterval, TruthValue, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TimeInterval", "TruthValue", "TextualConvention", "TimeStamp")
timetraIsisMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1))
timetraIsisMIBModule.setRevisions(('2007-07-02 00:00', '1906-03-16 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-06-02 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1901-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraIsisMIBModule.setRevisionsDescriptions(('Rev 4.1 02 Aug 2007 00:00 Updated copyright information.', 'Rev 4.0 16 Mar 2006 00:00 Porting MIB to ALCATEL AOS & renamed as ALCATEL-ISIS-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-ISIS-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-ISIS-MIB.', 'Rev 2.1 02 Jun 2004 00:00 2.1 release of the TIMETRA-ISIS-MIB.', 'Rev 2.0 15 Jan 2004 00:00 2.0 release of the TIMETRA-ISIS-MIB.', 'Rev 1.2 15 Aug 2003 00:00 1.2 release of the TIMETRA-ISIS-MIB.', 'Rev 1.0 20 Jan 2003 00:00 1.0 Release of the TIMETRA-ISIS-MIB.', 'Rev 0.1 21 Sep 2001 00:00 Initial version of the TIMETRA-ISIS-MIB.',))
if mibBuilder.loadTexts: timetraIsisMIBModule.setLastUpdated('201205040000Z')
if mibBuilder.loadTexts: timetraIsisMIBModule.setOrganization('Alcatel - Architects Of An Internet World')
if mibBuilder.loadTexts: timetraIsisMIBModule.setContactInfo('Please consult with Customer Service to insure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: timetraIsisMIBModule.setDescription("This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line Configuration Of Global ISIS Configuration Parameters. This MIB has been taken from Alcatel 7x50 device ISIS MIB with minor modifications. Copyright 2003-2007 Alcatel-Lucent. ALL RIGHTS RESERVED WORLDWIDE Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel's proprietary intellectual property. Alcatel retains all title and ownership in the Specification, including any revisions. Alcatel grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
class TmnxAdminState(TextualConvention, Integer32):
    description = 'The TmnxAdminState data type is an enumerated integer that describes the values used to identify the administratively desired state of functional modules.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3))

class TmnxOperState(TextualConvention, Integer32):
    description = 'The TmnxOperState data type is an enumerated integer that describes the values used to identify the current operational state of functional modules.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("transition", 4))

vRtrIsisObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10))
vRtrIsisScalarObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 1))
vRtrIsisSystemObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2))
vRtrIsisIfObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3))
vRtrIsisAdjObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4))
vRtrIsisNotificationObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5))
vRtrIsisDatabaseClearObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 6))
vRtrIsisNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11))
vRtrIsisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12))
vRtrIsisStatisticsClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisStatisticsClear.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisStatisticsClear.setDescription('This object defines ISIS statistics information clear or reset. Note:It clears global statistics information and all interfacess statistics information.')
vRtrIsisLSPClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLSPClear.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPClear.setDescription('This object defines the ISIS lsp database clear.')
vRtrIsisISAdjClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisISAdjClear.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjClear.setDescription('This object defines the ISIS adjacency database clear.')
vRtrIsisSpfClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisSpfClear.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfClear.setDescription('This object defines the ISIS SpfLog database clear.')
vRtrIsisTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1), )
if mibBuilder.loadTexts: vRtrIsisTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisTable.setDescription('The vRtrIsisTable provides an extention of the isisSystemTable in the ISIS-MIB.')
vRtrIsisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"))
if mibBuilder.loadTexts: vRtrIsisEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisEntry.setDescription('Each row entry in the vRtrIsisTable represents additional columns for attributes specific to the Alcatel 7x50 series IS-IS protocol instance on this router.')
vRtrIsisLastEnabledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLastEnabledTime.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLastEnabledTime.setDescription('The vRtrIsisLastEnabledTime variable contains the sysUpTime value when vRtrIsisAdminState was last set to enabled (1) to run the IS-IS protocol in the router.')
vRtrIsisAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 118)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisAuthKey.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAuthKey.setDescription("vRtrIsisAuthKey is the authentication key string used to verify the authenticity of packets sent by neighboring routers on an IS-IS interface. For authentication to succeed both the authentication key and the authentication type defined by the vRtrIsisAuthType variable must match. If vRtrIsisAuthType is set to 'password', vRtrIsisAuthKey can include any ASCII character. Authentication can be configured globally and applied to all ISIS levels or it can be configured on a per level basis. The most specific value is used. When read, vRtrIsisAuthKey always returns an Octet String of length zero.")
vRtrIsisAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisAuthType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAuthType.setDescription('The value of vRtrIsisAuthType indicates the method of authentication used to verify the authenticity of packets sent by neighboring routers on an IS-IS interface. For authentication to succeed both the authentication key defined in the vRtrIsisAuthKey variable and the authentication type must match. Authentication can be configured globally and applied to all ISIS levels or it can be configured on a per level basis. The most specific value is used.')
vRtrIsisAuthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisAuthCheck.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAuthCheck.setDescription("When vRtrIsisAuthCheck has a value of 'true', all IS-IS protocol packets that have a mismatch on either the authentication type, specified by the value of vRtrIsisAuthType, or the authentication key, given in vRtrIsisAuthKey are rejected. When vRtrIsisAuthCheck has a value of 'false', authentication is performed on received IS-IS protocol packets but mismatched packets are not rejected.")
vRtrIsisLspLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(350, 65535)).clone(1200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLspLifetime.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLspLifetime.setDescription('The value of vRtrIsisLspLifetime specifies how long, in seconds, a given LSP is considered valid without the originating router having refreshed the LSP. The actual LSP refresh timer is the value of vRtrIsisLspLifetime minus 317 seconds.')
vRtrIsisOverloadTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1800), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisOverloadTimeout.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisOverloadTimeout.setDescription('The value of vRtrIsisOverloadTimeout is the amount of time, in seconds, the router operates in the overload state before attempting to reestablish normal operations. While in overload state, this IS-IS router will only be used if the destination is only reachable via this router; it is not used for other transit traffic. Operationally placing the router into the overload state is often used as a precursor to shutting down the IS-IS protocol operation. This variable is an extension to the isisSysWaitTime to accept an additional value of 0. This value means the router is in overload infinitely.')
vRtrIsisOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 12), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisOperState.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisOperState.setDescription('vRtrIsisOperState indicates the current operating state of this IS-IS protocol instance on this router.')
vRtrIsisShortCuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisShortCuts.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisShortCuts.setDescription("When the value of vRtrIsisShortCuts is 'true', MPLS label switched paths of LSPs are used as next hops whenever BGP need to resolve the next hop within the IS-IS domain. When the value of vRtrIsisShortCuts is 'false', IGP shortcuts are not required by BGP. This doesn't have any meaning if vRtrIsisTrafficEng is set to false.")
vRtrIsisSpfHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisSpfHoldTime.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfHoldTime.setDescription('Time interval at which SPF is run.')
vRtrIsisLastSpfRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLastSpfRun.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLastSpfRun.setDescription('The vRtrIsisLastSpfRun contains the sysUpTime value when the last SPF run was performed for this instance of the IS-IS protocol in the router.')
vRtrIsisGracefulRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisGracefulRestart.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisGracefulRestart.setDescription('The value of vRtrIsisGracefulRestart specifies whether the graceful restart is enabled or disabled for this instance of IS-IS on the router.')
vRtrIsisOverloadOnBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabledWaitForBgp", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisOverloadOnBoot.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisOverloadOnBoot.setDescription("The value of vRtrIsisOverloadOnBoot specifies if the router should be in overload state right after the boot up process. If the vRtrIsisOverloadOnBoot is set to 'enabled' the overload timeout is maintained by vRtrIsisOverloadOnBootTimeout.")
vRtrIsisOverloadOnBootTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1800), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisOverloadOnBootTimeout.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisOverloadOnBootTimeout.setDescription('The value of vRtrIsisOverloadOnBootTimeout is the amount of time, in seconds for which the router operates in the overload state before attempting to reestablish normal operations when the system comes up after a fresh boot. While in overload state, this IS-IS router will only be used if the destination is only reachable via this router; it is not used for other transit traffic.')
vRtrIsisSpfWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisSpfWait.setStatus('deprecated')
if mibBuilder.loadTexts: vRtrIsisSpfWait.setDescription('The value of vRtrIsisSpfWait defines the Maximum interval between two consecutive spf calculations in seconds. This object has been replaced by vRtrIsisSpfMaxWait, which has units of milliseconds.')
vRtrIsisSpfInitialWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisSpfInitialWait.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfInitialWait.setDescription('The value of vRtrIsisSpfInitialWait defines the initial SPF calculation delay (in milliseconds) after a topology change.')
vRtrIsisSpfSecondWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisSpfSecondWait.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfSecondWait.setDescription('The value of vRtrIsisSpfInitialWait defines the hold time between the first and second SPF calculation (in milliseconds). Subsequent SPF runs will occur at exponentially increasing intervals of spf-second-wait i.e. if spf-second-wait is 1000, then the next SPF will run after 2000 msec, the next one at 4000 msec etc until it is capped off at spf-wait value. The SPF interval will stay at spf-wait value until there are no more SPF runs scheduled in that interval. After a full interval without any SPF runs, the SPF interval will drop back to spf-initial-wait.')
vRtrIsisLspMaxWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLspMaxWait.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLspMaxWait.setDescription('The value of vRtrIsisLspWait dDefines the maximum interval (in seconds) between two consecutive ocurrences of an LSP being generated.')
vRtrIsisLspInitialWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLspInitialWait.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLspInitialWait.setDescription('The value of vRtrIsisLspInitialWait defines the initial LSP generation delay (in seconds).')
vRtrIsisLspSecondWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLspSecondWait.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLspSecondWait.setDescription('The value of vRtrIsisLspInitialWait defines the hold time between the first and second LSP generation (in seconds).')
vRtrIsisCsnpAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 25), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisCsnpAuthentication.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCsnpAuthentication.setDescription("When vRtrIsisCsnpAuthentication has a value of 'true', enables authentication of individual ISIS packets of CSNP type. The value of 'false' When vRtrIsisCsnpAuthentication has a value of 'false', supresses authentication of CSNP packets.")
vRtrIsisHelloAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 26), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisHelloAuthentication.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisHelloAuthentication.setDescription("When vRtrIsisHelloAuthentication has a value of 'true', enables authentication of individual ISIS packets of HELLO type. The value of 'false' When vRtrIsisHelloAuthentication has a value of 'false', supresses authentication of HELLO packets.")
vRtrIsisPsnpAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisPsnpAuthentication.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPsnpAuthentication.setDescription("When vRtrIsisPsnpAuthentication has a value of 'true', enables authentication of individual ISIS packets of PSNP type. The value of 'false' When vRtrIsisPsnpAuthentication has a value of 'false', supresses authentication of PSNP packets.")
vRtrIsisGRRestartDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisGRRestartDuration.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisGRRestartDuration.setDescription('The value of vRtrIsisGRRestartDuration specifies the maximum amount of time, in seconds, needed to re-establish ISIS adjacencies in all areas.')
vRtrIsisGRHelperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisGRHelperMode.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisGRHelperMode.setDescription("The value of vRtrIsisGRHelperMode specifies whether the graceful restart helper mode is enabled or disabled for this instance of IS-IS on the router. vRtrIsisGRHelperMode is valid only if the value of vRtrIsisGracefulRestart is 'true'. When vRtrIsisGRHelperMode has a value of 'true' graceful restart helper capabilaities are enabled. When it has a value of 'false' the graceful restart helper capabilities are disabled.")
vRtrIsisStrictAdjacencyCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisStrictAdjacencyCheck.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisStrictAdjacencyCheck.setDescription("The value of vRtrIsisStrictAdjacencyCheck specifies whether an ISIS adjacency can be formed when two routers do not run the same IP versions. When the value is 'true', both routers have to run the same IP versions in the ISIS protocol. When it is 'false', having one common IP version running is enough to form an adjacency.")
vRtrIsisSpfMaxWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 120000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisSpfMaxWait.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfMaxWait.setDescription('The value of vRtrIsisSpfMaxWait defines the Maximum interval between two consecutive spf calculations in milliseconds.')
vRtrIsisActivateIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 32), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisActivateIPv4.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisActivateIPv4.setDescription('The value of vRtrIsisActivateIPv4 activates the IPv4 routing in ISIS. This will be enabled by default.')
vRtrIsisActivateIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 33), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisActivateIPv6.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisActivateIPv6.setDescription('The value of vRtrIsisActivateIPv6 activates the IPv6 routing in ISIS. This will be enabled by default.')
vRtrIsisMTEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 1, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisMTEnabled.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisMTEnabled.setDescription('Indicates whether M-ISIS capability, as IETF RFC 5120 is enabled (or not) on this ISIS system.')
vRtrIsisLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2), )
if mibBuilder.loadTexts: vRtrIsisLevelTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelTable.setDescription('The vRtrIsisLevelTable provides attributes to be applied on a specific IS-IS protocol level.')
vRtrIsisLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevel"))
if mibBuilder.loadTexts: vRtrIsisLevelEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelEntry.setDescription('Each row entry in the vRtrIsisLevelTable represents IS-IS level default global attributes to be used with interfaces belonging to a specific IS-IS protocol instance on a specific router instance. The rows in this table cannot be created nor destroyed by SNMP SET requests. There are always two rows in this table that are created by the agent with default values upon system initialization.')
vRtrIsisLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2))))
if mibBuilder.loadTexts: vRtrIsisLevel.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevel.setDescription('The value of vRtrIsisLevel indicates the IS-IS protocol level to which these row attributes are applied.')
vRtrIsisLevelAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 118)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLevelAuthKey.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelAuthKey.setDescription("vRtrIsisLevelAuthKey is the authentication key string used to verify the authenticity of packets sent by neighboring routers on an IS-IS interface at this level. For authentication to succeed both the authentication key and the authentication type defined by the vRtrIsisLevelAuthType variable must match. If vRtrIsisLevelAuthType is set to 'password', vRtrIsisLevelAuthKey can include any ASCII character. Authentication can be configured globally and applied to all ISIS levels or it can be configured on a per level basis. The most specific value is used. If the value of vRtrIsisLevelAuthType is 'useGlobal', then the global values, if any, defined in vRtrIsisAuthKey and vRtrIsisAuthType are used instead. When read, vRtrIsisLevelAuthKey always returns an Octet String of length zero.")
vRtrIsisLevelAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("useGlobal", 0), ("none", 1), ("password", 2), ("md5", 3))).clone('useGlobal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLevelAuthType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelAuthType.setDescription("The value of vRtrIsisLevelAuthType indicates the method of authentication used to verify the authenticity of packets sent by neighboring routers on an IS-IS interface at this level. For authentication to succeed both the authentication key defined in the vRtrIsisLevelAuthKey variable and the authentication type must match. Authentication can be configured globally and applied to all ISIS levels or it can be configured on a per level basis. The most specific value is used. When vRtrIsisLevelAuthType has a value of 'useGlobal', the values of vRtrIsisAuthKey and vRtrIsisAuthType are applied to the interfaces for this level.")
vRtrIsisLevelWideMetricsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLevelWideMetricsOnly.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelWideMetricsOnly.setDescription("IS-IS metrics can have values between 1 and 63, referred to as small metrics. IS-IS generates two TLVs: one for the adjacency and one for the IP prefix. In order to support traffic engineering, wider metrics are required; a second pair of TLV's are also generated. When vRtrIsisLevelWideMetricsOnly has a value of 'false', both the small and wide metric pairs of TLV's are generated. When vRtrIsisLevelWideMetricsOnly has a value of 'true', only the wide metric pair of TLV's is generated.")
vRtrIsisLevelOverloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInOverload", 1), ("dynamic", 2), ("manual", 3), ("manualOnBoot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLevelOverloadStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelOverloadStatus.setDescription("The value of vRtrIsisLevelOverloadStatus indicates whether or not this level is in overload state. When has the value 'notInOverload', the IS-IS level is normal state. When the value is 'dynamic', the level is in the overload state because of insufficient memeory to add additional entries to the IS-IS database for this level. When the value is 'manual', the level has been put into the overload state administratively as a result of the isisSysSetOverload object in the ISIS-MIB having been set.")
vRtrIsisLevelOverloadTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLevelOverloadTimeLeft.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelOverloadTimeLeft.setDescription("The value of vRtrIsisOverloadTimeLeft specifies the remaining time, measured in units of 0.01 seconds, before this level will attempt to enter its normal state. If vRtrIsisLevelOverloadStatus has a value of 'notInOverload', then a read of vRtrIsisLevelOverloadTimeLeft returns zero (0).")
vRtrIsisLevelNumLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLevelNumLSPs.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelNumLSPs.setDescription('The value of vRtrIsisLevelNumLSPs specifies the number of LSPs existing in the system for the particular level.')
vRtrIsisLevelCsnpAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLevelCsnpAuthentication.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelCsnpAuthentication.setDescription("When vRtrIsisLevelCsnpAuthentication has a value of 'true', enables authentication of individual ISIS packets of CSNP type at this level. The value of 'false' When vRtrIsisLevelCsnpAuthentication has a value of 'false', supresses authentication of CSNP packets at this level.")
vRtrIsisLevelHelloAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLevelHelloAuthentication.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelHelloAuthentication.setDescription("When vRtrIsisLevelHelloAuthentication has a value of 'true', enables authentication of individual ISIS packets of HELLO type at this level. The value of 'false' When vRtrIsisLevelHelloAuthentication has a value of 'false', supresses authentication of HELLO packets at this level.")
vRtrIsisLevelPsnpAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLevelPsnpAuthentication.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLevelPsnpAuthentication.setDescription("When vRtrIsisLevelPsnpAuthentication has a value of 'true', enables authentication of individual ISIS packets of PSNP type at this level. The value of 'false' When vRtrIsisLevelPsnpAuthentication has a value of 'false', supresses authentication of PSNP packets at this level.")
vRtrIsisStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3), )
if mibBuilder.loadTexts: vRtrIsisStatsTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisStatsTable.setDescription('The vRtrIsisStatsTable provides statsistics for each instance of IS-IS protocol configured. There is a one-to-one dependent relationship between the tables vRtrIsisTable and vRtrIsisStatsTable.')
vRtrIsisStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"))
if mibBuilder.loadTexts: vRtrIsisStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisStatsEntry.setDescription('Each row entry in the vRtrIsisStatsTable stores statistics for an instance of IS-IS protocol configured.')
vRtrIsisSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisSpfRuns.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfRuns.setDescription('The value of vRtrIsisSpfRuns specifies the number of times shortest path first calculations have been made.')
vRtrIsisLSPRegenerations = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPRegenerations.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPRegenerations.setDescription('The value of vRtrIsisLSPRegenerations maintains the count of LSP regenerations.')
vRtrIsisInitiatedPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisInitiatedPurges.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInitiatedPurges.setDescription('The value of vRtrIsisInitiatedPurges counts the number of times purges have been initiated.')
vRtrIsisLSPRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPRecd.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPRecd.setDescription('The count of link state PDUs received by this instance of the protocol is maintained by vRtrIsisLSPRecd.')
vRtrIsisLSPDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPDrop.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPDrop.setDescription('The count of link state PDUs dropped by this instance of the protocol is maintained by vRtrIsisLSPDrop.')
vRtrIsisLSPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPSent.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPSent.setDescription('The count of link state PDUs sent out by this instance of the protocol is maintained by vRtrIsisLSPSent.')
vRtrIsisLSPRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPRetrans.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPRetrans.setDescription('The count of link state PDUs that had to be retransmitted by this instance of the protocol is maintained by vRtrIsisLSPRetrans.')
vRtrIsisIIHRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIIHRecd.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIIHRecd.setDescription('The count of link state PDUs received by this instance of the protocol is maintained by vRtrIsisIIHRecd.')
vRtrIsisIIHDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIIHDrop.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIIHDrop.setDescription('The count of link state PDUs dropped by this instance of the protocol is maintained by vRtrIsisIIHDrop.')
vRtrIsisIIHSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIIHSent.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIIHSent.setDescription('The count of link state PDUs sent out by this instance of the protocol is maintained by vRtrIsisIIHSent.')
vRtrIsisIIHRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIIHRetrans.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIIHRetrans.setDescription('The count of link state PDUs that had to be retransmitted by this instance of the protocol is maintained by vRtrIsisIIHRetrans.')
vRtrIsisCSNPRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisCSNPRecd.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCSNPRecd.setDescription('The count of link state PDUs received by this instance of the protocol is maintained by vRtrIsisCSNPRecd.')
vRtrIsisCSNPDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisCSNPDrop.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCSNPDrop.setDescription('The count of link state PDUs dropped by this instance of the protocol is maintained by vRtrIsisCSNPDrop.')
vRtrIsisCSNPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisCSNPSent.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCSNPSent.setDescription('The count of link state PDUs sent out by this instance of the protocol is maintained by vRtrIsisCSNPSent.')
vRtrIsisCSNPRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisCSNPRetrans.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCSNPRetrans.setDescription('The count of link state PDUs that had to be retransmitted by this instance of the protocol is maintained by vRtrIsisCSNPRetrans.')
vRtrIsisPSNPRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPSNPRecd.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPSNPRecd.setDescription('The count of link state PDUs received by this instance of the protocol is maintained by vRtrIsisPSNPRecd.')
vRtrIsisPSNPDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPSNPDrop.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPSNPDrop.setDescription('The count of link state PDUs dropped by this instance of the protocol is maintained by vRtrIsisPSNPDrop.')
vRtrIsisPSNPSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPSNPSent.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPSNPSent.setDescription('The count of link state PDUs sent out by this instance of the protocol is maintained by vRtrIsisPSNPSent.')
vRtrIsisPSNPRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPSNPRetrans.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPSNPRetrans.setDescription('The count of link state PDUs that had to be retransmitted by this instance of the protocol is maintained by vRtrIsisPSNPRetrans.')
vRtrIsisUnknownRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisUnknownRecd.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisUnknownRecd.setDescription('The count of link state PDUs received by this instance of the protocol is maintained by vRtrIsisUnknownRecd.')
vRtrIsisUnknownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisUnknownDrop.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisUnknownDrop.setDescription('The count of link state PDUs dropped by this instance of the protocol is maintained by vRtrIsisUnknownDrop.')
vRtrIsisUnknownSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisUnknownSent.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisUnknownSent.setDescription('The count of link state PDUs sent out by this instance of the protocol is maintained by vRtrIsisUnknownSent.')
vRtrIsisUnknownRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisUnknownRetrans.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisUnknownRetrans.setDescription('The count of link state PDUs that had to be retransmitted by this instance of the protocol is maintained by vRtrIsisUnknownRetrans.')
vRtrIsisCSPFRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisCSPFRequests.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCSPFRequests.setDescription('vRtrIsisCSPFRequests maintains the number of CSPF requests made to the protocol.')
vRtrIsisCSPFDroppedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisCSPFDroppedRequests.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCSPFDroppedRequests.setDescription('vRtrIsisCSPFDroppedRequests maintains the number of dropped CSPF requests by the protocol.')
vRtrIsisCSPFPathsFound = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisCSPFPathsFound.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCSPFPathsFound.setDescription('vRtrIsisCSPFPathsFound maintains the number of responses to CSPF requests for which paths satisfying the constraints were found.')
vRtrIsisCSPFPathsNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisCSPFPathsNotFound.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCSPFPathsNotFound.setDescription('vRtrIsisCSPFPathsFound maintains the number of responses to CSPF requests for which no paths satisfying the constraints were found.')
vRtrIsisHostnameTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 4), )
if mibBuilder.loadTexts: vRtrIsisHostnameTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisHostnameTable.setDescription('The vRtrIsisHostnameTable provides the mapping of a system-id for an IS to the hostname as provided by the system. This table may not have mapping of all system-id to hostname as it is not mandatory to exchange hostnames.')
vRtrIsisHostnameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 4, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisSysID"))
if mibBuilder.loadTexts: vRtrIsisHostnameEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisHostnameEntry.setDescription('Each row entry in the vRtrIsisHostnameTable stores the mapping of a system-id to a hostname.')
vRtrIsisSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 4, 1, 1), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisSysID.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSysID.setDescription('vRtrIsisSysID is the system-id for which we map the hostname in the object vRtrIsisHostname.')
vRtrIsisHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisHostname.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisHostname.setDescription('vRtrIsisHostname maps the hostname for the corresponding system-id as stored in.')
vRtrIsisRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5), )
if mibBuilder.loadTexts: vRtrIsisRouteTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteTable.setDescription('The vRtrIsisRouteTable maintain the routes learnt by an instance of IS-IS protocol.')
vRtrIsisRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteDest"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteMask"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteNexthopIP"))
if mibBuilder.loadTexts: vRtrIsisRouteEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteEntry.setDescription('Each row entry in the vRtrIsisRouteTable stores a route for a given instance of the IS-IS protocol.')
vRtrIsisRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisRouteDest.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteDest.setDescription('vRtrIsisRouteDest is the destination IP address of this route. This object may not have any Multicast (Class D) address value. Any instance of this object should be used in conjunction with the corresponding instance of vRtrIsisRouteMask object. The prefix is obtained by bitwise logical-AND of the two specified objects.')
vRtrIsisRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisRouteMask.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteMask.setDescription('vRtrIsisRouteMask indicates the mask to be logical-ANDed with the destination address to get the network prefix.')
vRtrIsisRouteNexthopIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisRouteNexthopIP.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteNexthopIP.setDescription('vRtrIsisRouteNexthopIP refers to the IP address of the nexthop for this route.')
vRtrIsisRouteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisRouteLevel.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteLevel.setDescription('vRtrIsisRouteLevel maintains the IS-IS Level at which the prefix was learnt.')
vRtrIsisRouteSpfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisRouteSpfVersion.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteSpfVersion.setDescription('The version of spf calculation in which this route was selected is maintained by an instance of vRtrIsisRouteSpfVersion.')
vRtrIsisRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisRouteMetric.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteMetric.setDescription('vRtrIsisRouteMetric associates a metric value with the route. This is obtained by the SPF calculations and is used by the instance of the protocol. For a given prefix, the route with the lower metric is the shorter route.')
vRtrIsisRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisRouteType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteType.setDescription('The value of vRtrIsisRouteType indicates the type of route represented by this row entry.')
vRtrIsisRouteNHopSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 5, 1, 8), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisRouteNHopSysID.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteNHopSysID.setDescription('vRtrIsisRouteNHopSysID maintains the system-id of one nexthop IS through which this route is reachable.')
vRtrIsisPathTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 6), )
if mibBuilder.loadTexts: vRtrIsisPathTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPathTable.setDescription('The vRtrIsisPathTable maintain information regarding SPF calculation for each instance of IS-IS protocol.')
vRtrIsisPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 6, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevel"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisPathID"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisPathIfIndex"))
if mibBuilder.loadTexts: vRtrIsisPathEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPathEntry.setDescription('Each row entry in the vRtrIsisPathTable')
vRtrIsisPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPathID.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPathID.setDescription('The path identifier is maintained by vRtrIsisPathID. It has first 6 octets as the system-id followed by one octet of the LanId.')
vRtrIsisPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPathIfIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPathIfIndex.setDescription('vRtrIsisPathIfIndex maintains the ifIndex of the outgoing interface for the path.')
vRtrIsisPathNHopSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 6, 1, 3), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPathNHopSysID.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPathNHopSysID.setDescription('The nexthop IS for this route is referenced by the system-id of the nexthop and is maintained in the instance of vRtrIsisPathNHopSysID.')
vRtrIsisPathMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPathMetric.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPathMetric.setDescription('The metric assigned to this entry after SPF calculations is stored in vRtrIsisPathMetric. The lower the metric value, the shorter is the path and hence more preferred by the protocol.')
vRtrIsisPathSNPA = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 6, 1, 5), SNPAAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisPathSNPA.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPathSNPA.setDescription('vRtrIsisPathSNPA stores the subnet point of attachment for this path.')
vRtrIsisLSPTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7), )
if mibBuilder.loadTexts: vRtrIsisLSPTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPTable.setDescription('The vRtrIsisLSPTable maintain information regarding all the LSPs in the LSP database of each instance of IS-IS protocol for a given level.')
vRtrIsisLSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevel"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPId"))
if mibBuilder.loadTexts: vRtrIsisLSPEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPEntry.setDescription('Each row entry in the vRtrIsisLSPTable represents an LSP in the LSP database.')
vRtrIsisLSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPId.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPId.setDescription('The LSP Id. The format of the vRtrIsisLSPId is given as 6 octets of ajacency system-id followed by 1 octet LanId and 1 octet LSP Number.')
vRtrIsisLSPSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPSeq.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPSeq.setDescription('The sequence number of an LSP. The sequence number is a four byte quantity that represents the version of an LSP. The higher the sequence number, the more up to date the information. The sequence number is always incremented by the system that originated the LSP and ensures that there is only one version of that LSP in the entire network.')
vRtrIsisLSPChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPChecksum.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPChecksum.setDescription('vRtrIsisLSPChecksum is the checksum of contents of LSP from the SourceID field in the LSP till the end. The checksum is computed using the Fletcher checksum algorithm. ')
vRtrIsisLSPLifetimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPLifetimeRemain.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPLifetimeRemain.setDescription('Remaining lifetime of this LSP. This is stored in vRtrIsisLSPLifetimeRemain which is a decrementing counter that decrements in seconds starting from the value as received in the LSP if not self-originated OR from vRtrIsisLspLifetime for self originated LSPs. When the remaining lifetime becomes zero, the contents of the LSP should not be considered for SPF calculation.')
vRtrIsisLSPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPVersion.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPVersion.setDescription('vRtrIsisLSPVersion stores the version of the ISIS protocol that has generated the LSP')
vRtrIsisLSPPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPPktType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPPktType.setDescription('Packet type for instance Hello PDUs, LSPs, CSNPs OR PSNPs at both IS-IS protocol levels i.e. L1 and L2 as maintained in vRtrIsisLSPPktType. ')
vRtrIsisLSPPktVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPPktVersion.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPPktVersion.setDescription('vRtrIsisLSPVersion stores the version of the ISIS protocol that has generated the Packet.')
vRtrIsisLSPMaxArea = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPMaxArea.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPMaxArea.setDescription('Maximum number of areas supported by the originator of the LSP. A value of 0 for vRtrIsisLSPMaxArea indicates a default of 3 areas. ')
vRtrIsisLSPSysIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPSysIdLen.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPSysIdLen.setDescription('vRtrIsisLSPSysIdLen is the length of the system-id as used by the originator.')
vRtrIsisLSPAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPAttributes.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPAttributes.setDescription('Attributes associated with the LSP. These include the attached bit, overload bit, IS type of the system originating the LSP and the partition repair capability. The attached bit and the overload bit are of significance only when present in the LSP numbered zero and should be ignored on receipt in any other LSP.')
vRtrIsisLSPUsedLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPUsedLen.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPUsedLen.setDescription('The used length for the LSP. For an LSP that is not self originated, the used length is always equal to vRtrIsisLSPAllocLen. For self originated LSPs, the used length is less than or equal to vRtrIsisLSPAllocLen.')
vRtrIsisLSPAllocLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPAllocLen.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPAllocLen.setDescription('The length allocated for the LSP to be stored. This size is stored in vRtrIsisLSPAllocLen.')
vRtrIsisLSPBuff = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(27, 1492))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPBuff.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPBuff.setDescription('vRtrIsisLSPBuff stores the LSP as existing in the LSP database.')
vRtrIsisLSPZeroRLT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 7, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisLSPZeroRLT.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPZeroRLT.setDescription("vRtrIsisLSPZeroRLT stores the LSP state if it has once reached zero remaining lifetime. If this object is 'true' then the object vRtrIsisLSPLifetimeRemain will maintain the time remaining after which this LSP will be discarded.")
vRtrIsisIfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1), )
if mibBuilder.loadTexts: vRtrIsisIfTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfTable.setDescription('The vRtrIsisIfTable has an entry for each router interface configured for the IS-IS protocol.')
vRtrIsisIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisIfEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfEntry.setDescription("Each row entry in the vRtrIsisIfTable represents an interface on this router that participates in the IS-IS protocol. An entry in this table can be created or destroyed by an SNMP SET request to vRtrIsisIfRowStatus. An attempt to destroy a row will fail if vRtrIsisIfAdminState has not first been set to 'outOfService'.")
vRtrIsisIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisIfIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfIndex.setDescription("A unique value, greater than zero, for each interface or interface sub-layer in the managed system. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub- layer must remain constant at least from one re- initialization of the entity's network management system to the next re-initialization.")
vRtrIsisIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfRowStatus.setDescription("The row status used for creation, deletion, or control of vRtrIsisIfTable entries. Before this row can be destroyed, vRtrIsisIfAdminState must have been set to 'outOfService'.")
vRtrIsisIfLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIfLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLastChangeTime.setDescription('The sysUpTime when this row was last modified.')
vRtrIsisIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 4), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfAdminState.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfAdminState.setDescription('The desired administrative state for IS-IS protocol on this interface.')
vRtrIsisIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 5), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIfOperState.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfOperState.setDescription('The current operational state of IS-IS protocol on this interface.')
vRtrIsisIfCsnpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfCsnpInterval.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfCsnpInterval.setDescription("The value of vRtrIsisIfCsnpInterval specifies the interval of time, in seconds, between transmission of Complete Sequence Number PDUs (CSNP). If the value of isisCircType for this interface is 'broadcast' and this router is the designated router on a LAN, the default frequency is ten seconds. if the value of isisCircType for this interface is 'ptToPt', point-to-point, the default frequency is every five seconds.")
vRtrIsisIfHelloAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 118)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfHelloAuthKey.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfHelloAuthKey.setDescription("vRtrIsisIfHelloAuthKey is the authentication key string used to verify the authenticity of packets sent by neighboring routers on this IS-IS interface. For authentication to succeed both the authentication key and the authentication type defined by the vRtrIsisIfHelloAuthType variable must match. If vRtrIsisIfHelloAuthType is set to 'password', vRtrIsisIfHelloAuthKey can include any ASCII character. Authentication can be configured globally and applied to all ISIS levels running on this interface or it can be configured on a per level basis. The most specific value is used. When read, vRtrIsisIfHelloAuthKey always returns an Octet String of length zero.")
vRtrIsisIfHelloAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfHelloAuthType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfHelloAuthType.setDescription('The value of vRtrIsisIfHelloAuthType indicates the method of authentication used to verify the authenticity of packets sent by neighboring routers on this IS-IS interface. For authentication to succeed both the authentication key defined in the vRtrIsisIfHelloAuthKey variable and the authentication type must match. Authentication can be configured globally and applied to all ISIS levels running on this interface or it can be configured on a per level basis. The most specific value is used.')
vRtrIsisIfLspPacingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfLspPacingInterval.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLspPacingInterval.setDescription('The value of vRtrIsisIfLspPacingInterval specifies the minimal interval of time, in milliseconds, between transmission of Link State PDUs (LSPs) for all ISIS levels running on this interface. If the value of vRtrIsisIfLspInterval is zero (0), no LSPs will be sent on this interface.')
vRtrIsisIfCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIfCircIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfCircIndex.setDescription('The value of vRtrIsisIfCircIndex is a cross reference index to the isisCircTable.')
vRtrIsisIfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfRetransmitInterval.setDescription('The value of vRtrIsisIfRetransmitInterval specifies the minimal interval of time, in seconds between retransmission of an LSP on point-to-point interfaces.')
vRtrIsisIfTypeDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfTypeDefault.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfTypeDefault.setDescription("The value of vRtrIsisIfTypeDefault complements the object isisCircType. It indicates if the circuit type is default or has been modified. Setting vRtrIsisIfTypeDefault to 'true' resets isisCircType to the default for that interface. Similarly any modification to the object isisCircType triggers this object to become 'false'. There is no effect of setting this object to 'false'.")
vRtrIsisIfAddressFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("v4", 1), ("v6", 2), ("v4v6", 3), ("nov4", 5), ("nov6", 6), ("nov4v6", 7))).clone('nov4v6')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfAddressFamily.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfAddressFamily.setDescription('The value of vRtrIsisIfAddressFamily enables the address-families on a particular ISIS circuit')
vRtrIsisIfLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2), )
if mibBuilder.loadTexts: vRtrIsisIfLevelTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelTable.setDescription('The vRtrIsisIfLevelTable provides attributes to be applied on a specific IS-IS interface operating at a specific IS-IS protocol level.')
vRtrIsisIfLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevel"))
if mibBuilder.loadTexts: vRtrIsisIfLevelEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelEntry.setDescription('Each row entry in the vRtrIsisIfLevelTable represents IS-IS level attributes to be used with an interface belonging to a specific IS-IS protocol instance on a specific router instance. Rows for Level 1 and 2 are created as an action of creating a row in the vRtrIsisIfTable.')
vRtrIsisIfLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2))))
if mibBuilder.loadTexts: vRtrIsisIfLevel.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevel.setDescription('The value of vRtrIfLevelIndex specifies the IS-IS protocol level that this row entry describes.')
vRtrIsisIfLevelLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIfLevelLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelLastChangeTime.setDescription('The sysUpTime when this row was last modified.')
vRtrIsisIfLevelHelloAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 118)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfLevelHelloAuthKey.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelHelloAuthKey.setDescription("vRtrIsisIfLevelHelloAuthKey is the authentication key string used to verify the authenticity of packets sent by neighboring routers on this IS-IS interface at this level. For authentication to succeed both the authentication key and the authentication type defined by the vRtrIsisIfLevelHelloAuthType variable must match. If vRtrIsisIfLevelHelloAuthType is set to 'password', vRtrIsisIfLevelHelloAuthKey can include any ASCII character. Authentication can be configured globally and applied to all ISIS levels or it can be configured on a per level basis. The most specific value is used. If the value of vRtrIsisIfLevelHelloAuthType is 'useGlobal', then the global values, if any, defined in vRtrIsisIfHelloAuthKey and vRtrIsisIfHelloAuthType are used instead. When read, vRtrIsisIfLevelHelloAuthKey always returns an Octet String of length zero.")
vRtrIsisIfLevelHelloAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("useGlobal", 0), ("none", 1), ("password", 2), ("md5", 3))).clone('useGlobal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfLevelHelloAuthType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelHelloAuthType.setDescription("The value of vRtrIsisIfLevelHelloAuthType indicates the method of authentication used to verify the authenticity of packets sent by neighboring routers on this IS-IS interface at this level. For authentication to succeed both the authentication key defined in the vRtrIsisIfLevelHelloAuthKey variable and the authentication type must match. Authentication can be configured globally and applied to all ISIS levels running on this interface or it can be configured on a per level basis. The most specific value is used. When vRtrIsisIfLevelHelloAuthType has a value of 'useGlobal', the values of vRtrIsisIfLevelHelloAuthKey and vRtrIsisIfLevelHelloAuthType are applied to the interfaces for this level.")
vRtrIsisIfLevelPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfLevelPassive.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelPassive.setDescription("If vRtrIsisIfLevelPassive has a value of 'true', this interface address is advertised for this level without running the IS-IS protocol on this interface level. While in passive mode, the interface level ignores ingress IS-IS protocol packets and does not transmit any IS-IS protocol packets. If the value of vRtrIsisIfLevelPassive is 'false', this interface address is advertised at this IS-IS level only if it is configured as with the IS-IS protocol as enabled.")
vRtrIsisIfLevelTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4261412864))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfLevelTeMetric.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelTeMetric.setDescription("The value of vRtrIsisIfLevelTeMetric specifies the metric that is used exclusively by IS-IS traffic engineered traffic. Normal IS-IS traffic specifies metrics values between 1 and 63. Wider metrics are needed to support traffic engineering. See vRtrIsisLevelWideMetricsOnly description for more details.. The value '0' means not configured.")
vRtrIsisIfLevelNumAdjacencies = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIfLevelNumAdjacencies.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelNumAdjacencies.setDescription('vRtrIsisIfLevelNumAdjacencies maintains the number of adjacencies on this particular level of the interface.')
vRtrIsisIfLevelISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfLevelISPriority.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelISPriority.setDescription('vRtrIsisIfLevelISPriority shadows the object isisCircLevelISPriority to have an additional accepted value of 0.')
vRtrIsisIfLevelHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfLevelHelloTimer.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelHelloTimer.setDescription('vRtrIsisIfLevelHellotimer shadows isisCircLevelHelloTimer to have store the values of hello timer in seconds.')
vRtrIsisIfLevelAdminMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisIfLevelAdminMetric.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelAdminMetric.setDescription('The default metric value of this circuit for this level. A value of 0 means that the metric is not configured. In such a case if the vRtrIsisReferenceBw is configured, the value of the metric should be calculated using the formula : Metric = reference-bandwidth / bandwidth. If the vRtrIsisReferenceBw is configured as Ten Gig (10,000,000,000) a 100-Mbps interface has a default metric of 100. In order for metrics in excess of 63 to be configured wide metrics must be deployed. If the reference bandwidth is not configured then all levels will have a default metric of 10. The operational value of the metric is maintained in the object vRtrIsisIfLevelOperMetric.')
vRtrIsisIfLevelOperMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 3, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisIfLevelOperMetric.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfLevelOperMetric.setDescription('The operational value of the metric being used in this circuit for this level.')
vRtrIsisISAdjTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1), )
if mibBuilder.loadTexts: vRtrIsisISAdjTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjTable.setDescription('vRtrIsisISAdjTable is the table of adjacencies to Intermediate Systems and their operational status information.')
vRtrIsisISAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1), )
isisISAdjEntry.registerAugmentions(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjEntry"))
vRtrIsisISAdjEntry.setIndexNames(*isisISAdjEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIsisISAdjEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjEntry.setDescription('Each row entry in the vRtrIsisISAdjTable represents additional columns for attributes specific to the Alcatel 7x50 SR series ISIS implementation.')
vRtrIsisISAdjExpiresIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjExpiresIn.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjExpiresIn.setDescription('vRtrIsisISAdjExpiresIn maintains the time in which the adjacency will expire if no hello packets are received.')
vRtrIsisISAdjCircLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1L2", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjCircLevel.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjCircLevel.setDescription('vRtrIsisISAdjCircLevel specifies the circuit type of the adjacency as advertised.')
vRtrIsisISAdjNeighborIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjNeighborIP.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjNeighborIP.setDescription('The ip-address of the neighbor with which adjacency is formed is maintained in vRtrIsisISAdjNeighborIP.')
vRtrIsisISAdjRestartSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjRestartSupport.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjRestartSupport.setDescription("vRtrIsisISAdjRestartSupport indicates whether adjacency supports ISIS graceful restart. If vRtrIsisISAdjRestartSupport has a value of 'true' the adjacency supports graceful restart.")
vRtrIsisISAdjRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notHelping", 1), ("restarting", 2), ("restart-complete", 3), ("helping", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjRestartStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjRestartStatus.setDescription('vRtrIsisISAdjRestartStatus indicates the graceful restart status of the adjacency.')
vRtrIsisISAdjRestartSupressed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjRestartSupressed.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjRestartSupressed.setDescription("vRtrIsisISAdjRestartSupressed indicates if the adjacency has requested this router to suppress advertisement of the adjacency in this router's LSPs. If vRtrIsisISAdjRestartSupressed has a value of 'true' the adjacency has requested to suppress advertisement of the LSPs.")
vRtrIsisISAdjNumRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjNumRestarts.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjNumRestarts.setDescription('vRtrIsisISAdjNumRestarts indicates the number of times the adjacency has attempted restart.')
vRtrIsisISAdjLastRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjLastRestartTime.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjLastRestartTime.setDescription('vRtrIsisISAdjLastRestartTime indicates the last time the adjacency attempted restart.')
vRtrIsisISAdjNeighborIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjNeighborIPv6Type.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjNeighborIPv6Type.setDescription("The value of vRtrIsisISAdjNeighborIPv6Type indicates the IP address type of vRtrIsisISAdjNeighborIpv6. It will always be 'ipv6'.")
vRtrIsisISAdjNeighborIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjNeighborIpv6.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjNeighborIpv6.setDescription('The value of vRtrIsisISAdjNeighborIpv6 indicates the IP address of the neighbor with which an IPv6-adjacency is formed. This will always be an IPv6 address.')
vRtrIsisISAdjMTIdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisISAdjMTIdMask.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisISAdjMTIdMask.setDescription('The list of MT IDs supported, as derived from the bit mask that is internally maintained for each ISIS adjacency.')
vRtrIsisSpfLogTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8), )
if mibBuilder.loadTexts: vRtrIsisSpfLogTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfLogTable.setDescription('The vRtrIsisSpfLogTable maintains information regarding SPF runs for each instance of IS-IS protocol. There is a maximum of 20 log entries stored per IS-IS protocol instance.')
vRtrIsisSpfLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfTimeStamp"))
if mibBuilder.loadTexts: vRtrIsisSpfLogEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfLogEntry.setDescription('Each entry maintains log information about a specific SPF run made on a particular IS-IS protocol instance.')
vRtrIsisSpfTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8, 1, 1), TimeStamp())
if mibBuilder.loadTexts: vRtrIsisSpfTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfTimeStamp.setDescription('vRtrIsisSpfTimeStamp maintains the timestamp when the SPF run started on the system.')
vRtrIsisSpfRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisSpfRunTime.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfRunTime.setDescription('vRtrIsisSpfRunTime maintains the time (in hundredths of a second) required to complete the SPF run ')
vRtrIsisSpfL1Nodes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisSpfL1Nodes.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfL1Nodes.setDescription('vRtrIsisSpfL1Nodes maintains the number of level 1 nodes involved in the SPF run.')
vRtrIsisSpfL2Nodes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisSpfL2Nodes.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfL2Nodes.setDescription('vRtrIsisSpfL2Nodes maintains the number of level 2 nodes involved in the SPF run.')
vRtrIsisSpfEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisSpfEventCount.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfEventCount.setDescription('vRtrIsisSpfEventCount specifies the number of SPF events that triggered the SPF calculation.')
vRtrIsisSpfLastTriggerLSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisSpfLastTriggerLSPId.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfLastTriggerLSPId.setDescription('vRtrIsisSpfLastTriggerLSPId maintains the LSPId of the last LSP processed before the SPF run.')
vRtrIsisSpfTriggerReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 8, 1, 7), Bits().clone(namedValues=NamedValues(("newAdjacency", 0), ("newLSP", 1), ("newArea", 2), ("reach", 3), ("ecmpChanged", 4), ("newMetric", 5), ("teChanged", 6), ("restart", 7), ("lspExpired", 8), ("lspDbChanged", 9), ("lspChanged", 10), ("newPreference", 11), ("newNLPID", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisSpfTriggerReason.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfTriggerReason.setDescription('The value of vRtrIsisSpfTriggerReason indicates the reasons that triggered this SPF run. newAdjacency (0) - a new adjacency was formed. newLSP (1) - a new LSP was received. newArea (2) - a new area was joined. reach (3) - a new prefix can be reached. ecmpChanged (4) - the number of ecmp routes to a destination changed. newMetric (5) - a route has a new metric. teChanged (6) - traffic engineering changed. restart (7) - the IS-IS router was restarted. lspExpired (8) - an LSP expired. lspDbChanged (9) - the IS-IS LSP database was cleared. lspChanged (10) - an LSP changed. newPreference (11) - a route preference changed. newNLPID (12) - a Network Layer Protocol was added to the IS-IS router protocl set.')
vRtrIsisSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 9), )
if mibBuilder.loadTexts: vRtrIsisSummaryTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSummaryTable.setDescription('The vRtrIsisSummaryTable maintains the summary prefixes for a specific instance of IS-IS protocol.')
vRtrIsisSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 9, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummPrefix"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummMask"))
if mibBuilder.loadTexts: vRtrIsisSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSummaryEntry.setDescription('Each row entry in the vRtrIsisSummaryTable stores a summary prefix for a specific instance of the IS-IS protocol.')
vRtrIsisSummPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 9, 1, 1), IpAddress())
if mibBuilder.loadTexts: vRtrIsisSummPrefix.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSummPrefix.setDescription('vRtrIsisSummPrefix specifies the prefix for the summary address entry. Any instance of this object should be used in conjunction with the corresponding instance of vRtrIsisSummMask object. The prefix is obtained by bitwise logical-AND of the two specified objects.')
vRtrIsisSummMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 9, 1, 2), IpAddress())
if mibBuilder.loadTexts: vRtrIsisSummMask.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSummMask.setDescription('vRtrIsisSummMask specifies the mask for the summary address entry. Any instance of this object should be used in conjunction with the corresponding instance of vRtrIsisSummPrefix object. The prefix is obtained by bitwise logical-AND of the two specified objects.')
vRtrIsisSummRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisSummRowStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSummRowStatus.setDescription('vRtrIsisSummRowStatus is used to create an entry in this table.')
vRtrIsisSummLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1L2", 3))).clone('level1L2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisSummLevel.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSummLevel.setDescription('vRtrIsisSummLevel specifies the IS-IS Level from which the prefix should be summarized.')
vRtrIsisInetRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10), )
if mibBuilder.loadTexts: vRtrIsisInetRouteTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteTable.setDescription('The vRtrIsisInetRouteTable maintains the routes learnt by an instance of IS-IS protocol.')
vRtrIsisInetRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteDestType"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteDest"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRoutePrefixLength"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteNexthopIPType"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteNexthopIP"))
if mibBuilder.loadTexts: vRtrIsisInetRouteEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteEntry.setDescription('Each row entry in the vRtrIsisInetRouteTable stores a route for a given instance of the IS-IS protocol.')
vRtrIsisInetRouteDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 1), InetAddressType())
if mibBuilder.loadTexts: vRtrIsisInetRouteDestType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteDestType.setDescription('The value of vRtrIsisInetRouterDestType indicates the IP address type for vRtrIsisInetRouteDest.')
vRtrIsisInetRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 2), InetAddress())
if mibBuilder.loadTexts: vRtrIsisInetRouteDest.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteDest.setDescription('The value of vRtrIsisInetRouteDest indicates the destination IP address of this route. The address type of vRtrIsisInetRouteDest is indicated by vRtrIsisInetRouteDestType.')
vRtrIsisInetRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: vRtrIsisInetRoutePrefixLength.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRoutePrefixLength.setDescription('The value of vRtrIsisInetRoutePrefixLength indicates the prefix length to be used with vRtrIsisInetRouteDest to get the network prefix.')
vRtrIsisInetRouteNexthopIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 4), InetAddressType())
if mibBuilder.loadTexts: vRtrIsisInetRouteNexthopIPType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteNexthopIPType.setDescription('The value of vRtrIsisInetRouteNexthopIPType indicates the IP address type for vRtrIsisInetRouteNexthopIP.')
vRtrIsisInetRouteNexthopIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 5), InetAddress())
if mibBuilder.loadTexts: vRtrIsisInetRouteNexthopIP.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteNexthopIP.setDescription('The value of vRtrIsisInetRouteNexthopIP indicates the IP address of the nexthop for this route.The address type of vRtrIsisInetRouteNexthopIPType is indicated by vRtrIsisInetRouteNexthopIPType')
vRtrIsisInetRouteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisInetRouteLevel.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteLevel.setDescription('The value of vRtrIsisInetRouteLevel indicates the IS-IS Level at which the destination prefix was learnt.')
vRtrIsisInetRouteSpfRunNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisInetRouteSpfRunNumber.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteSpfRunNumber.setDescription('The value of vRtrIsisInetRouteSpfRunNumber indicates the run of spf calculation in which this route was selected.')
vRtrIsisInetRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisInetRouteMetric.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteMetric.setDescription('The value of vRtrIsisInetRouteMetric indicates the metric value associated with the route. This is obtained by the SPF calculations and is used by the instance of the protocol. For a given destination prefix, the route with the lower metric is the shorter route.')
vRtrIsisInetRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisInetRouteType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteType.setDescription('The value of vRtrIsisInetRouteType indicates the type of route represented by this row entry.')
vRtrIsisInetRouteNHopSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 10, 1, 10), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIsisInetRouteNHopSysID.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetRouteNHopSysID.setDescription('The value of vRtrIsisInetRouteNHopSysID indicates the system-id of the nexthop IS through which this route is reachable.')
vRtrIsisInetSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 11), )
if mibBuilder.loadTexts: vRtrIsisInetSummaryTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetSummaryTable.setDescription('The vRtrIsisInetSummaryTable maintains the summary prefixes for a specific instance of the IS-IS protocol.')
vRtrIsisInetSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 11, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetSummPrefixType"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetSummPrefix"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetSummPrefixLength"))
if mibBuilder.loadTexts: vRtrIsisInetSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetSummaryEntry.setDescription('Each row entry in the vRtrIsisInetSummaryTable stores a summary prefix for a specific instance of the IS-IS protocol.')
vRtrIsisInetSummPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: vRtrIsisInetSummPrefixType.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetSummPrefixType.setDescription('The value of vRtrIsisInetSummPrefixType indicates the IP address type of vRtrIsisInetSummPrefix.')
vRtrIsisInetSummPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: vRtrIsisInetSummPrefix.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetSummPrefix.setDescription('The value of vRtrIsisInetSummPrefix indicates the prefix for this summary address entry.')
vRtrIsisInetSummPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 11, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: vRtrIsisInetSummPrefixLength.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetSummPrefixLength.setDescription('The value of vRtrIsisInetSummMask indicates the prefix length to be used with vRtrIsisInetSummPrefix to get the network prefix.')
vRtrIsisInetSummRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisInetSummRowStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetSummRowStatus.setDescription('The value of vRtrIsisInetSummRowStatus specifies the row status. It allows entries to be created and deleted in the vRtrIsisInetSummaryTable.')
vRtrIsisInetSummLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1L2", 3))).clone('level1L2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsisInetSummLevel.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisInetSummLevel.setDescription('The value of vRtrIsisInetSummLevel specifies the IS-IS Level from which the prefix should be summarized.')
vRtrIsisNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1), )
if mibBuilder.loadTexts: vRtrIsisNotificationTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisNotificationTable.setDescription('Objects seen in the most recent notification this instance of the IS-IS protocol.')
vRtrIsisNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"))
if mibBuilder.loadTexts: vRtrIsisNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisNotificationEntry.setDescription('Each entry defines variables relevant to notifications for one instance of the IS-IS protocol.')
vRtrIsisTrapLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisTrapLSPID.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisTrapLSPID.setDescription('An Octet String that uniquely identifies a Link State PDU.')
vRtrIsisSystemLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l1", 1), ("l2", 2), ("l1l2", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisSystemLevel.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSystemLevel.setDescription('Identifies the level the notification applies to.')
vRtrIsisPDUFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisPDUFragment.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPDUFragment.setDescription('Holds up to the first 64 bytes of a PDU that triggered the notification.')
vRtrIsisFieldLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisFieldLen.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisFieldLen.setDescription('Holds the System ID length reported in PDU we recieved.')
vRtrIsisMaxAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisMaxAreaAddress.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisMaxAreaAddress.setDescription('Holds the Max Area Addresses reported in a PDU we recieved.')
vRtrIsisProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisProtocolVersion.setDescription('Holds the Protocol version reported in PDU we received.')
vRtrIsisLSPSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisLSPSize.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPSize.setDescription('Holds the size of LSP we received that is too big to forward.')
vRtrIsisOriginatingBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisOriginatingBufferSize.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisOriginatingBufferSize.setDescription('Holds the size of vRtrIsisSysOrigL1LSPBuffSize or vRtrIsisSysOrigL2LSPBuffSize advertised by peer in TLV.')
vRtrIsisProtocolsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 5, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIsisProtocolsSupported.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisProtocolsSupported.setDescription('The list of protocols supported by an adjacent system. This may be empty.')
vRtrIsisDatabaseClearTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 6, 1), )
if mibBuilder.loadTexts: vRtrIsisDatabaseClearTable.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisDatabaseClearTable.setDescription('This vRtrIsisDatabaseClearTable defined to clear ISIS related data-bases.')
vRtrIsisDatabaseClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 6, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ALCATEL-IND1-ISIS-MIB", "vRtrIsisSysID"))
if mibBuilder.loadTexts: vRtrIsisDatabaseClearEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisDatabaseClearEntry.setDescription('Each entry defines variables relevant to ISIS data-base clear for given system-id index.')
vRtrIsisAdjDatabaseClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisAdjDatabaseClear.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAdjDatabaseClear.setDescription('This object is defined to clear the ISIS Adjacency database for given system-id index.')
vRtrIsisLSPDatabaseClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 10, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIsisLSPDatabaseClear.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPDatabaseClear.setDescription('This object is defined to clear the ISIS Adjacency database for given system-id index.')
vRtrIsisDatabaseOverload = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 1)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ISIS-MIB", "isisSysL1State"), ("ISIS-MIB", "isisSysL2State"))
if mibBuilder.loadTexts: vRtrIsisDatabaseOverload.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisDatabaseOverload.setDescription('This notification is generated when the system enters or leaves the Overload state.')
vRtrIsisManualAddressDrops = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 2)).setObjects(("ISIS-MIB", "isisManAreaAddrExistState"))
if mibBuilder.loadTexts: vRtrIsisManualAddressDrops.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisManualAddressDrops.setDescription('This notification is generated when one of the manual areaAddresses assigned to this system is ignored when computing routes. The object vRtrIsisManAreaAddrExistState describes the area that has been dropped. This notification is edge triggered, and should not be regenerated until an address that was used in the previous computation has been dropped.')
vRtrIsisCorruptedLSPDetected = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 3)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"))
if mibBuilder.loadTexts: vRtrIsisCorruptedLSPDetected.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCorruptedLSPDetected.setDescription('This notification is generated when we find that and LSP that was stored in memory has become corrupted. We forward an LSP ID. We may have independent knowledge of the ID, but in some implementations there is a chance that the ID itself will be corrupted.')
vRtrIsisMaxSeqExceedAttempt = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 4)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"))
if mibBuilder.loadTexts: vRtrIsisMaxSeqExceedAttempt.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisMaxSeqExceedAttempt.setDescription('When the sequence number on an LSP we generate wraps the 32 bit sequence counter, we purge and wait to re-announce this information. This notification describes that event. Since these should not be generated rapidly, we generate an event each time this happens. While the first 6 bytes of the LSPID are ours, the other two contain useful information.')
vRtrIsisIDLenMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 5)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisFieldLen"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPDUFragment"))
if mibBuilder.loadTexts: vRtrIsisIDLenMismatch.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIDLenMismatch.setDescription('A notification sent when we receive a PDU with a different value of the System ID Length. This notification includes the an index to identify the circuit where we saw the PDU and the header of the PDU which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from what seem to be the same source. This decision is up to the agent to make, and may be based on the circuit or on some MAC level information.')
vRtrIsisMaxAreaAddrsMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 6)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisMaxAreaAddress"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPDUFragment"))
if mibBuilder.loadTexts: vRtrIsisMaxAreaAddrsMismatch.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisMaxAreaAddrsMismatch.setDescription('A notification sent when we receive a PDU with a different value of the Maximum Area Addresses. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from what seem to be the same source.')
vRtrIsisOwnLSPPurge = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 7)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"))
if mibBuilder.loadTexts: vRtrIsisOwnLSPPurge.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisOwnLSPPurge.setDescription('A notification sent when we receive a PDU with our systemID and zero age. This notification includes the circuit Index if available, which may help a network manager identify the source of the confusion.')
vRtrIsisSequenceNumberSkip = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 8)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"))
if mibBuilder.loadTexts: vRtrIsisSequenceNumberSkip.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSequenceNumberSkip.setDescription('When we recieve an LSP with out System ID and different contents, we may need to reissue the LSP with a higher sequence number. We send this notification if we need to increase the sequence number by more than one. If two Intermediate Systems are configured with the same System ID, this notification will fire.')
vRtrIsisAutTypeFail = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 9)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPDUFragment"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisAutTypeFail.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAutTypeFail.setDescription('A notification sent when we receive a PDU with the wrong authentication type field. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from what seem to be the same source.')
vRtrIsisAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 10)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPDUFragment"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisAuthFail.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAuthFail.setDescription('A notification sent when we receive a PDU with incorrent authentication information field. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from what seem to be the same source.')
vRtrIsisVersionSkew = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 11)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisProtocolVersion"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPDUFragment"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisVersionSkew.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisVersionSkew.setDescription('A notification sent when we receive a Hello PDU from an IS running a different version of the protocol. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from what seem to be the same source. This decision is up to the agent to make, and may be based on the circuit or on some MAC level information.')
vRtrIsisAreaMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 12)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSize"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPDUFragment"))
if mibBuilder.loadTexts: vRtrIsisAreaMismatch.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAreaMismatch.setDescription('A notification sent when we receive a Hello PDU from an IS which does not share any area address. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from what seem to be the same source. This decision is up to the agent to make, and may be based on the circuit or on some MAC level information.')
vRtrIsisRejectedAdjacency = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 13)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisRejectedAdjacency.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRejectedAdjacency.setDescription('A notification sent when we receive a Hello PDU from an IS, but do not establish an adjacency due to a lack of resources. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same source.')
vRtrIsisLSPTooLargeToPropagate = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 14)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSize"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisLSPTooLargeToPropagate.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPTooLargeToPropagate.setDescription('A notification sent when we attempt to propagate an LSP which is larger than the dataLinkBlockSize for a circuit. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same source.')
vRtrIsisOrigLSPBufSizeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 15)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOriginatingBufferSize"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisOrigLSPBufSizeMismatch.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisOrigLSPBufSizeMismatch.setDescription('A notification sent when a Level 1 LSP or Level 2 LSP is received which is larger than the local value for originatingL1LSPBufferSize or originatingL2LSPBufferSize respectively, or when a Level 1 LSP or Level2 LSP is received containing the originatingLSPBufferSize option and the value in the PDU option field does not match the local value for originatingL1LSPBufferSize or originatingL2LSPBufferSize respectively. We pass up the size from the option field or the size of the LSP that exceeds our configuration. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same source.')
vRtrIsisProtoSuppMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 16)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisProtocolsSupported"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisProtoSuppMismatch.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisProtoSuppMismatch.setDescription('A notification sent when a non-pseudonode segment 0 LSP is received that has no matching protocols supported. This may be because the system does not generate the field, or because there are no common elements. The list of protocols supported should be included in the notification: it may be empty if the TLV is not supported, or if the TLV is empty. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same source.')
vRtrIsisAdjacencyChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 17)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"), ("ISIS-MIB", "isisISAdjState"))
if mibBuilder.loadTexts: vRtrIsisAdjacencyChange.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAdjacencyChange.setDescription('A notification sent when an adjacency changes state, entering or leaving state up. The first 6 bytes of the vRtrIsisTrapLSPID are the SystemID of the adjacent IS. The isisISAdjState is the new state of the adjacency.')
vRtrIsisCircIdExhausted = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 18)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"))
if mibBuilder.loadTexts: vRtrIsisCircIdExhausted.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisCircIdExhausted.setDescription('A notification sent when ISIS cannot be started on a LAN interface as a unique circid could not be assigned due to the exhaustion of the circId space. This could happen only on the broadcast interfaces. In such a case the interface is marked operationally down. When an operationally up interface is deleted, the circId can be reused by any interface which is waiting to receive a unique circId.')
vRtrIsisAdjRestartStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 11, 0, 19)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjRestartStatus"))
if mibBuilder.loadTexts: vRtrIsisAdjRestartStatusChange.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAdjRestartStatusChange.setDescription("A notification sent when an adjancency's graceful restart status changes. The vRtrIsisISAdjRestartStatus is the new graceful restart state of the adjacency.")
vRtrIsisMIBConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 1))
vRtrIsisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2))
vRtrIsisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 1, 1)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisHostGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAdjGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisNotificationObjGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisMIBCompliance = vRtrIsisMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisMIBCompliance.setDescription('The compliance statement for revision 2.0 of TIMETRA-ISIS-MIB.')
vRtrIsisMIBR2r1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 1, 2)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisR2r1Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisHostGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAdjGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisNotificationObjGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisNotificationsGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisMIBR2r1Compliance = vRtrIsisMIBR2r1Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisMIBR2r1Compliance.setDescription('The compliance statement for revision 2.1 of TIMETRA-ISIS-MIB.')
vRtrIsisMIBV3v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 1, 3)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisV3v0Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisHostGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAdjV3v0Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisNotificationObjGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisNotificationV3v0Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisMIBV3v0Compliance = vRtrIsisMIBV3v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisMIBV3v0Compliance.setDescription('The compliance statement for revision 3.0 of TIMETRA-ISIS-MIB.')
vRtrIsisMIBV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 1, 4)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisV4v0Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisHostGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteV4v0Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAdjV3v0Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisNotificationObjGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisNotificationV3v0Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummaryV4v0Group"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisScalarObjsGroup"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisDBClearObjsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisMIBV4v0Compliance = vRtrIsisMIBV4v0Compliance.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisMIBV4v0Compliance.setDescription('The compliance statement for revision 4.0 of TIMETRA-ISIS-MIB.')
vRtrIsisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 1)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLastEnabledTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthCheck"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspLifetime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadTimeout"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOperState"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisShortCuts"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfHoldTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLastSpfRun"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGracefulRestart"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadOnBoot"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadOnBootTimeout"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfInitialWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfSecondWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspMaxWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspInitialWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspSecondWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelWideMetricsOnly"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelOverloadStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelOverloadTimeLeft"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelNumLSPs"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfRuns"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRegenerations"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInitiatedPurges"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFRequests"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFDroppedRequests"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFPathsFound"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFPathsNotFound"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisMTEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisGroup = vRtrIsisGroup.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisGroup.setDescription('The group of objects supporting management of ISIS system objects on Alcatel 7x50 SR series systems.')
vRtrIsisHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 2)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSysID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisHostname"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisHostGroup = vRtrIsisHostGroup.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisHostGroup.setDescription('The group of objects supporting management of ISIS host-name objects on Alcatel 7x50 SR series systems.')
vRtrIsisRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 3)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteDest"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteMask"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteNexthopIP"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteSpfVersion"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteNHopSysID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisRouteGroup = vRtrIsisRouteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisRouteGroup.setDescription('The group of objects supporting management of ISIS route objects on Alcatel 7x50 SR series systems.')
vRtrIsisPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 4)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPathID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPathIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPathNHopSysID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPathMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPathSNPA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisPathGroup = vRtrIsisPathGroup.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisPathGroup.setDescription('The group of objects supporting management of ISIS path objects on Alcatel 7x50 SR series systems.')
vRtrIsisLSPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 5)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPId"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSeq"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPChecksum"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPLifetimeRemain"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPVersion"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPPktType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPPktVersion"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPMaxArea"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSysIdLen"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPAttributes"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPUsedLen"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPAllocLen"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPBuff"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPZeroRLT"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisLSPGroup = vRtrIsisLSPGroup.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisLSPGroup.setDescription('The group of objects supporting management of ISIS LSP objects on Alcatel 7x50 SR series systems.')
vRtrIsisIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 6)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfRowStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLastChangeTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfAdminState"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfOperState"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfCsnpInterval"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfHelloAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfHelloAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLspPacingInterval"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfCircIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfRetransmitInterval"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfTypeDefault"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelLastChangeTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelHelloAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelHelloAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelPassive"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelTeMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelNumAdjacencies"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelISPriority"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelHelloTimer"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelAdminMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelOperMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisIfGroup = vRtrIsisIfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisIfGroup.setDescription('The group of objects supporting management of ISIS interface objects on Alcatel 7x50 SR series systems.')
vRtrIsisAdjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 7)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjExpiresIn"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjCircLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjNeighborIP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisAdjGroup = vRtrIsisAdjGroup.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisAdjGroup.setDescription('The group of objects supporting management of ISIS adjacency objects on Alcatel 7x50 SR series systems.')
vRtrIsisNotificationObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 8)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisTrapLSPID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSystemLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPDUFragment"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisFieldLen"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisMaxAreaAddress"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisProtocolVersion"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSize"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOriginatingBufferSize"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisProtocolsSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisNotificationObjGroup = vRtrIsisNotificationObjGroup.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisNotificationObjGroup.setDescription('The group of objects supporting management of ISIS notification objects on Alcatel 7x50 SR series systems.')
vRtrIsisNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 9)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisDatabaseOverload"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisManualAddressDrops"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCorruptedLSPDetected"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisMaxSeqExceedAttempt"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIDLenMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisMaxAreaAddrsMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOwnLSPPurge"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSequenceNumberSkip"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAutTypeFail"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthFail"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisVersionSkew"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAreaMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRejectedAdjacency"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPTooLargeToPropagate"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOrigLSPBufSizeMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisProtoSuppMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAdjacencyChange"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCircIdExhausted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisNotificationsGroup = vRtrIsisNotificationsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisNotificationsGroup.setDescription('The group of notifications supporting management of ISIS notifications on Alcatel 7x50 SR series systems.')
vRtrIsisSpfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 10)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfRunTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfL1Nodes"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfL2Nodes"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfEventCount"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfLastTriggerLSPId"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfTriggerReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisSpfGroup = vRtrIsisSpfGroup.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSpfGroup.setDescription('The group of objects supporting management of ISIS SPF objects on Alcatel 7x50 SR series systems.')
vRtrIsisSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 11)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummRowStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisSummaryGroup = vRtrIsisSummaryGroup.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisSummaryGroup.setDescription('The group of objects supporting management of ISIS Summary Addresses on Alcatel 7x50 SR series systems.')
vRtrIsisR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 12)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLastEnabledTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthCheck"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspLifetime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadTimeout"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOperState"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisShortCuts"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfHoldTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLastSpfRun"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGracefulRestart"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadOnBoot"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadOnBootTimeout"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfInitialWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfSecondWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspMaxWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspInitialWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspSecondWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisHelloAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelWideMetricsOnly"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelOverloadStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelOverloadTimeLeft"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelNumLSPs"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelCsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelHelloAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelPsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfRuns"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRegenerations"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInitiatedPurges"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFRequests"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFDroppedRequests"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFPathsFound"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFPathsNotFound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisR2r1Group = vRtrIsisR2r1Group.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisR2r1Group.setDescription('The group of objects supporting management of ISIS system objects on Alcatel 7x50 SR series systems.')
vRtrIsisV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 13)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLastEnabledTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthCheck"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspLifetime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadTimeout"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOperState"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisShortCuts"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfHoldTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLastSpfRun"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGracefulRestart"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadOnBoot"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadOnBootTimeout"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfInitialWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfSecondWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspMaxWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspInitialWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspSecondWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisHelloAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGRRestartDuration"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGRHelperMode"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelWideMetricsOnly"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelOverloadStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelOverloadTimeLeft"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelNumLSPs"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelCsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelHelloAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelPsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfRuns"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRegenerations"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInitiatedPurges"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFRequests"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFDroppedRequests"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFPathsFound"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFPathsNotFound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisV3v0Group = vRtrIsisV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisV3v0Group.setDescription('The group of objects supporting management of ISIS system objects on Alcatel 7x50 SR series systems.')
vRtrIsisAdjV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 14)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjExpiresIn"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjCircLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjNeighborIP"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjRestartSupport"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjRestartStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjRestartSupressed"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjNumRestarts"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjLastRestartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisAdjV3v0Group = vRtrIsisAdjV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: vRtrIsisAdjV3v0Group.setDescription('The group of objects supporting management of ISIS adjacency objects on Alcatel 7x50 SR series systems.')
vRtrIsisNotificationV3v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 15)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisDatabaseOverload"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisManualAddressDrops"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCorruptedLSPDetected"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisMaxSeqExceedAttempt"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIDLenMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisMaxAreaAddrsMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOwnLSPPurge"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSequenceNumberSkip"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAutTypeFail"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthFail"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisVersionSkew"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAreaMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRejectedAdjacency"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPTooLargeToPropagate"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOrigLSPBufSizeMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisProtoSuppMismatch"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAdjacencyChange"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCircIdExhausted"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAdjRestartStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisNotificationV3v0Group = vRtrIsisNotificationV3v0Group.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisNotificationV3v0Group.setDescription('The group of notifications supporting management of ISIS notifications on Alcatel 7x50 SR series systems.')
vRtrIsisV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 16)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLastEnabledTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAuthCheck"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspLifetime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadTimeout"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOperState"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisShortCuts"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfHoldTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLastSpfRun"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGracefulRestart"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadOnBoot"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisOverloadOnBootTimeout"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfInitialWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfSecondWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspMaxWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspInitialWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLspSecondWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisHelloAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGRRestartDuration"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisGRHelperMode"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisStrictAdjacencyCheck"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfMaxWait"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelWideMetricsOnly"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelOverloadStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelOverloadTimeLeft"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelNumLSPs"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelCsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelHelloAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLevelPsnpAuthentication"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfRuns"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRegenerations"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInitiatedPurges"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIIHRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSNPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisPSNPRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownRecd"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownDrop"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownSent"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisUnknownRetrans"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFRequests"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFDroppedRequests"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFPathsFound"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisCSPFPathsNotFound"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisActivateIPv4"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisActivateIPv6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisV4v0Group = vRtrIsisV4v0Group.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisV4v0Group.setDescription('The group of objects supporting management of ISIS system objects on Alcatel 7x50 SR series systems.')
vRtrIsisRouteV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 17)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteDest"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteMask"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteNexthopIP"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteSpfVersion"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisRouteNHopSysID"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteSpfRunNumber"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetRouteNHopSysID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisRouteV4v0Group = vRtrIsisRouteV4v0Group.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisRouteV4v0Group.setDescription('The group of objects supporting management of ISIS route objects on Alcatel 7x50 SR series systems.')
vRtrIsisSummaryV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 18)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummRowStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSummLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetSummRowStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisInetSummLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisSummaryV4v0Group = vRtrIsisSummaryV4v0Group.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisSummaryV4v0Group.setDescription('The group of objects supporting management of ISIS Summary Addresses on Alcatel 7x50 SR series systems.')
vRtrIsisAdjV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 19)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjExpiresIn"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjCircLevel"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjNeighborIP"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjRestartSupport"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjRestartStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjRestartSupressed"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjNumRestarts"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjLastRestartTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjNeighborIPv6Type"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjNeighborIpv6"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjMTIdMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisAdjV4v0Group = vRtrIsisAdjV4v0Group.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisAdjV4v0Group.setDescription('The group of objects supporting management of ISIS adjacency objects on Alcatel 7x50 SR 4.0 series systems.')
vRtrIsisIfV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 20)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfRowStatus"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLastChangeTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfAdminState"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfOperState"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfCsnpInterval"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfHelloAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfHelloAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLspPacingInterval"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfCircIndex"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfRetransmitInterval"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfTypeDefault"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelLastChangeTime"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelHelloAuthKey"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelHelloAuthType"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelPassive"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelTeMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelNumAdjacencies"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelISPriority"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelHelloTimer"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelAdminMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfLevelOperMetric"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisIfAddressFamily"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisIfV4v0Group = vRtrIsisIfV4v0Group.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisIfV4v0Group.setDescription('The group of objects supporting management of ISIS interface objects on Alcatel 7x50 SR 4.0 series systems.')
vRtrIsisScalarObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 21)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisStatisticsClear"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPClear"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisISAdjClear"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisSpfClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisScalarObjsGroup = vRtrIsisScalarObjsGroup.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisScalarObjsGroup.setDescription('The group of objects supporting management of ISIS clear objects on Alcatel 7x50 SR 4.0 series systems.')
vRtrIsisDBClearObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 14, 1, 12, 2, 22)).setObjects(("ALCATEL-IND1-ISIS-MIB", "vRtrIsisAdjDatabaseClear"), ("ALCATEL-IND1-ISIS-MIB", "vRtrIsisLSPDatabaseClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vRtrIsisDBClearObjsGroup = vRtrIsisDBClearObjsGroup.setStatus('current')
if mibBuilder.loadTexts: vRtrIsisDBClearObjsGroup.setDescription('The group of objects supporting management of ISIS clear objects on Alcatel 7x50 SR 4.0 series systems.')
mibBuilder.exportSymbols("ALCATEL-IND1-ISIS-MIB", vRtrIsisIfLevelTable=vRtrIsisIfLevelTable, vRtrIsisLSPClear=vRtrIsisLSPClear, vRtrIsisISAdjRestartStatus=vRtrIsisISAdjRestartStatus, vRtrIsisOverloadOnBoot=vRtrIsisOverloadOnBoot, vRtrIsisSpfRunTime=vRtrIsisSpfRunTime, vRtrIsisLevelEntry=vRtrIsisLevelEntry, vRtrIsisRouteGroup=vRtrIsisRouteGroup, vRtrIsisLSPDatabaseClear=vRtrIsisLSPDatabaseClear, vRtrIsisMIBV3v0Compliance=vRtrIsisMIBV3v0Compliance, vRtrIsisCsnpAuthentication=vRtrIsisCsnpAuthentication, vRtrIsisGRHelperMode=vRtrIsisGRHelperMode, vRtrIsisLevelPsnpAuthentication=vRtrIsisLevelPsnpAuthentication, vRtrIsisLSPSent=vRtrIsisLSPSent, vRtrIsisIfLevelNumAdjacencies=vRtrIsisIfLevelNumAdjacencies, vRtrIsisMIBConformances=vRtrIsisMIBConformances, vRtrIsisIfHelloAuthType=vRtrIsisIfHelloAuthType, vRtrIsisLSPMaxArea=vRtrIsisLSPMaxArea, vRtrIsisLevelOverloadTimeLeft=vRtrIsisLevelOverloadTimeLeft, vRtrIsisStatsTable=vRtrIsisStatsTable, vRtrIsisMIBV4v0Compliance=vRtrIsisMIBV4v0Compliance, vRtrIsisHostnameTable=vRtrIsisHostnameTable, vRtrIsisLspMaxWait=vRtrIsisLspMaxWait, vRtrIsisLevelCsnpAuthentication=vRtrIsisLevelCsnpAuthentication, vRtrIsisIfAddressFamily=vRtrIsisIfAddressFamily, vRtrIsisLSPGroup=vRtrIsisLSPGroup, vRtrIsisMaxAreaAddrsMismatch=vRtrIsisMaxAreaAddrsMismatch, PYSNMP_MODULE_ID=timetraIsisMIBModule, vRtrIsisGracefulRestart=vRtrIsisGracefulRestart, vRtrIsisISAdjNeighborIP=vRtrIsisISAdjNeighborIP, vRtrIsisHostname=vRtrIsisHostname, vRtrIsisIfLspPacingInterval=vRtrIsisIfLspPacingInterval, vRtrIsisLevelOverloadStatus=vRtrIsisLevelOverloadStatus, vRtrIsisIfAdminState=vRtrIsisIfAdminState, vRtrIsisOverloadTimeout=vRtrIsisOverloadTimeout, vRtrIsisLSPTable=vRtrIsisLSPTable, vRtrIsisLSPChecksum=vRtrIsisLSPChecksum, vRtrIsisSummMask=vRtrIsisSummMask, vRtrIsisIfIndex=vRtrIsisIfIndex, vRtrIsisHostGroup=vRtrIsisHostGroup, vRtrIsisISAdjClear=vRtrIsisISAdjClear, vRtrIsisLSPRetrans=vRtrIsisLSPRetrans, vRtrIsisPSNPRecd=vRtrIsisPSNPRecd, vRtrIsisPDUFragment=vRtrIsisPDUFragment, vRtrIsisSpfEventCount=vRtrIsisSpfEventCount, TmnxOperState=TmnxOperState, vRtrIsisIfRowStatus=vRtrIsisIfRowStatus, vRtrIsisInetSummPrefixLength=vRtrIsisInetSummPrefixLength, vRtrIsisMTEnabled=vRtrIsisMTEnabled, vRtrIsisLastSpfRun=vRtrIsisLastSpfRun, vRtrIsisCorruptedLSPDetected=vRtrIsisCorruptedLSPDetected, vRtrIsisShortCuts=vRtrIsisShortCuts, vRtrIsisSpfLogTable=vRtrIsisSpfLogTable, vRtrIsisLspSecondWait=vRtrIsisLspSecondWait, vRtrIsisPathMetric=vRtrIsisPathMetric, vRtrIsisIfLevelLastChangeTime=vRtrIsisIfLevelLastChangeTime, vRtrIsisIfLevelHelloTimer=vRtrIsisIfLevelHelloTimer, vRtrIsisNotificationEntry=vRtrIsisNotificationEntry, vRtrIsisNotificationV3v0Group=vRtrIsisNotificationV3v0Group, vRtrIsisIfLevelTeMetric=vRtrIsisIfLevelTeMetric, vRtrIsisLSPUsedLen=vRtrIsisLSPUsedLen, vRtrIsisSpfMaxWait=vRtrIsisSpfMaxWait, vRtrIsisPathID=vRtrIsisPathID, vRtrIsisRouteEntry=vRtrIsisRouteEntry, vRtrIsisCSNPRecd=vRtrIsisCSNPRecd, vRtrIsisIIHRecd=vRtrIsisIIHRecd, vRtrIsisIfLastChangeTime=vRtrIsisIfLastChangeTime, vRtrIsisIfLevel=vRtrIsisIfLevel, vRtrIsisIfLevelPassive=vRtrIsisIfLevelPassive, vRtrIsisISAdjNeighborIPv6Type=vRtrIsisISAdjNeighborIPv6Type, vRtrIsisLSPSize=vRtrIsisLSPSize, vRtrIsisAdjGroup=vRtrIsisAdjGroup, vRtrIsisUnknownSent=vRtrIsisUnknownSent, vRtrIsisRejectedAdjacency=vRtrIsisRejectedAdjacency, vRtrIsisISAdjNeighborIpv6=vRtrIsisISAdjNeighborIpv6, vRtrIsisSpfGroup=vRtrIsisSpfGroup, vRtrIsisPathSNPA=vRtrIsisPathSNPA, vRtrIsisInetRouteTable=vRtrIsisInetRouteTable, vRtrIsisISAdjEntry=vRtrIsisISAdjEntry, vRtrIsisScalarObjsGroup=vRtrIsisScalarObjsGroup, vRtrIsisSpfClear=vRtrIsisSpfClear, vRtrIsisV4v0Group=vRtrIsisV4v0Group, vRtrIsisLevel=vRtrIsisLevel, vRtrIsisSystemLevel=vRtrIsisSystemLevel, vRtrIsisStatsEntry=vRtrIsisStatsEntry, vRtrIsisProtocolsSupported=vRtrIsisProtocolsSupported, vRtrIsisLSPBuff=vRtrIsisLSPBuff, vRtrIsisIIHSent=vRtrIsisIIHSent, vRtrIsisPSNPSent=vRtrIsisPSNPSent, TmnxAdminState=TmnxAdminState, vRtrIsisObjs=vRtrIsisObjs, vRtrIsisLSPRecd=vRtrIsisLSPRecd, vRtrIsisLSPAttributes=vRtrIsisLSPAttributes, vRtrIsisIfEntry=vRtrIsisIfEntry, vRtrIsisIfLevelISPriority=vRtrIsisIfLevelISPriority, vRtrIsisOriginatingBufferSize=vRtrIsisOriginatingBufferSize, vRtrIsisSummaryV4v0Group=vRtrIsisSummaryV4v0Group, vRtrIsisSpfHoldTime=vRtrIsisSpfHoldTime, vRtrIsisIIHRetrans=vRtrIsisIIHRetrans, vRtrIsisDatabaseOverload=vRtrIsisDatabaseOverload, vRtrIsisCSPFRequests=vRtrIsisCSPFRequests, vRtrIsisSysID=vRtrIsisSysID, vRtrIsisRouteLevel=vRtrIsisRouteLevel, vRtrIsisInetSummaryEntry=vRtrIsisInetSummaryEntry, vRtrIsisVersionSkew=vRtrIsisVersionSkew, vRtrIsisGroup=vRtrIsisGroup, vRtrIsisInetSummPrefixType=vRtrIsisInetSummPrefixType, vRtrIsisLSPPktType=vRtrIsisLSPPktType, vRtrIsisRouteMetric=vRtrIsisRouteMetric, vRtrIsisNotificationTable=vRtrIsisNotificationTable, vRtrIsisNotificationObjs=vRtrIsisNotificationObjs, vRtrIsisOperState=vRtrIsisOperState, vRtrIsisLevelAuthKey=vRtrIsisLevelAuthKey, vRtrIsisSequenceNumberSkip=vRtrIsisSequenceNumberSkip, vRtrIsisAdjV4v0Group=vRtrIsisAdjV4v0Group, vRtrIsisSummaryGroup=vRtrIsisSummaryGroup, vRtrIsisSpfL2Nodes=vRtrIsisSpfL2Nodes, vRtrIsisCSPFPathsFound=vRtrIsisCSPFPathsFound, vRtrIsisISAdjExpiresIn=vRtrIsisISAdjExpiresIn, vRtrIsisStatisticsClear=vRtrIsisStatisticsClear, vRtrIsisAutTypeFail=vRtrIsisAutTypeFail, vRtrIsisInitiatedPurges=vRtrIsisInitiatedPurges, vRtrIsisRouteType=vRtrIsisRouteType, vRtrIsisLastEnabledTime=vRtrIsisLastEnabledTime, vRtrIsisPathEntry=vRtrIsisPathEntry, vRtrIsisRouteNexthopIP=vRtrIsisRouteNexthopIP, vRtrIsisSpfTimeStamp=vRtrIsisSpfTimeStamp, vRtrIsisActivateIPv6=vRtrIsisActivateIPv6, vRtrIsisCSPFDroppedRequests=vRtrIsisCSPFDroppedRequests, vRtrIsisLSPEntry=vRtrIsisLSPEntry, vRtrIsisIDLenMismatch=vRtrIsisIDLenMismatch, vRtrIsisProtoSuppMismatch=vRtrIsisProtoSuppMismatch, vRtrIsisInetRouteSpfRunNumber=vRtrIsisInetRouteSpfRunNumber, vRtrIsisInetRouteNexthopIP=vRtrIsisInetRouteNexthopIP, vRtrIsisISAdjRestartSupressed=vRtrIsisISAdjRestartSupressed, vRtrIsisSpfL1Nodes=vRtrIsisSpfL1Nodes, vRtrIsisLevelNumLSPs=vRtrIsisLevelNumLSPs, vRtrIsisCSNPSent=vRtrIsisCSNPSent, vRtrIsisSpfTriggerReason=vRtrIsisSpfTriggerReason, vRtrIsisAuthFail=vRtrIsisAuthFail, vRtrIsisIfCircIndex=vRtrIsisIfCircIndex, vRtrIsisSpfLogEntry=vRtrIsisSpfLogEntry, vRtrIsisAreaMismatch=vRtrIsisAreaMismatch, vRtrIsisInetRouteDestType=vRtrIsisInetRouteDestType, vRtrIsisISAdjCircLevel=vRtrIsisISAdjCircLevel, vRtrIsisSummLevel=vRtrIsisSummLevel, vRtrIsisDBClearObjsGroup=vRtrIsisDBClearObjsGroup, vRtrIsisIfHelloAuthKey=vRtrIsisIfHelloAuthKey, vRtrIsisIfTable=vRtrIsisIfTable, vRtrIsisUnknownRecd=vRtrIsisUnknownRecd, vRtrIsisTable=vRtrIsisTable, vRtrIsisStrictAdjacencyCheck=vRtrIsisStrictAdjacencyCheck, vRtrIsisInetRouteType=vRtrIsisInetRouteType, vRtrIsisProtocolVersion=vRtrIsisProtocolVersion, vRtrIsisSpfSecondWait=vRtrIsisSpfSecondWait, vRtrIsisCircIdExhausted=vRtrIsisCircIdExhausted, vRtrIsisAuthType=vRtrIsisAuthType, vRtrIsisInetSummaryTable=vRtrIsisInetSummaryTable, vRtrIsisInetSummRowStatus=vRtrIsisInetSummRowStatus, vRtrIsisLevelWideMetricsOnly=vRtrIsisLevelWideMetricsOnly, vRtrIsisIfLevelHelloAuthType=vRtrIsisIfLevelHelloAuthType, vRtrIsisAdjDatabaseClear=vRtrIsisAdjDatabaseClear, vRtrIsisInetRouteNexthopIPType=vRtrIsisInetRouteNexthopIPType, vRtrIsisDatabaseClearTable=vRtrIsisDatabaseClearTable, vRtrIsisOverloadOnBootTimeout=vRtrIsisOverloadOnBootTimeout, vRtrIsisAuthKey=vRtrIsisAuthKey, vRtrIsisGRRestartDuration=vRtrIsisGRRestartDuration, vRtrIsisPsnpAuthentication=vRtrIsisPsnpAuthentication, vRtrIsisIfObjs=vRtrIsisIfObjs, vRtrIsisIfTypeDefault=vRtrIsisIfTypeDefault, vRtrIsisRouteMask=vRtrIsisRouteMask, vRtrIsisDatabaseClearObjs=vRtrIsisDatabaseClearObjs, vRtrIsisUnknownDrop=vRtrIsisUnknownDrop, vRtrIsisSummRowStatus=vRtrIsisSummRowStatus, vRtrIsisNotifications=vRtrIsisNotifications, vRtrIsisLevelTable=vRtrIsisLevelTable, vRtrIsisIfLevelOperMetric=vRtrIsisIfLevelOperMetric, vRtrIsisMIBGroups=vRtrIsisMIBGroups, vRtrIsisSpfWait=vRtrIsisSpfWait, vRtrIsisTrapLSPID=vRtrIsisTrapLSPID, vRtrIsisMIBR2r1Compliance=vRtrIsisMIBR2r1Compliance, vRtrIsisRouteV4v0Group=vRtrIsisRouteV4v0Group, vRtrIsisSummaryEntry=vRtrIsisSummaryEntry, vRtrIsisRouteTable=vRtrIsisRouteTable, vRtrIsisLSPAllocLen=vRtrIsisLSPAllocLen, vRtrIsisLSPDrop=vRtrIsisLSPDrop, vRtrIsisInetRoutePrefixLength=vRtrIsisInetRoutePrefixLength, vRtrIsisScalarObjs=vRtrIsisScalarObjs, vRtrIsisNotificationObjGroup=vRtrIsisNotificationObjGroup, vRtrIsisMIBCompliance=vRtrIsisMIBCompliance, vRtrIsisIfCsnpInterval=vRtrIsisIfCsnpInterval, vRtrIsisLevelHelloAuthentication=vRtrIsisLevelHelloAuthentication, vRtrIsisOwnLSPPurge=vRtrIsisOwnLSPPurge, vRtrIsisAdjRestartStatusChange=vRtrIsisAdjRestartStatusChange, vRtrIsisCSPFPathsNotFound=vRtrIsisCSPFPathsNotFound, vRtrIsisR2r1Group=vRtrIsisR2r1Group, vRtrIsisLSPLifetimeRemain=vRtrIsisLSPLifetimeRemain, vRtrIsisIfGroup=vRtrIsisIfGroup, vRtrIsisPathTable=vRtrIsisPathTable, vRtrIsisIfV4v0Group=vRtrIsisIfV4v0Group, vRtrIsisMaxAreaAddress=vRtrIsisMaxAreaAddress, vRtrIsisPathIfIndex=vRtrIsisPathIfIndex, vRtrIsisSpfInitialWait=vRtrIsisSpfInitialWait, vRtrIsisManualAddressDrops=vRtrIsisManualAddressDrops, vRtrIsisIIHDrop=vRtrIsisIIHDrop, vRtrIsisLSPZeroRLT=vRtrIsisLSPZeroRLT, vRtrIsisLSPSysIdLen=vRtrIsisLSPSysIdLen, vRtrIsisInetRouteEntry=vRtrIsisInetRouteEntry, vRtrIsisUnknownRetrans=vRtrIsisUnknownRetrans, vRtrIsisInetRouteMetric=vRtrIsisInetRouteMetric, vRtrIsisISAdjRestartSupport=vRtrIsisISAdjRestartSupport, vRtrIsisPSNPRetrans=vRtrIsisPSNPRetrans, vRtrIsisIfLevelHelloAuthKey=vRtrIsisIfLevelHelloAuthKey, vRtrIsisCSNPRetrans=vRtrIsisCSNPRetrans, vRtrIsisRouteDest=vRtrIsisRouteDest, vRtrIsisLSPSeq=vRtrIsisLSPSeq, vRtrIsisLSPVersion=vRtrIsisLSPVersion, vRtrIsisActivateIPv4=vRtrIsisActivateIPv4, vRtrIsisLSPPktVersion=vRtrIsisLSPPktVersion, vRtrIsisPathGroup=vRtrIsisPathGroup, vRtrIsisSystemObjs=vRtrIsisSystemObjs, vRtrIsisISAdjTable=vRtrIsisISAdjTable, vRtrIsisISAdjLastRestartTime=vRtrIsisISAdjLastRestartTime, vRtrIsisInetRouteNHopSysID=vRtrIsisInetRouteNHopSysID, vRtrIsisRouteNHopSysID=vRtrIsisRouteNHopSysID, vRtrIsisMIBConformance=vRtrIsisMIBConformance, vRtrIsisPathNHopSysID=vRtrIsisPathNHopSysID, vRtrIsisSummPrefix=vRtrIsisSummPrefix, vRtrIsisAdjV3v0Group=vRtrIsisAdjV3v0Group, vRtrIsisSummaryTable=vRtrIsisSummaryTable, vRtrIsisInetRouteLevel=vRtrIsisInetRouteLevel, vRtrIsisEntry=vRtrIsisEntry, vRtrIsisIfOperState=vRtrIsisIfOperState, vRtrIsisHelloAuthentication=vRtrIsisHelloAuthentication, vRtrIsisIfLevelEntry=vRtrIsisIfLevelEntry, vRtrIsisLspLifetime=vRtrIsisLspLifetime, vRtrIsisIfLevelAdminMetric=vRtrIsisIfLevelAdminMetric, vRtrIsisFieldLen=vRtrIsisFieldLen, vRtrIsisAuthCheck=vRtrIsisAuthCheck, vRtrIsisInetSummPrefix=vRtrIsisInetSummPrefix, vRtrIsisLspInitialWait=vRtrIsisLspInitialWait, vRtrIsisISAdjNumRestarts=vRtrIsisISAdjNumRestarts, vRtrIsisInetSummLevel=vRtrIsisInetSummLevel, vRtrIsisHostnameEntry=vRtrIsisHostnameEntry, vRtrIsisDatabaseClearEntry=vRtrIsisDatabaseClearEntry, vRtrIsisLSPRegenerations=vRtrIsisLSPRegenerations, vRtrIsisAdjObjs=vRtrIsisAdjObjs, vRtrIsisIfRetransmitInterval=vRtrIsisIfRetransmitInterval, vRtrIsisSpfRuns=vRtrIsisSpfRuns, vRtrIsisRouteSpfVersion=vRtrIsisRouteSpfVersion, vRtrIsisCSNPDrop=vRtrIsisCSNPDrop, vRtrIsisSpfLastTriggerLSPId=vRtrIsisSpfLastTriggerLSPId, vRtrIsisOrigLSPBufSizeMismatch=vRtrIsisOrigLSPBufSizeMismatch, vRtrIsisNotificationsGroup=vRtrIsisNotificationsGroup, timetraIsisMIBModule=timetraIsisMIBModule)
mibBuilder.exportSymbols("ALCATEL-IND1-ISIS-MIB", vRtrIsisMaxSeqExceedAttempt=vRtrIsisMaxSeqExceedAttempt, vRtrIsisAdjacencyChange=vRtrIsisAdjacencyChange, vRtrIsisPSNPDrop=vRtrIsisPSNPDrop, vRtrIsisLSPId=vRtrIsisLSPId, vRtrIsisV3v0Group=vRtrIsisV3v0Group, vRtrIsisInetRouteDest=vRtrIsisInetRouteDest, vRtrIsisLSPTooLargeToPropagate=vRtrIsisLSPTooLargeToPropagate, vRtrIsisISAdjMTIdMask=vRtrIsisISAdjMTIdMask, vRtrIsisLevelAuthType=vRtrIsisLevelAuthType)
