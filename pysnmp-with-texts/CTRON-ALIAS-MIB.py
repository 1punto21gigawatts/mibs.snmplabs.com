#
# PySNMP MIB module CTRON-ALIAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-ALIAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:29:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ctAliasMib, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctAliasMib")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
TimeFilter, = mibBuilder.importSymbols("RMON2-MIB", "TimeFilter")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, Counter32, ObjectIdentity, Integer32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Counter32", "ObjectIdentity", "Integer32", "NotificationType", "Counter64")
MacAddress, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "TruthValue")
cabletronAliasMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1))
cabletronAliasMib.setRevisions(('2013-02-15 14:30', '2011-02-14 15:25', '2003-04-22 13:39', '2002-01-30 13:01', '2002-01-23 20:56', '2002-01-18 20:22', '1999-09-26 00:00', '1999-09-04 00:00', '1999-08-06 00:00', '1999-07-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cabletronAliasMib.setRevisionsDescriptions(('Added ctAliasInterfaceTable. Also added mdns, llmnr, and ssdp as supported protocols.', 'Added IPv6 as a supported protocol. Added the CabletronProtocolBits TEXTUAL-CONVENTION and ctAliasConfigurationProtocolEnableState object.', 'Added the ctAliasMacAddressTable and ctAliasProtocolAddressTable. Added the objects ctAliasEntryStatus and ctAliasEntryClearAll. Deprecated the object ctAliasMarkInactive.', 'Added the optional ctAliasConfigurationTable.', 'Added ctAliasAddressText leaf with the syntax of SnmpAdminString.', 'Added textual convention AliasAddress. Changed the syntax for ctAliasAddress from SnmpAdminString to AliasAddress. Added ranges to ctAliasReference and ctAliasID.', 'Moved the CabletronProtocolTC enumeration value unknown to unknown(0). Updated textual descriptions.', 'Changed removed the ctAliasProtocolDirLocalID. Updated units of conformance and compliance statements.', 'Changed object naming to be more cabletron-general. Changed indexing to simplify access.', 'The initial version of this MIB module',))
if mibBuilder.loadTexts: cabletronAliasMib.setLastUpdated('201302151430Z')
if mibBuilder.loadTexts: cabletronAliasMib.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: cabletronAliasMib.setContactInfo('Postal: Enterasys Networks 9 Northeastern Blvd. Salem, NH 03079 USA Phone: +1 603 952 5000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: cabletronAliasMib.setDescription("This MIB module defines a portion of the MIB tree under the Enterasys enterprise OID. This branch defines Enterasys Networks' proprietary Node Alias feature. This MIB defines objects which can be used to discover end systems per port, and to map end system addresses to the layer 2 address of the port.")
class CabletronProtocolTC(TextualConvention, Integer32):
    description = 'Identifies the type of protocol address.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("unknown", 0), ("ip", 1), ("apl", 2), ("mac", 3), ("hsrp", 4), ("dhcps", 5), ("dhcpc", 6), ("bootps", 7), ("bootpc", 8), ("ospf", 9), ("vrrp", 10), ("ipx", 11), ("xrip", 12), ("xsap", 13), ("xnlsp", 14), ("ipx20", 15), ("rtmp", 16), ("netBios", 17), ("nbt", 18), ("n802q", 19), ("bgp", 20), ("rip", 21), ("igrp", 22), ("dec", 23), ("bpdu", 24), ("udp", 25), ("ipv6", 26), ("mdns", 27), ("llmnr", 28), ("ssdp", 29))

class AliasAddress(TextualConvention, OctetString):
    description = 'Represents layer 3 or higher addresses.'
    status = 'current'
    displayHint = '1x '
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class CabletronProtocolBits(TextualConvention, Bits):
    description = 'The list of protocol types that can be enabled for nodeAlias entries.'
    status = 'current'
    namedValues = NamedValues(("unknown", 0), ("ipv4", 1), ("apl", 2), ("mac", 3), ("hsrp", 4), ("dhcps", 5), ("dhcpc", 6), ("bootps", 7), ("bootpc", 8), ("ospf", 9), ("vrrp", 10), ("ipx", 11), ("xrip", 12), ("xsap", 13), ("xnlsp", 14), ("ipx20", 15), ("rtmp", 16), ("netBios", 17), ("nbt", 18), ("n802q", 19), ("bgp", 20), ("rip", 21), ("igrp", 22), ("dec", 23), ("bpdu", 24), ("udp", 25), ("ipv6", 26), ("mdns", 27), ("llmnr", 28), ("ssdp", 29))

ctAlias = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1))
ctAliasTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1), )
if mibBuilder.loadTexts: ctAliasTable.setStatus('current')
if mibBuilder.loadTexts: ctAliasTable.setDescription('The ctAliasTable contains information about the aliases known by the agent. This table is indexed using a unique and arbitrary ID and a TimeFilter to allow a management station to learn all alias entries that have been modified since time X. This table is NOT designed to do a single GET. This Table is designed for MIB Walks only. This table contains objects that map upper-layer network services and entities to the physical location of the associated port, and the MAC address of the associated end-system (node). All entries in this table are deleted when sysUpTime is reset to zero. This table allows for a time filtered view. It is useful for determining what has been modified in the Alias Table since a specified time. If a management station reads the ctAliasTable of an entity at time X, subsequent updates can be realized by performing get-next requests of this table to determine which entries have been modified since time X. Then the management station can use GET requests to retrieve only the records of interest from the Alias table. There is a delay between retrieving the Alias Reference values from this table, and a GET request to retrieve a modified row from the Alias table. The management station should be prepared for two possibilities: 1) the GET request may fail if the Alias table entry has been deleted during the delay, and 2) the entry may have been modified during the delay, so the modification time of the retrieved entry may differ from the modification time of the Delta entry. If the entry in the Alias Control table identified by ctAliasID is marked inactive by management request, and subsequently deleted to free resources, all corresponding entries in this table are also deleted. If the agent needs to free resources, it can delete entries from this table. It SHOULD first remove those which have been marked inactive in the ctAliasControlTable, then it SHOULD remove those entries with the oldest modification times.')
ctAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1), ).setIndexNames((0, "CTRON-ALIAS-MIB", "ctAliasTimeFilter"), (0, "CTRON-ALIAS-MIB", "ctAliasReference"))
if mibBuilder.loadTexts: ctAliasEntry.setStatus('current')
if mibBuilder.loadTexts: ctAliasEntry.setDescription('Each entry contains information pertaining to the alias of a node.')
ctAliasTimeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 1), TimeFilter())
if mibBuilder.loadTexts: ctAliasTimeFilter.setStatus('current')
if mibBuilder.loadTexts: ctAliasTimeFilter.setDescription('The value of sysUpTime when this entry was last modified.')
ctAliasReference = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ctAliasReference.setStatus('current')
if mibBuilder.loadTexts: ctAliasReference.setDescription('An integer ID assigned by the agent. The value of this object is equal to an existing ctAliasID.')
ctAliasInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasInterface.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterface.setDescription("The ifIndex of the interface on which this entry was discovered. The ifIndex is an 'external value' that identifies a physical component associated with the Alias entry. This object can be used to identify the physical location of the interface in the ifTable [RFC2863]. The possibility of ifIndex value re-assignment must be accommodated by a management application whenever the value of sysUpTime is reset to zero. Since ifIndex values in different 'naming scopes' are not related to one another, the interface to physical component associations are relative to the same logical entity within the agent. For more discussion of naming scopes, see the ENTITY-MIB [RFC2037]")
ctAliasMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasMacAddress.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddress.setDescription("The MAC address associated with this alias. The TEXTUAL-CONVENTION MacAddress is defined in SNMPv2-TC as an 802 MAC address represented in 'canonical' order as defined by IEEE 802.1a, i.e., as if it were transmitted least significant bit first.")
ctAliasVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 5), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasVlanID.setStatus('current')
if mibBuilder.loadTexts: ctAliasVlanID.setDescription('The VLAN ID contained in the header of the message associated with this alias. On agents which support this MIB but do not support VLANs, the value for this object MUST be (1).')
ctAliasProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 6), CabletronProtocolTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasProtocol.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocol.setDescription('The address type of this alias address.')
ctAliasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 7), AliasAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasAddress.setStatus('current')
if mibBuilder.loadTexts: ctAliasAddress.setDescription('The address associated with this entry. The exact format of this object will depend upon the protocol type in ctAliasProtocol. The value returned for this object MUST be in a non-textual format.')
ctAliasIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasIsActive.setStatus('current')
if mibBuilder.loadTexts: ctAliasIsActive.setDescription('The status of this entry. A true(1) value indicates the alias is active. A false(2) value indicates an entry which has been marked inactive by network management, using the ctAliasEntryStatus object in the ctAliasControlTable. Entries which have been marked inactive may remain in the table to allow consistent mappings between network management stations until an agent needs to free resources.')
ctAliasAddressText = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasAddressText.setStatus('current')
if mibBuilder.loadTexts: ctAliasAddressText.setDescription('The address associated with this entry in a human readable textual format.')
ctAliasControlTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 2), )
if mibBuilder.loadTexts: ctAliasControlTable.setStatus('current')
if mibBuilder.loadTexts: ctAliasControlTable.setDescription('This table allows for control of Alias entries. Currently control is limited to marking entries as marked for deletion. If the entry in the Alias Control table identified by ctAliasID is marked inactive by management request, and subsequently deleted to free resources, all corresponding entries in the ctAlias table are also deleted. All entries in this table are deleted when sysUpTime is reset to zero.')
ctAliasControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 2, 1), ).setIndexNames((0, "CTRON-ALIAS-MIB", "ctAliasID"))
if mibBuilder.loadTexts: ctAliasControlEntry.setStatus('current')
if mibBuilder.loadTexts: ctAliasControlEntry.setDescription("Each entry contains a unique identifier of an Alias entry and a control object to mark the entry as 'marked for deletion'.")
ctAliasID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ctAliasID.setStatus('current')
if mibBuilder.loadTexts: ctAliasID.setDescription('A unique and arbitrary integer ID assigned by the agent to identify this entry. Each identifier must not be reused until the agent is re-initialized, i.e. sysUpTime is reset to zero.')
ctAliasMarkInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAliasMarkInactive.setStatus('deprecated')
if mibBuilder.loadTexts: ctAliasMarkInactive.setDescription('This object provides the control to mark this entry to inactive. When an entry is created by the agent, this is set to false(2). A network management application can set this value to true(1), indicating that the entry is no longer needed. Once this object has been set to true(1), it cannot be set to false(2). If the alias is detected again by the agent, the agent may create a new entry for the Alias. When an agent needs to free up resources, it may choose to delete those entries marked inactive.')
ctAliasEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAliasEntryStatus.setStatus('current')
if mibBuilder.loadTexts: ctAliasEntryStatus.setDescription("This object provides the control to remove or inactivate entries that are no longer needed. active(1) - indicates that this entry is active. inactive(2) - indicates that this entry is no longer of any interest and can be removed, as needed, by the entity. If the alias is marked inactive and is seen again by the agent, the alias ID's status will be changed to active. remove(3) - indicates that the agent SHOULD immediately remove the entry from the table. If the alias is seen again by the agent after having been removed, it will be added as a new aliasID.")
ctAliasStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 3))
ctAliasTableStatsTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasTableStatsTotalEntries.setStatus('current')
if mibBuilder.loadTexts: ctAliasTableStatsTotalEntries.setDescription('The total number of entries in the ctAliasControlTable.')
ctAliasTableStatsActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasTableStatsActiveEntries.setStatus('current')
if mibBuilder.loadTexts: ctAliasTableStatsActiveEntries.setDescription('The total number of active entries in the ctAliasControlTable.')
ctAliasTableStatsPurgeTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasTableStatsPurgeTime.setStatus('current')
if mibBuilder.loadTexts: ctAliasTableStatsPurgeTime.setDescription('System time of the most recent purge.')
ctAliasTableStatsState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notStarted", 1), ("ready", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasTableStatsState.setStatus('current')
if mibBuilder.loadTexts: ctAliasTableStatsState.setDescription('Current Alias Table state. notStarted(1) indicates the agent has not completed any required start up routines and therefore the ctAliasTable and ctAliasControlTable are not currently valid. ready(2) indicates that the agent has completed all initialization procedures and that the alias MIB is running properly. full(3) indicates that due to memory restrictions on the agent, the ctaliasTable has reached the maximum number of entries possible. NOTE: If an agent is using a circular queue design, then the state of full(3) will never be set.')
ctAliasConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4))
ctAliasConfigurationSystemAllocatedEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasConfigurationSystemAllocatedEntries.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationSystemAllocatedEntries.setDescription('The total number of alias entries allocated.')
ctAliasConfigurationSystemTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasConfigurationSystemTotalEntries.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationSystemTotalEntries.setDescription('The total number of alias entries available to be allocated for this system.')
ctAliasConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 3), )
if mibBuilder.loadTexts: ctAliasConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationTable.setDescription('This table is used to prevent any single chatty port from monopolizing all of the available alias buffers in the system by letting an administrator tune each port.')
ctAliasConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 3, 1), ).setIndexNames((0, "CTRON-ALIAS-MIB", "ctAliasInterface"))
if mibBuilder.loadTexts: ctAliasConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationEntry.setDescription('Each entry contains an enable/disable control variable and variables showing the number of maximum allowable and currently used entries.')
ctAliasConfigurationInterfaceTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasConfigurationInterfaceTotalEntries.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationInterfaceTotalEntries.setDescription('The total number of alias entries currently in use by this ctAliasInterface.')
ctAliasConfigurationInterfaceMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 3, 1, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAliasConfigurationInterfaceMaxEntries.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationInterfaceMaxEntries.setDescription('This object represents the maximum number of alias entries in the ctAliasTable which were created by this ctAliasInterface. When the object ctAliasConfigurationInterfaceTotalEntries equals this object, the next alias appearing on this ctAliasInterface causes the oldest entry created by this ctAliasInterface to be deleted. The sum of this object across all ctAliasInterface shall not exceed ctAliasConfigurationSystemTotalEntries. If the value of this object is increased, then oldest entry removal ceases until the maximum is reached again. If management reduces the value of this object, then, starting with the oldest, alias entries are removed until the new number of entries is reached.')
ctAliasConfigurationInterfaceEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 3, 1, 3), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAliasConfigurationInterfaceEnableState.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationInterfaceEnableState.setDescription('The enable state of the alias agent on this ctAliasInterface.')
ctAliasConfigurationNumQueueWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasConfigurationNumQueueWraps.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationNumQueueWraps.setDescription('This object represents the number of times the queue for this ctAliasConfigurationEntry has wrapped. Since circular queues are used for storing the entries, when all allocated entries are used, the oldest entries are reused, thus creating a wrap condition. A value of zero indicates the queue has not wrapped, except in the case that the counter itself has wrapped.')
ctAliasConfigurationProtocolEnableState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 4, 4), CabletronProtocolBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAliasConfigurationProtocolEnableState.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationProtocolEnableState.setDescription('A bit field of the protocol types where a set indicates the detection of that protocol is enabled. A bit position with a cleared bit indicates detection of that protocol is not enabled.')
ctAliasMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 5), )
if mibBuilder.loadTexts: ctAliasMacAddressTable.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddressTable.setDescription('The ctAliasMacAddressTable contains information about the aliases known by the agent indexed by MAC address and protocol. This table contains information that is identical to the ctAliasTable, but it is instanced by MAC address and protocol to allow management entities to search for a MAC address and protocol, or part of a MAC address and protocol, using a single SNMP GetNext request.')
ctAliasMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 5, 1), ).setIndexNames((0, "CTRON-ALIAS-MIB", "ctAliasMacAddress"), (0, "CTRON-ALIAS-MIB", "ctAliasProtocol"), (0, "CTRON-ALIAS-MIB", "ctAliasAddress"), (0, "CTRON-ALIAS-MIB", "ctAliasReference"))
if mibBuilder.loadTexts: ctAliasMacAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddressEntry.setDescription('Each entry contains information pertaining to the alias of a node in a table indexed by MAC address, protocol type, protocol address, and alias ID.')
ctAliasMacAddressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasMacAddressInterface.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddressInterface.setDescription("The ifIndex of the interface on which this entry was discovered. The ifIndex is an 'external value' that identifies a physical component associated with the Alias entry. This object can be used to identify the physical location of the interface in the ifTable [RFC2863]. The possibility of ifIndex value re-assignment must be accommodated by a management application whenever the value of sysUpTime is reset to zero. Since ifIndex values in different 'naming scopes' are not related to one another, the interface to physical component associations are relative to the same logical entity within the agent. For more discussion of naming scopes, see the ENTITY-MIB [RFC2037]")
ctAliasMacAddressVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 5, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasMacAddressVlanID.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddressVlanID.setDescription('The VLAN ID contained in the header of the message associated with this alias. On agents which support this MIB but do not support VLANs, the value for this object MUST be (1).')
ctAliasMacAddressIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasMacAddressIsActive.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddressIsActive.setDescription('The status of this entry. A true(1) value indicates the alias is active. A false(2) value indicates an entry which has been marked inactive by network management, using the ctAliasEntryStatus object in the ctAliasControlTable. Entries which have been marked inactive may remain in the table to allow consistent mappings between network management stations until an agent needs to free resources.')
ctAliasMacAddressAddressText = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 5, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasMacAddressAddressText.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddressAddressText.setDescription('The address associated with this entry in a human readable textual format.')
ctAliasMacAddressTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasMacAddressTime.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddressTime.setDescription('The value of sysUpTime when this entry was last modified.')
ctAliasProtocolAddressTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 6), )
if mibBuilder.loadTexts: ctAliasProtocolAddressTable.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocolAddressTable.setDescription('The ctAliasProtocolAddressTable contains information about the aliases known by the agent indexed by protocol and address. This table contains information that is identical to the ctAliasTable, but it is instanced by protocol and address to allow management entities to search for a protocol and address, or part of a protocol and address, using a single SNMP GetNext request.')
ctAliasProtocolAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 6, 1), ).setIndexNames((0, "CTRON-ALIAS-MIB", "ctAliasProtocol"), (0, "CTRON-ALIAS-MIB", "ctAliasAddress"), (0, "CTRON-ALIAS-MIB", "ctAliasMacAddress"), (0, "CTRON-ALIAS-MIB", "ctAliasReference"))
if mibBuilder.loadTexts: ctAliasProtocolAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocolAddressEntry.setDescription('Each entry contains information pertaining to the alias of a node in a table indexed by protocol type, protocol address, MAC address, and alias ID.')
ctAliasProtocolAddressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasProtocolAddressInterface.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocolAddressInterface.setDescription("The ifIndex of the interface on which this entry was discovered. The ifIndex is an 'external value' that identifies a physical component associated with the Alias entry. This object can be used to identify the physical location of the interface in the ifTable [RFC2863]. The possibility of ifIndex value re-assignment must be accommodated by a management application whenever the value of sysUpTime is reset to zero. Since ifIndex values in different 'naming scopes' are not related to one another, the interface to physical component associations are relative to the same logical entity within the agent. For more discussion of naming scopes, see the ENTITY-MIB [RFC2037]")
ctAliasProtocolAddressVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 6, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasProtocolAddressVlanID.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocolAddressVlanID.setDescription('The VLAN ID contained in the header of the message associated with this alias. On agents which support this MIB but do not support VLANs, the value for this object MUST be (1).')
ctAliasProtocolAddressIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasProtocolAddressIsActive.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocolAddressIsActive.setDescription('The status of this entry. A true(1) value indicates the alias is active. A false(2) value indicates an entry which has been marked inactive by network management, using the ctAliasEntryStatus object in the ctAliasControlTable. Entries which have been marked inactive may remain in the table to allow consistent mappings between network management stations until an agent needs to free resources.')
ctAliasProtocolAddressAddressText = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 6, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasProtocolAddressAddressText.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocolAddressAddressText.setDescription('The address associated with this entry in a human readable textual format.')
ctAliasProtocolAddressTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasProtocolAddressTime.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocolAddressTime.setDescription('The value of sysUpTime when this entry was last modified.')
ctAliasEntryClearAll = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctAliasEntryClearAll.setStatus('current')
if mibBuilder.loadTexts: ctAliasEntryClearAll.setDescription('This object is used to remove all of the alias entries from all of the tables. When set to true(1) all known aliases will be immediately removed from all of their respective tables. A read will always return false(2).')
ctAliasInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8), )
if mibBuilder.loadTexts: ctAliasInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceTable.setDescription('The ctAliasInterfaceTable contains information about the aliases known by the agent indexed by interface address and alias ID. This table contains information that is identical to the ctAliasTable, but it is instanced by interface address and alias ID to allow management entities to search for an interface address, using a single SNMP GetNext request.')
ctAliasInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8, 1), ).setIndexNames((0, "CTRON-ALIAS-MIB", "ctAliasInterface"), (0, "CTRON-ALIAS-MIB", "ctAliasReference"))
if mibBuilder.loadTexts: ctAliasInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceEntry.setDescription('Each entry contains information pertaining to the alias of a node in a table indexed by interface address and alias ID.')
ctAliasInterfaceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasInterfaceMacAddress.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceMacAddress.setDescription("The MAC address associated with this alias. The TEXTUAL-CONVENTION MacAddress is defined in SNMPv2-TC as an 802 MAC address represented in 'canonical' order as defined by IEEE 802.1a, i.e., as if it were transmitted least significant bit first.")
ctAliasInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8, 1, 2), CabletronProtocolTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasInterfaceProtocol.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceProtocol.setDescription('The address type of this alias address.')
ctAliasInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8, 1, 3), AliasAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceAddress.setDescription('The address associated with this entry. The exact format of this object will depend upon the protocol type in ctAliasInterfaceProtocol. The value returned for this object MUST be in a non-textual format.')
ctAliasInterfaceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8, 1, 4), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasInterfaceVlanID.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceVlanID.setDescription('The VLAN ID contained in the header of the message associated with this alias. On agents which support this MIB but do not support VLANs, the value for this object MUST be (1).')
ctAliasInterfaceIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasInterfaceIsActive.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceIsActive.setDescription('The status of this entry. A true(1) value indicates the alias is active. A false(2) value indicates an entry which has been marked inactive by network management, using the ctAliasEntryStatus object in the ctAliasControlTable. Entries which have been marked inactive may remain in the table to allow consistent mappings between network management stations until an agent needs to free resources.')
ctAliasInterfaceAddressText = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasInterfaceAddressText.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceAddressText.setDescription('The address associated with this entry in a human readable textual format.')
ctAliasInterfaceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 1, 1, 8, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctAliasInterfaceTime.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceTime.setDescription('The value of sysUpTime when this entry was last modified.')
ctAliasConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2))
ctAliasGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1))
ctAliasCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 2))
ctAliasBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 1)).setObjects(("CTRON-ALIAS-MIB", "ctAliasInterface"), ("CTRON-ALIAS-MIB", "ctAliasMacAddress"), ("CTRON-ALIAS-MIB", "ctAliasVlanID"), ("CTRON-ALIAS-MIB", "ctAliasProtocol"), ("CTRON-ALIAS-MIB", "ctAliasAddress"), ("CTRON-ALIAS-MIB", "ctAliasIsActive"), ("CTRON-ALIAS-MIB", "ctAliasAddressText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasBasicGroup = ctAliasBasicGroup.setStatus('current')
if mibBuilder.loadTexts: ctAliasBasicGroup.setDescription('A collection of objects for the discovery and mapping of end systems and aliases.')
ctAliasStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 2)).setObjects(("CTRON-ALIAS-MIB", "ctAliasTableStatsTotalEntries"), ("CTRON-ALIAS-MIB", "ctAliasTableStatsActiveEntries"), ("CTRON-ALIAS-MIB", "ctAliasTableStatsPurgeTime"), ("CTRON-ALIAS-MIB", "ctAliasTableStatsState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasStatsGroup = ctAliasStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ctAliasStatsGroup.setDescription('A collection of objects pertaining to discovery and mapping of end systems and aliases.')
ctAliasControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 3)).setObjects(("CTRON-ALIAS-MIB", "ctAliasMarkInactive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasControlGroup = ctAliasControlGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ctAliasControlGroup.setDescription('This group has been deprecated. See ctAliasControlGroupI.')
ctAliasConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 4)).setObjects(("CTRON-ALIAS-MIB", "ctAliasConfigurationSystemAllocatedEntries"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationSystemTotalEntries"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationInterfaceTotalEntries"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationInterfaceMaxEntries"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationInterfaceEnableState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasConfigurationGroup = ctAliasConfigurationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ctAliasConfigurationGroup.setDescription('A collection of objects for configuring port buffer queues.')
ctAliasMacAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 5)).setObjects(("CTRON-ALIAS-MIB", "ctAliasMacAddressInterface"), ("CTRON-ALIAS-MIB", "ctAliasMacAddressVlanID"), ("CTRON-ALIAS-MIB", "ctAliasMacAddressIsActive"), ("CTRON-ALIAS-MIB", "ctAliasMacAddressAddressText"), ("CTRON-ALIAS-MIB", "ctAliasMacAddressTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasMacAddressGroup = ctAliasMacAddressGroup.setStatus('current')
if mibBuilder.loadTexts: ctAliasMacAddressGroup.setDescription('A collection of objects for the discovery and mapping of end systems and aliases.')
ctAliasProtocolAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 6)).setObjects(("CTRON-ALIAS-MIB", "ctAliasProtocolAddressInterface"), ("CTRON-ALIAS-MIB", "ctAliasProtocolAddressVlanID"), ("CTRON-ALIAS-MIB", "ctAliasProtocolAddressIsActive"), ("CTRON-ALIAS-MIB", "ctAliasProtocolAddressAddressText"), ("CTRON-ALIAS-MIB", "ctAliasProtocolAddressTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasProtocolAddressGroup = ctAliasProtocolAddressGroup.setStatus('current')
if mibBuilder.loadTexts: ctAliasProtocolAddressGroup.setDescription('A collection of objects for the discovery and mapping of end systems and aliases.')
ctAliasControlGroupI = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 7)).setObjects(("CTRON-ALIAS-MIB", "ctAliasEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasControlGroupI = ctAliasControlGroupI.setStatus('current')
if mibBuilder.loadTexts: ctAliasControlGroupI.setDescription('A collection of objects which make the Aliases accessible using the TimeFilter TEXTUAL CONVENTION.')
ctAliasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 8)).setObjects(("CTRON-ALIAS-MIB", "ctAliasEntryClearAll"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasGroup = ctAliasGroup.setStatus('current')
if mibBuilder.loadTexts: ctAliasGroup.setDescription('An object used for removing alias entries.')
ctAliasConfigurationGroupI = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 9)).setObjects(("CTRON-ALIAS-MIB", "ctAliasConfigurationNumQueueWraps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasConfigurationGroupI = ctAliasConfigurationGroupI.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationGroupI.setDescription('An object to indicate queue usage.')
ctAliasConfigurationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 10)).setObjects(("CTRON-ALIAS-MIB", "ctAliasConfigurationSystemAllocatedEntries"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationSystemTotalEntries"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationInterfaceTotalEntries"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationInterfaceMaxEntries"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationInterfaceEnableState"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationProtocolEnableState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasConfigurationGroup2 = ctAliasConfigurationGroup2.setStatus('current')
if mibBuilder.loadTexts: ctAliasConfigurationGroup2.setDescription('A collection of objects for configuring port buffer queues.')
ctAliasInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 1, 11)).setObjects(("CTRON-ALIAS-MIB", "ctAliasInterfaceMacAddress"), ("CTRON-ALIAS-MIB", "ctAliasInterfaceProtocol"), ("CTRON-ALIAS-MIB", "ctAliasInterfaceAddress"), ("CTRON-ALIAS-MIB", "ctAliasInterfaceVlanID"), ("CTRON-ALIAS-MIB", "ctAliasInterfaceIsActive"), ("CTRON-ALIAS-MIB", "ctAliasInterfaceAddressText"), ("CTRON-ALIAS-MIB", "ctAliasInterfaceTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasInterfaceGroup = ctAliasInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: ctAliasInterfaceGroup.setDescription('A collection of objects for the discovery and mapping of end systems and aliases.')
ctAliasCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 2, 1)).setObjects(("CTRON-ALIAS-MIB", "ctAliasBasicGroup"), ("CTRON-ALIAS-MIB", "ctAliasStatsGroup"), ("CTRON-ALIAS-MIB", "ctAliasGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasCompliance = ctAliasCompliance.setStatus('current')
if mibBuilder.loadTexts: ctAliasCompliance.setDescription('The compliance statement for device support of the Cabletron Directory Alias feature.')
ctAliasCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 3, 7, 2, 2, 2)).setObjects(("CTRON-ALIAS-MIB", "ctAliasBasicGroup"), ("CTRON-ALIAS-MIB", "ctAliasStatsGroup"), ("CTRON-ALIAS-MIB", "ctAliasGroup"), ("CTRON-ALIAS-MIB", "ctAliasMacAddressGroup"), ("CTRON-ALIAS-MIB", "ctAliasProtocolAddressGroup"), ("CTRON-ALIAS-MIB", "ctAliasControlGroupI"), ("CTRON-ALIAS-MIB", "ctAliasGroup"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationGroupI"), ("CTRON-ALIAS-MIB", "ctAliasConfigurationGroup2"), ("CTRON-ALIAS-MIB", "ctAliasInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctAliasCompliance2 = ctAliasCompliance2.setStatus('current')
if mibBuilder.loadTexts: ctAliasCompliance2.setDescription('The compliance statement for device support of the Cabletron Directory Alias feature.')
mibBuilder.exportSymbols("CTRON-ALIAS-MIB", ctAliasCompliance=ctAliasCompliance, ctAliasInterfaceAddressText=ctAliasInterfaceAddressText, ctAliasInterfaceAddress=ctAliasInterfaceAddress, ctAliasStatsGroup=ctAliasStatsGroup, ctAliasConfigurationTable=ctAliasConfigurationTable, ctAliasMacAddressEntry=ctAliasMacAddressEntry, ctAliasConfigurationProtocolEnableState=ctAliasConfigurationProtocolEnableState, ctAliasMacAddressTime=ctAliasMacAddressTime, ctAliasProtocolAddressEntry=ctAliasProtocolAddressEntry, ctAliasEntry=ctAliasEntry, ctAliasReference=ctAliasReference, ctAliasInterfaceIsActive=ctAliasInterfaceIsActive, ctAliasTableStatsActiveEntries=ctAliasTableStatsActiveEntries, ctAliasConfigurationInterfaceTotalEntries=ctAliasConfigurationInterfaceTotalEntries, ctAliasMacAddressInterface=ctAliasMacAddressInterface, ctAliasInterfaceProtocol=ctAliasInterfaceProtocol, ctAliasMarkInactive=ctAliasMarkInactive, ctAliasConfigurationGroupI=ctAliasConfigurationGroupI, ctAliasProtocolAddressIsActive=ctAliasProtocolAddressIsActive, ctAliasBasicGroup=ctAliasBasicGroup, ctAliasConfigurationGroup2=ctAliasConfigurationGroup2, ctAliasConfigurationInterfaceEnableState=ctAliasConfigurationInterfaceEnableState, ctAliasConfigurationSystemTotalEntries=ctAliasConfigurationSystemTotalEntries, ctAliasGroup=ctAliasGroup, ctAliasMacAddressIsActive=ctAliasMacAddressIsActive, ctAliasProtocol=ctAliasProtocol, CabletronProtocolTC=CabletronProtocolTC, ctAliasAddress=ctAliasAddress, ctAliasStats=ctAliasStats, ctAliasProtocolAddressVlanID=ctAliasProtocolAddressVlanID, ctAliasTableStatsState=ctAliasTableStatsState, ctAliasMacAddressVlanID=ctAliasMacAddressVlanID, ctAliasCompliance2=ctAliasCompliance2, ctAliasControlGroupI=ctAliasControlGroupI, ctAliasConfigurationInterfaceMaxEntries=ctAliasConfigurationInterfaceMaxEntries, ctAliasIsActive=ctAliasIsActive, ctAliasConfigurationNumQueueWraps=ctAliasConfigurationNumQueueWraps, ctAliasEntryClearAll=ctAliasEntryClearAll, ctAliasAddressText=ctAliasAddressText, ctAliasMacAddressAddressText=ctAliasMacAddressAddressText, AliasAddress=AliasAddress, ctAliasMacAddress=ctAliasMacAddress, ctAliasProtocolAddressInterface=ctAliasProtocolAddressInterface, ctAliasMacAddressGroup=ctAliasMacAddressGroup, ctAliasID=ctAliasID, ctAliasProtocolAddressTable=ctAliasProtocolAddressTable, ctAliasTableStatsTotalEntries=ctAliasTableStatsTotalEntries, ctAliasGroups=ctAliasGroups, ctAliasControlEntry=ctAliasControlEntry, ctAliasTable=ctAliasTable, PYSNMP_MODULE_ID=cabletronAliasMib, ctAliasTableStatsPurgeTime=ctAliasTableStatsPurgeTime, ctAliasCompliances=ctAliasCompliances, ctAliasControlTable=ctAliasControlTable, ctAliasConfigurationGroup=ctAliasConfigurationGroup, ctAliasConfigurationEntry=ctAliasConfigurationEntry, ctAliasInterface=ctAliasInterface, ctAliasConfiguration=ctAliasConfiguration, ctAliasInterfaceTime=ctAliasInterfaceTime, ctAliasProtocolAddressGroup=ctAliasProtocolAddressGroup, ctAliasInterfaceMacAddress=ctAliasInterfaceMacAddress, ctAliasInterfaceVlanID=ctAliasInterfaceVlanID, ctAlias=ctAlias, ctAliasInterfaceGroup=ctAliasInterfaceGroup, ctAliasConfigurationSystemAllocatedEntries=ctAliasConfigurationSystemAllocatedEntries, ctAliasVlanID=ctAliasVlanID, ctAliasProtocolAddressTime=ctAliasProtocolAddressTime, ctAliasInterfaceTable=ctAliasInterfaceTable, ctAliasTimeFilter=ctAliasTimeFilter, ctAliasConformance=ctAliasConformance, ctAliasProtocolAddressAddressText=ctAliasProtocolAddressAddressText, CabletronProtocolBits=CabletronProtocolBits, ctAliasEntryStatus=ctAliasEntryStatus, ctAliasMacAddressTable=ctAliasMacAddressTable, ctAliasControlGroup=ctAliasControlGroup, cabletronAliasMib=cabletronAliasMib, ctAliasInterfaceEntry=ctAliasInterfaceEntry)
