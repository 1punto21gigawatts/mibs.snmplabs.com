#
# PySNMP MIB module QUANTA-OPENFLOW-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QUANTA-OPENFLOW-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:44:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
switch, = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "switch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, ObjectIdentity, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Bits, Gauge32, MibIdentifier, IpAddress, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "ObjectIdentity", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Bits", "Gauge32", "MibIdentifier", "IpAddress", "Unsigned32", "ModuleIdentity")
TimeStamp, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowStatus", "TextualConvention")
openFlow = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 200))
openFlow.setRevisions(('2011-03-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: openFlow.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: openFlow.setLastUpdated('201103060000Z')
if mibBuilder.loadTexts: openFlow.setOrganization('Quanta Corporation')
if mibBuilder.loadTexts: openFlow.setContactInfo(' Customer Support Postal: Quanta Corporation')
if mibBuilder.loadTexts: openFlow.setDescription('The Quanta Private MIB for OpenFlow')
agentOpenFlowGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1))
agentOpenFlowGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 1))
agentOpenFlowAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOpenFlowAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowAdminMode.setDescription('Flag indicating whether the OpenFlow feature is administratively enabled.')
agentOpenFlowVariant = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("openFlow10Mode", 2), ("openFlow11Mode", 3), ("openFlow12Mode", 4), ("openFlow13Mode", 5))).clone('openFlow10Mode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOpenFlowVariant.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowVariant.setDescription('Indicates which OpenFlow version is currently running on the switch.')
agentOpenFlowCfgControllerTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3), )
if mibBuilder.loadTexts: agentOpenFlowCfgControllerTable.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowCfgControllerTable.setDescription('This table contains the list of configured IP addresses for the OpenFlow Controllers.')
agentOpenFlowCfgControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1), ).setIndexNames((0, "QUANTA-OPENFLOW-PRIVATE-MIB", "agentOpenFlowCfgCtrlIPAddress"), (0, "QUANTA-OPENFLOW-PRIVATE-MIB", "agentOpenFlowCfgCtrlIPPort"))
if mibBuilder.loadTexts: agentOpenFlowCfgControllerEntry.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowCfgControllerEntry.setDescription('Represents entry for Open Flow configure controller table')
agentOpenFlowCfgCtrlIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlIPAddress.setDescription('IP Address of the OpenFlow Controller to which the switch should connect.')
agentOpenFlowCfgCtrlIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(6632)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlIPPort.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlIPPort.setDescription('IP Port number used for connecting to the Controller.')
agentOpenFlowCfgCtrlConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ssl", 1), ("tcp", 2))).clone('ssl')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlConnectionMode.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlConnectionMode.setDescription('Flag indicating whether the switch uses TCP or SSL connection to connect to the OpenFlow Controller. The TCP connections are intended only for demos and debugging.')
agentOpenFlowCfgCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowCfgCtrlStatus.setDescription('Status of this instance. active(1) - this CfgControllerTable instance is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentOpenFlowGlobalStatusParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 6))
agentOpenFlowOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enablePending", 3), ("disablePending", 4))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowOperationalStatus.setDescription('Flag indicating whether the OpenFlow feature is enabled, disabled or in transition.')
agentOpenFlowDisableReason = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("administrativelyDisabled", 2), ("noSuitableIPInterface", 3), ("noSSLCertificates", 4))).clone('administrativelyDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowDisableReason.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowDisableReason.setDescription('Indicates why the OpenFlow feature is disabled.')
agentOpenFlowGlobalCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 7))
agentOpenFlowEraseOpenFlowManagerCertificates = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alwaysReturnedOnRead", 1), ("eraseCertificates", 2))).clone('alwaysReturnedOnRead')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOpenFlowEraseOpenFlowManagerCertificates.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowEraseOpenFlowManagerCertificates.setDescription("This command directs the switch to erase certificate files obtained from the OpenFlow Managers. This is write-only value. It always returns '0' on request")
agentOpenFlowFlowTableStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8), )
if mibBuilder.loadTexts: agentOpenFlowFlowTableStatusTable.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowFlowTableStatusTable.setDescription('These status parameters describe the supported OpenFlow tables and report usage information for the tables.')
agentOpenFlowFlowTableStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1), ).setIndexNames((0, "QUANTA-OPENFLOW-PRIVATE-MIB", "agentOpenFlowFlowTable"))
if mibBuilder.loadTexts: agentOpenFlowFlowTableStatusEntry.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowFlowTableStatusEntry.setDescription("Represents entry for Open Flow 'Flow Table Status'")
agentOpenFlowFlowTable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowTable.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowFlowTable.setDescription('OpenFlow Table Identifier.')
agentOpenFlowFlowTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowTableName.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowFlowTableName.setDescription('The name of this table.')
agentOpenFlowFlowTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowTableDescription.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowFlowTableDescription.setDescription('A detailed description for this table.')
agentOpenFlowMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowMaximumSize.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowMaximumSize.setDescription('Platform-defined maximum size for this flow table.')
agentOpenFlowNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowNumberOfEntries.setDescription('Total number of entries in this table. The count includes delete-pending entries.')
agentOpenFlowHardwareEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowHardwareEntries.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowHardwareEntries.setDescription('Number of entries currently inserted into the hardware.')
agentOpenFlowSoftwareOnlyEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowSoftwareOnlyEntries.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowSoftwareOnlyEntries.setDescription('Number of entries that are not installed in the hardware for any reason. This includes entries pending for insertion, entries that cannot be inserted due to missing interfaces and entries that cannot be inserted due to table-full condition.')
agentOpenFlowWaitingForSpaceEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowWaitingForSpaceEntries.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowWaitingForSpaceEntries.setDescription('Number of entries that are not currently in the hardware because the attempt to insert the entry failed.')
agentOpenFlowFlowInsertionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowInsertionCount.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowFlowInsertionCount.setDescription('Total number of flows that were added to this table since the switch powered up.')
agentOpenFlowFlowDeletionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowFlowDeletionCount.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowFlowDeletionCount.setDescription('Total number of flows that were deleted from this table since the switch powered up.')
agentOpenFlowInsertionFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 200, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentOpenFlowInsertionFailureCount.setStatus('current')
if mibBuilder.loadTexts: agentOpenFlowInsertionFailureCount.setDescription('Total number of hardware insertion attempts that were rejected due to lack of space since the switch powered up.')
mibBuilder.exportSymbols("QUANTA-OPENFLOW-PRIVATE-MIB", agentOpenFlowGlobalCommands=agentOpenFlowGlobalCommands, agentOpenFlowCfgControllerTable=agentOpenFlowCfgControllerTable, agentOpenFlowDisableReason=agentOpenFlowDisableReason, agentOpenFlowGlobalStatusParameters=agentOpenFlowGlobalStatusParameters, agentOpenFlowCfgCtrlConnectionMode=agentOpenFlowCfgCtrlConnectionMode, agentOpenFlowFlowDeletionCount=agentOpenFlowFlowDeletionCount, agentOpenFlowCfgControllerEntry=agentOpenFlowCfgControllerEntry, agentOpenFlowFlowTableName=agentOpenFlowFlowTableName, agentOpenFlowGlobalConfigGroup=agentOpenFlowGlobalConfigGroup, agentOpenFlowVariant=agentOpenFlowVariant, agentOpenFlowCfgCtrlIPAddress=agentOpenFlowCfgCtrlIPAddress, agentOpenFlowFlowTable=agentOpenFlowFlowTable, agentOpenFlowEraseOpenFlowManagerCertificates=agentOpenFlowEraseOpenFlowManagerCertificates, agentOpenFlowWaitingForSpaceEntries=agentOpenFlowWaitingForSpaceEntries, agentOpenFlowMaximumSize=agentOpenFlowMaximumSize, agentOpenFlowOperationalStatus=agentOpenFlowOperationalStatus, agentOpenFlowFlowTableDescription=agentOpenFlowFlowTableDescription, PYSNMP_MODULE_ID=openFlow, agentOpenFlowCfgCtrlStatus=agentOpenFlowCfgCtrlStatus, agentOpenFlowNumberOfEntries=agentOpenFlowNumberOfEntries, agentOpenFlowSoftwareOnlyEntries=agentOpenFlowSoftwareOnlyEntries, agentOpenFlowHardwareEntries=agentOpenFlowHardwareEntries, agentOpenFlowFlowInsertionCount=agentOpenFlowFlowInsertionCount, agentOpenFlowCfgCtrlIPPort=agentOpenFlowCfgCtrlIPPort, agentOpenFlowFlowTableStatusEntry=agentOpenFlowFlowTableStatusEntry, agentOpenFlowAdminMode=agentOpenFlowAdminMode, agentOpenFlowInsertionFailureCount=agentOpenFlowInsertionFailureCount, openFlow=openFlow, agentOpenFlowFlowTableStatusTable=agentOpenFlowFlowTableStatusTable, agentOpenFlowGroup=agentOpenFlowGroup)
