#
# PySNMP MIB module Nortel-Magellan-Passport-CallServerMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-CallServerMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
Counter32, StorageType, DisplayString, RowStatus, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Counter32", "StorageType", "DisplayString", "RowStatus", "Unsigned32")
WildcardedDigitString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "WildcardedDigitString", "NonReplicated")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, Counter32, Counter64, Gauge32, Integer32, ObjectIdentity, IpAddress, TimeTicks, Unsigned32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "ObjectIdentity", "IpAddress", "TimeTicks", "Unsigned32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
callServerMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41))
cR = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42))
cRRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 1), )
if mibBuilder.loadTexts: cRRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: cRRowStatusTable.setDescription('This entry controls the addition and deletion of cR components.')
cRRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallServerMIB", "cRIndex"))
if mibBuilder.loadTexts: cRRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cRRowStatusEntry.setDescription('A single entry in the table represents a single cR component.')
cRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cRRowStatus.setDescription('This variable is used as the basis for SNMP naming of cR components. These components can be added and deleted.')
cRComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: cRComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
cRStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: cRStorageType.setDescription('This variable represents the storage type value for the cR tables.')
cRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: cRIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cRIndex.setDescription('This variable represents the index for the cR tables.')
cRNpi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2))
cRNpiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 1), )
if mibBuilder.loadTexts: cRNpiRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiRowStatusTable.setDescription('This entry controls the addition and deletion of cRNpi components.')
cRNpiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallServerMIB", "cRIndex"), (0, "Nortel-Magellan-Passport-CallServerMIB", "cRNpiIndex"))
if mibBuilder.loadTexts: cRNpiRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiRowStatusEntry.setDescription('A single entry in the table represents a single cRNpi component.')
cRNpiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRNpiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiRowStatus.setDescription('This variable is used as the basis for SNMP naming of cRNpi components. These components can be added and deleted.')
cRNpiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRNpiComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
cRNpiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRNpiStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiStorageType.setDescription('This variable represents the storage type value for the cRNpi tables.')
cRNpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))))
if mibBuilder.loadTexts: cRNpiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiIndex.setDescription('This variable represents the index for the cRNpi tables.')
cRNpiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 10), )
if mibBuilder.loadTexts: cRNpiStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiStatsTable.setDescription('This group of attributes contains the statistics kept for a particular numbering plan indicator.')
cRNpiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallServerMIB", "cRIndex"), (0, "Nortel-Magellan-Passport-CallServerMIB", "cRNpiIndex"))
if mibBuilder.loadTexts: cRNpiStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiStatsEntry.setDescription('An entry in the cRNpiStatsTable.')
cRNpiTotalDnas = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRNpiTotalDnas.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiTotalDnas.setDescription('This attribute contains the total number of prefix-DNAs provisioned.')
cRNpiCallsRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRNpiCallsRouted.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiCallsRouted.setDescription('This attribute contains the total number of call setup packets routed. When the counter reaches the maximum, it wraps back to zero.')
cRNpiCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRNpiCallsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiCallsFailed.setDescription('This attribute contains the total number of call setup packets that failed to route. This could be caused by the MID or RID being unreachable or by the DNA failing to translate to a MID or RID. Check the prefix-DNA provisioning data and the DNAs associated to the endpoints of the connection. When the counter reaches the maximum, it wraps back to zero.')
cRNpiDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2))
cRNpiDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 1), )
if mibBuilder.loadTexts: cRNpiDnaRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaRowStatusTable.setDescription('This entry controls the addition and deletion of cRNpiDna components.')
cRNpiDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallServerMIB", "cRIndex"), (0, "Nortel-Magellan-Passport-CallServerMIB", "cRNpiIndex"), (0, "Nortel-Magellan-Passport-CallServerMIB", "cRNpiDnaIndex"))
if mibBuilder.loadTexts: cRNpiDnaRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaRowStatusEntry.setDescription('A single entry in the table represents a single cRNpiDna component.')
cRNpiDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRNpiDnaRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaRowStatus.setDescription('This variable is used as the basis for SNMP naming of cRNpiDna components. These components can be added and deleted.')
cRNpiDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRNpiDnaComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
cRNpiDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRNpiDnaStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaStorageType.setDescription('This variable represents the storage type value for the cRNpiDna tables.')
cRNpiDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 1, 1, 10), WildcardedDigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: cRNpiDnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaIndex.setDescription('This variable represents the index for the cRNpiDna tables.')
cRNpiDnaProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 10), )
if mibBuilder.loadTexts: cRNpiDnaProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaProvTable.setDescription('This group of attributes represents what the prefix-DNA maps to.')
cRNpiDnaProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CallServerMIB", "cRIndex"), (0, "Nortel-Magellan-Passport-CallServerMIB", "cRNpiIndex"), (0, "Nortel-Magellan-Passport-CallServerMIB", "cRNpiDnaIndex"))
if mibBuilder.loadTexts: cRNpiDnaProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaProvEntry.setDescription('An entry in the cRNpiDnaProvTable.')
cRNpiDnaRoutingId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRNpiDnaRoutingId.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaRoutingId.setDescription('This attribute identifies the routingId that the prefix-DNA maps to. If the value is set to zero, then the routingId is not used. Note that at least one and only one of the attributes in this group must be set to a non-zero value.')
cRNpiDnaModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 42, 2, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1909))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRNpiDnaModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: cRNpiDnaModuleId.setDescription('This attribute contains the module identifier value that the DNA maps to. If the value is set to zero, then the moduleId is not used. Note that at least one and only one of the attributes in this group must be set to a non-zero value.')
callServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41, 1))
callServerGroupBC = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41, 1, 3))
callServerGroupBC02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41, 1, 3, 3))
callServerGroupBC02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41, 1, 3, 3, 2))
callServerCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41, 3))
callServerCapabilitiesBC = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41, 3, 3))
callServerCapabilitiesBC02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41, 3, 3, 3))
callServerCapabilitiesBC02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 41, 3, 3, 3, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-CallServerMIB", cRNpiTotalDnas=cRNpiTotalDnas, cRNpiDnaRowStatusTable=cRNpiDnaRowStatusTable, callServerCapabilitiesBC02=callServerCapabilitiesBC02, cRNpiDnaRoutingId=cRNpiDnaRoutingId, cRNpiStorageType=cRNpiStorageType, cRNpiDnaStorageType=cRNpiDnaStorageType, cRNpiRowStatus=cRNpiRowStatus, cRNpiCallsFailed=cRNpiCallsFailed, cRRowStatusTable=cRRowStatusTable, callServerMIB=callServerMIB, cRNpiStatsTable=cRNpiStatsTable, cRNpiCallsRouted=cRNpiCallsRouted, cRNpi=cRNpi, callServerGroup=callServerGroup, cRNpiDna=cRNpiDna, cRStorageType=cRStorageType, cRNpiIndex=cRNpiIndex, cRNpiDnaProvEntry=cRNpiDnaProvEntry, cRIndex=cRIndex, cR=cR, callServerCapabilitiesBC02A=callServerCapabilitiesBC02A, callServerGroupBC02=callServerGroupBC02, cRNpiRowStatusTable=cRNpiRowStatusTable, callServerCapabilities=callServerCapabilities, cRRowStatusEntry=cRRowStatusEntry, callServerCapabilitiesBC=callServerCapabilitiesBC, cRNpiDnaModuleId=cRNpiDnaModuleId, cRNpiComponentName=cRNpiComponentName, cRNpiRowStatusEntry=cRNpiRowStatusEntry, callServerGroupBC02A=callServerGroupBC02A, callServerGroupBC=callServerGroupBC, cRRowStatus=cRRowStatus, cRNpiDnaProvTable=cRNpiDnaProvTable, cRNpiDnaRowStatus=cRNpiDnaRowStatus, cRComponentName=cRComponentName, cRNpiDnaComponentName=cRNpiDnaComponentName, cRNpiDnaIndex=cRNpiDnaIndex, cRNpiDnaRowStatusEntry=cRNpiDnaRowStatusEntry, cRNpiStatsEntry=cRNpiStatsEntry)
