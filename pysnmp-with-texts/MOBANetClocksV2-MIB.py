#
# PySNMP MIB module MOBANetClocksV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MOBANetClocksV2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Bits, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, MibIdentifier, iso, Counter64, TimeTicks, Integer32, Unsigned32, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "MibIdentifier", "iso", "Counter64", "TimeTicks", "Integer32", "Unsigned32", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mbnscMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 13842, 6, 100))
mbnscMIB.setRevisions(('2014-06-17 12:02',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mbnscMIB.setRevisionsDescriptions(('initial version of this module',))
if mibBuilder.loadTexts: mbnscMIB.setLastUpdated('201406171202Z')
if mibBuilder.loadTexts: mbnscMIB.setOrganization('Moser-Baer AG')
if mibBuilder.loadTexts: mbnscMIB.setContactInfo('Moser-Baer AG Spitalstr. 7 3454 Sumiswald support@mobatime.com')
if mibBuilder.loadTexts: mbnscMIB.setDescription('This mib definition is used for all MOBATime network slave clocks.')
class MOBAAlarm64(TextualConvention, OctetString):
    description = 'The alarm list is an array of bytes. The first byte defines the mask for the alarm bits 0..7. The last byte defines the mask for the alarm bits 56..63. Every byte has the range 0 ... 255 (binary).'
    status = 'current'
    displayHint = '1x1x1x1x.1x1x1x1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class MOBAFlags64(TextualConvention, OctetString):
    description = 'The flags are an array of bytes. The first byte defines the mask for the status bits 0..7. The last byte defines the mask for the status bits 56..63. Every byte has the range 0 ... 255 (binary).'
    status = 'current'
    displayHint = '1x1x1x1x.1x1x1x1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class MOBANetworkName(TextualConvention, OctetString):
    description = 'Fully qualified domain names or IP addresses in ASCII. IPv4 xxx.xxx.xxx.xxx IPV6 xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx name string max 40 chars'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 40)

mobatime = MibIdentifier((1, 3, 6, 1, 4, 1, 13842))
mobaNetClocks = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6))
mobaNetClocksV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2))
mbnscNet = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1))
mbnscNetGen = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1))
mbnscNetGenMAC = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetGenMAC.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenMAC.setDescription('MAC-Address (xx xx xx xx xx xx)')
mbnscNetGenIPMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("ipv4only", 1), ("ipv6only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetGenIPMode.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenIPMode.setDescription('IP Mode: 0: IPv4 and IPv6 1: IPv4 only 2: IPv6 only')
mbnscNetGenIPNameserver = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetGenIPNameserver.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenIPNameserver.setDescription('IPv4 or IPv6 address (xxx.xxx.xxx.xxx or xxxx::xxxx:xxxx) of the nameserver')
mbnscNetGenTZClientPort = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetGenTZClientPort.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenTZClientPort.setDescription('Timezone client port. Default 65534')
mbnscNetGenConfigPort = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetGenConfigPort.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenConfigPort.setDescription('Configuration port. Default 65532')
mbnscNetGenSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetGenSnmpMode.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenSnmpMode.setDescription('SNMP mode disabled 0: SNMP enabled (default) 1: SNMP disabled')
mbnscNetGenMulticastMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetGenMulticastMode.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenMulticastMode.setDescription('Multicast mode disabled 0: Multicast enabled (default) 1: Multicast disabled')
mbnscNetGenHostname = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetGenHostname.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenHostname.setDescription('Host name of the device')
mbnscNetGenCommMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetGenCommMode.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenCommMode.setDescription('Communication / synchronisation mode 0=unicast 1=multicast (only for digital clocks)')
mbnscNetGenMCastGrpIP = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetGenMCastGrpIP.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenMCastGrpIP.setDescription('IP network address (xxx.xxx.xxx.xxx) of the multicast group IP e.g. 239.192.54.1 (only for digital clocks)')
mbnscNetGenConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetGenConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenConfigCmd.setDescription('Network configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscNetGenConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 1, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetGenConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscNetGenConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscNetIPv4 = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 2))
mbnscNetIPv4Addr = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv4Addr.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv4Addr.setDescription('IP network address (xxx.xxx.xxx.xxx) of the network slave clock')
mbnscNetIPv4Mask = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv4Mask.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv4Mask.setDescription('IP subnet mask (xxx.xxx.xxx.xxx)')
mbnscNetIPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv4Gateway.setDescription('IP network address (xxx.xxx.xxx.xxx) for the gateway')
mbnscNetIPv4DHCPMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv4DHCPMode.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv4DHCPMode.setDescription('DHCP mode 0: DHCP disabled 1: DHCP enabled (default)')
mbnscNetIPv4ConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 2, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv4ConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv4ConfigCmd.setDescription('Network configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscNetIPv4ConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 2, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetIPv4ConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv4ConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscNetIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3))
mbnscNetIPv6AddrLocal = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetIPv6AddrLocal.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6AddrLocal.setDescription('IP V6 link local network address (xxxx:xxxx::xxxx)')
mbnscNetIPv6AddrAuto = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetIPv6AddrAuto.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6AddrAuto.setDescription('IP V6 network address by autoconfig (xxxx:xxxx::xxxx)')
mbnscNetIPv6AddrDHCP = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetIPv6AddrDHCP.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6AddrDHCP.setDescription('IP V6 network address by DHCPv6 (xxxx:xxxx::xxxx)')
mbnscNetIPv6AddrFix = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 4), MOBANetworkName().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv6AddrFix.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6AddrFix.setDescription('IP V6 network address manual set (xxxx:xxxx::xxxx)')
mbnscNetIPv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv6Prefix.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6Prefix.setDescription('IPv6 subnet prefix for manual set IP address')
mbnscNetIPv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetIPv6Gateway.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6Gateway.setDescription('IP V6 network address of gateway (next hop) (xxxx:xxxx::xxxx)')
mbnscNetIPv6Config = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("both", 0), ("autoonly", 1), ("dhcpv6only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv6Config.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6Config.setDescription('Mode of IPv6 adress configuration 0: auto and fixed 1: autoconfig only 2: DHCPv6 only 3: none')
mbnscNetIPv6ConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNetIPv6ConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6ConfigCmd.setDescription('Network configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscNetIPv6ConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 1, 3, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNetIPv6ConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscNetIPv6ConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscTime = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2))
mbnscTimeNTP1 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscTimeNTP1.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeNTP1.setDescription('String with IPv4 or IPv6 address (192.168.3.4 or FD03:2345:2345:2345::231) or DNS name to get NTP time information.')
mbnscTimeNTP2 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscTimeNTP2.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeNTP2.setDescription('String with IPv4 or IPv6 address (192.168.3.4 or FD03:2345:2345:2345::231) or DNS name to get NTP time information.')
mbnscTimeNTP3 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscTimeNTP3.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeNTP3.setDescription('String with IPv4 or IPv6 address (192.168.3.4 or FD03:2345:2345:2345::231) or DNS name to get NTP time information.')
mbnscTimeNTP4 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscTimeNTP4.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeNTP4.setDescription('String with IPv4 or IPv6 address (192.168.3.4 or FD03:2345:2345:2345::231) or DNS name to get NTP time information.')
mbnscTimeNTPcurrent = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeNTPcurrent.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeNTPcurrent.setDescription('IPv4 or IPv6 address of current NTP server')
mbnscTimeNTPpollIntervall = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscTimeNTPpollIntervall.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeNTPpollIntervall.setDescription('NTP request intervall 10..999sec')
mbnscTimeDeviceTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 7), Unsigned32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeDeviceTime.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeDeviceTime.setDescription('Actual device time (UTC). Seconds since 1.1.1970 00:00:00')
mbnscTimeLocOffset = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 720))).setUnits('minutes (min)').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeLocOffset.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeLocOffset.setDescription('Offset to localt time in minutes (-720..720)')
mbnscTimeLastReception = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 9), Unsigned32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeLastReception.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeLastReception.setDescription('Last received time (UTC). Seconds since 1.1.1970 00:00:00')
mbnscTimeConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscTimeConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeConfigCmd.setDescription('Time configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscTimeConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 2, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3))
mbnscTimeZoneVersion = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneVersion.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneVersion.setDescription('Actual version internal time zone table')
mbnscTimeZoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscTimeZoneNumber.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneNumber.setDescription('Time zone 0: UTC 1..64: See user manual, time zone table 65..128: user defined time zone 129..143: time zone server 1..15 254: automatic time zone - e.g. UTC 255: internal user defined time zone (SET only used for digital clocks)')
mbnscTimeZoneEntry1 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneEntry1.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneEntry1.setDescription('Time Zone entry -> see special definition')
mbnscTimeZoneEntry2 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneEntry2.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneEntry2.setDescription('Time Zone entry -> see special definition')
mbnscTimeZoneEntry3 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneEntry3.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneEntry3.setDescription('Time Zone entry -> see special definition')
mbnscTimeZoneEntry4 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneEntry4.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneEntry4.setDescription('Time Zone entry -> see special definition')
mbnscTimeZoneEntry5 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneEntry5.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneEntry5.setDescription('Time Zone entry -> see special definition')
mbnscTimeZoneEntry6 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneEntry6.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneEntry6.setDescription('Time Zone entry -> see special definition')
mbnscTimeZoneEntry7 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneEntry7.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneEntry7.setDescription('Time Zone entry -> see special definition')
mbnscTimeZoneConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscTimeZoneConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneConfigCmd.setDescription('Time zone configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscTimeZoneConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 3, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscTimeZoneConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscTimeZoneConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscMode = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4))
mbnscModeSwitchInfo = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscModeSwitchInfo.setStatus('current')
if mibBuilder.loadTexts: mbnscModeSwitchInfo.setDescription('Current switch settings (only analogue movements)')
mbnscModeDisplayBrightness = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeDisplayBrightness.setStatus('current')
if mibBuilder.loadTexts: mbnscModeDisplayBrightness.setDescription('Display brightness for digital clocks 1..30, A (Auto)')
mbnscModeDisplayFormat = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeDisplayFormat.setStatus('current')
if mibBuilder.loadTexts: mbnscModeDisplayFormat.setDescription('Display format 12h/24h for digital clocks')
mbnscModeDisplayAlternate = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeDisplayAlternate.setStatus('current')
if mibBuilder.loadTexts: mbnscModeDisplayAlternate.setDescription('Display alternating mode for digital clocks 1: time continuously 2: date cont. 3: temperature cont. (sequence 6 sec. time, 3 sec. date for ECO-DC) 4: stopwatch cont. (only DC clock) 5: sequence 6 sec. time, 3 sec. date (only DC clock) 6: sequence 8 sec. time, 3 sec. date, 3 sec. temperature (only DC clock)')
mbnscModeNTP = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)))
if mibBuilder.loadTexts: mbnscModeNTP.setStatus('obsolete')
if mibBuilder.loadTexts: mbnscModeNTP.setDescription('NTP synchronisation mode for digital clocks')
mbnscModeIRlock = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeIRlock.setStatus('current')
if mibBuilder.loadTexts: mbnscModeIRlock.setDescription('IR autolock time for digital clocks (only DC clock) 1..60, U (autolock off)')
mbnscModeTimeDispZeros = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeTimeDispZeros.setStatus('current')
if mibBuilder.loadTexts: mbnscModeTimeDispZeros.setDescription('Leading zeros time display for digital clocks (only DC clock) 1: time with leading zero 2: time without leading zero')
mbnscModeDateDispZeros = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeDateDispZeros.setStatus('current')
if mibBuilder.loadTexts: mbnscModeDateDispZeros.setDescription('Leading zeros date display for digital clocks (only DC clock) 1: date with leading zero 2: date without leading zero')
mbnscModeTempUnit = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeTempUnit.setStatus('current')
if mibBuilder.loadTexts: mbnscModeTempUnit.setDescription('Temperature unit for digital clocks (only DC clock) C: Celsius F: Fahrenheit')
mbnscModeClockOpMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeClockOpMode.setStatus('current')
if mibBuilder.loadTexts: mbnscModeClockOpMode.setDescription('Operation mode for digital clocks (only DC clock) 0: normal mode 1: special mode 1 2: special mode 2')
mbnscModeNWParam = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)))
if mibBuilder.loadTexts: mbnscModeNWParam.setStatus('obsolete')
if mibBuilder.loadTexts: mbnscModeNWParam.setDescription('Network parameter setting mode for digital clocks')
mbnscModeDispDerating = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeDispDerating.setStatus('current')
if mibBuilder.loadTexts: mbnscModeDispDerating.setDescription('Display current deration setting for digital clocks (see service menu definition)')
mbnscModeLightCorr = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeLightCorr.setStatus('current')
if mibBuilder.loadTexts: mbnscModeLightCorr.setDescription('Light measurement correction for digital clocks (see service menu definition)')
mbnscAdditionalDigitalClockModes = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30))
mbnscSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 1))
mbnscSensorsTempActivation = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscSensorsTempActivation.setStatus('current')
if mibBuilder.loadTexts: mbnscSensorsTempActivation.setDescription('Temperature sensor activation 1: DS18B20 3: TME (only sensor 1) 4: TME (Sensors 1 and 2)')
mbnscSensorsTemp1IPAddr = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscSensorsTemp1IPAddr.setStatus('current')
if mibBuilder.loadTexts: mbnscSensorsTemp1IPAddr.setDescription('IP network address (xxx.xxx.xxx.xxx) of the sensor 1 (SET only used for digital clocks)')
mbnscSensorsTemp2IPAddr = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscSensorsTemp2IPAddr.setStatus('current')
if mibBuilder.loadTexts: mbnscSensorsTemp2IPAddr.setDescription('IP network address (xxx.xxx.xxx.xxx) of the sensor 2 (SET only used for digital clocks)')
mbnscSensorsConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscSensorsConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscSensorsConfigCmd.setDescription('Mode configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscSensorsConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 1, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscSensorsConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscSensorsConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscDA = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 2))
mbnscDASecondCircleDisplay = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDASecondCircleDisplay.setStatus('current')
if mibBuilder.loadTexts: mbnscDASecondCircleDisplay.setDescription('The second circle display mode 1: Accumulating ring of seconds marker 2: Take actual second from full shining circle step by step 3: Full shining circle, actual second off 4: Three shining seconds, the first is showing actual second 5: Two shining seconds, the first is showing actual second')
mbnscDAConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 2, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDAConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscDAConfigCmd.setDescription('Mode configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscDAConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 2, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscDAConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscDAConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscDK = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3))
mbnscDKFirstLanguage = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKFirstLanguage.setStatus('current')
if mibBuilder.loadTexts: mbnscDKFirstLanguage.setDescription('First language selection 1: Czech 2: Slovak 3: English 4: German 5: ... (see manual for full language list)')
mbnscDKSecondLanguage = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKSecondLanguage.setStatus('current')
if mibBuilder.loadTexts: mbnscDKSecondLanguage.setDescription('Second language selection 1: Czech 2: Slovak 3: English 4: German 5: ... (see manual for full language list)')
mbnscDKThirdLanguage = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKThirdLanguage.setStatus('current')
if mibBuilder.loadTexts: mbnscDKThirdLanguage.setDescription('Third language selection 1: Czech 2: Slovak 3: English 4: German 5: ... (see manual for full language list)')
mbnscDKTempUnitSecondLang = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKTempUnitSecondLang.setStatus('current')
if mibBuilder.loadTexts: mbnscDKTempUnitSecondLang.setDescription('Temperature units for second selected language C: Celsius F: Fahrenheit')
mbnscDKTempUnitThirdLang = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKTempUnitThirdLang.setStatus('current')
if mibBuilder.loadTexts: mbnscDKTempUnitThirdLang.setDescription('Temperature units for third selected language C: Celsius F: Fahrenheit')
mbnscDKAutoLangSwitchOver = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKAutoLangSwitchOver.setStatus('current')
if mibBuilder.loadTexts: mbnscDKAutoLangSwitchOver.setDescription('Language switch mode for automatic language switching over in one display alternating cycle A: all languages S: simple language')
mbnscDKNumOfCharsForWeekday = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKNumOfCharsForWeekday.setStatus('current')
if mibBuilder.loadTexts: mbnscDKNumOfCharsForWeekday.setDescription('Number of characters used for weekday names 2: two characters 3: three characters')
mbnscDKNamesFormatDisplay = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKNamesFormatDisplay.setStatus('current')
if mibBuilder.loadTexts: mbnscDKNamesFormatDisplay.setDescription('Weekday and month display format 1: first capital 2: all capitals')
mbnscDKTemp1DescriptEnable = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKTemp1DescriptEnable.setStatus('current')
if mibBuilder.loadTexts: mbnscDKTemp1DescriptEnable.setDescription('Display of description for first measured temperature N/Y')
mbnscDKTemp1Description = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKTemp1Description.setStatus('current')
if mibBuilder.loadTexts: mbnscDKTemp1Description.setDescription('Description text for first measured temperature')
mbnscDKTemp2DescriptEnable = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKTemp2DescriptEnable.setStatus('current')
if mibBuilder.loadTexts: mbnscDKTemp2DescriptEnable.setDescription('Display of description for second measured temperature N/Y')
mbnscDKTemp2Description = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKTemp2Description.setStatus('current')
if mibBuilder.loadTexts: mbnscDKTemp2Description.setDescription('Description text for second measured temperature')
mbnscDKWorldTimeZone1 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone1.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone1.setDescription('Index of time zone for world time zone 1 0: UTC 1..64: See user manual, time zone table 65..128: user defined time zone 129..143: time zone server 1..15 255: none (SET only used for digital clocks)')
mbnscDKWorldTimeZone1Description = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone1Description.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone1Description.setDescription('Description text for World time zone 1')
mbnscDKWorldTimeZone2 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone2.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone2.setDescription('Index of time zone for world time zone 2 0: UTC 1..64: See user manual, time zone table 65..128: user defined time zone 129..143: time zone server 1..15 255: none (SET only used for digital clocks)')
mbnscDKWorldTimeZone2Description = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone2Description.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone2Description.setDescription('Description text for World time zone 2')
mbnscDKWorldTimeZone3 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone3.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone3.setDescription('Index of time zone for world time zone 3 0: UTC 1..64: See user manual, time zone table 65..128: user defined time zone 129..143: time zone server 1..15 255: none (SET only used for digital clocks)')
mbnscDKWorldTimeZone3Description = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone3Description.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone3Description.setDescription('Description text for World time zone 3')
mbnscDKWorldTimeZone4 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone4.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone4.setDescription('Index of time zone for world time zone 4 0: UTC 1..64: See user manual, time zone table 65..128: user defined time zone 129..143: time zone server 1..15 255: none (SET only used for digital clocks)')
mbnscDKWorldTimeZone4Description = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone4Description.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone4Description.setDescription('Description text for World time zone 4')
mbnscDKWorldTimeZone5 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone5.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone5.setDescription('Index of time zone for world time zone 5 0: UTC 1..64: See user manual, time zone table 65..128: user defined time zone 129..143: time zone server 1..15 255: none (SET only used for digital clocks)')
mbnscDKWorldTimeZone5Description = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKWorldTimeZone5Description.setStatus('current')
if mibBuilder.loadTexts: mbnscDKWorldTimeZone5Description.setDescription('Description text for World time zone 5')
mbnscDKAutoTimeZoneSwitchOver = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKAutoTimeZoneSwitchOver.setStatus('current')
if mibBuilder.loadTexts: mbnscDKAutoTimeZoneSwitchOver.setDescription('World time switch mode for automatic time zone switching over in one display alternating cycle A: all world time zones S: simple world time zone')
mbnscDKConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscDKConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscDKConfigCmd.setDescription('Mode configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscDKConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 30, 3, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscDKConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscDKConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscModeConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscModeConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscModeConfigCmd.setDescription('Mode configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscModeConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscModeConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscModeConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscAdditionalInterfaceModes = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40))
mbnscNMI = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1))
mbnscNMIDCFCurrentLoop = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNMIDCFCurrentLoop.setStatus('current')
if mibBuilder.loadTexts: mbnscNMIDCFCurrentLoop.setDescription('Operation mode of the DCF77 current loop. 0: OFF 1: ON')
mbnscNMILineDriver = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("mobaline", 1), ("activdcf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNMILineDriver.setStatus('current')
if mibBuilder.loadTexts: mbnscNMILineDriver.setDescription('Operation mode of the line driver. 0: OFF 1: MOBALine 2: Active DCF')
mbnscNMIMOBALineMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("command12h", 1), ("clockidcommand", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNMIMOBALineMode.setStatus('current')
if mibBuilder.loadTexts: mbnscNMIMOBALineMode.setDescription('Operation mode of MOBALine. 0: normal operation 1: 12:00 mode, sideclocks shows 12:00 position 2: clock-id mode, sideclocks shows their ids if configured')
mbnscNMIMOBALineMinuteHandMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("minutestep", 0), ("halfminutestep", 1), ("continuous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNMIMOBALineMinuteHandMode.setStatus('current')
if mibBuilder.loadTexts: mbnscNMIMOBALineMinuteHandMode.setDescription('Minute hand mode operation of MOBALine. 0: minute step mode 1: half minute step mode 2: continuous mode')
mbnscNMIActiveDCFMode = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2), ("mode3", 3), ("mode4", 4), ("mode5", 5), ("mode6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNMIActiveDCFMode.setStatus('current')
if mibBuilder.loadTexts: mbnscNMIActiveDCFMode.setDescription('Operation mode of Active DCF. 1: Mode 1 2: Mode 2 3: Mode 3 4: Mode 4 5: Mode 5 6: Mode 6')
mbnscNMIConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscNMIConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscNMIConfigCmd.setDescription('General configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscNMIConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMIConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscNMIConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscNMISideClockState = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20))
mbnscNMISideClock1 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock1.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock1.setDescription('State of side clock 1 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock2 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock2.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock2.setDescription('State of side clock 2 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock3 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock3.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock3.setDescription('State of side clock 3 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock4 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock4.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock4.setDescription('State of side clock 4 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock5 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock5.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock5.setDescription('State of side clock 5 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock6 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock6.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock6.setDescription('State of side clock 6 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock7 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock7.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock7.setDescription('State of side clock 7 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock8 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock8.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock8.setDescription('State of side clock 8 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock9 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock9.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock9.setDescription('State of side clock 9 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock10 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock10.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock10.setDescription('State of side clock 10 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock11 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock11.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock11.setDescription('State of side clock 11 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscNMISideClock12 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 4, 40, 1, 20, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("notconfigured", 0), ("clockok", 3), ("clockerror", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscNMISideClock12.setStatus('current')
if mibBuilder.loadTexts: mbnscNMISideClock12.setDescription('State of side clock 12 0: Clock not configured 3: Clock OK 5: Clock error')
mbnscGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5))
mbnscGeneralType = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralType.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralType.setDescription('Network slave clock type 1 Network Clock Interface NCI 2 Wireless Time Distribution WTD 868-T 3 NTP movement SEN 00 4 NTP movement NBU 190 5 Digital Clock ECO-DC 6 Digital Clock DC3 7 NTP movement SEN 40 8 NTP movement SAN 40 9 NTP digital clock DA 10 NTP calendar digital clock DK2 11 Network MOBALine Interface NMI 12 NTP clock TREND 13 NTP clock TREND double sided 14 NTP in- and outdoor digital clock DSC')
mbnscGeneralName = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscGeneralName.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralName.setDescription('Device name (identifier)')
mbnscGeneralFirmwareNumber = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralFirmwareNumber.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralFirmwareNumber.setDescription('Article number of the firmware.')
mbnscGeneralFirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralFirmwareVer.setReference('OFS_PROD_FIRMW_VER, 27, VARTYPE_STRING')
if mibBuilder.loadTexts: mbnscGeneralFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralFirmwareVer.setDescription('Firmware version.')
mbnscGeneralStatus = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 5), MOBAFlags64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralStatus.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralStatus.setDescription('Network slave clock status (64bit). Internal state of the network slave clock. Used for maintenance only. Bit 00 : time ok Bit 01 : 12h position Bit 02 : Reserved Bit 03 : Reserved Bit 04 : Reserved Bit 05 : Reserved Bit 06 : Reserved Bit 07 : Reserved Bit 08 : Reserved Bit 09 : Reserved Bit 10 : Reserved Bit 11 : Reserved Bit 12 : Reserved Bit 13 : Reserved Bit 14 : Reserved Bit 15 : Reserved Bit 16 : Reserved Bit 17 : Reserved Bit 18 : Reserved Bit 19 : Reserved Bit 20 : Reserved Bit 21 : Reserved Bit 22 : Reserved Bit 23 : Reserved Bit 24 : Reserved Bit 25 : Reserved Bit 26 : Reserved Bit 27 : Reserved Bit 28 : Reserved Bit 29 : Reserved Bit 30 : Reserved Bit 31 : Reserved Bit32..63 not used')
mbnscGeneralAlarms = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 6), MOBAAlarm64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralAlarms.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralAlarms.setDescription('Alarm state of the network slave clock Bit00=Synchronization Bit01=Power supply Bit02=Slave (cascade) Bit03=Illumination Bit04=Hands position (sec) Bit05=Hands position (m/h) Bit06=Restart Bit07=CommError Bit08=Time zone Bit09=Reserved Bit10=Reserved Bit11=Reserved Bit12=Reserved Bit13=Reserved Bit14=Reserved Bit15=Reserved Bit16=Reserved Bit17=Reserved Bit18=Reserved Bit19=Reserved Bit20=Reserved Bit21=Reserved Bit22=Reserved Bit23=Reserved Bit24=Reserved Bit25=Reserved Bit26=Reserved Bit27=Reserved Bit28=Reserved Bit29=Reserved Bit30=Reserved Bit31=Reserved Bit32..Bit63=Device type specific error')
mbnscGeneralSlaveInfo1 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(26, 26)).setFixedLength(26)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralSlaveInfo1.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralSlaveInfo1.setDescription('Info from slave 1 Byte 0..5 MAC Byte 6..11 Slave local time Byte 12..17 SW-number Byte 18..21 SW-version Byte 22 state Byte 23 reserved Byte 24 error Byte 25 reserved')
mbnscGeneralSlaveInfo2 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(26, 26)).setFixedLength(26)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralSlaveInfo2.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralSlaveInfo2.setDescription('Info from slave 2 Byte 0..5 MAC Byte 6..11 Slave local time Byte 12..17 SW-number Byte 18..21 SW-version Byte 22 state Byte 23 reserved Byte 24 error Byte 25 reserved')
mbnscGeneralSlaveInfo3 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(26, 26)).setFixedLength(26)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralSlaveInfo3.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralSlaveInfo3.setDescription('Info from slave 3 Byte 0..5 MAC Byte 6..11 Slave local time Byte 12..17 SW-number Byte 18..21 SW-version Byte 22 state Byte 23 reserved Byte 24 error Byte 25 reserved')
mbnscGeneralConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscGeneralConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralConfigCmd.setDescription('General configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscGeneralConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 5, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscGeneralConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscGeneralConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscSupervision = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 6))
mbnscSNMPManager1 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscSNMPManager1.setStatus('current')
if mibBuilder.loadTexts: mbnscSNMPManager1.setDescription('String with IPv4 or IPv6 address (e.g 192.168.3.4 or FD03:2345:2345:2345::231) of the SNMP manager 1')
mbnscSNMPManager2 = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscSNMPManager2.setStatus('current')
if mibBuilder.loadTexts: mbnscSNMPManager2.setDescription('String with IPv4 or IPv6 address (e.g 192.168.3.4 or FD03:2345:2345:2345::231) of the SNMP manager 2')
mbnscSNMPTrapAliveMsgInterval = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 6, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1440), ))).setUnits('minutes (min)').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscSNMPTrapAliveMsgInterval.setStatus('current')
if mibBuilder.loadTexts: mbnscSNMPTrapAliveMsgInterval.setDescription('Time interval to send the alive message to the trap listener stations. 0: Alive message disabled >0: Alive message enabled Range: 1 ... 1440 minutes')
mbnscSNMPConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 6, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscSNMPConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscSNMPConfigCmd.setDescription('SNMP / supervision services configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscSNMPConfigChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 6, 101), TimeTicks()).setUnits('Time ticks in 1/100th seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscSNMPConfigChangedTime.setStatus('current')
if mibBuilder.loadTexts: mbnscSNMPConfigChangedTime.setDescription('Time of the last configuration change.')
mbnscCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 7))
mbnscCommand12Pos = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscCommand12Pos.setStatus('current')
if mibBuilder.loadTexts: mbnscCommand12Pos.setDescription('Mode of the analogue clock: 0=run, 1=12h position')
mbnscCommandSWReset = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 7, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscCommandSWReset.setStatus('current')
if mibBuilder.loadTexts: mbnscCommandSWReset.setDescription('Command SW reset if set to 1')
mbnscCommandFactorySetting = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 7, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscCommandFactorySetting.setStatus('current')
if mibBuilder.loadTexts: mbnscCommandFactorySetting.setDescription('Restore factory settings if set to 1')
mbnscCommandFirmwUpd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscCommandFirmwUpd.setStatus('current')
if mibBuilder.loadTexts: mbnscCommandFirmwUpd.setDescription('Command to start FW update')
mbnscCommandExtContact = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbnscCommandExtContact.setStatus('current')
if mibBuilder.loadTexts: mbnscCommandExtContact.setDescription('Set external contact')
mbnscCommandConfigCmd = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 7, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbnscCommandConfigCmd.setStatus('current')
if mibBuilder.loadTexts: mbnscCommandConfigCmd.setDescription('SNMP / supervision services configuration changed command variable. 0: Not defined 1: SNMP has changed the configuration (possible restart of device) 2: SNMP requests to restore the old configuration')
mbnscSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 9))
mbnscSnmpCurrentAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 9, 1))
mbnscTrapAlMsgErrorNr = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mbnscTrapAlMsgErrorNr.setStatus('current')
if mibBuilder.loadTexts: mbnscTrapAlMsgErrorNr.setDescription('Error number of the trap message.')
mbnscTrapAlMsgErrorState = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mbnscTrapAlMsgErrorState.setStatus('current')
if mibBuilder.loadTexts: mbnscTrapAlMsgErrorState.setDescription('Error state of the trap message.')
mbnscTrapAlMsgErrorTime = MibScalar((1, 3, 6, 1, 4, 1, 13842, 6, 2, 9, 1, 3), Unsigned32()).setUnits('Seconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mbnscTrapAlMsgErrorTime.setStatus('current')
if mibBuilder.loadTexts: mbnscTrapAlMsgErrorTime.setDescription('Error time of the trap message. Seconds since 1.1.1970 00:00:00')
mbnscTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 2, 10))
mbnscTrapsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13842, 6, 2, 10, 1)).setObjects(("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorNr"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorState"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorTime"))
if mibBuilder.loadTexts: mbnscTrapsAlarm.setStatus('current')
if mibBuilder.loadTexts: mbnscTrapsAlarm.setDescription('Alarm trap with attached (binded variables) alarm information. mbnscTrapAlMsgErrorNr, mbnscTrapAlMsgErrorState, mbnscTrapAlMsgErrorTime')
mbnscTrapsAlive = NotificationType((1, 3, 6, 1, 4, 1, 13842, 6, 2, 10, 2)).setObjects(("MOBANetClocksV2-MIB", "mbnscGeneralStatus"), ("MOBANetClocksV2-MIB", "mbnscGeneralAlarms"))
if mibBuilder.loadTexts: mbnscTrapsAlive.setStatus('current')
if mibBuilder.loadTexts: mbnscTrapsAlive.setDescription('Device alive trap. Will be send in the configured interval. Attached are the variables mbnscGeneralStatus and mbnscGeneralAlarms.')
mbnscMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 100, 1))
mbnscMIBCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 13842, 6, 100, 1, 1)).setObjects(("MOBANetClocksV2-MIB", "mbnscGrpNBU190"), ("MOBANetClocksV2-MIB", "mbnscGrpSEN40"), ("MOBANetClocksV2-MIB", "mbnscGrpDC"), ("MOBANetClocksV2-MIB", "mbnscGrpECODC"), ("MOBANetClocksV2-MIB", "mbnscGrpDA"), ("MOBANetClocksV2-MIB", "mbnscGrpDK"), ("MOBANetClocksV2-MIB", "mbnscGrpNMI"), ("MOBANetClocksV2-MIB", "mbnscGrpNotUsedParameters"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscMIBCompliances = mbnscMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: mbnscMIBCompliances.setDescription('Please replace this text with your description.')
mbnscMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2))
mbnscAllNotifications = NotificationGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 1)).setObjects(("MOBANetClocksV2-MIB", "mbnscTrapsAlarm"), ("MOBANetClocksV2-MIB", "mbnscTrapsAlive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscAllNotifications = mbnscAllNotifications.setStatus('current')
if mibBuilder.loadTexts: mbnscAllNotifications.setDescription('This automatically created notification group contains all notifications that do not belong to any other NOTIFICATION-GROUP')
mbnscGrpNBU190 = ObjectGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 2)).setObjects(("MOBANetClocksV2-MIB", "mbnscNetGenMAC"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPNameserver"), ("MOBANetClocksV2-MIB", "mbnscNetGenTZClientPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenSnmpMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMulticastMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenHostname"), ("MOBANetClocksV2-MIB", "mbnscNetGenCommMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMCastGrpIP"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Addr"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Mask"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4DHCPMode"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrLocal"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrAuto"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrDHCP"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrFix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Prefix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Config"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP1"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP2"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP3"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP4"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPcurrent"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPpollIntervall"), ("MOBANetClocksV2-MIB", "mbnscTimeDeviceTime"), ("MOBANetClocksV2-MIB", "mbnscTimeLocOffset"), ("MOBANetClocksV2-MIB", "mbnscTimeLastReception"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneVersion"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneNumber"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscModeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscModeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscGeneralType"), ("MOBANetClocksV2-MIB", "mbnscGeneralName"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareNumber"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareVer"), ("MOBANetClocksV2-MIB", "mbnscGeneralStatus"), ("MOBANetClocksV2-MIB", "mbnscGeneralAlarms"), ("MOBANetClocksV2-MIB", "mbnscGeneralSlaveInfo1"), ("MOBANetClocksV2-MIB", "mbnscGeneralSlaveInfo2"), ("MOBANetClocksV2-MIB", "mbnscGeneralSlaveInfo3"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager1"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager2"), ("MOBANetClocksV2-MIB", "mbnscSNMPTrapAliveMsgInterval"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscCommand12Pos"), ("MOBANetClocksV2-MIB", "mbnscCommandSWReset"), ("MOBANetClocksV2-MIB", "mbnscCommandConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorNr"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorState"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscGrpNBU190 = mbnscGrpNBU190.setStatus('current')
if mibBuilder.loadTexts: mbnscGrpNBU190.setDescription('All parameters used for NBU 190 movement')
mbnscGrpSEN40 = ObjectGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 3)).setObjects(("MOBANetClocksV2-MIB", "mbnscNetGenMAC"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPNameserver"), ("MOBANetClocksV2-MIB", "mbnscNetGenTZClientPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenSnmpMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMulticastMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenHostname"), ("MOBANetClocksV2-MIB", "mbnscNetGenCommMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMCastGrpIP"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Addr"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Mask"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4DHCPMode"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrLocal"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrAuto"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrDHCP"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrFix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Prefix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Config"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP1"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP2"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP3"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP4"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPcurrent"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPpollIntervall"), ("MOBANetClocksV2-MIB", "mbnscTimeDeviceTime"), ("MOBANetClocksV2-MIB", "mbnscTimeLocOffset"), ("MOBANetClocksV2-MIB", "mbnscTimeLastReception"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneVersion"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneNumber"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscModeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscModeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscGeneralType"), ("MOBANetClocksV2-MIB", "mbnscGeneralName"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareNumber"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareVer"), ("MOBANetClocksV2-MIB", "mbnscGeneralStatus"), ("MOBANetClocksV2-MIB", "mbnscGeneralAlarms"), ("MOBANetClocksV2-MIB", "mbnscGeneralSlaveInfo1"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager1"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager2"), ("MOBANetClocksV2-MIB", "mbnscSNMPTrapAliveMsgInterval"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscCommand12Pos"), ("MOBANetClocksV2-MIB", "mbnscCommandSWReset"), ("MOBANetClocksV2-MIB", "mbnscCommandConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorNr"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorState"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscGrpSEN40 = mbnscGrpSEN40.setStatus('current')
if mibBuilder.loadTexts: mbnscGrpSEN40.setDescription('All parameters used for SEN 40 movement')
mbnscGrpDC = ObjectGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 4)).setObjects(("MOBANetClocksV2-MIB", "mbnscNetGenMAC"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPNameserver"), ("MOBANetClocksV2-MIB", "mbnscNetGenTZClientPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenSnmpMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMulticastMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenHostname"), ("MOBANetClocksV2-MIB", "mbnscNetGenCommMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMCastGrpIP"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Addr"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Mask"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4DHCPMode"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrLocal"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrAuto"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrDHCP"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrFix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Prefix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Config"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP1"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP2"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP3"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP4"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPcurrent"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPpollIntervall"), ("MOBANetClocksV2-MIB", "mbnscTimeDeviceTime"), ("MOBANetClocksV2-MIB", "mbnscTimeLocOffset"), ("MOBANetClocksV2-MIB", "mbnscTimeLastReception"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneVersion"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneNumber"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayBrightness"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayFormat"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayAlternate"), ("MOBANetClocksV2-MIB", "mbnscModeIRlock"), ("MOBANetClocksV2-MIB", "mbnscModeTimeDispZeros"), ("MOBANetClocksV2-MIB", "mbnscModeDateDispZeros"), ("MOBANetClocksV2-MIB", "mbnscModeTempUnit"), ("MOBANetClocksV2-MIB", "mbnscModeClockOpMode"), ("MOBANetClocksV2-MIB", "mbnscModeDispDerating"), ("MOBANetClocksV2-MIB", "mbnscModeLightCorr"), ("MOBANetClocksV2-MIB", "mbnscModeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscModeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSensorsTempActivation"), ("MOBANetClocksV2-MIB", "mbnscSensorsTemp1IPAddr"), ("MOBANetClocksV2-MIB", "mbnscSensorsTemp2IPAddr"), ("MOBANetClocksV2-MIB", "mbnscSensorsConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSensorsConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscGeneralType"), ("MOBANetClocksV2-MIB", "mbnscGeneralName"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareNumber"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareVer"), ("MOBANetClocksV2-MIB", "mbnscGeneralStatus"), ("MOBANetClocksV2-MIB", "mbnscGeneralAlarms"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager1"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager2"), ("MOBANetClocksV2-MIB", "mbnscSNMPTrapAliveMsgInterval"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscCommandSWReset"), ("MOBANetClocksV2-MIB", "mbnscCommandConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorNr"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorState"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscGrpDC = mbnscGrpDC.setStatus('current')
if mibBuilder.loadTexts: mbnscGrpDC.setDescription('All parameters used for DC digital clock')
mbnscGrpECODC = ObjectGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 5)).setObjects(("MOBANetClocksV2-MIB", "mbnscNetGenMAC"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPNameserver"), ("MOBANetClocksV2-MIB", "mbnscNetGenTZClientPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenSnmpMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMulticastMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenHostname"), ("MOBANetClocksV2-MIB", "mbnscNetGenCommMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMCastGrpIP"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Addr"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Mask"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4DHCPMode"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrLocal"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrAuto"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrDHCP"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrFix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Prefix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Config"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP1"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP2"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP3"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP4"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPcurrent"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPpollIntervall"), ("MOBANetClocksV2-MIB", "mbnscTimeDeviceTime"), ("MOBANetClocksV2-MIB", "mbnscTimeLocOffset"), ("MOBANetClocksV2-MIB", "mbnscTimeLastReception"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneVersion"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneNumber"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayBrightness"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayFormat"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayAlternate"), ("MOBANetClocksV2-MIB", "mbnscModeDispDerating"), ("MOBANetClocksV2-MIB", "mbnscModeLightCorr"), ("MOBANetClocksV2-MIB", "mbnscModeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscModeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscGeneralType"), ("MOBANetClocksV2-MIB", "mbnscGeneralName"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareNumber"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareVer"), ("MOBANetClocksV2-MIB", "mbnscGeneralStatus"), ("MOBANetClocksV2-MIB", "mbnscGeneralAlarms"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager1"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager2"), ("MOBANetClocksV2-MIB", "mbnscSNMPTrapAliveMsgInterval"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscCommandSWReset"), ("MOBANetClocksV2-MIB", "mbnscCommandConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorNr"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorState"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscGrpECODC = mbnscGrpECODC.setStatus('current')
if mibBuilder.loadTexts: mbnscGrpECODC.setDescription('All parameters used for ECO DC digital clock')
mbnscGrpDA = ObjectGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 6)).setObjects(("MOBANetClocksV2-MIB", "mbnscNetGenMAC"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPNameserver"), ("MOBANetClocksV2-MIB", "mbnscNetGenTZClientPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenSnmpMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMulticastMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenHostname"), ("MOBANetClocksV2-MIB", "mbnscNetGenCommMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMCastGrpIP"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Addr"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Mask"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4DHCPMode"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrLocal"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrAuto"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrDHCP"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrFix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Prefix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Config"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP1"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP2"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP3"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP4"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPcurrent"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPpollIntervall"), ("MOBANetClocksV2-MIB", "mbnscTimeDeviceTime"), ("MOBANetClocksV2-MIB", "mbnscTimeLocOffset"), ("MOBANetClocksV2-MIB", "mbnscTimeLastReception"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneVersion"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneNumber"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayBrightness"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayFormat"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayAlternate"), ("MOBANetClocksV2-MIB", "mbnscModeIRlock"), ("MOBANetClocksV2-MIB", "mbnscModeTimeDispZeros"), ("MOBANetClocksV2-MIB", "mbnscModeDateDispZeros"), ("MOBANetClocksV2-MIB", "mbnscModeTempUnit"), ("MOBANetClocksV2-MIB", "mbnscModeClockOpMode"), ("MOBANetClocksV2-MIB", "mbnscModeDispDerating"), ("MOBANetClocksV2-MIB", "mbnscModeLightCorr"), ("MOBANetClocksV2-MIB", "mbnscModeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscModeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSensorsTempActivation"), ("MOBANetClocksV2-MIB", "mbnscSensorsTemp1IPAddr"), ("MOBANetClocksV2-MIB", "mbnscSensorsTemp2IPAddr"), ("MOBANetClocksV2-MIB", "mbnscSensorsConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSensorsConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscDASecondCircleDisplay"), ("MOBANetClocksV2-MIB", "mbnscDAConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscDAConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscGeneralType"), ("MOBANetClocksV2-MIB", "mbnscGeneralName"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareNumber"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareVer"), ("MOBANetClocksV2-MIB", "mbnscGeneralStatus"), ("MOBANetClocksV2-MIB", "mbnscGeneralAlarms"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager1"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager2"), ("MOBANetClocksV2-MIB", "mbnscSNMPTrapAliveMsgInterval"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscCommandSWReset"), ("MOBANetClocksV2-MIB", "mbnscCommandConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorNr"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorState"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscGrpDA = mbnscGrpDA.setStatus('current')
if mibBuilder.loadTexts: mbnscGrpDA.setDescription('All parameters used for DA digital clock')
mbnscGrpDK = ObjectGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 7)).setObjects(("MOBANetClocksV2-MIB", "mbnscNetGenMAC"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPNameserver"), ("MOBANetClocksV2-MIB", "mbnscNetGenTZClientPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenSnmpMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMulticastMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenHostname"), ("MOBANetClocksV2-MIB", "mbnscNetGenCommMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMCastGrpIP"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Addr"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Mask"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4DHCPMode"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrLocal"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrAuto"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrDHCP"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrFix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Prefix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Config"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP1"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP2"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP3"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP4"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPcurrent"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPpollIntervall"), ("MOBANetClocksV2-MIB", "mbnscTimeDeviceTime"), ("MOBANetClocksV2-MIB", "mbnscTimeLocOffset"), ("MOBANetClocksV2-MIB", "mbnscTimeLastReception"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneVersion"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneNumber"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayBrightness"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayFormat"), ("MOBANetClocksV2-MIB", "mbnscModeDisplayAlternate"), ("MOBANetClocksV2-MIB", "mbnscModeIRlock"), ("MOBANetClocksV2-MIB", "mbnscModeTimeDispZeros"), ("MOBANetClocksV2-MIB", "mbnscModeDateDispZeros"), ("MOBANetClocksV2-MIB", "mbnscModeTempUnit"), ("MOBANetClocksV2-MIB", "mbnscModeClockOpMode"), ("MOBANetClocksV2-MIB", "mbnscModeDispDerating"), ("MOBANetClocksV2-MIB", "mbnscModeLightCorr"), ("MOBANetClocksV2-MIB", "mbnscModeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscModeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSensorsTempActivation"), ("MOBANetClocksV2-MIB", "mbnscSensorsTemp1IPAddr"), ("MOBANetClocksV2-MIB", "mbnscSensorsTemp2IPAddr"), ("MOBANetClocksV2-MIB", "mbnscSensorsConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSensorsConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscDKFirstLanguage"), ("MOBANetClocksV2-MIB", "mbnscDKSecondLanguage"), ("MOBANetClocksV2-MIB", "mbnscDKThirdLanguage"), ("MOBANetClocksV2-MIB", "mbnscDKTempUnitSecondLang"), ("MOBANetClocksV2-MIB", "mbnscDKTempUnitThirdLang"), ("MOBANetClocksV2-MIB", "mbnscDKAutoLangSwitchOver"), ("MOBANetClocksV2-MIB", "mbnscDKNumOfCharsForWeekday"), ("MOBANetClocksV2-MIB", "mbnscDKNamesFormatDisplay"), ("MOBANetClocksV2-MIB", "mbnscDKTemp1DescriptEnable"), ("MOBANetClocksV2-MIB", "mbnscDKTemp1Description"), ("MOBANetClocksV2-MIB", "mbnscDKTemp2DescriptEnable"), ("MOBANetClocksV2-MIB", "mbnscDKTemp2Description"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone1"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone1Description"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone2"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone2Description"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone3"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone3Description"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone4"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone4Description"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone5"), ("MOBANetClocksV2-MIB", "mbnscDKWorldTimeZone5Description"), ("MOBANetClocksV2-MIB", "mbnscDKAutoTimeZoneSwitchOver"), ("MOBANetClocksV2-MIB", "mbnscDKConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscDKConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscGeneralType"), ("MOBANetClocksV2-MIB", "mbnscGeneralName"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareNumber"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareVer"), ("MOBANetClocksV2-MIB", "mbnscGeneralStatus"), ("MOBANetClocksV2-MIB", "mbnscGeneralAlarms"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager1"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager2"), ("MOBANetClocksV2-MIB", "mbnscSNMPTrapAliveMsgInterval"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscCommandSWReset"), ("MOBANetClocksV2-MIB", "mbnscCommandConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorNr"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorState"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscGrpDK = mbnscGrpDK.setStatus('current')
if mibBuilder.loadTexts: mbnscGrpDK.setDescription('All parameters used for DK digital clock')
mbnscGrpNMI = ObjectGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 8)).setObjects(("MOBANetClocksV2-MIB", "mbnscNetGenMAC"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenIPNameserver"), ("MOBANetClocksV2-MIB", "mbnscNetGenTZClientPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigPort"), ("MOBANetClocksV2-MIB", "mbnscNetGenSnmpMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMulticastMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenHostname"), ("MOBANetClocksV2-MIB", "mbnscNetGenCommMode"), ("MOBANetClocksV2-MIB", "mbnscNetGenMCastGrpIP"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetGenConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Addr"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Mask"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4DHCPMode"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv4ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrLocal"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrAuto"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrDHCP"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6AddrFix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Prefix"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Gateway"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6Config"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNetIPv6ConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP1"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP2"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP3"), ("MOBANetClocksV2-MIB", "mbnscTimeNTP4"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPcurrent"), ("MOBANetClocksV2-MIB", "mbnscTimeNTPpollIntervall"), ("MOBANetClocksV2-MIB", "mbnscTimeDeviceTime"), ("MOBANetClocksV2-MIB", "mbnscTimeLocOffset"), ("MOBANetClocksV2-MIB", "mbnscTimeLastReception"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneVersion"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneNumber"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscModeConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscModeConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNMIDCFCurrentLoop"), ("MOBANetClocksV2-MIB", "mbnscNMILineDriver"), ("MOBANetClocksV2-MIB", "mbnscNMIMOBALineMode"), ("MOBANetClocksV2-MIB", "mbnscNMIMOBALineMinuteHandMode"), ("MOBANetClocksV2-MIB", "mbnscNMIActiveDCFMode"), ("MOBANetClocksV2-MIB", "mbnscNMIConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscNMIConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock1"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock2"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock3"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock4"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock5"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock6"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock7"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock8"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock9"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock10"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock11"), ("MOBANetClocksV2-MIB", "mbnscNMISideClock12"), ("MOBANetClocksV2-MIB", "mbnscGeneralType"), ("MOBANetClocksV2-MIB", "mbnscGeneralName"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareNumber"), ("MOBANetClocksV2-MIB", "mbnscGeneralFirmwareVer"), ("MOBANetClocksV2-MIB", "mbnscGeneralStatus"), ("MOBANetClocksV2-MIB", "mbnscGeneralAlarms"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscGeneralConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager1"), ("MOBANetClocksV2-MIB", "mbnscSNMPManager2"), ("MOBANetClocksV2-MIB", "mbnscSNMPTrapAliveMsgInterval"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscSNMPConfigChangedTime"), ("MOBANetClocksV2-MIB", "mbnscCommand12Pos"), ("MOBANetClocksV2-MIB", "mbnscCommandSWReset"), ("MOBANetClocksV2-MIB", "mbnscCommandConfigCmd"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorNr"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorState"), ("MOBANetClocksV2-MIB", "mbnscTrapAlMsgErrorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscGrpNMI = mbnscGrpNMI.setStatus('current')
if mibBuilder.loadTexts: mbnscGrpNMI.setDescription('All parameters used for Network-MOBALine-Interface NMI')
mbnscGrpNotUsedParameters = ObjectGroup((1, 3, 6, 1, 4, 1, 13842, 6, 100, 2, 100)).setObjects(("MOBANetClocksV2-MIB", "mbnscTimeZoneEntry1"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneEntry2"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneEntry3"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneEntry4"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneEntry5"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneEntry6"), ("MOBANetClocksV2-MIB", "mbnscTimeZoneEntry7"), ("MOBANetClocksV2-MIB", "mbnscModeSwitchInfo"), ("MOBANetClocksV2-MIB", "mbnscCommandFactorySetting"), ("MOBANetClocksV2-MIB", "mbnscCommandFirmwUpd"), ("MOBANetClocksV2-MIB", "mbnscCommandExtContact"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbnscGrpNotUsedParameters = mbnscGrpNotUsedParameters.setStatus('current')
if mibBuilder.loadTexts: mbnscGrpNotUsedParameters.setDescription('All parameters not used in oother groups')
mibBuilder.exportSymbols("MOBANetClocksV2-MIB", mbnscTimeZoneEntry5=mbnscTimeZoneEntry5, mbnscDKTempUnitSecondLang=mbnscDKTempUnitSecondLang, mbnscTimeNTPpollIntervall=mbnscTimeNTPpollIntervall, mbnscSensors=mbnscSensors, mbnscTimeZoneEntry3=mbnscTimeZoneEntry3, mbnscTimeZoneConfigChangedTime=mbnscTimeZoneConfigChangedTime, mbnscModeTempUnit=mbnscModeTempUnit, mbnscTimeConfigChangedTime=mbnscTimeConfigChangedTime, mbnscDAConfigChangedTime=mbnscDAConfigChangedTime, mbnscNetGen=mbnscNetGen, mbnscNetIPv6ConfigCmd=mbnscNetIPv6ConfigCmd, mbnscNetGenMAC=mbnscNetGenMAC, mbnscNetIPv4Gateway=mbnscNetIPv4Gateway, mbnscCommandConfigCmd=mbnscCommandConfigCmd, mbnscTimeNTPcurrent=mbnscTimeNTPcurrent, mbnscTimeZoneEntry1=mbnscTimeZoneEntry1, mbnscModeNTP=mbnscModeNTP, mbnscDKAutoTimeZoneSwitchOver=mbnscDKAutoTimeZoneSwitchOver, mbnscNetIPv4DHCPMode=mbnscNetIPv4DHCPMode, mbnscNetIPv6ConfigChangedTime=mbnscNetIPv6ConfigChangedTime, mbnscDA=mbnscDA, mbnscGrpSEN40=mbnscGrpSEN40, mbnscTimeNTP3=mbnscTimeNTP3, mbnscNetGenTZClientPort=mbnscNetGenTZClientPort, mbnscNetGenMulticastMode=mbnscNetGenMulticastMode, mbnscSNMPConfigChangedTime=mbnscSNMPConfigChangedTime, mbnscTimeDeviceTime=mbnscTimeDeviceTime, mbnscNMISideClock10=mbnscNMISideClock10, mbnscDKConfigChangedTime=mbnscDKConfigChangedTime, mbnscNMISideClock4=mbnscNMISideClock4, mbnscGeneralFirmwareVer=mbnscGeneralFirmwareVer, mbnscCommand=mbnscCommand, mbnscTimeNTP2=mbnscTimeNTP2, mbnscTimeLocOffset=mbnscTimeLocOffset, mbnscDKWorldTimeZone1Description=mbnscDKWorldTimeZone1Description, mbnscNMISideClock3=mbnscNMISideClock3, mbnscGeneralConfigChangedTime=mbnscGeneralConfigChangedTime, mbnscNetIPv6AddrDHCP=mbnscNetIPv6AddrDHCP, mbnscSnmpConfig=mbnscSnmpConfig, mbnscGrpDC=mbnscGrpDC, mbnscNMIDCFCurrentLoop=mbnscNMIDCFCurrentLoop, mbnscDASecondCircleDisplay=mbnscDASecondCircleDisplay, mbnscDK=mbnscDK, mbnscNMIActiveDCFMode=mbnscNMIActiveDCFMode, mbnscCommand12Pos=mbnscCommand12Pos, mbnscNMIMOBALineMode=mbnscNMIMOBALineMode, mbnscNetIPv6AddrLocal=mbnscNetIPv6AddrLocal, mbnscAdditionalDigitalClockModes=mbnscAdditionalDigitalClockModes, mbnscDKWorldTimeZone2=mbnscDKWorldTimeZone2, mbnscTimeZone=mbnscTimeZone, mbnscSensorsConfigCmd=mbnscSensorsConfigCmd, mbnscModeDisplayAlternate=mbnscModeDisplayAlternate, mbnscNetGenIPMode=mbnscNetGenIPMode, mbnscTime=mbnscTime, mbnscMIBCompliances=mbnscMIBCompliances, mbnscDKTemp1Description=mbnscDKTemp1Description, mbnscSupervision=mbnscSupervision, mbnscNetIPv6AddrFix=mbnscNetIPv6AddrFix, mbnscMIBCompliance=mbnscMIBCompliance, mbnscGeneral=mbnscGeneral, mbnscGrpECODC=mbnscGrpECODC, mbnscModeDisplayFormat=mbnscModeDisplayFormat, mbnscModeIRlock=mbnscModeIRlock, mbnscGeneralStatus=mbnscGeneralStatus, mbnscNMISideClockState=mbnscNMISideClockState, mbnscDKWorldTimeZone2Description=mbnscDKWorldTimeZone2Description, mbnscModeTimeDispZeros=mbnscModeTimeDispZeros, MOBAAlarm64=MOBAAlarm64, mbnscAllNotifications=mbnscAllNotifications, mbnscCommandFirmwUpd=mbnscCommandFirmwUpd, mbnscMode=mbnscMode, mbnscDKWorldTimeZone5Description=mbnscDKWorldTimeZone5Description, mbnscDKWorldTimeZone1=mbnscDKWorldTimeZone1, mbnscNMILineDriver=mbnscNMILineDriver, mbnscTimeNTP4=mbnscTimeNTP4, mbnscNetGenHostname=mbnscNetGenHostname, PYSNMP_MODULE_ID=mbnscMIB, MOBAFlags64=MOBAFlags64, mbnscSensorsTemp2IPAddr=mbnscSensorsTemp2IPAddr, mbnscNMISideClock5=mbnscNMISideClock5, mbnscAdditionalInterfaceModes=mbnscAdditionalInterfaceModes, mbnscNetGenConfigPort=mbnscNetGenConfigPort, mbnscNetGenMCastGrpIP=mbnscNetGenMCastGrpIP, mbnscNetIPv6=mbnscNetIPv6, mbnscGeneralFirmwareNumber=mbnscGeneralFirmwareNumber, mbnscNetGenCommMode=mbnscNetGenCommMode, mbnscNetIPv6Prefix=mbnscNetIPv6Prefix, mbnscNMIMOBALineMinuteHandMode=mbnscNMIMOBALineMinuteHandMode, mbnscNMISideClock2=mbnscNMISideClock2, mbnscSNMPConfigCmd=mbnscSNMPConfigCmd, mbnscTimeNTP1=mbnscTimeNTP1, mbnscDKConfigCmd=mbnscDKConfigCmd, mbnscNMIConfigChangedTime=mbnscNMIConfigChangedTime, mbnscNetGenSnmpMode=mbnscNetGenSnmpMode, MOBANetworkName=MOBANetworkName, mbnscNetIPv6AddrAuto=mbnscNetIPv6AddrAuto, mbnscTrapAlMsgErrorState=mbnscTrapAlMsgErrorState, mbnscTimeZoneNumber=mbnscTimeZoneNumber, mbnscTimeZoneVersion=mbnscTimeZoneVersion, mbnscGrpNotUsedParameters=mbnscGrpNotUsedParameters, mbnscDKWorldTimeZone5=mbnscDKWorldTimeZone5, mbnscTrapAlMsgErrorTime=mbnscTrapAlMsgErrorTime, mbnscModeDisplayBrightness=mbnscModeDisplayBrightness, mbnscGeneralName=mbnscGeneralName, mbnscNMISideClock6=mbnscNMISideClock6, mbnscTrapsAlarm=mbnscTrapsAlarm, mbnscCommandFactorySetting=mbnscCommandFactorySetting, mbnscNetIPv4ConfigChangedTime=mbnscNetIPv4ConfigChangedTime, mbnscDKFirstLanguage=mbnscDKFirstLanguage, mbnscDKWorldTimeZone3=mbnscDKWorldTimeZone3, mbnscTrapAlMsgErrorNr=mbnscTrapAlMsgErrorNr, mbnscSensorsConfigChangedTime=mbnscSensorsConfigChangedTime, mbnscSensorsTempActivation=mbnscSensorsTempActivation, mbnscCommandSWReset=mbnscCommandSWReset, mbnscDKNamesFormatDisplay=mbnscDKNamesFormatDisplay, mbnscNetIPv4Addr=mbnscNetIPv4Addr, mobaNetClocks=mobaNetClocks, mbnscDKTempUnitThirdLang=mbnscDKTempUnitThirdLang, mbnscGeneralSlaveInfo1=mbnscGeneralSlaveInfo1, mbnscNMISideClock7=mbnscNMISideClock7, mbnscSNMPManager2=mbnscSNMPManager2, mbnscNMI=mbnscNMI, mobatime=mobatime, mbnscModeDateDispZeros=mbnscModeDateDispZeros, mbnscNMISideClock11=mbnscNMISideClock11, mbnscMIB=mbnscMIB, mbnscNetIPv4=mbnscNetIPv4, mbnscCommandExtContact=mbnscCommandExtContact, mbnscDKWorldTimeZone4=mbnscDKWorldTimeZone4, mbnscTimeZoneEntry6=mbnscTimeZoneEntry6, mbnscNetIPv6Config=mbnscNetIPv6Config, mbnscGeneralType=mbnscGeneralType, mbnscTimeConfigCmd=mbnscTimeConfigCmd, mbnscDKTemp2DescriptEnable=mbnscDKTemp2DescriptEnable, mbnscDKWorldTimeZone4Description=mbnscDKWorldTimeZone4Description, mbnscDAConfigCmd=mbnscDAConfigCmd, mbnscTimeZoneEntry2=mbnscTimeZoneEntry2, mbnscNMISideClock8=mbnscNMISideClock8, mbnscTrapsAlive=mbnscTrapsAlive, mbnscGeneralAlarms=mbnscGeneralAlarms, mbnscNetIPv4ConfigCmd=mbnscNetIPv4ConfigCmd, mbnscDKThirdLanguage=mbnscDKThirdLanguage, mbnscDKSecondLanguage=mbnscDKSecondLanguage, mbnscGeneralConfigCmd=mbnscGeneralConfigCmd, mbnscDKTemp2Description=mbnscDKTemp2Description, mbnscGeneralSlaveInfo2=mbnscGeneralSlaveInfo2, mbnscNetGenIPNameserver=mbnscNetGenIPNameserver, mbnscGrpDA=mbnscGrpDA, mbnscModeClockOpMode=mbnscModeClockOpMode, mbnscGrpNMI=mbnscGrpNMI, mbnscMIBGroups=mbnscMIBGroups, mbnscModeSwitchInfo=mbnscModeSwitchInfo, mbnscSNMPTrapAliveMsgInterval=mbnscSNMPTrapAliveMsgInterval, mbnscNetGenConfigCmd=mbnscNetGenConfigCmd, mbnscSNMPManager1=mbnscSNMPManager1, mbnscGeneralSlaveInfo3=mbnscGeneralSlaveInfo3, mbnscDKTemp1DescriptEnable=mbnscDKTemp1DescriptEnable, mbnscDKNumOfCharsForWeekday=mbnscDKNumOfCharsForWeekday, mbnscTimeZoneConfigCmd=mbnscTimeZoneConfigCmd, mbnscModeNWParam=mbnscModeNWParam, mbnscModeConfigChangedTime=mbnscModeConfigChangedTime, mbnscNet=mbnscNet, mbnscNMISideClock1=mbnscNMISideClock1, mbnscSnmpCurrentAlarmInfo=mbnscSnmpCurrentAlarmInfo, mbnscGrpNBU190=mbnscGrpNBU190, mbnscTimeLastReception=mbnscTimeLastReception, mbnscSensorsTemp1IPAddr=mbnscSensorsTemp1IPAddr, mbnscModeConfigCmd=mbnscModeConfigCmd, mbnscTraps=mbnscTraps, mbnscTimeZoneEntry7=mbnscTimeZoneEntry7, mobaNetClocksV2=mobaNetClocksV2, mbnscNetIPv4Mask=mbnscNetIPv4Mask, mbnscNetIPv6Gateway=mbnscNetIPv6Gateway, mbnscModeLightCorr=mbnscModeLightCorr, mbnscNMISideClock12=mbnscNMISideClock12, mbnscDKWorldTimeZone3Description=mbnscDKWorldTimeZone3Description, mbnscNMIConfigCmd=mbnscNMIConfigCmd, mbnscTimeZoneEntry4=mbnscTimeZoneEntry4, mbnscNMISideClock9=mbnscNMISideClock9, mbnscNetGenConfigChangedTime=mbnscNetGenConfigChangedTime, mbnscGrpDK=mbnscGrpDK, mbnscModeDispDerating=mbnscModeDispDerating, mbnscDKAutoLangSwitchOver=mbnscDKAutoLangSwitchOver)
