#
# PySNMP MIB module SNMP540-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNMP540-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:08:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dsu, = mibBuilder.importSymbols("DDS-MIB", "dsu")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, Counter32, Unsigned32, Counter64, ObjectIdentity, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, IpAddress, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Counter32", "Unsigned32", "Counter64", "ObjectIdentity", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "IpAddress", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snmp540 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4))
snmp540MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540MIBversion.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540MIBversion.setDescription("Identifies the version of the MIB. The format of the version is x.yzT, where 'x' identifies the major revision number, 'y'identifies the minor revision number, 'z' identifies the typographical revision, and T identifies the test revision. Acceptable values for the individual revision components are as follows x: 1 - 9 y: 0 - 9 z: 0 - 9 T: A - Z Upon formal release, no designation for the test revision will be present.")
snmp540Config = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 2))
snmp540ActivateCfg = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChange", 1), ("activateNewCfg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540ActivateCfg.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540ActivateCfg.setDescription('The Activate configuration object. The value noChange(1), will maintain the old dataset configuration without saving any changes. The value activateNewCfg(2), will activate the latest changes into the dataset configuration. No configuration changes will be activated until the activateNewCfg(2) is performed. Once activateNewCfg(2) is sent and acknowledged, the unit will modify its active configuration. The unit may temporarily be out of service until the activate has been completed. A set using noChange(1) value will cause the snmp540 to discard all unactivated changes.')
snmp540DtePortType = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540DtePortType.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540DtePortType.setDescription('The value auto(3) indicates that the electrical portion of the DTE interface is automatically detected. The rs232(1) value forces the DTE port to EIA/TIA-232-E, and v35(2) will force the DTE port to V.35.')
snmp540EiaTestControl = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3))
snmp540EiaRlcontrol = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540EiaRlcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540EiaRlcontrol.setDescription('The RL Eia Test control lead option. This option either allows or blocks EIA initiated test inputs from the DTE interface.')
snmp540EiaLlcontrol = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540EiaLlcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540EiaLlcontrol.setDescription('The LL Eia Test control lead option. This option either allows or blocks EIA initiated test inputs from the DTE interface.')
snmp540EiaTmcontrol = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540EiaTmcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540EiaTmcontrol.setDescription(' The Eia Test Mode lead option. This option controls the operation of the Test Mode output indication. A value of (1) allows the Test Mode output to indicate the snmp540 is in a test mode. A value of (2) will block all Test Mode lead indications.')
snmp540LlbDetect = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540LlbDetect.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LlbDetect.setDescription(' The Latching Loopback test detect option. This option controls the operation of the latching loopback detection. A value of (1) allows, the latching loopback test pattern will be detected. A value of (2) will block the detection of latching loopback pattern.')
snmp540Control = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 3))
snmp540UnitReset = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540UnitReset.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540UnitReset.setDescription('The value reset(2) will cause the snmp540 to perform a cold start. As soon as the object has been set to reset(2), the snmp540 will begin its reinitialization. A normal(1) set request will have no effect.')
snmp540AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4))
snmp540PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 1))
snmp540CfgChkSumErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 2))
snmp540StcLoopbackAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 3))
snmp540NoNtwkLoopCurrentAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 4))
snmp540LinePairsReversedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 5))
snmp540NoSignalAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 6))
snmp540FpTestAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 7))
snmp540DSRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 8))
snmp540DTRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 9))
snmp540DTPLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 10))
snmp540DCDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 11))
snmp540RXDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 12))
snmp540TXDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 13))
snmp540JitterAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 14))
snmp540BpvAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 15))
snmp540FrameLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 16))
snmp540SignalToNoiseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 17))
snmp540RxSignalLowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 4, 18))
snmp540AlarmCfgThr = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 5))
snmp540AlarmCfgCountWindow = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540AlarmCfgCountWindow.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540AlarmCfgCountWindow.setDescription('This is the DDS Alarm Threshold Interval. It specifies the amount of time, 1 to 15 minutes, in which the threshold setting is to be exceeded for the alarm to occur.')
snmp540AlarmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 2), )
if mibBuilder.loadTexts: snmp540AlarmCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540AlarmCfgTable.setDescription('The GDC snmp540 Alarm Configuration Table.')
snmp540AlarmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 2, 1), ).setIndexNames((0, "SNMP540-MGMT-MIB", "snmp540AlarmCfgIdentifier"))
if mibBuilder.loadTexts: snmp540AlarmCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540AlarmCfgEntry.setDescription('An entry in the snmp540 alarm table.')
snmp540AlarmCfgIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540AlarmCfgIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540AlarmCfgIdentifier.setDescription('The unique alarm identifier assigned to this alarm type. The format of this identifier is an OBJECT IDENTIFIER that has the following format: {iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) gdc(498) xxx(x) alarm(z) yyy(y) where xxx(x) is the administratively assigned family object identifier (z) is the object identifier for alarms in the family defined MIB and yyy(y) is the administratively assigned alarm type identifier for this alarm.')
snmp540AlarmCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540AlarmCfgThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540AlarmCfgThreshold.setDescription("This function sets/reads the alarm threshold settings criteria. This threshold is used along with the alarm window to determine the number of instances in a given time frame for an alarm to occur before the alarm is considered active. Alarm Table Entry Range Default ------- ---------------- --------- -------- Jitter snmp540JitterAlm 0 to 99% 10% BPV's snmp540BpvAlm 0 to 99Count 10 Frm Loss snmp540FrameLossAlm 0 to 99Count 10 SNRatio snmp540SignalToNoiseAlm 0 to 50 0 Rx Low snmp540RxSignalLowAlm -50 to 6db -30dB")
snmp540LineStats = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 6))
snmp540LineStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540LineStatsInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsInterval.setDescription('The DDS Line Statistics Interval specifies the amount of LineStats data to be reported. Measurements are stored every minute and accumulated. The latest 15 minutes(samples) of information are always available. The LineStatsInterval specifies the number of one minute sample intervals that will be accumulated and reported.')
snmp540LineStatsTxLevel = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsTxLevel.setDescription('Transmit level being generated into the private line circuit. This value is typically 6db.')
snmp540LineStatsRxInterpretation = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSignal", 1), ("notAvailable", 2), ("signalToNoiseNotMeasured", 3), ("allReadingsValid", 4), ("sToNRatioGreaterThanMeasured", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsRxInterpretation.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsRxInterpretation.setDescription('This object the characterizes LineStats readings. Interpretation code Meaning ..................... ........................... noSignal(1) No line signal is being received. notAvailable(2) Data is still being accumulated. signalToNoiseNotMeasured(3) S/N ratio not measured. allReadingsValid(4) All data reported is in range. sToNRatioGreaterThanMeasured(5) S/N ratio (greater) than the value reported in SignalToNoiseRatio.')
snmp540LineStatsRxLevel = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsRxLevel.setDescription('This object reports the receive level measurement for the selected interval. The range reported is from -50dB to +6dB.')
snmp540LineStatsSignalToNoiseRatio = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsSignalToNoiseRatio.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsSignalToNoiseRatio.setDescription('This object will the report the signal to noise ratio ranging from 0db to 50db for the selected interval. The value is absolute. If RxInterpretation reports sToNRatioGreaterThanMeasured, then the actual signal to noise ratio is better than the value reported here. If RxInterpretation reports signalToNoiseNotMeasured, the value reported here is meaningless.')
snmp540LineStatsSignalQuality = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("fair", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsSignalQuality.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsSignalQuality.setDescription('This object reports the signal quality of the line, for the selected interval.')
snmp540LineStatsJitter = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsJitter.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsJitter.setDescription('This object will the report the percent jitter of the line, for the selected interval.')
snmp540LineStatsBpvCount = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsBpvCount.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsBpvCount.setDescription('This object will the report the number of bipolar violation codes received during for the selected LineStatsInterval.')
snmp540LineStatsFrameLossCount = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LineStatsFrameLossCount.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LineStatsFrameLossCount.setDescription('This object will the report the number frame losses received for the selected LineStatsInterval.')
snmp540DiagTest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 7))
snmp540DiagTestPattern = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmp540Send511Pattern", 1), ("snmp540Send2047Pattern", 2), ("snmp540Send15BitPattern", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540DiagTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540DiagTestPattern.setDescription('The Self Test Pattern choices generated internally by the snmp540 are 511 Pattern (snmp540Send511Pattern(2)), 2047 pattern, (snmp540Send2047Pattern(3)) and 15 bit pattern, snmp540Send15BitPattern(4).')
snmp540DiagTestExceptions = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noExceptions", 1), ("bitsOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540DiagTestExceptions.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540DiagTestExceptions.setDescription('Indicates exceptions that have occurred that may affect interpretation of the test results. The exception values are: value exception: ....... ..................................... 1 All test results are valid. 2 snmp540DiagBitErrors has been exceeded.')
snmp540DiagBitErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540DiagBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540DiagBitErrors.setDescription('The bit errors of the most recently run diagnostic test. If TestExceptions reports bitsOutOfRange, this object should be ignored.')
snmp540DiagBlockErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540DiagBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540DiagBlockErrors.setDescription('The block errors of the most recently run diagnostic test.')
snmp540RlLoopType = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pn127", 1), ("v54", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540RlLoopType.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540RlLoopType.setDescription('The value Pn127(1), will use a PN127 loopback sequence to initiate a remote loopback test. The value v54(2) will use a V54 loopback sequence to initiate a remote loopback test.')
snmp540DiagBlocksToSend = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("blocks1", 1), ("blocks10", 2), ("blocks100", 3), ("blocks500", 4), ("blocks1000", 5), ("blocks5000", 6), ("blocks10000", 7), ("blocks50000", 8), ("external", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540DiagBlocksToSend.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540DiagBlocksToSend.setDescription('Specifies the number of test pattern blocks to generate during the test. The requested number of blocks are sent and checked during the test as a means of verifying circuit and/or unit integrity. Each block contains 1000 bits of test pattern. The external selection specifies that the test be invoked without any test pattern block generation. The external(9) disables the automatic test tear-down timer, and requires the use of an external Bit Error Rate Tester(BERT). !!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!! THE SNMP540 EXTERNAL(9) TEST SELECTION REQUIRES A POWER-UP RESET TO END THE TEST !!')
snmp540DiagControl = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTest", 1), ("lineloop", 2), ("remoteLoop", 3), ("resetTestToNorm", 4), ("telcoLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmp540DiagControl.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540DiagControl.setDescription('The lineloop(2) selection places the snmp540 into line loopback mode. The noTest(1) and telcoLoop(5) are READ ONLY values. NoTest(1) indicates that no diagnostic test is in progress. The value telcoLoop(5) will be reported when a DSU/CSU test is initiated by Telco. The value remoteLoop(3) is used initiate a remote loopback test. The value resetTestToNorm(4) will halt the execution of diagnostic test that may be running.')
snmp540Led = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 4, 8))
snmp540LedStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540LedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540LedStatus.setDescription('Returns a bitwise snapshot of the front panel LED state. Octet 1 bit 7 - not used bit 6 - NS -- No Signal bit 5 - SD -- Send Data bit 4 - RD -- Receive Data bit 3 - RS -- Request to Send bit 2 - CS -- Clear to Send bit 1 - CO -- Carrier bit 0 - TR -- Terminal Ready Octet 2 bit 7 - not used bit 6 - NORM -- bit 5 - TEST OK -- Test Ok bit 4 - DBU -- Dataset on DBU bit 3 - CO -- In-Band CO detected. bit 2 - DATA -- SNMP Diag Data bit 1 - RESP -- SNMP transmit Diag Data bit 0 - TEST -- Dataset in Test')
snmp540DeviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 4, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmp540DeviceSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snmp540DeviceSerialNumber.setDescription("Display's the unique serial number of this device. The octet string starts with the two byte product code (0540) followed by a reserved byte value (rr) and the date code (mm,dd,yy). The last two bytes is the manufactured unit count for the aforementioned date code(####). Example 0540rrMMddYY#### ")
mibBuilder.exportSymbols("SNMP540-MGMT-MIB", snmp540ActivateCfg=snmp540ActivateCfg, snmp540=snmp540, snmp540CfgChkSumErrAlm=snmp540CfgChkSumErrAlm, snmp540LineStatsInterval=snmp540LineStatsInterval, snmp540FpTestAlm=snmp540FpTestAlm, snmp540TXDLossAlm=snmp540TXDLossAlm, snmp540DTRLossAlm=snmp540DTRLossAlm, snmp540LineStatsBpvCount=snmp540LineStatsBpvCount, snmp540Control=snmp540Control, snmp540AlarmCfgCountWindow=snmp540AlarmCfgCountWindow, snmp540DtePortType=snmp540DtePortType, snmp540JitterAlm=snmp540JitterAlm, snmp540AlarmCfgIdentifier=snmp540AlarmCfgIdentifier, snmp540DiagBitErrors=snmp540DiagBitErrors, snmp540Led=snmp540Led, snmp540NoSignalAlm=snmp540NoSignalAlm, snmp540RxSignalLowAlm=snmp540RxSignalLowAlm, snmp540AlarmCfgThreshold=snmp540AlarmCfgThreshold, snmp540LinePairsReversedAlm=snmp540LinePairsReversedAlm, snmp540LlbDetect=snmp540LlbDetect, snmp540AlarmCfgTable=snmp540AlarmCfgTable, snmp540DiagBlocksToSend=snmp540DiagBlocksToSend, snmp540LedStatus=snmp540LedStatus, snmp540SignalToNoiseAlm=snmp540SignalToNoiseAlm, snmp540DSRLossAlm=snmp540DSRLossAlm, snmp540FrameLossAlm=snmp540FrameLossAlm, snmp540DTPLossAlm=snmp540DTPLossAlm, snmp540MIBversion=snmp540MIBversion, snmp540LineStatsFrameLossCount=snmp540LineStatsFrameLossCount, snmp540EiaRlcontrol=snmp540EiaRlcontrol, snmp540Config=snmp540Config, snmp540RXDLossAlm=snmp540RXDLossAlm, snmp540LineStatsSignalQuality=snmp540LineStatsSignalQuality, snmp540LineStatsRxLevel=snmp540LineStatsRxLevel, snmp540DiagBlockErrors=snmp540DiagBlockErrors, snmp540UnitReset=snmp540UnitReset, snmp540DeviceSerialNumber=snmp540DeviceSerialNumber, snmp540EiaTmcontrol=snmp540EiaTmcontrol, snmp540AlarmData=snmp540AlarmData, snmp540LineStatsSignalToNoiseRatio=snmp540LineStatsSignalToNoiseRatio, snmp540LineStatsTxLevel=snmp540LineStatsTxLevel, snmp540AlarmCfgEntry=snmp540AlarmCfgEntry, snmp540LineStats=snmp540LineStats, snmp540LineStatsRxInterpretation=snmp540LineStatsRxInterpretation, snmp540RlLoopType=snmp540RlLoopType, snmp540LineStatsJitter=snmp540LineStatsJitter, snmp540DiagTest=snmp540DiagTest, snmp540PowerUpAlm=snmp540PowerUpAlm, snmp540StcLoopbackAlm=snmp540StcLoopbackAlm, snmp540EiaLlcontrol=snmp540EiaLlcontrol, snmp540DCDLossAlm=snmp540DCDLossAlm, snmp540NoNtwkLoopCurrentAlm=snmp540NoNtwkLoopCurrentAlm, snmp540DiagTestExceptions=snmp540DiagTestExceptions, snmp540DiagTestPattern=snmp540DiagTestPattern, snmp540BpvAlm=snmp540BpvAlm, snmp540DiagControl=snmp540DiagControl, snmp540AlarmCfgThr=snmp540AlarmCfgThr, snmp540EiaTestControl=snmp540EiaTestControl)
