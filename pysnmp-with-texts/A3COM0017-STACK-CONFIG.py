#
# PySNMP MIB module A3COM0017-STACK-CONFIG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM0017-STACK-CONFIG
# Produced by pysmi-0.3.4 at Wed May  1 11:08:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
superStackIIconfig, = mibBuilder.importSymbols("A3COM0004-GENERIC", "superStackIIconfig")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, IpAddress, TimeTicks, Counter64, Gauge32, Unsigned32, ModuleIdentity, ObjectIdentity, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "IpAddress", "TimeTicks", "Counter64", "Gauge32", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Bits", "NotificationType")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
stackConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 27, 1))
stackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1), )
if mibBuilder.loadTexts: stackConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: stackConfigTable.setDescription('')
stackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1), ).setIndexNames((0, "A3COM0017-STACK-CONFIG", "stackUnitLocation"))
if mibBuilder.loadTexts: stackConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: stackConfigEntry.setDescription('')
stackUnitLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: stackUnitLocation.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitLocation.setDescription('Used to identify individual units in the stack. Note that this value will usually be contiguous, but that gaps may be present due, for example, to unpowered units.')
stackUnitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitAddress.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitAddress.setDescription('Every conformant unit in the SuperStack II system will have a unique physical (MAC) address by which it can be recognised. Note that the location index on this table can change if a unit is inserted into the stack and so the location can not be used to uniquely identify a location. Instead an application should refer to units by their physical address.')
stackUnitLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitLastReset.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitLastReset.setDescription('This is the time in hundredths of a second, since this unit last reset (ie that units concept of sysUpTime). Note that if a unit is not operational then this object will report zero (0).')
stackUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitType.setDescription('This is an integer type identifier for this unit. The values of this integer are administered by allocating a MIB object identifier for each type of unit from a common branch. The value of this object is then the last level in that identifier. The values are defined in this MIB module. Note that the values are unlikely to be contiguous. Note that if a type value is not available for this unit then this object will return zero. There are several reasons why this value may not be available through this view of the MIB. One reason may be that the device is not currently active (dead) or that the information is only available through the units own agent (see stackUnitManagementType) .')
stackUnitDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitDesc.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitDesc.setDescription('This is a text string which describes this unit. If a unit cannot provide a name then the value of this object will be an empty string.')
stackUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitName.setDescription('This is a simple text string which can be used by an application to assign a text name to a unit. By default this string is empty. If a management application writes a text string to this object the device will store the string in non-volatile storage.')
stackUnitState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unitStateUnknown", 1), ("unitInactive", 2), ("unitOperational", 3), ("unitLoading", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitState.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitState.setDescription("This object represents the best known state of a unit in the stack. The unknown state is not expected to be used, but may exist because of loosely integrated components in the stack. Management applications MUST EXPECT to see the 'unknown' value. The other states are as follows: unitInactive: The device has failed to respond send out periodic update messages, but it still appears to be in the stack. unitOperational: The unit is sending our periodic identification messages and indicates that it is operational, running its complete image. unitLoading: The unit is running is a special operational mode which means that it is unmanaged while it loads a new operational code image. Note that if the stack ever contains units which can download an operational image while still being fully managed then this variable will report 'unitOperational'.")
stackUnitManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("distributed", 2), ("intelligent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitManagementType.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitManagementType.setDescription('This object can be used to determine the management method used to access the agent in this unit. The options are: unknown: The unit has not reported any management capability. It is either faulty or a non-conformant device. distributed: This unit can be managed using the SuperStackII distributed management architecture and so is managed through this agent. The unit may or may not have an active comms stack. If it has then the addresses for that agent can be determined from the address table. intelligent: The unit has its own SNMP agent which is accessed seperately. The agent is not part of the SSII distributed management architecture.')
stackUnitCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitCapabilities.setDescription("This object describes the capabilities of this particular unit. This is used in conjunction with the upgrade level of the stack to enable a management application to correctly enable and disable the various features of the application depending on the capabilities of the unit. The object is an octet string, where each octet represents a capability of the unit. Different capabilities will be added to the list as required. The current list of values is: 0x01 Full RMON 0x02 3Com Proprietary Resilience MIB 0x03 3Com Repeater Security MIB 0x04 PSHub Port Switching 0x05 PSHub Capability Upgrade Facility 0x06 Dual Speed Hub Capability Upgrade Facility 0x07 TelNet 0x08 Web 0x14 SMA Resource Allocator 0x15 SMA Distributed SNMP 0x16 SMA Global Variables 0x17 SMA Licence Server 0x18 PSHub Cascade Switch 0x19 PSH Load Balancing So, for example, if a unit has a value of '02 03' for this object then it supports repeater resilience and security, but no other features such as RMON.")
stackUnitPromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitPromVersion.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitPromVersion.setDescription('This is the version number of the PROM on the unit. If the unit has no PROM, does not correctly report the PROM version or is currently non-operational then this object will return an empty string.')
stackUnitHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitHWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitHWVersion.setDescription('This is the hardware version of this unit, expressed as a string. Note that if the hardware version is not available for this particular unit then the version string will be empty.')
stackUnitSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitSWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitSWVersion.setDescription('This is the software version number of this unit. The software version number is a string. Note that if a unit does not make its version number information available, or the unit has no software, then this object will report an empty string.')
stackUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitSerialNumber.setDescription('This is the serial number for this unit. The number is globally unique and expressed as a textual string.')
stackUnitAttention = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAttention", 1), ("attention", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackUnitAttention.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitAttention.setDescription("Some of the units in the stack will contain a mechanism for drawing attention to that unit. This is useful for directing maintainance personnel. The method often employed is for a special LED, or by placing some other LED into a flashing state. This object gives access to the attention mechanism for a unit. Note that if a unit does not support this mechanism then reading the value of this object will return 'no-such-name' error. The possible values for an instance of this object which does exist is 'noAttention' or 'attention'.")
stackUnitMgmtInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitMgmtInterface.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitMgmtInterface.setDescription("If a unit in the stack participates in the distributed SNMP stack then it will have an instance of this object (stackUnitManagementType = 'distributed'). The object points to the entry in the interface table which represents the potential management interface for this unit. That is the index to use in the extIfTable for this device. Note that if the value of this object is zero, or the result of reading this object is NO-SUCH-NAME then there is no management interface available on that unit.")
stackUnitSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitSummary.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitSummary.setDescription('This object provides a summary of this units configuration in order to improve the performance of the management applications. The information in this object is represented as a list of items, each item is a type-length-value triplet which will have a basic encoding. The information encoded in this string will be determined by the requirements of the management applications. It is expected that the following information will be compressed into this object for a repeater device: Unit type Number of ports Array of port information including: media type, link state, partition state.')
stackUnitSlipMgmtInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitSlipMgmtInterface.setStatus('mandatory')
if mibBuilder.loadTexts: stackUnitSlipMgmtInterface.setDescription("If a unit in the stack participates in the distributed SNMP stack then it will have an instance of this object (stackUnitManagementType = 'distributed'). The object points to the entry in the interface table which represents the potential SLIP (serial port) management interface for this unit. That is the index to use in the extIfTable for this device. Note that if the value of this object is zero, or the result of reading this object is NO-SUCH-NAME then there is no SLIP access port available on that unit.")
stackAddressInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 27, 2))
stackAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1), )
if mibBuilder.loadTexts: stackAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: stackAddressTable.setDescription("This table contains entries for units in the stack which have active inband communications stacks. The table comprises of a set of entries for each unit, each entry representing a single address. Note that the address information in this table cannot be changed! This table is required specifically for those units which execute their own SNMP agents without taking part in the Arnie co-operative agent. Ie, the only devices for which there will be an entry in this table are those for which the stackUnitManagementType is 'Intelligent'.")
stackAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1, 1), ).setIndexNames((0, "A3COM0017-STACK-CONFIG", "stackUnitLocation"), (0, "A3COM0017-STACK-CONFIG", "stackAddressNumber"))
if mibBuilder.loadTexts: stackAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: stackAddressEntry.setDescription('')
stackAddressNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackAddressNumber.setStatus('mandatory')
if mibBuilder.loadTexts: stackAddressNumber.setDescription('This identifies one of a number of different addresses for this unit. This is a second index column for this table, the first being the unit number shared with the stackConfigTable (stackUnitLocatio n).')
stackAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipAddress", 1), ("ipxAddress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: stackAddressType.setDescription('')
stackAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackAddress.setStatus('mandatory')
if mibBuilder.loadTexts: stackAddress.setDescription('The address.')
stackSysObjIdentities = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 27, 4))
stackUnitTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 27, 5))
mibBuilder.exportSymbols("A3COM0017-STACK-CONFIG", stackUnitSWVersion=stackUnitSWVersion, stackAddress=stackAddress, stackConfiguration=stackConfiguration, stackUnitPromVersion=stackUnitPromVersion, stackAddressInformation=stackAddressInformation, stackUnitSummary=stackUnitSummary, stackAddressNumber=stackAddressNumber, stackAddressEntry=stackAddressEntry, stackUnitState=stackUnitState, stackUnitType=stackUnitType, stackUnitCapabilities=stackUnitCapabilities, stackAddressType=stackAddressType, stackUnitSerialNumber=stackUnitSerialNumber, stackUnitManagementType=stackUnitManagementType, stackUnitMgmtInterface=stackUnitMgmtInterface, stackUnitSlipMgmtInterface=stackUnitSlipMgmtInterface, stackUnitDesc=stackUnitDesc, stackUnitLocation=stackUnitLocation, stackSysObjIdentities=stackSysObjIdentities, stackConfigEntry=stackConfigEntry, stackConfigTable=stackConfigTable, stackUnitLastReset=stackUnitLastReset, stackUnitHWVersion=stackUnitHWVersion, stackUnitTypes=stackUnitTypes, stackUnitAttention=stackUnitAttention, stackUnitName=stackUnitName, stackUnitAddress=stackUnitAddress, stackAddressTable=stackAddressTable)
