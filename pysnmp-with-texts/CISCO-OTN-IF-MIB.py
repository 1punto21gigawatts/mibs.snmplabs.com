#
# PySNMP MIB module CISCO-OTN-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OTN-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:09:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifName, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, Counter64, NotificationType, IpAddress, ModuleIdentity, Integer32, Bits, ObjectIdentity, MibIdentifier, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "NotificationType", "IpAddress", "ModuleIdentity", "Integer32", "Bits", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32")
StorageType, DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
ciscoOtnIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 639))
ciscoOtnIfMIB.setRevisions(('2016-05-25 00:00', '2011-01-24 00:00', '2008-09-11 00:00', '2007-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoOtnIfMIB.setRevisionsDescriptions(('Added Objects in- 1. coiFECIntervalTable - coiFECIntervalPreFECMin, coiFECIntervalPreFECMax, coiFECIntervalPreFECAvg, coiFECIntervalPostFECMin, coiFECIntervalPostFECMax, coiFECIntervalPostFECAvg, coiFECIntervalQFactorMin, coiFECIntervalQFactorMax, coiFECIntervalQFactorAvg, coiFECIntervalQMarginMin, coiFECIntervalQMarginMax, coiFECIntervalQMarginAvg 2. coiFECCurrentTable - coiFECCurrentPreFECMin, coiFECCurrentPreFECMax, coiFECCurrentPreFECAvg, coiFECCurrentPostFECMin, coiFECCurrentPostFECMax, coiFECCurrentPostFECAvg, coiFECCurrentQFactorMin, coiFECCurrentQFactorMax, coiFECCurrentQFactorAvg, coiFECCurrentQMarginMin, coiFECCurrentQMarginMax, coiFECCurrentQMarginAvg 3. Added FEC Modes to the existing coiIfControllerFECMode object in coiIfControllerTable. enableEnhancedI4(4), enableEnhancedI7(5), enableHighGain(6), enableLongHaul(7), enableEnhancedSD7(8), enableEnhancedSD20(9) 4. Extend CoiIntervalType to include thirtySecond. 5. Import SnmpAdminString FROM SNMP-FRAMEWORK-MIB.', '1. Added a new defect status AIS in object coiOtnIfODUStatus. 2. Changed the description for objects coiOtnIfOTUStatus and coiOtnIfODUStatus in coiIfControllerTable.', '1. Added two new notifications coiOtnIfOTUStatusChange and coiOtnIfODUStatusChange. 2. Added a new scalar objects coiOtnIfNotifEnabled and two new objects coiOtnIfOTUStatus and coiOtnIfODUStatus in the table coiIfControllerTable', 'The initial revision of this MIB.',))
if mibBuilder.loadTexts: ciscoOtnIfMIB.setLastUpdated('201605250000Z')
if mibBuilder.loadTexts: ciscoOtnIfMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoOtnIfMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dwdm-mibs@cisco.com')
if mibBuilder.loadTexts: ciscoOtnIfMIB.setDescription('This MIB module defines the managed objects for physical layer characteristics of DWDM optical channel interfaces and performance statistics objects for protocol specific error counters in DWDM optical devices. Performance monitoring (PM) parameters are used by service providers to gather, store, set thresholds for and report performance data for early detection of problems. Thresholds are used to set error levels for each PM parameter. During the accumulation cycle, if the current value of a performance monitoring parameter reaches or exceeds its corresponding threshold value, a threshold crossing alarm (TCA) is generated. The TCAs provide early detection of performance degradation. The definitions contained herein are based on the OTN specifications in ITU-T G.872[ITU-T G.872], G.709 [ITU-T G.709], G.798[ITU-T G.798], G.874[ITU-T G.874], and G.874.1[ITU-T G.874.1]. Glossary: OTN : Optical Transport Network (ITU-T G.709). FEC : Forward Error Correction. PM : Performance Monitor. DWDM : Dense Wavelength Division Multiplexing. FE : Farend or client side of the interface. NE : Nearend or trunk side of the interface. ADM : Add Drop Multiplexer. OCH : Optical Channel. OTS : Optical Transport Section. OMS : Optical Multiplex Section. TCA : Threshold Crossing Alarm. OSC : Optical Supervisory Channel. DCU : Dispersion Compensation Unit. EXP : Express Channel. OSNR : Optical singal to noise ratio. OTU : Optical Channel Transport Unit. ODU : Optical Channel Data Unit.')
class CoiIntervalType(TextualConvention, Integer32):
    description = 'This value indicates the time period over which performance monitoring data has been collected. Valid values are - fifteenMin(1) - values for the 15 min interval. oneDay(2) - values for the 1 Day interval. thirtySecond(3)- values for the 30 Second interval'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("fifteenMin", 1), ("oneDay", 2), ("thirtySecond", 3))

class CoiMonitorType(TextualConvention, Integer32):
    description = 'This value indicates the part of the optical network in which the performance statistics is being monitored. Valid values are - path(1) - Performance statistics for path parameters. section(2) - Performance statistics for section parameters. tcm1(3) - Performance statistics for tandem connection monitoring 1. tcm2(4) - Performance statistics for tandem connection monitoring 2.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("path", 1), ("section", 2), ("tcm1", 3), ("tcm2", 4))

class CoiOtnThresholdType(TextualConvention, Integer32):
    reference = 'ITU - T Recommendation G.8201 - Error performance parameters and objectives for multi-operator international paths within the Optical Transport Network (OTN). ITU - T Recommendation M.2140: Transport network event correlation. ITU - T Recommendation G.826 - End-to-end error performance parameters and objectives for international constant bit-rate digital paths and connections.'
    description = 'This value indicates the type of OTN Error Thresholds that can be defined. Valid values are - fc(1) - Failure Counts. es(2) - Errored Seconds. ses(3) - Severely Errored Seconds. uas(4) - Unavailable Seconds. bbe(5) - Bit Block Errors. esr(6) - Error Seconds Ratio. sesr(7) - Severely Errored Seconds Ratio. bber(8) - Background Block Errored Seconds Ratio.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("fc", 1), ("es", 2), ("ses", 3), ("uas", 4), ("bbe", 5), ("esr", 6), ("sesr", 7), ("bber", 8))

class CoiOpticalWavelength(TextualConvention, Unsigned32):
    reference = 'ITU - T Recommendation G.694.1 - Spectral grids for WDM applications: DWDM frequency grid, May 2002'
    description = 'This value represents the wavelength of optical signals in a DWDM optical channel. It is represented in units of picometers. A value of zero either indicates that the wavelength is unknown, or that it does not fall under the frequency grid defined in ITU-T G.694.1'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1528770, 1604030), )
ciscoOtnIfMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 0))
ciscoOtnIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 1))
coiDwdmInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1))
coiDwdmIfOtn = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2))
coiDwdmIfFEC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3))
coiIfControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1), )
if mibBuilder.loadTexts: coiIfControllerTable.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerTable.setDescription('This table provides management information for physical layer related attributes of interfaces with an ifType of opticalChannel(195).')
coiIfControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coiIfControllerEntry.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerEntry.setDescription('An entry containing management information on physical layer related attributes of interfaces with an ifType opticalChannel(195). Entries are created by the agent when a new interface is added to the ifTable. Entries are deleted by the agent when an interface is removed from the ifTable.')
coiIfControllerLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("otherLoop", 2), ("diagnosticLoop", 3), ("lineLoop", 4))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerLoopback.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerLoopback.setDescription("This object is used to configure the loopback mode of the interface. valid values are - 'noLoop' - No Loopback present. 'otherLoop' - A loopback of type other than rest of types defined in this enumeration. 'diagnosticLoop' - This is an internal loopback, where the data stream is looped from the transmit to receive section. It is used for hardware debug, bring-up and diagnostics. 'lineLoop' - In this mode, the receive data stream is looped back to the transmit side.")
coiIfControllerWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 2), CoiOpticalWavelength().clone(1529553)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerWavelength.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerWavelength.setDescription('This object is used to configure the wavelength of operation on applicable optical channel interfaces.')
coiIfControllerLaserAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerLaserAdminStatus.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerLaserAdminStatus.setDescription("This object is used to configure laser status on applicable interfaces. when it is set to down(2), it results in traffic drop and there should be corresponding change in coiIfControllerLaserOperStatus. Valid values are - 'up' - Turn on the Laser 'down' - shutdown the Laser.")
coiIfControllerLaserOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerLaserOperStatus.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerLaserOperStatus.setDescription("This object gives the current operational state of the Laser. Valid values are - 'up' - The laser is operational. 'down' - The laser is not operational. if coiIfControllerLaserAdminStatus is down(2) then coiIfControllerLaserOperStatus should be down(2). If coiIfControllerLaserAdminStatus is changed to up(1) then coiIfControllerLaserOperStatus should change to up(1), provided the laser is operational and ready to transmit traffic. It should remain in down(2) if there is a fault that prevents it from going to the up(1) state.")
coiIfControllerOtnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerOtnStatus.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerOtnStatus.setDescription("This object allows the management client to enable the OTN (ITU-T G.709) framing on applicable interfaces of ifType opticalChannel(195). Valid values are - 'true' - Enables OTN (ITU-T g.709) framing on the interface. 'false' - Disables OTN (ITU-T g.709 framing on the interface. Setting a value of 'false' to coiIfControllerOtnStatus would result in loss of traffic.")
coiIfControllerFECMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disable", 1), ("enableStandard", 2), ("enableEnhanced", 3), ("enableEnhancedI4", 4), ("enableEnhancedI7", 5), ("enableHighGain", 6), ("enableLongHaul", 7), ("enableEnhancedSD7", 8), ("enableEnhancedSD20", 9))).clone('enableEnhanced')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerFECMode.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerFECMode.setDescription("This object allows the management client to enable FEC ( Forward Error Correction ) on applicable interfaces. FEC is a technique that improves digital channel quality through the addition of redundant data at the sending node. This redundant data is decoded at the receiver to detect and correct errors. Valid values are 'disable' - disables FEC on the interface. 'enableStandard' - enables standard FEC on the interface (ITU-T G.975). 'enableEnhanced' - enables Default Enhanced FEC (ITU-T G.975 I.4/I.7) on the interface 'enableEnhancedI4' - enables ITU-T G.975 I.4 FEC Mode on the Interface 'enableEnhancedI7' - enables ITU-T G.975 I.7 FEC Mode on the Interface 'enableLongHaul' - enable proprietary long haul FEC on the Interface 'enableHighGain' - enable proprietary high gain FEC on the Interface 'enableEnhancedSD7' - enable FEC Software Decision 7% 'enableEnhancedSD20'- enable FEC Software Decision 20%.")
coiIfControllerTDCOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerTDCOperMode.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerTDCOperMode.setDescription("This object gives the operational mode of the Tuned Dispersion Compensator (TDC). The values may be - 'auto' - Automatic tuning of dispersion compensation. 'manual' - Manual tuning of dispersion compensation.")
coiIfControllerTDCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("acquiring", 2), ("locked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerTDCOperStatus.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerTDCOperStatus.setDescription("This object gives the operational status of the Tuned Dispersion Compensator (TDC). The values may be - 'disabled' - TDC has been disabled. 'acquiring' - TDC is acquiring or tuning to the desired compensation setting. 'locked' - TDC has been tuned and locked at the desired compensation setting")
coiIfControllerTDCOperSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2000, 2000))).setUnits('ps/nm - picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerTDCOperSetting.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerTDCOperSetting.setDescription('This object gives the dispersion compensation setting that the TDC has been tuned to. It is expressed in pico-seconds per nanometer. Example: The value of -650 represents a dispersion compensation setting of -650 ps/nm.')
coiIfControllerPreFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerPreFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerPreFECBERMantissa.setDescription('This object gives the mantissa part of the Pre FEC BER or correctable BER at any instance of time. It is represented in one hundreths of a unit.The exponent part is defined in coiIfControllerPreFECBERExponent Pre FEC BER is the BER of the signal before it undergoes the FEC algorithm. FEC will correct errors upto a certain Pre FEC BER beyond which the signal starts becoming uncorrectable. Knowing the Pre FEC BER helps monitor system health. Pre FEC BER is expressed in Scientific E notation with two decimal places Example: The value 235 represents the mantissa of 2.35')
coiIfControllerPreFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerPreFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerPreFECBERExponent.setDescription('This object gives the exponent part of the Pre FEC BER or correctable BER at any instance of time. It is represented in powers of 10. The mantissa part is defined in coiIfControllerPreFECBERMantissa. Pre FEC BER is the BER of the signal before it undergoes the FEC algorithm. FEC will correct errors upto a certain Pre FEC BER beyond which the signal starts becoming uncorrectable. Knowing the Pre FEC BER helps monitor system health. Pre FEC BER is expressed in Scientific E notation with two decimal places Example: The value -11 represents the exponent value of 10 to the power of -11.')
coiIfControllerQFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('one hundredths of a dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerQFactor.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerQFactor.setDescription('This Object gives the value of Q-Factor represented in one hundredths of a dB. Q-Factor represents the analog signal to noise ratio. It suggests the minimum correctable BER for a given signal. The higher the Q-factor, the better. Q-factor is expressed in dB Example: The value 365 represents a Q-Factor of 3.65 dB')
coiIfControllerQMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('one hundredths of a dBQ').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerQMargin.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerQMargin.setDescription("Q-Margin defines how much operational system margin that is available for a given circuit. Minimum margin should be defined by one's Network Engineering Group. Q-margin is expressed in dBQ. dBQ is a scale relative to min required Q-Factor given by coiIfControllerQFactor. This object gives the value of the Q-Margin represented in one hundredths of a dBQ. Example: The value 236 represents a Q-Margin of 2.36 dBQ.")
coiIfControllerOTNValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerOTNValidIntervals.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerOTNValidIntervals.setDescription("This object gives the number of contiguous 15 minute intervals for which valid OTN performance monitoring data is available for the particular interface. The actual performance data is available in the following Tables coiOtnNearEndIntervalTable coiOtnFarEndIntervalTable The value of this object will be n (where n is the maximum number of 15 minute intervals supported at this interface), unless the measurement was (re-)started within the last (nx15) minutes, in which case the value will be the number of 15 minute intervals for which the agent has some data. This object reports value zero, if OTN is turned off by setting coiIfControllerOtnStatus to 'false'.")
coiIfControllerFECValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerFECValidIntervals.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerFECValidIntervals.setDescription("This object gives the number of contiguous 15 minute intervals for which valid FEC PM data is available for the particular interface. The actual performance data is available in the following Table coiFECIntervalTable The value of this object will be n (where n is the maximum number of 15 minute intervals supported at this interface), unless the measurement was (re-)started within the last (nx15) minutes, in which case the value will be the number of 15 minute intervals for which the agent has some data. This object reports a value 0, if FEC is disabled by setting coiIfControllerFECMode to 'disable'.")
coiOtnIfOTUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 16), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("los", 1), ("lof", 2), ("lom", 3), ("bdi", 4), ("tim", 5), ("ais", 6), ("fecMismatch", 7), ("fecUncorrectedWord", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnIfOTUStatus.setStatus('current')
if mibBuilder.loadTexts: coiOtnIfOTUStatus.setDescription('This object indicates the current defect status of the OTU layer on an OTN interface. noDefect(0): No defect. This bit will be set when none of the following defect bits are set. los(1): LOS (Loss Of Signal). This bit will be set when LOS defect is present. lof(2): LOF (Loss Of Frame). This bit will be set when LOF defect is present. lom(3): LOM (Loss Of Multiframe). This bit will be set when LOM defect is present. bdi(4): BDI (Backward Defect Indication). This bit will be set when BDI defect is present. tim(5): TIM (Trace Identifier Mismatch). This bit will be set when TIM defect is present. ais(6): AIS (Alarm Indication Signal). This bit will be set when AIS defect is present. fecMismatch(7): FecMismatch (Forward Error Correction Mismatch ). This bit will be set when FECMISMATCH defect is present. fecUncorrectedWord(8): fecUncorrectedWord (Forward Error Correction Uncorrected Word). This bit will be set when at least one Uncorrected Word is detected.')
coiOtnIfODUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 17), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("oci", 1), ("lck", 2), ("tim", 3), ("bdi", 4), ("ais", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnIfODUStatus.setStatus('current')
if mibBuilder.loadTexts: coiOtnIfODUStatus.setDescription('This object indicates the current defect status of the ODU layer on an OTN interface. noDefect(0): No Defect. This bit will be set when none of the following defect bits are set. oci(1): OCI (Open Connection Indication). This bit will be set when OCI defect is present. lck(2): LCK (Locked). This bit will be set when OCI defect is present. tim(3): TIM (Trace Identifier Mismatch). This bit will be set when TIM defect is present. bdi(4): BDI (Backward Defect Indication). This bit will be set when BDI defect is present. ais(5): AIS (Alarm Indication Signal). This bit will be set when AIS defect is present.')
coiOtnNearEndThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1), )
if mibBuilder.loadTexts: coiOtnNearEndThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndThresholdsTable.setDescription('This table provides objects for configuring OTN ( G.709 ) near end error thresholds on interfaces of ifType opticalChannel (195).')
coiOtnNearEndThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndThreshIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndThreshMonType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndThresholdType"))
if mibBuilder.loadTexts: coiOtnNearEndThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndThresholdsEntry.setDescription("An entry containing management information for configuration of performance monitoring thresholds for a given monitor and threshold type. Entries can be created for interfaces with ifType of opticalChannel(195). Thresholds are created/destroyed through the entry's RowStatus object semantics. The coiOtnNearEndThreshIntervalType defines the time interval over which the data being monitored is accumulated for which the threshold is to be applied. The coiOtnNearEndThreshMonType defines the type of statistics to which the threshold applies. The coiOtnNearEndThresholdType defines the specific threshold type value, which the threshold refers to.")
coiOtnNearEndThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnNearEndThreshIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndThreshIntervalType.setDescription('This object specifies the interval type during which the performance statistics were accumulated.')
coiOtnNearEndThreshMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnNearEndThreshMonType.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndThreshMonType.setDescription('This object gives the type of performance monitoring for which the threshold is being set.')
coiOtnNearEndThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 3), CoiOtnThresholdType())
if mibBuilder.loadTexts: coiOtnNearEndThresholdType.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndThresholdType.setDescription('This object gives the type of Error Threshold that is being set.')
coiOtnNearEndThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnNearEndThreshValue.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndThreshValue.setDescription('This object is used to set the near end threshold value for the given threshold type as identified by coiOtnNearEndThresholdType For esr(Error Seconds Ratio), sesr(Severely Errored Seconds Ratio), bber(Background Block Errored Seconds Ratio), value displayed is multiplied by 10^5.')
coiOtnNearEndThreshStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnNearEndThreshStorageType.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndThreshStorageType.setDescription('The storage type for this conceptual row.')
coiOtnNearEndThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnNearEndThreshStatus.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndThreshStatus.setDescription('This object controls the creation and deletion of a conceptual row in this table. The value of this object has no effect on whether other objects in this conceptual row can be modified. A conceptual row can not be made active until the coiOtnNearEndThreshValue has been set to a valid threshold value.')
coiOtnFarEndThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2), )
if mibBuilder.loadTexts: coiOtnFarEndThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndThresholdsTable.setDescription('This table provides objects for configuring OTN ( G.709 ) thresholds for far end of interfaces of ifType opticalChannel(195).')
coiOtnFarEndThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndThreshIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndThreshMonType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndThresholdType"))
if mibBuilder.loadTexts: coiOtnFarEndThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndThresholdsEntry.setDescription("An entry containing managment information for configuration of far end performance monitoring thresholds for a given monitor and threshold type. Entries can be created for interfaces with ifType of opticalChannel(195). Thresholds are created/destroyed through the entry's RowStatus object semantics. The coiOtnFarEndThreshIntervalType defines the time interval over which the data being monitored is accumulated for which the threshold is to be applied. The coiOtnFarEndThreshMonType defines the type of statistics to which the threshold applies. The coiOtnFarEndThresholdType defines the specific threshold type value, which the threshold refers to.")
coiOtnFarEndThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnFarEndThreshIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndThreshIntervalType.setDescription('This object gives the interval type during which the performance statistics were accumulated in the far end of the interface.')
coiOtnFarEndThreshMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnFarEndThreshMonType.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndThreshMonType.setDescription('This object gives specify the type of monitoring for which threshold is being set on interfaces in the far end of the interface .')
coiOtnFarEndThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 3), CoiOtnThresholdType())
if mibBuilder.loadTexts: coiOtnFarEndThresholdType.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndThresholdType.setDescription('This object gives the type of Error Threshold that is being set on far end interfaces of ifType opticalChannel (195).')
coiOtnFarEndThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnFarEndThreshValue.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndThreshValue.setDescription('This object is used to set the far end threshold value for the given threshold type as identified by the index coiOtnFarEndThresholdType.For esr(Error Seconds Ratio), sesr(Severely Errored Seconds Ratio), bber(Background Block Errored Seconds Ratio), value displayed is multiplied by 10^5.')
coiOtnFarEndThreshStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnFarEndThreshStorageType.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndThreshStorageType.setDescription('The storage type for this conceptual row.')
coiOtnFarEndThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnFarEndThreshStatus.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndThreshStatus.setDescription('This object controls the creation and deletion of a conceptual row in this table. The value of this object has no effect on whether other objects in this conceptual row can be modified. A conceptual row can not be made active until the coiOtnFarEndThreshValue has been set to valid threshold value.')
coiOtnNearEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3), )
if mibBuilder.loadTexts: coiOtnNearEndCurrentTable.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentTable.setDescription('This table contains the cumulative OTN (G.709) PM statistics for the near end of interfaces of ifType opticalChannel(195). The statistics are for the current interval of interval type identified by coiOtnNearEndCurIntervalType. The current PM statistics is the accumlated statistics for the time period defined by the interval type.')
coiOtnNearEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndCurIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentMonType"))
if mibBuilder.loadTexts: coiOtnNearEndCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentEntry.setDescription('An entry containing management information on near end error/statistics counters such as Failure Counts, Errored Seconds...etc in the current interval')
coiOtnNearEndCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnNearEndCurIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurIntervalType.setDescription('This object gives the interval type during which the near end performance statistics are accumulated.')
coiOtnNearEndCurrentMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnNearEndCurrentMonType.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentMonType.setDescription('This object gives the part of optical network for which the near end OTN performance statistics are being monitored.')
coiOtnNearEndCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentFCs.setReference('ITU - T Recommendation G.826')
if mibBuilder.loadTexts: coiOtnNearEndCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentFCs.setDescription('The counter associated with the number of failures encountered on the near end of interface in the current interval of type coiOtnNearEndCurIntervalType.')
coiOtnNearEndCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentESs.setReference('ITU - T Recommendation G.826 Section 4.6.1')
if mibBuilder.loadTexts: coiOtnNearEndCurrentESs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered on near end of interface in the current interval of type coiOtnNearEndCurIntervalType.')
coiOtnNearEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentSESs.setReference('ITU - T Recommendation G.826 Section 4.6.2')
if mibBuilder.loadTexts: coiOtnNearEndCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered on the near end of interface in the current interval of type coiOtnNearEndCurIntervalType.')
coiOtnNearEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentUASs.setReference('ITU - T Recommendation G.826')
if mibBuilder.loadTexts: coiOtnNearEndCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered on the near end of interface in the current interval of type coiOtnNearEndCurIntervalType.')
coiOtnNearEndCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentBBEs.setReference('ITU - T Recommendation G.826 Section 4.5.4')
if mibBuilder.loadTexts: coiOtnNearEndCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentBBEs.setDescription('The counter associated with the number of Background Block Errors encountered on the near end of interface in the current interval of type coiOtnNearEndCurIntervalType.')
coiOtnNearEndCurrentESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentESRs.setReference('ITU - T Recommendation G.826 Section 4.7.1')
if mibBuilder.loadTexts: coiOtnNearEndCurrentESRs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentESRs.setDescription('The counter associated with the Errored Seconds Ratio on the near end of interface in the current interval of type coiOtnNearEndCurIntervalType. Display value multiplied by 10^5.')
coiOtnNearEndCurrentSESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentSESRs.setReference('ITU - T Recommendation G.826 Section 4.7.2')
if mibBuilder.loadTexts: coiOtnNearEndCurrentSESRs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentSESRs.setDescription('The counter associated with the Severely Errored Seconds ratio on the near end of interface in current interval of type coiOtnNearEndCurIntervalType. Display value multiplied by 10^5.')
coiOtnNearEndCurrentBBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentBBERs.setReference('ITU - T Recommendation G.826 Section 4.7.3')
if mibBuilder.loadTexts: coiOtnNearEndCurrentBBERs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndCurrentBBERs.setDescription('The counter associated with the Background Block Errors ratio on the near end of interface in current interval of type coiOtnNearEndCurIntervalType. Display value multiplied by 10^5.')
coiOtnFarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4), )
if mibBuilder.loadTexts: coiOtnFarEndCurrentTable.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentTable.setDescription('This table contains the cumulative OTN (G.709) PM stats for the far end of interfaces of ifType opticalChannel(195). The statistics are for the current interval of interval type identified by coiOtnFarEndCurIntervalType. The current PM statistics is the accumlated statistics for the time period defined by the interval type.')
coiOtnFarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndCurIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentMonType"))
if mibBuilder.loadTexts: coiOtnFarEndCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentEntry.setDescription('An entry containing managment information on far end error/statistics counters such as Failure Counts, Errored Seconds...etc in the current interval')
coiOtnFarEndCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnFarEndCurIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurIntervalType.setDescription('This object gives the interval type during which the performance statistics are accumulated in the far end of the interface.')
coiOtnFarEndCurrentMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnFarEndCurrentMonType.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentMonType.setDescription('This object gives the part of optical network for which far end OTN performance statistics are being monitored.')
coiOtnFarEndCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentFCs.setReference('ITU - T Recommendation G.826')
if mibBuilder.loadTexts: coiOtnFarEndCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentFCs.setDescription('The counter associated with the number of failures encountered on far end of interface in current interval of type coiOtnFarEndCurIntervalType.')
coiOtnFarEndCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentESs.setReference('ITU - T Recommendation G.826 Section 4.6.1')
if mibBuilder.loadTexts: coiOtnFarEndCurrentESs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered on far end of interface in current interval of type coiOtnFarEndCurIntervalType.')
coiOtnFarEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentSESs.setReference('ITU - T Recommendation G.826 Section 4.6.2')
if mibBuilder.loadTexts: coiOtnFarEndCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered on far end of interface in the current interval of type coiOtnFarEndCurIntervalType.')
coiOtnFarEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentUASs.setReference('ITU - T Recommendation G.826')
if mibBuilder.loadTexts: coiOtnFarEndCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered on far end of interface in the current interval of type coiOtnFarEndCurIntervalType.')
coiOtnFarEndCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentBBEs.setReference('ITU - T Recommendation G.826 Section 4.5.4')
if mibBuilder.loadTexts: coiOtnFarEndCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentBBEs.setDescription('The counter associated with the number of Background Block Errors encountered on far end of interface in the current interval of type coiOtnFarEndCurIntervalType.')
coiOtnFarEndCurrentESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentESRs.setReference('ITU - T Recommendation G.826 Section 4.7.1')
if mibBuilder.loadTexts: coiOtnFarEndCurrentESRs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentESRs.setDescription('The counter associated with the Errored Seconds Ratio on far end of interface in the current interval of type coiOtnFarEndCurIntervalType. Display value multiplied by 10^5.')
coiOtnFarEndCurrentSESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentSESRs.setReference('ITU - T Recommendation G.826 Section 4.7.2')
if mibBuilder.loadTexts: coiOtnFarEndCurrentSESRs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentSESRs.setDescription('The counter associated with the Severely Errored Seconds ratio on far end of interface in the current interval of type coiOtnFarEndCurIntervalType. Display value multiplied by 10^5.')
coiOtnFarEndCurrentBBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentBBERs.setReference('ITU - T Recommendation G.826 Section 4.7.3')
if mibBuilder.loadTexts: coiOtnFarEndCurrentBBERs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndCurrentBBERs.setDescription('The counter associated with the Background Block Errors ratio on far end of interface in the current interval of type coiOtnFarEndCurIntervalType. Display value multiplied by 10^5.')
coiOtnNearEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5), )
if mibBuilder.loadTexts: coiOtnNearEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalTable.setDescription('This table contains historical cumulative OTN (G.709) PM stats for the near end of interfaces of ifType opticalChannel(195), for the interval type identified by the index coiOtnNearEndIntervalType and the interval number as identified by the index coiOtnNearEndIntervalNum. The PM statistics is the accumlated stats for the time period defined by the interval type in the time interval as defined by interval number.')
coiOtnNearEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalMonType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalNum"))
if mibBuilder.loadTexts: coiOtnNearEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalEntry.setDescription('An entry containing management information on near end error/statistics counters such as Failure Counts, Errored Seconds...etc in the given interval.')
coiOtnNearEndIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnNearEndIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalType.setDescription('This object gives the interval type during which the performance statistics are accumulated.')
coiOtnNearEndIntervalMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnNearEndIntervalMonType.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalMonType.setDescription('This object gives the part of optical network for which near end OTN performance statistics are being monitored.')
coiOtnNearEndIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: coiOtnNearEndIntervalNum.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalNum.setDescription('This object identifies the interval for which the set of near end OTN performance values is available. The interval identified by 1 is the most recent 15 minute or 24 hour interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
coiOtnNearEndIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalFCs.setReference('ITU - T Recommendation G.826.')
if mibBuilder.loadTexts: coiOtnNearEndIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalFCs.setDescription('The counter associated with the number of failures encountered on the near end of interface in the interval identified by coiOtnNearEndIntervalType and coiOtnNearEndIntervalNum.')
coiOtnNearEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalESs.setReference('ITU - T Recommendation G.826 Section 4.6.1')
if mibBuilder.loadTexts: coiOtnNearEndIntervalESs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered on the near end of interface in the interval identified by coiOtnNearEndIntervalType and coiOtnNearEndIntervalNum.')
coiOtnNearEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalSESs.setReference('ITU - T Recommendation G.826 Section 4.6.2')
if mibBuilder.loadTexts: coiOtnNearEndIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered on the near end of interface in the interval identified by coiOtnNearEndIntervalType and coiOtnNearEndIntervalNum.')
coiOtnNearEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalUASs.setReference('ITU - T Recommendation G.826.')
if mibBuilder.loadTexts: coiOtnNearEndIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered on the near end of interface in the interval identified by coiOtnNearEndIntervalType and coiOtnNearEndIntervalNum.')
coiOtnNearEndIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalBBEs.setReference('ITU - T Recommendation G.826 Section 4.5.4')
if mibBuilder.loadTexts: coiOtnNearEndIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalBBEs.setDescription('The counter associated with the number of Background Block Errors encountered on the near end of interface in the interval identified by coiOtnNearEndIntervalType and coiOtnNearEndIntervalNum.')
coiOtnNearEndIntervalESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalESRs.setReference('ITU - T Recommendation G.826 Section 4.7.1')
if mibBuilder.loadTexts: coiOtnNearEndIntervalESRs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalESRs.setDescription('The counter associated with the Errored Seconds Ratio on the near end of interface in the interval identified by coiiOtnNearEndIntervalType and coiOtnNearEndIntervalNum. Display value multiplied by 10^5.')
coiOtnNearEndIntervalSESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalSESRs.setReference('ITU - T Recommendation G.826 Section 4.7.2')
if mibBuilder.loadTexts: coiOtnNearEndIntervalSESRs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalSESRs.setDescription('The counter associated with the Severely Errored Seconds ratio on the near end of interface in the interval identified by coiOtnNearEndIntervalType and coiOtnNearEndIntervalNum. Display value multiplied by 10^5.')
coiOtnNearEndIntervalBBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalBBERs.setReference('ITU - T Recommendation G.826 Section 4.7.2')
if mibBuilder.loadTexts: coiOtnNearEndIntervalBBERs.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalBBERs.setDescription('The counter associated with the Background Block Errors ratio on the near end of interface in the interval identified by coiOtnNearEndIntervalType and coiOtnNearEndIntervalNum. Display value multiplied by 10^5.')
coiOtnNearEndIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: coiOtnNearEndIntervalValidData.setDescription('This variable indicates if the data for the interval identified by coiOtnNearEndIntervalType and coiOtnNearEndIntervalNum is valid.')
coiOtnFarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6), )
if mibBuilder.loadTexts: coiOtnFarEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalTable.setDescription('This table contains historical cumulative OTN (G.709) PM stats for the far end interfaces of ifType opticalChannel(195), for the interval type identified by the index coiOtnFarEndIntervalType and the interval number as identified by coiOtnFarEndIntervalNum. The PM statistics is the accumlated stats for the time period defined by the interval type in the time interval as defined by interval number.')
coiOtnFarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalMonType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalNum"))
if mibBuilder.loadTexts: coiOtnFarEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalEntry.setDescription('An entry containing managment information on far end error/statistics counters such as Failure Counts, Errored Seconds...etc in the given interval')
coiOtnFarEndIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnFarEndIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalType.setDescription('This object gives the interval type during which the far end performance statistics are accumulated.')
coiOtnFarEndIntervalMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnFarEndIntervalMonType.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalMonType.setDescription('This object gives the part of optical network for which far end OTN performance statistics are being monitored.')
coiOtnFarEndIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: coiOtnFarEndIntervalNum.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalNum.setDescription('This object identifies the interval for which the set of far end OTN performance values for this interface is available. The interval identified by 1 is the most recent 15 minute or 24 hour interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
coiOtnFarEndIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalFCs.setReference('ITU - T Recommendation G.826')
if mibBuilder.loadTexts: coiOtnFarEndIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalFCs.setDescription('The counter associated with the number of Failures encountered on the far end of interface in the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum.')
coiOtnFarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalESs.setReference('ITU - T Recommendation G.826 Section 4.6.1')
if mibBuilder.loadTexts: coiOtnFarEndIntervalESs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered on far end of interface in the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum.')
coiOtnFarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalSESs.setReference('ITU - T Recommendation G.826 Section 4.6.2')
if mibBuilder.loadTexts: coiOtnFarEndIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered on far end interface in the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum.')
coiOtnFarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalUASs.setReference('ITU - T Recommendation G.826')
if mibBuilder.loadTexts: coiOtnFarEndIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered on far end of interface in the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum.')
coiOtnFarEndIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalBBEs.setReference('ITU - T Recommendation G.826 Section 4.5.4')
if mibBuilder.loadTexts: coiOtnFarEndIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalBBEs.setDescription('The counter associated with the number of Background Block Errors encountered on far end of interface in the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum.')
coiOtnFarEndIntervalESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalESRs.setReference('ITU - T Recommendation G.826 Section 4.7.1')
if mibBuilder.loadTexts: coiOtnFarEndIntervalESRs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalESRs.setDescription('The counter associated with the Errored Seconds Ratio on far end of interface in the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum. Display value multiplied by 10^5.')
coiOtnFarEndIntervalSESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalSESRs.setReference('ITU - T Recommendation G.826 Section 4.7.2')
if mibBuilder.loadTexts: coiOtnFarEndIntervalSESRs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalSESRs.setDescription('The counter associated with the Severely Errored Seconds ratio on far end of interface in the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum. Display value multiplied by 10^5.')
coiOtnFarEndIntervalBBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalBBERs.setReference('ITU - T Recommendation G.826 Section 4.7.3')
if mibBuilder.loadTexts: coiOtnFarEndIntervalBBERs.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalBBERs.setDescription('The counter associated with the Background Block Errors ratio on far end of interface in the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum. Display value multiplied by 10^5.')
coiOtnFarEndIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalValidData.setReference('ITU - T Recommendation G.826 Section 4.7.2')
if mibBuilder.loadTexts: coiOtnFarEndIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: coiOtnFarEndIntervalValidData.setDescription('This variable indicates if the far end data for the interval identified by coiOtnFarEndIntervalType and coiOtnFarEndIntervalNum is valid.')
coiOtnIfNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOtnIfNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: coiOtnIfNotifEnabled.setDescription("This object controls the generation of coiOtnIfOTUStatusChange and coiOtnIfODUStatusChange notifications. If the value of this object is 'true', then the generation of coiOtnIfOTUStatusChange and coiOtnIfODUStatusChange notifications is enabled. If the value of this object is 'false', then the generation of coiOtnIfOTUStatusChange and coiOtnIfODUStatusChange notifications is disabled.")
coiFECThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1), )
if mibBuilder.loadTexts: coiFECThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: coiFECThresholdsTable.setDescription('This table contains the configurable thresholds for FEC ( Forward Error Correction ) statistics.')
coiFECThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiFECThreshIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiFECThreshType"))
if mibBuilder.loadTexts: coiFECThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: coiFECThresholdsEntry.setDescription("An entry containing management information for configuration of FEC thresholds. Entries can be created for ifIndices with an ifType of opticalChannel(195). Thresholds are created/destroyed, through the entry's RowStatus object semantics. The coiFECThreshIntervalType defines the time interval over which the data being monitored is accumulated for which the threshold is to be applied. The coiFECThreshType defines the specific threshold type value, which the threshold refers to.")
coiFECThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiFECThreshIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiFECThreshIntervalType.setDescription('This object gives the type of the interval for which the thresholds are being set.')
coiFECThreshType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bitErrCor", 1), ("byteErrcor", 2), ("zeroErrDet", 3), ("oneErrDet", 4), ("unCorWords", 5))))
if mibBuilder.loadTexts: coiFECThreshType.setReference('ITU - T Recommendation G.8201 - Error performance parameters and objectives for multi-operator international paths within the Optical Transport Network (OTN). ITU - T Recommendation M.2140: Transport network event correlation.')
if mibBuilder.loadTexts: coiFECThreshType.setStatus('current')
if mibBuilder.loadTexts: coiFECThreshType.setDescription('This object gives the type of the FEC Threshold that is being set. Valid values are - bitErrCor(1) : Bit Errors Corrected byteErrcor(2) : Byte Errors Corrected zeroErrDet(3) : Zero Bit Errors Detected oneErrDet(4) : One Bit Errors Detected unCorWords(5) : Un Correctable Words')
coiFECThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiFECThreshValue.setStatus('current')
if mibBuilder.loadTexts: coiFECThreshValue.setDescription('This object is used for configuring the FEC threshold value for the given threshold type.')
coiFECThreshStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiFECThreshStorageType.setStatus('current')
if mibBuilder.loadTexts: coiFECThreshStorageType.setDescription('The storage type for this conceptual row.')
coiFECThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiFECThreshStatus.setStatus('current')
if mibBuilder.loadTexts: coiFECThreshStatus.setDescription('This object controls the creation and deletion of a conceptual row in this table.The RowStatus TC requires that this DESCRIPTION clause states under which circumstances other objects in this row can be modified. The value of this object has no effect on whether other objects in this conceptual row can be modified. A conceptual row can not be made active until atleast coiFECThreshValueLSB has been set to a valid threshold value.')
coiFECCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2), )
if mibBuilder.loadTexts: coiFECCurrentTable.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentTable.setDescription('This table contains the cumulative FEC PM stats for the interfaces of ifType opticalChannel(195) for the current interval of interval type identified coiFECCurIntervalType.')
coiFECCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiFECCurIntervalType"))
if mibBuilder.loadTexts: coiFECCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentEntry.setDescription('An entry containing managment information on FEC related error/statistics counters such as Bit Errors Corrected, Byte Errors Corrected etc in the current interval.')
coiFECCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiFECCurIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiFECCurIntervalType.setDescription('This object gives the interval type during which the FEC PM statistics have been collected.')
coiFECCurrentCorBitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentCorBitErrs.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentCorBitErrs.setDescription('The counter associated with the number of Bit Errors Corrected on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentCorByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentCorByteErrs.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentCorByteErrs.setDescription('The counter associated with the number of Byte Errors Corrected on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentDetZeroErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentDetZeroErrs.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentDetZeroErrs.setDescription('The counter associated with the number of zero bit errors detected on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentDetOneErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentDetOneErrs.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentDetOneErrs.setDescription('The counter associated with the number of one bit errors detected on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentUncorWords.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentUncorWords.setDescription('The counter associated with the number of Uncorrectable Words encountered on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentPreFECMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPreFECMin.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentPreFECMin.setDescription('The minimum value of PreFEC on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentPreFECMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPreFECMax.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentPreFECMax.setDescription('The maximum value of PreFEC on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentPreFECAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPreFECAvg.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentPreFECAvg.setDescription('The average value of PreFEC on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentPostFECMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPostFECMin.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentPostFECMin.setDescription('The minimum value of PostFEC on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentPostFECMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPostFECMax.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentPostFECMax.setDescription('The maximum value of PostFEC on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentPostFECAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPostFECAvg.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentPostFECAvg.setDescription('The average value of PostFEC on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentQFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQFactorMin.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentQFactorMin.setDescription('The minimum value of QFactor on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentQFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQFactorMax.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentQFactorMax.setDescription('The maximum value of QFactor on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentQFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQFactorAvg.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentQFactorAvg.setDescription('The average value of QFactor on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentQMarginMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQMarginMin.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentQMarginMin.setDescription('The minimum value of QMargin on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentQMarginMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQMarginMax.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentQMarginMax.setDescription('The maximum value of QMargin on this interface in the current interval of type coiFECCurIntervalType.')
coiFECCurrentQMarginAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQMarginAvg.setStatus('current')
if mibBuilder.loadTexts: coiFECCurrentQMarginAvg.setDescription('The average value of QMargin on this interface in the current interval of type coiFECCurIntervalType.')
coiFECIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3), )
if mibBuilder.loadTexts: coiFECIntervalTable.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalTable.setDescription('This table contains historical cumulative FEC PM stats for the interfaces of ifType opticalChannel(195), for the interval type identified by the index coiFECIntervalType and the interval number as identified by index coiFECIntervalNum. The PM statistics is the accumlated stats for the time period defined by the interval type in the time interval as defined by interval number.')
coiFECIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiFECIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiFECIntervalNum"))
if mibBuilder.loadTexts: coiFECIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalEntry.setDescription('An entry containing managment information on FEC error/statistics counters such as Bit Errors Corrected, Byte Errors Corrected etc in the given interval.')
coiFECIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiFECIntervalType.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalType.setDescription('This object gives the type of interval for which the FEC values have been collected.')
coiFECIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: coiFECIntervalNum.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalNum.setDescription('This object gives the interval for which the set of FEC PM values are available. The interval identified by 1 is the most recent 15 minute or 24 hour interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
coiFECIntervalCorBitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalCorBitErrs.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalCorBitErrs.setDescription('The counter associated with the number of Bit Errors Corrected in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalCorByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalCorByteErrs.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalCorByteErrs.setDescription('The counter associated with the number of Byte Errors Corrected on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalDetZeroErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalDetZeroErrs.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalDetZeroErrs.setDescription('The counter associated with the number of zero bit errors detected on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalDetOneErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalDetOneErrs.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalDetOneErrs.setDescription('The counter associated with the number of one bit errors detected on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalUncorWords.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalUncorWords.setDescription('The counter associated with the number of Uncorrectable Words encountered on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalValidData.setDescription('This object indicates whether the data for the interval identified by coiFECIntervalType and coiFECIntervalNum is valid.')
coiFECIntervalPreFECMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPreFECMin.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalPreFECMin.setDescription('The minimum value of PreFEC on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalPreFECMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPreFECMax.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalPreFECMax.setDescription('The maximum value of PreFEC on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalPreFECAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPreFECAvg.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalPreFECAvg.setDescription('The average value of PreFEC on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalPostFECMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPostFECMin.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalPostFECMin.setDescription('The minimum value of PostFEC on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalPostFECMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPostFECMax.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalPostFECMax.setDescription('The maximum value of PostFEC on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalPostFECAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPostFECAvg.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalPostFECAvg.setDescription('The average value of PostFEC on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalQFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQFactorMin.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalQFactorMin.setDescription('The minimum value of QFactor on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalQFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQFactorMax.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalQFactorMax.setDescription('The maximum value of QFactor on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalQFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQFactorAvg.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalQFactorAvg.setDescription('The average value of QFactor on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalQMarginMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQMarginMin.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalQMarginMin.setDescription('The minimum value of QMargin on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalQMarginMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQMarginMax.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalQMarginMax.setDescription('The maximum value of QMargin on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
coiFECIntervalQMarginAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQMarginAvg.setStatus('current')
if mibBuilder.loadTexts: coiFECIntervalQMarginAvg.setDescription('The average value of QMargin on this interface in the interval identified by coiFECIntervalType and coiFECIntervalNum.')
ciscoOtnIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 2))
ciscoOtnIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 1))
coiOtnIfOTUStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 639, 0, 1)).setObjects(("IF-MIB", "ifName"), ("CISCO-OTN-IF-MIB", "coiOtnIfOTUStatus"))
if mibBuilder.loadTexts: coiOtnIfOTUStatusChange.setStatus('current')
if mibBuilder.loadTexts: coiOtnIfOTUStatusChange.setDescription("This notification is generated whenever the defect status of OTU layer on an interface changes. Varbind 'ifName' indicates the interface whose defect status of the OTU layer has just changed. Varbind 'coiOtnIfOTUStatus' indicates the current defect status of the OTU layer on the interface.")
coiOtnIfODUStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 639, 0, 2)).setObjects(("IF-MIB", "ifName"), ("CISCO-OTN-IF-MIB", "coiOtnIfODUStatus"))
if mibBuilder.loadTexts: coiOtnIfODUStatusChange.setStatus('current')
if mibBuilder.loadTexts: coiOtnIfODUStatusChange.setDescription("This notification is generated whenever the defect status of ODU layer on an interface changes. Varbind 'ifName' indicates the interface whose defect status of the ODU layer has just changed. Varbind 'coiOtnIfODUStatus' indicates the current defect status of the ODU layer on the interface.")
ciscoOtnIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2))
ciscoOtnIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 1, 1)).setObjects(("CISCO-OTN-IF-MIB", "coiIfControllerGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtnIfMIBCompliance = ciscoOtnIfMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoOtnIfMIBCompliance.setDescription('The compliance statement for platforms that monitor the operating status and FEC/OTN with respect to error counters, for the physical layer.')
ciscoOtnIfMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 1, 2)).setObjects(("CISCO-OTN-IF-MIB", "coiIfControllerGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifEnableGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifStatusObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtnIfMIBCompliance1 = ciscoOtnIfMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoOtnIfMIBCompliance1.setDescription('The compliance statement for platforms that monitor the operating status and FEC/OTN with respect to error counters, for the physical layer.')
ciscoOtnIfMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 1, 3)).setObjects(("CISCO-OTN-IF-MIB", "coiIfControllerGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECCurrentGroup1"), ("CISCO-OTN-IF-MIB", "coiIfFECIntervalGroup1"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifEnableGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifStatusObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtnIfMIBCompliance2 = ciscoOtnIfMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: ciscoOtnIfMIBCompliance2.setDescription('The compliance statement for platforms that monitor the operating status and FEC/OTN with respect to error counters, for the physical layer.')
coiIfControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 1)).setObjects(("CISCO-OTN-IF-MIB", "coiIfControllerLoopback"), ("CISCO-OTN-IF-MIB", "coiIfControllerWavelength"), ("CISCO-OTN-IF-MIB", "coiIfControllerLaserAdminStatus"), ("CISCO-OTN-IF-MIB", "coiIfControllerLaserOperStatus"), ("CISCO-OTN-IF-MIB", "coiIfControllerOtnStatus"), ("CISCO-OTN-IF-MIB", "coiIfControllerFECMode"), ("CISCO-OTN-IF-MIB", "coiIfControllerTDCOperMode"), ("CISCO-OTN-IF-MIB", "coiIfControllerTDCOperStatus"), ("CISCO-OTN-IF-MIB", "coiIfControllerTDCOperSetting"), ("CISCO-OTN-IF-MIB", "coiIfControllerPreFECBERMantissa"), ("CISCO-OTN-IF-MIB", "coiIfControllerPreFECBERExponent"), ("CISCO-OTN-IF-MIB", "coiIfControllerQFactor"), ("CISCO-OTN-IF-MIB", "coiIfControllerQMargin"), ("CISCO-OTN-IF-MIB", "coiIfControllerOTNValidIntervals"), ("CISCO-OTN-IF-MIB", "coiIfControllerFECValidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfControllerGroup = coiIfControllerGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfControllerGroup.setDescription('The collection of objects to allow configurations and give information related to the physical layer characteristics for interfaces of ifType opticalChannel(195).')
coiIfOtnNearEndCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 3)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentFCs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentSESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentUASs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentBBERs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNearEndCurrentGroup = coiIfOtnNearEndCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfOtnNearEndCurrentGroup.setDescription('The collection of objects used for monitoring the near end OTN error counters in the current interval.')
coiIfOtnNearEndIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 4)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalFCs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalSESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalUASs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNearEndIntervalGroup = coiIfOtnNearEndIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfOtnNearEndIntervalGroup.setDescription('The collection of objects used for monitoring the near end OTN error counters in a given interval.')
coiIfOtnFarEndCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 5)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentFCs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentSESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentUASs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentBBERs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnFarEndCurrentGroup = coiIfOtnFarEndCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfOtnFarEndCurrentGroup.setDescription('The collection of objects used for monitoring the far end OTN error counters in the current interval.')
coiIfOtnFarEndIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 6)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalFCs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalSESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalUASs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnFarEndIntervalGroup = coiIfOtnFarEndIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfOtnFarEndIntervalGroup.setDescription('The collection of objects used for monitoring the far end OTN error counters in a given interval.')
coiIfOtnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 7)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentFCs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentSESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentUASs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalFCs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalSESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalUASs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalValidData"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentFCs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentSESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentUASs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalFCs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalSESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalUASs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnGroup = coiIfOtnGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfOtnGroup.setDescription('The collection of objects used for monitoring the OTN error counters.')
coiIfFECGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 8)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECGroup = coiIfFECGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfFECGroup.setDescription('The collection objects used for monitoring the FEC error counters.')
coiIfFECCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 9)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentUncorWords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECCurrentGroup = coiIfFECCurrentGroup.setStatus('deprecated')
if mibBuilder.loadTexts: coiIfFECCurrentGroup.setDescription('The collection of objects used for monitoring the FEC error counters in the current interval.coiIfFECCurrentGroup object is superseded by coiIfFECCurrentGroup1.')
coiIfFECIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 10)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECIntervalGroup = coiIfFECIntervalGroup.setStatus('deprecated')
if mibBuilder.loadTexts: coiIfFECIntervalGroup.setDescription('The collection of objects used for monitoring the FEC error counters in a given interval . coiIfFECIntervalGroup object is superseded by coiIfFECIntervalGroup1.')
coiIfOtnNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 11)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnIfNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNotifEnableGroup = coiIfOtnNotifEnableGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfOtnNotifEnableGroup.setDescription("The collection of objects to enable the notification generations upon an OTN interface's defect status change on OTU and ODU layer.")
coiIfOtnNotifStatusObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 12)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnIfOTUStatus"), ("CISCO-OTN-IF-MIB", "coiOtnIfODUStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNotifStatusObjectGroup = coiIfOtnNotifStatusObjectGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfOtnNotifStatusObjectGroup.setDescription('The collection of objects used to monitor the defect status of OTU and ODU layer on an OTN interface.')
coiIfOtnNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 13)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnIfOTUStatusChange"), ("CISCO-OTN-IF-MIB", "coiOtnIfODUStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNotifGroup = coiIfOtnNotifGroup.setStatus('current')
if mibBuilder.loadTexts: coiIfOtnNotifGroup.setDescription('The collection of OTN status change notifications whenever the defect status of OTU and ODU layer on an OTN interface changes.')
coiIfFECCurrentGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 14)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPreFECMin"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPreFECMax"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPreFECAvg"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPostFECMin"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPostFECMax"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPostFECAvg"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQFactorMin"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQFactorMax"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQFactorAvg"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQMarginMin"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQMarginMax"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQMarginAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECCurrentGroup1 = coiIfFECCurrentGroup1.setStatus('current')
if mibBuilder.loadTexts: coiIfFECCurrentGroup1.setDescription('The collection of objects used for monitoring the FEC error counters in the current interval.')
coiIfFECIntervalGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 15)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECIntervalValidData"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPreFECMin"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPreFECMax"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPreFECAvg"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPostFECMin"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPostFECMax"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPostFECAvg"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQFactorMin"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQFactorMax"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQFactorAvg"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQMarginMin"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQMarginMax"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQMarginAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECIntervalGroup1 = coiIfFECIntervalGroup1.setStatus('current')
if mibBuilder.loadTexts: coiIfFECIntervalGroup1.setDescription('The collection of objects used for monitoring the FEC error counters in a given interval .')
mibBuilder.exportSymbols("CISCO-OTN-IF-MIB", coiOtnIfODUStatus=coiOtnIfODUStatus, coiFECThreshStorageType=coiFECThreshStorageType, coiFECCurrentDetZeroErrs=coiFECCurrentDetZeroErrs, coiOtnFarEndIntervalSESs=coiOtnFarEndIntervalSESs, coiIfControllerGroup=coiIfControllerGroup, coiOtnFarEndThresholdType=coiOtnFarEndThresholdType, coiOtnNearEndIntervalMonType=coiOtnNearEndIntervalMonType, coiFECCurrentQMarginMax=coiFECCurrentQMarginMax, coiFECIntervalCorByteErrs=coiFECIntervalCorByteErrs, coiOtnIfNotifEnabled=coiOtnIfNotifEnabled, coiFECCurrentUncorWords=coiFECCurrentUncorWords, coiOtnFarEndCurrentSESs=coiOtnFarEndCurrentSESs, coiOtnNearEndIntervalFCs=coiOtnNearEndIntervalFCs, coiIfFECCurrentGroup1=coiIfFECCurrentGroup1, coiOtnFarEndCurrentEntry=coiOtnFarEndCurrentEntry, coiOtnFarEndIntervalUASs=coiOtnFarEndIntervalUASs, coiIfControllerLaserAdminStatus=coiIfControllerLaserAdminStatus, coiIfControllerTDCOperMode=coiIfControllerTDCOperMode, coiOtnFarEndIntervalTable=coiOtnFarEndIntervalTable, coiFECIntervalPostFECMax=coiFECIntervalPostFECMax, coiOtnFarEndThreshStorageType=coiOtnFarEndThreshStorageType, coiFECIntervalQFactorMin=coiFECIntervalQFactorMin, coiOtnNearEndThreshStatus=coiOtnNearEndThreshStatus, coiIfControllerOtnStatus=coiIfControllerOtnStatus, coiOtnNearEndCurrentUASs=coiOtnNearEndCurrentUASs, coiIfOtnNotifEnableGroup=coiIfOtnNotifEnableGroup, coiFECCurrentPreFECAvg=coiFECCurrentPreFECAvg, coiOtnFarEndIntervalESRs=coiOtnFarEndIntervalESRs, coiFECCurIntervalType=coiFECCurIntervalType, coiOtnNearEndThresholdsEntry=coiOtnNearEndThresholdsEntry, coiFECCurrentQMarginMin=coiFECCurrentQMarginMin, coiOtnFarEndIntervalNum=coiOtnFarEndIntervalNum, coiOtnFarEndCurrentBBERs=coiOtnFarEndCurrentBBERs, coiFECCurrentPostFECMax=coiFECCurrentPostFECMax, coiOtnIfODUStatusChange=coiOtnIfODUStatusChange, coiFECIntervalNum=coiFECIntervalNum, coiFECCurrentDetOneErrs=coiFECCurrentDetOneErrs, coiFECCurrentQFactorAvg=coiFECCurrentQFactorAvg, PYSNMP_MODULE_ID=ciscoOtnIfMIB, coiFECIntervalEntry=coiFECIntervalEntry, coiFECIntervalQMarginAvg=coiFECIntervalQMarginAvg, coiOtnFarEndIntervalEntry=coiOtnFarEndIntervalEntry, coiOtnFarEndThresholdsEntry=coiOtnFarEndThresholdsEntry, coiOtnNearEndIntervalESRs=coiOtnNearEndIntervalESRs, coiFECCurrentTable=coiFECCurrentTable, coiIfFECIntervalGroup1=coiIfFECIntervalGroup1, coiOtnNearEndThreshValue=coiOtnNearEndThreshValue, coiIfOtnNotifStatusObjectGroup=coiIfOtnNotifStatusObjectGroup, coiFECCurrentEntry=coiFECCurrentEntry, coiOtnNearEndCurrentFCs=coiOtnNearEndCurrentFCs, coiIfControllerWavelength=coiIfControllerWavelength, coiOtnNearEndIntervalBBERs=coiOtnNearEndIntervalBBERs, coiFECIntervalQMarginMin=coiFECIntervalQMarginMin, ciscoOtnIfMIBGroups=ciscoOtnIfMIBGroups, coiFECCurrentQMarginAvg=coiFECCurrentQMarginAvg, coiOtnNearEndIntervalESs=coiOtnNearEndIntervalESs, coiOtnFarEndCurrentBBEs=coiOtnFarEndCurrentBBEs, coiOtnNearEndCurrentTable=coiOtnNearEndCurrentTable, coiOtnFarEndCurrentUASs=coiOtnFarEndCurrentUASs, coiOtnFarEndThreshValue=coiOtnFarEndThreshValue, coiIfOtnNearEndIntervalGroup=coiIfOtnNearEndIntervalGroup, coiIfFECGroup=coiIfFECGroup, coiOtnNearEndCurrentSESs=coiOtnNearEndCurrentSESs, coiOtnFarEndCurrentESs=coiOtnFarEndCurrentESs, coiIfFECIntervalGroup=coiIfFECIntervalGroup, CoiMonitorType=CoiMonitorType, coiOtnFarEndCurrentESRs=coiOtnFarEndCurrentESRs, coiOtnFarEndIntervalValidData=coiOtnFarEndIntervalValidData, ciscoOtnIfMIBCompliances=ciscoOtnIfMIBCompliances, coiOtnNearEndIntervalTable=coiOtnNearEndIntervalTable, CoiOtnThresholdType=CoiOtnThresholdType, coiIfControllerLaserOperStatus=coiIfControllerLaserOperStatus, coiIfFECCurrentGroup=coiIfFECCurrentGroup, coiOtnFarEndIntervalBBERs=coiOtnFarEndIntervalBBERs, coiOtnFarEndIntervalType=coiOtnFarEndIntervalType, coiOtnNearEndCurrentMonType=coiOtnNearEndCurrentMonType, coiOtnNearEndCurrentSESRs=coiOtnNearEndCurrentSESRs, coiFECIntervalDetOneErrs=coiFECIntervalDetOneErrs, coiOtnNearEndCurrentBBEs=coiOtnNearEndCurrentBBEs, coiFECIntervalCorBitErrs=coiFECIntervalCorBitErrs, coiOtnNearEndThreshIntervalType=coiOtnNearEndThreshIntervalType, coiOtnFarEndIntervalBBEs=coiOtnFarEndIntervalBBEs, coiFECIntervalQFactorAvg=coiFECIntervalQFactorAvg, ciscoOtnIfMIBCompliance=ciscoOtnIfMIBCompliance, coiIfControllerOTNValidIntervals=coiIfControllerOTNValidIntervals, coiIfOtnGroup=coiIfOtnGroup, coiFECCurrentQFactorMin=coiFECCurrentQFactorMin, coiOtnNearEndIntervalSESRs=coiOtnNearEndIntervalSESRs, coiOtnIfOTUStatusChange=coiOtnIfOTUStatusChange, coiOtnFarEndCurrentTable=coiOtnFarEndCurrentTable, coiFECIntervalUncorWords=coiFECIntervalUncorWords, coiIfControllerEntry=coiIfControllerEntry, coiOtnFarEndThreshStatus=coiOtnFarEndThreshStatus, coiFECIntervalPostFECMin=coiFECIntervalPostFECMin, coiIfControllerQFactor=coiIfControllerQFactor, coiDwdmInterface=coiDwdmInterface, coiIfOtnFarEndIntervalGroup=coiIfOtnFarEndIntervalGroup, coiOtnFarEndIntervalSESRs=coiOtnFarEndIntervalSESRs, coiIfControllerTDCOperStatus=coiIfControllerTDCOperStatus, coiOtnNearEndIntervalNum=coiOtnNearEndIntervalNum, coiFECCurrentQFactorMax=coiFECCurrentQFactorMax, coiOtnNearEndCurIntervalType=coiOtnNearEndCurIntervalType, coiOtnFarEndCurrentFCs=coiOtnFarEndCurrentFCs, coiFECThresholdsTable=coiFECThresholdsTable, ciscoOtnIfMIBObjects=ciscoOtnIfMIBObjects, coiFECCurrentPreFECMin=coiFECCurrentPreFECMin, coiFECIntervalPreFECMax=coiFECIntervalPreFECMax, coiFECCurrentPostFECAvg=coiFECCurrentPostFECAvg, coiFECThreshStatus=coiFECThreshStatus, coiIfControllerFECValidIntervals=coiIfControllerFECValidIntervals, coiIfOtnNearEndCurrentGroup=coiIfOtnNearEndCurrentGroup, coiFECCurrentPostFECMin=coiFECCurrentPostFECMin, coiIfControllerLoopback=coiIfControllerLoopback, coiOtnFarEndThreshMonType=coiOtnFarEndThreshMonType, coiOtnFarEndCurrentSESRs=coiOtnFarEndCurrentSESRs, coiFECIntervalPostFECAvg=coiFECIntervalPostFECAvg, coiOtnNearEndIntervalEntry=coiOtnNearEndIntervalEntry, coiOtnFarEndCurrentMonType=coiOtnFarEndCurrentMonType, coiOtnFarEndIntervalFCs=coiOtnFarEndIntervalFCs, coiOtnNearEndCurrentBBERs=coiOtnNearEndCurrentBBERs, coiFECThreshIntervalType=coiFECThreshIntervalType, coiOtnNearEndCurrentESs=coiOtnNearEndCurrentESs, coiOtnFarEndIntervalMonType=coiOtnFarEndIntervalMonType, coiFECIntervalPreFECAvg=coiFECIntervalPreFECAvg, coiIfControllerPreFECBERMantissa=coiIfControllerPreFECBERMantissa, ciscoOtnIfMIBCompliance2=ciscoOtnIfMIBCompliance2, coiIfControllerQMargin=coiIfControllerQMargin, coiOtnIfOTUStatus=coiOtnIfOTUStatus, coiOtnNearEndThreshStorageType=coiOtnNearEndThreshStorageType, coiOtnFarEndThresholdsTable=coiOtnFarEndThresholdsTable, coiOtnNearEndIntervalBBEs=coiOtnNearEndIntervalBBEs, coiOtnFarEndThreshIntervalType=coiOtnFarEndThreshIntervalType, coiIfControllerPreFECBERExponent=coiIfControllerPreFECBERExponent, coiOtnNearEndCurrentESRs=coiOtnNearEndCurrentESRs, coiOtnNearEndIntervalUASs=coiOtnNearEndIntervalUASs, ciscoOtnIfMIB=ciscoOtnIfMIB, coiFECCurrentCorByteErrs=coiFECCurrentCorByteErrs, ciscoOtnIfMIBNotifs=ciscoOtnIfMIBNotifs, coiFECIntervalQMarginMax=coiFECIntervalQMarginMax, coiIfOtnFarEndCurrentGroup=coiIfOtnFarEndCurrentGroup, coiDwdmIfFEC=coiDwdmIfFEC, coiOtnNearEndCurrentEntry=coiOtnNearEndCurrentEntry, coiFECCurrentPreFECMax=coiFECCurrentPreFECMax, coiFECCurrentCorBitErrs=coiFECCurrentCorBitErrs, CoiIntervalType=CoiIntervalType, coiOtnNearEndIntervalType=coiOtnNearEndIntervalType, coiOtnNearEndIntervalValidData=coiOtnNearEndIntervalValidData, coiFECIntervalQFactorMax=coiFECIntervalQFactorMax, ciscoOtnIfMIBConformance=ciscoOtnIfMIBConformance, coiOtnNearEndThresholdsTable=coiOtnNearEndThresholdsTable, coiFECIntervalValidData=coiFECIntervalValidData, coiFECIntervalPreFECMin=coiFECIntervalPreFECMin, coiOtnNearEndThresholdType=coiOtnNearEndThresholdType, coiOtnNearEndIntervalSESs=coiOtnNearEndIntervalSESs, coiFECIntervalType=coiFECIntervalType, coiFECIntervalDetZeroErrs=coiFECIntervalDetZeroErrs, coiFECThresholdsEntry=coiFECThresholdsEntry, coiIfControllerTDCOperSetting=coiIfControllerTDCOperSetting, coiOtnFarEndIntervalESs=coiOtnFarEndIntervalESs, coiFECThreshType=coiFECThreshType, ciscoOtnIfMIBCompliance1=ciscoOtnIfMIBCompliance1, coiFECThreshValue=coiFECThreshValue, coiFECIntervalTable=coiFECIntervalTable, coiOtnNearEndThreshMonType=coiOtnNearEndThreshMonType, coiIfOtnNotifGroup=coiIfOtnNotifGroup, coiIfControllerFECMode=coiIfControllerFECMode, CoiOpticalWavelength=CoiOpticalWavelength, coiIfControllerTable=coiIfControllerTable, coiOtnFarEndCurIntervalType=coiOtnFarEndCurIntervalType, coiDwdmIfOtn=coiDwdmIfOtn)
