#
# PySNMP MIB module HUAWEI-ISIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ISIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
huaweiMgmt, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "huaweiMgmt")
isisSysVersion, isisCircLANL2DesISChanges, isisISAdjNeighSysID, isisIPRAEntry, isisSysMaxAreaAddrMismatches, isisSysType, isisSysL1State, isisCircLANL1DesISChanges, isisSysEntry, isisSysLSPL2DbaseOloads, isisSysID, isisSysAuthFails, isisISAdjState, isisSysL2State, isisSysIDFieldLenMismatches, isisSysManAddrDropFromAreas, isisCircEntry, isisCircInitFails, isisSysLSPL1DbaseOloads, isisSysOwnLSPPurges, isisCircAdjChanges, isisSysMaxAreaAddresses, isisSysCorrLSPs, isisCircRejAdjs, isisSysAttmptToExMaxSeqNums, isisSysSeqNumSkips = mibBuilder.importSymbols("ISIS-MIB", "isisSysVersion", "isisCircLANL2DesISChanges", "isisISAdjNeighSysID", "isisIPRAEntry", "isisSysMaxAreaAddrMismatches", "isisSysType", "isisSysL1State", "isisCircLANL1DesISChanges", "isisSysEntry", "isisSysLSPL2DbaseOloads", "isisSysID", "isisSysAuthFails", "isisISAdjState", "isisSysL2State", "isisSysIDFieldLenMismatches", "isisSysManAddrDropFromAreas", "isisCircEntry", "isisCircInitFails", "isisSysLSPL1DbaseOloads", "isisSysOwnLSPPurges", "isisCircAdjChanges", "isisSysMaxAreaAddresses", "isisSysCorrLSPs", "isisCircRejAdjs", "isisSysAttmptToExMaxSeqNums", "isisSysSeqNumSkips")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, NotificationType, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, MibIdentifier, Gauge32, TimeTicks, Bits, ObjectIdentity, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "MibIdentifier", "Gauge32", "TimeTicks", "Bits", "ObjectIdentity", "Integer32", "Counter32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hwISIS = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24))
if mibBuilder.loadTexts: hwISIS.setLastUpdated('200306110000Z')
if mibBuilder.loadTexts: hwISIS.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwISIS.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwISIS.setDescription('The private ISIS MIB contains objects to manage the ISIS routing protocol private objects in pure IP environment.')
class LSPID(TextualConvention, OctetString):
    description = 'ID of an LSP.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class OperState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class OSINSAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

huaweiDatacomm = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25))
hwIsisSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1))
if mibBuilder.loadTexts: hwIsisSystem.setStatus('current')
if mibBuilder.loadTexts: hwIsisSystem.setDescription('ISIS global system information.')
hwIsisSysTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1), )
if mibBuilder.loadTexts: hwIsisSysTable.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysTable.setDescription('The set of instances of the Integrated IS-IS protocol existing on the system.')
hwIsisSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1), )
if mibBuilder.loadTexts: hwIsisSysEntry.setReference('ISIS.poi cLNSISISBasic-P (1)')
isisSysEntry.registerAugmentions(("HUAWEI-ISIS-MIB", "hwIsisSysEntry"))
hwIsisSysEntry.setIndexNames(*isisSysEntry.getIndexNames())
if mibBuilder.loadTexts: hwIsisSysEntry.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysEntry.setDescription('Each row defines Huawei priviate information specific to a single instance of the protocol existing on the system.')
hwIsisSysWrongSysTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisSysWrongSysTypes.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysWrongSysTypes.setDescription('Number of Times Wrong System Types requested for Adjacencies.')
hwIsisSysAuthAreaRecvPwd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisSysAuthAreaRecvPwd1.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysAuthAreaRecvPwd1.setDescription('The value to be used as the Authentication Key in Level 1 Link State Packets receivied from the neighbouring systems, whenever the value of isisSysAuthAreaType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of isisSysAuthAreaType does not modify the hwIsisSysAuthAreaRecvPwd1 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisSysAuthAreaRecvPwd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisSysAuthAreaRecvPwd2.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysAuthAreaRecvPwd2.setDescription('The value to be used as the Authentication Key in Level 1 Link State Packets receivied from the neighbouring systems, whenever the value of isisSysAuthAreaType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of isisSysAuthAreaType does not modify the hwIsisSysAuthAreaRecvPwd2 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisSysAuthAreaRecvPwd3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisSysAuthAreaRecvPwd3.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysAuthAreaRecvPwd3.setDescription('The value to be used as the Authentication Key in Level 1 Link State Packets receivied from the neighbouring systems, whenever the value of isisSysAuthAreaType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of isisSysAuthAreaType does not modify the hwIsisSysAuthAreaRecvPwd3 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisSysAuthDomainRecvPwd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisSysAuthDomainRecvPwd1.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysAuthDomainRecvPwd1.setDescription('The value to be used as the Authentication Key in Level 2 Link State Packets receivied from the neighbouring systems, whenever the value of isisSysDomainAreaType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of isisSysAuthDomainType does not modify the hwIsisSysAuthDomainRecvPwd1 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisSysAuthDomainRecvPwd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisSysAuthDomainRecvPwd2.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysAuthDomainRecvPwd2.setDescription('The value to be used as the Authentication Key in Level 2 Link State Packets receivied from the neighbouring systems, whenever the value of isisSysAuthDomainType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of isisSysAuthDomainType does not modify the hwIsisSysAuthDomainRecvPwd2 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisSysAuthDomainRecvPwd3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisSysAuthDomainRecvPwd3.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysAuthDomainRecvPwd3.setDescription('The value to be used as the Authentication Key in Level 2 Link State Packets receivied from the neighbouring systems, whenever the value of isisSysDomainAreaType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of isisSysAuthDomainType does not modify the hwIsisSysAuthDomainRecvPwd3 value. Reading this object always results in an of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisSysSetLSDBOload = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisSysSetLSDBOload.setStatus('current')
if mibBuilder.loadTexts: hwIsisSysSetLSDBOload.setDescription("Setting this object to 'true' forces the system to set the overload bit in its non-pseudonode LSPs. The result will be that no paths through this system are seen by other systems in the IS-IS area.")
hwIsisCirc = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2))
if mibBuilder.loadTexts: hwIsisCirc.setStatus('current')
if mibBuilder.loadTexts: hwIsisCirc.setDescription('ISIS local circuits information.')
hwIsisCircTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1), )
if mibBuilder.loadTexts: hwIsisCircTable.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircTable.setDescription('The table of circuits used by each instance of Integrated IS-IS on this system.')
hwIsisCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1), )
isisCircEntry.registerAugmentions(("HUAWEI-ISIS-MIB", "hwIsisCircEntry"))
hwIsisCircEntry.setIndexNames(*isisCircEntry.getIndexNames())
if mibBuilder.loadTexts: hwIsisCircEntry.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircEntry.setDescription('An isisCircEntry exists for each circuit used by Integrated IS-IS on this system.')
hwIsisCircFuncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 1), OperState().clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisCircFuncState.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircFuncState.setDescription('The functional state of the circuit. This specifies whether the circuit is currently active or not.')
hwIsisCircLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level12", 3))).clone('level12')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircLevel.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircLevel.setDescription('The level of the circuit. This object follows the replaceOnlyWhileDisabled behaviour. ')
hwIsisCircL1TransPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 3), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircL1TransPassword.setReference(' ')
if mibBuilder.loadTexts: hwIsisCircL1TransPassword.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircL1TransPassword.setDescription('The value to be used as the Authentication Key in Level 1 and Point-to-Point hello packets while transmitting, whenever the corresponding instance of isisCircL1AuthType has a value of plaintext or md5. A modification of the corresponding instance of isisCircL1AuthType does not modify the hwIsisCircL1TransPassword value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisCircL1RecvPassword1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 4), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword1.setReference(' ')
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword1.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword1.setDescription('The value to be used as the Authentication Key in Level 1 and Point-to-Point hello packets that are receivied from the neighboring Systems, whenever the corresponding instance of isisCircL1AuthType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of the corresponding instance of isisCircL1AuthType does not modify the hwIsisCircL1RecvPassword1 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisCircL1RecvPassword2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 5), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword2.setReference(' ')
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword2.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword2.setDescription('The value to be used as the Authentication Key in Level 1 and Point-to-Point hello packets that are receivied from the neighboring Systems, whenever the corresponding instance of isisCircL1AuthType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of the corresponding instance of isisCircL1AuthType does not modify the hwIsisCircL1RecvPassword2 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisCircL1RecvPassword3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 6), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword3.setReference(' ')
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword3.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircL1RecvPassword3.setDescription('The value to be used as the Authentication Key in Level 1 and Point-to-Point hello packets that are receivied from the neighboring Systems, whenever the corresponding instance of isisCircL1AuthType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of the corresponding instance of isisCircL1AuthType does not modify the hwIsisCircL1RecvPassword3 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisCircL2TransPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 7), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircL2TransPassword.setReference(' ')
if mibBuilder.loadTexts: hwIsisCircL2TransPassword.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircL2TransPassword.setDescription('The value to be used as the Authentication Key in Level 2 and Point-to-Point hello packets while transmitting, whenever the corresponding instance of isisCircL2AuthType has a value of plaintext or md5. A modification of the corresponding instance of isisCircL2AuthType does not modify the hwIsisCircL2TransPassword value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisCircL2RecvPassword1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 8), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword1.setReference(' ')
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword1.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword1.setDescription('The value to be used as the Authentication Key in Level 1 and Point-to-Point hello packets that are receivied from the neighboring Systems, whenever the corresponding instance of isisCircL2AuthType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of the corresponding instance of isisCircL2AuthType does not modify the hwIsisCircL2RecvPassword1 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisCircL2RecvPassword2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 9), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword2.setReference(' ')
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword2.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword2.setDescription('The value to be used as the Authentication Key in Level 1 and Point-to-Point hello packets that are receivied from the neighboring Systems, whenever the corresponding instance of isisCircL2AuthType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of the corresponding instance of isisCircL2AuthType does not modify the hwIsisCircL2RecvPassword2 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisCircL2RecvPassword3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 10), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword3.setReference(' ')
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword3.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircL2RecvPassword3.setDescription('The value to be used as the Authentication Key in Level 1 and Point-to-Point hello packets that are receivied from the neighboring Systems, whenever the corresponding instance of isisCircL2AuthType has a value of plaintext or md5. Authentication of the received LSP is successful, when authentication is successful on using any one of the RecvPwd?. A modification of the corresponding instance of isisCircL2AuthType does not modify the hwIsisCircL2RecvPassword3 value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hwIsisCircVersionSkews = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisCircVersionSkews.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircVersionSkews.setDescription('The number of PDUs of different version was received')
hwIsisCircStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisCircStateChanges.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircStateChanges.setDescription('The number of times the circuit has changed the state.')
hwIsisCircAreaMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisCircAreaMismatches.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircAreaMismatches.setDescription('The number PDUs from an unrecognised area was received')
hwIsisIPReachAddr = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 3))
if mibBuilder.loadTexts: hwIsisIPReachAddr.setStatus('current')
if mibBuilder.loadTexts: hwIsisIPReachAddr.setDescription('ISIS local interface IP address information.')
hwIsisIPRATable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 3, 1), )
if mibBuilder.loadTexts: hwIsisIPRATable.setStatus('current')
if mibBuilder.loadTexts: hwIsisIPRATable.setDescription('The table of IP Reachable Addresses to networks, subnetworks or hosts either manually configured or learned from another protocol.')
hwIsisIPRAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 3, 1, 1), )
isisIPRAEntry.registerAugmentions(("HUAWEI-ISIS-MIB", "hwIsisIPRAEntry"))
hwIsisIPRAEntry.setIndexNames(*isisIPRAEntry.getIndexNames())
if mibBuilder.loadTexts: hwIsisIPRAEntry.setStatus('current')
if mibBuilder.loadTexts: hwIsisIPRAEntry.setDescription('Each entry defines an IP Reachable Address to a network, subnetwork or host.')
hwIsisIPRAFuncState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 3, 1, 1, 1), OperState().clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisIPRAFuncState.setStatus('current')
if mibBuilder.loadTexts: hwIsisIPRAFuncState.setDescription('The functional state of the IP reachable address. This specifies whether this RA is active or not.')
hwIsisIPRANextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIsisIPRANextHopAddress.setStatus('current')
if mibBuilder.loadTexts: hwIsisIPRANextHopAddress.setDescription('The Next Hop IP Address to which a PDU may be forwarded in order to reach a destination which matches this IP Reachable Address. This object follows the manualOrAutomatic behaviour.')
hwIsisNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4))
if mibBuilder.loadTexts: hwIsisNotifications.setStatus('current')
if mibBuilder.loadTexts: hwIsisNotifications.setDescription('ISIS trap information.')
hwIsisCorruptedLSPDetected = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 1))
if mibBuilder.loadTexts: hwIsisCorruptedLSPDetected.setStatus('current')
if mibBuilder.loadTexts: hwIsisCorruptedLSPDetected.setDescription('The Corrupted LSP Detected Notification is generated when a corrupted Link State PDU is detected in memory. ')
hwIsisCorruptedLSPReceived = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 2)).setObjects(("HUAWEI-ISIS-MIB", "hwIsisTrapCorruptedLSPID"), ("ISIS-MIB", "isisSysCorrLSPs"))
if mibBuilder.loadTexts: hwIsisCorruptedLSPReceived.setStatus('current')
if mibBuilder.loadTexts: hwIsisCorruptedLSPReceived.setDescription('The Corrupted LSP Received Notification is generated when a corrupted Link State PDU is Received. The occurance of this event is counted by the isisSysCorrLSPscounter.')
hwIsisLSPL1DatabaseOverload = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 3)).setObjects(("ISIS-MIB", "isisSysL1State"), ("ISIS-MIB", "isisSysID"), ("ISIS-MIB", "isisSysLSPL1DbaseOloads"))
if mibBuilder.loadTexts: hwIsisLSPL1DatabaseOverload.setStatus('current')
if mibBuilder.loadTexts: hwIsisLSPL1DatabaseOverload.setDescription('The LSP L1 Database Overload Notification is generated when the l1State of the system changes between On and Waiting or Waiting and On. The isisSysL1State argument is set to indicate the resulting state, and in the case of Waiting the isisSysID is set to indicate the source of the LSP which precipitated the overload. The occurance of this event is counted by the isisSysLSPL1DbaseOloads counter.')
hwIsisLSPL2DatabaseOverload = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 4)).setObjects(("ISIS-MIB", "isisSysL2State"), ("ISIS-MIB", "isisSysID"), ("ISIS-MIB", "isisSysLSPL2DbaseOloads"))
if mibBuilder.loadTexts: hwIsisLSPL2DatabaseOverload.setStatus('current')
if mibBuilder.loadTexts: hwIsisLSPL2DatabaseOverload.setDescription('The LSP L2 Database Overload Notification is generated when the l2State of the system changes between On and Waiting or Waiting and On. The isisSysL2State argument is set to indicate the resulting state, and in the case of Waiting the isisSysID is set to indicate the source of the LSP which precipitated the overload. The occurance of this event is counted by the isisSysLSPL2DbaseOloads counter.')
hwIsisAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 5)).setObjects(("ISIS-MIB", "isisISAdjNeighSysID"), ("HUAWEI-ISIS-MIB", "hwIsisTrapAuthErrorType"), ("HUAWEI-ISIS-MIB", "hwIsisTrapAuthErrorInfo"), ("ISIS-MIB", "isisSysAuthFails"))
if mibBuilder.loadTexts: hwIsisAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: hwIsisAuthenticationFailure.setDescription('Generated when a PDU is received with an incorrect Authentication information field')
hwIsisWrongSysType = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 6)).setObjects(("ISIS-MIB", "isisSysID"), ("ISIS-MIB", "isisSysType"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdSysType"), ("HUAWEI-ISIS-MIB", "hwIsisSysWrongSysTypes"))
if mibBuilder.loadTexts: hwIsisWrongSysType.setStatus('current')
if mibBuilder.loadTexts: hwIsisWrongSysType.setDescription('Generated when a Adjacency Request for Wrong/unsupported adjacency type is made.')
hwIsisVersionSkew = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 7)).setObjects(("ISIS-MIB", "isisSysVersion"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdVersion"), ("HUAWEI-ISIS-MIB", "hwIsisCircVersionSkews"))
if mibBuilder.loadTexts: hwIsisVersionSkew.setStatus('current')
if mibBuilder.loadTexts: hwIsisVersionSkew.setDescription('Generated when a PDU of Wrong/different version is received')
hwIsisIDFieldLengthMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 8)).setObjects(("HUAWEI-ISIS-MIB", "hwIsisTrapSysIDLength"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdSysIDLength"), ("ISIS-MIB", "isisSysIDFieldLenMismatches"))
if mibBuilder.loadTexts: hwIsisIDFieldLengthMismatch.setStatus('current')
if mibBuilder.loadTexts: hwIsisIDFieldLengthMismatch.setDescription('The hwIsisIDFieldLengthMismatch Notification is generated when a PDU is received with a different value for ID field length to that of the receiving Intermediate system. The occurance of this event is counted by the isisSysIDFieldLenMismatches.')
hwIsisAreaMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 9)).setObjects(("ISIS-MIB", "isisSysID"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdAreaAddr"), ("HUAWEI-ISIS-MIB", "hwIsisCircAreaMismatches"))
if mibBuilder.loadTexts: hwIsisAreaMismatch.setStatus('current')
if mibBuilder.loadTexts: hwIsisAreaMismatch.setDescription('Generated when a PDU is received from Wrong/different area not recognised by this system')
hwIsisMaxAreaAddrMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 10)).setObjects(("ISIS-MIB", "isisSysID"), ("ISIS-MIB", "isisSysMaxAreaAddresses"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdMaxAreaAddr"), ("ISIS-MIB", "isisSysMaxAreaAddrMismatches"))
if mibBuilder.loadTexts: hwIsisMaxAreaAddrMismatch.setStatus('current')
if mibBuilder.loadTexts: hwIsisMaxAreaAddrMismatch.setDescription('Generated when a PDU is received from Wrong/different area not recognised by this system')
hwIsisManualAddressDroppedFromArea = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 11)).setObjects(("HUAWEI-ISIS-MIB", "hwIsisTrapDroppedAreaAddr"), ("ISIS-MIB", "isisSysManAddrDropFromAreas"))
if mibBuilder.loadTexts: hwIsisManualAddressDroppedFromArea.setStatus('current')
if mibBuilder.loadTexts: hwIsisManualAddressDroppedFromArea.setDescription('The Manual Address Dropped From Area Notification is generated when one of the manualAreaAddresses (specified on this system) is ignored when computing partitionAreaAddresses or areaAddresses because there are more than MaximumAreaAddresses distinct Area Addresses. The hwIsisTrapDroppedAreaAddr argument is set to the ignored Area Address. It is generated once for each Area Address in manualAreaAddresses which is dropped. The occurance of this event is counted by the isisSysManAddrDropFromAreas counter.')
hwIsisAttemptToExceedMaximumSequenceNumber = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 12)).setObjects(("ISIS-MIB", "isisSysAttmptToExMaxSeqNums"))
if mibBuilder.loadTexts: hwIsisAttemptToExceedMaximumSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: hwIsisAttemptToExceedMaximumSequenceNumber.setDescription('The Attempt To Exceed Maximum Sequence Number Notification is generated when an attempt is made to increment the sequence number of an LSP beyond the maximum sequence number. Following the generation of this event the operation of the Routeing state machine shall be disabled for atleast (MaxAge + ZeroAgeLifetime) seconds. The occurance of this event is counted by the isisSysAttmptToExMaxSeqNums counter.')
hwIsisSequenceNumberSkip = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 13)).setObjects(("ISIS-MIB", "isisSysSeqNumSkips"))
if mibBuilder.loadTexts: hwIsisSequenceNumberSkip.setStatus('current')
if mibBuilder.loadTexts: hwIsisSequenceNumberSkip.setDescription('The Sequence Number Skipped Notification is generated when the sequence number of an LSP is incremented by more than one. The occurance of this event is counted by the isisSysSeqNumSkips counter.')
hwIsisOwnLSPPurge = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 14)).setObjects(("ISIS-MIB", "isisSysOwnLSPPurges"))
if mibBuilder.loadTexts: hwIsisOwnLSPPurge.setStatus('current')
if mibBuilder.loadTexts: hwIsisOwnLSPPurge.setDescription("The Own LSP Purged Notification is generated when a zero aged copy of a system's own LSP is received from some other system. This represents an erroneous attempt to purge the local system's LSP. The occurance of this event is counted by the isisSysOwnLSPPurges counter.")
hwIsisCircuitChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 15)).setObjects(("HUAWEI-ISIS-MIB", "hwIsisCircFuncState"), ("HUAWEI-ISIS-MIB", "hwIsisCircStateChanges"))
if mibBuilder.loadTexts: hwIsisCircuitChange.setStatus('current')
if mibBuilder.loadTexts: hwIsisCircuitChange.setDescription('The Circuit Change Notification is generated when the state of the Circuit changes from On to Off or from Off to On. The relative order of events relating to the same Circuit must be preserved.')
hwIsisAdjacencyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 16)).setObjects(("ISIS-MIB", "isisISAdjState"), ("ISIS-MIB", "isisCircAdjChanges"), ("ISIS-MIB", "isisISAdjNeighSysID"))
if mibBuilder.loadTexts: hwIsisAdjacencyStateChange.setStatus('current')
if mibBuilder.loadTexts: hwIsisAdjacencyStateChange.setDescription('The Adjacency State Change Notification is generated when the state of an Adjacency on the Circuit changes from Up to Down or Down to Up. For these purposes the states Up and Up/dormant are considered to be Up, and any other state is considered to be Down. The occurance of this event is counted by the isisCircAdjChanges counter.')
hwIsisInitializationFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 17)).setObjects(("ISIS-MIB", "isisISAdjNeighSysID"), ("ISIS-MIB", "isisCircInitFails"))
if mibBuilder.loadTexts: hwIsisInitializationFailure.setStatus('current')
if mibBuilder.loadTexts: hwIsisInitializationFailure.setDescription('The Initialisation Failure Notification is generated when an attempt to initialise with an adjacent system fails as a result of either Version Skew or Area Mismatch. In the case of Version Skew, the Adjacent system argument is not present. The occurance of this event is counted by the isisCircInitFails counter.')
hwIsisRejectedAdjacency = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 18)).setObjects(("ISIS-MIB", "isisISAdjNeighSysID"), ("ISIS-MIB", "isisCircRejAdjs"))
if mibBuilder.loadTexts: hwIsisRejectedAdjacency.setStatus('current')
if mibBuilder.loadTexts: hwIsisRejectedAdjacency.setDescription('The Rejected Adjacency Notification is generated when an attempt to create a new adjacency is rejected, because of a lack of resources. The occurance of this event is counted by the isisCircRejAdjs counter.')
hwIsisLanL1DesignatedIntermediateSystemChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 19)).setObjects(("ISIS-MIB", "isisCircLANL1DesISChanges"))
if mibBuilder.loadTexts: hwIsisLanL1DesignatedIntermediateSystemChange.setStatus('current')
if mibBuilder.loadTexts: hwIsisLanL1DesignatedIntermediateSystemChange.setDescription('The LAN L1 Designated Intermediate System Change Notification is generated when the local system either elects itself or resigns as being the LAN L1 Designated Intermediate System on this circuit. The relative order of these events must be preserved. The occurance of this event is counted by the isisCircLANL1DesISChanges counter.')
hwIsisLanL2DesignatedIntermediateSystemChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 4, 20)).setObjects(("ISIS-MIB", "isisCircLANL2DesISChanges"))
if mibBuilder.loadTexts: hwIsisLanL2DesignatedIntermediateSystemChange.setStatus('current')
if mibBuilder.loadTexts: hwIsisLanL2DesignatedIntermediateSystemChange.setDescription('The LAN L2 Designated Intermediate System Change Notification is generated when the local system either elects itself or resigns as being the LAN L2 Designated Intermediate System on this circuit. The relative order of these events must be preserved. The occurance of this event is counted by the isisCircLANL2DesISChanges counter.')
hwIsisTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5), )
if mibBuilder.loadTexts: hwIsisTrapTable.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapTable.setDescription('The set of Values needed for trap support.')
hwIsisTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1), ).setIndexNames((0, "HUAWEI-ISIS-MIB", "hwIsisTrapSysInstance"))
if mibBuilder.loadTexts: hwIsisTrapEntry.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapEntry.setDescription('Each row defines information specific to a Trap information')
hwIsisTrapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwIsisTrapSysInstance.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
hwIsisTrapDroppedAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 2), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapDroppedAreaAddr.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapDroppedAreaAddr.setDescription('The Area Address that was dropped by the system when the count of area addresses exceeded the Maximum .')
hwIsisTrapCorruptedLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 3), LSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapCorruptedLSPID.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapCorruptedLSPID.setDescription('The ID of the LSP that was found to be Corrupted.')
hwIsisTrapSysIDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapSysIDLength.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapSysIDLength.setDescription('The Length of the SystemID of current system.')
hwIsisTrapRecdSysIDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapRecdSysIDLength.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapRecdSysIDLength.setDescription('The Receined systemID Length')
hwIsisTrapRecdAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 6), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapRecdAreaAddr.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapRecdAreaAddr.setDescription('The Received Area Address')
hwIsisTrapAuthErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapAuthErrorType.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapAuthErrorType.setDescription('The type of Authentication Error.')
hwIsisTrapAuthErrorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapAuthErrorInfo.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapAuthErrorInfo.setDescription('The Information Pertaining to the Authentication error.')
hwIsisTrapRecdSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapRecdSysType.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapRecdSysType.setDescription('The Received system Type.')
hwIsisTrapRecdVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapRecdVersion.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapRecdVersion.setDescription('The version number of the IS-IS protocol that was received.')
hwIsisTrapRecdMaxAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIsisTrapRecdMaxAreaAddr.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapRecdMaxAreaAddr.setDescription('The Max Area Address Count in a received PDU.')
hwIsisConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 6))
hwIsisCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 6, 1))
hwIsisCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 6, 1, 1)).setObjects(("HUAWEI-ISIS-MIB", "hwIsisGroup"), ("HUAWEI-ISIS-MIB", "hwIsisNotificationGroup"), ("HUAWEI-ISIS-MIB", "hwIsisTrapInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIsisCompliance = hwIsisCompliance.setStatus('current')
if mibBuilder.loadTexts: hwIsisCompliance.setDescription('The compliance statement for entities implementing the Huawei ISIS MIB')
hwIsisGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 6, 2))
hwIsisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 6, 2, 1)).setObjects(("HUAWEI-ISIS-MIB", "hwIsisSysWrongSysTypes"), ("HUAWEI-ISIS-MIB", "hwIsisSysAuthAreaRecvPwd1"), ("HUAWEI-ISIS-MIB", "hwIsisSysAuthAreaRecvPwd2"), ("HUAWEI-ISIS-MIB", "hwIsisSysAuthAreaRecvPwd3"), ("HUAWEI-ISIS-MIB", "hwIsisSysAuthDomainRecvPwd1"), ("HUAWEI-ISIS-MIB", "hwIsisSysAuthDomainRecvPwd2"), ("HUAWEI-ISIS-MIB", "hwIsisSysAuthDomainRecvPwd3"), ("HUAWEI-ISIS-MIB", "hwIsisSysSetLSDBOload"), ("HUAWEI-ISIS-MIB", "hwIsisCircFuncState"), ("HUAWEI-ISIS-MIB", "hwIsisCircLevel"), ("HUAWEI-ISIS-MIB", "hwIsisCircL1TransPassword"), ("HUAWEI-ISIS-MIB", "hwIsisCircL1RecvPassword1"), ("HUAWEI-ISIS-MIB", "hwIsisCircL1RecvPassword2"), ("HUAWEI-ISIS-MIB", "hwIsisCircL1RecvPassword3"), ("HUAWEI-ISIS-MIB", "hwIsisCircL2TransPassword"), ("HUAWEI-ISIS-MIB", "hwIsisCircL2RecvPassword1"), ("HUAWEI-ISIS-MIB", "hwIsisCircL2RecvPassword2"), ("HUAWEI-ISIS-MIB", "hwIsisCircL2RecvPassword3"), ("HUAWEI-ISIS-MIB", "hwIsisCircVersionSkews"), ("HUAWEI-ISIS-MIB", "hwIsisCircStateChanges"), ("HUAWEI-ISIS-MIB", "hwIsisCircAreaMismatches"), ("HUAWEI-ISIS-MIB", "hwIsisIPRAFuncState"), ("HUAWEI-ISIS-MIB", "hwIsisIPRANextHopAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIsisGroup = hwIsisGroup.setStatus('current')
if mibBuilder.loadTexts: hwIsisGroup.setDescription('A collection of objects.')
hwIsisNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 6, 2, 2)).setObjects(("HUAWEI-ISIS-MIB", "hwIsisCorruptedLSPDetected"), ("HUAWEI-ISIS-MIB", "hwIsisCorruptedLSPReceived"), ("HUAWEI-ISIS-MIB", "hwIsisLSPL1DatabaseOverload"), ("HUAWEI-ISIS-MIB", "hwIsisLSPL2DatabaseOverload"), ("HUAWEI-ISIS-MIB", "hwIsisAuthenticationFailure"), ("HUAWEI-ISIS-MIB", "hwIsisWrongSysType"), ("HUAWEI-ISIS-MIB", "hwIsisVersionSkew"), ("HUAWEI-ISIS-MIB", "hwIsisIDFieldLengthMismatch"), ("HUAWEI-ISIS-MIB", "hwIsisAreaMismatch"), ("HUAWEI-ISIS-MIB", "hwIsisMaxAreaAddrMismatch"), ("HUAWEI-ISIS-MIB", "hwIsisManualAddressDroppedFromArea"), ("HUAWEI-ISIS-MIB", "hwIsisAttemptToExceedMaximumSequenceNumber"), ("HUAWEI-ISIS-MIB", "hwIsisSequenceNumberSkip"), ("HUAWEI-ISIS-MIB", "hwIsisOwnLSPPurge"), ("HUAWEI-ISIS-MIB", "hwIsisCircuitChange"), ("HUAWEI-ISIS-MIB", "hwIsisAdjacencyStateChange"), ("HUAWEI-ISIS-MIB", "hwIsisInitializationFailure"), ("HUAWEI-ISIS-MIB", "hwIsisRejectedAdjacency"), ("HUAWEI-ISIS-MIB", "hwIsisLanL1DesignatedIntermediateSystemChange"), ("HUAWEI-ISIS-MIB", "hwIsisLanL2DesignatedIntermediateSystemChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIsisNotificationGroup = hwIsisNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwIsisNotificationGroup.setDescription('A collection of isis notification objects.')
hwIsisTrapInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 24, 6, 2, 3)).setObjects(("HUAWEI-ISIS-MIB", "hwIsisTrapDroppedAreaAddr"), ("HUAWEI-ISIS-MIB", "hwIsisTrapCorruptedLSPID"), ("HUAWEI-ISIS-MIB", "hwIsisTrapSysIDLength"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdSysIDLength"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdAreaAddr"), ("HUAWEI-ISIS-MIB", "hwIsisTrapAuthErrorType"), ("HUAWEI-ISIS-MIB", "hwIsisTrapAuthErrorInfo"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdSysType"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdVersion"), ("HUAWEI-ISIS-MIB", "hwIsisTrapRecdMaxAreaAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIsisTrapInfoGroup = hwIsisTrapInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwIsisTrapInfoGroup.setDescription('A collection of objects providing trap records.')
mibBuilder.exportSymbols("HUAWEI-ISIS-MIB", hwIsisCircAreaMismatches=hwIsisCircAreaMismatches, hwIsisRejectedAdjacency=hwIsisRejectedAdjacency, hwIsisSysAuthAreaRecvPwd2=hwIsisSysAuthAreaRecvPwd2, hwIsisSequenceNumberSkip=hwIsisSequenceNumberSkip, hwIsisNotifications=hwIsisNotifications, hwIsisLSPL2DatabaseOverload=hwIsisLSPL2DatabaseOverload, hwIsisSysEntry=hwIsisSysEntry, hwIsisCircL2RecvPassword3=hwIsisCircL2RecvPassword3, hwIsisCircL1RecvPassword2=hwIsisCircL1RecvPassword2, hwIsisLSPL1DatabaseOverload=hwIsisLSPL1DatabaseOverload, hwIsisTrapRecdVersion=hwIsisTrapRecdVersion, hwIsisLanL1DesignatedIntermediateSystemChange=hwIsisLanL1DesignatedIntermediateSystemChange, LSPID=LSPID, hwIsisTrapSysIDLength=hwIsisTrapSysIDLength, hwISIS=hwISIS, hwIsisTrapRecdAreaAddr=hwIsisTrapRecdAreaAddr, hwIsisCompliance=hwIsisCompliance, hwIsisTrapInfoGroup=hwIsisTrapInfoGroup, hwIsisTrapAuthErrorInfo=hwIsisTrapAuthErrorInfo, hwIsisCircuitChange=hwIsisCircuitChange, hwIsisTrapTable=hwIsisTrapTable, hwIsisGroup=hwIsisGroup, hwIsisSysWrongSysTypes=hwIsisSysWrongSysTypes, hwIsisSysAuthDomainRecvPwd1=hwIsisSysAuthDomainRecvPwd1, hwIsisSysAuthDomainRecvPwd2=hwIsisSysAuthDomainRecvPwd2, hwIsisCircVersionSkews=hwIsisCircVersionSkews, hwIsisNotificationGroup=hwIsisNotificationGroup, hwIsisTrapDroppedAreaAddr=hwIsisTrapDroppedAreaAddr, hwIsisVersionSkew=hwIsisVersionSkew, hwIsisCorruptedLSPReceived=hwIsisCorruptedLSPReceived, hwIsisSysAuthDomainRecvPwd3=hwIsisSysAuthDomainRecvPwd3, hwIsisCircFuncState=hwIsisCircFuncState, hwIsisIPReachAddr=hwIsisIPReachAddr, hwIsisCircL2RecvPassword2=hwIsisCircL2RecvPassword2, hwIsisOwnLSPPurge=hwIsisOwnLSPPurge, hwIsisAreaMismatch=hwIsisAreaMismatch, hwIsisSysTable=hwIsisSysTable, hwIsisCompliances=hwIsisCompliances, hwIsisMaxAreaAddrMismatch=hwIsisMaxAreaAddrMismatch, hwIsisCircL2TransPassword=hwIsisCircL2TransPassword, hwIsisInitializationFailure=hwIsisInitializationFailure, hwIsisLanL2DesignatedIntermediateSystemChange=hwIsisLanL2DesignatedIntermediateSystemChange, hwIsisCircL1TransPassword=hwIsisCircL1TransPassword, hwIsisIPRAEntry=hwIsisIPRAEntry, PYSNMP_MODULE_ID=hwISIS, hwIsisAttemptToExceedMaximumSequenceNumber=hwIsisAttemptToExceedMaximumSequenceNumber, hwIsisIPRAFuncState=hwIsisIPRAFuncState, hwIsisIPRANextHopAddress=hwIsisIPRANextHopAddress, hwIsisCircStateChanges=hwIsisCircStateChanges, hwIsisTrapRecdSysIDLength=hwIsisTrapRecdSysIDLength, huaweiDatacomm=huaweiDatacomm, hwIsisTrapEntry=hwIsisTrapEntry, hwIsisTrapAuthErrorType=hwIsisTrapAuthErrorType, hwIsisCircL1RecvPassword3=hwIsisCircL1RecvPassword3, hwIsisCirc=hwIsisCirc, hwIsisCircL1RecvPassword1=hwIsisCircL1RecvPassword1, hwIsisIDFieldLengthMismatch=hwIsisIDFieldLengthMismatch, hwIsisIPRATable=hwIsisIPRATable, hwIsisSysAuthAreaRecvPwd1=hwIsisSysAuthAreaRecvPwd1, hwIsisSysAuthAreaRecvPwd3=hwIsisSysAuthAreaRecvPwd3, OSINSAddress=OSINSAddress, hwIsisGroups=hwIsisGroups, OperState=OperState, hwIsisConformance=hwIsisConformance, hwIsisCorruptedLSPDetected=hwIsisCorruptedLSPDetected, hwIsisAuthenticationFailure=hwIsisAuthenticationFailure, hwIsisManualAddressDroppedFromArea=hwIsisManualAddressDroppedFromArea, hwIsisSystem=hwIsisSystem, hwIsisTrapRecdSysType=hwIsisTrapRecdSysType, hwIsisTrapRecdMaxAreaAddr=hwIsisTrapRecdMaxAreaAddr, hwIsisTrapCorruptedLSPID=hwIsisTrapCorruptedLSPID, hwIsisCircLevel=hwIsisCircLevel, hwIsisAdjacencyStateChange=hwIsisAdjacencyStateChange, hwIsisCircL2RecvPassword1=hwIsisCircL2RecvPassword1, hwIsisTrapSysInstance=hwIsisTrapSysInstance, hwIsisWrongSysType=hwIsisWrongSysType, hwIsisCircEntry=hwIsisCircEntry, hwIsisCircTable=hwIsisCircTable, hwIsisSysSetLSDBOload=hwIsisSysSetLSDBOload)
