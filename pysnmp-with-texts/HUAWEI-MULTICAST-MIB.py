#
# PySNMP MIB module HUAWEI-MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MULTICAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hwL2VlanIndex, hwL2VlanDescr = mibBuilder.importSymbols("HUAWEI-L2VLAN-MIB", "hwL2VlanIndex", "hwL2VlanDescr")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
Ipv6IfIndexOrZero, Ipv6Address = mibBuilder.importSymbols("IPV6-TC", "Ipv6IfIndexOrZero", "Ipv6Address")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Integer32, Counter64, Gauge32, ModuleIdentity, IpAddress, iso, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Counter64", "Gauge32", "ModuleIdentity", "IpAddress", "iso", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Counter32", "Bits")
DisplayString, RowStatus, MacAddress, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TextualConvention", "TruthValue")
hwMultiCastMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44))
if mibBuilder.loadTexts: hwMultiCastMIB.setLastUpdated('200508220000Z')
if mibBuilder.loadTexts: hwMultiCastMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwMultiCastMIB.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwMultiCastMIB.setDescription('The MIB module for IGMP Snooping feature. Internet Group Management Protocol (IGMP) is the protocol used by IPv4 end hosts to indicate their interest in receiving multicast traffic for certain multicast groups to neighboring multicast routers. IGMP Snooping is a switch protocol. A switch that implements IGMP Snooping listens to the IGMP messages exchanged between the hosts and router, then provides selective transmission of multicast traffic based on multicast mac destination address or multicast group address.')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class VlanIndex(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class VlanIndexOrZero(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header. 0:all vlans'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )
class PortFlag(TextualConvention, Integer32):
    description = 'type that port created: none(0):not host port or not router port, dynamic(1) : dynamic learn, static(2) : static config, staticANDdynamic(3): dynamic and static'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("dynamic", 1), ("static", 2), ("staticANDdynamic", 3))

hwIGSPMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1))
hwIGSPSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1))
hwVlanCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2))
hwStatisticsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3))
hwMCGrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4))
hwPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5))
hwIgmpSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIgmpSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: hwIgmpSnoopingEnabled.setDescription('This object indicates whether IGMP Snooping has been enabled for the system.')
hwSsmPolicyAclNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(2000, 2999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSsmPolicyAclNum.setStatus('current')
if mibBuilder.loadTexts: hwSsmPolicyAclNum.setDescription('The ACL Number which is used to limit the ssm(specific source multicast) ip address scale 2000: the minimum acl number 2999: the maximum acl number -1: unvalid value ')
hwSendQueryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSendQueryEnabled.setStatus('current')
if mibBuilder.loadTexts: hwSendQueryEnabled.setDescription('This object indicates whether send query function has been enabled for the system.')
hwSendQuerySourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSendQuerySourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwSendQuerySourceIpAddr.setDescription("This object indicates sended IGMP query packet's source ip address. 223.255.255.255: the maximum ip")
hwSnmpTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSnmpTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hwSnmpTrapEnable.setDescription('This object indicates the SNMP trap switch is whether open or not.')
hwIgmpSnoopingSuppressionTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIgmpSnoopingSuppressionTime.setStatus('current')
if mibBuilder.loadTexts: hwIgmpSnoopingSuppressionTime.setDescription('This object indicates IGMP snooping suppression time, range from integer 0 to 300, the default value is 10, 0 means not suppress IGMP packets. ')
hwIgmpProxyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIgmpProxyEnabled.setStatus('current')
if mibBuilder.loadTexts: hwIgmpProxyEnabled.setDescription('This object indicates whether IGMP Proxy has been enabled for system.')
hwIgmpSnoopingProxyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 1, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIgmpSnoopingProxyEnabled.setStatus('current')
if mibBuilder.loadTexts: hwIgmpSnoopingProxyEnabled.setDescription('This object indicates whether IGMP snooping proxy has been enabled for system.')
hwVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1), )
if mibBuilder.loadTexts: hwVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwVlanCfgTable.setDescription('Table contains VLAN based configuration information for IGMP Snooping.')
hwVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwVlanIndex"))
if mibBuilder.loadTexts: hwVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwVlanCfgEntry.setDescription('An entry is created for each active VLAN in the device and deleted when the VLAN becomes inactive.')
hwVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwVlanIndex.setDescription('This object indicates the VLAN in which IGMP Snooping is configured.')
hwVlanIgmpSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIgmpSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpSnoopingEnabled.setDescription("When this object is set to 'enabled(1)' IGMP Snooping is enabled on this VLAN else disabled.")
hwVlanRouterAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanRouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwVlanRouterAgingTime.setDescription('Unit:second. Configure the aging time of the router port. 0:180s or holdtime in hello')
hwVlanMaxQueryRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMaxQueryRespTime.setStatus('current')
if mibBuilder.loadTexts: hwVlanMaxQueryRespTime.setDescription('Unit:second.Configure the maximum query response time.')
hwVlanLastMemQueryInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanLastMemQueryInt.setStatus('current')
if mibBuilder.loadTexts: hwVlanLastMemQueryInt.setDescription('Unit:second.Configure the last member query interval.')
hwVlanQueryInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanQueryInt.setStatus('current')
if mibBuilder.loadTexts: hwVlanQueryInt.setDescription('Unit:second.Configure the query interval.')
hwVlanRobustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanRobustCount.setStatus('current')
if mibBuilder.loadTexts: hwVlanRobustCount.setDescription('Configure the IGMP robust count.')
hwVlanCheckRouterAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanCheckRouterAlert.setStatus('current')
if mibBuilder.loadTexts: hwVlanCheckRouterAlert.setDescription(" When this object is set to 'true' ,Received IGMP messages must contain the IP Router Alert option in their IPheader. Ignore IGMP messages without Router Alert options ,and require that routers not forward these messages.")
hwVlanSendRouterAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanSendRouterAlert.setStatus('current')
if mibBuilder.loadTexts: hwVlanSendRouterAlert.setDescription("When this object is set to 'true' ,Sended IGMP messages must contain the IP Router Alert option in their IPheader.")
hwVlanIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpV1", 1), ("igmpV2", 2), ("igmpV3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpVersion.setDescription('The object indicates that igmp snooping can handle the hightest IGMP version ')
hwVlanPromptLeaveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanPromptLeaveEnable.setStatus('current')
if mibBuilder.loadTexts: hwVlanPromptLeaveEnable.setDescription(' Prompt Leave Enable or disable')
hwVlanPromptLeaveAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanPromptLeaveAclNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanPromptLeaveAclNum.setDescription('The ACL Number which is used to limit the scope of prompt leave group 2000: the minimum acl number 3999: the maximum acl number -1: unvalid value')
hwVlanDropUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 13), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanDropUnknown.setStatus('current')
if mibBuilder.loadTexts: hwVlanDropUnknown.setDescription("When this object is set to 'enabled(1)' Unknown stream is droped on this VLAN else disabled.")
hwVlanLimitAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 1, 1, 14), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanLimitAction.setStatus('current')
if mibBuilder.loadTexts: hwVlanLimitAction.setDescription("When this object is set to 'enabled(1)' table limit action on port.")
hwVlanIgmpProxyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2), )
if mibBuilder.loadTexts: hwVlanIgmpProxyTable.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpProxyTable.setDescription('Table contains VLAN based configuration information for IGMP Proxy.')
hwVlanIgmpProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwVlanIgmpProxyIndex"))
if mibBuilder.loadTexts: hwVlanIgmpProxyEntry.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpProxyEntry.setDescription('IGMP Proxy table entry.')
hwVlanIgmpProxyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwVlanIgmpProxyIndex.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpProxyIndex.setDescription('This object indicates the VLAN in which IGMP Proxy is configured.')
hwVlanIgmpProxyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 2), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIgmpProxyEnabled.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpProxyEnabled.setDescription('This object indicates enable or disable IGMP Proxy.')
hwVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanQueryInterval.setStatus('current')
if mibBuilder.loadTexts: hwVlanQueryInterval.setDescription('IGMP query interval.')
hwVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: hwVlanMaxResponseTime.setDescription('Maximum query response time.')
hwVlanLastMemQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanLastMemQueryInterval.setStatus('current')
if mibBuilder.loadTexts: hwVlanLastMemQueryInterval.setDescription('Last member query interval.')
hwVlanIgmpRouterAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIgmpRouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpRouterAgingTime.setDescription('Specify router port aging time.')
hwVlanMaxIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMaxIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: hwVlanMaxIgmpVersion.setDescription('Specify the highest IGMP version to deal, 1:IGMP V1, 2:IGMP v1 and IGMP v2.')
hwVlanIgmpRobustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIgmpRobustCount.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpRobustCount.setDescription('Robust coefficient.')
hwVlanRequireRouterAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 9), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanRequireRouterAlert.setStatus('current')
if mibBuilder.loadTexts: hwVlanRequireRouterAlert.setDescription("When this object is set to 'true' ,Received IGMP messages must contain the IP Router Alert option in their IPheader. Ignore IGMP messages without Router Alert options ,and require that routers not forward these messages.")
hwVlanIgmpSendRouterAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 10), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIgmpSendRouterAlert.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpSendRouterAlert.setDescription("When this object is set to 'true' ,Sended IGMP messages must contain the IP Router Alert option in their Ipheader.")
hwVlanIgmpPromptLeaveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 2, 1, 11), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIgmpPromptLeaveEnable.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpPromptLeaveEnable.setDescription("Indicates whether enable 'Quick leave'.")
hwL2McastVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 3), )
if mibBuilder.loadTexts: hwL2McastVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwL2McastVlanCfgTable.setDescription('Table to config L2 multicast.')
hwL2McastVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 3, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwL2McastVlanIndex"))
if mibBuilder.loadTexts: hwL2McastVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2McastVlanCfgEntry.setDescription('This object indicates the VLAN in which Multicast is configured.')
hwL2McastVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwL2McastVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2McastVlanIndex.setDescription('This object indicates the VLAN in which Multicast is configured.')
hwVlanL2FlowTriggerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 3, 1, 2), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanL2FlowTriggerEnabled.setStatus('current')
if mibBuilder.loadTexts: hwVlanL2FlowTriggerEnabled.setDescription('This object indicates whether flow trigger was enabled.')
hwVlanL2StaticFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanL2StaticFlow.setStatus('current')
if mibBuilder.loadTexts: hwVlanL2StaticFlow.setDescription('configure static flow.')
hwSystemStatisticsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1))
hwSystemRecvVlanUpEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvVlanUpEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvVlanUpEventTimes.setDescription('The statistics of vlan up event.')
hwSystemRecvVlanDownEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvVlanDownEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvVlanDownEventTimes.setDescription('The statistics of vlan down event.')
hwSystemRecvVlanDelEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvVlanDelEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvVlanDelEventTimes.setDescription('The statistics of vlan del event.')
hwSystemRecvPortUpEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvPortUpEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvPortUpEventTimes.setDescription('The statistics of port up event.')
hwSystemRecvPortDownEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvPortDownEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvPortDownEventTimes.setDescription('The statistics of port down event.')
hwSystemRecvPortDelEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvPortDelEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvPortDelEventTimes.setDescription('The statistics of port del event.')
hwSystemRecvPortIncEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvPortIncEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvPortIncEventTimes.setDescription('The statistics of port joined in vlan event.')
hwSystemRecvPortExcEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvPortExcEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvPortExcEventTimes.setDescription('The statistics of port deleted from vlan event.')
hwSystemRecvMSTPBlockEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvMSTPBlockEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvMSTPBlockEventTimes.setDescription('The statistics of mstp port from forwarding to blocked event.')
hwSystemRecvMSTPForwardEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvMSTPForwardEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvMSTPForwardEventTimes.setDescription('The statistics of mstp port from blocked to forwarding event.')
hwSystemIGMPSysClearStats = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSystemIGMPSysClearStats.setStatus('current')
if mibBuilder.loadTexts: hwSystemIGMPSysClearStats.setDescription('The configuration to clear the statistics of system statics')
hwSystemIGMPPacketClearStats = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSystemIGMPPacketClearStats.setStatus('current')
if mibBuilder.loadTexts: hwSystemIGMPPacketClearStats.setDescription('The configuration to clear the statistics of all vlan IGMP packets')
hwSystemRecvLinkChangeEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSystemRecvLinkChangeEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwSystemRecvLinkChangeEventTimes.setDescription('The statistics of link change event.')
hwVlanStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2), )
if mibBuilder.loadTexts: hwVlanStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwVlanStatisticsTable.setDescription('.')
hwVlanStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwVlanStatsVlanIndex"))
if mibBuilder.loadTexts: hwVlanStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwVlanStatisticsEntry.setDescription('.')
hwVlanStatsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwVlanStatsVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwVlanStatsVlanIndex.setDescription('This object indicates the VLAN in which IGMP Snooping counts packet.when clear statistics information,0 is all Vlans.')
hwVlanRecvIGMPV1ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvIGMPV1ReportNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvIGMPV1ReportNum.setDescription('The statistics of IGMP V1 report packets received on the device.')
hwVlanRecvIGMPV2ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvIGMPV2ReportNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvIGMPV2ReportNum.setDescription('The statistics of IGMP V2 report packets received on the device.')
hwVlanRecvIGMPV3ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvIGMPV3ReportNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvIGMPV3ReportNum.setDescription('The statistics of IGMP V3 report packets received on the device.')
hwVlanRecvIGMPLeaveNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvIGMPLeaveNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvIGMPLeaveNum.setDescription('The statistics of IGMP leave packets received on the device.')
hwVlanRecvIGMPV1QueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvIGMPV1QueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvIGMPV1QueryNum.setDescription('The statistics of IGMP V1 query packets received on the device.')
hwVlanRecvIGMPV2QueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvIGMPV2QueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvIGMPV2QueryNum.setDescription('The statistics of IGMP V2 query packets received on the device.')
hwVlanRecvIGMPV3QueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvIGMPV3QueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvIGMPV3QueryNum.setDescription('The statistics of IGMP V3 query packets received on the device.')
hwVlanRecvPimHelloNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvPimHelloNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvPimHelloNum.setDescription('The statistics of pim hello packets received on the device.')
hwVlanSendQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanSendQueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanSendQueryNum.setDescription('The statistics of query packets sended on the device.')
hwVlanIGMPPacketClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanIGMPPacketClearStats.setStatus('current')
if mibBuilder.loadTexts: hwVlanIGMPPacketClearStats.setDescription('Clear statistics information.')
hwVlanSendSourceIPSpecQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanSendSourceIPSpecQueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanSendSourceIPSpecQueryNum.setDescription('The statistics of source-ip-specific query packets sent from the device.')
hwIPGrpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1), )
if mibBuilder.loadTexts: hwIPGrpInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwIPGrpInfoTable.setDescription('Table contains multicast group exit port information through multicast group address.')
hwIPGrpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwIPGrpVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwIPGrpPortIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwIPGrpAddress"))
if mibBuilder.loadTexts: hwIPGrpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPGrpInfoEntry.setDescription('An entry contains exit port information for a specific Vlan or all Vlans.')
hwIPGrpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwIPGrpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPGrpVlanIndex.setDescription('This object indicates the VLAN in which in which the group is learned.')
hwIPGrpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwIPGrpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPGrpPortIfIndex.setDescription('This object indicates port name.')
hwIPGrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwIPGrpAddress.setStatus('current')
if mibBuilder.loadTexts: hwIPGrpAddress.setDescription('This object indicates IP multicast address learned by IGMP Snooping.')
hwIPGrpUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPGrpUpTime.setStatus('current')
if mibBuilder.loadTexts: hwIPGrpUpTime.setDescription('This object indicates time that multicast group information created.')
hwIPHostUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPHostUpTime.setStatus('current')
if mibBuilder.loadTexts: hwIPHostUpTime.setDescription('host port up time')
hwIPHostExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPHostExpires.setStatus('current')
if mibBuilder.loadTexts: hwIPHostExpires.setDescription('host port expire time')
hwIPHostFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 7), PortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPHostFlags.setStatus('current')
if mibBuilder.loadTexts: hwIPHostFlags.setDescription('host port flag')
hwIPRtUPTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPRtUPTime.setStatus('current')
if mibBuilder.loadTexts: hwIPRtUPTime.setDescription('router port up time')
hwIPRtExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPRtExpires.setStatus('current')
if mibBuilder.loadTexts: hwIPRtExpires.setDescription('router port expire time')
hwIPRtFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 1, 1, 10), PortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPRtFlags.setStatus('current')
if mibBuilder.loadTexts: hwIPRtFlags.setDescription('router port flag')
hwMACGrpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 2), )
if mibBuilder.loadTexts: hwMACGrpInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwMACGrpInfoTable.setDescription('Table contains mac-group information.')
hwMACGrpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMACGrpVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMACGrpPortIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMACGrpAddress"))
if mibBuilder.loadTexts: hwMACGrpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwMACGrpInfoEntry.setDescription('An entry contains mac-group information for a specific Vlan.')
hwMACGrpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMACGrpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMACGrpVlanIndex.setDescription('This object indicates the VLAN in which the group is learned.')
hwMACGrpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwMACGrpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMACGrpPortIfIndex.setDescription('This object indicates port name .')
hwMACGrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMACGrpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMACGrpAddress.setDescription('This object indicates mac group address.')
hwMcastGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 3), )
if mibBuilder.loadTexts: hwMcastGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastGrpCfgTable.setDescription('Table used to config multicast group.')
hwMcastGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 3, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwGrpProfileNameIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwGrpListNameIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwGrpNameIndex"))
if mibBuilder.loadTexts: hwMcastGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastGrpCfgEntry.setDescription('Table entry.')
hwGrpProfileNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 3, 1, 1), DisplayString())
if mibBuilder.loadTexts: hwGrpProfileNameIndex.setStatus('current')
if mibBuilder.loadTexts: hwGrpProfileNameIndex.setDescription('Multicast profile name.')
hwGrpListNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 3, 1, 2), DisplayString())
if mibBuilder.loadTexts: hwGrpListNameIndex.setStatus('current')
if mibBuilder.loadTexts: hwGrpListNameIndex.setDescription('Multicast list name.')
hwGrpNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 3, 1, 3), DisplayString())
if mibBuilder.loadTexts: hwGrpNameIndex.setStatus('current')
if mibBuilder.loadTexts: hwGrpNameIndex.setDescription('Multicast group name.')
hwGrpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGrpIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwGrpIpAddress.setDescription('Multicast group address.')
hwGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwGrpRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwVlanMcastGrpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 4), )
if mibBuilder.loadTexts: hwVlanMcastGrpTable.setStatus('current')
if mibBuilder.loadTexts: hwVlanMcastGrpTable.setDescription('Table to apply a multicast profile on vlan.')
hwVlanMcastGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 4, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwVlanMcastIndex"))
if mibBuilder.loadTexts: hwVlanMcastGrpEntry.setStatus('current')
if mibBuilder.loadTexts: hwVlanMcastGrpEntry.setDescription('Table entry.')
hwVlanMcastIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwVlanMcastIndex.setStatus('current')
if mibBuilder.loadTexts: hwVlanMcastIndex.setDescription('This object indicates the VLAN in which Multicast is configured.')
hwVlanMcastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMcastProfileName.setStatus('current')
if mibBuilder.loadTexts: hwVlanMcastProfileName.setDescription('Multicast profile name.')
hwMcastGrpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 5), )
if mibBuilder.loadTexts: hwMcastGrpProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastGrpProfileTable.setDescription('Table to config multicast profile.')
hwMcastGrpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 5, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwVlanMulticastProfileName"))
if mibBuilder.loadTexts: hwMcastGrpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastGrpProfileEntry.setDescription('Table entry.')
hwVlanMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 5, 1, 1), DisplayString())
if mibBuilder.loadTexts: hwVlanMulticastProfileName.setStatus('current')
if mibBuilder.loadTexts: hwVlanMulticastProfileName.setDescription('Multicast profile name.')
hwMulticastProfilePreviewTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMulticastProfilePreviewTimes.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfilePreviewTimes.setDescription('Multicast profile preview times.')
hwMulticastProfilePreviewMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMulticastProfilePreviewMinutes.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfilePreviewMinutes.setDescription('Multicast profile preview minutes.')
hwMulticastProfilePreviewInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMulticastProfilePreviewInterval.setStatus('current')
if mibBuilder.loadTexts: hwMulticastProfilePreviewInterval.setDescription('Multicast profile preview interval.')
hwExternIpGrpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6), )
if mibBuilder.loadTexts: hwExternIpGrpInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwExternIpGrpInfoTable.setDescription('Table contains multicast group exit port information through multicast group address.')
hwExternIpGrpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwExternIpGrpVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwExternIpGrpPortIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwExternIpGrpAddress"), (0, "HUAWEI-MULTICAST-MIB", "hwExternIpSourceAddress"))
if mibBuilder.loadTexts: hwExternIpGrpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwExternIpGrpInfoEntry.setDescription('An entry contains exit port information for a specific VLAN or all VLANs.')
hwExternIpGrpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwExternIpGrpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwExternIpGrpVlanIndex.setDescription('This object indicates the VLAN in which in which the group is learned.')
hwExternIpGrpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwExternIpGrpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwExternIpGrpPortIfIndex.setDescription('This object indicates port name.')
hwExternIpGrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwExternIpGrpAddress.setStatus('current')
if mibBuilder.loadTexts: hwExternIpGrpAddress.setDescription('This object indicates IP multicast address learned by IGMP snooping.')
hwExternIpGrpUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExternIpGrpUpTime.setStatus('current')
if mibBuilder.loadTexts: hwExternIpGrpUpTime.setDescription('This object indicates time that multicast group information created.')
hwExternIpHostUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExternIpHostUpTime.setStatus('current')
if mibBuilder.loadTexts: hwExternIpHostUpTime.setDescription('Host port up time.')
hwExternIpHostExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExternIpHostExpires.setStatus('current')
if mibBuilder.loadTexts: hwExternIpHostExpires.setDescription('Host port expire time.')
hwExternIpHostFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 7), PortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExternIpHostFlag.setStatus('current')
if mibBuilder.loadTexts: hwExternIpHostFlag.setDescription('Host port flag.')
hwExternIpRtUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExternIpRtUpTime.setStatus('current')
if mibBuilder.loadTexts: hwExternIpRtUpTime.setDescription('Router port up time.')
hwExternIpRtExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExternIpRtExpires.setStatus('current')
if mibBuilder.loadTexts: hwExternIpRtExpires.setDescription('Router port expire time.')
hwExternIpRtFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 10), PortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExternIpRtFlag.setStatus('current')
if mibBuilder.loadTexts: hwExternIpRtFlag.setDescription('Router port flag.')
hwExternIpSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 4, 6, 1, 11), IpAddress())
if mibBuilder.loadTexts: hwExternIpSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwExternIpSourceAddress.setDescription('This object indicates IP source address learned by IGMP snooping.')
hwPortStaticGrpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 1), )
if mibBuilder.loadTexts: hwPortStaticGrpTable.setStatus('current')
if mibBuilder.loadTexts: hwPortStaticGrpTable.setDescription('Table contains port config information.')
hwPortStaticGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwPortStaticGrpVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwPortStaticGrpIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwPortStaticGrpAddr"))
if mibBuilder.loadTexts: hwPortStaticGrpEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortStaticGrpEntry.setDescription('An entry contains port config information.')
hwPortStaticGrpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwPortStaticGrpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortStaticGrpVlanIndex.setDescription('This object indicates the VLAN in which VLAN is configed.')
hwPortStaticGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwPortStaticGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortStaticGrpIfIndex.setDescription('This object indicates the interface in which port is configed.')
hwPortStaticGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwPortStaticGrpAddr.setStatus('current')
if mibBuilder.loadTexts: hwPortStaticGrpAddr.setDescription('This object indicates static join multicast group address.')
hwPortStaticGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortStaticGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortStaticGrpRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row. Now support state:CreateAndGo,Destroy.')
hwGrpPolicyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 2), )
if mibBuilder.loadTexts: hwGrpPolicyCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwGrpPolicyCfgTable.setDescription('Table contains group policy config information.')
hwGrpPolicyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwGrpPolicyVlanIndex"))
if mibBuilder.loadTexts: hwGrpPolicyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwGrpPolicyCfgEntry.setDescription('An entry contains group policy config information.')
hwGrpPolicyVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwGrpPolicyVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwGrpPolicyVlanIndex.setDescription('The Vlan ID which group policy config.')
hwGrpPolicyAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGrpPolicyAclNum.setStatus('current')
if mibBuilder.loadTexts: hwGrpPolicyAclNum.setDescription('The ACL Number which is used as the group policy parameter.')
hwGrpPolicyIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("igmpV1", 1), ("igmpV2", 2), ("igmpV1V2", 3), ("igmpV3", 4), ("igmpV1V2V3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGrpPolicyIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: hwGrpPolicyIgmpVersion.setDescription('This object indicates the IGMP version for the group policy.')
hwGrpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGrpPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwGrpPolicyRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row. Now support three state:CreateAndGo,Active,Destroy.')
hwRouterPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 3), )
if mibBuilder.loadTexts: hwRouterPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortInfoTable.setDescription(' Table containsrouter port infromation in specify vlan')
hwRouterPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 3, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwRouterPortVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwRouterPortIfIndex"))
if mibBuilder.loadTexts: hwRouterPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortInfoEntry.setDescription('a entry contains port infromation in specify vlan')
hwRouterPortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwRouterPortVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortVlanIndex.setDescription('vlan id')
hwRouterPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwRouterPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortIfIndex.setDescription('router port name in specify vlan')
hwRouterPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouterPortUpTime.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortUpTime.setDescription('router port up time')
hwRouterPortExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouterPortExpires.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortExpires.setDescription('router port expire time')
hwRouterPortFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 3, 1, 5), PortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouterPortFlags.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortFlags.setDescription('router port flag')
hwRouterPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 4), )
if mibBuilder.loadTexts: hwRouterPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortCfgTable.setDescription('Table contains router port config information.')
hwRouterPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 4, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwRouterPortCfgVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwRouterPortCfgIfIndex"))
if mibBuilder.loadTexts: hwRouterPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortCfgEntry.setDescription('An entry contains router port config information.')
hwRouterPortCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwRouterPortCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortCfgVlanIndex.setDescription('This object indicates the VLAN in which VLAN is configed.')
hwRouterPortCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwRouterPortCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortCfgIfIndex.setDescription('This object indicates the interface which port is configed.')
hwRouterPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRouterPortCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortCfgRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwPortLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 5), )
if mibBuilder.loadTexts: hwPortLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitTable.setDescription('A table contains IGMP Snooping entry count limit information on a port.')
hwPortLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 5, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwPortLimitIfIndex"))
if mibBuilder.loadTexts: hwPortLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitEntry.setDescription('An entry contains IGMP Snooping entry count limit information on a port.')
hwPortLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwPortLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitIfIndex.setDescription('Index of the interface.')
hwPortLimitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 5, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitNumber.setDescription('The maximum number of IGMP-Snooping entries can be configured or learned.')
hwPortLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 5, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwPortGroupPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 6), )
if mibBuilder.loadTexts: hwPortGroupPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyTable.setDescription('A table contains group policy config information in port.')
hwPortGroupPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 6, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwPortGroupPolicyIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwPortGroupPolicyVlanIndex"))
if mibBuilder.loadTexts: hwPortGroupPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyEntry.setDescription('An entry contains group policy config information in port.')
hwPortGroupPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwPortGroupPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyIfIndex.setDescription('Index of the interface.')
hwPortGroupPolicyAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortGroupPolicyAclNumber.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyAclNumber.setDescription('The ACL number which is used as the group policy parameter.')
hwPortGroupPolicyVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 6, 1, 3), VlanIndex())
if mibBuilder.loadTexts: hwPortGroupPolicyVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyVlanIndex.setDescription('The vlan ID which group policy config.')
hwPortGroupPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("igmpV1", 1), ("igmpV2", 2), ("igmpV1V2", 3), ("igmpV3", 4), ("igmpV1V2V3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortGroupPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyVersion.setDescription('This object indicates the IGMP version for the group policy.')
hwPortGroupPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 6, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortGroupPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row. Now support three state:CreateAndGo,Active,Destroy.')
hwExternPortStaticGrpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 7), )
if mibBuilder.loadTexts: hwExternPortStaticGrpTable.setStatus('current')
if mibBuilder.loadTexts: hwExternPortStaticGrpTable.setDescription('Table contains port config information.')
hwExternPortStaticGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 7, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwExternPortStaticGrpVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwExternPortStaticGrpIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwExternPortStaticGroupAddr"), (0, "HUAWEI-MULTICAST-MIB", "hwExternPortStaticSourceAddr"))
if mibBuilder.loadTexts: hwExternPortStaticGrpEntry.setStatus('current')
if mibBuilder.loadTexts: hwExternPortStaticGrpEntry.setDescription('An entry contains port config information.')
hwExternPortStaticGrpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 7, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwExternPortStaticGrpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwExternPortStaticGrpVlanIndex.setDescription('This object indicates the VLAN in which VLAN is configed.')
hwExternPortStaticGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 7, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwExternPortStaticGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwExternPortStaticGrpIfIndex.setDescription('This object indicates the interface in which port is configed.')
hwExternPortStaticGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 7, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwExternPortStaticGroupAddr.setStatus('current')
if mibBuilder.loadTexts: hwExternPortStaticGroupAddr.setDescription('This object indicates static join multicast group address.')
hwExternPortStaticSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 7, 1, 4), IpAddress())
if mibBuilder.loadTexts: hwExternPortStaticSourceAddr.setStatus('current')
if mibBuilder.loadTexts: hwExternPortStaticSourceAddr.setDescription('This object indicates static join multicast source address.')
hwExternPortStaticGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 7, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwExternPortStaticGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwExternPortStaticGrpRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row. Now support state:CreateAndGo,Destroy.')
hwPortVlanLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 8), )
if mibBuilder.loadTexts: hwPortVlanLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwPortVlanLimitTable.setDescription('A table contains IGMP snooping entry count limit information on a port.')
hwPortVlanLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 8, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwPortVlanLimitIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwPortVlanLimitVlanIndex"))
if mibBuilder.loadTexts: hwPortVlanLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortVlanLimitEntry.setDescription('An entry contains IGMP snooping entry count limit information on a port.')
hwPortVlanLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwPortVlanLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortVlanLimitIfIndex.setDescription('Index of the interface.')
hwPortVlanLimitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortVlanLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hwPortVlanLimitNumber.setDescription('The maximum number of IGMP snooping entries can be configured or learned.')
hwPortVlanLimitVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 8, 1, 3), VlanIndex())
if mibBuilder.loadTexts: hwPortVlanLimitVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortVlanLimitVlanIndex.setDescription('The maximum number of IGMP snooping entries can be configured or learned.')
hwPortVlanLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 1, 5, 8, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortVlanLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortVlanLimitRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMldSnpgMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2))
hwMldSnpgSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 1))
hwMldVlanCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2))
hwMldStatisticsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3))
hwMldMCGrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4))
hwMldPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5))
hwMldSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: hwMldSnoopingEnabled.setDescription('This object indicates whether MLD snooping has been enabled for the system.')
hwMldSendQueryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldSendQueryEnabled.setStatus('current')
if mibBuilder.loadTexts: hwMldSendQueryEnabled.setDescription('This object indicates whether send query function has been enabled for the system.')
hwMldSendQuerySourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldSendQuerySourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwMldSendQuerySourceIpAddr.setDescription("This object indicates sended MLD query packet's source IP address.")
hwMldSnoopingSuppressionTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldSnoopingSuppressionTime.setStatus('current')
if mibBuilder.loadTexts: hwMldSnoopingSuppressionTime.setDescription('This object indicates MLD snooping suppression time, range from integer 0 to 300, the default value is 10, 0 means not suppress MLD packets. ')
hwMldVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1), )
if mibBuilder.loadTexts: hwMldVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanCfgTable.setDescription('Table contains VLAN based configuration information for MLD snooping.')
hwMldVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldVlanIndex"))
if mibBuilder.loadTexts: hwMldVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanCfgEntry.setDescription('An entry is created for each active VLAN in the device and deleted when the VLAN becomes inactive.')
hwMldVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMldVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanIndex.setDescription('This object indicates the VLAN in which MLD snooping is configured.')
hwVlanMldSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMldSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: hwVlanMldSnoopingEnabled.setDescription("When this object is set to 'enabled(1)' MLD snooping is enabled on this VLAN else disabled.")
hwMldVlanRouterAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanRouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanRouterAgingTime.setDescription('Unit:second. Configure the aging time of the router port. 0:180s or holdtime in hello.')
hwMldVlanMaxQueryRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanMaxQueryRespTime.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanMaxQueryRespTime.setDescription('Unit:second. Configure the maximum query response time.')
hwMldVlanLastListenerQueryInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanLastListenerQueryInt.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanLastListenerQueryInt.setDescription('Unit:second. Configure the last listener query interval.')
hwMldVlanQueryInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanQueryInt.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanQueryInt.setDescription('Unit:second. Configure the query interval.')
hwMldVlanRobustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanRobustCount.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanRobustCount.setDescription('Configure the MLD robust count.')
hwMldVlanCheckRouterAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanCheckRouterAlert.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanCheckRouterAlert.setDescription(" When this object is set to 'true', received MLD messages must contain the IP router alert option in their IP header. Ignore MLD messages without router alert options ,and require that routers not forward these messages.")
hwMldVlanSendRouterAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanSendRouterAlert.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanSendRouterAlert.setDescription("When this object is set to 'true', sended MLD messages must contain the IP router alert option in their IP header.")
hwVlanMldVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mldV1", 1), ("mldV2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMldVersion.setStatus('current')
if mibBuilder.loadTexts: hwVlanMldVersion.setDescription('The object indicates that MLD snooping can handle the hightest MLD version. ')
hwMldVlanPromptLeaveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanPromptLeaveEnable.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanPromptLeaveEnable.setDescription(' Prompt leave enable(1) or disable(2).')
hwMldVlanPromptLeaveAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanPromptLeaveAclNum.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanPromptLeaveAclNum.setDescription('The ACL number which is used to limit the scope of prompt leave group. 2000: the minimum ACL number 3999: the maximum ACL number -1: unvalid value')
hwMldVlanDropUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 2, 1, 1, 13), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldVlanDropUnknown.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanDropUnknown.setDescription("When this object is set to 'enabled(1)' unknown stream is droped on this VLAN else disabled.")
hwMldSystemStatisticsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1))
hwMldSystemRecvVlanUpEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvVlanUpEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvVlanUpEventTimes.setDescription('The statistics of vlan up event.')
hwMldSystemRecvVlanDownEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvVlanDownEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvVlanDownEventTimes.setDescription('The statistics of vlan down event.')
hwMldSystemRecvVlanDelEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvVlanDelEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvVlanDelEventTimes.setDescription('The statistics of vlan delete event.')
hwMldSystemRecvPortUpEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvPortUpEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvPortUpEventTimes.setDescription('The statistics of port up event.')
hwMldSystemRecvPortDownEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvPortDownEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvPortDownEventTimes.setDescription('The statistics of port down event.')
hwMldSystemRecvPortDelEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvPortDelEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvPortDelEventTimes.setDescription('The statistics of port delete event.')
hwMldSystemRecvPortIncEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvPortIncEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvPortIncEventTimes.setDescription('The statistics of port joined in vlan event.')
hwMldSystemRecvPortExcEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvPortExcEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvPortExcEventTimes.setDescription('The statistics of port deleted from vlan event.')
hwMldSystemRecvMstpBlockEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvMstpBlockEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvMstpBlockEventTimes.setDescription('The statistics of MSTP port from forwarding to blocked event.')
hwMldSystemRecvMstpForwardEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvMstpForwardEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvMstpForwardEventTimes.setDescription('The statistics of MSTP port from blocked to forwarding event.')
hwMldSystemSysClearStats = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldSystemSysClearStats.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemSysClearStats.setDescription('The configuration to clear the statistics of system statics.')
hwMldSystemPacketClearStats = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMldSystemPacketClearStats.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemPacketClearStats.setDescription('The configuration to clear the statistics of all vlan MLD packets.')
hwMldSystemRecvLinkChangeEventTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldSystemRecvLinkChangeEventTimes.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemRecvLinkChangeEventTimes.setDescription('The statistics of link change event.')
hwMldVlanStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2), )
if mibBuilder.loadTexts: hwMldVlanStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanStatisticsTable.setDescription('Table contains MLD VLAN statistics.')
hwMldVlanStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldVlanStatsVlanIndex"))
if mibBuilder.loadTexts: hwMldVlanStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanStatisticsEntry.setDescription('An entry contains MLD VLAN statistics.')
hwMldVlanStatsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMldVlanStatsVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanStatsVlanIndex.setDescription('This object indicates the VLAN in which MLD snooping counts packet.When clear statistics information,0 is all vlans.')
hwVlanRecvMldV1ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvMldV1ReportNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvMldV1ReportNum.setDescription('The statistics of MLD V1 report packets received on the device.')
hwVlanRecvMldV2ReportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvMldV2ReportNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvMldV2ReportNum.setDescription('The statistics of MLD V2 report packets received on the device.')
hwVlanRecvMldDoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvMldDoneNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvMldDoneNum.setDescription('The statistics of MLD leave packets received on the device.')
hwVlanRecvMldV1QueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvMldV1QueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvMldV1QueryNum.setDescription('The statistics of MLD V1 query packets received on the device.')
hwVlanRecvMldV2QueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvMldV2QueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvMldV2QueryNum.setDescription('The statistics of MLD V2 query packets received on the device.')
hwVlanRecvIpv6PimHelloNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanRecvIpv6PimHelloNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanRecvIpv6PimHelloNum.setDescription('The statistics of PIM hello packets received on the device.')
hwVlanSendMldQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanSendMldQueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanSendMldQueryNum.setDescription('The statistics of query packets sended on the device.')
hwVlanMldPacketClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanMldPacketClearStats.setStatus('current')
if mibBuilder.loadTexts: hwVlanMldPacketClearStats.setDescription('Clear statistics information.')
hwVlanSendSourceIpSpecMldQueryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanSendSourceIpSpecMldQueryNum.setStatus('current')
if mibBuilder.loadTexts: hwVlanSendSourceIpSpecMldQueryNum.setDescription('Count of query packets with the specified source IPv6 address.')
hwMldIpGrpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1), )
if mibBuilder.loadTexts: hwMldIpGrpInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwMldIpGrpInfoTable.setDescription('Table contains multicast group exit port information through multicast group address.')
hwMldIpGrpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldIpGrpVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMldIpGrpPortIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMldIpGrpAddress"), (0, "HUAWEI-MULTICAST-MIB", "hwMldIpSourceAddress"))
if mibBuilder.loadTexts: hwMldIpGrpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldIpGrpInfoEntry.setDescription('An entry contains exit port information for a specific vlan or all vlans.')
hwMldIpGrpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMldIpGrpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldIpGrpVlanIndex.setDescription('This object indicates the VLAN in which in which the group is learned.')
hwMldIpGrpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwMldIpGrpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldIpGrpPortIfIndex.setDescription('This object indicates port name.')
hwMldIpGrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: hwMldIpGrpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMldIpGrpAddress.setDescription('This object indicates IP multicast address learned by MLD snooping.')
hwMldIpGrpUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldIpGrpUpTime.setStatus('current')
if mibBuilder.loadTexts: hwMldIpGrpUpTime.setDescription('This object indicates time that multicast group information created.')
hwMldIpHostUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldIpHostUpTime.setStatus('current')
if mibBuilder.loadTexts: hwMldIpHostUpTime.setDescription('Time for the host port remaining in the up state.')
hwMldIpHostExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldIpHostExpires.setStatus('current')
if mibBuilder.loadTexts: hwMldIpHostExpires.setDescription('Time for the host port expires.')
hwMldIpHostFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 7), PortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldIpHostFlag.setStatus('current')
if mibBuilder.loadTexts: hwMldIpHostFlag.setDescription('Host port flag.')
hwMldIpRtUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldIpRtUpTime.setStatus('current')
if mibBuilder.loadTexts: hwMldIpRtUpTime.setDescription('Time for the router port remaining in the up state.')
hwMldIpRtExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldIpRtExpires.setStatus('current')
if mibBuilder.loadTexts: hwMldIpRtExpires.setDescription('Time for the router port expires.')
hwMldIpRtFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 10), PortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldIpRtFlag.setStatus('current')
if mibBuilder.loadTexts: hwMldIpRtFlag.setDescription('Router port flag.')
hwMldIpSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 4, 1, 1, 11), Ipv6Address())
if mibBuilder.loadTexts: hwMldIpSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwMldIpSourceAddress.setDescription('This object indicates IP source address learned by MLD snooping.')
hwMldPortStaticGrpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 1), )
if mibBuilder.loadTexts: hwMldPortStaticGrpTable.setStatus('current')
if mibBuilder.loadTexts: hwMldPortStaticGrpTable.setDescription('Table contains port config information.')
hwMldPortStaticGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldPortStaticGrpVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMldPortStaticGrpIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMldPortStaticGrpAddr"), (0, "HUAWEI-MULTICAST-MIB", "hwMldPortStaticSourceAddr"))
if mibBuilder.loadTexts: hwMldPortStaticGrpEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldPortStaticGrpEntry.setDescription('An entry contains port config information.')
hwMldPortStaticGrpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMldPortStaticGrpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldPortStaticGrpVlanIndex.setDescription('This object indicates the VLAN in which VLAN is configed.')
hwMldPortStaticGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwMldPortStaticGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldPortStaticGrpIfIndex.setDescription('This object indicates the interface in which port is configed.')
hwMldPortStaticGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 1, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: hwMldPortStaticGrpAddr.setStatus('current')
if mibBuilder.loadTexts: hwMldPortStaticGrpAddr.setDescription('This object indicates static join multicast group address.')
hwMldPortStaticSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 1, 1, 4), Ipv6Address())
if mibBuilder.loadTexts: hwMldPortStaticSourceAddr.setStatus('current')
if mibBuilder.loadTexts: hwMldPortStaticSourceAddr.setDescription('This object indicates static join multicast source address.')
hwMldPortStaticGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldPortStaticGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMldPortStaticGrpRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row. Now support state:CreateAndGo,Destroy.')
hwMldGrpPolicyCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 2), )
if mibBuilder.loadTexts: hwMldGrpPolicyCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwMldGrpPolicyCfgTable.setDescription('Table contains group policy config information.')
hwMldGrpPolicyCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldGrpPolicyVlanIndex"))
if mibBuilder.loadTexts: hwMldGrpPolicyCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldGrpPolicyCfgEntry.setDescription('An entry contains group policy config information.')
hwMldGrpPolicyVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMldGrpPolicyVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldGrpPolicyVlanIndex.setDescription('The vlan ID which group policy config.')
hwMldGrpPolicyAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldGrpPolicyAclNum.setStatus('current')
if mibBuilder.loadTexts: hwMldGrpPolicyAclNum.setDescription('The ACL number which is used as the group policy parameter.')
hwGrpPolicyMldVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mldV1", 1), ("mldV2", 2), ("mldV1V2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwGrpPolicyMldVersion.setStatus('current')
if mibBuilder.loadTexts: hwGrpPolicyMldVersion.setDescription('This object indicates the MLD version for the group policy.')
hwMldGrpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldGrpPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMldGrpPolicyRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row. Now support three state:CreateAndGo,Active,Destroy.')
hwMldRouterPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 3), )
if mibBuilder.loadTexts: hwMldRouterPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortInfoTable.setDescription(' Table containsrouter port infromation in specify vlan.')
hwMldRouterPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 3, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldRouterPortVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMldRouterPortIfIndex"))
if mibBuilder.loadTexts: hwMldRouterPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortInfoEntry.setDescription('An entry contains port infromation in specify vlan.')
hwMldRouterPortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMldRouterPortVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortVlanIndex.setDescription('VLAN ID.')
hwMldRouterPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwMldRouterPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortIfIndex.setDescription('Router port name in specify vlan.')
hwMldRouterPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldRouterPortUpTime.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortUpTime.setDescription('Time for router port remains up state.')
hwMldRouterPortExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldRouterPortExpires.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortExpires.setDescription('Time for router port expires.')
hwMldRouterPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 3, 1, 5), PortFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMldRouterPortFlag.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortFlag.setDescription('Router port flag.')
hwMldRouterPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 4), )
if mibBuilder.loadTexts: hwMldRouterPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortCfgTable.setDescription('Table contains router port config information.')
hwMldRouterPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 4, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldRouterPortCfgVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMldRouterPortCfgIfIndex"))
if mibBuilder.loadTexts: hwMldRouterPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortCfgEntry.setDescription('An entry contains router port config information.')
hwMldRouterPortCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMldRouterPortCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortCfgVlanIndex.setDescription('This object indicates the VLAN in which VLAN is configed.')
hwMldRouterPortCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwMldRouterPortCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortCfgIfIndex.setDescription('This object indicates the interface which port is configed.')
hwMldRouterPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldRouterPortCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortCfgRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMldPortLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 5), )
if mibBuilder.loadTexts: hwMldPortLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwMldPortLimitTable.setDescription('A table contains MLD snooping entry count limit information on a port.')
hwMldPortLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 5, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldPortLimitIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMldPortLimitVlanIndex"))
if mibBuilder.loadTexts: hwMldPortLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldPortLimitEntry.setDescription('An entry contains MLD snooping entry count limit information on a port.')
hwMldPortLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwMldPortLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldPortLimitIfIndex.setDescription('Index of the interface.')
hwMldPortLimitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldPortLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hwMldPortLimitNumber.setDescription('The maximum number of MLD snooping entries can be configured or learned.')
hwMldPortLimitVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 5, 1, 3), VlanIndex())
if mibBuilder.loadTexts: hwMldPortLimitVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldPortLimitVlanIndex.setDescription('The maximum number of MLD snooping entries can be configured or learned.')
hwMldPortLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 5, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldPortLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMldPortLimitRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMldPortGroupPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 6), )
if mibBuilder.loadTexts: hwMldPortGroupPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwMldPortGroupPolicyTable.setDescription('A table contains group policy config information in port.')
hwMldPortGroupPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 6, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMldPortGroupPolicyIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMldPortGroupPolicyVlanIndex"))
if mibBuilder.loadTexts: hwMldPortGroupPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwMldPortGroupPolicyEntry.setDescription('An entry contains group policy config information in port.')
hwMldPortGroupPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwMldPortGroupPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldPortGroupPolicyIfIndex.setDescription('Index of the interface.')
hwMldPortGroupPolicyAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldPortGroupPolicyAclNumber.setStatus('current')
if mibBuilder.loadTexts: hwMldPortGroupPolicyAclNumber.setDescription('The ACL number which is used as the group policy parameter.')
hwMldPortGroupPolicyVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 6, 1, 3), VlanIndex())
if mibBuilder.loadTexts: hwMldPortGroupPolicyVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMldPortGroupPolicyVlanIndex.setDescription('The vlan ID which group policy config.')
hwMldPortGroupPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mldV1", 1), ("mldV2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldPortGroupPolicyVersion.setStatus('current')
if mibBuilder.loadTexts: hwMldPortGroupPolicyVersion.setDescription('This object indicates the MLD version for the group policy.')
hwMldPortGroupPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 2, 5, 6, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMldPortGroupPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMldPortGroupPolicyRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row. Now support three state:CreateAndGo,Active,Destroy.')
hwMVlanMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3))
hwMVlanSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 1))
hwMVlanVlanCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2))
hwMVlanGrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3))
hwMVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: hwMVlanEnabled.setDescription('This object indicates whether MVlan function has been enabled for the system.')
hwMVlanEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 1), )
if mibBuilder.loadTexts: hwMVlanEnableTable.setStatus('current')
if mibBuilder.loadTexts: hwMVlanEnableTable.setDescription('Table which indicates which vlan had been configured as Multicast-Vlan.')
hwMVlanEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMVlanIndex"))
if mibBuilder.loadTexts: hwMVlanEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hwMVlanEnableEntry.setDescription('Entry for vlan which had been configured as Multicast-Vlan.')
hwMVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMVlanIndex.setDescription('Vlan index which had been configured as Multicast-Vlan.')
hwMVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMVlanStatus.setStatus('current')
if mibBuilder.loadTexts: hwMVlanStatus.setDescription('The activation of a row enables MVlan in the interface. The destruction of a row disables MVlan in the interface.')
hwMVlanUserVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 2), )
if mibBuilder.loadTexts: hwMVlanUserVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwMVlanUserVlanTable.setDescription('Table which indicates the user vlans in a MVlan.')
hwMVlanUserVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwUserVlanIndex"))
if mibBuilder.loadTexts: hwMVlanUserVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwMVlanUserVlanEntry.setDescription('Entry for User vlan in a Mvlan.')
hwUserVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwUserVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwUserVlanIndex.setDescription('Vlan index which in the given MVlan.')
hwUserVlanCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwUserVlanCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwUserVlanCfgRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwUserVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 3), )
if mibBuilder.loadTexts: hwUserVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwUserVlanTable.setDescription('Table which indicates which vlan had been configured as flow trigger.')
hwUserVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 3, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwUserVlanIndex"))
if mibBuilder.loadTexts: hwUserVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwUserVlanEntry.setDescription('Entry for vlan which had been configured as flow trigger.')
hwUserVlanFlowTriggerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUserVlanFlowTriggerEnable.setStatus('current')
if mibBuilder.loadTexts: hwUserVlanFlowTriggerEnable.setDescription("This object indicates user vlan's flow trigger status.")
hwMcSourceDenyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 4), )
if mibBuilder.loadTexts: hwMcSourceDenyTable.setStatus('current')
if mibBuilder.loadTexts: hwMcSourceDenyTable.setDescription('Table which indicates which vlan and which port had been configured as source deny.')
hwMcSourceDenyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 4, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMcSourceDenyVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMcSourceDenyIfIndex"))
if mibBuilder.loadTexts: hwMcSourceDenyEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcSourceDenyEntry.setDescription('Entry for vlan and port which had been configured source deny.')
hwMcSourceDenyVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hwMcSourceDenyVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMcSourceDenyVlanIndex.setDescription('VLAN index.')
hwMcSourceDenyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwMcSourceDenyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMcSourceDenyIfIndex.setDescription('Interface index.')
hwMcSourceDenyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 2, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcSourceDenyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMcSourceDenyRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMVlanGrpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 1), )
if mibBuilder.loadTexts: hwMVlanGrpInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwMVlanGrpInfoTable.setDescription('Table which indicates Mvlan group information.')
hwMVlanGrpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMVlanGrpAddress"), (0, "HUAWEI-MULTICAST-MIB", "hwMVlanGrpPortIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMVlanGrpUserVlanIndex"))
if mibBuilder.loadTexts: hwMVlanGrpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwMVlanGrpInfoEntry.setDescription('Entry for Mvlan group information.')
hwMVlanGrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMVlanGrpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMVlanGrpAddress.setDescription('Multicast group address.')
hwMVlanGrpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hwMVlanGrpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMVlanGrpPortIfIndex.setDescription('Interface index.')
hwMVlanGrpUserVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 1, 1, 3), VlanIndex())
if mibBuilder.loadTexts: hwMVlanGrpUserVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwMVlanGrpUserVlanIndex.setDescription('User vlan index.')
hwMVlanStaticFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 2), )
if mibBuilder.loadTexts: hwMVlanStaticFlowTable.setStatus('current')
if mibBuilder.loadTexts: hwMVlanStaticFlowTable.setDescription('Table which indicates Mvlan static flow group information.')
hwMVlanStaticFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMVlanStaticFlowGrpAddress"))
if mibBuilder.loadTexts: hwMVlanStaticFlowEntry.setStatus('current')
if mibBuilder.loadTexts: hwMVlanStaticFlowEntry.setDescription('Entry for Mvlan static flow group information.')
hwMVlanStaticFlowGrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwMVlanStaticFlowGrpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMVlanStaticFlowGrpAddress.setDescription('Static flow address.')
hwMVlanStaticFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMVlanStaticFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMVlanStaticFlowRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMVlanIpv6StaticFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 3), )
if mibBuilder.loadTexts: hwMVlanIpv6StaticFlowTable.setStatus('current')
if mibBuilder.loadTexts: hwMVlanIpv6StaticFlowTable.setDescription('Table which indicates Mvlan static flow group information.')
hwMVlanIpv6StaticFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 3, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMVlanStaticFlowIpv6GrpAddress"), (0, "HUAWEI-MULTICAST-MIB", "hwMVlanStaticFlowIpv6SourceAddress"))
if mibBuilder.loadTexts: hwMVlanIpv6StaticFlowEntry.setStatus('current')
if mibBuilder.loadTexts: hwMVlanIpv6StaticFlowEntry.setDescription('Entry for Mvlan static flow group information.')
hwMVlanStaticFlowIpv6GrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 3, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: hwMVlanStaticFlowIpv6GrpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMVlanStaticFlowIpv6GrpAddress.setDescription('Static flow address.')
hwMVlanStaticFlowIpv6SourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 3, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: hwMVlanStaticFlowIpv6SourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwMVlanStaticFlowIpv6SourceAddress.setDescription('Static flow source IP address.')
hwMVlanIpv6StaticFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 3, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMVlanIpv6StaticFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMVlanIpv6StaticFlowRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwExternMVlanStaticFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 4), )
if mibBuilder.loadTexts: hwExternMVlanStaticFlowTable.setStatus('current')
if mibBuilder.loadTexts: hwExternMVlanStaticFlowTable.setDescription('Table which indicates MVLAN static flow group information.')
hwExternMVlanStaticFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 4, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwExternMVlanStaticFlowGrpAddress"), (0, "HUAWEI-MULTICAST-MIB", "hwExternMVlanStaticFlowSourceAddress"))
if mibBuilder.loadTexts: hwExternMVlanStaticFlowEntry.setStatus('current')
if mibBuilder.loadTexts: hwExternMVlanStaticFlowEntry.setDescription('Entry for MVLAN static flow group information.')
hwExternMVlanStaticFlowGrpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwExternMVlanStaticFlowGrpAddress.setStatus('current')
if mibBuilder.loadTexts: hwExternMVlanStaticFlowGrpAddress.setDescription('Static flow address.')
hwExternMVlanStaticFlowSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwExternMVlanStaticFlowSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwExternMVlanStaticFlowSourceAddress.setDescription('Static flow source IP address.')
hwExternMVlanStaticFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 3, 3, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwExternMVlanStaticFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwExternMVlanStaticFlowRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMultiCastCommonObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 4))
hwMCSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 4, 1))
hwEthTrunkLoadBalancingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 4, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthTrunkLoadBalancingEnabled.setStatus('current')
if mibBuilder.loadTexts: hwEthTrunkLoadBalancingEnabled.setDescription('This object indicates whether Eth-Trunk Load Balancing function has been enabled for the system.')
hwL2CacTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5))
hwL2mcCacCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacCount.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacCount.setDescription('This object indicates the upper limit of the number of l2-multicast groups.')
hwL2mcCacBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacBandwidth.setDescription('This object indicates the upper limit of the bandwidth of l2-multicast groups,in Mbits/sec.')
hwL2mcCacGroupAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacGroupAddress.setDescription('This object indicates the group IP address denied by CAC.')
hwL2mcCacChannelName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacChannelName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacChannelName.setDescription('This object indicates the name of channel.')
hwL2mcCacVlanIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVlanIndex.setDescription('This object indicates the VLAN ID.')
hwL2mcCacVsiName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVsiName.setDescription('This object indicates the name of VSI.')
hwL2mcCacIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 7), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacIfIndex.setDescription('This object indicates the interface index.')
hwL2mcCacPwId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacPwId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPwId.setDescription('This object indicates the PW ID.')
hwL2mcCacRemoteIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacRemoteIpAddress.setDescription('This object indicates the remote peer IP address.')
hwL2mcCacRemoteSiteId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 5, 10), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwL2mcCacRemoteSiteId.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacRemoteSiteId.setDescription('This object indicates the remote site ID.')
hwBtvMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6))
hwBtvSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 1))
hwBtvCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2))
hwBtvEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBtvEnabled.setStatus('current')
if mibBuilder.loadTexts: hwBtvEnabled.setDescription('Object which indicates whether BTV Function has been enabled for the system.')
hwMcastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 1), )
if mibBuilder.loadTexts: hwMcastGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastGroupTable.setDescription('Table contains multicast group config information.')
hwMcastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 1, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMcastGroupIndex"))
if mibBuilder.loadTexts: hwMcastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastGroupEntry.setDescription('An entry contains multicast group config information.')
hwMcastGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hwMcastGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwMcastGroupIndex.setDescription('Multicast group index.')
hwMcastGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastGroupName.setStatus('current')
if mibBuilder.loadTexts: hwMcastGroupName.setDescription('Multicast group name.')
hwMcastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwMcastGroupAddress.setDescription('Multicast group address.')
hwMcastGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMcastGroupRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMcastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwMcastSourceAddress.setDescription('Source IP address.')
hwMcastListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 2), )
if mibBuilder.loadTexts: hwMcastListTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastListTable.setDescription('Table which indicates multicast list information.')
hwMcastListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 2, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMcastListIndex"))
if mibBuilder.loadTexts: hwMcastListEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastListEntry.setDescription('An entry contains multicast list config information.')
hwMcastListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hwMcastListIndex.setStatus('current')
if mibBuilder.loadTexts: hwMcastListIndex.setDescription('Multicast list index.')
hwMcastListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastListName.setStatus('current')
if mibBuilder.loadTexts: hwMcastListName.setDescription('Multicast list name.')
hwMcastListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMcastListRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMcastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 3), )
if mibBuilder.loadTexts: hwMcastProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileTable.setDescription('Table which indicates multicast profile information.')
hwMcastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 3, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMcastProfileIndex"))
if mibBuilder.loadTexts: hwMcastProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileEntry.setDescription('An entry contains multicast profile config information.')
hwMcastProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwMcastProfileIndex.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileIndex.setDescription('Multicast profile index.')
hwMcastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastProfileName.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileName.setDescription('Multicast profile name.')
hwMcastProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row..')
hwMcastProfileCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 4), )
if mibBuilder.loadTexts: hwMcastProfileCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileCfgTable.setDescription('Table contains multicast profile based configuration information for IPTV.')
hwMcastProfileCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 4, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMcastProfileIndex"))
if mibBuilder.loadTexts: hwMcastProfileCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileCfgEntry.setDescription('An entry contains configuration for multicast profile.')
hwMcastProfileCfgPreviewTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMcastProfileCfgPreviewTimes.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileCfgPreviewTimes.setDescription('Times of preview a multicast group one day.')
hwMcastProfileCfgPreviewMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMcastProfileCfgPreviewMinute.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileCfgPreviewMinute.setDescription('Preview time(in minutes).')
hwMcastProfileCfgPreviewInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMcastProfileCfgPreviewInterval.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileCfgPreviewInterval.setDescription('Preview interval(in minutes).')
hwMcastProfileCfgMaxNumProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMcastProfileCfgMaxNumProgram.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileCfgMaxNumProgram.setDescription('Max number of the multicast program watching and previewing.')
hwMcastListReferTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 5), )
if mibBuilder.loadTexts: hwMcastListReferTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastListReferTable.setDescription('Table contains multicast list refers to multicast group.')
hwMcastListReferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 5, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMcastListIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMcastGroupIndex"))
if mibBuilder.loadTexts: hwMcastListReferEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastListReferEntry.setDescription('An entry contains multicast list refers to multicast group.')
hwMcastListReferRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastListReferRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMcastListReferRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMcastProfileReferTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 6), )
if mibBuilder.loadTexts: hwMcastProfileReferTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileReferTable.setDescription('Table contains multicast profile refers to multicast list.')
hwMcastProfileReferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 6, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMcastProfileIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMcastListIndex"))
if mibBuilder.loadTexts: hwMcastProfileReferEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileReferEntry.setDescription('An entry contains multicast profile refers to multicast list.')
hwMcastPreviewStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 6, 1, 1), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastPreviewStatus.setStatus('current')
if mibBuilder.loadTexts: hwMcastPreviewStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMcastProfileReferRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastProfileReferRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileReferRowStatus.setDescription('Table contains vlan apply multicast profile.')
hwVlanApplyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 7), )
if mibBuilder.loadTexts: hwVlanApplyProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwVlanApplyProfileTable.setDescription('An entry contains attach a vlan to a multicast profile.')
hwVlanApplyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 7, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwUserVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMcastProfileIndex"))
if mibBuilder.loadTexts: hwVlanApplyProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwVlanApplyProfileEntry.setDescription('Description.')
hwVlanApplyProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVlanApplyProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVlanApplyProfileRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMcastIpv6GroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 8), )
if mibBuilder.loadTexts: hwMcastIpv6GroupTable.setStatus('current')
if mibBuilder.loadTexts: hwMcastIpv6GroupTable.setDescription('Table contains multicast group config information.')
hwMcastIpv6GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 8, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwMcastIpv6GroupIndex"))
if mibBuilder.loadTexts: hwMcastIpv6GroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwMcastIpv6GroupEntry.setDescription('An entry contains multicast group config information.')
hwMcastIpv6GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hwMcastIpv6GroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwMcastIpv6GroupIndex.setDescription('Multicast group index.')
hwMcastIpv6GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 8, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastIpv6GroupName.setStatus('current')
if mibBuilder.loadTexts: hwMcastIpv6GroupName.setDescription('Multicast group name.')
hwMcastIpv6GroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 8, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastIpv6GroupAddress.setStatus('current')
if mibBuilder.loadTexts: hwMcastIpv6GroupAddress.setDescription('Multicast group address.')
hwMcastIpv6SourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 8, 1, 4), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastIpv6SourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwMcastIpv6SourceAddress.setDescription('Source IP address.')
hwMcastIpv6GroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 8, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMcastIpv6GroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMcastIpv6GroupRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwExternVlanApplyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 9), )
if mibBuilder.loadTexts: hwExternVlanApplyProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwExternVlanApplyProfileTable.setDescription('Table contains attach a vlan to a multicast profile.')
hwExternVlanApplyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 9, 1), ).setIndexNames((0, "HUAWEI-MULTICAST-MIB", "hwUserVlanIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwMcastProfileIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwExternPortIfIndex"), (0, "HUAWEI-MULTICAST-MIB", "hwExternSourceMacAddress"))
if mibBuilder.loadTexts: hwExternVlanApplyProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwExternVlanApplyProfileEntry.setDescription('An entry contains attach a vlan to a multicast profile..')
hwExternPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwExternPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwExternPortIfIndex.setDescription('This object indicates port index.')
hwExternSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 9, 1, 2), MacAddress())
if mibBuilder.loadTexts: hwExternSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwExternSourceMacAddress.setDescription('Source MAC address.')
hwExternVlanApplyProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 6, 2, 9, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwExternVlanApplyProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwExternVlanApplyProfileRowStatus.setDescription('This object is used to create or delete a row and represent the current status of this row.')
hwMcastAlarmObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99))
hwCfgRefreshFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 1)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanDescr"))
if mibBuilder.loadTexts: hwCfgRefreshFailAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCfgRefreshFailAlarm.setDescription('Failed to refresh multicast table! ')
hwMCastTableLoadAbnormalNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 2))
if mibBuilder.loadTexts: hwMCastTableLoadAbnormalNotify.setStatus('current')
if mibBuilder.loadTexts: hwMCastTableLoadAbnormalNotify.setDescription('Multicast table of router was full!')
hwMCastTableLoadAbnormalResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 3))
if mibBuilder.loadTexts: hwMCastTableLoadAbnormalResume.setStatus('current')
if mibBuilder.loadTexts: hwMCastTableLoadAbnormalResume.setDescription('Multicast table of router was normal!')
hwMCastVlanFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 4)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanDescr"))
if mibBuilder.loadTexts: hwMCastVlanFailAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMCastVlanFailAlarm.setDescription('VLAN which has been configed with protect-vlan failed! ')
hwMCastVlanOkNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 5)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanDescr"))
if mibBuilder.loadTexts: hwMCastVlanOkNotify.setStatus('current')
if mibBuilder.loadTexts: hwMCastVlanOkNotify.setDescription('VLAN which has been configed with protect-vlan has been OK! ')
hwMCastApsSwitchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 6)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanDescr"))
if mibBuilder.loadTexts: hwMCastApsSwitchAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMCastApsSwitchAlarm.setDescription('APS is switching!')
hwMCastApsIdleNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 7)).setObjects(("HUAWEI-L2VLAN-MIB", "hwL2VlanDescr"))
if mibBuilder.loadTexts: hwMCastApsIdleNotify.setStatus('current')
if mibBuilder.loadTexts: hwMCastApsIdleNotify.setDescription('APS has finished switching and been idle!')
hwL2mcCacGlobalCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 8)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacGlobalCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacGlobalCountExceed.setDescription('Trap information about l2-multicast CAC:currently configured limit count,group IP address.')
hwL2mcCacGlobalBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 9)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacGlobalBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacGlobalBandwidthExceed.setDescription('Trap information about l2-multicast CAC:currently configured limit bandwidth,group IP address.')
hwL2mcCacGlobalChannelCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 10)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacGlobalChannelCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacGlobalChannelCountExceed.setDescription('Trap information about l2-multicast CAC:channel name,currently configured limit count,group IP address.')
hwL2mcCacGlobalChannelBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 11)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacGlobalChannelBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacGlobalChannelBandwidthExceed.setDescription('Trap information about l2-multicast CAC:channel name,currently configured limit bandwidth,group IP address.')
hwL2mcCacVlanCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 12)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVlanCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVlanCountExceed.setDescription('Trap information about l2-multicast CAC:VLAN ID,currently configured limit count,group IP address.')
hwL2mcCacVlanBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 13)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVlanBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVlanBandwidthExceed.setDescription('Trap information about l2-multicast CAC:VLAN ID,currently configured limit bandwidth,group IP address.')
hwL2mcCacVlanChannelCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 14)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVlanChannelCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVlanChannelCountExceed.setDescription('Trap information about l2-multicast CAC:channel name,VLAN ID,currently configured limit count,group IP address.')
hwL2mcCacVlanChannelBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 15)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVlanChannelBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVlanChannelBandwidthExceed.setDescription('Trap information about l2-multicast CAC:channel name,VLAN ID,currently configured limit bandwidth,group IP address.')
hwL2mcCacVsiCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 16)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVsiCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVsiCountExceed.setDescription('Trap information about l2-multicast CAC:VSI name,currently configured limit count,group IP address.')
hwL2mcCacVsiBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 17)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVsiBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVsiBandwidthExceed.setDescription('Trap information about l2-multicast CAC:VSI name,currently configured limit bandwidth,group IP address.')
hwL2mcCacVsiChannelCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 18)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVsiChannelCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVsiChannelCountExceed.setDescription('Trap information about l2-multicast CAC:channel name,VSI name,currently configured limit count,group IP address.')
hwL2mcCacVsiChannelBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 19)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVsiChannelBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVsiChannelBandwidthExceed.setDescription('Trap information about l2-multicast CAC:channel name,VSI name,currently configured limit bandwidth,group IP address.')
hwL2mcCacPortCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 20)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacPortCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPortCountExceed.setDescription('Trap information about l2-multicast CAC:interface index,currently configured limit count,group IP address.')
hwL2mcCacPortBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 21)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacPortBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPortBandwidthExceed.setDescription('Trap information about l2-multicast CAC:interface index,currently configured limit bandwidth,group IP address.')
hwL2mcCacPortChannelCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 22)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacPortChannelCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPortChannelCountExceed.setDescription('Trap information about l2-multicast CAC:channel name,interface index,currently configured limit count,group IP address.')
hwL2mcCacPortChannelBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 23)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacPortChannelBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPortChannelBandwidthExceed.setDescription('Trap information about l2-multicast CAC:channel name,interface index,currently configured limit bandwidth,group IP address.')
hwL2mcCacPortVlanCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 24)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacPortVlanCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPortVlanCountExceed.setDescription('Trap information about l2-multicast CAC:VLAN ID,interface index,currently configured limit count,group IP address.')
hwL2mcCacPortVlanBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 25)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacPortVlanBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPortVlanBandwidthExceed.setDescription('Trap information about l2-multicast CAC:VLAN ID,interface index,currently configured limit bandwidth,group IP address.')
hwL2mcCacPortVlanChannelCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 26)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacPortVlanChannelCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPortVlanChannelCountExceed.setDescription('Trap information about l2-multicast CAC:channel name,VLAN ID,interface index,currently configured limit count,group IP address.')
hwL2mcCacPortVlanChannelBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 27)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacPortVlanChannelBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacPortVlanChannelBandwidthExceed.setDescription('Trap information about l2-multicast CAC:channel name,VLAN ID,interface index,currently configured limit bandwidth,group IP address.')
hwL2mcCacSubIfCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 28)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacSubIfCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacSubIfCountExceed.setDescription('Trap information about l2-multicast CAC:interface index,currently configured limit count,group IP address.')
hwL2mcCacSubIfBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 29)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacSubIfBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacSubIfBandwidthExceed.setDescription('Trap information about l2-multicast CAC:interface index,currently configured limit bandwidth,group IP address.')
hwL2mcCacSubIfChannelCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 30)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacSubIfChannelCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacSubIfChannelCountExceed.setDescription('Trap information about l2-multicast CAC:channel name,interface index,currently configured limit count,group IP address.')
hwL2mcCacSubIfChannelBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 31)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacSubIfChannelBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacSubIfChannelBandwidthExceed.setDescription('Trap information about l2-multicast CAC:channel name,interface index,currently configured limit bandwidth,group IP address.')
hwL2mcCacLdpPwCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 32)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacPwId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteIpAddress"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacLdpPwCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacLdpPwCountExceed.setDescription('Trap information about l2-multicast CAC:PW ID,currently configured limit count,group IP address.')
hwL2mcCacLdpPwBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 33)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacPwId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteIpAddress"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacLdpPwBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacLdpPwBandwidthExceed.setDescription('Trap information about l2-multicast CAC:PW ID,currently configured limit bandwidth,group IP address.')
hwL2mcCacLdpPwChannelCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 34)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPwId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteIpAddress"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacLdpPwChannelCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacLdpPwChannelCountExceed.setDescription('Trap information about l2-multicast CAC:channel name,PW ID,currently configured limit count,group IP address.')
hwL2mcCacLdpPwChannelBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 35)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPwId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteIpAddress"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacLdpPwChannelBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacLdpPwChannelBandwidthExceed.setDescription('Trap information about l2-multicast CAC:channel name,PW ID,currently configured limit bandwidth,group IP address.')
hwL2mcCacBgpPwCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 36)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteSiteId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacBgpPwCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacBgpPwCountExceed.setDescription('Trap information about l2-multicast CAC:remote site ID,PW ID,currently configured limit count,group IP address.')
hwL2mcCacBgpPwBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 37)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteSiteId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacBgpPwBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacBgpPwBandwidthExceed.setDescription('Trap information about l2-multicast CAC:remote site ID,PW ID,currently configured limit bandwidth,group IP address.')
hwL2mcCacBgpPwChannelCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 38)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteSiteId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacBgpPwChannelCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacBgpPwChannelCountExceed.setDescription('Trap information about l2-multicast CAC:channel name,remote site ID,PW ID,currently configured limit count,group IP address.')
hwL2mcCacBgpPwChannelBandwidthExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 39)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteSiteId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacBgpPwChannelBandwidthExceed.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacBgpPwChannelBandwidthExceed.setDescription('Trap information about l2-multicast CAC:channel name,remote site ID,PW ID,currently configured limit bandwidth,group IP address.')
hwL2mcCacVlanUnspecifiedChannelDeny = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 40)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVlanUnspecifiedChannelDeny.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVlanUnspecifiedChannelDeny.setDescription('Trap information about l2-multicast CAC:VLAN ID.')
hwL2mcCacVsiUnspecifiedChannelDeny = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 41)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacVsiUnspecifiedChannelDeny.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacVsiUnspecifiedChannelDeny.setDescription('Trap information about l2-multicast CAC:VSI name.')
hwL2mcCacGlobalUnspecifiedChannelDeny = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 99, 42)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"))
if mibBuilder.loadTexts: hwL2mcCacGlobalUnspecifiedChannelDeny.setStatus('current')
if mibBuilder.loadTexts: hwL2mcCacGlobalUnspecifiedChannelDeny.setDescription('Trap information about l2-multicast CAC.')
hwMCMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100))
hwMCMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 1))
hwMCMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2))
hwIGSPMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 1, 1)).setObjects(("HUAWEI-MULTICAST-MIB", "hwIGSPSystemInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwVlanCfgGroup"), ("HUAWEI-MULTICAST-MIB", "hwSystemStatisticsGroup"), ("HUAWEI-MULTICAST-MIB", "hwVlanStatisticsGroup"), ("HUAWEI-MULTICAST-MIB", "hwIPGrpInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwMACGrpInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwPortStaticGrpGroup"), ("HUAWEI-MULTICAST-MIB", "hwGrpPolicyCfgGroup"), ("HUAWEI-MULTICAST-MIB", "hwRouterPortInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwRouterPortCfgGroup"), ("HUAWEI-MULTICAST-MIB", "hwPortLimitGroup"), ("HUAWEI-MULTICAST-MIB", "hwMVlanSystemGroup"), ("HUAWEI-MULTICAST-MIB", "hwMVlanEnableGroup"), ("HUAWEI-MULTICAST-MIB", "hwMVlanUserVlanGroup"), ("HUAWEI-MULTICAST-MIB", "hwMVlanGrpInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwMCastSystemGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcastAlarmGroup"), ("HUAWEI-MULTICAST-MIB", "hwL2CacTrapGroup"), ("HUAWEI-MULTICAST-MIB", "hwUserVlanGroup"), ("HUAWEI-MULTICAST-MIB", "hwMVlanStaticFlowGroup"), ("HUAWEI-MULTICAST-MIB", "hwBtvSystemGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcastGroupGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcastListGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcastProfileGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcastProfileCfgGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcastListReferGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcastProfileReferGroup"), ("HUAWEI-MULTICAST-MIB", "hwVlanApplyProfileGroup"), ("HUAWEI-MULTICAST-MIB", "hwPortGroupPolicyGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldSnpgSystemInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanCfgGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemStatisticsGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanStatisticsGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldIpGrpInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldPortStaticGrpGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldGrpPolicyCfgGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldRouterPortInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldRouterPortCfgGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldPortLimitGroup"), ("HUAWEI-MULTICAST-MIB", "hwMldPortGroupPolicyGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcSourceDenyGroup"), ("HUAWEI-MULTICAST-MIB", "hwMVlanIpv6StaticFlowGroup"), ("HUAWEI-MULTICAST-MIB", "hwMcastIpv6GroupGroup"), ("HUAWEI-MULTICAST-MIB", "hwExternIpGrpInfoGroup"), ("HUAWEI-MULTICAST-MIB", "hwExternPortStaticGrpGroup"), ("HUAWEI-MULTICAST-MIB", "hwPortVlanLimitGroup"), ("HUAWEI-MULTICAST-MIB", "hwExternMVlanStaticFlowGroup"), ("HUAWEI-MULTICAST-MIB", "hwExternVlanApplyProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIGSPMibCompliance = hwIGSPMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hwIGSPMibCompliance.setDescription('The compliance statement for device supporting IGMP Snooping.')
hwIGSPSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 1)).setObjects(("HUAWEI-MULTICAST-MIB", "hwIgmpSnoopingEnabled"), ("HUAWEI-MULTICAST-MIB", "hwSsmPolicyAclNum"), ("HUAWEI-MULTICAST-MIB", "hwSendQueryEnabled"), ("HUAWEI-MULTICAST-MIB", "hwSendQuerySourceIpAddr"), ("HUAWEI-MULTICAST-MIB", "hwSnmpTrapEnable"), ("HUAWEI-MULTICAST-MIB", "hwIgmpSnoopingSuppressionTime"), ("HUAWEI-MULTICAST-MIB", "hwIgmpProxyEnabled"), ("HUAWEI-MULTICAST-MIB", "hwIgmpSnoopingProxyEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIGSPSystemInfoGroup = hwIGSPSystemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwIGSPSystemInfoGroup.setDescription('.')
hwVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 2)).setObjects(("HUAWEI-MULTICAST-MIB", "hwVlanIgmpSnoopingEnabled"), ("HUAWEI-MULTICAST-MIB", "hwVlanRouterAgingTime"), ("HUAWEI-MULTICAST-MIB", "hwVlanMaxQueryRespTime"), ("HUAWEI-MULTICAST-MIB", "hwVlanLastMemQueryInt"), ("HUAWEI-MULTICAST-MIB", "hwVlanQueryInt"), ("HUAWEI-MULTICAST-MIB", "hwVlanRobustCount"), ("HUAWEI-MULTICAST-MIB", "hwVlanCheckRouterAlert"), ("HUAWEI-MULTICAST-MIB", "hwVlanSendRouterAlert"), ("HUAWEI-MULTICAST-MIB", "hwVlanIgmpVersion"), ("HUAWEI-MULTICAST-MIB", "hwVlanPromptLeaveEnable"), ("HUAWEI-MULTICAST-MIB", "hwVlanPromptLeaveAclNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanDropUnknown"), ("HUAWEI-MULTICAST-MIB", "hwVlanLimitAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVlanCfgGroup = hwVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwVlanCfgGroup.setDescription('.')
hwSystemStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 3)).setObjects(("HUAWEI-MULTICAST-MIB", "hwSystemRecvVlanUpEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvVlanDownEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvVlanDelEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvPortUpEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvPortDownEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvPortDelEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvPortIncEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvPortExcEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvMSTPBlockEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvMSTPForwardEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwSystemIGMPSysClearStats"), ("HUAWEI-MULTICAST-MIB", "hwSystemIGMPPacketClearStats"), ("HUAWEI-MULTICAST-MIB", "hwSystemRecvLinkChangeEventTimes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSystemStatisticsGroup = hwSystemStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwSystemStatisticsGroup.setDescription('.')
hwVlanStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 4)).setObjects(("HUAWEI-MULTICAST-MIB", "hwVlanRecvIGMPV1ReportNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvIGMPV2ReportNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvIGMPV3ReportNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvIGMPLeaveNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvIGMPV1QueryNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvIGMPV2QueryNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvIGMPV3QueryNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvPimHelloNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanSendQueryNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanIGMPPacketClearStats"), ("HUAWEI-MULTICAST-MIB", "hwVlanSendSourceIPSpecQueryNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVlanStatisticsGroup = hwVlanStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwVlanStatisticsGroup.setDescription('.')
hwIPGrpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 5)).setObjects(("HUAWEI-MULTICAST-MIB", "hwIPGrpUpTime"), ("HUAWEI-MULTICAST-MIB", "hwIPHostUpTime"), ("HUAWEI-MULTICAST-MIB", "hwIPHostExpires"), ("HUAWEI-MULTICAST-MIB", "hwIPHostFlags"), ("HUAWEI-MULTICAST-MIB", "hwIPRtUPTime"), ("HUAWEI-MULTICAST-MIB", "hwIPRtExpires"), ("HUAWEI-MULTICAST-MIB", "hwIPRtFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPGrpInfoGroup = hwIPGrpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPGrpInfoGroup.setDescription('.')
hwMACGrpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 6)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMACGrpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMACGrpInfoGroup = hwMACGrpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMACGrpInfoGroup.setDescription('.')
hwPortStaticGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 7)).setObjects(("HUAWEI-MULTICAST-MIB", "hwPortStaticGrpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortStaticGrpGroup = hwPortStaticGrpGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortStaticGrpGroup.setDescription('.')
hwGrpPolicyCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 8)).setObjects(("HUAWEI-MULTICAST-MIB", "hwGrpPolicyAclNum"), ("HUAWEI-MULTICAST-MIB", "hwGrpPolicyIgmpVersion"), ("HUAWEI-MULTICAST-MIB", "hwGrpPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGrpPolicyCfgGroup = hwGrpPolicyCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwGrpPolicyCfgGroup.setDescription('.')
hwRouterPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 9)).setObjects(("HUAWEI-MULTICAST-MIB", "hwRouterPortUpTime"), ("HUAWEI-MULTICAST-MIB", "hwRouterPortExpires"), ("HUAWEI-MULTICAST-MIB", "hwRouterPortFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRouterPortInfoGroup = hwRouterPortInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortInfoGroup.setDescription('.')
hwRouterPortCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 10)).setObjects(("HUAWEI-MULTICAST-MIB", "hwRouterPortCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRouterPortCfgGroup = hwRouterPortCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwRouterPortCfgGroup.setDescription('.')
hwPortLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 11)).setObjects(("HUAWEI-MULTICAST-MIB", "hwPortLimitNumber"), ("HUAWEI-MULTICAST-MIB", "hwPortLimitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortLimitGroup = hwPortLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortLimitGroup.setDescription('.')
hwMVlanSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 13)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMVlanEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMVlanSystemGroup = hwMVlanSystemGroup.setStatus('current')
if mibBuilder.loadTexts: hwMVlanSystemGroup.setDescription('.')
hwMVlanEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 14)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMVlanStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMVlanEnableGroup = hwMVlanEnableGroup.setStatus('current')
if mibBuilder.loadTexts: hwMVlanEnableGroup.setDescription('.')
hwMVlanUserVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 15)).setObjects(("HUAWEI-MULTICAST-MIB", "hwUserVlanCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMVlanUserVlanGroup = hwMVlanUserVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwMVlanUserVlanGroup.setDescription('.')
hwMVlanGrpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 16)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMVlanGrpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMVlanGrpInfoGroup = hwMVlanGrpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMVlanGrpInfoGroup.setDescription('.')
hwMCastSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 18)).setObjects(("HUAWEI-MULTICAST-MIB", "hwEthTrunkLoadBalancingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMCastSystemGroup = hwMCastSystemGroup.setStatus('current')
if mibBuilder.loadTexts: hwMCastSystemGroup.setDescription('.')
hwL2CacTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 19)).setObjects(("HUAWEI-MULTICAST-MIB", "hwL2mcCacCount"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBandwidth"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGroupAddress"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacChannelName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiName"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacIfIndex"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPwId"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteIpAddress"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacRemoteSiteId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2CacTrapGroup = hwL2CacTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2CacTrapGroup.setDescription('The group of l2-multicast CAC.')
hwVlanIgmpProxyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 20)).setObjects(("HUAWEI-MULTICAST-MIB", "hwVlanIgmpProxyEnabled"), ("HUAWEI-MULTICAST-MIB", "hwVlanQueryInterval"), ("HUAWEI-MULTICAST-MIB", "hwVlanMaxResponseTime"), ("HUAWEI-MULTICAST-MIB", "hwVlanLastMemQueryInterval"), ("HUAWEI-MULTICAST-MIB", "hwVlanIgmpRouterAgingTime"), ("HUAWEI-MULTICAST-MIB", "hwVlanMaxIgmpVersion"), ("HUAWEI-MULTICAST-MIB", "hwVlanIgmpRobustCount"), ("HUAWEI-MULTICAST-MIB", "hwVlanRequireRouterAlert"), ("HUAWEI-MULTICAST-MIB", "hwVlanIgmpSendRouterAlert"), ("HUAWEI-MULTICAST-MIB", "hwVlanIgmpPromptLeaveEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVlanIgmpProxyGroup = hwVlanIgmpProxyGroup.setStatus('current')
if mibBuilder.loadTexts: hwVlanIgmpProxyGroup.setDescription('.')
hwL2McastVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 21)).setObjects(("HUAWEI-MULTICAST-MIB", "hwVlanL2FlowTriggerEnabled"), ("HUAWEI-MULTICAST-MIB", "hwVlanL2StaticFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2McastVlanCfgGroup = hwL2McastVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2McastVlanCfgGroup.setDescription('.')
hwGrpMcastCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 22)).setObjects(("HUAWEI-MULTICAST-MIB", "hwGrpIpAddress"), ("HUAWEI-MULTICAST-MIB", "hwGrpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGrpMcastCfgGroup = hwGrpMcastCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwGrpMcastCfgGroup.setDescription('.')
hwVlanMcastGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 23)).setObjects(("HUAWEI-MULTICAST-MIB", "hwVlanMcastProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVlanMcastGrpGroup = hwVlanMcastGrpGroup.setStatus('current')
if mibBuilder.loadTexts: hwVlanMcastGrpGroup.setDescription('.')
hwGrpMcastProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 24)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMulticastProfilePreviewTimes"), ("HUAWEI-MULTICAST-MIB", "hwMulticastProfilePreviewMinutes"), ("HUAWEI-MULTICAST-MIB", "hwMulticastProfilePreviewInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGrpMcastProfileGroup = hwGrpMcastProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwGrpMcastProfileGroup.setDescription('.')
hwUserVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 25)).setObjects(("HUAWEI-MULTICAST-MIB", "hwUserVlanFlowTriggerEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUserVlanGroup = hwUserVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwUserVlanGroup.setDescription('The group of user vlan config flow-trigger.')
hwMVlanStaticFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 26)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMVlanStaticFlowRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMVlanStaticFlowGroup = hwMVlanStaticFlowGroup.setStatus('current')
if mibBuilder.loadTexts: hwMVlanStaticFlowGroup.setDescription('The group of multicast vlan config static-flow.')
hwBtvSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 27)).setObjects(("HUAWEI-MULTICAST-MIB", "hwBtvEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBtvSystemGroup = hwBtvSystemGroup.setStatus('current')
if mibBuilder.loadTexts: hwBtvSystemGroup.setDescription('The group of enable Btv function.')
hwMcastGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 28)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMcastGroupName"), ("HUAWEI-MULTICAST-MIB", "hwMcastGroupAddress"), ("HUAWEI-MULTICAST-MIB", "hwMcastGroupRowStatus"), ("HUAWEI-MULTICAST-MIB", "hwMcastSourceAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcastGroupGroup = hwMcastGroupGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcastGroupGroup.setDescription('The group of multicast-group.')
hwMcastListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 29)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMcastListName"), ("HUAWEI-MULTICAST-MIB", "hwMcastListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcastListGroup = hwMcastListGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcastListGroup.setDescription('The group of multicast-list.')
hwMcastProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 30)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMcastProfileName"), ("HUAWEI-MULTICAST-MIB", "hwMcastProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcastProfileGroup = hwMcastProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileGroup.setDescription('The group of multicast-profile.')
hwMcastProfileCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 31)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMcastProfileCfgPreviewTimes"), ("HUAWEI-MULTICAST-MIB", "hwMcastProfileCfgPreviewMinute"), ("HUAWEI-MULTICAST-MIB", "hwMcastProfileCfgPreviewInterval"), ("HUAWEI-MULTICAST-MIB", "hwMcastProfileCfgMaxNumProgram"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcastProfileCfgGroup = hwMcastProfileCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileCfgGroup.setDescription('The group of config multicast-profile.')
hwMcastListReferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 32)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMcastListReferRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcastListReferGroup = hwMcastListReferGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcastListReferGroup.setDescription('The group of multicast-list refers to multicast-group.')
hwMcastProfileReferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 33)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMcastPreviewStatus"), ("HUAWEI-MULTICAST-MIB", "hwMcastProfileReferRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcastProfileReferGroup = hwMcastProfileReferGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcastProfileReferGroup.setDescription('The group of multicast-profile refers to multicast-list.')
hwVlanApplyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 34)).setObjects(("HUAWEI-MULTICAST-MIB", "hwVlanApplyProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVlanApplyProfileGroup = hwVlanApplyProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwVlanApplyProfileGroup.setDescription('The group of vlan attach multicast-profile.')
hwPortGroupPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 35)).setObjects(("HUAWEI-MULTICAST-MIB", "hwPortGroupPolicyAclNumber"), ("HUAWEI-MULTICAST-MIB", "hwPortGroupPolicyVersion"), ("HUAWEI-MULTICAST-MIB", "hwPortGroupPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortGroupPolicyGroup = hwPortGroupPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortGroupPolicyGroup.setDescription('The group of port group policy.')
hwMldSnpgSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 36)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldSnoopingEnabled"), ("HUAWEI-MULTICAST-MIB", "hwMldSendQueryEnabled"), ("HUAWEI-MULTICAST-MIB", "hwMldSendQuerySourceIpAddr"), ("HUAWEI-MULTICAST-MIB", "hwMldSnoopingSuppressionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldSnpgSystemInfoGroup = hwMldSnpgSystemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldSnpgSystemInfoGroup.setDescription('The group of MLD snooping system information.')
hwMldVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 37)).setObjects(("HUAWEI-MULTICAST-MIB", "hwVlanMldSnoopingEnabled"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanRouterAgingTime"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanMaxQueryRespTime"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanLastListenerQueryInt"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanQueryInt"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanRobustCount"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanCheckRouterAlert"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanSendRouterAlert"), ("HUAWEI-MULTICAST-MIB", "hwVlanMldVersion"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanPromptLeaveEnable"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanPromptLeaveAclNum"), ("HUAWEI-MULTICAST-MIB", "hwMldVlanDropUnknown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldVlanCfgGroup = hwMldVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanCfgGroup.setDescription('The group of MLD vlan configuration.')
hwMldSystemStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 38)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvVlanUpEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvVlanDownEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvVlanDelEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvPortUpEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvPortDownEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvPortDelEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvPortIncEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvPortExcEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvMstpBlockEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvMstpForwardEventTimes"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemSysClearStats"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemPacketClearStats"), ("HUAWEI-MULTICAST-MIB", "hwMldSystemRecvLinkChangeEventTimes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldSystemStatisticsGroup = hwMldSystemStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldSystemStatisticsGroup.setDescription('The group of MLD system statistics.')
hwMldVlanStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 39)).setObjects(("HUAWEI-MULTICAST-MIB", "hwVlanRecvMldV1ReportNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvMldV2ReportNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvMldDoneNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvMldV1QueryNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvMldV2QueryNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanRecvIpv6PimHelloNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanSendMldQueryNum"), ("HUAWEI-MULTICAST-MIB", "hwVlanMldPacketClearStats"), ("HUAWEI-MULTICAST-MIB", "hwVlanSendSourceIpSpecMldQueryNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldVlanStatisticsGroup = hwMldVlanStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldVlanStatisticsGroup.setDescription('The group of MLD vlan statistics.')
hwMldIpGrpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 40)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldIpGrpUpTime"), ("HUAWEI-MULTICAST-MIB", "hwMldIpHostUpTime"), ("HUAWEI-MULTICAST-MIB", "hwMldIpHostExpires"), ("HUAWEI-MULTICAST-MIB", "hwMldIpHostFlag"), ("HUAWEI-MULTICAST-MIB", "hwMldIpRtUpTime"), ("HUAWEI-MULTICAST-MIB", "hwMldIpRtExpires"), ("HUAWEI-MULTICAST-MIB", "hwMldIpRtFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldIpGrpInfoGroup = hwMldIpGrpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldIpGrpInfoGroup.setDescription('The group of MLD IP group information.')
hwMldPortStaticGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 41)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldPortStaticGrpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldPortStaticGrpGroup = hwMldPortStaticGrpGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldPortStaticGrpGroup.setDescription('The group of MLD port static group.')
hwMldGrpPolicyCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 42)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldGrpPolicyAclNum"), ("HUAWEI-MULTICAST-MIB", "hwGrpPolicyMldVersion"), ("HUAWEI-MULTICAST-MIB", "hwMldGrpPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldGrpPolicyCfgGroup = hwMldGrpPolicyCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldGrpPolicyCfgGroup.setDescription('The group of MLD group policy configuration.')
hwMldRouterPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 43)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldRouterPortUpTime"), ("HUAWEI-MULTICAST-MIB", "hwMldRouterPortExpires"), ("HUAWEI-MULTICAST-MIB", "hwMldRouterPortFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldRouterPortInfoGroup = hwMldRouterPortInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortInfoGroup.setDescription('The group of router port information.')
hwMldRouterPortCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 44)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldRouterPortCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldRouterPortCfgGroup = hwMldRouterPortCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldRouterPortCfgGroup.setDescription('The group of router port configuration.')
hwMldPortLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 45)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldPortLimitNumber"), ("HUAWEI-MULTICAST-MIB", "hwMldPortLimitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldPortLimitGroup = hwMldPortLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldPortLimitGroup.setDescription('The group of MLD port limit.')
hwMldPortGroupPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 46)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMldPortGroupPolicyAclNumber"), ("HUAWEI-MULTICAST-MIB", "hwMldPortGroupPolicyVersion"), ("HUAWEI-MULTICAST-MIB", "hwMldPortGroupPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMldPortGroupPolicyGroup = hwMldPortGroupPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hwMldPortGroupPolicyGroup.setDescription('The group of MLD port group policy.')
hwMcSourceDenyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 47)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMcSourceDenyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcSourceDenyGroup = hwMcSourceDenyGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcSourceDenyGroup.setDescription('The group of multicast source deny.')
hwMVlanIpv6StaticFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 48)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMVlanIpv6StaticFlowRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMVlanIpv6StaticFlowGroup = hwMVlanIpv6StaticFlowGroup.setStatus('current')
if mibBuilder.loadTexts: hwMVlanIpv6StaticFlowGroup.setDescription('The group of multicast vlan config IPv6 static-flow.')
hwMcastIpv6GroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 49)).setObjects(("HUAWEI-MULTICAST-MIB", "hwMcastIpv6GroupName"), ("HUAWEI-MULTICAST-MIB", "hwMcastIpv6GroupAddress"), ("HUAWEI-MULTICAST-MIB", "hwMcastIpv6GroupRowStatus"), ("HUAWEI-MULTICAST-MIB", "hwMcastIpv6SourceAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcastIpv6GroupGroup = hwMcastIpv6GroupGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcastIpv6GroupGroup.setDescription('The group of IPv6 multicast-group.')
hwExternIpGrpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 50)).setObjects(("HUAWEI-MULTICAST-MIB", "hwExternIpGrpUpTime"), ("HUAWEI-MULTICAST-MIB", "hwExternIpHostUpTime"), ("HUAWEI-MULTICAST-MIB", "hwExternIpHostExpires"), ("HUAWEI-MULTICAST-MIB", "hwExternIpHostFlag"), ("HUAWEI-MULTICAST-MIB", "hwExternIpRtUpTime"), ("HUAWEI-MULTICAST-MIB", "hwExternIpRtExpires"), ("HUAWEI-MULTICAST-MIB", "hwExternIpRtFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwExternIpGrpInfoGroup = hwExternIpGrpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwExternIpGrpInfoGroup.setDescription('The group of externed IP group information.')
hwExternPortStaticGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 51)).setObjects(("HUAWEI-MULTICAST-MIB", "hwExternPortStaticGrpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwExternPortStaticGrpGroup = hwExternPortStaticGrpGroup.setStatus('current')
if mibBuilder.loadTexts: hwExternPortStaticGrpGroup.setDescription('The group of externed port static group.')
hwPortVlanLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 52)).setObjects(("HUAWEI-MULTICAST-MIB", "hwPortVlanLimitNumber"), ("HUAWEI-MULTICAST-MIB", "hwPortVlanLimitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortVlanLimitGroup = hwPortVlanLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortVlanLimitGroup.setDescription('The group of port vlan limit.')
hwExternMVlanStaticFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 53)).setObjects(("HUAWEI-MULTICAST-MIB", "hwExternMVlanStaticFlowRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwExternMVlanStaticFlowGroup = hwExternMVlanStaticFlowGroup.setStatus('current')
if mibBuilder.loadTexts: hwExternMVlanStaticFlowGroup.setDescription('The group of extern multicast vlan config static-flow.')
hwExternVlanApplyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 54)).setObjects(("HUAWEI-MULTICAST-MIB", "hwExternVlanApplyProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwExternVlanApplyProfileGroup = hwExternVlanApplyProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwExternVlanApplyProfileGroup.setDescription('The group of extern vlan attach multicast-profile.')
hwMcastAlarmGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 44, 100, 2, 99)).setObjects(("HUAWEI-MULTICAST-MIB", "hwCfgRefreshFailAlarm"), ("HUAWEI-MULTICAST-MIB", "hwMCastTableLoadAbnormalNotify"), ("HUAWEI-MULTICAST-MIB", "hwMCastTableLoadAbnormalResume"), ("HUAWEI-MULTICAST-MIB", "hwMCastVlanFailAlarm"), ("HUAWEI-MULTICAST-MIB", "hwMCastVlanOkNotify"), ("HUAWEI-MULTICAST-MIB", "hwMCastApsSwitchAlarm"), ("HUAWEI-MULTICAST-MIB", "hwMCastApsIdleNotify"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGlobalCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGlobalBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGlobalChannelCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGlobalChannelBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanChannelCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanChannelBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiChannelCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiChannelBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPortCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPortBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPortChannelCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPortChannelBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPortVlanCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPortVlanBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPortVlanChannelCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacPortVlanChannelBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacSubIfCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacSubIfBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacSubIfChannelCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacSubIfChannelBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacLdpPwCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacLdpPwBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacLdpPwChannelCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacLdpPwChannelBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBgpPwCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBgpPwBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBgpPwChannelCountExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacBgpPwChannelBandwidthExceed"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVlanUnspecifiedChannelDeny"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacVsiUnspecifiedChannelDeny"), ("HUAWEI-MULTICAST-MIB", "hwL2mcCacGlobalUnspecifiedChannelDeny"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMcastAlarmGroup = hwMcastAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: hwMcastAlarmGroup.setDescription('.')
mibBuilder.exportSymbols("HUAWEI-MULTICAST-MIB", hwMldSnoopingEnabled=hwMldSnoopingEnabled, hwPortVlanLimitGroup=hwPortVlanLimitGroup, hwMcSourceDenyRowStatus=hwMcSourceDenyRowStatus, hwMldVlanRouterAgingTime=hwMldVlanRouterAgingTime, hwMldSystemRecvPortDownEventTimes=hwMldSystemRecvPortDownEventTimes, hwGrpRowStatus=hwGrpRowStatus, hwExternIpHostUpTime=hwExternIpHostUpTime, hwL2mcCacBgpPwChannelBandwidthExceed=hwL2mcCacBgpPwChannelBandwidthExceed, hwPortVlanLimitTable=hwPortVlanLimitTable, hwMldRouterPortExpires=hwMldRouterPortExpires, hwMldVlanIndex=hwMldVlanIndex, hwMldVlanStatsVlanIndex=hwMldVlanStatsVlanIndex, hwL2McastVlanCfgEntry=hwL2McastVlanCfgEntry, hwPortStaticGrpVlanIndex=hwPortStaticGrpVlanIndex, hwL2mcCacGroupAddress=hwL2mcCacGroupAddress, hwStatisticsInfo=hwStatisticsInfo, hwMldIpGrpInfoTable=hwMldIpGrpInfoTable, hwMldPortStaticGrpIfIndex=hwMldPortStaticGrpIfIndex, hwL2McastVlanIndex=hwL2McastVlanIndex, hwVlanPromptLeaveEnable=hwVlanPromptLeaveEnable, hwMldSystemRecvMstpBlockEventTimes=hwMldSystemRecvMstpBlockEventTimes, hwMulticastProfilePreviewInterval=hwMulticastProfilePreviewInterval, hwMcastIpv6GroupAddress=hwMcastIpv6GroupAddress, hwMultiCastCommonObject=hwMultiCastCommonObject, hwVlanQueryInterval=hwVlanQueryInterval, hwRouterPortVlanIndex=hwRouterPortVlanIndex, hwExternIpGrpUpTime=hwExternIpGrpUpTime, hwExternVlanApplyProfileEntry=hwExternVlanApplyProfileEntry, hwMcSourceDenyVlanIndex=hwMcSourceDenyVlanIndex, hwMcastListTable=hwMcastListTable, hwMldIpHostFlag=hwMldIpHostFlag, hwMldPortGroupPolicyEntry=hwMldPortGroupPolicyEntry, hwPortGroupPolicyRowStatus=hwPortGroupPolicyRowStatus, hwMcastListIndex=hwMcastListIndex, hwSystemRecvPortExcEventTimes=hwSystemRecvPortExcEventTimes, hwExternPortStaticGrpVlanIndex=hwExternPortStaticGrpVlanIndex, hwVlanQueryInt=hwVlanQueryInt, hwL2mcCacVsiChannelBandwidthExceed=hwL2mcCacVsiChannelBandwidthExceed, hwExternMVlanStaticFlowGrpAddress=hwExternMVlanStaticFlowGrpAddress, hwMcastListReferTable=hwMcastListReferTable, hwMcastProfileGroup=hwMcastProfileGroup, hwRouterPortExpires=hwRouterPortExpires, hwPortGroupPolicyTable=hwPortGroupPolicyTable, hwPortGroupPolicyAclNumber=hwPortGroupPolicyAclNumber, hwMldRouterPortCfgRowStatus=hwMldRouterPortCfgRowStatus, hwMcastProfileCfgPreviewInterval=hwMcastProfileCfgPreviewInterval, hwExternPortIfIndex=hwExternPortIfIndex, hwExternIpGrpInfoGroup=hwExternIpGrpInfoGroup, hwExternMVlanStaticFlowGroup=hwExternMVlanStaticFlowGroup, hwMldRouterPortCfgGroup=hwMldRouterPortCfgGroup, hwMldGrpPolicyCfgTable=hwMldGrpPolicyCfgTable, hwMcSourceDenyEntry=hwMcSourceDenyEntry, hwVlanSendMldQueryNum=hwVlanSendMldQueryNum, hwPortVlanLimitNumber=hwPortVlanLimitNumber, hwVlanMcastGrpTable=hwVlanMcastGrpTable, hwMldPortStaticGrpRowStatus=hwMldPortStaticGrpRowStatus, hwL2mcCacChannelName=hwL2mcCacChannelName, hwMVlanIpv6StaticFlowGroup=hwMVlanIpv6StaticFlowGroup, hwMldPortStaticGrpGroup=hwMldPortStaticGrpGroup, hwVlanRecvMldV1ReportNum=hwVlanRecvMldV1ReportNum, hwMldPortGroupPolicyRowStatus=hwMldPortGroupPolicyRowStatus, hwL2McastVlanCfgTable=hwL2McastVlanCfgTable, hwL2mcCacLdpPwCountExceed=hwL2mcCacLdpPwCountExceed, hwMldRouterPortCfgIfIndex=hwMldRouterPortCfgIfIndex, hwIPGrpInfoEntry=hwIPGrpInfoEntry, hwPortLimitTable=hwPortLimitTable, hwGrpIpAddress=hwGrpIpAddress, hwRouterPortCfgEntry=hwRouterPortCfgEntry, hwMcastListRowStatus=hwMcastListRowStatus, hwMldPortLimitTable=hwMldPortLimitTable, hwMcastProfileName=hwMcastProfileName, hwMldSnpgMibObject=hwMldSnpgMibObject, hwVlanPromptLeaveAclNum=hwVlanPromptLeaveAclNum, hwExternMVlanStaticFlowEntry=hwExternMVlanStaticFlowEntry, hwExternPortStaticSourceAddr=hwExternPortStaticSourceAddr, hwSystemRecvPortUpEventTimes=hwSystemRecvPortUpEventTimes, hwUserVlanGroup=hwUserVlanGroup, hwMcastListReferEntry=hwMcastListReferEntry, hwRouterPortIfIndex=hwRouterPortIfIndex, hwL2mcCacGlobalChannelCountExceed=hwL2mcCacGlobalChannelCountExceed, hwExternIpGrpInfoTable=hwExternIpGrpInfoTable, hwMldVlanCfgGroup=hwMldVlanCfgGroup, hwMcastSourceAddress=hwMcastSourceAddress, hwIgmpProxyEnabled=hwIgmpProxyEnabled, hwVlanIndex=hwVlanIndex, hwMldVlanStatisticsTable=hwMldVlanStatisticsTable, hwMVlanGrpPortIfIndex=hwMVlanGrpPortIfIndex, hwMcastProfileRowStatus=hwMcastProfileRowStatus, hwSystemRecvLinkChangeEventTimes=hwSystemRecvLinkChangeEventTimes, hwMldVlanDropUnknown=hwMldVlanDropUnknown, hwMldGrpPolicyVlanIndex=hwMldGrpPolicyVlanIndex, hwVlanRecvIpv6PimHelloNum=hwVlanRecvIpv6PimHelloNum, hwMldPortStaticGrpEntry=hwMldPortStaticGrpEntry, hwVlanIgmpSnoopingEnabled=hwVlanIgmpSnoopingEnabled, hwMcastAlarmGroup=hwMcastAlarmGroup, hwVlanCfgTable=hwVlanCfgTable, hwSystemRecvMSTPForwardEventTimes=hwSystemRecvMSTPForwardEventTimes, hwExternVlanApplyProfileTable=hwExternVlanApplyProfileTable, hwUserVlanCfgRowStatus=hwUserVlanCfgRowStatus, hwVlanCheckRouterAlert=hwVlanCheckRouterAlert, hwMldSystemRecvVlanDownEventTimes=hwMldSystemRecvVlanDownEventTimes, hwGrpPolicyCfgGroup=hwGrpPolicyCfgGroup, hwVlanRecvPimHelloNum=hwVlanRecvPimHelloNum, hwMACGrpInfoGroup=hwMACGrpInfoGroup, PortFlag=PortFlag, hwMldVlanQueryInt=hwMldVlanQueryInt, hwMcastGrpCfgEntry=hwMcastGrpCfgEntry, hwVlanStatisticsEntry=hwVlanStatisticsEntry, hwMVlanGrpInfoGroup=hwMVlanGrpInfoGroup, hwGrpPolicyAclNum=hwGrpPolicyAclNum, hwMldIpGrpInfoGroup=hwMldIpGrpInfoGroup, hwGrpMcastProfileGroup=hwGrpMcastProfileGroup, hwVlanIgmpPromptLeaveEnable=hwVlanIgmpPromptLeaveEnable, hwExternVlanApplyProfileGroup=hwExternVlanApplyProfileGroup, hwMldIpRtUpTime=hwMldIpRtUpTime, hwRouterPortUpTime=hwRouterPortUpTime, hwMCastApsSwitchAlarm=hwMCastApsSwitchAlarm, hwMcastIpv6GroupEntry=hwMcastIpv6GroupEntry, hwMldPortGroupPolicyAclNumber=hwMldPortGroupPolicyAclNumber, hwUserVlanFlowTriggerEnable=hwUserVlanFlowTriggerEnable, hwVlanMldSnoopingEnabled=hwVlanMldSnoopingEnabled, hwMcastProfileReferRowStatus=hwMcastProfileReferRowStatus, hwMldRouterPortIfIndex=hwMldRouterPortIfIndex, hwGrpPolicyCfgEntry=hwGrpPolicyCfgEntry, hwPortLimitNumber=hwPortLimitNumber, hwExternIpHostFlag=hwExternIpHostFlag, hwMldPortGroupPolicyTable=hwMldPortGroupPolicyTable, hwVlanSendSourceIpSpecMldQueryNum=hwVlanSendSourceIpSpecMldQueryNum, hwMldRouterPortInfoGroup=hwMldRouterPortInfoGroup, hwMldPortLimitGroup=hwMldPortLimitGroup, hwVlanMcastIndex=hwVlanMcastIndex, hwMcastListReferRowStatus=hwMcastListReferRowStatus, hwSystemIGMPSysClearStats=hwSystemIGMPSysClearStats, hwPortGroupPolicyGroup=hwPortGroupPolicyGroup, hwMldSystemRecvMstpForwardEventTimes=hwMldSystemRecvMstpForwardEventTimes, hwVlanL2FlowTriggerEnabled=hwVlanL2FlowTriggerEnabled, hwMCMibCompliances=hwMCMibCompliances, hwExternIpRtUpTime=hwExternIpRtUpTime, hwMldRouterPortUpTime=hwMldRouterPortUpTime, hwVlanRecvIGMPLeaveNum=hwVlanRecvIGMPLeaveNum, hwVlanMcastGrpEntry=hwVlanMcastGrpEntry, hwMldSnpgSystemInfo=hwMldSnpgSystemInfo, hwL2mcCacPortVlanCountExceed=hwL2mcCacPortVlanCountExceed, hwMVlanStaticFlowEntry=hwMVlanStaticFlowEntry, hwMVlanSystemInfo=hwMVlanSystemInfo, hwMldPortStaticGrpAddr=hwMldPortStaticGrpAddr, hwGrpNameIndex=hwGrpNameIndex, hwGrpPolicyRowStatus=hwGrpPolicyRowStatus, hwL2mcCacBgpPwCountExceed=hwL2mcCacBgpPwCountExceed, hwSystemRecvMSTPBlockEventTimes=hwSystemRecvMSTPBlockEventTimes, hwMcSourceDenyTable=hwMcSourceDenyTable, hwMldSendQuerySourceIpAddr=hwMldSendQuerySourceIpAddr, hwExternSourceMacAddress=hwExternSourceMacAddress, hwVlanRecvMldV2ReportNum=hwVlanRecvMldV2ReportNum, hwVlanIgmpProxyIndex=hwVlanIgmpProxyIndex, hwVlanRecvIGMPV2ReportNum=hwVlanRecvIGMPV2ReportNum, hwMcastGroupIndex=hwMcastGroupIndex, hwMldSystemStatisticsInfo=hwMldSystemStatisticsInfo, hwMVlanGrpInfoEntry=hwMVlanGrpInfoEntry, hwMVlanEnableTable=hwMVlanEnableTable, hwL2mcCacLdpPwChannelBandwidthExceed=hwL2mcCacLdpPwChannelBandwidthExceed, hwMldSnpgSystemInfoGroup=hwMldSnpgSystemInfoGroup, hwVlanIgmpProxyEnabled=hwVlanIgmpProxyEnabled, hwL2mcCacRemoteIpAddress=hwL2mcCacRemoteIpAddress, hwMldIpRtFlag=hwMldIpRtFlag, hwMldPortGroupPolicyIfIndex=hwMldPortGroupPolicyIfIndex, hwExternIpSourceAddress=hwExternIpSourceAddress, hwMcastGroupRowStatus=hwMcastGroupRowStatus, hwSystemRecvPortDelEventTimes=hwSystemRecvPortDelEventTimes, hwMcastListName=hwMcastListName, hwMcastProfileTable=hwMcastProfileTable, hwVlanRecvIGMPV1ReportNum=hwVlanRecvIGMPV1ReportNum, hwMldSystemStatisticsGroup=hwMldSystemStatisticsGroup, hwMldVlanRobustCount=hwMldVlanRobustCount, hwVlanRecvIGMPV3QueryNum=hwVlanRecvIGMPV3QueryNum, hwMldSendQueryEnabled=hwMldSendQueryEnabled, hwMVlanStaticFlowRowStatus=hwMVlanStaticFlowRowStatus, hwMACGrpVlanIndex=hwMACGrpVlanIndex, hwL2mcCacVsiUnspecifiedChannelDeny=hwL2mcCacVsiUnspecifiedChannelDeny, hwMldVlanCheckRouterAlert=hwMldVlanCheckRouterAlert, hwRouterPortCfgIfIndex=hwRouterPortCfgIfIndex, hwMldVlanStatisticsEntry=hwMldVlanStatisticsEntry, hwVlanRequireRouterAlert=hwVlanRequireRouterAlert, hwPortStaticGrpIfIndex=hwPortStaticGrpIfIndex, hwVlanMldVersion=hwVlanMldVersion, hwL2mcCacVlanUnspecifiedChannelDeny=hwL2mcCacVlanUnspecifiedChannelDeny, hwL2mcCacPortVlanBandwidthExceed=hwL2mcCacPortVlanBandwidthExceed, hwVlanIgmpProxyGroup=hwVlanIgmpProxyGroup, hwMcastProfileReferEntry=hwMcastProfileReferEntry, hwL2mcCacGlobalCountExceed=hwL2mcCacGlobalCountExceed, hwExternIpGrpAddress=hwExternIpGrpAddress, hwIPHostExpires=hwIPHostExpires, hwL2mcCacSubIfBandwidthExceed=hwL2mcCacSubIfBandwidthExceed, hwIGSPMibObject=hwIGSPMibObject, hwMldVlanCfgInfo=hwMldVlanCfgInfo, hwPortGroupPolicyEntry=hwPortGroupPolicyEntry, hwUserVlanIndex=hwUserVlanIndex, hwMldSystemRecvLinkChangeEventTimes=hwMldSystemRecvLinkChangeEventTimes, hwMldIpGrpVlanIndex=hwMldIpGrpVlanIndex, hwMcastGroupTable=hwMcastGroupTable, hwMldIpGrpInfoEntry=hwMldIpGrpInfoEntry, hwL2mcCacLdpPwBandwidthExceed=hwL2mcCacLdpPwBandwidthExceed, hwMldGrpPolicyCfgGroup=hwMldGrpPolicyCfgGroup, hwPortLimitIfIndex=hwPortLimitIfIndex, hwPortStaticGrpEntry=hwPortStaticGrpEntry, hwMldSystemRecvVlanDelEventTimes=hwMldSystemRecvVlanDelEventTimes, hwMldSystemPacketClearStats=hwMldSystemPacketClearStats, hwMVlanIpv6StaticFlowEntry=hwMVlanIpv6StaticFlowEntry, hwMVlanEnableEntry=hwMVlanEnableEntry, hwIPGrpInfoTable=hwIPGrpInfoTable, hwPortLimitRowStatus=hwPortLimitRowStatus, hwGrpPolicyMldVersion=hwGrpPolicyMldVersion, hwMldVlanStatisticsGroup=hwMldVlanStatisticsGroup, hwMldGrpPolicyRowStatus=hwMldGrpPolicyRowStatus, hwExternPortStaticGroupAddr=hwExternPortStaticGroupAddr, hwVlanMulticastProfileName=hwVlanMulticastProfileName, hwL2mcCacPortCountExceed=hwL2mcCacPortCountExceed, hwMldPortStaticSourceAddr=hwMldPortStaticSourceAddr, hwPortLimitEntry=hwPortLimitEntry, hwMVlanStaticFlowGroup=hwMVlanStaticFlowGroup, hwMldSystemSysClearStats=hwMldSystemSysClearStats, hwIgmpSnoopingProxyEnabled=hwIgmpSnoopingProxyEnabled, hwPortInfo=hwPortInfo, hwSystemIGMPPacketClearStats=hwSystemIGMPPacketClearStats, hwExternPortStaticGrpGroup=hwExternPortStaticGrpGroup, hwMCastVlanOkNotify=hwMCastVlanOkNotify, hwExternPortStaticGrpIfIndex=hwExternPortStaticGrpIfIndex, hwSendQueryEnabled=hwSendQueryEnabled, hwMldVlanPromptLeaveEnable=hwMldVlanPromptLeaveEnable, hwGrpPolicyVlanIndex=hwGrpPolicyVlanIndex, hwPortVlanLimitEntry=hwPortVlanLimitEntry, hwIPRtUPTime=hwIPRtUPTime, hwL2mcCacSubIfChannelCountExceed=hwL2mcCacSubIfChannelCountExceed, hwMcastIpv6GroupGroup=hwMcastIpv6GroupGroup, hwMCMibGroups=hwMCMibGroups, hwMldMCGrpInfo=hwMldMCGrpInfo, hwExternMVlanStaticFlowSourceAddress=hwExternMVlanStaticFlowSourceAddress, hwMulticastProfilePreviewMinutes=hwMulticastProfilePreviewMinutes, hwSendQuerySourceIpAddr=hwSendQuerySourceIpAddr, hwVlanIgmpRobustCount=hwVlanIgmpRobustCount, hwVlanApplyProfileTable=hwVlanApplyProfileTable, hwVlanRecvIGMPV1QueryNum=hwVlanRecvIGMPV1QueryNum, hwMVlanEnableGroup=hwMVlanEnableGroup, hwMcastGroupGroup=hwMcastGroupGroup, hwMldPortStaticGrpVlanIndex=hwMldPortStaticGrpVlanIndex, hwL2mcCacVsiName=hwL2mcCacVsiName, hwMldSystemRecvPortDelEventTimes=hwMldSystemRecvPortDelEventTimes, hwIGSPSystemInfoGroup=hwIGSPSystemInfoGroup, hwVlanIgmpRouterAgingTime=hwVlanIgmpRouterAgingTime, hwMcastProfileCfgGroup=hwMcastProfileCfgGroup, hwMCGrpInfo=hwMCGrpInfo, hwMVlanSystemGroup=hwMVlanSystemGroup, hwExternPortStaticGrpRowStatus=hwExternPortStaticGrpRowStatus, hwMldPortLimitVlanIndex=hwMldPortLimitVlanIndex)
mibBuilder.exportSymbols("HUAWEI-MULTICAST-MIB", hwVlanSendQueryNum=hwVlanSendQueryNum, hwPortVlanLimitIfIndex=hwPortVlanLimitIfIndex, hwExternVlanApplyProfileRowStatus=hwExternVlanApplyProfileRowStatus, hwMVlanMibObject=hwMVlanMibObject, hwL2mcCacGlobalUnspecifiedChannelDeny=hwL2mcCacGlobalUnspecifiedChannelDeny, hwVlanCfgEntry=hwVlanCfgEntry, hwRouterPortInfoEntry=hwRouterPortInfoEntry, hwRouterPortInfoTable=hwRouterPortInfoTable, hwL2mcCacIfIndex=hwL2mcCacIfIndex, hwIgmpSnoopingEnabled=hwIgmpSnoopingEnabled, hwMultiCastMIB=hwMultiCastMIB, hwGrpPolicyCfgTable=hwGrpPolicyCfgTable, hwL2CacTrapGroup=hwL2CacTrapGroup, hwL2mcCacVlanCountExceed=hwL2mcCacVlanCountExceed, hwVlanIgmpVersion=hwVlanIgmpVersion, hwPortGroupPolicyIfIndex=hwPortGroupPolicyIfIndex, hwMVlanStaticFlowTable=hwMVlanStaticFlowTable, hwL2mcCacGlobalBandwidthExceed=hwL2mcCacGlobalBandwidthExceed, hwMcastIpv6GroupName=hwMcastIpv6GroupName, hwMCastTableLoadAbnormalNotify=hwMCastTableLoadAbnormalNotify, hwVlanMaxIgmpVersion=hwVlanMaxIgmpVersion, hwVlanRecvMldV2QueryNum=hwVlanRecvMldV2QueryNum, hwMldPortLimitRowStatus=hwMldPortLimitRowStatus, hwGrpProfileNameIndex=hwGrpProfileNameIndex, hwMcastProfileCfgEntry=hwMcastProfileCfgEntry, hwL2mcCacPortVlanChannelCountExceed=hwL2mcCacPortVlanChannelCountExceed, hwL2mcCacPortVlanChannelBandwidthExceed=hwL2mcCacPortVlanChannelBandwidthExceed, hwMVlanIndex=hwMVlanIndex, hwPortLimitGroup=hwPortLimitGroup, hwL2mcCacPwId=hwL2mcCacPwId, hwL2mcCacBandwidth=hwL2mcCacBandwidth, hwMcastGroupName=hwMcastGroupName, hwMACGrpPortIfIndex=hwMACGrpPortIfIndex, hwSystemRecvPortDownEventTimes=hwSystemRecvPortDownEventTimes, hwVlanIGMPPacketClearStats=hwVlanIGMPPacketClearStats, hwL2mcCacVsiCountExceed=hwL2mcCacVsiCountExceed, hwMcastProfileCfgMaxNumProgram=hwMcastProfileCfgMaxNumProgram, hwVlanRecvIGMPV2QueryNum=hwVlanRecvIGMPV2QueryNum, hwVlanLastMemQueryInterval=hwVlanLastMemQueryInterval, hwVlanDropUnknown=hwVlanDropUnknown, hwVlanRecvMldDoneNum=hwVlanRecvMldDoneNum, hwMVlanEnabled=hwMVlanEnabled, hwL2mcCacCount=hwL2mcCacCount, hwExternIpGrpPortIfIndex=hwExternIpGrpPortIfIndex, hwMcastGrpProfileEntry=hwMcastGrpProfileEntry, hwPortStaticGrpTable=hwPortStaticGrpTable, hwGrpListNameIndex=hwGrpListNameIndex, hwMldPortStaticGrpTable=hwMldPortStaticGrpTable, hwVlanRecvIGMPV3ReportNum=hwVlanRecvIGMPV3ReportNum, hwVlanMcastProfileName=hwVlanMcastProfileName, hwVlanSendSourceIPSpecQueryNum=hwVlanSendSourceIPSpecQueryNum, hwMcastIpv6SourceAddress=hwMcastIpv6SourceAddress, hwIGSPMibCompliance=hwIGSPMibCompliance, hwExternIpHostExpires=hwExternIpHostExpires, hwMACGrpAddress=hwMACGrpAddress, hwRouterPortFlags=hwRouterPortFlags, hwExternIpRtFlag=hwExternIpRtFlag, hwMVlanUserVlanEntry=hwMVlanUserVlanEntry, hwMVlanGrpUserVlanIndex=hwMVlanGrpUserVlanIndex, hwVlanMaxResponseTime=hwVlanMaxResponseTime, hwMldSystemRecvPortIncEventTimes=hwMldSystemRecvPortIncEventTimes, hwL2mcCacVsiChannelCountExceed=hwL2mcCacVsiChannelCountExceed, hwMVlanGrpAddress=hwMVlanGrpAddress, hwMulticastProfilePreviewTimes=hwMulticastProfilePreviewTimes, hwMCastTableLoadAbnormalResume=hwMCastTableLoadAbnormalResume, hwBtvMibObject=hwBtvMibObject, hwMVlanStaticFlowIpv6GrpAddress=hwMVlanStaticFlowIpv6GrpAddress, hwMldIpSourceAddress=hwMldIpSourceAddress, hwMVlanGrpInfo=hwMVlanGrpInfo, hwEthTrunkLoadBalancingEnabled=hwEthTrunkLoadBalancingEnabled, hwMldRouterPortCfgTable=hwMldRouterPortCfgTable, hwRouterPortCfgGroup=hwRouterPortCfgGroup, hwL2mcCacBgpPwChannelCountExceed=hwL2mcCacBgpPwChannelCountExceed, hwMcSourceDenyIfIndex=hwMcSourceDenyIfIndex, hwVlanMldPacketClearStats=hwVlanMldPacketClearStats, hwBtvSystemInfo=hwBtvSystemInfo, hwMcastAlarmObject=hwMcastAlarmObject, VlanIndexOrZero=VlanIndexOrZero, hwExternIpGrpInfoEntry=hwExternIpGrpInfoEntry, hwMVlanStaticFlowGrpAddress=hwMVlanStaticFlowGrpAddress, hwPortStaticGrpAddr=hwPortStaticGrpAddr, hwVlanMaxQueryRespTime=hwVlanMaxQueryRespTime, PYSNMP_MODULE_ID=hwMultiCastMIB, hwMldIpHostUpTime=hwMldIpHostUpTime, hwL2mcCacVlanBandwidthExceed=hwL2mcCacVlanBandwidthExceed, hwExternMVlanStaticFlowTable=hwExternMVlanStaticFlowTable, hwVlanLastMemQueryInt=hwVlanLastMemQueryInt, hwMVlanVlanCfgInfo=hwMVlanVlanCfgInfo, hwExternIpGrpVlanIndex=hwExternIpGrpVlanIndex, hwIPGrpAddress=hwIPGrpAddress, hwIgmpSnoopingSuppressionTime=hwIgmpSnoopingSuppressionTime, hwMCastApsIdleNotify=hwMCastApsIdleNotify, hwMVlanIpv6StaticFlowTable=hwMVlanIpv6StaticFlowTable, hwVlanApplyProfileRowStatus=hwVlanApplyProfileRowStatus, hwVlanRecvMldV1QueryNum=hwVlanRecvMldV1QueryNum, hwPortVlanLimitVlanIndex=hwPortVlanLimitVlanIndex, hwMldGrpPolicyCfgEntry=hwMldGrpPolicyCfgEntry, hwMVlanStatus=hwMVlanStatus, hwMldRouterPortVlanIndex=hwMldRouterPortVlanIndex, hwPortGroupPolicyVersion=hwPortGroupPolicyVersion, hwPortStaticGrpGroup=hwPortStaticGrpGroup, hwUserVlanTable=hwUserVlanTable, hwMldSystemRecvPortUpEventTimes=hwMldSystemRecvPortUpEventTimes, hwMcastProfileEntry=hwMcastProfileEntry, hwExternPortStaticGrpTable=hwExternPortStaticGrpTable, hwSystemStatisticsGroup=hwSystemStatisticsGroup, hwL2mcCacVlanChannelCountExceed=hwL2mcCacVlanChannelCountExceed, hwMldVlanPromptLeaveAclNum=hwMldVlanPromptLeaveAclNum, hwMldIpGrpUpTime=hwMldIpGrpUpTime, hwIPGrpVlanIndex=hwIPGrpVlanIndex, hwVlanCfgGroup=hwVlanCfgGroup, hwMcastIpv6GroupRowStatus=hwMcastIpv6GroupRowStatus, VlanIndex=VlanIndex, hwMcastListReferGroup=hwMcastListReferGroup, hwL2mcCacVsiBandwidthExceed=hwL2mcCacVsiBandwidthExceed, hwMcastGrpProfileTable=hwMcastGrpProfileTable, hwMcastIpv6GroupIndex=hwMcastIpv6GroupIndex, hwExternIpRtExpires=hwExternIpRtExpires, hwMcastGroupEntry=hwMcastGroupEntry, EnabledStatus=EnabledStatus, hwMcastPreviewStatus=hwMcastPreviewStatus, hwMldRouterPortInfoEntry=hwMldRouterPortInfoEntry, hwIPRtExpires=hwIPRtExpires, hwBtvSystemGroup=hwBtvSystemGroup, hwL2mcCacPortChannelBandwidthExceed=hwL2mcCacPortChannelBandwidthExceed, hwVlanStatsVlanIndex=hwVlanStatsVlanIndex, hwMldSystemRecvVlanUpEventTimes=hwMldSystemRecvVlanUpEventTimes, hwMcastListEntry=hwMcastListEntry, hwBtvEnabled=hwBtvEnabled, hwMcSourceDenyGroup=hwMcSourceDenyGroup, hwVlanStatisticsTable=hwVlanStatisticsTable, hwVlanLimitAction=hwVlanLimitAction, hwSystemRecvVlanDownEventTimes=hwSystemRecvVlanDownEventTimes, hwMldVlanCfgTable=hwMldVlanCfgTable, hwMldPortGroupPolicyVersion=hwMldPortGroupPolicyVersion, hwL2mcCacPortBandwidthExceed=hwL2mcCacPortBandwidthExceed, hwMcastProfileIndex=hwMcastProfileIndex, hwVlanStatisticsGroup=hwVlanStatisticsGroup, hwSsmPolicyAclNum=hwSsmPolicyAclNum, hwIPHostUpTime=hwIPHostUpTime, hwMldSnoopingSuppressionTime=hwMldSnoopingSuppressionTime, hwMldVlanLastListenerQueryInt=hwMldVlanLastListenerQueryInt, hwBtvCfgInfo=hwBtvCfgInfo, hwGrpPolicyIgmpVersion=hwGrpPolicyIgmpVersion, hwMVlanUserVlanGroup=hwMVlanUserVlanGroup, hwMcastProfileCfgPreviewTimes=hwMcastProfileCfgPreviewTimes, hwMCastSystemGroup=hwMCastSystemGroup, hwMldPortGroupPolicyGroup=hwMldPortGroupPolicyGroup, hwMldStatisticsInfo=hwMldStatisticsInfo, hwRouterPortCfgRowStatus=hwRouterPortCfgRowStatus, hwMCastVlanFailAlarm=hwMCastVlanFailAlarm, hwCfgRefreshFailAlarm=hwCfgRefreshFailAlarm, hwL2mcCacLdpPwChannelCountExceed=hwL2mcCacLdpPwChannelCountExceed, hwRouterPortCfgTable=hwRouterPortCfgTable, hwVlanIgmpProxyEntry=hwVlanIgmpProxyEntry, hwMVlanGrpInfoTable=hwMVlanGrpInfoTable, hwMldPortInfo=hwMldPortInfo, hwMCSystemInfo=hwMCSystemInfo, hwVlanApplyProfileEntry=hwVlanApplyProfileEntry, hwL2mcCacSubIfChannelBandwidthExceed=hwL2mcCacSubIfChannelBandwidthExceed, hwMldRouterPortCfgEntry=hwMldRouterPortCfgEntry, hwVlanIgmpSendRouterAlert=hwVlanIgmpSendRouterAlert, hwL2CacTrapObject=hwL2CacTrapObject, hwL2mcCacSubIfCountExceed=hwL2mcCacSubIfCountExceed, hwMldIpGrpAddress=hwMldIpGrpAddress, hwMcastProfileReferGroup=hwMcastProfileReferGroup, hwVlanSendRouterAlert=hwVlanSendRouterAlert, hwMldRouterPortFlag=hwMldRouterPortFlag, hwMldVlanSendRouterAlert=hwMldVlanSendRouterAlert, hwIPGrpUpTime=hwIPGrpUpTime, hwMcastGroupAddress=hwMcastGroupAddress, hwMcastListGroup=hwMcastListGroup, hwMldSystemRecvPortExcEventTimes=hwMldSystemRecvPortExcEventTimes, hwPortStaticGrpRowStatus=hwPortStaticGrpRowStatus, hwMldVlanCfgEntry=hwMldVlanCfgEntry, hwMACGrpInfoEntry=hwMACGrpInfoEntry, hwVlanMcastGrpGroup=hwVlanMcastGrpGroup, hwVlanCfgInfo=hwVlanCfgInfo, hwMVlanUserVlanTable=hwMVlanUserVlanTable, hwMldRouterPortInfoTable=hwMldRouterPortInfoTable, hwMldIpRtExpires=hwMldIpRtExpires, hwL2mcCacVlanIndex=hwL2mcCacVlanIndex, hwPortGroupPolicyVlanIndex=hwPortGroupPolicyVlanIndex, hwMldIpGrpPortIfIndex=hwMldIpGrpPortIfIndex, hwVlanRouterAgingTime=hwVlanRouterAgingTime, hwIPRtFlags=hwIPRtFlags, hwMldPortLimitIfIndex=hwMldPortLimitIfIndex, hwVlanIgmpProxyTable=hwVlanIgmpProxyTable, hwMACGrpInfoTable=hwMACGrpInfoTable, hwMVlanIpv6StaticFlowRowStatus=hwMVlanIpv6StaticFlowRowStatus, hwIPHostFlags=hwIPHostFlags, hwSystemStatisticsInfo=hwSystemStatisticsInfo, hwMcastGrpCfgTable=hwMcastGrpCfgTable, hwSystemRecvVlanDelEventTimes=hwSystemRecvVlanDelEventTimes, hwVlanApplyProfileGroup=hwVlanApplyProfileGroup, hwMldPortGroupPolicyVlanIndex=hwMldPortGroupPolicyVlanIndex, hwIPGrpPortIfIndex=hwIPGrpPortIfIndex, hwL2mcCacBgpPwBandwidthExceed=hwL2mcCacBgpPwBandwidthExceed, hwGrpMcastCfgGroup=hwGrpMcastCfgGroup, hwMCMibConformance=hwMCMibConformance, hwPortVlanLimitRowStatus=hwPortVlanLimitRowStatus, hwIGSPSystemInfo=hwIGSPSystemInfo, hwVlanRobustCount=hwVlanRobustCount, hwMldGrpPolicyAclNum=hwMldGrpPolicyAclNum, hwL2mcCacVlanChannelBandwidthExceed=hwL2mcCacVlanChannelBandwidthExceed, hwL2mcCacPortChannelCountExceed=hwL2mcCacPortChannelCountExceed, hwSystemRecvVlanUpEventTimes=hwSystemRecvVlanUpEventTimes, hwMldPortLimitEntry=hwMldPortLimitEntry, hwMVlanStaticFlowIpv6SourceAddress=hwMVlanStaticFlowIpv6SourceAddress, hwMcastProfileCfgTable=hwMcastProfileCfgTable, hwMcastProfileCfgPreviewMinute=hwMcastProfileCfgPreviewMinute, hwMldVlanMaxQueryRespTime=hwMldVlanMaxQueryRespTime, hwSnmpTrapEnable=hwSnmpTrapEnable, hwSystemRecvPortIncEventTimes=hwSystemRecvPortIncEventTimes, hwMldRouterPortCfgVlanIndex=hwMldRouterPortCfgVlanIndex, hwRouterPortCfgVlanIndex=hwRouterPortCfgVlanIndex, hwRouterPortInfoGroup=hwRouterPortInfoGroup, hwExternPortStaticGrpEntry=hwExternPortStaticGrpEntry, hwMldIpHostExpires=hwMldIpHostExpires, hwIPGrpInfoGroup=hwIPGrpInfoGroup, hwUserVlanEntry=hwUserVlanEntry, hwMldPortLimitNumber=hwMldPortLimitNumber, hwMcastProfileReferTable=hwMcastProfileReferTable, hwL2mcCacGlobalChannelBandwidthExceed=hwL2mcCacGlobalChannelBandwidthExceed, hwMcastIpv6GroupTable=hwMcastIpv6GroupTable, hwExternMVlanStaticFlowRowStatus=hwExternMVlanStaticFlowRowStatus, hwVlanL2StaticFlow=hwVlanL2StaticFlow, hwL2McastVlanCfgGroup=hwL2McastVlanCfgGroup, hwL2mcCacRemoteSiteId=hwL2mcCacRemoteSiteId)
