#
# PySNMP MIB module BIANCA-BRICK-MIBMODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-MIBMODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, TimeTicks, Unsigned32, ObjectIdentity, Integer32, IpAddress, Counter64, Gauge32, ModuleIdentity, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "TimeTicks", "Unsigned32", "ObjectIdentity", "Integer32", "IpAddress", "Counter64", "Gauge32", "ModuleIdentity", "iso", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
mdm = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 18))
mdmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 18, 1), )
if mibBuilder.loadTexts: mdmProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileTable.setDescription('This Table contains entries for the modem profiles. For PPP connections, modem profiles are assigned to incoming connections via the isdnDispatchtable. For outgoing connections, the profile is assigned by the biboPppTable. Profile 1 is used as default profile for ppp and is the only profile available for isdnlogin connections.')
mdmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-MIBMODEM-MIB", "mdmProfileName"))
if mibBuilder.loadTexts: mdmProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileEntry.setDescription('')
mdmProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("profile-1", 1), ("profile-2", 2), ("profile-3", 3), ("profile-4", 4), ("profile-5", 5), ("profile-6", 6), ("profile-7", 7), ("profile-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileName.setDescription('The name of the profile. Eight profiles are available.')
mdmProfileDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileDescr.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileDescr.setDescription('Profile Description. Info only.')
mdmProfileModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("bell103", 1), ("bell212", 2), ("v21", 3), ("v22", 4), ("v22bis", 5), ("v23", 6), ("v32", 7), ("v32bis", 8), ("v34", 9), ("k56flex", 10), ("vfc", 11), ("v90", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileModulation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileModulation.setDescription('This object specifies the preferred modulation (automode on) or the modulation (automode disabled) to be used in originating or answering a connection. bell103 (1) : 300 bell212 (2) : 1200 v21 (3) : 300 v22 (4) : 1200 v22bis (5) : 2400 or 1200 v23 (6) : 75/1200 or 1200/75 v32 (7) : 9600, 4800 v32bis (8) : 14000, 12000, 9600, 7200, 4800 v34 (9) : 33600, 31200, 28800, 26400, 24000, 21600, 19200, 16800, 14400, 12000, 9600, 7200, 4800, 2400 k56flex (10) : 56000, 54000, 52000, 50000, 48000, 46000, 44000, 42000, 40000, 38000, 36000, 34000, 32000 vfc (11) : 28800, 26400, 24000, 21600, 19200, 16800, 14400, 12000, 9600 v90 (12) : 56000, 54667, 53333, 52000, 50667, 49333, 48000, 46667, 45333, 42667, 41333, 40000, 38667, 37333, 36000, 34667, 33333, 32000, 30667, 29333, 28000 ')
mdmProfileMinBps = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(300, 1200, 2400, 4800, 7200, 9600, 12000, 14400, 16800, 19200, 21600, 24000, 26400, 28800, 31200, 33600, 32000, 34000, 36000, 38000, 40000, 42000, 44000, 46000, 48000, 50000, 52000, 54000, 56000, 75))).clone(namedValues=NamedValues(("b300", 300), ("b1200", 1200), ("b2400", 2400), ("b4800", 4800), ("b7200", 7200), ("b9600", 9600), ("b12000", 12000), ("b14400", 14400), ("b16800", 16800), ("b19200", 19200), ("b21600", 21600), ("b24000", 24000), ("b26400", 26400), ("b28800", 28800), ("b31200", 31200), ("b33600", 33600), ("b32000", 32000), ("b34000", 34000), ("b36000", 36000), ("b38000", 38000), ("b40000", 40000), ("b42000", 42000), ("b44000", 44000), ("b46000", 46000), ("b48000", 48000), ("b50000", 50000), ("b52000", 52000), ("b54000", 54000), ("b56000", 56000), ("b75", 75)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileMinBps.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileMinBps.setDescription('This object specified the lowest rate, at which the modem may establish a connection.')
mdmProfileMaxRecvBps = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(300, 1200, 2400, 4800, 7200, 9600, 12000, 14400, 16800, 19200, 21600, 24000, 26400, 28800, 31200, 33600, 32000, 34000, 36000, 38000, 40000, 42000, 44000, 46000, 48000, 50000, 52000, 54000, 56000))).clone(namedValues=NamedValues(("b300", 300), ("b1200", 1200), ("b2400", 2400), ("b4800", 4800), ("b7200", 7200), ("b9600", 9600), ("b12000", 12000), ("b14400", 14400), ("b16800", 16800), ("b19200", 19200), ("b21600", 21600), ("b24000", 24000), ("b26400", 26400), ("b28800", 28800), ("b31200", 31200), ("b33600", 33600), ("b32000", 32000), ("b34000", 34000), ("b36000", 36000), ("b38000", 38000), ("b40000", 40000), ("b42000", 42000), ("b44000", 44000), ("b46000", 46000), ("b48000", 48000), ("b50000", 50000), ("b52000", 52000), ("b54000", 54000), ("b56000", 56000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileMaxRecvBps.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileMaxRecvBps.setDescription('This object specifies the highest receive rate, at which the modem may establsh a connection.')
mdmProfileMaxXmitBps = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(300, 1200, 2400, 4800, 7200, 9600, 12000, 14400, 16800, 19200, 21600, 24000, 26400, 28800, 31200, 33600, 32000, 34000, 36000, 38000, 40000, 42000, 44000, 46000, 48000, 50000, 52000, 54000, 56000))).clone(namedValues=NamedValues(("b300", 300), ("b1200", 1200), ("b2400", 2400), ("b4800", 4800), ("b7200", 7200), ("b9600", 9600), ("b12000", 12000), ("b14400", 14400), ("b16800", 16800), ("b19200", 19200), ("b21600", 21600), ("b24000", 24000), ("b26400", 26400), ("b28800", 28800), ("b31200", 31200), ("b33600", 33600), ("b32000", 32000), ("b34000", 34000), ("b36000", 36000), ("b38000", 38000), ("b40000", 40000), ("b42000", 42000), ("b44000", 44000), ("b46000", 46000), ("b48000", 48000), ("b50000", 50000), ("b52000", 52000), ("b54000", 54000), ("b56000", 56000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileMaxXmitBps.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileMaxXmitBps.setDescription('This object specifies the highest transmit rate, at which the modem may establsh a connection.')
mdmProfileAutoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileAutoMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileAutoMode.setDescription('When this object is set to on, the modem will automatically negotiate the best rates beginning with the selected Modulation and MaxBps values. Otherwise, it will use only the selected modulation in the range between MinBps and MaxBps.')
mdmProfileComprV42bis = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileComprV42bis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileComprV42bis.setDescription('This object specifies, whether V.42bis compression shall be used for modem connections. When set to off, V.42bis compression will never be used. When set to auto, compression may be negotiated with the partner modem.')
mdmProfileComprMNP5 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileComprMNP5.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileComprMNP5.setDescription('This object specifies, whether MNP Class 5 compression shall be used for modem connections. When set to off, MNP Class 5 compression will never be used. When set to auto, compression may be negotiated with the partner modem.')
mdmProfileErrorCorr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("required", 2), ("auto", 3), ("lapm", 4), ("mnp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileErrorCorr.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileErrorCorr.setDescription('This object specifies the kind of error correction being used for a connection: none no error correction will be used. required either LAPM or MNP will be used. If the partner is not able to do error correction, the connection cannot be established. auto negotiation takes place to use either LAPM, MNP or no error correction. lapm Enforce LAPM error correction. If the partner is not able to do LAPM, the connection cannot be established. mnp use MNP error connection If the partner is not able to do MNP, the connection cannot be established. ')
mdmProfileXmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileXmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileXmitLevel.setDescription('This object specifies the transmit attenuation in dB.')
mdmProfileCDWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 255000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileCDWaitTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileCDWaitTime.setDescription('This object specifies the amount of time in milliseconds, the modem will wait for the appearance of the carrier. If the carrier will not appear in this time period, the connection will be disconnected.')
mdmProfileCDRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileCDRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileCDRespTime.setDescription('This object specifies the period of time in milliseconds, a carrier has to be present, before it will be recognized as a carrier.')
mdmProfileCDDiscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileCDDiscTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileCDDiscTime.setDescription('This object specifies the amount of time, the carrier has to drop, before the modem will assume the carrier to be lost.')
mdmProfileRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("retrain", 2), ("fallbf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileRetrain.setDescription('The modem will : off (1) : disable line quality monitor and auto-retrain. retrain (2) : enable line quality monitor and auto-retrain. fallbf (3) : enable line quality monitor and fallback/fall forward.')
mdmProfileIdleTimerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileIdleTimerMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileIdleTimerMode.setDescription('The idle timer is used to specify the duration of an interval between successive characters received from the modem which, when exceeded, will cause the modem driver to terminate the assembly of a data packet and to forward it to the higher-layer protocols (this is in analogy to the ITU X.3 parameter #4). This object specifies the mode how the idle timer is set: static (1): the idle time is taken from the object mdmProfileIdleTimerFixedDelay (default) dynamic (2): the idle time is set to the duration that a number of mdmProfileIdleTimerCharDelay characters (octets) would take for transmission corresponding to the actually used receive bit-rate of the modem. If the bit-rate can not be found out, the static mode is used instead.')
mdmProfileIdleTimerFixedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileIdleTimerFixedDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileIdleTimerFixedDelay.setDescription('This object specifies the duration of the idle timer in milliseconds (see the object mdmProfileIdleTimerMode for further description). Default: 5')
mdmProfileIdleTimerCharDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmProfileIdleTimerCharDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProfileIdleTimerCharDelay.setDescription('This object specifies the number of characters (octets) which is used to calculate the idle timer corresponding to the actually used receive bit-rate of the modem (see the object mdmProfileIdleTimerMode for further description). Default: 3')
mdmTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 18, 2), )
if mibBuilder.loadTexts: mdmTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTable.setDescription('The mdmTable contains information for each modem. The entries contain various statistical data for modem connections. Only the system can add entries to this table. The user is able to reboot, enable or disable a modem. The system updates infos about the current connection.')
mdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-MIBMODEM-MIB", "mdmIndex"))
if mibBuilder.loadTexts: mdmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEntry.setDescription('')
mdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIndex.setDescription('Index of this modem (Slot/Cpu/Modem)')
mdmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reboot", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAction.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAction.setDescription('Writing to this variable reboot (1) : initiates a reboot. disabled (2) : remove modem resource from allocation pool. enabled (3) : put modem to allocation resource pool. ')
mdmType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("csm56K", 1), ("csm336", 2), ("mdm144", 3), ("mdm336", 4), ("telindus", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmType.setDescription('Type of this modem csm56K (1) : CentralSiteModem K56Flex csm336 (2) : CentralSiteModem 33600 mdm144 (3) : ClientSiteModem 14400 mdm336 (4) : ClientSiteModem 33600 telindus (5) : ADSP with Telindus firmware ')
mdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("booting", 1), ("idle", 2), ("calling", 3), ("called", 4), ("connected", 5), ("hangup", 6), ("stopped", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmState.setStatus('mandatory')
if mibBuilder.loadTexts: mdmState.setDescription('Current status of the modem. booting (1) : init phase idle (2) : this modem resource is available calling (3) : outgoing call initiated called (4) : incoming call initiated connected (5) : data transfer phase established hangup (6) : going to terminate a connection stopped (7) : out of order, modem ist not useable ')
mdmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("modem", 1), ("ppp", 2), ("fax", 3), ("dtmf", 4), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMode.setDescription('Type of mode modem (1) : modem native ppp (2) : modem native + async hdlc fax (3) : fax mode dtmf (4) : receive and signal DTMF touchtones none (7) : modem curently not used ')
mdmModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 31))).clone(namedValues=NamedValues(("bell103", 1), ("bell212", 2), ("v21", 3), ("v22", 4), ("v22bis", 5), ("v23", 6), ("v32", 7), ("v32bis", 8), ("v34", 9), ("k56flex", 10), ("vfc", 11), ("v90", 12), ("unknown", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModulation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModulation.setDescription('Negotiated modulation. same as mdmProfileModulation.')
mdmErrorCorr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("alt", 2), ("lapm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmErrorCorr.setStatus('mandatory')
if mibBuilder.loadTexts: mdmErrorCorr.setDescription('Negotiated error correction protocol. none (1) : no error correction alt (2) : MNP error correction established lapm (3) : LAPM error correction established ')
mdmCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("class5", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCompression.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCompression.setDescription('Negotiated compression correction protocol. none (1) : no compression class5 (2) : MNP5 compression v42bis (3) : V.42bis compression ')
mdmXmitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmXmitSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmXmitSpeed.setDescription('Negotiated transmit speed.')
mdmRcvSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRcvSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRcvSpeed.setDescription('Negotiated receive speed.')
mdmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfIndex.setDescription("the (ISDN) interface's slot this modem is connected to")
mdmIfBchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 18, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIfBchannel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIfBchannel.setDescription("the (ISDN) interface's B channel this modem is connected to")
mibBuilder.exportSymbols("BIANCA-BRICK-MIBMODEM-MIB", mdmIfIndex=mdmIfIndex, mdmProfileComprV42bis=mdmProfileComprV42bis, mdmRcvSpeed=mdmRcvSpeed, mdmProfileMaxXmitBps=mdmProfileMaxXmitBps, mdmProfileCDWaitTime=mdmProfileCDWaitTime, mdmProfileName=mdmProfileName, dod=dod, bintec=bintec, mdmProfileDescr=mdmProfileDescr, mdmModulation=mdmModulation, enterprises=enterprises, mdmIndex=mdmIndex, mdmCompression=mdmCompression, mdmProfileTable=mdmProfileTable, internet=internet, mdmEntry=mdmEntry, mdmState=mdmState, mdmProfileMinBps=mdmProfileMinBps, mdmProfileXmitLevel=mdmProfileXmitLevel, mdmType=mdmType, mdmProfileCDRespTime=mdmProfileCDRespTime, mdmProfileIdleTimerFixedDelay=mdmProfileIdleTimerFixedDelay, mdmProfileModulation=mdmProfileModulation, org=org, mdmAction=mdmAction, mdmProfileComprMNP5=mdmProfileComprMNP5, mdmProfileEntry=mdmProfileEntry, mdmMode=mdmMode, mdmXmitSpeed=mdmXmitSpeed, mdmErrorCorr=mdmErrorCorr, mdmIfBchannel=mdmIfBchannel, private=private, mdmProfileIdleTimerCharDelay=mdmProfileIdleTimerCharDelay, mdmTable=mdmTable, bibo=bibo, mdmProfileCDDiscTime=mdmProfileCDDiscTime, mdm=mdm, mdmProfileIdleTimerMode=mdmProfileIdleTimerMode, mdmProfileMaxRecvBps=mdmProfileMaxRecvBps, mdmProfileAutoMode=mdmProfileAutoMode, mdmProfileErrorCorr=mdmProfileErrorCorr, mdmProfileRetrain=mdmProfileRetrain)
