#
# PySNMP MIB module RDN-CHANNEL-BONDING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-CHANNEL-BONDING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:54:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
docsIfCmtsCmStatusIndex, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusIndex")
IfDirection, ChSetId = mibBuilder.importSymbols("DOCS-IF3-MIB", "IfDirection", "ChSetId")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter32, ObjectIdentity, Gauge32, ModuleIdentity, MibIdentifier, iso, Counter64, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter32", "ObjectIdentity", "Gauge32", "ModuleIdentity", "MibIdentifier", "iso", "Counter64", "Integer32", "NotificationType")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
rdnChannelBondingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 9))
rdnChannelBondingMib.setRevisions(('2011-07-20 00:00', '2011-05-17 00:00', '2011-05-02 00:00', '2008-08-08 00:00', '2007-02-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rdnChannelBondingMib.setRevisionsDescriptions(('Revise attributes in rdnCmtsCmPartialServiceTable. rdnCmtsCmPSAssignedChSetList rdnCmtsCmPSNonActiveChList rdnCmtsCmPSIpv4Addr rdnCmtsCmPSIpv6Addr. ', 'Add rdnCmtsCmPartialServiceTable.', 'Modify DS bonding tables to be integrated US/DS; increase DS bonding group size to 8 channels', "Added Copyright Statement into MIB modules's description.", 'Initial Version. ',))
if mibBuilder.loadTexts: rdnChannelBondingMib.setLastUpdated('201107200000Z')
if mibBuilder.loadTexts: rdnChannelBondingMib.setOrganization('Motorola')
if mibBuilder.loadTexts: rdnChannelBondingMib.setContactInfo('Motorola Customer Service 101 Tournament Drive Horsham, PA 19044 US Tel: +1 888 944 4357 Int Tel: +1 215 323 0044 Fax: +1 215 323 1502 Email: CPSSupport@Motorola.com')
if mibBuilder.loadTexts: rdnChannelBondingMib.setDescription('MIB module for Motorola Downstream/Upstream Channel Bonding. Copyright (C) 2007, 2008 by Motorola, Inc. All rights reserved.')
class ChSetListStr(TextualConvention, OctetString):
    description = ' A string containing a comma separated list of channels. Channels can be either physical or logical channels. The formatting of each channel will follow the board specific numbering scheme. (e.g. 5/2/0,5/3/0,5/4/0 or 15/2/0/2,15/3/0/2). Allowing for (future) 11 chars/ch * 16 chs = 176 bytes.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 176)

rdnBondingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 9, 5), )
if mibBuilder.loadTexts: rdnBondingGroupTable.setReference('Proprietary MIB.')
if mibBuilder.loadTexts: rdnBondingGroupTable.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupTable.setDescription('This table describes downstream and upstream channel bonding groups')
rdnBondingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 9, 5, 1), ).setIndexNames((0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupMacIfIndex"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupDir"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupId"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupChanIndex"))
if mibBuilder.loadTexts: rdnBondingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupEntry.setDescription('An entry provides a list of attributes for a downstream or upstream channel in each bonding group for each mac domain. An entry in this table exists for each channel in each defined bonding group on each mac domain (ifEntry with ifType of docsCableMaclayer(127))')
rdnBondingGroupMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: rdnBondingGroupMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupMacIfIndex.setDescription('This references the mac domain to which this bonding group is bound.')
rdnBondingGroupDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 5, 1, 2), IfDirection())
if mibBuilder.loadTexts: rdnBondingGroupDir.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupDir.setDescription('This attribute defines the direction (downstream or upstream) of the bonding group')
rdnBondingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: rdnBondingGroupId.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupId.setDescription('The bonding group identifier')
rdnBondingGroupChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rdnBondingGroupChanIndex.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupChanIndex.setDescription('This is the index into a bonding groups channel list (1-8). A downstream bonding group can have up to 8 channels. an upstream bonding group can have up to 4 logical channels. ')
rdnBondingGroupChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnBondingGroupChanId.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupChanId.setDescription('The downstream or upstream channel identifier. This value is equivalent to docsIfDownChannelId or docsIfUpChannelId')
rdnBondingGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 9, 6), )
if mibBuilder.loadTexts: rdnBondingGroupStatsTable.setReference('Proprietary MIB.')
if mibBuilder.loadTexts: rdnBondingGroupStatsTable.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupStatsTable.setDescription('This table lists statistic counts for each downstream or upstream in each bonding group for each mac domain.')
rdnBondingGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 9, 6, 1), ).setIndexNames((0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupMacIfIndex"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupDir"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupId"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupChanIndex"))
if mibBuilder.loadTexts: rdnBondingGroupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupStatsEntry.setDescription('An entry provides statistic counts for all downstream or upstream channels in a bonding group for each mac domain. An entry in this table exists for each channel in each bonding group on each mac domain (each ifEntry with an ifType of docsCableMaclayer(127)).')
rdnBondingGroupStatsChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnBondingGroupStatsChanId.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupStatsChanId.setDescription('The downstream or upstream channel identifier. This value is equivalent to docsIfDownChannelId or docsIfUpChannelId')
rdnBondingGroupStatsOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnBondingGroupStatsOctetCount.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupStatsOctetCount.setDescription('This entry contains the statistical count of the number of octets sent through this downstream or upstream for this bonding group.')
rdnBondingGroupStatsPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnBondingGroupStatsPacketCount.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupStatsPacketCount.setDescription('This entry contains the statistical count of the number of packets sent through this downstream or number of segments sent through this upstream for this bonding group.')
rdnBondingGroupCmTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 9, 7), )
if mibBuilder.loadTexts: rdnBondingGroupCmTable.setReference('Proprietary MIB.')
if mibBuilder.loadTexts: rdnBondingGroupCmTable.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupCmTable.setDescription('This table shows the number of modems registered on the downstream or upstream bonding group')
rdnBondingGroupCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 9, 7, 1), ).setIndexNames((0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupMacIfIndex"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupDir"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnBondingGroupId"))
if mibBuilder.loadTexts: rdnBondingGroupCmEntry.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupCmEntry.setDescription('An entry provides a list of attributes for a single downstream or upstream bonding group. An entry in this table exists for each defined bonding group.')
rdnBondingGroupCmRegisteredModems = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnBondingGroupCmRegisteredModems.setStatus('current')
if mibBuilder.loadTexts: rdnBondingGroupCmRegisteredModems.setDescription('The number of modems registered under this bonding group')
rdnCmtsCmPartialServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 9, 8), )
if mibBuilder.loadTexts: rdnCmtsCmPartialServiceTable.setReference('Proprietary MIB.')
if mibBuilder.loadTexts: rdnCmtsCmPartialServiceTable.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPartialServiceTable.setDescription('This table describes Cable Modems operating in partial service mode in either downstream or upstream direction due to deficiencies in available resources to match requested performance.')
rdnCmtsCmPartialServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsCmStatusIndex"), (0, "RDN-CHANNEL-BONDING-MIB", "rdnCmtsCmPSDir"))
if mibBuilder.loadTexts: rdnCmtsCmPartialServiceEntry.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPartialServiceEntry.setDescription('An entry provides info on CMs working in partial service mode. Info including the Cable modem Id, MAC domain ifIndex, the CM macAddress, Active and Inactive Channel Set ID. The table is indexed by Cable modem Id and the bonding group direction. The table provides a reference to docsIf3UsChSetEntry/docsIf3DsChSetEntry used in DOCS-IF3-MIB.mibs via MacIfIndex and ChSetId.')
rdnCmtsCmPSDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 1), IfDirection())
if mibBuilder.loadTexts: rdnCmtsCmPSDir.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSDir.setDescription('This attribute defines the direction (downstream or upstream) of the bonding group')
rdnCmtsCmPSMacDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCmtsCmPSMacDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSMacDomainIfIndex.setDescription("The MAC interface index under which this channel's bonding group is configured. This will be an ifType of docsCableMaclayer(127). ")
rdnCmtsCmPSMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCmtsCmPSMacAddress.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSMacAddress.setDescription('The MAC address of the Cable Modem in Partial Service.')
rdnCmtsCmPSAssignedChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 4), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCmtsCmPSAssignedChSetId.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSAssignedChSetId.setDescription('The assigned Channel Set for the current modem .')
rdnCmtsCmPSActiveChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 5), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCmtsCmPSActiveChSetId.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSActiveChSetId.setDescription('The currently active Channel Set for the current modem .')
rdnCmtsCmPSAssignedChSetList = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 6), ChSetListStr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCmtsCmPSAssignedChSetList.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSAssignedChSetList.setDescription('The currently assigned Channels for the current modem.')
rdnCmtsCmPSNonActiveChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 7), ChSetListStr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCmtsCmPSNonActiveChList.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSNonActiveChList.setDescription('The current non-active Channel(s) for the current modem.')
rdnCmtsCmPSIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCmtsCmPSIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSIpv4Addr.setDescription('The IPv4 assigned to the current modem. If the modem is operating in a IPv6 only provisioning mode this field should return 0.0.0.0.')
rdnCmtsCmPSIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 9, 8, 1, 9), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCmtsCmPSIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: rdnCmtsCmPSIpv6Addr.setDescription('This attribute represents the IPv6 address of the current CM. If the CM has no Internet IPv6 address assigned the value of this attribute is the all zeros address.')
mibBuilder.exportSymbols("RDN-CHANNEL-BONDING-MIB", rdnCmtsCmPSMacDomainIfIndex=rdnCmtsCmPSMacDomainIfIndex, rdnBondingGroupStatsTable=rdnBondingGroupStatsTable, rdnBondingGroupDir=rdnBondingGroupDir, rdnBondingGroupChanId=rdnBondingGroupChanId, rdnCmtsCmPSAssignedChSetList=rdnCmtsCmPSAssignedChSetList, rdnCmtsCmPSNonActiveChList=rdnCmtsCmPSNonActiveChList, rdnBondingGroupId=rdnBondingGroupId, rdnBondingGroupChanIndex=rdnBondingGroupChanIndex, rdnCmtsCmPSAssignedChSetId=rdnCmtsCmPSAssignedChSetId, rdnBondingGroupCmEntry=rdnBondingGroupCmEntry, rdnBondingGroupStatsEntry=rdnBondingGroupStatsEntry, rdnCmtsCmPSDir=rdnCmtsCmPSDir, rdnBondingGroupTable=rdnBondingGroupTable, rdnCmtsCmPartialServiceTable=rdnCmtsCmPartialServiceTable, rdnBondingGroupStatsOctetCount=rdnBondingGroupStatsOctetCount, rdnBondingGroupCmRegisteredModems=rdnBondingGroupCmRegisteredModems, rdnCmtsCmPSIpv4Addr=rdnCmtsCmPSIpv4Addr, rdnCmtsCmPSActiveChSetId=rdnCmtsCmPSActiveChSetId, rdnBondingGroupStatsChanId=rdnBondingGroupStatsChanId, rdnCmtsCmPSIpv6Addr=rdnCmtsCmPSIpv6Addr, rdnBondingGroupMacIfIndex=rdnBondingGroupMacIfIndex, PYSNMP_MODULE_ID=rdnChannelBondingMib, rdnBondingGroupEntry=rdnBondingGroupEntry, rdnCmtsCmPSMacAddress=rdnCmtsCmPSMacAddress, ChSetListStr=ChSetListStr, rdnChannelBondingMib=rdnChannelBondingMib, rdnBondingGroupCmTable=rdnBondingGroupCmTable, rdnCmtsCmPartialServiceEntry=rdnCmtsCmPartialServiceEntry, rdnBondingGroupStatsPacketCount=rdnBondingGroupStatsPacketCount)
