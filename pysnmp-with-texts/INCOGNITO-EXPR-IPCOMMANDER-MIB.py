#
# PySNMP MIB module INCOGNITO-EXPR-IPCOMMANDER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INCOGNITO-EXPR-IPCOMMANDER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:53:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
incognitoExpr, = mibBuilder.importSymbols("INCOGNITO-MIB", "incognitoExpr")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ObjectIdentity, Counter32, Counter64, Integer32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, enterprises, iso, ModuleIdentity, Bits, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Counter32", "Counter64", "Integer32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "enterprises", "iso", "ModuleIdentity", "Bits", "NotificationType", "TimeTicks")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
incognitoIPC = ModuleIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1))
incognitoIPC.setRevisions(('2008-02-13 18:02', '2008-05-07 18:34', '2009-05-08 17:00', '2009-07-30 11:00', '2009-09-15 09:00', '2009-11-06 09:00', '2009-11-06 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: incognitoIPC.setRevisionsDescriptions(('Adjusted ipcFailover to match what the service is using.', 'Added license in use value.', 'Added new service types for ipcmdNotifyServerType.', 'Added a new branch, ipcDHCPPacketResponseStatistics, to keep track of packet response times.', 'Added notifications for LDAP Set up and down.', 'Added notifications for devices tripping the DoS detection.', 'Relabeled ipcmdServiceInfo as ipcmdServiceStatus. Added a new branch, ipcServiceInformation, to report information about the service.',))
if mibBuilder.loadTexts: incognitoIPC.setLastUpdated('201001111600Z')
if mibBuilder.loadTexts: incognitoIPC.setOrganization('Incognito Software Inc.')
if mibBuilder.loadTexts: incognitoIPC.setContactInfo('Incognito Software Inc. Customer Service Postal: #500 - 375 Water St. Vancouver, BC, Canada V6B 5C6 Tel: +1 604-688-4332 Fax: +1 604-688-4339 E-Mail: support@incognito.com')
if mibBuilder.loadTexts: incognitoIPC.setDescription('')
draftServerMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 1))
if mibBuilder.loadTexts: draftServerMIB.setStatus('current')
if mibBuilder.loadTexts: draftServerMIB.setDescription('The Draft DHCP Server MIB')
ipcServerObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2))
if mibBuilder.loadTexts: ipcServerObjects.setStatus('current')
if mibBuilder.loadTexts: ipcServerObjects.setDescription('')
ipcNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 3))
if mibBuilder.loadTexts: ipcNotificationPrefix.setStatus('current')
if mibBuilder.loadTexts: ipcNotificationPrefix.setDescription('')
ipcTimeOfDayServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5))
if mibBuilder.loadTexts: ipcTimeOfDayServer.setStatus('current')
if mibBuilder.loadTexts: ipcTimeOfDayServer.setDescription('')
ipcDeprecatedNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99))
if mibBuilder.loadTexts: ipcDeprecatedNotificationPrefix.setStatus('current')
if mibBuilder.loadTexts: ipcDeprecatedNotificationPrefix.setDescription('')
ipcFailover = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100))
if mibBuilder.loadTexts: ipcFailover.setStatus('current')
if mibBuilder.loadTexts: ipcFailover.setDescription('Group of objects related to DHCP failover')
ipcDHCPStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2))
if mibBuilder.loadTexts: ipcDHCPStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPStatistics.setDescription('')
ipcConfiguration = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 3))
if mibBuilder.loadTexts: ipcConfiguration.setStatus('current')
if mibBuilder.loadTexts: ipcConfiguration.setDescription('')
ipcNotifyObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 4))
if mibBuilder.loadTexts: ipcNotifyObjects.setStatus('current')
if mibBuilder.loadTexts: ipcNotifyObjects.setDescription('')
ipcDeprecatedNotifyObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99))
if mibBuilder.loadTexts: ipcDeprecatedNotifyObjects.setStatus('current')
if mibBuilder.loadTexts: ipcDeprecatedNotifyObjects.setDescription('')
ipcServiceStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 101))
if mibBuilder.loadTexts: ipcServiceStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcServiceStatistics.setDescription('Group of statistics related to IPC service')
ipcServiceInformation = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102))
if mibBuilder.loadTexts: ipcServiceInformation.setStatus('current')
if mibBuilder.loadTexts: ipcServiceInformation.setDescription('Group of information related to IPC service')
ipcFailoverStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1))
if mibBuilder.loadTexts: ipcFailoverStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverStatistics.setDescription('Group of objects related to DHCP failover statistics.')
ipcFailoverSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1))
if mibBuilder.loadTexts: ipcFailoverSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverSummaryStatistics.setDescription('DHCP failover statistics summed for all types of DHCP database tables.')
ipcFailoverProtocolStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 2))
if mibBuilder.loadTexts: ipcFailoverProtocolStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverProtocolStatistics.setDescription('DHCP failover statistics for individual DHCP database tables.')
ipcFailoverTimerSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1))
if mibBuilder.loadTexts: ipcFailoverTimerSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverTimerSummaryStatistics.setDescription('DHCP failover timer statistics summed for all types of DHCP configuration objects.')
ipcFailoverErrorSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2))
if mibBuilder.loadTexts: ipcFailoverErrorSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverErrorSummaryStatistics.setDescription('DHCP failover error statistics summed for all types of DHCP configuration objects.')
ipcFailoverTimeDownSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 3))
if mibBuilder.loadTexts: ipcFailoverTimeDownSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverTimeDownSummaryStatistics.setDescription('DHCP failover time down statistics summed for all types of DHCP configuration objects.')
ipcFailoverResynchSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 4))
if mibBuilder.loadTexts: ipcFailoverResynchSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverResynchSummaryStatistics.setDescription('DHCP failover resynchronization statistics summed for all types of DHCP configuration objects.')
ipcFailoverTimeupSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 5))
if mibBuilder.loadTexts: ipcFailoverTimeupSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverTimeupSummaryStatistics.setDescription('DHCP failover time up statistics summed for all types of DHCP configuration objects.')
ipcFailoverRecdSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6))
if mibBuilder.loadTexts: ipcFailoverRecdSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverRecdSummaryStatistics.setDescription('DHCP failover received message statistics summed for all types of DHCP configuration objects.')
ipcFailoverSentSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7))
if mibBuilder.loadTexts: ipcFailoverSentSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverSentSummaryStatistics.setDescription('DHCP failover sent message statistics summed for all types of DHCP configuration objects.')
ipcFailoverTrafficSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8))
if mibBuilder.loadTexts: ipcFailoverTrafficSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverTrafficSummaryStatistics.setDescription('DHCP failover traffic statistics summed for all types of DHCP configuration objects.')
ipcFailoverStatusSummaryStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 9))
if mibBuilder.loadTexts: ipcFailoverStatusSummaryStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverStatusSummaryStatistics.setDescription('DHCP failover status statistics summed for all types of DHCP configuration objects.')
ipcFailStatLastStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastStartTime.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatLastStartTime.setDescription('The last time the failover relationship initiated.')
ipcFailStatLastSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastSyncTime.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatLastSyncTime.setDescription('The last time database synchronization occurred between the primary and secondary DHCP failover services.')
ipcFailStatLastTestTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastTestTime.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatLastTestTime.setDescription('The last time failover communications were tested between the primary and secondary DHCP failover services.')
ipcFailStatLastDownTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastDownTime.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatLastDownTime.setDescription('The last time failover communications were failed between the primary and secondary DHCP failover services.')
ipcFailStatLastUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLastUpTime.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatLastUpTime.setDescription('The last time failover communications were succeeded between the primary and secondary DHCP failover services.')
ipcFailStatSendErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSendErrors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSendErrors.setDescription('The number of errors that have occurred sending failover messages since the last time this counter was reset.')
ipcFailStatRecvErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecvErrors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecvErrors.setDescription('The number of errors that have occurred receiving failover messages since the last time this counter was reset.')
ipcFailStatPlatformMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatPlatformMismatchErrors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatPlatformMismatchErrors.setDescription('The number of times an attempt was made to initiate failover between this service and a partner failover service on a different platform, since the last time this counter was reset.')
ipcFailStatVersionMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatVersionMismatchErrors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatVersionMismatchErrors.setDescription('The number of times an attempt was made to initiate failover between this service and a partner failover service using a different failover protocol version, since the last time this counter was reset.')
ipcFailStatRoleMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRoleMismatchErrors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRoleMismatchErrors.setDescription('The number of times an attempt was made to initiate failover between this service and a partner failover service that was designated with the same failover role (both services were primary or both services were secondary), since the last time this counter was reset.')
ipcFailStatCRC1Errors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCRC1Errors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatCRC1Errors.setDescription('The number of cyclic redundancy checksum errors that occurred for the first CRC encoding while decoding DHCP failover messages between the DHCP services .')
ipcFailStatCRC2Errors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCRC2Errors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatCRC2Errors.setDescription('The number of cyclic redundancy checksum errors that occurred for the second CRC encoding while decoding DHCP failover messages between the DHCP services .')
ipcFailStatDecryptErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatDecryptErrors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatDecryptErrors.setDescription('The number of errors that occurred decrypting DHCP failover messages between the DHCP services.')
ipcFailStatAccessDeniedErrors = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatAccessDeniedErrors.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatAccessDeniedErrors.setDescription('The number of access denied errors that occurred while attempting to propagate DHCP configuration changes to the partner failover service.')
ipcFailStatTotalTimeDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTotalTimeDown.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatTotalTimeDown.setDescription('The total number of seconds spend in the failover communications down state.')
ipcFailStatLongestTimeDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLongestTimeDown.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatLongestTimeDown.setDescription('The longest period spend in the failover communications down state, in seconds.')
ipcFailStatCountTimeDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCountTimeDown.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatCountTimeDown.setDescription('The total number of times the service has been in the failover communications down state.')
ipcFailStatTotalResynch = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTotalResynch.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatTotalResynch.setDescription('The total number of seconds spend in the failover resynchronization state.')
ipcFailStatLongestResynch = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLongestResynch.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatLongestResynch.setDescription('The longest period spend in the failover resynchronization state, in seconds.')
ipcFailStatCountResynch = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCountResynch.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatCountResynch.setDescription('The total number of times the service has been in the failover resynchronization state.')
ipcFailStatTotalTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTotalTimeUp.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatTotalTimeUp.setDescription('The total number of seconds spend in the failover communications up state.')
ipcFailStatLongestTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatLongestTimeUp.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatLongestTimeUp.setDescription('The longest period spend in the failover communications up state, in seconds.')
ipcFailStatCountTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatCountTimeUp.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatCountTimeUp.setDescription('The total number of times the service has been in the failover communications up state.')
ipcFailStatRecdHeartbeats = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdHeartbeats.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdHeartbeats.setDescription('The total number of heartbeat messages received since the last time this statistic was reset.')
ipcFailStatRecdTestRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdTestRequests.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdTestRequests.setDescription('The total number of test request messages received since the last time this statistic was reset.')
ipcFailStatRecdTestReplies = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdTestReplies.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdTestReplies.setDescription('The total number of test reply messages received since the last time this statistic was reset.')
ipcFailStatRecdDataTxRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTxRequests.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataTxRequests.setDescription('The total number of data transfer requests received since the last time this statistic was reset.')
ipcFailStatRecdDataTxData = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTxData.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataTxData.setDescription('The total number of data transfer data packets received since the last time this statistic was reset.')
ipcFailStatRecdDataTxAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTxAcks.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataTxAcks.setDescription('The total number of data transfer acknowledgement packets received since the last time this statistic was reset.')
ipcFailStatRecdDataTransactionData = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTransactionData.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataTransactionData.setDescription('The total number of data transaction data packets received since the last time this statistic was reset.')
ipcFailStatRecdDataTransactionAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataTransactionAcks.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataTransactionAcks.setDescription('The total number of data transaction acknowledgement packets received since the last time this statistic was reset.')
ipcFailStatRecdDataConflicts = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataConflicts.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataConflicts.setDescription('The total number of data conflict messages received since the last time this statistic was reset.')
ipcFailStatRecdDataConflictAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataConflictAcks.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataConflictAcks.setDescription('The total number of data conflict acknowledgement messages received since the last time this statistic was reset.')
ipcFailStatRecdDataResynchRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataResynchRequests.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataResynchRequests.setDescription('The total number of data resynchronization request messages received since the last time this statistic was reset.')
ipcFailStatRecdDataResynchAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdDataResynchAcks.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdDataResynchAcks.setDescription('The total number of data resynchronization acknowledgement messages received since the last time this statistic was reset.')
ipcFailStatRecdShuttingDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatRecdShuttingDown.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatRecdShuttingDown.setDescription('The total number of service stopping messages received from the partner failover DHCP service since the last time this statistic was reset.')
ipcFailStatSentHeartbeats = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentHeartbeats.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentHeartbeats.setDescription('The total number of heartbeat messages sent since the last time this statistic was reset.')
ipcFailStatSentTestRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentTestRequests.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentTestRequests.setDescription('The total number of test request messages sent since the last time this statistic was reset.')
ipcFailStatSentTestReplies = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentTestReplies.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentTestReplies.setDescription('The total number of test reply messages sent since the last time this statistic was reset.')
ipcFailStatSentDataTxRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTxRequests.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataTxRequests.setDescription('The total number of data transfer requests sent since the last time this statistic was reset.')
ipcFailStatSentDataTxData = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTxData.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataTxData.setDescription('The total number of data transfer data packets sent since the last time this statistic was reset.')
ipcFailStatSentDataTxAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTxAcks.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataTxAcks.setDescription('The total number of data transfer acknowledgement packets sent since the last time this statistic was reset.')
ipcFailStatSentDataTransactionData = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTransactionData.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataTransactionData.setDescription('The total number of data transaction data packets sent since the last time this statistic was reset.')
ipcFailStatSentDataTransactionAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataTransactionAcks.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataTransactionAcks.setDescription('The total number of data transaction acknowledgement packets sent since the last time this statistic was reset.')
ipcFailStatSentDataConflicts = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataConflicts.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataConflicts.setDescription('The total number of data conflict messages sent since the last time this statistic was reset.')
ipcFailStatSentDataConflictAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataConflictAcks.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataConflictAcks.setDescription('The total number of data conflict acknowledgement messages sent since the last time this statistic was reset.')
ipcFailStatSentDataResynchRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataResynchRequests.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataResynchRequests.setDescription('The total number of data resynchronization request messages sent since the last time this statistic was reset.')
ipcFailStatSentDataResynchAcks = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentDataResynchAcks.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentDataResynchAcks.setDescription('The total number of data resynchronization acknowledgement messages sent since the last time this statistic was reset.')
ipcFailStatSentShuttingDown = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatSentShuttingDown.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatSentShuttingDown.setDescription('The total number of service stopping messages sent from the partner failover DHCP service since the last time this statistic was reset.')
ipcFailStatBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatBytesSent.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatBytesSent.setDescription('The number of bytes sent in failover packets since the last time this statistic was reset')
ipcFailStatBytesRecd = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatBytesRecd.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatBytesRecd.setDescription('The number of bytes received in failover packets since the last time this statistic was reset')
ipcFailStatTxSent = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTxSent.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatTxSent.setDescription('The number of failover transactions sent since the last time this statistic was reset')
ipcFailStatTxRecd = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatTxRecd.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatTxRecd.setDescription('The number of failover transactions received since the last time this statistic was reset')
ipcFailStatStatus = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatStatus.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatStatus.setDescription('The current failover status of the service: up down disabled stand-alone n/a ')
ipcFailStatOperation = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 100, 1, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcFailStatOperation.setStatus('current')
if mibBuilder.loadTexts: ipcFailStatOperation.setDescription('The current failover operation: terminating failover stopping stopped n/a ')
ipcDHCPPacketStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1))
if mibBuilder.loadTexts: ipcDHCPPacketStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPPacketStatistics.setDescription('')
ipcDHCPPacketDiscardStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1))
if mibBuilder.loadTexts: ipcDHCPPacketDiscardStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPPacketDiscardStatistics.setDescription('')
ipcDHCPDiscoverPacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDiscoverPacketDiscards.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPDiscoverPacketDiscards.setDescription('')
ipcDHCPRequestPacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPRequestPacketDiscards.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPRequestPacketDiscards.setDescription('')
ipcDHCPInformPacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPInformPacketDiscards.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPInformPacketDiscards.setDescription('')
ipcDHCPDeclinePacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDeclinePacketDiscards.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPDeclinePacketDiscards.setDescription('')
ipcDHCPOtherPacketDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPOtherPacketDiscards.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPOtherPacketDiscards.setDescription('')
ipcDHCPPacketSupercedeStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2))
if mibBuilder.loadTexts: ipcDHCPPacketSupercedeStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPPacketSupercedeStatistics.setDescription('')
ipcDHCPDiscoverPacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDiscoverPacketSupercedes.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPDiscoverPacketSupercedes.setDescription('')
ipcDHCPRequestPacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPRequestPacketSupercedes.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPRequestPacketSupercedes.setDescription('')
ipcDHCPInformPacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPInformPacketSupercedes.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPInformPacketSupercedes.setDescription('')
ipcDHCPDeclinePacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDeclinePacketSupercedes.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPDeclinePacketSupercedes.setDescription('')
ipcDHCPOtherPacketSupercedes = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPOtherPacketSupercedes.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPOtherPacketSupercedes.setDescription('')
ipcDHCPPacketResponseStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3))
if mibBuilder.loadTexts: ipcDHCPPacketResponseStatistics.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPPacketResponseStatistics.setDescription('The average response time of the BOOTP/DHCP requests, in ms, in the last intervals')
ipcDHCPBOOTPPacketResponseAvg1minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg1minTime.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg1minTime.setDescription('The average response time of the BOOTP requests, in ms, in the last 1 min.')
ipcDHCPBOOTPPacketResponseAvg5minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg5minTime.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg5minTime.setDescription('The average response time of the BOOTP requests, in ms, in the last 5 min.')
ipcDHCPBOOTPPacketResponseAvg15minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg15minTime.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPBOOTPPacketResponseAvg15minTime.setDescription('The average response time of the BOOTP requests, in ms, in the last 15 min.')
ipcDHCPDHCPv4PacketResponseAvg1minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg1minTime.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg1minTime.setDescription('The average response time of the DHCPv4 requests, in ms, in the last 1 min.')
ipcDHCPDHCPv4PacketResponseAvg5minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg5minTime.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg5minTime.setDescription('The average response time of the DHCPv4 requests, in ms, in the last 5 min.')
ipcDHCPDHCPv4PacketResponseAvg15minTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 2, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg15minTime.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPDHCPv4PacketResponseAvg15minTime.setDescription('The average response time of the DHCPv4 requests, in ms, in the last 15 min.')
ipcConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4))
if mibBuilder.loadTexts: ipcConformance.setStatus('current')
if mibBuilder.loadTexts: ipcConformance.setDescription('')
todServerObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1))
if mibBuilder.loadTexts: todServerObjects.setStatus('current')
if mibBuilder.loadTexts: todServerObjects.setDescription('')
todClientObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1, 2))
if mibBuilder.loadTexts: todClientObjects.setStatus('current')
if mibBuilder.loadTexts: todClientObjects.setDescription('')
todCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1, 1))
if mibBuilder.loadTexts: todCounters.setStatus('current')
if mibBuilder.loadTexts: todCounters.setDescription('')
todCountTcpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todCountTcpRequests.setStatus('current')
if mibBuilder.loadTexts: todCountTcpRequests.setDescription('The number of time of day requests received over TCP.')
todCountUdpRequests = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todCountUdpRequests.setStatus('current')
if mibBuilder.loadTexts: todCountUdpRequests.setDescription('The number of time of day requests received over Udp.')
ipcServiceLeasesInUse = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 101, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceLeasesInUse.setStatus('current')
if mibBuilder.loadTexts: ipcServiceLeasesInUse.setDescription('The number of leases in use.')
ipcServiceServerName = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceServerName.setStatus('current')
if mibBuilder.loadTexts: ipcServiceServerName.setDescription('The name of the server.')
ipcServiceName = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceName.setStatus('current')
if mibBuilder.loadTexts: ipcServiceName.setDescription('The name of the service.')
ipcServiceVersion = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceVersion.setStatus('current')
if mibBuilder.loadTexts: ipcServiceVersion.setDescription('The version of the service.')
ipcServiceLicenseUsers = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceLicenseUsers.setStatus('current')
if mibBuilder.loadTexts: ipcServiceLicenseUsers.setDescription('The number of users in license.')
ipcServiceSubscriptionExpiration = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceSubscriptionExpiration.setStatus('current')
if mibBuilder.loadTexts: ipcServiceSubscriptionExpiration.setDescription('The date the subscription expires.')
ipcServiceLicenseType = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceLicenseType.setStatus('current')
if mibBuilder.loadTexts: ipcServiceLicenseType.setDescription('The type of license (Licensed=0/Demo=1).')
ipcServiceOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: ipcServiceOperatingSystem.setDescription('The operating system of the server.')
ipcServiceStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 102, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcServiceStartTime.setStatus('current')
if mibBuilder.loadTexts: ipcServiceStartTime.setDescription('The time the service started.')
todServerNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 2))
todServerConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3))
if mibBuilder.loadTexts: todServerConformance.setStatus('current')
if mibBuilder.loadTexts: todServerConformance.setDescription('')
todServerCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3, 1))
todServerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3, 2))
todServerCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3, 1, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "todServerCounterObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    todServerCompliance = todServerCompliance.setStatus('current')
if mibBuilder.loadTexts: todServerCompliance.setDescription('')
todServerCounterObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 5, 3, 2, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "todCountTcpRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "todCountUdpRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    todServerCounterObjects = todServerCounterObjects.setStatus('current')
if mibBuilder.loadTexts: todServerCounterObjects.setDescription('')
ipcServiceStatisticsConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1))
if mibBuilder.loadTexts: ipcServiceStatisticsConformance.setStatus('current')
if mibBuilder.loadTexts: ipcServiceStatisticsConformance.setDescription('')
ipcServiceStatisticsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 1))
ipcServiceSatisticsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 2))
ipcServiceInformationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 3))
ipcServiceStatisticsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 1, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceStatisticsObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcServiceStatisticsCompliance = ipcServiceStatisticsCompliance.setStatus('current')
if mibBuilder.loadTexts: ipcServiceStatisticsCompliance.setDescription('')
ipcServiceStatisticsObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 2, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceLeasesInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcServiceStatisticsObjects = ipcServiceStatisticsObjects.setStatus('current')
if mibBuilder.loadTexts: ipcServiceStatisticsObjects.setDescription('')
ipcServiceInformationObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 1, 3, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceServerName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceVersion"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceLicenseUsers"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceSubscriptionExpiration"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceLicenseType"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceOperatingSystem"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcServiceStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcServiceInformationObjects = ipcServiceInformationObjects.setStatus('current')
if mibBuilder.loadTexts: ipcServiceInformationObjects.setDescription('')
ipcPausedTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 4, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcPausedTime.setStatus('current')
if mibBuilder.loadTexts: ipcPausedTime.setDescription('The date and time when the server paused operation.')
ipcResumedTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 4, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcResumedTime.setStatus('current')
if mibBuilder.loadTexts: ipcResumedTime.setDescription('The date and time when the server resumed operation.')
ipcNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 3, 0))
if mibBuilder.loadTexts: ipcNotifications.setStatus('current')
if mibBuilder.loadTexts: ipcNotifications.setDescription('')
ipcNotifyServerPaused = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 3, 0, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcPausedTime"))
if mibBuilder.loadTexts: ipcNotifyServerPaused.setStatus('current')
if mibBuilder.loadTexts: ipcNotifyServerPaused.setDescription('This notification signifies that the server of the specified type has been paused on the host from which this notification has been sent.')
ipcNotifyServerResumed = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 3, 0, 2)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcResumedTime"))
if mibBuilder.loadTexts: ipcNotifyServerResumed.setStatus('current')
if mibBuilder.loadTexts: ipcNotifyServerResumed.setDescription('This notification signifies that the server of the specified type has been paused on the host from which this notification has been sent.')
ipcDhcpNotifyObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1))
if mibBuilder.loadTexts: ipcDhcpNotifyObjects.setStatus('current')
if mibBuilder.loadTexts: ipcDhcpNotifyObjects.setDescription('Deprecated DHCP Notify Objects')
ipcmdDHCPFreeAddressLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressLowThreshold.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressLowThreshold.setDescription('The low threshold for available free addresses in this rule scope. If the value for available free addresses in this rule scope becomes equal to or less than this value, a incognitoDHCPFreeAddressLowThreshold event is generated for this shared network. No more incognitoDHCPFreeAddressLowThreshold events will be generated for this rule scope during this execution of the DHCP server until the value for available free addresses has exceeded the value of incognitoDHCPFreeAddressHighThreshold. This value may be expressed as either an absolute value or a percentage; the units are specified by the value of incognitoDHCPFreeAddressUnits.')
ipcmdDHCPFreeAddressHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressHighThreshold.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressHighThreshold.setDescription('The high threshold for available free addresses in this rule scope. If a incognitoDHCPFreeAddressLowThreshold event has been generated for this rule scope, and the value for available free addresses has exceeded the value of incognitoDHCPFreeAddressHighThreshold, then a incognitoNotifyFreeAddressessHigh event will be generated. No more incognitoNotifyFreeAddressessHigh events will be generated for this rule scope during this execution of the DHCP server until the value for available free addresses becomes equal to or less than the value of incognitoDHCPFreeAddressHighThreshold. This value may be expressed as either an absolute value or a percentage; the units are specified by the value of incognitoDHCPFreeAddressUnits.')
ipcmdDHCPFreeAddressCriticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressCriticalThreshold.setDescription('The ciritical threshold for available free addresses in this subnet. If a incognitoDHCPFreeAddressHighThreshold event has been generated for this subnet, and the value for available free addresses has exceeded the value of incognitoDHCPFreeAddressCriticalThreshold, then a incognitoNotifyCriticalAddressessLevel event will be generated. No more incognitoNotifyCriticalAddressessLevel events will be generated for this subnet during this execution of the DHCP server until the value for available free addresses becomes equal to or less than the value of incognitoDHCPFreeAddressHighThreshold. This value may be expressed as either an absolute value or a percentage; the units are specified by the value of incognitoDHCPFreeAddressUnits.')
ipcmdDHCPFreeAddressValue = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressValue.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressValue.setDescription('The number of IP addresses on this rule scope that are not currently assigned to a client. May be expressed as either an absolute value or a percentage; the units are given by the value of incognitoDHCPFreeAddressUnits.')
ipcmdDHCPFreeAddressUnits = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("value", 1), ("percent", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressUnits.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFreeAddressUnits.setDescription('The units associated with the value of incognitoDHCPFreeAddressValue.')
ipcmdDHCPRuleID = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRuleID.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPRuleID.setDescription('a 16 byte octet block lookup key of the rule in network order')
ipcmdDHCPRuleName = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRuleName.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPRuleName.setDescription('The rule name associated with ipcmdRuleID')
ipcmdDHCPRogueServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRogueServerAddress.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPRogueServerAddress.setDescription('The IP Address of the rogue dhcp server that is detected.')
ipcmdDHCPRogueServerNumRequest = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRogueServerNumRequest.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPRogueServerNumRequest.setDescription('The number of request answered by the rogue dhcp server.')
ipcmdDHCPRogueServerRequestTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRogueServerRequestTime.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPRogueServerRequestTime.setDescription('The time of the last request to rogue dhcp server.')
ipcmdDHCPRogueServerInfo = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPRogueServerInfo.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPRogueServerInfo.setDescription('Generic information about the rogue dhcp server.')
ipcmdDHCPCurrentUserCount = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 12), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPCurrentUserCount.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPCurrentUserCount.setDescription('The current number of users using the DHCP service.')
ipcmdDHCPLicenseCount = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPLicenseCount.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPLicenseCount.setDescription('The current license count registered for the DHCP service.')
ipcmdDHCPExceedingLicenseLimit = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPExceedingLicenseLimit.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPExceedingLicenseLimit.setDescription('The max number of request above the license count the DHCP will answer.')
ipcmdDHCPFailoverConflictAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 15), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFailoverConflictAddress.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFailoverConflictAddress.setDescription('The IP Address of conflicting failover partner.')
ipcmdDHCPNetViewName = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPNetViewName.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPNetViewName.setDescription('Network View name')
ipcmdDHCPCurrentHWM = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 17), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPCurrentHWM.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPCurrentHWM.setDescription('The current High Water Mark.')
ipcmdDHCPFailoverResynchStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFailoverResynchStartTime.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFailoverResynchStartTime.setDescription('The start time of the failover resynchronization operation.')
ipcmdDHCPFailoverResynchEndTime = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFailoverResynchEndTime.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFailoverResynchEndTime.setDescription('The stop time of the failover resynchronization operation.')
ipcmdDHCPDuplicateDeviceHWAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceHWAddress.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceHWAddress.setDescription('The hardware address of a possible duplicate device.')
ipcmdDHCPDuplicateDeviceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 21), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceIPAddress.setDescription('The TCP/IP address of a possible duplicate device.')
ipcmdDHCPDuplicateDeviceRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceRemoteID.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceRemoteID.setDescription('The remote ID of a possible duplicate device.')
ipcmdDHCPDuplicateDeviceCircuitID = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceCircuitID.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceCircuitID.setDescription('The circuit ID of a possible duplicate device.')
ipcmdDHCPDuplicateDeviceGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 24), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceGWAddress.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPDuplicateDeviceGWAddress.setDescription('The GW address of a possible duplicate device.')
ipcmdTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 25), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdTFTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: ipcmdTFTPServerAddress.setDescription('The TCP/IP address of a TFTP Server.')
ipcmdDHCPFailoverTerminatedReason = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdDHCPFailoverTerminatedReason.setStatus('current')
if mibBuilder.loadTexts: ipcmdDHCPFailoverTerminatedReason.setDescription('Additional information.')
ipcmdNotifyObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2))
if mibBuilder.loadTexts: ipcmdNotifyObjects.setStatus('current')
if mibBuilder.loadTexts: ipcmdNotifyObjects.setDescription('Deprecated ipcmd Notify Objects')
ipcmdNotifyServer = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdNotifyServer.setStatus('current')
if mibBuilder.loadTexts: ipcmdNotifyServer.setDescription('The IP Address of a server with which IPcmd is attempting to communicate.')
ipcmdNotifyServerType = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dns", 1), ("dhcp", 2), ("ldap", 3), ("mps", 4), ("tftp", 5), ("kdc", 6), ("dhcpRelay", 7), ("cfm", 8), ("cfmproxy", 9), ("unknown", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdNotifyServerType.setStatus('current')
if mibBuilder.loadTexts: ipcmdNotifyServerType.setDescription('The type of server')
ipcmdUnknownIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdUnknownIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipcmdUnknownIPAddress.setDescription('The IP Address of an unknown device discovered via PING (ICMP Echo).')
ipcmdServerDiskSpaceFreeTotal = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeTotal.setStatus('current')
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeTotal.setDescription('The amount of Disk Storage Available.')
ipcmdServerDiskSpaceFreeCount = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeCount.setStatus('current')
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeCount.setDescription('The amount of Disk Storage Free. May be expressed as either an absolute value(in Kilobytes) or a percentage; the units are given by the value of incognitoServerDiskSpaceFreeUnits.')
ipcmdServerDiskSpaceFreeUnits = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("value", 1), ("percent", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeUnits.setStatus('current')
if mibBuilder.loadTexts: ipcmdServerDiskSpaceFreeUnits.setDescription('The units associated with the value of ipcmdServerDiskSpaceFreeCount. (1) value in KiloBytes (2) percentage')
ipcmdServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ipcmdServiceStatus.setDescription('Generic information about the service')
ipcmdNotifyHost = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdNotifyHost.setStatus('current')
if mibBuilder.loadTexts: ipcmdNotifyHost.setDescription('The hostname or IP Address of a server with which IPcmd is attempting to communicate.')
ipcmdNotifyDevice = MibScalar((1, 3, 6, 1, 4, 1, 3606, 7, 1, 2, 99, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipcmdNotifyDevice.setStatus('current')
if mibBuilder.loadTexts: ipcmdNotifyDevice.setDescription('The device identifier of a DHCP client.')
incognitoNotifyNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0))
if mibBuilder.loadTexts: incognitoNotifyNotifications.setStatus('current')
if mibBuilder.loadTexts: incognitoNotifyNotifications.setDescription('Deprecated Notifications')
incognitoIPCMDServerStart = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDServerStart.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServerStart.setDescription('This notification signifies that the server of the specified type has started on the host from which this notitication has been sent.')
incognitoIPCMDServerStop = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 2)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDServerStop.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServerStop.setDescription('This notification signifies that the server of the specified type has stopped normally on the host from which this notitication has been sent.')
incognitoIPCMDServicePaused = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 3)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServicePaused.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServicePaused.setDescription('This notification signifies that the dhcp service is paused.')
incognitoIPCMDServiceResume = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 4)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServiceResume.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServiceResume.setDescription('This notification signiifes that the dhcp service resumes.')
incognitoIPCMDExceededLicense = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 5)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentUserCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPLicenseCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPExceedingLicenseLimit"))
if mibBuilder.loadTexts: incognitoIPCMDExceededLicense.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDExceededLicense.setDescription("This notification signifies that the dhcp server's license has been exceeded.")
incognitoIPCMDFreeAddressHigh = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 6)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressHighThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressValue"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleName"))
if mibBuilder.loadTexts: incognitoIPCMDFreeAddressHigh.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDFreeAddressHigh.setDescription('This notification signifies that the number of available IP addresses for a particular rule scope has risen above the value of incognitoDHCPFreeAddressHighThreshold for that rule scope.')
incognitoIPCMDCriticalAddressLevel = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 7)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressCriticalThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressValue"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleName"))
if mibBuilder.loadTexts: incognitoIPCMDCriticalAddressLevel.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDCriticalAddressLevel.setDescription('This notification signifies that the number of available IP addresses for a particular subnet has reach a critical level for that subnet.')
incognitoIPCMDOtherServerResponding = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 8)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDOtherServerResponding.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDOtherServerResponding.setDescription('This notification signifies that a server which had formerly been unresponsive is now responding to updates from the IP Commander service. The identity of the server is given by the incognitoNotifyServer object. The type of the server is given by the incognitoNotifyServerType object.')
incognitoIPCMDOtherServerNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 9)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDOtherServerNotResponding.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDOtherServerNotResponding.setDescription('This notification signifies that a server is not responding to updates from the DHCP server. The identity of the server is given by the incognitoNotifyServer object. The type of the server is given by the incognitoNotifyServerType object.')
incognitoIPCMDFailoverConflict = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 10)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverConflictAddress"))
if mibBuilder.loadTexts: incognitoIPCMDFailoverConflict.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDFailoverConflict.setDescription("This notification signifes that the dhcp server' failvoer address conflicts.")
incognitoIPCMDServiceOverloaded = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 11)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServiceOverloaded.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServiceOverloaded.setDescription('This notification signifes that the dhcp service is overloaded.')
incognitoIPCMDServiceCaughtUp = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 12)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServiceCaughtUp.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServiceCaughtUp.setDescription('This notification signifes that the dhcp service caught up.')
incognitoIPCMDDDNSFailure = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 13)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDDDNSFailure.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDDDNSFailure.setDescription('This notification signifies the DNS server is not responding to dynamic DNS updates.')
incognitoIPCMDUnknownDevice = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 14)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdUnknownIPAddress"))
if mibBuilder.loadTexts: incognitoIPCMDUnknownDevice.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDUnknownDevice.setDescription("This notification signifies the unknown device's IP address discovered via PING (ICMP Echo).")
incognitoIPCMDRogueServer = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 15)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerNumRequest"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerRequestTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerInfo"))
if mibBuilder.loadTexts: incognitoIPCMDRogueServer.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDRogueServer.setDescription('This notification signifes that rogue dhcp server has been detected.')
incognitoIPCMDDiskStorageLow = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 16)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeTotal"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeUnits"))
if mibBuilder.loadTexts: incognitoIPCMDDiskStorageLow.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDDiskStorageLow.setDescription("This notification signifes that the dhcp server's disk storage is low.")
incognitoIPCMDServiceBackupDone = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 17)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"))
if mibBuilder.loadTexts: incognitoIPCMDServiceBackupDone.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServiceBackupDone.setDescription('This notification signifies that the dhcp server backup is done.')
incognitoIPCMDFreeAddressLow = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 18)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressLowThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressValue"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleName"))
if mibBuilder.loadTexts: incognitoIPCMDFreeAddressLow.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDFreeAddressLow.setDescription('This notification signifies that the number of available IP addresses for a particular rule scope has fallen below the value of incognitoDHCPFreeAddressLowThreshold for that rule scope.')
incognitoIPCMDFailoverResynchOperationStarted = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 19)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverResynchStartTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"))
if mibBuilder.loadTexts: incognitoIPCMDFailoverResynchOperationStarted.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDFailoverResynchOperationStarted.setDescription('This notification signifies that the failover resynchronization operation have started.')
incognitoIPCMDFailoverResynchOperationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 20)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverResynchEndTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"))
if mibBuilder.loadTexts: incognitoIPCMDFailoverResynchOperationCompleted.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDFailoverResynchOperationCompleted.setDescription('This notification signifies that the failover resynchronization operation have completed.')
incognitoIPCMDNetViewCriticalHWMExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 21)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPNetViewName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentHWM"))
if mibBuilder.loadTexts: incognitoIPCMDNetViewCriticalHWMExceeded.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDNetViewCriticalHWMExceeded.setDescription('This notification signifies that the Network View Critical HWM have been exceeded.')
incognitoIPCMDNetViewWarningHWMExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 22)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPNetViewName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentHWM"))
if mibBuilder.loadTexts: incognitoIPCMDNetViewWarningHWMExceeded.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDNetViewWarningHWMExceeded.setDescription('This notification signifies that the Network View Warning HWM have been exceeded.')
incognitoIPCMDPossibleDuplicateDevice = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 23)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceHWAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceIPAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceRemoteID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceCircuitID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceGWAddress"))
if mibBuilder.loadTexts: incognitoIPCMDPossibleDuplicateDevice.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDPossibleDuplicateDevice.setDescription('This notification is sent whenever a possible duplicate device is found. This does not mean a duplicate IP address, but rather that the service considers the the incoming request comes from a device that appears to have a lease already.')
incognitoIPCMDNoMoreAddressesAvailable = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 24)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceHWAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceRemoteID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceCircuitID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceGWAddress"))
if mibBuilder.loadTexts: incognitoIPCMDNoMoreAddressesAvailable.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDNoMoreAddressesAvailable.setDescription('This notification is sent whenever a device requests an addressbut no more addresses are available in the service. This usually signals address space exhaustion.')
incognitoIPCMDTFTPServerJoining = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 25)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdTFTPServerAddress"))
if mibBuilder.loadTexts: incognitoIPCMDTFTPServerJoining.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDTFTPServerJoining.setDescription('This notification is sent whenever a new TFTP server joins a cluster.')
incognitoIPCMDTFTPServerLeaving = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 26)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdTFTPServerAddress"))
if mibBuilder.loadTexts: incognitoIPCMDTFTPServerLeaving.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDTFTPServerLeaving.setDescription('This notification is sent whenever a new TFTP server leaves a cluster.')
incognitoIPCMDServerJoinClusterIntegration = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 27)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDServerJoinClusterIntegration.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServerJoinClusterIntegration.setDescription('This notification signifies that a server has joined integration cluster. The identity of the server is given by the ipcmdNotifyServer object. The type of the server is given by the ipcmdNotifyServerType object.')
incognitoIPCMDServerLeaveClusterIntegration = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 28)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"))
if mibBuilder.loadTexts: incognitoIPCMDServerLeaveClusterIntegration.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDServerLeaveClusterIntegration.setDescription('This notification signifies that a server has left integration cluster. The identity of the server is given by the ipcmdNotifyServer object. The type of the server is given by the ipcmdNotifyServerType object.')
incognitoIPCMDFailoverTerminated = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 29)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverTerminatedReason"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"))
if mibBuilder.loadTexts: incognitoIPCMDFailoverTerminated.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDFailoverTerminated.setDescription('This notification signifies the the sender has terminated his relationship with the included partner. The reason will add additional information on the success or partial success of the operation.')
incognitoIPCMDLDAPCommunicationsUp = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 30)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPCommunicationsUp.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDLDAPCommunicationsUp.setDescription('This notification signifies that communications have been successfully established with the LDAP service indicated in the ipcmdNotifyHost object.')
incognitoIPCMDLDAPCommunicationsDown = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 31)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPCommunicationsDown.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDLDAPCommunicationsDown.setDescription('This notification signifies that communications have failed with the LDAP service indicated in the ipcmdNotifyHost object.')
incognitoIPCMDLDAPTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 32)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPTimedOut.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDLDAPTimedOut.setDescription('This notification signifies that an LDAP query timed out, indicating that the LDAP service may be overloaded.')
incognitoIPCMDRADIUSAccountingHWMExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 33)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentHWM"))
if mibBuilder.loadTexts: incognitoIPCMDRADIUSAccountingHWMExceeded.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDRADIUSAccountingHWMExceeded.setDescription('This notification signifies that HWM for RADIUS Accounting was reached.')
incognitoIPCMDLDAPSetCommunicationsUp = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 34)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPSetCommunicationsUp.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDLDAPSetCommunicationsUp.setDescription('This notification signifies that communications have been successfully established with the LDAP service set indicated in the ipcmdNotifyHost object.')
incognitoIPCMDLDAPSetCommunicationsDown = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 35)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"))
if mibBuilder.loadTexts: incognitoIPCMDLDAPSetCommunicationsDown.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDLDAPSetCommunicationsDown.setDescription('This notification signifies that communications have failed with the LDAP service set indicated in the ipcmdNotifyHost object.')
incognitoIPCMDDHCPDoSExceededLimit = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 36)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyDevice"))
if mibBuilder.loadTexts: incognitoIPCMDDHCPDoSExceededLimit.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDDHCPDoSExceededLimit.setDescription('This notification signifies that the specified device has exceeded the defined DoS criteria.')
incognitoIPCMDDHCPDoSBelowLimit = NotificationType((1, 3, 6, 1, 4, 1, 3606, 7, 1, 99, 0, 37)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyDevice"))
if mibBuilder.loadTexts: incognitoIPCMDDHCPDoSBelowLimit.setStatus('current')
if mibBuilder.loadTexts: incognitoIPCMDDHCPDoSBelowLimit.setDescription('This notification signifies that the specified device no longer exceeds the defined DoS criteria.')
ipcCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 1))
if mibBuilder.loadTexts: ipcCompliances.setStatus('current')
if mibBuilder.loadTexts: ipcCompliances.setDescription('')
ipcGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2))
if mibBuilder.loadTexts: ipcGroups.setStatus('current')
if mibBuilder.loadTexts: ipcGroups.setDescription('')
ipcDeprecatedGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 99))
if mibBuilder.loadTexts: ipcDeprecatedGroups.setStatus('current')
if mibBuilder.loadTexts: ipcDeprecatedGroups.setDescription('')
ipcNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcResumedTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcPausedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcNotifyObjectsGroup = ipcNotifyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ipcNotifyObjectsGroup.setDescription('')
ipcFailoverSummaryStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2, 3)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastStartTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastSyncTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastTestTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastDownTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLastUpTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSendErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecvErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatPlatformMismatchErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatVersionMismatchErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRoleMismatchErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCRC1Errors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCRC2Errors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatDecryptErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatAccessDeniedErrors"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTotalTimeDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLongestTimeDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCountTimeDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTotalResynch"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLongestResynch"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCountResynch"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTotalTimeUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatLongestTimeUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatCountTimeUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdHeartbeats"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdTestRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdTestReplies"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTxRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTxData"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTxAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTransactionData"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataTransactionAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataConflicts"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataConflictAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataResynchRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdDataResynchAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatRecdShuttingDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentHeartbeats"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentTestRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentTestReplies"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTxRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTxData"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTxAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTransactionData"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataTransactionAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataConflicts"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataConflictAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataResynchRequests"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentDataResynchAcks"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatSentShuttingDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatBytesSent"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatBytesRecd"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTxSent"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatTxRecd"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatStatus"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcFailStatOperation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcFailoverSummaryStatisticsGroup = ipcFailoverSummaryStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ipcFailoverSummaryStatisticsGroup.setDescription('DHCP Failover Summary Statistics')
ipcDHCPPacketStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2, 4)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDiscoverPacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPRequestPacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPInformPacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDeclinePacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPOtherPacketDiscards"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDiscoverPacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPRequestPacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPInformPacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDeclinePacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPOtherPacketSupercedes"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPBOOTPPacketResponseAvg1minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPBOOTPPacketResponseAvg5minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPBOOTPPacketResponseAvg15minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDHCPv4PacketResponseAvg1minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDHCPv4PacketResponseAvg5minTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcDHCPDHCPv4PacketResponseAvg15minTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcDHCPPacketStatisticsGroup = ipcDHCPPacketStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ipcDHCPPacketStatisticsGroup.setDescription('')
ipcNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 2, 2)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcNotifyServerResumed"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcNotifyServerPaused"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcNotificationsGroup = ipcNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ipcNotificationsGroup.setDescription('')
ipcDeprecatedNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 99, 1)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServerStart"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServerStop"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServicePaused"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServiceResume"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDExceededLicense"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFreeAddressHigh"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDCriticalAddressLevel"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDOtherServerResponding"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDOtherServerNotResponding"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFailoverConflict"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServiceOverloaded"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServiceCaughtUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDDDNSFailure"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDUnknownDevice"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDRogueServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDDiskStorageLow"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServiceBackupDone"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFreeAddressLow"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFailoverResynchOperationStarted"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFailoverResynchOperationCompleted"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDNetViewCriticalHWMExceeded"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDNetViewWarningHWMExceeded"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDPossibleDuplicateDevice"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDNoMoreAddressesAvailable"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDTFTPServerLeaving"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDTFTPServerJoining"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServerJoinClusterIntegration"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDServerLeaveClusterIntegration"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDFailoverTerminated"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPCommunicationsUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPCommunicationsDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPTimedOut"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDRADIUSAccountingHWMExceeded"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPSetCommunicationsUp"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDLDAPSetCommunicationsDown"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDDHCPDoSExceededLimit"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "incognitoIPCMDDHCPDoSBelowLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcDeprecatedNotificationsGroup = ipcDeprecatedNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ipcDeprecatedNotificationsGroup.setDescription('')
ipcDeprecatedNotifyBaseObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 99, 2)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressLowThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressHighThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressCriticalThreshold"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressValue"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFreeAddressUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRuleName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerNumRequest"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerRequestTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPRogueServerInfo"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentUserCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPLicenseCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPExceedingLicenseLimit"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverConflictAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPNetViewName"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPCurrentHWM"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverResynchStartTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverResynchEndTime"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceHWAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceIPAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceRemoteID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceCircuitID"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPDuplicateDeviceGWAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdTFTPServerAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdDHCPFailoverTerminatedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcDeprecatedNotifyBaseObjectsGroup = ipcDeprecatedNotifyBaseObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ipcDeprecatedNotifyBaseObjectsGroup.setDescription('')
ipcDeprecatedNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3606, 7, 1, 4, 99, 3)).setObjects(("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServer"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyServerType"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdUnknownIPAddress"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeTotal"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeCount"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServerDiskSpaceFreeUnits"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdServiceStatus"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyHost"), ("INCOGNITO-EXPR-IPCOMMANDER-MIB", "ipcmdNotifyDevice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipcDeprecatedNotifyObjectsGroup = ipcDeprecatedNotifyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ipcDeprecatedNotifyObjectsGroup.setDescription('')
mibBuilder.exportSymbols("INCOGNITO-EXPR-IPCOMMANDER-MIB", ipcServerObjects=ipcServerObjects, ipcmdDHCPFreeAddressValue=ipcmdDHCPFreeAddressValue, incognitoIPCMDUnknownDevice=incognitoIPCMDUnknownDevice, ipcDHCPBOOTPPacketResponseAvg5minTime=ipcDHCPBOOTPPacketResponseAvg5minTime, ipcmdServerDiskSpaceFreeTotal=ipcmdServerDiskSpaceFreeTotal, todServerCompliance=todServerCompliance, ipcFailStatSentTestReplies=ipcFailStatSentTestReplies, incognitoIPCMDServiceResume=incognitoIPCMDServiceResume, incognitoIPCMDFailoverTerminated=incognitoIPCMDFailoverTerminated, incognitoIPCMDDHCPDoSExceededLimit=incognitoIPCMDDHCPDoSExceededLimit, incognitoIPCMDNoMoreAddressesAvailable=incognitoIPCMDNoMoreAddressesAvailable, ipcFailStatLongestTimeUp=ipcFailStatLongestTimeUp, ipcDHCPPacketDiscardStatistics=ipcDHCPPacketDiscardStatistics, incognitoIPCMDLDAPTimedOut=incognitoIPCMDLDAPTimedOut, ipcDHCPBOOTPPacketResponseAvg1minTime=ipcDHCPBOOTPPacketResponseAvg1minTime, ipcNotifyObjects=ipcNotifyObjects, incognitoIPCMDCriticalAddressLevel=incognitoIPCMDCriticalAddressLevel, incognitoIPCMDLDAPSetCommunicationsUp=incognitoIPCMDLDAPSetCommunicationsUp, ipcFailStatLastStartTime=ipcFailStatLastStartTime, ipcFailStatRecdDataConflictAcks=ipcFailStatRecdDataConflictAcks, ipcFailStatStatus=ipcFailStatStatus, incognitoIPCMDTFTPServerJoining=incognitoIPCMDTFTPServerJoining, todClientObjects=todClientObjects, ipcmdDHCPRogueServerNumRequest=ipcmdDHCPRogueServerNumRequest, ipcFailStatSentDataTransactionAcks=ipcFailStatSentDataTransactionAcks, incognitoIPCMDRogueServer=incognitoIPCMDRogueServer, ipcFailStatRecdDataResynchRequests=ipcFailStatRecdDataResynchRequests, ipcFailStatRecdShuttingDown=ipcFailStatRecdShuttingDown, ipcFailoverStatistics=ipcFailoverStatistics, todCountTcpRequests=todCountTcpRequests, incognitoIPCMDFreeAddressHigh=incognitoIPCMDFreeAddressHigh, ipcDHCPRequestPacketSupercedes=ipcDHCPRequestPacketSupercedes, ipcmdDHCPCurrentUserCount=ipcmdDHCPCurrentUserCount, ipcServiceSatisticsGroups=ipcServiceSatisticsGroups, incognitoIPCMDDiskStorageLow=incognitoIPCMDDiskStorageLow, ipcDeprecatedNotifyObjectsGroup=ipcDeprecatedNotifyObjectsGroup, ipcDHCPInformPacketSupercedes=ipcDHCPInformPacketSupercedes, ipcFailStatRecdDataTransactionAcks=ipcFailStatRecdDataTransactionAcks, ipcDHCPDHCPv4PacketResponseAvg5minTime=ipcDHCPDHCPv4PacketResponseAvg5minTime, ipcServiceInformationObjects=ipcServiceInformationObjects, ipcDHCPDeclinePacketSupercedes=ipcDHCPDeclinePacketSupercedes, ipcDHCPRequestPacketDiscards=ipcDHCPRequestPacketDiscards, ipcmdDHCPNetViewName=ipcmdDHCPNetViewName, ipcFailStatSentDataResynchAcks=ipcFailStatSentDataResynchAcks, ipcFailStatVersionMismatchErrors=ipcFailStatVersionMismatchErrors, incognitoIPCMDDDNSFailure=incognitoIPCMDDDNSFailure, ipcDHCPDHCPv4PacketResponseAvg1minTime=ipcDHCPDHCPv4PacketResponseAvg1minTime, incognitoIPCMDExceededLicense=incognitoIPCMDExceededLicense, incognitoIPCMDServiceBackupDone=incognitoIPCMDServiceBackupDone, ipcFailStatRecdDataResynchAcks=ipcFailStatRecdDataResynchAcks, ipcFailStatAccessDeniedErrors=ipcFailStatAccessDeniedErrors, ipcFailStatRecdTestReplies=ipcFailStatRecdTestReplies, ipcFailStatTxSent=ipcFailStatTxSent, ipcFailStatTxRecd=ipcFailStatTxRecd, incognitoIPCMDNetViewCriticalHWMExceeded=incognitoIPCMDNetViewCriticalHWMExceeded, ipcNotifyServerPaused=ipcNotifyServerPaused, incognitoIPCMDServerStart=incognitoIPCMDServerStart, incognitoIPCMDNetViewWarningHWMExceeded=incognitoIPCMDNetViewWarningHWMExceeded, ipcFailStatRecvErrors=ipcFailStatRecvErrors, ipcServiceSubscriptionExpiration=ipcServiceSubscriptionExpiration, ipcServiceStatisticsObjects=ipcServiceStatisticsObjects, todServerNotificationPrefix=todServerNotificationPrefix, incognitoIPCMDServicePaused=incognitoIPCMDServicePaused, ipcmdDHCPRogueServerRequestTime=ipcmdDHCPRogueServerRequestTime, incognitoIPCMDOtherServerNotResponding=incognitoIPCMDOtherServerNotResponding, ipcServiceStatisticsCompliance=ipcServiceStatisticsCompliance, ipcFailStatCRC1Errors=ipcFailStatCRC1Errors, ipcServiceInformationGroups=ipcServiceInformationGroups, incognitoIPCMDFailoverResynchOperationStarted=incognitoIPCMDFailoverResynchOperationStarted, ipcDHCPPacketSupercedeStatistics=ipcDHCPPacketSupercedeStatistics, incognitoIPCMDPossibleDuplicateDevice=incognitoIPCMDPossibleDuplicateDevice, ipcDHCPDiscoverPacketDiscards=ipcDHCPDiscoverPacketDiscards, incognitoIPCMDLDAPSetCommunicationsDown=incognitoIPCMDLDAPSetCommunicationsDown, ipcFailStatCountResynch=ipcFailStatCountResynch, todServerCounterObjects=todServerCounterObjects, ipcServiceLeasesInUse=ipcServiceLeasesInUse, incognitoIPCMDDHCPDoSBelowLimit=incognitoIPCMDDHCPDoSBelowLimit, ipcFailoverProtocolStatistics=ipcFailoverProtocolStatistics, ipcmdNotifyHost=ipcmdNotifyHost, ipcFailStatTotalTimeDown=ipcFailStatTotalTimeDown, ipcDHCPDHCPv4PacketResponseAvg15minTime=ipcDHCPDHCPv4PacketResponseAvg15minTime, incognitoIPCMDFreeAddressLow=incognitoIPCMDFreeAddressLow, ipcFailStatLastSyncTime=ipcFailStatLastSyncTime, ipcmdTFTPServerAddress=ipcmdTFTPServerAddress, ipcDeprecatedNotifyObjects=ipcDeprecatedNotifyObjects, ipcmdUnknownIPAddress=ipcmdUnknownIPAddress, ipcFailStatSentDataTxAcks=ipcFailStatSentDataTxAcks, ipcDeprecatedNotificationPrefix=ipcDeprecatedNotificationPrefix, ipcFailStatSendErrors=ipcFailStatSendErrors, PYSNMP_MODULE_ID=incognitoIPC, ipcNotifyObjectsGroup=ipcNotifyObjectsGroup, incognitoIPCMDServiceOverloaded=incognitoIPCMDServiceOverloaded, incognitoIPCMDLDAPCommunicationsDown=incognitoIPCMDLDAPCommunicationsDown, ipcFailoverSentSummaryStatistics=ipcFailoverSentSummaryStatistics, ipcFailStatBytesRecd=ipcFailStatBytesRecd, ipcFailoverStatusSummaryStatistics=ipcFailoverStatusSummaryStatistics, ipcDHCPStatistics=ipcDHCPStatistics, ipcmdNotifyServer=ipcmdNotifyServer, ipcFailStatLastDownTime=ipcFailStatLastDownTime, ipcmdDHCPDuplicateDeviceIPAddress=ipcmdDHCPDuplicateDeviceIPAddress, ipcDhcpNotifyObjects=ipcDhcpNotifyObjects, ipcDHCPOtherPacketDiscards=ipcDHCPOtherPacketDiscards, ipcFailoverResynchSummaryStatistics=ipcFailoverResynchSummaryStatistics, ipcmdNotifyObjects=ipcmdNotifyObjects, ipcFailStatCRC2Errors=ipcFailStatCRC2Errors, ipcServiceStatisticsCompliances=ipcServiceStatisticsCompliances, ipcDHCPPacketResponseStatistics=ipcDHCPPacketResponseStatistics, ipcDHCPBOOTPPacketResponseAvg15minTime=ipcDHCPBOOTPPacketResponseAvg15minTime, todCountUdpRequests=todCountUdpRequests, ipcmdDHCPFreeAddressCriticalThreshold=ipcmdDHCPFreeAddressCriticalThreshold, ipcmdDHCPDuplicateDeviceCircuitID=ipcmdDHCPDuplicateDeviceCircuitID, ipcServiceServerName=ipcServiceServerName, ipcServiceVersion=ipcServiceVersion, ipcDHCPInformPacketDiscards=ipcDHCPInformPacketDiscards, ipcmdDHCPFailoverConflictAddress=ipcmdDHCPFailoverConflictAddress, ipcFailoverTimeupSummaryStatistics=ipcFailoverTimeupSummaryStatistics, incognitoIPCMDTFTPServerLeaving=incognitoIPCMDTFTPServerLeaving, ipcmdDHCPRuleName=ipcmdDHCPRuleName, ipcFailStatPlatformMismatchErrors=ipcFailStatPlatformMismatchErrors, ipcmdDHCPDuplicateDeviceGWAddress=ipcmdDHCPDuplicateDeviceGWAddress, ipcFailStatTotalTimeUp=ipcFailStatTotalTimeUp, ipcDHCPPacketStatisticsGroup=ipcDHCPPacketStatisticsGroup, ipcFailStatRecdTestRequests=ipcFailStatRecdTestRequests, todCounters=todCounters, ipcTimeOfDayServer=ipcTimeOfDayServer, ipcFailStatLastUpTime=ipcFailStatLastUpTime, ipcFailoverTimerSummaryStatistics=ipcFailoverTimerSummaryStatistics, ipcDHCPOtherPacketSupercedes=ipcDHCPOtherPacketSupercedes, incognitoIPCMDOtherServerResponding=incognitoIPCMDOtherServerResponding, ipcDHCPPacketStatistics=ipcDHCPPacketStatistics, ipcServiceName=ipcServiceName, todServerGroups=todServerGroups, ipcmdDHCPFreeAddressUnits=ipcmdDHCPFreeAddressUnits, ipcmdDHCPFailoverTerminatedReason=ipcmdDHCPFailoverTerminatedReason, incognitoIPCMDRADIUSAccountingHWMExceeded=incognitoIPCMDRADIUSAccountingHWMExceeded, ipcGroups=ipcGroups, ipcFailoverRecdSummaryStatistics=ipcFailoverRecdSummaryStatistics, ipcFailStatSentTestRequests=ipcFailStatSentTestRequests, ipcFailStatRecdDataTxAcks=ipcFailStatRecdDataTxAcks, incognitoIPCMDServerStop=incognitoIPCMDServerStop, ipcServiceOperatingSystem=ipcServiceOperatingSystem, incognitoIPCMDServerLeaveClusterIntegration=incognitoIPCMDServerLeaveClusterIntegration, ipcFailStatSentDataTransactionData=ipcFailStatSentDataTransactionData, ipcNotifications=ipcNotifications, ipcServiceStatistics=ipcServiceStatistics, ipcFailStatDecryptErrors=ipcFailStatDecryptErrors, ipcFailStatRoleMismatchErrors=ipcFailStatRoleMismatchErrors, draftServerMIB=draftServerMIB, ipcmdDHCPRuleID=ipcmdDHCPRuleID, ipcFailoverSummaryStatisticsGroup=ipcFailoverSummaryStatisticsGroup, ipcFailStatLastTestTime=ipcFailStatLastTestTime, incognitoIPCMDLDAPCommunicationsUp=incognitoIPCMDLDAPCommunicationsUp, ipcFailoverErrorSummaryStatistics=ipcFailoverErrorSummaryStatistics, ipcFailStatSentDataTxData=ipcFailStatSentDataTxData, ipcmdDHCPDuplicateDeviceHWAddress=ipcmdDHCPDuplicateDeviceHWAddress, ipcmdNotifyServerType=ipcmdNotifyServerType, ipcFailStatBytesSent=ipcFailStatBytesSent, ipcmdDHCPRogueServerAddress=ipcmdDHCPRogueServerAddress, ipcServiceLicenseUsers=ipcServiceLicenseUsers, ipcFailoverTrafficSummaryStatistics=ipcFailoverTrafficSummaryStatistics, ipcmdDHCPLicenseCount=ipcmdDHCPLicenseCount, incognitoIPC=incognitoIPC, ipcFailStatTotalResynch=ipcFailStatTotalResynch, ipcFailStatRecdHeartbeats=ipcFailStatRecdHeartbeats, ipcFailStatRecdDataTransactionData=ipcFailStatRecdDataTransactionData, ipcmdDHCPExceedingLicenseLimit=ipcmdDHCPExceedingLicenseLimit, ipcServiceLicenseType=ipcServiceLicenseType, ipcFailStatLongestTimeDown=ipcFailStatLongestTimeDown, ipcServiceStartTime=ipcServiceStartTime, ipcFailStatRecdDataTxRequests=ipcFailStatRecdDataTxRequests, ipcmdDHCPFailoverResynchEndTime=ipcmdDHCPFailoverResynchEndTime, ipcDeprecatedNotifyBaseObjectsGroup=ipcDeprecatedNotifyBaseObjectsGroup, ipcmdServerDiskSpaceFreeUnits=ipcmdServerDiskSpaceFreeUnits, ipcmdDHCPFreeAddressLowThreshold=ipcmdDHCPFreeAddressLowThreshold, ipcFailStatSentDataResynchRequests=ipcFailStatSentDataResynchRequests, ipcFailStatSentDataTxRequests=ipcFailStatSentDataTxRequests, ipcConformance=ipcConformance, incognitoIPCMDFailoverResynchOperationCompleted=incognitoIPCMDFailoverResynchOperationCompleted, ipcServiceInformation=ipcServiceInformation, ipcFailStatSentShuttingDown=ipcFailStatSentShuttingDown, ipcDHCPDiscoverPacketSupercedes=ipcDHCPDiscoverPacketSupercedes, ipcFailStatRecdDataConflicts=ipcFailStatRecdDataConflicts, incognitoIPCMDServiceCaughtUp=incognitoIPCMDServiceCaughtUp, ipcDeprecatedNotificationsGroup=ipcDeprecatedNotificationsGroup, ipcmdServerDiskSpaceFreeCount=ipcmdServerDiskSpaceFreeCount, todServerCompliances=todServerCompliances, ipcmdDHCPFailoverResynchStartTime=ipcmdDHCPFailoverResynchStartTime, ipcFailoverTimeDownSummaryStatistics=ipcFailoverTimeDownSummaryStatistics, ipcmdNotifyDevice=ipcmdNotifyDevice, incognitoIPCMDFailoverConflict=incognitoIPCMDFailoverConflict, incognitoIPCMDServerJoinClusterIntegration=incognitoIPCMDServerJoinClusterIntegration, ipcResumedTime=ipcResumedTime, ipcmdDHCPDuplicateDeviceRemoteID=ipcmdDHCPDuplicateDeviceRemoteID, ipcFailStatOperation=ipcFailStatOperation, incognitoNotifyNotifications=incognitoNotifyNotifications, todServerObjects=todServerObjects, ipcmdServiceStatus=ipcmdServiceStatus, ipcCompliances=ipcCompliances, ipcNotificationsGroup=ipcNotificationsGroup, ipcFailStatLongestResynch=ipcFailStatLongestResynch, ipcmdDHCPRogueServerInfo=ipcmdDHCPRogueServerInfo, ipcServiceStatisticsConformance=ipcServiceStatisticsConformance, ipcmdDHCPCurrentHWM=ipcmdDHCPCurrentHWM, ipcNotificationPrefix=ipcNotificationPrefix, ipcFailStatSentDataConflicts=ipcFailStatSentDataConflicts, ipcFailover=ipcFailover, ipcDHCPDeclinePacketDiscards=ipcDHCPDeclinePacketDiscards, ipcConfiguration=ipcConfiguration, ipcFailStatSentHeartbeats=ipcFailStatSentHeartbeats, ipcPausedTime=ipcPausedTime, ipcmdDHCPFreeAddressHighThreshold=ipcmdDHCPFreeAddressHighThreshold, ipcFailStatRecdDataTxData=ipcFailStatRecdDataTxData, ipcDeprecatedGroups=ipcDeprecatedGroups, todServerConformance=todServerConformance, ipcNotifyServerResumed=ipcNotifyServerResumed, ipcFailStatSentDataConflictAcks=ipcFailStatSentDataConflictAcks, ipcFailStatCountTimeUp=ipcFailStatCountTimeUp, ipcFailoverSummaryStatistics=ipcFailoverSummaryStatistics, ipcFailStatCountTimeDown=ipcFailStatCountTimeDown)
