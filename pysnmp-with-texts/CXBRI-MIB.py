#
# PySNMP MIB module CXBRI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXBRI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
cxBri, = mibBuilder.importSymbols("CXProduct-SMI", "cxBri")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, MibIdentifier, NotificationType, Integer32, ObjectIdentity, TimeTicks, Bits, Counter32, iso, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "MibIdentifier", "NotificationType", "Integer32", "ObjectIdentity", "TimeTicks", "Bits", "Counter32", "iso", "Unsigned32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
briTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10), )
if mibBuilder.loadTexts: briTable.setStatus('mandatory')
if mibBuilder.loadTexts: briTable.setDescription('A table containing test results of an ISDN U or S/T-Interface daughter card.')
briEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10, 1), ).setIndexNames((0, "CXBRI-MIB", "briSlotNumberIndex"))
if mibBuilder.loadTexts: briEntry.setStatus('mandatory')
if mibBuilder.loadTexts: briEntry.setDescription('The parameters for a specific ISDN U or S/T-Interface daughter card.')
briSlotNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briSlotNumberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: briSlotNumberIndex.setDescription('Indicates the row containing objects for monitoring an I/O card in the CX900 or CX950. Range of Values: 1-6 for CX900 (slot) 1-8 for CX950 (slot) Default Value: none')
briIoRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIoRegTest.setStatus('mandatory')
if mibBuilder.loadTexts: briIoRegTest.setDescription('Indicates the result of the ISDN U or S/T-interface I/O register test. Options: failed (1): register test failed passed (2): register test passed Default Value: passed (2)')
briIoLedsTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initializationFailed", 1), ("initializationPassed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIoLedsTest.setStatus('mandatory')
if mibBuilder.loadTexts: briIoLedsTest.setDescription('Indicates the result of the ISDN U or S/T-interface Integrated Multiprotocol Processor (IMP) LEDs test. Options: initializationFailed (1): IMP initialization failed initializationPassed (2): IMP initialization passed Default Value: initializationPassed')
briImpRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initializationFailed", 1), ("failed", 2), ("passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briImpRegTest.setStatus('mandatory')
if mibBuilder.loadTexts: briImpRegTest.setDescription('Indicates the result of the ISDN U or S/T-interface Integrated Multiprotocol Processor (IMP) register test. Options: initializationFailed (1): IMP initialization failed failed (2): IMP register test failed passed (3): IMP register test passed Default Value: passed (3)')
briImpComTestPollResult = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initializationFailed", 1), ("failed", 2), ("passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briImpComTestPollResult.setStatus('mandatory')
if mibBuilder.loadTexts: briImpComTestPollResult.setDescription('Indicates the result of the ISDN U or S/T-interface IMP internal communication test while in polling mode. Options: initializationFailed (1): IMP initialization failed failed (2): IMP communication test failed in polling mode passed (3): IMP communication test passed in polling mode Default Value: passed (3)')
briTxcvrRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initializationFailed", 1), ("failed", 2), ("passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briTxcvrRegTest.setStatus('mandatory')
if mibBuilder.loadTexts: briTxcvrRegTest.setDescription('Indicates the result of the ISDN U or S/T-interface transceiver register test. Options: initializationFailed (1): IMP initialization test failed failed (2): transceiver register test failed passed (3): transceiver register test passed Default Value: passed (3)')
briTxcvrComTestPollResult = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 4, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initializationFailed", 1), ("failed", 2), ("passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briTxcvrComTestPollResult.setStatus('mandatory')
if mibBuilder.loadTexts: briTxcvrComTestPollResult.setDescription('Indicates the result of the ISDN U or S/T-interface transceiver internal communication test while in polling mode. Options: initializationFailed (1): IMP initialization failed failed (2): transceiver communication test failed in polling mode passed (3): transceiver communication test passed in polling mode Default Value: passed (3)')
mibBuilder.exportSymbols("CXBRI-MIB", briSlotNumberIndex=briSlotNumberIndex, briEntry=briEntry, briTxcvrComTestPollResult=briTxcvrComTestPollResult, briTxcvrRegTest=briTxcvrRegTest, briImpComTestPollResult=briImpComTestPollResult, briImpRegTest=briImpRegTest, briIoRegTest=briIoRegTest, briTable=briTable, briIoLedsTest=briIoLedsTest)
