#
# PySNMP MIB module COM21-HCXTX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXTX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
com21, com21Traps, com21Hcx = mibBuilder.importSymbols("COM21-HCX-MIB", "com21", "com21Traps", "com21Hcx")
hcxEventLogTime, hcxAlmSeverity = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxEventLogTime", "hcxAlmSeverity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter32, Integer32, NotificationType, MibIdentifier, Bits, ModuleIdentity, Unsigned32, ObjectIdentity, TimeTicks, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Integer32", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "TimeTicks", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
com21HcxTx = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 20))
if mibBuilder.loadTexts: com21HcxTx.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxTx.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxTx.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxTx.setDescription('This is the Com21 ComController TX Unit Control MIB module. COM21 Part# 005-0025-00')
com21HcxDnstrmPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 21))
com21HcxDnstrmStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 22))
com21HcxDnstrmUnitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 23))
class Gain(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

hcxDownstreamShelfId = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDownstreamShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxDownstreamShelfId.setDescription(' contains the associated shelf id.')
hcxDownstreamSlotId = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDownstreamSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxDownstreamSlotId.setDescription(' contains downstream slot id.')
hcxDownstreamHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDownstreamHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hcxDownstreamHardwareVersion.setDescription(' contains the hardware version of the TX card. An empty string if card not present.')
hcxDownstreamBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDownstreamBootVersion.setStatus('current')
if mibBuilder.loadTexts: hcxDownstreamBootVersion.setDescription(' contains the version of the TX card boot ROM. An empty string if card not present.')
hcxDnstreamUnitPrimServState = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 5), PrimServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDnstreamUnitPrimServState.setStatus('current')
if mibBuilder.loadTexts: hcxDnstreamUnitPrimServState.setDescription(' contains primary service state of the Downstream Unit.')
hcxDnstrmUnitPrimStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 60)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDnstreamUnitPrimServState"))
if mibBuilder.loadTexts: hcxDnstrmUnitPrimStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxDnstrmUnitPrimStateChange.setDescription(' Generated whenever a the hcxDnstreamUnitPrimServState changes in value. This an event with no clear condition. Only severity is WARNING.')
hcxDnstreamUnitSecServState = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDnstreamUnitSecServState.setStatus('current')
if mibBuilder.loadTexts: hcxDnstreamUnitSecServState.setDescription(' contains a string defining the secondary service states of the Downstream Unit. The substrings supported by the Downstream Unit shall be: TEST - in test, as set by hcxDnUnitConfigState, STBY - standby, again set by hcxDnUnitConfigState, MT - maintenance, set by hcxDnUnitConfigState, FAULT - hardware failure, UNEQ - unequipped.')
hcxDnstrmUnitSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 61)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDnstreamUnitSecServState"))
if mibBuilder.loadTexts: hcxDnstrmUnitSecStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxDnstrmUnitSecStateChange.setDescription(' Generated whenever a the hcxDnstreamUnitSecServState changes in value. This an event with no clear condition. Only severity is WARNING.')
hcxDnUnitConfigState = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2000, 2001, 2002, 2003))).clone(namedValues=NamedValues(("offline", 2000), ("online", 2001), ("test", 2002), ("standby", 2003)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDnUnitConfigState.setStatus('current')
if mibBuilder.loadTexts: hcxDnUnitConfigState.setDescription(' The Downstream Unit State is an active-value. Note that because we have only one port per card then this state change is exactly the same as hcxDnstrmPortState. Note that initially standby will be the same state as offline. Later this will change when TX redundancy is supported. offline is default.')
hcxDnUnitRestartAction = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDnUnitRestartAction.setStatus('current')
if mibBuilder.loadTexts: hcxDnUnitRestartAction.setDescription(' The TX Unit Action is an active-value. The setting of this attibute to restart(2) causes the TX card to reset and download a new image.')
hcxDnDiagTestAction = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxDnDiagTestAction.setStatus('current')
if mibBuilder.loadTexts: hcxDnDiagTestAction.setDescription(' This attribute is used to invoke the internal TX diagnostic test. In order to activate this test, the card must be placed in the test state.')
hcxDnDiagTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 62)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDnDiagTestResult"))
if mibBuilder.loadTexts: hcxDnDiagTestComplete.setStatus('current')
if mibBuilder.loadTexts: hcxDnDiagTestComplete.setDescription(' This notification is generated whenever the TX internal diagnostic tests are completed. This an event with no clear condition. Only severity is WARNING.')
hcxDnDiagTestResult = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("failure", 3), ("invalidState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDnDiagTestResult.setStatus('current')
if mibBuilder.loadTexts: hcxDnDiagTestResult.setDescription(' This attribute contains the result of the last TX diagnostic test. Details TBD.')
hcxDnTestStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDnTestStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxDnTestStatusLed.setDescription(' The TX Test Status LED is a read-only attribute which describes the condition of the TX Test Status light emitting diode located on the RX board. A value of on(1) indicates that a service effecting test is in progress and that the LED is illuminated. off if card not present.')
hcxDnTestStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 63)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDnTestStatusLed"))
if mibBuilder.loadTexts: hcxDnTestStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxDnTestStatusLedChange.setDescription(' generated whenever there is a change in test LED status. This an event with no clear condition. Only severity is WARNING.')
hcxDnFaultStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDnFaultStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxDnFaultStatusLed.setDescription(' The RX Fault Status LED is a read-only attribute which describes the condition of the TX Fault Status light emitting diode located on the TX board. A value of on(1) indicates that an fault condition has been detected (for which a trap will have been issued) and the LED is illuminated. off if card not present.')
hcxDnFaultStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 64)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDnFaultStatusLed"))
if mibBuilder.loadTexts: hcxDnFaultStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxDnFaultStatusLedChange.setDescription(' generated whenever there is a change in the Fault LED status. This an event with no clear condition. Only severity is WARNING.')
hcxDnOperationFailure = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 65)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"))
if mibBuilder.loadTexts: hcxDnOperationFailure.setStatus('current')
if mibBuilder.loadTexts: hcxDnOperationFailure.setDescription(' This notification is generated by the CC whenever a TX card fails to respond correctly to a request. This failure could indicate either a resource problem or software failure. Note that if a TX card failures to respond completely to a CC request, then a hcxInsertChange trap shall be generated. This is an event with no clear condition. Only severity is WARNING.')
hcxDownstreamSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 23, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDownstreamSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hcxDownstreamSerialNumber.setDescription(' contains the serial number of the TX card. An empty string if card not present.')
hcxDownstreamPortId = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDownstreamPortId.setStatus('current')
if mibBuilder.loadTexts: hcxDownstreamPortId.setDescription(' contains downstream port id. Initially at least, only 1 supported.')
hcxXmitFrequency = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(88000, 800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxXmitFrequency.setStatus('current')
if mibBuilder.loadTexts: hcxXmitFrequency.setDescription(' Contains the transmit frequency of the RF port in KHz. If this value is changed AFTER the acquisition of ComPorts then a corresponding change to the stuXmitFrequency attribute shall be broadcast to all the acquired ComPorts. Minimum step size is 200. i.e. 200000hz. Default is 0.')
hcxXmitGain = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 21, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxXmitGain.setStatus('current')
if mibBuilder.loadTexts: hcxXmitGain.setDescription(' Transmit gain is used to specify the power level in the ComController transmitter. Default is 0.')
hcxSynthLockLossDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 68)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDownstreamPortId"))
if mibBuilder.loadTexts: hcxSynthLockLossDetected.setStatus('current')
if mibBuilder.loadTexts: hcxSynthLockLossDetected.setDescription('Default severity is MINOR.')
hcxSynthLockLossClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 69)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDownstreamPortId"))
if mibBuilder.loadTexts: hcxSynthLockLossClear.setStatus('current')
if mibBuilder.loadTexts: hcxSynthLockLossClear.setDescription('Severity is CLEARED.')
hcxLossOfFrameClkDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 70)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDownstreamPortId"))
if mibBuilder.loadTexts: hcxLossOfFrameClkDetected.setStatus('current')
if mibBuilder.loadTexts: hcxLossOfFrameClkDetected.setDescription('Default severity is MINOR.')
hcxLossOfFrameClkClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 71)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXTX-MIB", "hcxDownstreamShelfId"), ("COM21-HCXTX-MIB", "hcxDownstreamSlotId"), ("COM21-HCXTX-MIB", "hcxDownstreamPortId"))
if mibBuilder.loadTexts: hcxLossOfFrameClkClear.setStatus('current')
if mibBuilder.loadTexts: hcxLossOfFrameClkClear.setDescription('Severity is CLEARED.')
hcxStatsCurrMinTxCells = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 22, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsCurrMinTxCells.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinTxCells.setDescription(' Represents the number of cells transmitted in the current 15 minute period.')
hcxStatsCurrMinTxNullCells = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 22, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsCurrMinTxNullCells.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinTxNullCells.setDescription(' Represents the number of null cells transmitted in the current 15 minute period.')
hcxStatsPrevMinTxCells = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 22, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsPrevMinTxCells.setStatus('current')
if mibBuilder.loadTexts: hcxStatsPrevMinTxCells.setDescription(' Represents the number of cells transmitted in the previous 15 minute period.')
hcxStatsPrevMinTxNullCells = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 22, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsPrevMinTxNullCells.setStatus('current')
if mibBuilder.loadTexts: hcxStatsPrevMinTxNullCells.setDescription(' Represents the number of null cells transmitted in the previous 15 minute period.')
hcxDownstreamUtil = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 22, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDownstreamUtil.setStatus('current')
if mibBuilder.loadTexts: hcxDownstreamUtil.setDescription(' Represents the percentage of utilization on the downstream channel - the RF TX will stuff with null cells to match line rate. i.e. traffic cells/(traffic cells + null cells) * 100. This figure is updated every second.')
hcxStatsClearTxCurrStats = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 22, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStatsClearTxCurrStats.setStatus('current')
if mibBuilder.loadTexts: hcxStatsClearTxCurrStats.setDescription(' This attribute is used to clear current TX statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
mibBuilder.exportSymbols("COM21-HCXTX-MIB", hcxSynthLockLossClear=hcxSynthLockLossClear, hcxStatsPrevMinTxCells=hcxStatsPrevMinTxCells, hcxDownstreamShelfId=hcxDownstreamShelfId, hcxDnFaultStatusLed=hcxDnFaultStatusLed, hcxLossOfFrameClkDetected=hcxLossOfFrameClkDetected, hcxDnDiagTestComplete=hcxDnDiagTestComplete, com21HcxDnstrmStatsGroup=com21HcxDnstrmStatsGroup, hcxDnTestStatusLedChange=hcxDnTestStatusLedChange, hcxDnUnitRestartAction=hcxDnUnitRestartAction, hcxDnDiagTestAction=hcxDnDiagTestAction, com21HcxTx=com21HcxTx, hcxDnOperationFailure=hcxDnOperationFailure, Gain=Gain, hcxDnstreamUnitSecServState=hcxDnstreamUnitSecServState, hcxDownstreamPortId=hcxDownstreamPortId, hcxDownstreamSerialNumber=hcxDownstreamSerialNumber, hcxDnDiagTestResult=hcxDnDiagTestResult, hcxDnstrmUnitSecStateChange=hcxDnstrmUnitSecStateChange, hcxDnstreamUnitPrimServState=hcxDnstreamUnitPrimServState, hcxXmitFrequency=hcxXmitFrequency, hcxStatsCurrMinTxNullCells=hcxStatsCurrMinTxNullCells, hcxDnFaultStatusLedChange=hcxDnFaultStatusLedChange, hcxXmitGain=hcxXmitGain, hcxDnstrmUnitPrimStateChange=hcxDnstrmUnitPrimStateChange, hcxLossOfFrameClkClear=hcxLossOfFrameClkClear, PrimServiceState=PrimServiceState, hcxDownstreamBootVersion=hcxDownstreamBootVersion, PYSNMP_MODULE_ID=com21HcxTx, hcxStatsClearTxCurrStats=hcxStatsClearTxCurrStats, hcxStatsCurrMinTxCells=hcxStatsCurrMinTxCells, hcxDownstreamUtil=hcxDownstreamUtil, com21HcxDnstrmUnitGroup=com21HcxDnstrmUnitGroup, hcxSynthLockLossDetected=hcxSynthLockLossDetected, hcxDownstreamSlotId=hcxDownstreamSlotId, com21HcxDnstrmPortGroup=com21HcxDnstrmPortGroup, hcxStatsPrevMinTxNullCells=hcxStatsPrevMinTxNullCells, hcxDnUnitConfigState=hcxDnUnitConfigState, hcxDownstreamHardwareVersion=hcxDownstreamHardwareVersion, hcxDnTestStatusLed=hcxDnTestStatusLed)
