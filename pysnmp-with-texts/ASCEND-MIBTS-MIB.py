#
# PySNMP MIB module ASCEND-MIBTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, ModuleIdentity, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Gauge32, Counter32, MibIdentifier, Unsigned32, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "ModuleIdentity", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Gauge32", "Counter32", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibtermSrvProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 133))
mibtermSrvProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 133, 1), )
if mibBuilder.loadTexts: mibtermSrvProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibtermSrvProfileTable.setDescription('A list of mibtermSrvProfile profile entries.')
mibtermSrvProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1), ).setIndexNames((0, "ASCEND-MIBTS-MIB", "termSrvProfile-Index-o"))
if mibBuilder.loadTexts: mibtermSrvProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibtermSrvProfileEntry.setDescription('A mibtermSrvProfile entry containing objects that maps to the parameters of mibtermSrvProfile profile.')
termSrvProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 1), Integer32()).setLabel("termSrvProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: termSrvProfile_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_Index_o.setDescription('')
termSrvProfile_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_Enabled.setDescription('Terminal server availability flag. When set to no all terminal server functions are disabled.')
termSrvProfile_SecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("partial", 2), ("full", 3)))).setLabel("termSrvProfile-SecurityMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_SecurityMode.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_SecurityMode.setDescription('Indicates the type of terminal server security (if any).')
termSrvProfile_ModemConfiguration_V42_mnp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wontV42", 1), ("willV42", 2), ("mustV42", 3)))).setLabel("termSrvProfile-ModemConfiguration-V42-mnp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_V42_mnp.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_V42_mnp.setDescription('Describes the modem error correction mode. Error correction can be required, not used, or optional.')
termSrvProfile_ModemConfiguration_MaxBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("n-33600MaxBaud", 1), ("n-31200MaxBaud", 2), ("n-28800MaxBaud", 3), ("n-26400MaxBaud", 4), ("n-24000MaxBaud", 5), ("n-21600MaxBaud", 6), ("n-19200MaxBaud", 7), ("n-16800MaxBaud", 8), ("n-14400MaxBaud", 9), ("n-12000MaxBaud", 10), ("n-9600MaxBaud", 11), ("n-7200MaxBaud", 12), ("n-4800MaxBaud", 13), ("n-2400MaxBaud", 14)))).setLabel("termSrvProfile-ModemConfiguration-MaxBaudRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_MaxBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_MaxBaudRate.setDescription('Describes the maximum connection baud rate the modems should try.')
termSrvProfile_ModemConfiguration_ModemTransmitLevel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("level-13DbMdmTrnLevel", 11), ("level-14DbMdmTrnLevel", 12), ("level-15DbMdmTrnLevel", 13), ("level-16DbMdmTrnLevel", 14), ("level-17DbMdmTrnLevel", 15), ("level-18DbMdmTrnLevel", 16)))).setLabel("termSrvProfile-ModemConfiguration-ModemTransmitLevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_ModemTransmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_ModemTransmitLevel.setDescription('The transmit attenuate level the modems should try.')
termSrvProfile_ModemConfiguration_CellModeFirst = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-ModemConfiguration-CellModeFirst").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_CellModeFirst.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_CellModeFirst.setDescription('If yes, the modem attempts cellular connection first - then land connection. If no, land based is attempted first, then cellular.')
termSrvProfile_ModemConfiguration_CellLevel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("level-18DbCellLevel", 1), ("level-17DbCellLevel", 2), ("level-16DbCellLevel", 3), ("level-15DbCellLevel", 4), ("level-14DbCellLevel", 5), ("level-13DbCellLevel", 6), ("level-12DbCellLevel", 7), ("level-11DbCellLevel", 8), ("level-10DbCellLevel", 9)))).setLabel("termSrvProfile-ModemConfiguration-CellLevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_CellLevel.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_CellLevel.setDescription('The modem cellular communications transmit and receive level. Valid values are -10 db .. -18 db.')
termSrvProfile_ModemConfiguration_o7Even = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-ModemConfiguration-o7Even").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_o7Even.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_o7Even.setDescription('If set to yes, all incoming data has its parity bit cleared and all outgoing data is forced to 7 bits with even parity.')
termSrvProfile_ModemConfiguration_ModemMod = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("k56Modulation", 1), ("v34Modulation", 2), ("v90Modulation", 3), ("v92Modulation", 4)))).setLabel("termSrvProfile-ModemConfiguration-ModemMod").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_ModemMod.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_ModemMod.setDescription('The modulation protocol to be attempted by the modems.')
termSrvProfile_ModemConfiguration_oATAnswerString = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 11), DisplayString()).setLabel("termSrvProfile-ModemConfiguration-oATAnswerString").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_oATAnswerString.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_oATAnswerString.setDescription('Allows the user to enter any additional AT commands in the modem answer string.')
termSrvProfile_ModemConfiguration_ModemOnHoldTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("mohDisabled", 1), ("n-10SecMohTimeout", 2), ("n-20SecMohTimeout", 3), ("n-30SecMohTimeout", 4), ("n-40SecMohTimeout", 5), ("n-1MinMohTimeout", 6), ("n-2MinMohTimeout", 7), ("n-3MinMohTimeout", 8), ("n-4MinMohTimeout", 9), ("n-6MinMohTimeout", 10), ("n-8MinMohTimeout", 11), ("n-12MinMohTimeout", 12), ("n-16MinMohTimeout", 13), ("noLimitMohTimeout", 14), ("connProfileUseGlobal", 15)))).setLabel("termSrvProfile-ModemConfiguration-ModemOnHoldTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_ModemOnHoldTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_ModemOnHoldTimeout.setDescription('The allowable Modem-on-Hold timeout values.')
termSrvProfile_ModemConfiguration_QuickConnectEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-ModemConfiguration-QuickConnectEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_QuickConnectEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_QuickConnectEnabled.setDescription('If set to yes, Quick-Connect will be enabled.')
termSrvProfile_ModemConfiguration_MaxV92ReceiveBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("n-48000MaxV92Baud", 1), ("n-46667MaxV92Baud", 2), ("n-45333MaxV92Baud", 3), ("n-44000MaxV92Baud", 4), ("n-42667MaxV92Baud", 5), ("n-41333MaxV92Baud", 6), ("n-40000MaxV92Baud", 7), ("n-38667MaxV92Baud", 8), ("n-37333MaxV92Baud", 9), ("n-36000MaxV92Baud", 10), ("n-34667MaxV92Baud", 11), ("n-33333MaxV92Baud", 12), ("n-32000MaxV92Baud", 13), ("n-30667MaxV92Baud", 14), ("n-29333MaxV92Baud", 15), ("n-28000MaxV92Baud", 16), ("n-26667MaxV92Baud", 17), ("n-25333MaxV92Baud", 18), ("n-24000MaxV92Baud", 19)))).setLabel("termSrvProfile-ModemConfiguration-MaxV92ReceiveBaudRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_MaxV92ReceiveBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_MaxV92ReceiveBaudRate.setDescription('The maximum V.92 receive baud rate to be attempted by the modems.')
termSrvProfile_ModemConfiguration_V44Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-ModemConfiguration-V44Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_V44Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ModemConfiguration_V44Enabled.setDescription('If set to yes, allow V.44 compression to be negotiated')
termSrvProfile_TerminalModeConfiguration_SilentMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-SilentMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_SilentMode.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_SilentMode.setDescription("Don't generate any status messages upon connection.")
termSrvProfile_TerminalModeConfiguration_ClearScreen = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-ClearScreen").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_ClearScreen.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_ClearScreen.setDescription('Clear the screen at terminal server startup.')
termSrvProfile_TerminalModeConfiguration_SystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 14), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-SystemPassword").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_SystemPassword.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_SystemPassword.setDescription('Global terminal server system access password.')
termSrvProfile_TerminalModeConfiguration_Banner = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 15), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-Banner").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Banner.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Banner.setDescription('The terminal server login banner.')
termSrvProfile_TerminalModeConfiguration_LoginPrompt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 16), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-LoginPrompt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_LoginPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_LoginPrompt.setDescription('The string used to prompt for user name when authentication is in use.')
termSrvProfile_TerminalModeConfiguration_PasswordPrompt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 17), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-PasswordPrompt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_PasswordPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_PasswordPrompt.setDescription('The string used to prompt for password when authentication is in use.')
termSrvProfile_TerminalModeConfiguration_ThirdLoginPrompt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 18), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-ThirdLoginPrompt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_ThirdLoginPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_ThirdLoginPrompt.setDescription('An optional third prompt for a terminal server login. If this value is null no third prompt is used.')
termSrvProfile_TerminalModeConfiguration_ThirdPromptSequence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("last", 1), ("first", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-ThirdPromptSequence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_ThirdPromptSequence.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_ThirdPromptSequence.setDescription('Select where the third prompt should appear in the login sequence: either before or after user name & password.')
termSrvProfile_TerminalModeConfiguration_Prompt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 20), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-Prompt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Prompt.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Prompt.setDescription('The current terminal server prompt.')
termSrvProfile_TerminalModeConfiguration_TerminalType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 21), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-TerminalType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TerminalType.setDescription('The default terminal type for telnet and rlogin sessions.')
termSrvProfile_TerminalModeConfiguration_ClearCall = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-ClearCall").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_ClearCall.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_ClearCall.setDescription('Select operation when a telnet/rlogin/tcp session terminates. When set to yes, the dial-in session will also terminate.')
termSrvProfile_TerminalModeConfiguration_BufferChars = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-BufferChars").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_BufferChars.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_BufferChars.setDescription('Whether to buffer termserv characters or to forward them without buffering. Buffering provides better throughput at a slight increase in latency.')
termSrvProfile_TerminalModeConfiguration_Ping = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-Ping").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Ping.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Ping.setDescription('Enable/disable the ping command from the terminal server.')
termSrvProfile_TerminalModeConfiguration_Traceroute = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-Traceroute").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Traceroute.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Traceroute.setDescription('Enable/disable the traceroute command from the terminal server.')
termSrvProfile_TerminalModeConfiguration_Tcp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-Tcp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Tcp.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_Tcp.setDescription('Enable/disable the tcp command from the terminal server.')
termSrvProfile_TerminalModeConfiguration_TsAraEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-TsAraEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TsAraEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TsAraEnabled.setDescription('TRUE if terminal server users are allowed to intiate async ARA sessions.')
termSrvProfile_TerminalModeConfiguration_RloginOptions_Rlogin = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-RloginOptions-Rlogin").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_RloginOptions_Rlogin.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_RloginOptions_Rlogin.setDescription('Enable/disable the rlogin command from the terminal server.')
termSrvProfile_TerminalModeConfiguration_RloginOptions_MaxSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 29), Integer32()).setLabel("termSrvProfile-TerminalModeConfiguration-RloginOptions-MaxSourcePort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_RloginOptions_MaxSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_RloginOptions_MaxSourcePort.setDescription("A highest limit of the port number used by rlogin. For BSD's rlogin, the client source port range is 512 to 1023.")
termSrvProfile_TerminalModeConfiguration_RloginOptions_MinSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 30), Integer32()).setLabel("termSrvProfile-TerminalModeConfiguration-RloginOptions-MinSourcePort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_RloginOptions_MinSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_RloginOptions_MinSourcePort.setDescription("A lowest limit of the port number used by rlogin. For BSD's rlogin, the client source port range is 512 to 1023.")
termSrvProfile_TerminalModeConfiguration_TelnetOptions_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-TelnetOptions-Telnet").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_Telnet.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_Telnet.setDescription('Enable/disable the use of the telnet terminal server command.')
termSrvProfile_TerminalModeConfiguration_TelnetOptions_TelnetMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2), ("transparent", 3)))).setLabel("termSrvProfile-TerminalModeConfiguration-TelnetOptions-TelnetMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_TelnetMode.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_TelnetMode.setDescription('Selects default Telnet mode: ASCII, Binary, or Transparent.')
termSrvProfile_TerminalModeConfiguration_TelnetOptions_AutoTelnet = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-TelnetOptions-AutoTelnet").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_AutoTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_AutoTelnet.setDescription("If set to 'yes' unknown terminal server commands will be treated as the name of a host to telnet to.")
termSrvProfile_TerminalModeConfiguration_TelnetOptions_LocalEcho = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-TelnetOptions-LocalEcho").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_LocalEcho.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_LocalEcho.setDescription('Defines the default echo mode for telnet sessions. The default mode can be overridded on the command line.')
termSrvProfile_TerminalModeConfiguration_TelnetOptions_Security = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnetSecurityNone", 1), ("telnetSecurityGlobal", 2), ("telnetSecurityProfile", 3), ("telnetSecurityAuthSetting", 4)))).setLabel("termSrvProfile-TerminalModeConfiguration-TelnetOptions-Security").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_Security.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_TelnetOptions_Security.setDescription('Level of security used to authenticate telnet sessions.')
termSrvProfile_TerminalModeConfiguration_IpAddMsg = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 36), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-IpAddMsg").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_IpAddMsg.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_IpAddMsg.setDescription('This is a text field that will be printed in front of the IP address in the terminal server when going into PPP.')
termSrvProfile_TerminalModeConfiguration_PromptFormat = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-TerminalModeConfiguration-PromptFormat").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_PromptFormat.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_PromptFormat.setDescription('TRUE if the terminal server prompt should interpret \\\\n.')
termSrvProfile_TerminalModeConfiguration_IpNetmaskMsg = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 38), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-IpNetmaskMsg").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_IpNetmaskMsg.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_IpNetmaskMsg.setDescription('This is a text field that will be printed in front of the IP Netmask in the terminal server when going into SLIP.')
termSrvProfile_TerminalModeConfiguration_IpGwAddMsg = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 39), DisplayString()).setLabel("termSrvProfile-TerminalModeConfiguration-IpGwAddMsg").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_IpGwAddMsg.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_IpGwAddMsg.setDescription('This is a text field that will be printed in front of the IP Gateway address in the terminal server when going into SLIP.')
termSrvProfile_TerminalModeConfiguration_LoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 40), Integer32()).setLabel("termSrvProfile-TerminalModeConfiguration-LoginTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_LoginTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_LoginTimeout.setDescription('The number of seconds to wait at the login prompt for the user to login. A value of 0 disables the timeout.')
termSrvProfile_TerminalModeConfiguration_PacketizeWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 41), Integer32()).setLabel("termSrvProfile-TerminalModeConfiguration-PacketizeWaitTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_PacketizeWaitTime.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_PacketizeWaitTime.setDescription('The number of milliseconds to accumulate modem data in a packet.')
termSrvProfile_TerminalModeConfiguration_PacketizeChars = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 42), Integer32()).setLabel("termSrvProfile-TerminalModeConfiguration-PacketizeChars").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_PacketizeChars.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_TerminalModeConfiguration_PacketizeChars.setDescription('The number of characters to accumulate modem data in a packet.')
termSrvProfile_ImmediateModeOptions_Service = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("telnet", 2), ("rawTcp", 3), ("rlogin", 4), ("x25Pad", 5), ("x25T3pos", 6)))).setLabel("termSrvProfile-ImmediateModeOptions-Service").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ImmediateModeOptions_Service.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ImmediateModeOptions_Service.setDescription('enable/disable immediate mode and specify the service type. Immediate mode is where a user is automatically connected to a remote host using the specified service.')
termSrvProfile_ImmediateModeOptions_TelnetHostAuth = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-ImmediateModeOptions-TelnetHostAuth").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ImmediateModeOptions_TelnetHostAuth.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ImmediateModeOptions_TelnetHostAuth.setDescription('Option defines if telnet is started directly bypassing the local authentication process. When enabled, authentication is the responsibility of the telnet host.')
termSrvProfile_ImmediateModeOptions_Host = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 45), DisplayString()).setLabel("termSrvProfile-ImmediateModeOptions-Host").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ImmediateModeOptions_Host.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ImmediateModeOptions_Host.setDescription('Name or IP address or X.121 address of the immediate TELNET, TCP, or X.25/Pad host to connect to.')
termSrvProfile_ImmediateModeOptions_Port = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 46), Integer32()).setLabel("termSrvProfile-ImmediateModeOptions-Port").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_ImmediateModeOptions_Port.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_ImmediateModeOptions_Port.setDescription('TCP port to which the TELNET or TCP stream is to be redirected to.')
termSrvProfile_MenuModeOptions_StartWithMenus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-MenuModeOptions-StartWithMenus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_StartWithMenus.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_StartWithMenus.setDescription("Terminal server interface will start in menu mode when this field is 'yes'.")
termSrvProfile_MenuModeOptions_ToggleScreen = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-MenuModeOptions-ToggleScreen").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_ToggleScreen.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_ToggleScreen.setDescription('When enabled, users are able to toggle between menu mode and the normal terminal server command line.')
termSrvProfile_MenuModeOptions_RemoteConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-MenuModeOptions-RemoteConfiguration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_RemoteConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_RemoteConfiguration.setDescription('When enabled, the text and host addresses that make up the menu will be retrieved from RADIUS (if RADIUS is enabled).')
termSrvProfile_MenuModeOptions_Text1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 50), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-Text1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Text1.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Text1.setDescription("The text to put in the terminal server menu for the first login host when remote configuration isn't available.")
termSrvProfile_MenuModeOptions_Host1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 51), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-Host1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Host1.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Host1.setDescription('The address of the first host to access when terminal server menu mode is being used without remote configuration.')
termSrvProfile_MenuModeOptions_Service1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnet", 1), ("rlogin", 2), ("ppp", 3), ("rawtcp", 4)))).setLabel("termSrvProfile-MenuModeOptions-Service1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Service1.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Service1.setDescription('Type of service required for this selection.')
termSrvProfile_MenuModeOptions_Port1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 53), Integer32()).setLabel("termSrvProfile-MenuModeOptions-Port1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Port1.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Port1.setDescription('The port for contacting host. Used only for telnet service.')
termSrvProfile_MenuModeOptions_User1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 54), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-User1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_User1.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_User1.setDescription('The user name for this selection. Used only for rlogin service.')
termSrvProfile_MenuModeOptions_Text2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 55), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-Text2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Text2.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Text2.setDescription("The text to put in the terminal server menu for the second login host when remote configuration isn't available.")
termSrvProfile_MenuModeOptions_Host2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 56), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-Host2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Host2.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Host2.setDescription('The address of the second host to access when terminal server menu mode is being used without remote configuration.')
termSrvProfile_MenuModeOptions_Service2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnet", 1), ("rlogin", 2), ("ppp", 3), ("rawtcp", 4)))).setLabel("termSrvProfile-MenuModeOptions-Service2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Service2.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Service2.setDescription('Type of service required for this selection.')
termSrvProfile_MenuModeOptions_Port2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 58), Integer32()).setLabel("termSrvProfile-MenuModeOptions-Port2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Port2.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Port2.setDescription('The port for contacting host. Used only for telnet service.')
termSrvProfile_MenuModeOptions_User2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 59), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-User2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_User2.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_User2.setDescription('The user name for this selection. Used only for rlogin service.')
termSrvProfile_MenuModeOptions_Text3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 60), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-Text3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Text3.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Text3.setDescription("The text to put in the terminal server menu for the third login host when remote configuration isn't available.")
termSrvProfile_MenuModeOptions_Host3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 61), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-Host3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Host3.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Host3.setDescription('The address of the third host to access when terminal server menu mode is being used without remote configuration.')
termSrvProfile_MenuModeOptions_Service3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnet", 1), ("rlogin", 2), ("ppp", 3), ("rawtcp", 4)))).setLabel("termSrvProfile-MenuModeOptions-Service3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Service3.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Service3.setDescription('Type of service required for this selection.')
termSrvProfile_MenuModeOptions_Port3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 63), Integer32()).setLabel("termSrvProfile-MenuModeOptions-Port3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Port3.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Port3.setDescription('The port for contacting host. Used only for telnet service.')
termSrvProfile_MenuModeOptions_User3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 64), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-User3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_User3.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_User3.setDescription('The user name for this selection. Used only for rlogin service.')
termSrvProfile_MenuModeOptions_Text4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 65), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-Text4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Text4.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Text4.setDescription("The text to put in the terminal server menu for the forth login host when remote configuration isn't available.")
termSrvProfile_MenuModeOptions_Host4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 66), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-Host4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Host4.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Host4.setDescription('The address of the forth host to access when terminal server menu mode is being used without remote configuration.')
termSrvProfile_MenuModeOptions_Service4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnet", 1), ("rlogin", 2), ("ppp", 3), ("rawtcp", 4)))).setLabel("termSrvProfile-MenuModeOptions-Service4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Service4.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Service4.setDescription('Type of service required for this selection.')
termSrvProfile_MenuModeOptions_Port4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 68), Integer32()).setLabel("termSrvProfile-MenuModeOptions-Port4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Port4.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_Port4.setDescription('The port for contacting host. Used only for telnet service.')
termSrvProfile_MenuModeOptions_User4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 69), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-User4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_User4.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_User4.setDescription('The user name for this selection. Used only for rlogin service.')
termSrvProfile_MenuModeOptions_MenuSelectionString = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 70), DisplayString()).setLabel("termSrvProfile-MenuModeOptions-MenuSelectionString").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_MenuSelectionString.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_MenuModeOptions_MenuSelectionString.setDescription('The selection string for the menu mode.')
termSrvProfile_PppModeConfiguration_Ppp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-PppModeConfiguration-Ppp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_PppModeConfiguration_Ppp.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_PppModeConfiguration_Ppp.setDescription('Enable/disable the PPP terminal server command.')
termSrvProfile_PppModeConfiguration_Delay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 72), Integer32()).setLabel("termSrvProfile-PppModeConfiguration-Delay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_PppModeConfiguration_Delay.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_PppModeConfiguration_Delay.setDescription('The number of seconds to wait for PPP before putting up the login banner and converting to telnet mode.')
termSrvProfile_PppModeConfiguration_Direct = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-PppModeConfiguration-Direct").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_PppModeConfiguration_Direct.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_PppModeConfiguration_Direct.setDescription("Option defines if PPP negotiation is started directly after 'PPP' Term Server command is received or, not. When disabled, we wait to receive a PPP packet before sending.")
termSrvProfile_PppModeConfiguration_Info = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("modePpp", 2), ("sessionPpp", 3)))).setLabel("termSrvProfile-PppModeConfiguration-Info").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_PppModeConfiguration_Info.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_PppModeConfiguration_Info.setDescription('Enable/Disable the PPP/SLIP start up message.')
termSrvProfile_SlipModeConfiguration_Slip = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-SlipModeConfiguration-Slip").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_SlipModeConfiguration_Slip.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_SlipModeConfiguration_Slip.setDescription('Enable/disable the SLIP command from the terminal server.')
termSrvProfile_SlipModeConfiguration_SlipBootp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-SlipModeConfiguration-SlipBootp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_SlipModeConfiguration_SlipBootp.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_SlipModeConfiguration_SlipBootp.setDescription('Enable/disable the SLIP command from the terminal server.')
termSrvProfile_SlipModeConfiguration_Info = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basicSlip", 1), ("advancedSlip", 2)))).setLabel("termSrvProfile-SlipModeConfiguration-Info").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_SlipModeConfiguration_Info.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_SlipModeConfiguration_Info.setDescription('Level of information displayed in SLIP start up message.')
termSrvProfile_SlipModeConfiguration_CslipAutoDetect = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-SlipModeConfiguration-CslipAutoDetect").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_SlipModeConfiguration_CslipAutoDetect.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_SlipModeConfiguration_CslipAutoDetect.setDescription('Enable/disbale auto detecting of SLIP header compression. This feature will try to auto-detect if the caller is using Van Jacobson header compression, and if so, the box will automatically switch to CSLIP mode.')
termSrvProfile_DialoutConfiguration_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-DialoutConfiguration-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_Enabled.setDescription('Allow/disallow modem outdial from the terminal server.')
termSrvProfile_DialoutConfiguration_DirectAccess = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("termSrvProfile-DialoutConfiguration-DirectAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_DirectAccess.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_DirectAccess.setDescription('Allows direct connection to a modem by TELNETing to a configurable modem port.')
termSrvProfile_DialoutConfiguration_PortForDirectAccess = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 81), Integer32()).setLabel("termSrvProfile-DialoutConfiguration-PortForDirectAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_PortForDirectAccess.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_PortForDirectAccess.setDescription('The telnet port number for direct access to a modem.')
termSrvProfile_DialoutConfiguration_PasswordForDirectAccess = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 82), DisplayString()).setLabel("termSrvProfile-DialoutConfiguration-PasswordForDirectAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_PasswordForDirectAccess.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_PasswordForDirectAccess.setDescription('The password that must be used to gain direct access to a modem')
termSrvProfile_DialoutConfiguration_SecurityForDirectAccess = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("global", 2), ("user", 3)))).setLabel("termSrvProfile-DialoutConfiguration-SecurityForDirectAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_SecurityForDirectAccess.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_DialoutConfiguration_SecurityForDirectAccess.setDescription('The security method used to control direct modem access.')
termSrvProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 133, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("termSrvProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: termSrvProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: termSrvProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBTS-MIB", termSrvProfile_MenuModeOptions_Host4=termSrvProfile_MenuModeOptions_Host4, termSrvProfile_MenuModeOptions_Service3=termSrvProfile_MenuModeOptions_Service3, termSrvProfile_ModemConfiguration_CellModeFirst=termSrvProfile_ModemConfiguration_CellModeFirst, termSrvProfile_MenuModeOptions_User3=termSrvProfile_MenuModeOptions_User3, termSrvProfile_TerminalModeConfiguration_PacketizeWaitTime=termSrvProfile_TerminalModeConfiguration_PacketizeWaitTime, termSrvProfile_ModemConfiguration_V42_mnp=termSrvProfile_ModemConfiguration_V42_mnp, termSrvProfile_ModemConfiguration_ModemOnHoldTimeout=termSrvProfile_ModemConfiguration_ModemOnHoldTimeout, termSrvProfile_MenuModeOptions_Port4=termSrvProfile_MenuModeOptions_Port4, termSrvProfile_TerminalModeConfiguration_Banner=termSrvProfile_TerminalModeConfiguration_Banner, termSrvProfile_SlipModeConfiguration_CslipAutoDetect=termSrvProfile_SlipModeConfiguration_CslipAutoDetect, termSrvProfile_SlipModeConfiguration_Slip=termSrvProfile_SlipModeConfiguration_Slip, termSrvProfile_ModemConfiguration_oATAnswerString=termSrvProfile_ModemConfiguration_oATAnswerString, termSrvProfile_TerminalModeConfiguration_PromptFormat=termSrvProfile_TerminalModeConfiguration_PromptFormat, termSrvProfile_TerminalModeConfiguration_TelnetOptions_AutoTelnet=termSrvProfile_TerminalModeConfiguration_TelnetOptions_AutoTelnet, termSrvProfile_TerminalModeConfiguration_Ping=termSrvProfile_TerminalModeConfiguration_Ping, termSrvProfile_TerminalModeConfiguration_TelnetOptions_TelnetMode=termSrvProfile_TerminalModeConfiguration_TelnetOptions_TelnetMode, mibtermSrvProfileTable=mibtermSrvProfileTable, termSrvProfile_MenuModeOptions_RemoteConfiguration=termSrvProfile_MenuModeOptions_RemoteConfiguration, termSrvProfile_MenuModeOptions_Host3=termSrvProfile_MenuModeOptions_Host3, termSrvProfile_TerminalModeConfiguration_TsAraEnabled=termSrvProfile_TerminalModeConfiguration_TsAraEnabled, termSrvProfile_ModemConfiguration_QuickConnectEnabled=termSrvProfile_ModemConfiguration_QuickConnectEnabled, termSrvProfile_MenuModeOptions_Host2=termSrvProfile_MenuModeOptions_Host2, termSrvProfile_MenuModeOptions_Host1=termSrvProfile_MenuModeOptions_Host1, termSrvProfile_TerminalModeConfiguration_IpAddMsg=termSrvProfile_TerminalModeConfiguration_IpAddMsg, termSrvProfile_TerminalModeConfiguration_SilentMode=termSrvProfile_TerminalModeConfiguration_SilentMode, termSrvProfile_PppModeConfiguration_Ppp=termSrvProfile_PppModeConfiguration_Ppp, termSrvProfile_TerminalModeConfiguration_LoginPrompt=termSrvProfile_TerminalModeConfiguration_LoginPrompt, termSrvProfile_TerminalModeConfiguration_PasswordPrompt=termSrvProfile_TerminalModeConfiguration_PasswordPrompt, termSrvProfile_ImmediateModeOptions_Port=termSrvProfile_ImmediateModeOptions_Port, termSrvProfile_ImmediateModeOptions_Service=termSrvProfile_ImmediateModeOptions_Service, termSrvProfile_TerminalModeConfiguration_RloginOptions_MinSourcePort=termSrvProfile_TerminalModeConfiguration_RloginOptions_MinSourcePort, termSrvProfile_ModemConfiguration_V44Enabled=termSrvProfile_ModemConfiguration_V44Enabled, termSrvProfile_TerminalModeConfiguration_Prompt=termSrvProfile_TerminalModeConfiguration_Prompt, termSrvProfile_MenuModeOptions_Port1=termSrvProfile_MenuModeOptions_Port1, termSrvProfile_TerminalModeConfiguration_LoginTimeout=termSrvProfile_TerminalModeConfiguration_LoginTimeout, termSrvProfile_ImmediateModeOptions_Host=termSrvProfile_ImmediateModeOptions_Host, termSrvProfile_TerminalModeConfiguration_Traceroute=termSrvProfile_TerminalModeConfiguration_Traceroute, termSrvProfile_SecurityMode=termSrvProfile_SecurityMode, mibtermSrvProfileEntry=mibtermSrvProfileEntry, termSrvProfile_MenuModeOptions_Text1=termSrvProfile_MenuModeOptions_Text1, mibtermSrvProfile=mibtermSrvProfile, termSrvProfile_SlipModeConfiguration_SlipBootp=termSrvProfile_SlipModeConfiguration_SlipBootp, termSrvProfile_MenuModeOptions_Port2=termSrvProfile_MenuModeOptions_Port2, termSrvProfile_MenuModeOptions_User2=termSrvProfile_MenuModeOptions_User2, termSrvProfile_TerminalModeConfiguration_TelnetOptions_Security=termSrvProfile_TerminalModeConfiguration_TelnetOptions_Security, termSrvProfile_ModemConfiguration_ModemMod=termSrvProfile_ModemConfiguration_ModemMod, termSrvProfile_ModemConfiguration_MaxBaudRate=termSrvProfile_ModemConfiguration_MaxBaudRate, termSrvProfile_SlipModeConfiguration_Info=termSrvProfile_SlipModeConfiguration_Info, termSrvProfile_MenuModeOptions_Text3=termSrvProfile_MenuModeOptions_Text3, termSrvProfile_ModemConfiguration_MaxV92ReceiveBaudRate=termSrvProfile_ModemConfiguration_MaxV92ReceiveBaudRate, termSrvProfile_DialoutConfiguration_PortForDirectAccess=termSrvProfile_DialoutConfiguration_PortForDirectAccess, termSrvProfile_TerminalModeConfiguration_ThirdLoginPrompt=termSrvProfile_TerminalModeConfiguration_ThirdLoginPrompt, termSrvProfile_TerminalModeConfiguration_ClearScreen=termSrvProfile_TerminalModeConfiguration_ClearScreen, termSrvProfile_TerminalModeConfiguration_TelnetOptions_Telnet=termSrvProfile_TerminalModeConfiguration_TelnetOptions_Telnet, termSrvProfile_PppModeConfiguration_Info=termSrvProfile_PppModeConfiguration_Info, termSrvProfile_TerminalModeConfiguration_SystemPassword=termSrvProfile_TerminalModeConfiguration_SystemPassword, termSrvProfile_TerminalModeConfiguration_IpGwAddMsg=termSrvProfile_TerminalModeConfiguration_IpGwAddMsg, termSrvProfile_TerminalModeConfiguration_IpNetmaskMsg=termSrvProfile_TerminalModeConfiguration_IpNetmaskMsg, DisplayString=DisplayString, termSrvProfile_TerminalModeConfiguration_ThirdPromptSequence=termSrvProfile_TerminalModeConfiguration_ThirdPromptSequence, termSrvProfile_DialoutConfiguration_Enabled=termSrvProfile_DialoutConfiguration_Enabled, termSrvProfile_PppModeConfiguration_Delay=termSrvProfile_PppModeConfiguration_Delay, termSrvProfile_MenuModeOptions_MenuSelectionString=termSrvProfile_MenuModeOptions_MenuSelectionString, termSrvProfile_MenuModeOptions_ToggleScreen=termSrvProfile_MenuModeOptions_ToggleScreen, termSrvProfile_ModemConfiguration_ModemTransmitLevel=termSrvProfile_ModemConfiguration_ModemTransmitLevel, termSrvProfile_MenuModeOptions_Text2=termSrvProfile_MenuModeOptions_Text2, termSrvProfile_TerminalModeConfiguration_TelnetOptions_LocalEcho=termSrvProfile_TerminalModeConfiguration_TelnetOptions_LocalEcho, termSrvProfile_ModemConfiguration_o7Even=termSrvProfile_ModemConfiguration_o7Even, termSrvProfile_PppModeConfiguration_Direct=termSrvProfile_PppModeConfiguration_Direct, termSrvProfile_TerminalModeConfiguration_ClearCall=termSrvProfile_TerminalModeConfiguration_ClearCall, termSrvProfile_TerminalModeConfiguration_Tcp=termSrvProfile_TerminalModeConfiguration_Tcp, termSrvProfile_DialoutConfiguration_PasswordForDirectAccess=termSrvProfile_DialoutConfiguration_PasswordForDirectAccess, termSrvProfile_TerminalModeConfiguration_PacketizeChars=termSrvProfile_TerminalModeConfiguration_PacketizeChars, termSrvProfile_MenuModeOptions_Port3=termSrvProfile_MenuModeOptions_Port3, termSrvProfile_TerminalModeConfiguration_RloginOptions_Rlogin=termSrvProfile_TerminalModeConfiguration_RloginOptions_Rlogin, termSrvProfile_MenuModeOptions_StartWithMenus=termSrvProfile_MenuModeOptions_StartWithMenus, termSrvProfile_TerminalModeConfiguration_TerminalType=termSrvProfile_TerminalModeConfiguration_TerminalType, termSrvProfile_ModemConfiguration_CellLevel=termSrvProfile_ModemConfiguration_CellLevel, termSrvProfile_Enabled=termSrvProfile_Enabled, termSrvProfile_MenuModeOptions_User4=termSrvProfile_MenuModeOptions_User4, termSrvProfile_MenuModeOptions_Service2=termSrvProfile_MenuModeOptions_Service2, termSrvProfile_MenuModeOptions_Service1=termSrvProfile_MenuModeOptions_Service1, termSrvProfile_MenuModeOptions_Service4=termSrvProfile_MenuModeOptions_Service4, termSrvProfile_ImmediateModeOptions_TelnetHostAuth=termSrvProfile_ImmediateModeOptions_TelnetHostAuth, termSrvProfile_Action_o=termSrvProfile_Action_o, termSrvProfile_DialoutConfiguration_DirectAccess=termSrvProfile_DialoutConfiguration_DirectAccess, termSrvProfile_TerminalModeConfiguration_BufferChars=termSrvProfile_TerminalModeConfiguration_BufferChars, termSrvProfile_DialoutConfiguration_SecurityForDirectAccess=termSrvProfile_DialoutConfiguration_SecurityForDirectAccess, termSrvProfile_TerminalModeConfiguration_RloginOptions_MaxSourcePort=termSrvProfile_TerminalModeConfiguration_RloginOptions_MaxSourcePort, termSrvProfile_Index_o=termSrvProfile_Index_o, termSrvProfile_MenuModeOptions_User1=termSrvProfile_MenuModeOptions_User1, termSrvProfile_MenuModeOptions_Text4=termSrvProfile_MenuModeOptions_Text4)
