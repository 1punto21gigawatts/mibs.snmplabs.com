#
# PySNMP MIB module AIRESPACE-SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIRESPACE-SWITCHING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
airespace, = mibBuilder.importSymbols("AIRESPACE-REF-MIB", "airespace")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
dot1qVlanIndex, dot1qFdbId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "dot1qFdbId")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Gauge32, IpAddress, Counter32, NotificationType, MibIdentifier, ObjectIdentity, Bits, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Gauge32", "IpAddress", "Counter32", "NotificationType", "MibIdentifier", "ObjectIdentity", "Bits", "Integer32", "iso")
DisplayString, TextualConvention, MacAddress, PhysAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "PhysAddress", "TruthValue", "RowStatus")
bsnSwitching = ModuleIdentity((1, 3, 6, 1, 4, 1, 14179, 1))
bsnSwitching.setRevisions(('2006-04-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bsnSwitching.setRevisionsDescriptions(('Updated MIB with description and format',))
if mibBuilder.loadTexts: bsnSwitching.setLastUpdated('200604100000Z')
if mibBuilder.loadTexts: bsnSwitching.setOrganization('Airespace, Inc.')
if mibBuilder.loadTexts: bsnSwitching.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: bsnSwitching.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. This MIB provides configuration, statistics and status information about the controller. This includes controller statistics and provides information such as Inventory, Trap logs, memory and CPU. This MIB also provides configuration of CLI, SNMP, LAG, DHCP, Spanning Tree, etc. The relationship between controller and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends it to the controller to which it is logically connected. Basic Service Set Identifier (BSSID) The identifier for the service set comprising of all the 802.11 stations under the control of one coordinating Access Point. This identifier happens to be the MAC address of the dot11 radio interface of the Access Point. The wireless clients that associate with the Access Point get the wired uplink through this particular dot11 interface. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Station Management (SMT) This term refers to the internal management of the 802.11 protocol operations by the AP to work cooperatively with the other APs and 802.11 devices in the network. REFERENCE [1] Part 11 Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol. ")
agentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1))
agentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2))
agentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 3))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 4))
switchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 50))
bsnSwitchingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 51))
bsnSwitchingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 52))
agentInventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1))
agentInventorySysDescription = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySysDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventorySysDescription.setDescription("The switch's Inventory system description.")
agentInventoryMachineType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineType.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineType.setDescription('Type of the Machine used in the Switch.')
agentInventoryMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineModel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineModel.setDescription("The switch's Machine Model. ")
agentInventorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventorySerialNumber.setDescription('Serial number of the switch.')
agentInventoryMaintenanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setDescription("The switch's Inventory Maintenance Level")
agentInventoryBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setDescription('Burned-In MAC Address')
agentInventoryOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setDescription('Operating System running on this unit')
agentInventoryManufacturerName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryManufacturerName.setStatus('current')
if mibBuilder.loadTexts: agentInventoryManufacturerName.setDescription('Name of the switch manufacturer.')
agentInventoryProductName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryProductName.setStatus('current')
if mibBuilder.loadTexts: agentInventoryProductName.setDescription('Name of the product.')
agentInventoryProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryProductVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventoryProductVersion.setDescription('Version of the product.')
agentInventoryIsGigECardPresent = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryIsGigECardPresent.setStatus('current')
if mibBuilder.loadTexts: agentInventoryIsGigECardPresent.setDescription('True if the Switch contains a Gigabit ethernet card .')
agentInventoryIsCryptoCardPresent = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryIsCryptoCardPresent.setStatus('current')
if mibBuilder.loadTexts: agentInventoryIsCryptoCardPresent.setDescription('True if the switch is carrying a Crypto card.')
agentInventoryIsForeignAPSupported = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryIsForeignAPSupported.setStatus('current')
if mibBuilder.loadTexts: agentInventoryIsForeignAPSupported.setDescription('States whether the switch supports third party Access Points.')
agentInventoryMaxNumberOfAPsSupported = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaxNumberOfAPsSupported.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMaxNumberOfAPsSupported.setDescription('Maximum number of APs supported with this Controller.')
agentInventoryIsCryptoCard2Present = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryIsCryptoCard2Present.setStatus('current')
if mibBuilder.loadTexts: agentInventoryIsCryptoCard2Present.setDescription('True if the switch is carrying second Crypto card for 4400 controller.')
agentInventoryFipsModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryFipsModeEnabled.setStatus('current')
if mibBuilder.loadTexts: agentInventoryFipsModeEnabled.setDescription('True if FIPS (Federal Information Processing Standards) mode has been enabled on the controller.False if FIPS mode has not been enabled. FIPS mode can only be enabled through console.')
agentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2))
agentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotal.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotal.setDescription('The total number of traps sent since last reset.')
agentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setDescription('The number of traps sent since last viewed.')
agentRadioUpDownTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRadioUpDownTrapCount.setStatus('current')
if mibBuilder.loadTexts: agentRadioUpDownTrapCount.setDescription('The total number of AP Up/Down traps sent since last reset.')
agentApAssociateDisassociateTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApAssociateDisassociateTrapCount.setStatus('current')
if mibBuilder.loadTexts: agentApAssociateDisassociateTrapCount.setDescription('The total number of AP Associate/Disassociate traps sent since last reset.')
agentApLoadProfileFailTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApLoadProfileFailTrapCount.setStatus('current')
if mibBuilder.loadTexts: agentApLoadProfileFailTrapCount.setDescription('The total number of AP Load Profile Failure traps sent since last reset.')
agentApNoiseProfileFailTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApNoiseProfileFailTrapCount.setStatus('current')
if mibBuilder.loadTexts: agentApNoiseProfileFailTrapCount.setDescription('The total number of AP Noise Profile Failure traps sent since last reset.')
agentApInterferenceProfileFailTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApInterferenceProfileFailTrapCount.setStatus('current')
if mibBuilder.loadTexts: agentApInterferenceProfileFailTrapCount.setDescription('The total number of AP Interference Profile Failure traps sent since last reset.')
agentApCoverageProfileFailTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApCoverageProfileFailTrapCount.setStatus('current')
if mibBuilder.loadTexts: agentApCoverageProfileFailTrapCount.setDescription('The total number of AP Coverge Profile Failure traps sent since last reset.')
agentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4), )
if mibBuilder.loadTexts: agentTrapLogTable.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTable.setDescription('Agent Trap Log')
agentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentTrapLogIndex"))
if mibBuilder.loadTexts: agentTrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogEntry.setDescription('Agent trap log entry')
agentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogIndex.setDescription('Unique index of trap entry')
agentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogSystemTime.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogSystemTime.setDescription('System uptime when trap was sent. This entry shows how long the system has been up when the trap occurred.')
agentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTrap.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTrap.setDescription('Description of the trap sent.')
agentSwitchInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3))
agentSwitchInfoLwappTransportMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoLwappTransportMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInfoLwappTransportMode.setDescription('The LWAPP transport mode specifies if the switch is operating in Layer2 or Layer3 mode. This attribute gives the current mode the switch is operating on.')
agentSwitchInfoPowerSupply1Present = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply1Present.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply1Present.setDescription('This is to indicate if the switch has Power Supply 1 present on it. This is applicable to the 4200 series and will always return true for the earlier device versions.')
agentSwitchInfoPowerSupply1Operational = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply1Operational.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply1Operational.setDescription("This is to indicate if the switch's Power Supply 1 is operational. This is applicable to the 4200 series and will always return true for the earlier device versions.")
agentSwitchInfoPowerSupply2Present = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply2Present.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply2Present.setDescription('This is to indicate if the switch has Power Supply 2 present on it. This is applicable to the 4200 series and will always return false for the earlier device versions.')
agentSwitchInfoPowerSupply2Operational = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply2Operational.setStatus('current')
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply2Operational.setDescription("This is to indicate if the switch's Power Supply 2 is operational.This is applicable to the 4200 series and will always return false for the earlier device versions.")
agentResourceInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 5))
agentCurrentCPUUtilization = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCurrentCPUUtilization.setStatus('current')
if mibBuilder.loadTexts: agentCurrentCPUUtilization.setDescription('Current CPU Load of the switch in percentage.')
agentTotalMemory = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTotalMemory.setStatus('current')
if mibBuilder.loadTexts: agentTotalMemory.setDescription('Total RAM of the switch in Kbytes.')
agentFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFreeMemory.setStatus('current')
if mibBuilder.loadTexts: agentFreeMemory.setDescription('Free RAM of the switch in Kbytes.')
agentWcpInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6))
agentWcpDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpDeviceName.setStatus('current')
if mibBuilder.loadTexts: agentWcpDeviceName.setDescription('This is the name of the device this controller is residing on.')
agentWcpSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpSlotNumber.setStatus('current')
if mibBuilder.loadTexts: agentWcpSlotNumber.setDescription('The slot number on the Wcp Device that this controller is residing on.')
agentWcpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentWcpPortNumber.setDescription('The port number on the Wcp Device that this controller is residing on.')
agentWcpPeerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpPeerPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentWcpPeerPortNumber.setDescription("The port number of this controller's peer on the same slot on Wcp Device that this controller is residing on.")
agentWcpPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentWcpPeerIpAddress.setDescription("The IP Address of this controller's peer on the same slot on Wcp Device that this controller is residing on.")
agentWcpControllerTableChecksum = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpControllerTableChecksum.setStatus('current')
if mibBuilder.loadTexts: agentWcpControllerTableChecksum.setDescription('This is the checksum that tracks the changes in the agentWcpControllerInfoTable. If there is any change in the information on this table, the checksum changes.')
agentWcpControllerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7), )
if mibBuilder.loadTexts: agentWcpControllerInfoTable.setStatus('current')
if mibBuilder.loadTexts: agentWcpControllerInfoTable.setDescription('A table of the wireless controllers on a WCP device.')
agentWcpControllerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoSlotNumber"), (0, "AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoPortNumber"))
if mibBuilder.loadTexts: agentWcpControllerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: agentWcpControllerInfoEntry.setDescription('Entry for a wireless controller on a WCP device.')
agentWcpControllerInfoSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpControllerInfoSlotNumber.setStatus('current')
if mibBuilder.loadTexts: agentWcpControllerInfoSlotNumber.setDescription('The slot number on the Wcp device that a controller is residing on.')
agentWcpControllerInfoPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpControllerInfoPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentWcpControllerInfoPortNumber.setDescription('The port number on the Wcp Device that a controller is residing on.')
agentWcpControllerInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpControllerInfoIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentWcpControllerInfoIpAddress.setDescription('The management IP Address of a controller.')
agentProductGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4))
productGroup1 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4, 1))
productGroup2 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4, 2))
productGroup3 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4, 3))
productGroup4 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4, 4))
agentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1))
agentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1), )
if mibBuilder.loadTexts: agentLoginSessionTable.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionTable.setDescription("A table of the switch's login session")
agentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentLoginSessionIndex"))
if mibBuilder.loadTexts: agentLoginSessionEntry.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionEntry.setDescription('Login Session Entry')
agentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIndex.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIndex.setDescription('Agent Login Session Index of the switch')
agentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionUserName.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionUserName.setDescription('Agent Login Session UserName of the switch')
agentLoginSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setDescription('Agent Login Session IP Address of the switch')
agentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2), ("web", 3), ("ssl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setDescription('Agent Login Session Connection Type of the switch')
agentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setDescription('Agent Login Session Idle Time of the switch')
agentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setDescription('Agent Login Session Time of the switch')
agentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 26), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLoginSessionStatus.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionStatus.setDescription('Status of the user. active(1) - This connection is active. destroy(6) - Set to this value to disconnect this user.')
agentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2))
agentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setDescription('Telnet login timeout (minutes) Config telnet timeout will set the telnet session timeout value. A session is active as long as the session has not remained idle for the value set. Specify a value from 0 to 160. A value of 0 indicates that a Telnet session remains active indefinitely. Note: Changing the timeout value for active sessions does not become effective until the session is reaccessed. Any keystroke will also activate the new timeout duration.')
agentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentTelnetMaxSessions.setDescription('Maximum number of Telnet Sessions Config telnet maxsessions is an integer value from 0 to 5 that specifies the maximum number of telnet sessions that can be established. If the value is 0, no Telnet session can be established.')
agentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setStatus('current')
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setDescription('Allow new telnet sessions (enable or disable) Config telnet disable means that no new Telnet sessions are to be established. Any already established session remains active until the session is ended or an abnormal network error ends it. ')
agentSSHAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSSHAllowNewMode.setStatus('current')
if mibBuilder.loadTexts: agentSSHAllowNewMode.setDescription('Allow new SSH sessions (enable or disable) Config SSH disable means that no new SSH sessions are to be established. Any already established session remains active until the session is ended or an abnormal network error ends it.')
agentSerialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5))
agentSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSerialTimeout.setDescription('Agent Serial Timeout ')
agentSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud1200", 1), ("baud2400", 2), ("baud4800", 3), ("baud9600", 4), ("baud19200", 5), ("baud38400", 6), ("baud57600", 7), ("baud115200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialBaudrate.setStatus('current')
if mibBuilder.loadTexts: agentSerialBaudrate.setDescription(' Agent Serial Baudrate')
agentSerialCharacterSize = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialCharacterSize.setStatus('current')
if mibBuilder.loadTexts: agentSerialCharacterSize.setDescription(' Agent Serial Character Size')
agentSerialHWFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setDescription(' Agent Serial Hardware Flow Control.')
agentSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialStopBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialStopBits.setDescription(' Agent Serial Stop Bits')
agentSerialParityType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialParityType.setStatus('current')
if mibBuilder.loadTexts: agentSerialParityType.setDescription(' Agent Serial Parity Type')
agentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2))
agentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigCreate.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagConfigCreate.setDescription("Agent Lag Create. When this object is set with a non-empty string, a new lag will be created.if possible with the entered string as it's name.")
agentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setDescription("A summary table of the switch's lag config entries")
agentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentLagSummaryName"))
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setDescription("Switch's lag config entry")
agentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryName.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryName.setDescription('Agent Lag Name')
agentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setDescription('Agent Lag If Index')
agentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setDescription('Agent Lag Flush Timer')
agentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setDescription('Agent Lag Link Trap')
agentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setDescription('Agent Lag Admin Mode')
agentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryStpMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryStpMode.setDescription('Agent Lag STP Mode')
agentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryAddPort.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryAddPort.setDescription('Agent Lag Add Port. Note: agentPortType for the port to be added must be full duplex and the same speed as previously added port(s), if any.')
agentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setDescription('Agent Lag Delete Port')
agentLagSummaryPortsBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryPortsBitMask.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryPortsBitMask.setDescription('Agent Lag Member Ports in bit mask representation')
agentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryStatus.setDescription('Agent Lag Status. active(1) - This Lag is enabled. destroy(6) - Set to this value to remove the Lag.')
agentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setDescription("A detailed table of the switch's lag config entries")
agentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentLagDetailedLagIndex"), (0, "AIRESPACE-SWITCHING-MIB", "agentLagDetailedIfIndex"))
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setDescription("Switch's lag config entry")
agentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setDescription('Lag index')
agentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setDescription('Lag port index')
agentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setDescription('Lag port speed. See agentPortType for description and list of valid values.')
agentLagConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagConfigMode.setDescription('The Lag Mode on the 4400 series controller. When it is on, all the gigabit ports are bound to one aggregated link.')
agentNetworkConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3))
agentNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIPAddress.setDescription("The switch's network ip address")
agentNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentNetworkSubnetMask.setDescription("The switch's network subnet mask")
agentNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setDescription("The switch's network default gateway")
agentNetworkBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setDescription("The switch's Burned-In MAC address")
agentNetworkConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setDescription("The switch's network config protocol")
agentNetworkWebMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkWebMode.setDescription("The switch's web access mode.")
agentNetworkSecureWebMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSecureWebMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkSecureWebMode.setDescription('If https is enable or not provided web mode is enabled')
agentNetworkMulticastMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("unicast", 1), ("multicast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMulticastMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMulticastMode.setDescription("Switch's ethernet multicast support. disable- multicast is disabled multicast - Multicast is enabled. unicast- Controller will convert multicast to unicast packet.")
agentNetworkDsPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDsPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDsPortNumber.setDescription("The switch's distribution port number.")
agentNetworkUserIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkUserIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: agentNetworkUserIdleTimeout.setDescription('Sets the idle user timeout.')
agentNetworkArpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkArpTimeout.setStatus('current')
if mibBuilder.loadTexts: agentNetworkArpTimeout.setDescription('Sets the ARP entry timeout.')
agentNetworkManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkManagementVlan.setStatus('current')
if mibBuilder.loadTexts: agentNetworkManagementVlan.setDescription('VLAN ID of the network management interface.')
agentNetworkGvrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkGvrpStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkGvrpStatus.setDescription('The state of GVRP operation on the Switch. The value enabled(1) indicates that GVRP is enabled on this port, as long as dot1qGvrpStatus is also enabled for this device. When disabled(2) but dot1qGvrpStatus is still enabled for the device, GVRP is disabled on this port: any GVRP packets received will be silently discarded and no GVRP registrations will be propagated from other ports. This object affects all GVRP Applicant and Registrar state machines on this port. A transition from disabled(2) to enabled(1) will cause a reset of all GVRP state machines on this port.(Attribute No longer supported)')
agentNetworkAllowMgmtViaWireless = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkAllowMgmtViaWireless.setStatus('current')
if mibBuilder.loadTexts: agentNetworkAllowMgmtViaWireless.setDescription('This states whether Management via wireless is allowed or not.')
agentNetworkBroadcastSsidMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkBroadcastSsidMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkBroadcastSsidMode.setDescription('This mode when enabled allows WLAN SSIDs to be broadcasted.')
agentNetworkSecureWebPassword = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSecureWebPassword.setStatus('current')
if mibBuilder.loadTexts: agentNetworkSecureWebPassword.setDescription('SSL Certificate Password. This can be optionally set while downloading SSL certificates of type Web Admin and Web Authentication')
agentNetworkWebAdminCertType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkWebAdminCertType.setStatus('current')
if mibBuilder.loadTexts: agentNetworkWebAdminCertType.setDescription("Type of currently existing Web Admin Certificate installed on the Switch. It could be 'Empty' if the certificate is not present, 'Locally Generated' if the certificate is locally generated or it could have a name if it is downloaded externally.")
agentNetworkWebAdminCertRegenerateCmdInvoke = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebAdminCertRegenerateCmdInvoke.setStatus('current')
if mibBuilder.loadTexts: agentNetworkWebAdminCertRegenerateCmdInvoke.setDescription("This command when set to 'activate' will regenerate a Web Administration Certificate Locally that will replace the existing certificate.")
agentNetworkWebAuthCertType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkWebAuthCertType.setStatus('current')
if mibBuilder.loadTexts: agentNetworkWebAuthCertType.setDescription("Type of currently exisitng Web Authentication Certificate installed on the Switch. It could be 'Empty' if the certificate is not present, 'Locally Generated' if the certificate is locally generated or it could have a name if it is downloaded externally.")
agentNetworkWebAuthCertRegenerateCmdInvoke = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebAuthCertRegenerateCmdInvoke.setStatus('current')
if mibBuilder.loadTexts: agentNetworkWebAuthCertRegenerateCmdInvoke.setDescription("This command when set to 'activate' will regenerate a Web Authentication Certificate Locally that will replace the existing certificate.")
agentNetworkPeerToPeerBlockingMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkPeerToPeerBlockingMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkPeerToPeerBlockingMode.setDescription('Mobile Peer to Peer Blocking mode on the switch.')
agentNetworkMulticastGroupAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMulticastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMulticastGroupAddress.setDescription('Multicast group address for access points.')
agentNetworkRouteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23), )
if mibBuilder.loadTexts: agentNetworkRouteConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentNetworkRouteConfigTable.setDescription("A table of the switch's Network Route entries")
agentNetworkRouteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentNetworkRouteIPAddress"))
if mibBuilder.loadTexts: agentNetworkRouteConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentNetworkRouteConfigEntry.setDescription("Switch's Network Route entry")
agentNetworkRouteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkRouteIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkRouteIPAddress.setDescription('Network Route IP Address.')
agentNetworkRouteIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkRouteIPNetmask.setStatus('current')
if mibBuilder.loadTexts: agentNetworkRouteIPNetmask.setDescription(' Network Route IP Netmask.')
agentNetworkRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkRouteGateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkRouteGateway.setDescription(' Network Route IP Gateway.')
agentNetworkRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkRouteStatus.setStatus('current')
if mibBuilder.loadTexts: agentNetworkRouteStatus.setDescription('Network Route Row Status.')
agentInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13), )
if mibBuilder.loadTexts: agentInterfaceConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceConfigTable.setDescription("A table of the switch's Interface Config entries Typically, it will contain entries for Service Port Interface, DS Port Interface and Virtual Gateway Interface apart from other entries.")
agentInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentInterfaceName"))
if mibBuilder.loadTexts: agentInterfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceConfigEntry.setDescription("Switch's Interface Config entry")
agentInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceName.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceName.setDescription("Interace Name. This values is 'management' for DS port, 'service-port' for service port and 'virtual' for virtual gateway. For other interfaces, the name can be anything. These interfaces are already created by default.")
agentInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceVlanId.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceVlanId.setDescription('Vlan ID configured for the Interface.')
agentInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dynamic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInterfaceType.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceType.setDescription("The interface's type. The static type is set for the interfaces that are created by default on the switch and these cannot be deleted. Any other interface that is created is of type dynamic which can be deleted.")
agentInterfaceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInterfaceMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceMacAddress.setDescription('Interface MAC Address. This is only applicable in case of management and service-port interfaces.')
agentInterfaceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceIPAddress.setDescription('IP Address of the interface.')
agentInterfaceIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceIPNetmask.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceIPNetmask.setDescription('IP Netmask of the interface. This is 0 for the virtual interface.')
agentInterfaceIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceIPGateway.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceIPGateway.setDescription('IP Gateway of the interface. This is 0 for virtual and service-port interface.')
agentInterfacePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfacePortNo.setStatus('current')
if mibBuilder.loadTexts: agentInterfacePortNo.setDescription('A value 0 means the port is not set. The valid value can be any one of the physical ports on the switch. This is the primary port configured on the interface.')
agentInterfacePrimaryDhcpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfacePrimaryDhcpAddress.setStatus('current')
if mibBuilder.loadTexts: agentInterfacePrimaryDhcpAddress.setDescription('Primary DHCP Server IP Address for the interface This applies to the management interface and other dynamic interfaces.')
agentInterfaceSecondaryDhcpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceSecondaryDhcpAddress.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceSecondaryDhcpAddress.setDescription('Secondary DHCP Server IP Address for the interface. This applies to the management interface and other dynamic interfaces.')
agentInterfaceDhcpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceDhcpProtocol.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceDhcpProtocol.setDescription("The interface's DHCP protocol. This applies only to the service port interface.")
agentInterfaceDnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceDnsHostName.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceDnsHostName.setDescription('The DNS host name for the Virtual Interface. This attribute is not valid for other interfaces.')
agentInterfaceAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceAclName.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceAclName.setDescription('Name of the Access Control List applied to the interface. This attribute is applicable only to the management interface and other dynamic interfaces. If it is required to remove the ACL name for an interface, it should be set to an empty string.')
agentInterfaceAPManagementFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceAPManagementFeature.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceAPManagementFeature.setDescription("When enabled, the dynamic interface can be used for AP management. SNMP support for AP management through dynamic interfaces has been introduced since '3.0.21.0' release. Only applicable to dynamic interfaces in 4200 series. In static interfaces, 'disable' value 0 is returned. In 4000/3500 series of switches, 'disable' value 0 is returned.")
agentInterfaceActivePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInterfaceActivePortNo.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceActivePortNo.setDescription('This is the currently active port for this interface.')
agentInterfaceBackupPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceBackupPortNo.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceBackupPortNo.setDescription('This values is valid only for the 4200 series of switches. The backup port is the port this interface is moved to once the primary port fails. A value 0 means the port is not set. The valid value can be any one of the physical ports on the 4200 switch.')
agentInterfaceVlanQuarantine = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceVlanQuarantine.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceVlanQuarantine.setDescription("This object is used to configure the health of the interface identified by agentInterfaceName. A value of 'true' is used to indicate that this particular interface is unhealthy. In this case, the data packets of the clients, that are assigned the VLAN Id corresponding to this interface, must be tunneled to the Controller by the REAP AP. A value of 'false' indicates that the VLAN configured against the interface is healthy and that the REAP AP can switch the clients of this VLAN locally rather than tunneling them to the Controller. ")
agentInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentInterfaceRowStatus.setDescription('The interface entry Row status.')
agentNtpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14))
agentNtpPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3600, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNtpPollingInterval.setStatus('current')
if mibBuilder.loadTexts: agentNtpPollingInterval.setDescription('Network Time Protocol polling interval. Min value is one hour and maximum is a week.')
agentNtpServerTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2), )
if mibBuilder.loadTexts: agentNtpServerTable.setStatus('current')
if mibBuilder.loadTexts: agentNtpServerTable.setDescription("A summary table for switch's lag config entries")
agentNtpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentNtpServerIndex"))
if mibBuilder.loadTexts: agentNtpServerEntry.setStatus('current')
if mibBuilder.loadTexts: agentNtpServerEntry.setDescription("Switch's NTP Server entry. Upto 4 entries may be added.")
agentNtpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNtpServerIndex.setStatus('current')
if mibBuilder.loadTexts: agentNtpServerIndex.setDescription('NTP Server priority index.')
agentNtpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNtpServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentNtpServerAddress.setDescription('IP Address of the NTP Server')
agentNtpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNtpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentNtpServerRowStatus.setDescription('NTP server entry row status.')
agentDhcpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15))
agentDhcpScopeTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1), )
if mibBuilder.loadTexts: agentDhcpScopeTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeTable.setDescription("A table listing the Scopes defined on the switch's DHCP Server.")
agentDhcpScopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentDhcpScopeIndex"))
if mibBuilder.loadTexts: agentDhcpScopeEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeEntry.setDescription("Switch's DHCP Server Scope entry.")
agentDhcpScopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeIndex.setDescription('DHCP Scope Identifier Index.')
agentDhcpScopeName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 79))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeName.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeName.setDescription('DHCP Scope Name.')
agentDhcpScopeLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 8640000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeLeaseTime.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeLeaseTime.setDescription('DHCP Scope Lease time in seconds.')
agentDhcpScopeNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetwork.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeNetwork.setDescription('IP Address of the DHCP Scope Network. This is the address which is used to determine the DHCP scope a remote Switch is attaching to.')
agentDhcpScopeNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetmask.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeNetmask.setDescription('The DHCP Scope Netmask. This the subnet mask for the address pool.')
agentDhcpScopePoolStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopePoolStartAddress.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopePoolStartAddress.setDescription('The DHCP Scope address pool start IP address.')
agentDhcpScopePoolEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopePoolEndAddress.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopePoolEndAddress.setDescription('The DHCP Scope address pool end IP address.')
agentDhcpScopeDefaultRouterAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress1.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress1.setDescription("IP Address of the DHCP Scope's default Router 1.")
agentDhcpScopeDefaultRouterAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress2.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress2.setDescription("IP Address of the DHCP Scope's default Router 2.")
agentDhcpScopeDefaultRouterAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress3.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress3.setDescription("IP Address of the DHCP Scope's default Router 3.")
agentDhcpScopeDnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDnsDomainName.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeDnsDomainName.setDescription('DNS Domain name for the DHCP Scope.')
agentDhcpScopeDnsServerAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress1.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress1.setDescription("IP Address of the DHCP Scope's DNS Server 1.")
agentDhcpScopeDnsServerAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress2.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress2.setDescription("IP Address of the DHCP Scope's DNS Server 2.")
agentDhcpScopeDnsServerAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress3.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress3.setDescription("IP Address of the DHCP Scope's DNS Server 3.")
agentDhcpScopeNetbiosNameServerAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress1.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress1.setDescription("IP Address of DHCP Scope's Netbios Name Server 1.")
agentDhcpScopeNetbiosNameServerAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress2.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress2.setDescription("IP Address of DHCP Scope's Netbios Name Server 2.")
agentDhcpScopeNetbiosNameServerAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress3.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress3.setDescription("IP Address of DHCP Scope's Netbios Name Server 3.")
agentDhcpScopeState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeState.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeState.setDescription("DHCP Scope's State.")
agentDhcpScopeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDhcpScopeRowStatus.setDescription('Dhcp Scope entry row status.')
agentServicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4))
agentServicePortIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentServicePortIPAddress.setDescription("The switch's Service Port IP address. (Service-port interface use is recommended instead of this group)")
agentServicePortSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortSubnetMask.setStatus('obsolete')
if mibBuilder.loadTexts: agentServicePortSubnetMask.setDescription("The switch's Service Port subnet mask. (Service-port interface in agentInterfaceConfigTable is recommended instead of this group)")
agentServicePortDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setStatus('obsolete')
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setDescription("Not Supported for release 1.0. The switch's Service Port default gateway. (Service-port interface in agentInterfaceConfigTable is recommended instead of this group)")
agentServicePortBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setDescription("The switch's Service Port Burned-In MAC address (Service-port interface in agentInterfaceConfigTable is recommended instead of this group)")
agentServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setStatus('obsolete')
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setDescription("The switch's Service Port config protocol (Service-port interface in agentInterfaceConfigTable is recommended instead of this group)")
agentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5))
agentSnmpTrapPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapPortNumber.setDescription('Snmp Trap Port Number')
agentSnmpVersion1Status = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVersion1Status.setStatus('current')
if mibBuilder.loadTexts: agentSnmpVersion1Status.setDescription('Snmp Version 1 Status')
agentSnmpVersion2cStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVersion2cStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpVersion2cStatus.setDescription('Snmp Version 2c Status')
agentSnmpCommunityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5), )
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setDescription("A table of the switch's SNMP community Config entries")
agentSnmpCommunityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityName"))
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setDescription("Switch's SNMP community Config entry")
agentSnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityName.setDescription("The switch's Snmp Community Name This name identifies each SNMP community; the name can be up to 16 characters, and it is case-sensitive. Community names in the SNMP community must be unique. If you make multiple entries using the same community name, the first entry is kept and processed and all duplicate entries are ignored. ")
agentSnmpCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setDescription("The switch's Snmp Community IP Address Client IP Address - This attribute is an IP address (or portion thereof) from which this device will accept SNMP packets with the associated community. The requesting entity's IP address is logical-ANDed with the Client IP Mask and the result must match the Client IP Address. Note: If the Client IP Mask is set to 0.0.0.0, a Client IP Address of 0.0.0.0 matches all IP addresses.")
agentSnmpCommunityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setDescription("The switch's Snmp Community IP Mask Client IP Mask - This attribute is a mask to be logical-ANDed with the requesting entity's IP address before comparison with the Client IP Address. If the result matches with Client IP Address then the address is an authenticated IP address. For example, if the Client IP Address is 9.47.128.0 and the corresponding Client IP Mask is 255.255.255.0, a range of incoming IP addresses would match, that is, the incoming IP addresses could be a value in the following range: 9.47.128.0 to 9.47.128.255. To have a specific IP address be the only authenticated IP address, set the Client IP Address to the required IP address and set the Client IP Mask to 255.255.255.255.")
agentSnmpCommunityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2))).clone('readOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setDescription("The switch's Snmp Community Access Mode Access Mode - This value can be readOnly or readWrite. A community with a read-only access allows for switch information to be displayed. A community with a readWrite access allows for configuration changes to be made and for information to be displayed. ")
agentSnmpCommunityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityEnabled.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityEnabled.setDescription('If community is Enabled ')
agentSnmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setDescription("The switch's Snmp Community Status. active(1) - This community is active, allowing SNMP manager associated with this community to manage the switch according to its access right. notInService(2) - This community is not active; no SNMP requests using this community will be accepted. In this case the SNMP manager associated with this community cannot manage the switch until the Status is changed back to active(1). config(3) - The community Status must be set to this value in order to configure it. When creating a new community entry, initial Status will be set to this value. destroy(4) - Set to this value to remove the community from the agent.")
agentSnmpTrapReceiverConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6), )
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setDescription('Trap messages are sent across a network to an SNMP Network Manager. These messages alert the manager to events occurring within the switch or on the network. Up to six simultaneous trap receivers are supported.')
agentSnmpTrapReceiverConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverName"))
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setDescription("Switch's Snmp Trap Receiver Config entry")
agentSnmpTrapReceiverName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpTrapReceiverName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverName.setDescription("The switch's Snmp Trap Receiver Name. This is the name of the remote network manager. the name can be up to 16 characters, and is case-sensitive.")
agentSnmpTrapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setDescription('SNMP network Manager IP Address. The IP Address traps will be sent to. Each IP address parameter is four integer numbers. The numbers range from 0 to 255. After creation of entry IP Address cannot be changed.')
agentSnmpTrapReceiverEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpTrapReceiverEnabled.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverEnabled.setDescription("The flag to enable the trap receiver. If disabled, no traps are sent to this receiver's IP Address. ")
agentSnmpTrapReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setDescription("This object is used to create and delete instances of this table. The row, when created with the row status value of 'createAndGo' or 'createAndWait' is moved to the 'active' state automatically by the agent and remains in that state till the time the row is removed through the 'destroy' option.")
agentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7))
agentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setDescription('Authentication Flag - Enable/Disable authentication Flag.')
agentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setDescription('Link Up/Down Flag - Enable/Disable Link Up/Link Down traps for the entire switch. When set to Enable, the Link Up/Down traps will be sent only if the Link Trap flag setting associated with the port (Port Configuration Menu) is set to Enable.')
agentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setDescription('Multiple Users Flag - Enable/Disable Multiple User traps. When the value is set to Enable, a Multiple User Trap is sent whenever someone logs in to the terminal interface (EIA 232 or Telnet) and there is already an existing terminal interface session')
agentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setDescription('Spanning Tree Flag - This flag enables the sending of new root traps and topology change notification traps.')
agentSnmpBroadcastStormTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setStatus('obsolete')
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setDescription('Broadcast Storm Flag - This flag enables or disables the broadcast storm trap. You must also enable Broadcast Storm Recovery Mode (see the Switch Configuration Menu). When this value is set to Enable and Broadcast Storm Recovery mode is set to Enable, the Broadcast Storm Start/End traps are sent when the switch enters and leaves Broadcast Storm Recovery.')
agentSnmpV3ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6))
agentSnmpVersion3Status = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVersion3Status.setStatus('current')
if mibBuilder.loadTexts: agentSnmpVersion3Status.setDescription('Snmp Version 3 Status')
agentSnmpV3UserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2), )
if mibBuilder.loadTexts: agentSnmpV3UserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserConfigTable.setDescription('User Config Table. Only creation and deletion of users is supported. All individual updates are not supported.')
agentSnmpV3UserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserName"))
if mibBuilder.loadTexts: agentSnmpV3UserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserConfigEntry.setDescription('User Config Entry')
agentSnmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserName.setDescription('Agent User Name.')
agentSnmpV3UserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readonly", 1), ("readwrite", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserAccessMode.setDescription('Agent User Access Mode')
agentSnmpV3UserAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacmd5", 2), ("hmacsha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserAuthenticationType.setDescription('SNMPv3 User Authentication none(1) - no authentication used hmacmd5(1) - Use HMAC-MD5 authentication hmacsha(1) - Use HMAC-SHA authentication')
agentSnmpV3UserEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserEncryptionType.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserEncryptionType.setDescription('SNMPv3 User Encryption Must be set to none(1) if agentSnmpV3UserAuthenticationType is set to none(1). Setting this object will set the encryption password to an empty string. none(1) - no encryption used des(1) - DES encryption used')
agentSnmpV3UserAuthenticationPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserAuthenticationPassword.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserAuthenticationPassword.setDescription('SNMPv3 User Encryption Password')
agentSnmpV3UserEncryptionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserEncryptionPassword.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserEncryptionPassword.setDescription('SNMPv3 User Encryption Password')
agentSnmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpV3UserStatus.setDescription('Agent User Status. active(1) - This user account is active. destroy(6) - Set to this value to remove this user account.')
agentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 7))
agentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSpanningTreeMode.setStatus('current')
if mibBuilder.loadTexts: agentSpanningTreeMode.setDescription("The switch's Spanning Tree Switch Status")
agentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8))
agentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 4), )
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setDescription("The switch's address aging timeout table")
agentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setDescription('Aging information about a specific Filtering Database.')
agentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setDescription("The FDB entry's address aging timeout(in seconds)")
agentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setDescription('The switch config broadcast allows you to enable or disable broadcast storm recovery mode. When you specify Enable for Broadcast Storm Recovery and the broadcast traffic on any Ethernet port exceeds 20 percent of the link speed, the switch blocks (discards) the broadcast traffic until the broadcast traffic returns to 10 percent or less.Upper limit for 10M link is 20% and lower limit is 10%. For 100M link Upper limit is 5% and lower limit is 2%')
agentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setDescription('Config switchconfig flowcontrol allows you to enable or disable 802.3x flow control for the switch. This value applies to only full-duplex mode ports. ')
agentSwitchLwappTransportMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchLwappTransportMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLwappTransportMode.setDescription('The LWAPP transport mode decides if the switch is operating in the Layer2 or Layer3 mode. The switch needs to be rebooted for the mode change to take effect.')
agentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9))
agentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1))
agentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadMode.setDescription('Transfer upload mode configures the mode to use when uploading from the switch. The mode is either X/Y/ZMODEM or TFTP. X/Y/ZMODEM is valid only when the file transfer is initiated by the serial EIA 232 port.')
agentTransferUploadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerIP.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerIP.setDescription('Transfer upload tftpserverip configures the IP address of the server where the file will be uploaded. It is valid only when the Transfer Mode is TFTP. The address is 4 integer bytes ranging from 0 to 255.')
agentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPath.setDescription('Transfer upload tftppath configures the directory path where the file is to be uploaded to. The switch remembers the last file path used.')
agentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadFilename.setDescription('Transfer upload tftpfilename configures the file name for the file being uploaded from the switch. It can be up to 32 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 17 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and TFTP Server IP Address are applicable only if the Transfer Mode is TFTP.')
agentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("config", 2), ("errorlog", 3), ("systemtrace", 4), ("traplog", 5), ("crashfile", 6), ("signatures", 7), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadDataType.setDescription('Transfer upload datatype configures the type of file to upload from the switch. The types for upload are: - Configuration File - Error log - System trace - Trap log - Crash File ')
agentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStart.setDescription('Transfer upload start will start an upload transfer. The agentTransferUploadMode object must not be set to xmodem(2), ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferUploadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStatus.setDescription('Indicates the current status of an upload transfer.')
agentTransferConfigurationFileEncryption = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferConfigurationFileEncryption.setStatus('current')
if mibBuilder.loadTexts: agentTransferConfigurationFileEncryption.setDescription('The configuration file can be encrypted before tftp upload from the switch and then decrypted before downloading to the switch when this option is enabled.')
agentTransferConfigurationFileEncryptionKey = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferConfigurationFileEncryptionKey.setStatus('current')
if mibBuilder.loadTexts: agentTransferConfigurationFileEncryptionKey.setDescription('This is the key to be used when encrypting the configuration file while upload from the switch or while decrypting the file after download to the switch.')
agentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2))
agentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadMode.setDescription('Transfer download mode configures the mode to use when downloading to the switch. The mode is either X/Y/ZMODEM or TFTP. X/Y/ZMODEM is valid only when the file transfer is initiated by the serial EIA 232 port.')
agentTransferDownloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setDescription('Transfer download tftpserverip configures the IP address of the server where the file is located. It is valid only when the Transfer Mode is TFTP. The address is 4 integer bytes ranging from 0 to 255.')
agentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPath.setDescription('Transfer download tftppath configures the directory path where the file is located. The switch remembers the last file path used.')
agentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadFilename.setDescription('Transfer download tftpfilename configures the file name for the file being downloaded to the switch. It can be up to 32 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 33 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and TFTP Server IP Address are applicable only if the Transfer Mode is TFTP.')
agentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("code", 2), ("config", 3), ("webauthcert", 4), ("webadmincert", 5), ("signatures", 6), ("customWebAuth", 7), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadDataType.setDescription('Transfer download datatype configures the type of file to downloaded to the switch. The types for download are: - Code - Configuration - Certificates - Signatures - customWebauth- custom webauth tar ball')
agentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStart.setDescription('Transfer download start will start an download transfer. The agentTransferDownloadMode object must not be set to xmodem(2), ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 99))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13), ("bootBreakOff", 14), ("invalidTarFile", 15), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStatus.setDescription('Indicates the current status of an download transfer.')
agentTransferDownloadTftpMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadTftpMaxRetries.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadTftpMaxRetries.setDescription('Maximum number of retries to be allowed for a TFTP message packet.')
agentTransferDownloadTftpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadTftpTimeout.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadTftpTimeout.setDescription('Timeout in seconds for a TFTP message packet.')
agentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 11), )
if mibBuilder.loadTexts: agentDot3adAggPortTable.setStatus('obsolete')
if mibBuilder.loadTexts: agentDot3adAggPortTable.setDescription('This table provides 802.3ad link aggregation information for each physical port that is not available through the standard MIB.')
agentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 11, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentDot3adAggPort"))
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setStatus('obsolete')
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setDescription('Information about a table entry. The agentDot3adAggPort identifies the external interface number of the port.')
agentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot3adAggPort.setStatus('obsolete')
if mibBuilder.loadTexts: agentDot3adAggPort.setDescription('ifIndex of this physical port')
agentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setDescription('Enable/disable 802.3ad LACP on this port')
agentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12), )
if mibBuilder.loadTexts: agentPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigTable.setDescription("A table of the switch's physical port config entries")
agentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentPortDot1dBasePort"))
if mibBuilder.loadTexts: agentPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigEntry.setDescription("Switch's physical port config entry")
agentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot1dBasePort.setStatus('current')
if mibBuilder.loadTexts: agentPortDot1dBasePort.setDescription('The port number of this port.')
agentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortIfIndex.setDescription("The switch's Port IfIndex")
agentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIanaType.setStatus('current')
if mibBuilder.loadTexts: agentPortIanaType.setDescription("The switch's Port Type")
agentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSTPMode.setStatus('current')
if mibBuilder.loadTexts: agentPortSTPMode.setDescription("The switch's Port Spanning Tree Protocol Mode STP mode values are: dot1d (the default) fast, indicates you want to use the fast spanning tree mode off, indicates the STP mode is turned off for a particular port")
agentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocking", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSTPState.setStatus('current')
if mibBuilder.loadTexts: agentPortSTPState.setDescription("The switch's Port Spanning Tree Protocol State")
agentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortAdminMode.setDescription("The switch's Port Admin Mode")
agentPortPhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("half10", 2), ("full10", 3), ("half100", 4), ("full100", 5), ("full1000sx", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPhysicalMode.setStatus('current')
if mibBuilder.loadTexts: agentPortPhysicalMode.setDescription("The switch's Port Speed Mode. This is the configured physical mode.This object is read-only for gigabit ports")
agentPortPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("autonegotiate", 1), ("half10", 2), ("full10", 3), ("half100", 4), ("full100", 5), ("full1000sx", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortPhysicalStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortPhysicalStatus.setDescription("The switch's Port Physical Speed Status.This is the current actual speed.")
agentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLinkTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentPortLinkTrapMode.setDescription('If enabled, link up and link down traps will be sent for this port.')
agentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortClearStats.setStatus('current')
if mibBuilder.loadTexts: agentPortClearStats.setDescription('Clear stats for this port only')
agentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDefaultType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortDefaultType.setStatus('current')
if mibBuilder.loadTexts: agentPortDefaultType.setDescription('This object identifies the default administrative port type, to be used in conjunction with the operational port type denoted by agentPortType. The set of possible values for this object is the same as the set defined for the agentPortType object. This object represents the administratively- configured type of the MAU. If auto-negotiation is not enabled or is not implemented for this MAU, the value of this object determines the operational type of the MAU. In this case, a set to this object will force the MAU into the specified operating mode. If auto-negotiation is implemented and enabled for this MAU, the operational type of the MAU is determined by auto-negotiation, and the value of this object denotes the type to which the MAU will automatically revert if/when auto-negotiation is later disabled. The valid values for this object are: dot3MauType10BaseTHD dot3MauType10BaseTFD dot3MauType100BaseTXHD dot3MauType100BaseTXFD dot3MauType100BaseFXFD dot3MauType1000BaseSXFD')
agentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortType.setStatus('current')
if mibBuilder.loadTexts: agentPortType.setDescription('This object identifies the port type. An initial set of MAU types are defined in RFC 2668. The assignment of OBJECT IDENTIFIERs to new types of MAUs is managed by the IANA. If the MAU type is unknown, the object identifier unknownMauType OBJECT IDENTIFIER ::= { 0 0 } is returned. Note that unknownMauType is a syntactically valid object identifier, and any conformant implementation of ASN.1 and the BER must be able to generate and recognize this value. This object represents the operational type of the MAU, as determined by either (1) the result of the auto-negotiation function or (2) if auto-negotiation is not enabled or is not implemented for this MAU, by the value of the object qbEnetDefaultType, or (3) for the GigE card a value determined by the GBIC connected to the card. In case (2), a set to the object qbEnetPortDefaultType will force the MAU into the new operating mode. The valid values for this object are: dot3MauType10BaseTHD dot3MauType10BaseTFD dot3MauType100BaseTXHD dot3MauType100BaseTXFD dot3MauType100BaseFXFD dot3MauType1000BaseSXFD')
agentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setDescription('This object identifies the administration status of auto negotiation for this port.')
agentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setDescription('Config flowcontrol allows you to enable or disable 802.3x flow control for this port. This value applies to only full-duplex mode ports.')
agentPortPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPowerMode.setStatus('current')
if mibBuilder.loadTexts: agentPortPowerMode.setDescription(" Enable/Disable the port's Power over ethernet. This doesn't apply to appliances that have no POE controller.")
agentPortGvrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortGvrpStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortGvrpStatus.setDescription('The state of GVRP operation on this port. The value enabled(1) indicates that GVRP is enabled on this port, as long as dot1qGvrpStatus is also enabled for this device. When disabled(2) but dot1qGvrpStatus is still enabled for the device, GVRP is disabled on this port: any GVRP packets received will be silently discarded and no GVRP registrations will be propagated from other ports. This object affects all GVRP Applicant and Registrar state machines on this port. A transition from disabled(2) to enabled(1) will cause a reset of all GVRP state machines on this port.(Attribute no longer supported)')
agentPortGarpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 17), Unsigned32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortGarpJoinTime.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortGarpJoinTime.setDescription('The GARP Join time, in centiseconds.(Attribute no longer supported)')
agentPortGarpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 18), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortGarpLeaveTime.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortGarpLeaveTime.setDescription('The GARP Leave time, in centiseconds.(Attribute no longer supported)')
agentPortGarpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 19), Unsigned32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortGarpLeaveAllTime.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortGarpLeaveAllTime.setDescription('The GARP LeaveAll time, in centiseconds.(Attribute no longer supported)')
agentPortMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorMode.setDescription("The switch's Port Mirror Mode. If enabled, then this is the port that the packets are mirrored to.")
agentPortMulticastApplianceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastApplianceMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastApplianceMode.setDescription('The Port Multicast Appliance Mode. If enabled, then this port allows multicast streams through it. At a time, a maximum of four ports including the gigabit ethernet port can have this mode enabled on them. This is to limit the number of multicast streams allowed through the switch at a given time.')
agentPortOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortOperationalStatus.setDescription('The current operational state of the port.')
agentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveConfig.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfig.setDescription('save config to NVRAM')
agentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearConfig.setStatus('current')
if mibBuilder.loadTexts: agentClearConfig.setDescription('clear config to factory defaults')
agentClearLags = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLags.setStatus('current')
if mibBuilder.loadTexts: agentClearLags.setDescription('clear lag configuration')
agentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLoginSessions.setStatus('current')
if mibBuilder.loadTexts: agentClearLoginSessions.setDescription('close all telnet sessions')
agentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPortStats.setStatus('current')
if mibBuilder.loadTexts: agentClearPortStats.setDescription('clear all port statistics')
agentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearSwitchStats.setStatus('current')
if mibBuilder.loadTexts: agentClearSwitchStats.setDescription('clear all switch statistics')
agentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearTrapLog.setStatus('current')
if mibBuilder.loadTexts: agentClearTrapLog.setDescription('clear trap log')
agentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResetSystem.setStatus('current')
if mibBuilder.loadTexts: agentResetSystem.setDescription('reset the switch')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
if mibBuilder.loadTexts: portStatsTable.setDescription('A list of additional thernet statistics entries.')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "portStatsIndex"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('current')
if mibBuilder.loadTexts: portStatsEntry.setDescription('A collection of statistics kept for a particular Ethernet interface.')
portStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndex.setStatus('current')
if mibBuilder.loadTexts: portStatsIndex.setDescription('The value of this object uniquely identifies this portStatsEntry.')
portStatsPktsTx64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx64Octets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsTx64Octets.setDescription('The total number of packets (including bad packets) transmitted that were 64 octets in length (excluding framing bits but including FCS octets).')
portStatsPktsTx65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx65to127Octets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsTx65to127Octets.setDescription('The total number of packets (including bad packets) transmitted that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
portStatsPktsTx128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx128to255Octets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsTx128to255Octets.setDescription('The total number of packets (including bad packets) transmitted that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
portStatsPktsTx256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx256to511Octets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsTx256to511Octets.setDescription('The total number of packets (including bad packets) transmitted that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
portStatsPktsTx512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsTx512to1023Octets.setDescription('The total number of packets (including bad packets) transmitted that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
portStatsPktsTx1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsTx1024to1518Octets.setDescription('The total number of packets (including bad packets) transmitted that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
portStatsPktsRx1519to1530Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsRx1519to1530Octets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsRx1519to1530Octets.setDescription('The total number of packets (including bad packets) received that were between 1519 and 1530 octets in length inclusive (excluding framing bits but including FCS octets).')
portStatsPktsTx1519to1530Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx1519to1530Octets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsTx1519to1530Octets.setDescription('The total number of packets (including bad packets) transmitted that were between 1519 and 1530 octets in length inclusive (excluding framing bits but including FCS octets).')
portStatsPktsTxOversizeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 30), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTxOversizeOctets.setStatus('current')
if mibBuilder.loadTexts: portStatsPktsTxOversizeOctets.setDescription('The total number of packets (including bad packets) transmitted that were more than 1530 octets in length. (excluding framing bits but including FCS octets).')
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
if mibBuilder.loadTexts: multipleUsersTrap.setDescription('Multiple Users Log Trap.')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('current')
if mibBuilder.loadTexts: broadcastStormStartTrap.setDescription('Broadcast Storm Start Log Trap.')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('current')
if mibBuilder.loadTexts: broadcastStormEndTrap.setDescription('Broadcast Storm End Log Trap.')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('current')
if mibBuilder.loadTexts: linkFailureTrap.setDescription('trapMgrLinkFailureLogTrap.')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanRequestFailureTrap.setDescription('Vlan Request Failure Log Trap')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDeleteLastTrap.setDescription('Last Vlan Delete Log Trap')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setDescription('Default Vlan Config Failure Log Trap')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setDescription('Vlan Restore Failure Log Trap')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('current')
if mibBuilder.loadTexts: fanFailureTrap.setDescription('Fan Failure Log Trap.')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 10)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setDescription('STP Instance New Root Trap')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 11)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setDescription('STP Instance Topology Change Trap')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setDescription('Power Supply Status Change Trap')
bsnSwitchingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 14179, 1, 52, 1)).setObjects(("AIRESPACE-SWITCHING-MIB", "bsnSwitchingAgentInfoGroup"), ("AIRESPACE-SWITCHING-MIB", "bsnSwitchingAgentConfigGroup"), ("AIRESPACE-SWITCHING-MIB", "bsnSwitchingAgentSystemGroup"), ("AIRESPACE-SWITCHING-MIB", "bsnSwitchingAgentStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingCompliance = bsnSwitchingCompliance.setStatus('current')
if mibBuilder.loadTexts: bsnSwitchingCompliance.setDescription('The compliance statement for the SNMP entities that implement the bsnSwitching module')
bsnSwitchingAgentInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 1)).setObjects(("AIRESPACE-SWITCHING-MIB", "agentInventorySysDescription"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryMachineType"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryMachineModel"), ("AIRESPACE-SWITCHING-MIB", "agentInventorySerialNumber"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryMaintenanceLevel"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryBurnedInMacAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryOperatingSystem"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryManufacturerName"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryProductName"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryProductVersion"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryIsGigECardPresent"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryIsCryptoCardPresent"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryIsForeignAPSupported"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryMaxNumberOfAPsSupported"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryIsCryptoCard2Present"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryFipsModeEnabled"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogTotal"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogTotalSinceLastViewed"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogIndex"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogSystemTime"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogTrap"), ("AIRESPACE-SWITCHING-MIB", "agentRadioUpDownTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApAssociateDisassociateTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApLoadProfileFailTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApNoiseProfileFailTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApInterferenceProfileFailTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApCoverageProfileFailTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoLwappTransportMode"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoPowerSupply1Present"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoPowerSupply1Operational"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoPowerSupply2Present"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoPowerSupply2Operational"), ("AIRESPACE-SWITCHING-MIB", "agentCurrentCPUUtilization"), ("AIRESPACE-SWITCHING-MIB", "agentTotalMemory"), ("AIRESPACE-SWITCHING-MIB", "agentFreeMemory"), ("AIRESPACE-SWITCHING-MIB", "agentWcpDeviceName"), ("AIRESPACE-SWITCHING-MIB", "agentWcpSlotNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpPeerPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpPeerIpAddress"), ("AIRESPACE-SWITCHING-MIB", "agentWcpControllerTableChecksum"), ("AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoSlotNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingAgentInfoGroup = bsnSwitchingAgentInfoGroup.setStatus('current')
if mibBuilder.loadTexts: bsnSwitchingAgentInfoGroup.setDescription('This collection of objects provide switching information.')
bsnSwitchingAgentConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 2)).setObjects(("AIRESPACE-SWITCHING-MIB", "agentLoginSessionIndex"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionUserName"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionConnectionType"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionIdleTime"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionSessionTime"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionStatus"), ("AIRESPACE-SWITCHING-MIB", "agentTelnetLoginTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentTelnetMaxSessions"), ("AIRESPACE-SWITCHING-MIB", "agentTelnetAllowNewMode"), ("AIRESPACE-SWITCHING-MIB", "agentSSHAllowNewMode"), ("AIRESPACE-SWITCHING-MIB", "agentSerialTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentSerialBaudrate"), ("AIRESPACE-SWITCHING-MIB", "agentSerialCharacterSize"), ("AIRESPACE-SWITCHING-MIB", "agentSerialHWFlowControlMode"), ("AIRESPACE-SWITCHING-MIB", "agentSerialStopBits"), ("AIRESPACE-SWITCHING-MIB", "agentSerialParityType"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkSubnetMask"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkDefaultGateway"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkBurnedInMacAddress"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkConfigProtocol"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkSecureWebMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkMulticastMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkDsPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkUserIdleTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkArpTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkManagementVlan"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkAllowMgmtViaWireless"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkBroadcastSsidMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkSecureWebPassword"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebAdminCertType"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebAuthCertRegenerateCmdInvoke"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebAdminCertRegenerateCmdInvoke"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebAuthCertType"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkRouteIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkRouteIPNetmask"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkRouteGateway"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkRouteStatus"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkPeerToPeerBlockingMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkMulticastGroupAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceName"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceVlanId"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceType"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceMacAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceIPNetmask"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceIPGateway"), ("AIRESPACE-SWITCHING-MIB", "agentInterfacePortNo"), ("AIRESPACE-SWITCHING-MIB", "agentInterfacePrimaryDhcpAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceSecondaryDhcpAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceDhcpProtocol"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceDnsHostName"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceAclName"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceAPManagementFeature"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceActivePortNo"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceBackupPortNo"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceVlanQuarantine"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceRowStatus"), ("AIRESPACE-SWITCHING-MIB", "agentNtpPollingInterval"), ("AIRESPACE-SWITCHING-MIB", "agentNtpServerIndex"), ("AIRESPACE-SWITCHING-MIB", "agentNtpServerAddress"), ("AIRESPACE-SWITCHING-MIB", "agentNtpServerRowStatus"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeIndex"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeName"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeLeaseTime"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetwork"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetmask"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopePoolStartAddress"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopePoolEndAddress"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDefaultRouterAddress1"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDefaultRouterAddress2"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDefaultRouterAddress3"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDnsDomainName"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDnsServerAddress1"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDnsServerAddress2"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDnsServerAddress3"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetbiosNameServerAddress1"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetbiosNameServerAddress2"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetbiosNameServerAddress3"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeState"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeRowStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpVersion1Status"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpVersion2cStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityName"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityIPMask"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityAccessMode"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityEnabled"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverName"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverEnabled"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpAuthenticationTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpLinkUpDownTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpMultipleUsersTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpSpanningTreeTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpVersion3Status"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserName"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserAccessMode"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserAuthenticationType"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserEncryptionType"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserAuthenticationPassword"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserEncryptionPassword"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSpanningTreeMode"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchAddressAgingTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchBroadcastControlMode"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchDot3FlowControlMode"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchLwappTransportMode"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadMode"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadServerIP"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadPath"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadFilename"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadDataType"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadStart"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadStatus"), ("AIRESPACE-SWITCHING-MIB", "agentTransferConfigurationFileEncryption"), ("AIRESPACE-SWITCHING-MIB", "agentTransferConfigurationFileEncryptionKey"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadMode"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadServerIP"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadPath"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadFilename"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadDataType"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadStart"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadStatus"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadTftpMaxRetries"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadTftpTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentPortDot1dBasePort"), ("AIRESPACE-SWITCHING-MIB", "agentPortIfIndex"), ("AIRESPACE-SWITCHING-MIB", "agentPortIanaType"), ("AIRESPACE-SWITCHING-MIB", "agentPortSTPMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortSTPState"), ("AIRESPACE-SWITCHING-MIB", "agentPortAdminMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortPhysicalMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortPhysicalStatus"), ("AIRESPACE-SWITCHING-MIB", "agentPortLinkTrapMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortClearStats"), ("AIRESPACE-SWITCHING-MIB", "agentPortDefaultType"), ("AIRESPACE-SWITCHING-MIB", "agentPortType"), ("AIRESPACE-SWITCHING-MIB", "agentPortAutoNegAdminStatus"), ("AIRESPACE-SWITCHING-MIB", "agentPortDot3FlowControlMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortPowerMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortMirrorMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortMulticastApplianceMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortOperationalStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingAgentConfigGroup = bsnSwitchingAgentConfigGroup.setStatus('current')
if mibBuilder.loadTexts: bsnSwitchingAgentConfigGroup.setDescription('This collection of objects provide switching configuration information.')
bsnSwitchingAgentSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 3)).setObjects(("AIRESPACE-SWITCHING-MIB", "agentSaveConfig"), ("AIRESPACE-SWITCHING-MIB", "agentClearConfig"), ("AIRESPACE-SWITCHING-MIB", "agentClearLags"), ("AIRESPACE-SWITCHING-MIB", "agentClearLoginSessions"), ("AIRESPACE-SWITCHING-MIB", "agentClearPortStats"), ("AIRESPACE-SWITCHING-MIB", "agentClearSwitchStats"), ("AIRESPACE-SWITCHING-MIB", "agentClearTrapLog"), ("AIRESPACE-SWITCHING-MIB", "agentResetSystem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingAgentSystemGroup = bsnSwitchingAgentSystemGroup.setStatus('current')
if mibBuilder.loadTexts: bsnSwitchingAgentSystemGroup.setDescription('This collection of objects provide switching system information and config.')
bsnSwitchingAgentStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 4)).setObjects(("AIRESPACE-SWITCHING-MIB", "portStatsIndex"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx64Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx65to127Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx128to255Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx256to511Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx512to1023Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx1024to1518Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsRx1519to1530Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx1519to1530Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTxOversizeOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingAgentStatsGroup = bsnSwitchingAgentStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bsnSwitchingAgentStatsGroup.setDescription('This collection of objects provide switching statistics.')
bsnSwitchingObsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 5)).setObjects(("AIRESPACE-SWITCHING-MIB", "agentLagConfigCreate"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryName"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryLagIndex"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryLinkTrap"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryAdminMode"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryStpMode"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryAddPort"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryDeletePort"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryPortsBitMask"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryStatus"), ("AIRESPACE-SWITCHING-MIB", "agentLagDetailedLagIndex"), ("AIRESPACE-SWITCHING-MIB", "agentLagDetailedIfIndex"), ("AIRESPACE-SWITCHING-MIB", "agentLagDetailedPortSpeed"), ("AIRESPACE-SWITCHING-MIB", "agentLagConfigMode"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortSubnetMask"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortBurnedInMacAddress"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortConfigProtocol"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpBroadcastStormTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentDot3adAggPort"), ("AIRESPACE-SWITCHING-MIB", "agentDot3adAggPortLACPMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkGvrpStatus"), ("AIRESPACE-SWITCHING-MIB", "agentPortGvrpStatus"), ("AIRESPACE-SWITCHING-MIB", "agentPortGarpJoinTime"), ("AIRESPACE-SWITCHING-MIB", "agentPortGarpLeaveTime"), ("AIRESPACE-SWITCHING-MIB", "agentPortGarpLeaveAllTime"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryFlushTimer"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortDefaultGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingObsGroup = bsnSwitchingObsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: bsnSwitchingObsGroup.setDescription('This collection of objects are obsoleted in bsnSwitching module.')
bsnSwitchingTrap = NotificationGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 6)).setObjects(("AIRESPACE-SWITCHING-MIB", "multipleUsersTrap"), ("AIRESPACE-SWITCHING-MIB", "broadcastStormStartTrap"), ("AIRESPACE-SWITCHING-MIB", "broadcastStormEndTrap"), ("AIRESPACE-SWITCHING-MIB", "linkFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "vlanRequestFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "vlanDeleteLastTrap"), ("AIRESPACE-SWITCHING-MIB", "vlanDefaultCfgFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "vlanRestoreFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "fanFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "stpInstanceNewRootTrap"), ("AIRESPACE-SWITCHING-MIB", "stpInstanceTopologyChangeTrap"), ("AIRESPACE-SWITCHING-MIB", "powerSupplyStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingTrap = bsnSwitchingTrap.setStatus('current')
if mibBuilder.loadTexts: bsnSwitchingTrap.setDescription('This collection of objects provides switching related notification.')
mibBuilder.exportSymbols("AIRESPACE-SWITCHING-MIB", agentSnmpCommunityConfigTable=agentSnmpCommunityConfigTable, agentSnmpTrapReceiverConfigEntry=agentSnmpTrapReceiverConfigEntry, portStatsIndex=portStatsIndex, agentSnmpCommunityConfigEntry=agentSnmpCommunityConfigEntry, agentLagSummaryConfigTable=agentLagSummaryConfigTable, portStatsTable=portStatsTable, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, agentApCoverageProfileFailTrapCount=agentApCoverageProfileFailTrapCount, agentTrapLogIndex=agentTrapLogIndex, agentPortIanaType=agentPortIanaType, agentRadioUpDownTrapCount=agentRadioUpDownTrapCount, agentTransferDownloadGroup=agentTransferDownloadGroup, agentNetworkArpTimeout=agentNetworkArpTimeout, bsnSwitchingAgentSystemGroup=bsnSwitchingAgentSystemGroup, agentTransferConfigurationFileEncryption=agentTransferConfigurationFileEncryption, portStatsPktsTx128to255Octets=portStatsPktsTx128to255Octets, agentApNoiseProfileFailTrapCount=agentApNoiseProfileFailTrapCount, agentTotalMemory=agentTotalMemory, agentInterfaceMacAddress=agentInterfaceMacAddress, agentNetworkAllowMgmtViaWireless=agentNetworkAllowMgmtViaWireless, agentLoginSessionIPAddress=agentLoginSessionIPAddress, agentPortDefaultType=agentPortDefaultType, agentNtpConfigGroup=agentNtpConfigGroup, agentSnmpV3UserEncryptionType=agentSnmpV3UserEncryptionType, agentLagSummaryFlushTimer=agentLagSummaryFlushTimer, agentSnmpTrapReceiverConfigTable=agentSnmpTrapReceiverConfigTable, agentInterfaceDnsHostName=agentInterfaceDnsHostName, agentInventoryOperatingSystem=agentInventoryOperatingSystem, agentDhcpScopeRowStatus=agentDhcpScopeRowStatus, agentPortAdminMode=agentPortAdminMode, productGroup4=productGroup4, agentDhcpScopeEntry=agentDhcpScopeEntry, agentPortPhysicalMode=agentPortPhysicalMode, agentLagConfigMode=agentLagConfigMode, agentSwitchDot3FlowControlMode=agentSwitchDot3FlowControlMode, agentTransferDownloadStatus=agentTransferDownloadStatus, multipleUsersTrap=multipleUsersTrap, agentNetworkDefaultGateway=agentNetworkDefaultGateway, agentPortPhysicalStatus=agentPortPhysicalStatus, agentNetworkGvrpStatus=agentNetworkGvrpStatus, agentInventoryMaxNumberOfAPsSupported=agentInventoryMaxNumberOfAPsSupported, agentNtpServerTable=agentNtpServerTable, agentNetworkRouteConfigTable=agentNetworkRouteConfigTable, switchingTraps=switchingTraps, agentSnmpMultipleUsersTrapFlag=agentSnmpMultipleUsersTrapFlag, agentTrapLogTotalSinceLastViewed=agentTrapLogTotalSinceLastViewed, agentSerialCharacterSize=agentSerialCharacterSize, agentPortType=agentPortType, agentDhcpScopeDnsServerAddress2=agentDhcpScopeDnsServerAddress2, agentFreeMemory=agentFreeMemory, agentDhcpScopePoolStartAddress=agentDhcpScopePoolStartAddress, agentTransferUploadGroup=agentTransferUploadGroup, agentSystemGroup=agentSystemGroup, agentSwitchInfoPowerSupply1Present=agentSwitchInfoPowerSupply1Present, agentInterfaceIPAddress=agentInterfaceIPAddress, productGroup3=productGroup3, bsnSwitchingGroups=bsnSwitchingGroups, portStatsEntry=portStatsEntry, agentInterfaceSecondaryDhcpAddress=agentInterfaceSecondaryDhcpAddress, vlanRequestFailureTrap=vlanRequestFailureTrap, agentSnmpCommunityName=agentSnmpCommunityName, agentWcpSlotNumber=agentWcpSlotNumber, agentTransferDownloadDataType=agentTransferDownloadDataType, agentServicePortBurnedInMacAddress=agentServicePortBurnedInMacAddress, agentDhcpScopeDefaultRouterAddress2=agentDhcpScopeDefaultRouterAddress2, agentNetworkConfigProtocol=agentNetworkConfigProtocol, agentInterfaceIPNetmask=agentInterfaceIPNetmask, broadcastStormEndTrap=broadcastStormEndTrap, agentClearConfig=agentClearConfig, agentSnmpAuthenticationTrapFlag=agentSnmpAuthenticationTrapFlag, broadcastStormStartTrap=broadcastStormStartTrap, agentDot3adAggPortLACPMode=agentDot3adAggPortLACPMode, agentConfigGroup=agentConfigGroup, agentSnmpCommunityEnabled=agentSnmpCommunityEnabled, agentInventoryMaintenanceLevel=agentInventoryMaintenanceLevel, agentTransferDownloadStart=agentTransferDownloadStart, agentClearSwitchStats=agentClearSwitchStats, agentNetworkBurnedInMacAddress=agentNetworkBurnedInMacAddress, agentLagSummaryLagIndex=agentLagSummaryLagIndex, agentLagConfigCreate=agentLagConfigCreate, agentWcpDeviceName=agentWcpDeviceName, agentTransferUploadStart=agentTransferUploadStart, agentSwitchBroadcastControlMode=agentSwitchBroadcastControlMode, agentNetworkRouteIPNetmask=agentNetworkRouteIPNetmask, agentInterfaceActivePortNo=agentInterfaceActivePortNo, agentNetworkManagementVlan=agentNetworkManagementVlan, bsnSwitchingCompliances=bsnSwitchingCompliances, agentLoginSessionEntry=agentLoginSessionEntry, fanFailureTrap=fanFailureTrap, agentWcpPeerPortNumber=agentWcpPeerPortNumber, agentInterfaceIPGateway=agentInterfaceIPGateway, agentSSHAllowNewMode=agentSSHAllowNewMode, agentNetworkRouteConfigEntry=agentNetworkRouteConfigEntry, agentLagSummaryLinkTrap=agentLagSummaryLinkTrap, agentWcpControllerInfoIpAddress=agentWcpControllerInfoIpAddress, agentInterfaceVlanId=agentInterfaceVlanId, agentLoginSessionIdleTime=agentLoginSessionIdleTime, agentInterfaceType=agentInterfaceType, agentLagSummaryDeletePort=agentLagSummaryDeletePort, agentSnmpV3UserAuthenticationPassword=agentSnmpV3UserAuthenticationPassword, agentLagConfigGroup=agentLagConfigGroup, agentLagSummaryConfigEntry=agentLagSummaryConfigEntry, bsnSwitchingObsGroup=bsnSwitchingObsGroup, agentNetworkWebAdminCertRegenerateCmdInvoke=agentNetworkWebAdminCertRegenerateCmdInvoke, productGroup2=productGroup2, agentDhcpScopeNetbiosNameServerAddress2=agentDhcpScopeNetbiosNameServerAddress2, portStatsPktsTx65to127Octets=portStatsPktsTx65to127Octets, agentServicePortIPAddress=agentServicePortIPAddress, agentSaveConfig=agentSaveConfig, agentClearTrapLog=agentClearTrapLog, agentSwitchConfigGroup=agentSwitchConfigGroup, agentInventoryMachineType=agentInventoryMachineType, agentDhcpConfigGroup=agentDhcpConfigGroup, agentTrapLogGroup=agentTrapLogGroup, agentSerialTimeout=agentSerialTimeout, agentSerialStopBits=agentSerialStopBits, agentNetworkMulticastMode=agentNetworkMulticastMode, agentDhcpScopeDnsDomainName=agentDhcpScopeDnsDomainName, agentSnmpTrapReceiverEnabled=agentSnmpTrapReceiverEnabled, agentLagSummaryName=agentLagSummaryName, agentSnmpV3UserStatus=agentSnmpV3UserStatus, agentNtpServerRowStatus=agentNtpServerRowStatus, agentSnmpSpanningTreeTrapFlag=agentSnmpSpanningTreeTrapFlag, agentApInterferenceProfileFailTrapCount=agentApInterferenceProfileFailTrapCount, agentSnmpVersion2cStatus=agentSnmpVersion2cStatus, agentLoginSessionSessionTime=agentLoginSessionSessionTime, agentSwitchAddressAgingTimeoutEntry=agentSwitchAddressAgingTimeoutEntry, agentPortMulticastApplianceMode=agentPortMulticastApplianceMode, agentNetworkSubnetMask=agentNetworkSubnetMask, agentNetworkRouteIPAddress=agentNetworkRouteIPAddress, agentWcpPortNumber=agentWcpPortNumber, agentCurrentCPUUtilization=agentCurrentCPUUtilization, agentLagSummaryStatus=agentLagSummaryStatus, portStatsPktsTx256to511Octets=portStatsPktsTx256to511Octets, productGroup1=productGroup1, agentSerialParityType=agentSerialParityType, agentPortConfigEntry=agentPortConfigEntry, agentWcpInfoGroup=agentWcpInfoGroup, agentInterfaceBackupPortNo=agentInterfaceBackupPortNo, vlanDeleteLastTrap=vlanDeleteLastTrap, agentWcpControllerInfoSlotNumber=agentWcpControllerInfoSlotNumber, agentResourceInfoGroup=agentResourceInfoGroup, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, agentNetworkPeerToPeerBlockingMode=agentNetworkPeerToPeerBlockingMode, agentNetworkMulticastGroupAddress=agentNetworkMulticastGroupAddress, agentSnmpVersion3Status=agentSnmpVersion3Status, vlanRestoreFailureTrap=vlanRestoreFailureTrap, agentPortAutoNegAdminStatus=agentPortAutoNegAdminStatus, agentNetworkBroadcastSsidMode=agentNetworkBroadcastSsidMode, agentTransferUploadServerIP=agentTransferUploadServerIP, agentSnmpTrapReceiverStatus=agentSnmpTrapReceiverStatus, agentPortGvrpStatus=agentPortGvrpStatus, agentPortSTPState=agentPortSTPState, agentSnmpVersion1Status=agentSnmpVersion1Status, agentTransferDownloadTftpTimeout=agentTransferDownloadTftpTimeout, agentSpanningTreeMode=agentSpanningTreeMode, portStatsPktsTx64Octets=portStatsPktsTx64Octets, agentLagDetailedConfigEntry=agentLagDetailedConfigEntry, agentNetworkRouteStatus=agentNetworkRouteStatus, agentTransferUploadMode=agentTransferUploadMode, agentSnmpV3UserConfigEntry=agentSnmpV3UserConfigEntry, agentDhcpScopeDnsServerAddress3=agentDhcpScopeDnsServerAddress3, agentSwitchInfoPowerSupply2Operational=agentSwitchInfoPowerSupply2Operational, agentApLoadProfileFailTrapCount=agentApLoadProfileFailTrapCount, agentSnmpBroadcastStormTrapFlag=agentSnmpBroadcastStormTrapFlag, agentSerialGroup=agentSerialGroup, agentWcpControllerInfoTable=agentWcpControllerInfoTable, agentNetworkWebAuthCertType=agentNetworkWebAuthCertType, portStatsPktsTxOversizeOctets=portStatsPktsTxOversizeOctets, agentDot3adAggPortTable=agentDot3adAggPortTable, agentLoginSessionTable=agentLoginSessionTable, agentInterfaceConfigTable=agentInterfaceConfigTable, agentTrapLogSystemTime=agentTrapLogSystemTime, agentSwitchInfoPowerSupply1Operational=agentSwitchInfoPowerSupply1Operational, agentInventoryMachineModel=agentInventoryMachineModel, agentSpanningTreeConfigGroup=agentSpanningTreeConfigGroup, agentWcpControllerTableChecksum=agentWcpControllerTableChecksum, agentTransferDownloadServerIP=agentTransferDownloadServerIP, agentInventoryIsGigECardPresent=agentInventoryIsGigECardPresent, agentPortConfigTable=agentPortConfigTable, agentLagSummaryAdminMode=agentLagSummaryAdminMode, agentDhcpScopeNetwork=agentDhcpScopeNetwork, agentResetSystem=agentResetSystem, agentLoginSessionConnectionType=agentLoginSessionConnectionType, agentPortOperationalStatus=agentPortOperationalStatus, agentPortDot3FlowControlMode=agentPortDot3FlowControlMode, agentTransferConfigurationFileEncryptionKey=agentTransferConfigurationFileEncryptionKey, agentNtpServerAddress=agentNtpServerAddress, agentPortGarpLeaveAllTime=agentPortGarpLeaveAllTime, agentSwitchAddressAgingTimeout=agentSwitchAddressAgingTimeout, agentDhcpScopeDefaultRouterAddress3=agentDhcpScopeDefaultRouterAddress3, agentServicePortDefaultGateway=agentServicePortDefaultGateway, agentSnmpV3UserName=agentSnmpV3UserName, agentPortSTPMode=agentPortSTPMode, portStatsPktsTx1519to1530Octets=portStatsPktsTx1519to1530Octets, agentCLIConfigGroup=agentCLIConfigGroup, bsnSwitchingAgentConfigGroup=bsnSwitchingAgentConfigGroup, agentDot3adAggPort=agentDot3adAggPort, agentPortDot1dBasePort=agentPortDot1dBasePort, agentSnmpV3UserEncryptionPassword=agentSnmpV3UserEncryptionPassword, agentSwitchAddressAgingTimeoutTable=agentSwitchAddressAgingTimeoutTable, agentSnmpTrapPortNumber=agentSnmpTrapPortNumber, agentTrapLogTotal=agentTrapLogTotal, agentNetworkWebMode=agentNetworkWebMode, agentSnmpTrapReceiverName=agentSnmpTrapReceiverName, agentTransferDownloadFilename=agentTransferDownloadFilename, agentTransferDownloadTftpMaxRetries=agentTransferDownloadTftpMaxRetries, agentNetworkConfigGroup=agentNetworkConfigGroup, agentInterfaceConfigEntry=agentInterfaceConfigEntry, agentTransferUploadPath=agentTransferUploadPath, agentInventorySysDescription=agentInventorySysDescription, agentDhcpScopeNetmask=agentDhcpScopeNetmask, stats=stats, agentPortMirrorMode=agentPortMirrorMode, agentSnmpV3UserAccessMode=agentSnmpV3UserAccessMode, agentNetworkIPAddress=agentNetworkIPAddress, agentSnmpCommunityStatus=agentSnmpCommunityStatus, agentTrapLogTrap=agentTrapLogTrap, agentSerialBaudrate=agentSerialBaudrate, bsnSwitching=bsnSwitching, agentInterfaceVlanQuarantine=agentInterfaceVlanQuarantine, agentPortGarpLeaveTime=agentPortGarpLeaveTime, agentSerialHWFlowControlMode=agentSerialHWFlowControlMode, agentClearLags=agentClearLags, agentSwitchInfoGroup=agentSwitchInfoGroup, agentWcpControllerInfoEntry=agentWcpControllerInfoEntry, agentInterfaceDhcpProtocol=agentInterfaceDhcpProtocol, agentNetworkWebAuthCertRegenerateCmdInvoke=agentNetworkWebAuthCertRegenerateCmdInvoke, agentPortIfIndex=agentPortIfIndex, agentDhcpScopePoolEndAddress=agentDhcpScopePoolEndAddress, agentLoginSessionStatus=agentLoginSessionStatus, portStatsPktsRx1519to1530Octets=portStatsPktsRx1519to1530Octets, agentTransferDownloadPath=agentTransferDownloadPath, agentWcpControllerInfoPortNumber=agentWcpControllerInfoPortNumber, agentLagDetailedIfIndex=agentLagDetailedIfIndex, agentDhcpScopeNetbiosNameServerAddress1=agentDhcpScopeNetbiosNameServerAddress1, agentDhcpScopeIndex=agentDhcpScopeIndex, agentDhcpScopeName=agentDhcpScopeName, agentLoginSessionUserName=agentLoginSessionUserName, agentNetworkSecureWebPassword=agentNetworkSecureWebPassword, agentWcpPeerIpAddress=agentWcpPeerIpAddress, agentInventoryFipsModeEnabled=agentInventoryFipsModeEnabled, agentSnmpConfigGroup=agentSnmpConfigGroup, bsnSwitchingTrap=bsnSwitchingTrap, agentSnmpV3UserConfigTable=agentSnmpV3UserConfigTable, agentTelnetAllowNewMode=agentTelnetAllowNewMode, agentDhcpScopeTable=agentDhcpScopeTable, agentInterfaceRowStatus=agentInterfaceRowStatus, bsnSwitchingAgentStatsGroup=bsnSwitchingAgentStatsGroup, agentInterfacePrimaryDhcpAddress=agentInterfacePrimaryDhcpAddress, agentLagSummaryAddPort=agentLagSummaryAddPort, agentDot3adAggPortEntry=agentDot3adAggPortEntry, agentSnmpCommunityAccessMode=agentSnmpCommunityAccessMode, agentTransferConfigGroup=agentTransferConfigGroup)
mibBuilder.exportSymbols("AIRESPACE-SWITCHING-MIB", agentLagDetailedLagIndex=agentLagDetailedLagIndex, agentInterfaceName=agentInterfaceName, agentSnmpTrapReceiverIPAddress=agentSnmpTrapReceiverIPAddress, agentSwitchInfoPowerSupply2Present=agentSwitchInfoPowerSupply2Present, agentTransferUploadDataType=agentTransferUploadDataType, agentInterfaceAclName=agentInterfaceAclName, agentNtpServerIndex=agentNtpServerIndex, agentServicePortSubnetMask=agentServicePortSubnetMask, agentServicePortConfigProtocol=agentServicePortConfigProtocol, agentProductGroup=agentProductGroup, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, agentSnmpV3ConfigGroup=agentSnmpV3ConfigGroup, agentClearLoginSessions=agentClearLoginSessions, agentNetworkRouteGateway=agentNetworkRouteGateway, agentPortGarpJoinTime=agentPortGarpJoinTime, agentInterfaceAPManagementFeature=agentInterfaceAPManagementFeature, agentNtpServerEntry=agentNtpServerEntry, agentNtpPollingInterval=agentNtpPollingInterval, agentInventoryManufacturerName=agentInventoryManufacturerName, agentNetworkDsPortNumber=agentNetworkDsPortNumber, agentClearPortStats=agentClearPortStats, portStatsPktsTx1024to1518Octets=portStatsPktsTx1024to1518Octets, agentTelnetLoginTimeout=agentTelnetLoginTimeout, agentPortLinkTrapMode=agentPortLinkTrapMode, agentInventoryIsCryptoCard2Present=agentInventoryIsCryptoCard2Present, agentDhcpScopeDefaultRouterAddress1=agentDhcpScopeDefaultRouterAddress1, agentInventoryGroup=agentInventoryGroup, agentSnmpCommunityIPMask=agentSnmpCommunityIPMask, agentInventoryIsForeignAPSupported=agentInventoryIsForeignAPSupported, agentTransferDownloadMode=agentTransferDownloadMode, agentSnmpCommunityIPAddress=agentSnmpCommunityIPAddress, agentNetworkUserIdleTimeout=agentNetworkUserIdleTimeout, agentPortPowerMode=agentPortPowerMode, PYSNMP_MODULE_ID=bsnSwitching, agentTransferUploadFilename=agentTransferUploadFilename, agentTransferUploadStatus=agentTransferUploadStatus, agentLagSummaryStpMode=agentLagSummaryStpMode, agentNetworkWebAdminCertType=agentNetworkWebAdminCertType, agentLagDetailedPortSpeed=agentLagDetailedPortSpeed, agentLoginSessionIndex=agentLoginSessionIndex, bsnSwitchingAgentInfoGroup=bsnSwitchingAgentInfoGroup, agentApAssociateDisassociateTrapCount=agentApAssociateDisassociateTrapCount, agentDhcpScopeState=agentDhcpScopeState, agentLagDetailedConfigTable=agentLagDetailedConfigTable, agentSwitchLwappTransportMode=agentSwitchLwappTransportMode, bsnSwitchingCompliance=bsnSwitchingCompliance, linkFailureTrap=linkFailureTrap, agentInfoGroup=agentInfoGroup, agentDhcpScopeLeaseTime=agentDhcpScopeLeaseTime, agentDhcpScopeNetbiosNameServerAddress3=agentDhcpScopeNetbiosNameServerAddress3, agentInventorySerialNumber=agentInventorySerialNumber, agentSnmpTrapFlagsConfigGroup=agentSnmpTrapFlagsConfigGroup, agentSwitchInfoLwappTransportMode=agentSwitchInfoLwappTransportMode, portStatsPktsTx512to1023Octets=portStatsPktsTx512to1023Octets, agentSnmpLinkUpDownTrapFlag=agentSnmpLinkUpDownTrapFlag, agentTelnetMaxSessions=agentTelnetMaxSessions, agentTelnetConfigGroup=agentTelnetConfigGroup, agentInventoryProductVersion=agentInventoryProductVersion, agentServicePortConfigGroup=agentServicePortConfigGroup, agentSnmpV3UserAuthenticationType=agentSnmpV3UserAuthenticationType, agentDhcpScopeDnsServerAddress1=agentDhcpScopeDnsServerAddress1, agentInventoryBurnedInMacAddress=agentInventoryBurnedInMacAddress, agentInventoryIsCryptoCardPresent=agentInventoryIsCryptoCardPresent, agentInterfacePortNo=agentInterfacePortNo, stpInstanceNewRootTrap=stpInstanceNewRootTrap, agentInventoryProductName=agentInventoryProductName, agentNetworkSecureWebMode=agentNetworkSecureWebMode, agentTrapLogEntry=agentTrapLogEntry, agentTrapLogTable=agentTrapLogTable, agentPortClearStats=agentPortClearStats, agentLagSummaryPortsBitMask=agentLagSummaryPortsBitMask)
