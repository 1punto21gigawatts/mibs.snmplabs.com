#
# PySNMP MIB module RADLAN-CLI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-CLI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:45:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Counter64, NotificationType, ModuleIdentity, Bits, Gauge32, IpAddress, TimeTicks, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Counter64", "NotificationType", "ModuleIdentity", "Bits", "Gauge32", "IpAddress", "TimeTicks", "ObjectIdentity", "Unsigned32")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
rlCli = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 52))
rlCli.setRevisions(('2010-05-25 00:00', '2007-01-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlCli.setRevisionsDescriptions(('This private MIB module defines CLI private MIBs.', 'Initial revision.',))
if mibBuilder.loadTexts: rlCli.setLastUpdated('201005250000Z')
if mibBuilder.loadTexts: rlCli.setOrganization('Radlan - a MARVELL company. Marvell Semiconductor, Inc.')
if mibBuilder.loadTexts: rlCli.setContactInfo('www.marvell.com')
if mibBuilder.loadTexts: rlCli.setDescription('Remote CLI branch has been added.')
rlCliMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCliMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlCliMibVersion.setDescription("MIB's version, the current version is 3.")
rlCliPassword = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCliPassword.setStatus('current')
if mibBuilder.loadTexts: rlCliPassword.setDescription('CLI Password')
rlCliTimer = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCliTimer.setStatus('current')
if mibBuilder.loadTexts: rlCliTimer.setDescription('CLI Timer')
rlCliFileEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCliFileEnable.setStatus('current')
if mibBuilder.loadTexts: rlCliFileEnable.setDescription('CLI File Enable/Disable')
rlCliFileEnableAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCliFileEnableAfterReset.setStatus('current')
if mibBuilder.loadTexts: rlCliFileEnableAfterReset.setDescription('CLI File Enable/Disable After Reset')
rlCLIremoteCLIsupport = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 52, 6))
rlCLIremoteCLIcommand = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("takeRemoteCLI", 1), ("releaseRemoteCLI", 2), ("applySentCLI", 3), ("deleteCommandsCLI", 4), ("setEchoModeCLI", 5), ("unsetEchoModeCLI", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCLIremoteCLIcommand.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIcommand.setDescription('Commands that can be given for execution of CLI from remote: takeRemoteCLI: take resources of remote CLI activation releaseRemoteCLI: free resources of remote CLI activation applySentCLI: apply the CLI commands that are currently in rlCLIremoteCLIcommandsTable. deleteCommandsCLI: delete all the CLI commands that are currently in rlCLIremoteCLIcommandsTable. setEchoModeCLI: entered commands will appear before its output in rlCLIremoteCLIoutputsTable. unsetEchoModeCLI: entered commands will not appear in rlCLIremoteCLIoutputsTable.')
rlCLIremoteCLIexecutionState = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("free", 1), ("notActive", 2), ("inProcess", 3), ("outputAvailable", 4), ("waitingForOutputRetrieval", 5), ("done", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCLIremoteCLIexecutionState.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIexecutionState.setDescription("The execution state of remote CLI: notActive: no 'applySentCLI' command has been given. This is the default state. The remote CLI reverts to this state each time when the 1st entry is added to rlCLIremoteCLIcommandsTable. inProcess: Executing commands - no output available outputAvailable: Some output is already available, although the commands execution may not be finished yet. waitingForOutputRetrieval: The rlCLIremoteCLIoutputsTable is full and remote CLI is waiting for the manager to retrieve the output. done: All the commands in rlCLIremoteCLIcommandsTable have been executed.")
rlCLIremoteCLIexecutionCommandIndex = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 6, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCLIremoteCLIexecutionCommandIndex.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIexecutionCommandIndex.setDescription('Index of command, which is currently in execution. 0 if none.')
rlCLIremoteCLImode = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteCLIOutputOnGet", 1), ("keepCLIOutputOnGet", 2))).clone('deleteCLIOutputOnGet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCLIremoteCLImode.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLImode.setDescription('Operation mode of remote CLI: deleteCLIOutputOnGet: output row will be deleted after GET. Recommended for reliable management channels. keepCLIOutputOnGet: output row will be kept after GET, will be deleted only explicitly by remote CLI client or upon release of remote CLI resources. Recommended for non-reliable management channels.')
rlCLIremoteCLIcommandsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 52, 6, 5), )
if mibBuilder.loadTexts: rlCLIremoteCLIcommandsTable.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIcommandsTable.setDescription('A list of CLI commands to execute.')
rlCLIremoteCLIcommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 52, 6, 5, 1), ).setIndexNames((0, "RADLAN-CLI-MIB", "rlCLIremoteCLIcommandIndex"), (0, "RADLAN-CLI-MIB", "rlCLIremoteCLIcommandPartNumber"))
if mibBuilder.loadTexts: rlCLIremoteCLIcommandsEntry.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIcommandsEntry.setDescription('An entry containing a part of a CLI command.')
rlCLIremoteCLIcommandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rlCLIremoteCLIcommandIndex.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIcommandIndex.setDescription('The index of the command. The commands will be executed in order of their indexes.')
rlCLIremoteCLIcommandPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rlCLIremoteCLIcommandPartNumber.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIcommandPartNumber.setDescription('The part of the command. Long commands will be divided in several parts, which will be concatenated before execution.')
rlCLIremoteCLIcommandPart = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 5, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlCLIremoteCLIcommandPart.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIcommandPart.setDescription('The text of the command part.')
rlCLIremoteCLIcommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlCLIremoteCLIcommandStatus.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIcommandStatus.setDescription('The status of this entry.')
rlCLIremoteCLIactivationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCLIremoteCLIactivationStatus.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIactivationStatus.setDescription('Activation status of the command. Any value greater than 0 indicates that the command has been activated and failed')
rlCLIremoteCLIoutputsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 52, 6, 6), )
if mibBuilder.loadTexts: rlCLIremoteCLIoutputsTable.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIoutputsTable.setDescription('A list of CLI output rows.')
rlCLIremoteCLIoutputsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 52, 6, 6, 1), ).setIndexNames((0, "RADLAN-CLI-MIB", "rlCLIremoteCLIoutputRowIndex"), (0, "RADLAN-CLI-MIB", "rlCLIremoteCLIoutputRowPartNumber"))
if mibBuilder.loadTexts: rlCLIremoteCLIoutputsEntry.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIoutputsEntry.setDescription('An entry containing a part of a CLI output row.')
rlCLIremoteCLIoutputRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rlCLIremoteCLIoutputRowIndex.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIoutputRowIndex.setDescription('The index of the output row.')
rlCLIremoteCLIoutputRowPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rlCLIremoteCLIoutputRowPartNumber.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIoutputRowPartNumber.setDescription('The part of the output row.')
rlCLIremoteCLIoutputRowPart = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCLIremoteCLIoutputRowPart.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIoutputRowPart.setDescription('The text of the output row part.')
rlCLIremoteCLIoutputRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 6, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCLIremoteCLIoutputRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIoutputRowStatus.setDescription('The status of the command part. Only destroy will be accepted as value for SET.')
rlCLIremoteCLIoutputCommandNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 52, 6, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCLIremoteCLIoutputCommandNumber.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIoutputCommandNumber.setDescription('The command index of the command whose activation generated thist output row.')
rlCLIremoteCLIinstance = MibScalar((1, 3, 6, 1, 4, 1, 89, 52, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCLIremoteCLIinstance.setStatus('current')
if mibBuilder.loadTexts: rlCLIremoteCLIinstance.setDescription('The remote CLI instance. A value of 0xFFFFFFFF indicates that no instance corresponding to the client was found.')
mibBuilder.exportSymbols("RADLAN-CLI-MIB", rlCLIremoteCLIexecutionState=rlCLIremoteCLIexecutionState, rlCliTimer=rlCliTimer, rlCliFileEnable=rlCliFileEnable, rlCLIremoteCLIexecutionCommandIndex=rlCLIremoteCLIexecutionCommandIndex, rlCliPassword=rlCliPassword, rlCLIremoteCLIoutputsEntry=rlCLIremoteCLIoutputsEntry, rlCli=rlCli, rlCLIremoteCLIoutputRowPart=rlCLIremoteCLIoutputRowPart, rlCliMibVersion=rlCliMibVersion, rlCLIremoteCLIcommandPart=rlCLIremoteCLIcommandPart, rlCLIremoteCLIsupport=rlCLIremoteCLIsupport, rlCLIremoteCLIoutputRowPartNumber=rlCLIremoteCLIoutputRowPartNumber, rlCLIremoteCLIcommandPartNumber=rlCLIremoteCLIcommandPartNumber, rlCLIremoteCLIcommandStatus=rlCLIremoteCLIcommandStatus, rlCLIremoteCLIcommand=rlCLIremoteCLIcommand, PYSNMP_MODULE_ID=rlCli, rlCLIremoteCLIcommandsTable=rlCLIremoteCLIcommandsTable, rlCLIremoteCLIoutputCommandNumber=rlCLIremoteCLIoutputCommandNumber, rlCliFileEnableAfterReset=rlCliFileEnableAfterReset, rlCLIremoteCLIoutputRowStatus=rlCLIremoteCLIoutputRowStatus, rlCLIremoteCLIinstance=rlCLIremoteCLIinstance, rlCLIremoteCLIcommandIndex=rlCLIremoteCLIcommandIndex, rlCLIremoteCLIoutputRowIndex=rlCLIremoteCLIoutputRowIndex, rlCLIremoteCLIoutputsTable=rlCLIremoteCLIoutputsTable, rlCLIremoteCLImode=rlCLIremoteCLImode, rlCLIremoteCLIactivationStatus=rlCLIremoteCLIactivationStatus, rlCLIremoteCLIcommandsEntry=rlCLIremoteCLIcommandsEntry)
