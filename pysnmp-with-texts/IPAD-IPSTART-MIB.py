#
# PySNMP MIB module IPAD-IPSTART-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPAD-IPSTART-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter32, Integer32, ObjectIdentity, enterprises, Gauge32, MibIdentifier, NotificationType, iso, Bits, Unsigned32, ModuleIdentity, Counter64, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Integer32", "ObjectIdentity", "enterprises", "Gauge32", "MibIdentifier", "NotificationType", "iso", "Bits", "Unsigned32", "ModuleIdentity", "Counter64", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
verilink = MibIdentifier((1, 3, 6, 1, 4, 1, 321))
hbu = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100))
ipad = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1))
ipadFrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 1))
ipadService = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 2))
ipadChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 3))
ipadDLCI = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 4))
ipadEndpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 5))
ipadUser = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 6))
ipadPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 7))
ipadModem = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 8))
ipadSvcAware = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 9))
ipadPktSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 10))
ipadTrapDest = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 11))
ipadMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 12))
ipadRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 13))
ipadSoftKey = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 14))
ipadPPPStartTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4), )
if mibBuilder.loadTexts: ipadPPPStartTable.setStatus('optional')
if mibBuilder.loadTexts: ipadPPPStartTable.setDescription('The ipad PPP Start table.')
ipadPPPStartTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1), ).setIndexNames((0, "IPAD-IPSTART-MIB", "ipadPPPStartService"))
if mibBuilder.loadTexts: ipadPPPStartTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartTableEntry.setDescription('An entry in the ipad PPP Start table.')
ipadPPPStartService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartService.setDescription('')
ipadPPPStartLCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPState.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPState.setDescription('')
ipadPPPStartLCPStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPStateTime.setDescription('')
ipadPPPStartLCPStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPStateChanges.setDescription('')
ipadPPPStartLCPMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPMRU.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPMRU.setDescription('')
ipadPPPStartLCPAsyncCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPAsyncCCM.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPAsyncCCM.setDescription('')
ipadPPPStartLCPAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("pap", 3), ("chap", 4), ("spap", 5), ("eap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPAuthProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPAuthProtocol.setDescription('')
ipadPPPStartLCPQualityProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("lqr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPQualityProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPQualityProtocol.setDescription('')
ipadPPPStartLCPMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPMagicNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPMagicNumber.setDescription('')
ipadPPPStartLCPPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPPFC.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPPFC.setDescription('')
ipadPPPStartLCPACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPACFC.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPACFC.setDescription('')
ipadPPPStartLCPFCSAlternatives = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("nullFCS", 3), ("ccitt16bitFCS", 4), ("ccitt32bitFCS", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPFCSAlternatives.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPFCSAlternatives.setDescription('')
ipadPPPStartLCPSDP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPSDP.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPSDP.setDescription('')
ipadPPPStartLCPCompoundFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPCompoundFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPCompoundFrames.setDescription('')
ipadPPPStartAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartAuthState.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthState.setDescription('')
ipadPPPStartAuthStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartAuthStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthStateTime.setDescription('')
ipadPPPStartAuthStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartAuthStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthStateChanges.setDescription('')
ipadPPPStartAuthFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartAuthFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthFailureCount.setDescription('')
ipadPPPStartAuthFailureTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPStartAuthFailureTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthFailureTrapEnable.setDescription('')
ipadPPPStartIPCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPState.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPState.setDescription('')
ipadPPPStartIPCPStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPStateTime.setDescription('')
ipadPPPStartIPCPStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPStateChanges.setDescription('')
ipadPPPStartIPCPIPSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPIPSource.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPIPSource.setDescription('')
ipadPPPStartIPCPIPDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPIPDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPIPDestAddress.setDescription('')
ipadPPPStartIPCPCompressionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("regularIPdata", 3), ("compressedTCP", 4), ("uncompressedTCP", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPCompressionProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPCompressionProtocol.setDescription('')
ipadPPPStartLCPHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 5), )
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryTable.setStatus('optional')
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryTable.setDescription('The ipad PPPStart LCP history table.')
ipadPPPStartLCPHistoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 5, 1), ).setIndexNames((0, "IPAD-IPSTART-MIB", "ipadPPPStartLCPHistoryIndex"))
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryTableEntry.setDescription('An entry in the ipad PPPStart LCP history table.')
ipadPPPStartLCPHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryIndex.setDescription('')
ipadPPPStartLCPHistoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryState.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryState.setDescription('')
ipadPPPStartLCPHistoryStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartLCPHistoryStateTime.setDescription('')
ipadPPPStartAuthHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 6), )
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryTable.setStatus('optional')
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryTable.setDescription('The ipad PPPStart authentication history table.')
ipadPPPStartAuthHistoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 6, 1), ).setIndexNames((0, "IPAD-IPSTART-MIB", "ipadPPPStartAuthHistoryIndex"))
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryTableEntry.setDescription('An entry in the ipad PPPStart authentication history table.')
ipadPPPStartAuthHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryIndex.setDescription('')
ipadPPPStartAuthHistoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryState.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryState.setDescription('')
ipadPPPStartAuthHistoryStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartAuthHistoryStateTime.setDescription('')
ipadPPPStartIPCPHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 7), )
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryTable.setStatus('optional')
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryTable.setDescription('The ipad PPPStart IPCP history table.')
ipadPPPStartIPCPHistoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 7, 1), ).setIndexNames((0, "IPAD-IPSTART-MIB", "ipadPPPStartIPCPHistoryIndex"))
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryTableEntry.setDescription('An entry in the ipad PPPStart IPCP history table.')
ipadPPPStartIPCPHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryIndex.setDescription('')
ipadPPPStartIPCPHistoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryState.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryState.setDescription('')
ipadPPPStartIPCPHistoryStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPStartIPCPHistoryStateTime.setDescription('')
ipadPPPStartAuthFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25050))
if mibBuilder.loadTexts: ipadPPPStartAuthFailureTrap.setDescription('')
mibBuilder.exportSymbols("IPAD-IPSTART-MIB", ipadPPPStartLCPStateChanges=ipadPPPStartLCPStateChanges, ipadPPPStartLCPFCSAlternatives=ipadPPPStartLCPFCSAlternatives, ipadPPPStartIPCPIPSource=ipadPPPStartIPCPIPSource, ipadPPPStartIPCPHistoryTable=ipadPPPStartIPCPHistoryTable, ipadRouter=ipadRouter, ipadPPPStartIPCPHistoryStateTime=ipadPPPStartIPCPHistoryStateTime, ipadPPPStartTableEntry=ipadPPPStartTableEntry, ipadModem=ipadModem, ipadPPPStartLCPHistoryState=ipadPPPStartLCPHistoryState, ipadDLCI=ipadDLCI, ipadPPPStartLCPPFC=ipadPPPStartLCPPFC, ipadPPPStartAuthState=ipadPPPStartAuthState, ipadPPPStartAuthHistoryState=ipadPPPStartAuthHistoryState, ipadPPPStartIPCPHistoryState=ipadPPPStartIPCPHistoryState, ipadPPPStartIPCPIPDestAddress=ipadPPPStartIPCPIPDestAddress, ipadTrapDest=ipadTrapDest, ipadPPPStartLCPStateTime=ipadPPPStartLCPStateTime, ipadPPPStartAuthHistoryTableEntry=ipadPPPStartAuthHistoryTableEntry, ipadPPPStartLCPHistoryIndex=ipadPPPStartLCPHistoryIndex, ipadPPP=ipadPPP, ipadPPPStartAuthHistoryIndex=ipadPPPStartAuthHistoryIndex, ipadService=ipadService, ipadPPPStartLCPACFC=ipadPPPStartLCPACFC, ipadPPPStartAuthFailureCount=ipadPPPStartAuthFailureCount, ipadPPPStartLCPHistoryTableEntry=ipadPPPStartLCPHistoryTableEntry, ipadPPPStartAuthHistoryTable=ipadPPPStartAuthHistoryTable, ipadUser=ipadUser, ipadPPPStartAuthStateChanges=ipadPPPStartAuthStateChanges, ipadPPPStartTable=ipadPPPStartTable, ipadPPPStartAuthStateTime=ipadPPPStartAuthStateTime, ipadPPPStartLCPAsyncCCM=ipadPPPStartLCPAsyncCCM, ipadPPPStartIPCPCompressionProtocol=ipadPPPStartIPCPCompressionProtocol, ipadPPPStartAuthHistoryStateTime=ipadPPPStartAuthHistoryStateTime, ipadPPPStartIPCPStateChanges=ipadPPPStartIPCPStateChanges, ipadChannel=ipadChannel, ipadPPPStartLCPMRU=ipadPPPStartLCPMRU, ipadFrPort=ipadFrPort, ipadEndpoint=ipadEndpoint, ipadMisc=ipadMisc, ipadPPPStartIPCPHistoryIndex=ipadPPPStartIPCPHistoryIndex, ipadPPPStartLCPAuthProtocol=ipadPPPStartLCPAuthProtocol, ipadSvcAware=ipadSvcAware, ipadPPPStartLCPSDP=ipadPPPStartLCPSDP, ipadPPPStartLCPCompoundFrames=ipadPPPStartLCPCompoundFrames, ipadPPPStartLCPState=ipadPPPStartLCPState, ipadPPPStartIPCPStateTime=ipadPPPStartIPCPStateTime, ipadPktSwitch=ipadPktSwitch, ipadPPPStartLCPMagicNumber=ipadPPPStartLCPMagicNumber, ipad=ipad, ipadPPPStartAuthFailureTrap=ipadPPPStartAuthFailureTrap, ipadPPPStartLCPQualityProtocol=ipadPPPStartLCPQualityProtocol, hbu=hbu, ipadSoftKey=ipadSoftKey, verilink=verilink, ipadPPPStartIPCPState=ipadPPPStartIPCPState, ipadPPPStartIPCPHistoryTableEntry=ipadPPPStartIPCPHistoryTableEntry, ipadPPPStartService=ipadPPPStartService, ipadPPPStartLCPHistoryStateTime=ipadPPPStartLCPHistoryStateTime, ipadPPPStartAuthFailureTrapEnable=ipadPPPStartAuthFailureTrapEnable, ipadPPPStartLCPHistoryTable=ipadPPPStartLCPHistoryTable)
