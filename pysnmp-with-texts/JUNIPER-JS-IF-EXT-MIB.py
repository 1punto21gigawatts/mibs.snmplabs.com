#
# PySNMP MIB module JUNIPER-JS-IF-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JS-IF-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
jnxJsIf, = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsIf")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ObjectIdentity, Unsigned32, MibIdentifier, Gauge32, ModuleIdentity, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "ModuleIdentity", "Counter32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxJsIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1))
jnxJsIfMIB.setRevisions(('2007-05-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxJsIfMIB.setRevisionsDescriptions(('Creation Date',))
if mibBuilder.loadTexts: jnxJsIfMIB.setLastUpdated('200705090000Z')
if mibBuilder.loadTexts: jnxJsIfMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxJsIfMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N.Mathilda Avenue Sunnyvale, CA 94089 E - mail:support @ juniper.net HTTP://www.juniper.net ')
if mibBuilder.loadTexts: jnxJsIfMIB.setDescription('This module defines the object that are used to monitor the entries in the interfaces pertaining to the security management of the interface.')
jnxJsIfExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1))
jnxJsIfMonTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxJsIfMonTable.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonTable.setDescription('The table extend the interface entries to support security related objects on a particular interface. The table is index by ifIndex.')
jnxJsIfMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxJsIfMonEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonEntry.setDescription('Entry pertains to an interface.')
jnxJsIfMonInIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInIcmp.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonInIcmp.setDescription('ICMP packets received.')
jnxJsIfMonInSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInSelf.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonInSelf.setDescription('Packets for self received.')
jnxJsIfMonInVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInVpn.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonInVpn.setDescription('VPN packets received.')
jnxJsIfMonInPolicyPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInPolicyPermit.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonInPolicyPermit.setDescription('Incoming bytes permitted by policy.')
jnxJsIfMonOutPolicyPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonOutPolicyPermit.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonOutPolicyPermit.setDescription('Outgoing bytes permitted by policy.')
jnxJsIfMonConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonConn.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonConn.setDescription('Incoming connections established.')
jnxJsIfMonInMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInMcast.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonInMcast.setDescription('Multicast packets received.')
jnxJsIfMonOutMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonOutMcast.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonOutMcast.setDescription('Multicast packets sent.')
jnxJsIfMonPolicyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonPolicyDeny.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonPolicyDeny.setDescription('Packets dropped due to policy deny.')
jnxJsIfMonNoGateParent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoGateParent.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNoGateParent.setDescription('Packets dropped due to no parent for a gate.')
jnxJsIfMonTcpProxyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonTcpProxyDrop.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonTcpProxyDrop.setDescription('Packets dropped due to syn-attack protection.')
jnxJsIfMonNoDip = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoDip.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNoDip.setDescription('Packets dropped due to dip errors.')
jnxJsIfMonNoNspTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoNspTunnel.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNoNspTunnel.setDescription('Packets dropped because no nsp tunnel found.')
jnxJsIfMonNoNatCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoNatCon.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNoNatCon.setDescription('Packets dropped due to no more sessions.')
jnxJsIfMonInvalidZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonInvalidZone.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonInvalidZone.setDescription('Packets dropped because an invalid zone received the packet.')
jnxJsIfMonIpClsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonIpClsFail.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonIpClsFail.setDescription('Packets dropped due to IP classification failure.')
jnxJsIfMonAuthDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAuthDrop.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonAuthDrop.setDescription('Packets dropped due to user auth errors.')
jnxJsIfMonMultiUserAuthDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonMultiUserAuthDrop.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonMultiUserAuthDrop.setDescription('Packets dropped due to multiple user auth in loopback sessions.')
jnxJsIfMonLoopMultiDipDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonLoopMultiDipDrop.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonLoopMultiDipDrop.setDescription('Packets dropped due to multiple DIP in loopback sessions.')
jnxJsIfMonAddrSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAddrSpoof.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonAddrSpoof.setDescription('Packets dropped due to address spoofing.')
jnxJsIfMonLpDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonLpDrop.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonLpDrop.setDescription('Packets dropped due to no loopback.')
jnxJsIfMonNullZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNullZone.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNullZone.setDescription('Packets dropped due to no zone or null-zone binding.')
jnxJsIfMonNoGate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoGate.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNoGate.setDescription('Packets dropped due to no nat gate.')
jnxJsIfMonNoMinorSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoMinorSess.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNoMinorSess.setDescription('Packets dropped due to no minor session.')
jnxJsIfMonNvecErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNvecErr.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNvecErr.setDescription('Packets dropped due to no session for gate.')
jnxJsIfMonTcpSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonTcpSeq.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonTcpSeq.setDescription('Packets dropped because TCP seq number out of window.')
jnxJsIfMonIllegalPak = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonIllegalPak.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonIllegalPak.setDescription("Packets dropped because they didn't make any sense.")
jnxJsIfMonNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoRoute.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNoRoute.setDescription('Packets dropped because no route present.')
jnxJsIfMonAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonAuthFail.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonAuthFail.setDescription('Packets dropped because auth failed.')
jnxJsIfMonSaInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonSaInactive.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonSaInactive.setDescription('Packets dropped because sa is not active.')
jnxJsIfMonNoSa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonNoSa.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonNoSa.setDescription('Packets dropped because no sa found for incoming spi.')
jnxJsIfMonSelfPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 1, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIfMonSelfPktDrop.setStatus('current')
if mibBuilder.loadTexts: jnxJsIfMonSelfPktDrop.setDescription('Packets dropped because no one interested in self packets.')
mibBuilder.exportSymbols("JUNIPER-JS-IF-EXT-MIB", jnxJsIfMonIpClsFail=jnxJsIfMonIpClsFail, jnxJsIfMonNoRoute=jnxJsIfMonNoRoute, jnxJsIfMonAddrSpoof=jnxJsIfMonAddrSpoof, jnxJsIfMonTcpSeq=jnxJsIfMonTcpSeq, jnxJsIfMonNoNatCon=jnxJsIfMonNoNatCon, jnxJsIfMonOutMcast=jnxJsIfMonOutMcast, jnxJsIfMonNoGateParent=jnxJsIfMonNoGateParent, jnxJsIfMonEntry=jnxJsIfMonEntry, jnxJsIfMonNoMinorSess=jnxJsIfMonNoMinorSess, jnxJsIfMonNoNspTunnel=jnxJsIfMonNoNspTunnel, jnxJsIfMonOutPolicyPermit=jnxJsIfMonOutPolicyPermit, jnxJsIfMonInVpn=jnxJsIfMonInVpn, jnxJsIfMIB=jnxJsIfMIB, jnxJsIfMonInSelf=jnxJsIfMonInSelf, jnxJsIfMonInMcast=jnxJsIfMonInMcast, jnxJsIfMonNoDip=jnxJsIfMonNoDip, jnxJsIfMonLpDrop=jnxJsIfMonLpDrop, jnxJsIfMonIllegalPak=jnxJsIfMonIllegalPak, jnxJsIfMonNoSa=jnxJsIfMonNoSa, jnxJsIfMonAuthDrop=jnxJsIfMonAuthDrop, jnxJsIfMonNoGate=jnxJsIfMonNoGate, jnxJsIfMonSelfPktDrop=jnxJsIfMonSelfPktDrop, jnxJsIfMonNvecErr=jnxJsIfMonNvecErr, jnxJsIfMonInPolicyPermit=jnxJsIfMonInPolicyPermit, PYSNMP_MODULE_ID=jnxJsIfMIB, jnxJsIfMonTcpProxyDrop=jnxJsIfMonTcpProxyDrop, jnxJsIfMonTable=jnxJsIfMonTable, jnxJsIfMonInvalidZone=jnxJsIfMonInvalidZone, jnxJsIfMonInIcmp=jnxJsIfMonInIcmp, jnxJsIfMonSaInactive=jnxJsIfMonSaInactive, jnxJsIfMonAuthFail=jnxJsIfMonAuthFail, jnxJsIfMonNullZone=jnxJsIfMonNullZone, jnxJsIfMonPolicyDeny=jnxJsIfMonPolicyDeny, jnxJsIfMonMultiUserAuthDrop=jnxJsIfMonMultiUserAuthDrop, jnxJsIfExtension=jnxJsIfExtension, jnxJsIfMonLoopMultiDipDrop=jnxJsIfMonLoopMultiDipDrop, jnxJsIfMonConn=jnxJsIfMonConn)
