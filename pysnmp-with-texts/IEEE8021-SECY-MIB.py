#
# PySNMP MIB module IEEE8021-SECY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-SECY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Bits, NotificationType, IpAddress, Gauge32, ObjectIdentity, ModuleIdentity, Counter32, MibIdentifier, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Bits", "NotificationType", "IpAddress", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Counter32", "MibIdentifier", "Counter64", "iso")
RowPointer, TruthValue, TimeStamp, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TruthValue", "TimeStamp", "RowStatus", "TextualConvention", "DisplayString")
ieee8021SecyMIB = ModuleIdentity((1, 0, 8802, 1, 1, 3))
ieee8021SecyMIB.setRevisions(('2006-10-02 00:00', '2006-01-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021SecyMIB.setRevisionsDescriptions(('Fixed a SYNTAX error in the SEQUENCE of SecyCipherSuiteEntry, the syntax for secyCipherSuiteProtectionOffset is Integer32 instead of INTEGER. This error was uncovered after publication of 802.1AE.', 'Initial version of this MIB module. Published as part of IEEE standard 802.1AE',))
if mibBuilder.loadTexts: ieee8021SecyMIB.setLastUpdated('200610020000Z')
if mibBuilder.loadTexts: ieee8021SecyMIB.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021SecyMIB.setContactInfo('http:/grouper.ieee.org/groups/8021/index.html')
if mibBuilder.loadTexts: ieee8021SecyMIB.setDescription("The MAC security entity (SecY) module for managing IEEE 802.1AE. An SecY is the entity that operates the MAC Security protocol within the system. Each SecY transmits frames conveying secure MAC Service requests on a single Secure Channel (SC), and receives frames conveying secure service indications on separate SCs (one for each of the other SecYs participating in the Secure Connectivity Association (CA)). A CA is a security relationship, established and maintained by key agreement protocols that comprise a fully connected subset of the service access points in stations attached to a single MACsec supported LAN. An SC is a security relationship used to provide security guarantees for frames transmitted from one member of a CA to the others. It is a unidirectional point to multipoint communication, and can be long lived, persisting through Secure Association Key (SAK) changes. Each SC is supported by a sequence of Secure Associations (SAs) thus allowing the periodic use of fresh keys without terminating the relationship. Each SA is supported by a single secret key, or a set of keys where the cryptographic operations used to protect one frame require more than one key. Two different interfaces 'Controlled Port' and 'Uncontrolled Port', are associated with a SecY, and that for each instance of a SecY, two ifTable rows (one for each interface) run on top of an ifTable row representing the 'Common Port' interface, such as a row with ifType = 'ethernetCsmacd(6)'. For example : ----------------------------------------------------------- | | | | Controlled Port | Uncontrolled Port | | Interface | Interface | | (ifEntry = j) | (ifEntry = k) | | (ifType = | (ifType = | | macSecControlledIF(231)) | macSecUncontrolledIF(232))| | | | |---------------------------------------------------------| | | | Physical Interface | | (ifEntry = i) | | (ifType = ethernetCsmacd(6)) | |_________________________________________________________| i, j, k are ifIndex to indicate an interface row in the ifTable. Figure : MACsec Interface Stack The 'Controlled Port' is the service point to provide one instance of the secure MAC service in a SecY. The 'Uncontrolled Port' is the service point to provide one instance of the insecure MAC service in a SecY.")
secyMIBNotifications = MibIdentifier((1, 0, 8802, 1, 1, 3, 0))
secyMIBObjects = MibIdentifier((1, 0, 8802, 1, 1, 3, 1))
secyMIBConformance = MibIdentifier((1, 0, 8802, 1, 1, 3, 2))
class SecySCI(TextualConvention, OctetString):
    reference = 'IEEE 802.1AE Clause 7.1.2, 10.7.1 and figure 7.7'
    description = 'This textual convention indicates a Secure Channel Identifier (SCI). Each SC is identified by an SCI, comprised of a unique 48-bit Universally Administered MAC Address, identifying the system to which the transmitting SecY belongs, concatenated with a 16-bit Port number, identifying the SecY within that system.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class SecyAN(TextualConvention, Unsigned32):
    reference = 'IEEE 802.1AE Clause 8.1.3 and figure 7.7'
    description = 'This textual convention indicates an Association Number (AN). Each SC is comprised of a succession of SAs, each with a different SAK. Each SA is identified by the SC identifier concatenated with a two-bit AN. The Secure Association Identifier (SAI) thus created allows the receiving SecY to identify the SA, and the SAK used to decrypt and authenticate the received frame. The AN, and the SAI, is only unique for the SAs that can be used or recorded by participating SecYs at any instant.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 3)

secyMgmtMIBObjects = MibIdentifier((1, 0, 8802, 1, 1, 3, 1, 1))
secyStatsMIBObjects = MibIdentifier((1, 0, 8802, 1, 1, 3, 1, 2))
secyIfTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: secyIfTable.setReference('IEEE 802.1AE Clause 10.7')
if mibBuilder.loadTexts: secyIfTable.setStatus('current')
if mibBuilder.loadTexts: secyIfTable.setDescription('A table of system level information for each interface supported by the MAC security entity. An entry appears in this table for each interface with MAC security capability in this system. For the writeable objects in this table, the configured value shall be stored in persistent memory and remain unchanged across a re-initialization of the management system of the entity.')
secyIfEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "IEEE8021-SECY-MIB", "secyIfInterfaceIndex"))
if mibBuilder.loadTexts: secyIfEntry.setStatus('current')
if mibBuilder.loadTexts: secyIfEntry.setDescription('An entry containing SecY management information applicable to a particular interface.')
secyIfInterfaceIndex = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: secyIfInterfaceIndex.setReference('IEEE 802.1AE Clause 10.1')
if mibBuilder.loadTexts: secyIfInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: secyIfInterfaceIndex.setDescription('An interface index for a port with SecY management ability. This interface index should be aligned with ifIndex in the ifTable to point to the SecY Controlled Port entity.')
secyIfMaxPeerSCs = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 2), Unsigned32()).setUnits('security connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyIfMaxPeerSCs.setReference('IEEE 802.1AE Clause 10.7.7')
if mibBuilder.loadTexts: secyIfMaxPeerSCs.setStatus('current')
if mibBuilder.loadTexts: secyIfMaxPeerSCs.setDescription('Maximum number of peer SCs that this SecY can support.')
secyIfRxMaxKeys = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 3), Unsigned32()).setUnits('keys').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyIfRxMaxKeys.setReference('IEEE 802.1AE Clause 10.7.7')
if mibBuilder.loadTexts: secyIfRxMaxKeys.setStatus('current')
if mibBuilder.loadTexts: secyIfRxMaxKeys.setDescription('Maximum number of keys in simultaneous use for reception that this SecY can support.')
secyIfTxMaxKeys = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 4), Unsigned32()).setUnits('keys').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyIfTxMaxKeys.setReference('IEEE 802.1AE Clause 10.7.16')
if mibBuilder.loadTexts: secyIfTxMaxKeys.setStatus('current')
if mibBuilder.loadTexts: secyIfTxMaxKeys.setDescription('Maximum number of keys in simultaneous use for transmission that this SecY can support.')
secyIfProtectFramesEnable = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfProtectFramesEnable.setReference('IEEE 802.1AE Clause 10.5')
if mibBuilder.loadTexts: secyIfProtectFramesEnable.setStatus('current')
if mibBuilder.loadTexts: secyIfProtectFramesEnable.setDescription('An object to enable or disable the protection function for egress frames.')
secyIfValidateFrames = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("check", 2), ("strict", 3))).clone('strict')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfValidateFrames.setReference('IEEE 802.1AE Clause 10.7.8')
if mibBuilder.loadTexts: secyIfValidateFrames.setStatus('current')
if mibBuilder.loadTexts: secyIfValidateFrames.setDescription('An object to control the validation function for ingress frames. disabled(1) : means to disable the validation function. check(2) : means to enable the validation function but only for checking without filtering out invalid frames. strict(3) : means to enable the validation function and also strictly filter out those invalid frames.')
secyIfReplayProtectEnable = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfReplayProtectEnable.setReference('IEEE 802.1AE Clause 10.7.8, 10.7.17')
if mibBuilder.loadTexts: secyIfReplayProtectEnable.setStatus('current')
if mibBuilder.loadTexts: secyIfReplayProtectEnable.setDescription('An object to enable or disable the replay protection function.')
secyIfReplayProtectWindow = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 8), Unsigned32()).setUnits('Packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfReplayProtectWindow.setReference('IEEE 802.1AE Clause 10.7.8')
if mibBuilder.loadTexts: secyIfReplayProtectWindow.setStatus('current')
if mibBuilder.loadTexts: secyIfReplayProtectWindow.setDescription('An object to indicate the replay protection window size. This object only takes effect if the object secyReplayProtectEnable is true.')
secyIfCurrentCipherSuite = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfCurrentCipherSuite.setReference('IEEE 802.1AE Clause 10.7.25')
if mibBuilder.loadTexts: secyIfCurrentCipherSuite.setStatus('current')
if mibBuilder.loadTexts: secyIfCurrentCipherSuite.setDescription("An object that points to an entry of the secyCipherSuiteTable with 'active' row status to indicate the cipher Suite which this SecY is currently using. By default, this object should point to the default cipher suite which system provides.")
secyIfAdminPt2PtMAC = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfAdminPt2PtMAC.setReference('IEEE 802.1AE Clause 6.5')
if mibBuilder.loadTexts: secyIfAdminPt2PtMAC.setStatus('current')
if mibBuilder.loadTexts: secyIfAdminPt2PtMAC.setDescription('An object to control the service connectivity to at most one other system. The secyOperPt2PtMAC indicates operational status of the service connectivity for this SecY. forceTrue(1) : allows only one service connection to the other system. forceFalse(2) : no restriction on the number of service connections to the other systems. auto(3) : means the service connectivity is determined by the service providing entity.')
secyIfOperPt2PtMAC = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyIfOperPt2PtMAC.setReference('IEEE 802.1AE Clause 6.5')
if mibBuilder.loadTexts: secyIfOperPt2PtMAC.setStatus('current')
if mibBuilder.loadTexts: secyIfOperPt2PtMAC.setDescription('An object to reflect the current service connectivity status. true(1) : means the service connectivity of this SecY provides at most one other system. false(2) : means the service connectivity of this SecY could provide more than one other system.')
secyIfIncludeSCIEnable = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfIncludeSCIEnable.setReference('IEEE 802.1AE Clause 9.3, 10.5.3, 10.7.17')
if mibBuilder.loadTexts: secyIfIncludeSCIEnable.setStatus('current')
if mibBuilder.loadTexts: secyIfIncludeSCIEnable.setDescription('An object indicates to include the SCI information in security TAG (SecTAG) field while transmitting MACsec frames.')
secyIfUseESEnable = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfUseESEnable.setReference('IEEE 802.1AE Clause 9.3, 10.5.3, 10.7.17')
if mibBuilder.loadTexts: secyIfUseESEnable.setStatus('current')
if mibBuilder.loadTexts: secyIfUseESEnable.setDescription('An object indicates to enable the ES bit in security TAG (SecTAG) field while transmitting MACsec frames.')
secyIfUseSCBEnable = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyIfUseSCBEnable.setReference('IEEE 802.1AE Clause 9.3, 10.5.3, 10.7.17')
if mibBuilder.loadTexts: secyIfUseSCBEnable.setStatus('current')
if mibBuilder.loadTexts: secyIfUseSCBEnable.setDescription('An object indicates to enable the SCB bit in security TAG (SecTAG) field while transmitting MACsec frames.')
secyTxSCTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: secyTxSCTable.setReference('IEEE 802.1AE Clause 10.7.17, 10.7.20')
if mibBuilder.loadTexts: secyTxSCTable.setStatus('current')
if mibBuilder.loadTexts: secyTxSCTable.setDescription('A table for providing information about the status of each transmitting SC supported by the MAC security entity.')
secyTxSCEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "IEEE8021-SECY-MIB", "secyIfInterfaceIndex"))
if mibBuilder.loadTexts: secyTxSCEntry.setStatus('current')
if mibBuilder.loadTexts: secyTxSCEntry.setDescription('An entry containing transmitting SC management information applicable to a particular SecY.')
secyTxSCI = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 2, 1, 1), SecySCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCI.setReference('IEEE 802.1AE Clause 7.1.2, 8.2.1, 10.7.1')
if mibBuilder.loadTexts: secyTxSCI.setStatus('current')
if mibBuilder.loadTexts: secyTxSCI.setDescription('The SCI information for transmitting MACsec frames of the transmitting SC in the SecY.')
secyTxSCState = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inUse", 1), ("notInUse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCState.setReference('IEEE 802.1AE Clause 10.7.20')
if mibBuilder.loadTexts: secyTxSCState.setStatus('current')
if mibBuilder.loadTexts: secyTxSCState.setDescription('The state of the current transmitting SC in the SecY. inUse(1) : means any of SAs for this SC is in use. notInUse(2) : means no SAs for this SC is in use.')
secyTxSCEncodingSA = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 2, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCEncodingSA.setReference('IEEE 802.1AE Clause 10.5.1, 10.7.20')
if mibBuilder.loadTexts: secyTxSCEncodingSA.setStatus('current')
if mibBuilder.loadTexts: secyTxSCEncodingSA.setDescription('The current transmitting SA in use. The row pointer will point to an entry in the secyTxSATable. If no such information is available, the value shall be the OBJECT IDENTIFIER { 0 0 }.')
secyTxSCEncipheringSA = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 2, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCEncipheringSA.setReference('IEEE 802.1AE Clause 10.5.4, 10.7.20')
if mibBuilder.loadTexts: secyTxSCEncipheringSA.setStatus('current')
if mibBuilder.loadTexts: secyTxSCEncipheringSA.setDescription('The previous transmitting SA in use. The row pointer will point to an entry in the secyTxSATable. If no such information is available, the value shall be the OBJECT IDENTIFIER { 0 0 }.')
secyTxSCCreatedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCCreatedTime.setReference('IEEE 802.1AE Clause 10.7.20')
if mibBuilder.loadTexts: secyTxSCCreatedTime.setStatus('current')
if mibBuilder.loadTexts: secyTxSCCreatedTime.setDescription('The system time when this transmitting SC was created.')
secyTxSCStartedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCStartedTime.setReference('IEEE 802.1AE Clause 10.7.20')
if mibBuilder.loadTexts: secyTxSCStartedTime.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStartedTime.setDescription('The system time when this transmitting SC last started transmitting MACsec frames.')
secyTxSCStoppedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCStoppedTime.setReference('IEEE 802.1AE Clause 10.7.20')
if mibBuilder.loadTexts: secyTxSCStoppedTime.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStoppedTime.setDescription('The system time when this transmitting SC last stopped transmitting MACsec frames.')
secyTxSATable = MibTable((1, 0, 8802, 1, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: secyTxSATable.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: secyTxSATable.setStatus('current')
if mibBuilder.loadTexts: secyTxSATable.setDescription('A table for providing information about the status of each transmitting SA supported by the MAC security entity.')
secyTxSAEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "IEEE8021-SECY-MIB", "secyIfInterfaceIndex"), (0, "IEEE8021-SECY-MIB", "secyTxSA"))
if mibBuilder.loadTexts: secyTxSAEntry.setStatus('current')
if mibBuilder.loadTexts: secyTxSAEntry.setDescription('An entry containing transmitting SA management information applicable to a particular SA.')
secyTxSA = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1, 1), SecyAN())
if mibBuilder.loadTexts: secyTxSA.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: secyTxSA.setStatus('current')
if mibBuilder.loadTexts: secyTxSA.setDescription('The association number (AN) for identifying a transmitting SA.')
secyTxSAState = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inUse", 1), ("notInUse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSAState.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: secyTxSAState.setStatus('current')
if mibBuilder.loadTexts: secyTxSAState.setDescription('The current status of the transmitting SA. inUse(1) : means this SA is in use. notInUse(2) : means this SA is not in use.')
secyTxSANextPN = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSANextPN.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: secyTxSANextPN.setStatus('current')
if mibBuilder.loadTexts: secyTxSANextPN.setDescription('The next packet number (PN) that will be used in transmitting MACsec frames in the SA.')
secyTxSAConfidentiality = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSAConfidentiality.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: secyTxSAConfidentiality.setStatus('current')
if mibBuilder.loadTexts: secyTxSAConfidentiality.setDescription('Whether this SA supports the confidentiality as well as integrity function in transmitting frames.')
secyTxSASAKUnchanged = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSASAKUnchanged.setReference('IEEE 802.1AE Clause 10.7.21')
if mibBuilder.loadTexts: secyTxSASAKUnchanged.setStatus('current')
if mibBuilder.loadTexts: secyTxSASAKUnchanged.setDescription('A reference to an SAK that is unchanged for the life of the transmitting SA.')
secyTxSACreatedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSACreatedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: secyTxSACreatedTime.setStatus('current')
if mibBuilder.loadTexts: secyTxSACreatedTime.setDescription('The system time when this transmitting SA was created.')
secyTxSAStartedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSAStartedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: secyTxSAStartedTime.setStatus('current')
if mibBuilder.loadTexts: secyTxSAStartedTime.setDescription('The system time when this transmitting SA last started transmitting MACsec frames.')
secyTxSAStoppedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 3, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSAStoppedTime.setReference('IEEE 802.1AE Clause 10.7.22')
if mibBuilder.loadTexts: secyTxSAStoppedTime.setStatus('current')
if mibBuilder.loadTexts: secyTxSAStoppedTime.setDescription('The system time when this transmitting SA last stopped transmitting MACsec frames.')
secyRxSCTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: secyRxSCTable.setReference('IEEE 802.1AE Clause 10.7.11')
if mibBuilder.loadTexts: secyRxSCTable.setStatus('current')
if mibBuilder.loadTexts: secyRxSCTable.setDescription('A table for providing information about the status of each receiving SC supported by the MAC security entity.')
secyRxSCEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "IEEE8021-SECY-MIB", "secyIfInterfaceIndex"), (0, "IEEE8021-SECY-MIB", "secyRxSCI"))
if mibBuilder.loadTexts: secyRxSCEntry.setStatus('current')
if mibBuilder.loadTexts: secyRxSCEntry.setDescription('An entry containing receiving SC management information applicable to a particular SC.')
secyRxSCI = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 4, 1, 1), SecySCI())
if mibBuilder.loadTexts: secyRxSCI.setReference('IEEE 802.1AE Clause 10.7.11')
if mibBuilder.loadTexts: secyRxSCI.setStatus('current')
if mibBuilder.loadTexts: secyRxSCI.setDescription('The SCI for identifying the receiving SC in the SecY.')
secyRxSCState = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inUse", 1), ("notInUse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCState.setReference('IEEE 802.1AE Clause 10.7.12')
if mibBuilder.loadTexts: secyRxSCState.setStatus('current')
if mibBuilder.loadTexts: secyRxSCState.setDescription('The state of the receiving SC in the SecY. inUse(1) : means any of SAs for this SC is in use. notInUse(2) : means no SAs for this SC is in use.')
secyRxSCCurrentSA = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 4, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCCurrentSA.setReference('IEEE 802.1AE Clause 10.6.1, 10.7.13')
if mibBuilder.loadTexts: secyRxSCCurrentSA.setStatus('current')
if mibBuilder.loadTexts: secyRxSCCurrentSA.setDescription('The current receiving association number of the SC in use. The row pointer will point to an entry in the secyRxSATable. If no such information can be identified, the value of this object shall be set to the OBJECT IDENTIFIER { 0 0 }.')
secyRxSCCreatedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCCreatedTime.setReference('IEEE 802.1AE Clause 10.7.12')
if mibBuilder.loadTexts: secyRxSCCreatedTime.setStatus('current')
if mibBuilder.loadTexts: secyRxSCCreatedTime.setDescription('The system time when this receiving SC was created.')
secyRxSCStartedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStartedTime.setReference('IEEE 802.1AE Clause 10.7.12')
if mibBuilder.loadTexts: secyRxSCStartedTime.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStartedTime.setDescription('The system time when this receiving SC last started receiving MACsec frames.')
secyRxSCStoppedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 4, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStoppedTime.setReference('IEEE 802.1AE Clause 10.7.12')
if mibBuilder.loadTexts: secyRxSCStoppedTime.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStoppedTime.setDescription('The system time when this receiving SC last stopped receiving MACsec frames.')
secyRxSATable = MibTable((1, 0, 8802, 1, 1, 3, 1, 1, 5), )
if mibBuilder.loadTexts: secyRxSATable.setReference('IEEE 802.1AE Clause 10.7.13')
if mibBuilder.loadTexts: secyRxSATable.setStatus('current')
if mibBuilder.loadTexts: secyRxSATable.setDescription('A table for providing information about the status of each receiving SA supported by the MAC security entity.')
secyRxSAEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 1, 5, 1), ).setIndexNames((0, "IEEE8021-SECY-MIB", "secyIfInterfaceIndex"), (0, "IEEE8021-SECY-MIB", "secyRxSCI"), (0, "IEEE8021-SECY-MIB", "secyRxSA"))
if mibBuilder.loadTexts: secyRxSAEntry.setStatus('current')
if mibBuilder.loadTexts: secyRxSAEntry.setDescription('An entry containing receiving SA management information applicable to a particular SA.')
secyRxSA = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 5, 1, 1), SecyAN())
if mibBuilder.loadTexts: secyRxSA.setReference('IEEE 802.1AE Clause 10.7.13')
if mibBuilder.loadTexts: secyRxSA.setStatus('current')
if mibBuilder.loadTexts: secyRxSA.setDescription('The association number (AN) for identifying a receiving SA.')
secyRxSAState = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inUse", 1), ("notInUse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSAState.setReference('IEEE 802.1AE Clause 10.7.14')
if mibBuilder.loadTexts: secyRxSAState.setStatus('current')
if mibBuilder.loadTexts: secyRxSAState.setDescription('The current state for the receiving SA.')
secyRxSANextPN = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secyRxSANextPN.setReference('IEEE 802.1AE Clause 10.7.14, Clause 10.7.15')
if mibBuilder.loadTexts: secyRxSANextPN.setStatus('current')
if mibBuilder.loadTexts: secyRxSANextPN.setDescription('The stored packet number (PN) for replay protection in the SA. If the PN of any receiving frames is less than the value of this object minus the value of secyReplayProtectWindow and secyReplayProtectEnable is true, the receiving frames should be discarded.')
secyRxSASAKUnchanged = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSASAKUnchanged.setReference('IEEE 802.1AE Clause 10.7.13')
if mibBuilder.loadTexts: secyRxSASAKUnchanged.setStatus('current')
if mibBuilder.loadTexts: secyRxSASAKUnchanged.setDescription('A reference to an SAK that is unchanged for the life of the receiving SA.')
secyRxSACreatedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 5, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSACreatedTime.setReference('IEEE 802.1AE Clause 10.7.14')
if mibBuilder.loadTexts: secyRxSACreatedTime.setStatus('current')
if mibBuilder.loadTexts: secyRxSACreatedTime.setDescription('The system time when this receiving SA was created.')
secyRxSAStartedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 5, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSAStartedTime.setReference('IEEE 802.1AE Clause 10.7.14')
if mibBuilder.loadTexts: secyRxSAStartedTime.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStartedTime.setDescription('The system time when this receiving SA last started receiving MACsec frames.')
secyRxSAStoppedTime = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 5, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSAStoppedTime.setReference('IEEE 802.1AE Clause 10.7.14')
if mibBuilder.loadTexts: secyRxSAStoppedTime.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStoppedTime.setDescription('The system time when this receiving SA last stopped receiving MACsec frames.')
secyCipherSuiteTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 1, 6), )
if mibBuilder.loadTexts: secyCipherSuiteTable.setReference('IEEE 802.1AE Clause 10.7.24')
if mibBuilder.loadTexts: secyCipherSuiteTable.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteTable.setDescription('The table of selectable cipher suites for the MAC security entity. For the writeable objects in this table, the configured value shall be stored in persistent memory and remain unchanged across a re-initialization of the management system of the entity.')
secyCipherSuiteEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1), ).setIndexNames((0, "IEEE8021-SECY-MIB", "secyCipherSuiteIndex"))
if mibBuilder.loadTexts: secyCipherSuiteEntry.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteEntry.setDescription('An entry containing the management information for a cipher suite.')
secyCipherSuiteIndex = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: secyCipherSuiteIndex.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteIndex.setDescription('The index to recognize a Cipher Suite in the system.')
secyCipherSuiteId = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secyCipherSuiteId.setReference('IEEE 802.1AE Clause 10.7.24')
if mibBuilder.loadTexts: secyCipherSuiteId.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteId.setDescription('The identifier for the cipher suite. This is a global unique 64-bit (EUI-64) identifier.')
secyCipherSuiteName = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secyCipherSuiteName.setReference('IEEE 802.1AE Clause 10.7.24')
if mibBuilder.loadTexts: secyCipherSuiteName.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteName.setDescription('The name of the cipher suite. If the name is composed of multi-byte characters, the total length must fit within 128 octets.')
secyCipherSuiteCapability = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 4), Bits().clone(namedValues=NamedValues(("integrity", 0), ("confidentiality", 1), ("offsetConfidentiality", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secyCipherSuiteCapability.setReference('IEEE 802.1AE Clause 10.7.24, 10.7.25')
if mibBuilder.loadTexts: secyCipherSuiteCapability.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteCapability.setDescription('The capability of this cipher suite. integrity(0) : integrity protection capability for this cipher suite.. confidentiality(1) : confidentiality protection capability for this cipher suite. offsetConfidentiality(2) : offset confidentiality protection capability for this cipher suite.')
secyCipherSuiteProtection = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 5), Bits().clone(namedValues=NamedValues(("integrity", 0), ("confidentiality", 1), ("offsetConfidentiality", 2))).clone(namedValues=NamedValues(("integrity", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secyCipherSuiteProtection.setReference('IEEE 802.1AE Clause 10.7.24, 10.7.25')
if mibBuilder.loadTexts: secyCipherSuiteProtection.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteProtection.setDescription('The protection options of this cipher suite. The options should depend on the object secyCipherSuiteCapability. If the value of secyCipherSuiteCapability is only integerity bit on, users can only choose to turn on integrity bit for this object. If the value of secyCipherSuiteCapability is integrity and confidentiality bits on, users can choose to turn on integrity or confidentiality bits, but if confidentiality bit is on, the integrity bit has to be on. If the value of secyCipherSuiteCapability is integrity and offsetConfidentiality bits on, users can choose to turn on integrity or offsetConfidentiality bits, but if offsetConfidentiality bit is on, the integrity bit has to be on. If the value of secyCipherSuiteCapability is integrity and confidentiality and offsetConfidentiality bits on, users can choose to turn on integrity or confidentiality or offsetConfidentiality bits, but if confidentiality or offsetConfidentiality bits are on, the integrity bit has to be on. integrity(0) : on or off the function of supporting integrity protection for this cipher suite. confidentiality(1) : on or off the function of supporting confidentiality for this cipher suite. offsetConfidentiality(2) : on or off the function of supporting offset confidentiality for this cipher suite.')
secyCipherSuiteProtectionOffset = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 30), ValueRangeConstraint(50, 50), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: secyCipherSuiteProtectionOffset.setReference('IEEE 802.1AE Clause 10.7.24, 10.7.25')
if mibBuilder.loadTexts: secyCipherSuiteProtectionOffset.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteProtectionOffset.setDescription('The confidentiality protection offset options of this cipher suite. The options should depend on the choice of secyCipherSuiteProtection. If the value of secyCipherSuiteProtection only turns on integrity bit, users can only choose 0 byte for this object. If the value of secyCipherSuiteProtection only turns on integrity and confidentiality bits, users can only choose 0 byte for this object. If the value of secyCipherSuiteProtection only turns on integrity and offsetConfidentiality bits, users can choose 30 or 50 bytes for this object. If the value of secyCipherSuiteProtection turns on integrity and confidentiality and offsetConfidentiality bits, users can choose 0 or 30 or 50 bytes for this object.')
secyCipherSuiteDataLengthChange = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secyCipherSuiteDataLengthChange.setReference('IEEE 802.1AE Clause 10.7.24')
if mibBuilder.loadTexts: secyCipherSuiteDataLengthChange.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteDataLengthChange.setDescription('This indicates whether the data length will be changed after encryption by the cipher suite.')
secyCipherSuiteICVLength = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 16))).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: secyCipherSuiteICVLength.setReference('IEEE 802.1AE Clause 10.7.24')
if mibBuilder.loadTexts: secyCipherSuiteICVLength.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteICVLength.setDescription('The length of integrity check value (ICV) field.')
secyCipherSuiteRowStatus = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 1, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secyCipherSuiteRowStatus.setReference('IEEE 802.1AE Clause 10.7.24')
if mibBuilder.loadTexts: secyCipherSuiteRowStatus.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteRowStatus.setDescription("The object to create the paramaters for the supported Cipher Suites in the system. If the specified secyCipherSuiteId object information is not supported in the system or the secyCipherSuiteCapability object is not matched the capability of the corresponding specified Cipher Suite in the same entry, the corresponding entry should not be active, i.e., this object should not be 'active' or 'notInService'.")
secyTxSAStatsTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: secyTxSAStatsTable.setReference('IEEE 802.1AE Clause 10.7.18, figure 10.4')
if mibBuilder.loadTexts: secyTxSAStatsTable.setStatus('current')
if mibBuilder.loadTexts: secyTxSAStatsTable.setDescription('A table that contains the statistics objects for each transmitting SA in the MAC security entity.')
secyTxSAStatsEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 2, 1, 1), )
secyTxSAEntry.registerAugmentions(("IEEE8021-SECY-MIB", "secyTxSAStatsEntry"))
secyTxSAStatsEntry.setIndexNames(*secyTxSAEntry.getIndexNames())
if mibBuilder.loadTexts: secyTxSAStatsEntry.setStatus('current')
if mibBuilder.loadTexts: secyTxSAStatsEntry.setDescription('The entry holds the statistics for a transmitting SA. An SA may be reused once a while. When starting using the SA, the counters of the SA should start at 0. When stopping using the SA, the counters will be stopped incrementing. The timestamps of starting and stopping time are recorded in the secyTxSATable.')
secyTxSAStatsProtectedPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 1, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSAStatsProtectedPkts.setReference('IEEE 802.1AE Clause 10.7.18, figure 10.4')
if mibBuilder.loadTexts: secyTxSAStatsProtectedPkts.setStatus('current')
if mibBuilder.loadTexts: secyTxSAStatsProtectedPkts.setDescription('The number of integrity protected but not encrypted packets for this transmitting SA.')
secyTxSAStatsEncryptedPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSAStatsEncryptedPkts.setReference('IEEE 802.1AE Clause 10.7.18, figure 10.4')
if mibBuilder.loadTexts: secyTxSAStatsEncryptedPkts.setStatus('current')
if mibBuilder.loadTexts: secyTxSAStatsEncryptedPkts.setDescription('The number of integrity protected and encrypted packets for this transmitting SA.')
secyTxSCStatsTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 2, 2), )
if mibBuilder.loadTexts: secyTxSCStatsTable.setReference('IEEE 802.1AE Clause 10.7.18, 10.7.19, figure 10.4')
if mibBuilder.loadTexts: secyTxSCStatsTable.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStatsTable.setDescription('A table that contains statistics information for each transmitting SC in the MAC security entity.')
secyTxSCStatsEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 2, 2, 1), )
secyTxSCEntry.registerAugmentions(("IEEE8021-SECY-MIB", "secyTxSCStatsEntry"))
secyTxSCStatsEntry.setIndexNames(*secyTxSCEntry.getIndexNames())
if mibBuilder.loadTexts: secyTxSCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStatsEntry.setDescription('The entry contains the counters of a transmitting SC. Since some counters in the transmitting SA will be reset while the SA is reused, in order to maintain complete statistics information for the SC, the counters information on the SAs need to be kept in the SC. Those counters that may be reset are : secyTxSAStatsProtectedPkts, secyTxSAStatsEncryptedPkts Each counter for a SC is in the summation of the corresponding counter information for all the SAs, current and prior SAs, belonging to this SC.')
secyTxSCStatsProtectedPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 2, 1, 1), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCStatsProtectedPkts.setReference('IEEE 802.1AE Clause 10.7.18, figure 10.4')
if mibBuilder.loadTexts: secyTxSCStatsProtectedPkts.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStatsProtectedPkts.setDescription('The number of integrity protected but not encrypted packets for this transmitting SC.')
secyTxSCStatsEncryptedPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 2, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCStatsEncryptedPkts.setReference('IEEE 802.1AE Clause 10.7.18, figure 10.4')
if mibBuilder.loadTexts: secyTxSCStatsEncryptedPkts.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStatsEncryptedPkts.setDescription('The number of integrity protected and encrypted packets for this transmitting SC.')
secyTxSCStatsOctetsProtected = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 2, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCStatsOctetsProtected.setReference('IEEE 802.1AE Clause 10.7.19, figure 10.4')
if mibBuilder.loadTexts: secyTxSCStatsOctetsProtected.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStatsOctetsProtected.setDescription('The number of plain text octets that are integrity protected but not encrypted on the transmitting SC.')
secyTxSCStatsOctetsEncrypted = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 2, 1, 11), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyTxSCStatsOctetsEncrypted.setReference('IEEE 802.1AE Clause 10.7.19, figure 10.4')
if mibBuilder.loadTexts: secyTxSCStatsOctetsEncrypted.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStatsOctetsEncrypted.setDescription('The number of plain text octets that are integrity protected and encrypted on the transmitting SC.')
secyRxSAStatsTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 2, 3), )
if mibBuilder.loadTexts: secyRxSAStatsTable.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSAStatsTable.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStatsTable.setDescription('A table that contains the statistics objects for each receiving SA in the MAC security entity.')
secyRxSAStatsEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 2, 3, 1), )
secyRxSAEntry.registerAugmentions(("IEEE8021-SECY-MIB", "secyRxSAStatsEntry"))
secyRxSAStatsEntry.setIndexNames(*secyRxSAEntry.getIndexNames())
if mibBuilder.loadTexts: secyRxSAStatsEntry.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStatsEntry.setDescription('The entry holds the statistics for a receiving SA. An SA may be reused once a while. When starting using the SA, the counters of the SA should start at 0. When stopping using the SA, the counters will be stopped incrementing. The timestamps of starting and stopping time are recorded in the secyRxSATable.')
secyRxSAStatsUnusedSAPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 3, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSAStatsUnusedSAPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSAStatsUnusedSAPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStatsUnusedSAPkts.setDescription('For this SA which is not currently in use, the number of received, unencrypted, packets with secyValidateFrames not in the strict mode.')
secyRxSAStatsNoUsingSAPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 3, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSAStatsNoUsingSAPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSAStatsNoUsingSAPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStatsNoUsingSAPkts.setDescription('For this SA which is not currently in use, the number of received packets that have been discarded, and have either the packets encrypted or the secyValidateFrames set to strict mode.')
secyRxSAStatsNotValidPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 3, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSAStatsNotValidPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSAStatsNotValidPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStatsNotValidPkts.setDescription('For this SA, the number discarded packets with the condition that the packets are not valid and one of the following conditions are true: either secyValidateFrames in strict mode or the packets encrypted.')
secyRxSAStatsInvalidPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 3, 1, 16), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSAStatsInvalidPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSAStatsInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStatsInvalidPkts.setDescription('For this SA, the number of packets with the condition that the packets are not valid and secyValidateFrames is in check mode.')
secyRxSAStatsOKPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 3, 1, 25), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSAStatsOKPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSAStatsOKPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStatsOKPkts.setDescription('For this SA, the number of validated packets.')
secyRxSCStatsTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 2, 4), )
if mibBuilder.loadTexts: secyRxSCStatsTable.setReference('IEEE 802.1AE Clause 10.7.9, 10.7.10, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsTable.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsTable.setDescription('A table for the statistics information of each receiving SC supported by the MAC security entity.')
secyRxSCStatsEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1), )
secyRxSCEntry.registerAugmentions(("IEEE8021-SECY-MIB", "secyRxSCStatsEntry"))
secyRxSCStatsEntry.setIndexNames(*secyRxSCEntry.getIndexNames())
if mibBuilder.loadTexts: secyRxSCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsEntry.setDescription('The entry contains the counters of a receiving SC. Since some counters in the receiving SA will be reset while the SA is reused, in order to maintain complete statistics information for the SC, the counters information on the SAs need to be kept in the SC. Those counters that may be reset are : secyRxSAStatsUnusedSAPkts, secyRxSAStatsNoUsingSAPkts, secyRxSAStatsNotValidPkts, secyRxSAStatsInvalidPkts, secyRxSAStatsOKPkts Each counter for a SC is in the summation of the corresponding counter information for all the SAs, current and prior SAs, belonging to this SC.')
secyRxSCStatsUnusedSAPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 1), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsUnusedSAPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsUnusedSAPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsUnusedSAPkts.setDescription('The summation of counter secyRxSAStatsUnusedSAPkts information for all the SAs which belong to this SC. Since the secyRxSAStatsUnusedSAPkts counters in the SAs will be reset, in order to maintain complete statistics information for the SC, the counter information on the SAs need to be kept in the SC.')
secyRxSCStatsNoUsingSAPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsNoUsingSAPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsNoUsingSAPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsNoUsingSAPkts.setDescription('The summation of counter secyRxSAStatsNoUsingSAPkts information for all the SAs which belong to this SC. Since the secyRxSAStatsNoUsingSAPkts counters in the SAs will be reset, in order to maintain complete statistics information for the SC, the counter information on the SAs need to be kept in the SC.')
secyRxSCStatsLatePkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsLatePkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsLatePkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsLatePkts.setDescription('For this SC, the number of received packets that have been discarded with the condition : secyReplayProtect is equal to true and the PN of the packet is lower than the lower bound replay check PN.')
secyRxSCStatsNotValidPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsNotValidPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsNotValidPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsNotValidPkts.setDescription('The summation of counter secyRxSAStatsNotValidPkts information for all the SAs which belong to this SC. Since the secyRxSAStatsNotValidPkts counters in the SAs will be reset, in order to maintain complete statistics information for the SC, the counter information on the SAs need to be kept in the SC.')
secyRxSCStatsInvalidPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsInvalidPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsInvalidPkts.setDescription('The summation of counter secyRxSAStatsInvalidPkts information for all the SAs which belong to this SC. Since the secyRxSAStatsInvalidPkts counters in the SAs will be reset, in order to maintain complete statistics information for the SC, the counter information on the SAs need to be kept in the SC.')
secyRxSCStatsDelayedPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsDelayedPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsDelayedPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsDelayedPkts.setDescription('For this SC, the number of packets with the condition that the PN of the packets is lower than the lower bound replay protection PN.')
secyRxSCStatsUncheckedPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsUncheckedPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsUncheckedPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsUncheckedPkts.setDescription('For this SC, the number of packets with the following condition: -secyValidateFrames is disabled or -secyValidateFrames is not disabled and the packet is not encrypted and the integrity check has failed or -secyValidateFrames is not disable and the packet is encrypted and integrity check has failed.')
secyRxSCStatsOKPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsOKPkts.setReference('IEEE 802.1AE Clause 10.7.9, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsOKPkts.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsOKPkts.setDescription('The summation of counter secyRxSAStatsOKPkts information for all the SAs which belong to this SC. Since the secyRxSAStatsOKPkts counters in the SAs will be reset, in order to maintain complete statistics information for the SC, the counter information on the SAs need to be kept in the SC.')
secyRxSCStatsOctetsValidated = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsOctetsValidated.setReference('IEEE 802.1AE Clause 10.7.10, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsOctetsValidated.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsOctetsValidated.setDescription('The number of octets of plaintext recovered from received packets that were integrity protected but not encrypted.')
secyRxSCStatsOctetsDecrypted = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 4, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyRxSCStatsOctetsDecrypted.setReference('IEEE 802.1AE Clause 10.7.10, figure 10.5')
if mibBuilder.loadTexts: secyRxSCStatsOctetsDecrypted.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsOctetsDecrypted.setDescription('The number of octets of plaintext recovered from received packets that were integrity protected and encrypted.')
secyStatsTable = MibTable((1, 0, 8802, 1, 1, 3, 1, 2, 5), )
if mibBuilder.loadTexts: secyStatsTable.setReference('IEEE 802.1AE Clause 10.7.9, 10.7.18, figure 10.4, 10.5')
if mibBuilder.loadTexts: secyStatsTable.setStatus('current')
if mibBuilder.loadTexts: secyStatsTable.setDescription('A table for the statistics information of each SecY supported by the MAC security entity.')
secyStatsEntry = MibTableRow((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1), )
secyIfEntry.registerAugmentions(("IEEE8021-SECY-MIB", "secyStatsEntry"))
secyStatsEntry.setIndexNames(*secyIfEntry.getIndexNames())
if mibBuilder.loadTexts: secyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: secyStatsEntry.setDescription('An entry containing counters for statistics or diagnosis for a SecY.')
secyStatsTxUntaggedPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1, 1), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyStatsTxUntaggedPkts.setReference('IEEE 802.1AE Clause 10.7.18, figure 10.4')
if mibBuilder.loadTexts: secyStatsTxUntaggedPkts.setStatus('current')
if mibBuilder.loadTexts: secyStatsTxUntaggedPkts.setDescription('The number of transmitted packets without the MAC security tag (SecTAG) because secyProtectFramesEnable is configured as false.')
secyStatsTxTooLongPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyStatsTxTooLongPkts.setReference('IEEE 802.1AE Clause 10.7.18, figure 10.4')
if mibBuilder.loadTexts: secyStatsTxTooLongPkts.setStatus('current')
if mibBuilder.loadTexts: secyStatsTxTooLongPkts.setDescription('The number of transmitted packets discarded because the packet length is greater than the ifMtu of the Common Port interface.')
secyStatsRxUntaggedPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyStatsRxUntaggedPkts.setReference('IEEE 802.1AE Clause 10.7.9 , figure 10.5')
if mibBuilder.loadTexts: secyStatsRxUntaggedPkts.setStatus('current')
if mibBuilder.loadTexts: secyStatsRxUntaggedPkts.setDescription('The number of received packets without the MAC security tag (SecTAG) with secyValidateFrames which is not in the strict mode.')
secyStatsRxNoTagPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyStatsRxNoTagPkts.setReference('IEEE 802.1AE Clause 10.7.9 , figure 10.5')
if mibBuilder.loadTexts: secyStatsRxNoTagPkts.setStatus('current')
if mibBuilder.loadTexts: secyStatsRxNoTagPkts.setDescription('The number of received packets discarded without the MAC security tag (SecTAG) with secyValidateFrames which is in the strict mode.')
secyStatsRxBadTagPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyStatsRxBadTagPkts.setReference('IEEE 802.1AE Clause 10.7.9 , figure 10.5')
if mibBuilder.loadTexts: secyStatsRxBadTagPkts.setStatus('current')
if mibBuilder.loadTexts: secyStatsRxBadTagPkts.setDescription('The number of received packets discarded with an invalid SecTAG or a zero value PN or an invalid ICV.')
secyStatsRxUnknownSCIPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyStatsRxUnknownSCIPkts.setReference('IEEE 802.1AE Clause 10.7.9 , figure 10.5')
if mibBuilder.loadTexts: secyStatsRxUnknownSCIPkts.setStatus('current')
if mibBuilder.loadTexts: secyStatsRxUnknownSCIPkts.setDescription('The number of received packets with unknown SCI with the condition : secyValidateFrames is not in the strict mode and the C bit in the SecTAG is not set.')
secyStatsRxNoSCIPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyStatsRxNoSCIPkts.setReference('IEEE 802.1AE Clause 10.7.9 , figure 10.5')
if mibBuilder.loadTexts: secyStatsRxNoSCIPkts.setStatus('current')
if mibBuilder.loadTexts: secyStatsRxNoSCIPkts.setDescription('The number of received packets discarded with unknown SCI information with the condition : secyValidateFrames is in the strict mode or the C bit in the SecTAG is set.')
secyStatsRxOverrunPkts = MibTableColumn((1, 0, 8802, 1, 1, 3, 1, 2, 5, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: secyStatsRxOverrunPkts.setReference('IEEE 802.1AE Clause 10.7.9 , figure 10.5')
if mibBuilder.loadTexts: secyStatsRxOverrunPkts.setStatus('current')
if mibBuilder.loadTexts: secyStatsRxOverrunPkts.setDescription('The number of packets discarded because the number of received packets exceeded the cryptographic performance capabilities.')
secyMIBCompliances = MibIdentifier((1, 0, 8802, 1, 1, 3, 2, 1))
secyMIBGroups = MibIdentifier((1, 0, 8802, 1, 1, 3, 2, 2))
secyMIBCompliance = ModuleCompliance((1, 0, 8802, 1, 1, 3, 2, 1, 1)).setObjects(("IEEE8021-SECY-MIB", "secyIfCtrlGroup"), ("IEEE8021-SECY-MIB", "secyTxSCGroup"), ("IEEE8021-SECY-MIB", "secyTxSAGroup"), ("IEEE8021-SECY-MIB", "secyRxSCGroup"), ("IEEE8021-SECY-MIB", "secyRxSAGroup"), ("IEEE8021-SECY-MIB", "secyCipherSuiteGroup"), ("IEEE8021-SECY-MIB", "secyTxSAStatsGroup"), ("IEEE8021-SECY-MIB", "secyTxSCStatsGroup"), ("IEEE8021-SECY-MIB", "secyRxSAStatsGroup"), ("IEEE8021-SECY-MIB", "secyRxSCStatsGroup"), ("IEEE8021-SECY-MIB", "secyStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyMIBCompliance = secyMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: secyMIBCompliance.setDescription('The compliance statement for entities which implement the IEEE8021-SECY-MIB.')
secyIfCtrlGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 1)).setObjects(("IEEE8021-SECY-MIB", "secyIfMaxPeerSCs"), ("IEEE8021-SECY-MIB", "secyIfRxMaxKeys"), ("IEEE8021-SECY-MIB", "secyIfTxMaxKeys"), ("IEEE8021-SECY-MIB", "secyIfProtectFramesEnable"), ("IEEE8021-SECY-MIB", "secyIfValidateFrames"), ("IEEE8021-SECY-MIB", "secyIfReplayProtectEnable"), ("IEEE8021-SECY-MIB", "secyIfReplayProtectWindow"), ("IEEE8021-SECY-MIB", "secyIfCurrentCipherSuite"), ("IEEE8021-SECY-MIB", "secyIfAdminPt2PtMAC"), ("IEEE8021-SECY-MIB", "secyIfOperPt2PtMAC"), ("IEEE8021-SECY-MIB", "secyIfIncludeSCIEnable"), ("IEEE8021-SECY-MIB", "secyIfUseESEnable"), ("IEEE8021-SECY-MIB", "secyIfUseSCBEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyIfCtrlGroup = secyIfCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: secyIfCtrlGroup.setDescription('A collection of objects providing a SecY control management information.')
secyTxSCGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 2)).setObjects(("IEEE8021-SECY-MIB", "secyTxSCI"), ("IEEE8021-SECY-MIB", "secyTxSCState"), ("IEEE8021-SECY-MIB", "secyTxSCEncodingSA"), ("IEEE8021-SECY-MIB", "secyTxSCEncipheringSA"), ("IEEE8021-SECY-MIB", "secyTxSCCreatedTime"), ("IEEE8021-SECY-MIB", "secyTxSCStartedTime"), ("IEEE8021-SECY-MIB", "secyTxSCStoppedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyTxSCGroup = secyTxSCGroup.setStatus('current')
if mibBuilder.loadTexts: secyTxSCGroup.setDescription('A collection of objects providing a transmitting SC control management information.')
secyTxSAGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 3)).setObjects(("IEEE8021-SECY-MIB", "secyTxSAState"), ("IEEE8021-SECY-MIB", "secyTxSANextPN"), ("IEEE8021-SECY-MIB", "secyTxSAConfidentiality"), ("IEEE8021-SECY-MIB", "secyTxSASAKUnchanged"), ("IEEE8021-SECY-MIB", "secyTxSACreatedTime"), ("IEEE8021-SECY-MIB", "secyTxSAStartedTime"), ("IEEE8021-SECY-MIB", "secyTxSAStoppedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyTxSAGroup = secyTxSAGroup.setStatus('current')
if mibBuilder.loadTexts: secyTxSAGroup.setDescription('A collection of objects providing a transmitting SA control management information.')
secyRxSCGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 4)).setObjects(("IEEE8021-SECY-MIB", "secyRxSCState"), ("IEEE8021-SECY-MIB", "secyRxSCCurrentSA"), ("IEEE8021-SECY-MIB", "secyRxSCCreatedTime"), ("IEEE8021-SECY-MIB", "secyRxSCStartedTime"), ("IEEE8021-SECY-MIB", "secyRxSCStoppedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyRxSCGroup = secyRxSCGroup.setStatus('current')
if mibBuilder.loadTexts: secyRxSCGroup.setDescription('A collection of objects providing a receiving SC control management information.')
secyRxSAGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 5)).setObjects(("IEEE8021-SECY-MIB", "secyRxSAState"), ("IEEE8021-SECY-MIB", "secyRxSANextPN"), ("IEEE8021-SECY-MIB", "secyRxSASAKUnchanged"), ("IEEE8021-SECY-MIB", "secyRxSACreatedTime"), ("IEEE8021-SECY-MIB", "secyRxSAStartedTime"), ("IEEE8021-SECY-MIB", "secyRxSAStoppedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyRxSAGroup = secyRxSAGroup.setStatus('current')
if mibBuilder.loadTexts: secyRxSAGroup.setDescription('A collection of objects providing a receiving SA control management information.')
secyCipherSuiteGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 6)).setObjects(("IEEE8021-SECY-MIB", "secyCipherSuiteId"), ("IEEE8021-SECY-MIB", "secyCipherSuiteName"), ("IEEE8021-SECY-MIB", "secyCipherSuiteCapability"), ("IEEE8021-SECY-MIB", "secyCipherSuiteProtection"), ("IEEE8021-SECY-MIB", "secyCipherSuiteProtectionOffset"), ("IEEE8021-SECY-MIB", "secyCipherSuiteDataLengthChange"), ("IEEE8021-SECY-MIB", "secyCipherSuiteICVLength"), ("IEEE8021-SECY-MIB", "secyCipherSuiteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyCipherSuiteGroup = secyCipherSuiteGroup.setStatus('current')
if mibBuilder.loadTexts: secyCipherSuiteGroup.setDescription('A collection of objects providing a cipher suite information.')
secyTxSAStatsGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 7)).setObjects(("IEEE8021-SECY-MIB", "secyTxSAStatsProtectedPkts"), ("IEEE8021-SECY-MIB", "secyTxSAStatsEncryptedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyTxSAStatsGroup = secyTxSAStatsGroup.setStatus('current')
if mibBuilder.loadTexts: secyTxSAStatsGroup.setDescription('A collection of objects providing a transmitting SA statistics information.')
secyRxSAStatsGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 8)).setObjects(("IEEE8021-SECY-MIB", "secyRxSAStatsUnusedSAPkts"), ("IEEE8021-SECY-MIB", "secyRxSAStatsNoUsingSAPkts"), ("IEEE8021-SECY-MIB", "secyRxSAStatsNotValidPkts"), ("IEEE8021-SECY-MIB", "secyRxSAStatsInvalidPkts"), ("IEEE8021-SECY-MIB", "secyRxSAStatsOKPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyRxSAStatsGroup = secyRxSAStatsGroup.setStatus('current')
if mibBuilder.loadTexts: secyRxSAStatsGroup.setDescription('A collection of objects providing a receiving SA statistics information.')
secyTxSCStatsGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 9)).setObjects(("IEEE8021-SECY-MIB", "secyTxSCStatsProtectedPkts"), ("IEEE8021-SECY-MIB", "secyTxSCStatsEncryptedPkts"), ("IEEE8021-SECY-MIB", "secyTxSCStatsOctetsProtected"), ("IEEE8021-SECY-MIB", "secyTxSCStatsOctetsEncrypted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyTxSCStatsGroup = secyTxSCStatsGroup.setStatus('current')
if mibBuilder.loadTexts: secyTxSCStatsGroup.setDescription('A collection of objects providing a transmitting SC statistics information.')
secyRxSCStatsGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 10)).setObjects(("IEEE8021-SECY-MIB", "secyRxSCStatsUnusedSAPkts"), ("IEEE8021-SECY-MIB", "secyRxSCStatsNoUsingSAPkts"), ("IEEE8021-SECY-MIB", "secyRxSCStatsLatePkts"), ("IEEE8021-SECY-MIB", "secyRxSCStatsNotValidPkts"), ("IEEE8021-SECY-MIB", "secyRxSCStatsInvalidPkts"), ("IEEE8021-SECY-MIB", "secyRxSCStatsDelayedPkts"), ("IEEE8021-SECY-MIB", "secyRxSCStatsUncheckedPkts"), ("IEEE8021-SECY-MIB", "secyRxSCStatsOKPkts"), ("IEEE8021-SECY-MIB", "secyRxSCStatsOctetsValidated"), ("IEEE8021-SECY-MIB", "secyRxSCStatsOctetsDecrypted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyRxSCStatsGroup = secyRxSCStatsGroup.setStatus('current')
if mibBuilder.loadTexts: secyRxSCStatsGroup.setDescription('A collection of objects providing a receiving SC statistics information.')
secyStatsGroup = ObjectGroup((1, 0, 8802, 1, 1, 3, 2, 2, 11)).setObjects(("IEEE8021-SECY-MIB", "secyStatsTxUntaggedPkts"), ("IEEE8021-SECY-MIB", "secyStatsTxTooLongPkts"), ("IEEE8021-SECY-MIB", "secyStatsRxUntaggedPkts"), ("IEEE8021-SECY-MIB", "secyStatsRxNoTagPkts"), ("IEEE8021-SECY-MIB", "secyStatsRxBadTagPkts"), ("IEEE8021-SECY-MIB", "secyStatsRxUnknownSCIPkts"), ("IEEE8021-SECY-MIB", "secyStatsRxNoSCIPkts"), ("IEEE8021-SECY-MIB", "secyStatsRxOverrunPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    secyStatsGroup = secyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: secyStatsGroup.setDescription('A collection of objects providing a SecY statistics information.')
mibBuilder.exportSymbols("IEEE8021-SECY-MIB", secyRxSATable=secyRxSATable, secyMgmtMIBObjects=secyMgmtMIBObjects, secyRxSA=secyRxSA, secyCipherSuiteCapability=secyCipherSuiteCapability, secyTxSCI=secyTxSCI, secyIfMaxPeerSCs=secyIfMaxPeerSCs, secyIfUseESEnable=secyIfUseESEnable, secyTxSA=secyTxSA, secyIfProtectFramesEnable=secyIfProtectFramesEnable, secyMIBNotifications=secyMIBNotifications, secyTxSCStartedTime=secyTxSCStartedTime, secyStatsTable=secyStatsTable, secyCipherSuiteProtectionOffset=secyCipherSuiteProtectionOffset, secyIfCurrentCipherSuite=secyIfCurrentCipherSuite, secyMIBGroups=secyMIBGroups, secyCipherSuiteEntry=secyCipherSuiteEntry, secyRxSAStatsEntry=secyRxSAStatsEntry, secyTxSAStatsTable=secyTxSAStatsTable, secyTxSCStatsOctetsProtected=secyTxSCStatsOctetsProtected, secyCipherSuiteProtection=secyCipherSuiteProtection, secyTxSCStatsTable=secyTxSCStatsTable, secyCipherSuiteICVLength=secyCipherSuiteICVLength, secyTxSCEntry=secyTxSCEntry, secyRxSCGroup=secyRxSCGroup, secyRxSAStatsGroup=secyRxSAStatsGroup, secyCipherSuiteDataLengthChange=secyCipherSuiteDataLengthChange, secyIfOperPt2PtMAC=secyIfOperPt2PtMAC, secyRxSAStoppedTime=secyRxSAStoppedTime, secyRxSAStatsTable=secyRxSAStatsTable, secyRxSCI=secyRxSCI, secyTxSANextPN=secyTxSANextPN, secyRxSCStatsDelayedPkts=secyRxSCStatsDelayedPkts, secyMIBObjects=secyMIBObjects, secyTxSAStatsProtectedPkts=secyTxSAStatsProtectedPkts, secyIfEntry=secyIfEntry, secyCipherSuiteGroup=secyCipherSuiteGroup, secyTxSCEncodingSA=secyTxSCEncodingSA, secyStatsRxBadTagPkts=secyStatsRxBadTagPkts, secyStatsRxOverrunPkts=secyStatsRxOverrunPkts, secyTxSCStatsOctetsEncrypted=secyTxSCStatsOctetsEncrypted, secyRxSCStatsUncheckedPkts=secyRxSCStatsUncheckedPkts, secyTxSCGroup=secyTxSCGroup, secyTxSATable=secyTxSATable, secyIfTxMaxKeys=secyIfTxMaxKeys, secyRxSAStatsNotValidPkts=secyRxSAStatsNotValidPkts, secyRxSCStatsUnusedSAPkts=secyRxSCStatsUnusedSAPkts, secyRxSCStatsInvalidPkts=secyRxSCStatsInvalidPkts, secyCipherSuiteRowStatus=secyCipherSuiteRowStatus, secyRxSCStatsOctetsValidated=secyRxSCStatsOctetsValidated, secyStatsRxNoSCIPkts=secyStatsRxNoSCIPkts, secyRxSAGroup=secyRxSAGroup, secyRxSCEntry=secyRxSCEntry, secyRxSCState=secyRxSCState, secyTxSACreatedTime=secyTxSACreatedTime, secyIfRxMaxKeys=secyIfRxMaxKeys, secyRxSCStatsGroup=secyRxSCStatsGroup, secyMIBConformance=secyMIBConformance, secyCipherSuiteIndex=secyCipherSuiteIndex, secyRxSCStatsOKPkts=secyRxSCStatsOKPkts, secyTxSASAKUnchanged=secyTxSASAKUnchanged, secyStatsRxNoTagPkts=secyStatsRxNoTagPkts, PYSNMP_MODULE_ID=ieee8021SecyMIB, secyTxSCEncipheringSA=secyTxSCEncipheringSA, secyIfCtrlGroup=secyIfCtrlGroup, secyRxSCStoppedTime=secyRxSCStoppedTime, secyRxSASAKUnchanged=secyRxSASAKUnchanged, secyRxSCStatsLatePkts=secyRxSCStatsLatePkts, secyIfTable=secyIfTable, secyTxSAStatsEntry=secyTxSAStatsEntry, secyTxSAStoppedTime=secyTxSAStoppedTime, secyTxSCStatsProtectedPkts=secyTxSCStatsProtectedPkts, secyRxSAStatsOKPkts=secyRxSAStatsOKPkts, secyTxSAConfidentiality=secyTxSAConfidentiality, SecySCI=SecySCI, secyRxSAStatsNoUsingSAPkts=secyRxSAStatsNoUsingSAPkts, secyTxSAStatsGroup=secyTxSAStatsGroup, secyRxSAStatsInvalidPkts=secyRxSAStatsInvalidPkts, secyMIBCompliances=secyMIBCompliances, secyTxSCStatsEncryptedPkts=secyTxSCStatsEncryptedPkts, secyTxSCTable=secyTxSCTable, secyIfReplayProtectWindow=secyIfReplayProtectWindow, secyTxSAStatsEncryptedPkts=secyTxSAStatsEncryptedPkts, secyRxSAState=secyRxSAState, secyRxSCTable=secyRxSCTable, SecyAN=SecyAN, secyCipherSuiteName=secyCipherSuiteName, secyRxSCCreatedTime=secyRxSCCreatedTime, secyCipherSuiteTable=secyCipherSuiteTable, secyStatsMIBObjects=secyStatsMIBObjects, secyTxSAState=secyTxSAState, secyTxSAGroup=secyTxSAGroup, secyIfUseSCBEnable=secyIfUseSCBEnable, secyRxSCStatsNotValidPkts=secyRxSCStatsNotValidPkts, secyIfInterfaceIndex=secyIfInterfaceIndex, secyStatsRxUnknownSCIPkts=secyStatsRxUnknownSCIPkts, secyTxSCStatsGroup=secyTxSCStatsGroup, secyIfReplayProtectEnable=secyIfReplayProtectEnable, secyStatsRxUntaggedPkts=secyStatsRxUntaggedPkts, ieee8021SecyMIB=ieee8021SecyMIB, secyStatsTxUntaggedPkts=secyStatsTxUntaggedPkts, secyRxSCCurrentSA=secyRxSCCurrentSA, secyTxSCStoppedTime=secyTxSCStoppedTime, secyRxSAStartedTime=secyRxSAStartedTime, secyCipherSuiteId=secyCipherSuiteId, secyRxSAStatsUnusedSAPkts=secyRxSAStatsUnusedSAPkts, secyRxSCStatsTable=secyRxSCStatsTable, secyRxSAEntry=secyRxSAEntry, secyRxSCStatsOctetsDecrypted=secyRxSCStatsOctetsDecrypted, secyStatsTxTooLongPkts=secyStatsTxTooLongPkts, secyRxSACreatedTime=secyRxSACreatedTime, secyIfAdminPt2PtMAC=secyIfAdminPt2PtMAC, secyIfValidateFrames=secyIfValidateFrames, secyRxSCStatsEntry=secyRxSCStatsEntry, secyTxSAEntry=secyTxSAEntry, secyStatsGroup=secyStatsGroup, secyTxSCCreatedTime=secyTxSCCreatedTime, secyMIBCompliance=secyMIBCompliance, secyTxSCStatsEntry=secyTxSCStatsEntry, secyIfIncludeSCIEnable=secyIfIncludeSCIEnable, secyStatsEntry=secyStatsEntry, secyRxSCStartedTime=secyRxSCStartedTime, secyTxSCState=secyTxSCState, secyRxSANextPN=secyRxSANextPN, secyTxSAStartedTime=secyTxSAStartedTime, secyRxSCStatsNoUsingSAPkts=secyRxSCStatsNoUsingSAPkts)
