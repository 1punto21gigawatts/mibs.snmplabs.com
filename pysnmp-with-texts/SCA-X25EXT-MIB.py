#
# PySNMP MIB module SCA-X25EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCA-X25EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Unsigned32, MibIdentifier, iso, Integer32, TimeTicks, Gauge32, NotificationType, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Unsigned32", "MibIdentifier", "iso", "Integer32", "TimeTicks", "Gauge32", "NotificationType", "Bits", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class IfIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

x25ext = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 51))
x25extCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 51, 1))
x25extCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 208, 51, 1, 1), )
if mibBuilder.loadTexts: x25extCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitTable.setDescription('These objects contain general information about a specific circuit of an X.25 PLE.')
x25extCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1), ).setIndexNames((0, "SCA-X25EXT-MIB", "x25extCircuitIndex"), (0, "SCA-X25EXT-MIB", "x25extCircuitChannel"))
if mibBuilder.loadTexts: x25extCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitEntry.setDescription('Entries of x25extCircuitTable.')
x25extCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25extCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitIndex.setDescription('The ifIndex value for the X.25 PLE Interface.')
x25extCircuitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25extCircuitChannel.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitChannel.setDescription('The channel number for this circuit.')
x25extCircuitLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1, 3), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25extCircuitLogicalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitLogicalIndex.setDescription('The ifIndex for a virtual ifEntry accociatedwith this circuit. The same as x25extCircuitIndex if no ifEntry is associated with the circuit.')
x25extCircuitPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25extCircuitPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitPacketSize.setDescription('The packet size in octets used by this circuit.')
x25extCircuitWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25extCircuitWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitWindowSize.setDescription('The window size used by this circuit.')
x25extCircuitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25extCircuitTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitTimeout.setDescription('Seconds left before timeout of the current state. If a call request is sent but no reply received x25extCircuitTimeout will show how many seconds remains before the call request is retransmitted. If the link is up but the current window is 0 x25extCircuitTimeout will show how many seconds remains before the link is reset and x25extCircuitOutFlowStuckResets is incremented.')
x25extCircuitOutResets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25extCircuitOutResets.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitOutResets.setDescription('Total number of resets sent on this circuit.')
x25extCircuitOutFlowStuckResets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 51, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25extCircuitOutFlowStuckResets.setStatus('mandatory')
if mibBuilder.loadTexts: x25extCircuitOutFlowStuckResets.setDescription('Number of resets sent on this circuit because the remote end did not acknoledge packets for a long time.')
mibBuilder.exportSymbols("SCA-X25EXT-MIB", IfIndexType=IfIndexType, x25extCircuitTimeout=x25extCircuitTimeout, x25extCircuitTable=x25extCircuitTable, x25extCircuitIndex=x25extCircuitIndex, x25extCircuitWindowSize=x25extCircuitWindowSize, x25extCircuitOutFlowStuckResets=x25extCircuitOutFlowStuckResets, x25extCircuit=x25extCircuit, x25ext=x25ext, x25extCircuitEntry=x25extCircuitEntry, x25extCircuitChannel=x25extCircuitChannel, x25extCircuitLogicalIndex=x25extCircuitLogicalIndex, x25extCircuitPacketSize=x25extCircuitPacketSize, x25extCircuitOutResets=x25extCircuitOutResets)
