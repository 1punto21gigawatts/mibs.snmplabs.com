#
# PySNMP MIB module DNOS-AUTHENTICATION-MANAGER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-AUTHENTICATION-MANAGER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:51:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibIdentifier, NotificationType, Gauge32, ObjectIdentity, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Bits, Counter64, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "NotificationType", "Gauge32", "ObjectIdentity", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Bits", "Counter64", "Unsigned32", "IpAddress")
DisplayString, MacAddress, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "DateAndTime", "TextualConvention")
fastPathAuthMgr = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61))
fastPathAuthMgr.setRevisions(('2012-12-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathAuthMgr.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: fastPathAuthMgr.setLastUpdated('201212280000Z')
if mibBuilder.loadTexts: fastPathAuthMgr.setOrganization('Dell, Inc.')
if mibBuilder.loadTexts: fastPathAuthMgr.setContactInfo('')
if mibBuilder.loadTexts: fastPathAuthMgr.setDescription('Private MIB for auth mgr')
agentAuthMgrGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 1))
agentAuthMgrAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthMgrAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrAdminMode.setDescription('Enable or disable the authentication manager feature on the system.')
agentAuthMgrInterfaceConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2))
agentAuthMgrInterfaceConfigMethodTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 1), )
if mibBuilder.loadTexts: agentAuthMgrInterfaceConfigMethodTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrInterfaceConfigMethodTable.setDescription('The interface configuration for authentication manager')
agentAuthMgrInterfaceConfigMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 1, 1), ).setIndexNames((0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrIfIndex"), (0, "DNOS-AUTHENTICATION-MANAGER-MIB", "methodIndex"))
if mibBuilder.loadTexts: agentAuthMgrInterfaceConfigMethodEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrInterfaceConfigMethodEntry.setDescription('The authentication manager interface config entry.')
agentAuthMgrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: agentAuthMgrIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrIfIndex.setDescription('The interface index for which the authentication manager config is required.')
methodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: methodIndex.setStatus('current')
if mibBuilder.loadTexts: methodIndex.setDescription('The index of the configuration method.')
agentAuthMgrMethodOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dot1x", 1), ("mab", 2), ("captivePortal", 3))).clone('undefined')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentAuthMgrMethodOrder.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrMethodOrder.setDescription('The authentication methods allowed for order configuration.')
agentAuthMgrMethodPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dot1x", 1), ("mab", 2), ("captivePortal", 3))).clone('undefined')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentAuthMgrMethodPriority.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrMethodPriority.setDescription('The authentication methods allowed for priority configuration.')
agentAuthMgrInterfaceConfigTimerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 2), )
if mibBuilder.loadTexts: agentAuthMgrInterfaceConfigTimerTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrInterfaceConfigTimerTable.setDescription('The interface configuration for authentication manager')
agentAuthMgrInterfaceConfigTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 2, 1), ).setIndexNames((0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrTimerIfIndex"))
if mibBuilder.loadTexts: agentAuthMgrInterfaceConfigTimerEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrInterfaceConfigTimerEntry.setDescription('The Authentication Manager Interface config entry.')
agentAuthMgrTimerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: agentAuthMgrTimerIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrTimerIfIndex.setDescription('The interface ifIndex for which the authentication manager config is required.')
agentAuthMgrRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthMgrRestart.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrRestart.setDescription('The authentication restart timer value.')
agentAuthMgrInterfaceStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 3))
agentAuthMgrInterfaceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 3, 1), )
if mibBuilder.loadTexts: agentAuthMgrInterfaceStatusTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrInterfaceStatusTable.setDescription('The interface configuration for authentication manager')
agentAuthMgrInterfaceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 3, 1, 1), ).setIndexNames((0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrIfIndex"), (0, "DNOS-AUTHENTICATION-MANAGER-MIB", "methodIndex"))
if mibBuilder.loadTexts: agentAuthMgrInterfaceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrInterfaceStatusEntry.setDescription('The authentication manager interface config entry.')
agentAuthMgrStatusMethodOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dot1x", 1), ("mab", 2), ("captivePortal", 3))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrStatusMethodOrder.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrStatusMethodOrder.setDescription('The authentication methods allowed for order configuration.')
agentAuthMgrStatusMethodPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dot1x", 1), ("mab", 2), ("captivePortal", 3))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrStatusMethodPriority.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrStatusMethodPriority.setDescription('The authentication methods allowed for priority configuration.')
agentAuthMgrClientStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 4))
agentAuthMgrClientStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 4, 1), )
if mibBuilder.loadTexts: agentAuthMgrClientStatusTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrClientStatusTable.setDescription('A table for auth mgr client details and associated functionality.')
agentAuthMgrClientStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 4, 1, 1), ).setIndexNames((0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrClientMacAddress"))
if mibBuilder.loadTexts: agentAuthMgrClientStatusEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrClientStatusEntry.setDescription('Represents entry for port config table.')
agentAuthMgrClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 4, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrClientMacAddress.setDescription('Specifies the MAC address of the client.')
agentAuthMgrLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrLogicalPort.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrLogicalPort.setDescription('Specifies the logical port number of the client connection.')
agentAuthMgrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrInterface.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrInterface.setDescription('Specifies the physical interface to which the client is attached.')
agentAuthMgrClientAuthstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorized", 1), ("unauthorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrClientAuthstatus.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrClientAuthstatus.setDescription('The authentication status of the client.')
agentAuthMgrClientAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("dot1x", 1), ("mab", 2), ("captivePortal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrClientAuthMethod.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrClientAuthMethod.setDescription('The method using which the client is authenticated.')
agentAuthMgrAuthHistoryResultsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5))
agentAuthMgrPortAuthHistoryResultTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 1), )
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultTable.setDescription('A table to display history of the authentication manager.')
agentAuthMgrPortAuthHistoryResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 1, 1), ).setIndexNames((0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrAuthHistoryResultIfaceIndex"), (0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrAuthHistoryResultIndex"))
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultEntry.setDescription('Represents authentication manager results in history table.')
agentAuthMgrAuthHistoryResultIfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultIfaceIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultIfaceIndex.setDescription('This object represents the physical bridge port on which dot1x authentication event might be received.')
agentAuthMgrAuthHistoryResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultIndex.setDescription('Reference to the authentication manager authentication history table maintained.')
agentAuthMgrAuthHistoryResultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultTimeStamp.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultTimeStamp.setDescription('Specifies the exact time of authentication manager authentication event information occurred maintained in the history table.')
agentAuthMgrAuthHistoryResultMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultMacAddress.setDescription('Specifies the client MAC address maintained in the authentication history table.')
agentAuthMgrAuthHistoryResultAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultAuthMethod.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultAuthMethod.setDescription('The method using which the client is authenticated.')
agentAuthMgrAuthHistoryResultAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultAuthStatus.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultAuthStatus.setDescription('Specifies the authentication manager authentication status (Success or Failure) for the authentication manager authentication event takes place. ')
agentAuthMgrPortAuthHistoryResultClearTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 3), )
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultClearTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultClearTable.setDescription('A table to clear the authentication manager authentication history per interface.')
agentAuthMgrPortAuthHistoryResultClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 3, 1), ).setIndexNames((0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrAuthHistoryResultIfIndex"))
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultClearEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultClearEntry.setDescription('Represents to clear the authentication manager authentication results for an authentication manager authentication history table.')
agentAuthMgrAuthHistoryResultIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrAuthHistoryResultIfIndex.setDescription('This object represents the physical Bridge Port on which authentication event might be received.')
agentAuthMgrPortAuthHistoryResultsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultsClear.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortAuthHistoryResultsClear.setDescription('When set to enable(1), all authentication manager authentication history information for the given port will be reset. The value is write-only. Attempt to read will return disable(2).')
agentAuthMgrAuthStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6))
agentAuthMgrPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 1), )
if mibBuilder.loadTexts: agentAuthMgrPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortStatsTable.setDescription('A table to display the authentication manager statistics.')
agentAuthMgrPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 1, 1), ).setIndexNames((0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrPortIfaceIndex"), (0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrPortMethodIndex"))
if mibBuilder.loadTexts: agentAuthMgrPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortStatsEntry.setDescription('Represents authentication manager statistics per port.')
agentAuthMgrPortIfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentAuthMgrPortIfaceIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortIfaceIndex.setDescription('This object represents the physical bridge port on which statistics are retrieved.')
agentAuthMgrPortMethodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1x", 1), ("mab", 2), ("captivePortal", 3))))
if mibBuilder.loadTexts: agentAuthMgrPortMethodIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortMethodIndex.setDescription('The index of the authentication method for which statistics are reviewed.')
agentAuthMgrPortStatsAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrPortStatsAttempts.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortStatsAttempts.setDescription('Specifies the number of successful authentications events of specified method on specified port.')
agentAuthMgrPortStatsFailedAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthMgrPortStatsFailedAttempts.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortStatsFailedAttempts.setDescription('Specifies the number of unsuccessful authentications attempts of specified method on specified port.')
agentAuthMgrPortStatsClearTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 2), )
if mibBuilder.loadTexts: agentAuthMgrPortStatsClearTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortStatsClearTable.setDescription('A table to clear the authentication manager statistics.')
agentAuthMgrPortStatsClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 2, 1), ).setIndexNames((0, "DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrPortIfaceIndex"))
if mibBuilder.loadTexts: agentAuthMgrPortStatsClearEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortStatsClearEntry.setDescription('Represents to clear the authentication manager statistics per interface.')
agentAuthMgrPortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthMgrPortStatsClear.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrPortStatsClear.setDescription('When set to enable(1), all authentication manager statistics for the given port will be reset. The value is write-only. Attempt to read will return disable(2).')
agentAuthMgrTrapsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 7))
authMgrTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authMgrTrapMode.setStatus('current')
if mibBuilder.loadTexts: authMgrTrapMode.setDescription('This object enables/disables the user manager trap mode.')
fastpathAuthMgrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 0))
agentAuthMgrClientAuthStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 61, 0, 1)).setObjects(("DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrInterface"), ("DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrClientMacAddress"), ("DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrClientAuthMethod"), ("DNOS-AUTHENTICATION-MANAGER-MIB", "agentAuthMgrClientAuthstatus"))
if mibBuilder.loadTexts: agentAuthMgrClientAuthStatusTrap.setStatus('current')
if mibBuilder.loadTexts: agentAuthMgrClientAuthStatusTrap.setDescription('Trap is sent from Auth Mgr when client is authorised/un-authorised.')
mibBuilder.exportSymbols("DNOS-AUTHENTICATION-MANAGER-MIB", agentAuthMgrPortStatsClear=agentAuthMgrPortStatsClear, agentAuthMgrAuthHistoryResultIndex=agentAuthMgrAuthHistoryResultIndex, agentAuthMgrClientAuthMethod=agentAuthMgrClientAuthMethod, agentAuthMgrPortMethodIndex=agentAuthMgrPortMethodIndex, agentAuthMgrStatusMethodOrder=agentAuthMgrStatusMethodOrder, agentAuthMgrClientStatusEntry=agentAuthMgrClientStatusEntry, agentAuthMgrPortStatsAttempts=agentAuthMgrPortStatsAttempts, fastPathAuthMgr=fastPathAuthMgr, agentAuthMgrMethodPriority=agentAuthMgrMethodPriority, agentAuthMgrAdminMode=agentAuthMgrAdminMode, agentAuthMgrClientMacAddress=agentAuthMgrClientMacAddress, agentAuthMgrClientAuthstatus=agentAuthMgrClientAuthstatus, agentAuthMgrPortStatsFailedAttempts=agentAuthMgrPortStatsFailedAttempts, PYSNMP_MODULE_ID=fastPathAuthMgr, agentAuthMgrAuthHistoryResultIfaceIndex=agentAuthMgrAuthHistoryResultIfaceIndex, agentAuthMgrRestart=agentAuthMgrRestart, agentAuthMgrInterfaceConfigMethodTable=agentAuthMgrInterfaceConfigMethodTable, agentAuthMgrInterfaceConfigTimerEntry=agentAuthMgrInterfaceConfigTimerEntry, agentAuthMgrAuthHistoryResultIfIndex=agentAuthMgrAuthHistoryResultIfIndex, agentAuthMgrAuthHistoryResultTimeStamp=agentAuthMgrAuthHistoryResultTimeStamp, agentAuthMgrTrapsConfigGroup=agentAuthMgrTrapsConfigGroup, agentAuthMgrPortAuthHistoryResultClearEntry=agentAuthMgrPortAuthHistoryResultClearEntry, agentAuthMgrMethodOrder=agentAuthMgrMethodOrder, agentAuthMgrGlobalConfigGroup=agentAuthMgrGlobalConfigGroup, agentAuthMgrInterfaceConfigMethodEntry=agentAuthMgrInterfaceConfigMethodEntry, agentAuthMgrInterfaceStatusTable=agentAuthMgrInterfaceStatusTable, agentAuthMgrIfIndex=agentAuthMgrIfIndex, agentAuthMgrPortAuthHistoryResultClearTable=agentAuthMgrPortAuthHistoryResultClearTable, agentAuthMgrPortAuthHistoryResultEntry=agentAuthMgrPortAuthHistoryResultEntry, agentAuthMgrPortStatsEntry=agentAuthMgrPortStatsEntry, agentAuthMgrStatusMethodPriority=agentAuthMgrStatusMethodPriority, agentAuthMgrPortAuthHistoryResultTable=agentAuthMgrPortAuthHistoryResultTable, agentAuthMgrAuthHistoryResultMacAddress=agentAuthMgrAuthHistoryResultMacAddress, agentAuthMgrInterfaceConfigGroup=agentAuthMgrInterfaceConfigGroup, agentAuthMgrClientStatusGroup=agentAuthMgrClientStatusGroup, agentAuthMgrInterface=agentAuthMgrInterface, agentAuthMgrClientStatusTable=agentAuthMgrClientStatusTable, agentAuthMgrInterfaceConfigTimerTable=agentAuthMgrInterfaceConfigTimerTable, agentAuthMgrPortAuthHistoryResultsClear=agentAuthMgrPortAuthHistoryResultsClear, agentAuthMgrAuthStatsGroup=agentAuthMgrAuthStatsGroup, agentAuthMgrTimerIfIndex=agentAuthMgrTimerIfIndex, agentAuthMgrInterfaceStatusEntry=agentAuthMgrInterfaceStatusEntry, agentAuthMgrAuthHistoryResultsGroup=agentAuthMgrAuthHistoryResultsGroup, agentAuthMgrPortStatsClearEntry=agentAuthMgrPortStatsClearEntry, fastpathAuthMgrTraps=fastpathAuthMgrTraps, agentAuthMgrPortIfaceIndex=agentAuthMgrPortIfaceIndex, authMgrTrapMode=authMgrTrapMode, agentAuthMgrClientAuthStatusTrap=agentAuthMgrClientAuthStatusTrap, agentAuthMgrAuthHistoryResultAuthStatus=agentAuthMgrAuthHistoryResultAuthStatus, methodIndex=methodIndex, agentAuthMgrInterfaceStatusGroup=agentAuthMgrInterfaceStatusGroup, agentAuthMgrPortStatsClearTable=agentAuthMgrPortStatsClearTable, agentAuthMgrAuthHistoryResultAuthMethod=agentAuthMgrAuthHistoryResultAuthMethod, agentAuthMgrPortStatsTable=agentAuthMgrPortStatsTable, agentAuthMgrLogicalPort=agentAuthMgrLogicalPort)
