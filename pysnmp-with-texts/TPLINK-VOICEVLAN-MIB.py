#
# PySNMP MIB module TPLINK-VOICEVLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-VOICEVLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, Counter64, Unsigned32, ModuleIdentity, MibIdentifier, NotificationType, IpAddress, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Counter64", "Unsigned32", "ModuleIdentity", "MibIdentifier", "NotificationType", "IpAddress", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
tplinkVoiceVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 19))
tplinkVoiceVlanMIB.setRevisions(('2012-12-13 16:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkVoiceVlanMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkVoiceVlanMIB.setLastUpdated('201212131630Z')
if mibBuilder.loadTexts: tplinkVoiceVlanMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkVoiceVlanMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkVoiceVlanMIB.setDescription('Private MIB for voice vlan configuration.')
tplinkVoiceVlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1))
tplinkVoiceVlanMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 19, 2))
voiceVlanGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 1))
voiceVlanGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: voiceVlanGlobalEnable.setDescription('Select Enable/Disable Voice VLAN function. 0. disable 1. enable')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
if mibBuilder.loadTexts: voiceVlanId.setDescription('Enter the VLAN ID of the voice VLAN,2-4094.')
voiceVlanAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: voiceVlanAgingTime.setDescription('Specifies the living time of the member port in auto mode after the OUI address is aging out,1-43200 minute.')
voiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cos0", 0), ("cos1", 1), ("cos2", 2), ("cos3", 3), ("cos4", 4), ("cos5", 5), ("cos6", 6), ("cos7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPriority.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPriority.setDescription('Select the priority of the port when sending voice data. 0. Cos0 1. Cos1 2. Cos2 3. Cos3 4. Cos4 5. Cos5 6. Cos6 7. Cos7')
voiceVlanPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 2))
voiceVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 2, 1), )
if mibBuilder.loadTexts: voiceVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortTable.setDescription('Here you can configure the parameters of the ports in the voice VLAN..')
voiceVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voiceVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortEntry.setDescription('An entry contains of the information of port param.')
voiceVlanPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceVlanPortNumber.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortNumber.setDescription('Displays the port number of the Switch.')
voiceVlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortMode.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortMode.setDescription('Select the mode for the port to join the voice VLAN. 0. manual: In this mode, you can manually add a port to the voice VLAN or remove a port from the voice VLAN 1. auto: In this mode, the switch automatically adds a port to the voice VLAN or removes a port from the voice VLAN by checking whether the port receives voice data or not.')
voiceVlanPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortSecurity.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortSecurity.setDescription('Configure the security mode for forwarding packets. 0. disable:All packets are forwarded. 1. enable:Only voice data are forwarded.')
voiceVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceVlanPortStatus.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortStatus.setDescription('Displays the state of the port in the current voice VLAN. 0. inactive 1. active')
voiceVlanPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceVlanPortLag.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortLag.setDescription('Displays the LAG number which the port belongs to.')
voiceVlanOuiConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 3))
voiceVlanOuiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 3, 1), )
if mibBuilder.loadTexts: voiceVlanOuiConfigTable.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiConfigTable.setDescription('The switch determines whether a received packet is a voice packet by checking its source MAC address. If the source MAC addresses of packets comply with the OUI (organizationally unique identifier) addresses configured by the system, the packets are recognized as voice packets and transmitted in voice VLAN.')
voiceVlanOuiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 3, 1, 1), ).setIndexNames((0, "TPLINK-VOICEVLAN-MIB", "voiceVlanOui"))
if mibBuilder.loadTexts: voiceVlanOuiConfigEntry.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiConfigEntry.setDescription('An entry contains of the information of a voice vlan oui.')
voiceVlanOui = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voiceVlanOui.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOui.setDescription('Enter the OUI address of the voice device.')
voiceVlanOuiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voiceVlanOuiMask.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiMask.setDescription('Enter the OUI address mask of the voice device.')
voiceVlanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voiceVlanDescription.setStatus('current')
if mibBuilder.loadTexts: voiceVlanDescription.setDescription('Give a description to the OUI for identification,1-16 characters.')
voiceVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 19, 1, 3, 1, 1, 4), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voiceVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: voiceVlanRowStatus.setDescription('the following two values are states: these values may be read or written active(1), notInService(2), the following value is a state: this value may be read, but not written notReady(3), the following three values are actions: these values may be written, but are never read createAndGo(4), createAndWait(5), destroy(6)')
mibBuilder.exportSymbols("TPLINK-VOICEVLAN-MIB", voiceVlanGlobalEnable=voiceVlanGlobalEnable, voiceVlanGlobalConfig=voiceVlanGlobalConfig, voiceVlanRowStatus=voiceVlanRowStatus, voiceVlanOuiConfigTable=voiceVlanOuiConfigTable, PYSNMP_MODULE_ID=tplinkVoiceVlanMIB, tplinkVoiceVlanMIBNotifications=tplinkVoiceVlanMIBNotifications, voiceVlanPortEntry=voiceVlanPortEntry, voiceVlanPortConfig=voiceVlanPortConfig, tplinkVoiceVlanMIBObjects=tplinkVoiceVlanMIBObjects, voiceVlanPortTable=voiceVlanPortTable, voiceVlanOuiConfig=voiceVlanOuiConfig, voiceVlanPortNumber=voiceVlanPortNumber, voiceVlanPortStatus=voiceVlanPortStatus, tplinkVoiceVlanMIB=tplinkVoiceVlanMIB, voiceVlanPortSecurity=voiceVlanPortSecurity, voiceVlanAgingTime=voiceVlanAgingTime, voiceVlanDescription=voiceVlanDescription, voiceVlanPortLag=voiceVlanPortLag, voiceVlanOui=voiceVlanOui, voiceVlanPriority=voiceVlanPriority, voiceVlanPortMode=voiceVlanPortMode, voiceVlanOuiMask=voiceVlanOuiMask, voiceVlanOuiConfigEntry=voiceVlanOuiConfigEntry, voiceVlanId=voiceVlanId)
