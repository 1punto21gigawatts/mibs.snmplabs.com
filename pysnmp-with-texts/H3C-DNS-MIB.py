#
# PySNMP MIB module H3C-DNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-DNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, iso, IpAddress, Integer32, TimeTicks, NotificationType, MibIdentifier, Counter64, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "IpAddress", "Integer32", "TimeTicks", "NotificationType", "MibIdentifier", "Counter64", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "ModuleIdentity")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
h3cDns = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97))
h3cDns.setRevisions(('2009-02-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cDns.setRevisionsDescriptions((' ',))
if mibBuilder.loadTexts: h3cDns.setLastUpdated('200902120000Z')
if mibBuilder.loadTexts: h3cDns.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: h3cDns.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: h3cDns.setDescription('This MIB contains objects to manage the DNS.')
h3cDnsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1))
h3cDnsStaticSrvIpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 1), )
if mibBuilder.loadTexts: h3cDnsStaticSrvIpTable.setStatus('current')
if mibBuilder.loadTexts: h3cDnsStaticSrvIpTable.setDescription(' This table is a list of DNS static server IPv4 address configuration, which is manually specified. ')
h3cDnsStaticSrvIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 1, 1), ).setIndexNames((0, "H3C-DNS-MIB", "h3cDnsStaticSrvIpType"), (0, "H3C-DNS-MIB", "h3cDnsStaticSrvIpAddr"))
if mibBuilder.loadTexts: h3cDnsStaticSrvIpEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDnsStaticSrvIpEntry.setDescription(' An entry of h3cDnsStaticSrvIpTable. ')
h3cDnsStaticSrvIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: h3cDnsStaticSrvIpType.setStatus('current')
if mibBuilder.loadTexts: h3cDnsStaticSrvIpType.setDescription(' This node gives the type of the static DNS server IP address. ')
h3cDnsStaticSrvIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cDnsStaticSrvIpAddr.setStatus('current')
if mibBuilder.loadTexts: h3cDnsStaticSrvIpAddr.setDescription(' This node gives the IP address of the DNS server specified by the user. ')
h3cDnsStaticSrvIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDnsStaticSrvIpPriority.setStatus('current')
if mibBuilder.loadTexts: h3cDnsStaticSrvIpPriority.setDescription(' This node gives the priority of the DNS server, according to the creation order. The smaller the value is, the higher the priority level is. ')
h3cDnsStaticSrvIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDnsStaticSrvIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDnsStaticSrvIpRowStatus.setDescription(' This node gives the operation status of this table entry. ')
h3cDnsDynamicSrvIpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 2), )
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpTable.setStatus('current')
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpTable.setDescription(' This table is a list of DNS dynamic server IPv4 address configuration, which is dynamically obtained through DHCP. ')
h3cDnsDynamicSrvIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 2, 1), ).setIndexNames((0, "H3C-DNS-MIB", "h3cDnsDynamicSrvIpType"), (0, "H3C-DNS-MIB", "h3cDnsDynamicSrvIpAddr"))
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpEntry.setDescription('An entry of h3cDnsDynamicSrvIpTable.')
h3cDnsDynamicSrvIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpType.setStatus('current')
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpType.setDescription(' This node gives the type of the dynamic DNS server IP address. ')
h3cDnsDynamicSrvIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpAddr.setStatus('current')
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpAddr.setDescription(' This node gives the IP address of the DNS server dynamically obtained through DHCP. ')
h3cDnsDynamicSrvIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpPriority.setStatus('current')
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpPriority.setDescription(' This node gives the priority of the DNS server, according to the order obtained through DHCP. The smaller the value is, the higher the priority level is. ')
h3cDnsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 2))
h3cDnsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 2, 1))
h3cDnsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 2, 1, 1)).setObjects(("H3C-DNS-MIB", "h3cDnsStaticSrvIpGroup"), ("H3C-DNS-MIB", "h3cDnsDynamicSrvIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDnsMIBCompliance = h3cDnsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: h3cDnsMIBCompliance.setDescription(' The compliance statement for entities which implement the DNS MIB. ')
h3cDnsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 2, 2))
h3cDnsStaticSrvIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 2, 2, 1)).setObjects(("H3C-DNS-MIB", "h3cDnsStaticSrvIpPriority"), ("H3C-DNS-MIB", "h3cDnsStaticSrvIpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDnsStaticSrvIpGroup = h3cDnsStaticSrvIpGroup.setStatus('current')
if mibBuilder.loadTexts: h3cDnsStaticSrvIpGroup.setDescription(' A collection of objects providing mandatory DNS server IP addresses manually specified. ')
h3cDnsDynamicSrvIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 97, 2, 2, 2)).setObjects(("H3C-DNS-MIB", "h3cDnsDynamicSrvIpPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h3cDnsDynamicSrvIpGroup = h3cDnsDynamicSrvIpGroup.setStatus('current')
if mibBuilder.loadTexts: h3cDnsDynamicSrvIpGroup.setDescription(' A collection of objects providing mandatory DNS server IP addresses dynamically obtained through DHCP. ')
mibBuilder.exportSymbols("H3C-DNS-MIB", h3cDnsDynamicSrvIpPriority=h3cDnsDynamicSrvIpPriority, h3cDnsStaticSrvIpEntry=h3cDnsStaticSrvIpEntry, h3cDnsStaticSrvIpTable=h3cDnsStaticSrvIpTable, PYSNMP_MODULE_ID=h3cDns, h3cDnsMIBGroups=h3cDnsMIBGroups, h3cDns=h3cDns, h3cDnsDynamicSrvIpTable=h3cDnsDynamicSrvIpTable, h3cDnsDynamicSrvIpEntry=h3cDnsDynamicSrvIpEntry, h3cDnsStaticSrvIpType=h3cDnsStaticSrvIpType, h3cDnsStaticSrvIpPriority=h3cDnsStaticSrvIpPriority, h3cDnsMIBConformance=h3cDnsMIBConformance, h3cDnsMIBCompliances=h3cDnsMIBCompliances, h3cDnsDynamicSrvIpAddr=h3cDnsDynamicSrvIpAddr, h3cDnsDynamicSrvIpGroup=h3cDnsDynamicSrvIpGroup, h3cDnsStaticSrvIpAddr=h3cDnsStaticSrvIpAddr, h3cDnsDynamicSrvIpType=h3cDnsDynamicSrvIpType, h3cDnsMIBCompliance=h3cDnsMIBCompliance, h3cDnsStaticSrvIpGroup=h3cDnsStaticSrvIpGroup, h3cDnsStaticSrvIpRowStatus=h3cDnsStaticSrvIpRowStatus, h3cDnsObjects=h3cDnsObjects)
