#
# PySNMP MIB module ATMF-CES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATMF-CES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, Integer32, ObjectIdentity, Unsigned32, TimeTicks, Counter64, enterprises, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Integer32", "ObjectIdentity", "Unsigned32", "TimeTicks", "Counter64", "enterprises", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ModuleIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmfCESmib = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 2))
if mibBuilder.loadTexts: atmfCESmib.setLastUpdated('9911060000z')
if mibBuilder.loadTexts: atmfCESmib.setOrganization('The ATM Forum')
if mibBuilder.loadTexts: atmfCESmib.setContactInfo('Postal: The ATM Forum 2570 West El Camino Real, Suite 304 Mountain View, CA 94040-1313 USA Phone: +1 415-949-6700 Fax: +1 415-949-6705 info@atmforum.com')
if mibBuilder.loadTexts: atmfCESmib.setDescription('Circuit Emulation Specification')
atmfDS1E1CESmib = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2, 1))
atmfDS1E1CESConfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1), )
if mibBuilder.loadTexts: atmfDS1E1CESConfTable.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESConfTable.setDescription('The CES configuration table. This includes mapping channels from ATM Port to CBR interfaces. There is one atmfDS1E1CESConfEntry per CES Entity')
atmfDS1E1CESConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfDS1E1CESConfEntry.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESConfEntry.setDescription('An entry in the CES table. For each entry there is a corresponding entry in the stack table')
atmfDS1E1CESMapATMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESMapATMIndex.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESMapATMIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM Port interface mapped through this CES to a CBR interface.")
atmfDS1E1CESMapVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESMapVPI.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESMapVPI.setDescription('The value of this object is equal to the VPI used for the emulated circuit represented by this entry in the ifTable. If there is no connection, this object is meaningless and will have the value zero.')
atmfDS1E1CESMapVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESMapVCI.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESMapVCI.setDescription('The value of this object is equal to the VCI used for the emulated circuit represented by this entry in the ifTable. If there is no connection, this object is meaningless and will have the value zero')
atmfDS1E1CESCBRService = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCBRService.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESCBRService.setDescription('Define if DS1/E1 service as structured or not. A structured(2) interface is some nx64Kbps. An unstructured (1) interface is 1.544Mbps or 2.048Mbps. unstructured(1) passes all bits through the ATM network. strucutured(2) passes data bits through the ATM network, and may also pass signalling bits')
atmfDS1E1CESCBRClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("synchronous", 1), ("srts", 2), ("adaptive", 3))).clone('synchronous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCBRClockMode.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESCBRClockMode.setDescription('Define if DS1/E1 service clocking mode. This maps into transmit clock source of CBR interface.')
atmfDS1E1CESCas = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("basic", 1), ("e1Cas", 2), ("ds1SfCas", 3), ("ds1EsfCas", 4))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCas.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESCas.setDescription('This parameter selects which AAL1 Format should be used: Basic does not carry CAS bits, and uses a single 125 usec frame. E1Cas, Ds1SfCas and DS1EsfCas carry CAS bits in a multiframe structure for E1, DS1 SF and DS1 ESF respectively. This applies to structured interfaces only. Default is Basic (1).')
atmfDS1E1CESPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESPartialFill.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESPartialFill.setDescription('If partial cell fill is used, the number of user octets per cell must be set with this parameter. Setting this parameter to zero disables partial cell fill, and causes all cells to be completely filled before they are sent.')
atmfDS1E1CESBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESBufMaxSize.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESBufMaxSize.setDescription('Define maximum size in octets of the reassembly buffer. Some implementations may want allow the maximum buffer size to programmed to a size less than the physical limit to reduce the maximum delay through a circuit.')
atmfDS1E1CESCDVRxT = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 9), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCDVRxT.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESCDVRxT.setDescription("UNITS `10usec'. The maximum cell arrival jitter in 10usec increments that the reassembly process will tolerate in the cell stream without producing errors in the CBR service interface")
atmfDS1E1CESCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(2500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCellLossIntegrationPeriod.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESCellLossIntegrationPeriod.setDescription("The time in milliseconds for the cell loss integration period. If a cells are lost for this period of time. atmfDS1E1CESCellLossStatus is set to loss (2).The mandatory definition is 2500 UNITS `msec'")
atmfDS1E1CESStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2), )
if mibBuilder.loadTexts: atmfDS1E1CESStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESStatsTable.setDescription('The CES AAL1 statistical data table.')
atmfDS1E1CESStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfDS1E1CESStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESStatsEntry.setDescription('An entry in the CES AAL1 Stats table.')
atmfDS1E1CESReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESReassCells.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESReassCells.setDescription('This count gives the number of cells played out to the DS1/E1 Service Interface. It excludes cells that were discarded for any reason, including cells that were not used due to being declared misinserted, or discarded while the reassembler was waiting to achieve synchronization.')
atmfDS1E1CESHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESHdrErrors.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESHdrErrors.setDescription('The count of the number of AAL1 header errors detected and possibly corrected. Header errors include correctable and uncorrectable CRC, plus bad parity.')
atmfDS1E1CESPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESPointerReframes.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESPointerReframes.setDescription('This records the count of the number of events in which the AAL1 reassembler found that an SDT pointer is not where it is expected, and the pointer must be reacquired.')
atmfDS1E1CESLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESLostCells.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESLostCells.setDescription('Number of lost cells.')
atmfDS1E1CESBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESBufUnderflows.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESBufUnderflows.setDescription('Number of buffer underflows.')
atmfDS1E1CESBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESBufOverflows.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESBufOverflows.setDescription('Number of buffer overflows.')
atmfDS1E1CESCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2), ("idle", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESCellLossStatus.setStatus('current')
if mibBuilder.loadTexts: atmfDS1E1CESCellLossStatus.setDescription('When cells are lost for the number of milliseconds specified by atmfDS1E1CESCellLossIntegrationPeriod, the value is set to loss (2). When cells are no longer lost, the value is set to noLoss (1). An additional variable idle os added to indicate cbrct connections status of Idle.')
mibBuilder.exportSymbols("ATMF-CES-MIB", atmfDS1E1CESmib=atmfDS1E1CESmib, atmfDS1E1CESCDVRxT=atmfDS1E1CESCDVRxT, atmfDS1E1CESHdrErrors=atmfDS1E1CESHdrErrors, atmfDS1E1CESMapVPI=atmfDS1E1CESMapVPI, atmfDS1E1CESConfTable=atmfDS1E1CESConfTable, atmfDS1E1CESMapATMIndex=atmfDS1E1CESMapATMIndex, atmfDS1E1CESStatsEntry=atmfDS1E1CESStatsEntry, atmfDS1E1CESReassCells=atmfDS1E1CESReassCells, PYSNMP_MODULE_ID=atmfCESmib, atmfDS1E1CESConfEntry=atmfDS1E1CESConfEntry, atmfDS1E1CESBufUnderflows=atmfDS1E1CESBufUnderflows, atmfDS1E1CESPartialFill=atmfDS1E1CESPartialFill, atmfDS1E1CESBufOverflows=atmfDS1E1CESBufOverflows, atmfDS1E1CESBufMaxSize=atmfDS1E1CESBufMaxSize, atmfDS1E1CESMapVCI=atmfDS1E1CESMapVCI, atmfDS1E1CESCellLossStatus=atmfDS1E1CESCellLossStatus, atmfDS1E1CESCBRService=atmfDS1E1CESCBRService, atmfDS1E1CESCas=atmfDS1E1CESCas, atmfDS1E1CESPointerReframes=atmfDS1E1CESPointerReframes, atmfDS1E1CESCBRClockMode=atmfDS1E1CESCBRClockMode, atmfCESmib=atmfCESmib, atmfDS1E1CESLostCells=atmfDS1E1CESLostCells, atmfDS1E1CESStatsTable=atmfDS1E1CESStatsTable, atmfDS1E1CESCellLossIntegrationPeriod=atmfDS1E1CESCellLossIntegrationPeriod)
